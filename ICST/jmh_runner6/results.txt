=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipLastTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipLastTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 462553.089 ops/s
# Warmup Iteration   2: 632565.388 ops/s
# Warmup Iteration   3: 626000.787 ops/s
# Warmup Iteration   4: 679896.619 ops/s
# Warmup Iteration   5: 692935.178 ops/s
# Warmup Iteration   6: 690343.802 ops/s
# Warmup Iteration   7: 687796.087 ops/s
# Warmup Iteration   8: 691570.722 ops/s
# Warmup Iteration   9: 690788.187 ops/s
# Warmup Iteration  10: 692034.534 ops/s
# Warmup Iteration  11: 687257.540 ops/s
# Warmup Iteration  12: 690657.393 ops/s
# Warmup Iteration  13: 688542.565 ops/s
# Warmup Iteration  14: 684537.489 ops/s
# Warmup Iteration  15: 687137.741 ops/s
# Warmup Iteration  16: 688044.880 ops/s
# Warmup Iteration  17: 715359.474 ops/s
# Warmup Iteration  18: 711520.477 ops/s
# Warmup Iteration  19: 713731.487 ops/s
# Warmup Iteration  20: 714998.416 ops/s
# Warmup Iteration  21: 712601.135 ops/s
# Warmup Iteration  22: 713771.172 ops/s
# Warmup Iteration  23: 710352.027 ops/s
# Warmup Iteration  24: 715476.955 ops/s
# Warmup Iteration  25: 709788.697 ops/s
# Warmup Iteration  26: 713217.192 ops/s
# Warmup Iteration  27: 719516.884 ops/s
# Warmup Iteration  28: 715194.380 ops/s
# Warmup Iteration  29: 715020.730 ops/s
# Warmup Iteration  30: 712176.368 ops/s
Iteration   1: 713938.151 ops/s
Iteration   2: 714626.444 ops/s
Iteration   3: 712288.319 ops/s
Iteration   4: 714162.571 ops/s
Iteration   5: 717377.499 ops/s
Iteration   6: 717133.495 ops/s
Iteration   7: 715802.872 ops/s
Iteration   8: 718135.115 ops/s
Iteration   9: 710786.957 ops/s
Iteration  10: 716642.789 ops/s
Iteration  11: 714924.360 ops/s
Iteration  12: 713650.215 ops/s
Iteration  13: 718243.253 ops/s
Iteration  14: 717643.247 ops/s
Iteration  15: 715145.640 ops/s
Iteration  16: 713008.054 ops/s
Iteration  17: 711180.211 ops/s
Iteration  18: 712949.849 ops/s
Iteration  19: 714991.179 ops/s
Iteration  20: 715794.824 ops/s
Iteration  21: 716923.371 ops/s
Iteration  22: 714137.298 ops/s
Iteration  23: 709714.080 ops/s
Iteration  24: 717262.932 ops/s
Iteration  25: 714077.051 ops/s
Iteration  26: 716097.232 ops/s
Iteration  27: 708676.972 ops/s
Iteration  28: 711291.118 ops/s
Iteration  29: 711224.181 ops/s
Iteration  30: 712380.143 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipLastTest._Benchmark.benchmark_doubleOnSubscribe":
  714340.314 ±(99.9%) 1730.517 ops/s [Average]
  (min, avg, max) = (708676.972, 714340.314, 718243.253), stdev = 2590.156
  CI (99.9%): [712609.797, 716070.831] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
FlowableSkipLastTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  714340.314 ± 1730.517  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_timestampUnitNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_timestampUnitNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 860784.923 ops/s
# Warmup Iteration   2: 962259.440 ops/s
# Warmup Iteration   3: 932909.694 ops/s
# Warmup Iteration   4: 1005168.465 ops/s
# Warmup Iteration   5: 999262.428 ops/s
# Warmup Iteration   6: 1000214.951 ops/s
# Warmup Iteration   7: 1003521.721 ops/s
# Warmup Iteration   8: 994336.079 ops/s
# Warmup Iteration   9: 1002413.238 ops/s
# Warmup Iteration  10: 996164.984 ops/s
# Warmup Iteration  11: 992862.639 ops/s
# Warmup Iteration  12: 998918.016 ops/s
# Warmup Iteration  13: 995152.711 ops/s
# Warmup Iteration  14: 995441.503 ops/s
# Warmup Iteration  15: 996828.848 ops/s
# Warmup Iteration  16: 997231.481 ops/s
# Warmup Iteration  17: 1058306.275 ops/s
# Warmup Iteration  18: 1068207.615 ops/s
# Warmup Iteration  19: 1065719.042 ops/s
# Warmup Iteration  20: 1063487.201 ops/s
# Warmup Iteration  21: 1061444.345 ops/s
# Warmup Iteration  22: 1065476.842 ops/s
# Warmup Iteration  23: 1064878.633 ops/s
# Warmup Iteration  24: 1065275.893 ops/s
# Warmup Iteration  25: 1060286.558 ops/s
# Warmup Iteration  26: 1066801.069 ops/s
# Warmup Iteration  27: 1061280.793 ops/s
# Warmup Iteration  28: 1063110.484 ops/s
# Warmup Iteration  29: 1064840.717 ops/s
# Warmup Iteration  30: 1067140.239 ops/s
Iteration   1: 1069789.504 ops/s
Iteration   2: 1054671.954 ops/s
Iteration   3: 1066031.231 ops/s
Iteration   4: 1063303.127 ops/s
Iteration   5: 1063142.269 ops/s
Iteration   6: 1058719.737 ops/s
Iteration   7: 1058630.275 ops/s
Iteration   8: 1061280.655 ops/s
Iteration   9: 1066042.392 ops/s
Iteration  10: 1063605.022 ops/s
Iteration  11: 1064739.638 ops/s
Iteration  12: 1060139.128 ops/s
Iteration  13: 1068790.537 ops/s
Iteration  14: 1064821.495 ops/s
Iteration  15: 1064927.554 ops/s
Iteration  16: 1061808.011 ops/s
Iteration  17: 1060742.087 ops/s
Iteration  18: 1061507.131 ops/s
Iteration  19: 1064365.267 ops/s
Iteration  20: 999174.725 ops/s
Iteration  21: 1059085.498 ops/s
Iteration  22: 1066060.420 ops/s
Iteration  23: 1061335.813 ops/s
Iteration  24: 1065774.924 ops/s
Iteration  25: 1069289.403 ops/s
Iteration  26: 1066516.847 ops/s
Iteration  27: 1067575.539 ops/s
Iteration  28: 1065681.551 ops/s
Iteration  29: 1066116.598 ops/s
Iteration  30: 1064825.266 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_timestampUnitNull":
  1061616.453 ±(99.9%) 8212.372 ops/s [Average]
  (min, avg, max) = (999174.725, 1061616.453, 1069789.504), stdev = 12291.893
  CI (99.9%): [1053404.081, 1069828.826] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
FlowableNullTests._Benchmark.benchmark_timestampUnitNull  thrpt   30  1061616.453 ± 8212.372  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalTest._Benchmark.benchmark_badRequest$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalTest._Benchmark.benchmark_badRequest

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 251827.604 ops/s
# Warmup Iteration   2: 327716.859 ops/s
# Warmup Iteration   3: 345615.239 ops/s
# Warmup Iteration   4: 360669.134 ops/s
# Warmup Iteration   5: 367085.582 ops/s
# Warmup Iteration   6: 367698.829 ops/s
# Warmup Iteration   7: 364999.604 ops/s
# Warmup Iteration   8: 366372.890 ops/s
# Warmup Iteration   9: 364404.818 ops/s
# Warmup Iteration  10: 364411.906 ops/s
# Warmup Iteration  11: 364139.696 ops/s
# Warmup Iteration  12: 362173.417 ops/s
# Warmup Iteration  13: 365693.999 ops/s
# Warmup Iteration  14: 362810.668 ops/s
# Warmup Iteration  15: 363322.132 ops/s
# Warmup Iteration  16: 364506.178 ops/s
# Warmup Iteration  17: 371857.435 ops/s
# Warmup Iteration  18: 371686.572 ops/s
# Warmup Iteration  19: 372702.158 ops/s
# Warmup Iteration  20: 370427.161 ops/s
# Warmup Iteration  21: 373446.281 ops/s
# Warmup Iteration  22: 374077.597 ops/s
# Warmup Iteration  23: 373219.938 ops/s
# Warmup Iteration  24: 370042.808 ops/s
# Warmup Iteration  25: 371287.701 ops/s
# Warmup Iteration  26: 371654.048 ops/s
# Warmup Iteration  27: 373562.647 ops/s
# Warmup Iteration  28: 372387.975 ops/s
# Warmup Iteration  29: 369694.970 ops/s
# Warmup Iteration  30: 372313.626 ops/s
Iteration   1: 370681.512 ops/s
Iteration   2: 371694.579 ops/s
Iteration   3: 371203.878 ops/s
Iteration   4: 369051.671 ops/s
Iteration   5: 371067.382 ops/s
Iteration   6: 372573.299 ops/s
Iteration   7: 370004.917 ops/s
Iteration   8: 371780.114 ops/s
Iteration   9: 372277.550 ops/s
Iteration  10: 372174.575 ops/s
Iteration  11: 374480.574 ops/s
Iteration  12: 372048.837 ops/s
Iteration  13: 372059.661 ops/s
Iteration  14: 372276.234 ops/s
Iteration  15: 373505.268 ops/s
Iteration  16: 374180.278 ops/s
Iteration  17: 371839.966 ops/s
Iteration  18: 370887.582 ops/s
Iteration  19: 372307.809 ops/s
Iteration  20: 369402.576 ops/s
Iteration  21: 370245.334 ops/s
Iteration  22: 370795.226 ops/s
Iteration  23: 373745.085 ops/s
Iteration  24: 370397.084 ops/s
Iteration  25: 371779.673 ops/s
Iteration  26: 370972.836 ops/s
Iteration  27: 372268.754 ops/s
Iteration  28: 371060.379 ops/s
Iteration  29: 370372.104 ops/s
Iteration  30: 370975.090 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalTest._Benchmark.benchmark_badRequest":
  371603.661 ±(99.9%) 868.847 ops/s [Average]
  (min, avg, max) = (369051.671, 371603.661, 374480.574), stdev = 1300.449
  CI (99.9%): [370734.814, 372472.508] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score     Error  Units
FlowableIntervalTest._Benchmark.benchmark_badRequest  thrpt   30  371603.661 ± 868.847  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipLastTimedTest._Benchmark.benchmark_badRequest$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipLastTimedTest._Benchmark.benchmark_badRequest

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 332174.671 ops/s
# Warmup Iteration   2: 441939.979 ops/s
# Warmup Iteration   3: 526225.646 ops/s
# Warmup Iteration   4: 538287.464 ops/s
# Warmup Iteration   5: 553839.835 ops/s
# Warmup Iteration   6: 551251.497 ops/s
# Warmup Iteration   7: 556618.109 ops/s
# Warmup Iteration   8: 553301.985 ops/s
# Warmup Iteration   9: 550989.049 ops/s
# Warmup Iteration  10: 548039.497 ops/s
# Warmup Iteration  11: 553200.167 ops/s
# Warmup Iteration  12: 550979.792 ops/s
# Warmup Iteration  13: 548705.728 ops/s
# Warmup Iteration  14: 553001.095 ops/s
# Warmup Iteration  15: 553000.862 ops/s
# Warmup Iteration  16: 549088.292 ops/s
# Warmup Iteration  17: 568280.269 ops/s
# Warmup Iteration  18: 572013.752 ops/s
# Warmup Iteration  19: 564939.714 ops/s
# Warmup Iteration  20: 567802.685 ops/s
# Warmup Iteration  21: 566494.996 ops/s
# Warmup Iteration  22: 571746.025 ops/s
# Warmup Iteration  23: 567479.802 ops/s
# Warmup Iteration  24: 569027.247 ops/s
# Warmup Iteration  25: 569852.672 ops/s
# Warmup Iteration  26: 568054.115 ops/s
# Warmup Iteration  27: 565393.387 ops/s
# Warmup Iteration  28: 570011.927 ops/s
# Warmup Iteration  29: 572962.696 ops/s
# Warmup Iteration  30: 570791.987 ops/s
Iteration   1: 570897.106 ops/s
Iteration   2: 567932.893 ops/s
Iteration   3: 567409.157 ops/s
Iteration   4: 569333.612 ops/s
Iteration   5: 568430.202 ops/s
Iteration   6: 564749.661 ops/s
Iteration   7: 572392.184 ops/s
Iteration   8: 568550.679 ops/s
Iteration   9: 570153.808 ops/s
Iteration  10: 569593.229 ops/s
Iteration  11: 569123.552 ops/s
Iteration  12: 568121.320 ops/s
Iteration  13: 565508.476 ops/s
Iteration  14: 569376.104 ops/s
Iteration  15: 568413.948 ops/s
Iteration  16: 568354.990 ops/s
Iteration  17: 567666.038 ops/s
Iteration  18: 568350.426 ops/s
Iteration  19: 566037.509 ops/s
Iteration  20: 570944.182 ops/s
Iteration  21: 569025.120 ops/s
Iteration  22: 568823.149 ops/s
Iteration  23: 570398.468 ops/s
Iteration  24: 568643.775 ops/s
Iteration  25: 569017.500 ops/s
Iteration  26: 569902.050 ops/s
Iteration  27: 568705.789 ops/s
Iteration  28: 566938.952 ops/s
Iteration  29: 568711.628 ops/s
Iteration  30: 569273.642 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipLastTimedTest._Benchmark.benchmark_badRequest":
  568692.638 ±(99.9%) 1055.544 ops/s [Average]
  (min, avg, max) = (564749.661, 568692.638, 572392.184), stdev = 1579.888
  CI (99.9%): [567637.094, 569748.182] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
FlowableSkipLastTimedTest._Benchmark.benchmark_badRequest  thrpt   30  568692.638 ± 1055.544  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableUnsubscribeOnTest._Benchmark.benchmark_normal$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableUnsubscribeOnTest._Benchmark.benchmark_normal

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 4268584.940 ops/s
# Warmup Iteration   2: 6885691.530 ops/s
# Warmup Iteration   3: 7545860.185 ops/s
# Warmup Iteration   4: 7475222.792 ops/s
# Warmup Iteration   5: 7450755.736 ops/s
# Warmup Iteration   6: 7478067.736 ops/s
# Warmup Iteration   7: 7521500.667 ops/s
# Warmup Iteration   8: 7501674.821 ops/s
# Warmup Iteration   9: 7529536.216 ops/s
# Warmup Iteration  10: 7494740.248 ops/s
# Warmup Iteration  11: 7503601.253 ops/s
# Warmup Iteration  12: 7476901.249 ops/s
# Warmup Iteration  13: 7488366.460 ops/s
# Warmup Iteration  14: 7484969.917 ops/s
# Warmup Iteration  15: 7521819.580 ops/s
# Warmup Iteration  16: 7496797.400 ops/s
# Warmup Iteration  17: 7470720.971 ops/s
# Warmup Iteration  18: 7502155.786 ops/s
# Warmup Iteration  19: 7539081.287 ops/s
# Warmup Iteration  20: 7502379.154 ops/s
# Warmup Iteration  21: 7530388.494 ops/s
# Warmup Iteration  22: 7491957.419 ops/s
# Warmup Iteration  23: 7524604.532 ops/s
# Warmup Iteration  24: 7534918.540 ops/s
# Warmup Iteration  25: 7461240.790 ops/s
# Warmup Iteration  26: 7496478.069 ops/s
# Warmup Iteration  27: 7503013.074 ops/s
# Warmup Iteration  28: 7519912.798 ops/s
# Warmup Iteration  29: 7512754.156 ops/s
# Warmup Iteration  30: 7519555.037 ops/s
Iteration   1: 7515632.660 ops/s
Iteration   2: 7460746.868 ops/s
Iteration   3: 7564064.150 ops/s
Iteration   4: 7491726.777 ops/s
Iteration   5: 7476761.658 ops/s
Iteration   6: 7489157.702 ops/s
Iteration   7: 7543446.556 ops/s
Iteration   8: 7474175.691 ops/s
Iteration   9: 7516277.263 ops/s
Iteration  10: 7480964.483 ops/s
Iteration  11: 7489972.122 ops/s
Iteration  12: 7525167.360 ops/s
Iteration  13: 7426234.215 ops/s
Iteration  14: 7525650.953 ops/s
Iteration  15: 7476628.847 ops/s
Iteration  16: 7502710.410 ops/s
Iteration  17: 7503443.656 ops/s
Iteration  18: 7496502.803 ops/s
Iteration  19: 7519246.078 ops/s
Iteration  20: 7525510.764 ops/s
Iteration  21: 7554465.379 ops/s
Iteration  22: 7468154.454 ops/s
Iteration  23: 7532010.607 ops/s
Iteration  24: 7501703.144 ops/s
Iteration  25: 7492917.447 ops/s
Iteration  26: 7496876.824 ops/s
Iteration  27: 7470893.950 ops/s
Iteration  28: 7524351.315 ops/s
Iteration  29: 7532692.279 ops/s
Iteration  30: 7504014.011 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableUnsubscribeOnTest._Benchmark.benchmark_normal":
  7502736.681 ±(99.9%) 19849.648 ops/s [Average]
  (min, avg, max) = (7426234.215, 7502736.681, 7564064.150), stdev = 29710.020
  CI (99.9%): [7482887.033, 7522586.329] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
FlowableUnsubscribeOnTest._Benchmark.benchmark_normal  thrpt   30  7502736.681 ± 19849.648  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOnTest._Benchmark.benchmark_cancelCleanup$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOnTest._Benchmark.benchmark_cancelCleanup

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2702016.218 ops/s
# Warmup Iteration   2: 3766628.565 ops/s
# Warmup Iteration   3: 4180423.804 ops/s
# Warmup Iteration   4: 4276902.768 ops/s
# Warmup Iteration   5: 4350422.941 ops/s
# Warmup Iteration   6: 4362788.638 ops/s
# Warmup Iteration   7: 4371396.074 ops/s
# Warmup Iteration   8: 4356557.212 ops/s
# Warmup Iteration   9: 4331815.552 ops/s
# Warmup Iteration  10: 4357167.638 ops/s
# Warmup Iteration  11: 4318779.436 ops/s
# Warmup Iteration  12: 4313679.874 ops/s
# Warmup Iteration  13: 4339647.030 ops/s
# Warmup Iteration  14: 4346784.826 ops/s
# Warmup Iteration  15: 4367667.249 ops/s
# Warmup Iteration  16: 4335456.079 ops/s
# Warmup Iteration  17: 4339429.410 ops/s
# Warmup Iteration  18: 4354126.691 ops/s
# Warmup Iteration  19: 4345734.291 ops/s
# Warmup Iteration  20: 4326819.981 ops/s
# Warmup Iteration  21: 4330982.322 ops/s
# Warmup Iteration  22: 4360552.604 ops/s
# Warmup Iteration  23: 4340731.736 ops/s
# Warmup Iteration  24: 4343571.038 ops/s
# Warmup Iteration  25: 4378260.236 ops/s
# Warmup Iteration  26: 4348086.038 ops/s
# Warmup Iteration  27: 4358918.558 ops/s
# Warmup Iteration  28: 4338984.839 ops/s
# Warmup Iteration  29: 4372704.451 ops/s
# Warmup Iteration  30: 4315109.680 ops/s
Iteration   1: 4373157.799 ops/s
Iteration   2: 4368699.982 ops/s
Iteration   3: 4276663.499 ops/s
Iteration   4: 4366624.832 ops/s
Iteration   5: 4374402.120 ops/s
Iteration   6: 4350325.596 ops/s
Iteration   7: 4346717.207 ops/s
Iteration   8: 4358688.084 ops/s
Iteration   9: 4356568.875 ops/s
Iteration  10: 4334593.016 ops/s
Iteration  11: 4373186.855 ops/s
Iteration  12: 4337221.906 ops/s
Iteration  13: 4371967.947 ops/s
Iteration  14: 4349217.704 ops/s
Iteration  15: 4339859.404 ops/s
Iteration  16: 4359060.315 ops/s
Iteration  17: 4316653.544 ops/s
Iteration  18: 4340263.410 ops/s
Iteration  19: 4321658.078 ops/s
Iteration  20: 4346670.491 ops/s
Iteration  21: 4354662.817 ops/s
Iteration  22: 4321853.630 ops/s
Iteration  23: 4334047.811 ops/s
Iteration  24: 4342560.104 ops/s
Iteration  25: 4328480.985 ops/s
Iteration  26: 4366888.830 ops/s
Iteration  27: 4385742.030 ops/s
Iteration  28: 4373486.141 ops/s
Iteration  29: 4360807.235 ops/s
Iteration  30: 4357364.904 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOnTest._Benchmark.benchmark_cancelCleanup":
  4349603.172 ±(99.9%) 15073.118 ops/s [Average]
  (min, avg, max) = (4276663.499, 4349603.172, 4385742.030), stdev = 22560.735
  CI (99.9%): [4334530.054, 4364676.290] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
FlowableObserveOnTest._Benchmark.benchmark_cancelCleanup  thrpt   30  4349603.172 ± 15073.118  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3554921.103 ops/s
# Warmup Iteration   2: 5117635.074 ops/s
# Warmup Iteration   3: 5875070.328 ops/s
# Warmup Iteration   4: 5847658.629 ops/s
# Warmup Iteration   5: 5807441.984 ops/s
# Warmup Iteration   6: 5838165.249 ops/s
# Warmup Iteration   7: 5863308.559 ops/s
# Warmup Iteration   8: 5895784.367 ops/s
# Warmup Iteration   9: 5890549.492 ops/s
# Warmup Iteration  10: 5824127.910 ops/s
# Warmup Iteration  11: 5819838.218 ops/s
# Warmup Iteration  12: 5845966.813 ops/s
# Warmup Iteration  13: 5868771.899 ops/s
# Warmup Iteration  14: 5861185.062 ops/s
# Warmup Iteration  15: 5846546.569 ops/s
# Warmup Iteration  16: 5816058.741 ops/s
# Warmup Iteration  17: 5698467.586 ops/s
# Warmup Iteration  18: 5725469.603 ops/s
# Warmup Iteration  19: 5706443.197 ops/s
# Warmup Iteration  20: 5723551.762 ops/s
# Warmup Iteration  21: 5722936.249 ops/s
# Warmup Iteration  22: 5674177.789 ops/s
# Warmup Iteration  23: 5736157.274 ops/s
# Warmup Iteration  24: 5692115.168 ops/s
# Warmup Iteration  25: 5683625.191 ops/s
# Warmup Iteration  26: 5728479.215 ops/s
# Warmup Iteration  27: 5721034.445 ops/s
# Warmup Iteration  28: 5740081.659 ops/s
# Warmup Iteration  29: 5741860.713 ops/s
# Warmup Iteration  30: 5699013.770 ops/s
Iteration   1: 5723373.419 ops/s
Iteration   2: 5707250.676 ops/s
Iteration   3: 5725255.651 ops/s
Iteration   4: 5687002.933 ops/s
Iteration   5: 5710713.259 ops/s
Iteration   6: 5718536.029 ops/s
Iteration   7: 5720312.248 ops/s
Iteration   8: 5724000.217 ops/s
Iteration   9: 5715271.974 ops/s
Iteration  10: 5768197.084 ops/s
Iteration  11: 5735408.571 ops/s
Iteration  12: 5740551.362 ops/s
Iteration  13: 5697395.909 ops/s
Iteration  14: 5702356.578 ops/s
Iteration  15: 5622837.626 ops/s
Iteration  16: 5685929.352 ops/s
Iteration  17: 5711021.843 ops/s
Iteration  18: 5719640.795 ops/s
Iteration  19: 5714030.052 ops/s
Iteration  20: 5740994.738 ops/s
Iteration  21: 5748818.649 ops/s
Iteration  22: 5686461.514 ops/s
Iteration  23: 5711731.022 ops/s
Iteration  24: 5705721.195 ops/s
Iteration  25: 5716597.642 ops/s
Iteration  26: 5711669.881 ops/s
Iteration  27: 5752857.050 ops/s
Iteration  28: 5706273.664 ops/s
Iteration  29: 5702223.028 ops/s
Iteration  30: 5673907.838 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayTest._Benchmark.benchmark_dispose":
  5712878.060 ±(99.9%) 17925.667 ops/s [Average]
  (min, avg, max) = (5622837.626, 5712878.060, 5768197.084), stdev = 26830.296
  CI (99.9%): [5694952.393, 5730803.727] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     Mode  Cnt        Score       Error  Units
MaybeDelayTest._Benchmark.benchmark_dispose  thrpt   30  5712878.060 ± 17925.667  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimedTest._Benchmark.benchmark_emptyDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimedTest._Benchmark.benchmark_emptyDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 858429.016 ops/s
# Warmup Iteration   2: 1120856.296 ops/s
# Warmup Iteration   3: 1077489.799 ops/s
# Warmup Iteration   4: 1193736.478 ops/s
# Warmup Iteration   5: 1182543.254 ops/s
# Warmup Iteration   6: 1188836.163 ops/s
# Warmup Iteration   7: 1185271.745 ops/s
# Warmup Iteration   8: 1189488.013 ops/s
# Warmup Iteration   9: 1189997.420 ops/s
# Warmup Iteration  10: 1184753.971 ops/s
# Warmup Iteration  11: 1178710.071 ops/s
# Warmup Iteration  12: 1183929.145 ops/s
# Warmup Iteration  13: 1178422.055 ops/s
# Warmup Iteration  14: 1180518.551 ops/s
# Warmup Iteration  15: 1179020.069 ops/s
# Warmup Iteration  16: 1185481.870 ops/s
# Warmup Iteration  17: 1178621.524 ops/s
# Warmup Iteration  18: 1181004.203 ops/s
# Warmup Iteration  19: 1179596.427 ops/s
# Warmup Iteration  20: 1187471.194 ops/s
# Warmup Iteration  21: 1182991.433 ops/s
# Warmup Iteration  22: 1189287.514 ops/s
# Warmup Iteration  23: 1182277.386 ops/s
# Warmup Iteration  24: 1183051.622 ops/s
# Warmup Iteration  25: 1180750.129 ops/s
# Warmup Iteration  26: 1181058.882 ops/s
# Warmup Iteration  27: 1177781.548 ops/s
# Warmup Iteration  28: 1184757.257 ops/s
# Warmup Iteration  29: 1176780.714 ops/s
# Warmup Iteration  30: 1178643.203 ops/s
Iteration   1: 1187040.042 ops/s
Iteration   2: 1192964.096 ops/s
Iteration   3: 1185050.840 ops/s
Iteration   4: 1177247.299 ops/s
Iteration   5: 1191922.545 ops/s
Iteration   6: 1180696.902 ops/s
Iteration   7: 1178629.303 ops/s
Iteration   8: 1191163.522 ops/s
Iteration   9: 1173158.411 ops/s
Iteration  10: 1189726.736 ops/s
Iteration  11: 1187553.179 ops/s
Iteration  12: 1178674.562 ops/s
Iteration  13: 1183575.003 ops/s
Iteration  14: 1178802.015 ops/s
Iteration  15: 1176374.885 ops/s
Iteration  16: 1179962.957 ops/s
Iteration  17: 1178383.804 ops/s
Iteration  18: 1182148.648 ops/s
Iteration  19: 1181892.474 ops/s
Iteration  20: 1179691.966 ops/s
Iteration  21: 1179399.102 ops/s
Iteration  22: 1177461.228 ops/s
Iteration  23: 1189073.006 ops/s
Iteration  24: 1184447.357 ops/s
Iteration  25: 1188269.922 ops/s
Iteration  26: 1186329.133 ops/s
Iteration  27: 1181811.116 ops/s
Iteration  28: 1178109.668 ops/s
Iteration  29: 1179436.100 ops/s
Iteration  30: 1187040.450 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimedTest._Benchmark.benchmark_emptyDelayError":
  1182867.876 ±(99.9%) 3477.584 ops/s [Average]
  (min, avg, max) = (1173158.411, 1182867.876, 1192964.096), stdev = 5205.085
  CI (99.9%): [1179390.291, 1186345.460] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
FlowableTakeLastTimedTest._Benchmark.benchmark_emptyDelayError  thrpt   30  1182867.876 ± 3477.584  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipLastTimedTest._Benchmark.benchmark_take$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipLastTimedTest._Benchmark.benchmark_take

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 341496.615 ops/s
# Warmup Iteration   2: 431225.507 ops/s
# Warmup Iteration   3: 459892.325 ops/s
# Warmup Iteration   4: 428832.874 ops/s
# Warmup Iteration   5: 474024.164 ops/s
# Warmup Iteration   6: 472227.291 ops/s
# Warmup Iteration   7: 471494.305 ops/s
# Warmup Iteration   8: 471253.326 ops/s
# Warmup Iteration   9: 475097.608 ops/s
# Warmup Iteration  10: 469229.011 ops/s
# Warmup Iteration  11: 472208.263 ops/s
# Warmup Iteration  12: 470915.313 ops/s
# Warmup Iteration  13: 467117.958 ops/s
# Warmup Iteration  14: 470715.889 ops/s
# Warmup Iteration  15: 471935.142 ops/s
# Warmup Iteration  16: 471922.469 ops/s
# Warmup Iteration  17: 469258.451 ops/s
# Warmup Iteration  18: 469652.051 ops/s
# Warmup Iteration  19: 469428.432 ops/s
# Warmup Iteration  20: 466715.140 ops/s
# Warmup Iteration  21: 468363.349 ops/s
# Warmup Iteration  22: 465462.919 ops/s
# Warmup Iteration  23: 467973.156 ops/s
# Warmup Iteration  24: 468452.688 ops/s
# Warmup Iteration  25: 467625.898 ops/s
# Warmup Iteration  26: 467859.099 ops/s
# Warmup Iteration  27: 466657.394 ops/s
# Warmup Iteration  28: 467222.297 ops/s
# Warmup Iteration  29: 467990.099 ops/s
# Warmup Iteration  30: 469082.093 ops/s
Iteration   1: 469278.929 ops/s
Iteration   2: 466958.533 ops/s
Iteration   3: 466735.387 ops/s
Iteration   4: 467539.208 ops/s
Iteration   5: 466731.046 ops/s
Iteration   6: 468323.688 ops/s
Iteration   7: 469100.582 ops/s
Iteration   8: 468589.824 ops/s
Iteration   9: 468142.819 ops/s
Iteration  10: 468257.371 ops/s
Iteration  11: 468709.524 ops/s
Iteration  12: 464280.124 ops/s
Iteration  13: 464742.712 ops/s
Iteration  14: 469747.262 ops/s
Iteration  15: 467095.848 ops/s
Iteration  16: 467501.837 ops/s
Iteration  17: 466281.019 ops/s
Iteration  18: 464190.867 ops/s
Iteration  19: 467131.151 ops/s
Iteration  20: 467112.642 ops/s
Iteration  21: 468370.502 ops/s
Iteration  22: 465680.153 ops/s
Iteration  23: 465883.110 ops/s
Iteration  24: 468946.184 ops/s
Iteration  25: 468539.961 ops/s
Iteration  26: 465771.908 ops/s
Iteration  27: 468617.279 ops/s
Iteration  28: 469123.389 ops/s
Iteration  29: 468711.978 ops/s
Iteration  30: 465829.991 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipLastTimedTest._Benchmark.benchmark_take":
  467397.494 ±(99.9%) 1023.737 ops/s [Average]
  (min, avg, max) = (464190.867, 467397.494, 469747.262), stdev = 1532.282
  CI (99.9%): [466373.757, 468421.231] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score      Error  Units
FlowableSkipLastTimedTest._Benchmark.benchmark_take  thrpt   30  467397.494 ± 1023.737  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimedTest._Benchmark.benchmark_takeLastTime$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimedTest._Benchmark.benchmark_takeLastTime

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 353068.591 ops/s
# Warmup Iteration   2: 462161.134 ops/s
# Warmup Iteration   3: 457644.914 ops/s
# Warmup Iteration   4: 487636.698 ops/s
# Warmup Iteration   5: 488911.629 ops/s
# Warmup Iteration   6: 488641.143 ops/s
# Warmup Iteration   7: 488115.077 ops/s
# Warmup Iteration   8: 487821.625 ops/s
# Warmup Iteration   9: 489328.128 ops/s
# Warmup Iteration  10: 486664.964 ops/s
# Warmup Iteration  11: 488044.882 ops/s
# Warmup Iteration  12: 486361.775 ops/s
# Warmup Iteration  13: 486819.995 ops/s
# Warmup Iteration  14: 488069.735 ops/s
# Warmup Iteration  15: 483646.034 ops/s
# Warmup Iteration  16: 483696.225 ops/s
# Warmup Iteration  17: 484069.338 ops/s
# Warmup Iteration  18: 483334.378 ops/s
# Warmup Iteration  19: 481907.568 ops/s
# Warmup Iteration  20: 483951.523 ops/s
# Warmup Iteration  21: 484130.589 ops/s
# Warmup Iteration  22: 483581.955 ops/s
# Warmup Iteration  23: 483319.989 ops/s
# Warmup Iteration  24: 481306.757 ops/s
# Warmup Iteration  25: 480500.360 ops/s
# Warmup Iteration  26: 481590.214 ops/s
# Warmup Iteration  27: 482763.798 ops/s
# Warmup Iteration  28: 480459.876 ops/s
# Warmup Iteration  29: 482208.323 ops/s
# Warmup Iteration  30: 485252.501 ops/s
Iteration   1: 480733.057 ops/s
Iteration   2: 482407.101 ops/s
Iteration   3: 485748.805 ops/s
Iteration   4: 485538.971 ops/s
Iteration   5: 481687.182 ops/s
Iteration   6: 481813.953 ops/s
Iteration   7: 480486.042 ops/s
Iteration   8: 483567.310 ops/s
Iteration   9: 485047.296 ops/s
Iteration  10: 484028.818 ops/s
Iteration  11: 482238.797 ops/s
Iteration  12: 482606.229 ops/s
Iteration  13: 483667.386 ops/s
Iteration  14: 485769.957 ops/s
Iteration  15: 483801.153 ops/s
Iteration  16: 482588.648 ops/s
Iteration  17: 481365.649 ops/s
Iteration  18: 484494.603 ops/s
Iteration  19: 484481.954 ops/s
Iteration  20: 483486.368 ops/s
Iteration  21: 481772.035 ops/s
Iteration  22: 486937.722 ops/s
Iteration  23: 485461.368 ops/s
Iteration  24: 486772.458 ops/s
Iteration  25: 484492.464 ops/s
Iteration  26: 484496.993 ops/s
Iteration  27: 484356.176 ops/s
Iteration  28: 485194.311 ops/s
Iteration  29: 482329.240 ops/s
Iteration  30: 483912.274 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimedTest._Benchmark.benchmark_takeLastTime":
  483709.477 ±(99.9%) 1151.361 ops/s [Average]
  (min, avg, max) = (480486.042, 483709.477, 486937.722), stdev = 1723.303
  CI (99.9%): [482558.116, 484860.839] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
FlowableTakeLastTimedTest._Benchmark.benchmark_takeLastTime  thrpt   30  483709.477 ± 1151.361  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimedTest._Benchmark.benchmark_takeLastTimeAndSize$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimedTest._Benchmark.benchmark_takeLastTimeAndSize

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 321780.894 ops/s
# Warmup Iteration   2: 440634.371 ops/s
# Warmup Iteration   3: 435637.278 ops/s
# Warmup Iteration   4: 465460.758 ops/s
# Warmup Iteration   5: 464500.943 ops/s
# Warmup Iteration   6: 464500.466 ops/s
# Warmup Iteration   7: 464522.254 ops/s
# Warmup Iteration   8: 463398.798 ops/s
# Warmup Iteration   9: 462863.907 ops/s
# Warmup Iteration  10: 463952.739 ops/s
# Warmup Iteration  11: 463453.016 ops/s
# Warmup Iteration  12: 463603.418 ops/s
# Warmup Iteration  13: 463232.015 ops/s
# Warmup Iteration  14: 458867.530 ops/s
# Warmup Iteration  15: 462311.111 ops/s
# Warmup Iteration  16: 458826.062 ops/s
# Warmup Iteration  17: 460143.941 ops/s
# Warmup Iteration  18: 461406.810 ops/s
# Warmup Iteration  19: 459620.676 ops/s
# Warmup Iteration  20: 461537.961 ops/s
# Warmup Iteration  21: 459225.222 ops/s
# Warmup Iteration  22: 460221.866 ops/s
# Warmup Iteration  23: 459661.039 ops/s
# Warmup Iteration  24: 460991.325 ops/s
# Warmup Iteration  25: 460331.334 ops/s
# Warmup Iteration  26: 460499.709 ops/s
# Warmup Iteration  27: 457576.451 ops/s
# Warmup Iteration  28: 457354.203 ops/s
# Warmup Iteration  29: 458707.798 ops/s
# Warmup Iteration  30: 458562.343 ops/s
Iteration   1: 458019.782 ops/s
Iteration   2: 459004.075 ops/s
Iteration   3: 456911.291 ops/s
Iteration   4: 462746.566 ops/s
Iteration   5: 460594.854 ops/s
Iteration   6: 460535.244 ops/s
Iteration   7: 459210.124 ops/s
Iteration   8: 458232.732 ops/s
Iteration   9: 461635.157 ops/s
Iteration  10: 458856.908 ops/s
Iteration  11: 459583.205 ops/s
Iteration  12: 460362.036 ops/s
Iteration  13: 459989.864 ops/s
Iteration  14: 463431.622 ops/s
Iteration  15: 461492.419 ops/s
Iteration  16: 458656.975 ops/s
Iteration  17: 460499.565 ops/s
Iteration  18: 462702.953 ops/s
Iteration  19: 457400.730 ops/s
Iteration  20: 460000.302 ops/s
Iteration  21: 457564.647 ops/s
Iteration  22: 461388.660 ops/s
Iteration  23: 461618.436 ops/s
Iteration  24: 456315.255 ops/s
Iteration  25: 459846.768 ops/s
Iteration  26: 460144.262 ops/s
Iteration  27: 459730.545 ops/s
Iteration  28: 461890.263 ops/s
Iteration  29: 457926.081 ops/s
Iteration  30: 460320.507 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimedTest._Benchmark.benchmark_takeLastTimeAndSize":
  459887.061 ±(99.9%) 1193.582 ops/s [Average]
  (min, avg, max) = (456315.255, 459887.061, 463431.622), stdev = 1786.498
  CI (99.9%): [458693.479, 461080.643] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score      Error  Units
FlowableTakeLastTimedTest._Benchmark.benchmark_takeLastTimeAndSize  thrpt   30  459887.061 ± 1193.582  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_bufferTimedSupplierReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_bufferTimedSupplierReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 496531.151 ops/s
# Warmup Iteration   2: 633311.893 ops/s
# Warmup Iteration   3: 690990.501 ops/s
# Warmup Iteration   4: 680178.679 ops/s
# Warmup Iteration   5: 721719.832 ops/s
# Warmup Iteration   6: 719981.366 ops/s
# Warmup Iteration   7: 719116.373 ops/s
# Warmup Iteration   8: 713658.184 ops/s
# Warmup Iteration   9: 715442.736 ops/s
# Warmup Iteration  10: 716655.218 ops/s
# Warmup Iteration  11: 713911.674 ops/s
# Warmup Iteration  12: 718704.144 ops/s
# Warmup Iteration  13: 716739.508 ops/s
# Warmup Iteration  14: 712845.737 ops/s
# Warmup Iteration  15: 715416.402 ops/s
# Warmup Iteration  16: 709352.172 ops/s
# Warmup Iteration  17: 749483.370 ops/s
# Warmup Iteration  18: 741829.779 ops/s
# Warmup Iteration  19: 743714.324 ops/s
# Warmup Iteration  20: 742807.931 ops/s
# Warmup Iteration  21: 744088.032 ops/s
# Warmup Iteration  22: 740082.277 ops/s
# Warmup Iteration  23: 752491.501 ops/s
# Warmup Iteration  24: 742856.871 ops/s
# Warmup Iteration  25: 747316.369 ops/s
# Warmup Iteration  26: 739589.159 ops/s
# Warmup Iteration  27: 743904.479 ops/s
# Warmup Iteration  28: 747359.138 ops/s
# Warmup Iteration  29: 744817.264 ops/s
# Warmup Iteration  30: 745105.786 ops/s
Iteration   1: 744441.301 ops/s
Iteration   2: 744197.837 ops/s
Iteration   3: 744504.552 ops/s
Iteration   4: 746279.969 ops/s
Iteration   5: 743712.754 ops/s
Iteration   6: 746162.322 ops/s
Iteration   7: 745356.964 ops/s
Iteration   8: 746229.106 ops/s
Iteration   9: 745996.970 ops/s
Iteration  10: 745521.920 ops/s
Iteration  11: 742527.662 ops/s
Iteration  12: 747832.227 ops/s
Iteration  13: 744380.359 ops/s
Iteration  14: 742604.163 ops/s
Iteration  15: 748366.033 ops/s
Iteration  16: 746264.448 ops/s
Iteration  17: 744343.849 ops/s
Iteration  18: 744945.816 ops/s
Iteration  19: 742289.255 ops/s
Iteration  20: 745623.474 ops/s
Iteration  21: 742285.270 ops/s
Iteration  22: 747741.214 ops/s
Iteration  23: 744249.364 ops/s
Iteration  24: 742003.481 ops/s
Iteration  25: 742246.317 ops/s
Iteration  26: 744399.751 ops/s
Iteration  27: 744210.850 ops/s
Iteration  28: 744874.607 ops/s
Iteration  29: 745595.509 ops/s
Iteration  30: 743079.631 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_bufferTimedSupplierReturnsNull":
  744742.233 ±(99.9%) 1144.946 ops/s [Average]
  (min, avg, max) = (742003.481, 744742.233, 748366.033), stdev = 1713.702
  CI (99.9%): [743597.286, 745887.179] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score      Error  Units
FlowableNullTests._Benchmark.benchmark_bufferTimedSupplierReturnsNull  thrpt   30  744742.233 ± 1144.946  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 427854.777 ops/s
# Warmup Iteration   2: 726298.195 ops/s
# Warmup Iteration   3: 812418.774 ops/s
# Warmup Iteration   4: 820194.923 ops/s
# Warmup Iteration   5: 827683.984 ops/s
# Warmup Iteration   6: 823114.380 ops/s
# Warmup Iteration   7: 821361.981 ops/s
# Warmup Iteration   8: 825357.527 ops/s
# Warmup Iteration   9: 822900.931 ops/s
# Warmup Iteration  10: 827020.337 ops/s
# Warmup Iteration  11: 826740.885 ops/s
# Warmup Iteration  12: 821296.739 ops/s
# Warmup Iteration  13: 826233.532 ops/s
# Warmup Iteration  14: 823395.997 ops/s
# Warmup Iteration  15: 826964.493 ops/s
# Warmup Iteration  16: 825341.262 ops/s
# Warmup Iteration  17: 831934.253 ops/s
# Warmup Iteration  18: 835224.672 ops/s
# Warmup Iteration  19: 832224.855 ops/s
# Warmup Iteration  20: 836589.120 ops/s
# Warmup Iteration  21: 827580.388 ops/s
# Warmup Iteration  22: 831878.845 ops/s
# Warmup Iteration  23: 833669.821 ops/s
# Warmup Iteration  24: 830047.186 ops/s
# Warmup Iteration  25: 833117.533 ops/s
# Warmup Iteration  26: 832646.286 ops/s
# Warmup Iteration  27: 840202.977 ops/s
# Warmup Iteration  28: 834625.403 ops/s
# Warmup Iteration  29: 840325.678 ops/s
# Warmup Iteration  30: 832563.479 ops/s
Iteration   1: 829272.221 ops/s
Iteration   2: 834780.425 ops/s
Iteration   3: 837285.863 ops/s
Iteration   4: 828254.070 ops/s
Iteration   5: 829774.928 ops/s
Iteration   6: 830106.568 ops/s
Iteration   7: 833162.826 ops/s
Iteration   8: 835958.628 ops/s
Iteration   9: 837170.788 ops/s
Iteration  10: 834113.172 ops/s
Iteration  11: 832503.887 ops/s
Iteration  12: 834204.183 ops/s
Iteration  13: 832767.899 ops/s
Iteration  14: 843981.628 ops/s
Iteration  15: 834947.547 ops/s
Iteration  16: 833279.399 ops/s
Iteration  17: 830977.678 ops/s
Iteration  18: 838898.280 ops/s
Iteration  19: 835527.161 ops/s
Iteration  20: 836051.419 ops/s
Iteration  21: 829220.213 ops/s
Iteration  22: 835611.873 ops/s
Iteration  23: 828827.948 ops/s
Iteration  24: 834048.587 ops/s
Iteration  25: 829880.264 ops/s
Iteration  26: 831517.164 ops/s
Iteration  27: 841824.776 ops/s
Iteration  28: 833869.011 ops/s
Iteration  29: 831102.325 ops/s
Iteration  30: 840908.332 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_dispose":
  833994.302 ±(99.9%) 2636.507 ops/s [Average]
  (min, avg, max) = (828254.070, 833994.302, 843981.628), stdev = 3946.199
  CI (99.9%): [831357.796, 836630.809] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score      Error  Units
FlowableWindowWithTimeTest._Benchmark.benchmark_dispose  thrpt   30  833994.302 ± 2636.507  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_timedUnboundedCancelUpfront$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_timedUnboundedCancelUpfront

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 42148.554 ops/s
# Warmup Iteration   2: 642093.361 ops/s
# Warmup Iteration   3: 1056969.861 ops/s
# Warmup Iteration   4: 1151412.113 ops/s
# Warmup Iteration   5: 1147975.071 ops/s
# Warmup Iteration   6: 1153859.621 ops/s
# Warmup Iteration   7: 1156201.281 ops/s
# Warmup Iteration   8: 1152925.763 ops/s
# Warmup Iteration   9: 1155572.968 ops/s
# Warmup Iteration  10: 1148714.780 ops/s
# Warmup Iteration  11: 1127251.447 ops/s
# Warmup Iteration  12: 1148708.998 ops/s
# Warmup Iteration  13: 1149162.542 ops/s
# Warmup Iteration  14: 1158364.227 ops/s
# Warmup Iteration  15: 1152052.920 ops/s
# Warmup Iteration  16: 1154942.003 ops/s
# Warmup Iteration  17: 1152952.389 ops/s
# Warmup Iteration  18: 1148516.668 ops/s
# Warmup Iteration  19: 1153198.800 ops/s
# Warmup Iteration  20: 1151456.489 ops/s
# Warmup Iteration  21: 1149766.277 ops/s
# Warmup Iteration  22: 1148645.302 ops/s
# Warmup Iteration  23: 1155558.197 ops/s
# Warmup Iteration  24: 1151011.230 ops/s
# Warmup Iteration  25: 1152050.114 ops/s
# Warmup Iteration  26: 1160380.383 ops/s
# Warmup Iteration  27: 1153263.386 ops/s
# Warmup Iteration  28: 1147225.813 ops/s
# Warmup Iteration  29: 1153993.324 ops/s
# Warmup Iteration  30: 1162019.026 ops/s
Iteration   1: 1148379.819 ops/s
Iteration   2: 1153721.289 ops/s
Iteration   3: 1143032.600 ops/s
Iteration   4: 1147503.652 ops/s
Iteration   5: 1150154.180 ops/s
Iteration   6: 1153171.312 ops/s
Iteration   7: 1152161.523 ops/s
Iteration   8: 1151214.191 ops/s
Iteration   9: 1144589.905 ops/s
Iteration  10: 1149188.393 ops/s
Iteration  11: 1152716.544 ops/s
Iteration  12: 1153082.192 ops/s
Iteration  13: 1148855.636 ops/s
Iteration  14: 1157065.792 ops/s
Iteration  15: 1150827.331 ops/s
Iteration  16: 1147610.061 ops/s
Iteration  17: 1146396.924 ops/s
Iteration  18: 1151453.489 ops/s
Iteration  19: 1138703.454 ops/s
Iteration  20: 1152293.655 ops/s
Iteration  21: 1157777.796 ops/s
Iteration  22: 1148589.445 ops/s
Iteration  23: 1145772.978 ops/s
Iteration  24: 1153647.908 ops/s
Iteration  25: 1147002.844 ops/s
Iteration  26: 1152561.143 ops/s
Iteration  27: 1144410.377 ops/s
Iteration  28: 1154342.909 ops/s
Iteration  29: 1152722.778 ops/s
Iteration  30: 1151597.050 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_timedUnboundedCancelUpfront":
  1150018.239 ±(99.9%) 2799.437 ops/s [Average]
  (min, avg, max) = (1138703.454, 1150018.239, 1157777.796), stdev = 4190.066
  CI (99.9%): [1147218.802, 1152817.676] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
ObservableBufferTest._Benchmark.benchmark_timedUnboundedCancelUpfront  thrpt   30  1150018.239 ± 2799.437  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReplayEagerTruncateTest._Benchmark.benchmark_noHeadRetentionCompleteTime$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReplayEagerTruncateTest._Benchmark.benchmark_noHeadRetentionCompleteTime

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 247776.577 ops/s
# Warmup Iteration   2: 281904.576 ops/s
# Warmup Iteration   3: 288775.236 ops/s
# Warmup Iteration   4: 288614.182 ops/s
# Warmup Iteration   5: 290616.735 ops/s
# Warmup Iteration   6: 288910.609 ops/s
# Warmup Iteration   7: 287278.148 ops/s
# Warmup Iteration   8: 287828.213 ops/s
# Warmup Iteration   9: 288978.627 ops/s
# Warmup Iteration  10: 288864.319 ops/s
# Warmup Iteration  11: 287052.981 ops/s
# Warmup Iteration  12: 286753.853 ops/s
# Warmup Iteration  13: 287816.171 ops/s
# Warmup Iteration  14: 289241.680 ops/s
# Warmup Iteration  15: 288487.164 ops/s
# Warmup Iteration  16: 288473.726 ops/s
# Warmup Iteration  17: 287161.482 ops/s
# Warmup Iteration  18: 286991.900 ops/s
# Warmup Iteration  19: 286377.553 ops/s
# Warmup Iteration  20: 286251.805 ops/s
# Warmup Iteration  21: 287069.121 ops/s
# Warmup Iteration  22: 287902.661 ops/s
# Warmup Iteration  23: 288471.984 ops/s
# Warmup Iteration  24: 287523.487 ops/s
# Warmup Iteration  25: 286695.626 ops/s
# Warmup Iteration  26: 288613.661 ops/s
# Warmup Iteration  27: 286684.630 ops/s
# Warmup Iteration  28: 289232.057 ops/s
# Warmup Iteration  29: 289099.896 ops/s
# Warmup Iteration  30: 287842.413 ops/s
Iteration   1: 288414.456 ops/s
Iteration   2: 288780.307 ops/s
Iteration   3: 288421.901 ops/s
Iteration   4: 287628.668 ops/s
Iteration   5: 287852.305 ops/s
Iteration   6: 287278.001 ops/s
Iteration   7: 285863.890 ops/s
Iteration   8: 288575.039 ops/s
Iteration   9: 288605.715 ops/s
Iteration  10: 288450.223 ops/s
Iteration  11: 288256.719 ops/s
Iteration  12: 288633.393 ops/s
Iteration  13: 287708.050 ops/s
Iteration  14: 286803.993 ops/s
Iteration  15: 287337.391 ops/s
Iteration  16: 289076.406 ops/s
Iteration  17: 285774.923 ops/s
Iteration  18: 287806.219 ops/s
Iteration  19: 286507.366 ops/s
Iteration  20: 287723.924 ops/s
Iteration  21: 287945.459 ops/s
Iteration  22: 288445.759 ops/s
Iteration  23: 287205.832 ops/s
Iteration  24: 285734.094 ops/s
Iteration  25: 287479.996 ops/s
Iteration  26: 287754.582 ops/s
Iteration  27: 287703.915 ops/s
Iteration  28: 288402.904 ops/s
Iteration  29: 287249.471 ops/s
Iteration  30: 288912.112 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableReplayEagerTruncateTest._Benchmark.benchmark_noHeadRetentionCompleteTime":
  287744.434 ±(99.9%) 607.277 ops/s [Average]
  (min, avg, max) = (285734.094, 287744.434, 289076.406), stdev = 908.944
  CI (99.9%): [287137.157, 288351.711] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            Mode  Cnt       Score     Error  Units
ObservableReplayEagerTruncateTest._Benchmark.benchmark_noHeadRetentionCompleteTime  thrpt   30  287744.434 ± 607.277  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReplayTest._Benchmark.benchmark_noHeadRetentionErrorTime$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReplayTest._Benchmark.benchmark_noHeadRetentionErrorTime

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 183348.546 ops/s
# Warmup Iteration   2: 214511.053 ops/s
# Warmup Iteration   3: 209828.381 ops/s
# Warmup Iteration   4: 221791.224 ops/s
# Warmup Iteration   5: 224465.749 ops/s
# Warmup Iteration   6: 223960.246 ops/s
# Warmup Iteration   7: 222960.771 ops/s
# Warmup Iteration   8: 222701.969 ops/s
# Warmup Iteration   9: 222985.981 ops/s
# Warmup Iteration  10: 223463.878 ops/s
# Warmup Iteration  11: 221304.465 ops/s
# Warmup Iteration  12: 223705.856 ops/s
# Warmup Iteration  13: 222574.704 ops/s
# Warmup Iteration  14: 223164.611 ops/s
# Warmup Iteration  15: 223084.460 ops/s
# Warmup Iteration  16: 224053.094 ops/s
# Warmup Iteration  17: 224390.153 ops/s
# Warmup Iteration  18: 225512.480 ops/s
# Warmup Iteration  19: 226493.939 ops/s
# Warmup Iteration  20: 224272.795 ops/s
# Warmup Iteration  21: 225429.998 ops/s
# Warmup Iteration  22: 224821.870 ops/s
# Warmup Iteration  23: 224918.746 ops/s
# Warmup Iteration  24: 224229.670 ops/s
# Warmup Iteration  25: 224361.076 ops/s
# Warmup Iteration  26: 224775.065 ops/s
# Warmup Iteration  27: 224280.834 ops/s
# Warmup Iteration  28: 223848.212 ops/s
# Warmup Iteration  29: 223222.201 ops/s
# Warmup Iteration  30: 223970.648 ops/s
Iteration   1: 224523.630 ops/s
Iteration   2: 224665.051 ops/s
Iteration   3: 223679.331 ops/s
Iteration   4: 223098.609 ops/s
Iteration   5: 222369.411 ops/s
Iteration   6: 224169.344 ops/s
Iteration   7: 223365.037 ops/s
Iteration   8: 224517.255 ops/s
Iteration   9: 223967.813 ops/s
Iteration  10: 222620.822 ops/s
Iteration  11: 223180.961 ops/s
Iteration  12: 224430.125 ops/s
Iteration  13: 224337.552 ops/s
Iteration  14: 224528.856 ops/s
Iteration  15: 223523.381 ops/s
Iteration  16: 224682.175 ops/s
Iteration  17: 224156.494 ops/s
Iteration  18: 225211.883 ops/s
Iteration  19: 224763.138 ops/s
Iteration  20: 224423.665 ops/s
Iteration  21: 222610.269 ops/s
Iteration  22: 223696.317 ops/s
Iteration  23: 222966.556 ops/s
Iteration  24: 224277.253 ops/s
Iteration  25: 224079.791 ops/s
Iteration  26: 225263.504 ops/s
Iteration  27: 223671.371 ops/s
Iteration  28: 223696.775 ops/s
Iteration  29: 224248.460 ops/s
Iteration  30: 222962.004 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableReplayTest._Benchmark.benchmark_noHeadRetentionErrorTime":
  223922.894 ±(99.9%) 511.869 ops/s [Average]
  (min, avg, max) = (222369.411, 223922.894, 225263.504), stdev = 766.142
  CI (99.9%): [223411.025, 224434.764] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score     Error  Units
ObservableReplayTest._Benchmark.benchmark_noHeadRetentionErrorTime  thrpt   30  223922.894 ± 511.869  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayEagerTruncateTest._Benchmark.benchmark_disposeNoNeedForResetTimeBound$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayEagerTruncateTest._Benchmark.benchmark_disposeNoNeedForResetTimeBound

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 177872.212 ops/s
# Warmup Iteration   2: 219518.626 ops/s
# Warmup Iteration   3: 217992.387 ops/s
# Warmup Iteration   4: 234755.009 ops/s
# Warmup Iteration   5: 243457.572 ops/s
# Warmup Iteration   6: 242196.052 ops/s
# Warmup Iteration   7: 243007.440 ops/s
# Warmup Iteration   8: 242182.431 ops/s
# Warmup Iteration   9: 242780.553 ops/s
# Warmup Iteration  10: 242678.801 ops/s
# Warmup Iteration  11: 242330.147 ops/s
# Warmup Iteration  12: 241184.102 ops/s
# Warmup Iteration  13: 241914.175 ops/s
# Warmup Iteration  14: 242395.822 ops/s
# Warmup Iteration  15: 240665.993 ops/s
# Warmup Iteration  16: 241344.332 ops/s
# Warmup Iteration  17: 240748.569 ops/s
# Warmup Iteration  18: 240424.094 ops/s
# Warmup Iteration  19: 241910.693 ops/s
# Warmup Iteration  20: 242866.108 ops/s
# Warmup Iteration  21: 241209.721 ops/s
# Warmup Iteration  22: 240776.201 ops/s
# Warmup Iteration  23: 239902.345 ops/s
# Warmup Iteration  24: 241041.637 ops/s
# Warmup Iteration  25: 241994.651 ops/s
# Warmup Iteration  26: 239162.474 ops/s
# Warmup Iteration  27: 242808.584 ops/s
# Warmup Iteration  28: 240453.247 ops/s
# Warmup Iteration  29: 240302.432 ops/s
# Warmup Iteration  30: 240657.118 ops/s
Iteration   1: 241003.338 ops/s
Iteration   2: 240927.602 ops/s
Iteration   3: 241413.176 ops/s
Iteration   4: 240081.169 ops/s
Iteration   5: 240928.784 ops/s
Iteration   6: 240281.997 ops/s
Iteration   7: 241523.993 ops/s
Iteration   8: 241031.953 ops/s
Iteration   9: 242192.354 ops/s
Iteration  10: 241190.914 ops/s
Iteration  11: 242369.285 ops/s
Iteration  12: 240507.075 ops/s
Iteration  13: 242072.602 ops/s
Iteration  14: 241144.481 ops/s
Iteration  15: 241049.499 ops/s
Iteration  16: 241081.446 ops/s
Iteration  17: 241278.286 ops/s
Iteration  18: 240232.033 ops/s
Iteration  19: 240636.484 ops/s
Iteration  20: 241173.009 ops/s
Iteration  21: 239873.448 ops/s
Iteration  22: 240930.227 ops/s
Iteration  23: 242934.817 ops/s
Iteration  24: 241083.948 ops/s
Iteration  25: 241096.970 ops/s
Iteration  26: 241245.440 ops/s
Iteration  27: 241034.128 ops/s
Iteration  28: 240149.990 ops/s
Iteration  29: 241449.408 ops/s
Iteration  30: 241786.787 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayEagerTruncateTest._Benchmark.benchmark_disposeNoNeedForResetTimeBound":
  241123.488 ±(99.9%) 457.255 ops/s [Average]
  (min, avg, max) = (239873.448, 241123.488, 242934.817), stdev = 684.398
  CI (99.9%): [240666.233, 241580.743] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             Mode  Cnt       Score     Error  Units
FlowableReplayEagerTruncateTest._Benchmark.benchmark_disposeNoNeedForResetTimeBound  thrpt   30  241123.488 ± 457.255  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayEagerTruncateTest._Benchmark.benchmark_noHeadRetentionCompleteTime$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayEagerTruncateTest._Benchmark.benchmark_noHeadRetentionCompleteTime

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 197605.445 ops/s
# Warmup Iteration   2: 244105.120 ops/s
# Warmup Iteration   3: 237074.473 ops/s
# Warmup Iteration   4: 255688.275 ops/s
# Warmup Iteration   5: 263922.451 ops/s
# Warmup Iteration   6: 263930.285 ops/s
# Warmup Iteration   7: 263619.214 ops/s
# Warmup Iteration   8: 263958.360 ops/s
# Warmup Iteration   9: 263981.254 ops/s
# Warmup Iteration  10: 263982.102 ops/s
# Warmup Iteration  11: 263609.644 ops/s
# Warmup Iteration  12: 263272.483 ops/s
# Warmup Iteration  13: 263657.908 ops/s
# Warmup Iteration  14: 263015.144 ops/s
# Warmup Iteration  15: 263138.557 ops/s
# Warmup Iteration  16: 263778.377 ops/s
# Warmup Iteration  17: 264481.118 ops/s
# Warmup Iteration  18: 263444.464 ops/s
# Warmup Iteration  19: 263814.669 ops/s
# Warmup Iteration  20: 264605.688 ops/s
# Warmup Iteration  21: 262950.479 ops/s
# Warmup Iteration  22: 263384.313 ops/s
# Warmup Iteration  23: 263427.037 ops/s
# Warmup Iteration  24: 261431.765 ops/s
# Warmup Iteration  25: 262533.782 ops/s
# Warmup Iteration  26: 260078.874 ops/s
# Warmup Iteration  27: 261665.499 ops/s
# Warmup Iteration  28: 260481.837 ops/s
# Warmup Iteration  29: 263052.350 ops/s
# Warmup Iteration  30: 260948.465 ops/s
Iteration   1: 262554.537 ops/s
Iteration   2: 261584.602 ops/s
Iteration   3: 261152.830 ops/s
Iteration   4: 260899.023 ops/s
Iteration   5: 261814.552 ops/s
Iteration   6: 262476.681 ops/s
Iteration   7: 260437.643 ops/s
Iteration   8: 262545.999 ops/s
Iteration   9: 260483.850 ops/s
Iteration  10: 262693.917 ops/s
Iteration  11: 261554.070 ops/s
Iteration  12: 262499.440 ops/s
Iteration  13: 262947.646 ops/s
Iteration  14: 262295.420 ops/s
Iteration  15: 263287.717 ops/s
Iteration  16: 260194.750 ops/s
Iteration  17: 261933.568 ops/s
Iteration  18: 262517.843 ops/s
Iteration  19: 261334.992 ops/s
Iteration  20: 263410.878 ops/s
Iteration  21: 262025.222 ops/s
Iteration  22: 261365.011 ops/s
Iteration  23: 261647.094 ops/s
Iteration  24: 261392.899 ops/s
Iteration  25: 262052.912 ops/s
Iteration  26: 263710.946 ops/s
Iteration  27: 261932.831 ops/s
Iteration  28: 262713.673 ops/s
Iteration  29: 261693.899 ops/s
Iteration  30: 261676.288 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayEagerTruncateTest._Benchmark.benchmark_noHeadRetentionCompleteTime":
  261961.024 ±(99.9%) 578.481 ops/s [Average]
  (min, avg, max) = (260194.750, 261961.024, 263710.946), stdev = 865.843
  CI (99.9%): [261382.544, 262539.505] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt       Score     Error  Units
FlowableReplayEagerTruncateTest._Benchmark.benchmark_noHeadRetentionCompleteTime  thrpt   30  261961.024 ± 578.481  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayTest._Benchmark.benchmark_noHeadRetentionCompleteTime$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayTest._Benchmark.benchmark_noHeadRetentionCompleteTime

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 195042.648 ops/s
# Warmup Iteration   2: 243586.231 ops/s
# Warmup Iteration   3: 236773.694 ops/s
# Warmup Iteration   4: 255689.756 ops/s
# Warmup Iteration   5: 263999.179 ops/s
# Warmup Iteration   6: 262731.606 ops/s
# Warmup Iteration   7: 261890.944 ops/s
# Warmup Iteration   8: 262423.432 ops/s
# Warmup Iteration   9: 263988.960 ops/s
# Warmup Iteration  10: 261881.909 ops/s
# Warmup Iteration  11: 264154.254 ops/s
# Warmup Iteration  12: 263948.287 ops/s
# Warmup Iteration  13: 262068.775 ops/s
# Warmup Iteration  14: 264001.741 ops/s
# Warmup Iteration  15: 262062.970 ops/s
# Warmup Iteration  16: 262150.312 ops/s
# Warmup Iteration  17: 262112.558 ops/s
# Warmup Iteration  18: 261451.490 ops/s
# Warmup Iteration  19: 263224.705 ops/s
# Warmup Iteration  20: 262442.622 ops/s
# Warmup Iteration  21: 262834.906 ops/s
# Warmup Iteration  22: 260896.852 ops/s
# Warmup Iteration  23: 261067.098 ops/s
# Warmup Iteration  24: 260283.242 ops/s
# Warmup Iteration  25: 261252.401 ops/s
# Warmup Iteration  26: 261180.897 ops/s
# Warmup Iteration  27: 260363.592 ops/s
# Warmup Iteration  28: 261675.280 ops/s
# Warmup Iteration  29: 260816.058 ops/s
# Warmup Iteration  30: 260869.608 ops/s
Iteration   1: 261418.652 ops/s
Iteration   2: 260627.197 ops/s
Iteration   3: 260939.706 ops/s
Iteration   4: 260141.823 ops/s
Iteration   5: 262081.467 ops/s
Iteration   6: 260269.261 ops/s
Iteration   7: 260430.336 ops/s
Iteration   8: 259419.617 ops/s
Iteration   9: 262273.306 ops/s
Iteration  10: 261361.098 ops/s
Iteration  11: 260645.696 ops/s
Iteration  12: 260157.265 ops/s
Iteration  13: 261660.101 ops/s
Iteration  14: 262242.954 ops/s
Iteration  15: 261336.808 ops/s
Iteration  16: 261728.098 ops/s
Iteration  17: 261737.156 ops/s
Iteration  18: 259294.171 ops/s
Iteration  19: 261483.046 ops/s
Iteration  20: 259451.887 ops/s
Iteration  21: 262159.637 ops/s
Iteration  22: 260742.193 ops/s
Iteration  23: 261100.091 ops/s
Iteration  24: 262461.017 ops/s
Iteration  25: 261073.914 ops/s
Iteration  26: 260969.063 ops/s
Iteration  27: 261431.651 ops/s
Iteration  28: 259559.180 ops/s
Iteration  29: 259493.361 ops/s
Iteration  30: 262205.886 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayTest._Benchmark.benchmark_noHeadRetentionCompleteTime":
  260996.521 ±(99.9%) 637.740 ops/s [Average]
  (min, avg, max) = (259294.171, 260996.521, 262461.017), stdev = 954.539
  CI (99.9%): [260358.781, 261634.261] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score     Error  Units
FlowableReplayTest._Benchmark.benchmark_noHeadRetentionCompleteTime  thrpt   30  260996.521 ± 637.740  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayTest._Benchmark.benchmark_disposeNoNeedForResetTimeAndSIzeBound$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayTest._Benchmark.benchmark_disposeNoNeedForResetTimeAndSIzeBound

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 171145.397 ops/s
# Warmup Iteration   2: 218801.464 ops/s
# Warmup Iteration   3: 217479.473 ops/s
# Warmup Iteration   4: 234041.683 ops/s
# Warmup Iteration   5: 241559.941 ops/s
# Warmup Iteration   6: 242848.597 ops/s
# Warmup Iteration   7: 241399.886 ops/s
# Warmup Iteration   8: 243037.054 ops/s
# Warmup Iteration   9: 243834.366 ops/s
# Warmup Iteration  10: 243702.669 ops/s
# Warmup Iteration  11: 240895.861 ops/s
# Warmup Iteration  12: 243258.876 ops/s
# Warmup Iteration  13: 241821.828 ops/s
# Warmup Iteration  14: 242522.490 ops/s
# Warmup Iteration  15: 242334.710 ops/s
# Warmup Iteration  16: 240949.322 ops/s
# Warmup Iteration  17: 241070.097 ops/s
# Warmup Iteration  18: 241581.669 ops/s
# Warmup Iteration  19: 241540.530 ops/s
# Warmup Iteration  20: 241058.633 ops/s
# Warmup Iteration  21: 240134.467 ops/s
# Warmup Iteration  22: 241094.908 ops/s
# Warmup Iteration  23: 241067.055 ops/s
# Warmup Iteration  24: 242177.648 ops/s
# Warmup Iteration  25: 241793.550 ops/s
# Warmup Iteration  26: 241970.534 ops/s
# Warmup Iteration  27: 239845.924 ops/s
# Warmup Iteration  28: 239415.915 ops/s
# Warmup Iteration  29: 241452.566 ops/s
# Warmup Iteration  30: 240246.583 ops/s
Iteration   1: 240202.561 ops/s
Iteration   2: 240280.515 ops/s
Iteration   3: 240604.754 ops/s
Iteration   4: 240545.317 ops/s
Iteration   5: 241371.434 ops/s
Iteration   6: 241690.748 ops/s
Iteration   7: 240540.001 ops/s
Iteration   8: 240957.435 ops/s
Iteration   9: 240934.666 ops/s
Iteration  10: 240865.926 ops/s
Iteration  11: 243172.242 ops/s
Iteration  12: 242055.603 ops/s
Iteration  13: 239844.296 ops/s
Iteration  14: 240853.832 ops/s
Iteration  15: 240937.174 ops/s
Iteration  16: 241992.735 ops/s
Iteration  17: 242694.069 ops/s
Iteration  18: 240599.062 ops/s
Iteration  19: 242606.556 ops/s
Iteration  20: 241653.162 ops/s
Iteration  21: 241430.075 ops/s
Iteration  22: 241200.162 ops/s
Iteration  23: 242157.346 ops/s
Iteration  24: 242012.274 ops/s
Iteration  25: 241325.489 ops/s
Iteration  26: 241787.858 ops/s
Iteration  27: 241941.352 ops/s
Iteration  28: 240174.207 ops/s
Iteration  29: 242214.560 ops/s
Iteration  30: 240706.392 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayTest._Benchmark.benchmark_disposeNoNeedForResetTimeAndSIzeBound":
  241311.727 ±(99.9%) 556.431 ops/s [Average]
  (min, avg, max) = (239844.296, 241311.727, 243172.242), stdev = 832.840
  CI (99.9%): [240755.296, 241868.158] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt       Score     Error  Units
FlowableReplayTest._Benchmark.benchmark_disposeNoNeedForResetTimeAndSIzeBound  thrpt   30  241311.727 ± 556.431  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayEagerTruncateTest._Benchmark.benchmark_noHeadRetentionErrorTime$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayEagerTruncateTest._Benchmark.benchmark_noHeadRetentionErrorTime

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 150555.578 ops/s
# Warmup Iteration   2: 187535.786 ops/s
# Warmup Iteration   3: 185593.401 ops/s
# Warmup Iteration   4: 198345.192 ops/s
# Warmup Iteration   5: 201808.472 ops/s
# Warmup Iteration   6: 202164.984 ops/s
# Warmup Iteration   7: 202394.127 ops/s
# Warmup Iteration   8: 203433.366 ops/s
# Warmup Iteration   9: 201793.388 ops/s
# Warmup Iteration  10: 201844.278 ops/s
# Warmup Iteration  11: 201892.402 ops/s
# Warmup Iteration  12: 202106.292 ops/s
# Warmup Iteration  13: 202501.979 ops/s
# Warmup Iteration  14: 201183.052 ops/s
# Warmup Iteration  15: 202167.637 ops/s
# Warmup Iteration  16: 201261.062 ops/s
# Warmup Iteration  17: 204234.641 ops/s
# Warmup Iteration  18: 203536.755 ops/s
# Warmup Iteration  19: 203159.528 ops/s
# Warmup Iteration  20: 202223.316 ops/s
# Warmup Iteration  21: 202748.243 ops/s
# Warmup Iteration  22: 202926.479 ops/s
# Warmup Iteration  23: 203226.356 ops/s
# Warmup Iteration  24: 202056.232 ops/s
# Warmup Iteration  25: 203388.903 ops/s
# Warmup Iteration  26: 202807.581 ops/s
# Warmup Iteration  27: 202276.958 ops/s
# Warmup Iteration  28: 203615.872 ops/s
# Warmup Iteration  29: 203765.737 ops/s
# Warmup Iteration  30: 202475.351 ops/s
Iteration   1: 203242.123 ops/s
Iteration   2: 203378.975 ops/s
Iteration   3: 203023.115 ops/s
Iteration   4: 202319.014 ops/s
Iteration   5: 204128.586 ops/s
Iteration   6: 204360.920 ops/s
Iteration   7: 202745.580 ops/s
Iteration   8: 202635.664 ops/s
Iteration   9: 202583.418 ops/s
Iteration  10: 202989.728 ops/s
Iteration  11: 203423.930 ops/s
Iteration  12: 203916.974 ops/s
Iteration  13: 203950.549 ops/s
Iteration  14: 203998.194 ops/s
Iteration  15: 202860.122 ops/s
Iteration  16: 202756.311 ops/s
Iteration  17: 203899.254 ops/s
Iteration  18: 204636.470 ops/s
Iteration  19: 203619.632 ops/s
Iteration  20: 203483.832 ops/s
Iteration  21: 204058.731 ops/s
Iteration  22: 204378.860 ops/s
Iteration  23: 202744.041 ops/s
Iteration  24: 203030.128 ops/s
Iteration  25: 202467.137 ops/s
Iteration  26: 202815.496 ops/s
Iteration  27: 203105.744 ops/s
Iteration  28: 203135.424 ops/s
Iteration  29: 203119.753 ops/s
Iteration  30: 201146.355 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayEagerTruncateTest._Benchmark.benchmark_noHeadRetentionErrorTime":
  203265.135 ±(99.9%) 496.962 ops/s [Average]
  (min, avg, max) = (201146.355, 203265.135, 204636.470), stdev = 743.829
  CI (99.9%): [202768.174, 203762.097] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt       Score     Error  Units
FlowableReplayEagerTruncateTest._Benchmark.benchmark_noHeadRetentionErrorTime  thrpt   30  203265.135 ± 496.962  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayTest._Benchmark.benchmark_replaySelectorTime$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayTest._Benchmark.benchmark_replaySelectorTime

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 269463.631 ops/s
# Warmup Iteration   2: 350598.845 ops/s
# Warmup Iteration   3: 345179.849 ops/s
# Warmup Iteration   4: 367956.630 ops/s
# Warmup Iteration   5: 378612.797 ops/s
# Warmup Iteration   6: 375913.725 ops/s
# Warmup Iteration   7: 377270.286 ops/s
# Warmup Iteration   8: 376522.831 ops/s
# Warmup Iteration   9: 378764.018 ops/s
# Warmup Iteration  10: 377306.070 ops/s
# Warmup Iteration  11: 378622.466 ops/s
# Warmup Iteration  12: 376411.196 ops/s
# Warmup Iteration  13: 375784.873 ops/s
# Warmup Iteration  14: 375729.142 ops/s
# Warmup Iteration  15: 375519.459 ops/s
# Warmup Iteration  16: 375049.952 ops/s
# Warmup Iteration  17: 373361.951 ops/s
# Warmup Iteration  18: 374827.176 ops/s
# Warmup Iteration  19: 376576.311 ops/s
# Warmup Iteration  20: 375044.669 ops/s
# Warmup Iteration  21: 374562.994 ops/s
# Warmup Iteration  22: 372941.227 ops/s
# Warmup Iteration  23: 376332.083 ops/s
# Warmup Iteration  24: 375251.595 ops/s
# Warmup Iteration  25: 375464.139 ops/s
# Warmup Iteration  26: 374523.313 ops/s
# Warmup Iteration  27: 374113.065 ops/s
# Warmup Iteration  28: 374998.842 ops/s
# Warmup Iteration  29: 374044.385 ops/s
# Warmup Iteration  30: 375662.943 ops/s
Iteration   1: 374857.750 ops/s
Iteration   2: 376148.181 ops/s
Iteration   3: 375668.007 ops/s
Iteration   4: 373483.937 ops/s
Iteration   5: 375604.469 ops/s
Iteration   6: 372928.476 ops/s
Iteration   7: 374050.122 ops/s
Iteration   8: 377306.939 ops/s
Iteration   9: 376656.463 ops/s
Iteration  10: 374747.598 ops/s
Iteration  11: 376958.406 ops/s
Iteration  12: 374232.101 ops/s
Iteration  13: 375443.868 ops/s
Iteration  14: 375326.016 ops/s
Iteration  15: 375752.969 ops/s
Iteration  16: 375417.480 ops/s
Iteration  17: 374806.729 ops/s
Iteration  18: 376953.187 ops/s
Iteration  19: 375921.914 ops/s
Iteration  20: 376504.169 ops/s
Iteration  21: 374695.914 ops/s
Iteration  22: 375690.771 ops/s
Iteration  23: 375460.413 ops/s
Iteration  24: 372985.558 ops/s
Iteration  25: 373697.911 ops/s
Iteration  26: 375975.478 ops/s
Iteration  27: 374658.795 ops/s
Iteration  28: 376800.783 ops/s
Iteration  29: 376468.610 ops/s
Iteration  30: 374404.150 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayTest._Benchmark.benchmark_replaySelectorTime":
  375320.239 ±(99.9%) 789.422 ops/s [Average]
  (min, avg, max) = (372928.476, 375320.239, 377306.939), stdev = 1181.569
  CI (99.9%): [374530.817, 376109.660] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score     Error  Units
FlowableReplayTest._Benchmark.benchmark_replaySelectorTime  thrpt   30  375320.239 ± 789.422  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayTest._Benchmark.benchmark_noHeadRetentionErrorTime$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayTest._Benchmark.benchmark_noHeadRetentionErrorTime

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 149770.748 ops/s
# Warmup Iteration   2: 188508.567 ops/s
# Warmup Iteration   3: 185456.230 ops/s
# Warmup Iteration   4: 198199.569 ops/s
# Warmup Iteration   5: 201311.542 ops/s
# Warmup Iteration   6: 201339.758 ops/s
# Warmup Iteration   7: 200933.202 ops/s
# Warmup Iteration   8: 201754.443 ops/s
# Warmup Iteration   9: 201213.907 ops/s
# Warmup Iteration  10: 200819.950 ops/s
# Warmup Iteration  11: 201221.184 ops/s
# Warmup Iteration  12: 200627.673 ops/s
# Warmup Iteration  13: 200324.930 ops/s
# Warmup Iteration  14: 199992.186 ops/s
# Warmup Iteration  15: 200538.772 ops/s
# Warmup Iteration  16: 201089.219 ops/s
# Warmup Iteration  17: 202391.004 ops/s
# Warmup Iteration  18: 202518.049 ops/s
# Warmup Iteration  19: 201915.595 ops/s
# Warmup Iteration  20: 201873.371 ops/s
# Warmup Iteration  21: 200083.186 ops/s
# Warmup Iteration  22: 201871.115 ops/s
# Warmup Iteration  23: 202057.195 ops/s
# Warmup Iteration  24: 201331.993 ops/s
# Warmup Iteration  25: 201351.424 ops/s
# Warmup Iteration  26: 201296.054 ops/s
# Warmup Iteration  27: 201248.185 ops/s
# Warmup Iteration  28: 200884.952 ops/s
# Warmup Iteration  29: 201780.204 ops/s
# Warmup Iteration  30: 201468.406 ops/s
Iteration   1: 200588.892 ops/s
Iteration   2: 201724.815 ops/s
Iteration   3: 200795.961 ops/s
Iteration   4: 200887.860 ops/s
Iteration   5: 201891.941 ops/s
Iteration   6: 202556.123 ops/s
Iteration   7: 202712.858 ops/s
Iteration   8: 202884.005 ops/s
Iteration   9: 203389.512 ops/s
Iteration  10: 202232.353 ops/s
Iteration  11: 202312.772 ops/s
Iteration  12: 200610.658 ops/s
Iteration  13: 201771.682 ops/s
Iteration  14: 201449.407 ops/s
Iteration  15: 202010.412 ops/s
Iteration  16: 201210.380 ops/s
Iteration  17: 200093.053 ops/s
Iteration  18: 201129.706 ops/s
Iteration  19: 201308.320 ops/s
Iteration  20: 201543.841 ops/s
Iteration  21: 201956.338 ops/s
Iteration  22: 201235.370 ops/s
Iteration  23: 202612.343 ops/s
Iteration  24: 202810.767 ops/s
Iteration  25: 202587.923 ops/s
Iteration  26: 201662.488 ops/s
Iteration  27: 201565.707 ops/s
Iteration  28: 201837.574 ops/s
Iteration  29: 200175.434 ops/s
Iteration  30: 201799.773 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayTest._Benchmark.benchmark_noHeadRetentionErrorTime":
  201711.609 ±(99.9%) 549.312 ops/s [Average]
  (min, avg, max) = (200093.053, 201711.609, 203389.512), stdev = 822.185
  CI (99.9%): [201162.296, 202260.921] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score     Error  Units
FlowableReplayTest._Benchmark.benchmark_noHeadRetentionErrorTime  thrpt   30  201711.609 ± 549.312  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayTest._Benchmark.benchmark_disposeNoNeedForResetTimeBound$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayTest._Benchmark.benchmark_disposeNoNeedForResetTimeBound

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 162811.956 ops/s
# Warmup Iteration   2: 220854.071 ops/s
# Warmup Iteration   3: 214794.620 ops/s
# Warmup Iteration   4: 233430.030 ops/s
# Warmup Iteration   5: 244261.094 ops/s
# Warmup Iteration   6: 243507.071 ops/s
# Warmup Iteration   7: 241697.975 ops/s
# Warmup Iteration   8: 243336.670 ops/s
# Warmup Iteration   9: 244300.650 ops/s
# Warmup Iteration  10: 240608.275 ops/s
# Warmup Iteration  11: 240659.877 ops/s
# Warmup Iteration  12: 242459.250 ops/s
# Warmup Iteration  13: 240581.557 ops/s
# Warmup Iteration  14: 240413.645 ops/s
# Warmup Iteration  15: 240664.438 ops/s
# Warmup Iteration  16: 240906.266 ops/s
# Warmup Iteration  17: 239681.212 ops/s
# Warmup Iteration  18: 238600.422 ops/s
# Warmup Iteration  19: 239849.542 ops/s
# Warmup Iteration  20: 238531.979 ops/s
# Warmup Iteration  21: 238881.375 ops/s
# Warmup Iteration  22: 239632.597 ops/s
# Warmup Iteration  23: 240868.898 ops/s
# Warmup Iteration  24: 239925.783 ops/s
# Warmup Iteration  25: 240443.061 ops/s
# Warmup Iteration  26: 240505.641 ops/s
# Warmup Iteration  27: 238586.042 ops/s
# Warmup Iteration  28: 239970.815 ops/s
# Warmup Iteration  29: 241676.214 ops/s
# Warmup Iteration  30: 240416.875 ops/s
Iteration   1: 241060.636 ops/s
Iteration   2: 240445.276 ops/s
Iteration   3: 240543.476 ops/s
Iteration   4: 238601.489 ops/s
Iteration   5: 238968.105 ops/s
Iteration   6: 239604.207 ops/s
Iteration   7: 239506.399 ops/s
Iteration   8: 239500.611 ops/s
Iteration   9: 240378.116 ops/s
Iteration  10: 239962.364 ops/s
Iteration  11: 239279.308 ops/s
Iteration  12: 239270.868 ops/s
Iteration  13: 239998.118 ops/s
Iteration  14: 238309.576 ops/s
Iteration  15: 240214.544 ops/s
Iteration  16: 239631.285 ops/s
Iteration  17: 239282.188 ops/s
Iteration  18: 238776.861 ops/s
Iteration  19: 239816.704 ops/s
Iteration  20: 239287.628 ops/s
Iteration  21: 238418.132 ops/s
Iteration  22: 240183.907 ops/s
Iteration  23: 238670.061 ops/s
Iteration  24: 239385.925 ops/s
Iteration  25: 239448.557 ops/s
Iteration  26: 241135.969 ops/s
Iteration  27: 240686.416 ops/s
Iteration  28: 240018.671 ops/s
Iteration  29: 240096.352 ops/s
Iteration  30: 241053.469 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayTest._Benchmark.benchmark_disposeNoNeedForResetTimeBound":
  239717.841 ±(99.9%) 519.816 ops/s [Average]
  (min, avg, max) = (238309.576, 239717.841, 241135.969), stdev = 778.037
  CI (99.9%): [239198.024, 240237.657] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score     Error  Units
FlowableReplayTest._Benchmark.benchmark_disposeNoNeedForResetTimeBound  thrpt   30  239717.841 ± 519.816  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableAmbTest._Benchmark.benchmark_ambArraySingleElement$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableAmbTest._Benchmark.benchmark_ambArraySingleElement

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 11017027.556 ops/s
# Warmup Iteration   2: 17939023.694 ops/s
# Warmup Iteration   3: 18267635.223 ops/s
# Warmup Iteration   4: 18131068.803 ops/s
# Warmup Iteration   5: 18165519.323 ops/s
# Warmup Iteration   6: 18388267.462 ops/s
# Warmup Iteration   7: 18527430.668 ops/s
# Warmup Iteration   8: 18641621.684 ops/s
# Warmup Iteration   9: 18460187.220 ops/s
# Warmup Iteration  10: 18450810.438 ops/s
# Warmup Iteration  11: 18499991.517 ops/s
# Warmup Iteration  12: 18645922.186 ops/s
# Warmup Iteration  13: 18494027.049 ops/s
# Warmup Iteration  14: 18611326.486 ops/s
# Warmup Iteration  15: 18548787.898 ops/s
# Warmup Iteration  16: 18342940.546 ops/s
# Warmup Iteration  17: 18602657.210 ops/s
# Warmup Iteration  18: 18522051.531 ops/s
# Warmup Iteration  19: 18529079.057 ops/s
# Warmup Iteration  20: 18545965.035 ops/s
# Warmup Iteration  21: 18523227.249 ops/s
# Warmup Iteration  22: 18554037.350 ops/s
# Warmup Iteration  23: 18532338.327 ops/s
# Warmup Iteration  24: 18461771.974 ops/s
# Warmup Iteration  25: 18279250.526 ops/s
# Warmup Iteration  26: 18424958.087 ops/s
# Warmup Iteration  27: 18361278.449 ops/s
# Warmup Iteration  28: 18583202.466 ops/s
# Warmup Iteration  29: 18402262.082 ops/s
# Warmup Iteration  30: 18547799.946 ops/s
Iteration   1: 18367137.144 ops/s
Iteration   2: 18385348.483 ops/s
Iteration   3: 18592147.420 ops/s
Iteration   4: 18490670.536 ops/s
Iteration   5: 18578948.419 ops/s
Iteration   6: 18430182.370 ops/s
Iteration   7: 18541210.040 ops/s
Iteration   8: 18550813.294 ops/s
Iteration   9: 18502029.085 ops/s
Iteration  10: 18495434.196 ops/s
Iteration  11: 18465596.862 ops/s
Iteration  12: 18672700.618 ops/s
Iteration  13: 18488208.751 ops/s
Iteration  14: 18556203.996 ops/s
Iteration  15: 18457238.267 ops/s
Iteration  16: 18246704.355 ops/s
Iteration  17: 18539919.506 ops/s
Iteration  18: 18532673.420 ops/s
Iteration  19: 18460849.511 ops/s
Iteration  20: 18569705.865 ops/s
Iteration  21: 18523092.602 ops/s
Iteration  22: 18552915.863 ops/s
Iteration  23: 18543970.865 ops/s
Iteration  24: 18414318.895 ops/s
Iteration  25: 18467146.228 ops/s
Iteration  26: 18469696.012 ops/s
Iteration  27: 18457511.441 ops/s
Iteration  28: 18606962.857 ops/s
Iteration  29: 18258734.835 ops/s
Iteration  30: 18411580.807 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableAmbTest._Benchmark.benchmark_ambArraySingleElement":
  18487655.085 ±(99.9%) 62458.337 ops/s [Average]
  (min, avg, max) = (18246704.355, 18487655.085, 18672700.618), stdev = 93484.705
  CI (99.9%): [18425196.748, 18550113.422] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score       Error  Units
FlowableAmbTest._Benchmark.benchmark_ambArraySingleElement  thrpt   30  18487655.085 ± 62458.337  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableMergeIterableTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableMergeIterableTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 8114358.443 ops/s
# Warmup Iteration   2: 12873865.650 ops/s
# Warmup Iteration   3: 13326201.908 ops/s
# Warmup Iteration   4: 13265519.090 ops/s
# Warmup Iteration   5: 13263475.017 ops/s
# Warmup Iteration   6: 13244895.577 ops/s
# Warmup Iteration   7: 13308430.320 ops/s
# Warmup Iteration   8: 13295428.892 ops/s
# Warmup Iteration   9: 13330372.228 ops/s
# Warmup Iteration  10: 13345628.653 ops/s
# Warmup Iteration  11: 13336369.696 ops/s
# Warmup Iteration  12: 13257286.248 ops/s
# Warmup Iteration  13: 13317837.294 ops/s
# Warmup Iteration  14: 13260482.633 ops/s
# Warmup Iteration  15: 13225079.593 ops/s
# Warmup Iteration  16: 13171256.508 ops/s
# Warmup Iteration  17: 13215603.000 ops/s
# Warmup Iteration  18: 13141331.332 ops/s
# Warmup Iteration  19: 13236934.973 ops/s
# Warmup Iteration  20: 13235269.272 ops/s
# Warmup Iteration  21: 13308501.740 ops/s
# Warmup Iteration  22: 13288213.163 ops/s
# Warmup Iteration  23: 13249136.052 ops/s
# Warmup Iteration  24: 13209856.973 ops/s
# Warmup Iteration  25: 13223760.518 ops/s
# Warmup Iteration  26: 13186561.905 ops/s
# Warmup Iteration  27: 13230263.735 ops/s
# Warmup Iteration  28: 13280432.884 ops/s
# Warmup Iteration  29: 13185092.186 ops/s
# Warmup Iteration  30: 13233369.421 ops/s
Iteration   1: 13166013.574 ops/s
Iteration   2: 13248346.432 ops/s
Iteration   3: 13266193.060 ops/s
Iteration   4: 13190928.477 ops/s
Iteration   5: 13257357.261 ops/s
Iteration   6: 13204898.282 ops/s
Iteration   7: 13267719.470 ops/s
Iteration   8: 13142101.999 ops/s
Iteration   9: 13169491.659 ops/s
Iteration  10: 13250220.652 ops/s
Iteration  11: 13134940.818 ops/s
Iteration  12: 13272962.843 ops/s
Iteration  13: 13119655.418 ops/s
Iteration  14: 13155802.076 ops/s
Iteration  15: 13258061.025 ops/s
Iteration  16: 13319186.381 ops/s
Iteration  17: 13266477.311 ops/s
Iteration  18: 13131621.822 ops/s
Iteration  19: 13162984.548 ops/s
Iteration  20: 13208871.688 ops/s
Iteration  21: 13154381.634 ops/s
Iteration  22: 13142789.179 ops/s
Iteration  23: 13137253.294 ops/s
Iteration  24: 13191626.099 ops/s
Iteration  25: 13176573.672 ops/s
Iteration  26: 13270578.671 ops/s
Iteration  27: 13146226.058 ops/s
Iteration  28: 13193985.336 ops/s
Iteration  29: 13169456.569 ops/s
Iteration  30: 13199465.472 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableMergeIterableTest._Benchmark.benchmark_dispose":
  13199205.693 ±(99.9%) 36694.821 ops/s [Average]
  (min, avg, max) = (13119655.418, 13199205.693, 13319186.381), stdev = 54923.084
  CI (99.9%): [13162510.872, 13235900.513] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score       Error  Units
CompletableMergeIterableTest._Benchmark.benchmark_dispose  thrpt   30  13199205.693 ± 36694.821  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.schedulers.SchedulerPoolFactoryTest._Benchmark.benchmark_boolPropertiesFailureReturnsDefaultMissing$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.schedulers.SchedulerPoolFactoryTest._Benchmark.benchmark_boolPropertiesFailureReturnsDefaultMissing

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 455774.760 ops/s
# Warmup Iteration   2: 471403.686 ops/s
# Warmup Iteration   3: 495577.932 ops/s
# Warmup Iteration   4: 494961.463 ops/s
# Warmup Iteration   5: 497181.300 ops/s
# Warmup Iteration   6: 497549.204 ops/s
# Warmup Iteration   7: 495019.442 ops/s
# Warmup Iteration   8: 496099.581 ops/s
# Warmup Iteration   9: 494290.713 ops/s
# Warmup Iteration  10: 494903.233 ops/s
# Warmup Iteration  11: 491367.243 ops/s
# Warmup Iteration  12: 493430.951 ops/s
# Warmup Iteration  13: 492451.297 ops/s
# Warmup Iteration  14: 489717.236 ops/s
# Warmup Iteration  15: 493529.984 ops/s
# Warmup Iteration  16: 494296.904 ops/s
# Warmup Iteration  17: 522985.104 ops/s
# Warmup Iteration  18: 524833.648 ops/s
# Warmup Iteration  19: 524370.660 ops/s
# Warmup Iteration  20: 524867.097 ops/s
# Warmup Iteration  21: 528305.405 ops/s
# Warmup Iteration  22: 528719.824 ops/s
# Warmup Iteration  23: 527942.928 ops/s
# Warmup Iteration  24: 523544.947 ops/s
# Warmup Iteration  25: 524393.317 ops/s
# Warmup Iteration  26: 530086.054 ops/s
# Warmup Iteration  27: 525346.423 ops/s
# Warmup Iteration  28: 522515.546 ops/s
# Warmup Iteration  29: 525737.708 ops/s
# Warmup Iteration  30: 525589.574 ops/s
Iteration   1: 529354.680 ops/s
Iteration   2: 528395.239 ops/s
Iteration   3: 521565.689 ops/s
Iteration   4: 527452.348 ops/s
Iteration   5: 523117.801 ops/s
Iteration   6: 526110.160 ops/s
Iteration   7: 527954.091 ops/s
Iteration   8: 524721.342 ops/s
Iteration   9: 524925.738 ops/s
Iteration  10: 524886.263 ops/s
Iteration  11: 521437.982 ops/s
Iteration  12: 526395.395 ops/s
Iteration  13: 526140.166 ops/s
Iteration  14: 526746.448 ops/s
Iteration  15: 525280.353 ops/s
Iteration  16: 525415.657 ops/s
Iteration  17: 524635.134 ops/s
Iteration  18: 523880.521 ops/s
Iteration  19: 527925.792 ops/s
Iteration  20: 525959.691 ops/s
Iteration  21: 526911.530 ops/s
Iteration  22: 527815.332 ops/s
Iteration  23: 527302.668 ops/s
Iteration  24: 523106.951 ops/s
Iteration  25: 526433.674 ops/s
Iteration  26: 526095.427 ops/s
Iteration  27: 527035.514 ops/s
Iteration  28: 526769.000 ops/s
Iteration  29: 525169.823 ops/s
Iteration  30: 523540.921 ops/s


Result "io.reactivex.rxjava3.internal.schedulers.SchedulerPoolFactoryTest._Benchmark.benchmark_boolPropertiesFailureReturnsDefaultMissing":
  525749.378 ±(99.9%) 1291.152 ops/s [Average]
  (min, avg, max) = (521437.982, 525749.378, 529354.680), stdev = 1932.536
  CI (99.9%): [524458.225, 527040.530] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                  Mode  Cnt       Score      Error  Units
SchedulerPoolFactoryTest._Benchmark.benchmark_boolPropertiesFailureReturnsDefaultMissing  thrpt   30  525749.378 ± 1291.152  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.schedulers.SchedulerPoolFactoryTest._Benchmark.benchmark_utilityClass$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.schedulers.SchedulerPoolFactoryTest._Benchmark.benchmark_utilityClass

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 391274.123 ops/s
# Warmup Iteration   2: 434665.624 ops/s
# Warmup Iteration   3: 428847.600 ops/s
# Warmup Iteration   4: 462935.065 ops/s
# Warmup Iteration   5: 462245.854 ops/s
# Warmup Iteration   6: 464578.923 ops/s
# Warmup Iteration   7: 464075.724 ops/s
# Warmup Iteration   8: 463228.244 ops/s
# Warmup Iteration   9: 463197.540 ops/s
# Warmup Iteration  10: 463781.700 ops/s
# Warmup Iteration  11: 463435.974 ops/s
# Warmup Iteration  12: 462440.441 ops/s
# Warmup Iteration  13: 462166.307 ops/s
# Warmup Iteration  14: 462486.227 ops/s
# Warmup Iteration  15: 460275.679 ops/s
# Warmup Iteration  16: 461784.599 ops/s
# Warmup Iteration  17: 484087.351 ops/s
# Warmup Iteration  18: 486800.849 ops/s
# Warmup Iteration  19: 486156.721 ops/s
# Warmup Iteration  20: 489215.242 ops/s
# Warmup Iteration  21: 490470.462 ops/s
# Warmup Iteration  22: 487429.760 ops/s
# Warmup Iteration  23: 483616.305 ops/s
# Warmup Iteration  24: 485824.620 ops/s
# Warmup Iteration  25: 488217.933 ops/s
# Warmup Iteration  26: 485732.899 ops/s
# Warmup Iteration  27: 483626.666 ops/s
# Warmup Iteration  28: 488160.997 ops/s
# Warmup Iteration  29: 487777.075 ops/s
# Warmup Iteration  30: 488018.061 ops/s
Iteration   1: 489435.259 ops/s
Iteration   2: 487424.790 ops/s
Iteration   3: 489253.322 ops/s
Iteration   4: 487081.078 ops/s
Iteration   5: 488752.633 ops/s
Iteration   6: 485306.562 ops/s
Iteration   7: 485326.758 ops/s
Iteration   8: 489918.623 ops/s
Iteration   9: 488291.367 ops/s
Iteration  10: 487784.539 ops/s
Iteration  11: 487940.332 ops/s
Iteration  12: 488263.087 ops/s
Iteration  13: 485720.986 ops/s
Iteration  14: 484383.260 ops/s
Iteration  15: 485982.947 ops/s
Iteration  16: 490544.182 ops/s
Iteration  17: 484012.562 ops/s
Iteration  18: 488968.741 ops/s
Iteration  19: 488519.593 ops/s
Iteration  20: 488277.138 ops/s
Iteration  21: 486918.070 ops/s
Iteration  22: 485365.960 ops/s
Iteration  23: 488133.520 ops/s
Iteration  24: 489077.188 ops/s
Iteration  25: 487592.821 ops/s
Iteration  26: 486815.341 ops/s
Iteration  27: 486745.422 ops/s
Iteration  28: 485303.038 ops/s
Iteration  29: 486143.525 ops/s
Iteration  30: 487163.846 ops/s


Result "io.reactivex.rxjava3.internal.schedulers.SchedulerPoolFactoryTest._Benchmark.benchmark_utilityClass":
  487348.216 ±(99.9%) 1114.963 ops/s [Average]
  (min, avg, max) = (484012.562, 487348.216, 490544.182), stdev = 1668.824
  CI (99.9%): [486233.254, 488463.179] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score      Error  Units
SchedulerPoolFactoryTest._Benchmark.benchmark_utilityClass  thrpt   30  487348.216 ± 1114.963  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_fromFlowableMany$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_fromFlowableMany

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 573185.933 ops/s
# Warmup Iteration   2: 702926.409 ops/s
# Warmup Iteration   3: 713717.479 ops/s
# Warmup Iteration   4: 760442.808 ops/s
# Warmup Iteration   5: 762155.664 ops/s
# Warmup Iteration   6: 762064.015 ops/s
# Warmup Iteration   7: 764552.295 ops/s
# Warmup Iteration   8: 765856.492 ops/s
# Warmup Iteration   9: 762708.645 ops/s
# Warmup Iteration  10: 763199.053 ops/s
# Warmup Iteration  11: 757671.570 ops/s
# Warmup Iteration  12: 756279.924 ops/s
# Warmup Iteration  13: 758739.209 ops/s
# Warmup Iteration  14: 761054.517 ops/s
# Warmup Iteration  15: 760842.998 ops/s
# Warmup Iteration  16: 761756.156 ops/s
# Warmup Iteration  17: 805481.965 ops/s
# Warmup Iteration  18: 804171.732 ops/s
# Warmup Iteration  19: 800494.327 ops/s
# Warmup Iteration  20: 803446.152 ops/s
# Warmup Iteration  21: 797808.936 ops/s
# Warmup Iteration  22: 801672.015 ops/s
# Warmup Iteration  23: 802062.289 ops/s
# Warmup Iteration  24: 802749.445 ops/s
# Warmup Iteration  25: 803020.822 ops/s
# Warmup Iteration  26: 803746.340 ops/s
# Warmup Iteration  27: 804677.388 ops/s
# Warmup Iteration  28: 803386.023 ops/s
# Warmup Iteration  29: 803942.150 ops/s
# Warmup Iteration  30: 801801.693 ops/s
Iteration   1: 803733.809 ops/s
Iteration   2: 800324.499 ops/s
Iteration   3: 795892.421 ops/s
Iteration   4: 798660.025 ops/s
Iteration   5: 799995.708 ops/s
Iteration   6: 800318.180 ops/s
Iteration   7: 800031.241 ops/s
Iteration   8: 800504.733 ops/s
Iteration   9: 805623.677 ops/s
Iteration  10: 801622.331 ops/s
Iteration  11: 800900.805 ops/s
Iteration  12: 803113.074 ops/s
Iteration  13: 801685.666 ops/s
Iteration  14: 798148.128 ops/s
Iteration  15: 801997.405 ops/s
Iteration  16: 802389.617 ops/s
Iteration  17: 799614.770 ops/s
Iteration  18: 800028.843 ops/s
Iteration  19: 802757.281 ops/s
Iteration  20: 798539.717 ops/s
Iteration  21: 802543.470 ops/s
Iteration  22: 798525.811 ops/s
Iteration  23: 805670.258 ops/s
Iteration  24: 800309.065 ops/s
Iteration  25: 801094.903 ops/s
Iteration  26: 796957.617 ops/s
Iteration  27: 804015.211 ops/s
Iteration  28: 804027.916 ops/s
Iteration  29: 802201.948 ops/s
Iteration  30: 802692.384 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_fromFlowableMany":
  801130.684 ±(99.9%) 1574.809 ops/s [Average]
  (min, avg, max) = (795892.421, 801130.684, 805670.258), stdev = 2357.100
  CI (99.9%): [799555.875, 802705.493] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt       Score      Error  Units
MaybeTest._Benchmark.benchmark_fromFlowableMany  thrpt   30  801130.684 ± 1574.809  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableAmbTest._Benchmark.benchmark_disposed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableAmbTest._Benchmark.benchmark_disposed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3264916.392 ops/s
# Warmup Iteration   2: 6058852.149 ops/s
# Warmup Iteration   3: 6068379.640 ops/s
# Warmup Iteration   4: 6105707.007 ops/s
# Warmup Iteration   5: 6053003.873 ops/s
# Warmup Iteration   6: 6009265.961 ops/s
# Warmup Iteration   7: 6066752.159 ops/s
# Warmup Iteration   8: 6068093.292 ops/s
# Warmup Iteration   9: 6090181.471 ops/s
# Warmup Iteration  10: 6075053.379 ops/s
# Warmup Iteration  11: 6106143.652 ops/s
# Warmup Iteration  12: 6064436.065 ops/s
# Warmup Iteration  13: 6098137.351 ops/s
# Warmup Iteration  14: 6113882.464 ops/s
# Warmup Iteration  15: 6097638.936 ops/s
# Warmup Iteration  16: 6081504.243 ops/s
# Warmup Iteration  17: 6118448.874 ops/s
# Warmup Iteration  18: 6112554.624 ops/s
# Warmup Iteration  19: 6108814.015 ops/s
# Warmup Iteration  20: 6091505.854 ops/s
# Warmup Iteration  21: 6090822.872 ops/s
# Warmup Iteration  22: 6183168.527 ops/s
# Warmup Iteration  23: 6139445.999 ops/s
# Warmup Iteration  24: 6105376.206 ops/s
# Warmup Iteration  25: 6132256.551 ops/s
# Warmup Iteration  26: 6099400.810 ops/s
# Warmup Iteration  27: 6162784.226 ops/s
# Warmup Iteration  28: 6140530.965 ops/s
# Warmup Iteration  29: 6127818.885 ops/s
# Warmup Iteration  30: 6113309.587 ops/s
Iteration   1: 6133451.242 ops/s
Iteration   2: 6121408.129 ops/s
Iteration   3: 6118990.947 ops/s
Iteration   4: 6102504.665 ops/s
Iteration   5: 6072282.908 ops/s
Iteration   6: 6143009.365 ops/s
Iteration   7: 6110409.550 ops/s
Iteration   8: 6142011.910 ops/s
Iteration   9: 6136573.629 ops/s
Iteration  10: 6121999.478 ops/s
Iteration  11: 6072178.244 ops/s
Iteration  12: 6108002.313 ops/s
Iteration  13: 6144991.915 ops/s
Iteration  14: 6149836.507 ops/s
Iteration  15: 6084163.839 ops/s
Iteration  16: 6137747.028 ops/s
Iteration  17: 6133251.282 ops/s
Iteration  18: 6089996.867 ops/s
Iteration  19: 6109506.550 ops/s
Iteration  20: 6113848.310 ops/s
Iteration  21: 6116844.791 ops/s
Iteration  22: 6128357.054 ops/s
Iteration  23: 6117804.825 ops/s
Iteration  24: 6104026.477 ops/s
Iteration  25: 6117699.884 ops/s
Iteration  26: 6129678.413 ops/s
Iteration  27: 6072966.678 ops/s
Iteration  28: 6123454.590 ops/s
Iteration  29: 6132658.988 ops/s
Iteration  30: 6129914.582 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableAmbTest._Benchmark.benchmark_disposed":
  6117319.032 ±(99.9%) 14482.155 ops/s [Average]
  (min, avg, max) = (6072178.244, 6117319.032, 6149836.507), stdev = 21676.210
  CI (99.9%): [6102836.877, 6131801.187] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt        Score       Error  Units
FlowableAmbTest._Benchmark.benchmark_disposed  thrpt   30  6117319.032 ± 14482.155  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithSizeTest._Benchmark.benchmark_windowUnsubscribeOverlapping$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithSizeTest._Benchmark.benchmark_windowUnsubscribeOverlapping

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 292739.669 ops/s
# Warmup Iteration   2: 499227.041 ops/s
# Warmup Iteration   3: 545541.107 ops/s
# Warmup Iteration   4: 567589.042 ops/s
# Warmup Iteration   5: 563102.362 ops/s
# Warmup Iteration   6: 565252.563 ops/s
# Warmup Iteration   7: 566327.663 ops/s
# Warmup Iteration   8: 569616.289 ops/s
# Warmup Iteration   9: 558852.699 ops/s
# Warmup Iteration  10: 567706.369 ops/s
# Warmup Iteration  11: 557157.926 ops/s
# Warmup Iteration  12: 567452.640 ops/s
# Warmup Iteration  13: 563088.833 ops/s
# Warmup Iteration  14: 561336.581 ops/s
# Warmup Iteration  15: 566975.446 ops/s
# Warmup Iteration  16: 566207.633 ops/s
# Warmup Iteration  17: 565248.239 ops/s
# Warmup Iteration  18: 562561.044 ops/s
# Warmup Iteration  19: 562751.600 ops/s
# Warmup Iteration  20: 561475.548 ops/s
# Warmup Iteration  21: 558038.402 ops/s
# Warmup Iteration  22: 560678.402 ops/s
# Warmup Iteration  23: 563136.872 ops/s
# Warmup Iteration  24: 556625.216 ops/s
# Warmup Iteration  25: 565076.450 ops/s
# Warmup Iteration  26: 561140.621 ops/s
# Warmup Iteration  27: 562346.825 ops/s
# Warmup Iteration  28: 557534.503 ops/s
# Warmup Iteration  29: 558656.453 ops/s
# Warmup Iteration  30: 567131.802 ops/s
Iteration   1: 562258.124 ops/s
Iteration   2: 560835.166 ops/s
Iteration   3: 559261.651 ops/s
Iteration   4: 560968.989 ops/s
Iteration   5: 561101.989 ops/s
Iteration   6: 558076.602 ops/s
Iteration   7: 561096.621 ops/s
Iteration   8: 563845.066 ops/s
Iteration   9: 558979.376 ops/s
Iteration  10: 565641.724 ops/s
Iteration  11: 564554.783 ops/s
Iteration  12: 556817.894 ops/s
Iteration  13: 560095.448 ops/s
Iteration  14: 563776.727 ops/s
Iteration  15: 561592.003 ops/s
Iteration  16: 559344.599 ops/s
Iteration  17: 563868.201 ops/s
Iteration  18: 559783.943 ops/s
Iteration  19: 557449.186 ops/s
Iteration  20: 561133.111 ops/s
Iteration  21: 561900.967 ops/s
Iteration  22: 562026.925 ops/s
Iteration  23: 555027.767 ops/s
Iteration  24: 560100.447 ops/s
Iteration  25: 562991.323 ops/s
Iteration  26: 558447.778 ops/s
Iteration  27: 563699.872 ops/s
Iteration  28: 557635.311 ops/s
Iteration  29: 559615.305 ops/s
Iteration  30: 565330.652 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithSizeTest._Benchmark.benchmark_windowUnsubscribeOverlapping":
  560908.585 ±(99.9%) 1749.511 ops/s [Average]
  (min, avg, max) = (555027.767, 560908.585, 565641.724), stdev = 2618.586
  CI (99.9%): [559159.074, 562658.096] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt       Score      Error  Units
ObservableWindowWithSizeTest._Benchmark.benchmark_windowUnsubscribeOverlapping  thrpt   30  560908.585 ± 1749.511  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapTest._Benchmark.benchmark_fusedSourceCrashResumeWithNextSource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapTest._Benchmark.benchmark_fusedSourceCrashResumeWithNextSource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 266152.964 ops/s
# Warmup Iteration   2: 382934.089 ops/s
# Warmup Iteration   3: 403569.970 ops/s
# Warmup Iteration   4: 423946.190 ops/s
# Warmup Iteration   5: 434279.426 ops/s
# Warmup Iteration   6: 436810.355 ops/s
# Warmup Iteration   7: 436694.400 ops/s
# Warmup Iteration   8: 435643.483 ops/s
# Warmup Iteration   9: 437711.367 ops/s
# Warmup Iteration  10: 433388.584 ops/s
# Warmup Iteration  11: 435308.862 ops/s
# Warmup Iteration  12: 436364.219 ops/s
# Warmup Iteration  13: 433302.251 ops/s
# Warmup Iteration  14: 433416.589 ops/s
# Warmup Iteration  15: 434669.035 ops/s
# Warmup Iteration  16: 435107.016 ops/s
# Warmup Iteration  17: 443646.390 ops/s
# Warmup Iteration  18: 442076.845 ops/s
# Warmup Iteration  19: 444787.948 ops/s
# Warmup Iteration  20: 444101.847 ops/s
# Warmup Iteration  21: 441725.569 ops/s
# Warmup Iteration  22: 442977.829 ops/s
# Warmup Iteration  23: 441870.186 ops/s
# Warmup Iteration  24: 442935.651 ops/s
# Warmup Iteration  25: 443043.532 ops/s
# Warmup Iteration  26: 445759.221 ops/s
# Warmup Iteration  27: 442509.237 ops/s
# Warmup Iteration  28: 446672.038 ops/s
# Warmup Iteration  29: 447910.177 ops/s
# Warmup Iteration  30: 446254.512 ops/s
Iteration   1: 446690.491 ops/s
Iteration   2: 444391.767 ops/s
Iteration   3: 443285.255 ops/s
Iteration   4: 444414.590 ops/s
Iteration   5: 442694.266 ops/s
Iteration   6: 439722.622 ops/s
Iteration   7: 442772.953 ops/s
Iteration   8: 442917.700 ops/s
Iteration   9: 449969.289 ops/s
Iteration  10: 444818.001 ops/s
Iteration  11: 444694.505 ops/s
Iteration  12: 443653.348 ops/s
Iteration  13: 442914.598 ops/s
Iteration  14: 443874.702 ops/s
Iteration  15: 442379.542 ops/s
Iteration  16: 444865.731 ops/s
Iteration  17: 444577.460 ops/s
Iteration  18: 442142.211 ops/s
Iteration  19: 444771.742 ops/s
Iteration  20: 445494.353 ops/s
Iteration  21: 445031.970 ops/s
Iteration  22: 441987.683 ops/s
Iteration  23: 443379.072 ops/s
Iteration  24: 447689.138 ops/s
Iteration  25: 445882.961 ops/s
Iteration  26: 446083.069 ops/s
Iteration  27: 443635.521 ops/s
Iteration  28: 444657.297 ops/s
Iteration  29: 442672.762 ops/s
Iteration  30: 443819.819 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapTest._Benchmark.benchmark_fusedSourceCrashResumeWithNextSource":
  444196.147 ±(99.9%) 1283.575 ops/s [Average]
  (min, avg, max) = (439722.622, 444196.147, 449969.289), stdev = 1921.195
  CI (99.9%): [442912.572, 445479.722] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt       Score      Error  Units
ObservableFlatMapTest._Benchmark.benchmark_fusedSourceCrashResumeWithNextSource  thrpt   30  444196.147 ± 1283.575  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDoFinallyTest._Benchmark.benchmark_clearIsEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDoFinallyTest._Benchmark.benchmark_clearIsEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 12195852.271 ops/s
# Warmup Iteration   2: 19387755.109 ops/s
# Warmup Iteration   3: 20554673.428 ops/s
# Warmup Iteration   4: 20568123.030 ops/s
# Warmup Iteration   5: 20471848.835 ops/s
# Warmup Iteration   6: 20582581.722 ops/s
# Warmup Iteration   7: 20536242.595 ops/s
# Warmup Iteration   8: 20492067.901 ops/s
# Warmup Iteration   9: 20497976.163 ops/s
# Warmup Iteration  10: 20328942.175 ops/s
# Warmup Iteration  11: 20621351.071 ops/s
# Warmup Iteration  12: 20487176.033 ops/s
# Warmup Iteration  13: 20611615.355 ops/s
# Warmup Iteration  14: 20512230.899 ops/s
# Warmup Iteration  15: 20432955.614 ops/s
# Warmup Iteration  16: 20420250.651 ops/s
# Warmup Iteration  17: 20313206.625 ops/s
# Warmup Iteration  18: 20490650.441 ops/s
# Warmup Iteration  19: 20354315.705 ops/s
# Warmup Iteration  20: 20482843.786 ops/s
# Warmup Iteration  21: 20586791.610 ops/s
# Warmup Iteration  22: 20549753.457 ops/s
# Warmup Iteration  23: 20648241.039 ops/s
# Warmup Iteration  24: 20605354.019 ops/s
# Warmup Iteration  25: 20516763.551 ops/s
# Warmup Iteration  26: 20444024.010 ops/s
# Warmup Iteration  27: 20553938.020 ops/s
# Warmup Iteration  28: 20577301.177 ops/s
# Warmup Iteration  29: 20596445.409 ops/s
# Warmup Iteration  30: 20554544.528 ops/s
Iteration   1: 20563475.159 ops/s
Iteration   2: 20521985.943 ops/s
Iteration   3: 20495549.570 ops/s
Iteration   4: 20483693.394 ops/s
Iteration   5: 20568869.030 ops/s
Iteration   6: 20547778.096 ops/s
Iteration   7: 20403815.031 ops/s
Iteration   8: 20565686.755 ops/s
Iteration   9: 20544045.381 ops/s
Iteration  10: 20611649.852 ops/s
Iteration  11: 20580500.881 ops/s
Iteration  12: 20471351.507 ops/s
Iteration  13: 20473295.089 ops/s
Iteration  14: 20477655.692 ops/s
Iteration  15: 20407163.762 ops/s
Iteration  16: 20527056.180 ops/s
Iteration  17: 20662410.231 ops/s
Iteration  18: 20545120.674 ops/s
Iteration  19: 20631059.514 ops/s
Iteration  20: 20571286.482 ops/s
Iteration  21: 20422189.565 ops/s
Iteration  22: 20536138.323 ops/s
Iteration  23: 20719043.886 ops/s
Iteration  24: 20460892.295 ops/s
Iteration  25: 20480718.983 ops/s
Iteration  26: 20596677.531 ops/s
Iteration  27: 20642517.826 ops/s
Iteration  28: 20435523.777 ops/s
Iteration  29: 20688151.006 ops/s
Iteration  30: 20623985.599 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableDoFinallyTest._Benchmark.benchmark_clearIsEmpty":
  20541976.234 ±(99.9%) 55108.154 ops/s [Average]
  (min, avg, max) = (20403815.031, 20541976.234, 20719043.886), stdev = 82483.296
  CI (99.9%): [20486868.080, 20597084.387] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score       Error  Units
ObservableDoFinallyTest._Benchmark.benchmark_clearIsEmpty  thrpt   30  20541976.234 ± 55108.154  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableGroupByTest._Benchmark.benchmark_reentrantComplete$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableGroupByTest._Benchmark.benchmark_reentrantComplete

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 623773.146 ops/s
# Warmup Iteration   2: 973877.366 ops/s
# Warmup Iteration   3: 1206638.533 ops/s
# Warmup Iteration   4: 1211659.005 ops/s
# Warmup Iteration   5: 1215210.440 ops/s
# Warmup Iteration   6: 1203725.114 ops/s
# Warmup Iteration   7: 1204625.293 ops/s
# Warmup Iteration   8: 1209572.613 ops/s
# Warmup Iteration   9: 1201200.683 ops/s
# Warmup Iteration  10: 1201752.092 ops/s
# Warmup Iteration  11: 1197989.616 ops/s
# Warmup Iteration  12: 1206643.565 ops/s
# Warmup Iteration  13: 1205091.698 ops/s
# Warmup Iteration  14: 1212344.759 ops/s
# Warmup Iteration  15: 1202091.496 ops/s
# Warmup Iteration  16: 1196815.808 ops/s
# Warmup Iteration  17: 1197277.604 ops/s
# Warmup Iteration  18: 1211549.478 ops/s
# Warmup Iteration  19: 1211090.684 ops/s
# Warmup Iteration  20: 1211502.855 ops/s
# Warmup Iteration  21: 1206427.916 ops/s
# Warmup Iteration  22: 1214286.513 ops/s
# Warmup Iteration  23: 1207160.598 ops/s
# Warmup Iteration  24: 1209131.438 ops/s
# Warmup Iteration  25: 1202920.151 ops/s
# Warmup Iteration  26: 1203588.127 ops/s
# Warmup Iteration  27: 1209538.835 ops/s
# Warmup Iteration  28: 1207273.383 ops/s
# Warmup Iteration  29: 1209893.247 ops/s
# Warmup Iteration  30: 1205196.878 ops/s
Iteration   1: 1204812.380 ops/s
Iteration   2: 1206204.978 ops/s
Iteration   3: 1208280.754 ops/s
Iteration   4: 1212641.481 ops/s
Iteration   5: 1209892.166 ops/s
Iteration   6: 1208401.988 ops/s
Iteration   7: 1203333.041 ops/s
Iteration   8: 1206317.518 ops/s
Iteration   9: 1211239.359 ops/s
Iteration  10: 1204580.089 ops/s
Iteration  11: 1206217.225 ops/s
Iteration  12: 1192345.245 ops/s
Iteration  13: 1200483.168 ops/s
Iteration  14: 1205578.629 ops/s
Iteration  15: 1209967.168 ops/s
Iteration  16: 1207407.037 ops/s
Iteration  17: 1213144.842 ops/s
Iteration  18: 1206098.965 ops/s
Iteration  19: 1207102.851 ops/s
Iteration  20: 1212369.466 ops/s
Iteration  21: 1204592.744 ops/s
Iteration  22: 1208214.900 ops/s
Iteration  23: 1212285.533 ops/s
Iteration  24: 1219662.970 ops/s
Iteration  25: 1204568.530 ops/s
Iteration  26: 1205789.474 ops/s
Iteration  27: 1206590.715 ops/s
Iteration  28: 1207512.248 ops/s
Iteration  29: 1210117.303 ops/s
Iteration  30: 1204272.536 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableGroupByTest._Benchmark.benchmark_reentrantComplete":
  1207334.177 ±(99.9%) 3139.552 ops/s [Average]
  (min, avg, max) = (1192345.245, 1207334.177, 1219662.970), stdev = 4699.133
  CI (99.9%): [1204194.625, 1210473.728] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
ObservableGroupByTest._Benchmark.benchmark_reentrantComplete  thrpt   30  1207334.177 ± 3139.552  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFilterTest._Benchmark.benchmark_fusedSync$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFilterTest._Benchmark.benchmark_fusedSync

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 4485071.230 ops/s
# Warmup Iteration   2: 7307608.094 ops/s
# Warmup Iteration   3: 7931790.535 ops/s
# Warmup Iteration   4: 7902894.077 ops/s
# Warmup Iteration   5: 7945446.641 ops/s
# Warmup Iteration   6: 7900806.227 ops/s
# Warmup Iteration   7: 7902408.889 ops/s
# Warmup Iteration   8: 7967322.383 ops/s
# Warmup Iteration   9: 7872696.780 ops/s
# Warmup Iteration  10: 7896212.977 ops/s
# Warmup Iteration  11: 7871095.948 ops/s
# Warmup Iteration  12: 7933471.811 ops/s
# Warmup Iteration  13: 7942868.412 ops/s
# Warmup Iteration  14: 7872629.192 ops/s
# Warmup Iteration  15: 7927171.291 ops/s
# Warmup Iteration  16: 7882060.581 ops/s
# Warmup Iteration  17: 7890159.384 ops/s
# Warmup Iteration  18: 7861650.483 ops/s
# Warmup Iteration  19: 7930622.421 ops/s
# Warmup Iteration  20: 7906101.774 ops/s
# Warmup Iteration  21: 7890362.363 ops/s
# Warmup Iteration  22: 7948080.968 ops/s
# Warmup Iteration  23: 7939505.727 ops/s
# Warmup Iteration  24: 7935532.163 ops/s
# Warmup Iteration  25: 7961783.785 ops/s
# Warmup Iteration  26: 7903840.917 ops/s
# Warmup Iteration  27: 7915441.581 ops/s
# Warmup Iteration  28: 7920830.329 ops/s
# Warmup Iteration  29: 7908874.379 ops/s
# Warmup Iteration  30: 7879724.217 ops/s
Iteration   1: 7887917.342 ops/s
Iteration   2: 7887153.639 ops/s
Iteration   3: 7874231.823 ops/s
Iteration   4: 7875186.889 ops/s
Iteration   5: 7906273.286 ops/s
Iteration   6: 7863216.406 ops/s
Iteration   7: 7827265.139 ops/s
Iteration   8: 7877502.999 ops/s
Iteration   9: 7879259.144 ops/s
Iteration  10: 7881249.097 ops/s
Iteration  11: 7901322.883 ops/s
Iteration  12: 7887017.484 ops/s
Iteration  13: 7868423.929 ops/s
Iteration  14: 7850800.189 ops/s
Iteration  15: 7924390.817 ops/s
Iteration  16: 7884535.950 ops/s
Iteration  17: 7914391.380 ops/s
Iteration  18: 7853134.515 ops/s
Iteration  19: 7883373.523 ops/s
Iteration  20: 7901383.128 ops/s
Iteration  21: 7851717.820 ops/s
Iteration  22: 7895148.518 ops/s
Iteration  23: 7865785.307 ops/s
Iteration  24: 7909547.336 ops/s
Iteration  25: 7887406.690 ops/s
Iteration  26: 7872684.006 ops/s
Iteration  27: 7863800.971 ops/s
Iteration  28: 7890670.018 ops/s
Iteration  29: 7860667.963 ops/s
Iteration  30: 7852201.056 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFilterTest._Benchmark.benchmark_fusedSync":
  7879255.308 ±(99.9%) 14417.964 ops/s [Average]
  (min, avg, max) = (7827265.139, 7879255.308, 7924390.817), stdev = 21580.131
  CI (99.9%): [7864837.344, 7893673.272] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score       Error  Units
ObservableFilterTest._Benchmark.benchmark_fusedSync  thrpt   30  7879255.308 ± 14417.964  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDoFinallyTest._Benchmark.benchmark_syncFused$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDoFinallyTest._Benchmark.benchmark_syncFused

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 4408888.580 ops/s
# Warmup Iteration   2: 6242369.808 ops/s
# Warmup Iteration   3: 7117282.662 ops/s
# Warmup Iteration   4: 7086885.558 ops/s
# Warmup Iteration   5: 7074431.054 ops/s
# Warmup Iteration   6: 7158484.846 ops/s
# Warmup Iteration   7: 7077774.925 ops/s
# Warmup Iteration   8: 7072043.546 ops/s
# Warmup Iteration   9: 7104132.142 ops/s
# Warmup Iteration  10: 7132376.415 ops/s
# Warmup Iteration  11: 7067844.588 ops/s
# Warmup Iteration  12: 7110987.957 ops/s
# Warmup Iteration  13: 7113253.003 ops/s
# Warmup Iteration  14: 7104806.341 ops/s
# Warmup Iteration  15: 7078267.899 ops/s
# Warmup Iteration  16: 7144867.252 ops/s
# Warmup Iteration  17: 7207520.490 ops/s
# Warmup Iteration  18: 7146573.251 ops/s
# Warmup Iteration  19: 7108862.426 ops/s
# Warmup Iteration  20: 7094364.872 ops/s
# Warmup Iteration  21: 7181678.439 ops/s
# Warmup Iteration  22: 7116285.737 ops/s
# Warmup Iteration  23: 7089517.717 ops/s
# Warmup Iteration  24: 7133699.658 ops/s
# Warmup Iteration  25: 7079807.038 ops/s
# Warmup Iteration  26: 7188767.380 ops/s
# Warmup Iteration  27: 7170489.116 ops/s
# Warmup Iteration  28: 7115278.102 ops/s
# Warmup Iteration  29: 7112003.044 ops/s
# Warmup Iteration  30: 7121264.270 ops/s
Iteration   1: 7112220.935 ops/s
Iteration   2: 7146824.609 ops/s
Iteration   3: 7093089.951 ops/s
Iteration   4: 7128056.862 ops/s
Iteration   5: 7151812.464 ops/s
Iteration   6: 7143314.045 ops/s
Iteration   7: 7140885.806 ops/s
Iteration   8: 7107323.857 ops/s
Iteration   9: 7138620.753 ops/s
Iteration  10: 7121789.723 ops/s
Iteration  11: 7115704.136 ops/s
Iteration  12: 7115701.700 ops/s
Iteration  13: 7093777.482 ops/s
Iteration  14: 7135070.508 ops/s
Iteration  15: 7121723.312 ops/s
Iteration  16: 7123783.638 ops/s
Iteration  17: 7098970.936 ops/s
Iteration  18: 7146564.382 ops/s
Iteration  19: 7154487.330 ops/s
Iteration  20: 7124329.111 ops/s
Iteration  21: 7137727.787 ops/s
Iteration  22: 7120053.443 ops/s
Iteration  23: 7124614.060 ops/s
Iteration  24: 7133645.371 ops/s
Iteration  25: 7137222.565 ops/s
Iteration  26: 7115050.629 ops/s
Iteration  27: 7118905.342 ops/s
Iteration  28: 7101600.884 ops/s
Iteration  29: 7125431.819 ops/s
Iteration  30: 7103156.452 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableDoFinallyTest._Benchmark.benchmark_syncFused":
  7124381.996 ±(99.9%) 11313.972 ops/s [Average]
  (min, avg, max) = (7093089.951, 7124381.996, 7154487.330), stdev = 16934.221
  CI (99.9%): [7113068.025, 7135695.968] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
ObservableDoFinallyTest._Benchmark.benchmark_syncFused  thrpt   30  7124381.996 ± 11313.972  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDoAfterNextTest._Benchmark.benchmark_syncFused$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDoAfterNextTest._Benchmark.benchmark_syncFused

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1988982.882 ops/s
# Warmup Iteration   2: 3569685.881 ops/s
# Warmup Iteration   3: 3872296.215 ops/s
# Warmup Iteration   4: 3853024.258 ops/s
# Warmup Iteration   5: 3859522.062 ops/s
# Warmup Iteration   6: 3858572.491 ops/s
# Warmup Iteration   7: 3856091.392 ops/s
# Warmup Iteration   8: 3872201.508 ops/s
# Warmup Iteration   9: 3865007.456 ops/s
# Warmup Iteration  10: 3887384.958 ops/s
# Warmup Iteration  11: 3875581.535 ops/s
# Warmup Iteration  12: 3880083.452 ops/s
# Warmup Iteration  13: 3877466.659 ops/s
# Warmup Iteration  14: 3872440.686 ops/s
# Warmup Iteration  15: 3866063.890 ops/s
# Warmup Iteration  16: 3852167.488 ops/s
# Warmup Iteration  17: 3884012.122 ops/s
# Warmup Iteration  18: 3839662.006 ops/s
# Warmup Iteration  19: 3889764.683 ops/s
# Warmup Iteration  20: 3853593.991 ops/s
# Warmup Iteration  21: 3864098.924 ops/s
# Warmup Iteration  22: 3867790.607 ops/s
# Warmup Iteration  23: 3887125.054 ops/s
# Warmup Iteration  24: 3858098.614 ops/s
# Warmup Iteration  25: 3873305.873 ops/s
# Warmup Iteration  26: 3887647.828 ops/s
# Warmup Iteration  27: 3850859.090 ops/s
# Warmup Iteration  28: 3877162.401 ops/s
# Warmup Iteration  29: 3851062.311 ops/s
# Warmup Iteration  30: 3875832.512 ops/s
Iteration   1: 3881995.890 ops/s
Iteration   2: 3855408.325 ops/s
Iteration   3: 3874963.001 ops/s
Iteration   4: 3856227.815 ops/s
Iteration   5: 3871980.799 ops/s
Iteration   6: 3884511.893 ops/s
Iteration   7: 3867695.964 ops/s
Iteration   8: 3868209.077 ops/s
Iteration   9: 3864307.643 ops/s
Iteration  10: 3874861.555 ops/s
Iteration  11: 3880543.657 ops/s
Iteration  12: 3880118.089 ops/s
Iteration  13: 3871301.773 ops/s
Iteration  14: 3862020.837 ops/s
Iteration  15: 3884735.286 ops/s
Iteration  16: 3863290.829 ops/s
Iteration  17: 3882681.565 ops/s
Iteration  18: 3856446.033 ops/s
Iteration  19: 3876407.980 ops/s
Iteration  20: 3854880.111 ops/s
Iteration  21: 3851960.256 ops/s
Iteration  22: 3869587.319 ops/s
Iteration  23: 3886521.540 ops/s
Iteration  24: 3873096.236 ops/s
Iteration  25: 3889031.219 ops/s
Iteration  26: 3889627.135 ops/s
Iteration  27: 3870470.796 ops/s
Iteration  28: 3878388.886 ops/s
Iteration  29: 3860456.898 ops/s
Iteration  30: 3870824.749 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableDoAfterNextTest._Benchmark.benchmark_syncFused":
  3871751.772 ±(99.9%) 7267.414 ops/s [Average]
  (min, avg, max) = (3851960.256, 3871751.772, 3889627.135), stdev = 10877.524
  CI (99.9%): [3864484.358, 3879019.186] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
ObservableDoAfterNextTest._Benchmark.benchmark_syncFused  thrpt   30  3871751.772 ± 7267.414  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_innerWithEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_innerWithEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2069458.303 ops/s
# Warmup Iteration   2: 2716947.705 ops/s
# Warmup Iteration   3: 3196536.339 ops/s
# Warmup Iteration   4: 3237692.651 ops/s
# Warmup Iteration   5: 3245228.686 ops/s
# Warmup Iteration   6: 3237273.790 ops/s
# Warmup Iteration   7: 3224321.316 ops/s
# Warmup Iteration   8: 3222446.780 ops/s
# Warmup Iteration   9: 3219697.754 ops/s
# Warmup Iteration  10: 3213898.445 ops/s
# Warmup Iteration  11: 3194214.917 ops/s
# Warmup Iteration  12: 3227602.377 ops/s
# Warmup Iteration  13: 3207683.238 ops/s
# Warmup Iteration  14: 3200366.717 ops/s
# Warmup Iteration  15: 3202689.784 ops/s
# Warmup Iteration  16: 3239797.963 ops/s
# Warmup Iteration  17: 3218179.495 ops/s
# Warmup Iteration  18: 3236545.061 ops/s
# Warmup Iteration  19: 3240793.149 ops/s
# Warmup Iteration  20: 3238781.375 ops/s
# Warmup Iteration  21: 3217245.859 ops/s
# Warmup Iteration  22: 3229109.503 ops/s
# Warmup Iteration  23: 3245478.935 ops/s
# Warmup Iteration  24: 3222523.518 ops/s
# Warmup Iteration  25: 3232174.951 ops/s
# Warmup Iteration  26: 3216735.132 ops/s
# Warmup Iteration  27: 3229897.431 ops/s
# Warmup Iteration  28: 3240895.841 ops/s
# Warmup Iteration  29: 3238853.169 ops/s
# Warmup Iteration  30: 3205523.340 ops/s
Iteration   1: 3208298.596 ops/s
Iteration   2: 3232440.758 ops/s
Iteration   3: 3242877.969 ops/s
Iteration   4: 3215053.673 ops/s
Iteration   5: 3225372.426 ops/s
Iteration   6: 3217679.830 ops/s
Iteration   7: 3230809.096 ops/s
Iteration   8: 3222705.956 ops/s
Iteration   9: 3211867.694 ops/s
Iteration  10: 3224574.471 ops/s
Iteration  11: 3200447.268 ops/s
Iteration  12: 3221738.997 ops/s
Iteration  13: 3232643.205 ops/s
Iteration  14: 3234114.422 ops/s
Iteration  15: 3217646.506 ops/s
Iteration  16: 3209289.127 ops/s
Iteration  17: 3210458.763 ops/s
Iteration  18: 3229821.305 ops/s
Iteration  19: 3231088.692 ops/s
Iteration  20: 3230889.713 ops/s
Iteration  21: 3221047.831 ops/s
Iteration  22: 3211673.482 ops/s
Iteration  23: 3221089.735 ops/s
Iteration  24: 3222628.058 ops/s
Iteration  25: 3231414.772 ops/s
Iteration  26: 3231821.593 ops/s
Iteration  27: 3210200.118 ops/s
Iteration  28: 3234948.918 ops/s
Iteration  29: 3228192.178 ops/s
Iteration  30: 3232069.874 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_innerWithEmpty":
  3223163.501 ±(99.9%) 6749.170 ops/s [Average]
  (min, avg, max) = (3200447.268, 3223163.501, 3242877.969), stdev = 10101.841
  CI (99.9%): [3216414.331, 3229912.671] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score      Error  Units
ObservableConcatMapSchedulerTest._Benchmark.benchmark_innerWithEmpty  thrpt   30  3223163.501 ± 6749.170  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDoFinallyTest._Benchmark.benchmark_clearIsEmptyConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDoFinallyTest._Benchmark.benchmark_clearIsEmptyConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 9507927.770 ops/s
# Warmup Iteration   2: 15925347.550 ops/s
# Warmup Iteration   3: 16744243.334 ops/s
# Warmup Iteration   4: 16739103.583 ops/s
# Warmup Iteration   5: 16777137.121 ops/s
# Warmup Iteration   6: 16742605.794 ops/s
# Warmup Iteration   7: 16720157.912 ops/s
# Warmup Iteration   8: 16809842.771 ops/s
# Warmup Iteration   9: 16736986.788 ops/s
# Warmup Iteration  10: 16784900.716 ops/s
# Warmup Iteration  11: 16687605.814 ops/s
# Warmup Iteration  12: 16691056.016 ops/s
# Warmup Iteration  13: 16641509.222 ops/s
# Warmup Iteration  14: 16829008.461 ops/s
# Warmup Iteration  15: 16751143.590 ops/s
# Warmup Iteration  16: 16712809.218 ops/s
# Warmup Iteration  17: 16723001.666 ops/s
# Warmup Iteration  18: 16743837.332 ops/s
# Warmup Iteration  19: 16798230.578 ops/s
# Warmup Iteration  20: 16662050.875 ops/s
# Warmup Iteration  21: 16752315.888 ops/s
# Warmup Iteration  22: 16779269.811 ops/s
# Warmup Iteration  23: 16806509.772 ops/s
# Warmup Iteration  24: 16809388.670 ops/s
# Warmup Iteration  25: 16772427.841 ops/s
# Warmup Iteration  26: 16782645.744 ops/s
# Warmup Iteration  27: 16769249.146 ops/s
# Warmup Iteration  28: 16758108.374 ops/s
# Warmup Iteration  29: 16814312.247 ops/s
# Warmup Iteration  30: 16741416.554 ops/s
Iteration   1: 16848593.166 ops/s
Iteration   2: 16739103.120 ops/s
Iteration   3: 16765658.792 ops/s
Iteration   4: 16708060.391 ops/s
Iteration   5: 16749222.115 ops/s
Iteration   6: 16722317.123 ops/s
Iteration   7: 16716944.215 ops/s
Iteration   8: 16735941.681 ops/s
Iteration   9: 16767844.275 ops/s
Iteration  10: 16694525.223 ops/s
Iteration  11: 16823385.219 ops/s
Iteration  12: 16747776.333 ops/s
Iteration  13: 16739313.442 ops/s
Iteration  14: 16674617.532 ops/s
Iteration  15: 16772510.178 ops/s
Iteration  16: 16670111.684 ops/s
Iteration  17: 16746270.534 ops/s
Iteration  18: 16728177.635 ops/s
Iteration  19: 16722221.371 ops/s
Iteration  20: 16708750.908 ops/s
Iteration  21: 16686269.778 ops/s
Iteration  22: 16739231.887 ops/s
Iteration  23: 16706121.998 ops/s
Iteration  24: 16755630.134 ops/s
Iteration  25: 16693960.061 ops/s
Iteration  26: 16733937.651 ops/s
Iteration  27: 16700049.496 ops/s
Iteration  28: 16846178.153 ops/s
Iteration  29: 16722772.699 ops/s
Iteration  30: 16768829.361 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableDoFinallyTest._Benchmark.benchmark_clearIsEmptyConditional":
  16737810.872 ±(99.9%) 29425.398 ops/s [Average]
  (min, avg, max) = (16670111.684, 16737810.872, 16848593.166), stdev = 44042.554
  CI (99.9%): [16708385.474, 16767236.270] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt         Score       Error  Units
ObservableDoFinallyTest._Benchmark.benchmark_clearIsEmptyConditional  thrpt   30  16737810.872 ± 29425.398  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableMapOptionalTest._Benchmark.benchmark_syncFusedNone$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableMapOptionalTest._Benchmark.benchmark_syncFusedNone

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 5770257.860 ops/s
# Warmup Iteration   2: 10422699.498 ops/s
# Warmup Iteration   3: 10624693.281 ops/s
# Warmup Iteration   4: 10575115.663 ops/s
# Warmup Iteration   5: 10582475.823 ops/s
# Warmup Iteration   6: 10530347.550 ops/s
# Warmup Iteration   7: 10565276.632 ops/s
# Warmup Iteration   8: 10567025.562 ops/s
# Warmup Iteration   9: 10660793.335 ops/s
# Warmup Iteration  10: 10586148.449 ops/s
# Warmup Iteration  11: 10518189.657 ops/s
# Warmup Iteration  12: 10641484.680 ops/s
# Warmup Iteration  13: 10548117.168 ops/s
# Warmup Iteration  14: 10625926.848 ops/s
# Warmup Iteration  15: 10589286.485 ops/s
# Warmup Iteration  16: 10549656.453 ops/s
# Warmup Iteration  17: 10654078.370 ops/s
# Warmup Iteration  18: 10586973.626 ops/s
# Warmup Iteration  19: 10645679.701 ops/s
# Warmup Iteration  20: 10699899.312 ops/s
# Warmup Iteration  21: 10668210.605 ops/s
# Warmup Iteration  22: 10656411.280 ops/s
# Warmup Iteration  23: 10687715.690 ops/s
# Warmup Iteration  24: 10637334.877 ops/s
# Warmup Iteration  25: 10651320.440 ops/s
# Warmup Iteration  26: 10605352.256 ops/s
# Warmup Iteration  27: 10685787.434 ops/s
# Warmup Iteration  28: 10631545.801 ops/s
# Warmup Iteration  29: 10730442.912 ops/s
# Warmup Iteration  30: 10694186.066 ops/s
Iteration   1: 10633215.157 ops/s
Iteration   2: 10614619.985 ops/s
Iteration   3: 10688151.880 ops/s
Iteration   4: 10650912.495 ops/s
Iteration   5: 10705483.641 ops/s
Iteration   6: 10701711.628 ops/s
Iteration   7: 10686608.001 ops/s
Iteration   8: 10688791.042 ops/s
Iteration   9: 10695508.170 ops/s
Iteration  10: 10644084.413 ops/s
Iteration  11: 10652638.198 ops/s
Iteration  12: 10643673.107 ops/s
Iteration  13: 10628404.637 ops/s
Iteration  14: 10674691.982 ops/s
Iteration  15: 10689956.975 ops/s
Iteration  16: 10695043.888 ops/s
Iteration  17: 10650045.903 ops/s
Iteration  18: 10679436.741 ops/s
Iteration  19: 10693059.416 ops/s
Iteration  20: 10705019.004 ops/s
Iteration  21: 10675310.956 ops/s
Iteration  22: 10733566.321 ops/s
Iteration  23: 10671305.913 ops/s
Iteration  24: 10648403.689 ops/s
Iteration  25: 10716261.041 ops/s
Iteration  26: 10704779.436 ops/s
Iteration  27: 10660181.316 ops/s
Iteration  28: 10639816.297 ops/s
Iteration  29: 10651277.384 ops/s
Iteration  30: 10725853.500 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableMapOptionalTest._Benchmark.benchmark_syncFusedNone":
  10674927.071 ±(99.9%) 20379.738 ops/s [Average]
  (min, avg, max) = (10614619.985, 10674927.071, 10733566.321), stdev = 30503.435
  CI (99.9%): [10654547.332, 10695306.809] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt         Score       Error  Units
ObservableMapOptionalTest._Benchmark.benchmark_syncFusedNone  thrpt   30  10674927.071 ± 20379.738  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMapTest._Benchmark.benchmark_fusedSync$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMapTest._Benchmark.benchmark_fusedSync

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 62017.759 ops/s
# Warmup Iteration   2: 470583.773 ops/s
# Warmup Iteration   3: 684939.134 ops/s
# Warmup Iteration   4: 735043.313 ops/s
# Warmup Iteration   5: 738333.539 ops/s
# Warmup Iteration   6: 736572.769 ops/s
# Warmup Iteration   7: 721856.750 ops/s
# Warmup Iteration   8: 736388.511 ops/s
# Warmup Iteration   9: 734801.330 ops/s
# Warmup Iteration  10: 733224.230 ops/s
# Warmup Iteration  11: 733426.290 ops/s
# Warmup Iteration  12: 730839.475 ops/s
# Warmup Iteration  13: 738256.656 ops/s
# Warmup Iteration  14: 733996.788 ops/s
# Warmup Iteration  15: 733434.531 ops/s
# Warmup Iteration  16: 733647.508 ops/s
# Warmup Iteration  17: 732295.128 ops/s
# Warmup Iteration  18: 736166.021 ops/s
# Warmup Iteration  19: 740291.519 ops/s
# Warmup Iteration  20: 735542.306 ops/s
# Warmup Iteration  21: 733937.677 ops/s
# Warmup Iteration  22: 733365.459 ops/s
# Warmup Iteration  23: 733018.674 ops/s
# Warmup Iteration  24: 728900.217 ops/s
# Warmup Iteration  25: 733630.477 ops/s
# Warmup Iteration  26: 735167.659 ops/s
# Warmup Iteration  27: 734569.811 ops/s
# Warmup Iteration  28: 733980.325 ops/s
# Warmup Iteration  29: 733191.275 ops/s
# Warmup Iteration  30: 737713.610 ops/s
Iteration   1: 734249.755 ops/s
Iteration   2: 739162.199 ops/s
Iteration   3: 737969.481 ops/s
Iteration   4: 733616.169 ops/s
Iteration   5: 737053.764 ops/s
Iteration   6: 733381.120 ops/s
Iteration   7: 738234.420 ops/s
Iteration   8: 730379.297 ops/s
Iteration   9: 735938.814 ops/s
Iteration  10: 730787.931 ops/s
Iteration  11: 733768.553 ops/s
Iteration  12: 733257.357 ops/s
Iteration  13: 734887.173 ops/s
Iteration  14: 740458.832 ops/s
Iteration  15: 736770.985 ops/s
Iteration  16: 734318.249 ops/s
Iteration  17: 735088.437 ops/s
Iteration  18: 736501.219 ops/s
Iteration  19: 740162.775 ops/s
Iteration  20: 735248.354 ops/s
Iteration  21: 735457.603 ops/s
Iteration  22: 732274.717 ops/s
Iteration  23: 739279.030 ops/s
Iteration  24: 738304.401 ops/s
Iteration  25: 732935.105 ops/s
Iteration  26: 731018.260 ops/s
Iteration  27: 732849.701 ops/s
Iteration  28: 736038.456 ops/s
Iteration  29: 734485.101 ops/s
Iteration  30: 736545.788 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableMapTest._Benchmark.benchmark_fusedSync":
  735347.435 ±(99.9%) 1817.278 ops/s [Average]
  (min, avg, max) = (730379.297, 735347.435, 740458.832), stdev = 2720.016
  CI (99.9%): [733530.157, 737164.713] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt       Score      Error  Units
ObservableMapTest._Benchmark.benchmark_fusedSync  thrpt   30  735347.435 ± 1817.278  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableMapOptionalTest._Benchmark.benchmark_syncFusedNoneConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableMapOptionalTest._Benchmark.benchmark_syncFusedNoneConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 5080166.117 ops/s
# Warmup Iteration   2: 8408572.397 ops/s
# Warmup Iteration   3: 8900256.511 ops/s
# Warmup Iteration   4: 8940102.613 ops/s
# Warmup Iteration   5: 8920949.916 ops/s
# Warmup Iteration   6: 8927803.780 ops/s
# Warmup Iteration   7: 8955153.252 ops/s
# Warmup Iteration   8: 8905672.217 ops/s
# Warmup Iteration   9: 8957649.756 ops/s
# Warmup Iteration  10: 8907396.500 ops/s
# Warmup Iteration  11: 8924759.592 ops/s
# Warmup Iteration  12: 8873244.523 ops/s
# Warmup Iteration  13: 8982007.997 ops/s
# Warmup Iteration  14: 8937004.379 ops/s
# Warmup Iteration  15: 8893735.472 ops/s
# Warmup Iteration  16: 8912610.607 ops/s
# Warmup Iteration  17: 8892721.870 ops/s
# Warmup Iteration  18: 8909153.992 ops/s
# Warmup Iteration  19: 8875137.763 ops/s
# Warmup Iteration  20: 8931942.363 ops/s
# Warmup Iteration  21: 8951136.204 ops/s
# Warmup Iteration  22: 8951280.354 ops/s
# Warmup Iteration  23: 8918578.892 ops/s
# Warmup Iteration  24: 8930607.565 ops/s
# Warmup Iteration  25: 8907108.734 ops/s
# Warmup Iteration  26: 8869117.823 ops/s
# Warmup Iteration  27: 8965182.473 ops/s
# Warmup Iteration  28: 8949186.117 ops/s
# Warmup Iteration  29: 8914604.115 ops/s
# Warmup Iteration  30: 8912636.078 ops/s
Iteration   1: 8889996.021 ops/s
Iteration   2: 8971290.085 ops/s
Iteration   3: 8970911.188 ops/s
Iteration   4: 8894839.701 ops/s
Iteration   5: 8924759.438 ops/s
Iteration   6: 8918880.089 ops/s
Iteration   7: 8906942.359 ops/s
Iteration   8: 8903342.528 ops/s
Iteration   9: 8954240.916 ops/s
Iteration  10: 8897178.249 ops/s
Iteration  11: 8894805.202 ops/s
Iteration  12: 8918250.865 ops/s
Iteration  13: 8902228.215 ops/s
Iteration  14: 8928463.362 ops/s
Iteration  15: 8933703.361 ops/s
Iteration  16: 8914572.756 ops/s
Iteration  17: 8950386.462 ops/s
Iteration  18: 8944598.905 ops/s
Iteration  19: 8884211.136 ops/s
Iteration  20: 8876049.511 ops/s
Iteration  21: 8934785.095 ops/s
Iteration  22: 8962559.579 ops/s
Iteration  23: 8960472.802 ops/s
Iteration  24: 8903809.725 ops/s
Iteration  25: 8950114.407 ops/s
Iteration  26: 8903954.544 ops/s
Iteration  27: 8946289.964 ops/s
Iteration  28: 8921363.891 ops/s
Iteration  29: 8921395.754 ops/s
Iteration  30: 8944482.274 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableMapOptionalTest._Benchmark.benchmark_syncFusedNoneConditional":
  8924295.946 ±(99.9%) 17866.995 ops/s [Average]
  (min, avg, max) = (8876049.511, 8924295.946, 8971290.085), stdev = 26742.479
  CI (99.9%): [8906428.951, 8942162.941] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score       Error  Units
ObservableMapOptionalTest._Benchmark.benchmark_syncFusedNoneConditional  thrpt   30  8924295.946 ± 17866.995  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDoAfterNextTest._Benchmark.benchmark_asyncFusedRejected$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDoAfterNextTest._Benchmark.benchmark_asyncFusedRejected

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2026451.903 ops/s
# Warmup Iteration   2: 3155592.363 ops/s
# Warmup Iteration   3: 3609753.582 ops/s
# Warmup Iteration   4: 3601337.594 ops/s
# Warmup Iteration   5: 3607142.531 ops/s
# Warmup Iteration   6: 3583883.132 ops/s
# Warmup Iteration   7: 3589798.705 ops/s
# Warmup Iteration   8: 3576445.346 ops/s
# Warmup Iteration   9: 3589254.432 ops/s
# Warmup Iteration  10: 3582360.889 ops/s
# Warmup Iteration  11: 3588485.707 ops/s
# Warmup Iteration  12: 3612692.906 ops/s
# Warmup Iteration  13: 3597921.504 ops/s
# Warmup Iteration  14: 3607315.624 ops/s
# Warmup Iteration  15: 3590703.042 ops/s
# Warmup Iteration  16: 3600616.064 ops/s
# Warmup Iteration  17: 3589509.826 ops/s
# Warmup Iteration  18: 3605863.927 ops/s
# Warmup Iteration  19: 3590644.485 ops/s
# Warmup Iteration  20: 3579329.992 ops/s
# Warmup Iteration  21: 3593100.812 ops/s
# Warmup Iteration  22: 3591337.848 ops/s
# Warmup Iteration  23: 3596329.138 ops/s
# Warmup Iteration  24: 3586189.913 ops/s
# Warmup Iteration  25: 3598196.589 ops/s
# Warmup Iteration  26: 3592918.171 ops/s
# Warmup Iteration  27: 3595393.351 ops/s
# Warmup Iteration  28: 3603692.304 ops/s
# Warmup Iteration  29: 3582283.967 ops/s
# Warmup Iteration  30: 3588700.033 ops/s
Iteration   1: 3593061.810 ops/s
Iteration   2: 3597534.974 ops/s
Iteration   3: 3577448.793 ops/s
Iteration   4: 3617481.981 ops/s
Iteration   5: 3590993.340 ops/s
Iteration   6: 3598183.487 ops/s
Iteration   7: 3587219.182 ops/s
Iteration   8: 3595136.086 ops/s
Iteration   9: 3576328.975 ops/s
Iteration  10: 3578613.120 ops/s
Iteration  11: 3585874.713 ops/s
Iteration  12: 3611378.321 ops/s
Iteration  13: 3571990.614 ops/s
Iteration  14: 3593560.617 ops/s
Iteration  15: 3599657.760 ops/s
Iteration  16: 3605432.432 ops/s
Iteration  17: 3587031.587 ops/s
Iteration  18: 3602474.875 ops/s
Iteration  19: 3584755.408 ops/s
Iteration  20: 3577947.525 ops/s
Iteration  21: 3586409.540 ops/s
Iteration  22: 3564101.568 ops/s
Iteration  23: 3603211.364 ops/s
Iteration  24: 3602418.533 ops/s
Iteration  25: 3595950.713 ops/s
Iteration  26: 3588187.603 ops/s
Iteration  27: 3573066.116 ops/s
Iteration  28: 3608062.990 ops/s
Iteration  29: 3586721.521 ops/s
Iteration  30: 3602620.174 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableDoAfterNextTest._Benchmark.benchmark_asyncFusedRejected":
  3591428.524 ±(99.9%) 8460.291 ops/s [Average]
  (min, avg, max) = (3564101.568, 3591428.524, 3617481.981), stdev = 12662.966
  CI (99.9%): [3582968.233, 3599888.815] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
ObservableDoAfterNextTest._Benchmark.benchmark_asyncFusedRejected  thrpt   30  3591428.524 ± 8460.291  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFilterTest._Benchmark.benchmark_filterThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFilterTest._Benchmark.benchmark_filterThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 614241.641 ops/s
# Warmup Iteration   2: 707105.221 ops/s
# Warmup Iteration   3: 766163.006 ops/s
# Warmup Iteration   4: 784996.092 ops/s
# Warmup Iteration   5: 787943.644 ops/s
# Warmup Iteration   6: 784359.319 ops/s
# Warmup Iteration   7: 788362.338 ops/s
# Warmup Iteration   8: 787574.092 ops/s
# Warmup Iteration   9: 788340.510 ops/s
# Warmup Iteration  10: 789157.560 ops/s
# Warmup Iteration  11: 784491.629 ops/s
# Warmup Iteration  12: 784868.115 ops/s
# Warmup Iteration  13: 786519.900 ops/s
# Warmup Iteration  14: 788543.640 ops/s
# Warmup Iteration  15: 788069.288 ops/s
# Warmup Iteration  16: 783809.227 ops/s
# Warmup Iteration  17: 821936.276 ops/s
# Warmup Iteration  18: 820074.862 ops/s
# Warmup Iteration  19: 822536.308 ops/s
# Warmup Iteration  20: 814590.186 ops/s
# Warmup Iteration  21: 819564.653 ops/s
# Warmup Iteration  22: 822563.986 ops/s
# Warmup Iteration  23: 825320.619 ops/s
# Warmup Iteration  24: 818886.525 ops/s
# Warmup Iteration  25: 823297.720 ops/s
# Warmup Iteration  26: 822347.875 ops/s
# Warmup Iteration  27: 824090.830 ops/s
# Warmup Iteration  28: 821507.656 ops/s
# Warmup Iteration  29: 822993.995 ops/s
# Warmup Iteration  30: 822377.320 ops/s
Iteration   1: 824464.610 ops/s
Iteration   2: 825405.531 ops/s
Iteration   3: 817473.939 ops/s
Iteration   4: 818302.012 ops/s
Iteration   5: 822500.728 ops/s
Iteration   6: 818423.273 ops/s
Iteration   7: 822025.861 ops/s
Iteration   8: 816927.739 ops/s
Iteration   9: 822215.336 ops/s
Iteration  10: 825312.736 ops/s
Iteration  11: 823400.823 ops/s
Iteration  12: 818005.670 ops/s
Iteration  13: 824247.454 ops/s
Iteration  14: 816995.660 ops/s
Iteration  15: 821327.870 ops/s
Iteration  16: 823741.909 ops/s
Iteration  17: 824474.096 ops/s
Iteration  18: 826405.313 ops/s
Iteration  19: 819187.096 ops/s
Iteration  20: 821926.300 ops/s
Iteration  21: 822527.894 ops/s
Iteration  22: 816122.966 ops/s
Iteration  23: 822154.972 ops/s
Iteration  24: 821956.696 ops/s
Iteration  25: 819953.057 ops/s
Iteration  26: 827231.459 ops/s
Iteration  27: 825157.709 ops/s
Iteration  28: 822745.532 ops/s
Iteration  29: 818279.520 ops/s
Iteration  30: 822627.409 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFilterTest._Benchmark.benchmark_filterThrows":
  821717.372 ±(99.9%) 2058.652 ops/s [Average]
  (min, avg, max) = (816122.966, 821717.372, 827231.459), stdev = 3081.294
  CI (99.9%): [819658.720, 823776.024] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
ObservableFilterTest._Benchmark.benchmark_filterThrows  thrpt   30  821717.372 ± 2058.652  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableMapOptionalTest._Benchmark.benchmark_syncFusedAll$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableMapOptionalTest._Benchmark.benchmark_syncFusedAll

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 4094648.142 ops/s
# Warmup Iteration   2: 6583398.475 ops/s
# Warmup Iteration   3: 7157061.160 ops/s
# Warmup Iteration   4: 7098635.160 ops/s
# Warmup Iteration   5: 7117041.595 ops/s
# Warmup Iteration   6: 7098728.452 ops/s
# Warmup Iteration   7: 7172257.685 ops/s
# Warmup Iteration   8: 7091133.057 ops/s
# Warmup Iteration   9: 7147389.987 ops/s
# Warmup Iteration  10: 7112094.370 ops/s
# Warmup Iteration  11: 7122901.476 ops/s
# Warmup Iteration  12: 7135100.385 ops/s
# Warmup Iteration  13: 7111965.946 ops/s
# Warmup Iteration  14: 7087598.251 ops/s
# Warmup Iteration  15: 7162803.479 ops/s
# Warmup Iteration  16: 7138733.711 ops/s
# Warmup Iteration  17: 7115123.929 ops/s
# Warmup Iteration  18: 7075636.592 ops/s
# Warmup Iteration  19: 7127236.088 ops/s
# Warmup Iteration  20: 7072068.804 ops/s
# Warmup Iteration  21: 7086684.519 ops/s
# Warmup Iteration  22: 7120506.265 ops/s
# Warmup Iteration  23: 7093678.197 ops/s
# Warmup Iteration  24: 7065922.639 ops/s
# Warmup Iteration  25: 7100194.619 ops/s
# Warmup Iteration  26: 7132409.321 ops/s
# Warmup Iteration  27: 7065935.833 ops/s
# Warmup Iteration  28: 7084887.695 ops/s
# Warmup Iteration  29: 7108847.320 ops/s
# Warmup Iteration  30: 7077785.157 ops/s
Iteration   1: 7101341.361 ops/s
Iteration   2: 7094645.664 ops/s
Iteration   3: 7102161.719 ops/s
Iteration   4: 7098991.456 ops/s
Iteration   5: 7064287.334 ops/s
Iteration   6: 7090678.280 ops/s
Iteration   7: 7049589.363 ops/s
Iteration   8: 7098609.557 ops/s
Iteration   9: 7086807.164 ops/s
Iteration  10: 7072464.440 ops/s
Iteration  11: 7079647.886 ops/s
Iteration  12: 7082194.310 ops/s
Iteration  13: 7092592.546 ops/s
Iteration  14: 7059517.969 ops/s
Iteration  15: 7073009.189 ops/s
Iteration  16: 7099330.024 ops/s
Iteration  17: 7055139.231 ops/s
Iteration  18: 7079265.295 ops/s
Iteration  19: 7072304.109 ops/s
Iteration  20: 7110081.285 ops/s
Iteration  21: 7063160.365 ops/s
Iteration  22: 7074939.254 ops/s
Iteration  23: 7091362.605 ops/s
Iteration  24: 7079278.021 ops/s
Iteration  25: 7068726.397 ops/s
Iteration  26: 7085161.341 ops/s
Iteration  27: 7078250.420 ops/s
Iteration  28: 7084935.254 ops/s
Iteration  29: 7063856.862 ops/s
Iteration  30: 7072085.867 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableMapOptionalTest._Benchmark.benchmark_syncFusedAll":
  7080813.819 ±(99.9%) 10206.983 ops/s [Average]
  (min, avg, max) = (7049589.363, 7080813.819, 7110081.285), stdev = 15277.333
  CI (99.9%): [7070606.836, 7091020.802] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
ObservableMapOptionalTest._Benchmark.benchmark_syncFusedAll  thrpt   30  7080813.819 ± 10206.983  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableMapOptionalTest._Benchmark.benchmark_syncFusedMixed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableMapOptionalTest._Benchmark.benchmark_syncFusedMixed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3679650.856 ops/s
# Warmup Iteration   2: 5330424.222 ops/s
# Warmup Iteration   3: 6086901.353 ops/s
# Warmup Iteration   4: 6083346.488 ops/s
# Warmup Iteration   5: 6070947.998 ops/s
# Warmup Iteration   6: 6065131.689 ops/s
# Warmup Iteration   7: 6043281.580 ops/s
# Warmup Iteration   8: 6035874.448 ops/s
# Warmup Iteration   9: 6044091.083 ops/s
# Warmup Iteration  10: 6054949.749 ops/s
# Warmup Iteration  11: 6044363.266 ops/s
# Warmup Iteration  12: 6042613.605 ops/s
# Warmup Iteration  13: 6028739.123 ops/s
# Warmup Iteration  14: 6094880.787 ops/s
# Warmup Iteration  15: 6090000.074 ops/s
# Warmup Iteration  16: 6021974.844 ops/s
# Warmup Iteration  17: 6037624.096 ops/s
# Warmup Iteration  18: 6040634.353 ops/s
# Warmup Iteration  19: 6042015.882 ops/s
# Warmup Iteration  20: 5990704.291 ops/s
# Warmup Iteration  21: 6023910.325 ops/s
# Warmup Iteration  22: 6019004.804 ops/s
# Warmup Iteration  23: 6036527.194 ops/s
# Warmup Iteration  24: 6032882.735 ops/s
# Warmup Iteration  25: 5986328.450 ops/s
# Warmup Iteration  26: 6073797.878 ops/s
# Warmup Iteration  27: 6048904.294 ops/s
# Warmup Iteration  28: 6005694.753 ops/s
# Warmup Iteration  29: 5992159.056 ops/s
# Warmup Iteration  30: 6049244.397 ops/s
Iteration   1: 6000621.829 ops/s
Iteration   2: 6048214.825 ops/s
Iteration   3: 6064073.234 ops/s
Iteration   4: 6013128.015 ops/s
Iteration   5: 6060199.078 ops/s
Iteration   6: 6058880.200 ops/s
Iteration   7: 5995073.637 ops/s
Iteration   8: 6033577.999 ops/s
Iteration   9: 6045193.366 ops/s
Iteration  10: 6051743.758 ops/s
Iteration  11: 6053283.621 ops/s
Iteration  12: 6040521.079 ops/s
Iteration  13: 6021346.071 ops/s
Iteration  14: 6079064.638 ops/s
Iteration  15: 6061431.680 ops/s
Iteration  16: 6029371.660 ops/s
Iteration  17: 6059601.478 ops/s
Iteration  18: 6020017.733 ops/s
Iteration  19: 6067471.190 ops/s
Iteration  20: 6072305.905 ops/s
Iteration  21: 6066377.418 ops/s
Iteration  22: 6042654.491 ops/s
Iteration  23: 6055742.278 ops/s
Iteration  24: 6060936.356 ops/s
Iteration  25: 6053476.701 ops/s
Iteration  26: 6063734.323 ops/s
Iteration  27: 6020935.523 ops/s
Iteration  28: 6054035.276 ops/s
Iteration  29: 6061620.949 ops/s
Iteration  30: 6053856.048 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableMapOptionalTest._Benchmark.benchmark_syncFusedMixed":
  6046949.679 ±(99.9%) 14155.671 ops/s [Average]
  (min, avg, max) = (5995073.637, 6046949.679, 6079064.638), stdev = 21187.544
  CI (99.9%): [6032794.008, 6061105.350] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
ObservableMapOptionalTest._Benchmark.benchmark_syncFusedMixed  thrpt   30  6046949.679 ± 14155.671  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableMapOptionalTest._Benchmark.benchmark_syncFusedAllConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableMapOptionalTest._Benchmark.benchmark_syncFusedAllConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3571496.067 ops/s
# Warmup Iteration   2: 5493302.972 ops/s
# Warmup Iteration   3: 6375034.576 ops/s
# Warmup Iteration   4: 6368547.691 ops/s
# Warmup Iteration   5: 6379218.418 ops/s
# Warmup Iteration   6: 6388771.869 ops/s
# Warmup Iteration   7: 6376358.233 ops/s
# Warmup Iteration   8: 6361290.238 ops/s
# Warmup Iteration   9: 6367897.477 ops/s
# Warmup Iteration  10: 6372007.742 ops/s
# Warmup Iteration  11: 6353744.919 ops/s
# Warmup Iteration  12: 6379760.001 ops/s
# Warmup Iteration  13: 6357491.193 ops/s
# Warmup Iteration  14: 6376751.472 ops/s
# Warmup Iteration  15: 6391079.384 ops/s
# Warmup Iteration  16: 6358348.316 ops/s
# Warmup Iteration  17: 6318005.011 ops/s
# Warmup Iteration  18: 6289596.241 ops/s
# Warmup Iteration  19: 6305260.969 ops/s
# Warmup Iteration  20: 6318505.204 ops/s
# Warmup Iteration  21: 6330299.995 ops/s
# Warmup Iteration  22: 6307693.645 ops/s
# Warmup Iteration  23: 6300067.833 ops/s
# Warmup Iteration  24: 6351994.646 ops/s
# Warmup Iteration  25: 6320947.430 ops/s
# Warmup Iteration  26: 6319997.931 ops/s
# Warmup Iteration  27: 6337246.226 ops/s
# Warmup Iteration  28: 6344765.385 ops/s
# Warmup Iteration  29: 6311246.475 ops/s
# Warmup Iteration  30: 6302503.716 ops/s
Iteration   1: 6288032.399 ops/s
Iteration   2: 6297103.209 ops/s
Iteration   3: 6345199.350 ops/s
Iteration   4: 6354222.402 ops/s
Iteration   5: 6310443.026 ops/s
Iteration   6: 6364026.151 ops/s
Iteration   7: 6311390.112 ops/s
Iteration   8: 6365049.578 ops/s
Iteration   9: 6336081.940 ops/s
Iteration  10: 6335518.744 ops/s
Iteration  11: 6354055.583 ops/s
Iteration  12: 6359395.121 ops/s
Iteration  13: 6326790.279 ops/s
Iteration  14: 6324569.739 ops/s
Iteration  15: 6321486.079 ops/s
Iteration  16: 6327457.464 ops/s
Iteration  17: 6345844.089 ops/s
Iteration  18: 6331915.100 ops/s
Iteration  19: 6353692.723 ops/s
Iteration  20: 6311789.478 ops/s
Iteration  21: 6327343.373 ops/s
Iteration  22: 6340903.650 ops/s
Iteration  23: 6324878.282 ops/s
Iteration  24: 6352809.216 ops/s
Iteration  25: 6337069.572 ops/s
Iteration  26: 6365034.584 ops/s
Iteration  27: 6315031.797 ops/s
Iteration  28: 6277849.716 ops/s
Iteration  29: 6297269.988 ops/s
Iteration  30: 6321941.520 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableMapOptionalTest._Benchmark.benchmark_syncFusedAllConditional":
  6330806.475 ±(99.9%) 15477.433 ops/s [Average]
  (min, avg, max) = (6277849.716, 6330806.475, 6365049.578), stdev = 23165.895
  CI (99.9%): [6315329.042, 6346283.908] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score       Error  Units
ObservableMapOptionalTest._Benchmark.benchmark_syncFusedAllConditional  thrpt   30  6330806.475 ± 15477.433  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDoFinallyTest._Benchmark.benchmark_nonFused$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDoFinallyTest._Benchmark.benchmark_nonFused

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2947014.565 ops/s
# Warmup Iteration   2: 4401757.455 ops/s
# Warmup Iteration   3: 5019986.762 ops/s
# Warmup Iteration   4: 5042388.168 ops/s
# Warmup Iteration   5: 5045525.081 ops/s
# Warmup Iteration   6: 5010367.504 ops/s
# Warmup Iteration   7: 5023943.662 ops/s
# Warmup Iteration   8: 5039126.672 ops/s
# Warmup Iteration   9: 5019795.470 ops/s
# Warmup Iteration  10: 5034407.181 ops/s
# Warmup Iteration  11: 5014208.675 ops/s
# Warmup Iteration  12: 5040079.385 ops/s
# Warmup Iteration  13: 5013097.548 ops/s
# Warmup Iteration  14: 5017252.141 ops/s
# Warmup Iteration  15: 5018671.013 ops/s
# Warmup Iteration  16: 5037924.886 ops/s
# Warmup Iteration  17: 5032489.360 ops/s
# Warmup Iteration  18: 5040894.191 ops/s
# Warmup Iteration  19: 5026711.560 ops/s
# Warmup Iteration  20: 5042379.876 ops/s
# Warmup Iteration  21: 5039700.643 ops/s
# Warmup Iteration  22: 5022109.923 ops/s
# Warmup Iteration  23: 5001058.574 ops/s
# Warmup Iteration  24: 5031588.207 ops/s
# Warmup Iteration  25: 5037183.512 ops/s
# Warmup Iteration  26: 5044604.214 ops/s
# Warmup Iteration  27: 5017842.940 ops/s
# Warmup Iteration  28: 5016977.636 ops/s
# Warmup Iteration  29: 5020740.842 ops/s
# Warmup Iteration  30: 5032892.704 ops/s
Iteration   1: 5008830.810 ops/s
Iteration   2: 5020308.576 ops/s
Iteration   3: 5024759.698 ops/s
Iteration   4: 5025531.987 ops/s
Iteration   5: 5043139.144 ops/s
Iteration   6: 5028384.904 ops/s
Iteration   7: 5027367.716 ops/s
Iteration   8: 5014005.686 ops/s
Iteration   9: 5019673.646 ops/s
Iteration  10: 5005046.602 ops/s
Iteration  11: 5000971.969 ops/s
Iteration  12: 5033599.961 ops/s
Iteration  13: 5005267.051 ops/s
Iteration  14: 5030632.620 ops/s
Iteration  15: 5021242.592 ops/s
Iteration  16: 5027269.912 ops/s
Iteration  17: 5045596.899 ops/s
Iteration  18: 5046166.271 ops/s
Iteration  19: 5047873.954 ops/s
Iteration  20: 5024446.929 ops/s
Iteration  21: 5025437.077 ops/s
Iteration  22: 5009998.028 ops/s
Iteration  23: 5026165.904 ops/s
Iteration  24: 5023483.170 ops/s
Iteration  25: 5061378.741 ops/s
Iteration  26: 5044776.301 ops/s
Iteration  27: 5039442.271 ops/s
Iteration  28: 5020029.759 ops/s
Iteration  29: 5023175.576 ops/s
Iteration  30: 4992263.953 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableDoFinallyTest._Benchmark.benchmark_nonFused":
  5025542.257 ±(99.9%) 10311.317 ops/s [Average]
  (min, avg, max) = (4992263.953, 5025542.257, 5061378.741), stdev = 15433.496
  CI (99.9%): [5015230.940, 5035853.574] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
ObservableDoFinallyTest._Benchmark.benchmark_nonFused  thrpt   30  5025542.257 ± 10311.317  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_fusedCrashDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_fusedCrashDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 533898.022 ops/s
# Warmup Iteration   2: 666588.783 ops/s
# Warmup Iteration   3: 681875.371 ops/s
# Warmup Iteration   4: 718970.121 ops/s
# Warmup Iteration   5: 722033.715 ops/s
# Warmup Iteration   6: 724233.392 ops/s
# Warmup Iteration   7: 722456.569 ops/s
# Warmup Iteration   8: 723874.491 ops/s
# Warmup Iteration   9: 719401.772 ops/s
# Warmup Iteration  10: 721226.810 ops/s
# Warmup Iteration  11: 720976.065 ops/s
# Warmup Iteration  12: 717935.147 ops/s
# Warmup Iteration  13: 716545.631 ops/s
# Warmup Iteration  14: 717743.333 ops/s
# Warmup Iteration  15: 718570.684 ops/s
# Warmup Iteration  16: 719233.178 ops/s
# Warmup Iteration  17: 754741.800 ops/s
# Warmup Iteration  18: 752444.780 ops/s
# Warmup Iteration  19: 749369.887 ops/s
# Warmup Iteration  20: 749925.724 ops/s
# Warmup Iteration  21: 750933.105 ops/s
# Warmup Iteration  22: 748572.992 ops/s
# Warmup Iteration  23: 753240.861 ops/s
# Warmup Iteration  24: 750702.675 ops/s
# Warmup Iteration  25: 755116.978 ops/s
# Warmup Iteration  26: 751037.569 ops/s
# Warmup Iteration  27: 753178.227 ops/s
# Warmup Iteration  28: 750103.066 ops/s
# Warmup Iteration  29: 753249.807 ops/s
# Warmup Iteration  30: 756994.090 ops/s
Iteration   1: 752693.954 ops/s
Iteration   2: 750076.772 ops/s
Iteration   3: 746588.989 ops/s
Iteration   4: 756235.851 ops/s
Iteration   5: 755038.120 ops/s
Iteration   6: 757758.416 ops/s
Iteration   7: 748106.762 ops/s
Iteration   8: 747602.528 ops/s
Iteration   9: 754228.185 ops/s
Iteration  10: 752210.607 ops/s
Iteration  11: 749299.965 ops/s
Iteration  12: 748425.657 ops/s
Iteration  13: 747835.084 ops/s
Iteration  14: 751937.058 ops/s
Iteration  15: 750425.658 ops/s
Iteration  16: 746974.813 ops/s
Iteration  17: 753926.250 ops/s
Iteration  18: 751250.818 ops/s
Iteration  19: 749981.695 ops/s
Iteration  20: 749415.188 ops/s
Iteration  21: 750231.067 ops/s
Iteration  22: 758230.706 ops/s
Iteration  23: 755838.456 ops/s
Iteration  24: 751731.004 ops/s
Iteration  25: 749548.039 ops/s
Iteration  26: 752275.088 ops/s
Iteration  27: 750448.535 ops/s
Iteration  28: 749280.215 ops/s
Iteration  29: 748418.064 ops/s
Iteration  30: 749061.875 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_fusedCrashDelayError":
  751169.181 ±(99.9%) 2101.340 ops/s [Average]
  (min, avg, max) = (746588.989, 751169.181, 758230.706), stdev = 3145.187
  CI (99.9%): [749067.841, 753270.520] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score      Error  Units
ObservableConcatMapSchedulerTest._Benchmark.benchmark_fusedCrashDelayError  thrpt   30  751169.181 ± 2101.340  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDoFinallyTest._Benchmark.benchmark_syncFusedConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDoFinallyTest._Benchmark.benchmark_syncFusedConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3966999.525 ops/s
# Warmup Iteration   2: 5660549.462 ops/s
# Warmup Iteration   3: 6485801.498 ops/s
# Warmup Iteration   4: 6484552.439 ops/s
# Warmup Iteration   5: 6437060.217 ops/s
# Warmup Iteration   6: 6468116.024 ops/s
# Warmup Iteration   7: 6464574.621 ops/s
# Warmup Iteration   8: 6468668.020 ops/s
# Warmup Iteration   9: 6486190.485 ops/s
# Warmup Iteration  10: 6504872.934 ops/s
# Warmup Iteration  11: 6509824.761 ops/s
# Warmup Iteration  12: 6468580.893 ops/s
# Warmup Iteration  13: 6466109.423 ops/s
# Warmup Iteration  14: 6478704.579 ops/s
# Warmup Iteration  15: 6496145.664 ops/s
# Warmup Iteration  16: 6453625.421 ops/s
# Warmup Iteration  17: 6479792.298 ops/s
# Warmup Iteration  18: 6510684.692 ops/s
# Warmup Iteration  19: 6515806.053 ops/s
# Warmup Iteration  20: 6530986.484 ops/s
# Warmup Iteration  21: 6513278.958 ops/s
# Warmup Iteration  22: 6522081.588 ops/s
# Warmup Iteration  23: 6483149.083 ops/s
# Warmup Iteration  24: 6485358.241 ops/s
# Warmup Iteration  25: 6508552.150 ops/s
# Warmup Iteration  26: 6506941.432 ops/s
# Warmup Iteration  27: 6508913.410 ops/s
# Warmup Iteration  28: 6471269.715 ops/s
# Warmup Iteration  29: 6535800.249 ops/s
# Warmup Iteration  30: 6488078.618 ops/s
Iteration   1: 6500602.798 ops/s
Iteration   2: 6457915.490 ops/s
Iteration   3: 6465760.154 ops/s
Iteration   4: 6488249.167 ops/s
Iteration   5: 6499903.132 ops/s
Iteration   6: 6508488.733 ops/s
Iteration   7: 6493707.430 ops/s
Iteration   8: 6488393.727 ops/s
Iteration   9: 6493577.373 ops/s
Iteration  10: 6481632.548 ops/s
Iteration  11: 6495600.568 ops/s
Iteration  12: 6522433.002 ops/s
Iteration  13: 6483015.937 ops/s
Iteration  14: 6530105.781 ops/s
Iteration  15: 6513116.400 ops/s
Iteration  16: 6503219.757 ops/s
Iteration  17: 6548380.397 ops/s
Iteration  18: 6509387.507 ops/s
Iteration  19: 6545915.159 ops/s
Iteration  20: 6468628.426 ops/s
Iteration  21: 6529664.626 ops/s
Iteration  22: 6477012.295 ops/s
Iteration  23: 6480953.754 ops/s
Iteration  24: 6494313.894 ops/s
Iteration  25: 6527994.607 ops/s
Iteration  26: 6495563.494 ops/s
Iteration  27: 6455689.935 ops/s
Iteration  28: 6483501.452 ops/s
Iteration  29: 6531376.131 ops/s
Iteration  30: 6501000.157 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableDoFinallyTest._Benchmark.benchmark_syncFusedConditional":
  6499170.128 ±(99.9%) 16145.281 ops/s [Average]
  (min, avg, max) = (6455689.935, 6499170.128, 6548380.397), stdev = 24165.498
  CI (99.9%): [6483024.847, 6515315.408] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
ObservableDoFinallyTest._Benchmark.benchmark_syncFusedConditional  thrpt   30  6499170.128 ± 16145.281  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_normalDelayEnd$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_normalDelayEnd

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 974349.378 ops/s
# Warmup Iteration   2: 1436039.471 ops/s
# Warmup Iteration   3: 1662060.509 ops/s
# Warmup Iteration   4: 1666823.775 ops/s
# Warmup Iteration   5: 1663065.415 ops/s
# Warmup Iteration   6: 1651112.678 ops/s
# Warmup Iteration   7: 1653039.411 ops/s
# Warmup Iteration   8: 1650939.346 ops/s
# Warmup Iteration   9: 1648145.380 ops/s
# Warmup Iteration  10: 1659187.749 ops/s
# Warmup Iteration  11: 1646918.949 ops/s
# Warmup Iteration  12: 1651827.903 ops/s
# Warmup Iteration  13: 1654970.407 ops/s
# Warmup Iteration  14: 1643912.254 ops/s
# Warmup Iteration  15: 1643436.956 ops/s
# Warmup Iteration  16: 1644920.827 ops/s
# Warmup Iteration  17: 1677219.671 ops/s
# Warmup Iteration  18: 1684111.409 ops/s
# Warmup Iteration  19: 1687280.489 ops/s
# Warmup Iteration  20: 1682785.734 ops/s
# Warmup Iteration  21: 1693948.529 ops/s
# Warmup Iteration  22: 1691914.960 ops/s
# Warmup Iteration  23: 1685319.620 ops/s
# Warmup Iteration  24: 1680776.779 ops/s
# Warmup Iteration  25: 1683273.728 ops/s
# Warmup Iteration  26: 1680228.938 ops/s
# Warmup Iteration  27: 1676552.194 ops/s
# Warmup Iteration  28: 1685279.032 ops/s
# Warmup Iteration  29: 1684858.921 ops/s
# Warmup Iteration  30: 1682089.800 ops/s
Iteration   1: 1680260.571 ops/s
Iteration   2: 1681100.811 ops/s
Iteration   3: 1684983.447 ops/s
Iteration   4: 1684623.891 ops/s
Iteration   5: 1683173.473 ops/s
Iteration   6: 1674304.794 ops/s
Iteration   7: 1692933.573 ops/s
Iteration   8: 1693803.833 ops/s
Iteration   9: 1681570.076 ops/s
Iteration  10: 1684063.690 ops/s
Iteration  11: 1683925.550 ops/s
Iteration  12: 1684190.344 ops/s
Iteration  13: 1687235.529 ops/s
Iteration  14: 1681053.798 ops/s
Iteration  15: 1683199.904 ops/s
Iteration  16: 1688647.741 ops/s
Iteration  17: 1669276.931 ops/s
Iteration  18: 1689756.343 ops/s
Iteration  19: 1685112.734 ops/s
Iteration  20: 1682885.672 ops/s
Iteration  21: 1680749.012 ops/s
Iteration  22: 1689480.072 ops/s
Iteration  23: 1694557.880 ops/s
Iteration  24: 1682137.397 ops/s
Iteration  25: 1677166.551 ops/s
Iteration  26: 1689056.451 ops/s
Iteration  27: 1682710.156 ops/s
Iteration  28: 1672681.933 ops/s
Iteration  29: 1685281.560 ops/s
Iteration  30: 1686394.649 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_normalDelayEnd":
  1683877.279 ±(99.9%) 3841.150 ops/s [Average]
  (min, avg, max) = (1669276.931, 1683877.279, 1694557.880), stdev = 5749.252
  CI (99.9%): [1680036.129, 1687718.428] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
ObservableConcatMapEagerTest._Benchmark.benchmark_normalDelayEnd  thrpt   30  1683877.279 ± 3841.150  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_normalDelayBoundary$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_normalDelayBoundary

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1014996.747 ops/s
# Warmup Iteration   2: 1475028.537 ops/s
# Warmup Iteration   3: 1663362.222 ops/s
# Warmup Iteration   4: 1668485.230 ops/s
# Warmup Iteration   5: 1674736.271 ops/s
# Warmup Iteration   6: 1668636.707 ops/s
# Warmup Iteration   7: 1655224.059 ops/s
# Warmup Iteration   8: 1667378.763 ops/s
# Warmup Iteration   9: 1669625.402 ops/s
# Warmup Iteration  10: 1659723.465 ops/s
# Warmup Iteration  11: 1666479.267 ops/s
# Warmup Iteration  12: 1660671.884 ops/s
# Warmup Iteration  13: 1664601.296 ops/s
# Warmup Iteration  14: 1651416.965 ops/s
# Warmup Iteration  15: 1669024.885 ops/s
# Warmup Iteration  16: 1659826.810 ops/s
# Warmup Iteration  17: 1682365.348 ops/s
# Warmup Iteration  18: 1690675.955 ops/s
# Warmup Iteration  19: 1693110.442 ops/s
# Warmup Iteration  20: 1681793.386 ops/s
# Warmup Iteration  21: 1690179.285 ops/s
# Warmup Iteration  22: 1688473.612 ops/s
# Warmup Iteration  23: 1684056.665 ops/s
# Warmup Iteration  24: 1678763.480 ops/s
# Warmup Iteration  25: 1687899.619 ops/s
# Warmup Iteration  26: 1681445.405 ops/s
# Warmup Iteration  27: 1683317.081 ops/s
# Warmup Iteration  28: 1691199.004 ops/s
# Warmup Iteration  29: 1681296.919 ops/s
# Warmup Iteration  30: 1677784.181 ops/s
Iteration   1: 1685085.400 ops/s
Iteration   2: 1680812.504 ops/s
Iteration   3: 1683029.199 ops/s
Iteration   4: 1685139.307 ops/s
Iteration   5: 1677052.426 ops/s
Iteration   6: 1680444.723 ops/s
Iteration   7: 1684838.526 ops/s
Iteration   8: 1683050.439 ops/s
Iteration   9: 1685129.500 ops/s
Iteration  10: 1691533.541 ops/s
Iteration  11: 1689786.729 ops/s
Iteration  12: 1685724.537 ops/s
Iteration  13: 1692514.664 ops/s
Iteration  14: 1688544.124 ops/s
Iteration  15: 1680372.771 ops/s
Iteration  16: 1688508.271 ops/s
Iteration  17: 1685012.340 ops/s
Iteration  18: 1680506.953 ops/s
Iteration  19: 1694694.488 ops/s
Iteration  20: 1684121.574 ops/s
Iteration  21: 1690951.238 ops/s
Iteration  22: 1679047.858 ops/s
Iteration  23: 1685947.203 ops/s
Iteration  24: 1674139.912 ops/s
Iteration  25: 1690798.234 ops/s
Iteration  26: 1684065.059 ops/s
Iteration  27: 1688988.818 ops/s
Iteration  28: 1684111.270 ops/s
Iteration  29: 1682852.769 ops/s
Iteration  30: 1682079.933 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_normalDelayBoundary":
  1684962.810 ±(99.9%) 3155.742 ops/s [Average]
  (min, avg, max) = (1674139.912, 1684962.810, 1694694.488), stdev = 4723.366
  CI (99.9%): [1681807.069, 1688118.552] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
ObservableConcatMapEagerTest._Benchmark.benchmark_normalDelayBoundary  thrpt   30  1684962.810 ± 3155.742  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_normal$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_normal

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 907870.088 ops/s
# Warmup Iteration   2: 1379487.465 ops/s
# Warmup Iteration   3: 1554166.535 ops/s
# Warmup Iteration   4: 1547840.921 ops/s
# Warmup Iteration   5: 1541360.708 ops/s
# Warmup Iteration   6: 1545682.291 ops/s
# Warmup Iteration   7: 1538925.813 ops/s
# Warmup Iteration   8: 1545276.398 ops/s
# Warmup Iteration   9: 1539815.268 ops/s
# Warmup Iteration  10: 1538790.870 ops/s
# Warmup Iteration  11: 1555292.158 ops/s
# Warmup Iteration  12: 1553018.704 ops/s
# Warmup Iteration  13: 1547352.405 ops/s
# Warmup Iteration  14: 1538582.152 ops/s
# Warmup Iteration  15: 1545792.845 ops/s
# Warmup Iteration  16: 1546659.276 ops/s
# Warmup Iteration  17: 1574897.048 ops/s
# Warmup Iteration  18: 1570247.601 ops/s
# Warmup Iteration  19: 1562434.863 ops/s
# Warmup Iteration  20: 1576888.513 ops/s
# Warmup Iteration  21: 1571098.616 ops/s
# Warmup Iteration  22: 1562463.047 ops/s
# Warmup Iteration  23: 1561030.590 ops/s
# Warmup Iteration  24: 1561817.704 ops/s
# Warmup Iteration  25: 1557625.518 ops/s
# Warmup Iteration  26: 1567693.123 ops/s
# Warmup Iteration  27: 1572747.976 ops/s
# Warmup Iteration  28: 1562117.654 ops/s
# Warmup Iteration  29: 1569601.184 ops/s
# Warmup Iteration  30: 1573734.157 ops/s
Iteration   1: 1571684.962 ops/s
Iteration   2: 1572981.700 ops/s
Iteration   3: 1573601.446 ops/s
Iteration   4: 1574528.253 ops/s
Iteration   5: 1572491.666 ops/s
Iteration   6: 1573021.236 ops/s
Iteration   7: 1562968.391 ops/s
Iteration   8: 1574920.142 ops/s
Iteration   9: 1572270.459 ops/s
Iteration  10: 1572767.438 ops/s
Iteration  11: 1567525.427 ops/s
Iteration  12: 1568544.345 ops/s
Iteration  13: 1573071.709 ops/s
Iteration  14: 1576661.669 ops/s
Iteration  15: 1567931.435 ops/s
Iteration  16: 1558058.903 ops/s
Iteration  17: 1570957.572 ops/s
Iteration  18: 1573605.108 ops/s
Iteration  19: 1569660.176 ops/s
Iteration  20: 1557624.484 ops/s
Iteration  21: 1576711.925 ops/s
Iteration  22: 1568325.559 ops/s
Iteration  23: 1562883.061 ops/s
Iteration  24: 1570853.048 ops/s
Iteration  25: 1564828.730 ops/s
Iteration  26: 1566070.966 ops/s
Iteration  27: 1571819.268 ops/s
Iteration  28: 1571240.063 ops/s
Iteration  29: 1572811.460 ops/s
Iteration  30: 1562540.178 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_normal":
  1569765.359 ±(99.9%) 3354.988 ops/s [Average]
  (min, avg, max) = (1557624.484, 1569765.359, 1576711.925), stdev = 5021.588
  CI (99.9%): [1566410.372, 1573120.347] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
ObservableConcatMapEagerTest._Benchmark.benchmark_normal  thrpt   30  1569765.359 ± 3354.988  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_notVeryEnd$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_notVeryEnd

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 652815.081 ops/s
# Warmup Iteration   2: 775229.402 ops/s
# Warmup Iteration   3: 856083.493 ops/s
# Warmup Iteration   4: 800628.323 ops/s
# Warmup Iteration   5: 876334.281 ops/s
# Warmup Iteration   6: 884789.091 ops/s
# Warmup Iteration   7: 882438.697 ops/s
# Warmup Iteration   8: 879756.692 ops/s
# Warmup Iteration   9: 879999.421 ops/s
# Warmup Iteration  10: 885177.997 ops/s
# Warmup Iteration  11: 882694.340 ops/s
# Warmup Iteration  12: 883987.236 ops/s
# Warmup Iteration  13: 882819.056 ops/s
# Warmup Iteration  14: 879176.809 ops/s
# Warmup Iteration  15: 877267.295 ops/s
# Warmup Iteration  16: 877636.335 ops/s
# Warmup Iteration  17: 932008.770 ops/s
# Warmup Iteration  18: 928367.454 ops/s
# Warmup Iteration  19: 927802.560 ops/s
# Warmup Iteration  20: 927586.965 ops/s
# Warmup Iteration  21: 930563.050 ops/s
# Warmup Iteration  22: 930450.725 ops/s
# Warmup Iteration  23: 930002.319 ops/s
# Warmup Iteration  24: 927711.495 ops/s
# Warmup Iteration  25: 918696.675 ops/s
# Warmup Iteration  26: 929045.055 ops/s
# Warmup Iteration  27: 928838.660 ops/s
# Warmup Iteration  28: 926762.535 ops/s
# Warmup Iteration  29: 924228.983 ops/s
# Warmup Iteration  30: 925420.473 ops/s
Iteration   1: 929115.739 ops/s
Iteration   2: 930180.987 ops/s
Iteration   3: 928120.301 ops/s
Iteration   4: 933715.763 ops/s
Iteration   5: 930153.429 ops/s
Iteration   6: 928221.805 ops/s
Iteration   7: 933053.829 ops/s
Iteration   8: 931320.792 ops/s
Iteration   9: 928153.629 ops/s
Iteration  10: 926477.356 ops/s
Iteration  11: 920690.160 ops/s
Iteration  12: 928182.099 ops/s
Iteration  13: 931162.215 ops/s
Iteration  14: 923803.515 ops/s
Iteration  15: 925606.780 ops/s
Iteration  16: 928090.278 ops/s
Iteration  17: 923437.820 ops/s
Iteration  18: 932084.945 ops/s
Iteration  19: 927772.714 ops/s
Iteration  20: 927212.826 ops/s
Iteration  21: 925191.837 ops/s
Iteration  22: 927691.750 ops/s
Iteration  23: 923394.427 ops/s
Iteration  24: 929877.622 ops/s
Iteration  25: 929250.399 ops/s
Iteration  26: 927987.939 ops/s
Iteration  27: 927168.162 ops/s
Iteration  28: 930431.674 ops/s
Iteration  29: 926823.863 ops/s
Iteration  30: 929761.659 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_notVeryEnd":
  928137.877 ±(99.9%) 1969.752 ops/s [Average]
  (min, avg, max) = (920690.160, 928137.877, 933715.763), stdev = 2948.233
  CI (99.9%): [926168.125, 930107.629] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
ObservableConcatMapSchedulerTest._Benchmark.benchmark_notVeryEnd  thrpt   30  928137.877 ± 1969.752  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservablePublishTest._Benchmark.benchmark_take$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservablePublishTest._Benchmark.benchmark_take

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2701668.484 ops/s
# Warmup Iteration   2: 4297879.358 ops/s
# Warmup Iteration   3: 4707395.512 ops/s
# Warmup Iteration   4: 4639087.060 ops/s
# Warmup Iteration   5: 4669912.288 ops/s
# Warmup Iteration   6: 4651923.550 ops/s
# Warmup Iteration   7: 4663742.113 ops/s
# Warmup Iteration   8: 4670120.959 ops/s
# Warmup Iteration   9: 4663062.543 ops/s
# Warmup Iteration  10: 4643131.538 ops/s
# Warmup Iteration  11: 4647837.804 ops/s
# Warmup Iteration  12: 4633237.467 ops/s
# Warmup Iteration  13: 4677471.157 ops/s
# Warmup Iteration  14: 4646796.161 ops/s
# Warmup Iteration  15: 4674375.332 ops/s
# Warmup Iteration  16: 4660707.418 ops/s
# Warmup Iteration  17: 4664494.999 ops/s
# Warmup Iteration  18: 4687333.582 ops/s
# Warmup Iteration  19: 4647030.517 ops/s
# Warmup Iteration  20: 4666269.619 ops/s
# Warmup Iteration  21: 4637683.259 ops/s
# Warmup Iteration  22: 4632619.747 ops/s
# Warmup Iteration  23: 4660070.021 ops/s
# Warmup Iteration  24: 4664282.418 ops/s
# Warmup Iteration  25: 4685339.920 ops/s
# Warmup Iteration  26: 4644845.361 ops/s
# Warmup Iteration  27: 4658302.196 ops/s
# Warmup Iteration  28: 4652275.564 ops/s
# Warmup Iteration  29: 4658137.370 ops/s
# Warmup Iteration  30: 4628854.342 ops/s
Iteration   1: 4680955.893 ops/s
Iteration   2: 4663298.048 ops/s
Iteration   3: 4672418.230 ops/s
Iteration   4: 4656419.250 ops/s
Iteration   5: 4670847.035 ops/s
Iteration   6: 4631981.561 ops/s
Iteration   7: 4664925.454 ops/s
Iteration   8: 4651149.348 ops/s
Iteration   9: 4674522.483 ops/s
Iteration  10: 4678506.173 ops/s
Iteration  11: 4679000.810 ops/s
Iteration  12: 4648605.843 ops/s
Iteration  13: 4643985.105 ops/s
Iteration  14: 4672977.464 ops/s
Iteration  15: 4660489.112 ops/s
Iteration  16: 4633270.978 ops/s
Iteration  17: 4667704.586 ops/s
Iteration  18: 4634169.777 ops/s
Iteration  19: 4675633.665 ops/s
Iteration  20: 4661217.200 ops/s
Iteration  21: 4649847.329 ops/s
Iteration  22: 4673647.022 ops/s
Iteration  23: 4679267.956 ops/s
Iteration  24: 4675121.071 ops/s
Iteration  25: 4684569.112 ops/s
Iteration  26: 4652043.233 ops/s
Iteration  27: 4663540.682 ops/s
Iteration  28: 4648469.451 ops/s
Iteration  29: 4645950.017 ops/s
Iteration  30: 4678800.412 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservablePublishTest._Benchmark.benchmark_take":
  4662444.477 ±(99.9%) 10269.640 ops/s [Average]
  (min, avg, max) = (4631981.561, 4662444.477, 4684569.112), stdev = 15371.115
  CI (99.9%): [4652174.837, 4672714.116] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score       Error  Units
ObservablePublishTest._Benchmark.benchmark_take  thrpt   30  4662444.477 ± 10269.640  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDoFinallyTest._Benchmark.benchmark_normalTakeConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDoFinallyTest._Benchmark.benchmark_normalTakeConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3031527.741 ops/s
# Warmup Iteration   2: 4373021.690 ops/s
# Warmup Iteration   3: 4977075.061 ops/s
# Warmup Iteration   4: 4963080.333 ops/s
# Warmup Iteration   5: 4951892.191 ops/s
# Warmup Iteration   6: 4955674.599 ops/s
# Warmup Iteration   7: 4948435.151 ops/s
# Warmup Iteration   8: 4901997.092 ops/s
# Warmup Iteration   9: 4926118.381 ops/s
# Warmup Iteration  10: 4978613.556 ops/s
# Warmup Iteration  11: 4935262.603 ops/s
# Warmup Iteration  12: 4952080.617 ops/s
# Warmup Iteration  13: 4940594.071 ops/s
# Warmup Iteration  14: 4958410.327 ops/s
# Warmup Iteration  15: 4964669.841 ops/s
# Warmup Iteration  16: 4923112.517 ops/s
# Warmup Iteration  17: 4938474.001 ops/s
# Warmup Iteration  18: 4927629.817 ops/s
# Warmup Iteration  19: 4953004.928 ops/s
# Warmup Iteration  20: 4990394.619 ops/s
# Warmup Iteration  21: 4976294.985 ops/s
# Warmup Iteration  22: 4970735.243 ops/s
# Warmup Iteration  23: 4990105.816 ops/s
# Warmup Iteration  24: 4957837.660 ops/s
# Warmup Iteration  25: 4938050.833 ops/s
# Warmup Iteration  26: 4988153.844 ops/s
# Warmup Iteration  27: 4941730.418 ops/s
# Warmup Iteration  28: 4966948.783 ops/s
# Warmup Iteration  29: 4951826.551 ops/s
# Warmup Iteration  30: 4963158.879 ops/s
Iteration   1: 4947906.806 ops/s
Iteration   2: 4959405.533 ops/s
Iteration   3: 4945513.518 ops/s
Iteration   4: 4968033.872 ops/s
Iteration   5: 4994098.478 ops/s
Iteration   6: 4969493.331 ops/s
Iteration   7: 4969185.626 ops/s
Iteration   8: 4951899.948 ops/s
Iteration   9: 4965675.878 ops/s
Iteration  10: 4959892.223 ops/s
Iteration  11: 4991168.117 ops/s
Iteration  12: 4972363.394 ops/s
Iteration  13: 4978984.477 ops/s
Iteration  14: 4953009.621 ops/s
Iteration  15: 4958622.423 ops/s
Iteration  16: 4979603.536 ops/s
Iteration  17: 4931799.779 ops/s
Iteration  18: 4998376.077 ops/s
Iteration  19: 4965091.028 ops/s
Iteration  20: 4946628.074 ops/s
Iteration  21: 4959536.688 ops/s
Iteration  22: 4943881.417 ops/s
Iteration  23: 4971298.523 ops/s
Iteration  24: 4953659.455 ops/s
Iteration  25: 4975237.675 ops/s
Iteration  26: 4925817.795 ops/s
Iteration  27: 4966223.325 ops/s
Iteration  28: 4986544.389 ops/s
Iteration  29: 4986848.809 ops/s
Iteration  30: 4979732.356 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableDoFinallyTest._Benchmark.benchmark_normalTakeConditional":
  4965184.406 ±(99.9%) 11850.837 ops/s [Average]
  (min, avg, max) = (4925817.795, 4965184.406, 4998376.077), stdev = 17737.776
  CI (99.9%): [4953333.569, 4977035.243] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
ObservableDoFinallyTest._Benchmark.benchmark_normalTakeConditional  thrpt   30  4965184.406 ± 11850.837  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDoFinallyTest._Benchmark.benchmark_nonFusedConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDoFinallyTest._Benchmark.benchmark_nonFusedConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2806358.319 ops/s
# Warmup Iteration   2: 4112840.795 ops/s
# Warmup Iteration   3: 4735536.777 ops/s
# Warmup Iteration   4: 4710538.509 ops/s
# Warmup Iteration   5: 4714992.148 ops/s
# Warmup Iteration   6: 4669754.335 ops/s
# Warmup Iteration   7: 4707574.500 ops/s
# Warmup Iteration   8: 4674725.448 ops/s
# Warmup Iteration   9: 4706145.197 ops/s
# Warmup Iteration  10: 4688906.236 ops/s
# Warmup Iteration  11: 4706319.510 ops/s
# Warmup Iteration  12: 4683922.169 ops/s
# Warmup Iteration  13: 4694146.382 ops/s
# Warmup Iteration  14: 4693528.419 ops/s
# Warmup Iteration  15: 4682271.497 ops/s
# Warmup Iteration  16: 4687051.364 ops/s
# Warmup Iteration  17: 4687240.637 ops/s
# Warmup Iteration  18: 4689451.179 ops/s
# Warmup Iteration  19: 4696608.744 ops/s
# Warmup Iteration  20: 4683925.104 ops/s
# Warmup Iteration  21: 4664521.314 ops/s
# Warmup Iteration  22: 4722618.522 ops/s
# Warmup Iteration  23: 4718076.344 ops/s
# Warmup Iteration  24: 4695510.434 ops/s
# Warmup Iteration  25: 4709484.702 ops/s
# Warmup Iteration  26: 4684993.366 ops/s
# Warmup Iteration  27: 4718075.298 ops/s
# Warmup Iteration  28: 4686566.520 ops/s
# Warmup Iteration  29: 4740769.502 ops/s
# Warmup Iteration  30: 4715154.735 ops/s
Iteration   1: 4691929.047 ops/s
Iteration   2: 4702014.498 ops/s
Iteration   3: 4701826.240 ops/s
Iteration   4: 4680724.141 ops/s
Iteration   5: 4686064.225 ops/s
Iteration   6: 4675686.368 ops/s
Iteration   7: 4701502.672 ops/s
Iteration   8: 4721499.680 ops/s
Iteration   9: 4681278.900 ops/s
Iteration  10: 4698116.901 ops/s
Iteration  11: 4709854.688 ops/s
Iteration  12: 4712717.910 ops/s
Iteration  13: 4669097.035 ops/s
Iteration  14: 4709937.645 ops/s
Iteration  15: 4698846.515 ops/s
Iteration  16: 4697416.112 ops/s
Iteration  17: 4664454.077 ops/s
Iteration  18: 4656047.104 ops/s
Iteration  19: 4707643.489 ops/s
Iteration  20: 4697962.678 ops/s
Iteration  21: 4678566.248 ops/s
Iteration  22: 4690369.520 ops/s
Iteration  23: 4698902.457 ops/s
Iteration  24: 4669518.597 ops/s
Iteration  25: 4700541.609 ops/s
Iteration  26: 4708643.990 ops/s
Iteration  27: 4675980.974 ops/s
Iteration  28: 4671536.664 ops/s
Iteration  29: 4688709.488 ops/s
Iteration  30: 4698923.832 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableDoFinallyTest._Benchmark.benchmark_nonFusedConditional":
  4691543.777 ±(99.9%) 10783.346 ops/s [Average]
  (min, avg, max) = (4656047.104, 4691543.777, 4721499.680), stdev = 16140.005
  CI (99.9%): [4680760.431, 4702327.122] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
ObservableDoFinallyTest._Benchmark.benchmark_nonFusedConditional  thrpt   30  4691543.777 ± 10783.346  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservablePublishTest._Benchmark.benchmark_takeUntilWithPublishedStreamUsingSelector$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservablePublishTest._Benchmark.benchmark_takeUntilWithPublishedStreamUsingSelector

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1082602.045 ops/s
# Warmup Iteration   2: 1569927.897 ops/s
# Warmup Iteration   3: 1967205.448 ops/s
# Warmup Iteration   4: 1975623.850 ops/s
# Warmup Iteration   5: 1953840.943 ops/s
# Warmup Iteration   6: 1957581.171 ops/s
# Warmup Iteration   7: 1960928.138 ops/s
# Warmup Iteration   8: 1945191.361 ops/s
# Warmup Iteration   9: 1949003.419 ops/s
# Warmup Iteration  10: 1967999.455 ops/s
# Warmup Iteration  11: 1957384.303 ops/s
# Warmup Iteration  12: 1961132.785 ops/s
# Warmup Iteration  13: 1966125.962 ops/s
# Warmup Iteration  14: 1967661.740 ops/s
# Warmup Iteration  15: 1937837.025 ops/s
# Warmup Iteration  16: 1961792.136 ops/s
# Warmup Iteration  17: 1947161.806 ops/s
# Warmup Iteration  18: 1939447.011 ops/s
# Warmup Iteration  19: 1948426.638 ops/s
# Warmup Iteration  20: 1939857.654 ops/s
# Warmup Iteration  21: 1953776.599 ops/s
# Warmup Iteration  22: 1951773.342 ops/s
# Warmup Iteration  23: 1940348.643 ops/s
# Warmup Iteration  24: 1933311.838 ops/s
# Warmup Iteration  25: 1959265.478 ops/s
# Warmup Iteration  26: 1948287.047 ops/s
# Warmup Iteration  27: 1943593.973 ops/s
# Warmup Iteration  28: 1945851.156 ops/s
# Warmup Iteration  29: 1940308.997 ops/s
# Warmup Iteration  30: 1951743.855 ops/s
Iteration   1: 1949301.134 ops/s
Iteration   2: 1936223.122 ops/s
Iteration   3: 1950833.588 ops/s
Iteration   4: 1938311.204 ops/s
Iteration   5: 1947250.560 ops/s
Iteration   6: 1940053.006 ops/s
Iteration   7: 1964341.470 ops/s
Iteration   8: 1940859.314 ops/s
Iteration   9: 1933276.596 ops/s
Iteration  10: 1933549.913 ops/s
Iteration  11: 1943046.591 ops/s
Iteration  12: 1932866.255 ops/s
Iteration  13: 1943842.308 ops/s
Iteration  14: 1950390.242 ops/s
Iteration  15: 1934342.266 ops/s
Iteration  16: 1952401.479 ops/s
Iteration  17: 1949229.270 ops/s
Iteration  18: 1932853.274 ops/s
Iteration  19: 1928316.174 ops/s
Iteration  20: 1932751.514 ops/s
Iteration  21: 1928522.611 ops/s
Iteration  22: 1947777.615 ops/s
Iteration  23: 1963541.327 ops/s
Iteration  24: 1946448.072 ops/s
Iteration  25: 1929414.322 ops/s
Iteration  26: 1954324.462 ops/s
Iteration  27: 1953159.069 ops/s
Iteration  28: 1949123.402 ops/s
Iteration  29: 1960627.304 ops/s
Iteration  30: 1937618.819 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservablePublishTest._Benchmark.benchmark_takeUntilWithPublishedStreamUsingSelector":
  1943486.543 ±(99.9%) 6880.592 ops/s [Average]
  (min, avg, max) = (1928316.174, 1943486.543, 1964341.470), stdev = 10298.547
  CI (99.9%): [1936605.951, 1950367.135] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              Mode  Cnt        Score      Error  Units
ObservablePublishTest._Benchmark.benchmark_takeUntilWithPublishedStreamUsingSelector  thrpt   30  1943486.543 ± 6880.592  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReplayTest._Benchmark.benchmark_replayMaxInt$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReplayTest._Benchmark.benchmark_replayMaxInt

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1836390.543 ops/s
# Warmup Iteration   2: 2758554.718 ops/s
# Warmup Iteration   3: 3089750.233 ops/s
# Warmup Iteration   4: 3139324.251 ops/s
# Warmup Iteration   5: 3147262.381 ops/s
# Warmup Iteration   6: 3093978.810 ops/s
# Warmup Iteration   7: 3090483.405 ops/s
# Warmup Iteration   8: 3103619.241 ops/s
# Warmup Iteration   9: 3167433.839 ops/s
# Warmup Iteration  10: 3146793.661 ops/s
# Warmup Iteration  11: 3140508.426 ops/s
# Warmup Iteration  12: 3119494.142 ops/s
# Warmup Iteration  13: 3127749.705 ops/s
# Warmup Iteration  14: 3062479.474 ops/s
# Warmup Iteration  15: 3127686.411 ops/s
# Warmup Iteration  16: 3129590.839 ops/s
# Warmup Iteration  17: 3112728.383 ops/s
# Warmup Iteration  18: 3099750.312 ops/s
# Warmup Iteration  19: 3147168.295 ops/s
# Warmup Iteration  20: 3105814.665 ops/s
# Warmup Iteration  21: 3128737.939 ops/s
# Warmup Iteration  22: 3111744.265 ops/s
# Warmup Iteration  23: 3109321.936 ops/s
# Warmup Iteration  24: 3170946.514 ops/s
# Warmup Iteration  25: 3121811.478 ops/s
# Warmup Iteration  26: 3163661.642 ops/s
# Warmup Iteration  27: 3123335.979 ops/s
# Warmup Iteration  28: 3155615.471 ops/s
# Warmup Iteration  29: 3202571.092 ops/s
# Warmup Iteration  30: 3120525.525 ops/s
Iteration   1: 3108381.482 ops/s
Iteration   2: 3119323.176 ops/s
Iteration   3: 3117461.304 ops/s
Iteration   4: 3106919.530 ops/s
Iteration   5: 3123189.776 ops/s
Iteration   6: 3116119.950 ops/s
Iteration   7: 3115238.401 ops/s
Iteration   8: 3126763.329 ops/s
Iteration   9: 3123116.416 ops/s
Iteration  10: 3087514.113 ops/s
Iteration  11: 3143029.293 ops/s
Iteration  12: 3129874.907 ops/s
Iteration  13: 3137994.516 ops/s
Iteration  14: 3118175.059 ops/s
Iteration  15: 3144143.867 ops/s
Iteration  16: 3115541.146 ops/s
Iteration  17: 3129590.390 ops/s
Iteration  18: 3132338.005 ops/s
Iteration  19: 3105302.282 ops/s
Iteration  20: 3108208.984 ops/s
Iteration  21: 3108816.597 ops/s
Iteration  22: 3135819.351 ops/s
Iteration  23: 3077657.604 ops/s
Iteration  24: 3162116.188 ops/s
Iteration  25: 3153601.105 ops/s
Iteration  26: 3106492.664 ops/s
Iteration  27: 3148080.471 ops/s
Iteration  28: 3059730.998 ops/s
Iteration  29: 3151985.609 ops/s
Iteration  30: 3130267.665 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableReplayTest._Benchmark.benchmark_replayMaxInt":
  3121426.472 ±(99.9%) 14872.605 ops/s [Average]
  (min, avg, max) = (3059730.998, 3121426.472, 3162116.188), stdev = 22260.617
  CI (99.9%): [3106553.867, 3136299.078] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
ObservableReplayTest._Benchmark.benchmark_replayMaxInt  thrpt   30  3121426.472 ± 14872.605  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReplayEagerTruncateTest._Benchmark.benchmark_replayMaxInt$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReplayEagerTruncateTest._Benchmark.benchmark_replayMaxInt

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1760276.085 ops/s
# Warmup Iteration   2: 2381581.717 ops/s
# Warmup Iteration   3: 2814463.583 ops/s
# Warmup Iteration   4: 2857072.562 ops/s
# Warmup Iteration   5: 2840605.273 ops/s
# Warmup Iteration   6: 2841916.754 ops/s
# Warmup Iteration   7: 2850244.260 ops/s
# Warmup Iteration   8: 2824452.331 ops/s
# Warmup Iteration   9: 2823793.982 ops/s
# Warmup Iteration  10: 2835865.354 ops/s
# Warmup Iteration  11: 2869932.361 ops/s
# Warmup Iteration  12: 2840067.812 ops/s
# Warmup Iteration  13: 2872062.145 ops/s
# Warmup Iteration  14: 2834436.905 ops/s
# Warmup Iteration  15: 2853912.373 ops/s
# Warmup Iteration  16: 2803540.339 ops/s
# Warmup Iteration  17: 2816922.181 ops/s
# Warmup Iteration  18: 2843841.318 ops/s
# Warmup Iteration  19: 2824767.058 ops/s
# Warmup Iteration  20: 2843396.906 ops/s
# Warmup Iteration  21: 2832351.668 ops/s
# Warmup Iteration  22: 2844223.924 ops/s
# Warmup Iteration  23: 2805364.008 ops/s
# Warmup Iteration  24: 2831210.501 ops/s
# Warmup Iteration  25: 2823046.293 ops/s
# Warmup Iteration  26: 2835214.177 ops/s
# Warmup Iteration  27: 2847045.928 ops/s
# Warmup Iteration  28: 2841343.869 ops/s
# Warmup Iteration  29: 2848299.356 ops/s
# Warmup Iteration  30: 2852943.917 ops/s
Iteration   1: 2830804.464 ops/s
Iteration   2: 2812171.026 ops/s
Iteration   3: 2840183.211 ops/s
Iteration   4: 2827232.333 ops/s
Iteration   5: 2812780.088 ops/s
Iteration   6: 2822402.660 ops/s
Iteration   7: 2815884.406 ops/s
Iteration   8: 2799258.004 ops/s
Iteration   9: 2800875.300 ops/s
Iteration  10: 2795508.249 ops/s
Iteration  11: 2868730.291 ops/s
Iteration  12: 2845645.185 ops/s
Iteration  13: 2846673.314 ops/s
Iteration  14: 2827527.455 ops/s
Iteration  15: 2818564.089 ops/s
Iteration  16: 2809403.516 ops/s
Iteration  17: 2847069.134 ops/s
Iteration  18: 2837486.097 ops/s
Iteration  19: 2808270.261 ops/s
Iteration  20: 2841614.100 ops/s
Iteration  21: 2813658.384 ops/s
Iteration  22: 2851715.125 ops/s
Iteration  23: 2791316.691 ops/s
Iteration  24: 2852045.776 ops/s
Iteration  25: 2850629.892 ops/s
Iteration  26: 2822360.927 ops/s
Iteration  27: 2824129.380 ops/s
Iteration  28: 2828949.947 ops/s
Iteration  29: 2824157.211 ops/s
Iteration  30: 2828888.384 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableReplayEagerTruncateTest._Benchmark.benchmark_replayMaxInt":
  2826531.163 ±(99.9%) 12664.200 ops/s [Average]
  (min, avg, max) = (2791316.691, 2826531.163, 2868730.291), stdev = 18955.180
  CI (99.9%): [2813866.963, 2839195.363] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
ObservableReplayEagerTruncateTest._Benchmark.benchmark_replayMaxInt  thrpt   30  2826531.163 ± 12664.200  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorTest._Benchmark.benchmark_collectorSupplierCrashToObservable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorTest._Benchmark.benchmark_collectorSupplierCrashToObservable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 681620.411 ops/s
# Warmup Iteration   2: 827409.364 ops/s
# Warmup Iteration   3: 824699.062 ops/s
# Warmup Iteration   4: 887171.374 ops/s
# Warmup Iteration   5: 889300.022 ops/s
# Warmup Iteration   6: 888336.728 ops/s
# Warmup Iteration   7: 885567.582 ops/s
# Warmup Iteration   8: 892647.137 ops/s
# Warmup Iteration   9: 890670.161 ops/s
# Warmup Iteration  10: 885672.201 ops/s
# Warmup Iteration  11: 882423.679 ops/s
# Warmup Iteration  12: 885429.380 ops/s
# Warmup Iteration  13: 884796.834 ops/s
# Warmup Iteration  14: 886544.796 ops/s
# Warmup Iteration  15: 888347.482 ops/s
# Warmup Iteration  16: 879674.906 ops/s
# Warmup Iteration  17: 935588.183 ops/s
# Warmup Iteration  18: 933291.007 ops/s
# Warmup Iteration  19: 933307.025 ops/s
# Warmup Iteration  20: 934035.368 ops/s
# Warmup Iteration  21: 928675.044 ops/s
# Warmup Iteration  22: 938272.698 ops/s
# Warmup Iteration  23: 934090.635 ops/s
# Warmup Iteration  24: 930004.218 ops/s
# Warmup Iteration  25: 937739.160 ops/s
# Warmup Iteration  26: 935473.127 ops/s
# Warmup Iteration  27: 929605.257 ops/s
# Warmup Iteration  28: 937495.540 ops/s
# Warmup Iteration  29: 936307.159 ops/s
# Warmup Iteration  30: 935067.726 ops/s
Iteration   1: 936122.481 ops/s
Iteration   2: 932951.800 ops/s
Iteration   3: 936432.666 ops/s
Iteration   4: 934372.635 ops/s
Iteration   5: 938632.832 ops/s
Iteration   6: 933302.440 ops/s
Iteration   7: 933232.075 ops/s
Iteration   8: 934410.156 ops/s
Iteration   9: 933144.664 ops/s
Iteration  10: 932762.379 ops/s
Iteration  11: 934084.026 ops/s
Iteration  12: 926924.857 ops/s
Iteration  13: 930969.016 ops/s
Iteration  14: 936289.377 ops/s
Iteration  15: 934128.240 ops/s
Iteration  16: 929695.912 ops/s
Iteration  17: 931767.106 ops/s
Iteration  18: 938090.255 ops/s
Iteration  19: 939844.679 ops/s
Iteration  20: 934459.626 ops/s
Iteration  21: 931021.190 ops/s
Iteration  22: 937903.524 ops/s
Iteration  23: 940188.262 ops/s
Iteration  24: 931467.589 ops/s
Iteration  25: 934087.288 ops/s
Iteration  26: 931516.951 ops/s
Iteration  27: 936419.566 ops/s
Iteration  28: 939396.594 ops/s
Iteration  29: 938505.684 ops/s
Iteration  30: 933142.880 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorTest._Benchmark.benchmark_collectorSupplierCrashToObservable":
  934508.892 ±(99.9%) 2145.253 ops/s [Average]
  (min, avg, max) = (926924.857, 934508.892, 940188.262), stdev = 3210.915
  CI (99.9%): [932363.638, 936654.145] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                    Mode  Cnt       Score      Error  Units
ObservableCollectWithCollectorTest._Benchmark.benchmark_collectorSupplierCrashToObservable  thrpt   30  934508.892 ± 2145.253  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReplayTest._Benchmark.benchmark_connectConsumerThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReplayTest._Benchmark.benchmark_connectConsumerThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 441351.950 ops/s
# Warmup Iteration   2: 557302.895 ops/s
# Warmup Iteration   3: 577594.344 ops/s
# Warmup Iteration   4: 603049.054 ops/s
# Warmup Iteration   5: 624377.265 ops/s
# Warmup Iteration   6: 627063.166 ops/s
# Warmup Iteration   7: 626417.228 ops/s
# Warmup Iteration   8: 628655.223 ops/s
# Warmup Iteration   9: 629478.273 ops/s
# Warmup Iteration  10: 629950.426 ops/s
# Warmup Iteration  11: 621742.362 ops/s
# Warmup Iteration  12: 627305.310 ops/s
# Warmup Iteration  13: 621850.563 ops/s
# Warmup Iteration  14: 624180.380 ops/s
# Warmup Iteration  15: 622395.051 ops/s
# Warmup Iteration  16: 620289.669 ops/s
# Warmup Iteration  17: 650662.407 ops/s
# Warmup Iteration  18: 645926.037 ops/s
# Warmup Iteration  19: 644308.928 ops/s
# Warmup Iteration  20: 648653.286 ops/s
# Warmup Iteration  21: 647891.031 ops/s
# Warmup Iteration  22: 651452.103 ops/s
# Warmup Iteration  23: 651802.466 ops/s
# Warmup Iteration  24: 649621.463 ops/s
# Warmup Iteration  25: 648968.099 ops/s
# Warmup Iteration  26: 645753.752 ops/s
# Warmup Iteration  27: 646139.023 ops/s
# Warmup Iteration  28: 647766.801 ops/s
# Warmup Iteration  29: 649672.078 ops/s
# Warmup Iteration  30: 647760.288 ops/s
Iteration   1: 648129.982 ops/s
Iteration   2: 647998.074 ops/s
Iteration   3: 648300.150 ops/s
Iteration   4: 650245.467 ops/s
Iteration   5: 647316.554 ops/s
Iteration   6: 642397.050 ops/s
Iteration   7: 648881.271 ops/s
Iteration   8: 643472.221 ops/s
Iteration   9: 645495.204 ops/s
Iteration  10: 647748.483 ops/s
Iteration  11: 650430.430 ops/s
Iteration  12: 651384.680 ops/s
Iteration  13: 647512.089 ops/s
Iteration  14: 645454.552 ops/s
Iteration  15: 646636.614 ops/s
Iteration  16: 644828.333 ops/s
Iteration  17: 641796.064 ops/s
Iteration  18: 646523.854 ops/s
Iteration  19: 651980.017 ops/s
Iteration  20: 651586.301 ops/s
Iteration  21: 647119.310 ops/s
Iteration  22: 649718.330 ops/s
Iteration  23: 649169.028 ops/s
Iteration  24: 648482.029 ops/s
Iteration  25: 651547.850 ops/s
Iteration  26: 647246.509 ops/s
Iteration  27: 651956.800 ops/s
Iteration  28: 651049.764 ops/s
Iteration  29: 650046.072 ops/s
Iteration  30: 651068.751 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableReplayTest._Benchmark.benchmark_connectConsumerThrows":
  648184.061 ±(99.9%) 1865.193 ops/s [Average]
  (min, avg, max) = (641796.064, 648184.061, 651980.017), stdev = 2791.733
  CI (99.9%): [646318.868, 650049.254] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score      Error  Units
ObservableReplayTest._Benchmark.benchmark_connectConsumerThrows  thrpt   30  648184.061 ± 1865.193  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReplayEagerTruncateTest._Benchmark.benchmark_connectConsumerThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReplayEagerTruncateTest._Benchmark.benchmark_connectConsumerThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 441957.109 ops/s
# Warmup Iteration   2: 559402.272 ops/s
# Warmup Iteration   3: 567367.581 ops/s
# Warmup Iteration   4: 618495.225 ops/s
# Warmup Iteration   5: 627767.632 ops/s
# Warmup Iteration   6: 623626.704 ops/s
# Warmup Iteration   7: 629517.015 ops/s
# Warmup Iteration   8: 626398.054 ops/s
# Warmup Iteration   9: 627891.567 ops/s
# Warmup Iteration  10: 627652.654 ops/s
# Warmup Iteration  11: 625491.342 ops/s
# Warmup Iteration  12: 625206.121 ops/s
# Warmup Iteration  13: 622893.165 ops/s
# Warmup Iteration  14: 623591.676 ops/s
# Warmup Iteration  15: 621481.297 ops/s
# Warmup Iteration  16: 622699.921 ops/s
# Warmup Iteration  17: 650187.223 ops/s
# Warmup Iteration  18: 654302.953 ops/s
# Warmup Iteration  19: 649799.033 ops/s
# Warmup Iteration  20: 654305.953 ops/s
# Warmup Iteration  21: 651997.622 ops/s
# Warmup Iteration  22: 653201.036 ops/s
# Warmup Iteration  23: 651137.496 ops/s
# Warmup Iteration  24: 651639.638 ops/s
# Warmup Iteration  25: 649602.829 ops/s
# Warmup Iteration  26: 648307.306 ops/s
# Warmup Iteration  27: 650735.259 ops/s
# Warmup Iteration  28: 654841.175 ops/s
# Warmup Iteration  29: 650369.497 ops/s
# Warmup Iteration  30: 650312.817 ops/s
Iteration   1: 651676.273 ops/s
Iteration   2: 656094.011 ops/s
Iteration   3: 647221.025 ops/s
Iteration   4: 651616.005 ops/s
Iteration   5: 651785.234 ops/s
Iteration   6: 650130.197 ops/s
Iteration   7: 651315.583 ops/s
Iteration   8: 646906.003 ops/s
Iteration   9: 649494.667 ops/s
Iteration  10: 653718.117 ops/s
Iteration  11: 649386.537 ops/s
Iteration  12: 650367.255 ops/s
Iteration  13: 647294.842 ops/s
Iteration  14: 648966.267 ops/s
Iteration  15: 649652.184 ops/s
Iteration  16: 650798.405 ops/s
Iteration  17: 650335.574 ops/s
Iteration  18: 652418.312 ops/s
Iteration  19: 650037.380 ops/s
Iteration  20: 650979.468 ops/s
Iteration  21: 652461.096 ops/s
Iteration  22: 650516.392 ops/s
Iteration  23: 645380.999 ops/s
Iteration  24: 649628.941 ops/s
Iteration  25: 654802.532 ops/s
Iteration  26: 647455.559 ops/s
Iteration  27: 651836.906 ops/s
Iteration  28: 652388.200 ops/s
Iteration  29: 649617.257 ops/s
Iteration  30: 654091.394 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableReplayEagerTruncateTest._Benchmark.benchmark_connectConsumerThrows":
  650612.421 ±(99.9%) 1605.644 ops/s [Average]
  (min, avg, max) = (645380.999, 650612.421, 656094.011), stdev = 2403.252
  CI (99.9%): [649006.777, 652218.065] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt       Score      Error  Units
ObservableReplayEagerTruncateTest._Benchmark.benchmark_connectConsumerThrows  thrpt   30  650612.421 ± 1605.644  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReplayTest._Benchmark.benchmark_take$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReplayTest._Benchmark.benchmark_take

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 340188.435 ops/s
# Warmup Iteration   2: 459047.753 ops/s
# Warmup Iteration   3: 449730.028 ops/s
# Warmup Iteration   4: 499517.099 ops/s
# Warmup Iteration   5: 498067.989 ops/s
# Warmup Iteration   6: 507188.232 ops/s
# Warmup Iteration   7: 505701.606 ops/s
# Warmup Iteration   8: 504180.188 ops/s
# Warmup Iteration   9: 506468.437 ops/s
# Warmup Iteration  10: 505823.197 ops/s
# Warmup Iteration  11: 500321.407 ops/s
# Warmup Iteration  12: 502884.681 ops/s
# Warmup Iteration  13: 507483.732 ops/s
# Warmup Iteration  14: 495851.980 ops/s
# Warmup Iteration  15: 496169.694 ops/s
# Warmup Iteration  16: 497638.413 ops/s
# Warmup Iteration  17: 495840.922 ops/s
# Warmup Iteration  18: 493304.002 ops/s
# Warmup Iteration  19: 490378.336 ops/s
# Warmup Iteration  20: 491869.639 ops/s
# Warmup Iteration  21: 495974.475 ops/s
# Warmup Iteration  22: 496776.733 ops/s
# Warmup Iteration  23: 497058.547 ops/s
# Warmup Iteration  24: 497424.216 ops/s
# Warmup Iteration  25: 489332.285 ops/s
# Warmup Iteration  26: 506694.599 ops/s
# Warmup Iteration  27: 484659.198 ops/s
# Warmup Iteration  28: 496460.302 ops/s
# Warmup Iteration  29: 492590.129 ops/s
# Warmup Iteration  30: 498752.244 ops/s
Iteration   1: 496160.608 ops/s
Iteration   2: 488902.538 ops/s
Iteration   3: 496460.183 ops/s
Iteration   4: 501506.966 ops/s
Iteration   5: 492824.033 ops/s
Iteration   6: 491701.252 ops/s
Iteration   7: 489921.525 ops/s
Iteration   8: 497133.973 ops/s
Iteration   9: 496634.376 ops/s
Iteration  10: 498051.080 ops/s
Iteration  11: 495865.111 ops/s
Iteration  12: 491013.677 ops/s
Iteration  13: 495617.117 ops/s
Iteration  14: 490491.524 ops/s
Iteration  15: 501459.919 ops/s
Iteration  16: 491344.477 ops/s
Iteration  17: 492664.596 ops/s
Iteration  18: 492801.109 ops/s
Iteration  19: 488615.941 ops/s
Iteration  20: 492159.386 ops/s
Iteration  21: 502569.669 ops/s
Iteration  22: 493617.567 ops/s
Iteration  23: 491183.610 ops/s
Iteration  24: 495568.267 ops/s
Iteration  25: 495394.691 ops/s
Iteration  26: 497230.230 ops/s
Iteration  27: 490396.967 ops/s
Iteration  28: 497853.817 ops/s
Iteration  29: 491934.975 ops/s
Iteration  30: 492848.335 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableReplayTest._Benchmark.benchmark_take":
  494330.917 ±(99.9%) 2486.419 ops/s [Average]
  (min, avg, max) = (488615.941, 494330.917, 502569.669), stdev = 3721.555
  CI (99.9%): [491844.498, 496817.336] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt       Score      Error  Units
ObservableReplayTest._Benchmark.benchmark_take  thrpt   30  494330.917 ± 2486.419  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsTest._Benchmark.benchmark_fused$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsTest._Benchmark.benchmark_fused

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3952073.894 ops/s
# Warmup Iteration   2: 6291410.245 ops/s
# Warmup Iteration   3: 6849726.194 ops/s
# Warmup Iteration   4: 6828430.640 ops/s
# Warmup Iteration   5: 6772647.309 ops/s
# Warmup Iteration   6: 6762984.352 ops/s
# Warmup Iteration   7: 6836989.523 ops/s
# Warmup Iteration   8: 6792184.094 ops/s
# Warmup Iteration   9: 6797955.459 ops/s
# Warmup Iteration  10: 6804050.301 ops/s
# Warmup Iteration  11: 6778564.777 ops/s
# Warmup Iteration  12: 6794824.161 ops/s
# Warmup Iteration  13: 6779777.940 ops/s
# Warmup Iteration  14: 6797823.315 ops/s
# Warmup Iteration  15: 6743281.244 ops/s
# Warmup Iteration  16: 6796133.270 ops/s
# Warmup Iteration  17: 6827921.595 ops/s
# Warmup Iteration  18: 6738595.903 ops/s
# Warmup Iteration  19: 6790690.893 ops/s
# Warmup Iteration  20: 6757616.747 ops/s
# Warmup Iteration  21: 6718945.879 ops/s
# Warmup Iteration  22: 6832358.247 ops/s
# Warmup Iteration  23: 6844138.203 ops/s
# Warmup Iteration  24: 6797045.723 ops/s
# Warmup Iteration  25: 6763014.046 ops/s
# Warmup Iteration  26: 6811141.324 ops/s
# Warmup Iteration  27: 6714610.174 ops/s
# Warmup Iteration  28: 6773485.276 ops/s
# Warmup Iteration  29: 6790079.756 ops/s
# Warmup Iteration  30: 6770969.464 ops/s
Iteration   1: 6760745.667 ops/s
Iteration   2: 6749093.780 ops/s
Iteration   3: 6720797.388 ops/s
Iteration   4: 6788350.188 ops/s
Iteration   5: 6778726.702 ops/s
Iteration   6: 6803291.798 ops/s
Iteration   7: 6771588.178 ops/s
Iteration   8: 6717873.432 ops/s
Iteration   9: 6796681.515 ops/s
Iteration  10: 6710984.757 ops/s
Iteration  11: 6762697.857 ops/s
Iteration  12: 6755067.190 ops/s
Iteration  13: 6808149.040 ops/s
Iteration  14: 6765205.944 ops/s
Iteration  15: 6797492.574 ops/s
Iteration  16: 6804202.146 ops/s
Iteration  17: 6755203.785 ops/s
Iteration  18: 6751981.207 ops/s
Iteration  19: 6776265.603 ops/s
Iteration  20: 6794517.158 ops/s
Iteration  21: 6781584.167 ops/s
Iteration  22: 6815948.445 ops/s
Iteration  23: 6771429.650 ops/s
Iteration  24: 6822191.134 ops/s
Iteration  25: 6739657.644 ops/s
Iteration  26: 6772902.514 ops/s
Iteration  27: 6770482.787 ops/s
Iteration  28: 6768960.114 ops/s
Iteration  29: 6749883.192 ops/s
Iteration  30: 6750231.472 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsTest._Benchmark.benchmark_fused":
  6770406.234 ±(99.9%) 18789.181 ops/s [Average]
  (min, avg, max) = (6710984.757, 6770406.234, 6822191.134), stdev = 28122.763
  CI (99.9%): [6751617.054, 6789195.415] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
FlowableIgnoreElementsTest._Benchmark.benchmark_fused  thrpt   30  6770406.234 ± 18789.181  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFromPubisherTest._Benchmark.benchmark_empty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFromPubisherTest._Benchmark.benchmark_empty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 6431870.348 ops/s
# Warmup Iteration   2: 10002378.668 ops/s
# Warmup Iteration   3: 10745092.309 ops/s
# Warmup Iteration   4: 10732468.266 ops/s
# Warmup Iteration   5: 10706863.095 ops/s
# Warmup Iteration   6: 10630775.700 ops/s
# Warmup Iteration   7: 10730402.947 ops/s
# Warmup Iteration   8: 10727993.399 ops/s
# Warmup Iteration   9: 10673345.818 ops/s
# Warmup Iteration  10: 10748287.062 ops/s
# Warmup Iteration  11: 10703322.274 ops/s
# Warmup Iteration  12: 10746050.605 ops/s
# Warmup Iteration  13: 10692441.004 ops/s
# Warmup Iteration  14: 10760812.319 ops/s
# Warmup Iteration  15: 10674303.961 ops/s
# Warmup Iteration  16: 10742450.675 ops/s
# Warmup Iteration  17: 10871224.525 ops/s
# Warmup Iteration  18: 10844684.402 ops/s
# Warmup Iteration  19: 10828645.064 ops/s
# Warmup Iteration  20: 10856888.305 ops/s
# Warmup Iteration  21: 10853268.523 ops/s
# Warmup Iteration  22: 10806438.063 ops/s
# Warmup Iteration  23: 10877390.828 ops/s
# Warmup Iteration  24: 10836313.593 ops/s
# Warmup Iteration  25: 10895751.112 ops/s
# Warmup Iteration  26: 10861930.222 ops/s
# Warmup Iteration  27: 10840783.221 ops/s
# Warmup Iteration  28: 10812046.443 ops/s
# Warmup Iteration  29: 10829965.340 ops/s
# Warmup Iteration  30: 10789156.290 ops/s
Iteration   1: 10945254.287 ops/s
Iteration   2: 10819649.011 ops/s
Iteration   3: 10880569.861 ops/s
Iteration   4: 10874464.577 ops/s
Iteration   5: 10823890.838 ops/s
Iteration   6: 10862389.739 ops/s
Iteration   7: 10832332.764 ops/s
Iteration   8: 10898403.556 ops/s
Iteration   9: 10872257.131 ops/s
Iteration  10: 10864234.761 ops/s
Iteration  11: 10808971.983 ops/s
Iteration  12: 10817529.859 ops/s
Iteration  13: 10872269.588 ops/s
Iteration  14: 10830416.367 ops/s
Iteration  15: 10976152.840 ops/s
Iteration  16: 10918355.332 ops/s
Iteration  17: 10851054.633 ops/s
Iteration  18: 10802493.741 ops/s
Iteration  19: 10923450.963 ops/s
Iteration  20: 10885529.039 ops/s
Iteration  21: 10939899.844 ops/s
Iteration  22: 10865836.890 ops/s
Iteration  23: 10870507.317 ops/s
Iteration  24: 10863136.680 ops/s
Iteration  25: 10897284.186 ops/s
Iteration  26: 10793614.687 ops/s
Iteration  27: 10889261.245 ops/s
Iteration  28: 10857088.006 ops/s
Iteration  29: 10932578.906 ops/s
Iteration  30: 10852460.186 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFromPubisherTest._Benchmark.benchmark_empty":
  10870711.294 ±(99.9%) 30064.949 ops/s [Average]
  (min, avg, max) = (10793614.687, 10870711.294, 10976152.840), stdev = 44999.804
  CI (99.9%): [10840646.345, 10900776.243] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt         Score       Error  Units
MaybeFromPubisherTest._Benchmark.benchmark_empty  thrpt   30  10870711.294 ± 30064.949  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleTest._Benchmark.benchmark_singleOrErrorOneElement$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleTest._Benchmark.benchmark_singleOrErrorOneElement

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 5361593.222 ops/s
# Warmup Iteration   2: 8240831.909 ops/s
# Warmup Iteration   3: 8849941.068 ops/s
# Warmup Iteration   4: 8807241.894 ops/s
# Warmup Iteration   5: 8880824.849 ops/s
# Warmup Iteration   6: 8872976.448 ops/s
# Warmup Iteration   7: 8829095.107 ops/s
# Warmup Iteration   8: 8850581.489 ops/s
# Warmup Iteration   9: 8763101.401 ops/s
# Warmup Iteration  10: 8733858.347 ops/s
# Warmup Iteration  11: 8787878.705 ops/s
# Warmup Iteration  12: 8823114.182 ops/s
# Warmup Iteration  13: 8774030.708 ops/s
# Warmup Iteration  14: 8854112.640 ops/s
# Warmup Iteration  15: 8799172.954 ops/s
# Warmup Iteration  16: 8793289.337 ops/s
# Warmup Iteration  17: 8854761.125 ops/s
# Warmup Iteration  18: 8903415.832 ops/s
# Warmup Iteration  19: 8839000.007 ops/s
# Warmup Iteration  20: 8871867.014 ops/s
# Warmup Iteration  21: 8856664.992 ops/s
# Warmup Iteration  22: 8883969.779 ops/s
# Warmup Iteration  23: 8805659.858 ops/s
# Warmup Iteration  24: 8844300.642 ops/s
# Warmup Iteration  25: 8806395.563 ops/s
# Warmup Iteration  26: 8873928.158 ops/s
# Warmup Iteration  27: 8900172.172 ops/s
# Warmup Iteration  28: 8923947.368 ops/s
# Warmup Iteration  29: 8886701.705 ops/s
# Warmup Iteration  30: 8870699.314 ops/s
Iteration   1: 8886816.531 ops/s
Iteration   2: 8898300.600 ops/s
Iteration   3: 8930613.835 ops/s
Iteration   4: 8914659.919 ops/s
Iteration   5: 8897212.121 ops/s
Iteration   6: 8846117.516 ops/s
Iteration   7: 8866277.757 ops/s
Iteration   8: 8834761.752 ops/s
Iteration   9: 8843789.595 ops/s
Iteration  10: 8821156.558 ops/s
Iteration  11: 8820607.933 ops/s
Iteration  12: 8856732.819 ops/s
Iteration  13: 8886835.932 ops/s
Iteration  14: 8942564.307 ops/s
Iteration  15: 8866123.351 ops/s
Iteration  16: 8885231.824 ops/s
Iteration  17: 8896893.518 ops/s
Iteration  18: 8872784.533 ops/s
Iteration  19: 8879675.876 ops/s
Iteration  20: 8849340.136 ops/s
Iteration  21: 8827379.634 ops/s
Iteration  22: 8805229.308 ops/s
Iteration  23: 8883117.005 ops/s
Iteration  24: 8884186.029 ops/s
Iteration  25: 8851773.921 ops/s
Iteration  26: 8840982.592 ops/s
Iteration  27: 8848343.738 ops/s
Iteration  28: 8925825.139 ops/s
Iteration  29: 8805932.458 ops/s
Iteration  30: 8884206.665 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleTest._Benchmark.benchmark_singleOrErrorOneElement":
  8868449.097 ±(99.9%) 24003.865 ops/s [Average]
  (min, avg, max) = (8805229.308, 8868449.097, 8942564.307), stdev = 35927.857
  CI (99.9%): [8844445.232, 8892452.961] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
FlowableSingleTest._Benchmark.benchmark_singleOrErrorOneElement  thrpt   30  8868449.097 ± 24003.865  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.subscribers.DeferredScalarSubscriberTest._Benchmark.benchmark_emptySource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.subscribers.DeferredScalarSubscriberTest._Benchmark.benchmark_emptySource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 4794122.444 ops/s
# Warmup Iteration   2: 6482541.998 ops/s
# Warmup Iteration   3: 7413929.614 ops/s
# Warmup Iteration   4: 7376700.608 ops/s
# Warmup Iteration   5: 7378590.754 ops/s
# Warmup Iteration   6: 7365054.469 ops/s
# Warmup Iteration   7: 7392088.668 ops/s
# Warmup Iteration   8: 7385949.420 ops/s
# Warmup Iteration   9: 7377022.711 ops/s
# Warmup Iteration  10: 7329602.011 ops/s
# Warmup Iteration  11: 7366920.956 ops/s
# Warmup Iteration  12: 7351903.920 ops/s
# Warmup Iteration  13: 7375392.793 ops/s
# Warmup Iteration  14: 7413467.633 ops/s
# Warmup Iteration  15: 7339138.961 ops/s
# Warmup Iteration  16: 7385790.367 ops/s
# Warmup Iteration  17: 7364478.778 ops/s
# Warmup Iteration  18: 7384392.215 ops/s
# Warmup Iteration  19: 7379591.535 ops/s
# Warmup Iteration  20: 7377214.466 ops/s
# Warmup Iteration  21: 7407744.812 ops/s
# Warmup Iteration  22: 7359192.710 ops/s
# Warmup Iteration  23: 7368811.873 ops/s
# Warmup Iteration  24: 7386398.742 ops/s
# Warmup Iteration  25: 7424332.503 ops/s
# Warmup Iteration  26: 7379534.949 ops/s
# Warmup Iteration  27: 7404031.384 ops/s
# Warmup Iteration  28: 7424900.401 ops/s
# Warmup Iteration  29: 7333221.843 ops/s
# Warmup Iteration  30: 7395181.287 ops/s
Iteration   1: 7320840.173 ops/s
Iteration   2: 7371014.376 ops/s
Iteration   3: 7400044.131 ops/s
Iteration   4: 7380764.403 ops/s
Iteration   5: 7359015.484 ops/s
Iteration   6: 7480754.275 ops/s
Iteration   7: 7315703.638 ops/s
Iteration   8: 7353573.114 ops/s
Iteration   9: 7393170.815 ops/s
Iteration  10: 7404579.692 ops/s
Iteration  11: 7393548.048 ops/s
Iteration  12: 7382244.893 ops/s
Iteration  13: 7340064.991 ops/s
Iteration  14: 7363981.027 ops/s
Iteration  15: 7360094.966 ops/s
Iteration  16: 7408230.473 ops/s
Iteration  17: 7409442.831 ops/s
Iteration  18: 7409994.696 ops/s
Iteration  19: 7410237.237 ops/s
Iteration  20: 7454658.275 ops/s
Iteration  21: 7368910.437 ops/s
Iteration  22: 7403775.680 ops/s
Iteration  23: 7387809.481 ops/s
Iteration  24: 7422380.273 ops/s
Iteration  25: 7368470.124 ops/s
Iteration  26: 7385649.946 ops/s
Iteration  27: 7402439.028 ops/s
Iteration  28: 7388465.413 ops/s
Iteration  29: 7401863.630 ops/s
Iteration  30: 7382822.943 ops/s


Result "io.reactivex.rxjava3.internal.subscribers.DeferredScalarSubscriberTest._Benchmark.benchmark_emptySource":
  7387484.816 ±(99.9%) 22796.786 ops/s [Average]
  (min, avg, max) = (7315703.638, 7387484.816, 7480754.275), stdev = 34121.159
  CI (99.9%): [7364688.030, 7410281.603] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
DeferredScalarSubscriberTest._Benchmark.benchmark_emptySource  thrpt   30  7387484.816 ± 22796.786  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtTest._Benchmark.benchmark_elementAtOrErrorInvalidIndex$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtTest._Benchmark.benchmark_elementAtOrErrorInvalidIndex

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 553355.340 ops/s
# Warmup Iteration   2: 722630.915 ops/s
# Warmup Iteration   3: 711604.187 ops/s
# Warmup Iteration   4: 770527.373 ops/s
# Warmup Iteration   5: 766513.331 ops/s
# Warmup Iteration   6: 766402.530 ops/s
# Warmup Iteration   7: 772258.080 ops/s
# Warmup Iteration   8: 767389.008 ops/s
# Warmup Iteration   9: 770978.650 ops/s
# Warmup Iteration  10: 764156.357 ops/s
# Warmup Iteration  11: 765038.445 ops/s
# Warmup Iteration  12: 762159.814 ops/s
# Warmup Iteration  13: 762775.252 ops/s
# Warmup Iteration  14: 756254.483 ops/s
# Warmup Iteration  15: 761431.254 ops/s
# Warmup Iteration  16: 763091.571 ops/s
# Warmup Iteration  17: 792798.601 ops/s
# Warmup Iteration  18: 803715.273 ops/s
# Warmup Iteration  19: 804087.808 ops/s
# Warmup Iteration  20: 800232.635 ops/s
# Warmup Iteration  21: 801011.747 ops/s
# Warmup Iteration  22: 803090.644 ops/s
# Warmup Iteration  23: 799120.179 ops/s
# Warmup Iteration  24: 800970.293 ops/s
# Warmup Iteration  25: 799658.190 ops/s
# Warmup Iteration  26: 800728.580 ops/s
# Warmup Iteration  27: 802359.448 ops/s
# Warmup Iteration  28: 799325.651 ops/s
# Warmup Iteration  29: 799824.658 ops/s
# Warmup Iteration  30: 801262.013 ops/s
Iteration   1: 800566.089 ops/s
Iteration   2: 798090.279 ops/s
Iteration   3: 803241.887 ops/s
Iteration   4: 800574.045 ops/s
Iteration   5: 800591.660 ops/s
Iteration   6: 801841.983 ops/s
Iteration   7: 797858.365 ops/s
Iteration   8: 796599.405 ops/s
Iteration   9: 800090.012 ops/s
Iteration  10: 798477.975 ops/s
Iteration  11: 803347.851 ops/s
Iteration  12: 797401.728 ops/s
Iteration  13: 799427.920 ops/s
Iteration  14: 800123.110 ops/s
Iteration  15: 802885.067 ops/s
Iteration  16: 803772.273 ops/s
Iteration  17: 797348.734 ops/s
Iteration  18: 797621.708 ops/s
Iteration  19: 801838.091 ops/s
Iteration  20: 800580.272 ops/s
Iteration  21: 798129.129 ops/s
Iteration  22: 800318.892 ops/s
Iteration  23: 796489.294 ops/s
Iteration  24: 803582.737 ops/s
Iteration  25: 802864.200 ops/s
Iteration  26: 801027.619 ops/s
Iteration  27: 799234.116 ops/s
Iteration  28: 798263.354 ops/s
Iteration  29: 802268.056 ops/s
Iteration  30: 800825.412 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtTest._Benchmark.benchmark_elementAtOrErrorInvalidIndex":
  800176.042 ±(99.9%) 1472.160 ops/s [Average]
  (min, avg, max) = (796489.294, 800176.042, 803772.273), stdev = 2203.460
  CI (99.9%): [798703.882, 801648.202] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score      Error  Units
FlowableElementAtTest._Benchmark.benchmark_elementAtOrErrorInvalidIndex  thrpt   30  800176.042 ± 1472.160  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNextTest._Benchmark.benchmark_consumerThrowsConditional2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNextTest._Benchmark.benchmark_consumerThrowsConditional2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 328705.504 ops/s
# Warmup Iteration   2: 414064.224 ops/s
# Warmup Iteration   3: 490886.455 ops/s
# Warmup Iteration   4: 450085.476 ops/s
# Warmup Iteration   5: 490351.829 ops/s
# Warmup Iteration   6: 490084.681 ops/s
# Warmup Iteration   7: 491131.856 ops/s
# Warmup Iteration   8: 493820.827 ops/s
# Warmup Iteration   9: 489407.378 ops/s
# Warmup Iteration  10: 489803.379 ops/s
# Warmup Iteration  11: 491570.395 ops/s
# Warmup Iteration  12: 492144.351 ops/s
# Warmup Iteration  13: 491946.703 ops/s
# Warmup Iteration  14: 489907.891 ops/s
# Warmup Iteration  15: 489397.325 ops/s
# Warmup Iteration  16: 488555.590 ops/s
# Warmup Iteration  17: 495189.918 ops/s
# Warmup Iteration  18: 493128.921 ops/s
# Warmup Iteration  19: 497454.318 ops/s
# Warmup Iteration  20: 496567.358 ops/s
# Warmup Iteration  21: 496620.924 ops/s
# Warmup Iteration  22: 497347.068 ops/s
# Warmup Iteration  23: 494729.626 ops/s
# Warmup Iteration  24: 494769.850 ops/s
# Warmup Iteration  25: 494805.833 ops/s
# Warmup Iteration  26: 497693.201 ops/s
# Warmup Iteration  27: 491582.251 ops/s
# Warmup Iteration  28: 494481.118 ops/s
# Warmup Iteration  29: 494036.981 ops/s
# Warmup Iteration  30: 494364.543 ops/s
Iteration   1: 494914.032 ops/s
Iteration   2: 495066.813 ops/s
Iteration   3: 492653.462 ops/s
Iteration   4: 495049.228 ops/s
Iteration   5: 493557.231 ops/s
Iteration   6: 488937.936 ops/s
Iteration   7: 490012.491 ops/s
Iteration   8: 494350.252 ops/s
Iteration   9: 493082.187 ops/s
Iteration  10: 496448.350 ops/s
Iteration  11: 497164.392 ops/s
Iteration  12: 495371.887 ops/s
Iteration  13: 491994.316 ops/s
Iteration  14: 492732.893 ops/s
Iteration  15: 495161.464 ops/s
Iteration  16: 494509.474 ops/s
Iteration  17: 495725.117 ops/s
Iteration  18: 492837.686 ops/s
Iteration  19: 494373.329 ops/s
Iteration  20: 495329.289 ops/s
Iteration  21: 494318.064 ops/s
Iteration  22: 494882.403 ops/s
Iteration  23: 491768.631 ops/s
Iteration  24: 494023.389 ops/s
Iteration  25: 494499.015 ops/s
Iteration  26: 494196.426 ops/s
Iteration  27: 494553.684 ops/s
Iteration  28: 493099.649 ops/s
Iteration  29: 491337.737 ops/s
Iteration  30: 495610.654 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNextTest._Benchmark.benchmark_consumerThrowsConditional2":
  493918.716 ±(99.9%) 1213.569 ops/s [Average]
  (min, avg, max) = (488937.936, 493918.716, 497164.392), stdev = 1816.413
  CI (99.9%): [492705.147, 495132.285] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score      Error  Units
FlowableDoAfterNextTest._Benchmark.benchmark_consumerThrowsConditional2  thrpt   30  493918.716 ± 1213.569  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableAnyTest._Benchmark.benchmark_backpressureIfOneRequestedOneShouldBeDelivered$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableAnyTest._Benchmark.benchmark_backpressureIfOneRequestedOneShouldBeDelivered

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 4950034.299 ops/s
# Warmup Iteration   2: 7198123.918 ops/s
# Warmup Iteration   3: 8430453.047 ops/s
# Warmup Iteration   4: 8369844.290 ops/s
# Warmup Iteration   5: 8443532.822 ops/s
# Warmup Iteration   6: 8452508.111 ops/s
# Warmup Iteration   7: 8410381.305 ops/s
# Warmup Iteration   8: 8446991.052 ops/s
# Warmup Iteration   9: 8389384.330 ops/s
# Warmup Iteration  10: 8382664.409 ops/s
# Warmup Iteration  11: 8433315.987 ops/s
# Warmup Iteration  12: 8420007.381 ops/s
# Warmup Iteration  13: 8421440.498 ops/s
# Warmup Iteration  14: 8410996.724 ops/s
# Warmup Iteration  15: 8389984.115 ops/s
# Warmup Iteration  16: 8432784.667 ops/s
# Warmup Iteration  17: 8475563.510 ops/s
# Warmup Iteration  18: 8466723.522 ops/s
# Warmup Iteration  19: 8404394.780 ops/s
# Warmup Iteration  20: 8430063.686 ops/s
# Warmup Iteration  21: 8444341.735 ops/s
# Warmup Iteration  22: 8390933.321 ops/s
# Warmup Iteration  23: 8435826.706 ops/s
# Warmup Iteration  24: 8458481.129 ops/s
# Warmup Iteration  25: 8420636.384 ops/s
# Warmup Iteration  26: 8468377.424 ops/s
# Warmup Iteration  27: 8485961.547 ops/s
# Warmup Iteration  28: 8449919.248 ops/s
# Warmup Iteration  29: 8450854.204 ops/s
# Warmup Iteration  30: 8469124.777 ops/s
Iteration   1: 8462888.844 ops/s
Iteration   2: 8461000.689 ops/s
Iteration   3: 8508240.496 ops/s
Iteration   4: 8471317.222 ops/s
Iteration   5: 8414971.986 ops/s
Iteration   6: 8478010.942 ops/s
Iteration   7: 8457379.546 ops/s
Iteration   8: 8467573.615 ops/s
Iteration   9: 8467545.304 ops/s
Iteration  10: 8459391.415 ops/s
Iteration  11: 8472157.639 ops/s
Iteration  12: 8455234.293 ops/s
Iteration  13: 8489847.027 ops/s
Iteration  14: 8408452.414 ops/s
Iteration  15: 8418179.198 ops/s
Iteration  16: 8430141.740 ops/s
Iteration  17: 8408797.135 ops/s
Iteration  18: 8373944.671 ops/s
Iteration  19: 8488940.917 ops/s
Iteration  20: 8464050.063 ops/s
Iteration  21: 8438934.202 ops/s
Iteration  22: 8479695.735 ops/s
Iteration  23: 8440830.011 ops/s
Iteration  24: 8441718.040 ops/s
Iteration  25: 8417901.160 ops/s
Iteration  26: 8401340.677 ops/s
Iteration  27: 8424146.784 ops/s
Iteration  28: 8480499.961 ops/s
Iteration  29: 8433863.202 ops/s
Iteration  30: 8429089.332 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableAnyTest._Benchmark.benchmark_backpressureIfOneRequestedOneShouldBeDelivered":
  8448202.809 ±(99.9%) 20794.935 ops/s [Average]
  (min, avg, max) = (8373944.671, 8448202.809, 8508240.496), stdev = 31124.883
  CI (99.9%): [8427407.873, 8468997.744] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             Mode  Cnt        Score       Error  Units
FlowableAnyTest._Benchmark.benchmark_backpressureIfOneRequestedOneShouldBeDelivered  thrpt   30  8448202.809 ± 20794.935  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableConcatTest._Benchmark.benchmark_unboundedIn$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableConcatTest._Benchmark.benchmark_unboundedIn

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1814897.893 ops/s
# Warmup Iteration   2: 2672857.636 ops/s
# Warmup Iteration   3: 2973020.160 ops/s
# Warmup Iteration   4: 2971199.858 ops/s
# Warmup Iteration   5: 2936673.686 ops/s
# Warmup Iteration   6: 2985341.130 ops/s
# Warmup Iteration   7: 2985812.050 ops/s
# Warmup Iteration   8: 2974290.703 ops/s
# Warmup Iteration   9: 2969225.700 ops/s
# Warmup Iteration  10: 2983052.453 ops/s
# Warmup Iteration  11: 3012622.663 ops/s
# Warmup Iteration  12: 2988553.306 ops/s
# Warmup Iteration  13: 2970565.455 ops/s
# Warmup Iteration  14: 2977032.029 ops/s
# Warmup Iteration  15: 2982120.899 ops/s
# Warmup Iteration  16: 2988879.269 ops/s
# Warmup Iteration  17: 2964959.790 ops/s
# Warmup Iteration  18: 2986389.774 ops/s
# Warmup Iteration  19: 2980946.483 ops/s
# Warmup Iteration  20: 2972232.189 ops/s
# Warmup Iteration  21: 2994345.947 ops/s
# Warmup Iteration  22: 2985016.492 ops/s
# Warmup Iteration  23: 3004988.556 ops/s
# Warmup Iteration  24: 2993511.360 ops/s
# Warmup Iteration  25: 2970837.360 ops/s
# Warmup Iteration  26: 3004862.953 ops/s
# Warmup Iteration  27: 2996026.261 ops/s
# Warmup Iteration  28: 3002961.549 ops/s
# Warmup Iteration  29: 2998508.550 ops/s
# Warmup Iteration  30: 2993203.985 ops/s
Iteration   1: 2995499.684 ops/s
Iteration   2: 2982049.219 ops/s
Iteration   3: 2885716.400 ops/s
Iteration   4: 2960082.361 ops/s
Iteration   5: 2991925.480 ops/s
Iteration   6: 2962203.265 ops/s
Iteration   7: 3000631.481 ops/s
Iteration   8: 2976798.740 ops/s
Iteration   9: 2987312.907 ops/s
Iteration  10: 2990837.301 ops/s
Iteration  11: 2972991.877 ops/s
Iteration  12: 2995258.579 ops/s
Iteration  13: 2997378.133 ops/s
Iteration  14: 2983331.782 ops/s
Iteration  15: 2984824.389 ops/s
Iteration  16: 2998510.642 ops/s
Iteration  17: 2984370.746 ops/s
Iteration  18: 3010036.735 ops/s
Iteration  19: 2990918.197 ops/s
Iteration  20: 2999533.021 ops/s
Iteration  21: 2998779.233 ops/s
Iteration  22: 2978558.620 ops/s
Iteration  23: 2981363.905 ops/s
Iteration  24: 3006426.741 ops/s
Iteration  25: 2981940.909 ops/s
Iteration  26: 2994696.572 ops/s
Iteration  27: 2985239.479 ops/s
Iteration  28: 2987462.628 ops/s
Iteration  29: 3006889.027 ops/s
Iteration  30: 2993342.087 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatTest._Benchmark.benchmark_unboundedIn":
  2985497.005 ±(99.9%) 14852.516 ops/s [Average]
  (min, avg, max) = (2885716.400, 2985497.005, 3010036.735), stdev = 22230.549
  CI (99.9%): [2970644.488, 3000349.521] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
CompletableConcatTest._Benchmark.benchmark_unboundedIn  thrpt   30  2985497.005 ± 14852.516  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableConcatTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableConcatTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 6334419.195 ops/s
# Warmup Iteration   2: 8350957.624 ops/s
# Warmup Iteration   3: 9498669.028 ops/s
# Warmup Iteration   4: 9450904.559 ops/s
# Warmup Iteration   5: 9400761.481 ops/s
# Warmup Iteration   6: 9472663.729 ops/s
# Warmup Iteration   7: 9467499.015 ops/s
# Warmup Iteration   8: 9521165.699 ops/s
# Warmup Iteration   9: 9515296.127 ops/s
# Warmup Iteration  10: 9470018.076 ops/s
# Warmup Iteration  11: 9425381.019 ops/s
# Warmup Iteration  12: 9404542.142 ops/s
# Warmup Iteration  13: 9423055.771 ops/s
# Warmup Iteration  14: 9464197.292 ops/s
# Warmup Iteration  15: 9536997.069 ops/s
# Warmup Iteration  16: 9452384.263 ops/s
# Warmup Iteration  17: 9568529.746 ops/s
# Warmup Iteration  18: 9567261.116 ops/s
# Warmup Iteration  19: 9510765.322 ops/s
# Warmup Iteration  20: 9510503.052 ops/s
# Warmup Iteration  21: 9465111.892 ops/s
# Warmup Iteration  22: 9551636.152 ops/s
# Warmup Iteration  23: 9501983.743 ops/s
# Warmup Iteration  24: 9441722.935 ops/s
# Warmup Iteration  25: 9510684.356 ops/s
# Warmup Iteration  26: 9492774.460 ops/s
# Warmup Iteration  27: 9510030.252 ops/s
# Warmup Iteration  28: 9549220.302 ops/s
# Warmup Iteration  29: 9507119.072 ops/s
# Warmup Iteration  30: 9563373.048 ops/s
Iteration   1: 9479877.556 ops/s
Iteration   2: 9523772.993 ops/s
Iteration   3: 9511247.742 ops/s
Iteration   4: 9460670.414 ops/s
Iteration   5: 9556735.637 ops/s
Iteration   6: 9504895.518 ops/s
Iteration   7: 9518509.179 ops/s
Iteration   8: 9486660.461 ops/s
Iteration   9: 9525262.002 ops/s
Iteration  10: 9510940.493 ops/s
Iteration  11: 9562812.863 ops/s
Iteration  12: 9510834.080 ops/s
Iteration  13: 9524605.367 ops/s
Iteration  14: 9499786.826 ops/s
Iteration  15: 9441602.119 ops/s
Iteration  16: 9505166.678 ops/s
Iteration  17: 9520910.471 ops/s
Iteration  18: 9543532.404 ops/s
Iteration  19: 9522278.780 ops/s
Iteration  20: 9518506.854 ops/s
Iteration  21: 9496800.705 ops/s
Iteration  22: 9470120.864 ops/s
Iteration  23: 9521810.625 ops/s
Iteration  24: 9543694.375 ops/s
Iteration  25: 9434569.811 ops/s
Iteration  26: 9476275.289 ops/s
Iteration  27: 9553338.558 ops/s
Iteration  28: 9517289.008 ops/s
Iteration  29: 9459608.099 ops/s
Iteration  30: 9587520.571 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatTest._Benchmark.benchmark_dispose":
  9509654.545 ±(99.9%) 23608.973 ops/s [Average]
  (min, avg, max) = (9434569.811, 9509654.545, 9587520.571), stdev = 35336.802
  CI (99.9%): [9486045.572, 9533263.518] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score       Error  Units
CompletableConcatTest._Benchmark.benchmark_dispose  thrpt   30  9509654.545 ± 23608.973  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilTest._Benchmark.benchmark_untilFirstPublisher$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilTest._Benchmark.benchmark_untilFirstPublisher

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3493364.282 ops/s
# Warmup Iteration   2: 5688583.769 ops/s
# Warmup Iteration   3: 6228807.488 ops/s
# Warmup Iteration   4: 6218889.830 ops/s
# Warmup Iteration   5: 6224936.662 ops/s
# Warmup Iteration   6: 6234119.158 ops/s
# Warmup Iteration   7: 6197684.360 ops/s
# Warmup Iteration   8: 6241683.579 ops/s
# Warmup Iteration   9: 6171407.599 ops/s
# Warmup Iteration  10: 6212712.069 ops/s
# Warmup Iteration  11: 6206880.820 ops/s
# Warmup Iteration  12: 6148137.366 ops/s
# Warmup Iteration  13: 6229349.058 ops/s
# Warmup Iteration  14: 6208388.706 ops/s
# Warmup Iteration  15: 6188568.088 ops/s
# Warmup Iteration  16: 6230965.902 ops/s
# Warmup Iteration  17: 6222095.739 ops/s
# Warmup Iteration  18: 6212265.488 ops/s
# Warmup Iteration  19: 6194559.729 ops/s
# Warmup Iteration  20: 6157969.278 ops/s
# Warmup Iteration  21: 6167470.900 ops/s
# Warmup Iteration  22: 6236138.764 ops/s
# Warmup Iteration  23: 6208468.405 ops/s
# Warmup Iteration  24: 6191850.302 ops/s
# Warmup Iteration  25: 6169798.965 ops/s
# Warmup Iteration  26: 6156653.295 ops/s
# Warmup Iteration  27: 6196457.077 ops/s
# Warmup Iteration  28: 6208743.946 ops/s
# Warmup Iteration  29: 6217138.899 ops/s
# Warmup Iteration  30: 6231343.294 ops/s
Iteration   1: 6166932.450 ops/s
Iteration   2: 6215091.780 ops/s
Iteration   3: 6240794.047 ops/s
Iteration   4: 6232402.020 ops/s
Iteration   5: 6157854.715 ops/s
Iteration   6: 6160667.879 ops/s
Iteration   7: 6168788.706 ops/s
Iteration   8: 6193860.561 ops/s
Iteration   9: 6172032.058 ops/s
Iteration  10: 6175750.241 ops/s
Iteration  11: 6172772.371 ops/s
Iteration  12: 6162392.478 ops/s
Iteration  13: 6196577.221 ops/s
Iteration  14: 6199126.272 ops/s
Iteration  15: 6187000.287 ops/s
Iteration  16: 6201962.212 ops/s
Iteration  17: 6161206.608 ops/s
Iteration  18: 6179336.387 ops/s
Iteration  19: 6215234.140 ops/s
Iteration  20: 6139249.599 ops/s
Iteration  21: 6186822.701 ops/s
Iteration  22: 6151656.092 ops/s
Iteration  23: 6201314.490 ops/s
Iteration  24: 6212585.052 ops/s
Iteration  25: 6212026.190 ops/s
Iteration  26: 6166293.933 ops/s
Iteration  27: 6205046.767 ops/s
Iteration  28: 6183970.010 ops/s
Iteration  29: 6211480.114 ops/s
Iteration  30: 6165756.385 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilTest._Benchmark.benchmark_untilFirstPublisher":
  6186532.792 ±(99.9%) 16660.697 ops/s [Average]
  (min, avg, max) = (6139249.599, 6186532.792, 6240794.047), stdev = 24936.949
  CI (99.9%): [6169872.095, 6203193.489] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
MaybeTakeUntilTest._Benchmark.benchmark_untilFirstPublisher  thrpt   30  6186532.792 ± 16660.697  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleMergeTest._Benchmark.benchmark_merge2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleMergeTest._Benchmark.benchmark_merge2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1289937.537 ops/s
# Warmup Iteration   2: 1709113.576 ops/s
# Warmup Iteration   3: 2115052.479 ops/s
# Warmup Iteration   4: 2129092.145 ops/s
# Warmup Iteration   5: 2229969.445 ops/s
# Warmup Iteration   6: 2192479.383 ops/s
# Warmup Iteration   7: 2226309.485 ops/s
# Warmup Iteration   8: 2206959.697 ops/s
# Warmup Iteration   9: 2179724.258 ops/s
# Warmup Iteration  10: 2198296.610 ops/s
# Warmup Iteration  11: 2195883.659 ops/s
# Warmup Iteration  12: 2202542.775 ops/s
# Warmup Iteration  13: 2211002.938 ops/s
# Warmup Iteration  14: 2173834.755 ops/s
# Warmup Iteration  15: 2196289.150 ops/s
# Warmup Iteration  16: 2218625.917 ops/s
# Warmup Iteration  17: 2183592.990 ops/s
# Warmup Iteration  18: 2205986.120 ops/s
# Warmup Iteration  19: 2185127.333 ops/s
# Warmup Iteration  20: 2209789.078 ops/s
# Warmup Iteration  21: 2209573.019 ops/s
# Warmup Iteration  22: 2213758.897 ops/s
# Warmup Iteration  23: 2209931.563 ops/s
# Warmup Iteration  24: 2181116.685 ops/s
# Warmup Iteration  25: 2211425.770 ops/s
# Warmup Iteration  26: 2220365.395 ops/s
# Warmup Iteration  27: 2219532.959 ops/s
# Warmup Iteration  28: 2204840.468 ops/s
# Warmup Iteration  29: 2197204.121 ops/s
# Warmup Iteration  30: 2198259.758 ops/s
Iteration   1: 2224088.202 ops/s
Iteration   2: 2188207.322 ops/s
Iteration   3: 2215178.569 ops/s
Iteration   4: 2202659.579 ops/s
Iteration   5: 2186595.492 ops/s
Iteration   6: 2204870.439 ops/s
Iteration   7: 2200539.715 ops/s
Iteration   8: 2200993.221 ops/s
Iteration   9: 2199858.577 ops/s
Iteration  10: 2209091.645 ops/s
Iteration  11: 2224139.935 ops/s
Iteration  12: 2195224.595 ops/s
Iteration  13: 2193490.215 ops/s
Iteration  14: 2197558.083 ops/s
Iteration  15: 2203093.166 ops/s
Iteration  16: 2197997.308 ops/s
Iteration  17: 2193000.382 ops/s
Iteration  18: 2206435.333 ops/s
Iteration  19: 2198600.793 ops/s
Iteration  20: 2190763.101 ops/s
Iteration  21: 2217933.102 ops/s
Iteration  22: 2213995.729 ops/s
Iteration  23: 2200133.086 ops/s
Iteration  24: 2221205.443 ops/s
Iteration  25: 2204028.451 ops/s
Iteration  26: 2204158.601 ops/s
Iteration  27: 2194706.860 ops/s
Iteration  28: 2200635.778 ops/s
Iteration  29: 2180637.635 ops/s
Iteration  30: 2189003.186 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleMergeTest._Benchmark.benchmark_merge2":
  2201960.785 ±(99.9%) 7338.631 ops/s [Average]
  (min, avg, max) = (2180637.635, 2201960.785, 2224139.935), stdev = 10984.118
  CI (99.9%): [2194622.154, 2209299.416] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     Mode  Cnt        Score      Error  Units
SingleMergeTest._Benchmark.benchmark_merge2  thrpt   30  2201960.785 ± 7338.631  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapPublisherTest._Benchmark.benchmark_mapperCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapPublisherTest._Benchmark.benchmark_mapperCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 581693.254 ops/s
# Warmup Iteration   2: 714926.624 ops/s
# Warmup Iteration   3: 729555.180 ops/s
# Warmup Iteration   4: 790821.202 ops/s
# Warmup Iteration   5: 788738.004 ops/s
# Warmup Iteration   6: 790803.591 ops/s
# Warmup Iteration   7: 788598.162 ops/s
# Warmup Iteration   8: 790430.445 ops/s
# Warmup Iteration   9: 796216.706 ops/s
# Warmup Iteration  10: 793790.003 ops/s
# Warmup Iteration  11: 791549.371 ops/s
# Warmup Iteration  12: 791895.390 ops/s
# Warmup Iteration  13: 790051.754 ops/s
# Warmup Iteration  14: 789536.341 ops/s
# Warmup Iteration  15: 783464.318 ops/s
# Warmup Iteration  16: 780826.806 ops/s
# Warmup Iteration  17: 825526.236 ops/s
# Warmup Iteration  18: 825651.323 ops/s
# Warmup Iteration  19: 821963.669 ops/s
# Warmup Iteration  20: 819106.298 ops/s
# Warmup Iteration  21: 824176.857 ops/s
# Warmup Iteration  22: 826885.075 ops/s
# Warmup Iteration  23: 825650.825 ops/s
# Warmup Iteration  24: 822280.908 ops/s
# Warmup Iteration  25: 828556.744 ops/s
# Warmup Iteration  26: 830387.585 ops/s
# Warmup Iteration  27: 822965.055 ops/s
# Warmup Iteration  28: 823731.946 ops/s
# Warmup Iteration  29: 822796.601 ops/s
# Warmup Iteration  30: 826280.096 ops/s
Iteration   1: 823745.279 ops/s
Iteration   2: 824214.077 ops/s
Iteration   3: 826806.389 ops/s
Iteration   4: 829080.319 ops/s
Iteration   5: 824481.304 ops/s
Iteration   6: 827986.847 ops/s
Iteration   7: 828523.476 ops/s
Iteration   8: 826778.634 ops/s
Iteration   9: 826372.302 ops/s
Iteration  10: 827888.847 ops/s
Iteration  11: 825110.644 ops/s
Iteration  12: 826408.487 ops/s
Iteration  13: 825267.673 ops/s
Iteration  14: 824348.283 ops/s
Iteration  15: 824727.196 ops/s
Iteration  16: 823844.484 ops/s
Iteration  17: 828385.096 ops/s
Iteration  18: 823057.917 ops/s
Iteration  19: 823644.626 ops/s
Iteration  20: 821885.092 ops/s
Iteration  21: 821923.750 ops/s
Iteration  22: 819765.077 ops/s
Iteration  23: 827147.579 ops/s
Iteration  24: 823068.984 ops/s
Iteration  25: 823818.811 ops/s
Iteration  26: 833014.827 ops/s
Iteration  27: 823798.457 ops/s
Iteration  28: 827697.950 ops/s
Iteration  29: 827046.801 ops/s
Iteration  30: 830223.834 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapPublisherTest._Benchmark.benchmark_mapperCrash":
  825668.768 ±(99.9%) 1862.627 ops/s [Average]
  (min, avg, max) = (819765.077, 825668.768, 833014.827), stdev = 2787.893
  CI (99.9%): [823806.141, 827531.395] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score      Error  Units
MaybeFlatMapPublisherTest._Benchmark.benchmark_mapperCrash  thrpt   30  825668.768 ± 1862.627  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableToSortedListTest._Benchmark.benchmark_backpressureHonoredFlowable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableToSortedListTest._Benchmark.benchmark_backpressureHonoredFlowable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1134975.407 ops/s
# Warmup Iteration   2: 2096572.084 ops/s
# Warmup Iteration   3: 2612684.110 ops/s
# Warmup Iteration   4: 2623710.524 ops/s
# Warmup Iteration   5: 2617980.206 ops/s
# Warmup Iteration   6: 2614286.527 ops/s
# Warmup Iteration   7: 2598993.967 ops/s
# Warmup Iteration   8: 2616648.397 ops/s
# Warmup Iteration   9: 2618395.588 ops/s
# Warmup Iteration  10: 2607693.431 ops/s
# Warmup Iteration  11: 2634072.785 ops/s
# Warmup Iteration  12: 2634853.400 ops/s
# Warmup Iteration  13: 2634238.691 ops/s
# Warmup Iteration  14: 2615487.211 ops/s
# Warmup Iteration  15: 2608795.876 ops/s
# Warmup Iteration  16: 2620106.128 ops/s
# Warmup Iteration  17: 2620901.888 ops/s
# Warmup Iteration  18: 2621578.948 ops/s
# Warmup Iteration  19: 2611427.453 ops/s
# Warmup Iteration  20: 2611642.631 ops/s
# Warmup Iteration  21: 2602966.810 ops/s
# Warmup Iteration  22: 2618608.635 ops/s
# Warmup Iteration  23: 2603927.627 ops/s
# Warmup Iteration  24: 2612186.351 ops/s
# Warmup Iteration  25: 2612893.345 ops/s
# Warmup Iteration  26: 2624850.712 ops/s
# Warmup Iteration  27: 2608985.258 ops/s
# Warmup Iteration  28: 2614870.537 ops/s
# Warmup Iteration  29: 2613237.798 ops/s
# Warmup Iteration  30: 2615626.426 ops/s
Iteration   1: 2609411.441 ops/s
Iteration   2: 2604720.916 ops/s
Iteration   3: 2609663.339 ops/s
Iteration   4: 2608046.552 ops/s
Iteration   5: 2606263.825 ops/s
Iteration   6: 2613580.890 ops/s
Iteration   7: 2616573.728 ops/s
Iteration   8: 2610594.539 ops/s
Iteration   9: 2615878.581 ops/s
Iteration  10: 2613189.206 ops/s
Iteration  11: 2606418.372 ops/s
Iteration  12: 2614647.697 ops/s
Iteration  13: 2621453.172 ops/s
Iteration  14: 2594678.628 ops/s
Iteration  15: 2618791.689 ops/s
Iteration  16: 2621739.393 ops/s
Iteration  17: 2612158.636 ops/s
Iteration  18: 2614549.900 ops/s
Iteration  19: 2618712.832 ops/s
Iteration  20: 2606228.538 ops/s
Iteration  21: 2601673.662 ops/s
Iteration  22: 2616194.074 ops/s
Iteration  23: 2612689.075 ops/s
Iteration  24: 2607526.656 ops/s
Iteration  25: 2602727.970 ops/s
Iteration  26: 2614084.903 ops/s
Iteration  27: 2602140.870 ops/s
Iteration  28: 2608664.141 ops/s
Iteration  29: 2599552.671 ops/s
Iteration  30: 2603629.322 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableToSortedListTest._Benchmark.benchmark_backpressureHonoredFlowable":
  2610206.174 ±(99.9%) 4440.081 ops/s [Average]
  (min, avg, max) = (2594678.628, 2610206.174, 2621739.393), stdev = 6645.704
  CI (99.9%): [2605766.093, 2614646.255] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score      Error  Units
FlowableToSortedListTest._Benchmark.benchmark_backpressureHonoredFlowable  thrpt   30  2610206.174 ± 4440.081  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleMergeTest._Benchmark.benchmark_merge3$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleMergeTest._Benchmark.benchmark_merge3

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1051176.142 ops/s
# Warmup Iteration   2: 1511974.920 ops/s
# Warmup Iteration   3: 1570299.168 ops/s
# Warmup Iteration   4: 1711371.182 ops/s
# Warmup Iteration   5: 1804649.859 ops/s
# Warmup Iteration   6: 1859743.933 ops/s
# Warmup Iteration   7: 1827861.634 ops/s
# Warmup Iteration   8: 1831262.973 ops/s
# Warmup Iteration   9: 1820317.341 ops/s
# Warmup Iteration  10: 1809192.300 ops/s
# Warmup Iteration  11: 1822002.725 ops/s
# Warmup Iteration  12: 1827293.664 ops/s
# Warmup Iteration  13: 1813370.008 ops/s
# Warmup Iteration  14: 1822994.665 ops/s
# Warmup Iteration  15: 1817140.398 ops/s
# Warmup Iteration  16: 1807441.858 ops/s
# Warmup Iteration  17: 1825919.355 ops/s
# Warmup Iteration  18: 1803388.165 ops/s
# Warmup Iteration  19: 1828471.870 ops/s
# Warmup Iteration  20: 1841064.944 ops/s
# Warmup Iteration  21: 1838643.374 ops/s
# Warmup Iteration  22: 1828212.574 ops/s
# Warmup Iteration  23: 1818195.244 ops/s
# Warmup Iteration  24: 1830091.612 ops/s
# Warmup Iteration  25: 1825287.605 ops/s
# Warmup Iteration  26: 1804384.691 ops/s
# Warmup Iteration  27: 1839930.015 ops/s
# Warmup Iteration  28: 1823008.914 ops/s
# Warmup Iteration  29: 1822533.941 ops/s
# Warmup Iteration  30: 1832619.536 ops/s
Iteration   1: 1824298.544 ops/s
Iteration   2: 1827876.848 ops/s
Iteration   3: 1853584.518 ops/s
Iteration   4: 1854576.450 ops/s
Iteration   5: 1830903.816 ops/s
Iteration   6: 1821428.776 ops/s
Iteration   7: 1836057.965 ops/s
Iteration   8: 1822419.909 ops/s
Iteration   9: 1810038.163 ops/s
Iteration  10: 1841880.527 ops/s
Iteration  11: 1839135.920 ops/s
Iteration  12: 1812189.228 ops/s
Iteration  13: 1823559.025 ops/s
Iteration  14: 1803458.509 ops/s
Iteration  15: 1847877.927 ops/s
Iteration  16: 1843196.628 ops/s
Iteration  17: 1816863.122 ops/s
Iteration  18: 1837144.061 ops/s
Iteration  19: 1828865.698 ops/s
Iteration  20: 1807658.700 ops/s
Iteration  21: 1823556.759 ops/s
Iteration  22: 1817073.902 ops/s
Iteration  23: 1837850.875 ops/s
Iteration  24: 1830955.960 ops/s
Iteration  25: 1821830.900 ops/s
Iteration  26: 1808050.772 ops/s
Iteration  27: 1833740.477 ops/s
Iteration  28: 1832040.418 ops/s
Iteration  29: 1839701.731 ops/s
Iteration  30: 1835762.703 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleMergeTest._Benchmark.benchmark_merge3":
  1828785.961 ±(99.9%) 8938.450 ops/s [Average]
  (min, avg, max) = (1803458.509, 1828785.961, 1854576.450), stdev = 13378.652
  CI (99.9%): [1819847.511, 1837724.411] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     Mode  Cnt        Score      Error  Units
SingleMergeTest._Benchmark.benchmark_merge3  thrpt   30  1828785.961 ± 8938.450  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.SingleFlattenStreamAsFlowableTest._Benchmark.benchmark_successManyTake$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.SingleFlattenStreamAsFlowableTest._Benchmark.benchmark_successManyTake

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1852940.523 ops/s
# Warmup Iteration   2: 3048894.424 ops/s
# Warmup Iteration   3: 3519478.687 ops/s
# Warmup Iteration   4: 3555666.771 ops/s
# Warmup Iteration   5: 3569815.044 ops/s
# Warmup Iteration   6: 3521529.568 ops/s
# Warmup Iteration   7: 3534946.488 ops/s
# Warmup Iteration   8: 3538410.346 ops/s
# Warmup Iteration   9: 3532379.096 ops/s
# Warmup Iteration  10: 3521048.887 ops/s
# Warmup Iteration  11: 3567830.955 ops/s
# Warmup Iteration  12: 3558632.086 ops/s
# Warmup Iteration  13: 3540280.820 ops/s
# Warmup Iteration  14: 3501118.911 ops/s
# Warmup Iteration  15: 3507130.613 ops/s
# Warmup Iteration  16: 3521122.706 ops/s
# Warmup Iteration  17: 3517715.794 ops/s
# Warmup Iteration  18: 3515257.188 ops/s
# Warmup Iteration  19: 3550679.931 ops/s
# Warmup Iteration  20: 3550569.931 ops/s
# Warmup Iteration  21: 3539543.413 ops/s
# Warmup Iteration  22: 3553213.604 ops/s
# Warmup Iteration  23: 3519840.612 ops/s
# Warmup Iteration  24: 3542838.647 ops/s
# Warmup Iteration  25: 3536394.485 ops/s
# Warmup Iteration  26: 3500124.134 ops/s
# Warmup Iteration  27: 3508809.058 ops/s
# Warmup Iteration  28: 3574042.524 ops/s
# Warmup Iteration  29: 3519368.642 ops/s
# Warmup Iteration  30: 3542486.168 ops/s
Iteration   1: 3510956.086 ops/s
Iteration   2: 3536141.672 ops/s
Iteration   3: 3517999.203 ops/s
Iteration   4: 3517808.783 ops/s
Iteration   5: 3545510.473 ops/s
Iteration   6: 3556317.804 ops/s
Iteration   7: 3543543.859 ops/s
Iteration   8: 3513710.194 ops/s
Iteration   9: 3487912.591 ops/s
Iteration  10: 3535541.738 ops/s
Iteration  11: 3536662.214 ops/s
Iteration  12: 3546044.556 ops/s
Iteration  13: 3565118.060 ops/s
Iteration  14: 3551987.097 ops/s
Iteration  15: 3526616.729 ops/s
Iteration  16: 3523795.095 ops/s
Iteration  17: 3584940.731 ops/s
Iteration  18: 3547937.904 ops/s
Iteration  19: 3556031.891 ops/s
Iteration  20: 3533058.013 ops/s
Iteration  21: 3547816.604 ops/s
Iteration  22: 3543761.634 ops/s
Iteration  23: 3521779.422 ops/s
Iteration  24: 3525767.555 ops/s
Iteration  25: 3530986.218 ops/s
Iteration  26: 3518780.465 ops/s
Iteration  27: 3534474.593 ops/s
Iteration  28: 3520835.119 ops/s
Iteration  29: 3530177.873 ops/s
Iteration  30: 3551752.708 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.SingleFlattenStreamAsFlowableTest._Benchmark.benchmark_successManyTake":
  3535458.896 ±(99.9%) 12637.164 ops/s [Average]
  (min, avg, max) = (3487912.591, 3535458.896, 3584940.731), stdev = 18914.713
  CI (99.9%): [3522821.732, 3548096.060] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score       Error  Units
SingleFlattenStreamAsFlowableTest._Benchmark.benchmark_successManyTake  thrpt   30  3535458.896 ± 12637.164  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_ambVarargsOneIsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_ambVarargsOneIsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3474231.743 ops/s
# Warmup Iteration   2: 4649097.361 ops/s
# Warmup Iteration   3: 5405362.659 ops/s
# Warmup Iteration   4: 5369553.029 ops/s
# Warmup Iteration   5: 5393622.390 ops/s
# Warmup Iteration   6: 5367501.384 ops/s
# Warmup Iteration   7: 5357723.803 ops/s
# Warmup Iteration   8: 5359137.682 ops/s
# Warmup Iteration   9: 5359572.748 ops/s
# Warmup Iteration  10: 5365647.784 ops/s
# Warmup Iteration  11: 5365182.091 ops/s
# Warmup Iteration  12: 5327250.544 ops/s
# Warmup Iteration  13: 5365445.958 ops/s
# Warmup Iteration  14: 5356626.409 ops/s
# Warmup Iteration  15: 5337800.042 ops/s
# Warmup Iteration  16: 5326168.228 ops/s
# Warmup Iteration  17: 5355835.996 ops/s
# Warmup Iteration  18: 5381226.348 ops/s
# Warmup Iteration  19: 5356988.404 ops/s
# Warmup Iteration  20: 5322752.040 ops/s
# Warmup Iteration  21: 5346712.935 ops/s
# Warmup Iteration  22: 5363045.018 ops/s
# Warmup Iteration  23: 5342616.181 ops/s
# Warmup Iteration  24: 5213854.953 ops/s
# Warmup Iteration  25: 5333734.946 ops/s
# Warmup Iteration  26: 5342019.816 ops/s
# Warmup Iteration  27: 5362760.448 ops/s
# Warmup Iteration  28: 5373072.268 ops/s
# Warmup Iteration  29: 5353626.175 ops/s
# Warmup Iteration  30: 5342474.507 ops/s
Iteration   1: 5350210.249 ops/s
Iteration   2: 5358915.851 ops/s
Iteration   3: 5342505.567 ops/s
Iteration   4: 5347961.100 ops/s
Iteration   5: 5347065.000 ops/s
Iteration   6: 5349699.641 ops/s
Iteration   7: 5318884.584 ops/s
Iteration   8: 5371803.246 ops/s
Iteration   9: 5338473.072 ops/s
Iteration  10: 5336340.855 ops/s
Iteration  11: 5331669.937 ops/s
Iteration  12: 5352128.136 ops/s
Iteration  13: 5353173.039 ops/s
Iteration  14: 5330837.027 ops/s
Iteration  15: 5326401.727 ops/s
Iteration  16: 5345552.934 ops/s
Iteration  17: 5371457.530 ops/s
Iteration  18: 5366407.473 ops/s
Iteration  19: 5342869.527 ops/s
Iteration  20: 5345531.812 ops/s
Iteration  21: 5320907.552 ops/s
Iteration  22: 5307396.382 ops/s
Iteration  23: 5349985.875 ops/s
Iteration  24: 5333555.591 ops/s
Iteration  25: 5350605.629 ops/s
Iteration  26: 5341044.358 ops/s
Iteration  27: 5348468.725 ops/s
Iteration  28: 5357213.838 ops/s
Iteration  29: 5332341.190 ops/s
Iteration  30: 5382254.345 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_ambVarargsOneIsNull":
  5345055.393 ±(99.9%) 10881.024 ops/s [Average]
  (min, avg, max) = (5307396.382, 5345055.393, 5382254.345), stdev = 16286.205
  CI (99.9%): [5334174.369, 5355936.417] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
FlowableNullTests._Benchmark.benchmark_ambVarargsOneIsNull  thrpt   30  5345055.393 ± 10881.024  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStreamTest._Benchmark.benchmark_mapperNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStreamTest._Benchmark.benchmark_mapperNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 333478.203 ops/s
# Warmup Iteration   2: 447260.809 ops/s
# Warmup Iteration   3: 434223.243 ops/s
# Warmup Iteration   4: 487926.659 ops/s
# Warmup Iteration   5: 494372.600 ops/s
# Warmup Iteration   6: 495761.006 ops/s
# Warmup Iteration   7: 493407.839 ops/s
# Warmup Iteration   8: 493322.687 ops/s
# Warmup Iteration   9: 495503.492 ops/s
# Warmup Iteration  10: 493949.530 ops/s
# Warmup Iteration  11: 485467.645 ops/s
# Warmup Iteration  12: 490995.414 ops/s
# Warmup Iteration  13: 488179.533 ops/s
# Warmup Iteration  14: 488783.087 ops/s
# Warmup Iteration  15: 490359.432 ops/s
# Warmup Iteration  16: 488614.551 ops/s
# Warmup Iteration  17: 501538.159 ops/s
# Warmup Iteration  18: 502141.462 ops/s
# Warmup Iteration  19: 505512.938 ops/s
# Warmup Iteration  20: 503465.855 ops/s
# Warmup Iteration  21: 502335.974 ops/s
# Warmup Iteration  22: 504901.430 ops/s
# Warmup Iteration  23: 505724.177 ops/s
# Warmup Iteration  24: 501399.595 ops/s
# Warmup Iteration  25: 503218.166 ops/s
# Warmup Iteration  26: 505498.935 ops/s
# Warmup Iteration  27: 507338.138 ops/s
# Warmup Iteration  28: 502401.877 ops/s
# Warmup Iteration  29: 502390.576 ops/s
# Warmup Iteration  30: 505144.419 ops/s
Iteration   1: 506241.502 ops/s
Iteration   2: 499433.801 ops/s
Iteration   3: 502501.818 ops/s
Iteration   4: 501554.375 ops/s
Iteration   5: 503888.261 ops/s
Iteration   6: 501799.468 ops/s
Iteration   7: 508193.966 ops/s
Iteration   8: 507498.947 ops/s
Iteration   9: 501462.357 ops/s
Iteration  10: 503831.346 ops/s
Iteration  11: 502318.882 ops/s
Iteration  12: 506196.782 ops/s
Iteration  13: 504491.396 ops/s
Iteration  14: 503340.630 ops/s
Iteration  15: 504381.769 ops/s
Iteration  16: 502999.738 ops/s
Iteration  17: 502088.497 ops/s
Iteration  18: 505263.938 ops/s
Iteration  19: 502679.109 ops/s
Iteration  20: 503908.972 ops/s
Iteration  21: 505206.765 ops/s
Iteration  22: 502100.673 ops/s
Iteration  23: 505405.549 ops/s
Iteration  24: 502198.766 ops/s
Iteration  25: 500498.810 ops/s
Iteration  26: 503287.273 ops/s
Iteration  27: 500383.318 ops/s
Iteration  28: 502214.915 ops/s
Iteration  29: 502273.964 ops/s
Iteration  30: 503565.655 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStreamTest._Benchmark.benchmark_mapperNull":
  503373.708 ±(99.9%) 1372.881 ops/s [Average]
  (min, avg, max) = (499433.801, 503373.708, 508193.966), stdev = 2054.864
  CI (99.9%): [502000.827, 504746.589] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
FlowableFlatMapStreamTest._Benchmark.benchmark_mapperNull  thrpt   30  503373.708 ± 1372.881  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStreamTest._Benchmark.benchmark_mapperThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStreamTest._Benchmark.benchmark_mapperThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 348750.100 ops/s
# Warmup Iteration   2: 477823.704 ops/s
# Warmup Iteration   3: 515084.329 ops/s
# Warmup Iteration   4: 514017.442 ops/s
# Warmup Iteration   5: 515502.913 ops/s
# Warmup Iteration   6: 514363.682 ops/s
# Warmup Iteration   7: 514554.317 ops/s
# Warmup Iteration   8: 510008.819 ops/s
# Warmup Iteration   9: 512401.969 ops/s
# Warmup Iteration  10: 514357.821 ops/s
# Warmup Iteration  11: 513816.970 ops/s
# Warmup Iteration  12: 512815.261 ops/s
# Warmup Iteration  13: 514540.118 ops/s
# Warmup Iteration  14: 512164.858 ops/s
# Warmup Iteration  15: 512017.008 ops/s
# Warmup Iteration  16: 510847.006 ops/s
# Warmup Iteration  17: 523732.288 ops/s
# Warmup Iteration  18: 524071.570 ops/s
# Warmup Iteration  19: 524929.411 ops/s
# Warmup Iteration  20: 522835.448 ops/s
# Warmup Iteration  21: 523012.218 ops/s
# Warmup Iteration  22: 523835.863 ops/s
# Warmup Iteration  23: 523514.703 ops/s
# Warmup Iteration  24: 519555.463 ops/s
# Warmup Iteration  25: 518406.405 ops/s
# Warmup Iteration  26: 519454.688 ops/s
# Warmup Iteration  27: 527114.220 ops/s
# Warmup Iteration  28: 524590.185 ops/s
# Warmup Iteration  29: 521559.778 ops/s
# Warmup Iteration  30: 521254.309 ops/s
Iteration   1: 524906.306 ops/s
Iteration   2: 520449.515 ops/s
Iteration   3: 521703.723 ops/s
Iteration   4: 520301.975 ops/s
Iteration   5: 528684.146 ops/s
Iteration   6: 524147.701 ops/s
Iteration   7: 521501.163 ops/s
Iteration   8: 524270.918 ops/s
Iteration   9: 519543.297 ops/s
Iteration  10: 521257.324 ops/s
Iteration  11: 521707.611 ops/s
Iteration  12: 521933.616 ops/s
Iteration  13: 518023.081 ops/s
Iteration  14: 521229.653 ops/s
Iteration  15: 521125.938 ops/s
Iteration  16: 522661.661 ops/s
Iteration  17: 520683.599 ops/s
Iteration  18: 524793.340 ops/s
Iteration  19: 526113.008 ops/s
Iteration  20: 523811.176 ops/s
Iteration  21: 524215.352 ops/s
Iteration  22: 522945.643 ops/s
Iteration  23: 521955.574 ops/s
Iteration  24: 520565.021 ops/s
Iteration  25: 519353.908 ops/s
Iteration  26: 519789.146 ops/s
Iteration  27: 524724.739 ops/s
Iteration  28: 525052.222 ops/s
Iteration  29: 521395.917 ops/s
Iteration  30: 520218.309 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStreamTest._Benchmark.benchmark_mapperThrows":
  522302.153 ±(99.9%) 1568.495 ops/s [Average]
  (min, avg, max) = (518023.081, 522302.153, 528684.146), stdev = 2347.650
  CI (99.9%): [520733.657, 523870.648] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
FlowableFlatMapStreamTest._Benchmark.benchmark_mapperThrows  thrpt   30  522302.153 ± 1568.495  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStreamTest._Benchmark.benchmark_hasNextThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStreamTest._Benchmark.benchmark_hasNextThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 313980.590 ops/s
# Warmup Iteration   2: 437343.332 ops/s
# Warmup Iteration   3: 424921.633 ops/s
# Warmup Iteration   4: 474725.422 ops/s
# Warmup Iteration   5: 479219.369 ops/s
# Warmup Iteration   6: 475375.959 ops/s
# Warmup Iteration   7: 475949.829 ops/s
# Warmup Iteration   8: 474958.251 ops/s
# Warmup Iteration   9: 474912.302 ops/s
# Warmup Iteration  10: 475098.639 ops/s
# Warmup Iteration  11: 473805.740 ops/s
# Warmup Iteration  12: 472645.062 ops/s
# Warmup Iteration  13: 473124.644 ops/s
# Warmup Iteration  14: 470904.135 ops/s
# Warmup Iteration  15: 470985.025 ops/s
# Warmup Iteration  16: 471243.793 ops/s
# Warmup Iteration  17: 489645.846 ops/s
# Warmup Iteration  18: 489716.961 ops/s
# Warmup Iteration  19: 488099.561 ops/s
# Warmup Iteration  20: 488268.828 ops/s
# Warmup Iteration  21: 489028.199 ops/s
# Warmup Iteration  22: 489080.150 ops/s
# Warmup Iteration  23: 487887.756 ops/s
# Warmup Iteration  24: 490036.075 ops/s
# Warmup Iteration  25: 491577.035 ops/s
# Warmup Iteration  26: 488558.353 ops/s
# Warmup Iteration  27: 487698.994 ops/s
# Warmup Iteration  28: 490641.550 ops/s
# Warmup Iteration  29: 490198.556 ops/s
# Warmup Iteration  30: 489051.296 ops/s
Iteration   1: 489734.277 ops/s
Iteration   2: 491897.532 ops/s
Iteration   3: 489231.252 ops/s
Iteration   4: 491526.989 ops/s
Iteration   5: 492471.051 ops/s
Iteration   6: 488917.941 ops/s
Iteration   7: 489737.374 ops/s
Iteration   8: 489578.508 ops/s
Iteration   9: 489220.953 ops/s
Iteration  10: 491771.572 ops/s
Iteration  11: 490405.735 ops/s
Iteration  12: 490198.133 ops/s
Iteration  13: 487583.622 ops/s
Iteration  14: 488543.401 ops/s
Iteration  15: 488550.631 ops/s
Iteration  16: 488673.224 ops/s
Iteration  17: 490284.388 ops/s
Iteration  18: 488512.914 ops/s
Iteration  19: 491409.923 ops/s
Iteration  20: 490545.699 ops/s
Iteration  21: 490596.394 ops/s
Iteration  22: 489328.033 ops/s
Iteration  23: 489111.726 ops/s
Iteration  24: 492239.392 ops/s
Iteration  25: 486860.945 ops/s
Iteration  26: 489701.233 ops/s
Iteration  27: 492102.082 ops/s
Iteration  28: 489422.736 ops/s
Iteration  29: 486682.059 ops/s
Iteration  30: 491005.483 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStreamTest._Benchmark.benchmark_hasNextThrows":
  489861.507 ±(99.9%) 1017.160 ops/s [Average]
  (min, avg, max) = (486682.059, 489861.507, 492471.051), stdev = 1522.437
  CI (99.9%): [488844.347, 490878.667] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
FlowableFlatMapStreamTest._Benchmark.benchmark_hasNextThrows  thrpt   30  489861.507 ± 1017.160  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableHideTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableHideTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 520184.438 ops/s
# Warmup Iteration   2: 641916.874 ops/s
# Warmup Iteration   3: 638198.890 ops/s
# Warmup Iteration   4: 694974.195 ops/s
# Warmup Iteration   5: 702721.214 ops/s
# Warmup Iteration   6: 702308.959 ops/s
# Warmup Iteration   7: 702684.670 ops/s
# Warmup Iteration   8: 704611.612 ops/s
# Warmup Iteration   9: 703603.491 ops/s
# Warmup Iteration  10: 702805.739 ops/s
# Warmup Iteration  11: 701510.755 ops/s
# Warmup Iteration  12: 700324.866 ops/s
# Warmup Iteration  13: 700362.937 ops/s
# Warmup Iteration  14: 696446.304 ops/s
# Warmup Iteration  15: 701176.068 ops/s
# Warmup Iteration  16: 698633.778 ops/s
# Warmup Iteration  17: 727201.909 ops/s
# Warmup Iteration  18: 729387.980 ops/s
# Warmup Iteration  19: 728065.153 ops/s
# Warmup Iteration  20: 727091.516 ops/s
# Warmup Iteration  21: 729410.693 ops/s
# Warmup Iteration  22: 728190.964 ops/s
# Warmup Iteration  23: 731529.114 ops/s
# Warmup Iteration  24: 728305.655 ops/s
# Warmup Iteration  25: 730807.547 ops/s
# Warmup Iteration  26: 730290.601 ops/s
# Warmup Iteration  27: 731305.905 ops/s
# Warmup Iteration  28: 726806.852 ops/s
# Warmup Iteration  29: 727627.272 ops/s
# Warmup Iteration  30: 730395.090 ops/s
Iteration   1: 727659.898 ops/s
Iteration   2: 730838.229 ops/s
Iteration   3: 726324.024 ops/s
Iteration   4: 731278.247 ops/s
Iteration   5: 731897.442 ops/s
Iteration   6: 726335.461 ops/s
Iteration   7: 730334.628 ops/s
Iteration   8: 727905.112 ops/s
Iteration   9: 728447.679 ops/s
Iteration  10: 730231.550 ops/s
Iteration  11: 730093.097 ops/s
Iteration  12: 725009.086 ops/s
Iteration  13: 730835.741 ops/s
Iteration  14: 730014.969 ops/s
Iteration  15: 731374.844 ops/s
Iteration  16: 728085.788 ops/s
Iteration  17: 731538.075 ops/s
Iteration  18: 728876.616 ops/s
Iteration  19: 731169.766 ops/s
Iteration  20: 725845.128 ops/s
Iteration  21: 728966.006 ops/s
Iteration  22: 728185.552 ops/s
Iteration  23: 722835.868 ops/s
Iteration  24: 725149.882 ops/s
Iteration  25: 727774.909 ops/s
Iteration  26: 726016.459 ops/s
Iteration  27: 728604.751 ops/s
Iteration  28: 723498.631 ops/s
Iteration  29: 729653.185 ops/s
Iteration  30: 731076.928 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableHideTest._Benchmark.benchmark_doubleOnSubscribe":
  728528.585 ±(99.9%) 1661.368 ops/s [Average]
  (min, avg, max) = (722835.868, 728528.585, 731897.442), stdev = 2486.657
  CI (99.9%): [726867.217, 730189.953] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score      Error  Units
FlowableHideTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  728528.585 ± 1661.368  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_concatMapEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_concatMapEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2255349.698 ops/s
# Warmup Iteration   2: 3475995.835 ops/s
# Warmup Iteration   3: 3976017.682 ops/s
# Warmup Iteration   4: 3950454.578 ops/s
# Warmup Iteration   5: 3945485.613 ops/s
# Warmup Iteration   6: 3940691.438 ops/s
# Warmup Iteration   7: 3933210.557 ops/s
# Warmup Iteration   8: 3951813.633 ops/s
# Warmup Iteration   9: 3957633.700 ops/s
# Warmup Iteration  10: 3937892.615 ops/s
# Warmup Iteration  11: 3953739.423 ops/s
# Warmup Iteration  12: 3938291.426 ops/s
# Warmup Iteration  13: 3929322.337 ops/s
# Warmup Iteration  14: 3951153.960 ops/s
# Warmup Iteration  15: 3942020.796 ops/s
# Warmup Iteration  16: 3940090.838 ops/s
# Warmup Iteration  17: 3952466.633 ops/s
# Warmup Iteration  18: 3940120.387 ops/s
# Warmup Iteration  19: 3938975.728 ops/s
# Warmup Iteration  20: 3925768.362 ops/s
# Warmup Iteration  21: 3948247.809 ops/s
# Warmup Iteration  22: 3960955.968 ops/s
# Warmup Iteration  23: 3951884.235 ops/s
# Warmup Iteration  24: 3953533.642 ops/s
# Warmup Iteration  25: 3957429.687 ops/s
# Warmup Iteration  26: 3943555.287 ops/s
# Warmup Iteration  27: 3950098.616 ops/s
# Warmup Iteration  28: 3906966.589 ops/s
# Warmup Iteration  29: 3930420.430 ops/s
# Warmup Iteration  30: 3938951.428 ops/s
Iteration   1: 3942361.032 ops/s
Iteration   2: 3944397.490 ops/s
Iteration   3: 3913970.202 ops/s
Iteration   4: 3931514.680 ops/s
Iteration   5: 3932077.707 ops/s
Iteration   6: 3972694.069 ops/s
Iteration   7: 3933415.248 ops/s
Iteration   8: 3929884.560 ops/s
Iteration   9: 3913840.358 ops/s
Iteration  10: 3938817.248 ops/s
Iteration  11: 3928221.441 ops/s
Iteration  12: 3932346.552 ops/s
Iteration  13: 3914844.723 ops/s
Iteration  14: 3908143.144 ops/s
Iteration  15: 3901039.880 ops/s
Iteration  16: 3918603.960 ops/s
Iteration  17: 3938268.842 ops/s
Iteration  18: 3907396.521 ops/s
Iteration  19: 3939680.286 ops/s
Iteration  20: 3941657.132 ops/s
Iteration  21: 3924514.792 ops/s
Iteration  22: 3936628.858 ops/s
Iteration  23: 3936261.763 ops/s
Iteration  24: 3907804.071 ops/s
Iteration  25: 3943055.192 ops/s
Iteration  26: 3933201.128 ops/s
Iteration  27: 3926398.126 ops/s
Iteration  28: 3937387.374 ops/s
Iteration  29: 3914692.784 ops/s
Iteration  30: 3936277.724 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_concatMapEmpty":
  3929313.230 ±(99.9%) 9928.499 ops/s [Average]
  (min, avg, max) = (3901039.880, 3929313.230, 3972694.069), stdev = 14860.511
  CI (99.9%): [3919384.731, 3939241.728] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
FlowableConcatMapSchedulerTest._Benchmark.benchmark_concatMapEmpty  thrpt   30  3929313.230 ± 9928.499  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOtherTest._Benchmark.benchmark_noPrematureSubscriptionToError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOtherTest._Benchmark.benchmark_noPrematureSubscriptionToError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 573103.368 ops/s
# Warmup Iteration   2: 738192.841 ops/s
# Warmup Iteration   3: 721943.102 ops/s
# Warmup Iteration   4: 818710.650 ops/s
# Warmup Iteration   5: 823650.087 ops/s
# Warmup Iteration   6: 822632.293 ops/s
# Warmup Iteration   7: 817144.624 ops/s
# Warmup Iteration   8: 820504.693 ops/s
# Warmup Iteration   9: 817913.513 ops/s
# Warmup Iteration  10: 821544.480 ops/s
# Warmup Iteration  11: 820668.822 ops/s
# Warmup Iteration  12: 822058.157 ops/s
# Warmup Iteration  13: 818808.526 ops/s
# Warmup Iteration  14: 815359.081 ops/s
# Warmup Iteration  15: 811245.941 ops/s
# Warmup Iteration  16: 813570.477 ops/s
# Warmup Iteration  17: 848134.417 ops/s
# Warmup Iteration  18: 854184.451 ops/s
# Warmup Iteration  19: 849947.524 ops/s
# Warmup Iteration  20: 852418.737 ops/s
# Warmup Iteration  21: 853603.016 ops/s
# Warmup Iteration  22: 857665.666 ops/s
# Warmup Iteration  23: 854866.337 ops/s
# Warmup Iteration  24: 855385.975 ops/s
# Warmup Iteration  25: 854703.327 ops/s
# Warmup Iteration  26: 855035.433 ops/s
# Warmup Iteration  27: 855834.634 ops/s
# Warmup Iteration  28: 854906.963 ops/s
# Warmup Iteration  29: 855246.500 ops/s
# Warmup Iteration  30: 863769.686 ops/s
Iteration   1: 852762.200 ops/s
Iteration   2: 854431.821 ops/s
Iteration   3: 857583.253 ops/s
Iteration   4: 860919.838 ops/s
Iteration   5: 854689.625 ops/s
Iteration   6: 859287.189 ops/s
Iteration   7: 856978.347 ops/s
Iteration   8: 857922.290 ops/s
Iteration   9: 859060.342 ops/s
Iteration  10: 857849.440 ops/s
Iteration  11: 858486.068 ops/s
Iteration  12: 860102.720 ops/s
Iteration  13: 857619.982 ops/s
Iteration  14: 855886.496 ops/s
Iteration  15: 856059.791 ops/s
Iteration  16: 851289.193 ops/s
Iteration  17: 864464.570 ops/s
Iteration  18: 859758.467 ops/s
Iteration  19: 852003.454 ops/s
Iteration  20: 847924.607 ops/s
Iteration  21: 854990.270 ops/s
Iteration  22: 859135.503 ops/s
Iteration  23: 857505.118 ops/s
Iteration  24: 860699.359 ops/s
Iteration  25: 861387.152 ops/s
Iteration  26: 860565.284 ops/s
Iteration  27: 851893.414 ops/s
Iteration  28: 855127.695 ops/s
Iteration  29: 863155.619 ops/s
Iteration  30: 854149.503 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOtherTest._Benchmark.benchmark_noPrematureSubscriptionToError":
  857122.954 ±(99.9%) 2493.391 ops/s [Average]
  (min, avg, max) = (847924.607, 857122.954, 864464.570), stdev = 3731.991
  CI (99.9%): [854629.563, 859616.345] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                Mode  Cnt       Score      Error  Units
FlowableDelaySubscriptionOtherTest._Benchmark.benchmark_noPrematureSubscriptionToError  thrpt   30  857122.954 ± 2493.391  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtTest._Benchmark.benchmark_elementAtOrErrorIndex1OnEmptySource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtTest._Benchmark.benchmark_elementAtOrErrorIndex1OnEmptySource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 657496.580 ops/s
# Warmup Iteration   2: 774297.485 ops/s
# Warmup Iteration   3: 787442.745 ops/s
# Warmup Iteration   4: 737692.561 ops/s
# Warmup Iteration   5: 833977.994 ops/s
# Warmup Iteration   6: 832920.868 ops/s
# Warmup Iteration   7: 835932.230 ops/s
# Warmup Iteration   8: 836293.394 ops/s
# Warmup Iteration   9: 833548.260 ops/s
# Warmup Iteration  10: 830145.133 ops/s
# Warmup Iteration  11: 834832.406 ops/s
# Warmup Iteration  12: 832258.110 ops/s
# Warmup Iteration  13: 831095.262 ops/s
# Warmup Iteration  14: 834680.232 ops/s
# Warmup Iteration  15: 835946.186 ops/s
# Warmup Iteration  16: 834252.028 ops/s
# Warmup Iteration  17: 879361.447 ops/s
# Warmup Iteration  18: 879136.390 ops/s
# Warmup Iteration  19: 874758.670 ops/s
# Warmup Iteration  20: 871479.898 ops/s
# Warmup Iteration  21: 876203.397 ops/s
# Warmup Iteration  22: 878373.032 ops/s
# Warmup Iteration  23: 876929.279 ops/s
# Warmup Iteration  24: 880633.365 ops/s
# Warmup Iteration  25: 873641.379 ops/s
# Warmup Iteration  26: 879618.768 ops/s
# Warmup Iteration  27: 878152.908 ops/s
# Warmup Iteration  28: 873236.080 ops/s
# Warmup Iteration  29: 873113.156 ops/s
# Warmup Iteration  30: 874067.334 ops/s
Iteration   1: 870630.392 ops/s
Iteration   2: 878313.255 ops/s
Iteration   3: 869121.534 ops/s
Iteration   4: 870406.314 ops/s
Iteration   5: 876416.160 ops/s
Iteration   6: 871807.618 ops/s
Iteration   7: 874421.070 ops/s
Iteration   8: 876064.423 ops/s
Iteration   9: 875519.540 ops/s
Iteration  10: 872960.979 ops/s
Iteration  11: 876631.659 ops/s
Iteration  12: 874153.191 ops/s
Iteration  13: 876889.890 ops/s
Iteration  14: 876548.027 ops/s
Iteration  15: 876305.014 ops/s
Iteration  16: 869495.044 ops/s
Iteration  17: 875442.138 ops/s
Iteration  18: 869509.386 ops/s
Iteration  19: 877083.988 ops/s
Iteration  20: 875412.383 ops/s
Iteration  21: 875423.328 ops/s
Iteration  22: 869596.260 ops/s
Iteration  23: 873434.056 ops/s
Iteration  24: 875007.516 ops/s
Iteration  25: 873015.498 ops/s
Iteration  26: 875380.409 ops/s
Iteration  27: 873429.535 ops/s
Iteration  28: 870226.413 ops/s
Iteration  29: 874673.188 ops/s
Iteration  30: 874870.803 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtTest._Benchmark.benchmark_elementAtOrErrorIndex1OnEmptySource":
  873939.634 ±(99.9%) 1787.546 ops/s [Average]
  (min, avg, max) = (869121.534, 873939.634, 878313.255), stdev = 2675.514
  CI (99.9%): [872152.088, 875727.179] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt       Score      Error  Units
FlowableElementAtTest._Benchmark.benchmark_elementAtOrErrorIndex1OnEmptySource  thrpt   30  873939.634 ± 1787.546  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualTest._Benchmark.benchmark_undeliverableUponCancel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualTest._Benchmark.benchmark_undeliverableUponCancel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 136985.136 ops/s
# Warmup Iteration   2: 218631.848 ops/s
# Warmup Iteration   3: 216312.150 ops/s
# Warmup Iteration   4: 244171.867 ops/s
# Warmup Iteration   5: 247389.180 ops/s
# Warmup Iteration   6: 247938.242 ops/s
# Warmup Iteration   7: 247380.714 ops/s
# Warmup Iteration   8: 248019.924 ops/s
# Warmup Iteration   9: 247141.519 ops/s
# Warmup Iteration  10: 248629.874 ops/s
# Warmup Iteration  11: 246039.972 ops/s
# Warmup Iteration  12: 246164.021 ops/s
# Warmup Iteration  13: 247814.519 ops/s
# Warmup Iteration  14: 247398.983 ops/s
# Warmup Iteration  15: 245830.981 ops/s
# Warmup Iteration  16: 246392.723 ops/s
# Warmup Iteration  17: 266518.297 ops/s
# Warmup Iteration  18: 266387.154 ops/s
# Warmup Iteration  19: 267974.936 ops/s
# Warmup Iteration  20: 267753.611 ops/s
# Warmup Iteration  21: 265922.510 ops/s
# Warmup Iteration  22: 266228.710 ops/s
# Warmup Iteration  23: 266576.442 ops/s
# Warmup Iteration  24: 267429.969 ops/s
# Warmup Iteration  25: 266218.995 ops/s
# Warmup Iteration  26: 266118.034 ops/s
# Warmup Iteration  27: 267134.451 ops/s
# Warmup Iteration  28: 268397.706 ops/s
# Warmup Iteration  29: 266449.439 ops/s
# Warmup Iteration  30: 264334.511 ops/s
Iteration   1: 266522.629 ops/s
Iteration   2: 266435.219 ops/s
Iteration   3: 266373.563 ops/s
Iteration   4: 268581.493 ops/s
Iteration   5: 266977.779 ops/s
Iteration   6: 267247.598 ops/s
Iteration   7: 267839.607 ops/s
Iteration   8: 266039.091 ops/s
Iteration   9: 267457.493 ops/s
Iteration  10: 266933.494 ops/s
Iteration  11: 265891.261 ops/s
Iteration  12: 268073.704 ops/s
Iteration  13: 267717.406 ops/s
Iteration  14: 266761.441 ops/s
Iteration  15: 266535.607 ops/s
Iteration  16: 266716.297 ops/s
Iteration  17: 267540.233 ops/s
Iteration  18: 265483.999 ops/s
Iteration  19: 265930.363 ops/s
Iteration  20: 265593.183 ops/s
Iteration  21: 268222.996 ops/s
Iteration  22: 267899.839 ops/s
Iteration  23: 266250.560 ops/s
Iteration  24: 266765.918 ops/s
Iteration  25: 265970.556 ops/s
Iteration  26: 267258.284 ops/s
Iteration  27: 266460.858 ops/s
Iteration  28: 267722.917 ops/s
Iteration  29: 267883.146 ops/s
Iteration  30: 266906.381 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualTest._Benchmark.benchmark_undeliverableUponCancel":
  266933.097 ±(99.9%) 552.384 ops/s [Average]
  (min, avg, max) = (265483.999, 266933.097, 268581.493), stdev = 826.783
  CI (99.9%): [266380.713, 267485.481] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score     Error  Units
FlowableSequenceEqualTest._Benchmark.benchmark_undeliverableUponCancel  thrpt   30  266933.097 ± 552.384  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleTakeUntilTest._Benchmark.benchmark_otherOnCompletePublisher$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleTakeUntilTest._Benchmark.benchmark_otherOnCompletePublisher

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 517293.846 ops/s
# Warmup Iteration   2: 652924.650 ops/s
# Warmup Iteration   3: 718995.058 ops/s
# Warmup Iteration   4: 750718.031 ops/s
# Warmup Iteration   5: 755701.883 ops/s
# Warmup Iteration   6: 753830.229 ops/s
# Warmup Iteration   7: 755562.332 ops/s
# Warmup Iteration   8: 755076.574 ops/s
# Warmup Iteration   9: 754187.113 ops/s
# Warmup Iteration  10: 750029.527 ops/s
# Warmup Iteration  11: 750926.857 ops/s
# Warmup Iteration  12: 753802.622 ops/s
# Warmup Iteration  13: 751896.352 ops/s
# Warmup Iteration  14: 747476.810 ops/s
# Warmup Iteration  15: 748842.933 ops/s
# Warmup Iteration  16: 747606.360 ops/s
# Warmup Iteration  17: 783281.248 ops/s
# Warmup Iteration  18: 785932.706 ops/s
# Warmup Iteration  19: 786065.544 ops/s
# Warmup Iteration  20: 780458.822 ops/s
# Warmup Iteration  21: 779189.123 ops/s
# Warmup Iteration  22: 784419.969 ops/s
# Warmup Iteration  23: 782728.011 ops/s
# Warmup Iteration  24: 779384.090 ops/s
# Warmup Iteration  25: 783430.402 ops/s
# Warmup Iteration  26: 783747.198 ops/s
# Warmup Iteration  27: 783139.181 ops/s
# Warmup Iteration  28: 780735.920 ops/s
# Warmup Iteration  29: 785099.030 ops/s
# Warmup Iteration  30: 779409.921 ops/s
Iteration   1: 786067.271 ops/s
Iteration   2: 781262.235 ops/s
Iteration   3: 781701.326 ops/s
Iteration   4: 783473.604 ops/s
Iteration   5: 779346.280 ops/s
Iteration   6: 781826.536 ops/s
Iteration   7: 780804.266 ops/s
Iteration   8: 777779.874 ops/s
Iteration   9: 777375.331 ops/s
Iteration  10: 779288.099 ops/s
Iteration  11: 779208.191 ops/s
Iteration  12: 780222.293 ops/s
Iteration  13: 780521.153 ops/s
Iteration  14: 784178.249 ops/s
Iteration  15: 786901.148 ops/s
Iteration  16: 784165.106 ops/s
Iteration  17: 784651.038 ops/s
Iteration  18: 778511.626 ops/s
Iteration  19: 777457.333 ops/s
Iteration  20: 782989.872 ops/s
Iteration  21: 784037.193 ops/s
Iteration  22: 782257.194 ops/s
Iteration  23: 783260.404 ops/s
Iteration  24: 784655.310 ops/s
Iteration  25: 782709.232 ops/s
Iteration  26: 783680.807 ops/s
Iteration  27: 784559.764 ops/s
Iteration  28: 782285.300 ops/s
Iteration  29: 784244.518 ops/s
Iteration  30: 786287.084 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntilTest._Benchmark.benchmark_otherOnCompletePublisher":
  782190.255 ±(99.9%) 1784.807 ops/s [Average]
  (min, avg, max) = (777375.331, 782190.255, 786901.148), stdev = 2671.415
  CI (99.9%): [780405.448, 783975.062] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score      Error  Units
SingleTakeUntilTest._Benchmark.benchmark_otherOnCompletePublisher  thrpt   30  782190.255 ± 1784.807  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_concatMapInnerError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_concatMapInnerError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 477046.819 ops/s
# Warmup Iteration   2: 664172.817 ops/s
# Warmup Iteration   3: 760152.054 ops/s
# Warmup Iteration   4: 756544.147 ops/s
# Warmup Iteration   5: 759012.713 ops/s
# Warmup Iteration   6: 757258.224 ops/s
# Warmup Iteration   7: 755505.299 ops/s
# Warmup Iteration   8: 757125.633 ops/s
# Warmup Iteration   9: 759079.729 ops/s
# Warmup Iteration  10: 757093.334 ops/s
# Warmup Iteration  11: 756630.673 ops/s
# Warmup Iteration  12: 755765.063 ops/s
# Warmup Iteration  13: 757125.455 ops/s
# Warmup Iteration  14: 754292.460 ops/s
# Warmup Iteration  15: 752696.337 ops/s
# Warmup Iteration  16: 754695.159 ops/s
# Warmup Iteration  17: 789440.567 ops/s
# Warmup Iteration  18: 797024.087 ops/s
# Warmup Iteration  19: 795526.347 ops/s
# Warmup Iteration  20: 792807.470 ops/s
# Warmup Iteration  21: 787399.657 ops/s
# Warmup Iteration  22: 786701.507 ops/s
# Warmup Iteration  23: 793619.196 ops/s
# Warmup Iteration  24: 791736.420 ops/s
# Warmup Iteration  25: 790902.805 ops/s
# Warmup Iteration  26: 792551.092 ops/s
# Warmup Iteration  27: 785513.937 ops/s
# Warmup Iteration  28: 794626.654 ops/s
# Warmup Iteration  29: 793782.236 ops/s
# Warmup Iteration  30: 792989.099 ops/s
Iteration   1: 793268.301 ops/s
Iteration   2: 792491.528 ops/s
Iteration   3: 790273.330 ops/s
Iteration   4: 792242.971 ops/s
Iteration   5: 792728.439 ops/s
Iteration   6: 793967.814 ops/s
Iteration   7: 788082.037 ops/s
Iteration   8: 794018.224 ops/s
Iteration   9: 794664.177 ops/s
Iteration  10: 786010.441 ops/s
Iteration  11: 789656.845 ops/s
Iteration  12: 791829.867 ops/s
Iteration  13: 788882.811 ops/s
Iteration  14: 782111.876 ops/s
Iteration  15: 795585.346 ops/s
Iteration  16: 791487.911 ops/s
Iteration  17: 789127.485 ops/s
Iteration  18: 792928.725 ops/s
Iteration  19: 786788.802 ops/s
Iteration  20: 793914.344 ops/s
Iteration  21: 787718.995 ops/s
Iteration  22: 794427.435 ops/s
Iteration  23: 788958.614 ops/s
Iteration  24: 790224.963 ops/s
Iteration  25: 788885.684 ops/s
Iteration  26: 790996.507 ops/s
Iteration  27: 794978.884 ops/s
Iteration  28: 790034.120 ops/s
Iteration  29: 792497.626 ops/s
Iteration  30: 793011.937 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_concatMapInnerError":
  791059.868 ±(99.9%) 2048.298 ops/s [Average]
  (min, avg, max) = (782111.876, 791059.868, 795585.346), stdev = 3065.796
  CI (99.9%): [789011.570, 793108.166] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score      Error  Units
FlowableConcatMapSchedulerTest._Benchmark.benchmark_concatMapInnerError  thrpt   30  791059.868 ± 2048.298  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualTest._Benchmark.benchmark_undeliverableUponCancelAsFlowable2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualTest._Benchmark.benchmark_undeliverableUponCancelAsFlowable2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 124031.818 ops/s
# Warmup Iteration   2: 194595.988 ops/s
# Warmup Iteration   3: 190248.847 ops/s
# Warmup Iteration   4: 216767.032 ops/s
# Warmup Iteration   5: 220955.149 ops/s
# Warmup Iteration   6: 219461.403 ops/s
# Warmup Iteration   7: 219652.914 ops/s
# Warmup Iteration   8: 219228.698 ops/s
# Warmup Iteration   9: 218826.129 ops/s
# Warmup Iteration  10: 218881.138 ops/s
# Warmup Iteration  11: 218234.205 ops/s
# Warmup Iteration  12: 218118.379 ops/s
# Warmup Iteration  13: 218056.812 ops/s
# Warmup Iteration  14: 219474.930 ops/s
# Warmup Iteration  15: 217531.766 ops/s
# Warmup Iteration  16: 217809.830 ops/s
# Warmup Iteration  17: 223625.504 ops/s
# Warmup Iteration  18: 223358.930 ops/s
# Warmup Iteration  19: 225340.419 ops/s
# Warmup Iteration  20: 222983.387 ops/s
# Warmup Iteration  21: 225045.193 ops/s
# Warmup Iteration  22: 225572.849 ops/s
# Warmup Iteration  23: 224951.914 ops/s
# Warmup Iteration  24: 226255.746 ops/s
# Warmup Iteration  25: 223667.222 ops/s
# Warmup Iteration  26: 225088.401 ops/s
# Warmup Iteration  27: 225393.216 ops/s
# Warmup Iteration  28: 225810.313 ops/s
# Warmup Iteration  29: 224754.658 ops/s
# Warmup Iteration  30: 223658.175 ops/s
Iteration   1: 225848.333 ops/s
Iteration   2: 224042.601 ops/s
Iteration   3: 225296.486 ops/s
Iteration   4: 226562.949 ops/s
Iteration   5: 226021.112 ops/s
Iteration   6: 225549.519 ops/s
Iteration   7: 225873.972 ops/s
Iteration   8: 224125.203 ops/s
Iteration   9: 224349.784 ops/s
Iteration  10: 224929.472 ops/s
Iteration  11: 223870.184 ops/s
Iteration  12: 224836.207 ops/s
Iteration  13: 224841.700 ops/s
Iteration  14: 225194.126 ops/s
Iteration  15: 224917.900 ops/s
Iteration  16: 224346.650 ops/s
Iteration  17: 225367.936 ops/s
Iteration  18: 226349.827 ops/s
Iteration  19: 224471.140 ops/s
Iteration  20: 223607.422 ops/s
Iteration  21: 224654.414 ops/s
Iteration  22: 225460.513 ops/s
Iteration  23: 225494.894 ops/s
Iteration  24: 224828.684 ops/s
Iteration  25: 224616.112 ops/s
Iteration  26: 226631.211 ops/s
Iteration  27: 226152.965 ops/s
Iteration  28: 225702.819 ops/s
Iteration  29: 224565.739 ops/s
Iteration  30: 225049.614 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualTest._Benchmark.benchmark_undeliverableUponCancelAsFlowable2":
  225118.650 ±(99.9%) 532.911 ops/s [Average]
  (min, avg, max) = (223607.422, 225118.650, 226631.211), stdev = 797.637
  CI (99.9%): [224585.738, 225651.561] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           Mode  Cnt       Score     Error  Units
FlowableSequenceEqualTest._Benchmark.benchmark_undeliverableUponCancelAsFlowable2  thrpt   30  225118.650 ± 532.911  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMaterializeTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMaterializeTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 519869.991 ops/s
# Warmup Iteration   2: 633920.603 ops/s
# Warmup Iteration   3: 622249.072 ops/s
# Warmup Iteration   4: 681203.633 ops/s
# Warmup Iteration   5: 684056.030 ops/s
# Warmup Iteration   6: 691086.703 ops/s
# Warmup Iteration   7: 687516.561 ops/s
# Warmup Iteration   8: 689133.245 ops/s
# Warmup Iteration   9: 685234.334 ops/s
# Warmup Iteration  10: 688261.226 ops/s
# Warmup Iteration  11: 686844.797 ops/s
# Warmup Iteration  12: 682898.325 ops/s
# Warmup Iteration  13: 686941.926 ops/s
# Warmup Iteration  14: 686829.070 ops/s
# Warmup Iteration  15: 682189.655 ops/s
# Warmup Iteration  16: 682866.708 ops/s
# Warmup Iteration  17: 713697.398 ops/s
# Warmup Iteration  18: 709689.884 ops/s
# Warmup Iteration  19: 715195.748 ops/s
# Warmup Iteration  20: 715918.748 ops/s
# Warmup Iteration  21: 713440.897 ops/s
# Warmup Iteration  22: 714621.355 ops/s
# Warmup Iteration  23: 712872.535 ops/s
# Warmup Iteration  24: 714285.502 ops/s
# Warmup Iteration  25: 713434.278 ops/s
# Warmup Iteration  26: 710355.412 ops/s
# Warmup Iteration  27: 713324.842 ops/s
# Warmup Iteration  28: 711369.045 ops/s
# Warmup Iteration  29: 719532.956 ops/s
# Warmup Iteration  30: 715323.434 ops/s
Iteration   1: 715194.039 ops/s
Iteration   2: 712316.817 ops/s
Iteration   3: 713687.132 ops/s
Iteration   4: 715455.869 ops/s
Iteration   5: 713863.198 ops/s
Iteration   6: 712694.769 ops/s
Iteration   7: 710675.986 ops/s
Iteration   8: 717966.289 ops/s
Iteration   9: 712622.967 ops/s
Iteration  10: 713854.655 ops/s
Iteration  11: 708973.760 ops/s
Iteration  12: 714022.230 ops/s
Iteration  13: 716213.319 ops/s
Iteration  14: 710236.846 ops/s
Iteration  15: 715791.708 ops/s
Iteration  16: 713838.746 ops/s
Iteration  17: 713278.812 ops/s
Iteration  18: 711736.299 ops/s
Iteration  19: 714083.695 ops/s
Iteration  20: 713606.125 ops/s
Iteration  21: 714454.936 ops/s
Iteration  22: 714678.421 ops/s
Iteration  23: 713029.145 ops/s
Iteration  24: 713493.796 ops/s
Iteration  25: 716634.978 ops/s
Iteration  26: 714261.008 ops/s
Iteration  27: 714467.727 ops/s
Iteration  28: 711573.619 ops/s
Iteration  29: 715062.455 ops/s
Iteration  30: 712710.464 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableMaterializeTest._Benchmark.benchmark_doubleOnSubscribe":
  713682.660 ±(99.9%) 1271.395 ops/s [Average]
  (min, avg, max) = (708973.760, 713682.660, 717966.289), stdev = 1902.964
  CI (99.9%): [712411.265, 714954.055] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
FlowableMaterializeTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  713682.660 ± 1271.395  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletableTest._Benchmark.benchmark_normal$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletableTest._Benchmark.benchmark_normal

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1589422.074 ops/s
# Warmup Iteration   2: 1973397.556 ops/s
# Warmup Iteration   3: 2250440.586 ops/s
# Warmup Iteration   4: 2346465.614 ops/s
# Warmup Iteration   5: 2335717.345 ops/s
# Warmup Iteration   6: 2346283.866 ops/s
# Warmup Iteration   7: 2342817.567 ops/s
# Warmup Iteration   8: 2355840.083 ops/s
# Warmup Iteration   9: 2352135.738 ops/s
# Warmup Iteration  10: 2339287.389 ops/s
# Warmup Iteration  11: 2306972.721 ops/s
# Warmup Iteration  12: 2319373.528 ops/s
# Warmup Iteration  13: 2333763.385 ops/s
# Warmup Iteration  14: 2334429.871 ops/s
# Warmup Iteration  15: 2351195.456 ops/s
# Warmup Iteration  16: 2322774.013 ops/s
# Warmup Iteration  17: 2326881.576 ops/s
# Warmup Iteration  18: 2310682.623 ops/s
# Warmup Iteration  19: 2327962.892 ops/s
# Warmup Iteration  20: 2324012.241 ops/s
# Warmup Iteration  21: 2335291.138 ops/s
# Warmup Iteration  22: 2303478.857 ops/s
# Warmup Iteration  23: 2330879.491 ops/s
# Warmup Iteration  24: 2322644.234 ops/s
# Warmup Iteration  25: 2309590.299 ops/s
# Warmup Iteration  26: 2330924.840 ops/s
# Warmup Iteration  27: 2339572.248 ops/s
# Warmup Iteration  28: 2326317.674 ops/s
# Warmup Iteration  29: 2325620.301 ops/s
# Warmup Iteration  30: 2352205.431 ops/s
Iteration   1: 2319520.267 ops/s
Iteration   2: 2319332.864 ops/s
Iteration   3: 2344879.881 ops/s
Iteration   4: 2319474.752 ops/s
Iteration   5: 2317663.495 ops/s
Iteration   6: 2334792.698 ops/s
Iteration   7: 2331572.593 ops/s
Iteration   8: 2328490.343 ops/s
Iteration   9: 2331656.418 ops/s
Iteration  10: 2338546.746 ops/s
Iteration  11: 2335914.405 ops/s
Iteration  12: 2343998.079 ops/s
Iteration  13: 2330854.630 ops/s
Iteration  14: 2329702.348 ops/s
Iteration  15: 2362145.728 ops/s
Iteration  16: 2330995.191 ops/s
Iteration  17: 2317934.180 ops/s
Iteration  18: 2329407.304 ops/s
Iteration  19: 2336663.612 ops/s
Iteration  20: 2315396.235 ops/s
Iteration  21: 2321830.925 ops/s
Iteration  22: 2341400.658 ops/s
Iteration  23: 2330688.200 ops/s
Iteration  24: 2321344.456 ops/s
Iteration  25: 2331449.728 ops/s
Iteration  26: 2321826.297 ops/s
Iteration  27: 2339101.793 ops/s
Iteration  28: 2339865.994 ops/s
Iteration  29: 2329600.711 ops/s
Iteration  30: 2345895.519 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletableTest._Benchmark.benchmark_normal":
  2331398.202 ±(99.9%) 7014.439 ops/s [Average]
  (min, avg, max) = (2315396.235, 2331398.202, 2362145.728), stdev = 10498.882
  CI (99.9%): [2324383.763, 2338412.640] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
FlowableSwitchMapCompletableTest._Benchmark.benchmark_normal  thrpt   30  2331398.202 ± 7014.439  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletableTest._Benchmark.benchmark_checkDisposed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletableTest._Benchmark.benchmark_checkDisposed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3594939.756 ops/s
# Warmup Iteration   2: 5319606.620 ops/s
# Warmup Iteration   3: 5940073.924 ops/s
# Warmup Iteration   4: 6077237.501 ops/s
# Warmup Iteration   5: 6009808.701 ops/s
# Warmup Iteration   6: 5943632.406 ops/s
# Warmup Iteration   7: 6015406.564 ops/s
# Warmup Iteration   8: 6056331.113 ops/s
# Warmup Iteration   9: 6006264.508 ops/s
# Warmup Iteration  10: 5961044.364 ops/s
# Warmup Iteration  11: 5955682.973 ops/s
# Warmup Iteration  12: 6050393.675 ops/s
# Warmup Iteration  13: 6048276.062 ops/s
# Warmup Iteration  14: 5992665.617 ops/s
# Warmup Iteration  15: 6037433.121 ops/s
# Warmup Iteration  16: 5990256.048 ops/s
# Warmup Iteration  17: 6037595.725 ops/s
# Warmup Iteration  18: 6044789.733 ops/s
# Warmup Iteration  19: 5968681.785 ops/s
# Warmup Iteration  20: 6019508.320 ops/s
# Warmup Iteration  21: 6020801.727 ops/s
# Warmup Iteration  22: 5995217.355 ops/s
# Warmup Iteration  23: 5975779.849 ops/s
# Warmup Iteration  24: 6002971.400 ops/s
# Warmup Iteration  25: 6014874.846 ops/s
# Warmup Iteration  26: 6011003.028 ops/s
# Warmup Iteration  27: 5940130.734 ops/s
# Warmup Iteration  28: 6017015.455 ops/s
# Warmup Iteration  29: 5958759.844 ops/s
# Warmup Iteration  30: 6014027.994 ops/s
Iteration   1: 6022966.871 ops/s
Iteration   2: 5969791.058 ops/s
Iteration   3: 6079567.025 ops/s
Iteration   4: 5960918.063 ops/s
Iteration   5: 5979364.743 ops/s
Iteration   6: 5944600.751 ops/s
Iteration   7: 5960394.239 ops/s
Iteration   8: 6049037.702 ops/s
Iteration   9: 5941970.938 ops/s
Iteration  10: 5962990.050 ops/s
Iteration  11: 6003936.951 ops/s
Iteration  12: 6007901.726 ops/s
Iteration  13: 5964752.247 ops/s
Iteration  14: 5969364.453 ops/s
Iteration  15: 5984348.869 ops/s
Iteration  16: 6010523.693 ops/s
Iteration  17: 6015361.871 ops/s
Iteration  18: 5993084.065 ops/s
Iteration  19: 5930952.105 ops/s
Iteration  20: 6009047.301 ops/s
Iteration  21: 6001865.117 ops/s
Iteration  22: 5992752.183 ops/s
Iteration  23: 5981031.750 ops/s
Iteration  24: 6051842.274 ops/s
Iteration  25: 5954352.730 ops/s
Iteration  26: 5985150.503 ops/s
Iteration  27: 6003815.616 ops/s
Iteration  28: 5981926.007 ops/s
Iteration  29: 6004713.045 ops/s
Iteration  30: 6010306.359 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletableTest._Benchmark.benchmark_checkDisposed":
  5990954.344 ±(99.9%) 22426.043 ops/s [Average]
  (min, avg, max) = (5930952.105, 5990954.344, 6079567.025), stdev = 33566.247
  CI (99.9%): [5968528.301, 6013380.386] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
FlowableSwitchMapCompletableTest._Benchmark.benchmark_checkDisposed  thrpt   30  5990954.344 ± 22426.043  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletableTest._Benchmark.benchmark_switchOver$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletableTest._Benchmark.benchmark_switchOver

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1687686.639 ops/s
# Warmup Iteration   2: 2348212.389 ops/s
# Warmup Iteration   3: 2733073.691 ops/s
# Warmup Iteration   4: 2756476.764 ops/s
# Warmup Iteration   5: 2736813.158 ops/s
# Warmup Iteration   6: 2739325.950 ops/s
# Warmup Iteration   7: 2742327.680 ops/s
# Warmup Iteration   8: 2731475.863 ops/s
# Warmup Iteration   9: 2761007.795 ops/s
# Warmup Iteration  10: 2731686.728 ops/s
# Warmup Iteration  11: 2717642.127 ops/s
# Warmup Iteration  12: 2723376.107 ops/s
# Warmup Iteration  13: 2723096.396 ops/s
# Warmup Iteration  14: 2736212.010 ops/s
# Warmup Iteration  15: 2741088.654 ops/s
# Warmup Iteration  16: 2728315.609 ops/s
# Warmup Iteration  17: 2712955.884 ops/s
# Warmup Iteration  18: 2743395.750 ops/s
# Warmup Iteration  19: 2708821.537 ops/s
# Warmup Iteration  20: 2742056.402 ops/s
# Warmup Iteration  21: 2743006.640 ops/s
# Warmup Iteration  22: 2730004.893 ops/s
# Warmup Iteration  23: 2731490.692 ops/s
# Warmup Iteration  24: 2722603.952 ops/s
# Warmup Iteration  25: 2741836.604 ops/s
# Warmup Iteration  26: 2742687.812 ops/s
# Warmup Iteration  27: 2718255.896 ops/s
# Warmup Iteration  28: 2750598.595 ops/s
# Warmup Iteration  29: 2732234.006 ops/s
# Warmup Iteration  30: 2736768.570 ops/s
Iteration   1: 2737314.869 ops/s
Iteration   2: 2745447.005 ops/s
Iteration   3: 2729135.003 ops/s
Iteration   4: 2729267.125 ops/s
Iteration   5: 2728195.391 ops/s
Iteration   6: 2733980.208 ops/s
Iteration   7: 2740272.530 ops/s
Iteration   8: 2724911.647 ops/s
Iteration   9: 2737076.046 ops/s
Iteration  10: 2723478.063 ops/s
Iteration  11: 2711412.973 ops/s
Iteration  12: 2737648.910 ops/s
Iteration  13: 2731764.249 ops/s
Iteration  14: 2736069.476 ops/s
Iteration  15: 2750180.115 ops/s
Iteration  16: 2753159.974 ops/s
Iteration  17: 2745282.404 ops/s
Iteration  18: 2739921.789 ops/s
Iteration  19: 2742094.201 ops/s
Iteration  20: 2735156.769 ops/s
Iteration  21: 2720061.685 ops/s
Iteration  22: 2742681.415 ops/s
Iteration  23: 2733026.766 ops/s
Iteration  24: 2743246.371 ops/s
Iteration  25: 2751763.807 ops/s
Iteration  26: 2746440.759 ops/s
Iteration  27: 2735244.268 ops/s
Iteration  28: 2724178.352 ops/s
Iteration  29: 2745874.725 ops/s
Iteration  30: 2713858.616 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletableTest._Benchmark.benchmark_switchOver":
  2735604.850 ±(99.9%) 7071.326 ops/s [Average]
  (min, avg, max) = (2711412.973, 2735604.850, 2753159.974), stdev = 10584.028
  CI (99.9%): [2728533.525, 2742676.176] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
FlowableSwitchMapCompletableTest._Benchmark.benchmark_switchOver  thrpt   30  2735604.850 ± 7071.326  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletableTest._Benchmark.benchmark_mapperCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletableTest._Benchmark.benchmark_mapperCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 561452.081 ops/s
# Warmup Iteration   2: 676800.151 ops/s
# Warmup Iteration   3: 706245.498 ops/s
# Warmup Iteration   4: 747395.771 ops/s
# Warmup Iteration   5: 748685.052 ops/s
# Warmup Iteration   6: 742936.588 ops/s
# Warmup Iteration   7: 746801.429 ops/s
# Warmup Iteration   8: 741031.839 ops/s
# Warmup Iteration   9: 744496.274 ops/s
# Warmup Iteration  10: 743711.569 ops/s
# Warmup Iteration  11: 741726.557 ops/s
# Warmup Iteration  12: 744632.957 ops/s
# Warmup Iteration  13: 742467.067 ops/s
# Warmup Iteration  14: 740015.395 ops/s
# Warmup Iteration  15: 736421.921 ops/s
# Warmup Iteration  16: 743792.572 ops/s
# Warmup Iteration  17: 777375.640 ops/s
# Warmup Iteration  18: 778200.244 ops/s
# Warmup Iteration  19: 781121.348 ops/s
# Warmup Iteration  20: 778853.918 ops/s
# Warmup Iteration  21: 779252.509 ops/s
# Warmup Iteration  22: 779371.561 ops/s
# Warmup Iteration  23: 778362.247 ops/s
# Warmup Iteration  24: 777498.618 ops/s
# Warmup Iteration  25: 780990.655 ops/s
# Warmup Iteration  26: 777216.759 ops/s
# Warmup Iteration  27: 780056.334 ops/s
# Warmup Iteration  28: 776487.464 ops/s
# Warmup Iteration  29: 778439.171 ops/s
# Warmup Iteration  30: 775981.462 ops/s
Iteration   1: 777778.412 ops/s
Iteration   2: 777836.079 ops/s
Iteration   3: 780915.040 ops/s
Iteration   4: 779681.852 ops/s
Iteration   5: 778352.613 ops/s
Iteration   6: 772797.848 ops/s
Iteration   7: 776424.565 ops/s
Iteration   8: 774324.267 ops/s
Iteration   9: 777755.087 ops/s
Iteration  10: 773927.867 ops/s
Iteration  11: 778106.045 ops/s
Iteration  12: 781948.607 ops/s
Iteration  13: 774986.489 ops/s
Iteration  14: 777415.551 ops/s
Iteration  15: 780522.226 ops/s
Iteration  16: 778484.617 ops/s
Iteration  17: 774093.563 ops/s
Iteration  18: 774071.340 ops/s
Iteration  19: 780645.973 ops/s
Iteration  20: 777026.211 ops/s
Iteration  21: 778319.561 ops/s
Iteration  22: 777965.174 ops/s
Iteration  23: 776962.504 ops/s
Iteration  24: 776292.937 ops/s
Iteration  25: 774109.271 ops/s
Iteration  26: 777423.318 ops/s
Iteration  27: 781239.026 ops/s
Iteration  28: 779219.577 ops/s
Iteration  29: 779094.573 ops/s
Iteration  30: 773243.511 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletableTest._Benchmark.benchmark_mapperCrash":
  777365.457 ±(99.9%) 1686.450 ops/s [Average]
  (min, avg, max) = (772797.848, 777365.457, 781948.607), stdev = 2524.199
  CI (99.9%): [775679.007, 779051.907] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score      Error  Units
FlowableSwitchMapCompletableTest._Benchmark.benchmark_mapperCrash  thrpt   30  777365.457 ± 1686.450  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletableTest._Benchmark.benchmark_mainError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletableTest._Benchmark.benchmark_mainError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 683042.008 ops/s
# Warmup Iteration   2: 817924.418 ops/s
# Warmup Iteration   3: 882472.087 ops/s
# Warmup Iteration   4: 863048.713 ops/s
# Warmup Iteration   5: 926971.482 ops/s
# Warmup Iteration   6: 923954.996 ops/s
# Warmup Iteration   7: 924521.511 ops/s
# Warmup Iteration   8: 923039.471 ops/s
# Warmup Iteration   9: 926348.406 ops/s
# Warmup Iteration  10: 926221.834 ops/s
# Warmup Iteration  11: 925201.868 ops/s
# Warmup Iteration  12: 928348.316 ops/s
# Warmup Iteration  13: 930767.032 ops/s
# Warmup Iteration  14: 926349.306 ops/s
# Warmup Iteration  15: 927858.919 ops/s
# Warmup Iteration  16: 930236.621 ops/s
# Warmup Iteration  17: 972615.535 ops/s
# Warmup Iteration  18: 972187.581 ops/s
# Warmup Iteration  19: 979802.552 ops/s
# Warmup Iteration  20: 977364.247 ops/s
# Warmup Iteration  21: 978109.100 ops/s
# Warmup Iteration  22: 978771.864 ops/s
# Warmup Iteration  23: 979364.577 ops/s
# Warmup Iteration  24: 968664.715 ops/s
# Warmup Iteration  25: 980271.282 ops/s
# Warmup Iteration  26: 975672.426 ops/s
# Warmup Iteration  27: 975836.500 ops/s
# Warmup Iteration  28: 980837.560 ops/s
# Warmup Iteration  29: 980830.333 ops/s
# Warmup Iteration  30: 976627.231 ops/s
Iteration   1: 977816.166 ops/s
Iteration   2: 981497.753 ops/s
Iteration   3: 980997.758 ops/s
Iteration   4: 976148.200 ops/s
Iteration   5: 975582.877 ops/s
Iteration   6: 976516.711 ops/s
Iteration   7: 973809.004 ops/s
Iteration   8: 978442.348 ops/s
Iteration   9: 981712.257 ops/s
Iteration  10: 973886.599 ops/s
Iteration  11: 976935.190 ops/s
Iteration  12: 983189.788 ops/s
Iteration  13: 971855.725 ops/s
Iteration  14: 978859.824 ops/s
Iteration  15: 972494.541 ops/s
Iteration  16: 972073.084 ops/s
Iteration  17: 981550.702 ops/s
Iteration  18: 983605.425 ops/s
Iteration  19: 976996.719 ops/s
Iteration  20: 974759.216 ops/s
Iteration  21: 980113.636 ops/s
Iteration  22: 975937.640 ops/s
Iteration  23: 978318.275 ops/s
Iteration  24: 979523.403 ops/s
Iteration  25: 978030.199 ops/s
Iteration  26: 976345.760 ops/s
Iteration  27: 977773.919 ops/s
Iteration  28: 977715.831 ops/s
Iteration  29: 977216.699 ops/s
Iteration  30: 978491.411 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletableTest._Benchmark.benchmark_mainError":
  977606.555 ±(99.9%) 2072.100 ops/s [Average]
  (min, avg, max) = (971855.725, 977606.555, 983605.425), stdev = 3101.422
  CI (99.9%): [975534.455, 979678.655] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score      Error  Units
FlowableSwitchMapCompletableTest._Benchmark.benchmark_mainError  thrpt   30  977606.555 ± 2072.100  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletableTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletableTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2198632.354 ops/s
# Warmup Iteration   2: 3228332.423 ops/s
# Warmup Iteration   3: 3685724.009 ops/s
# Warmup Iteration   4: 3692283.500 ops/s
# Warmup Iteration   5: 3669381.399 ops/s
# Warmup Iteration   6: 3650128.183 ops/s
# Warmup Iteration   7: 3682514.047 ops/s
# Warmup Iteration   8: 3663430.711 ops/s
# Warmup Iteration   9: 3683888.672 ops/s
# Warmup Iteration  10: 3669501.986 ops/s
# Warmup Iteration  11: 3685913.118 ops/s
# Warmup Iteration  12: 3674995.647 ops/s
# Warmup Iteration  13: 3680743.036 ops/s
# Warmup Iteration  14: 3669765.114 ops/s
# Warmup Iteration  15: 3674967.268 ops/s
# Warmup Iteration  16: 3681705.352 ops/s
# Warmup Iteration  17: 3672664.186 ops/s
# Warmup Iteration  18: 3680082.905 ops/s
# Warmup Iteration  19: 3674773.540 ops/s
# Warmup Iteration  20: 3668323.908 ops/s
# Warmup Iteration  21: 3696262.033 ops/s
# Warmup Iteration  22: 3654513.977 ops/s
# Warmup Iteration  23: 3679410.347 ops/s
# Warmup Iteration  24: 3678459.445 ops/s
# Warmup Iteration  25: 3692129.270 ops/s
# Warmup Iteration  26: 3696380.716 ops/s
# Warmup Iteration  27: 3686683.049 ops/s
# Warmup Iteration  28: 3688842.627 ops/s
# Warmup Iteration  29: 3687014.371 ops/s
# Warmup Iteration  30: 3674809.349 ops/s
Iteration   1: 3716936.810 ops/s
Iteration   2: 3708646.995 ops/s
Iteration   3: 3698528.167 ops/s
Iteration   4: 3678991.638 ops/s
Iteration   5: 3696789.290 ops/s
Iteration   6: 3682173.226 ops/s
Iteration   7: 3708887.821 ops/s
Iteration   8: 3677870.551 ops/s
Iteration   9: 3706356.493 ops/s
Iteration  10: 3709068.822 ops/s
Iteration  11: 3713518.535 ops/s
Iteration  12: 3717763.855 ops/s
Iteration  13: 3696507.221 ops/s
Iteration  14: 3707780.111 ops/s
Iteration  15: 3689472.216 ops/s
Iteration  16: 3719961.008 ops/s
Iteration  17: 3672218.228 ops/s
Iteration  18: 3696624.715 ops/s
Iteration  19: 3690970.457 ops/s
Iteration  20: 3685350.107 ops/s
Iteration  21: 3686565.902 ops/s
Iteration  22: 3678995.040 ops/s
Iteration  23: 3680088.748 ops/s
Iteration  24: 3687695.370 ops/s
Iteration  25: 3707933.118 ops/s
Iteration  26: 3683104.596 ops/s
Iteration  27: 3685738.957 ops/s
Iteration  28: 3690732.038 ops/s
Iteration  29: 3695842.603 ops/s
Iteration  30: 3669408.610 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletableTest._Benchmark.benchmark_dispose":
  3694684.041 ±(99.9%) 9527.083 ops/s [Average]
  (min, avg, max) = (3669408.610, 3694684.041, 3719961.008), stdev = 14259.690
  CI (99.9%): [3685156.958, 3704211.124] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
FlowableSwitchMapCompletableTest._Benchmark.benchmark_dispose  thrpt   30  3694684.041 ± 9527.083  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletableTest._Benchmark.benchmark_mainErrorDelayed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletableTest._Benchmark.benchmark_mainErrorDelayed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 549320.493 ops/s
# Warmup Iteration   2: 688170.128 ops/s
# Warmup Iteration   3: 742697.911 ops/s
# Warmup Iteration   4: 743193.147 ops/s
# Warmup Iteration   5: 791899.229 ops/s
# Warmup Iteration   6: 790009.794 ops/s
# Warmup Iteration   7: 791440.525 ops/s
# Warmup Iteration   8: 795237.385 ops/s
# Warmup Iteration   9: 793062.902 ops/s
# Warmup Iteration  10: 794648.408 ops/s
# Warmup Iteration  11: 793809.699 ops/s
# Warmup Iteration  12: 793812.684 ops/s
# Warmup Iteration  13: 793865.198 ops/s
# Warmup Iteration  14: 792786.480 ops/s
# Warmup Iteration  15: 795848.806 ops/s
# Warmup Iteration  16: 794837.091 ops/s
# Warmup Iteration  17: 828539.217 ops/s
# Warmup Iteration  18: 824173.044 ops/s
# Warmup Iteration  19: 828428.907 ops/s
# Warmup Iteration  20: 829226.379 ops/s
# Warmup Iteration  21: 825867.381 ops/s
# Warmup Iteration  22: 824779.480 ops/s
# Warmup Iteration  23: 828861.290 ops/s
# Warmup Iteration  24: 831076.255 ops/s
# Warmup Iteration  25: 829165.835 ops/s
# Warmup Iteration  26: 830409.631 ops/s
# Warmup Iteration  27: 825420.576 ops/s
# Warmup Iteration  28: 833752.559 ops/s
# Warmup Iteration  29: 831945.150 ops/s
# Warmup Iteration  30: 831063.037 ops/s
Iteration   1: 827452.909 ops/s
Iteration   2: 828873.348 ops/s
Iteration   3: 826680.316 ops/s
Iteration   4: 827330.220 ops/s
Iteration   5: 832001.578 ops/s
Iteration   6: 824390.133 ops/s
Iteration   7: 829905.097 ops/s
Iteration   8: 828598.217 ops/s
Iteration   9: 826746.085 ops/s
Iteration  10: 833175.020 ops/s
Iteration  11: 828857.928 ops/s
Iteration  12: 827863.414 ops/s
Iteration  13: 829817.792 ops/s
Iteration  14: 830653.759 ops/s
Iteration  15: 831864.967 ops/s
Iteration  16: 827006.165 ops/s
Iteration  17: 832804.580 ops/s
Iteration  18: 828514.754 ops/s
Iteration  19: 831701.194 ops/s
Iteration  20: 834328.161 ops/s
Iteration  21: 830824.323 ops/s
Iteration  22: 824425.562 ops/s
Iteration  23: 828249.501 ops/s
Iteration  24: 825002.507 ops/s
Iteration  25: 831303.349 ops/s
Iteration  26: 827477.280 ops/s
Iteration  27: 826862.081 ops/s
Iteration  28: 828245.038 ops/s
Iteration  29: 825395.945 ops/s
Iteration  30: 834948.720 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletableTest._Benchmark.benchmark_mainErrorDelayed":
  829043.331 ±(99.9%) 1895.838 ops/s [Average]
  (min, avg, max) = (824390.133, 829043.331, 834948.720), stdev = 2837.601
  CI (99.9%): [827147.493, 830939.169] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score      Error  Units
FlowableSwitchMapCompletableTest._Benchmark.benchmark_mainErrorDelayed  thrpt   30  829043.331 ± 1895.838  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableConcatTest._Benchmark.benchmark_syncFusedUnboundedIn$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableConcatTest._Benchmark.benchmark_syncFusedUnboundedIn

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3990027.177 ops/s
# Warmup Iteration   2: 6155172.726 ops/s
# Warmup Iteration   3: 6677764.193 ops/s
# Warmup Iteration   4: 6695563.859 ops/s
# Warmup Iteration   5: 6696769.242 ops/s
# Warmup Iteration   6: 6615080.018 ops/s
# Warmup Iteration   7: 6743444.009 ops/s
# Warmup Iteration   8: 6659310.791 ops/s
# Warmup Iteration   9: 6658390.750 ops/s
# Warmup Iteration  10: 6739301.589 ops/s
# Warmup Iteration  11: 6744561.907 ops/s
# Warmup Iteration  12: 6675060.320 ops/s
# Warmup Iteration  13: 6603108.057 ops/s
# Warmup Iteration  14: 6627855.561 ops/s
# Warmup Iteration  15: 6695119.523 ops/s
# Warmup Iteration  16: 6641641.766 ops/s
# Warmup Iteration  17: 6716795.457 ops/s
# Warmup Iteration  18: 6696821.021 ops/s
# Warmup Iteration  19: 6674400.434 ops/s
# Warmup Iteration  20: 6744773.439 ops/s
# Warmup Iteration  21: 6719896.773 ops/s
# Warmup Iteration  22: 6645834.503 ops/s
# Warmup Iteration  23: 6658568.088 ops/s
# Warmup Iteration  24: 6694584.457 ops/s
# Warmup Iteration  25: 6659895.694 ops/s
# Warmup Iteration  26: 6705713.915 ops/s
# Warmup Iteration  27: 6689207.954 ops/s
# Warmup Iteration  28: 6665338.622 ops/s
# Warmup Iteration  29: 6739785.031 ops/s
# Warmup Iteration  30: 6695324.483 ops/s
Iteration   1: 6698837.114 ops/s
Iteration   2: 6741847.658 ops/s
Iteration   3: 6709630.345 ops/s
Iteration   4: 6670782.500 ops/s
Iteration   5: 6661970.097 ops/s
Iteration   6: 6625713.850 ops/s
Iteration   7: 6716385.905 ops/s
Iteration   8: 6734168.072 ops/s
Iteration   9: 6704678.832 ops/s
Iteration  10: 6655439.544 ops/s
Iteration  11: 6650300.004 ops/s
Iteration  12: 6720174.415 ops/s
Iteration  13: 6722238.738 ops/s
Iteration  14: 6654900.201 ops/s
Iteration  15: 6630778.175 ops/s
Iteration  16: 6703623.132 ops/s
Iteration  17: 6709762.424 ops/s
Iteration  18: 6709214.250 ops/s
Iteration  19: 6667393.624 ops/s
Iteration  20: 6694777.111 ops/s
Iteration  21: 6685698.264 ops/s
Iteration  22: 6694714.055 ops/s
Iteration  23: 6707313.085 ops/s
Iteration  24: 6683385.061 ops/s
Iteration  25: 6727295.430 ops/s
Iteration  26: 6666568.884 ops/s
Iteration  27: 6665948.761 ops/s
Iteration  28: 6710404.434 ops/s
Iteration  29: 6693636.185 ops/s
Iteration  30: 6616117.015 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatTest._Benchmark.benchmark_syncFusedUnboundedIn":
  6687789.905 ±(99.9%) 21803.411 ops/s [Average]
  (min, avg, max) = (6616117.015, 6687789.905, 6741847.658), stdev = 32634.322
  CI (99.9%): [6665986.495, 6709593.316] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
CompletableConcatTest._Benchmark.benchmark_syncFusedUnboundedIn  thrpt   30  6687789.905 ± 21803.411  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableSwitchOnNextTest._Benchmark.benchmark_noDelaySwitch$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableSwitchOnNextTest._Benchmark.benchmark_noDelaySwitch

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1740660.575 ops/s
# Warmup Iteration   2: 2221179.299 ops/s
# Warmup Iteration   3: 2668696.707 ops/s
# Warmup Iteration   4: 2678900.666 ops/s
# Warmup Iteration   5: 2679295.753 ops/s
# Warmup Iteration   6: 2695678.256 ops/s
# Warmup Iteration   7: 2676963.249 ops/s
# Warmup Iteration   8: 2692607.535 ops/s
# Warmup Iteration   9: 2664640.737 ops/s
# Warmup Iteration  10: 2681034.160 ops/s
# Warmup Iteration  11: 2665036.165 ops/s
# Warmup Iteration  12: 2686014.305 ops/s
# Warmup Iteration  13: 2689129.352 ops/s
# Warmup Iteration  14: 2670801.781 ops/s
# Warmup Iteration  15: 2682235.888 ops/s
# Warmup Iteration  16: 2685738.584 ops/s
# Warmup Iteration  17: 2681134.567 ops/s
# Warmup Iteration  18: 2675239.939 ops/s
# Warmup Iteration  19: 2671361.150 ops/s
# Warmup Iteration  20: 2699215.198 ops/s
# Warmup Iteration  21: 2687251.046 ops/s
# Warmup Iteration  22: 2673849.337 ops/s
# Warmup Iteration  23: 2656274.258 ops/s
# Warmup Iteration  24: 2671497.295 ops/s
# Warmup Iteration  25: 2687206.436 ops/s
# Warmup Iteration  26: 2681647.567 ops/s
# Warmup Iteration  27: 2673165.584 ops/s
# Warmup Iteration  28: 2684040.473 ops/s
# Warmup Iteration  29: 2673027.241 ops/s
# Warmup Iteration  30: 2689253.990 ops/s
Iteration   1: 2669879.148 ops/s
Iteration   2: 2682398.496 ops/s
Iteration   3: 2664786.079 ops/s
Iteration   4: 2686245.696 ops/s
Iteration   5: 2665519.952 ops/s
Iteration   6: 2656565.034 ops/s
Iteration   7: 2687221.082 ops/s
Iteration   8: 2673230.985 ops/s
Iteration   9: 2658506.682 ops/s
Iteration  10: 2688531.374 ops/s
Iteration  11: 2687959.209 ops/s
Iteration  12: 2690029.688 ops/s
Iteration  13: 2693598.859 ops/s
Iteration  14: 2671242.340 ops/s
Iteration  15: 2680047.597 ops/s
Iteration  16: 2675509.396 ops/s
Iteration  17: 2685922.264 ops/s
Iteration  18: 2683679.678 ops/s
Iteration  19: 2677040.369 ops/s
Iteration  20: 2669456.541 ops/s
Iteration  21: 2677353.609 ops/s
Iteration  22: 2683830.952 ops/s
Iteration  23: 2689126.728 ops/s
Iteration  24: 2654287.457 ops/s
Iteration  25: 2701684.151 ops/s
Iteration  26: 2661992.219 ops/s
Iteration  27: 2677332.653 ops/s
Iteration  28: 2691108.470 ops/s
Iteration  29: 2678686.278 ops/s
Iteration  30: 2685984.960 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableSwitchOnNextTest._Benchmark.benchmark_noDelaySwitch":
  2678291.931 ±(99.9%) 7871.695 ops/s [Average]
  (min, avg, max) = (2654287.457, 2678291.931, 2701684.151), stdev = 11781.983
  CI (99.9%): [2670420.237, 2686163.626] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
CompletableSwitchOnNextTest._Benchmark.benchmark_noDelaySwitch  thrpt   30  2678291.931 ± 7871.695  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableStartWithTest._Benchmark.benchmark_justCompletableComplete$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableStartWithTest._Benchmark.benchmark_justCompletableComplete

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2411629.610 ops/s
# Warmup Iteration   2: 3611837.857 ops/s
# Warmup Iteration   3: 4092718.773 ops/s
# Warmup Iteration   4: 4135814.708 ops/s
# Warmup Iteration   5: 4141561.777 ops/s
# Warmup Iteration   6: 4118061.047 ops/s
# Warmup Iteration   7: 4117277.801 ops/s
# Warmup Iteration   8: 4080650.933 ops/s
# Warmup Iteration   9: 4129095.279 ops/s
# Warmup Iteration  10: 4140927.172 ops/s
# Warmup Iteration  11: 4080110.528 ops/s
# Warmup Iteration  12: 4102072.848 ops/s
# Warmup Iteration  13: 4104490.402 ops/s
# Warmup Iteration  14: 4110438.281 ops/s
# Warmup Iteration  15: 4115144.682 ops/s
# Warmup Iteration  16: 4109448.637 ops/s
# Warmup Iteration  17: 4125434.178 ops/s
# Warmup Iteration  18: 4108206.323 ops/s
# Warmup Iteration  19: 4128980.492 ops/s
# Warmup Iteration  20: 4149562.236 ops/s
# Warmup Iteration  21: 4136252.663 ops/s
# Warmup Iteration  22: 4108368.238 ops/s
# Warmup Iteration  23: 4134247.615 ops/s
# Warmup Iteration  24: 4122554.322 ops/s
# Warmup Iteration  25: 4097824.949 ops/s
# Warmup Iteration  26: 4134460.762 ops/s
# Warmup Iteration  27: 4107557.416 ops/s
# Warmup Iteration  28: 4107104.454 ops/s
# Warmup Iteration  29: 4101383.077 ops/s
# Warmup Iteration  30: 4178668.126 ops/s
Iteration   1: 4133124.402 ops/s
Iteration   2: 4092127.572 ops/s
Iteration   3: 4127265.529 ops/s
Iteration   4: 4114295.182 ops/s
Iteration   5: 4134568.337 ops/s
Iteration   6: 4133380.149 ops/s
Iteration   7: 4080994.429 ops/s
Iteration   8: 4163143.386 ops/s
Iteration   9: 4128792.786 ops/s
Iteration  10: 4132219.959 ops/s
Iteration  11: 4117535.270 ops/s
Iteration  12: 4117392.536 ops/s
Iteration  13: 4140700.615 ops/s
Iteration  14: 4119730.524 ops/s
Iteration  15: 4117374.451 ops/s
Iteration  16: 4117154.150 ops/s
Iteration  17: 4138074.663 ops/s
Iteration  18: 4157449.818 ops/s
Iteration  19: 4125176.991 ops/s
Iteration  20: 4139093.064 ops/s
Iteration  21: 4149973.557 ops/s
Iteration  22: 4113106.359 ops/s
Iteration  23: 4111262.891 ops/s
Iteration  24: 4136374.113 ops/s
Iteration  25: 4110414.190 ops/s
Iteration  26: 4115068.859 ops/s
Iteration  27: 4139565.135 ops/s
Iteration  28: 4109500.561 ops/s
Iteration  29: 4139938.048 ops/s
Iteration  30: 4108595.396 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableStartWithTest._Benchmark.benchmark_justCompletableComplete":
  4125446.431 ±(99.9%) 11867.192 ops/s [Average]
  (min, avg, max) = (4080994.429, 4125446.431, 4163143.386), stdev = 17762.255
  CI (99.9%): [4113579.239, 4137313.622] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
FlowableStartWithTest._Benchmark.benchmark_justCompletableComplete  thrpt   30  4125446.431 ± 11867.192  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletableTest._Benchmark.benchmark_innerErrorDelayed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletableTest._Benchmark.benchmark_innerErrorDelayed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 514259.589 ops/s
# Warmup Iteration   2: 695258.328 ops/s
# Warmup Iteration   3: 806681.126 ops/s
# Warmup Iteration   4: 806185.736 ops/s
# Warmup Iteration   5: 810414.685 ops/s
# Warmup Iteration   6: 808884.934 ops/s
# Warmup Iteration   7: 809595.506 ops/s
# Warmup Iteration   8: 807081.373 ops/s
# Warmup Iteration   9: 809021.603 ops/s
# Warmup Iteration  10: 805919.282 ops/s
# Warmup Iteration  11: 801535.535 ops/s
# Warmup Iteration  12: 812449.169 ops/s
# Warmup Iteration  13: 808811.961 ops/s
# Warmup Iteration  14: 804227.425 ops/s
# Warmup Iteration  15: 807312.553 ops/s
# Warmup Iteration  16: 802906.282 ops/s
# Warmup Iteration  17: 839166.301 ops/s
# Warmup Iteration  18: 848430.840 ops/s
# Warmup Iteration  19: 839534.241 ops/s
# Warmup Iteration  20: 844167.681 ops/s
# Warmup Iteration  21: 848786.838 ops/s
# Warmup Iteration  22: 839092.260 ops/s
# Warmup Iteration  23: 847621.508 ops/s
# Warmup Iteration  24: 848629.971 ops/s
# Warmup Iteration  25: 844380.695 ops/s
# Warmup Iteration  26: 845323.910 ops/s
# Warmup Iteration  27: 848486.453 ops/s
# Warmup Iteration  28: 848724.886 ops/s
# Warmup Iteration  29: 843833.620 ops/s
# Warmup Iteration  30: 845545.107 ops/s
Iteration   1: 846296.740 ops/s
Iteration   2: 846944.440 ops/s
Iteration   3: 847142.160 ops/s
Iteration   4: 853234.821 ops/s
Iteration   5: 847380.897 ops/s
Iteration   6: 845326.291 ops/s
Iteration   7: 841744.260 ops/s
Iteration   8: 846210.106 ops/s
Iteration   9: 846015.579 ops/s
Iteration  10: 841618.654 ops/s
Iteration  11: 844449.809 ops/s
Iteration  12: 843041.975 ops/s
Iteration  13: 843642.267 ops/s
Iteration  14: 847955.164 ops/s
Iteration  15: 847459.868 ops/s
Iteration  16: 845577.851 ops/s
Iteration  17: 848898.350 ops/s
Iteration  18: 847182.678 ops/s
Iteration  19: 846395.064 ops/s
Iteration  20: 841705.116 ops/s
Iteration  21: 843740.923 ops/s
Iteration  22: 845407.249 ops/s
Iteration  23: 843621.288 ops/s
Iteration  24: 843552.625 ops/s
Iteration  25: 851099.246 ops/s
Iteration  26: 843458.284 ops/s
Iteration  27: 848655.394 ops/s
Iteration  28: 843719.290 ops/s
Iteration  29: 844818.696 ops/s
Iteration  30: 844042.493 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletableTest._Benchmark.benchmark_innerErrorDelayed":
  845677.919 ±(99.9%) 1795.817 ops/s [Average]
  (min, avg, max) = (841618.654, 845677.919, 853234.821), stdev = 2687.894
  CI (99.9%): [843882.103, 847473.736] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score      Error  Units
FlowableSwitchMapCompletableTest._Benchmark.benchmark_innerErrorDelayed  thrpt   30  845677.919 ± 1795.817  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletableTest._Benchmark.benchmark_mainCompletesinnerErrorDelayed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletableTest._Benchmark.benchmark_mainCompletesinnerErrorDelayed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 539677.890 ops/s
# Warmup Iteration   2: 697700.259 ops/s
# Warmup Iteration   3: 805442.432 ops/s
# Warmup Iteration   4: 805056.578 ops/s
# Warmup Iteration   5: 806205.669 ops/s
# Warmup Iteration   6: 805474.733 ops/s
# Warmup Iteration   7: 803070.245 ops/s
# Warmup Iteration   8: 806366.858 ops/s
# Warmup Iteration   9: 800827.556 ops/s
# Warmup Iteration  10: 797740.391 ops/s
# Warmup Iteration  11: 795998.169 ops/s
# Warmup Iteration  12: 800778.778 ops/s
# Warmup Iteration  13: 804130.669 ops/s
# Warmup Iteration  14: 799130.120 ops/s
# Warmup Iteration  15: 798079.541 ops/s
# Warmup Iteration  16: 803246.445 ops/s
# Warmup Iteration  17: 837190.163 ops/s
# Warmup Iteration  18: 836040.353 ops/s
# Warmup Iteration  19: 837179.450 ops/s
# Warmup Iteration  20: 834961.267 ops/s
# Warmup Iteration  21: 838299.941 ops/s
# Warmup Iteration  22: 843948.099 ops/s
# Warmup Iteration  23: 838049.369 ops/s
# Warmup Iteration  24: 842972.894 ops/s
# Warmup Iteration  25: 840452.264 ops/s
# Warmup Iteration  26: 835838.338 ops/s
# Warmup Iteration  27: 837759.684 ops/s
# Warmup Iteration  28: 841683.112 ops/s
# Warmup Iteration  29: 837844.824 ops/s
# Warmup Iteration  30: 843338.828 ops/s
Iteration   1: 838949.979 ops/s
Iteration   2: 837445.606 ops/s
Iteration   3: 833740.197 ops/s
Iteration   4: 838672.098 ops/s
Iteration   5: 837632.331 ops/s
Iteration   6: 842431.166 ops/s
Iteration   7: 843895.080 ops/s
Iteration   8: 843092.291 ops/s
Iteration   9: 842297.002 ops/s
Iteration  10: 842452.499 ops/s
Iteration  11: 844899.047 ops/s
Iteration  12: 838578.159 ops/s
Iteration  13: 841417.252 ops/s
Iteration  14: 838238.358 ops/s
Iteration  15: 842265.860 ops/s
Iteration  16: 844968.259 ops/s
Iteration  17: 842328.946 ops/s
Iteration  18: 841410.834 ops/s
Iteration  19: 843028.368 ops/s
Iteration  20: 841887.727 ops/s
Iteration  21: 841956.695 ops/s
Iteration  22: 839938.742 ops/s
Iteration  23: 839697.777 ops/s
Iteration  24: 843168.217 ops/s
Iteration  25: 842615.986 ops/s
Iteration  26: 841855.799 ops/s
Iteration  27: 842571.891 ops/s
Iteration  28: 839530.365 ops/s
Iteration  29: 844225.802 ops/s
Iteration  30: 833917.124 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletableTest._Benchmark.benchmark_mainCompletesinnerErrorDelayed":
  840970.315 ±(99.9%) 1901.545 ops/s [Average]
  (min, avg, max) = (833740.197, 840970.315, 844968.259), stdev = 2846.144
  CI (99.9%): [839068.770, 842871.861] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              Mode  Cnt       Score      Error  Units
FlowableSwitchMapCompletableTest._Benchmark.benchmark_mainCompletesinnerErrorDelayed  thrpt   30  840970.315 ± 1901.545  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletableTest._Benchmark.benchmark_innerError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletableTest._Benchmark.benchmark_innerError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 531766.330 ops/s
# Warmup Iteration   2: 688139.374 ops/s
# Warmup Iteration   3: 749853.061 ops/s
# Warmup Iteration   4: 752693.110 ops/s
# Warmup Iteration   5: 808695.064 ops/s
# Warmup Iteration   6: 806420.167 ops/s
# Warmup Iteration   7: 804237.554 ops/s
# Warmup Iteration   8: 803153.503 ops/s
# Warmup Iteration   9: 801967.587 ops/s
# Warmup Iteration  10: 805126.928 ops/s
# Warmup Iteration  11: 798029.133 ops/s
# Warmup Iteration  12: 798795.719 ops/s
# Warmup Iteration  13: 803540.177 ops/s
# Warmup Iteration  14: 799051.052 ops/s
# Warmup Iteration  15: 793656.384 ops/s
# Warmup Iteration  16: 793579.804 ops/s
# Warmup Iteration  17: 830580.158 ops/s
# Warmup Iteration  18: 836413.404 ops/s
# Warmup Iteration  19: 837361.991 ops/s
# Warmup Iteration  20: 832754.340 ops/s
# Warmup Iteration  21: 841142.921 ops/s
# Warmup Iteration  22: 831294.759 ops/s
# Warmup Iteration  23: 829191.570 ops/s
# Warmup Iteration  24: 836095.755 ops/s
# Warmup Iteration  25: 834241.679 ops/s
# Warmup Iteration  26: 836357.080 ops/s
# Warmup Iteration  27: 834449.518 ops/s
# Warmup Iteration  28: 832884.822 ops/s
# Warmup Iteration  29: 834783.626 ops/s
# Warmup Iteration  30: 833072.810 ops/s
Iteration   1: 835709.253 ops/s
Iteration   2: 835924.090 ops/s
Iteration   3: 840157.877 ops/s
Iteration   4: 838320.834 ops/s
Iteration   5: 838158.395 ops/s
Iteration   6: 834769.249 ops/s
Iteration   7: 835200.947 ops/s
Iteration   8: 838432.341 ops/s
Iteration   9: 835104.530 ops/s
Iteration  10: 838404.926 ops/s
Iteration  11: 835731.064 ops/s
Iteration  12: 838342.124 ops/s
Iteration  13: 835547.751 ops/s
Iteration  14: 832430.971 ops/s
Iteration  15: 839500.715 ops/s
Iteration  16: 833478.826 ops/s
Iteration  17: 834332.037 ops/s
Iteration  18: 831882.429 ops/s
Iteration  19: 834687.977 ops/s
Iteration  20: 836897.078 ops/s
Iteration  21: 834493.428 ops/s
Iteration  22: 830432.736 ops/s
Iteration  23: 834040.351 ops/s
Iteration  24: 834573.776 ops/s
Iteration  25: 836412.788 ops/s
Iteration  26: 839021.199 ops/s
Iteration  27: 832934.485 ops/s
Iteration  28: 837868.987 ops/s
Iteration  29: 839286.131 ops/s
Iteration  30: 835844.046 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletableTest._Benchmark.benchmark_innerError":
  835930.711 ±(99.9%) 1633.988 ops/s [Average]
  (min, avg, max) = (830432.736, 835930.711, 840157.877), stdev = 2445.676
  CI (99.9%): [834296.724, 837564.699] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
FlowableSwitchMapCompletableTest._Benchmark.benchmark_innerError  thrpt   30  835930.711 ± 1633.988  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableSwitchOnNextTest._Benchmark.benchmark_delaySwitch$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableSwitchOnNextTest._Benchmark.benchmark_delaySwitch

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 512324.751 ops/s
# Warmup Iteration   2: 658895.673 ops/s
# Warmup Iteration   3: 685849.854 ops/s
# Warmup Iteration   4: 724708.970 ops/s
# Warmup Iteration   5: 756795.504 ops/s
# Warmup Iteration   6: 753353.900 ops/s
# Warmup Iteration   7: 755930.040 ops/s
# Warmup Iteration   8: 754005.068 ops/s
# Warmup Iteration   9: 753655.225 ops/s
# Warmup Iteration  10: 755312.046 ops/s
# Warmup Iteration  11: 754511.981 ops/s
# Warmup Iteration  12: 752153.561 ops/s
# Warmup Iteration  13: 749955.352 ops/s
# Warmup Iteration  14: 751263.260 ops/s
# Warmup Iteration  15: 746632.612 ops/s
# Warmup Iteration  16: 748764.851 ops/s
# Warmup Iteration  17: 780470.699 ops/s
# Warmup Iteration  18: 783929.979 ops/s
# Warmup Iteration  19: 784720.565 ops/s
# Warmup Iteration  20: 783967.136 ops/s
# Warmup Iteration  21: 789456.710 ops/s
# Warmup Iteration  22: 783254.881 ops/s
# Warmup Iteration  23: 783646.249 ops/s
# Warmup Iteration  24: 787134.046 ops/s
# Warmup Iteration  25: 785148.239 ops/s
# Warmup Iteration  26: 783292.827 ops/s
# Warmup Iteration  27: 785469.775 ops/s
# Warmup Iteration  28: 786111.352 ops/s
# Warmup Iteration  29: 782378.636 ops/s
# Warmup Iteration  30: 785984.483 ops/s
Iteration   1: 783353.670 ops/s
Iteration   2: 784746.405 ops/s
Iteration   3: 784765.213 ops/s
Iteration   4: 787286.435 ops/s
Iteration   5: 785062.560 ops/s
Iteration   6: 781558.959 ops/s
Iteration   7: 784332.421 ops/s
Iteration   8: 787877.229 ops/s
Iteration   9: 783755.480 ops/s
Iteration  10: 782297.531 ops/s
Iteration  11: 782605.869 ops/s
Iteration  12: 782976.658 ops/s
Iteration  13: 784744.317 ops/s
Iteration  14: 786831.865 ops/s
Iteration  15: 778243.484 ops/s
Iteration  16: 783268.844 ops/s
Iteration  17: 786397.825 ops/s
Iteration  18: 785641.653 ops/s
Iteration  19: 783247.335 ops/s
Iteration  20: 781207.446 ops/s
Iteration  21: 781688.885 ops/s
Iteration  22: 785414.898 ops/s
Iteration  23: 781104.188 ops/s
Iteration  24: 787532.616 ops/s
Iteration  25: 784040.601 ops/s
Iteration  26: 785871.170 ops/s
Iteration  27: 785797.191 ops/s
Iteration  28: 782524.936 ops/s
Iteration  29: 780051.256 ops/s
Iteration  30: 785478.199 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableSwitchOnNextTest._Benchmark.benchmark_delaySwitch":
  783990.171 ±(99.9%) 1542.049 ops/s [Average]
  (min, avg, max) = (778243.484, 783990.171, 787877.229), stdev = 2308.066
  CI (99.9%): [782448.123, 785532.220] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
CompletableSwitchOnNextTest._Benchmark.benchmark_delaySwitch  thrpt   30  783990.171 ± 1542.049  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletableTest._Benchmark.benchmark_undeliverableUponCancel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletableTest._Benchmark.benchmark_undeliverableUponCancel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 162158.232 ops/s
# Warmup Iteration   2: 235792.426 ops/s
# Warmup Iteration   3: 228659.121 ops/s
# Warmup Iteration   4: 256360.826 ops/s
# Warmup Iteration   5: 262226.111 ops/s
# Warmup Iteration   6: 262078.351 ops/s
# Warmup Iteration   7: 262147.710 ops/s
# Warmup Iteration   8: 261360.486 ops/s
# Warmup Iteration   9: 263024.441 ops/s
# Warmup Iteration  10: 261441.939 ops/s
# Warmup Iteration  11: 261918.372 ops/s
# Warmup Iteration  12: 260765.559 ops/s
# Warmup Iteration  13: 259615.042 ops/s
# Warmup Iteration  14: 258143.656 ops/s
# Warmup Iteration  15: 260952.251 ops/s
# Warmup Iteration  16: 259083.992 ops/s
# Warmup Iteration  17: 270886.396 ops/s
# Warmup Iteration  18: 271338.565 ops/s
# Warmup Iteration  19: 268960.237 ops/s
# Warmup Iteration  20: 269812.588 ops/s
# Warmup Iteration  21: 269905.099 ops/s
# Warmup Iteration  22: 271900.200 ops/s
# Warmup Iteration  23: 272020.968 ops/s
# Warmup Iteration  24: 270673.693 ops/s
# Warmup Iteration  25: 269866.100 ops/s
# Warmup Iteration  26: 271227.690 ops/s
# Warmup Iteration  27: 270388.030 ops/s
# Warmup Iteration  28: 270370.893 ops/s
# Warmup Iteration  29: 269114.997 ops/s
# Warmup Iteration  30: 270097.465 ops/s
Iteration   1: 269542.234 ops/s
Iteration   2: 270817.109 ops/s
Iteration   3: 270547.193 ops/s
Iteration   4: 271244.209 ops/s
Iteration   5: 270935.372 ops/s
Iteration   6: 270590.985 ops/s
Iteration   7: 271142.783 ops/s
Iteration   8: 271178.981 ops/s
Iteration   9: 271056.401 ops/s
Iteration  10: 270768.801 ops/s
Iteration  11: 270673.774 ops/s
Iteration  12: 270562.558 ops/s
Iteration  13: 270859.291 ops/s
Iteration  14: 269474.319 ops/s
Iteration  15: 270455.642 ops/s
Iteration  16: 268567.982 ops/s
Iteration  17: 269959.214 ops/s
Iteration  18: 271232.354 ops/s
Iteration  19: 269360.921 ops/s
Iteration  20: 270443.279 ops/s
Iteration  21: 269969.166 ops/s
Iteration  22: 271632.177 ops/s
Iteration  23: 270811.401 ops/s
Iteration  24: 270524.658 ops/s
Iteration  25: 271445.783 ops/s
Iteration  26: 269959.381 ops/s
Iteration  27: 270745.205 ops/s
Iteration  28: 270266.677 ops/s
Iteration  29: 270491.242 ops/s
Iteration  30: 269863.815 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletableTest._Benchmark.benchmark_undeliverableUponCancel":
  270504.097 ±(99.9%) 455.407 ops/s [Average]
  (min, avg, max) = (268567.982, 270504.097, 271632.177), stdev = 681.631
  CI (99.9%): [270048.690, 270959.504] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt       Score     Error  Units
FlowableSwitchMapCompletableTest._Benchmark.benchmark_undeliverableUponCancel  thrpt   30  270504.097 ± 455.407  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletableTest._Benchmark.benchmark_undeliverableUponCancelDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletableTest._Benchmark.benchmark_undeliverableUponCancelDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 169658.721 ops/s
# Warmup Iteration   2: 237958.103 ops/s
# Warmup Iteration   3: 228330.004 ops/s
# Warmup Iteration   4: 257991.126 ops/s
# Warmup Iteration   5: 261349.294 ops/s
# Warmup Iteration   6: 261450.134 ops/s
# Warmup Iteration   7: 260511.066 ops/s
# Warmup Iteration   8: 261083.317 ops/s
# Warmup Iteration   9: 260402.261 ops/s
# Warmup Iteration  10: 260240.275 ops/s
# Warmup Iteration  11: 260417.556 ops/s
# Warmup Iteration  12: 259480.153 ops/s
# Warmup Iteration  13: 258800.312 ops/s
# Warmup Iteration  14: 258085.715 ops/s
# Warmup Iteration  15: 260862.786 ops/s
# Warmup Iteration  16: 261350.643 ops/s
# Warmup Iteration  17: 267062.093 ops/s
# Warmup Iteration  18: 267986.580 ops/s
# Warmup Iteration  19: 267387.825 ops/s
# Warmup Iteration  20: 267044.741 ops/s
# Warmup Iteration  21: 268238.215 ops/s
# Warmup Iteration  22: 267628.875 ops/s
# Warmup Iteration  23: 267862.458 ops/s
# Warmup Iteration  24: 265904.591 ops/s
# Warmup Iteration  25: 266597.425 ops/s
# Warmup Iteration  26: 267380.845 ops/s
# Warmup Iteration  27: 266699.763 ops/s
# Warmup Iteration  28: 267290.127 ops/s
# Warmup Iteration  29: 268178.583 ops/s
# Warmup Iteration  30: 268489.861 ops/s
Iteration   1: 268087.638 ops/s
Iteration   2: 267243.972 ops/s
Iteration   3: 266589.716 ops/s
Iteration   4: 268209.527 ops/s
Iteration   5: 268080.146 ops/s
Iteration   6: 268605.898 ops/s
Iteration   7: 268283.981 ops/s
Iteration   8: 267795.909 ops/s
Iteration   9: 267268.205 ops/s
Iteration  10: 268585.121 ops/s
Iteration  11: 269315.168 ops/s
Iteration  12: 268653.179 ops/s
Iteration  13: 266918.287 ops/s
Iteration  14: 268605.742 ops/s
Iteration  15: 268976.639 ops/s
Iteration  16: 269329.662 ops/s
Iteration  17: 270049.361 ops/s
Iteration  18: 268484.491 ops/s
Iteration  19: 268548.912 ops/s
Iteration  20: 269128.122 ops/s
Iteration  21: 268166.120 ops/s
Iteration  22: 269306.550 ops/s
Iteration  23: 269767.548 ops/s
Iteration  24: 268300.164 ops/s
Iteration  25: 268788.923 ops/s
Iteration  26: 267986.491 ops/s
Iteration  27: 268970.758 ops/s
Iteration  28: 268324.023 ops/s
Iteration  29: 269002.513 ops/s
Iteration  30: 268475.096 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletableTest._Benchmark.benchmark_undeliverableUponCancelDelayError":
  268461.595 ±(99.9%) 524.418 ops/s [Average]
  (min, avg, max) = (266589.716, 268461.595, 270049.361), stdev = 784.925
  CI (99.9%): [267937.177, 268986.014] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                 Mode  Cnt       Score     Error  Units
FlowableSwitchMapCompletableTest._Benchmark.benchmark_undeliverableUponCancelDelayError  thrpt   30  268461.595 ± 524.418  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletableTest._Benchmark.benchmark_innerErrorThenMainError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletableTest._Benchmark.benchmark_innerErrorThenMainError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 150091.826 ops/s
# Warmup Iteration   2: 214818.641 ops/s
# Warmup Iteration   3: 211552.043 ops/s
# Warmup Iteration   4: 238291.085 ops/s
# Warmup Iteration   5: 240821.933 ops/s
# Warmup Iteration   6: 241006.727 ops/s
# Warmup Iteration   7: 240330.289 ops/s
# Warmup Iteration   8: 240815.198 ops/s
# Warmup Iteration   9: 239635.697 ops/s
# Warmup Iteration  10: 238462.629 ops/s
# Warmup Iteration  11: 238887.948 ops/s
# Warmup Iteration  12: 239075.639 ops/s
# Warmup Iteration  13: 239943.773 ops/s
# Warmup Iteration  14: 238283.309 ops/s
# Warmup Iteration  15: 239155.583 ops/s
# Warmup Iteration  16: 238243.934 ops/s
# Warmup Iteration  17: 249041.425 ops/s
# Warmup Iteration  18: 246905.013 ops/s
# Warmup Iteration  19: 249136.820 ops/s
# Warmup Iteration  20: 248061.583 ops/s
# Warmup Iteration  21: 247311.522 ops/s
# Warmup Iteration  22: 247863.366 ops/s
# Warmup Iteration  23: 247779.270 ops/s
# Warmup Iteration  24: 247110.614 ops/s
# Warmup Iteration  25: 246825.349 ops/s
# Warmup Iteration  26: 246440.503 ops/s
# Warmup Iteration  27: 247159.940 ops/s
# Warmup Iteration  28: 247148.864 ops/s
# Warmup Iteration  29: 249086.395 ops/s
# Warmup Iteration  30: 247880.555 ops/s
Iteration   1: 248818.481 ops/s
Iteration   2: 248035.655 ops/s
Iteration   3: 246400.879 ops/s
Iteration   4: 248638.307 ops/s
Iteration   5: 248171.209 ops/s
Iteration   6: 248195.926 ops/s
Iteration   7: 247818.016 ops/s
Iteration   8: 247392.352 ops/s
Iteration   9: 248324.884 ops/s
Iteration  10: 248161.999 ops/s
Iteration  11: 247875.582 ops/s
Iteration  12: 246935.678 ops/s
Iteration  13: 247743.457 ops/s
Iteration  14: 248991.440 ops/s
Iteration  15: 247609.702 ops/s
Iteration  16: 246644.382 ops/s
Iteration  17: 247331.110 ops/s
Iteration  18: 248056.119 ops/s
Iteration  19: 245165.246 ops/s
Iteration  20: 248603.852 ops/s
Iteration  21: 246820.837 ops/s
Iteration  22: 247670.804 ops/s
Iteration  23: 246768.431 ops/s
Iteration  24: 248989.530 ops/s
Iteration  25: 247640.092 ops/s
Iteration  26: 247690.863 ops/s
Iteration  27: 247768.259 ops/s
Iteration  28: 247274.038 ops/s
Iteration  29: 247872.122 ops/s
Iteration  30: 247065.029 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletableTest._Benchmark.benchmark_innerErrorThenMainError":
  247682.476 ±(99.9%) 554.035 ops/s [Average]
  (min, avg, max) = (245165.246, 247682.476, 248991.440), stdev = 829.254
  CI (99.9%): [247128.441, 248236.511] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt       Score     Error  Units
FlowableSwitchMapCompletableTest._Benchmark.benchmark_innerErrorThenMainError  thrpt   30  247682.476 ± 554.035  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletableTest._Benchmark.benchmark_checkBadSource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletableTest._Benchmark.benchmark_checkBadSource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 509869.813 ops/s
# Warmup Iteration   2: 647404.162 ops/s
# Warmup Iteration   3: 634250.902 ops/s
# Warmup Iteration   4: 681507.875 ops/s
# Warmup Iteration   5: 695738.753 ops/s
# Warmup Iteration   6: 700327.982 ops/s
# Warmup Iteration   7: 698996.165 ops/s
# Warmup Iteration   8: 695185.566 ops/s
# Warmup Iteration   9: 693078.761 ops/s
# Warmup Iteration  10: 697785.515 ops/s
# Warmup Iteration  11: 694561.052 ops/s
# Warmup Iteration  12: 694768.355 ops/s
# Warmup Iteration  13: 694209.988 ops/s
# Warmup Iteration  14: 694570.659 ops/s
# Warmup Iteration  15: 693943.885 ops/s
# Warmup Iteration  16: 688166.793 ops/s
# Warmup Iteration  17: 727025.684 ops/s
# Warmup Iteration  18: 726351.497 ops/s
# Warmup Iteration  19: 723699.250 ops/s
# Warmup Iteration  20: 728338.292 ops/s
# Warmup Iteration  21: 725214.509 ops/s
# Warmup Iteration  22: 726906.105 ops/s
# Warmup Iteration  23: 723310.923 ops/s
# Warmup Iteration  24: 722909.868 ops/s
# Warmup Iteration  25: 723326.475 ops/s
# Warmup Iteration  26: 724390.039 ops/s
# Warmup Iteration  27: 720474.407 ops/s
# Warmup Iteration  28: 718373.932 ops/s
# Warmup Iteration  29: 725227.902 ops/s
# Warmup Iteration  30: 727149.377 ops/s
Iteration   1: 731804.304 ops/s
Iteration   2: 724211.856 ops/s
Iteration   3: 723068.523 ops/s
Iteration   4: 726079.948 ops/s
Iteration   5: 726188.753 ops/s
Iteration   6: 724385.031 ops/s
Iteration   7: 724858.218 ops/s
Iteration   8: 723927.473 ops/s
Iteration   9: 727748.728 ops/s
Iteration  10: 723568.662 ops/s
Iteration  11: 727338.605 ops/s
Iteration  12: 727374.503 ops/s
Iteration  13: 725126.678 ops/s
Iteration  14: 724528.250 ops/s
Iteration  15: 724771.871 ops/s
Iteration  16: 724426.207 ops/s
Iteration  17: 723980.964 ops/s
Iteration  18: 725408.492 ops/s
Iteration  19: 727627.027 ops/s
Iteration  20: 726561.780 ops/s
Iteration  21: 724446.029 ops/s
Iteration  22: 723711.116 ops/s
Iteration  23: 725500.890 ops/s
Iteration  24: 720383.129 ops/s
Iteration  25: 726278.385 ops/s
Iteration  26: 724970.605 ops/s
Iteration  27: 726330.609 ops/s
Iteration  28: 726770.983 ops/s
Iteration  29: 723212.067 ops/s
Iteration  30: 726851.754 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletableTest._Benchmark.benchmark_checkBadSource":
  725381.381 ±(99.9%) 1353.361 ops/s [Average]
  (min, avg, max) = (720383.129, 725381.381, 731804.304), stdev = 2025.648
  CI (99.9%): [724028.020, 726734.743] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score      Error  Units
FlowableSwitchMapCompletableTest._Benchmark.benchmark_checkBadSource  thrpt   30  725381.381 ± 1353.361  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybeTest._Benchmark.benchmark_take$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybeTest._Benchmark.benchmark_take

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1160129.776 ops/s
# Warmup Iteration   2: 1676661.691 ops/s
# Warmup Iteration   3: 1864831.736 ops/s
# Warmup Iteration   4: 2019217.723 ops/s
# Warmup Iteration   5: 2096107.660 ops/s
# Warmup Iteration   6: 2105032.172 ops/s
# Warmup Iteration   7: 2136544.106 ops/s
# Warmup Iteration   8: 2110407.785 ops/s
# Warmup Iteration   9: 2093140.570 ops/s
# Warmup Iteration  10: 2096010.633 ops/s
# Warmup Iteration  11: 2092990.340 ops/s
# Warmup Iteration  12: 2115137.273 ops/s
# Warmup Iteration  13: 2112674.352 ops/s
# Warmup Iteration  14: 2096112.729 ops/s
# Warmup Iteration  15: 2096637.559 ops/s
# Warmup Iteration  16: 2117312.969 ops/s
# Warmup Iteration  17: 2118690.589 ops/s
# Warmup Iteration  18: 2121525.539 ops/s
# Warmup Iteration  19: 2103422.566 ops/s
# Warmup Iteration  20: 2121179.723 ops/s
# Warmup Iteration  21: 2099000.553 ops/s
# Warmup Iteration  22: 2095094.551 ops/s
# Warmup Iteration  23: 2089949.404 ops/s
# Warmup Iteration  24: 2100612.170 ops/s
# Warmup Iteration  25: 2107387.227 ops/s
# Warmup Iteration  26: 2101874.739 ops/s
# Warmup Iteration  27: 2089183.832 ops/s
# Warmup Iteration  28: 2123675.164 ops/s
# Warmup Iteration  29: 2105445.696 ops/s
# Warmup Iteration  30: 2102004.929 ops/s
Iteration   1: 2104761.147 ops/s
Iteration   2: 2119505.286 ops/s
Iteration   3: 2078899.531 ops/s
Iteration   4: 2097724.443 ops/s
Iteration   5: 2116018.784 ops/s
Iteration   6: 2093261.068 ops/s
Iteration   7: 2079419.796 ops/s
Iteration   8: 2096014.403 ops/s
Iteration   9: 2102458.480 ops/s
Iteration  10: 2109835.613 ops/s
Iteration  11: 2090602.666 ops/s
Iteration  12: 2126713.267 ops/s
Iteration  13: 2111410.766 ops/s
Iteration  14: 2088696.749 ops/s
Iteration  15: 2106134.284 ops/s
Iteration  16: 2101852.556 ops/s
Iteration  17: 2111228.809 ops/s
Iteration  18: 2080114.711 ops/s
Iteration  19: 2081677.373 ops/s
Iteration  20: 2103484.623 ops/s
Iteration  21: 2101294.597 ops/s
Iteration  22: 2119537.845 ops/s
Iteration  23: 2079823.389 ops/s
Iteration  24: 2079805.468 ops/s
Iteration  25: 2110150.760 ops/s
Iteration  26: 2116499.030 ops/s
Iteration  27: 2081487.297 ops/s
Iteration  28: 2115013.551 ops/s
Iteration  29: 2106030.105 ops/s
Iteration  30: 2114189.327 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybeTest._Benchmark.benchmark_take":
  2100788.191 ±(99.9%) 9633.132 ops/s [Average]
  (min, avg, max) = (2078899.531, 2100788.191, 2126713.267), stdev = 14418.420
  CI (99.9%): [2091155.058, 2110421.323] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score      Error  Units
FlowableFlatMapMaybeTest._Benchmark.benchmark_take  thrpt   30  2100788.191 ± 9633.132  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybeTest._Benchmark.benchmark_backpressure$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybeTest._Benchmark.benchmark_backpressure

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1099995.175 ops/s
# Warmup Iteration   2: 1984779.827 ops/s
# Warmup Iteration   3: 2258303.822 ops/s
# Warmup Iteration   4: 2269522.863 ops/s
# Warmup Iteration   5: 2310212.601 ops/s
# Warmup Iteration   6: 2313794.894 ops/s
# Warmup Iteration   7: 2312809.092 ops/s
# Warmup Iteration   8: 2313617.703 ops/s
# Warmup Iteration   9: 2311672.629 ops/s
# Warmup Iteration  10: 2313738.536 ops/s
# Warmup Iteration  11: 2295523.461 ops/s
# Warmup Iteration  12: 2297853.435 ops/s
# Warmup Iteration  13: 2307383.024 ops/s
# Warmup Iteration  14: 2317342.735 ops/s
# Warmup Iteration  15: 2310209.163 ops/s
# Warmup Iteration  16: 2319298.794 ops/s
# Warmup Iteration  17: 2313107.915 ops/s
# Warmup Iteration  18: 2317634.675 ops/s
# Warmup Iteration  19: 2316746.236 ops/s
# Warmup Iteration  20: 2325444.883 ops/s
# Warmup Iteration  21: 2324112.908 ops/s
# Warmup Iteration  22: 2312327.046 ops/s
# Warmup Iteration  23: 2318482.753 ops/s
# Warmup Iteration  24: 2319033.249 ops/s
# Warmup Iteration  25: 2315755.985 ops/s
# Warmup Iteration  26: 2346602.391 ops/s
# Warmup Iteration  27: 2343829.952 ops/s
# Warmup Iteration  28: 2322668.651 ops/s
# Warmup Iteration  29: 2302913.265 ops/s
# Warmup Iteration  30: 2329529.778 ops/s
Iteration   1: 2330241.591 ops/s
Iteration   2: 2325633.506 ops/s
Iteration   3: 2321781.679 ops/s
Iteration   4: 2319393.380 ops/s
Iteration   5: 2317472.089 ops/s
Iteration   6: 2326781.227 ops/s
Iteration   7: 2304683.064 ops/s
Iteration   8: 2326026.073 ops/s
Iteration   9: 2320062.336 ops/s
Iteration  10: 2317053.496 ops/s
Iteration  11: 2311452.459 ops/s
Iteration  12: 2339902.087 ops/s
Iteration  13: 2322289.026 ops/s
Iteration  14: 2318258.458 ops/s
Iteration  15: 2317858.667 ops/s
Iteration  16: 2315406.371 ops/s
Iteration  17: 2309722.530 ops/s
Iteration  18: 2309731.144 ops/s
Iteration  19: 2328195.443 ops/s
Iteration  20: 2303219.869 ops/s
Iteration  21: 2289118.278 ops/s
Iteration  22: 2317907.353 ops/s
Iteration  23: 2330318.116 ops/s
Iteration  24: 2327091.763 ops/s
Iteration  25: 2328562.690 ops/s
Iteration  26: 2325216.370 ops/s
Iteration  27: 2333585.282 ops/s
Iteration  28: 2328347.990 ops/s
Iteration  29: 2329419.324 ops/s
Iteration  30: 2328943.800 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybeTest._Benchmark.benchmark_backpressure":
  2320789.182 ±(99.9%) 6968.355 ops/s [Average]
  (min, avg, max) = (2289118.278, 2320789.182, 2339902.087), stdev = 10429.906
  CI (99.9%): [2313820.827, 2327757.537] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
FlowableFlatMapMaybeTest._Benchmark.benchmark_backpressure  thrpt   30  2320789.182 ± 6968.355  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybeTest._Benchmark.benchmark_emissionQueueTrigger$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybeTest._Benchmark.benchmark_emissionQueueTrigger

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 661556.123 ops/s
# Warmup Iteration   2: 1106672.324 ops/s
# Warmup Iteration   3: 1383633.673 ops/s
# Warmup Iteration   4: 1389655.388 ops/s
# Warmup Iteration   5: 1405766.493 ops/s
# Warmup Iteration   6: 1407967.752 ops/s
# Warmup Iteration   7: 1414814.049 ops/s
# Warmup Iteration   8: 1415218.501 ops/s
# Warmup Iteration   9: 1406175.640 ops/s
# Warmup Iteration  10: 1411291.471 ops/s
# Warmup Iteration  11: 1407961.238 ops/s
# Warmup Iteration  12: 1411834.284 ops/s
# Warmup Iteration  13: 1408061.465 ops/s
# Warmup Iteration  14: 1391633.196 ops/s
# Warmup Iteration  15: 1398869.565 ops/s
# Warmup Iteration  16: 1404847.796 ops/s
# Warmup Iteration  17: 1401921.311 ops/s
# Warmup Iteration  18: 1409052.552 ops/s
# Warmup Iteration  19: 1401750.842 ops/s
# Warmup Iteration  20: 1403085.494 ops/s
# Warmup Iteration  21: 1392343.673 ops/s
# Warmup Iteration  22: 1410510.559 ops/s
# Warmup Iteration  23: 1395780.849 ops/s
# Warmup Iteration  24: 1389858.161 ops/s
# Warmup Iteration  25: 1397113.817 ops/s
# Warmup Iteration  26: 1396933.630 ops/s
# Warmup Iteration  27: 1403838.028 ops/s
# Warmup Iteration  28: 1399273.839 ops/s
# Warmup Iteration  29: 1408040.247 ops/s
# Warmup Iteration  30: 1404867.658 ops/s
Iteration   1: 1408235.630 ops/s
Iteration   2: 1397059.513 ops/s
Iteration   3: 1400204.272 ops/s
Iteration   4: 1394019.862 ops/s
Iteration   5: 1400128.438 ops/s
Iteration   6: 1396102.345 ops/s
Iteration   7: 1404707.417 ops/s
Iteration   8: 1396752.168 ops/s
Iteration   9: 1393618.074 ops/s
Iteration  10: 1402435.681 ops/s
Iteration  11: 1397067.581 ops/s
Iteration  12: 1395918.043 ops/s
Iteration  13: 1405009.152 ops/s
Iteration  14: 1400829.411 ops/s
Iteration  15: 1406829.616 ops/s
Iteration  16: 1403415.881 ops/s
Iteration  17: 1396634.153 ops/s
Iteration  18: 1397085.364 ops/s
Iteration  19: 1402525.293 ops/s
Iteration  20: 1399702.183 ops/s
Iteration  21: 1410324.865 ops/s
Iteration  22: 1408331.444 ops/s
Iteration  23: 1408124.010 ops/s
Iteration  24: 1397096.158 ops/s
Iteration  25: 1399585.814 ops/s
Iteration  26: 1408865.807 ops/s
Iteration  27: 1389561.819 ops/s
Iteration  28: 1396606.314 ops/s
Iteration  29: 1407975.445 ops/s
Iteration  30: 1388553.785 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybeTest._Benchmark.benchmark_emissionQueueTrigger":
  1400443.518 ±(99.9%) 3885.672 ops/s [Average]
  (min, avg, max) = (1388553.785, 1400443.518, 1410324.865), stdev = 5815.892
  CI (99.9%): [1396557.846, 1404329.190] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
FlowableFlatMapMaybeTest._Benchmark.benchmark_emissionQueueTrigger  thrpt   30  1400443.518 ± 3885.672  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybeTest._Benchmark.benchmark_error$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybeTest._Benchmark.benchmark_error

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 507477.261 ops/s
# Warmup Iteration   2: 651302.044 ops/s
# Warmup Iteration   3: 735739.535 ops/s
# Warmup Iteration   4: 741052.572 ops/s
# Warmup Iteration   5: 756545.816 ops/s
# Warmup Iteration   6: 754090.589 ops/s
# Warmup Iteration   7: 751441.385 ops/s
# Warmup Iteration   8: 753394.042 ops/s
# Warmup Iteration   9: 752229.026 ops/s
# Warmup Iteration  10: 752696.907 ops/s
# Warmup Iteration  11: 749867.739 ops/s
# Warmup Iteration  12: 752860.367 ops/s
# Warmup Iteration  13: 750537.216 ops/s
# Warmup Iteration  14: 750149.831 ops/s
# Warmup Iteration  15: 750573.121 ops/s
# Warmup Iteration  16: 752758.685 ops/s
# Warmup Iteration  17: 783825.629 ops/s
# Warmup Iteration  18: 786981.760 ops/s
# Warmup Iteration  19: 784224.071 ops/s
# Warmup Iteration  20: 784175.660 ops/s
# Warmup Iteration  21: 785020.316 ops/s
# Warmup Iteration  22: 789248.669 ops/s
# Warmup Iteration  23: 789982.891 ops/s
# Warmup Iteration  24: 788269.769 ops/s
# Warmup Iteration  25: 786036.196 ops/s
# Warmup Iteration  26: 787417.329 ops/s
# Warmup Iteration  27: 786534.404 ops/s
# Warmup Iteration  28: 793140.651 ops/s
# Warmup Iteration  29: 790189.287 ops/s
# Warmup Iteration  30: 789888.286 ops/s
Iteration   1: 784126.388 ops/s
Iteration   2: 787081.172 ops/s
Iteration   3: 789288.292 ops/s
Iteration   4: 787211.958 ops/s
Iteration   5: 790175.197 ops/s
Iteration   6: 788338.767 ops/s
Iteration   7: 787131.567 ops/s
Iteration   8: 790344.159 ops/s
Iteration   9: 783288.086 ops/s
Iteration  10: 788650.939 ops/s
Iteration  11: 785243.194 ops/s
Iteration  12: 780699.898 ops/s
Iteration  13: 788312.863 ops/s
Iteration  14: 785618.057 ops/s
Iteration  15: 779280.303 ops/s
Iteration  16: 789087.111 ops/s
Iteration  17: 791258.237 ops/s
Iteration  18: 787449.209 ops/s
Iteration  19: 791158.810 ops/s
Iteration  20: 782341.598 ops/s
Iteration  21: 793217.877 ops/s
Iteration  22: 794744.103 ops/s
Iteration  23: 788412.973 ops/s
Iteration  24: 786524.068 ops/s
Iteration  25: 792078.498 ops/s
Iteration  26: 789264.116 ops/s
Iteration  27: 788405.832 ops/s
Iteration  28: 785279.528 ops/s
Iteration  29: 792351.290 ops/s
Iteration  30: 793595.962 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybeTest._Benchmark.benchmark_error":
  787998.668 ±(99.9%) 2480.529 ops/s [Average]
  (min, avg, max) = (779280.303, 787998.668, 794744.103), stdev = 3712.739
  CI (99.9%): [785518.140, 790479.197] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score      Error  Units
FlowableFlatMapMaybeTest._Benchmark.benchmark_error  thrpt   30  787998.668 ± 2480.529  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybeTest._Benchmark.benchmark_emissionQueueTrigger2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybeTest._Benchmark.benchmark_emissionQueueTrigger2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 577307.133 ops/s
# Warmup Iteration   2: 910268.255 ops/s
# Warmup Iteration   3: 1113521.936 ops/s
# Warmup Iteration   4: 1126080.071 ops/s
# Warmup Iteration   5: 1130729.357 ops/s
# Warmup Iteration   6: 1127940.822 ops/s
# Warmup Iteration   7: 1143158.854 ops/s
# Warmup Iteration   8: 1125893.730 ops/s
# Warmup Iteration   9: 1133112.994 ops/s
# Warmup Iteration  10: 1132049.463 ops/s
# Warmup Iteration  11: 1130481.962 ops/s
# Warmup Iteration  12: 1118587.904 ops/s
# Warmup Iteration  13: 1133560.008 ops/s
# Warmup Iteration  14: 1129662.576 ops/s
# Warmup Iteration  15: 1139150.130 ops/s
# Warmup Iteration  16: 1125269.263 ops/s
# Warmup Iteration  17: 1129683.392 ops/s
# Warmup Iteration  18: 1128820.774 ops/s
# Warmup Iteration  19: 1130574.451 ops/s
# Warmup Iteration  20: 1139940.658 ops/s
# Warmup Iteration  21: 1138753.619 ops/s
# Warmup Iteration  22: 1135806.713 ops/s
# Warmup Iteration  23: 1126876.786 ops/s
# Warmup Iteration  24: 1126880.732 ops/s
# Warmup Iteration  25: 1130754.470 ops/s
# Warmup Iteration  26: 1139224.755 ops/s
# Warmup Iteration  27: 1144376.859 ops/s
# Warmup Iteration  28: 1148244.180 ops/s
# Warmup Iteration  29: 1144647.270 ops/s
# Warmup Iteration  30: 1139385.610 ops/s
Iteration   1: 1137619.281 ops/s
Iteration   2: 1147749.333 ops/s
Iteration   3: 1136247.199 ops/s
Iteration   4: 1130086.731 ops/s
Iteration   5: 1134906.295 ops/s
Iteration   6: 1135189.603 ops/s
Iteration   7: 1121975.838 ops/s
Iteration   8: 1134231.562 ops/s
Iteration   9: 1146739.688 ops/s
Iteration  10: 1148841.629 ops/s
Iteration  11: 1127723.788 ops/s
Iteration  12: 1129185.111 ops/s
Iteration  13: 1134331.207 ops/s
Iteration  14: 1129719.270 ops/s
Iteration  15: 1136693.566 ops/s
Iteration  16: 1122966.866 ops/s
Iteration  17: 1134647.451 ops/s
Iteration  18: 1137528.047 ops/s
Iteration  19: 1143844.056 ops/s
Iteration  20: 1123869.952 ops/s
Iteration  21: 1136400.352 ops/s
Iteration  22: 1143418.655 ops/s
Iteration  23: 1137110.104 ops/s
Iteration  24: 1134623.814 ops/s
Iteration  25: 1139716.853 ops/s
Iteration  26: 1134977.167 ops/s
Iteration  27: 1134017.243 ops/s
Iteration  28: 1127940.972 ops/s
Iteration  29: 1127823.241 ops/s
Iteration  30: 1150653.305 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybeTest._Benchmark.benchmark_emissionQueueTrigger2":
  1135359.273 ±(99.9%) 4976.981 ops/s [Average]
  (min, avg, max) = (1121975.838, 1135359.273, 1150653.305), stdev = 7449.311
  CI (99.9%): [1130382.292, 1140336.253] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
FlowableFlatMapMaybeTest._Benchmark.benchmark_emissionQueueTrigger2  thrpt   30  1135359.273 ± 4976.981  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArrayTest._Benchmark.benchmark_smallOffer2Throws$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArrayTest._Benchmark.benchmark_smallOffer2Throws

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 710625.671 ops/s
# Warmup Iteration   2: 834242.108 ops/s
# Warmup Iteration   3: 895082.713 ops/s
# Warmup Iteration   4: 866968.929 ops/s
# Warmup Iteration   5: 945683.791 ops/s
# Warmup Iteration   6: 940347.288 ops/s
# Warmup Iteration   7: 938745.680 ops/s
# Warmup Iteration   8: 946328.076 ops/s
# Warmup Iteration   9: 942974.152 ops/s
# Warmup Iteration  10: 941070.040 ops/s
# Warmup Iteration  11: 942432.862 ops/s
# Warmup Iteration  12: 936077.582 ops/s
# Warmup Iteration  13: 936222.208 ops/s
# Warmup Iteration  14: 944903.148 ops/s
# Warmup Iteration  15: 938903.308 ops/s
# Warmup Iteration  16: 940828.185 ops/s
# Warmup Iteration  17: 997361.003 ops/s
# Warmup Iteration  18: 987594.861 ops/s
# Warmup Iteration  19: 992984.052 ops/s
# Warmup Iteration  20: 994782.182 ops/s
# Warmup Iteration  21: 990783.892 ops/s
# Warmup Iteration  22: 995236.054 ops/s
# Warmup Iteration  23: 989680.423 ops/s
# Warmup Iteration  24: 991726.868 ops/s
# Warmup Iteration  25: 991578.604 ops/s
# Warmup Iteration  26: 989722.825 ops/s
# Warmup Iteration  27: 990388.015 ops/s
# Warmup Iteration  28: 989241.050 ops/s
# Warmup Iteration  29: 993216.649 ops/s
# Warmup Iteration  30: 980554.181 ops/s
Iteration   1: 992832.261 ops/s
Iteration   2: 987876.906 ops/s
Iteration   3: 994684.771 ops/s
Iteration   4: 987870.541 ops/s
Iteration   5: 995707.120 ops/s
Iteration   6: 989140.746 ops/s
Iteration   7: 990876.101 ops/s
Iteration   8: 993490.304 ops/s
Iteration   9: 984909.229 ops/s
Iteration  10: 990986.701 ops/s
Iteration  11: 987677.283 ops/s
Iteration  12: 989937.888 ops/s
Iteration  13: 991965.131 ops/s
Iteration  14: 986119.332 ops/s
Iteration  15: 990912.825 ops/s
Iteration  16: 992358.251 ops/s
Iteration  17: 986371.122 ops/s
Iteration  18: 981371.030 ops/s
Iteration  19: 985279.739 ops/s
Iteration  20: 991694.050 ops/s
Iteration  21: 994661.402 ops/s
Iteration  22: 994346.067 ops/s
Iteration  23: 989587.587 ops/s
Iteration  24: 988730.433 ops/s
Iteration  25: 995296.107 ops/s
Iteration  26: 988215.831 ops/s
Iteration  27: 997280.923 ops/s
Iteration  28: 985539.323 ops/s
Iteration  29: 990519.424 ops/s
Iteration  30: 991610.361 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArrayTest._Benchmark.benchmark_smallOffer2Throws":
  990261.626 ±(99.9%) 2490.606 ops/s [Average]
  (min, avg, max) = (981371.030, 990261.626, 997280.923), stdev = 3727.822
  CI (99.9%): [987771.020, 992752.232] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score      Error  Units
MaybeMergeArrayTest._Benchmark.benchmark_smallOffer2Throws  thrpt   30  990261.626 ± 2490.606  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_mergePublisher$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_mergePublisher

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1111427.075 ops/s
# Warmup Iteration   2: 1506169.195 ops/s
# Warmup Iteration   3: 1710529.270 ops/s
# Warmup Iteration   4: 1825529.624 ops/s
# Warmup Iteration   5: 1927940.998 ops/s
# Warmup Iteration   6: 1923190.383 ops/s
# Warmup Iteration   7: 1910574.497 ops/s
# Warmup Iteration   8: 1918426.672 ops/s
# Warmup Iteration   9: 1896071.663 ops/s
# Warmup Iteration  10: 1897044.539 ops/s
# Warmup Iteration  11: 1894868.626 ops/s
# Warmup Iteration  12: 1925717.773 ops/s
# Warmup Iteration  13: 1916745.062 ops/s
# Warmup Iteration  14: 1890136.552 ops/s
# Warmup Iteration  15: 1902104.199 ops/s
# Warmup Iteration  16: 1909762.196 ops/s
# Warmup Iteration  17: 1887219.020 ops/s
# Warmup Iteration  18: 1885097.406 ops/s
# Warmup Iteration  19: 1885773.832 ops/s
# Warmup Iteration  20: 1893392.234 ops/s
# Warmup Iteration  21: 1907811.830 ops/s
# Warmup Iteration  22: 1896875.572 ops/s
# Warmup Iteration  23: 1884823.385 ops/s
# Warmup Iteration  24: 1896150.489 ops/s
# Warmup Iteration  25: 1895794.528 ops/s
# Warmup Iteration  26: 1910187.172 ops/s
# Warmup Iteration  27: 1897010.718 ops/s
# Warmup Iteration  28: 1885115.860 ops/s
# Warmup Iteration  29: 1911182.529 ops/s
# Warmup Iteration  30: 1916879.554 ops/s
Iteration   1: 1895311.053 ops/s
Iteration   2: 1882932.013 ops/s
Iteration   3: 1914199.044 ops/s
Iteration   4: 1882212.709 ops/s
Iteration   5: 1899702.243 ops/s
Iteration   6: 1904616.331 ops/s
Iteration   7: 1907639.553 ops/s
Iteration   8: 1897799.500 ops/s
Iteration   9: 1926753.387 ops/s
Iteration  10: 1880592.001 ops/s
Iteration  11: 1902912.211 ops/s
Iteration  12: 1913807.317 ops/s
Iteration  13: 1887374.969 ops/s
Iteration  14: 1893650.110 ops/s
Iteration  15: 1900600.078 ops/s
Iteration  16: 1870450.846 ops/s
Iteration  17: 1901011.914 ops/s
Iteration  18: 1899108.325 ops/s
Iteration  19: 1911272.762 ops/s
Iteration  20: 1881462.979 ops/s
Iteration  21: 1878049.368 ops/s
Iteration  22: 1895317.884 ops/s
Iteration  23: 1892416.532 ops/s
Iteration  24: 1895636.531 ops/s
Iteration  25: 1905425.444 ops/s
Iteration  26: 1909818.163 ops/s
Iteration  27: 1900440.093 ops/s
Iteration  28: 1891726.524 ops/s
Iteration  29: 1905065.641 ops/s
Iteration  30: 1914140.260 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_mergePublisher":
  1898048.193 ±(99.9%) 8450.381 ops/s [Average]
  (min, avg, max) = (1870450.846, 1898048.193, 1926753.387), stdev = 12648.133
  CI (99.9%): [1889597.812, 1906498.574] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt        Score      Error  Units
MaybeTest._Benchmark.benchmark_mergePublisher  thrpt   30  1898048.193 ± 8450.381  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleMergeTest._Benchmark.benchmark_merge4$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleMergeTest._Benchmark.benchmark_merge4

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 921232.992 ops/s
# Warmup Iteration   2: 1355684.087 ops/s
# Warmup Iteration   3: 1311720.212 ops/s
# Warmup Iteration   4: 1526847.625 ops/s
# Warmup Iteration   5: 1610833.237 ops/s
# Warmup Iteration   6: 1601472.863 ops/s
# Warmup Iteration   7: 1597967.888 ops/s
# Warmup Iteration   8: 1598456.949 ops/s
# Warmup Iteration   9: 1606845.098 ops/s
# Warmup Iteration  10: 1604904.984 ops/s
# Warmup Iteration  11: 1586857.174 ops/s
# Warmup Iteration  12: 1604219.130 ops/s
# Warmup Iteration  13: 1584264.439 ops/s
# Warmup Iteration  14: 1596063.697 ops/s
# Warmup Iteration  15: 1601595.806 ops/s
# Warmup Iteration  16: 1588294.622 ops/s
# Warmup Iteration  17: 1570509.741 ops/s
# Warmup Iteration  18: 1608807.238 ops/s
# Warmup Iteration  19: 1594453.382 ops/s
# Warmup Iteration  20: 1597137.541 ops/s
# Warmup Iteration  21: 1591665.220 ops/s
# Warmup Iteration  22: 1592240.189 ops/s
# Warmup Iteration  23: 1592383.206 ops/s
# Warmup Iteration  24: 1597493.487 ops/s
# Warmup Iteration  25: 1608579.115 ops/s
# Warmup Iteration  26: 1593433.000 ops/s
# Warmup Iteration  27: 1592615.936 ops/s
# Warmup Iteration  28: 1602038.922 ops/s
# Warmup Iteration  29: 1588215.246 ops/s
# Warmup Iteration  30: 1593334.270 ops/s
Iteration   1: 1591197.001 ops/s
Iteration   2: 1593497.055 ops/s
Iteration   3: 1588992.643 ops/s
Iteration   4: 1596337.407 ops/s
Iteration   5: 1601412.373 ops/s
Iteration   6: 1599223.587 ops/s
Iteration   7: 1596649.280 ops/s
Iteration   8: 1586238.073 ops/s
Iteration   9: 1590941.562 ops/s
Iteration  10: 1592281.058 ops/s
Iteration  11: 1581953.669 ops/s
Iteration  12: 1597881.294 ops/s
Iteration  13: 1587576.818 ops/s
Iteration  14: 1593090.897 ops/s
Iteration  15: 1601022.461 ops/s
Iteration  16: 1596470.538 ops/s
Iteration  17: 1595166.459 ops/s
Iteration  18: 1584927.940 ops/s
Iteration  19: 1607316.500 ops/s
Iteration  20: 1593036.265 ops/s
Iteration  21: 1597890.984 ops/s
Iteration  22: 1597691.675 ops/s
Iteration  23: 1601401.759 ops/s
Iteration  24: 1576994.429 ops/s
Iteration  25: 1587942.151 ops/s
Iteration  26: 1591275.455 ops/s
Iteration  27: 1591974.840 ops/s
Iteration  28: 1589729.209 ops/s
Iteration  29: 1587123.619 ops/s
Iteration  30: 1583266.666 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleMergeTest._Benchmark.benchmark_merge4":
  1592683.456 ±(99.9%) 4420.890 ops/s [Average]
  (min, avg, max) = (1576994.429, 1592683.456, 1607316.500), stdev = 6616.980
  CI (99.9%): [1588262.566, 1597104.345] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     Mode  Cnt        Score      Error  Units
SingleMergeTest._Benchmark.benchmark_merge4  thrpt   30  1592683.456 ± 4420.890  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_mergeIterable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_mergeIterable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1040409.147 ops/s
# Warmup Iteration   2: 1416107.544 ops/s
# Warmup Iteration   3: 1592825.677 ops/s
# Warmup Iteration   4: 1715233.983 ops/s
# Warmup Iteration   5: 1788646.416 ops/s
# Warmup Iteration   6: 1772025.620 ops/s
# Warmup Iteration   7: 1798020.860 ops/s
# Warmup Iteration   8: 1778993.990 ops/s
# Warmup Iteration   9: 1800219.589 ops/s
# Warmup Iteration  10: 1784566.328 ops/s
# Warmup Iteration  11: 1779767.660 ops/s
# Warmup Iteration  12: 1781932.997 ops/s
# Warmup Iteration  13: 1787288.756 ops/s
# Warmup Iteration  14: 1795918.166 ops/s
# Warmup Iteration  15: 1784723.475 ops/s
# Warmup Iteration  16: 1772394.121 ops/s
# Warmup Iteration  17: 1785585.939 ops/s
# Warmup Iteration  18: 1813592.802 ops/s
# Warmup Iteration  19: 1783167.244 ops/s
# Warmup Iteration  20: 1789369.132 ops/s
# Warmup Iteration  21: 1795940.315 ops/s
# Warmup Iteration  22: 1808627.494 ops/s
# Warmup Iteration  23: 1794102.152 ops/s
# Warmup Iteration  24: 1797768.741 ops/s
# Warmup Iteration  25: 1798388.568 ops/s
# Warmup Iteration  26: 1794088.493 ops/s
# Warmup Iteration  27: 1784905.587 ops/s
# Warmup Iteration  28: 1793062.337 ops/s
# Warmup Iteration  29: 1788242.480 ops/s
# Warmup Iteration  30: 1789510.387 ops/s
Iteration   1: 1800142.513 ops/s
Iteration   2: 1797456.423 ops/s
Iteration   3: 1793684.721 ops/s
Iteration   4: 1802497.458 ops/s
Iteration   5: 1790560.519 ops/s
Iteration   6: 1819661.292 ops/s
Iteration   7: 1804798.632 ops/s
Iteration   8: 1779997.453 ops/s
Iteration   9: 1794371.520 ops/s
Iteration  10: 1806921.429 ops/s
Iteration  11: 1789776.238 ops/s
Iteration  12: 1791744.469 ops/s
Iteration  13: 1799046.129 ops/s
Iteration  14: 1797726.591 ops/s
Iteration  15: 1766896.606 ops/s
Iteration  16: 1805650.635 ops/s
Iteration  17: 1796763.075 ops/s
Iteration  18: 1794310.390 ops/s
Iteration  19: 1808014.861 ops/s
Iteration  20: 1808821.936 ops/s
Iteration  21: 1799235.240 ops/s
Iteration  22: 1777822.643 ops/s
Iteration  23: 1798755.462 ops/s
Iteration  24: 1805811.374 ops/s
Iteration  25: 1776041.535 ops/s
Iteration  26: 1788249.827 ops/s
Iteration  27: 1796934.832 ops/s
Iteration  28: 1795597.240 ops/s
Iteration  29: 1798550.203 ops/s
Iteration  30: 1812683.869 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_mergeIterable":
  1796617.504 ±(99.9%) 7455.053 ops/s [Average]
  (min, avg, max) = (1766896.606, 1796617.504, 1819661.292), stdev = 11158.374
  CI (99.9%): [1789162.450, 1804072.557] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt        Score      Error  Units
MaybeTest._Benchmark.benchmark_mergeIterable  thrpt   30  1796617.504 ± 7455.053  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_mergeDelayError2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_mergeDelayError2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 199785.394 ops/s
# Warmup Iteration   2: 288437.979 ops/s
# Warmup Iteration   3: 305366.956 ops/s
# Warmup Iteration   4: 314592.663 ops/s
# Warmup Iteration   5: 317664.139 ops/s
# Warmup Iteration   6: 318052.641 ops/s
# Warmup Iteration   7: 318009.624 ops/s
# Warmup Iteration   8: 316816.283 ops/s
# Warmup Iteration   9: 316139.741 ops/s
# Warmup Iteration  10: 316501.288 ops/s
# Warmup Iteration  11: 316990.216 ops/s
# Warmup Iteration  12: 317291.695 ops/s
# Warmup Iteration  13: 314099.806 ops/s
# Warmup Iteration  14: 316954.362 ops/s
# Warmup Iteration  15: 316945.818 ops/s
# Warmup Iteration  16: 317056.364 ops/s
# Warmup Iteration  17: 329794.383 ops/s
# Warmup Iteration  18: 329726.831 ops/s
# Warmup Iteration  19: 330014.098 ops/s
# Warmup Iteration  20: 329212.736 ops/s
# Warmup Iteration  21: 331599.555 ops/s
# Warmup Iteration  22: 330948.313 ops/s
# Warmup Iteration  23: 329936.345 ops/s
# Warmup Iteration  24: 330697.333 ops/s
# Warmup Iteration  25: 332351.255 ops/s
# Warmup Iteration  26: 329616.418 ops/s
# Warmup Iteration  27: 331308.769 ops/s
# Warmup Iteration  28: 331783.896 ops/s
# Warmup Iteration  29: 329105.272 ops/s
# Warmup Iteration  30: 330222.977 ops/s
Iteration   1: 330021.139 ops/s
Iteration   2: 330689.828 ops/s
Iteration   3: 331908.972 ops/s
Iteration   4: 332294.217 ops/s
Iteration   5: 331038.915 ops/s
Iteration   6: 330084.465 ops/s
Iteration   7: 328450.263 ops/s
Iteration   8: 329825.017 ops/s
Iteration   9: 331741.823 ops/s
Iteration  10: 331476.594 ops/s
Iteration  11: 330223.191 ops/s
Iteration  12: 327961.200 ops/s
Iteration  13: 329978.016 ops/s
Iteration  14: 331111.586 ops/s
Iteration  15: 329702.835 ops/s
Iteration  16: 330222.274 ops/s
Iteration  17: 328534.451 ops/s
Iteration  18: 330599.213 ops/s
Iteration  19: 329852.432 ops/s
Iteration  20: 330354.563 ops/s
Iteration  21: 331761.049 ops/s
Iteration  22: 330472.754 ops/s
Iteration  23: 331227.331 ops/s
Iteration  24: 330677.015 ops/s
Iteration  25: 330327.886 ops/s
Iteration  26: 329294.844 ops/s
Iteration  27: 329300.394 ops/s
Iteration  28: 331275.494 ops/s
Iteration  29: 329400.086 ops/s
Iteration  30: 329044.028 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_mergeDelayError2":
  330295.062 ±(99.9%) 712.963 ops/s [Average]
  (min, avg, max) = (327961.200, 330295.062, 332294.217), stdev = 1067.129
  CI (99.9%): [329582.100, 331008.025] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt       Score     Error  Units
MaybeTest._Benchmark.benchmark_mergeDelayError2  thrpt   30  330295.062 ± 712.963  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_mergeIterableDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_mergeIterableDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 179731.696 ops/s
# Warmup Iteration   2: 267569.063 ops/s
# Warmup Iteration   3: 278188.080 ops/s
# Warmup Iteration   4: 296461.464 ops/s
# Warmup Iteration   5: 300293.573 ops/s
# Warmup Iteration   6: 299650.878 ops/s
# Warmup Iteration   7: 298366.783 ops/s
# Warmup Iteration   8: 297233.065 ops/s
# Warmup Iteration   9: 296793.327 ops/s
# Warmup Iteration  10: 297153.236 ops/s
# Warmup Iteration  11: 297818.750 ops/s
# Warmup Iteration  12: 296399.626 ops/s
# Warmup Iteration  13: 295362.507 ops/s
# Warmup Iteration  14: 295429.558 ops/s
# Warmup Iteration  15: 299506.414 ops/s
# Warmup Iteration  16: 295733.852 ops/s
# Warmup Iteration  17: 308648.485 ops/s
# Warmup Iteration  18: 307080.607 ops/s
# Warmup Iteration  19: 307641.580 ops/s
# Warmup Iteration  20: 306323.929 ops/s
# Warmup Iteration  21: 308493.911 ops/s
# Warmup Iteration  22: 309057.681 ops/s
# Warmup Iteration  23: 308442.416 ops/s
# Warmup Iteration  24: 308044.050 ops/s
# Warmup Iteration  25: 307280.148 ops/s
# Warmup Iteration  26: 306524.141 ops/s
# Warmup Iteration  27: 307822.868 ops/s
# Warmup Iteration  28: 306996.600 ops/s
# Warmup Iteration  29: 307626.378 ops/s
# Warmup Iteration  30: 306704.390 ops/s
Iteration   1: 305572.138 ops/s
Iteration   2: 305031.922 ops/s
Iteration   3: 307773.263 ops/s
Iteration   4: 306914.516 ops/s
Iteration   5: 305666.905 ops/s
Iteration   6: 305849.697 ops/s
Iteration   7: 305217.995 ops/s
Iteration   8: 306557.650 ops/s
Iteration   9: 307327.494 ops/s
Iteration  10: 304273.926 ops/s
Iteration  11: 304656.887 ops/s
Iteration  12: 306184.434 ops/s
Iteration  13: 304776.673 ops/s
Iteration  14: 308388.650 ops/s
Iteration  15: 307153.720 ops/s
Iteration  16: 305914.781 ops/s
Iteration  17: 306274.895 ops/s
Iteration  18: 307740.597 ops/s
Iteration  19: 306391.294 ops/s
Iteration  20: 305807.788 ops/s
Iteration  21: 306362.224 ops/s
Iteration  22: 307310.157 ops/s
Iteration  23: 306883.806 ops/s
Iteration  24: 305456.813 ops/s
Iteration  25: 306102.827 ops/s
Iteration  26: 306668.971 ops/s
Iteration  27: 306034.795 ops/s
Iteration  28: 308487.850 ops/s
Iteration  29: 306679.354 ops/s
Iteration  30: 307999.037 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_mergeIterableDelayError":
  306382.035 ±(99.9%) 725.801 ops/s [Average]
  (min, avg, max) = (304273.926, 306382.035, 308487.850), stdev = 1086.344
  CI (99.9%): [305656.235, 307107.836] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score     Error  Units
MaybeTest._Benchmark.benchmark_mergeIterableDelayError  thrpt   30  306382.035 ± 725.801  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybeTest._Benchmark.benchmark_mapperThrowsFlowable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybeTest._Benchmark.benchmark_mapperThrowsFlowable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 528612.473 ops/s
# Warmup Iteration   2: 644461.827 ops/s
# Warmup Iteration   3: 723731.266 ops/s
# Warmup Iteration   4: 658629.438 ops/s
# Warmup Iteration   5: 743101.175 ops/s
# Warmup Iteration   6: 747776.612 ops/s
# Warmup Iteration   7: 743708.424 ops/s
# Warmup Iteration   8: 741127.389 ops/s
# Warmup Iteration   9: 744205.895 ops/s
# Warmup Iteration  10: 741134.321 ops/s
# Warmup Iteration  11: 741143.341 ops/s
# Warmup Iteration  12: 742293.747 ops/s
# Warmup Iteration  13: 745716.576 ops/s
# Warmup Iteration  14: 745749.257 ops/s
# Warmup Iteration  15: 739533.641 ops/s
# Warmup Iteration  16: 739097.421 ops/s
# Warmup Iteration  17: 772781.760 ops/s
# Warmup Iteration  18: 769633.666 ops/s
# Warmup Iteration  19: 771464.909 ops/s
# Warmup Iteration  20: 770521.923 ops/s
# Warmup Iteration  21: 769439.398 ops/s
# Warmup Iteration  22: 767904.889 ops/s
# Warmup Iteration  23: 767734.052 ops/s
# Warmup Iteration  24: 768025.773 ops/s
# Warmup Iteration  25: 768737.349 ops/s
# Warmup Iteration  26: 771086.307 ops/s
# Warmup Iteration  27: 767590.095 ops/s
# Warmup Iteration  28: 776622.664 ops/s
# Warmup Iteration  29: 769485.961 ops/s
# Warmup Iteration  30: 769868.513 ops/s
Iteration   1: 770236.264 ops/s
Iteration   2: 775377.174 ops/s
Iteration   3: 771243.519 ops/s
Iteration   4: 774448.345 ops/s
Iteration   5: 767298.485 ops/s
Iteration   6: 773207.622 ops/s
Iteration   7: 769925.771 ops/s
Iteration   8: 768868.696 ops/s
Iteration   9: 765992.293 ops/s
Iteration  10: 772756.779 ops/s
Iteration  11: 772362.471 ops/s
Iteration  12: 769948.485 ops/s
Iteration  13: 767701.991 ops/s
Iteration  14: 768958.057 ops/s
Iteration  15: 773949.098 ops/s
Iteration  16: 770600.880 ops/s
Iteration  17: 769542.393 ops/s
Iteration  18: 771480.328 ops/s
Iteration  19: 768746.259 ops/s
Iteration  20: 772517.193 ops/s
Iteration  21: 773090.035 ops/s
Iteration  22: 774320.953 ops/s
Iteration  23: 770711.299 ops/s
Iteration  24: 769399.228 ops/s
Iteration  25: 768829.204 ops/s
Iteration  26: 773956.730 ops/s
Iteration  27: 773429.287 ops/s
Iteration  28: 775283.483 ops/s
Iteration  29: 766133.429 ops/s
Iteration  30: 768113.883 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybeTest._Benchmark.benchmark_mapperThrowsFlowable":
  770947.654 ±(99.9%) 1791.049 ops/s [Average]
  (min, avg, max) = (765992.293, 770947.654, 775377.174), stdev = 2680.758
  CI (99.9%): [769156.605, 772738.704] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score      Error  Units
FlowableFlatMapMaybeTest._Benchmark.benchmark_mapperThrowsFlowable  thrpt   30  770947.654 ± 1791.049  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_mergeArray$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_mergeArray

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1661130.021 ops/s
# Warmup Iteration   2: 2533914.548 ops/s
# Warmup Iteration   3: 2835032.552 ops/s
# Warmup Iteration   4: 2976688.371 ops/s
# Warmup Iteration   5: 3236337.164 ops/s
# Warmup Iteration   6: 3208399.598 ops/s
# Warmup Iteration   7: 3216002.968 ops/s
# Warmup Iteration   8: 3200662.618 ops/s
# Warmup Iteration   9: 3220617.205 ops/s
# Warmup Iteration  10: 3220172.954 ops/s
# Warmup Iteration  11: 3202640.021 ops/s
# Warmup Iteration  12: 3228676.929 ops/s
# Warmup Iteration  13: 3215763.654 ops/s
# Warmup Iteration  14: 3222483.203 ops/s
# Warmup Iteration  15: 3204977.379 ops/s
# Warmup Iteration  16: 3222575.969 ops/s
# Warmup Iteration  17: 3225395.672 ops/s
# Warmup Iteration  18: 3229698.382 ops/s
# Warmup Iteration  19: 3261087.023 ops/s
# Warmup Iteration  20: 3215427.136 ops/s
# Warmup Iteration  21: 3233950.138 ops/s
# Warmup Iteration  22: 3229637.713 ops/s
# Warmup Iteration  23: 3216904.593 ops/s
# Warmup Iteration  24: 3222266.583 ops/s
# Warmup Iteration  25: 3206082.330 ops/s
# Warmup Iteration  26: 3251092.410 ops/s
# Warmup Iteration  27: 3210989.917 ops/s
# Warmup Iteration  28: 3245818.413 ops/s
# Warmup Iteration  29: 3236994.565 ops/s
# Warmup Iteration  30: 3221305.507 ops/s
Iteration   1: 3233083.204 ops/s
Iteration   2: 3227093.342 ops/s
Iteration   3: 3220030.279 ops/s
Iteration   4: 3237898.151 ops/s
Iteration   5: 3215957.818 ops/s
Iteration   6: 3232019.935 ops/s
Iteration   7: 3208115.123 ops/s
Iteration   8: 3219715.082 ops/s
Iteration   9: 3211650.363 ops/s
Iteration  10: 3230285.029 ops/s
Iteration  11: 3229653.314 ops/s
Iteration  12: 3219464.986 ops/s
Iteration  13: 3212532.988 ops/s
Iteration  14: 3224011.293 ops/s
Iteration  15: 3238063.948 ops/s
Iteration  16: 3231891.910 ops/s
Iteration  17: 3227085.969 ops/s
Iteration  18: 3227687.410 ops/s
Iteration  19: 3221801.737 ops/s
Iteration  20: 3228013.104 ops/s
Iteration  21: 3231975.643 ops/s
Iteration  22: 3227145.341 ops/s
Iteration  23: 3202717.180 ops/s
Iteration  24: 3234456.541 ops/s
Iteration  25: 3233480.129 ops/s
Iteration  26: 3224526.455 ops/s
Iteration  27: 3215188.134 ops/s
Iteration  28: 3221999.322 ops/s
Iteration  29: 3217147.735 ops/s
Iteration  30: 3192036.588 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_mergeArray":
  3223224.268 ±(99.9%) 7060.849 ops/s [Average]
  (min, avg, max) = (3192036.588, 3223224.268, 3238063.948), stdev = 10568.347
  CI (99.9%): [3216163.420, 3230285.117] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                   Mode  Cnt        Score      Error  Units
MaybeTest._Benchmark.benchmark_mergeArray  thrpt   30  3223224.268 ± 7060.849  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_merge2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_merge2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1866740.116 ops/s
# Warmup Iteration   2: 3201689.846 ops/s
# Warmup Iteration   3: 3465778.287 ops/s
# Warmup Iteration   4: 3583882.426 ops/s
# Warmup Iteration   5: 3764507.300 ops/s
# Warmup Iteration   6: 3730753.163 ops/s
# Warmup Iteration   7: 3726177.555 ops/s
# Warmup Iteration   8: 3723513.881 ops/s
# Warmup Iteration   9: 3738457.814 ops/s
# Warmup Iteration  10: 3758257.260 ops/s
# Warmup Iteration  11: 3741018.362 ops/s
# Warmup Iteration  12: 3755214.559 ops/s
# Warmup Iteration  13: 3732987.864 ops/s
# Warmup Iteration  14: 3754808.348 ops/s
# Warmup Iteration  15: 3757415.904 ops/s
# Warmup Iteration  16: 3744509.302 ops/s
# Warmup Iteration  17: 3747590.947 ops/s
# Warmup Iteration  18: 3755147.769 ops/s
# Warmup Iteration  19: 3765891.505 ops/s
# Warmup Iteration  20: 3756278.988 ops/s
# Warmup Iteration  21: 3771708.215 ops/s
# Warmup Iteration  22: 3764378.443 ops/s
# Warmup Iteration  23: 3780422.319 ops/s
# Warmup Iteration  24: 3751698.129 ops/s
# Warmup Iteration  25: 3773906.064 ops/s
# Warmup Iteration  26: 3778790.937 ops/s
# Warmup Iteration  27: 3763587.813 ops/s
# Warmup Iteration  28: 3766994.571 ops/s
# Warmup Iteration  29: 3760700.690 ops/s
# Warmup Iteration  30: 3752192.358 ops/s
Iteration   1: 3760300.662 ops/s
Iteration   2: 3778451.912 ops/s
Iteration   3: 3785460.137 ops/s
Iteration   4: 3740754.018 ops/s
Iteration   5: 3757251.192 ops/s
Iteration   6: 3758683.048 ops/s
Iteration   7: 3761770.786 ops/s
Iteration   8: 3777866.854 ops/s
Iteration   9: 3755385.998 ops/s
Iteration  10: 3770548.859 ops/s
Iteration  11: 3764396.098 ops/s
Iteration  12: 3774081.607 ops/s
Iteration  13: 3747002.963 ops/s
Iteration  14: 3732274.990 ops/s
Iteration  15: 3770749.367 ops/s
Iteration  16: 3768276.276 ops/s
Iteration  17: 3758100.084 ops/s
Iteration  18: 3772065.342 ops/s
Iteration  19: 3782530.344 ops/s
Iteration  20: 3759489.745 ops/s
Iteration  21: 3772022.487 ops/s
Iteration  22: 3774252.133 ops/s
Iteration  23: 3746609.705 ops/s
Iteration  24: 3761516.151 ops/s
Iteration  25: 3718813.843 ops/s
Iteration  26: 3779943.617 ops/s
Iteration  27: 3782288.342 ops/s
Iteration  28: 3753186.123 ops/s
Iteration  29: 3755706.378 ops/s
Iteration  30: 3752068.122 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_merge2":
  3762394.906 ±(99.9%) 10302.304 ops/s [Average]
  (min, avg, max) = (3718813.843, 3762394.906, 3785460.137), stdev = 15420.005
  CI (99.9%): [3752092.602, 3772697.210] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                               Mode  Cnt        Score       Error  Units
MaybeTest._Benchmark.benchmark_merge2  thrpt   30  3762394.906 ± 10302.304  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_merge3$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_merge3

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1638115.266 ops/s
# Warmup Iteration   2: 2369572.420 ops/s
# Warmup Iteration   3: 2733164.745 ops/s
# Warmup Iteration   4: 2851207.775 ops/s
# Warmup Iteration   5: 3105577.379 ops/s
# Warmup Iteration   6: 3107956.608 ops/s
# Warmup Iteration   7: 3082836.967 ops/s
# Warmup Iteration   8: 3097543.606 ops/s
# Warmup Iteration   9: 3112187.127 ops/s
# Warmup Iteration  10: 3107212.318 ops/s
# Warmup Iteration  11: 3103207.741 ops/s
# Warmup Iteration  12: 3109475.712 ops/s
# Warmup Iteration  13: 3129671.164 ops/s
# Warmup Iteration  14: 3098109.769 ops/s
# Warmup Iteration  15: 3121742.117 ops/s
# Warmup Iteration  16: 3098875.711 ops/s
# Warmup Iteration  17: 3138795.642 ops/s
# Warmup Iteration  18: 3123419.620 ops/s
# Warmup Iteration  19: 3119216.963 ops/s
# Warmup Iteration  20: 3105812.895 ops/s
# Warmup Iteration  21: 3104229.115 ops/s
# Warmup Iteration  22: 3100057.596 ops/s
# Warmup Iteration  23: 3106747.618 ops/s
# Warmup Iteration  24: 3084581.337 ops/s
# Warmup Iteration  25: 3099381.056 ops/s
# Warmup Iteration  26: 3107073.899 ops/s
# Warmup Iteration  27: 3105709.192 ops/s
# Warmup Iteration  28: 3116258.695 ops/s
# Warmup Iteration  29: 3106582.254 ops/s
# Warmup Iteration  30: 3137599.321 ops/s
Iteration   1: 3131782.869 ops/s
Iteration   2: 3111829.449 ops/s
Iteration   3: 3087383.297 ops/s
Iteration   4: 3057446.968 ops/s
Iteration   5: 3107725.077 ops/s
Iteration   6: 3104857.223 ops/s
Iteration   7: 3110374.373 ops/s
Iteration   8: 3124879.313 ops/s
Iteration   9: 3120047.078 ops/s
Iteration  10: 3115867.911 ops/s
Iteration  11: 3096103.679 ops/s
Iteration  12: 3107580.429 ops/s
Iteration  13: 3122535.349 ops/s
Iteration  14: 3103332.698 ops/s
Iteration  15: 3096961.518 ops/s
Iteration  16: 3111097.889 ops/s
Iteration  17: 3119677.044 ops/s
Iteration  18: 3108207.705 ops/s
Iteration  19: 3120241.894 ops/s
Iteration  20: 3100652.698 ops/s
Iteration  21: 3122535.675 ops/s
Iteration  22: 3096474.464 ops/s
Iteration  23: 3120441.210 ops/s
Iteration  24: 3115192.153 ops/s
Iteration  25: 3119689.319 ops/s
Iteration  26: 3124048.503 ops/s
Iteration  27: 3104572.242 ops/s
Iteration  28: 3127268.630 ops/s
Iteration  29: 3106896.581 ops/s
Iteration  30: 3131887.433 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_merge3":
  3110919.689 ±(99.9%) 10047.677 ops/s [Average]
  (min, avg, max) = (3057446.968, 3110919.689, 3131887.433), stdev = 15038.892
  CI (99.9%): [3100872.012, 3120967.367] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                               Mode  Cnt        Score       Error  Units
MaybeTest._Benchmark.benchmark_merge3  thrpt   30  3110919.689 ± 10047.677  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_merge4$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_merge4

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1531148.751 ops/s
# Warmup Iteration   2: 1992605.231 ops/s
# Warmup Iteration   3: 2419780.593 ops/s
# Warmup Iteration   4: 2655837.312 ops/s
# Warmup Iteration   5: 2918670.409 ops/s
# Warmup Iteration   6: 2927598.700 ops/s
# Warmup Iteration   7: 2913864.608 ops/s
# Warmup Iteration   8: 2919451.534 ops/s
# Warmup Iteration   9: 2928380.800 ops/s
# Warmup Iteration  10: 2924151.957 ops/s
# Warmup Iteration  11: 2907568.783 ops/s
# Warmup Iteration  12: 2889626.587 ops/s
# Warmup Iteration  13: 2911264.779 ops/s
# Warmup Iteration  14: 2931912.888 ops/s
# Warmup Iteration  15: 2928197.320 ops/s
# Warmup Iteration  16: 2937992.480 ops/s
# Warmup Iteration  17: 2936418.836 ops/s
# Warmup Iteration  18: 2933907.667 ops/s
# Warmup Iteration  19: 2935220.812 ops/s
# Warmup Iteration  20: 2943170.887 ops/s
# Warmup Iteration  21: 2933030.020 ops/s
# Warmup Iteration  22: 2937055.848 ops/s
# Warmup Iteration  23: 2932918.231 ops/s
# Warmup Iteration  24: 2960037.741 ops/s
# Warmup Iteration  25: 2915677.484 ops/s
# Warmup Iteration  26: 2934169.938 ops/s
# Warmup Iteration  27: 2946545.822 ops/s
# Warmup Iteration  28: 2935158.625 ops/s
# Warmup Iteration  29: 2916098.679 ops/s
# Warmup Iteration  30: 2921243.756 ops/s
Iteration   1: 2940146.762 ops/s
Iteration   2: 2918699.688 ops/s
Iteration   3: 2941009.205 ops/s
Iteration   4: 2937588.868 ops/s
Iteration   5: 2928587.328 ops/s
Iteration   6: 2925507.241 ops/s
Iteration   7: 2940859.846 ops/s
Iteration   8: 2934264.179 ops/s
Iteration   9: 2917224.926 ops/s
Iteration  10: 2922057.521 ops/s
Iteration  11: 2941427.634 ops/s
Iteration  12: 2941160.416 ops/s
Iteration  13: 2927523.796 ops/s
Iteration  14: 2916750.506 ops/s
Iteration  15: 2930147.884 ops/s
Iteration  16: 2935716.877 ops/s
Iteration  17: 2927297.494 ops/s
Iteration  18: 2948866.518 ops/s
Iteration  19: 2951807.974 ops/s
Iteration  20: 2913696.976 ops/s
Iteration  21: 2920074.981 ops/s
Iteration  22: 2916121.603 ops/s
Iteration  23: 2941558.792 ops/s
Iteration  24: 2913138.583 ops/s
Iteration  25: 2936309.896 ops/s
Iteration  26: 2949662.916 ops/s
Iteration  27: 2952804.310 ops/s
Iteration  28: 2920517.302 ops/s
Iteration  29: 2933151.113 ops/s
Iteration  30: 2937348.506 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_merge4":
  2932034.321 ±(99.9%) 7898.788 ops/s [Average]
  (min, avg, max) = (2913138.583, 2932034.321, 2952804.310), stdev = 11822.535
  CI (99.9%): [2924135.534, 2939933.109] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                               Mode  Cnt        Score      Error  Units
MaybeTest._Benchmark.benchmark_merge4  thrpt   30  2932034.321 ± 7898.788  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_mergeArrayFused$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_mergeArrayFused

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1672865.712 ops/s
# Warmup Iteration   2: 2403939.399 ops/s
# Warmup Iteration   3: 2671878.432 ops/s
# Warmup Iteration   4: 2807953.920 ops/s
# Warmup Iteration   5: 3051398.798 ops/s
# Warmup Iteration   6: 3048097.826 ops/s
# Warmup Iteration   7: 3032973.503 ops/s
# Warmup Iteration   8: 3050438.836 ops/s
# Warmup Iteration   9: 3053210.992 ops/s
# Warmup Iteration  10: 3045287.252 ops/s
# Warmup Iteration  11: 3036455.340 ops/s
# Warmup Iteration  12: 3029830.778 ops/s
# Warmup Iteration  13: 3057065.277 ops/s
# Warmup Iteration  14: 3068185.656 ops/s
# Warmup Iteration  15: 3073494.597 ops/s
# Warmup Iteration  16: 3018723.053 ops/s
# Warmup Iteration  17: 3055585.888 ops/s
# Warmup Iteration  18: 3027750.824 ops/s
# Warmup Iteration  19: 3027813.509 ops/s
# Warmup Iteration  20: 3046288.093 ops/s
# Warmup Iteration  21: 3040754.507 ops/s
# Warmup Iteration  22: 3036399.706 ops/s
# Warmup Iteration  23: 3020408.490 ops/s
# Warmup Iteration  24: 3055576.572 ops/s
# Warmup Iteration  25: 3029491.755 ops/s
# Warmup Iteration  26: 3041794.144 ops/s
# Warmup Iteration  27: 3032627.940 ops/s
# Warmup Iteration  28: 3031561.881 ops/s
# Warmup Iteration  29: 3021864.838 ops/s
# Warmup Iteration  30: 3034360.865 ops/s
Iteration   1: 3025122.465 ops/s
Iteration   2: 3021797.295 ops/s
Iteration   3: 3028350.745 ops/s
Iteration   4: 3029387.411 ops/s
Iteration   5: 3022475.363 ops/s
Iteration   6: 3055405.463 ops/s
Iteration   7: 3031283.897 ops/s
Iteration   8: 3013234.517 ops/s
Iteration   9: 3051916.677 ops/s
Iteration  10: 3034116.941 ops/s
Iteration  11: 3043600.099 ops/s
Iteration  12: 3039430.858 ops/s
Iteration  13: 3029947.329 ops/s
Iteration  14: 3040539.407 ops/s
Iteration  15: 3055218.262 ops/s
Iteration  16: 3050004.423 ops/s
Iteration  17: 3045462.589 ops/s
Iteration  18: 3019762.756 ops/s
Iteration  19: 3023385.396 ops/s
Iteration  20: 3027805.935 ops/s
Iteration  21: 3043298.454 ops/s
Iteration  22: 3040061.612 ops/s
Iteration  23: 3018354.151 ops/s
Iteration  24: 3039455.912 ops/s
Iteration  25: 3027238.008 ops/s
Iteration  26: 3054500.102 ops/s
Iteration  27: 3051067.268 ops/s
Iteration  28: 3040590.064 ops/s
Iteration  29: 3049961.067 ops/s
Iteration  30: 3052926.185 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_mergeArrayFused":
  3036856.688 ±(99.9%) 8387.455 ops/s [Average]
  (min, avg, max) = (3013234.517, 3036856.688, 3055405.463), stdev = 12553.949
  CI (99.9%): [3028469.233, 3045244.143] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt        Score      Error  Units
MaybeTest._Benchmark.benchmark_mergeArrayFused  thrpt   30  3036856.688 ± 8387.455  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_mergeErrorSuccess$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_mergeErrorSuccess

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 522624.638 ops/s
# Warmup Iteration   2: 703206.738 ops/s
# Warmup Iteration   3: 707979.896 ops/s
# Warmup Iteration   4: 781394.035 ops/s
# Warmup Iteration   5: 808090.671 ops/s
# Warmup Iteration   6: 804769.413 ops/s
# Warmup Iteration   7: 802949.400 ops/s
# Warmup Iteration   8: 802317.371 ops/s
# Warmup Iteration   9: 803972.750 ops/s
# Warmup Iteration  10: 799543.904 ops/s
# Warmup Iteration  11: 800462.421 ops/s
# Warmup Iteration  12: 802026.502 ops/s
# Warmup Iteration  13: 799744.651 ops/s
# Warmup Iteration  14: 801957.711 ops/s
# Warmup Iteration  15: 799336.232 ops/s
# Warmup Iteration  16: 801603.302 ops/s
# Warmup Iteration  17: 845218.274 ops/s
# Warmup Iteration  18: 844826.062 ops/s
# Warmup Iteration  19: 846180.686 ops/s
# Warmup Iteration  20: 841778.381 ops/s
# Warmup Iteration  21: 845558.840 ops/s
# Warmup Iteration  22: 844043.106 ops/s
# Warmup Iteration  23: 841957.017 ops/s
# Warmup Iteration  24: 846530.300 ops/s
# Warmup Iteration  25: 847699.847 ops/s
# Warmup Iteration  26: 842237.372 ops/s
# Warmup Iteration  27: 839531.882 ops/s
# Warmup Iteration  28: 844020.635 ops/s
# Warmup Iteration  29: 849844.846 ops/s
# Warmup Iteration  30: 841902.108 ops/s
Iteration   1: 844336.694 ops/s
Iteration   2: 842283.258 ops/s
Iteration   3: 840614.231 ops/s
Iteration   4: 839982.943 ops/s
Iteration   5: 844385.904 ops/s
Iteration   6: 847496.291 ops/s
Iteration   7: 844960.283 ops/s
Iteration   8: 842360.132 ops/s
Iteration   9: 844213.314 ops/s
Iteration  10: 845939.873 ops/s
Iteration  11: 842354.907 ops/s
Iteration  12: 851095.445 ops/s
Iteration  13: 847310.112 ops/s
Iteration  14: 844993.808 ops/s
Iteration  15: 845245.353 ops/s
Iteration  16: 850444.854 ops/s
Iteration  17: 848824.029 ops/s
Iteration  18: 845895.992 ops/s
Iteration  19: 842112.109 ops/s
Iteration  20: 845793.357 ops/s
Iteration  21: 847137.114 ops/s
Iteration  22: 845004.511 ops/s
Iteration  23: 842970.882 ops/s
Iteration  24: 847253.401 ops/s
Iteration  25: 845130.269 ops/s
Iteration  26: 840898.456 ops/s
Iteration  27: 842205.406 ops/s
Iteration  28: 845017.307 ops/s
Iteration  29: 842990.536 ops/s
Iteration  30: 841939.062 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_mergeErrorSuccess":
  844706.328 ±(99.9%) 1840.729 ops/s [Average]
  (min, avg, max) = (839982.943, 844706.328, 851095.445), stdev = 2755.117
  CI (99.9%): [842865.598, 846547.057] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt       Score      Error  Units
MaybeTest._Benchmark.benchmark_mergeErrorSuccess  thrpt   30  844706.328 ± 1840.729  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_mergeSuccessError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_mergeSuccessError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 500536.642 ops/s
# Warmup Iteration   2: 676856.722 ops/s
# Warmup Iteration   3: 688118.877 ops/s
# Warmup Iteration   4: 760238.064 ops/s
# Warmup Iteration   5: 792691.850 ops/s
# Warmup Iteration   6: 791151.676 ops/s
# Warmup Iteration   7: 793385.401 ops/s
# Warmup Iteration   8: 790399.316 ops/s
# Warmup Iteration   9: 792297.710 ops/s
# Warmup Iteration  10: 791015.934 ops/s
# Warmup Iteration  11: 781113.159 ops/s
# Warmup Iteration  12: 788443.720 ops/s
# Warmup Iteration  13: 788160.990 ops/s
# Warmup Iteration  14: 788782.679 ops/s
# Warmup Iteration  15: 785393.683 ops/s
# Warmup Iteration  16: 782604.316 ops/s
# Warmup Iteration  17: 830460.263 ops/s
# Warmup Iteration  18: 828925.389 ops/s
# Warmup Iteration  19: 827080.133 ops/s
# Warmup Iteration  20: 826152.314 ops/s
# Warmup Iteration  21: 828083.310 ops/s
# Warmup Iteration  22: 825845.049 ops/s
# Warmup Iteration  23: 826181.901 ops/s
# Warmup Iteration  24: 826412.425 ops/s
# Warmup Iteration  25: 825130.429 ops/s
# Warmup Iteration  26: 829194.904 ops/s
# Warmup Iteration  27: 826272.722 ops/s
# Warmup Iteration  28: 825423.052 ops/s
# Warmup Iteration  29: 810235.524 ops/s
# Warmup Iteration  30: 824843.084 ops/s
Iteration   1: 827871.308 ops/s
Iteration   2: 828613.555 ops/s
Iteration   3: 829250.715 ops/s
Iteration   4: 834775.833 ops/s
Iteration   5: 825486.520 ops/s
Iteration   6: 828317.340 ops/s
Iteration   7: 826012.844 ops/s
Iteration   8: 828668.347 ops/s
Iteration   9: 825544.758 ops/s
Iteration  10: 828327.909 ops/s
Iteration  11: 827506.820 ops/s
Iteration  12: 823809.046 ops/s
Iteration  13: 828533.821 ops/s
Iteration  14: 832263.437 ops/s
Iteration  15: 826067.527 ops/s
Iteration  16: 825027.565 ops/s
Iteration  17: 826441.372 ops/s
Iteration  18: 829099.792 ops/s
Iteration  19: 822961.840 ops/s
Iteration  20: 829795.419 ops/s
Iteration  21: 826192.699 ops/s
Iteration  22: 826353.194 ops/s
Iteration  23: 834483.748 ops/s
Iteration  24: 829423.089 ops/s
Iteration  25: 829064.361 ops/s
Iteration  26: 830091.606 ops/s
Iteration  27: 819830.513 ops/s
Iteration  28: 829706.045 ops/s
Iteration  29: 829455.725 ops/s
Iteration  30: 822760.818 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_mergeSuccessError":
  827724.586 ±(99.9%) 2143.128 ops/s [Average]
  (min, avg, max) = (819830.513, 827724.586, 834775.833), stdev = 3207.733
  CI (99.9%): [825581.458, 829867.713] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt       Score      Error  Units
MaybeTest._Benchmark.benchmark_mergeSuccessError  thrpt   30  827724.586 ± 2143.128  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_mergeArrayBackpressured$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_mergeArrayBackpressured

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1520562.928 ops/s
# Warmup Iteration   2: 2018111.521 ops/s
# Warmup Iteration   3: 2444719.954 ops/s
# Warmup Iteration   4: 2590730.338 ops/s
# Warmup Iteration   5: 2775187.633 ops/s
# Warmup Iteration   6: 2790575.667 ops/s
# Warmup Iteration   7: 2784019.217 ops/s
# Warmup Iteration   8: 2757003.502 ops/s
# Warmup Iteration   9: 2736052.383 ops/s
# Warmup Iteration  10: 2760673.235 ops/s
# Warmup Iteration  11: 2749762.137 ops/s
# Warmup Iteration  12: 2762269.327 ops/s
# Warmup Iteration  13: 2780541.152 ops/s
# Warmup Iteration  14: 2786001.326 ops/s
# Warmup Iteration  15: 2778151.018 ops/s
# Warmup Iteration  16: 2768084.633 ops/s
# Warmup Iteration  17: 2768844.942 ops/s
# Warmup Iteration  18: 2744227.821 ops/s
# Warmup Iteration  19: 2758316.599 ops/s
# Warmup Iteration  20: 2762564.724 ops/s
# Warmup Iteration  21: 2771581.934 ops/s
# Warmup Iteration  22: 2775547.006 ops/s
# Warmup Iteration  23: 2792338.867 ops/s
# Warmup Iteration  24: 2763783.460 ops/s
# Warmup Iteration  25: 2749072.340 ops/s
# Warmup Iteration  26: 2772776.827 ops/s
# Warmup Iteration  27: 2761448.466 ops/s
# Warmup Iteration  28: 2754836.193 ops/s
# Warmup Iteration  29: 2746850.627 ops/s
# Warmup Iteration  30: 2776923.680 ops/s
Iteration   1: 2758601.193 ops/s
Iteration   2: 2786154.814 ops/s
Iteration   3: 2756930.709 ops/s
Iteration   4: 2764409.036 ops/s
Iteration   5: 2772960.257 ops/s
Iteration   6: 2733397.741 ops/s
Iteration   7: 2739261.994 ops/s
Iteration   8: 2776030.123 ops/s
Iteration   9: 2738047.234 ops/s
Iteration  10: 2760742.711 ops/s
Iteration  11: 2797947.645 ops/s
Iteration  12: 2751977.893 ops/s
Iteration  13: 2751370.834 ops/s
Iteration  14: 2759177.899 ops/s
Iteration  15: 2760834.625 ops/s
Iteration  16: 2815043.935 ops/s
Iteration  17: 2771368.506 ops/s
Iteration  18: 2746671.657 ops/s
Iteration  19: 2776468.565 ops/s
Iteration  20: 2751014.757 ops/s
Iteration  21: 2754204.121 ops/s
Iteration  22: 2767781.276 ops/s
Iteration  23: 2785245.147 ops/s
Iteration  24: 2768150.070 ops/s
Iteration  25: 2766543.299 ops/s
Iteration  26: 2752923.820 ops/s
Iteration  27: 2765139.767 ops/s
Iteration  28: 2769133.394 ops/s
Iteration  29: 2786471.139 ops/s
Iteration  30: 2745186.307 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_mergeArrayBackpressured":
  2764306.349 ±(99.9%) 12024.343 ops/s [Average]
  (min, avg, max) = (2733397.741, 2764306.349, 2815043.935), stdev = 17997.472
  CI (99.9%): [2752282.006, 2776330.692] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
MaybeTest._Benchmark.benchmark_mergeArrayBackpressured  thrpt   30  2764306.349 ± 12024.343  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_ambArray1SignalsSuccess$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_ambArray1SignalsSuccess

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1339655.147 ops/s
# Warmup Iteration   2: 1886870.176 ops/s
# Warmup Iteration   3: 2332282.436 ops/s
# Warmup Iteration   4: 2346282.210 ops/s
# Warmup Iteration   5: 2341618.547 ops/s
# Warmup Iteration   6: 2335578.616 ops/s
# Warmup Iteration   7: 2332830.995 ops/s
# Warmup Iteration   8: 2318945.172 ops/s
# Warmup Iteration   9: 2331500.617 ops/s
# Warmup Iteration  10: 2328849.746 ops/s
# Warmup Iteration  11: 2338678.789 ops/s
# Warmup Iteration  12: 2327663.728 ops/s
# Warmup Iteration  13: 2342422.434 ops/s
# Warmup Iteration  14: 2326060.615 ops/s
# Warmup Iteration  15: 2323759.427 ops/s
# Warmup Iteration  16: 2338115.657 ops/s
# Warmup Iteration  17: 2331203.652 ops/s
# Warmup Iteration  18: 2323558.220 ops/s
# Warmup Iteration  19: 2319984.368 ops/s
# Warmup Iteration  20: 2326313.364 ops/s
# Warmup Iteration  21: 2325792.723 ops/s
# Warmup Iteration  22: 2328721.927 ops/s
# Warmup Iteration  23: 2318752.476 ops/s
# Warmup Iteration  24: 2328506.809 ops/s
# Warmup Iteration  25: 2325764.645 ops/s
# Warmup Iteration  26: 2324051.519 ops/s
# Warmup Iteration  27: 2324078.602 ops/s
# Warmup Iteration  28: 2311924.005 ops/s
# Warmup Iteration  29: 2320970.439 ops/s
# Warmup Iteration  30: 2313389.643 ops/s
Iteration   1: 2323822.418 ops/s
Iteration   2: 2327864.381 ops/s
Iteration   3: 2319928.420 ops/s
Iteration   4: 2333274.232 ops/s
Iteration   5: 2331092.097 ops/s
Iteration   6: 2318557.509 ops/s
Iteration   7: 2326946.097 ops/s
Iteration   8: 2318579.849 ops/s
Iteration   9: 2320014.051 ops/s
Iteration  10: 2318823.332 ops/s
Iteration  11: 2320326.930 ops/s
Iteration  12: 2321505.113 ops/s
Iteration  13: 2312038.591 ops/s
Iteration  14: 2323222.161 ops/s
Iteration  15: 2321309.731 ops/s
Iteration  16: 2325016.393 ops/s
Iteration  17: 2331532.853 ops/s
Iteration  18: 2325546.739 ops/s
Iteration  19: 2318596.782 ops/s
Iteration  20: 2324107.583 ops/s
Iteration  21: 2329155.492 ops/s
Iteration  22: 2330347.535 ops/s
Iteration  23: 2328700.157 ops/s
Iteration  24: 2319965.979 ops/s
Iteration  25: 2338303.333 ops/s
Iteration  26: 2326123.760 ops/s
Iteration  27: 2330612.324 ops/s
Iteration  28: 2331311.134 ops/s
Iteration  29: 2320526.627 ops/s
Iteration  30: 2325881.726 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_ambArray1SignalsSuccess":
  2324767.778 ±(99.9%) 3819.226 ops/s [Average]
  (min, avg, max) = (2312038.591, 2324767.778, 2338303.333), stdev = 5716.438
  CI (99.9%): [2320948.551, 2328587.004] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
MaybeTest._Benchmark.benchmark_ambArray1SignalsSuccess  thrpt   30  2324767.778 ± 3819.226  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_mergeArrayBackpressuredMixed1$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_mergeArrayBackpressuredMixed1

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1591911.508 ops/s
# Warmup Iteration   2: 2154572.484 ops/s
# Warmup Iteration   3: 2601755.133 ops/s
# Warmup Iteration   4: 2751368.807 ops/s
# Warmup Iteration   5: 2987197.386 ops/s
# Warmup Iteration   6: 2985861.886 ops/s
# Warmup Iteration   7: 2969541.516 ops/s
# Warmup Iteration   8: 2965657.834 ops/s
# Warmup Iteration   9: 2994004.258 ops/s
# Warmup Iteration  10: 2984427.533 ops/s
# Warmup Iteration  11: 2984764.721 ops/s
# Warmup Iteration  12: 2966131.215 ops/s
# Warmup Iteration  13: 2953476.672 ops/s
# Warmup Iteration  14: 2953225.287 ops/s
# Warmup Iteration  15: 2964309.096 ops/s
# Warmup Iteration  16: 2955974.040 ops/s
# Warmup Iteration  17: 2969794.801 ops/s
# Warmup Iteration  18: 2996130.985 ops/s
# Warmup Iteration  19: 2975259.451 ops/s
# Warmup Iteration  20: 2984809.256 ops/s
# Warmup Iteration  21: 2998007.849 ops/s
# Warmup Iteration  22: 2990444.537 ops/s
# Warmup Iteration  23: 2990496.706 ops/s
# Warmup Iteration  24: 2986986.813 ops/s
# Warmup Iteration  25: 2974129.676 ops/s
# Warmup Iteration  26: 2987971.737 ops/s
# Warmup Iteration  27: 2970185.197 ops/s
# Warmup Iteration  28: 2977996.520 ops/s
# Warmup Iteration  29: 2973350.564 ops/s
# Warmup Iteration  30: 2994962.907 ops/s
Iteration   1: 2962004.118 ops/s
Iteration   2: 2978413.397 ops/s
Iteration   3: 2983894.537 ops/s
Iteration   4: 2982901.212 ops/s
Iteration   5: 2980615.410 ops/s
Iteration   6: 3015027.083 ops/s
Iteration   7: 2979697.378 ops/s
Iteration   8: 2979120.355 ops/s
Iteration   9: 2974199.696 ops/s
Iteration  10: 2965342.675 ops/s
Iteration  11: 3014910.683 ops/s
Iteration  12: 2979201.168 ops/s
Iteration  13: 3000222.749 ops/s
Iteration  14: 2979299.582 ops/s
Iteration  15: 2970892.262 ops/s
Iteration  16: 3008543.092 ops/s
Iteration  17: 2988666.720 ops/s
Iteration  18: 2981033.705 ops/s
Iteration  19: 2971512.530 ops/s
Iteration  20: 2979551.209 ops/s
Iteration  21: 2986460.769 ops/s
Iteration  22: 2979845.746 ops/s
Iteration  23: 2991080.766 ops/s
Iteration  24: 2990703.984 ops/s
Iteration  25: 2977823.799 ops/s
Iteration  26: 2985677.489 ops/s
Iteration  27: 2980426.519 ops/s
Iteration  28: 3002429.208 ops/s
Iteration  29: 2994635.330 ops/s
Iteration  30: 2981696.888 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_mergeArrayBackpressuredMixed1":
  2984861.002 ±(99.9%) 8621.464 ops/s [Average]
  (min, avg, max) = (2962004.118, 2984861.002, 3015027.083), stdev = 12904.202
  CI (99.9%): [2976239.539, 2993482.466] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
MaybeTest._Benchmark.benchmark_mergeArrayBackpressuredMixed1  thrpt   30  2984861.002 ± 8621.464  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_mergeArrayBackpressuredMixed2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_mergeArrayBackpressuredMixed2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1604559.115 ops/s
# Warmup Iteration   2: 2319359.233 ops/s
# Warmup Iteration   3: 2725411.904 ops/s
# Warmup Iteration   4: 2870409.281 ops/s
# Warmup Iteration   5: 3105155.642 ops/s
# Warmup Iteration   6: 3121960.521 ops/s
# Warmup Iteration   7: 3110744.310 ops/s
# Warmup Iteration   8: 3100163.220 ops/s
# Warmup Iteration   9: 3111742.598 ops/s
# Warmup Iteration  10: 3099781.068 ops/s
# Warmup Iteration  11: 3067090.220 ops/s
# Warmup Iteration  12: 3105965.217 ops/s
# Warmup Iteration  13: 3097186.702 ops/s
# Warmup Iteration  14: 3092553.100 ops/s
# Warmup Iteration  15: 3105059.153 ops/s
# Warmup Iteration  16: 3112396.207 ops/s
# Warmup Iteration  17: 3089659.773 ops/s
# Warmup Iteration  18: 3097997.134 ops/s
# Warmup Iteration  19: 3094344.406 ops/s
# Warmup Iteration  20: 3105593.883 ops/s
# Warmup Iteration  21: 3133143.286 ops/s
# Warmup Iteration  22: 3103668.854 ops/s
# Warmup Iteration  23: 3122016.170 ops/s
# Warmup Iteration  24: 3067697.817 ops/s
# Warmup Iteration  25: 3115985.817 ops/s
# Warmup Iteration  26: 3126479.701 ops/s
# Warmup Iteration  27: 3100870.858 ops/s
# Warmup Iteration  28: 3110828.079 ops/s
# Warmup Iteration  29: 3092736.544 ops/s
# Warmup Iteration  30: 3107340.157 ops/s
Iteration   1: 3090814.458 ops/s
Iteration   2: 3092387.443 ops/s
Iteration   3: 3084779.323 ops/s
Iteration   4: 3098642.302 ops/s
Iteration   5: 3108106.186 ops/s
Iteration   6: 3093079.611 ops/s
Iteration   7: 3099647.403 ops/s
Iteration   8: 3080678.641 ops/s
Iteration   9: 3096276.040 ops/s
Iteration  10: 3099855.762 ops/s
Iteration  11: 3096743.078 ops/s
Iteration  12: 3095775.556 ops/s
Iteration  13: 3128224.907 ops/s
Iteration  14: 3102942.685 ops/s
Iteration  15: 3094498.155 ops/s
Iteration  16: 3091169.215 ops/s
Iteration  17: 3088107.065 ops/s
Iteration  18: 3106170.663 ops/s
Iteration  19: 3103809.990 ops/s
Iteration  20: 3107304.691 ops/s
Iteration  21: 3111239.543 ops/s
Iteration  22: 3109300.549 ops/s
Iteration  23: 3092259.223 ops/s
Iteration  24: 3082783.532 ops/s
Iteration  25: 3081921.020 ops/s
Iteration  26: 3083685.852 ops/s
Iteration  27: 3099302.740 ops/s
Iteration  28: 3085915.683 ops/s
Iteration  29: 3109072.916 ops/s
Iteration  30: 3079678.291 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_mergeArrayBackpressuredMixed2":
  3096472.417 ±(99.9%) 7391.173 ops/s [Average]
  (min, avg, max) = (3079678.291, 3096472.417, 3128224.907), stdev = 11062.761
  CI (99.9%): [3089081.244, 3103863.591] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
MaybeTest._Benchmark.benchmark_mergeArrayBackpressuredMixed2  thrpt   30  3096472.417 ± 7391.173  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_mergeArrayBackpressuredMixed3$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_mergeArrayBackpressuredMixed3

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1618849.057 ops/s
# Warmup Iteration   2: 2267453.287 ops/s
# Warmup Iteration   3: 2718673.564 ops/s
# Warmup Iteration   4: 2878263.013 ops/s
# Warmup Iteration   5: 3137768.232 ops/s
# Warmup Iteration   6: 3132031.007 ops/s
# Warmup Iteration   7: 3116716.881 ops/s
# Warmup Iteration   8: 3117769.153 ops/s
# Warmup Iteration   9: 3106512.043 ops/s
# Warmup Iteration  10: 3118706.788 ops/s
# Warmup Iteration  11: 3124843.992 ops/s
# Warmup Iteration  12: 3107636.113 ops/s
# Warmup Iteration  13: 3093287.967 ops/s
# Warmup Iteration  14: 3109558.923 ops/s
# Warmup Iteration  15: 3133989.088 ops/s
# Warmup Iteration  16: 3102232.071 ops/s
# Warmup Iteration  17: 3133971.936 ops/s
# Warmup Iteration  18: 3138031.496 ops/s
# Warmup Iteration  19: 3110341.225 ops/s
# Warmup Iteration  20: 3123090.990 ops/s
# Warmup Iteration  21: 3119003.159 ops/s
# Warmup Iteration  22: 3148170.935 ops/s
# Warmup Iteration  23: 3133235.102 ops/s
# Warmup Iteration  24: 3101113.836 ops/s
# Warmup Iteration  25: 3136837.296 ops/s
# Warmup Iteration  26: 3127509.656 ops/s
# Warmup Iteration  27: 3116785.082 ops/s
# Warmup Iteration  28: 3115005.456 ops/s
# Warmup Iteration  29: 3140822.634 ops/s
# Warmup Iteration  30: 3146734.491 ops/s
Iteration   1: 3114986.728 ops/s
Iteration   2: 3132012.776 ops/s
Iteration   3: 3146038.357 ops/s
Iteration   4: 3103348.509 ops/s
Iteration   5: 3119070.125 ops/s
Iteration   6: 3146363.810 ops/s
Iteration   7: 3127171.114 ops/s
Iteration   8: 3120947.115 ops/s
Iteration   9: 3122445.206 ops/s
Iteration  10: 3144587.224 ops/s
Iteration  11: 3125266.044 ops/s
Iteration  12: 3122145.012 ops/s
Iteration  13: 3109949.361 ops/s
Iteration  14: 3134364.989 ops/s
Iteration  15: 3119495.840 ops/s
Iteration  16: 3118137.830 ops/s
Iteration  17: 3113226.931 ops/s
Iteration  18: 3131753.634 ops/s
Iteration  19: 3122091.525 ops/s
Iteration  20: 3110013.480 ops/s
Iteration  21: 3143095.623 ops/s
Iteration  22: 3123509.361 ops/s
Iteration  23: 3118605.408 ops/s
Iteration  24: 3104856.216 ops/s
Iteration  25: 3126695.070 ops/s
Iteration  26: 3101018.429 ops/s
Iteration  27: 3085471.792 ops/s
Iteration  28: 3148521.310 ops/s
Iteration  29: 3114685.488 ops/s
Iteration  30: 3139476.367 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_mergeArrayBackpressuredMixed3":
  3122978.356 ±(99.9%) 9959.488 ops/s [Average]
  (min, avg, max) = (3085471.792, 3122978.356, 3148521.310), stdev = 14906.894
  CI (99.9%): [3113018.868, 3132937.844] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
MaybeTest._Benchmark.benchmark_mergeArrayBackpressuredMixed3  thrpt   30  3122978.356 ± 9959.488  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_ambWith1SignalsSuccess$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_ambWith1SignalsSuccess

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1291394.481 ops/s
# Warmup Iteration   2: 1882886.481 ops/s
# Warmup Iteration   3: 2344074.227 ops/s
# Warmup Iteration   4: 2355005.983 ops/s
# Warmup Iteration   5: 2357030.309 ops/s
# Warmup Iteration   6: 2355109.290 ops/s
# Warmup Iteration   7: 2344896.501 ops/s
# Warmup Iteration   8: 2344780.083 ops/s
# Warmup Iteration   9: 2349147.623 ops/s
# Warmup Iteration  10: 2344886.658 ops/s
# Warmup Iteration  11: 2348765.186 ops/s
# Warmup Iteration  12: 2340027.681 ops/s
# Warmup Iteration  13: 2350577.488 ops/s
# Warmup Iteration  14: 2344584.532 ops/s
# Warmup Iteration  15: 2351820.118 ops/s
# Warmup Iteration  16: 2348796.089 ops/s
# Warmup Iteration  17: 2344821.856 ops/s
# Warmup Iteration  18: 2355017.263 ops/s
# Warmup Iteration  19: 2335475.494 ops/s
# Warmup Iteration  20: 2333926.446 ops/s
# Warmup Iteration  21: 2347063.756 ops/s
# Warmup Iteration  22: 2331308.312 ops/s
# Warmup Iteration  23: 2343113.117 ops/s
# Warmup Iteration  24: 2349010.834 ops/s
# Warmup Iteration  25: 2349230.222 ops/s
# Warmup Iteration  26: 2343734.274 ops/s
# Warmup Iteration  27: 2340670.730 ops/s
# Warmup Iteration  28: 2350694.295 ops/s
# Warmup Iteration  29: 2345563.852 ops/s
# Warmup Iteration  30: 2332617.221 ops/s
Iteration   1: 2355649.252 ops/s
Iteration   2: 2336152.506 ops/s
Iteration   3: 2343096.577 ops/s
Iteration   4: 2360321.865 ops/s
Iteration   5: 2350017.110 ops/s
Iteration   6: 2349261.443 ops/s
Iteration   7: 2355467.009 ops/s
Iteration   8: 2352964.607 ops/s
Iteration   9: 2345897.323 ops/s
Iteration  10: 2341324.791 ops/s
Iteration  11: 2348143.840 ops/s
Iteration  12: 2343670.054 ops/s
Iteration  13: 2350532.866 ops/s
Iteration  14: 2344563.335 ops/s
Iteration  15: 2344589.103 ops/s
Iteration  16: 2345459.170 ops/s
Iteration  17: 2337018.265 ops/s
Iteration  18: 2362134.776 ops/s
Iteration  19: 2346909.941 ops/s
Iteration  20: 2337178.943 ops/s
Iteration  21: 2334539.392 ops/s
Iteration  22: 2343974.502 ops/s
Iteration  23: 2340430.147 ops/s
Iteration  24: 2335970.220 ops/s
Iteration  25: 2354665.395 ops/s
Iteration  26: 2339006.693 ops/s
Iteration  27: 2338476.973 ops/s
Iteration  28: 2345361.567 ops/s
Iteration  29: 2341906.606 ops/s
Iteration  30: 2350979.530 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_ambWith1SignalsSuccess":
  2345855.460 ±(99.9%) 4859.109 ops/s [Average]
  (min, avg, max) = (2334539.392, 2345855.460, 2362134.776), stdev = 7272.886
  CI (99.9%): [2340996.351, 2350714.569] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
MaybeTest._Benchmark.benchmark_ambWith1SignalsSuccess  thrpt   30  2345855.460 ± 4859.109  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_ambWith2SignalsSuccess$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_ambWith2SignalsSuccess

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1244089.033 ops/s
# Warmup Iteration   2: 1825765.700 ops/s
# Warmup Iteration   3: 2234990.055 ops/s
# Warmup Iteration   4: 2288342.974 ops/s
# Warmup Iteration   5: 2292602.674 ops/s
# Warmup Iteration   6: 2298840.087 ops/s
# Warmup Iteration   7: 2283674.049 ops/s
# Warmup Iteration   8: 2259007.327 ops/s
# Warmup Iteration   9: 2278950.066 ops/s
# Warmup Iteration  10: 2281172.774 ops/s
# Warmup Iteration  11: 2283844.629 ops/s
# Warmup Iteration  12: 2279048.493 ops/s
# Warmup Iteration  13: 2275818.132 ops/s
# Warmup Iteration  14: 2281291.422 ops/s
# Warmup Iteration  15: 2292555.692 ops/s
# Warmup Iteration  16: 2278976.641 ops/s
# Warmup Iteration  17: 2283944.154 ops/s
# Warmup Iteration  18: 2287658.771 ops/s
# Warmup Iteration  19: 2291699.090 ops/s
# Warmup Iteration  20: 2278163.398 ops/s
# Warmup Iteration  21: 2291958.097 ops/s
# Warmup Iteration  22: 2278200.062 ops/s
# Warmup Iteration  23: 2276636.612 ops/s
# Warmup Iteration  24: 2281717.507 ops/s
# Warmup Iteration  25: 2292481.052 ops/s
# Warmup Iteration  26: 2288631.428 ops/s
# Warmup Iteration  27: 2282548.887 ops/s
# Warmup Iteration  28: 2284200.369 ops/s
# Warmup Iteration  29: 2282376.845 ops/s
# Warmup Iteration  30: 2277222.356 ops/s
Iteration   1: 2271782.342 ops/s
Iteration   2: 2274404.648 ops/s
Iteration   3: 2288995.629 ops/s
Iteration   4: 2282336.604 ops/s
Iteration   5: 2278905.118 ops/s
Iteration   6: 2283760.792 ops/s
Iteration   7: 2283483.018 ops/s
Iteration   8: 2283743.327 ops/s
Iteration   9: 2281459.903 ops/s
Iteration  10: 2274096.925 ops/s
Iteration  11: 2276874.321 ops/s
Iteration  12: 2277733.457 ops/s
Iteration  13: 2285056.893 ops/s
Iteration  14: 2276073.961 ops/s
Iteration  15: 2275578.519 ops/s
Iteration  16: 2289144.482 ops/s
Iteration  17: 2274173.592 ops/s
Iteration  18: 2286337.681 ops/s
Iteration  19: 2281873.297 ops/s
Iteration  20: 2273755.494 ops/s
Iteration  21: 2280214.852 ops/s
Iteration  22: 2283132.247 ops/s
Iteration  23: 2271073.321 ops/s
Iteration  24: 2276378.785 ops/s
Iteration  25: 2274877.934 ops/s
Iteration  26: 2271821.686 ops/s
Iteration  27: 2283217.645 ops/s
Iteration  28: 2281204.834 ops/s
Iteration  29: 2278233.671 ops/s
Iteration  30: 2286539.382 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_ambWith2SignalsSuccess":
  2279542.145 ±(99.9%) 3479.453 ops/s [Average]
  (min, avg, max) = (2271073.321, 2279542.145, 2289144.482), stdev = 5207.881
  CI (99.9%): [2276062.693, 2283021.598] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
MaybeTest._Benchmark.benchmark_ambWith2SignalsSuccess  thrpt   30  2279542.145 ± 3479.453  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.CompletableAndThenObservableTest._Benchmark.benchmark_cancelMain$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.CompletableAndThenObservableTest._Benchmark.benchmark_cancelMain

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3288276.519 ops/s
# Warmup Iteration   2: 5035056.394 ops/s
# Warmup Iteration   3: 5486546.574 ops/s
# Warmup Iteration   4: 5484370.328 ops/s
# Warmup Iteration   5: 5431058.438 ops/s
# Warmup Iteration   6: 5429167.810 ops/s
# Warmup Iteration   7: 5427540.421 ops/s
# Warmup Iteration   8: 5442248.871 ops/s
# Warmup Iteration   9: 5463843.202 ops/s
# Warmup Iteration  10: 5454805.615 ops/s
# Warmup Iteration  11: 5440074.071 ops/s
# Warmup Iteration  12: 5421036.072 ops/s
# Warmup Iteration  13: 5429277.847 ops/s
# Warmup Iteration  14: 5435963.395 ops/s
# Warmup Iteration  15: 5432191.417 ops/s
# Warmup Iteration  16: 5448737.913 ops/s
# Warmup Iteration  17: 5468720.113 ops/s
# Warmup Iteration  18: 5453529.920 ops/s
# Warmup Iteration  19: 5482927.786 ops/s
# Warmup Iteration  20: 5444289.570 ops/s
# Warmup Iteration  21: 5430929.017 ops/s
# Warmup Iteration  22: 5439793.214 ops/s
# Warmup Iteration  23: 5456866.509 ops/s
# Warmup Iteration  24: 5451197.870 ops/s
# Warmup Iteration  25: 5469791.385 ops/s
# Warmup Iteration  26: 5489054.048 ops/s
# Warmup Iteration  27: 5470482.605 ops/s
# Warmup Iteration  28: 5443027.902 ops/s
# Warmup Iteration  29: 5472241.098 ops/s
# Warmup Iteration  30: 5418751.319 ops/s
Iteration   1: 5479443.275 ops/s
Iteration   2: 5438630.220 ops/s
Iteration   3: 5478146.039 ops/s
Iteration   4: 5426581.540 ops/s
Iteration   5: 5490707.822 ops/s
Iteration   6: 5448230.511 ops/s
Iteration   7: 5474315.277 ops/s
Iteration   8: 5452442.721 ops/s
Iteration   9: 5461660.141 ops/s
Iteration  10: 5431023.911 ops/s
Iteration  11: 5457571.291 ops/s
Iteration  12: 5423361.382 ops/s
Iteration  13: 5404446.946 ops/s
Iteration  14: 5464133.283 ops/s
Iteration  15: 5455450.176 ops/s
Iteration  16: 5443320.160 ops/s
Iteration  17: 5496649.458 ops/s
Iteration  18: 5441109.824 ops/s
Iteration  19: 5456008.843 ops/s
Iteration  20: 5474704.604 ops/s
Iteration  21: 5443934.590 ops/s
Iteration  22: 5432608.993 ops/s
Iteration  23: 5489917.293 ops/s
Iteration  24: 5480049.850 ops/s
Iteration  25: 5441740.020 ops/s
Iteration  26: 5452166.064 ops/s
Iteration  27: 5463590.944 ops/s
Iteration  28: 5474083.794 ops/s
Iteration  29: 5449411.346 ops/s
Iteration  30: 5451795.557 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.CompletableAndThenObservableTest._Benchmark.benchmark_cancelMain":
  5455907.862 ±(99.9%) 14541.510 ops/s [Average]
  (min, avg, max) = (5404446.946, 5455907.862, 5496649.458), stdev = 21765.050
  CI (99.9%): [5441366.352, 5470449.373] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
CompletableAndThenObservableTest._Benchmark.benchmark_cancelMain  thrpt   30  5455907.862 ± 14541.510  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromCompletableTest._Benchmark.benchmark_disposed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromCompletableTest._Benchmark.benchmark_disposed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 11799827.968 ops/s
# Warmup Iteration   2: 15456896.820 ops/s
# Warmup Iteration   3: 17997150.155 ops/s
# Warmup Iteration   4: 17875089.344 ops/s
# Warmup Iteration   5: 17895237.254 ops/s
# Warmup Iteration   6: 17867013.492 ops/s
# Warmup Iteration   7: 17967601.095 ops/s
# Warmup Iteration   8: 17963762.474 ops/s
# Warmup Iteration   9: 17913029.586 ops/s
# Warmup Iteration  10: 17984441.978 ops/s
# Warmup Iteration  11: 17975146.899 ops/s
# Warmup Iteration  12: 17936817.503 ops/s
# Warmup Iteration  13: 18001839.457 ops/s
# Warmup Iteration  14: 17987670.135 ops/s
# Warmup Iteration  15: 17865834.828 ops/s
# Warmup Iteration  16: 17953898.860 ops/s
# Warmup Iteration  17: 17927266.671 ops/s
# Warmup Iteration  18: 17848728.201 ops/s
# Warmup Iteration  19: 17898330.275 ops/s
# Warmup Iteration  20: 17904558.489 ops/s
# Warmup Iteration  21: 17917194.933 ops/s
# Warmup Iteration  22: 17888398.109 ops/s
# Warmup Iteration  23: 17880305.076 ops/s
# Warmup Iteration  24: 17951785.060 ops/s
# Warmup Iteration  25: 18018669.927 ops/s
# Warmup Iteration  26: 17976065.543 ops/s
# Warmup Iteration  27: 17891496.641 ops/s
# Warmup Iteration  28: 17866790.853 ops/s
# Warmup Iteration  29: 17958524.654 ops/s
# Warmup Iteration  30: 17863901.700 ops/s
Iteration   1: 17884132.326 ops/s
Iteration   2: 17902915.259 ops/s
Iteration   3: 18005386.329 ops/s
Iteration   4: 17834425.748 ops/s
Iteration   5: 17891927.528 ops/s
Iteration   6: 17967980.062 ops/s
Iteration   7: 17900734.498 ops/s
Iteration   8: 17950973.835 ops/s
Iteration   9: 17930520.608 ops/s
Iteration  10: 17882044.641 ops/s
Iteration  11: 17935671.500 ops/s
Iteration  12: 17991722.719 ops/s
Iteration  13: 17909934.351 ops/s
Iteration  14: 17791153.271 ops/s
Iteration  15: 17930697.046 ops/s
Iteration  16: 17892781.796 ops/s
Iteration  17: 17905713.099 ops/s
Iteration  18: 17961244.225 ops/s
Iteration  19: 17957648.987 ops/s
Iteration  20: 17877261.183 ops/s
Iteration  21: 17914588.711 ops/s
Iteration  22: 17876828.234 ops/s
Iteration  23: 17899502.964 ops/s
Iteration  24: 17872117.842 ops/s
Iteration  25: 18003386.134 ops/s
Iteration  26: 17906512.923 ops/s
Iteration  27: 17915250.283 ops/s
Iteration  28: 17882632.058 ops/s
Iteration  29: 18000077.351 ops/s
Iteration  30: 17917406.018 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFromCompletableTest._Benchmark.benchmark_disposed":
  17916439.051 ±(99.9%) 32697.749 ops/s [Average]
  (min, avg, max) = (17791153.271, 17916439.051, 18005386.329), stdev = 48940.454
  CI (99.9%): [17883741.302, 17949136.800] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score       Error  Units
ObservableFromCompletableTest._Benchmark.benchmark_disposed  thrpt   30  17916439.051 ± 32697.749  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.CompletableAndThenObservableTest._Benchmark.benchmark_cancelOther$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.CompletableAndThenObservableTest._Benchmark.benchmark_cancelOther

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2627673.238 ops/s
# Warmup Iteration   2: 3767292.302 ops/s
# Warmup Iteration   3: 4260903.685 ops/s
# Warmup Iteration   4: 4271437.929 ops/s
# Warmup Iteration   5: 4276226.121 ops/s
# Warmup Iteration   6: 4276305.048 ops/s
# Warmup Iteration   7: 4253614.276 ops/s
# Warmup Iteration   8: 4249643.146 ops/s
# Warmup Iteration   9: 4275383.689 ops/s
# Warmup Iteration  10: 4267128.813 ops/s
# Warmup Iteration  11: 4251634.997 ops/s
# Warmup Iteration  12: 4271396.092 ops/s
# Warmup Iteration  13: 4270965.667 ops/s
# Warmup Iteration  14: 4263543.240 ops/s
# Warmup Iteration  15: 4259398.926 ops/s
# Warmup Iteration  16: 4268571.828 ops/s
# Warmup Iteration  17: 4257278.497 ops/s
# Warmup Iteration  18: 4254415.716 ops/s
# Warmup Iteration  19: 4282679.472 ops/s
# Warmup Iteration  20: 4261424.413 ops/s
# Warmup Iteration  21: 4282901.725 ops/s
# Warmup Iteration  22: 4251684.948 ops/s
# Warmup Iteration  23: 4286135.956 ops/s
# Warmup Iteration  24: 4299823.938 ops/s
# Warmup Iteration  25: 4243019.409 ops/s
# Warmup Iteration  26: 4271349.594 ops/s
# Warmup Iteration  27: 4263865.498 ops/s
# Warmup Iteration  28: 4275575.738 ops/s
# Warmup Iteration  29: 4249212.056 ops/s
# Warmup Iteration  30: 4308890.232 ops/s
Iteration   1: 4275419.631 ops/s
Iteration   2: 4272777.114 ops/s
Iteration   3: 4300181.009 ops/s
Iteration   4: 4275144.863 ops/s
Iteration   5: 4277873.953 ops/s
Iteration   6: 4257253.508 ops/s
Iteration   7: 4247125.579 ops/s
Iteration   8: 4255280.409 ops/s
Iteration   9: 4268511.816 ops/s
Iteration  10: 4259257.441 ops/s
Iteration  11: 4287479.654 ops/s
Iteration  12: 4269042.311 ops/s
Iteration  13: 4255939.334 ops/s
Iteration  14: 4268406.019 ops/s
Iteration  15: 4284836.627 ops/s
Iteration  16: 4288947.595 ops/s
Iteration  17: 4289470.920 ops/s
Iteration  18: 4270130.437 ops/s
Iteration  19: 4299865.851 ops/s
Iteration  20: 4292957.794 ops/s
Iteration  21: 4270508.919 ops/s
Iteration  22: 4280638.267 ops/s
Iteration  23: 4275884.003 ops/s
Iteration  24: 4255783.697 ops/s
Iteration  25: 4285269.191 ops/s
Iteration  26: 4296252.553 ops/s
Iteration  27: 4255306.888 ops/s
Iteration  28: 4274463.547 ops/s
Iteration  29: 4287456.056 ops/s
Iteration  30: 4277085.003 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.CompletableAndThenObservableTest._Benchmark.benchmark_cancelOther":
  4275151.666 ±(99.9%) 9616.052 ops/s [Average]
  (min, avg, max) = (4247125.579, 4275151.666, 4300181.009), stdev = 14392.855
  CI (99.9%): [4265535.614, 4284767.719] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
CompletableAndThenObservableTest._Benchmark.benchmark_cancelOther  thrpt   30  4275151.666 ± 9616.052  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableFromObservableTest._Benchmark.benchmark_fromObservableEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableFromObservableTest._Benchmark.benchmark_fromObservableEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 7173816.643 ops/s
# Warmup Iteration   2: 10426155.861 ops/s
# Warmup Iteration   3: 11774662.703 ops/s
# Warmup Iteration   4: 11810303.862 ops/s
# Warmup Iteration   5: 11803748.974 ops/s
# Warmup Iteration   6: 11875668.392 ops/s
# Warmup Iteration   7: 11789843.843 ops/s
# Warmup Iteration   8: 11737483.738 ops/s
# Warmup Iteration   9: 11854134.409 ops/s
# Warmup Iteration  10: 11813023.255 ops/s
# Warmup Iteration  11: 11812246.977 ops/s
# Warmup Iteration  12: 11809810.597 ops/s
# Warmup Iteration  13: 11857250.206 ops/s
# Warmup Iteration  14: 11895156.169 ops/s
# Warmup Iteration  15: 11868100.293 ops/s
# Warmup Iteration  16: 11815865.573 ops/s
# Warmup Iteration  17: 11803174.472 ops/s
# Warmup Iteration  18: 11822535.251 ops/s
# Warmup Iteration  19: 11736343.804 ops/s
# Warmup Iteration  20: 11759661.121 ops/s
# Warmup Iteration  21: 11806298.525 ops/s
# Warmup Iteration  22: 11807616.819 ops/s
# Warmup Iteration  23: 11713633.436 ops/s
# Warmup Iteration  24: 11818731.851 ops/s
# Warmup Iteration  25: 11850842.311 ops/s
# Warmup Iteration  26: 11823132.511 ops/s
# Warmup Iteration  27: 11757078.328 ops/s
# Warmup Iteration  28: 11759275.100 ops/s
# Warmup Iteration  29: 11842256.720 ops/s
# Warmup Iteration  30: 11797346.503 ops/s
Iteration   1: 11824554.719 ops/s
Iteration   2: 11873232.013 ops/s
Iteration   3: 11802006.367 ops/s
Iteration   4: 11833228.134 ops/s
Iteration   5: 11803107.345 ops/s
Iteration   6: 11848422.739 ops/s
Iteration   7: 11794780.762 ops/s
Iteration   8: 11893947.573 ops/s
Iteration   9: 11746245.767 ops/s
Iteration  10: 11924405.254 ops/s
Iteration  11: 11830360.486 ops/s
Iteration  12: 11879606.182 ops/s
Iteration  13: 11797966.672 ops/s
Iteration  14: 11775631.199 ops/s
Iteration  15: 11858772.641 ops/s
Iteration  16: 11859046.439 ops/s
Iteration  17: 11834436.717 ops/s
Iteration  18: 11726651.317 ops/s
Iteration  19: 11815534.741 ops/s
Iteration  20: 11773324.684 ops/s
Iteration  21: 11805646.457 ops/s
Iteration  22: 11898510.556 ops/s
Iteration  23: 11779800.092 ops/s
Iteration  24: 11833219.539 ops/s
Iteration  25: 11768479.006 ops/s
Iteration  26: 11876452.237 ops/s
Iteration  27: 11856097.830 ops/s
Iteration  28: 11791089.698 ops/s
Iteration  29: 11781696.725 ops/s
Iteration  30: 11769992.686 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableFromObservableTest._Benchmark.benchmark_fromObservableEmpty":
  11821874.886 ±(99.9%) 32151.192 ops/s [Average]
  (min, avg, max) = (11726651.317, 11821874.886, 11924405.254), stdev = 48122.394
  CI (99.9%): [11789723.694, 11854026.077] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt         Score       Error  Units
CompletableFromObservableTest._Benchmark.benchmark_fromObservableEmpty  thrpt   30  11821874.886 ± 32151.192  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatTest._Benchmark.benchmark_repeatUntilFalse$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatTest._Benchmark.benchmark_repeatUntilFalse

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 4620239.231 ops/s
# Warmup Iteration   2: 6327899.383 ops/s
# Warmup Iteration   3: 7099803.530 ops/s
# Warmup Iteration   4: 7115877.131 ops/s
# Warmup Iteration   5: 7190179.676 ops/s
# Warmup Iteration   6: 7111002.439 ops/s
# Warmup Iteration   7: 7155664.460 ops/s
# Warmup Iteration   8: 7182303.589 ops/s
# Warmup Iteration   9: 7135963.243 ops/s
# Warmup Iteration  10: 7136362.373 ops/s
# Warmup Iteration  11: 7120540.334 ops/s
# Warmup Iteration  12: 7122857.411 ops/s
# Warmup Iteration  13: 7133009.576 ops/s
# Warmup Iteration  14: 7110889.825 ops/s
# Warmup Iteration  15: 7138102.422 ops/s
# Warmup Iteration  16: 7135688.484 ops/s
# Warmup Iteration  17: 7178017.274 ops/s
# Warmup Iteration  18: 7123121.108 ops/s
# Warmup Iteration  19: 7131399.847 ops/s
# Warmup Iteration  20: 7182971.804 ops/s
# Warmup Iteration  21: 7134723.599 ops/s
# Warmup Iteration  22: 7133790.178 ops/s
# Warmup Iteration  23: 7088522.842 ops/s
# Warmup Iteration  24: 7149624.541 ops/s
# Warmup Iteration  25: 7193102.800 ops/s
# Warmup Iteration  26: 7243799.486 ops/s
# Warmup Iteration  27: 7179387.252 ops/s
# Warmup Iteration  28: 7162132.629 ops/s
# Warmup Iteration  29: 7179856.683 ops/s
# Warmup Iteration  30: 7210190.932 ops/s
Iteration   1: 7160111.762 ops/s
Iteration   2: 7183238.334 ops/s
Iteration   3: 7150780.447 ops/s
Iteration   4: 7166184.339 ops/s
Iteration   5: 7174374.608 ops/s
Iteration   6: 7157602.061 ops/s
Iteration   7: 7173980.398 ops/s
Iteration   8: 7174941.927 ops/s
Iteration   9: 7163330.484 ops/s
Iteration  10: 7153640.133 ops/s
Iteration  11: 7181839.833 ops/s
Iteration  12: 7149309.143 ops/s
Iteration  13: 7153813.171 ops/s
Iteration  14: 7128438.973 ops/s
Iteration  15: 7176950.129 ops/s
Iteration  16: 7175463.577 ops/s
Iteration  17: 7126209.959 ops/s
Iteration  18: 7200567.997 ops/s
Iteration  19: 7138414.120 ops/s
Iteration  20: 7116133.174 ops/s
Iteration  21: 7161876.562 ops/s
Iteration  22: 7170175.105 ops/s
Iteration  23: 7199479.403 ops/s
Iteration  24: 7178188.103 ops/s
Iteration  25: 7177229.995 ops/s
Iteration  26: 7136454.629 ops/s
Iteration  27: 7158284.767 ops/s
Iteration  28: 7150377.000 ops/s
Iteration  29: 7176819.369 ops/s
Iteration  30: 7141491.919 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatTest._Benchmark.benchmark_repeatUntilFalse":
  7161856.714 ±(99.9%) 13670.341 ops/s [Average]
  (min, avg, max) = (7116133.174, 7161856.714, 7200567.997), stdev = 20461.124
  CI (99.9%): [7148186.373, 7175527.055] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
ObservableRepeatTest._Benchmark.benchmark_repeatUntilFalse  thrpt   30  7161856.714 ± 13670.341  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableAndThenCompletableTest._Benchmark.benchmark_andThenCompletableCompleteComplete$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableAndThenCompletableTest._Benchmark.benchmark_andThenCompletableCompleteComplete

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 6626119.322 ops/s
# Warmup Iteration   2: 9066316.548 ops/s
# Warmup Iteration   3: 9743775.701 ops/s
# Warmup Iteration   4: 9728975.327 ops/s
# Warmup Iteration   5: 9761727.480 ops/s
# Warmup Iteration   6: 9717535.155 ops/s
# Warmup Iteration   7: 9710890.301 ops/s
# Warmup Iteration   8: 9728594.255 ops/s
# Warmup Iteration   9: 9727914.469 ops/s
# Warmup Iteration  10: 9737734.258 ops/s
# Warmup Iteration  11: 9725265.615 ops/s
# Warmup Iteration  12: 9698401.971 ops/s
# Warmup Iteration  13: 9707560.729 ops/s
# Warmup Iteration  14: 9725816.150 ops/s
# Warmup Iteration  15: 9676116.150 ops/s
# Warmup Iteration  16: 9742062.270 ops/s
# Warmup Iteration  17: 9735632.218 ops/s
# Warmup Iteration  18: 9745817.311 ops/s
# Warmup Iteration  19: 9770295.587 ops/s
# Warmup Iteration  20: 9769134.304 ops/s
# Warmup Iteration  21: 9706561.144 ops/s
# Warmup Iteration  22: 9701375.774 ops/s
# Warmup Iteration  23: 9749051.618 ops/s
# Warmup Iteration  24: 9665333.398 ops/s
# Warmup Iteration  25: 9700019.347 ops/s
# Warmup Iteration  26: 9747633.586 ops/s
# Warmup Iteration  27: 9699148.060 ops/s
# Warmup Iteration  28: 9699275.387 ops/s
# Warmup Iteration  29: 9692540.451 ops/s
# Warmup Iteration  30: 9797118.232 ops/s
Iteration   1: 9734875.423 ops/s
Iteration   2: 9735213.078 ops/s
Iteration   3: 9632710.060 ops/s
Iteration   4: 9686783.596 ops/s
Iteration   5: 9665797.001 ops/s
Iteration   6: 9696082.808 ops/s
Iteration   7: 9719114.162 ops/s
Iteration   8: 9658925.747 ops/s
Iteration   9: 9706192.113 ops/s
Iteration  10: 9661276.835 ops/s
Iteration  11: 9754049.288 ops/s
Iteration  12: 9705068.153 ops/s
Iteration  13: 9731472.960 ops/s
Iteration  14: 9736136.376 ops/s
Iteration  15: 9726890.799 ops/s
Iteration  16: 9669042.544 ops/s
Iteration  17: 9665735.625 ops/s
Iteration  18: 9683268.918 ops/s
Iteration  19: 9632222.451 ops/s
Iteration  20: 9709258.466 ops/s
Iteration  21: 9753649.929 ops/s
Iteration  22: 9721131.388 ops/s
Iteration  23: 9785759.619 ops/s
Iteration  24: 9746165.259 ops/s
Iteration  25: 9648064.692 ops/s
Iteration  26: 9691763.186 ops/s
Iteration  27: 9745069.353 ops/s
Iteration  28: 9647661.856 ops/s
Iteration  29: 9750837.684 ops/s
Iteration  30: 9645561.189 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableAndThenCompletableTest._Benchmark.benchmark_andThenCompletableCompleteComplete":
  9701526.019 ±(99.9%) 27967.701 ops/s [Average]
  (min, avg, max) = (9632222.451, 9701526.019, 9785759.619), stdev = 41860.741
  CI (99.9%): [9673558.317, 9729493.720] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                   Mode  Cnt        Score       Error  Units
CompletableAndThenCompletableTest._Benchmark.benchmark_andThenCompletableCompleteComplete  thrpt   30  9701526.019 ± 27967.701  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableAndThenTest._Benchmark.benchmark_andThenMaybeCompleteEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableAndThenTest._Benchmark.benchmark_andThenMaybeCompleteEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 6280180.849 ops/s
# Warmup Iteration   2: 8405436.264 ops/s
# Warmup Iteration   3: 9512963.948 ops/s
# Warmup Iteration   4: 9536560.340 ops/s
# Warmup Iteration   5: 9523844.159 ops/s
# Warmup Iteration   6: 9479441.493 ops/s
# Warmup Iteration   7: 9459376.144 ops/s
# Warmup Iteration   8: 9523572.077 ops/s
# Warmup Iteration   9: 9527896.848 ops/s
# Warmup Iteration  10: 9469053.341 ops/s
# Warmup Iteration  11: 9517715.114 ops/s
# Warmup Iteration  12: 9484753.757 ops/s
# Warmup Iteration  13: 9497199.770 ops/s
# Warmup Iteration  14: 9466657.495 ops/s
# Warmup Iteration  15: 9501968.876 ops/s
# Warmup Iteration  16: 9467412.823 ops/s
# Warmup Iteration  17: 9523133.936 ops/s
# Warmup Iteration  18: 9586069.454 ops/s
# Warmup Iteration  19: 9579499.882 ops/s
# Warmup Iteration  20: 9536451.224 ops/s
# Warmup Iteration  21: 9538465.633 ops/s
# Warmup Iteration  22: 9598676.998 ops/s
# Warmup Iteration  23: 9596933.843 ops/s
# Warmup Iteration  24: 9609916.554 ops/s
# Warmup Iteration  25: 9524942.957 ops/s
# Warmup Iteration  26: 9532712.549 ops/s
# Warmup Iteration  27: 9534730.102 ops/s
# Warmup Iteration  28: 9546951.995 ops/s
# Warmup Iteration  29: 9499097.733 ops/s
# Warmup Iteration  30: 9528984.411 ops/s
Iteration   1: 9476649.116 ops/s
Iteration   2: 9512652.888 ops/s
Iteration   3: 9581866.502 ops/s
Iteration   4: 9550759.358 ops/s
Iteration   5: 9618156.551 ops/s
Iteration   6: 9574122.778 ops/s
Iteration   7: 9515827.075 ops/s
Iteration   8: 9558819.851 ops/s
Iteration   9: 9530814.422 ops/s
Iteration  10: 9542692.202 ops/s
Iteration  11: 9595413.915 ops/s
Iteration  12: 9564023.313 ops/s
Iteration  13: 9527472.407 ops/s
Iteration  14: 9523541.326 ops/s
Iteration  15: 9547786.945 ops/s
Iteration  16: 9528061.047 ops/s
Iteration  17: 9567767.330 ops/s
Iteration  18: 9513118.579 ops/s
Iteration  19: 9607961.745 ops/s
Iteration  20: 9576039.787 ops/s
Iteration  21: 9543000.427 ops/s
Iteration  22: 9577226.111 ops/s
Iteration  23: 9654522.135 ops/s
Iteration  24: 9591962.166 ops/s
Iteration  25: 9559793.222 ops/s
Iteration  26: 9513377.719 ops/s
Iteration  27: 9544771.097 ops/s
Iteration  28: 9584354.114 ops/s
Iteration  29: 9558406.429 ops/s
Iteration  30: 9572383.734 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableAndThenTest._Benchmark.benchmark_andThenMaybeCompleteEmpty":
  9557111.476 ±(99.9%) 24665.948 ops/s [Average]
  (min, avg, max) = (9476649.116, 9557111.476, 9654522.135), stdev = 36918.833
  CI (99.9%): [9532445.528, 9581777.425] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
CompletableAndThenTest._Benchmark.benchmark_andThenMaybeCompleteEmpty  thrpt   30  9557111.476 ± 24665.948  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableAndThenCompletableTest._Benchmark.benchmark_andThenCompletableCompleteNever$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableAndThenCompletableTest._Benchmark.benchmark_andThenCompletableCompleteNever

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 7720048.237 ops/s
# Warmup Iteration   2: 11963933.248 ops/s
# Warmup Iteration   3: 12344656.174 ops/s
# Warmup Iteration   4: 12375138.260 ops/s
# Warmup Iteration   5: 12288962.780 ops/s
# Warmup Iteration   6: 12304372.735 ops/s
# Warmup Iteration   7: 12360662.217 ops/s
# Warmup Iteration   8: 12341071.964 ops/s
# Warmup Iteration   9: 12313813.707 ops/s
# Warmup Iteration  10: 12402396.708 ops/s
# Warmup Iteration  11: 12295020.195 ops/s
# Warmup Iteration  12: 12385054.562 ops/s
# Warmup Iteration  13: 12297559.784 ops/s
# Warmup Iteration  14: 12299436.973 ops/s
# Warmup Iteration  15: 12359921.994 ops/s
# Warmup Iteration  16: 12363765.250 ops/s
# Warmup Iteration  17: 12359968.070 ops/s
# Warmup Iteration  18: 12359474.972 ops/s
# Warmup Iteration  19: 12403700.823 ops/s
# Warmup Iteration  20: 12403863.466 ops/s
# Warmup Iteration  21: 12365923.428 ops/s
# Warmup Iteration  22: 12374180.249 ops/s
# Warmup Iteration  23: 12260119.765 ops/s
# Warmup Iteration  24: 12432526.530 ops/s
# Warmup Iteration  25: 12375721.532 ops/s
# Warmup Iteration  26: 12384590.708 ops/s
# Warmup Iteration  27: 12384370.157 ops/s
# Warmup Iteration  28: 12381443.221 ops/s
# Warmup Iteration  29: 12376947.588 ops/s
# Warmup Iteration  30: 12380731.724 ops/s
Iteration   1: 12372640.539 ops/s
Iteration   2: 12324410.916 ops/s
Iteration   3: 12375716.173 ops/s
Iteration   4: 12380029.290 ops/s
Iteration   5: 12315506.425 ops/s
Iteration   6: 12401925.217 ops/s
Iteration   7: 12370407.259 ops/s
Iteration   8: 12330804.528 ops/s
Iteration   9: 12372285.829 ops/s
Iteration  10: 12368370.840 ops/s
Iteration  11: 12389520.608 ops/s
Iteration  12: 12399012.717 ops/s
Iteration  13: 12411213.587 ops/s
Iteration  14: 12396140.405 ops/s
Iteration  15: 12348550.883 ops/s
Iteration  16: 12328655.410 ops/s
Iteration  17: 12424655.512 ops/s
Iteration  18: 12355276.004 ops/s
Iteration  19: 12398372.094 ops/s
Iteration  20: 12390044.615 ops/s
Iteration  21: 12380035.304 ops/s
Iteration  22: 12383333.989 ops/s
Iteration  23: 12350236.561 ops/s
Iteration  24: 12266558.586 ops/s
Iteration  25: 12406846.408 ops/s
Iteration  26: 12415529.172 ops/s
Iteration  27: 12372393.984 ops/s
Iteration  28: 12346588.761 ops/s
Iteration  29: 12366161.875 ops/s
Iteration  30: 12352766.077 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableAndThenCompletableTest._Benchmark.benchmark_andThenCompletableCompleteNever":
  12369799.652 ±(99.9%) 22741.820 ops/s [Average]
  (min, avg, max) = (12266558.586, 12369799.652, 12424655.512), stdev = 34038.888
  CI (99.9%): [12347057.832, 12392541.472] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                Mode  Cnt         Score       Error  Units
CompletableAndThenCompletableTest._Benchmark.benchmark_andThenCompletableCompleteNever  thrpt   30  12369799.652 ± 22741.820  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableOnErrorXTest._Benchmark.benchmark_normalResumeNext$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableOnErrorXTest._Benchmark.benchmark_normalResumeNext

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 6650721.435 ops/s
# Warmup Iteration   2: 10297854.640 ops/s
# Warmup Iteration   3: 10615021.884 ops/s
# Warmup Iteration   4: 10609634.903 ops/s
# Warmup Iteration   5: 10616726.142 ops/s
# Warmup Iteration   6: 10562380.235 ops/s
# Warmup Iteration   7: 10597703.909 ops/s
# Warmup Iteration   8: 10626179.402 ops/s
# Warmup Iteration   9: 10619975.560 ops/s
# Warmup Iteration  10: 10586756.196 ops/s
# Warmup Iteration  11: 10600570.066 ops/s
# Warmup Iteration  12: 10595940.269 ops/s
# Warmup Iteration  13: 10585872.001 ops/s
# Warmup Iteration  14: 10629559.740 ops/s
# Warmup Iteration  15: 10626224.405 ops/s
# Warmup Iteration  16: 10582490.756 ops/s
# Warmup Iteration  17: 10620678.651 ops/s
# Warmup Iteration  18: 10644503.126 ops/s
# Warmup Iteration  19: 10591158.067 ops/s
# Warmup Iteration  20: 10634642.155 ops/s
# Warmup Iteration  21: 10620020.095 ops/s
# Warmup Iteration  22: 10626799.566 ops/s
# Warmup Iteration  23: 10659328.635 ops/s
# Warmup Iteration  24: 10653023.347 ops/s
# Warmup Iteration  25: 10590007.620 ops/s
# Warmup Iteration  26: 10638002.348 ops/s
# Warmup Iteration  27: 10611839.404 ops/s
# Warmup Iteration  28: 10640591.316 ops/s
# Warmup Iteration  29: 10622303.148 ops/s
# Warmup Iteration  30: 10586691.665 ops/s
Iteration   1: 10616587.211 ops/s
Iteration   2: 10634824.140 ops/s
Iteration   3: 10603766.762 ops/s
Iteration   4: 10662625.223 ops/s
Iteration   5: 10603410.680 ops/s
Iteration   6: 10626194.542 ops/s
Iteration   7: 10660026.696 ops/s
Iteration   8: 10650056.006 ops/s
Iteration   9: 10546850.548 ops/s
Iteration  10: 10626697.589 ops/s
Iteration  11: 10596401.256 ops/s
Iteration  12: 10627400.572 ops/s
Iteration  13: 10613144.197 ops/s
Iteration  14: 10625327.722 ops/s
Iteration  15: 10653166.259 ops/s
Iteration  16: 10590109.978 ops/s
Iteration  17: 10652909.596 ops/s
Iteration  18: 10619410.179 ops/s
Iteration  19: 10610308.006 ops/s
Iteration  20: 10648617.954 ops/s
Iteration  21: 10671679.084 ops/s
Iteration  22: 10672592.867 ops/s
Iteration  23: 10629928.025 ops/s
Iteration  24: 10568492.505 ops/s
Iteration  25: 10640764.604 ops/s
Iteration  26: 10599614.443 ops/s
Iteration  27: 10673344.621 ops/s
Iteration  28: 10566378.004 ops/s
Iteration  29: 10652832.791 ops/s
Iteration  30: 10686465.876 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableOnErrorXTest._Benchmark.benchmark_normalResumeNext":
  10627664.265 ±(99.9%) 22772.989 ops/s [Average]
  (min, avg, max) = (10546850.548, 10627664.265, 10686465.876), stdev = 34085.540
  CI (99.9%): [10604891.276, 10650437.253] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt         Score       Error  Units
CompletableOnErrorXTest._Benchmark.benchmark_normalResumeNext  thrpt   30  10627664.265 ± 22772.989  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableAndThenCompletableTest._Benchmark.benchmark_andThenDisposed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableAndThenCompletableTest._Benchmark.benchmark_andThenDisposed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 7683523.451 ops/s
# Warmup Iteration   2: 10109419.719 ops/s
# Warmup Iteration   3: 11578367.938 ops/s
# Warmup Iteration   4: 11575185.167 ops/s
# Warmup Iteration   5: 11575735.628 ops/s
# Warmup Iteration   6: 11570390.616 ops/s
# Warmup Iteration   7: 11603941.317 ops/s
# Warmup Iteration   8: 11582664.069 ops/s
# Warmup Iteration   9: 11597055.349 ops/s
# Warmup Iteration  10: 11611972.888 ops/s
# Warmup Iteration  11: 11513391.929 ops/s
# Warmup Iteration  12: 11593273.680 ops/s
# Warmup Iteration  13: 11470950.148 ops/s
# Warmup Iteration  14: 11518461.089 ops/s
# Warmup Iteration  15: 11472960.093 ops/s
# Warmup Iteration  16: 11572600.882 ops/s
# Warmup Iteration  17: 11564637.361 ops/s
# Warmup Iteration  18: 11560824.589 ops/s
# Warmup Iteration  19: 11508963.584 ops/s
# Warmup Iteration  20: 11510745.912 ops/s
# Warmup Iteration  21: 11584901.785 ops/s
# Warmup Iteration  22: 11560472.357 ops/s
# Warmup Iteration  23: 11556961.058 ops/s
# Warmup Iteration  24: 11591669.516 ops/s
# Warmup Iteration  25: 11565251.273 ops/s
# Warmup Iteration  26: 11515536.083 ops/s
# Warmup Iteration  27: 11510657.182 ops/s
# Warmup Iteration  28: 11512949.055 ops/s
# Warmup Iteration  29: 11493320.012 ops/s
# Warmup Iteration  30: 11591284.436 ops/s
Iteration   1: 11570169.396 ops/s
Iteration   2: 11502210.929 ops/s
Iteration   3: 11514943.585 ops/s
Iteration   4: 11487438.885 ops/s
Iteration   5: 11618735.152 ops/s
Iteration   6: 11509051.871 ops/s
Iteration   7: 11510512.484 ops/s
Iteration   8: 11642589.833 ops/s
Iteration   9: 11554352.121 ops/s
Iteration  10: 11530010.649 ops/s
Iteration  11: 11595041.136 ops/s
Iteration  12: 11598163.682 ops/s
Iteration  13: 11495647.806 ops/s
Iteration  14: 11616843.470 ops/s
Iteration  15: 11553187.300 ops/s
Iteration  16: 11575890.162 ops/s
Iteration  17: 11579209.812 ops/s
Iteration  18: 11538513.871 ops/s
Iteration  19: 11495485.782 ops/s
Iteration  20: 11559964.320 ops/s
Iteration  21: 11590438.929 ops/s
Iteration  22: 11498671.782 ops/s
Iteration  23: 11608658.415 ops/s
Iteration  24: 11578045.500 ops/s
Iteration  25: 11529935.857 ops/s
Iteration  26: 11473819.316 ops/s
Iteration  27: 11519745.687 ops/s
Iteration  28: 11546599.970 ops/s
Iteration  29: 11538257.049 ops/s
Iteration  30: 11665316.564 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableAndThenCompletableTest._Benchmark.benchmark_andThenDisposed":
  11553248.377 ±(99.9%) 32834.518 ops/s [Average]
  (min, avg, max) = (11473819.316, 11553248.377, 11665316.564), stdev = 49145.165
  CI (99.9%): [11520413.859, 11586082.895] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt         Score       Error  Units
CompletableAndThenCompletableTest._Benchmark.benchmark_andThenDisposed  thrpt   30  11553248.377 ± 32834.518  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.CompletableAndThenObservableTest._Benchmark.benchmark_errorMain$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.CompletableAndThenObservableTest._Benchmark.benchmark_errorMain

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 605982.016 ops/s
# Warmup Iteration   2: 762770.578 ops/s
# Warmup Iteration   3: 850477.040 ops/s
# Warmup Iteration   4: 790769.347 ops/s
# Warmup Iteration   5: 877333.672 ops/s
# Warmup Iteration   6: 879617.841 ops/s
# Warmup Iteration   7: 880895.226 ops/s
# Warmup Iteration   8: 878442.823 ops/s
# Warmup Iteration   9: 875653.887 ops/s
# Warmup Iteration  10: 875247.322 ops/s
# Warmup Iteration  11: 874743.473 ops/s
# Warmup Iteration  12: 876904.251 ops/s
# Warmup Iteration  13: 874032.774 ops/s
# Warmup Iteration  14: 877143.327 ops/s
# Warmup Iteration  15: 874418.906 ops/s
# Warmup Iteration  16: 873320.633 ops/s
# Warmup Iteration  17: 917765.119 ops/s
# Warmup Iteration  18: 925931.025 ops/s
# Warmup Iteration  19: 923442.866 ops/s
# Warmup Iteration  20: 921757.908 ops/s
# Warmup Iteration  21: 921831.227 ops/s
# Warmup Iteration  22: 916585.343 ops/s
# Warmup Iteration  23: 920832.146 ops/s
# Warmup Iteration  24: 926338.355 ops/s
# Warmup Iteration  25: 917266.894 ops/s
# Warmup Iteration  26: 919128.192 ops/s
# Warmup Iteration  27: 918206.038 ops/s
# Warmup Iteration  28: 912607.897 ops/s
# Warmup Iteration  29: 917873.152 ops/s
# Warmup Iteration  30: 914516.613 ops/s
Iteration   1: 923264.728 ops/s
Iteration   2: 922165.594 ops/s
Iteration   3: 917384.899 ops/s
Iteration   4: 915869.601 ops/s
Iteration   5: 916872.514 ops/s
Iteration   6: 918870.664 ops/s
Iteration   7: 917988.503 ops/s
Iteration   8: 910786.534 ops/s
Iteration   9: 922751.853 ops/s
Iteration  10: 923145.492 ops/s
Iteration  11: 921819.988 ops/s
Iteration  12: 917534.234 ops/s
Iteration  13: 916982.083 ops/s
Iteration  14: 920637.514 ops/s
Iteration  15: 920097.337 ops/s
Iteration  16: 911190.279 ops/s
Iteration  17: 917157.928 ops/s
Iteration  18: 911629.012 ops/s
Iteration  19: 917827.813 ops/s
Iteration  20: 923338.774 ops/s
Iteration  21: 917717.085 ops/s
Iteration  22: 921070.580 ops/s
Iteration  23: 918632.150 ops/s
Iteration  24: 920550.981 ops/s
Iteration  25: 912971.253 ops/s
Iteration  26: 918820.516 ops/s
Iteration  27: 918902.443 ops/s
Iteration  28: 919158.517 ops/s
Iteration  29: 916276.413 ops/s
Iteration  30: 923518.299 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.CompletableAndThenObservableTest._Benchmark.benchmark_errorMain":
  918497.786 ±(99.9%) 2376.857 ops/s [Average]
  (min, avg, max) = (910786.534, 918497.786, 923518.299), stdev = 3557.567
  CI (99.9%): [916120.929, 920874.643] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score      Error  Units
CompletableAndThenObservableTest._Benchmark.benchmark_errorMain  thrpt   30  918497.786 ± 2376.857  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableLastTest._Benchmark.benchmark_lastViaFlowable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableLastTest._Benchmark.benchmark_lastViaFlowable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 29129255.141 ops/s
# Warmup Iteration   2: 47350968.309 ops/s
# Warmup Iteration   3: 47524879.888 ops/s
# Warmup Iteration   4: 47542822.953 ops/s
# Warmup Iteration   5: 47182283.290 ops/s
# Warmup Iteration   6: 47666370.184 ops/s
# Warmup Iteration   7: 47146137.907 ops/s
# Warmup Iteration   8: 47117892.577 ops/s
# Warmup Iteration   9: 47116227.436 ops/s
# Warmup Iteration  10: 47005687.557 ops/s
# Warmup Iteration  11: 47011408.535 ops/s
# Warmup Iteration  12: 46733763.153 ops/s
# Warmup Iteration  13: 47175328.090 ops/s
# Warmup Iteration  14: 47120614.309 ops/s
# Warmup Iteration  15: 47130113.576 ops/s
# Warmup Iteration  16: 47141764.714 ops/s
# Warmup Iteration  17: 46997927.898 ops/s
# Warmup Iteration  18: 47206959.714 ops/s
# Warmup Iteration  19: 47110382.388 ops/s
# Warmup Iteration  20: 46924109.325 ops/s
# Warmup Iteration  21: 47257975.902 ops/s
# Warmup Iteration  22: 46951723.027 ops/s
# Warmup Iteration  23: 46804842.655 ops/s
# Warmup Iteration  24: 47165740.953 ops/s
# Warmup Iteration  25: 46957317.132 ops/s
# Warmup Iteration  26: 47145255.362 ops/s
# Warmup Iteration  27: 47209412.477 ops/s
# Warmup Iteration  28: 46990490.112 ops/s
# Warmup Iteration  29: 47213285.474 ops/s
# Warmup Iteration  30: 47086856.636 ops/s
Iteration   1: 47123636.823 ops/s
Iteration   2: 46682743.744 ops/s
Iteration   3: 46953683.709 ops/s
Iteration   4: 46838015.244 ops/s
Iteration   5: 47039018.247 ops/s
Iteration   6: 46992461.203 ops/s
Iteration   7: 47093091.135 ops/s
Iteration   8: 46782322.104 ops/s
Iteration   9: 46971166.391 ops/s
Iteration  10: 47056129.666 ops/s
Iteration  11: 46529074.111 ops/s
Iteration  12: 47007419.824 ops/s
Iteration  13: 46972303.554 ops/s
Iteration  14: 47257287.874 ops/s
Iteration  15: 47293001.552 ops/s
Iteration  16: 47467219.129 ops/s
Iteration  17: 47239177.502 ops/s
Iteration  18: 47226772.253 ops/s
Iteration  19: 47016439.668 ops/s
Iteration  20: 46606910.543 ops/s
Iteration  21: 47025525.862 ops/s
Iteration  22: 46794381.956 ops/s
Iteration  23: 46618991.601 ops/s
Iteration  24: 47337348.641 ops/s
Iteration  25: 47007311.373 ops/s
Iteration  26: 46846358.886 ops/s
Iteration  27: 46768250.352 ops/s
Iteration  28: 47099752.569 ops/s
Iteration  29: 47356495.350 ops/s
Iteration  30: 47414536.744 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableLastTest._Benchmark.benchmark_lastViaFlowable":
  47013894.254 ±(99.9%) 163871.876 ops/s [Average]
  (min, avg, max) = (46529074.111, 47013894.254, 47467219.129), stdev = 245275.728
  CI (99.9%): [46850022.378, 47177766.130] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt         Score        Error  Units
FlowableLastTest._Benchmark.benchmark_lastViaFlowable  thrpt   30  47013894.254 ± 163871.876  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.CompletableAndThenObservableTest._Benchmark.benchmark_errorOther$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.CompletableAndThenObservableTest._Benchmark.benchmark_errorOther

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 566851.405 ops/s
# Warmup Iteration   2: 694953.064 ops/s
# Warmup Iteration   3: 792989.198 ops/s
# Warmup Iteration   4: 802664.938 ops/s
# Warmup Iteration   5: 807862.654 ops/s
# Warmup Iteration   6: 816286.389 ops/s
# Warmup Iteration   7: 798755.842 ops/s
# Warmup Iteration   8: 812691.413 ops/s
# Warmup Iteration   9: 806884.290 ops/s
# Warmup Iteration  10: 813498.713 ops/s
# Warmup Iteration  11: 803900.303 ops/s
# Warmup Iteration  12: 806522.571 ops/s
# Warmup Iteration  13: 806288.916 ops/s
# Warmup Iteration  14: 805410.633 ops/s
# Warmup Iteration  15: 802995.842 ops/s
# Warmup Iteration  16: 804747.191 ops/s
# Warmup Iteration  17: 842464.696 ops/s
# Warmup Iteration  18: 839576.609 ops/s
# Warmup Iteration  19: 841340.452 ops/s
# Warmup Iteration  20: 845030.023 ops/s
# Warmup Iteration  21: 842124.713 ops/s
# Warmup Iteration  22: 842943.183 ops/s
# Warmup Iteration  23: 843864.736 ops/s
# Warmup Iteration  24: 839312.851 ops/s
# Warmup Iteration  25: 842487.869 ops/s
# Warmup Iteration  26: 845617.075 ops/s
# Warmup Iteration  27: 840418.956 ops/s
# Warmup Iteration  28: 846940.430 ops/s
# Warmup Iteration  29: 844710.448 ops/s
# Warmup Iteration  30: 839251.898 ops/s
Iteration   1: 839459.677 ops/s
Iteration   2: 843798.161 ops/s
Iteration   3: 841129.830 ops/s
Iteration   4: 841193.340 ops/s
Iteration   5: 843923.266 ops/s
Iteration   6: 837721.740 ops/s
Iteration   7: 842736.652 ops/s
Iteration   8: 842792.025 ops/s
Iteration   9: 840684.813 ops/s
Iteration  10: 840290.143 ops/s
Iteration  11: 841110.351 ops/s
Iteration  12: 840400.672 ops/s
Iteration  13: 841983.699 ops/s
Iteration  14: 841313.811 ops/s
Iteration  15: 840959.296 ops/s
Iteration  16: 840916.285 ops/s
Iteration  17: 842813.343 ops/s
Iteration  18: 846931.794 ops/s
Iteration  19: 842826.761 ops/s
Iteration  20: 844055.394 ops/s
Iteration  21: 843146.884 ops/s
Iteration  22: 841407.899 ops/s
Iteration  23: 841711.788 ops/s
Iteration  24: 842877.314 ops/s
Iteration  25: 839882.229 ops/s
Iteration  26: 840922.997 ops/s
Iteration  27: 838300.299 ops/s
Iteration  28: 843715.725 ops/s
Iteration  29: 838678.690 ops/s
Iteration  30: 845871.595 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.CompletableAndThenObservableTest._Benchmark.benchmark_errorOther":
  841785.216 ±(99.9%) 1383.327 ops/s [Average]
  (min, avg, max) = (837721.740, 841785.216, 846931.794), stdev = 2070.499
  CI (99.9%): [840401.889, 843168.543] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
CompletableAndThenObservableTest._Benchmark.benchmark_errorOther  thrpt   30  841785.216 ± 1383.327  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybeTest._Benchmark.benchmark_disposeOnNextAfterFirst$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybeTest._Benchmark.benchmark_disposeOnNextAfterFirst

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2752887.501 ops/s
# Warmup Iteration   2: 4023123.317 ops/s
# Warmup Iteration   3: 4625929.426 ops/s
# Warmup Iteration   4: 4635015.408 ops/s
# Warmup Iteration   5: 4578589.316 ops/s
# Warmup Iteration   6: 4578224.858 ops/s
# Warmup Iteration   7: 4603239.786 ops/s
# Warmup Iteration   8: 4593907.452 ops/s
# Warmup Iteration   9: 4582678.924 ops/s
# Warmup Iteration  10: 4524680.169 ops/s
# Warmup Iteration  11: 4579652.532 ops/s
# Warmup Iteration  12: 4604554.015 ops/s
# Warmup Iteration  13: 4593766.655 ops/s
# Warmup Iteration  14: 4593077.796 ops/s
# Warmup Iteration  15: 4602649.300 ops/s
# Warmup Iteration  16: 4571329.184 ops/s
# Warmup Iteration  17: 4565131.998 ops/s
# Warmup Iteration  18: 4583401.381 ops/s
# Warmup Iteration  19: 4574363.315 ops/s
# Warmup Iteration  20: 4604272.507 ops/s
# Warmup Iteration  21: 4571240.272 ops/s
# Warmup Iteration  22: 4560486.765 ops/s
# Warmup Iteration  23: 4605395.888 ops/s
# Warmup Iteration  24: 4584039.092 ops/s
# Warmup Iteration  25: 4581204.027 ops/s
# Warmup Iteration  26: 4593482.373 ops/s
# Warmup Iteration  27: 4576632.493 ops/s
# Warmup Iteration  28: 4548936.836 ops/s
# Warmup Iteration  29: 4580375.488 ops/s
# Warmup Iteration  30: 4613680.059 ops/s
Iteration   1: 4564950.953 ops/s
Iteration   2: 4611476.708 ops/s
Iteration   3: 4625620.174 ops/s
Iteration   4: 4611940.096 ops/s
Iteration   5: 4594823.186 ops/s
Iteration   6: 4586641.625 ops/s
Iteration   7: 4562473.705 ops/s
Iteration   8: 4560558.181 ops/s
Iteration   9: 4577879.271 ops/s
Iteration  10: 4594642.537 ops/s
Iteration  11: 4589337.099 ops/s
Iteration  12: 4572664.059 ops/s
Iteration  13: 4577657.772 ops/s
Iteration  14: 4584284.650 ops/s
Iteration  15: 4564796.562 ops/s
Iteration  16: 4570276.325 ops/s
Iteration  17: 4583695.220 ops/s
Iteration  18: 4597571.162 ops/s
Iteration  19: 4579724.935 ops/s
Iteration  20: 4567819.057 ops/s
Iteration  21: 4610297.746 ops/s
Iteration  22: 4583834.296 ops/s
Iteration  23: 4570406.082 ops/s
Iteration  24: 4601786.381 ops/s
Iteration  25: 4601699.961 ops/s
Iteration  26: 4586121.869 ops/s
Iteration  27: 4590105.075 ops/s
Iteration  28: 4608788.487 ops/s
Iteration  29: 4601901.110 ops/s
Iteration  30: 4615846.502 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybeTest._Benchmark.benchmark_disposeOnNextAfterFirst":
  4588320.693 ±(99.9%) 11818.249 ops/s [Average]
  (min, avg, max) = (4560558.181, 4588320.693, 4625620.174), stdev = 17689.001
  CI (99.9%): [4576502.443, 4600138.942] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score       Error  Units
ObservableSwitchMapMaybeTest._Benchmark.benchmark_disposeOnNextAfterFirst  thrpt   30  4588320.693 ± 11818.249  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDetachTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDetachTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 12138498.523 ops/s
# Warmup Iteration   2: 16061523.353 ops/s
# Warmup Iteration   3: 17785327.702 ops/s
# Warmup Iteration   4: 17844736.468 ops/s
# Warmup Iteration   5: 17449979.943 ops/s
# Warmup Iteration   6: 17666702.117 ops/s
# Warmup Iteration   7: 17571718.946 ops/s
# Warmup Iteration   8: 17612362.194 ops/s
# Warmup Iteration   9: 17851870.553 ops/s
# Warmup Iteration  10: 17848989.033 ops/s
# Warmup Iteration  11: 17702897.150 ops/s
# Warmup Iteration  12: 17618135.291 ops/s
# Warmup Iteration  13: 17781216.923 ops/s
# Warmup Iteration  14: 17689629.075 ops/s
# Warmup Iteration  15: 17676728.159 ops/s
# Warmup Iteration  16: 17605712.395 ops/s
# Warmup Iteration  17: 17777937.492 ops/s
# Warmup Iteration  18: 17884294.120 ops/s
# Warmup Iteration  19: 17788558.753 ops/s
# Warmup Iteration  20: 17664805.212 ops/s
# Warmup Iteration  21: 17913180.439 ops/s
# Warmup Iteration  22: 17920760.583 ops/s
# Warmup Iteration  23: 17711118.554 ops/s
# Warmup Iteration  24: 17789807.452 ops/s
# Warmup Iteration  25: 17685054.794 ops/s
# Warmup Iteration  26: 17686887.227 ops/s
# Warmup Iteration  27: 17648781.094 ops/s
# Warmup Iteration  28: 17630639.890 ops/s
# Warmup Iteration  29: 17643194.131 ops/s
# Warmup Iteration  30: 17741975.488 ops/s
Iteration   1: 17770631.807 ops/s
Iteration   2: 17693343.951 ops/s
Iteration   3: 17698012.729 ops/s
Iteration   4: 17639724.661 ops/s
Iteration   5: 17612649.675 ops/s
Iteration   6: 17695930.265 ops/s
Iteration   7: 17760193.565 ops/s
Iteration   8: 17741035.723 ops/s
Iteration   9: 17694298.940 ops/s
Iteration  10: 17759702.321 ops/s
Iteration  11: 17664719.234 ops/s
Iteration  12: 17805884.538 ops/s
Iteration  13: 17702551.705 ops/s
Iteration  14: 17790512.184 ops/s
Iteration  15: 17753449.253 ops/s
Iteration  16: 17719379.079 ops/s
Iteration  17: 17699069.142 ops/s
Iteration  18: 17825118.132 ops/s
Iteration  19: 17756515.078 ops/s
Iteration  20: 17737438.185 ops/s
Iteration  21: 17768895.509 ops/s
Iteration  22: 17814572.097 ops/s
Iteration  23: 17774575.094 ops/s
Iteration  24: 17699667.326 ops/s
Iteration  25: 17858755.445 ops/s
Iteration  26: 17823323.418 ops/s
Iteration  27: 17807489.765 ops/s
Iteration  28: 17730883.936 ops/s
Iteration  29: 17658125.107 ops/s
Iteration  30: 17769876.959 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableDetachTest._Benchmark.benchmark_dispose":
  17740877.494 ±(99.9%) 39666.319 ops/s [Average]
  (min, avg, max) = (17612649.675, 17740877.494, 17858755.445), stdev = 59370.684
  CI (99.9%): [17701211.175, 17780543.813] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt         Score       Error  Units
ObservableDetachTest._Benchmark.benchmark_dispose  thrpt   30  17740877.494 ± 39666.319  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterableTest._Benchmark.benchmark_fusionClear$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterableTest._Benchmark.benchmark_fusionClear

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 18169603.390 ops/s
# Warmup Iteration   2: 30792350.298 ops/s
# Warmup Iteration   3: 30857273.680 ops/s
# Warmup Iteration   4: 30787477.342 ops/s
# Warmup Iteration   5: 30494206.106 ops/s
# Warmup Iteration   6: 30566906.976 ops/s
# Warmup Iteration   7: 30771661.102 ops/s
# Warmup Iteration   8: 30775931.304 ops/s
# Warmup Iteration   9: 30761751.357 ops/s
# Warmup Iteration  10: 30882563.127 ops/s
# Warmup Iteration  11: 30761314.153 ops/s
# Warmup Iteration  12: 30929533.527 ops/s
# Warmup Iteration  13: 30823014.610 ops/s
# Warmup Iteration  14: 30700990.518 ops/s
# Warmup Iteration  15: 30911482.899 ops/s
# Warmup Iteration  16: 30812121.735 ops/s
# Warmup Iteration  17: 30778396.746 ops/s
# Warmup Iteration  18: 30866509.084 ops/s
# Warmup Iteration  19: 30634689.331 ops/s
# Warmup Iteration  20: 30972615.225 ops/s
# Warmup Iteration  21: 30715543.539 ops/s
# Warmup Iteration  22: 30829259.995 ops/s
# Warmup Iteration  23: 30889691.067 ops/s
# Warmup Iteration  24: 30724696.590 ops/s
# Warmup Iteration  25: 30683870.548 ops/s
# Warmup Iteration  26: 30911814.260 ops/s
# Warmup Iteration  27: 30832760.154 ops/s
# Warmup Iteration  28: 31011059.938 ops/s
# Warmup Iteration  29: 30896481.973 ops/s
# Warmup Iteration  30: 30818735.793 ops/s
Iteration   1: 30761073.113 ops/s
Iteration   2: 30721025.355 ops/s
Iteration   3: 30750934.152 ops/s
Iteration   4: 30858327.189 ops/s
Iteration   5: 31038185.508 ops/s
Iteration   6: 30801061.155 ops/s
Iteration   7: 30557350.199 ops/s
Iteration   8: 30962047.181 ops/s
Iteration   9: 30859480.733 ops/s
Iteration  10: 30798862.526 ops/s
Iteration  11: 31000406.204 ops/s
Iteration  12: 30743228.353 ops/s
Iteration  13: 30956653.077 ops/s
Iteration  14: 30797458.314 ops/s
Iteration  15: 30749239.821 ops/s
Iteration  16: 30782163.841 ops/s
Iteration  17: 30727753.839 ops/s
Iteration  18: 30742404.451 ops/s
Iteration  19: 30994328.708 ops/s
Iteration  20: 30828428.706 ops/s
Iteration  21: 30721526.219 ops/s
Iteration  22: 30745582.034 ops/s
Iteration  23: 30865225.969 ops/s
Iteration  24: 30980965.443 ops/s
Iteration  25: 31080945.847 ops/s
Iteration  26: 30763984.521 ops/s
Iteration  27: 30829880.714 ops/s
Iteration  28: 30980740.874 ops/s
Iteration  29: 30857526.393 ops/s
Iteration  30: 30583128.010 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterableTest._Benchmark.benchmark_fusionClear":
  30827997.282 ±(99.9%) 84478.082 ops/s [Average]
  (min, avg, max) = (30557350.199, 30827997.282, 31080945.847), stdev = 126442.826
  CI (99.9%): [30743519.199, 30912475.364] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score       Error  Units
ObservableFromIterableTest._Benchmark.benchmark_fusionClear  thrpt   30  30827997.282 ± 84478.082  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWithPredicateTest._Benchmark.benchmark_issue3008RetryWithPredicate$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWithPredicateTest._Benchmark.benchmark_issue3008RetryWithPredicate

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 440817.389 ops/s
# Warmup Iteration   2: 543309.205 ops/s
# Warmup Iteration   3: 563480.024 ops/s
# Warmup Iteration   4: 608213.334 ops/s
# Warmup Iteration   5: 609183.814 ops/s
# Warmup Iteration   6: 608463.405 ops/s
# Warmup Iteration   7: 607435.046 ops/s
# Warmup Iteration   8: 607922.361 ops/s
# Warmup Iteration   9: 608702.913 ops/s
# Warmup Iteration  10: 612519.636 ops/s
# Warmup Iteration  11: 605666.540 ops/s
# Warmup Iteration  12: 609484.544 ops/s
# Warmup Iteration  13: 605683.018 ops/s
# Warmup Iteration  14: 606326.414 ops/s
# Warmup Iteration  15: 602108.640 ops/s
# Warmup Iteration  16: 602598.679 ops/s
# Warmup Iteration  17: 621650.801 ops/s
# Warmup Iteration  18: 624037.061 ops/s
# Warmup Iteration  19: 628276.825 ops/s
# Warmup Iteration  20: 624885.898 ops/s
# Warmup Iteration  21: 626450.298 ops/s
# Warmup Iteration  22: 626484.314 ops/s
# Warmup Iteration  23: 629024.891 ops/s
# Warmup Iteration  24: 625802.851 ops/s
# Warmup Iteration  25: 621317.087 ops/s
# Warmup Iteration  26: 620622.279 ops/s
# Warmup Iteration  27: 626712.705 ops/s
# Warmup Iteration  28: 627340.585 ops/s
# Warmup Iteration  29: 623963.348 ops/s
# Warmup Iteration  30: 625968.312 ops/s
Iteration   1: 622875.722 ops/s
Iteration   2: 627422.861 ops/s
Iteration   3: 626023.011 ops/s
Iteration   4: 625212.525 ops/s
Iteration   5: 622638.002 ops/s
Iteration   6: 623700.753 ops/s
Iteration   7: 624415.592 ops/s
Iteration   8: 620429.377 ops/s
Iteration   9: 624231.007 ops/s
Iteration  10: 626620.930 ops/s
Iteration  11: 625664.175 ops/s
Iteration  12: 624751.785 ops/s
Iteration  13: 624144.896 ops/s
Iteration  14: 626725.106 ops/s
Iteration  15: 629793.908 ops/s
Iteration  16: 624753.234 ops/s
Iteration  17: 625216.608 ops/s
Iteration  18: 624342.346 ops/s
Iteration  19: 626593.576 ops/s
Iteration  20: 624867.978 ops/s
Iteration  21: 627204.547 ops/s
Iteration  22: 625098.089 ops/s
Iteration  23: 624837.838 ops/s
Iteration  24: 623944.104 ops/s
Iteration  25: 626766.704 ops/s
Iteration  26: 626056.959 ops/s
Iteration  27: 623860.393 ops/s
Iteration  28: 622966.318 ops/s
Iteration  29: 620333.846 ops/s
Iteration  30: 624283.225 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWithPredicateTest._Benchmark.benchmark_issue3008RetryWithPredicate":
  624859.181 ±(99.9%) 1306.268 ops/s [Average]
  (min, avg, max) = (620333.846, 624859.181, 629793.908), stdev = 1955.160
  CI (99.9%): [623552.913, 626165.448] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           Mode  Cnt       Score      Error  Units
ObservableRetryWithPredicateTest._Benchmark.benchmark_issue3008RetryWithPredicate  thrpt   30  624859.181 ± 1306.268  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithCompletableTest._Benchmark.benchmark_cancelOther$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithCompletableTest._Benchmark.benchmark_cancelOther

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3183454.527 ops/s
# Warmup Iteration   2: 4777803.712 ops/s
# Warmup Iteration   3: 5162068.169 ops/s
# Warmup Iteration   4: 5147451.658 ops/s
# Warmup Iteration   5: 5149305.921 ops/s
# Warmup Iteration   6: 5137536.438 ops/s
# Warmup Iteration   7: 5136677.651 ops/s
# Warmup Iteration   8: 5159391.997 ops/s
# Warmup Iteration   9: 5166816.696 ops/s
# Warmup Iteration  10: 5125996.601 ops/s
# Warmup Iteration  11: 5124236.420 ops/s
# Warmup Iteration  12: 5121708.432 ops/s
# Warmup Iteration  13: 5134954.865 ops/s
# Warmup Iteration  14: 5102997.827 ops/s
# Warmup Iteration  15: 5132344.310 ops/s
# Warmup Iteration  16: 5112752.886 ops/s
# Warmup Iteration  17: 5140701.386 ops/s
# Warmup Iteration  18: 5139122.226 ops/s
# Warmup Iteration  19: 5139412.254 ops/s
# Warmup Iteration  20: 5114643.143 ops/s
# Warmup Iteration  21: 5109720.471 ops/s
# Warmup Iteration  22: 5161702.668 ops/s
# Warmup Iteration  23: 5158778.568 ops/s
# Warmup Iteration  24: 5139788.481 ops/s
# Warmup Iteration  25: 5129755.279 ops/s
# Warmup Iteration  26: 5116668.379 ops/s
# Warmup Iteration  27: 5132622.868 ops/s
# Warmup Iteration  28: 5154817.702 ops/s
# Warmup Iteration  29: 5126705.301 ops/s
# Warmup Iteration  30: 5148180.979 ops/s
Iteration   1: 5135988.841 ops/s
Iteration   2: 5136412.987 ops/s
Iteration   3: 5143352.829 ops/s
Iteration   4: 5150332.319 ops/s
Iteration   5: 4383986.850 ops/s
Iteration   6: 3820911.840 ops/s
Iteration   7: 3865519.422 ops/s
Iteration   8: 3666114.230 ops/s
Iteration   9: 3919704.810 ops/s
Iteration  10: 3709471.171 ops/s
Iteration  11: 3768686.490 ops/s
Iteration  12: 3793408.551 ops/s
Iteration  13: 3829826.437 ops/s
Iteration  14: 3885226.598 ops/s
Iteration  15: 3870828.217 ops/s
Iteration  16: 3743109.301 ops/s
Iteration  17: 3918852.525 ops/s
Iteration  18: 3685755.559 ops/s
Iteration  19: 3740260.676 ops/s
Iteration  20: 3905844.712 ops/s
Iteration  21: 3863594.783 ops/s
Iteration  22: 3919066.300 ops/s
Iteration  23: 3700670.053 ops/s
Iteration  24: 3999545.069 ops/s
Iteration  25: 3692460.560 ops/s
Iteration  26: 3975504.221 ops/s
Iteration  27: 3931793.655 ops/s
Iteration  28: 3793597.968 ops/s
Iteration  29: 3798121.263 ops/s
Iteration  30: 3901660.022 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithCompletableTest._Benchmark.benchmark_cancelOther":
  4021653.609 ±(99.9%) 311613.593 ops/s [Average]
  (min, avg, max) = (3666114.230, 4021653.609, 5150332.319), stdev = 466408.592
  CI (99.9%): [3710040.016, 4333267.202] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score        Error  Units
ObservableConcatWithCompletableTest._Benchmark.benchmark_cancelOther  thrpt   30  4021653.609 ± 311613.593  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWithPredicateTest._Benchmark.benchmark_issue3008RetryInfinite$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWithPredicateTest._Benchmark.benchmark_issue3008RetryInfinite

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 86437.114 ops/s
# Warmup Iteration   2: 299705.480 ops/s
# Warmup Iteration   3: 446843.554 ops/s
# Warmup Iteration   4: 441743.975 ops/s
# Warmup Iteration   5: 480381.724 ops/s
# Warmup Iteration   6: 450469.855 ops/s
# Warmup Iteration   7: 448295.311 ops/s
# Warmup Iteration   8: 457866.359 ops/s
# Warmup Iteration   9: 455705.133 ops/s
# Warmup Iteration  10: 474509.453 ops/s
# Warmup Iteration  11: 471291.998 ops/s
# Warmup Iteration  12: 458712.341 ops/s
# Warmup Iteration  13: 457902.871 ops/s
# Warmup Iteration  14: 451596.803 ops/s
# Warmup Iteration  15: 470303.779 ops/s
# Warmup Iteration  16: 453252.544 ops/s
# Warmup Iteration  17: 500174.177 ops/s
# Warmup Iteration  18: 468080.479 ops/s
# Warmup Iteration  19: 464935.468 ops/s
# Warmup Iteration  20: 486978.716 ops/s
# Warmup Iteration  21: 479317.188 ops/s
# Warmup Iteration  22: 485032.082 ops/s
# Warmup Iteration  23: 468616.164 ops/s
# Warmup Iteration  24: 465384.376 ops/s
# Warmup Iteration  25: 473648.116 ops/s
# Warmup Iteration  26: 474281.642 ops/s
# Warmup Iteration  27: 486833.627 ops/s
# Warmup Iteration  28: 476223.005 ops/s
# Warmup Iteration  29: 473280.926 ops/s
# Warmup Iteration  30: 492530.920 ops/s
Iteration   1: 470781.587 ops/s
Iteration   2: 479118.316 ops/s
Iteration   3: 479924.763 ops/s
Iteration   4: 468105.750 ops/s
Iteration   5: 486094.001 ops/s
Iteration   6: 473298.695 ops/s
Iteration   7: 492519.847 ops/s
Iteration   8: 468825.757 ops/s
Iteration   9: 483662.278 ops/s
Iteration  10: 502027.382 ops/s
Iteration  11: 464247.833 ops/s
Iteration  12: 493783.607 ops/s
Iteration  13: 501802.057 ops/s
Iteration  14: 464249.526 ops/s
Iteration  15: 460634.677 ops/s
Iteration  16: 497062.378 ops/s
Iteration  17: 454137.018 ops/s
Iteration  18: 491372.002 ops/s
Iteration  19: 471158.358 ops/s
Iteration  20: 491596.121 ops/s
Iteration  21: 488774.370 ops/s
Iteration  22: 461074.717 ops/s
Iteration  23: 490341.719 ops/s
Iteration  24: 462268.091 ops/s
Iteration  25: 474242.861 ops/s
Iteration  26: 486242.676 ops/s
Iteration  27: 476175.351 ops/s
Iteration  28: 475678.822 ops/s
Iteration  29: 472838.903 ops/s
Iteration  30: 485369.116 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWithPredicateTest._Benchmark.benchmark_issue3008RetryInfinite":
  478913.619 ±(99.9%) 8715.261 ops/s [Average]
  (min, avg, max) = (454137.018, 478913.619, 502027.382), stdev = 13044.593
  CI (99.9%): [470198.359, 487628.880] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt       Score      Error  Units
ObservableRetryWithPredicateTest._Benchmark.benchmark_issue3008RetryInfinite  thrpt   30  478913.619 ± 8715.261  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableCreateTest._Benchmark.benchmark_onErrorThrows2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableCreateTest._Benchmark.benchmark_onErrorThrows2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 258398.039 ops/s
# Warmup Iteration   2: 316118.189 ops/s
# Warmup Iteration   3: 352998.471 ops/s
# Warmup Iteration   4: 323901.925 ops/s
# Warmup Iteration   5: 381279.847 ops/s
# Warmup Iteration   6: 362669.703 ops/s
# Warmup Iteration   7: 356960.758 ops/s
# Warmup Iteration   8: 371666.398 ops/s
# Warmup Iteration   9: 361936.924 ops/s
# Warmup Iteration  10: 380764.318 ops/s
# Warmup Iteration  11: 365875.454 ops/s
# Warmup Iteration  12: 361875.575 ops/s
# Warmup Iteration  13: 375084.866 ops/s
# Warmup Iteration  14: 363145.605 ops/s
# Warmup Iteration  15: 371955.750 ops/s
# Warmup Iteration  16: 360100.463 ops/s
# Warmup Iteration  17: 406433.467 ops/s
# Warmup Iteration  18: 395221.243 ops/s
# Warmup Iteration  19: 374405.171 ops/s
# Warmup Iteration  20: 403198.252 ops/s
# Warmup Iteration  21: 373959.070 ops/s
# Warmup Iteration  22: 390179.427 ops/s
# Warmup Iteration  23: 384231.407 ops/s
# Warmup Iteration  24: 373214.980 ops/s
# Warmup Iteration  25: 399010.394 ops/s
# Warmup Iteration  26: 380961.902 ops/s
# Warmup Iteration  27: 398806.142 ops/s
# Warmup Iteration  28: 378166.228 ops/s
# Warmup Iteration  29: 388667.992 ops/s
# Warmup Iteration  30: 383556.822 ops/s
Iteration   1: 401570.115 ops/s
Iteration   2: 389135.969 ops/s
Iteration   3: 393214.013 ops/s
Iteration   4: 360586.600 ops/s
Iteration   5: 390461.094 ops/s
Iteration   6: 378341.318 ops/s
Iteration   7: 389897.853 ops/s
Iteration   8: 382572.430 ops/s
Iteration   9: 387488.929 ops/s
Iteration  10: 391924.405 ops/s
Iteration  11: 402914.613 ops/s
Iteration  12: 379738.386 ops/s
Iteration  13: 391314.636 ops/s
Iteration  14: 392709.558 ops/s
Iteration  15: 380589.729 ops/s
Iteration  16: 389860.297 ops/s
Iteration  17: 381083.425 ops/s
Iteration  18: 391257.325 ops/s
Iteration  19: 383183.173 ops/s
Iteration  20: 386559.676 ops/s
Iteration  21: 401731.757 ops/s
Iteration  22: 380712.201 ops/s
Iteration  23: 384211.915 ops/s
Iteration  24: 375017.649 ops/s
Iteration  25: 318028.239 ops/s
Iteration  26: 393381.757 ops/s
Iteration  27: 368518.372 ops/s
Iteration  28: 381989.224 ops/s
Iteration  29: 388754.663 ops/s
Iteration  30: 373407.098 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableCreateTest._Benchmark.benchmark_onErrorThrows2":
  383671.881 ±(99.9%) 10376.305 ops/s [Average]
  (min, avg, max) = (318028.239, 383671.881, 402914.613), stdev = 15530.765
  CI (99.9%): [373295.576, 394048.185] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score       Error  Units
CompletableCreateTest._Benchmark.benchmark_onErrorThrows2  thrpt   30  383671.881 ± 10376.305  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableHideTest._Benchmark.benchmark_never$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableHideTest._Benchmark.benchmark_never

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 4448838.925 ops/s
# Warmup Iteration   2: 7849333.915 ops/s
# Warmup Iteration   3: 9476544.458 ops/s
# Warmup Iteration   4: 9538267.669 ops/s
# Warmup Iteration   5: 9441542.560 ops/s
# Warmup Iteration   6: 9360908.806 ops/s
# Warmup Iteration   7: 9898841.575 ops/s
# Warmup Iteration   8: 9519424.005 ops/s
# Warmup Iteration   9: 9927865.288 ops/s
# Warmup Iteration  10: 9594097.706 ops/s
# Warmup Iteration  11: 9314948.655 ops/s
# Warmup Iteration  12: 9902318.379 ops/s
# Warmup Iteration  13: 9808199.883 ops/s
# Warmup Iteration  14: 10060852.670 ops/s
# Warmup Iteration  15: 9549856.185 ops/s
# Warmup Iteration  16: 9857232.941 ops/s
# Warmup Iteration  17: 9261266.244 ops/s
# Warmup Iteration  18: 9435117.454 ops/s
# Warmup Iteration  19: 10326065.432 ops/s
# Warmup Iteration  20: 9812602.621 ops/s
# Warmup Iteration  21: 9705424.211 ops/s
# Warmup Iteration  22: 9647287.283 ops/s
# Warmup Iteration  23: 9521035.188 ops/s
# Warmup Iteration  24: 9664523.530 ops/s
# Warmup Iteration  25: 9277216.331 ops/s
# Warmup Iteration  26: 9379336.006 ops/s
# Warmup Iteration  27: 9613994.674 ops/s
# Warmup Iteration  28: 9668764.936 ops/s
# Warmup Iteration  29: 10220790.284 ops/s
# Warmup Iteration  30: 9614447.008 ops/s
Iteration   1: 9508085.082 ops/s
Iteration   2: 9697298.112 ops/s
Iteration   3: 9940393.971 ops/s
Iteration   4: 9612783.753 ops/s
Iteration   5: 9458166.818 ops/s
Iteration   6: 9724889.717 ops/s
Iteration   7: 9983628.272 ops/s
Iteration   8: 9662179.308 ops/s
Iteration   9: 9833508.098 ops/s
Iteration  10: 9568730.804 ops/s
Iteration  11: 9930825.037 ops/s
Iteration  12: 9294431.630 ops/s
Iteration  13: 9659302.717 ops/s
Iteration  14: 10104007.635 ops/s
Iteration  15: 9742584.061 ops/s
Iteration  16: 9570600.866 ops/s
Iteration  17: 10151981.738 ops/s
Iteration  18: 9689743.122 ops/s
Iteration  19: 9986771.103 ops/s
Iteration  20: 9562108.028 ops/s
Iteration  21: 9694509.824 ops/s
Iteration  22: 9749806.401 ops/s
Iteration  23: 9360538.110 ops/s
Iteration  24: 10101795.566 ops/s
Iteration  25: 9790626.871 ops/s
Iteration  26: 9756105.813 ops/s
Iteration  27: 9942881.159 ops/s
Iteration  28: 10387508.487 ops/s
Iteration  29: 10107710.340 ops/s
Iteration  30: 9175051.956 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableHideTest._Benchmark.benchmark_never":
  9758285.147 ±(99.9%) 181797.323 ops/s [Average]
  (min, avg, max) = (9175051.956, 9758285.147, 10387508.487), stdev = 272105.695
  CI (99.9%): [9576487.824, 9940082.469] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt        Score        Error  Units
CompletableHideTest._Benchmark.benchmark_never  thrpt   30  9758285.147 ± 181797.323  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithCompletableTest._Benchmark.benchmark_otherError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithCompletableTest._Benchmark.benchmark_otherError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 159221.166 ops/s
# Warmup Iteration   2: 554111.914 ops/s
# Warmup Iteration   3: 680227.984 ops/s
# Warmup Iteration   4: 630515.797 ops/s
# Warmup Iteration   5: 702132.562 ops/s
# Warmup Iteration   6: 667614.314 ops/s
# Warmup Iteration   7: 647015.668 ops/s
# Warmup Iteration   8: 652804.686 ops/s
# Warmup Iteration   9: 613367.379 ops/s
# Warmup Iteration  10: 681336.436 ops/s
# Warmup Iteration  11: 631054.310 ops/s
# Warmup Iteration  12: 634795.053 ops/s
# Warmup Iteration  13: 662069.528 ops/s
# Warmup Iteration  14: 658511.469 ops/s
# Warmup Iteration  15: 697231.717 ops/s
# Warmup Iteration  16: 639263.704 ops/s
# Warmup Iteration  17: 685155.698 ops/s
# Warmup Iteration  18: 739983.943 ops/s
# Warmup Iteration  19: 668658.929 ops/s
# Warmup Iteration  20: 723941.683 ops/s
# Warmup Iteration  21: 708225.418 ops/s
# Warmup Iteration  22: 669909.663 ops/s
# Warmup Iteration  23: 697564.760 ops/s
# Warmup Iteration  24: 667484.779 ops/s
# Warmup Iteration  25: 640150.481 ops/s
# Warmup Iteration  26: 775524.095 ops/s
# Warmup Iteration  27: 723849.309 ops/s
# Warmup Iteration  28: 678338.732 ops/s
# Warmup Iteration  29: 701202.161 ops/s
# Warmup Iteration  30: 652976.053 ops/s
Iteration   1: 697211.142 ops/s
Iteration   2: 661697.358 ops/s
Iteration   3: 691247.073 ops/s
Iteration   4: 671613.452 ops/s
Iteration   5: 671333.877 ops/s
Iteration   6: 671847.227 ops/s
Iteration   7: 675131.800 ops/s
Iteration   8: 689774.921 ops/s
Iteration   9: 655193.485 ops/s
Iteration  10: 687438.266 ops/s
Iteration  11: 648447.647 ops/s
Iteration  12: 676440.572 ops/s
Iteration  13: 693733.459 ops/s
Iteration  14: 666646.633 ops/s
Iteration  15: 681984.381 ops/s
Iteration  16: 674961.123 ops/s
Iteration  17: 682618.564 ops/s
Iteration  18: 708666.718 ops/s
Iteration  19: 646031.604 ops/s
Iteration  20: 576424.271 ops/s
Iteration  21: 676860.136 ops/s
Iteration  22: 670375.261 ops/s
Iteration  23: 692427.885 ops/s
Iteration  24: 678473.047 ops/s
Iteration  25: 686856.462 ops/s
Iteration  26: 679988.653 ops/s
Iteration  27: 687751.185 ops/s
Iteration  28: 686836.575 ops/s
Iteration  29: 650006.485 ops/s
Iteration  30: 704427.108 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithCompletableTest._Benchmark.benchmark_otherError":
  674748.212 ±(99.9%) 16155.401 ops/s [Average]
  (min, avg, max) = (576424.271, 674748.212, 708666.718), stdev = 24180.646
  CI (99.9%): [658592.811, 690903.614] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score       Error  Units
ObservableConcatWithCompletableTest._Benchmark.benchmark_otherError  thrpt   30  674748.212 ± 16155.401  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithCompletableTest._Benchmark.benchmark_mainError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithCompletableTest._Benchmark.benchmark_mainError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 194639.348 ops/s
# Warmup Iteration   2: 566460.677 ops/s
# Warmup Iteration   3: 682696.838 ops/s
# Warmup Iteration   4: 647350.002 ops/s
# Warmup Iteration   5: 688717.083 ops/s
# Warmup Iteration   6: 649601.525 ops/s
# Warmup Iteration   7: 670745.609 ops/s
# Warmup Iteration   8: 658187.842 ops/s
# Warmup Iteration   9: 683511.653 ops/s
# Warmup Iteration  10: 685461.891 ops/s
# Warmup Iteration  11: 598979.064 ops/s
# Warmup Iteration  12: 692089.948 ops/s
# Warmup Iteration  13: 674312.580 ops/s
# Warmup Iteration  14: 683281.770 ops/s
# Warmup Iteration  15: 685809.027 ops/s
# Warmup Iteration  16: 669193.077 ops/s
# Warmup Iteration  17: 723250.266 ops/s
# Warmup Iteration  18: 705643.024 ops/s
# Warmup Iteration  19: 709034.988 ops/s
# Warmup Iteration  20: 726115.557 ops/s
# Warmup Iteration  21: 711130.119 ops/s
# Warmup Iteration  22: 730304.946 ops/s
# Warmup Iteration  23: 703721.707 ops/s
# Warmup Iteration  24: 674976.934 ops/s
# Warmup Iteration  25: 730094.658 ops/s
# Warmup Iteration  26: 731984.983 ops/s
# Warmup Iteration  27: 692246.729 ops/s
# Warmup Iteration  28: 717563.303 ops/s
# Warmup Iteration  29: 730733.413 ops/s
# Warmup Iteration  30: 704624.071 ops/s
Iteration   1: 736732.042 ops/s
Iteration   2: 727162.545 ops/s
Iteration   3: 682263.640 ops/s
Iteration   4: 753300.909 ops/s
Iteration   5: 681799.425 ops/s
Iteration   6: 719931.475 ops/s
Iteration   7: 729529.372 ops/s
Iteration   8: 700482.538 ops/s
Iteration   9: 749605.685 ops/s
Iteration  10: 733953.096 ops/s
Iteration  11: 707423.879 ops/s
Iteration  12: 725493.038 ops/s
Iteration  13: 706969.107 ops/s
Iteration  14: 713771.233 ops/s
Iteration  15: 729089.197 ops/s
Iteration  16: 694562.791 ops/s
Iteration  17: 750784.505 ops/s
Iteration  18: 706423.893 ops/s
Iteration  19: 730027.788 ops/s
Iteration  20: 700040.475 ops/s
Iteration  21: 725829.462 ops/s
Iteration  22: 736275.067 ops/s
Iteration  23: 703773.231 ops/s
Iteration  24: 736114.076 ops/s
Iteration  25: 703603.903 ops/s
Iteration  26: 712170.488 ops/s
Iteration  27: 720037.082 ops/s
Iteration  28: 688782.649 ops/s
Iteration  29: 722855.999 ops/s
Iteration  30: 732719.918 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithCompletableTest._Benchmark.benchmark_mainError":
  718716.950 ±(99.9%) 12935.602 ops/s [Average]
  (min, avg, max) = (681799.425, 718716.950, 753300.909), stdev = 19361.401
  CI (99.9%): [705781.348, 731652.552] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score       Error  Units
ObservableMergeWithCompletableTest._Benchmark.benchmark_mainError  thrpt   30  718716.950 ± 12935.602  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableFromObservableTest._Benchmark.benchmark_fromObservableError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableFromObservableTest._Benchmark.benchmark_fromObservableError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 225899.665 ops/s
# Warmup Iteration   2: 592897.987 ops/s
# Warmup Iteration   3: 720541.912 ops/s
# Warmup Iteration   4: 742144.644 ops/s
# Warmup Iteration   5: 705796.850 ops/s
# Warmup Iteration   6: 730614.577 ops/s
# Warmup Iteration   7: 700577.226 ops/s
# Warmup Iteration   8: 721218.530 ops/s
# Warmup Iteration   9: 698748.263 ops/s
# Warmup Iteration  10: 700737.264 ops/s
# Warmup Iteration  11: 742655.137 ops/s
# Warmup Iteration  12: 703307.503 ops/s
# Warmup Iteration  13: 760773.054 ops/s
# Warmup Iteration  14: 700080.073 ops/s
# Warmup Iteration  15: 724259.927 ops/s
# Warmup Iteration  16: 742903.577 ops/s
# Warmup Iteration  17: 745154.579 ops/s
# Warmup Iteration  18: 817893.835 ops/s
# Warmup Iteration  19: 709036.194 ops/s
# Warmup Iteration  20: 781816.995 ops/s
# Warmup Iteration  21: 751794.944 ops/s
# Warmup Iteration  22: 749558.487 ops/s
# Warmup Iteration  23: 767952.195 ops/s
# Warmup Iteration  24: 753317.527 ops/s
# Warmup Iteration  25: 791593.049 ops/s
# Warmup Iteration  26: 756527.329 ops/s
# Warmup Iteration  27: 784975.363 ops/s
# Warmup Iteration  28: 769076.740 ops/s
# Warmup Iteration  29: 790090.303 ops/s
# Warmup Iteration  30: 755112.863 ops/s
Iteration   1: 778463.199 ops/s
Iteration   2: 762286.958 ops/s
Iteration   3: 792665.880 ops/s
Iteration   4: 770794.445 ops/s
Iteration   5: 760082.747 ops/s
Iteration   6: 761280.805 ops/s
Iteration   7: 786186.098 ops/s
Iteration   8: 745923.270 ops/s
Iteration   9: 764670.381 ops/s
Iteration  10: 741151.268 ops/s
Iteration  11: 793496.082 ops/s
Iteration  12: 756350.658 ops/s
Iteration  13: 761594.441 ops/s
Iteration  14: 766040.326 ops/s
Iteration  15: 591637.659 ops/s
Iteration  16: 771890.612 ops/s
Iteration  17: 773012.044 ops/s
Iteration  18: 770287.443 ops/s
Iteration  19: 799128.297 ops/s
Iteration  20: 749254.134 ops/s
Iteration  21: 779526.020 ops/s
Iteration  22: 764339.360 ops/s
Iteration  23: 801579.365 ops/s
Iteration  24: 740048.252 ops/s
Iteration  25: 775920.405 ops/s
Iteration  26: 779669.809 ops/s
Iteration  27: 753938.697 ops/s
Iteration  28: 802043.787 ops/s
Iteration  29: 747942.580 ops/s
Iteration  30: 757627.474 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableFromObservableTest._Benchmark.benchmark_fromObservableError":
  763294.417 ±(99.9%) 24555.165 ops/s [Average]
  (min, avg, max) = (591637.659, 763294.417, 802043.787), stdev = 36753.018
  CI (99.9%): [738739.251, 787849.582] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score       Error  Units
CompletableFromObservableTest._Benchmark.benchmark_fromObservableError  thrpt   30  763294.417 ± 24555.165  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRetryTest._Benchmark.benchmark_noCancelPreviousRetryWhile$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRetryTest._Benchmark.benchmark_noCancelPreviousRetryWhile

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 56500.276 ops/s
# Warmup Iteration   2: 134763.837 ops/s
# Warmup Iteration   3: 142470.555 ops/s
# Warmup Iteration   4: 149964.733 ops/s
# Warmup Iteration   5: 155681.403 ops/s
# Warmup Iteration   6: 148146.267 ops/s
# Warmup Iteration   7: 149300.974 ops/s
# Warmup Iteration   8: 141577.059 ops/s
# Warmup Iteration   9: 150312.011 ops/s
# Warmup Iteration  10: 150961.690 ops/s
# Warmup Iteration  11: 154961.232 ops/s
# Warmup Iteration  12: 138365.676 ops/s
# Warmup Iteration  13: 155656.369 ops/s
# Warmup Iteration  14: 146767.289 ops/s
# Warmup Iteration  15: 153805.196 ops/s
# Warmup Iteration  16: 150502.548 ops/s
# Warmup Iteration  17: 159964.008 ops/s
# Warmup Iteration  18: 162354.756 ops/s
# Warmup Iteration  19: 155169.869 ops/s
# Warmup Iteration  20: 160195.404 ops/s
# Warmup Iteration  21: 156054.855 ops/s
# Warmup Iteration  22: 156437.950 ops/s
# Warmup Iteration  23: 160497.749 ops/s
# Warmup Iteration  24: 157867.746 ops/s
# Warmup Iteration  25: 164157.100 ops/s
# Warmup Iteration  26: 167650.005 ops/s
# Warmup Iteration  27: 153791.295 ops/s
# Warmup Iteration  28: 159081.062 ops/s
# Warmup Iteration  29: 160878.123 ops/s
# Warmup Iteration  30: 156716.969 ops/s
Iteration   1: 165932.980 ops/s
Iteration   2: 154125.933 ops/s
Iteration   3: 160375.692 ops/s
Iteration   4: 157900.553 ops/s
Iteration   5: 155204.931 ops/s
Iteration   6: 160630.116 ops/s
Iteration   7: 155092.236 ops/s
Iteration   8: 163421.771 ops/s
Iteration   9: 164116.600 ops/s
Iteration  10: 155997.526 ops/s
Iteration  11: 162713.925 ops/s
Iteration  12: 156169.617 ops/s
Iteration  13: 157206.172 ops/s
Iteration  14: 163386.540 ops/s
Iteration  15: 162650.083 ops/s
Iteration  16: 159164.965 ops/s
Iteration  17: 162704.740 ops/s
Iteration  18: 164143.721 ops/s
Iteration  19: 157253.852 ops/s
Iteration  20: 162395.300 ops/s
Iteration  21: 158152.380 ops/s
Iteration  22: 150460.499 ops/s
Iteration  23: 156859.529 ops/s
Iteration  24: 160321.872 ops/s
Iteration  25: 164340.937 ops/s
Iteration  26: 157520.022 ops/s
Iteration  27: 160787.723 ops/s
Iteration  28: 159450.823 ops/s
Iteration  29: 158003.123 ops/s
Iteration  30: 162089.019 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryTest._Benchmark.benchmark_noCancelPreviousRetryWhile":
  159619.106 ±(99.9%) 2442.224 ops/s [Average]
  (min, avg, max) = (150460.499, 159619.106, 165932.980), stdev = 3655.406
  CI (99.9%): [157176.882, 162061.330] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score      Error  Units
ObservableRetryTest._Benchmark.benchmark_noCancelPreviousRetryWhile  thrpt   30  159619.106 ± 2442.224  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableCacheTest._Benchmark.benchmark_doubleDispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableCacheTest._Benchmark.benchmark_doubleDispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1265720.139 ops/s
# Warmup Iteration   2: 2872683.067 ops/s
# Warmup Iteration   3: 3527411.740 ops/s
# Warmup Iteration   4: 3687878.218 ops/s
# Warmup Iteration   5: 3867849.937 ops/s
# Warmup Iteration   6: 3868260.567 ops/s
# Warmup Iteration   7: 3638521.311 ops/s
# Warmup Iteration   8: 3815394.541 ops/s
# Warmup Iteration   9: 3744934.218 ops/s
# Warmup Iteration  10: 3836508.137 ops/s
# Warmup Iteration  11: 3638018.462 ops/s
# Warmup Iteration  12: 3922503.966 ops/s
# Warmup Iteration  13: 3632427.471 ops/s
# Warmup Iteration  14: 3865413.250 ops/s
# Warmup Iteration  15: 3873689.982 ops/s
# Warmup Iteration  16: 3714028.160 ops/s
# Warmup Iteration  17: 3989310.956 ops/s
# Warmup Iteration  18: 3620113.617 ops/s
# Warmup Iteration  19: 3887969.830 ops/s
# Warmup Iteration  20: 3888595.933 ops/s
# Warmup Iteration  21: 3621050.697 ops/s
# Warmup Iteration  22: 3806586.770 ops/s
# Warmup Iteration  23: 3856060.100 ops/s
# Warmup Iteration  24: 3756066.959 ops/s
# Warmup Iteration  25: 3654224.641 ops/s
# Warmup Iteration  26: 3977593.671 ops/s
# Warmup Iteration  27: 3939851.513 ops/s
# Warmup Iteration  28: 3693364.419 ops/s
# Warmup Iteration  29: 3650904.440 ops/s
# Warmup Iteration  30: 3808704.662 ops/s
Iteration   1: 3815332.155 ops/s
Iteration   2: 3749688.358 ops/s
Iteration   3: 3890856.502 ops/s
Iteration   4: 3710978.190 ops/s
Iteration   5: 3848638.532 ops/s
Iteration   6: 3744695.833 ops/s
Iteration   7: 3847003.763 ops/s
Iteration   8: 3768513.487 ops/s
Iteration   9: 3813419.978 ops/s
Iteration  10: 2871731.278 ops/s
Iteration  11: 3725833.841 ops/s
Iteration  12: 3823729.453 ops/s
Iteration  13: 3722186.795 ops/s
Iteration  14: 3883295.643 ops/s
Iteration  15: 3623276.460 ops/s
Iteration  16: 3797675.880 ops/s
Iteration  17: 3919321.123 ops/s
Iteration  18: 3730394.487 ops/s
Iteration  19: 3775931.539 ops/s
Iteration  20: 3704705.506 ops/s
Iteration  21: 3820262.639 ops/s
Iteration  22: 3733686.029 ops/s
Iteration  23: 3870536.522 ops/s
Iteration  24: 3978450.686 ops/s
Iteration  25: 3700979.007 ops/s
Iteration  26: 3820507.528 ops/s
Iteration  27: 3739300.931 ops/s
Iteration  28: 3927409.045 ops/s
Iteration  29: 3889421.178 ops/s
Iteration  30: 3686402.709 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableCacheTest._Benchmark.benchmark_doubleDispose":
  3764472.169 ±(99.9%) 125500.970 ops/s [Average]
  (min, avg, max) = (2871731.278, 3764472.169, 3978450.686), stdev = 187843.958
  CI (99.9%): [3638971.199, 3889973.140] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score        Error  Units
CompletableCacheTest._Benchmark.benchmark_doubleDispose  thrpt   30  3764472.169 ± 125500.970  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDematerializeTest._Benchmark.benchmark_selectorCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDematerializeTest._Benchmark.benchmark_selectorCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 204805.709 ops/s
# Warmup Iteration   2: 473332.935 ops/s
# Warmup Iteration   3: 535699.568 ops/s
# Warmup Iteration   4: 539127.788 ops/s
# Warmup Iteration   5: 557460.091 ops/s
# Warmup Iteration   6: 543659.384 ops/s
# Warmup Iteration   7: 539351.943 ops/s
# Warmup Iteration   8: 551542.876 ops/s
# Warmup Iteration   9: 527685.141 ops/s
# Warmup Iteration  10: 547966.650 ops/s
# Warmup Iteration  11: 504118.600 ops/s
# Warmup Iteration  12: 562623.941 ops/s
# Warmup Iteration  13: 558025.122 ops/s
# Warmup Iteration  14: 546494.630 ops/s
# Warmup Iteration  15: 549192.207 ops/s
# Warmup Iteration  16: 533934.850 ops/s
# Warmup Iteration  17: 583217.698 ops/s
# Warmup Iteration  18: 567350.333 ops/s
# Warmup Iteration  19: 581234.184 ops/s
# Warmup Iteration  20: 592630.884 ops/s
# Warmup Iteration  21: 561855.763 ops/s
# Warmup Iteration  22: 562128.502 ops/s
# Warmup Iteration  23: 574415.690 ops/s
# Warmup Iteration  24: 558665.221 ops/s
# Warmup Iteration  25: 560654.063 ops/s
# Warmup Iteration  26: 556794.376 ops/s
# Warmup Iteration  27: 567348.384 ops/s
# Warmup Iteration  28: 581944.966 ops/s
# Warmup Iteration  29: 564979.469 ops/s
# Warmup Iteration  30: 579833.131 ops/s
Iteration   1: 555917.826 ops/s
Iteration   2: 574427.722 ops/s
Iteration   3: 575548.875 ops/s
Iteration   4: 553386.481 ops/s
Iteration   5: 572733.099 ops/s
Iteration   6: 567491.791 ops/s
Iteration   7: 565166.763 ops/s
Iteration   8: 587137.530 ops/s
Iteration   9: 558711.956 ops/s
Iteration  10: 579380.250 ops/s
Iteration  11: 563976.523 ops/s
Iteration  12: 549398.076 ops/s
Iteration  13: 565170.208 ops/s
Iteration  14: 553860.531 ops/s
Iteration  15: 569547.472 ops/s
Iteration  16: 553559.955 ops/s
Iteration  17: 580475.085 ops/s
Iteration  18: 593061.787 ops/s
Iteration  19: 554776.853 ops/s
Iteration  20: 602817.203 ops/s
Iteration  21: 558906.386 ops/s
Iteration  22: 585567.947 ops/s
Iteration  23: 554408.716 ops/s
Iteration  24: 577736.780 ops/s
Iteration  25: 576767.567 ops/s
Iteration  26: 563508.118 ops/s
Iteration  27: 575684.424 ops/s
Iteration  28: 568192.300 ops/s
Iteration  29: 562414.129 ops/s
Iteration  30: 569368.722 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableDematerializeTest._Benchmark.benchmark_selectorCrash":
  568970.036 ±(99.9%) 8643.946 ops/s [Average]
  (min, avg, max) = (549398.076, 568970.036, 602817.203), stdev = 12937.853
  CI (99.9%): [560326.090, 577613.982] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
ObservableDematerializeTest._Benchmark.benchmark_selectorCrash  thrpt   30  568970.036 ± 8643.946  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableToListTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableToListTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 619357.726 ops/s
# Warmup Iteration   2: 3136599.367 ops/s
# Warmup Iteration   3: 4618498.879 ops/s
# Warmup Iteration   4: 4656397.521 ops/s
# Warmup Iteration   5: 4750501.496 ops/s
# Warmup Iteration   6: 4671857.005 ops/s
# Warmup Iteration   7: 4703333.161 ops/s
# Warmup Iteration   8: 4773965.919 ops/s
# Warmup Iteration   9: 4692973.231 ops/s
# Warmup Iteration  10: 4768933.616 ops/s
# Warmup Iteration  11: 4839799.497 ops/s
# Warmup Iteration  12: 4607773.580 ops/s
# Warmup Iteration  13: 4712431.631 ops/s
# Warmup Iteration  14: 4846561.725 ops/s
# Warmup Iteration  15: 4634524.220 ops/s
# Warmup Iteration  16: 4984944.132 ops/s
# Warmup Iteration  17: 4773904.915 ops/s
# Warmup Iteration  18: 4591515.862 ops/s
# Warmup Iteration  19: 4940908.593 ops/s
# Warmup Iteration  20: 4674867.666 ops/s
# Warmup Iteration  21: 4699551.814 ops/s
# Warmup Iteration  22: 4872253.743 ops/s
# Warmup Iteration  23: 4836967.968 ops/s
# Warmup Iteration  24: 4727420.727 ops/s
# Warmup Iteration  25: 4683170.588 ops/s
# Warmup Iteration  26: 4645608.384 ops/s
# Warmup Iteration  27: 4772594.974 ops/s
# Warmup Iteration  28: 4761319.068 ops/s
# Warmup Iteration  29: 4914101.386 ops/s
# Warmup Iteration  30: 4716265.460 ops/s
Iteration   1: 4844408.152 ops/s
Iteration   2: 4701947.746 ops/s
Iteration   3: 4767561.966 ops/s
Iteration   4: 4668762.196 ops/s
Iteration   5: 3726970.338 ops/s
Iteration   6: 4760369.586 ops/s
Iteration   7: 4647325.784 ops/s
Iteration   8: 4792390.551 ops/s
Iteration   9: 4630352.898 ops/s
Iteration  10: 4851341.356 ops/s
Iteration  11: 4661629.104 ops/s
Iteration  12: 4770444.568 ops/s
Iteration  13: 4798352.247 ops/s
Iteration  14: 4624944.830 ops/s
Iteration  15: 4842651.872 ops/s
Iteration  16: 4728410.063 ops/s
Iteration  17: 4805392.404 ops/s
Iteration  18: 4842890.486 ops/s
Iteration  19: 4556389.377 ops/s
Iteration  20: 4847207.507 ops/s
Iteration  21: 4643609.943 ops/s
Iteration  22: 4894747.616 ops/s
Iteration  23: 4650757.794 ops/s
Iteration  24: 4902780.357 ops/s
Iteration  25: 4877025.713 ops/s
Iteration  26: 4619162.262 ops/s
Iteration  27: 4895498.726 ops/s
Iteration  28: 4660427.228 ops/s
Iteration  29: 4715983.283 ops/s
Iteration  30: 4888313.479 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableToListTest._Benchmark.benchmark_dispose":
  4720601.648 ±(99.9%) 142427.254 ops/s [Average]
  (min, avg, max) = (3726970.338, 4720601.648, 4902780.357), stdev = 213178.425
  CI (99.9%): [4578174.393, 4863028.902] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score        Error  Units
ObservableToListTest._Benchmark.benchmark_dispose  thrpt   30  4720601.648 ± 142427.254  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDoAfterNextTest._Benchmark.benchmark_consumerThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDoAfterNextTest._Benchmark.benchmark_consumerThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 114607.864 ops/s
# Warmup Iteration   2: 463718.982 ops/s
# Warmup Iteration   3: 482066.271 ops/s
# Warmup Iteration   4: 536658.262 ops/s
# Warmup Iteration   5: 456701.611 ops/s
# Warmup Iteration   6: 539173.810 ops/s
# Warmup Iteration   7: 558382.323 ops/s
# Warmup Iteration   8: 530606.483 ops/s
# Warmup Iteration   9: 565579.971 ops/s
# Warmup Iteration  10: 535843.076 ops/s
# Warmup Iteration  11: 544215.418 ops/s
# Warmup Iteration  12: 546751.958 ops/s
# Warmup Iteration  13: 541560.531 ops/s
# Warmup Iteration  14: 576709.637 ops/s
# Warmup Iteration  15: 524129.667 ops/s
# Warmup Iteration  16: 562122.680 ops/s
# Warmup Iteration  17: 549494.821 ops/s
# Warmup Iteration  18: 588698.739 ops/s
# Warmup Iteration  19: 555863.120 ops/s
# Warmup Iteration  20: 567317.017 ops/s
# Warmup Iteration  21: 548027.020 ops/s
# Warmup Iteration  22: 568451.801 ops/s
# Warmup Iteration  23: 580236.433 ops/s
# Warmup Iteration  24: 566390.949 ops/s
# Warmup Iteration  25: 563997.616 ops/s
# Warmup Iteration  26: 556278.338 ops/s
# Warmup Iteration  27: 562302.353 ops/s
# Warmup Iteration  28: 567228.855 ops/s
# Warmup Iteration  29: 574263.174 ops/s
# Warmup Iteration  30: 563628.729 ops/s
Iteration   1: 565107.727 ops/s
Iteration   2: 571776.670 ops/s
Iteration   3: 534966.549 ops/s
Iteration   4: 577796.272 ops/s
Iteration   5: 559928.590 ops/s
Iteration   6: 563500.800 ops/s
Iteration   7: 556969.097 ops/s
Iteration   8: 562034.758 ops/s
Iteration   9: 562694.172 ops/s
Iteration  10: 565288.455 ops/s
Iteration  11: 570244.921 ops/s
Iteration  12: 560602.010 ops/s
Iteration  13: 584485.780 ops/s
Iteration  14: 584717.844 ops/s
Iteration  15: 539335.492 ops/s
Iteration  16: 577121.670 ops/s
Iteration  17: 552393.275 ops/s
Iteration  18: 562113.994 ops/s
Iteration  19: 587023.196 ops/s
Iteration  20: 544379.279 ops/s
Iteration  21: 578369.534 ops/s
Iteration  22: 556544.934 ops/s
Iteration  23: 574625.042 ops/s
Iteration  24: 561867.888 ops/s
Iteration  25: 555691.522 ops/s
Iteration  26: 568408.488 ops/s
Iteration  27: 559355.098 ops/s
Iteration  28: 578724.911 ops/s
Iteration  29: 553808.334 ops/s
Iteration  30: 559099.994 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableDoAfterNextTest._Benchmark.benchmark_consumerThrows":
  564299.210 ±(99.9%) 8535.574 ops/s [Average]
  (min, avg, max) = (534966.549, 564299.210, 587023.196), stdev = 12775.646
  CI (99.9%): [555763.636, 572834.784] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
ObservableDoAfterNextTest._Benchmark.benchmark_consumerThrows  thrpt   30  564299.210 ± 8535.574  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDoOnEachTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDoOnEachTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.783 ops/s
# Warmup Iteration   2: 41942.846 ops/s
# Warmup Iteration   3: 110427.249 ops/s
# Warmup Iteration   4: 166203.751 ops/s
# Warmup Iteration   5: 373997.744 ops/s
# Warmup Iteration   6: 522313.783 ops/s
# Warmup Iteration   7: 504540.270 ops/s
# Warmup Iteration   8: 563659.757 ops/s
# Warmup Iteration   9: 524868.613 ops/s
# Warmup Iteration  10: 542674.177 ops/s
# Warmup Iteration  11: 527586.859 ops/s
# Warmup Iteration  12: 490574.663 ops/s
# Warmup Iteration  13: 553677.484 ops/s
# Warmup Iteration  14: 539012.411 ops/s
# Warmup Iteration  15: 536718.315 ops/s
# Warmup Iteration  16: 552657.516 ops/s
# Warmup Iteration  17: 560180.467 ops/s
# Warmup Iteration  18: 547446.947 ops/s
# Warmup Iteration  19: 519176.911 ops/s
# Warmup Iteration  20: 555406.286 ops/s
# Warmup Iteration  21: 529776.704 ops/s
# Warmup Iteration  22: 548583.415 ops/s
# Warmup Iteration  23: 550276.836 ops/s
# Warmup Iteration  24: 529581.940 ops/s
# Warmup Iteration  25: 550443.190 ops/s
# Warmup Iteration  26: 521895.800 ops/s
# Warmup Iteration  27: 534283.936 ops/s
# Warmup Iteration  28: 533666.108 ops/s
# Warmup Iteration  29: 442004.173 ops/s
# Warmup Iteration  30: 539198.394 ops/s
Iteration   1: 532367.680 ops/s
Iteration   2: 536612.370 ops/s
Iteration   3: 551274.589 ops/s
Iteration   4: 520010.786 ops/s
Iteration   5: 554445.402 ops/s
Iteration   6: 526840.587 ops/s
Iteration   7: 546944.255 ops/s
Iteration   8: 519414.730 ops/s
Iteration   9: 524114.300 ops/s
Iteration  10: 549356.270 ops/s
Iteration  11: 522005.552 ops/s
Iteration  12: 541922.133 ops/s
Iteration  13: 530955.204 ops/s
Iteration  14: 527201.456 ops/s
Iteration  15: 540032.871 ops/s
Iteration  16: 537483.392 ops/s
Iteration  17: 549111.018 ops/s
Iteration  18: 547039.497 ops/s
Iteration  19: 523018.467 ops/s
Iteration  20: 559072.746 ops/s
Iteration  21: 531081.242 ops/s
Iteration  22: 544871.856 ops/s
Iteration  23: 532874.172 ops/s
Iteration  24: 535248.093 ops/s
Iteration  25: 549738.389 ops/s
Iteration  26: 533388.499 ops/s
Iteration  27: 539417.901 ops/s
Iteration  28: 554092.515 ops/s
Iteration  29: 529926.157 ops/s
Iteration  30: 540412.378 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableDoOnEachTest._Benchmark.benchmark_dispose":
  537675.817 ±(99.9%) 7452.186 ops/s [Average]
  (min, avg, max) = (519414.730, 537675.817, 559072.746), stdev = 11154.082
  CI (99.9%): [530223.631, 545128.003] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score      Error  Units
ObservableDoOnEachTest._Benchmark.benchmark_dispose  thrpt   30  537675.817 ± 7452.186  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDoFinallyTest._Benchmark.benchmark_eventOrdering2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDoFinallyTest._Benchmark.benchmark_eventOrdering2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 591844.414 ops/s
# Warmup Iteration   2: 2177289.252 ops/s
# Warmup Iteration   3: 3918775.062 ops/s
# Warmup Iteration   4: 4515016.659 ops/s
# Warmup Iteration   5: 4677107.789 ops/s
# Warmup Iteration   6: 4566636.967 ops/s
# Warmup Iteration   7: 4496973.997 ops/s
# Warmup Iteration   8: 4567864.210 ops/s
# Warmup Iteration   9: 4598467.857 ops/s
# Warmup Iteration  10: 4778780.274 ops/s
# Warmup Iteration  11: 4696133.858 ops/s
# Warmup Iteration  12: 4573350.211 ops/s
# Warmup Iteration  13: 4650464.294 ops/s
# Warmup Iteration  14: 4587517.319 ops/s
# Warmup Iteration  15: 4655099.896 ops/s
# Warmup Iteration  16: 4708210.537 ops/s
# Warmup Iteration  17: 4485357.270 ops/s
# Warmup Iteration  18: 4608119.925 ops/s
# Warmup Iteration  19: 4757988.062 ops/s
# Warmup Iteration  20: 4549073.747 ops/s
# Warmup Iteration  21: 4748547.504 ops/s
# Warmup Iteration  22: 4531787.031 ops/s
# Warmup Iteration  23: 4583284.350 ops/s
# Warmup Iteration  24: 4724026.910 ops/s
# Warmup Iteration  25: 4488305.757 ops/s
# Warmup Iteration  26: 4683397.427 ops/s
# Warmup Iteration  27: 4588904.801 ops/s
# Warmup Iteration  28: 4693508.366 ops/s
# Warmup Iteration  29: 4614217.477 ops/s
# Warmup Iteration  30: 4592642.347 ops/s
Iteration   1: 4701697.693 ops/s
Iteration   2: 4474444.181 ops/s
Iteration   3: 4519364.327 ops/s
Iteration   4: 4754878.170 ops/s
Iteration   5: 4702773.770 ops/s
Iteration   6: 4505146.661 ops/s
Iteration   7: 4763281.812 ops/s
Iteration   8: 4452979.477 ops/s
Iteration   9: 4724525.810 ops/s
Iteration  10: 4501269.611 ops/s
Iteration  11: 4544484.739 ops/s
Iteration  12: 4798993.421 ops/s
Iteration  13: 4485447.588 ops/s
Iteration  14: 4782178.484 ops/s
Iteration  15: 4664163.539 ops/s
Iteration  16: 4694232.620 ops/s
Iteration  17: 4546280.678 ops/s
Iteration  18: 4691875.588 ops/s
Iteration  19: 4487331.515 ops/s
Iteration  20: 4655743.987 ops/s
Iteration  21: 4634405.432 ops/s
Iteration  22: 4624551.430 ops/s
Iteration  23: 4548505.680 ops/s
Iteration  24: 4682937.330 ops/s
Iteration  25: 4605146.294 ops/s
Iteration  26: 4634488.927 ops/s
Iteration  27: 4731189.701 ops/s
Iteration  28: 4568633.969 ops/s
Iteration  29: 4703817.185 ops/s
Iteration  30: 4504741.010 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableDoFinallyTest._Benchmark.benchmark_eventOrdering2":
  4622983.688 ±(99.9%) 69469.439 ops/s [Average]
  (min, avg, max) = (4452979.477, 4622983.688, 4798993.421), stdev = 103978.593
  CI (99.9%): [4553514.249, 4692453.126] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
ObservableDoFinallyTest._Benchmark.benchmark_eventOrdering2  thrpt   30  4622983.688 ± 69469.439  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterableTest._Benchmark.benchmark_badSource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterableTest._Benchmark.benchmark_badSource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 38345.846 ops/s
# Warmup Iteration   2: 172031.163 ops/s
# Warmup Iteration   3: 211039.543 ops/s
# Warmup Iteration   4: 216228.870 ops/s
# Warmup Iteration   5: 226048.771 ops/s
# Warmup Iteration   6: 217209.919 ops/s
# Warmup Iteration   7: 221440.930 ops/s
# Warmup Iteration   8: 217722.789 ops/s
# Warmup Iteration   9: 224946.661 ops/s
# Warmup Iteration  10: 234786.071 ops/s
# Warmup Iteration  11: 217917.225 ops/s
# Warmup Iteration  12: 223284.094 ops/s
# Warmup Iteration  13: 225847.839 ops/s
# Warmup Iteration  14: 232600.339 ops/s
# Warmup Iteration  15: 221903.144 ops/s
# Warmup Iteration  16: 233692.395 ops/s
# Warmup Iteration  17: 240620.998 ops/s
# Warmup Iteration  18: 228794.959 ops/s
# Warmup Iteration  19: 240837.451 ops/s
# Warmup Iteration  20: 235051.786 ops/s
# Warmup Iteration  21: 238645.791 ops/s
# Warmup Iteration  22: 243024.848 ops/s
# Warmup Iteration  23: 232529.924 ops/s
# Warmup Iteration  24: 192193.564 ops/s
# Warmup Iteration  25: 240179.084 ops/s
# Warmup Iteration  26: 236895.806 ops/s
# Warmup Iteration  27: 233620.797 ops/s
# Warmup Iteration  28: 229427.243 ops/s
# Warmup Iteration  29: 235017.334 ops/s
# Warmup Iteration  30: 225679.515 ops/s
Iteration   1: 245841.245 ops/s
Iteration   2: 240787.648 ops/s
Iteration   3: 222024.966 ops/s
Iteration   4: 244060.060 ops/s
Iteration   5: 235481.792 ops/s
Iteration   6: 241880.209 ops/s
Iteration   7: 233373.981 ops/s
Iteration   8: 241134.604 ops/s
Iteration   9: 230091.975 ops/s
Iteration  10: 230481.684 ops/s
Iteration  11: 248237.550 ops/s
Iteration  12: 232668.356 ops/s
Iteration  13: 246447.539 ops/s
Iteration  14: 240855.268 ops/s
Iteration  15: 248399.018 ops/s
Iteration  16: 229166.912 ops/s
Iteration  17: 227400.580 ops/s
Iteration  18: 249971.305 ops/s
Iteration  19: 226272.180 ops/s
Iteration  20: 244881.818 ops/s
Iteration  21: 230205.495 ops/s
Iteration  22: 233251.894 ops/s
Iteration  23: 243583.613 ops/s
Iteration  24: 229822.524 ops/s
Iteration  25: 243026.321 ops/s
Iteration  26: 226647.562 ops/s
Iteration  27: 233011.768 ops/s
Iteration  28: 245301.313 ops/s
Iteration  29: 234618.773 ops/s
Iteration  30: 241832.707 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterableTest._Benchmark.benchmark_badSource":
  237358.689 ±(99.9%) 5263.363 ops/s [Average]
  (min, avg, max) = (222024.966, 237358.689, 249971.305), stdev = 7877.954
  CI (99.9%): [232095.326, 242622.051] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
ObservableFlattenIterableTest._Benchmark.benchmark_badSource  thrpt   30  237358.689 ± 5263.363  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.exceptions.ExceptionsTest._Benchmark.benchmark_onErrorNotImplementedIsThrown$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.exceptions.ExceptionsTest._Benchmark.benchmark_onErrorNotImplementedIsThrown

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 78259.513 ops/s
# Warmup Iteration   2: 202667.185 ops/s
# Warmup Iteration   3: 221150.926 ops/s
# Warmup Iteration   4: 231524.120 ops/s
# Warmup Iteration   5: 239394.414 ops/s
# Warmup Iteration   6: 233945.505 ops/s
# Warmup Iteration   7: 232911.031 ops/s
# Warmup Iteration   8: 240943.270 ops/s
# Warmup Iteration   9: 232789.452 ops/s
# Warmup Iteration  10: 233177.973 ops/s
# Warmup Iteration  11: 229950.671 ops/s
# Warmup Iteration  12: 232869.269 ops/s
# Warmup Iteration  13: 242206.438 ops/s
# Warmup Iteration  14: 234620.377 ops/s
# Warmup Iteration  15: 235271.300 ops/s
# Warmup Iteration  16: 242089.631 ops/s
# Warmup Iteration  17: 240256.297 ops/s
# Warmup Iteration  18: 247585.492 ops/s
# Warmup Iteration  19: 243189.638 ops/s
# Warmup Iteration  20: 244522.914 ops/s
# Warmup Iteration  21: 240263.655 ops/s
# Warmup Iteration  22: 238400.620 ops/s
# Warmup Iteration  23: 247776.238 ops/s
# Warmup Iteration  24: 234880.763 ops/s
# Warmup Iteration  25: 254391.011 ops/s
# Warmup Iteration  26: 248226.835 ops/s
# Warmup Iteration  27: 242031.422 ops/s
# Warmup Iteration  28: 239807.866 ops/s
# Warmup Iteration  29: 245947.435 ops/s
# Warmup Iteration  30: 237515.188 ops/s
Iteration   1: 248523.474 ops/s
Iteration   2: 241025.015 ops/s
Iteration   3: 248593.608 ops/s
Iteration   4: 238489.058 ops/s
Iteration   5: 246596.908 ops/s
Iteration   6: 241279.312 ops/s
Iteration   7: 238709.301 ops/s
Iteration   8: 248979.401 ops/s
Iteration   9: 241563.162 ops/s
Iteration  10: 250258.716 ops/s
Iteration  11: 245387.989 ops/s
Iteration  12: 256499.052 ops/s
Iteration  13: 235537.247 ops/s
Iteration  14: 242510.740 ops/s
Iteration  15: 244861.853 ops/s
Iteration  16: 240629.029 ops/s
Iteration  17: 252200.456 ops/s
Iteration  18: 240617.978 ops/s
Iteration  19: 243459.982 ops/s
Iteration  20: 256878.764 ops/s
Iteration  21: 240977.482 ops/s
Iteration  22: 252447.573 ops/s
Iteration  23: 240177.590 ops/s
Iteration  24: 243093.625 ops/s
Iteration  25: 255407.329 ops/s
Iteration  26: 236643.159 ops/s
Iteration  27: 252530.360 ops/s
Iteration  28: 246362.487 ops/s
Iteration  29: 236496.788 ops/s
Iteration  30: 240852.556 ops/s


Result "io.reactivex.rxjava3.exceptions.ExceptionsTest._Benchmark.benchmark_onErrorNotImplementedIsThrown":
  244919.667 ±(99.9%) 4079.320 ops/s [Average]
  (min, avg, max) = (235537.247, 244919.667, 256878.764), stdev = 6105.734
  CI (99.9%): [240840.347, 248998.986] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score      Error  Units
ExceptionsTest._Benchmark.benchmark_onErrorNotImplementedIsThrown  thrpt   30  244919.667 ± 4079.320  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDelaySubscriptionOtherTest._Benchmark.benchmark_completeTriggersSubscription$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDelaySubscriptionOtherTest._Benchmark.benchmark_completeTriggersSubscription

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 429362.237 ops/s
# Warmup Iteration   2: 1685414.999 ops/s
# Warmup Iteration   3: 2959474.020 ops/s
# Warmup Iteration   4: 3166590.945 ops/s
# Warmup Iteration   5: 3356488.059 ops/s
# Warmup Iteration   6: 3393111.682 ops/s
# Warmup Iteration   7: 3161066.539 ops/s
# Warmup Iteration   8: 3441610.864 ops/s
# Warmup Iteration   9: 3281407.894 ops/s
# Warmup Iteration  10: 3295977.273 ops/s
# Warmup Iteration  11: 3298028.386 ops/s
# Warmup Iteration  12: 3437834.919 ops/s
# Warmup Iteration  13: 3419268.892 ops/s
# Warmup Iteration  14: 3266342.138 ops/s
# Warmup Iteration  15: 3224978.891 ops/s
# Warmup Iteration  16: 3341178.670 ops/s
# Warmup Iteration  17: 3311540.912 ops/s
# Warmup Iteration  18: 2825084.743 ops/s
# Warmup Iteration  19: 3235548.374 ops/s
# Warmup Iteration  20: 3352421.820 ops/s
# Warmup Iteration  21: 3411118.742 ops/s
# Warmup Iteration  22: 3222145.864 ops/s
# Warmup Iteration  23: 3230881.278 ops/s
# Warmup Iteration  24: 3337407.253 ops/s
# Warmup Iteration  25: 3167139.348 ops/s
# Warmup Iteration  26: 3283433.509 ops/s
# Warmup Iteration  27: 3370593.425 ops/s
# Warmup Iteration  28: 3196365.103 ops/s
# Warmup Iteration  29: 3431001.824 ops/s
# Warmup Iteration  30: 3274056.010 ops/s
Iteration   1: 3456157.840 ops/s
Iteration   2: 3307907.827 ops/s
Iteration   3: 3415311.374 ops/s
Iteration   4: 3281743.174 ops/s
Iteration   5: 3341134.760 ops/s
Iteration   6: 3439093.968 ops/s
Iteration   7: 3319050.025 ops/s
Iteration   8: 3280127.136 ops/s
Iteration   9: 3390328.475 ops/s
Iteration  10: 3351882.044 ops/s
Iteration  11: 3386499.233 ops/s
Iteration  12: 3304618.532 ops/s
Iteration  13: 3152659.837 ops/s
Iteration  14: 3409217.954 ops/s
Iteration  15: 3396696.473 ops/s
Iteration  16: 3219002.440 ops/s
Iteration  17: 3386912.407 ops/s
Iteration  18: 3292810.802 ops/s
Iteration  19: 3387180.420 ops/s
Iteration  20: 3248000.467 ops/s
Iteration  21: 3293900.121 ops/s
Iteration  22: 3366413.824 ops/s
Iteration  23: 3206728.483 ops/s
Iteration  24: 3422302.593 ops/s
Iteration  25: 3223807.734 ops/s
Iteration  26: 3339511.822 ops/s
Iteration  27: 3370191.492 ops/s
Iteration  28: 3288002.241 ops/s
Iteration  29: 3420915.796 ops/s
Iteration  30: 3324378.588 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableDelaySubscriptionOtherTest._Benchmark.benchmark_completeTriggersSubscription":
  3334082.929 ±(99.9%) 50638.757 ops/s [Average]
  (min, avg, max) = (3152659.837, 3334082.929, 3456157.840), stdev = 75793.713
  CI (99.9%): [3283444.172, 3384721.687] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                Mode  Cnt        Score       Error  Units
ObservableDelaySubscriptionOtherTest._Benchmark.benchmark_completeTriggersSubscription  thrpt   30  3334082.929 ± 50638.757  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRetryTest._Benchmark.benchmark_noCancelPreviousRetry$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRetryTest._Benchmark.benchmark_noCancelPreviousRetry

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 20673.916 ops/s
# Warmup Iteration   2: 120495.513 ops/s
# Warmup Iteration   3: 146926.562 ops/s
# Warmup Iteration   4: 150582.960 ops/s
# Warmup Iteration   5: 143448.226 ops/s
# Warmup Iteration   6: 145195.444 ops/s
# Warmup Iteration   7: 145338.911 ops/s
# Warmup Iteration   8: 142601.307 ops/s
# Warmup Iteration   9: 147476.018 ops/s
# Warmup Iteration  10: 146385.369 ops/s
# Warmup Iteration  11: 143470.260 ops/s
# Warmup Iteration  12: 148926.301 ops/s
# Warmup Iteration  13: 148089.921 ops/s
# Warmup Iteration  14: 153772.673 ops/s
# Warmup Iteration  15: 143572.279 ops/s
# Warmup Iteration  16: 151978.942 ops/s
# Warmup Iteration  17: 153216.380 ops/s
# Warmup Iteration  18: 155218.173 ops/s
# Warmup Iteration  19: 163712.476 ops/s
# Warmup Iteration  20: 155659.213 ops/s
# Warmup Iteration  21: 158614.090 ops/s
# Warmup Iteration  22: 159535.450 ops/s
# Warmup Iteration  23: 157201.886 ops/s
# Warmup Iteration  24: 155361.962 ops/s
# Warmup Iteration  25: 153074.906 ops/s
# Warmup Iteration  26: 161366.990 ops/s
# Warmup Iteration  27: 156127.990 ops/s
# Warmup Iteration  28: 158558.220 ops/s
# Warmup Iteration  29: 154347.876 ops/s
# Warmup Iteration  30: 157946.354 ops/s
Iteration   1: 162748.896 ops/s
Iteration   2: 156872.495 ops/s
Iteration   3: 156476.493 ops/s
Iteration   4: 152021.930 ops/s
Iteration   5: 153296.886 ops/s
Iteration   6: 153652.625 ops/s
Iteration   7: 161992.085 ops/s
Iteration   8: 154317.046 ops/s
Iteration   9: 163070.585 ops/s
Iteration  10: 149331.211 ops/s
Iteration  11: 165044.670 ops/s
Iteration  12: 159560.182 ops/s
Iteration  13: 155901.198 ops/s
Iteration  14: 158020.328 ops/s
Iteration  15: 155912.296 ops/s
Iteration  16: 157019.668 ops/s
Iteration  17: 161394.326 ops/s
Iteration  18: 153922.773 ops/s
Iteration  19: 157098.105 ops/s
Iteration  20: 164037.044 ops/s
Iteration  21: 152381.424 ops/s
Iteration  22: 161278.863 ops/s
Iteration  23: 155850.837 ops/s
Iteration  24: 156066.763 ops/s
Iteration  25: 157157.988 ops/s
Iteration  26: 158267.988 ops/s
Iteration  27: 166939.837 ops/s
Iteration  28: 161298.740 ops/s
Iteration  29: 150690.870 ops/s
Iteration  30: 162981.124 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryTest._Benchmark.benchmark_noCancelPreviousRetry":
  157820.176 ±(99.9%) 2987.827 ops/s [Average]
  (min, avg, max) = (149331.211, 157820.176, 166939.837), stdev = 4472.040
  CI (99.9%): [154832.349, 160808.003] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
ObservableRetryTest._Benchmark.benchmark_noCancelPreviousRetry  thrpt   30  157820.176 ± 2987.827  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhileTest._Benchmark.benchmark_badSource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhileTest._Benchmark.benchmark_badSource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1695852.887 ops/s
# Warmup Iteration   2: 5004505.334 ops/s
# Warmup Iteration   3: 7476798.966 ops/s
# Warmup Iteration   4: 7387877.564 ops/s
# Warmup Iteration   5: 7197422.425 ops/s
# Warmup Iteration   6: 7320966.866 ops/s
# Warmup Iteration   7: 7154236.175 ops/s
# Warmup Iteration   8: 7769486.724 ops/s
# Warmup Iteration   9: 7398853.859 ops/s
# Warmup Iteration  10: 7374704.082 ops/s
# Warmup Iteration  11: 7637690.722 ops/s
# Warmup Iteration  12: 7161974.128 ops/s
# Warmup Iteration  13: 5164967.174 ops/s
# Warmup Iteration  14: 7678576.864 ops/s
# Warmup Iteration  15: 7207492.593 ops/s
# Warmup Iteration  16: 7514055.798 ops/s
# Warmup Iteration  17: 7383697.846 ops/s
# Warmup Iteration  18: 7591126.828 ops/s
# Warmup Iteration  19: 7405381.658 ops/s
# Warmup Iteration  20: 7443654.047 ops/s
# Warmup Iteration  21: 7431680.281 ops/s
# Warmup Iteration  22: 7268162.357 ops/s
# Warmup Iteration  23: 7299943.515 ops/s
# Warmup Iteration  24: 7258249.178 ops/s
# Warmup Iteration  25: 7516616.036 ops/s
# Warmup Iteration  26: 7492133.428 ops/s
# Warmup Iteration  27: 7116688.885 ops/s
# Warmup Iteration  28: 7764671.601 ops/s
# Warmup Iteration  29: 7245356.916 ops/s
# Warmup Iteration  30: 7495874.255 ops/s
Iteration   1: 7417769.443 ops/s
Iteration   2: 7592294.373 ops/s
Iteration   3: 7363253.236 ops/s
Iteration   4: 7242684.539 ops/s
Iteration   5: 7872288.669 ops/s
Iteration   6: 7508328.591 ops/s
Iteration   7: 7071992.038 ops/s
Iteration   8: 7739088.002 ops/s
Iteration   9: 7226526.330 ops/s
Iteration  10: 7586626.204 ops/s
Iteration  11: 7289909.685 ops/s
Iteration  12: 7499451.349 ops/s
Iteration  13: 7333912.246 ops/s
Iteration  14: 7323067.884 ops/s
Iteration  15: 7644260.283 ops/s
Iteration  16: 7305606.286 ops/s
Iteration  17: 7600712.446 ops/s
Iteration  18: 7285559.448 ops/s
Iteration  19: 7434437.740 ops/s
Iteration  20: 7402942.771 ops/s
Iteration  21: 7574851.736 ops/s
Iteration  22: 7464240.015 ops/s
Iteration  23: 7457740.727 ops/s
Iteration  24: 7392616.611 ops/s
Iteration  25: 7254092.110 ops/s
Iteration  26: 7321860.121 ops/s
Iteration  27: 7439837.888 ops/s
Iteration  28: 7571265.723 ops/s
Iteration  29: 7447983.931 ops/s
Iteration  30: 7487920.956 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhileTest._Benchmark.benchmark_badSource":
  7438437.379 ±(99.9%) 111191.574 ops/s [Average]
  (min, avg, max) = (7071992.038, 7438437.379, 7872288.669), stdev = 166426.326
  CI (99.9%): [7327245.806, 7549628.953] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score        Error  Units
ObservableTakeWhileTest._Benchmark.benchmark_badSource  thrpt   30  7438437.379 ± 111191.574  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSkipLastTimedTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSkipLastTimedTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 191434.905 ops/s
# Warmup Iteration   2: 1264788.040 ops/s
# Warmup Iteration   3: 2122081.291 ops/s
# Warmup Iteration   4: 2173045.573 ops/s
# Warmup Iteration   5: 2272224.101 ops/s
# Warmup Iteration   6: 2177930.766 ops/s
# Warmup Iteration   7: 2222450.634 ops/s
# Warmup Iteration   8: 2339050.450 ops/s
# Warmup Iteration   9: 2106903.372 ops/s
# Warmup Iteration  10: 2277242.901 ops/s
# Warmup Iteration  11: 2165947.688 ops/s
# Warmup Iteration  12: 2274265.013 ops/s
# Warmup Iteration  13: 2207292.818 ops/s
# Warmup Iteration  14: 2241150.971 ops/s
# Warmup Iteration  15: 2248544.780 ops/s
# Warmup Iteration  16: 2304644.357 ops/s
# Warmup Iteration  17: 2195032.077 ops/s
# Warmup Iteration  18: 2285759.023 ops/s
# Warmup Iteration  19: 2155308.137 ops/s
# Warmup Iteration  20: 2304070.170 ops/s
# Warmup Iteration  21: 2236183.064 ops/s
# Warmup Iteration  22: 2283453.114 ops/s
# Warmup Iteration  23: 2240523.186 ops/s
# Warmup Iteration  24: 2155281.067 ops/s
# Warmup Iteration  25: 2269088.138 ops/s
# Warmup Iteration  26: 2169238.099 ops/s
# Warmup Iteration  27: 2176394.883 ops/s
# Warmup Iteration  28: 2361012.177 ops/s
# Warmup Iteration  29: 2165039.200 ops/s
# Warmup Iteration  30: 2318124.509 ops/s
Iteration   1: 2265578.919 ops/s
Iteration   2: 2195159.897 ops/s
Iteration   3: 2319358.306 ops/s
Iteration   4: 2242808.549 ops/s
Iteration   5: 2212007.225 ops/s
Iteration   6: 2307393.101 ops/s
Iteration   7: 2229898.346 ops/s
Iteration   8: 2131746.104 ops/s
Iteration   9: 2240526.377 ops/s
Iteration  10: 2194344.532 ops/s
Iteration  11: 2256227.691 ops/s
Iteration  12: 2246576.720 ops/s
Iteration  13: 2191298.526 ops/s
Iteration  14: 2253084.353 ops/s
Iteration  15: 2210040.438 ops/s
Iteration  16: 2204298.815 ops/s
Iteration  17: 2266244.542 ops/s
Iteration  18: 2217628.688 ops/s
Iteration  19: 2239037.628 ops/s
Iteration  20: 2308870.488 ops/s
Iteration  21: 2132255.830 ops/s
Iteration  22: 2278262.880 ops/s
Iteration  23: 2185591.055 ops/s
Iteration  24: 2264812.095 ops/s
Iteration  25: 2175957.282 ops/s
Iteration  26: 2330372.730 ops/s
Iteration  27: 2174640.964 ops/s
Iteration  28: 2255591.901 ops/s
Iteration  29: 2202141.674 ops/s
Iteration  30: 2210119.017 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableSkipLastTimedTest._Benchmark.benchmark_dispose":
  2231395.822 ±(99.9%) 33450.384 ops/s [Average]
  (min, avg, max) = (2131746.104, 2231395.822, 2330372.730), stdev = 50066.963
  CI (99.9%): [2197945.439, 2264846.206] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
ObservableSkipLastTimedTest._Benchmark.benchmark_dispose  thrpt   30  2231395.822 ± 33450.384  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastTimedTest._Benchmark.benchmark_disposed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastTimedTest._Benchmark.benchmark_disposed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 267957.997 ops/s
# Warmup Iteration   2: 1640456.237 ops/s
# Warmup Iteration   3: 2649557.165 ops/s
# Warmup Iteration   4: 2854354.565 ops/s
# Warmup Iteration   5: 3012780.924 ops/s
# Warmup Iteration   6: 2809517.417 ops/s
# Warmup Iteration   7: 3042940.240 ops/s
# Warmup Iteration   8: 2390866.255 ops/s
# Warmup Iteration   9: 2875875.761 ops/s
# Warmup Iteration  10: 3034145.609 ops/s
# Warmup Iteration  11: 3003188.323 ops/s
# Warmup Iteration  12: 2893155.184 ops/s
# Warmup Iteration  13: 3012421.157 ops/s
# Warmup Iteration  14: 2912098.853 ops/s
# Warmup Iteration  15: 2963749.217 ops/s
# Warmup Iteration  16: 2954311.524 ops/s
# Warmup Iteration  17: 2812395.336 ops/s
# Warmup Iteration  18: 3072989.328 ops/s
# Warmup Iteration  19: 2881841.733 ops/s
# Warmup Iteration  20: 2971076.358 ops/s
# Warmup Iteration  21: 2876026.980 ops/s
# Warmup Iteration  22: 2949820.817 ops/s
# Warmup Iteration  23: 2981113.007 ops/s
# Warmup Iteration  24: 2874122.201 ops/s
# Warmup Iteration  25: 3076768.360 ops/s
# Warmup Iteration  26: 3070164.225 ops/s
# Warmup Iteration  27: 2865041.597 ops/s
# Warmup Iteration  28: 3092387.793 ops/s
# Warmup Iteration  29: 2881627.524 ops/s
# Warmup Iteration  30: 3011143.815 ops/s
Iteration   1: 2960080.780 ops/s
Iteration   2: 2906436.920 ops/s
Iteration   3: 3016924.013 ops/s
Iteration   4: 2873585.557 ops/s
Iteration   5: 2958494.137 ops/s
Iteration   6: 2968668.510 ops/s
Iteration   7: 2908491.514 ops/s
Iteration   8: 3009847.842 ops/s
Iteration   9: 2933629.518 ops/s
Iteration  10: 2974739.088 ops/s
Iteration  11: 3017795.711 ops/s
Iteration  12: 2857623.235 ops/s
Iteration  13: 2972830.332 ops/s
Iteration  14: 3056635.783 ops/s
Iteration  15: 2946651.276 ops/s
Iteration  16: 3006350.294 ops/s
Iteration  17: 2881694.974 ops/s
Iteration  18: 3040493.950 ops/s
Iteration  19: 2932215.969 ops/s
Iteration  20: 2974705.521 ops/s
Iteration  21: 2883712.151 ops/s
Iteration  22: 2975892.874 ops/s
Iteration  23: 2941304.661 ops/s
Iteration  24: 2826907.652 ops/s
Iteration  25: 2983154.470 ops/s
Iteration  26: 2849337.415 ops/s
Iteration  27: 2936769.864 ops/s
Iteration  28: 2985364.697 ops/s
Iteration  29: 2936015.836 ops/s
Iteration  30: 2995792.636 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastTimedTest._Benchmark.benchmark_disposed":
  2950404.906 ±(99.9%) 38470.325 ops/s [Average]
  (min, avg, max) = (2826907.652, 2950404.906, 3056635.783), stdev = 57580.576
  CI (99.9%): [2911934.581, 2988875.231] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
ObservableTakeLastTimedTest._Benchmark.benchmark_disposed  thrpt   30  2950404.906 ± 38470.325  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatestTest._Benchmark.benchmark_just$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatestTest._Benchmark.benchmark_just

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 18614.436 ops/s
# Warmup Iteration   2: 46824.670 ops/s
# Warmup Iteration   3: 106231.433 ops/s
# Warmup Iteration   4: 130701.863 ops/s
# Warmup Iteration   5: 119076.254 ops/s
# Warmup Iteration   6: 130520.263 ops/s
# Warmup Iteration   7: 92598.517 ops/s
# Warmup Iteration   8: 119013.821 ops/s
# Warmup Iteration   9: 122639.410 ops/s
# Warmup Iteration  10: 134309.851 ops/s
# Warmup Iteration  11: 125881.144 ops/s
# Warmup Iteration  12: 132463.134 ops/s
# Warmup Iteration  13: 130200.797 ops/s
# Warmup Iteration  14: 124685.649 ops/s
# Warmup Iteration  15: 116555.362 ops/s
# Warmup Iteration  16: 132595.443 ops/s
# Warmup Iteration  17: 123956.093 ops/s
# Warmup Iteration  18: 145779.676 ops/s
# Warmup Iteration  19: 119589.289 ops/s
# Warmup Iteration  20: 125991.798 ops/s
# Warmup Iteration  21: 131957.722 ops/s
# Warmup Iteration  22: 124565.904 ops/s
# Warmup Iteration  23: 117795.951 ops/s
# Warmup Iteration  24: 162379.186 ops/s
# Warmup Iteration  25: 165271.482 ops/s
# Warmup Iteration  26: 145903.927 ops/s
# Warmup Iteration  27: 131205.998 ops/s
# Warmup Iteration  28: 164775.947 ops/s
# Warmup Iteration  29: 132419.666 ops/s
# Warmup Iteration  30: 131572.954 ops/s
Iteration   1: 149702.444 ops/s
Iteration   2: 142817.439 ops/s
Iteration   3: 123695.575 ops/s
Iteration   4: 119079.787 ops/s
Iteration   5: 134323.861 ops/s
Iteration   6: 114706.816 ops/s
Iteration   7: 119997.718 ops/s
Iteration   8: 136302.779 ops/s
Iteration   9: 121699.536 ops/s
Iteration  10: 129809.895 ops/s
Iteration  11: 115257.400 ops/s
Iteration  12: 123554.979 ops/s
Iteration  13: 117265.343 ops/s
Iteration  14: 135967.769 ops/s
Iteration  15: 134041.623 ops/s
Iteration  16: 131833.265 ops/s
Iteration  17: 138542.196 ops/s
Iteration  18: 167769.966 ops/s
Iteration  19: 140905.208 ops/s
Iteration  20: 121413.147 ops/s
Iteration  21: 163079.577 ops/s
Iteration  22: 127022.524 ops/s
Iteration  23: 124918.587 ops/s
Iteration  24: 126573.714 ops/s
Iteration  25: 130789.190 ops/s
Iteration  26: 150500.040 ops/s
Iteration  27: 112655.768 ops/s
Iteration  28: 122289.567 ops/s
Iteration  29: 133561.522 ops/s
Iteration  30: 144326.154 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatestTest._Benchmark.benchmark_just":
  131813.446 ±(99.9%) 9102.050 ops/s [Average]
  (min, avg, max) = (112655.768, 131813.446, 167769.966), stdev = 13623.521
  CI (99.9%): [122711.396, 140915.496] (assumes normal distribution)


# Run complete. Total time: 00:01:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
ObservableThrottleLatestTest._Benchmark.benchmark_just  thrpt   30  131813.446 ± 9102.050  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableTimeoutTest._Benchmark.benchmark_mainSuccess$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableTimeoutTest._Benchmark.benchmark_mainSuccess

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 43966.260 ops/s
# Warmup Iteration   2: 114106.512 ops/s
# Warmup Iteration   3: 144648.023 ops/s
# Warmup Iteration   4: 121251.257 ops/s
# Warmup Iteration   5: 152387.968 ops/s
# Warmup Iteration   6: 182411.105 ops/s
# Warmup Iteration   7: 145160.664 ops/s
# Warmup Iteration   8: 128211.502 ops/s
# Warmup Iteration   9: 131986.515 ops/s
# Warmup Iteration  10: 183188.017 ops/s
# Warmup Iteration  11: 165114.876 ops/s
# Warmup Iteration  12: 149032.598 ops/s
# Warmup Iteration  13: 138097.031 ops/s
# Warmup Iteration  14: 124149.091 ops/s
# Warmup Iteration  15: 120132.320 ops/s
# Warmup Iteration  16: 163506.728 ops/s
# Warmup Iteration  17: 151440.402 ops/s
# Warmup Iteration  18: 136698.978 ops/s
# Warmup Iteration  19: 142155.139 ops/s
# Warmup Iteration  20: 140854.714 ops/s
# Warmup Iteration  21: 137032.516 ops/s
# Warmup Iteration  22: 129140.374 ops/s
# Warmup Iteration  23: 160971.690 ops/s
# Warmup Iteration  24: 153214.855 ops/s
# Warmup Iteration  25: 143742.794 ops/s
# Warmup Iteration  26: 151044.347 ops/s
# Warmup Iteration  27: 142294.791 ops/s
# Warmup Iteration  28: 136824.098 ops/s
# Warmup Iteration  29: 136792.534 ops/s
# Warmup Iteration  30: 131906.695 ops/s
Iteration   1: 139325.282 ops/s
Iteration   2: 161887.918 ops/s
Iteration   3: 156252.852 ops/s
Iteration   4: 176058.698 ops/s
Iteration   5: 155501.255 ops/s
Iteration   6: 178638.000 ops/s
Iteration   7: 130921.756 ops/s
Iteration   8: 110952.035 ops/s
Iteration   9: 205707.885 ops/s
Iteration  10: 130587.919 ops/s
Iteration  11: 146492.462 ops/s
Iteration  12: 138283.592 ops/s
Iteration  13: 132131.902 ops/s
Iteration  14: 143161.279 ops/s
Iteration  15: 126580.103 ops/s
Iteration  16: 121081.064 ops/s
Iteration  17: 135308.137 ops/s
Iteration  18: 137278.269 ops/s
Iteration  19: 160756.826 ops/s
Iteration  20: 173496.259 ops/s
Iteration  21: 159729.190 ops/s
Iteration  22: 140674.378 ops/s
Iteration  23: 127930.660 ops/s
Iteration  24: 148193.723 ops/s
Iteration  25: 167440.113 ops/s
Iteration  26: 165233.515 ops/s
Iteration  27: 169611.941 ops/s
Iteration  28: 146219.982 ops/s
Iteration  29: 136933.410 ops/s
Iteration  30: 141870.504 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableTimeoutTest._Benchmark.benchmark_mainSuccess":
  148808.030 ±(99.9%) 13556.619 ops/s [Average]
  (min, avg, max) = (110952.035, 148808.030, 205707.885), stdev = 20290.910
  CI (99.9%): [135251.412, 162364.649] (assumes normal distribution)


# Run complete. Total time: 00:01:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score       Error  Units
CompletableTimeoutTest._Benchmark.benchmark_mainSuccess  thrpt   30  148808.030 ± 13556.619  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTests._Benchmark.benchmark_timedTake$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTests._Benchmark.benchmark_timedTake

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 17547.677 ops/s
# Warmup Iteration   2: 47369.152 ops/s
# Warmup Iteration   3: 93467.818 ops/s
# Warmup Iteration   4: 78379.389 ops/s
# Warmup Iteration   5: 125916.580 ops/s
# Warmup Iteration   6: 136360.130 ops/s
# Warmup Iteration   7: 128975.979 ops/s
# Warmup Iteration   8: 124762.222 ops/s
# Warmup Iteration   9: 121702.874 ops/s
# Warmup Iteration  10: 129960.842 ops/s
# Warmup Iteration  11: 140216.484 ops/s
# Warmup Iteration  12: 150785.585 ops/s
# Warmup Iteration  13: 106675.108 ops/s
# Warmup Iteration  14: 123871.324 ops/s
# Warmup Iteration  15: 155994.369 ops/s
# Warmup Iteration  16: 105163.076 ops/s
# Warmup Iteration  17: 148393.401 ops/s
# Warmup Iteration  18: 136547.542 ops/s
# Warmup Iteration  19: 127613.034 ops/s
# Warmup Iteration  20: 128815.608 ops/s
# Warmup Iteration  21: 139184.464 ops/s
# Warmup Iteration  22: 128680.461 ops/s
# Warmup Iteration  23: 117041.872 ops/s
# Warmup Iteration  24: 125416.497 ops/s
# Warmup Iteration  25: 125964.311 ops/s
# Warmup Iteration  26: 114907.418 ops/s
# Warmup Iteration  27: 117065.889 ops/s
# Warmup Iteration  28: 123364.538 ops/s
# Warmup Iteration  29: 125881.377 ops/s
# Warmup Iteration  30: 147457.173 ops/s
Iteration   1: 114024.654 ops/s
Iteration   2: 125809.333 ops/s
Iteration   3: 100314.909 ops/s
Iteration   4: 113796.404 ops/s
Iteration   5: 118084.741 ops/s
Iteration   6: 132470.443 ops/s
Iteration   7: 113992.992 ops/s
Iteration   8: 141294.185 ops/s
Iteration   9: 127361.667 ops/s
Iteration  10: 120291.101 ops/s
Iteration  11: 125232.059 ops/s
Iteration  12: 133484.298 ops/s
Iteration  13: 122161.889 ops/s
Iteration  14: 119661.912 ops/s
Iteration  15: 120117.864 ops/s
Iteration  16: 115628.494 ops/s
Iteration  17: 139095.098 ops/s
Iteration  18: 133877.001 ops/s
Iteration  19: 127454.993 ops/s
Iteration  20: 147796.889 ops/s
Iteration  21: 139427.728 ops/s
Iteration  22: 144405.429 ops/s
Iteration  23: 112433.113 ops/s
Iteration  24: 107007.577 ops/s
Iteration  25: 138470.746 ops/s
Iteration  26: 125449.061 ops/s
Iteration  27: 119003.839 ops/s
Iteration  28: 107808.746 ops/s
Iteration  29: 138878.437 ops/s
Iteration  30: 160070.518 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTests._Benchmark.benchmark_timedTake":
  126163.537 ±(99.9%) 9082.188 ops/s [Average]
  (min, avg, max) = (100314.909, 126163.537, 160070.518), stdev = 13593.793
  CI (99.9%): [117081.349, 135245.726] (assumes normal distribution)


# Run complete. Total time: 00:01:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score      Error  Units
ObservableTimeoutTests._Benchmark.benchmark_timedTake  thrpt   30  126163.537 ± 9082.188  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTests._Benchmark.benchmark_timedFallbackTake$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTests._Benchmark.benchmark_timedFallbackTake

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 14324.733 ops/s
# Warmup Iteration   2: 45674.131 ops/s
# Warmup Iteration   3: 121580.654 ops/s
# Warmup Iteration   4: 96812.019 ops/s
# Warmup Iteration   5: 128656.204 ops/s
# Warmup Iteration   6: 105670.404 ops/s
# Warmup Iteration   7: 107775.845 ops/s
# Warmup Iteration   8: 106751.456 ops/s
# Warmup Iteration   9: 111920.465 ops/s
# Warmup Iteration  10: 103595.682 ops/s
# Warmup Iteration  11: 103325.878 ops/s
# Warmup Iteration  12: 129641.897 ops/s
# Warmup Iteration  13: 112626.451 ops/s
# Warmup Iteration  14: 119858.582 ops/s
# Warmup Iteration  15: 122530.153 ops/s
# Warmup Iteration  16: 112400.729 ops/s
# Warmup Iteration  17: 132005.211 ops/s
# Warmup Iteration  18: 105425.410 ops/s
# Warmup Iteration  19: 112718.862 ops/s
# Warmup Iteration  20: 103862.147 ops/s
# Warmup Iteration  21: 129445.931 ops/s
# Warmup Iteration  22: 128098.940 ops/s
# Warmup Iteration  23: 120460.286 ops/s
# Warmup Iteration  24: 134517.412 ops/s
# Warmup Iteration  25: 117579.326 ops/s
# Warmup Iteration  26: 109752.596 ops/s
# Warmup Iteration  27: 111908.638 ops/s
# Warmup Iteration  28: 123341.486 ops/s
# Warmup Iteration  29: 124841.322 ops/s
# Warmup Iteration  30: 118282.961 ops/s
Iteration   1: 115967.256 ops/s
Iteration   2: 121927.658 ops/s
Iteration   3: 126812.189 ops/s
Iteration   4: 144974.606 ops/s
Iteration   5: 130465.502 ops/s
Iteration   6: 131430.761 ops/s
Iteration   7: 103175.159 ops/s
Iteration   8: 124364.580 ops/s
Iteration   9: 130941.295 ops/s
Iteration  10: 124521.552 ops/s
Iteration  11: 123314.613 ops/s
Iteration  12: 112755.002 ops/s
Iteration  13: 117141.633 ops/s
Iteration  14: 116526.557 ops/s
Iteration  15: 146412.209 ops/s
Iteration  16: 146525.606 ops/s
Iteration  17: 115889.026 ops/s
Iteration  18: 116471.865 ops/s
Iteration  19: 112283.436 ops/s
Iteration  20: 124165.915 ops/s
Iteration  21: 106367.302 ops/s
Iteration  22: 114947.680 ops/s
Iteration  23: 140390.696 ops/s
Iteration  24: 125973.392 ops/s
Iteration  25: 126619.504 ops/s
Iteration  26: 121592.573 ops/s
Iteration  27: 118851.609 ops/s
Iteration  28: 127136.960 ops/s
Iteration  29: 153613.785 ops/s
Iteration  30: 125043.957 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTests._Benchmark.benchmark_timedFallbackTake":
  124886.796 ±(99.9%) 8005.934 ops/s [Average]
  (min, avg, max) = (103175.159, 124886.796, 153613.785), stdev = 11982.905
  CI (99.9%): [116880.862, 132892.729] (assumes normal distribution)


# Run complete. Total time: 00:01:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
ObservableTimeoutTests._Benchmark.benchmark_timedFallbackTake  thrpt   30  124886.796 ± 8005.934  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_noCompletionCancelSkip$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_noCompletionCancelSkip

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.768 ops/s
# Warmup Iteration   2: 5837.696 ops/s
# Warmup Iteration   3: 16431.106 ops/s
# Warmup Iteration   4: 23930.245 ops/s
# Warmup Iteration   5: 29851.467 ops/s
# Warmup Iteration   6: 29997.862 ops/s
# Warmup Iteration   7: 30940.769 ops/s
# Warmup Iteration   8: 25087.215 ops/s
# Warmup Iteration   9: 21004.342 ops/s
# Warmup Iteration  10: 43875.394 ops/s
# Warmup Iteration  11: 28272.344 ops/s
# Warmup Iteration  12: 70792.020 ops/s
# Warmup Iteration  13: 68621.831 ops/s
# Warmup Iteration  14: 78483.376 ops/s
# Warmup Iteration  15: 81513.260 ops/s
# Warmup Iteration  16: 88203.306 ops/s
# Warmup Iteration  17: 82969.364 ops/s
# Warmup Iteration  18: 87542.155 ops/s
# Warmup Iteration  19: 73225.845 ops/s
# Warmup Iteration  20: 82911.474 ops/s
# Warmup Iteration  21: 71896.468 ops/s
# Warmup Iteration  22: 89483.382 ops/s
# Warmup Iteration  23: 83875.156 ops/s
# Warmup Iteration  24: 79207.697 ops/s
# Warmup Iteration  25: 84526.065 ops/s
# Warmup Iteration  26: 89651.924 ops/s
# Warmup Iteration  27: 84723.090 ops/s
# Warmup Iteration  28: 86169.980 ops/s
# Warmup Iteration  29: 87365.815 ops/s
# Warmup Iteration  30: 83353.418 ops/s
Iteration   1: 82805.190 ops/s
Iteration   2: 82675.454 ops/s
Iteration   3: 90116.376 ops/s
Iteration   4: 79424.900 ops/s
Iteration   5: 90364.704 ops/s
Iteration   6: 85492.649 ops/s
Iteration   7: 78595.573 ops/s
Iteration   8: 76284.142 ops/s
Iteration   9: 79613.601 ops/s
Iteration  10: 85522.876 ops/s
Iteration  11: 76844.961 ops/s
Iteration  12: 72944.592 ops/s
Iteration  13: 82658.290 ops/s
Iteration  14: 88946.744 ops/s
Iteration  15: 84094.117 ops/s
Iteration  16: 61140.882 ops/s
Iteration  17: 83473.085 ops/s
Iteration  18: 92127.553 ops/s
Iteration  19: 86608.105 ops/s
Iteration  20: 85536.054 ops/s
Iteration  21: 87313.062 ops/s
Iteration  22: 83184.331 ops/s
Iteration  23: 73019.804 ops/s
Iteration  24: 86559.470 ops/s
Iteration  25: 85508.762 ops/s
Iteration  26: 85340.327 ops/s
Iteration  27: 88490.952 ops/s
Iteration  28: 90241.414 ops/s
Iteration  29: 80166.940 ops/s
Iteration  30: 75969.144 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_noCompletionCancelSkip":
  82702.135 ±(99.9%) 4373.905 ops/s [Average]
  (min, avg, max) = (61140.882, 82702.135, 92127.553), stdev = 6546.655
  CI (99.9%): [78328.231, 87076.040] (assumes normal distribution)


# Run complete. Total time: 00:01:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt      Score      Error  Units
ObservableBufferTest._Benchmark.benchmark_noCompletionCancelSkip  thrpt   30  82702.135 ± 4373.905  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.schedulers.SchedulerPoolFactoryTest._Benchmark.benchmark_boolPropertiesEnabledMissingReturnsDefaultMissing$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.schedulers.SchedulerPoolFactoryTest._Benchmark.benchmark_boolPropertiesEnabledMissingReturnsDefaultMissing

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 30063374.861 ops/s
# Warmup Iteration   2: 39165380.070 ops/s
# Warmup Iteration   3: 62112355.740 ops/s
# Warmup Iteration   4: 59984518.486 ops/s
# Warmup Iteration   5: 56897153.140 ops/s
# Warmup Iteration   6: 59796690.709 ops/s
# Warmup Iteration   7: 56064967.576 ops/s
# Warmup Iteration   8: 59338580.446 ops/s
# Warmup Iteration   9: 57160358.589 ops/s
# Warmup Iteration  10: 61489637.224 ops/s
# Warmup Iteration  11: 59472412.114 ops/s
# Warmup Iteration  12: 57691776.934 ops/s
# Warmup Iteration  13: 59191134.412 ops/s
# Warmup Iteration  14: 59916687.759 ops/s
# Warmup Iteration  15: 58107461.240 ops/s
# Warmup Iteration  16: 60630537.908 ops/s
# Warmup Iteration  17: 57384079.582 ops/s
# Warmup Iteration  18: 59023112.534 ops/s
# Warmup Iteration  19: 60639375.733 ops/s
# Warmup Iteration  20: 57272773.840 ops/s
# Warmup Iteration  21: 59979938.376 ops/s
# Warmup Iteration  22: 57792748.465 ops/s
# Warmup Iteration  23: 60530586.659 ops/s
# Warmup Iteration  24: 57225536.826 ops/s
# Warmup Iteration  25: 59717860.250 ops/s
# Warmup Iteration  26: 60355965.674 ops/s
# Warmup Iteration  27: 57634896.594 ops/s
# Warmup Iteration  28: 59225268.661 ops/s
# Warmup Iteration  29: 59008610.680 ops/s
# Warmup Iteration  30: 60494115.232 ops/s
Iteration   1: 59728869.840 ops/s
Iteration   2: 61391717.570 ops/s
Iteration   3: 57510078.186 ops/s
Iteration   4: 60659241.234 ops/s
Iteration   5: 60138738.879 ops/s
Iteration   6: 57016449.451 ops/s
Iteration   7: 60005628.401 ops/s
Iteration   8: 58946669.217 ops/s
Iteration   9: 59489057.555 ops/s
Iteration  10: 58117946.221 ops/s
Iteration  11: 59397387.647 ops/s
Iteration  12: 59932715.756 ops/s
Iteration  13: 58137939.602 ops/s
Iteration  14: 57527604.209 ops/s
Iteration  15: 59985894.190 ops/s
Iteration  16: 57252373.772 ops/s
Iteration  17: 59880033.262 ops/s
Iteration  18: 58993537.494 ops/s
Iteration  19: 56597645.565 ops/s
Iteration  20: 62735234.560 ops/s
Iteration  21: 57468483.844 ops/s
Iteration  22: 59471182.569 ops/s
Iteration  23: 58507214.417 ops/s
Iteration  24: 60795924.325 ops/s
Iteration  25: 58294974.871 ops/s
Iteration  26: 58333184.728 ops/s
Iteration  27: 60132325.986 ops/s
Iteration  28: 56949548.944 ops/s
Iteration  29: 59139822.442 ops/s
Iteration  30: 60560338.345 ops/s


Result "io.reactivex.rxjava3.internal.schedulers.SchedulerPoolFactoryTest._Benchmark.benchmark_boolPropertiesEnabledMissingReturnsDefaultMissing":
  59103258.769 ±(99.9%) 973327.008 ops/s [Average]
  (min, avg, max) = (56597645.565, 59103258.769, 62735234.560), stdev = 1456830.155
  CI (99.9%): [58129931.762, 60076585.777] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                         Mode  Cnt         Score        Error  Units
SchedulerPoolFactoryTest._Benchmark.benchmark_boolPropertiesEnabledMissingReturnsDefaultMissing  thrpt   30  59103258.769 ± 973327.008  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleEqualsTest._Benchmark.benchmark_bothError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleEqualsTest._Benchmark.benchmark_bothError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 35217.261 ops/s
# Warmup Iteration   2: 143127.503 ops/s
# Warmup Iteration   3: 163565.242 ops/s
# Warmup Iteration   4: 174319.484 ops/s
# Warmup Iteration   5: 176231.691 ops/s
# Warmup Iteration   6: 173275.063 ops/s
# Warmup Iteration   7: 170839.522 ops/s
# Warmup Iteration   8: 180945.800 ops/s
# Warmup Iteration   9: 189406.857 ops/s
# Warmup Iteration  10: 184848.322 ops/s
# Warmup Iteration  11: 184880.062 ops/s
# Warmup Iteration  12: 183611.778 ops/s
# Warmup Iteration  13: 185197.702 ops/s
# Warmup Iteration  14: 184925.844 ops/s
# Warmup Iteration  15: 180797.292 ops/s
# Warmup Iteration  16: 182813.529 ops/s
# Warmup Iteration  17: 187530.633 ops/s
# Warmup Iteration  18: 188705.113 ops/s
# Warmup Iteration  19: 194426.900 ops/s
# Warmup Iteration  20: 198739.980 ops/s
# Warmup Iteration  21: 187943.415 ops/s
# Warmup Iteration  22: 190314.975 ops/s
# Warmup Iteration  23: 188518.285 ops/s
# Warmup Iteration  24: 187663.064 ops/s
# Warmup Iteration  25: 200569.766 ops/s
# Warmup Iteration  26: 181413.932 ops/s
# Warmup Iteration  27: 191669.372 ops/s
# Warmup Iteration  28: 194724.737 ops/s
# Warmup Iteration  29: 190773.442 ops/s
# Warmup Iteration  30: 193356.494 ops/s
Iteration   1: 195108.839 ops/s
Iteration   2: 186296.496 ops/s
Iteration   3: 193347.319 ops/s
Iteration   4: 188873.742 ops/s
Iteration   5: 186032.579 ops/s
Iteration   6: 192816.448 ops/s
Iteration   7: 182333.971 ops/s
Iteration   8: 197890.488 ops/s
Iteration   9: 193077.782 ops/s
Iteration  10: 165395.526 ops/s
Iteration  11: 185276.039 ops/s
Iteration  12: 191182.062 ops/s
Iteration  13: 190183.327 ops/s
Iteration  14: 197319.543 ops/s
Iteration  15: 194150.732 ops/s
Iteration  16: 183111.582 ops/s
Iteration  17: 195059.822 ops/s
Iteration  18: 190442.314 ops/s
Iteration  19: 189391.251 ops/s
Iteration  20: 199796.823 ops/s
Iteration  21: 185442.647 ops/s
Iteration  22: 193146.861 ops/s
Iteration  23: 187867.905 ops/s
Iteration  24: 193023.458 ops/s
Iteration  25: 189505.157 ops/s
Iteration  26: 195552.996 ops/s
Iteration  27: 183246.709 ops/s
Iteration  28: 192402.725 ops/s
Iteration  29: 185449.512 ops/s
Iteration  30: 196806.088 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleEqualsTest._Benchmark.benchmark_bothError":
  189984.358 ±(99.9%) 4421.036 ops/s [Average]
  (min, avg, max) = (165395.526, 189984.358, 199796.823), stdev = 6617.198
  CI (99.9%): [185563.323, 194405.394] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt       Score      Error  Units
SingleEqualsTest._Benchmark.benchmark_bothError  thrpt   30  189984.358 ± 4421.036  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithStartEndObservableTest._Benchmark.benchmark_unsubscribeAll$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithStartEndObservableTest._Benchmark.benchmark_unsubscribeAll

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 69839.785 ops/s
# Warmup Iteration   2: 320725.415 ops/s
# Warmup Iteration   3: 899695.222 ops/s
# Warmup Iteration   4: 1051439.376 ops/s
# Warmup Iteration   5: 1063446.246 ops/s
# Warmup Iteration   6: 987596.842 ops/s
# Warmup Iteration   7: 1005947.846 ops/s
# Warmup Iteration   8: 1075469.349 ops/s
# Warmup Iteration   9: 1081188.055 ops/s
# Warmup Iteration  10: 1046245.467 ops/s
# Warmup Iteration  11: 1075139.626 ops/s
# Warmup Iteration  12: 1089577.136 ops/s
# Warmup Iteration  13: 1108054.649 ops/s
# Warmup Iteration  14: 1111482.859 ops/s
# Warmup Iteration  15: 1063487.301 ops/s
# Warmup Iteration  16: 1122212.619 ops/s
# Warmup Iteration  17: 1044147.756 ops/s
# Warmup Iteration  18: 1088319.959 ops/s
# Warmup Iteration  19: 1106139.318 ops/s
# Warmup Iteration  20: 1089063.247 ops/s
# Warmup Iteration  21: 1088785.342 ops/s
# Warmup Iteration  22: 1079867.148 ops/s
# Warmup Iteration  23: 1110136.325 ops/s
# Warmup Iteration  24: 1057666.419 ops/s
# Warmup Iteration  25: 1114953.880 ops/s
# Warmup Iteration  26: 1073277.431 ops/s
# Warmup Iteration  27: 1090005.973 ops/s
# Warmup Iteration  28: 1107288.231 ops/s
# Warmup Iteration  29: 1074532.979 ops/s
# Warmup Iteration  30: 1063436.062 ops/s
Iteration   1: 1109357.097 ops/s
Iteration   2: 1081023.090 ops/s
Iteration   3: 1124672.564 ops/s
Iteration   4: 1083899.350 ops/s
Iteration   5: 1048533.723 ops/s
Iteration   6: 1098955.415 ops/s
Iteration   7: 1052344.154 ops/s
Iteration   8: 1066017.935 ops/s
Iteration   9: 1089874.993 ops/s
Iteration  10: 1107459.526 ops/s
Iteration  11: 1057683.770 ops/s
Iteration  12: 1087392.994 ops/s
Iteration  13: 1135101.809 ops/s
Iteration  14: 1066723.407 ops/s
Iteration  15: 1091755.959 ops/s
Iteration  16: 1092154.055 ops/s
Iteration  17: 1082457.616 ops/s
Iteration  18: 1064056.588 ops/s
Iteration  19: 1095551.267 ops/s
Iteration  20: 1126020.383 ops/s
Iteration  21: 1111976.556 ops/s
Iteration  22: 1055578.000 ops/s
Iteration  23: 1132984.135 ops/s
Iteration  24: 1075705.370 ops/s
Iteration  25: 1074475.384 ops/s
Iteration  26: 1110540.923 ops/s
Iteration  27: 1094198.484 ops/s
Iteration  28: 1077162.277 ops/s
Iteration  29: 1106806.254 ops/s
Iteration  30: 1072163.684 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithStartEndObservableTest._Benchmark.benchmark_unsubscribeAll":
  1089087.559 ±(99.9%) 15997.303 ops/s [Average]
  (min, avg, max) = (1048533.723, 1089087.559, 1135101.809), stdev = 23944.013
  CI (99.9%): [1073090.255, 1105084.862] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt        Score       Error  Units
ObservableWindowWithStartEndObservableTest._Benchmark.benchmark_unsubscribeAll  thrpt   30  1089087.559 ± 15997.303  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableAmbTest._Benchmark.benchmark_ambArraySingleElement$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableAmbTest._Benchmark.benchmark_ambArraySingleElement

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 5192116.846 ops/s
# Warmup Iteration   2: 11595739.109 ops/s
# Warmup Iteration   3: 13987257.200 ops/s
# Warmup Iteration   4: 13726443.527 ops/s
# Warmup Iteration   5: 14238287.350 ops/s
# Warmup Iteration   6: 13998511.762 ops/s
# Warmup Iteration   7: 13278490.805 ops/s
# Warmup Iteration   8: 14251492.456 ops/s
# Warmup Iteration   9: 13829391.602 ops/s
# Warmup Iteration  10: 13619011.034 ops/s
# Warmup Iteration  11: 13978994.048 ops/s
# Warmup Iteration  12: 13777193.887 ops/s
# Warmup Iteration  13: 14089540.705 ops/s
# Warmup Iteration  14: 13869290.305 ops/s
# Warmup Iteration  15: 13931927.455 ops/s
# Warmup Iteration  16: 14522713.207 ops/s
# Warmup Iteration  17: 13940835.237 ops/s
# Warmup Iteration  18: 13468739.505 ops/s
# Warmup Iteration  19: 14298797.455 ops/s
# Warmup Iteration  20: 13330375.641 ops/s
# Warmup Iteration  21: 14361722.538 ops/s
# Warmup Iteration  22: 14180752.433 ops/s
# Warmup Iteration  23: 13799312.121 ops/s
# Warmup Iteration  24: 13926567.689 ops/s
# Warmup Iteration  25: 14303983.071 ops/s
# Warmup Iteration  26: 14647247.331 ops/s
# Warmup Iteration  27: 13521256.435 ops/s
# Warmup Iteration  28: 14166958.871 ops/s
# Warmup Iteration  29: 13779445.339 ops/s
# Warmup Iteration  30: 14191279.188 ops/s
Iteration   1: 13604958.285 ops/s
Iteration   2: 13626538.702 ops/s
Iteration   3: 14459847.316 ops/s
Iteration   4: 13413991.896 ops/s
Iteration   5: 11471122.107 ops/s
Iteration   6: 13410435.363 ops/s
Iteration   7: 13698011.549 ops/s
Iteration   8: 14388593.780 ops/s
Iteration   9: 13487979.131 ops/s
Iteration  10: 13691815.621 ops/s
Iteration  11: 14224505.889 ops/s
Iteration  12: 13342339.742 ops/s
Iteration  13: 13894660.369 ops/s
Iteration  14: 14244101.478 ops/s
Iteration  15: 14380394.222 ops/s
Iteration  16: 14048392.884 ops/s
Iteration  17: 13651690.358 ops/s
Iteration  18: 14411294.743 ops/s
Iteration  19: 13456759.042 ops/s
Iteration  20: 14240388.943 ops/s
Iteration  21: 13745910.836 ops/s
Iteration  22: 13533829.953 ops/s
Iteration  23: 14288893.047 ops/s
Iteration  24: 13509656.024 ops/s
Iteration  25: 14020961.933 ops/s
Iteration  26: 13702872.732 ops/s
Iteration  27: 13989494.905 ops/s
Iteration  28: 13872055.184 ops/s
Iteration  29: 14045372.263 ops/s
Iteration  30: 13993326.396 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableAmbTest._Benchmark.benchmark_ambArraySingleElement":
  13795006.490 ±(99.9%) 371968.513 ops/s [Average]
  (min, avg, max) = (11471122.107, 13795006.490, 14459847.316), stdev = 556745.001
  CI (99.9%): [13423037.977, 14166975.002] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt         Score        Error  Units
ObservableAmbTest._Benchmark.benchmark_ambArraySingleElement  thrpt   30  13795006.490 ± 371968.513  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFromCallableTest._Benchmark.benchmark_callable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFromCallableTest._Benchmark.benchmark_callable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2678017.044 ops/s
# Warmup Iteration   2: 6703777.535 ops/s
# Warmup Iteration   3: 9231350.300 ops/s
# Warmup Iteration   4: 8808162.114 ops/s
# Warmup Iteration   5: 9262705.311 ops/s
# Warmup Iteration   6: 8817533.690 ops/s
# Warmup Iteration   7: 9126740.602 ops/s
# Warmup Iteration   8: 9137278.666 ops/s
# Warmup Iteration   9: 9042303.940 ops/s
# Warmup Iteration  10: 9449928.379 ops/s
# Warmup Iteration  11: 9065882.397 ops/s
# Warmup Iteration  12: 9000554.850 ops/s
# Warmup Iteration  13: 9185738.096 ops/s
# Warmup Iteration  14: 8820734.244 ops/s
# Warmup Iteration  15: 9128260.377 ops/s
# Warmup Iteration  16: 9271302.699 ops/s
# Warmup Iteration  17: 9351858.196 ops/s
# Warmup Iteration  18: 8989359.816 ops/s
# Warmup Iteration  19: 9221083.089 ops/s
# Warmup Iteration  20: 8994215.223 ops/s
# Warmup Iteration  21: 9180821.128 ops/s
# Warmup Iteration  22: 8791223.955 ops/s
# Warmup Iteration  23: 9327243.305 ops/s
# Warmup Iteration  24: 8975531.538 ops/s
# Warmup Iteration  25: 8743030.441 ops/s
# Warmup Iteration  26: 9269680.839 ops/s
# Warmup Iteration  27: 8907176.156 ops/s
# Warmup Iteration  28: 9203907.624 ops/s
# Warmup Iteration  29: 8728787.677 ops/s
# Warmup Iteration  30: 9113420.721 ops/s
Iteration   1: 9171612.110 ops/s
Iteration   2: 8975822.901 ops/s
Iteration   3: 9318952.195 ops/s
Iteration   4: 8767021.991 ops/s
Iteration   5: 8902604.807 ops/s
Iteration   6: 9247481.091 ops/s
Iteration   7: 8987426.760 ops/s
Iteration   8: 9097701.194 ops/s
Iteration   9: 9303683.846 ops/s
Iteration  10: 8831688.110 ops/s
Iteration  11: 9490379.931 ops/s
Iteration  12: 8605403.443 ops/s
Iteration  13: 9140465.983 ops/s
Iteration  14: 8943183.603 ops/s
Iteration  15: 8672023.021 ops/s
Iteration  16: 9403221.661 ops/s
Iteration  17: 8802108.784 ops/s
Iteration  18: 9468201.211 ops/s
Iteration  19: 8992018.741 ops/s
Iteration  20: 8971265.409 ops/s
Iteration  21: 9417194.293 ops/s
Iteration  22: 8713783.681 ops/s
Iteration  23: 9251010.857 ops/s
Iteration  24: 8867121.363 ops/s
Iteration  25: 9030812.353 ops/s
Iteration  26: 9105327.047 ops/s
Iteration  27: 9177271.597 ops/s
Iteration  28: 9058194.659 ops/s
Iteration  29: 9087058.517 ops/s
Iteration  30: 9165030.889 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFromCallableTest._Benchmark.benchmark_callable":
  9065502.402 ±(99.9%) 158161.655 ops/s [Average]
  (min, avg, max) = (8605403.443, 9065502.402, 9490379.931), stdev = 236728.938
  CI (99.9%): [8907340.746, 9223664.057] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score        Error  Units
MaybeFromCallableTest._Benchmark.benchmark_callable  thrpt   30  9065502.402 ± 158161.655  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastTimedTest._Benchmark.benchmark_lastWindowIsFixedInTime$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastTimedTest._Benchmark.benchmark_lastWindowIsFixedInTime

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 226274.150 ops/s
# Warmup Iteration   2: 1051826.466 ops/s
# Warmup Iteration   3: 1471251.152 ops/s
# Warmup Iteration   4: 1645421.846 ops/s
# Warmup Iteration   5: 1680950.807 ops/s
# Warmup Iteration   6: 1589614.381 ops/s
# Warmup Iteration   7: 1671922.557 ops/s
# Warmup Iteration   8: 1571211.417 ops/s
# Warmup Iteration   9: 1662065.053 ops/s
# Warmup Iteration  10: 1731608.030 ops/s
# Warmup Iteration  11: 1580594.670 ops/s
# Warmup Iteration  12: 1684404.909 ops/s
# Warmup Iteration  13: 1633309.352 ops/s
# Warmup Iteration  14: 1717526.514 ops/s
# Warmup Iteration  15: 1645211.402 ops/s
# Warmup Iteration  16: 1662958.030 ops/s
# Warmup Iteration  17: 1688991.049 ops/s
# Warmup Iteration  18: 1651101.663 ops/s
# Warmup Iteration  19: 1700068.459 ops/s
# Warmup Iteration  20: 1615276.468 ops/s
# Warmup Iteration  21: 1724830.222 ops/s
# Warmup Iteration  22: 1717350.725 ops/s
# Warmup Iteration  23: 1562003.718 ops/s
# Warmup Iteration  24: 1705241.291 ops/s
# Warmup Iteration  25: 1677815.852 ops/s
# Warmup Iteration  26: 1635881.369 ops/s
# Warmup Iteration  27: 1688629.570 ops/s
# Warmup Iteration  28: 1659323.530 ops/s
# Warmup Iteration  29: 1680149.424 ops/s
# Warmup Iteration  30: 1336775.428 ops/s
Iteration   1: 1694757.244 ops/s
Iteration   2: 1695691.494 ops/s
Iteration   3: 1622613.442 ops/s
Iteration   4: 1726803.617 ops/s
Iteration   5: 1685563.595 ops/s
Iteration   6: 1640752.682 ops/s
Iteration   7: 1672748.371 ops/s
Iteration   8: 1652865.069 ops/s
Iteration   9: 1642325.710 ops/s
Iteration  10: 1636191.867 ops/s
Iteration  11: 1668794.761 ops/s
Iteration  12: 1699755.348 ops/s
Iteration  13: 1639799.961 ops/s
Iteration  14: 1641067.143 ops/s
Iteration  15: 1715591.842 ops/s
Iteration  16: 1686464.162 ops/s
Iteration  17: 1647085.319 ops/s
Iteration  18: 1679458.430 ops/s
Iteration  19: 1657883.429 ops/s
Iteration  20: 1671942.631 ops/s
Iteration  21: 1714438.601 ops/s
Iteration  22: 1642800.395 ops/s
Iteration  23: 1715365.814 ops/s
Iteration  24: 1595272.102 ops/s
Iteration  25: 1705942.057 ops/s
Iteration  26: 1673715.751 ops/s
Iteration  27: 1675013.333 ops/s
Iteration  28: 1661239.623 ops/s
Iteration  29: 1633128.058 ops/s
Iteration  30: 1706405.625 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastTimedTest._Benchmark.benchmark_lastWindowIsFixedInTime":
  1670049.249 ±(99.9%) 21579.128 ops/s [Average]
  (min, avg, max) = (1595272.102, 1670049.249, 1726803.617), stdev = 32298.625
  CI (99.9%): [1648470.121, 1691628.377] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score       Error  Units
ObservableTakeLastTimedTest._Benchmark.benchmark_lastWindowIsFixedInTime  thrpt   30  1670049.249 ± 21579.128  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchTest._Benchmark.benchmark_switchMapErrorEmptySource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchTest._Benchmark.benchmark_switchMapErrorEmptySource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.845 ops/s
# Warmup Iteration   2: 69470.265 ops/s
# Warmup Iteration   3: 187502.879 ops/s
# Warmup Iteration   4: 314624.601 ops/s
# Warmup Iteration   5: 525642.364 ops/s
# Warmup Iteration   6: 1086685.419 ops/s
# Warmup Iteration   7: 1057003.978 ops/s
# Warmup Iteration   8: 1052922.678 ops/s
# Warmup Iteration   9: 910437.497 ops/s
# Warmup Iteration  10: 1101718.447 ops/s
# Warmup Iteration  11: 1051438.183 ops/s
# Warmup Iteration  12: 1090020.652 ops/s
# Warmup Iteration  13: 1064504.165 ops/s
# Warmup Iteration  14: 1087279.306 ops/s
# Warmup Iteration  15: 1116996.055 ops/s
# Warmup Iteration  16: 1071468.075 ops/s
# Warmup Iteration  17: 1090404.169 ops/s
# Warmup Iteration  18: 1129568.645 ops/s
# Warmup Iteration  19: 1034174.680 ops/s
# Warmup Iteration  20: 1095918.116 ops/s
# Warmup Iteration  21: 1052524.865 ops/s
# Warmup Iteration  22: 1092635.481 ops/s
# Warmup Iteration  23: 1062540.683 ops/s
# Warmup Iteration  24: 1074595.542 ops/s
# Warmup Iteration  25: 1099244.017 ops/s
# Warmup Iteration  26: 1115678.302 ops/s
# Warmup Iteration  27: 1045920.731 ops/s
# Warmup Iteration  28: 1107720.129 ops/s
# Warmup Iteration  29: 1051439.933 ops/s
# Warmup Iteration  30: 1117911.046 ops/s
Iteration   1: 1087367.525 ops/s
Iteration   2: 1079739.311 ops/s
Iteration   3: 1144814.971 ops/s
Iteration   4: 1055187.247 ops/s
Iteration   5: 1102492.908 ops/s
Iteration   6: 1098475.648 ops/s
Iteration   7: 1060555.726 ops/s
Iteration   8: 1079309.766 ops/s
Iteration   9: 1053708.681 ops/s
Iteration  10: 1120252.607 ops/s
Iteration  11: 1057916.469 ops/s
Iteration  12: 1096875.825 ops/s
Iteration  13: 1063795.817 ops/s
Iteration  14: 1059349.014 ops/s
Iteration  15: 1095164.766 ops/s
Iteration  16: 1051601.352 ops/s
Iteration  17: 1117781.893 ops/s
Iteration  18: 1105072.601 ops/s
Iteration  19: 1059656.868 ops/s
Iteration  20: 1112794.402 ops/s
Iteration  21: 1081365.039 ops/s
Iteration  22: 1040503.665 ops/s
Iteration  23: 1102980.750 ops/s
Iteration  24: 1066800.039 ops/s
Iteration  25: 1099618.588 ops/s
Iteration  26: 1093407.905 ops/s
Iteration  27: 1071793.661 ops/s
Iteration  28: 1122469.863 ops/s
Iteration  29: 1050491.364 ops/s
Iteration  30: 1107913.867 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchTest._Benchmark.benchmark_switchMapErrorEmptySource":
  1084641.938 ±(99.9%) 17613.415 ops/s [Average]
  (min, avg, max) = (1040503.665, 1084641.938, 1144814.971), stdev = 26362.933
  CI (99.9%): [1067028.523, 1102255.353] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
ObservableSwitchTest._Benchmark.benchmark_switchMapErrorEmptySource  thrpt   30  1084641.938 ± 17613.415  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchTest._Benchmark.benchmark_switchMapDelayErrorEmptySource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchTest._Benchmark.benchmark_switchMapDelayErrorEmptySource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.833 ops/s
# Warmup Iteration   2: 77076.594 ops/s
# Warmup Iteration   3: 209120.720 ops/s
# Warmup Iteration   4: 321646.111 ops/s
# Warmup Iteration   5: 461909.671 ops/s
# Warmup Iteration   6: 1014340.894 ops/s
# Warmup Iteration   7: 1053314.734 ops/s
# Warmup Iteration   8: 1043668.320 ops/s
# Warmup Iteration   9: 1039586.953 ops/s
# Warmup Iteration  10: 1065557.452 ops/s
# Warmup Iteration  11: 1040017.931 ops/s
# Warmup Iteration  12: 1002986.981 ops/s
# Warmup Iteration  13: 1061478.966 ops/s
# Warmup Iteration  14: 1033657.272 ops/s
# Warmup Iteration  15: 1029352.812 ops/s
# Warmup Iteration  16: 1030701.074 ops/s
# Warmup Iteration  17: 1054926.737 ops/s
# Warmup Iteration  18: 1065958.398 ops/s
# Warmup Iteration  19: 1015449.300 ops/s
# Warmup Iteration  20: 1044761.225 ops/s
# Warmup Iteration  21: 1044829.804 ops/s
# Warmup Iteration  22: 1065654.647 ops/s
# Warmup Iteration  23: 995947.726 ops/s
# Warmup Iteration  24: 789643.486 ops/s
# Warmup Iteration  25: 1058605.644 ops/s
# Warmup Iteration  26: 1044948.327 ops/s
# Warmup Iteration  27: 1085588.201 ops/s
# Warmup Iteration  28: 1054320.366 ops/s
# Warmup Iteration  29: 1027924.396 ops/s
# Warmup Iteration  30: 1073322.331 ops/s
Iteration   1: 1045312.270 ops/s
Iteration   2: 1046766.958 ops/s
Iteration   3: 1039136.002 ops/s
Iteration   4: 1077280.380 ops/s
Iteration   5: 1023385.799 ops/s
Iteration   6: 1022932.632 ops/s
Iteration   7: 1072647.179 ops/s
Iteration   8: 1044375.059 ops/s
Iteration   9: 1064011.323 ops/s
Iteration  10: 1043230.377 ops/s
Iteration  11: 1056813.239 ops/s
Iteration  12: 1053160.144 ops/s
Iteration  13: 1029296.203 ops/s
Iteration  14: 1089151.961 ops/s
Iteration  15: 1049946.289 ops/s
Iteration  16: 1006262.925 ops/s
Iteration  17: 1092408.919 ops/s
Iteration  18: 1002283.679 ops/s
Iteration  19: 1067178.863 ops/s
Iteration  20: 1084764.357 ops/s
Iteration  21: 998827.702 ops/s
Iteration  22: 1052356.306 ops/s
Iteration  23: 1009918.430 ops/s
Iteration  24: 1075529.654 ops/s
Iteration  25: 1029096.263 ops/s
Iteration  26: 1092536.680 ops/s
Iteration  27: 1018016.192 ops/s
Iteration  28: 1044145.870 ops/s
Iteration  29: 1064076.720 ops/s
Iteration  30: 1014394.411 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchTest._Benchmark.benchmark_switchMapDelayErrorEmptySource":
  1046974.760 ±(99.9%) 18405.888 ops/s [Average]
  (min, avg, max) = (998827.702, 1046974.760, 1092536.680), stdev = 27549.069
  CI (99.9%): [1028568.872, 1065380.648] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score       Error  Units
ObservableSwitchTest._Benchmark.benchmark_switchMapDelayErrorEmptySource  thrpt   30  1046974.760 ± 18405.888  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_bufferSkipError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_bufferSkipError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.829 ops/s
# Warmup Iteration   2: 33367.587 ops/s
# Warmup Iteration   3: 82046.701 ops/s
# Warmup Iteration   4: 111915.951 ops/s
# Warmup Iteration   5: 148983.194 ops/s
# Warmup Iteration   6: 167278.091 ops/s
# Warmup Iteration   7: 307648.999 ops/s
# Warmup Iteration   8: 380537.518 ops/s
# Warmup Iteration   9: 354055.539 ops/s
# Warmup Iteration  10: 370010.989 ops/s
# Warmup Iteration  11: 368861.163 ops/s
# Warmup Iteration  12: 365555.500 ops/s
# Warmup Iteration  13: 371826.196 ops/s
# Warmup Iteration  14: 358641.409 ops/s
# Warmup Iteration  15: 384943.915 ops/s
# Warmup Iteration  16: 357839.665 ops/s
# Warmup Iteration  17: 372290.705 ops/s
# Warmup Iteration  18: 388232.227 ops/s
# Warmup Iteration  19: 351842.857 ops/s
# Warmup Iteration  20: 375480.072 ops/s
# Warmup Iteration  21: 361454.069 ops/s
# Warmup Iteration  22: 380431.313 ops/s
# Warmup Iteration  23: 367699.127 ops/s
# Warmup Iteration  24: 366323.332 ops/s
# Warmup Iteration  25: 375295.277 ops/s
# Warmup Iteration  26: 371869.591 ops/s
# Warmup Iteration  27: 382062.622 ops/s
# Warmup Iteration  28: 364989.085 ops/s
# Warmup Iteration  29: 378378.891 ops/s
# Warmup Iteration  30: 379451.263 ops/s
Iteration   1: 364461.307 ops/s
Iteration   2: 388904.249 ops/s
Iteration   3: 357169.335 ops/s
Iteration   4: 378561.393 ops/s
Iteration   5: 377743.734 ops/s
Iteration   6: 365289.251 ops/s
Iteration   7: 383986.532 ops/s
Iteration   8: 366123.965 ops/s
Iteration   9: 388319.070 ops/s
Iteration  10: 352073.331 ops/s
Iteration  11: 375072.435 ops/s
Iteration  12: 373651.743 ops/s
Iteration  13: 378877.476 ops/s
Iteration  14: 356235.420 ops/s
Iteration  15: 372076.183 ops/s
Iteration  16: 376839.592 ops/s
Iteration  17: 365789.016 ops/s
Iteration  18: 362827.776 ops/s
Iteration  19: 358415.869 ops/s
Iteration  20: 381531.680 ops/s
Iteration  21: 373808.583 ops/s
Iteration  22: 368095.234 ops/s
Iteration  23: 368752.974 ops/s
Iteration  24: 375712.975 ops/s
Iteration  25: 382336.123 ops/s
Iteration  26: 355531.168 ops/s
Iteration  27: 374270.973 ops/s
Iteration  28: 362590.658 ops/s
Iteration  29: 370651.607 ops/s
Iteration  30: 364684.957 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_bufferSkipError":
  370679.487 ±(99.9%) 6532.394 ops/s [Average]
  (min, avg, max) = (352073.331, 370679.487, 388904.249), stdev = 9777.381
  CI (99.9%): [364147.093, 377211.881] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
ObservableBufferTest._Benchmark.benchmark_bufferSkipError  thrpt   30  370679.487 ± 6532.394  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDelayTest._Benchmark.benchmark_errorRunsBeforeOnNext$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDelayTest._Benchmark.benchmark_errorRunsBeforeOnNext

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.831 ops/s
# Warmup Iteration   2: 20494.269 ops/s
# Warmup Iteration   3: 65063.837 ops/s
# Warmup Iteration   4: 95725.594 ops/s
# Warmup Iteration   5: 124314.923 ops/s
# Warmup Iteration   6: 215012.558 ops/s
# Warmup Iteration   7: 239703.688 ops/s
# Warmup Iteration   8: 264960.751 ops/s
# Warmup Iteration   9: 253097.254 ops/s
# Warmup Iteration  10: 260524.207 ops/s
# Warmup Iteration  11: 251051.391 ops/s
# Warmup Iteration  12: 264538.863 ops/s
# Warmup Iteration  13: 263091.420 ops/s
# Warmup Iteration  14: 251815.338 ops/s
# Warmup Iteration  15: 258117.626 ops/s
# Warmup Iteration  16: 262782.657 ops/s
# Warmup Iteration  17: 251533.065 ops/s
# Warmup Iteration  18: 222527.903 ops/s
# Warmup Iteration  19: 245142.973 ops/s
# Warmup Iteration  20: 254454.544 ops/s
# Warmup Iteration  21: 272572.770 ops/s
# Warmup Iteration  22: 254720.508 ops/s
# Warmup Iteration  23: 251775.444 ops/s
# Warmup Iteration  24: 262262.945 ops/s
# Warmup Iteration  25: 251021.796 ops/s
# Warmup Iteration  26: 262428.307 ops/s
# Warmup Iteration  27: 252528.045 ops/s
# Warmup Iteration  28: 257040.236 ops/s
# Warmup Iteration  29: 259792.053 ops/s
# Warmup Iteration  30: 249680.326 ops/s
Iteration   1: 267421.804 ops/s
Iteration   2: 253907.138 ops/s
Iteration   3: 261123.972 ops/s
Iteration   4: 257138.308 ops/s
Iteration   5: 258938.191 ops/s
Iteration   6: 266392.830 ops/s
Iteration   7: 257148.666 ops/s
Iteration   8: 263773.803 ops/s
Iteration   9: 256725.845 ops/s
Iteration  10: 260733.938 ops/s
Iteration  11: 260242.240 ops/s
Iteration  12: 254651.335 ops/s
Iteration  13: 265803.159 ops/s
Iteration  14: 259266.748 ops/s
Iteration  15: 255843.907 ops/s
Iteration  16: 262832.422 ops/s
Iteration  17: 258484.589 ops/s
Iteration  18: 257817.760 ops/s
Iteration  19: 262524.087 ops/s
Iteration  20: 250100.522 ops/s
Iteration  21: 265279.173 ops/s
Iteration  22: 246876.206 ops/s
Iteration  23: 258115.705 ops/s
Iteration  24: 254846.406 ops/s
Iteration  25: 267038.837 ops/s
Iteration  26: 253648.763 ops/s
Iteration  27: 258928.799 ops/s
Iteration  28: 268188.408 ops/s
Iteration  29: 266938.825 ops/s
Iteration  30: 252308.938 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableDelayTest._Benchmark.benchmark_errorRunsBeforeOnNext":
  259434.711 ±(99.9%) 3644.440 ops/s [Average]
  (min, avg, max) = (246876.206, 259434.711, 268188.408), stdev = 5454.827
  CI (99.9%): [255790.271, 263079.151] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
ObservableDelayTest._Benchmark.benchmark_errorRunsBeforeOnNext  thrpt   30  259434.711 ± 3644.440  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeTest._Benchmark.benchmark_fusedReject$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeTest._Benchmark.benchmark_fusedReject

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1478296.294 ops/s
# Warmup Iteration   2: 3621451.217 ops/s
# Warmup Iteration   3: 4707294.684 ops/s
# Warmup Iteration   4: 4916794.812 ops/s
# Warmup Iteration   5: 5276723.841 ops/s
# Warmup Iteration   6: 4931778.832 ops/s
# Warmup Iteration   7: 4993738.394 ops/s
# Warmup Iteration   8: 5148262.311 ops/s
# Warmup Iteration   9: 4765732.646 ops/s
# Warmup Iteration  10: 5211498.044 ops/s
# Warmup Iteration  11: 4868436.347 ops/s
# Warmup Iteration  12: 5040324.176 ops/s
# Warmup Iteration  13: 5085428.358 ops/s
# Warmup Iteration  14: 5006679.651 ops/s
# Warmup Iteration  15: 5068946.202 ops/s
# Warmup Iteration  16: 4831433.104 ops/s
# Warmup Iteration  17: 4971917.699 ops/s
# Warmup Iteration  18: 5139141.543 ops/s
# Warmup Iteration  19: 4853349.647 ops/s
# Warmup Iteration  20: 5062896.852 ops/s
# Warmup Iteration  21: 5061046.567 ops/s
# Warmup Iteration  22: 4937431.620 ops/s
# Warmup Iteration  23: 5127906.532 ops/s
# Warmup Iteration  24: 5122920.910 ops/s
# Warmup Iteration  25: 4919676.666 ops/s
# Warmup Iteration  26: 5068383.431 ops/s
# Warmup Iteration  27: 4707816.598 ops/s
# Warmup Iteration  28: 5095275.315 ops/s
# Warmup Iteration  29: 5140557.254 ops/s
# Warmup Iteration  30: 4970429.906 ops/s
Iteration   1: 5040685.551 ops/s
Iteration   2: 4932166.347 ops/s
Iteration   3: 4967284.999 ops/s
Iteration   4: 5101171.260 ops/s
Iteration   5: 4963217.523 ops/s
Iteration   6: 5064252.630 ops/s
Iteration   7: 5021514.608 ops/s
Iteration   8: 5047742.482 ops/s
Iteration   9: 5123698.963 ops/s
Iteration  10: 4793077.334 ops/s
Iteration  11: 5052155.438 ops/s
Iteration  12: 5000336.278 ops/s
Iteration  13: 4827643.627 ops/s
Iteration  14: 4901727.731 ops/s
Iteration  15: 5134548.810 ops/s
Iteration  16: 4942492.859 ops/s
Iteration  17: 4891654.000 ops/s
Iteration  18: 5256477.355 ops/s
Iteration  19: 4975445.931 ops/s
Iteration  20: 5098183.563 ops/s
Iteration  21: 4960647.860 ops/s
Iteration  22: 4952731.077 ops/s
Iteration  23: 5166162.800 ops/s
Iteration  24: 4933794.264 ops/s
Iteration  25: 5139034.666 ops/s
Iteration  26: 5023181.027 ops/s
Iteration  27: 5017619.408 ops/s
Iteration  28: 5093934.375 ops/s
Iteration  29: 5062598.257 ops/s
Iteration  30: 4918505.455 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeTest._Benchmark.benchmark_fusedReject":
  5013456.216 ±(99.9%) 68525.029 ops/s [Average]
  (min, avg, max) = (4793077.334, 5013456.216, 5256477.355), stdev = 102565.045
  CI (99.9%): [4944931.187, 5081981.245] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score       Error  Units
FlowableRangeTest._Benchmark.benchmark_fusedReject  thrpt   30  5013456.216 ± 68525.029  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeTest._Benchmark.benchmark_requestWrongFusion$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeTest._Benchmark.benchmark_requestWrongFusion

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 684258.004 ops/s
# Warmup Iteration   2: 3016413.911 ops/s
# Warmup Iteration   3: 3457571.867 ops/s
# Warmup Iteration   4: 4044522.053 ops/s
# Warmup Iteration   5: 4029508.442 ops/s
# Warmup Iteration   6: 3909464.993 ops/s
# Warmup Iteration   7: 4088904.279 ops/s
# Warmup Iteration   8: 3932878.831 ops/s
# Warmup Iteration   9: 3887726.175 ops/s
# Warmup Iteration  10: 4193531.126 ops/s
# Warmup Iteration  11: 3877518.452 ops/s
# Warmup Iteration  12: 4131042.534 ops/s
# Warmup Iteration  13: 3302130.414 ops/s
# Warmup Iteration  14: 3898373.952 ops/s
# Warmup Iteration  15: 4193560.165 ops/s
# Warmup Iteration  16: 4042604.296 ops/s
# Warmup Iteration  17: 3929110.328 ops/s
# Warmup Iteration  18: 4057539.381 ops/s
# Warmup Iteration  19: 3947697.149 ops/s
# Warmup Iteration  20: 4040501.389 ops/s
# Warmup Iteration  21: 4200797.862 ops/s
# Warmup Iteration  22: 3884289.628 ops/s
# Warmup Iteration  23: 4183464.198 ops/s
# Warmup Iteration  24: 3905078.805 ops/s
# Warmup Iteration  25: 3978971.420 ops/s
# Warmup Iteration  26: 4118939.885 ops/s
# Warmup Iteration  27: 3942589.419 ops/s
# Warmup Iteration  28: 4091148.252 ops/s
# Warmup Iteration  29: 3962012.783 ops/s
# Warmup Iteration  30: 4132442.856 ops/s
Iteration   1: 3915184.729 ops/s
Iteration   2: 4130251.370 ops/s
Iteration   3: 4160793.369 ops/s
Iteration   4: 3952915.250 ops/s
Iteration   5: 4049301.748 ops/s
Iteration   6: 3991863.814 ops/s
Iteration   7: 4019753.446 ops/s
Iteration   8: 4087500.044 ops/s
Iteration   9: 3872258.606 ops/s
Iteration  10: 4058946.729 ops/s
Iteration  11: 3939361.241 ops/s
Iteration  12: 4009263.803 ops/s
Iteration  13: 3870989.529 ops/s
Iteration  14: 4029142.085 ops/s
Iteration  15: 4063365.108 ops/s
Iteration  16: 3899396.122 ops/s
Iteration  17: 4192830.089 ops/s
Iteration  18: 3936688.778 ops/s
Iteration  19: 4080573.842 ops/s
Iteration  20: 3907108.742 ops/s
Iteration  21: 4041284.685 ops/s
Iteration  22: 3969463.308 ops/s
Iteration  23: 4112175.624 ops/s
Iteration  24: 4034811.670 ops/s
Iteration  25: 3978074.478 ops/s
Iteration  26: 4059158.348 ops/s
Iteration  27: 4220955.193 ops/s
Iteration  28: 3863315.873 ops/s
Iteration  29: 4040362.072 ops/s
Iteration  30: 3953550.712 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeTest._Benchmark.benchmark_requestWrongFusion":
  4014688.014 ±(99.9%) 63200.607 ops/s [Average]
  (min, avg, max) = (3863315.873, 4014688.014, 4220955.193), stdev = 94595.701
  CI (99.9%): [3951487.406, 4077888.621] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
FlowableRangeTest._Benchmark.benchmark_requestWrongFusion  thrpt   30  4014688.014 ± 63200.607  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCacheTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCacheTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 641491.309 ops/s
# Warmup Iteration   2: 1786566.242 ops/s
# Warmup Iteration   3: 2167431.503 ops/s
# Warmup Iteration   4: 2341747.966 ops/s
# Warmup Iteration   5: 2523287.725 ops/s
# Warmup Iteration   6: 2330574.909 ops/s
# Warmup Iteration   7: 2347707.143 ops/s
# Warmup Iteration   8: 2476768.533 ops/s
# Warmup Iteration   9: 2362516.047 ops/s
# Warmup Iteration  10: 2387977.413 ops/s
# Warmup Iteration  11: 2485313.328 ops/s
# Warmup Iteration  12: 2255700.785 ops/s
# Warmup Iteration  13: 2409673.275 ops/s
# Warmup Iteration  14: 2273907.096 ops/s
# Warmup Iteration  15: 2391066.436 ops/s
# Warmup Iteration  16: 2325573.618 ops/s
# Warmup Iteration  17: 2349491.305 ops/s
# Warmup Iteration  18: 2422313.517 ops/s
# Warmup Iteration  19: 2270331.974 ops/s
# Warmup Iteration  20: 2505130.754 ops/s
# Warmup Iteration  21: 2454967.885 ops/s
# Warmup Iteration  22: 2360430.515 ops/s
# Warmup Iteration  23: 2435487.262 ops/s
# Warmup Iteration  24: 2339692.428 ops/s
# Warmup Iteration  25: 2358232.855 ops/s
# Warmup Iteration  26: 2521166.020 ops/s
# Warmup Iteration  27: 2400478.738 ops/s
# Warmup Iteration  28: 2318245.775 ops/s
# Warmup Iteration  29: 2473547.062 ops/s
# Warmup Iteration  30: 2359304.433 ops/s
Iteration   1: 2391609.921 ops/s
Iteration   2: 2487095.991 ops/s
Iteration   3: 2337311.608 ops/s
Iteration   4: 2443341.004 ops/s
Iteration   5: 2516314.318 ops/s
Iteration   6: 2363380.864 ops/s
Iteration   7: 2482563.230 ops/s
Iteration   8: 2382803.671 ops/s
Iteration   9: 2417018.517 ops/s
Iteration  10: 2382126.493 ops/s
Iteration  11: 2435994.830 ops/s
Iteration  12: 2369832.390 ops/s
Iteration  13: 2381811.825 ops/s
Iteration  14: 2370058.389 ops/s
Iteration  15: 2387212.738 ops/s
Iteration  16: 2415344.545 ops/s
Iteration  17: 2299489.855 ops/s
Iteration  18: 2457813.040 ops/s
Iteration  19: 2452467.471 ops/s
Iteration  20: 2359236.584 ops/s
Iteration  21: 2464576.292 ops/s
Iteration  22: 2424060.984 ops/s
Iteration  23: 2358728.078 ops/s
Iteration  24: 2475697.525 ops/s
Iteration  25: 2372323.219 ops/s
Iteration  26: 2409543.621 ops/s
Iteration  27: 2365970.884 ops/s
Iteration  28: 2435816.997 ops/s
Iteration  29: 2389085.452 ops/s
Iteration  30: 2385517.631 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableCacheTest._Benchmark.benchmark_dispose":
  2407138.266 ±(99.9%) 33296.642 ops/s [Average]
  (min, avg, max) = (2299489.855, 2407138.266, 2516314.318), stdev = 49836.850
  CI (99.9%): [2373841.624, 2440434.907] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt        Score       Error  Units
FlowableCacheTest._Benchmark.benchmark_dispose  thrpt   30  2407138.266 ± 33296.642  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCacheTest._Benchmark.benchmark_disposeOnArrival$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCacheTest._Benchmark.benchmark_disposeOnArrival

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 505317.563 ops/s
# Warmup Iteration   2: 1826958.599 ops/s
# Warmup Iteration   3: 2443168.274 ops/s
# Warmup Iteration   4: 2282514.655 ops/s
# Warmup Iteration   5: 2089800.766 ops/s
# Warmup Iteration   6: 2336059.980 ops/s
# Warmup Iteration   7: 2356641.655 ops/s
# Warmup Iteration   8: 1805316.668 ops/s
# Warmup Iteration   9: 2388822.975 ops/s
# Warmup Iteration  10: 2289537.385 ops/s
# Warmup Iteration  11: 2377244.725 ops/s
# Warmup Iteration  12: 2380106.342 ops/s
# Warmup Iteration  13: 2387794.761 ops/s
# Warmup Iteration  14: 2380840.126 ops/s
# Warmup Iteration  15: 2395460.065 ops/s
# Warmup Iteration  16: 2416418.770 ops/s
# Warmup Iteration  17: 2362455.085 ops/s
# Warmup Iteration  18: 2471945.782 ops/s
# Warmup Iteration  19: 2397320.964 ops/s
# Warmup Iteration  20: 2493903.613 ops/s
# Warmup Iteration  21: 2302455.813 ops/s
# Warmup Iteration  22: 2443112.768 ops/s
# Warmup Iteration  23: 2463085.078 ops/s
# Warmup Iteration  24: 2413392.937 ops/s
# Warmup Iteration  25: 2323279.707 ops/s
# Warmup Iteration  26: 2418563.442 ops/s
# Warmup Iteration  27: 2435603.499 ops/s
# Warmup Iteration  28: 2249447.740 ops/s
# Warmup Iteration  29: 2440435.443 ops/s
# Warmup Iteration  30: 2310190.693 ops/s
Iteration   1: 2388376.045 ops/s
Iteration   2: 2500953.244 ops/s
Iteration   3: 2442847.732 ops/s
Iteration   4: 2416696.614 ops/s
Iteration   5: 2426236.661 ops/s
Iteration   6: 2418971.835 ops/s
Iteration   7: 2515044.449 ops/s
Iteration   8: 2385560.196 ops/s
Iteration   9: 2405752.675 ops/s
Iteration  10: 2396236.096 ops/s
Iteration  11: 2372454.665 ops/s
Iteration  12: 2343931.039 ops/s
Iteration  13: 2356558.024 ops/s
Iteration  14: 2490121.262 ops/s
Iteration  15: 2340522.647 ops/s
Iteration  16: 2382077.422 ops/s
Iteration  17: 2338653.676 ops/s
Iteration  18: 2393677.929 ops/s
Iteration  19: 2426300.940 ops/s
Iteration  20: 2325185.683 ops/s
Iteration  21: 2435440.785 ops/s
Iteration  22: 2390607.030 ops/s
Iteration  23: 2413286.088 ops/s
Iteration  24: 2352636.591 ops/s
Iteration  25: 2379811.843 ops/s
Iteration  26: 2425254.678 ops/s
Iteration  27: 2365511.632 ops/s
Iteration  28: 2490347.155 ops/s
Iteration  29: 2384000.075 ops/s
Iteration  30: 2414693.572 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableCacheTest._Benchmark.benchmark_disposeOnArrival":
  2403924.943 ±(99.9%) 32592.745 ops/s [Average]
  (min, avg, max) = (2325185.683, 2403924.943, 2515044.449), stdev = 48783.290
  CI (99.9%): [2371332.198, 2436517.688] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
FlowableCacheTest._Benchmark.benchmark_disposeOnArrival  thrpt   30  2403924.943 ± 32592.745  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureLatestTest._Benchmark.benchmark_simple$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureLatestTest._Benchmark.benchmark_simple

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 472846.575 ops/s
# Warmup Iteration   2: 1497372.447 ops/s
# Warmup Iteration   3: 1724618.958 ops/s
# Warmup Iteration   4: 1793148.656 ops/s
# Warmup Iteration   5: 1972121.129 ops/s
# Warmup Iteration   6: 1920211.512 ops/s
# Warmup Iteration   7: 1798699.978 ops/s
# Warmup Iteration   8: 1924610.906 ops/s
# Warmup Iteration   9: 1810115.560 ops/s
# Warmup Iteration  10: 1835825.527 ops/s
# Warmup Iteration  11: 1828151.395 ops/s
# Warmup Iteration  12: 1784133.537 ops/s
# Warmup Iteration  13: 1922416.371 ops/s
# Warmup Iteration  14: 1846904.973 ops/s
# Warmup Iteration  15: 1925342.406 ops/s
# Warmup Iteration  16: 1889644.157 ops/s
# Warmup Iteration  17: 1756825.107 ops/s
# Warmup Iteration  18: 1961178.485 ops/s
# Warmup Iteration  19: 1893253.800 ops/s
# Warmup Iteration  20: 1900305.361 ops/s
# Warmup Iteration  21: 1791817.624 ops/s
# Warmup Iteration  22: 1924834.206 ops/s
# Warmup Iteration  23: 1803686.519 ops/s
# Warmup Iteration  24: 1874376.840 ops/s
# Warmup Iteration  25: 1840811.195 ops/s
# Warmup Iteration  26: 1786482.502 ops/s
# Warmup Iteration  27: 1887842.578 ops/s
# Warmup Iteration  28: 1857281.469 ops/s
# Warmup Iteration  29: 1853644.512 ops/s
# Warmup Iteration  30: 1783961.764 ops/s
Iteration   1: 1873311.241 ops/s
Iteration   2: 1781340.265 ops/s
Iteration   3: 1815116.826 ops/s
Iteration   4: 1795556.654 ops/s
Iteration   5: 1850328.655 ops/s
Iteration   6: 1870188.061 ops/s
Iteration   7: 1840259.853 ops/s
Iteration   8: 1937347.767 ops/s
Iteration   9: 1845717.908 ops/s
Iteration  10: 1847439.653 ops/s
Iteration  11: 1950270.330 ops/s
Iteration  12: 1829657.709 ops/s
Iteration  13: 1865237.254 ops/s
Iteration  14: 1858498.410 ops/s
Iteration  15: 1830016.854 ops/s
Iteration  16: 1945561.188 ops/s
Iteration  17: 1805370.454 ops/s
Iteration  18: 1845369.409 ops/s
Iteration  19: 1859001.314 ops/s
Iteration  20: 1806232.960 ops/s
Iteration  21: 1891086.245 ops/s
Iteration  22: 1829938.553 ops/s
Iteration  23: 1825573.756 ops/s
Iteration  24: 1866120.188 ops/s
Iteration  25: 1909424.705 ops/s
Iteration  26: 1828161.040 ops/s
Iteration  27: 1886439.290 ops/s
Iteration  28: 1831591.753 ops/s
Iteration  29: 1850799.858 ops/s
Iteration  30: 1973757.535 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureLatestTest._Benchmark.benchmark_simple":
  1858157.190 ±(99.9%) 31349.872 ops/s [Average]
  (min, avg, max) = (1781340.265, 1858157.190, 1973757.535), stdev = 46923.016
  CI (99.9%): [1826807.317, 1889507.062] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
FlowableOnBackpressureLatestTest._Benchmark.benchmark_simple  thrpt   30  1858157.190 ± 31349.872  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeTest._Benchmark.benchmark_noBackpressure$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeTest._Benchmark.benchmark_noBackpressure

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 14432.332 ops/s
# Warmup Iteration   2: 103861.042 ops/s
# Warmup Iteration   3: 95787.912 ops/s
# Warmup Iteration   4: 133673.046 ops/s
# Warmup Iteration   5: 144400.199 ops/s
# Warmup Iteration   6: 131616.814 ops/s
# Warmup Iteration   7: 138514.574 ops/s
# Warmup Iteration   8: 138526.633 ops/s
# Warmup Iteration   9: 144146.297 ops/s
# Warmup Iteration  10: 131872.433 ops/s
# Warmup Iteration  11: 140599.221 ops/s
# Warmup Iteration  12: 136079.338 ops/s
# Warmup Iteration  13: 139990.397 ops/s
# Warmup Iteration  14: 133836.443 ops/s
# Warmup Iteration  15: 141031.153 ops/s
# Warmup Iteration  16: 140681.385 ops/s
# Warmup Iteration  17: 137225.624 ops/s
# Warmup Iteration  18: 141472.099 ops/s
# Warmup Iteration  19: 137961.640 ops/s
# Warmup Iteration  20: 137188.725 ops/s
# Warmup Iteration  21: 144488.902 ops/s
# Warmup Iteration  22: 142767.881 ops/s
# Warmup Iteration  23: 137361.031 ops/s
# Warmup Iteration  24: 137902.715 ops/s
# Warmup Iteration  25: 143622.131 ops/s
# Warmup Iteration  26: 138045.651 ops/s
# Warmup Iteration  27: 139848.711 ops/s
# Warmup Iteration  28: 137551.435 ops/s
# Warmup Iteration  29: 139938.060 ops/s
# Warmup Iteration  30: 141522.494 ops/s
Iteration   1: 137854.768 ops/s
Iteration   2: 144275.918 ops/s
Iteration   3: 138878.600 ops/s
Iteration   4: 134506.263 ops/s
Iteration   5: 141395.539 ops/s
Iteration   6: 139015.379 ops/s
Iteration   7: 139397.232 ops/s
Iteration   8: 136274.785 ops/s
Iteration   9: 137885.058 ops/s
Iteration  10: 136756.826 ops/s
Iteration  11: 139097.500 ops/s
Iteration  12: 138296.383 ops/s
Iteration  13: 136808.880 ops/s
Iteration  14: 138718.904 ops/s
Iteration  15: 142025.302 ops/s
Iteration  16: 141632.745 ops/s
Iteration  17: 134594.838 ops/s
Iteration  18: 141670.399 ops/s
Iteration  19: 137305.271 ops/s
Iteration  20: 141802.614 ops/s
Iteration  21: 139785.439 ops/s
Iteration  22: 137546.679 ops/s
Iteration  23: 145810.904 ops/s
Iteration  24: 136155.302 ops/s
Iteration  25: 142252.521 ops/s
Iteration  26: 137188.453 ops/s
Iteration  27: 137528.178 ops/s
Iteration  28: 140949.414 ops/s
Iteration  29: 133349.367 ops/s
Iteration  30: 140862.751 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeTest._Benchmark.benchmark_noBackpressure":
  138987.407 ±(99.9%) 1922.482 ops/s [Average]
  (min, avg, max) = (133349.367, 138987.407, 145810.904), stdev = 2877.480
  CI (99.9%): [137064.926, 140909.889] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score      Error  Units
FlowableRangeTest._Benchmark.benchmark_noBackpressure  thrpt   30  138987.407 ± 1922.482  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinallyTest._Benchmark.benchmark_syncFusedBoundary$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinallyTest._Benchmark.benchmark_syncFusedBoundary

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 566604.001 ops/s
# Warmup Iteration   2: 1899617.896 ops/s
# Warmup Iteration   3: 2582490.535 ops/s
# Warmup Iteration   4: 2936364.480 ops/s
# Warmup Iteration   5: 3058760.053 ops/s
# Warmup Iteration   6: 3000032.627 ops/s
# Warmup Iteration   7: 3081398.784 ops/s
# Warmup Iteration   8: 3015841.415 ops/s
# Warmup Iteration   9: 2960023.364 ops/s
# Warmup Iteration  10: 3021488.376 ops/s
# Warmup Iteration  11: 2896555.956 ops/s
# Warmup Iteration  12: 3035430.143 ops/s
# Warmup Iteration  13: 2962966.668 ops/s
# Warmup Iteration  14: 3043513.319 ops/s
# Warmup Iteration  15: 2973311.981 ops/s
# Warmup Iteration  16: 3008488.661 ops/s
# Warmup Iteration  17: 3092871.875 ops/s
# Warmup Iteration  18: 2942718.472 ops/s
# Warmup Iteration  19: 3142871.569 ops/s
# Warmup Iteration  20: 2998236.383 ops/s
# Warmup Iteration  21: 3072582.964 ops/s
# Warmup Iteration  22: 3004428.956 ops/s
# Warmup Iteration  23: 3014113.602 ops/s
# Warmup Iteration  24: 3079152.498 ops/s
# Warmup Iteration  25: 3061264.516 ops/s
# Warmup Iteration  26: 2895083.643 ops/s
# Warmup Iteration  27: 3106922.720 ops/s
# Warmup Iteration  28: 3131426.844 ops/s
# Warmup Iteration  29: 2946267.154 ops/s
# Warmup Iteration  30: 3123714.008 ops/s
Iteration   1: 3014558.333 ops/s
Iteration   2: 3024106.068 ops/s
Iteration   3: 2996618.258 ops/s
Iteration   4: 3073710.183 ops/s
Iteration   5: 2936269.524 ops/s
Iteration   6: 2999887.230 ops/s
Iteration   7: 3090011.015 ops/s
Iteration   8: 2979311.415 ops/s
Iteration   9: 3136201.235 ops/s
Iteration  10: 2936886.723 ops/s
Iteration  11: 3148339.948 ops/s
Iteration  12: 2983663.834 ops/s
Iteration  13: 2997635.710 ops/s
Iteration  14: 3097466.050 ops/s
Iteration  15: 2964602.216 ops/s
Iteration  16: 2936795.673 ops/s
Iteration  17: 3085114.029 ops/s
Iteration  18: 3034500.620 ops/s
Iteration  19: 3002346.079 ops/s
Iteration  20: 3066922.520 ops/s
Iteration  21: 2993878.432 ops/s
Iteration  22: 3093664.205 ops/s
Iteration  23: 3045383.455 ops/s
Iteration  24: 2965268.070 ops/s
Iteration  25: 3155139.794 ops/s
Iteration  26: 2909712.535 ops/s
Iteration  27: 3031349.467 ops/s
Iteration  28: 3144943.489 ops/s
Iteration  29: 2511155.741 ops/s
Iteration  30: 2995168.520 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinallyTest._Benchmark.benchmark_syncFusedBoundary":
  3011687.012 ±(99.9%) 77725.715 ops/s [Average]
  (min, avg, max) = (2511155.741, 3011687.012, 3155139.794), stdev = 116336.201
  CI (99.9%): [2933961.297, 3089412.728] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
FlowableDoFinallyTest._Benchmark.benchmark_syncFusedBoundary  thrpt   30  3011687.012 ± 77725.715  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableCollectWithCollectorTest._Benchmark.benchmark_basicToFlowable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableCollectWithCollectorTest._Benchmark.benchmark_basicToFlowable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 387324.308 ops/s
# Warmup Iteration   2: 1929183.888 ops/s
# Warmup Iteration   3: 2467080.612 ops/s
# Warmup Iteration   4: 2821699.938 ops/s
# Warmup Iteration   5: 2912040.919 ops/s
# Warmup Iteration   6: 2819500.696 ops/s
# Warmup Iteration   7: 2993483.184 ops/s
# Warmup Iteration   8: 2840710.084 ops/s
# Warmup Iteration   9: 2902642.765 ops/s
# Warmup Iteration  10: 2831136.983 ops/s
# Warmup Iteration  11: 2885719.443 ops/s
# Warmup Iteration  12: 2951266.864 ops/s
# Warmup Iteration  13: 2786729.867 ops/s
# Warmup Iteration  14: 2995980.880 ops/s
# Warmup Iteration  15: 2946089.306 ops/s
# Warmup Iteration  16: 2774867.804 ops/s
# Warmup Iteration  17: 2929857.598 ops/s
# Warmup Iteration  18: 2969668.425 ops/s
# Warmup Iteration  19: 2832253.772 ops/s
# Warmup Iteration  20: 2948089.304 ops/s
# Warmup Iteration  21: 2827244.997 ops/s
# Warmup Iteration  22: 2923575.656 ops/s
# Warmup Iteration  23: 2942004.139 ops/s
# Warmup Iteration  24: 2820308.692 ops/s
# Warmup Iteration  25: 2820532.344 ops/s
# Warmup Iteration  26: 2845622.433 ops/s
# Warmup Iteration  27: 2842243.471 ops/s
# Warmup Iteration  28: 2899741.880 ops/s
# Warmup Iteration  29: 3003902.219 ops/s
# Warmup Iteration  30: 2794966.037 ops/s
Iteration   1: 2985673.761 ops/s
Iteration   2: 2829941.649 ops/s
Iteration   3: 2949094.067 ops/s
Iteration   4: 3009865.362 ops/s
Iteration   5: 2809856.001 ops/s
Iteration   6: 2888871.057 ops/s
Iteration   7: 2966167.044 ops/s
Iteration   8: 2790244.418 ops/s
Iteration   9: 3009110.482 ops/s
Iteration  10: 2755428.501 ops/s
Iteration  11: 2951141.878 ops/s
Iteration  12: 2844275.635 ops/s
Iteration  13: 2925112.699 ops/s
Iteration  14: 2961362.881 ops/s
Iteration  15: 2853870.150 ops/s
Iteration  16: 2808418.063 ops/s
Iteration  17: 3026833.768 ops/s
Iteration  18: 2809294.056 ops/s
Iteration  19: 2975194.285 ops/s
Iteration  20: 2744066.850 ops/s
Iteration  21: 2899157.552 ops/s
Iteration  22: 2993267.596 ops/s
Iteration  23: 2895574.188 ops/s
Iteration  24: 2880811.320 ops/s
Iteration  25: 2876511.612 ops/s
Iteration  26: 2946027.504 ops/s
Iteration  27: 2792853.224 ops/s
Iteration  28: 2979123.459 ops/s
Iteration  29: 2959123.358 ops/s
Iteration  30: 2859445.636 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableCollectWithCollectorTest._Benchmark.benchmark_basicToFlowable":
  2899190.602 ±(99.9%) 54609.059 ops/s [Average]
  (min, avg, max) = (2744066.850, 2899190.602, 3026833.768), stdev = 81736.275
  CI (99.9%): [2844581.543, 2953799.661] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
FlowableCollectWithCollectorTest._Benchmark.benchmark_basicToFlowable  thrpt   30  2899190.602 ± 54609.059  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.subscribers.DeferredScalarSubscriberTest._Benchmark.benchmark_rangeSource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.subscribers.DeferredScalarSubscriberTest._Benchmark.benchmark_rangeSource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 572904.604 ops/s
# Warmup Iteration   2: 2107197.920 ops/s
# Warmup Iteration   3: 2740853.900 ops/s
# Warmup Iteration   4: 3552436.216 ops/s
# Warmup Iteration   5: 3558875.265 ops/s
# Warmup Iteration   6: 3559859.295 ops/s
# Warmup Iteration   7: 3498201.226 ops/s
# Warmup Iteration   8: 3534119.021 ops/s
# Warmup Iteration   9: 3631946.117 ops/s
# Warmup Iteration  10: 3436086.354 ops/s
# Warmup Iteration  11: 3499231.553 ops/s
# Warmup Iteration  12: 3544951.261 ops/s
# Warmup Iteration  13: 3529363.551 ops/s
# Warmup Iteration  14: 3536015.403 ops/s
# Warmup Iteration  15: 3445275.352 ops/s
# Warmup Iteration  16: 3664246.888 ops/s
# Warmup Iteration  17: 3628029.024 ops/s
# Warmup Iteration  18: 3411284.734 ops/s
# Warmup Iteration  19: 3617582.248 ops/s
# Warmup Iteration  20: 3550864.362 ops/s
# Warmup Iteration  21: 3490803.050 ops/s
# Warmup Iteration  22: 3693227.364 ops/s
# Warmup Iteration  23: 3492106.591 ops/s
# Warmup Iteration  24: 3448923.581 ops/s
# Warmup Iteration  25: 3664791.346 ops/s
# Warmup Iteration  26: 3460430.091 ops/s
# Warmup Iteration  27: 3601810.799 ops/s
# Warmup Iteration  28: 3415308.051 ops/s
# Warmup Iteration  29: 3560588.174 ops/s
# Warmup Iteration  30: 3554370.002 ops/s
Iteration   1: 3527753.117 ops/s
Iteration   2: 3609487.324 ops/s
Iteration   3: 3640003.620 ops/s
Iteration   4: 3464282.098 ops/s
Iteration   5: 3587092.947 ops/s
Iteration   6: 3511339.593 ops/s
Iteration   7: 3647030.818 ops/s
Iteration   8: 3524439.443 ops/s
Iteration   9: 3537759.969 ops/s
Iteration  10: 3511673.801 ops/s
Iteration  11: 3560169.685 ops/s
Iteration  12: 3578585.885 ops/s
Iteration  13: 3530086.386 ops/s
Iteration  14: 3589148.958 ops/s
Iteration  15: 3496616.948 ops/s
Iteration  16: 3520223.266 ops/s
Iteration  17: 3594329.156 ops/s
Iteration  18: 3515471.036 ops/s
Iteration  19: 3612780.981 ops/s
Iteration  20: 3495707.007 ops/s
Iteration  21: 3580800.395 ops/s
Iteration  22: 3412878.195 ops/s
Iteration  23: 3496449.343 ops/s
Iteration  24: 2650317.447 ops/s
Iteration  25: 3417050.198 ops/s
Iteration  26: 3557555.355 ops/s
Iteration  27: 3494658.342 ops/s
Iteration  28: 3722875.797 ops/s
Iteration  29: 3390520.789 ops/s
Iteration  30: 3593532.587 ops/s


Result "io.reactivex.rxjava3.internal.subscribers.DeferredScalarSubscriberTest._Benchmark.benchmark_rangeSource":
  3512354.016 ±(99.9%) 118883.777 ops/s [Average]
  (min, avg, max) = (2650317.447, 3512354.016, 3722875.797), stdev = 177939.655
  CI (99.9%): [3393470.239, 3631237.794] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score        Error  Units
DeferredScalarSubscriberTest._Benchmark.benchmark_rangeSource  thrpt   30  3512354.016 ± 118883.777  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeTest._Benchmark.benchmark_fastPathCancelExact$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeTest._Benchmark.benchmark_fastPathCancelExact

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 722748.959 ops/s
# Warmup Iteration   2: 2757025.254 ops/s
# Warmup Iteration   3: 3182404.968 ops/s
# Warmup Iteration   4: 3681410.896 ops/s
# Warmup Iteration   5: 3415852.311 ops/s
# Warmup Iteration   6: 3675271.695 ops/s
# Warmup Iteration   7: 3532768.242 ops/s
# Warmup Iteration   8: 3749723.240 ops/s
# Warmup Iteration   9: 3537207.940 ops/s
# Warmup Iteration  10: 3597133.715 ops/s
# Warmup Iteration  11: 3734003.986 ops/s
# Warmup Iteration  12: 3459690.533 ops/s
# Warmup Iteration  13: 3664687.925 ops/s
# Warmup Iteration  14: 3451271.003 ops/s
# Warmup Iteration  15: 3596250.111 ops/s
# Warmup Iteration  16: 3558598.141 ops/s
# Warmup Iteration  17: 3620031.170 ops/s
# Warmup Iteration  18: 3642376.762 ops/s
# Warmup Iteration  19: 3564412.012 ops/s
# Warmup Iteration  20: 3680879.702 ops/s
# Warmup Iteration  21: 3601238.302 ops/s
# Warmup Iteration  22: 3601926.318 ops/s
# Warmup Iteration  23: 3579591.715 ops/s
# Warmup Iteration  24: 3574688.874 ops/s
# Warmup Iteration  25: 3709556.494 ops/s
# Warmup Iteration  26: 3600867.313 ops/s
# Warmup Iteration  27: 3735168.300 ops/s
# Warmup Iteration  28: 3527973.476 ops/s
# Warmup Iteration  29: 3626266.916 ops/s
# Warmup Iteration  30: 3657683.151 ops/s
Iteration   1: 3593606.715 ops/s
Iteration   2: 3700343.913 ops/s
Iteration   3: 3793088.221 ops/s
Iteration   4: 3518876.226 ops/s
Iteration   5: 3655221.445 ops/s
Iteration   6: 3565050.598 ops/s
Iteration   7: 3670152.282 ops/s
Iteration   8: 3588758.787 ops/s
Iteration   9: 3542103.628 ops/s
Iteration  10: 3594468.286 ops/s
Iteration  11: 3629007.153 ops/s
Iteration  12: 3602468.614 ops/s
Iteration  13: 3734611.074 ops/s
Iteration  14: 3578933.165 ops/s
Iteration  15: 3645665.526 ops/s
Iteration  16: 3564697.981 ops/s
Iteration  17: 3618257.303 ops/s
Iteration  18: 3645517.924 ops/s
Iteration  19: 3562887.319 ops/s
Iteration  20: 3843995.183 ops/s
Iteration  21: 3794645.629 ops/s
Iteration  22: 3702792.562 ops/s
Iteration  23: 3508975.956 ops/s
Iteration  24: 3747525.636 ops/s
Iteration  25: 3795943.237 ops/s
Iteration  26: 3497468.679 ops/s
Iteration  27: 3713484.077 ops/s
Iteration  28: 3558463.725 ops/s
Iteration  29: 3629938.930 ops/s
Iteration  30: 3630048.715 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeTest._Benchmark.benchmark_fastPathCancelExact":
  3640899.950 ±(99.9%) 61579.739 ops/s [Average]
  (min, avg, max) = (3497468.679, 3640899.950, 3843995.183), stdev = 92169.661
  CI (99.9%): [3579320.211, 3702479.688] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
FlowableRangeTest._Benchmark.benchmark_fastPathCancelExact  thrpt   30  3640899.950 ± 61579.739  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeTest._Benchmark.benchmark_fastPathCancel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeTest._Benchmark.benchmark_fastPathCancel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1601960.316 ops/s
# Warmup Iteration   2: 3735336.431 ops/s
# Warmup Iteration   3: 4236425.942 ops/s
# Warmup Iteration   4: 4651755.021 ops/s
# Warmup Iteration   5: 4596039.715 ops/s
# Warmup Iteration   6: 4917076.014 ops/s
# Warmup Iteration   7: 4683030.985 ops/s
# Warmup Iteration   8: 4641682.981 ops/s
# Warmup Iteration   9: 4755638.654 ops/s
# Warmup Iteration  10: 4594878.571 ops/s
# Warmup Iteration  11: 4739017.977 ops/s
# Warmup Iteration  12: 4906451.080 ops/s
# Warmup Iteration  13: 4593376.903 ops/s
# Warmup Iteration  14: 4809482.196 ops/s
# Warmup Iteration  15: 4726888.286 ops/s
# Warmup Iteration  16: 4717680.130 ops/s
# Warmup Iteration  17: 4689850.704 ops/s
# Warmup Iteration  18: 4671435.839 ops/s
# Warmup Iteration  19: 4908497.624 ops/s
# Warmup Iteration  20: 4768096.902 ops/s
# Warmup Iteration  21: 4863288.938 ops/s
# Warmup Iteration  22: 4609925.068 ops/s
# Warmup Iteration  23: 4878355.433 ops/s
# Warmup Iteration  24: 4846507.139 ops/s
# Warmup Iteration  25: 4723074.056 ops/s
# Warmup Iteration  26: 4640444.680 ops/s
# Warmup Iteration  27: 4811618.467 ops/s
# Warmup Iteration  28: 4669165.664 ops/s
# Warmup Iteration  29: 4673238.885 ops/s
# Warmup Iteration  30: 4664066.574 ops/s
Iteration   1: 4790148.384 ops/s
Iteration   2: 4741591.858 ops/s
Iteration   3: 4694885.647 ops/s
Iteration   4: 4860684.424 ops/s
Iteration   5: 4761729.977 ops/s
Iteration   6: 4702155.472 ops/s
Iteration   7: 4893919.800 ops/s
Iteration   8: 4549681.297 ops/s
Iteration   9: 4826016.525 ops/s
Iteration  10: 4735891.882 ops/s
Iteration  11: 4658844.941 ops/s
Iteration  12: 4852534.099 ops/s
Iteration  13: 4792192.495 ops/s
Iteration  14: 4665603.281 ops/s
Iteration  15: 4875382.372 ops/s
Iteration  16: 4655526.418 ops/s
Iteration  17: 4745997.413 ops/s
Iteration  18: 4140234.499 ops/s
Iteration  19: 4656677.609 ops/s
Iteration  20: 4659217.695 ops/s
Iteration  21: 4752948.907 ops/s
Iteration  22: 4687107.422 ops/s
Iteration  23: 4873828.984 ops/s
Iteration  24: 4750761.395 ops/s
Iteration  25: 4713603.084 ops/s
Iteration  26: 4958411.924 ops/s
Iteration  27: 4601679.290 ops/s
Iteration  28: 4865748.718 ops/s
Iteration  29: 4569715.402 ops/s
Iteration  30: 4851276.121 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeTest._Benchmark.benchmark_fastPathCancel":
  4729466.578 ±(99.9%) 100556.873 ops/s [Average]
  (min, avg, max) = (4140234.499, 4729466.578, 4958411.924), stdev = 150508.806
  CI (99.9%): [4628909.705, 4830023.451] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score        Error  Units
FlowableRangeTest._Benchmark.benchmark_fastPathCancel  thrpt   30  4729466.578 ± 100556.873  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithMaybeTest._Benchmark.benchmark_normalNonEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithMaybeTest._Benchmark.benchmark_normalNonEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 377497.430 ops/s
# Warmup Iteration   2: 1844201.177 ops/s
# Warmup Iteration   3: 3054789.893 ops/s
# Warmup Iteration   4: 3102400.405 ops/s
# Warmup Iteration   5: 2909095.319 ops/s
# Warmup Iteration   6: 2884148.595 ops/s
# Warmup Iteration   7: 3171800.097 ops/s
# Warmup Iteration   8: 3209084.529 ops/s
# Warmup Iteration   9: 3067371.490 ops/s
# Warmup Iteration  10: 3259890.737 ops/s
# Warmup Iteration  11: 3209374.741 ops/s
# Warmup Iteration  12: 3034869.156 ops/s
# Warmup Iteration  13: 3199354.038 ops/s
# Warmup Iteration  14: 3152474.818 ops/s
# Warmup Iteration  15: 3250810.866 ops/s
# Warmup Iteration  16: 3111484.513 ops/s
# Warmup Iteration  17: 3132446.517 ops/s
# Warmup Iteration  18: 3306455.813 ops/s
# Warmup Iteration  19: 3137099.053 ops/s
# Warmup Iteration  20: 3281539.077 ops/s
# Warmup Iteration  21: 3042362.415 ops/s
# Warmup Iteration  22: 3302689.233 ops/s
# Warmup Iteration  23: 3056841.579 ops/s
# Warmup Iteration  24: 3055612.212 ops/s
# Warmup Iteration  25: 3252451.779 ops/s
# Warmup Iteration  26: 3146063.255 ops/s
# Warmup Iteration  27: 3171494.818 ops/s
# Warmup Iteration  28: 3299761.068 ops/s
# Warmup Iteration  29: 3099067.828 ops/s
# Warmup Iteration  30: 3202397.295 ops/s
Iteration   1: 3136988.781 ops/s
Iteration   2: 3344431.433 ops/s
Iteration   3: 3234479.135 ops/s
Iteration   4: 3052639.775 ops/s
Iteration   5: 3237764.571 ops/s
Iteration   6: 3082547.058 ops/s
Iteration   7: 3144943.738 ops/s
Iteration   8: 3242264.575 ops/s
Iteration   9: 3150131.479 ops/s
Iteration  10: 3351932.144 ops/s
Iteration  11: 3114907.456 ops/s
Iteration  12: 3146825.702 ops/s
Iteration  13: 3264342.135 ops/s
Iteration  14: 3143486.287 ops/s
Iteration  15: 3008388.542 ops/s
Iteration  16: 3261174.555 ops/s
Iteration  17: 3246132.500 ops/s
Iteration  18: 3155172.420 ops/s
Iteration  19: 3259161.345 ops/s
Iteration  20: 3154462.091 ops/s
Iteration  21: 3094717.070 ops/s
Iteration  22: 3195249.264 ops/s
Iteration  23: 3101618.193 ops/s
Iteration  24: 3194593.400 ops/s
Iteration  25: 3274834.943 ops/s
Iteration  26: 3148266.626 ops/s
Iteration  27: 3267857.420 ops/s
Iteration  28: 3085335.503 ops/s
Iteration  29: 3237478.789 ops/s
Iteration  30: 3299901.149 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithMaybeTest._Benchmark.benchmark_normalNonEmpty":
  3187734.269 ±(99.9%) 57477.318 ops/s [Average]
  (min, avg, max) = (3008388.542, 3187734.269, 3351932.144), stdev = 86029.350
  CI (99.9%): [3130256.951, 3245211.587] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
FlowableConcatWithMaybeTest._Benchmark.benchmark_normalNonEmpty  thrpt   30  3187734.269 ± 57477.318  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNextTest._Benchmark.benchmark_asyncFusedRejected$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNextTest._Benchmark.benchmark_asyncFusedRejected

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 287977.725 ops/s
# Warmup Iteration   2: 1363935.764 ops/s
# Warmup Iteration   3: 1606995.862 ops/s
# Warmup Iteration   4: 1977208.207 ops/s
# Warmup Iteration   5: 1904991.031 ops/s
# Warmup Iteration   6: 1928945.304 ops/s
# Warmup Iteration   7: 1952881.521 ops/s
# Warmup Iteration   8: 1928549.034 ops/s
# Warmup Iteration   9: 1906648.674 ops/s
# Warmup Iteration  10: 1917904.072 ops/s
# Warmup Iteration  11: 1979907.312 ops/s
# Warmup Iteration  12: 1992327.535 ops/s
# Warmup Iteration  13: 1883387.363 ops/s
# Warmup Iteration  14: 1973291.801 ops/s
# Warmup Iteration  15: 1885616.419 ops/s
# Warmup Iteration  16: 1946049.603 ops/s
# Warmup Iteration  17: 1892440.320 ops/s
# Warmup Iteration  18: 1870370.893 ops/s
# Warmup Iteration  19: 1947301.228 ops/s
# Warmup Iteration  20: 2020256.611 ops/s
# Warmup Iteration  21: 1866246.179 ops/s
# Warmup Iteration  22: 1965529.470 ops/s
# Warmup Iteration  23: 1871822.140 ops/s
# Warmup Iteration  24: 1880863.078 ops/s
# Warmup Iteration  25: 1997590.410 ops/s
# Warmup Iteration  26: 1855186.163 ops/s
# Warmup Iteration  27: 1905318.303 ops/s
# Warmup Iteration  28: 1884875.654 ops/s
# Warmup Iteration  29: 1874871.285 ops/s
# Warmup Iteration  30: 2052908.476 ops/s
Iteration   1: 1880196.434 ops/s
Iteration   2: 1982455.781 ops/s
Iteration   3: 1871350.399 ops/s
Iteration   4: 1918841.957 ops/s
Iteration   5: 1947958.364 ops/s
Iteration   6: 1900934.411 ops/s
Iteration   7: 1992692.956 ops/s
Iteration   8: 1885976.921 ops/s
Iteration   9: 1983140.722 ops/s
Iteration  10: 1884271.278 ops/s
Iteration  11: 1872328.822 ops/s
Iteration  12: 1942676.559 ops/s
Iteration  13: 1763806.408 ops/s
Iteration  14: 1542367.347 ops/s
Iteration  15: 1898345.651 ops/s
Iteration  16: 2018043.319 ops/s
Iteration  17: 1978803.941 ops/s
Iteration  18: 1853984.677 ops/s
Iteration  19: 1893515.608 ops/s
Iteration  20: 1939764.235 ops/s
Iteration  21: 1976046.181 ops/s
Iteration  22: 1925050.577 ops/s
Iteration  23: 1951137.158 ops/s
Iteration  24: 1879471.240 ops/s
Iteration  25: 1905488.919 ops/s
Iteration  26: 2026869.466 ops/s
Iteration  27: 1878616.484 ops/s
Iteration  28: 2023493.995 ops/s
Iteration  29: 1843828.757 ops/s
Iteration  30: 1969836.369 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNextTest._Benchmark.benchmark_asyncFusedRejected":
  1911043.164 ±(99.9%) 61433.759 ops/s [Average]
  (min, avg, max) = (1542367.347, 1911043.164, 2026869.466), stdev = 91951.166
  CI (99.9%): [1849609.405, 1972476.924] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
FlowableDoAfterNextTest._Benchmark.benchmark_asyncFusedRejected  thrpt   30  1911043.164 ± 61433.759  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeTest._Benchmark.benchmark_disposed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeTest._Benchmark.benchmark_disposed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1719581.356 ops/s
# Warmup Iteration   2: 4228995.307 ops/s
# Warmup Iteration   3: 5304003.287 ops/s
# Warmup Iteration   4: 5405020.024 ops/s
# Warmup Iteration   5: 5850317.342 ops/s
# Warmup Iteration   6: 5707177.491 ops/s
# Warmup Iteration   7: 5441880.274 ops/s
# Warmup Iteration   8: 5689202.254 ops/s
# Warmup Iteration   9: 5795669.764 ops/s
# Warmup Iteration  10: 5366423.877 ops/s
# Warmup Iteration  11: 5582909.003 ops/s
# Warmup Iteration  12: 5539650.582 ops/s
# Warmup Iteration  13: 5461865.789 ops/s
# Warmup Iteration  14: 5511750.771 ops/s
# Warmup Iteration  15: 5526187.189 ops/s
# Warmup Iteration  16: 5608186.108 ops/s
# Warmup Iteration  17: 5438856.630 ops/s
# Warmup Iteration  18: 5604018.344 ops/s
# Warmup Iteration  19: 5675010.781 ops/s
# Warmup Iteration  20: 5310395.161 ops/s
# Warmup Iteration  21: 5679305.021 ops/s
# Warmup Iteration  22: 5536923.846 ops/s
# Warmup Iteration  23: 5374514.999 ops/s
# Warmup Iteration  24: 5373285.619 ops/s
# Warmup Iteration  25: 5638867.868 ops/s
# Warmup Iteration  26: 5369448.515 ops/s
# Warmup Iteration  27: 5625032.448 ops/s
# Warmup Iteration  28: 5420190.841 ops/s
# Warmup Iteration  29: 5551358.268 ops/s
# Warmup Iteration  30: 5427055.706 ops/s
Iteration   1: 5463372.986 ops/s
Iteration   2: 5624606.916 ops/s
Iteration   3: 5362829.035 ops/s
Iteration   4: 5592458.107 ops/s
Iteration   5: 5563878.424 ops/s
Iteration   6: 5701211.211 ops/s
Iteration   7: 5669458.447 ops/s
Iteration   8: 5454432.777 ops/s
Iteration   9: 5650551.661 ops/s
Iteration  10: 5468923.786 ops/s
Iteration  11: 5447730.709 ops/s
Iteration  12: 5677302.878 ops/s
Iteration  13: 5531596.099 ops/s
Iteration  14: 5775158.501 ops/s
Iteration  15: 5557366.710 ops/s
Iteration  16: 5401896.921 ops/s
Iteration  17: 5712497.969 ops/s
Iteration  18: 5325172.421 ops/s
Iteration  19: 5643152.819 ops/s
Iteration  20: 5603812.405 ops/s
Iteration  21: 5488022.486 ops/s
Iteration  22: 5654362.529 ops/s
Iteration  23: 5423201.197 ops/s
Iteration  24: 5601229.179 ops/s
Iteration  25: 5629885.423 ops/s
Iteration  26: 5688940.351 ops/s
Iteration  27: 5475834.699 ops/s
Iteration  28: 5546113.916 ops/s
Iteration  29: 5724359.432 ops/s
Iteration  30: 5315508.123 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeTest._Benchmark.benchmark_disposed":
  5559162.271 ±(99.9%) 83112.010 ops/s [Average]
  (min, avg, max) = (5315508.123, 5559162.271, 5775158.501), stdev = 124398.153
  CI (99.9%): [5476050.261, 5642274.280] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score       Error  Units
FlowableRangeTest._Benchmark.benchmark_disposed  thrpt   30  5559162.271 ± 83112.010  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCacheTest._Benchmark.benchmark_take2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCacheTest._Benchmark.benchmark_take2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 230672.485 ops/s
# Warmup Iteration   2: 685549.919 ops/s
# Warmup Iteration   3: 1205567.279 ops/s
# Warmup Iteration   4: 1255037.052 ops/s
# Warmup Iteration   5: 1172108.041 ops/s
# Warmup Iteration   6: 1170759.113 ops/s
# Warmup Iteration   7: 1282925.373 ops/s
# Warmup Iteration   8: 1320978.391 ops/s
# Warmup Iteration   9: 1240614.216 ops/s
# Warmup Iteration  10: 1289210.227 ops/s
# Warmup Iteration  11: 1234007.284 ops/s
# Warmup Iteration  12: 1301931.099 ops/s
# Warmup Iteration  13: 1269848.765 ops/s
# Warmup Iteration  14: 1261229.046 ops/s
# Warmup Iteration  15: 1268308.600 ops/s
# Warmup Iteration  16: 1274392.662 ops/s
# Warmup Iteration  17: 1278826.650 ops/s
# Warmup Iteration  18: 1286416.438 ops/s
# Warmup Iteration  19: 1269908.135 ops/s
# Warmup Iteration  20: 1284353.460 ops/s
# Warmup Iteration  21: 1273686.990 ops/s
# Warmup Iteration  22: 1281378.142 ops/s
# Warmup Iteration  23: 1265389.307 ops/s
# Warmup Iteration  24: 1226588.816 ops/s
# Warmup Iteration  25: 1340350.488 ops/s
# Warmup Iteration  26: 1243204.630 ops/s
# Warmup Iteration  27: 1316683.029 ops/s
# Warmup Iteration  28: 1232686.806 ops/s
# Warmup Iteration  29: 1288968.583 ops/s
# Warmup Iteration  30: 1317063.701 ops/s
Iteration   1: 1240531.477 ops/s
Iteration   2: 1318926.322 ops/s
Iteration   3: 1269370.867 ops/s
Iteration   4: 1313574.397 ops/s
Iteration   5: 1235838.605 ops/s
Iteration   6: 1321237.498 ops/s
Iteration   7: 1333690.159 ops/s
Iteration   8: 1051761.346 ops/s
Iteration   9: 1242241.279 ops/s
Iteration  10: 1273869.372 ops/s
Iteration  11: 1312117.767 ops/s
Iteration  12: 1295081.852 ops/s
Iteration  13: 1252049.194 ops/s
Iteration  14: 1313928.356 ops/s
Iteration  15: 1262009.510 ops/s
Iteration  16: 1242588.382 ops/s
Iteration  17: 1260557.427 ops/s
Iteration  18: 1261315.187 ops/s
Iteration  19: 1335416.424 ops/s
Iteration  20: 1281976.048 ops/s
Iteration  21: 1319356.291 ops/s
Iteration  22: 1250669.807 ops/s
Iteration  23: 1237114.427 ops/s
Iteration  24: 1289044.307 ops/s
Iteration  25: 1262326.062 ops/s
Iteration  26: 1319669.569 ops/s
Iteration  27: 1253841.529 ops/s
Iteration  28: 1284444.604 ops/s
Iteration  29: 1249181.923 ops/s
Iteration  30: 1253126.875 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableCacheTest._Benchmark.benchmark_take2":
  1271228.562 ±(99.9%) 34959.943 ops/s [Average]
  (min, avg, max) = (1051761.346, 1271228.562, 1335416.424), stdev = 52326.400
  CI (99.9%): [1236268.619, 1306188.505] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt        Score       Error  Units
FlowableCacheTest._Benchmark.benchmark_take2  thrpt   30  1271228.562 ± 34959.943  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategyTest._Benchmark.benchmark_cancelOnDrain$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategyTest._Benchmark.benchmark_cancelOnDrain

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 251126.668 ops/s
# Warmup Iteration   2: 802655.990 ops/s
# Warmup Iteration   3: 1233307.266 ops/s
# Warmup Iteration   4: 1817608.409 ops/s
# Warmup Iteration   5: 1834822.908 ops/s
# Warmup Iteration   6: 1921065.477 ops/s
# Warmup Iteration   7: 1883097.234 ops/s
# Warmup Iteration   8: 1783260.968 ops/s
# Warmup Iteration   9: 1985283.394 ops/s
# Warmup Iteration  10: 1931601.527 ops/s
# Warmup Iteration  11: 1922266.131 ops/s
# Warmup Iteration  12: 1883570.619 ops/s
# Warmup Iteration  13: 1952038.501 ops/s
# Warmup Iteration  14: 1771142.967 ops/s
# Warmup Iteration  15: 1994390.917 ops/s
# Warmup Iteration  16: 1916515.809 ops/s
# Warmup Iteration  17: 1922853.881 ops/s
# Warmup Iteration  18: 1976468.813 ops/s
# Warmup Iteration  19: 1837621.892 ops/s
# Warmup Iteration  20: 1963726.492 ops/s
# Warmup Iteration  21: 1902223.645 ops/s
# Warmup Iteration  22: 1908787.902 ops/s
# Warmup Iteration  23: 1907571.882 ops/s
# Warmup Iteration  24: 1734934.391 ops/s
# Warmup Iteration  25: 2019130.151 ops/s
# Warmup Iteration  26: 1905501.671 ops/s
# Warmup Iteration  27: 1990322.997 ops/s
# Warmup Iteration  28: 1918000.502 ops/s
# Warmup Iteration  29: 1939905.474 ops/s
# Warmup Iteration  30: 1932127.320 ops/s
Iteration   1: 1881341.493 ops/s
Iteration   2: 2069217.737 ops/s
Iteration   3: 1860689.982 ops/s
Iteration   4: 1952624.185 ops/s
Iteration   5: 1984797.798 ops/s
Iteration   6: 1907896.820 ops/s
Iteration   7: 2026802.495 ops/s
Iteration   8: 2002219.566 ops/s
Iteration   9: 1894925.212 ops/s
Iteration  10: 2015657.154 ops/s
Iteration  11: 1918740.925 ops/s
Iteration  12: 1999251.044 ops/s
Iteration  13: 1961066.491 ops/s
Iteration  14: 1914737.413 ops/s
Iteration  15: 1953942.462 ops/s
Iteration  16: 1997862.976 ops/s
Iteration  17: 1935432.333 ops/s
Iteration  18: 2003901.328 ops/s
Iteration  19: 1954192.736 ops/s
Iteration  20: 1922173.472 ops/s
Iteration  21: 1913423.602 ops/s
Iteration  22: 1957020.718 ops/s
Iteration  23: 1984070.441 ops/s
Iteration  24: 1863594.627 ops/s
Iteration  25: 1992680.857 ops/s
Iteration  26: 1861932.768 ops/s
Iteration  27: 1998790.867 ops/s
Iteration  28: 1905202.570 ops/s
Iteration  29: 1946990.855 ops/s
Iteration  30: 1933419.707 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategyTest._Benchmark.benchmark_cancelOnDrain":
  1950486.688 ±(99.9%) 35332.152 ops/s [Average]
  (min, avg, max) = (1860689.982, 1950486.688, 2069217.737), stdev = 52883.505
  CI (99.9%): [1915154.536, 1985818.839] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score       Error  Units
FlowableOnBackpressureBufferStrategyTest._Benchmark.benchmark_cancelOnDrain  thrpt   30  1950486.688 ± 35332.152  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinallyTest._Benchmark.benchmark_syncFusedBoundaryConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinallyTest._Benchmark.benchmark_syncFusedBoundaryConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 866410.476 ops/s
# Warmup Iteration   2: 2837586.400 ops/s
# Warmup Iteration   3: 3546332.459 ops/s
# Warmup Iteration   4: 4011291.307 ops/s
# Warmup Iteration   5: 4103771.054 ops/s
# Warmup Iteration   6: 3929033.475 ops/s
# Warmup Iteration   7: 4074217.077 ops/s
# Warmup Iteration   8: 4265753.016 ops/s
# Warmup Iteration   9: 4010259.644 ops/s
# Warmup Iteration  10: 4119233.278 ops/s
# Warmup Iteration  11: 4092277.649 ops/s
# Warmup Iteration  12: 4019856.669 ops/s
# Warmup Iteration  13: 4164212.278 ops/s
# Warmup Iteration  14: 4148407.850 ops/s
# Warmup Iteration  15: 4087230.018 ops/s
# Warmup Iteration  16: 4210457.984 ops/s
# Warmup Iteration  17: 3991080.827 ops/s
# Warmup Iteration  18: 4267385.746 ops/s
# Warmup Iteration  19: 4003742.099 ops/s
# Warmup Iteration  20: 4126351.846 ops/s
# Warmup Iteration  21: 4027564.608 ops/s
# Warmup Iteration  22: 4022641.427 ops/s
# Warmup Iteration  23: 4230723.216 ops/s
# Warmup Iteration  24: 3999530.846 ops/s
# Warmup Iteration  25: 4145541.167 ops/s
# Warmup Iteration  26: 4081021.390 ops/s
# Warmup Iteration  27: 4098835.256 ops/s
# Warmup Iteration  28: 4140458.939 ops/s
# Warmup Iteration  29: 4106718.549 ops/s
# Warmup Iteration  30: 4093140.454 ops/s
Iteration   1: 4135172.321 ops/s
Iteration   2: 4078349.332 ops/s
Iteration   3: 3594780.113 ops/s
Iteration   4: 3947443.447 ops/s
Iteration   5: 3943691.953 ops/s
Iteration   6: 4294480.566 ops/s
Iteration   7: 4041275.205 ops/s
Iteration   8: 4135410.597 ops/s
Iteration   9: 3998020.274 ops/s
Iteration  10: 4071842.792 ops/s
Iteration  11: 4231860.333 ops/s
Iteration  12: 3992491.101 ops/s
Iteration  13: 4151817.679 ops/s
Iteration  14: 4045285.767 ops/s
Iteration  15: 4212990.575 ops/s
Iteration  16: 3941411.903 ops/s
Iteration  17: 3996033.330 ops/s
Iteration  18: 4167099.415 ops/s
Iteration  19: 3968276.893 ops/s
Iteration  20: 4123321.080 ops/s
Iteration  21: 4225406.843 ops/s
Iteration  22: 4021772.843 ops/s
Iteration  23: 4168668.719 ops/s
Iteration  24: 4071238.604 ops/s
Iteration  25: 4125375.341 ops/s
Iteration  26: 4062104.502 ops/s
Iteration  27: 3979482.145 ops/s
Iteration  28: 4146087.815 ops/s
Iteration  29: 3952253.904 ops/s
Iteration  30: 4277519.604 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinallyTest._Benchmark.benchmark_syncFusedBoundaryConditional":
  4070032.166 ±(99.9%) 90885.160 ops/s [Average]
  (min, avg, max) = (3594780.113, 4070032.166, 4294480.566), stdev = 136032.640
  CI (99.9%): [3979147.006, 4160917.327] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score       Error  Units
FlowableDoFinallyTest._Benchmark.benchmark_syncFusedBoundaryConditional  thrpt   30  4070032.166 ± 90885.160  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCacheTest._Benchmark.benchmark_take$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCacheTest._Benchmark.benchmark_take

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 80312.007 ops/s
# Warmup Iteration   2: 258733.869 ops/s
# Warmup Iteration   3: 279552.744 ops/s
# Warmup Iteration   4: 283012.149 ops/s
# Warmup Iteration   5: 284644.381 ops/s
# Warmup Iteration   6: 276783.165 ops/s
# Warmup Iteration   7: 265037.042 ops/s
# Warmup Iteration   8: 280549.544 ops/s
# Warmup Iteration   9: 277813.688 ops/s
# Warmup Iteration  10: 278403.821 ops/s
# Warmup Iteration  11: 280270.721 ops/s
# Warmup Iteration  12: 275145.693 ops/s
# Warmup Iteration  13: 272488.649 ops/s
# Warmup Iteration  14: 275779.170 ops/s
# Warmup Iteration  15: 282839.909 ops/s
# Warmup Iteration  16: 275767.524 ops/s
# Warmup Iteration  17: 290247.134 ops/s
# Warmup Iteration  18: 267921.585 ops/s
# Warmup Iteration  19: 289350.129 ops/s
# Warmup Iteration  20: 280199.899 ops/s
# Warmup Iteration  21: 273728.414 ops/s
# Warmup Iteration  22: 283198.676 ops/s
# Warmup Iteration  23: 275055.869 ops/s
# Warmup Iteration  24: 288313.342 ops/s
# Warmup Iteration  25: 270894.031 ops/s
# Warmup Iteration  26: 281952.113 ops/s
# Warmup Iteration  27: 276805.161 ops/s
# Warmup Iteration  28: 267342.811 ops/s
# Warmup Iteration  29: 289420.492 ops/s
# Warmup Iteration  30: 276292.922 ops/s
Iteration   1: 288588.429 ops/s
Iteration   2: 270027.720 ops/s
Iteration   3: 285443.465 ops/s
Iteration   4: 275097.812 ops/s
Iteration   5: 281445.995 ops/s
Iteration   6: 282799.403 ops/s
Iteration   7: 278798.690 ops/s
Iteration   8: 293240.121 ops/s
Iteration   9: 280512.195 ops/s
Iteration  10: 276566.828 ops/s
Iteration  11: 285929.116 ops/s
Iteration  12: 281049.874 ops/s
Iteration  13: 274157.282 ops/s
Iteration  14: 277622.099 ops/s
Iteration  15: 280016.098 ops/s
Iteration  16: 277651.715 ops/s
Iteration  17: 278789.897 ops/s
Iteration  18: 278495.184 ops/s
Iteration  19: 282558.850 ops/s
Iteration  20: 282278.984 ops/s
Iteration  21: 290895.109 ops/s
Iteration  22: 276328.749 ops/s
Iteration  23: 279868.869 ops/s
Iteration  24: 286524.607 ops/s
Iteration  25: 269411.465 ops/s
Iteration  26: 286025.651 ops/s
Iteration  27: 274673.965 ops/s
Iteration  28: 279306.050 ops/s
Iteration  29: 286380.441 ops/s
Iteration  30: 278264.343 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableCacheTest._Benchmark.benchmark_take":
  280624.967 ±(99.9%) 3735.734 ops/s [Average]
  (min, avg, max) = (269411.465, 280624.967, 293240.121), stdev = 5591.472
  CI (99.9%): [276889.233, 284360.701] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     Mode  Cnt       Score      Error  Units
FlowableCacheTest._Benchmark.benchmark_take  thrpt   30  280624.967 ± 3735.734  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferTest._Benchmark.benchmark_maxSize$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferTest._Benchmark.benchmark_maxSize

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 100915.627 ops/s
# Warmup Iteration   2: 475232.723 ops/s
# Warmup Iteration   3: 496099.288 ops/s
# Warmup Iteration   4: 485033.723 ops/s
# Warmup Iteration   5: 550326.825 ops/s
# Warmup Iteration   6: 524751.951 ops/s
# Warmup Iteration   7: 550987.544 ops/s
# Warmup Iteration   8: 548340.321 ops/s
# Warmup Iteration   9: 544693.947 ops/s
# Warmup Iteration  10: 546363.632 ops/s
# Warmup Iteration  11: 535823.984 ops/s
# Warmup Iteration  12: 558349.682 ops/s
# Warmup Iteration  13: 536579.452 ops/s
# Warmup Iteration  14: 552982.952 ops/s
# Warmup Iteration  15: 534132.326 ops/s
# Warmup Iteration  16: 533098.799 ops/s
# Warmup Iteration  17: 578487.756 ops/s
# Warmup Iteration  18: 572526.252 ops/s
# Warmup Iteration  19: 584210.122 ops/s
# Warmup Iteration  20: 572547.162 ops/s
# Warmup Iteration  21: 586792.428 ops/s
# Warmup Iteration  22: 549832.854 ops/s
# Warmup Iteration  23: 577773.027 ops/s
# Warmup Iteration  24: 558017.056 ops/s
# Warmup Iteration  25: 564522.858 ops/s
# Warmup Iteration  26: 584049.947 ops/s
# Warmup Iteration  27: 452765.327 ops/s
# Warmup Iteration  28: 569638.783 ops/s
# Warmup Iteration  29: 560343.320 ops/s
# Warmup Iteration  30: 588334.912 ops/s
Iteration   1: 540908.499 ops/s
Iteration   2: 559216.635 ops/s
Iteration   3: 574169.757 ops/s
Iteration   4: 576392.974 ops/s
Iteration   5: 575158.309 ops/s
Iteration   6: 581690.781 ops/s
Iteration   7: 547379.905 ops/s
Iteration   8: 577251.268 ops/s
Iteration   9: 577704.397 ops/s
Iteration  10: 566115.474 ops/s
Iteration  11: 566671.433 ops/s
Iteration  12: 551818.897 ops/s
Iteration  13: 584833.800 ops/s
Iteration  14: 573448.850 ops/s
Iteration  15: 543947.544 ops/s
Iteration  16: 589279.581 ops/s
Iteration  17: 569399.287 ops/s
Iteration  18: 575352.528 ops/s
Iteration  19: 588429.901 ops/s
Iteration  20: 555082.402 ops/s
Iteration  21: 596439.302 ops/s
Iteration  22: 561666.778 ops/s
Iteration  23: 577080.789 ops/s
Iteration  24: 587189.341 ops/s
Iteration  25: 516173.263 ops/s
Iteration  26: 579300.433 ops/s
Iteration  27: 565805.593 ops/s
Iteration  28: 575453.722 ops/s
Iteration  29: 590773.997 ops/s
Iteration  30: 562665.690 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferTest._Benchmark.benchmark_maxSize":
  569560.038 ±(99.9%) 11547.305 ops/s [Average]
  (min, avg, max) = (516173.263, 569560.038, 596439.302), stdev = 17283.464
  CI (99.9%): [558012.732, 581107.343] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score       Error  Units
FlowableOnBackpressureBufferTest._Benchmark.benchmark_maxSize  thrpt   30  569560.038 ± 11547.305  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableMapOptionalTest._Benchmark.benchmark_backpressureNoneConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableMapOptionalTest._Benchmark.benchmark_backpressureNoneConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 701042.001 ops/s
# Warmup Iteration   2: 3838278.694 ops/s
# Warmup Iteration   3: 5037644.220 ops/s
# Warmup Iteration   4: 4245222.884 ops/s
# Warmup Iteration   5: 4931380.951 ops/s
# Warmup Iteration   6: 4802731.736 ops/s
# Warmup Iteration   7: 4974926.808 ops/s
# Warmup Iteration   8: 5082853.350 ops/s
# Warmup Iteration   9: 4993886.865 ops/s
# Warmup Iteration  10: 5047482.125 ops/s
# Warmup Iteration  11: 4950611.402 ops/s
# Warmup Iteration  12: 5018294.693 ops/s
# Warmup Iteration  13: 5132221.684 ops/s
# Warmup Iteration  14: 4727857.049 ops/s
# Warmup Iteration  15: 5039821.434 ops/s
# Warmup Iteration  16: 5024921.944 ops/s
# Warmup Iteration  17: 4820912.454 ops/s
# Warmup Iteration  18: 4982914.142 ops/s
# Warmup Iteration  19: 5150597.502 ops/s
# Warmup Iteration  20: 4929931.597 ops/s
# Warmup Iteration  21: 5045197.923 ops/s
# Warmup Iteration  22: 5174950.051 ops/s
# Warmup Iteration  23: 4784069.369 ops/s
# Warmup Iteration  24: 4821894.154 ops/s
# Warmup Iteration  25: 5169981.978 ops/s
# Warmup Iteration  26: 4778787.179 ops/s
# Warmup Iteration  27: 5042458.896 ops/s
# Warmup Iteration  28: 4971415.207 ops/s
# Warmup Iteration  29: 5035654.166 ops/s
# Warmup Iteration  30: 5154072.455 ops/s
Iteration   1: 4883336.424 ops/s
Iteration   2: 5098475.125 ops/s
Iteration   3: 4961507.901 ops/s
Iteration   4: 4982142.063 ops/s
Iteration   5: 5020443.949 ops/s
Iteration   6: 4944344.434 ops/s
Iteration   7: 4989201.115 ops/s
Iteration   8: 4942418.671 ops/s
Iteration   9: 4947463.603 ops/s
Iteration  10: 5098283.857 ops/s
Iteration  11: 4924657.802 ops/s
Iteration  12: 5060531.008 ops/s
Iteration  13: 4957202.059 ops/s
Iteration  14: 5011368.424 ops/s
Iteration  15: 4984693.254 ops/s
Iteration  16: 5073012.141 ops/s
Iteration  17: 4987371.506 ops/s
Iteration  18: 4992171.990 ops/s
Iteration  19: 5022155.414 ops/s
Iteration  20: 4983299.420 ops/s
Iteration  21: 4974521.840 ops/s
Iteration  22: 4988587.683 ops/s
Iteration  23: 4958157.499 ops/s
Iteration  24: 5140107.548 ops/s
Iteration  25: 5075067.258 ops/s
Iteration  26: 4858008.417 ops/s
Iteration  27: 4985471.257 ops/s
Iteration  28: 4872135.910 ops/s
Iteration  29: 5036230.254 ops/s
Iteration  30: 4889950.736 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableMapOptionalTest._Benchmark.benchmark_backpressureNoneConditional":
  4988077.285 ±(99.9%) 45754.591 ops/s [Average]
  (min, avg, max) = (4858008.417, 4988077.285, 5140107.548), stdev = 68483.323
  CI (99.9%): [4942322.694, 5033831.876] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score       Error  Units
FlowableMapOptionalTest._Benchmark.benchmark_backpressureNoneConditional  thrpt   30  4988077.285 ± 45754.591  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_selectorDisconnectsIndependentSource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_selectorDisconnectsIndependentSource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 499875.945 ops/s
# Warmup Iteration   2: 1599865.900 ops/s
# Warmup Iteration   3: 2551674.708 ops/s
# Warmup Iteration   4: 2528250.466 ops/s
# Warmup Iteration   5: 2667390.925 ops/s
# Warmup Iteration   6: 2670461.002 ops/s
# Warmup Iteration   7: 2323797.268 ops/s
# Warmup Iteration   8: 2623198.701 ops/s
# Warmup Iteration   9: 2655246.418 ops/s
# Warmup Iteration  10: 2472158.655 ops/s
# Warmup Iteration  11: 2644161.971 ops/s
# Warmup Iteration  12: 2551001.780 ops/s
# Warmup Iteration  13: 2502694.111 ops/s
# Warmup Iteration  14: 2541813.331 ops/s
# Warmup Iteration  15: 2749529.861 ops/s
# Warmup Iteration  16: 2591453.536 ops/s
# Warmup Iteration  17: 2600358.932 ops/s
# Warmup Iteration  18: 2700317.889 ops/s
# Warmup Iteration  19: 2564789.760 ops/s
# Warmup Iteration  20: 2667529.403 ops/s
# Warmup Iteration  21: 2559436.982 ops/s
# Warmup Iteration  22: 2114051.486 ops/s
# Warmup Iteration  23: 2671304.479 ops/s
# Warmup Iteration  24: 2526300.959 ops/s
# Warmup Iteration  25: 2736235.260 ops/s
# Warmup Iteration  26: 2633223.851 ops/s
# Warmup Iteration  27: 2659150.527 ops/s
# Warmup Iteration  28: 2640549.445 ops/s
# Warmup Iteration  29: 2552594.255 ops/s
# Warmup Iteration  30: 2612060.967 ops/s
Iteration   1: 2549785.455 ops/s
Iteration   2: 2736909.446 ops/s
Iteration   3: 2593671.356 ops/s
Iteration   4: 2614739.067 ops/s
Iteration   5: 2725943.788 ops/s
Iteration   6: 2545173.125 ops/s
Iteration   7: 2713417.608 ops/s
Iteration   8: 2607379.416 ops/s
Iteration   9: 2800707.496 ops/s
Iteration  10: 2723942.071 ops/s
Iteration  11: 2551428.243 ops/s
Iteration  12: 2670252.010 ops/s
Iteration  13: 2600550.431 ops/s
Iteration  14: 2689518.188 ops/s
Iteration  15: 2710034.427 ops/s
Iteration  16: 2689483.784 ops/s
Iteration  17: 2663576.861 ops/s
Iteration  18: 2770073.573 ops/s
Iteration  19: 2719713.143 ops/s
Iteration  20: 2572080.056 ops/s
Iteration  21: 2731053.466 ops/s
Iteration  22: 2549823.175 ops/s
Iteration  23: 2674378.114 ops/s
Iteration  24: 2605607.264 ops/s
Iteration  25: 2690490.250 ops/s
Iteration  26: 2701775.131 ops/s
Iteration  27: 2555458.159 ops/s
Iteration  28: 2716136.875 ops/s
Iteration  29: 2637856.092 ops/s
Iteration  30: 2648632.526 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_selectorDisconnectsIndependentSource":
  2658653.020 ±(99.9%) 48420.924 ops/s [Average]
  (min, avg, max) = (2545173.125, 2658653.020, 2800707.496), stdev = 72474.165
  CI (99.9%): [2610232.096, 2707073.944] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt        Score       Error  Units
FlowablePublishTest._Benchmark.benchmark_selectorDisconnectsIndependentSource  thrpt   30  2658653.020 ± 48420.924  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinallyTest._Benchmark.benchmark_syncFused$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinallyTest._Benchmark.benchmark_syncFused

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1015720.510 ops/s
# Warmup Iteration   2: 2851736.935 ops/s
# Warmup Iteration   3: 3672123.582 ops/s
# Warmup Iteration   4: 3407315.697 ops/s
# Warmup Iteration   5: 3594111.363 ops/s
# Warmup Iteration   6: 3481754.179 ops/s
# Warmup Iteration   7: 3517649.975 ops/s
# Warmup Iteration   8: 3411802.245 ops/s
# Warmup Iteration   9: 3302777.143 ops/s
# Warmup Iteration  10: 3378619.048 ops/s
# Warmup Iteration  11: 3643207.493 ops/s
# Warmup Iteration  12: 3464437.519 ops/s
# Warmup Iteration  13: 3638394.938 ops/s
# Warmup Iteration  14: 3581516.408 ops/s
# Warmup Iteration  15: 3561140.646 ops/s
# Warmup Iteration  16: 3643623.370 ops/s
# Warmup Iteration  17: 3520157.107 ops/s
# Warmup Iteration  18: 3675021.545 ops/s
# Warmup Iteration  19: 3547825.388 ops/s
# Warmup Iteration  20: 3551211.386 ops/s
# Warmup Iteration  21: 3526272.884 ops/s
# Warmup Iteration  22: 3720444.565 ops/s
# Warmup Iteration  23: 3592861.543 ops/s
# Warmup Iteration  24: 3491555.522 ops/s
# Warmup Iteration  25: 3686879.181 ops/s
# Warmup Iteration  26: 3604597.682 ops/s
# Warmup Iteration  27: 3684000.782 ops/s
# Warmup Iteration  28: 3452040.182 ops/s
# Warmup Iteration  29: 3713417.567 ops/s
# Warmup Iteration  30: 3593879.610 ops/s
Iteration   1: 3661961.003 ops/s
Iteration   2: 3642281.637 ops/s
Iteration   3: 3502748.862 ops/s
Iteration   4: 3629461.368 ops/s
Iteration   5: 3467220.289 ops/s
Iteration   6: 3662049.450 ops/s
Iteration   7: 3721157.520 ops/s
Iteration   8: 3441646.160 ops/s
Iteration   9: 3721322.141 ops/s
Iteration  10: 3525623.199 ops/s
Iteration  11: 3602808.823 ops/s
Iteration  12: 3727242.548 ops/s
Iteration  13: 3483027.865 ops/s
Iteration  14: 3597104.284 ops/s
Iteration  15: 3740520.765 ops/s
Iteration  16: 3456915.603 ops/s
Iteration  17: 3803163.120 ops/s
Iteration  18: 3477672.898 ops/s
Iteration  19: 3647079.853 ops/s
Iteration  20: 3631045.927 ops/s
Iteration  21: 3612400.842 ops/s
Iteration  22: 3561153.721 ops/s
Iteration  23: 3605424.424 ops/s
Iteration  24: 3640770.362 ops/s
Iteration  25: 3556752.824 ops/s
Iteration  26: 3680169.550 ops/s
Iteration  27: 3579207.332 ops/s
Iteration  28: 3645511.660 ops/s
Iteration  29: 3554796.679 ops/s
Iteration  30: 3588939.903 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinallyTest._Benchmark.benchmark_syncFused":
  3605572.687 ±(99.9%) 61077.143 ops/s [Average]
  (min, avg, max) = (3441646.160, 3605572.687, 3803163.120), stdev = 91417.400
  CI (99.9%): [3544495.544, 3666649.830] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
FlowableDoFinallyTest._Benchmark.benchmark_syncFused  thrpt   30  3605572.687 ± 61077.143  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeTest._Benchmark.benchmark_conditionalRequestOneByOne$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeTest._Benchmark.benchmark_conditionalRequestOneByOne

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 503465.396 ops/s
# Warmup Iteration   2: 2501400.214 ops/s
# Warmup Iteration   3: 2987667.622 ops/s
# Warmup Iteration   4: 3600797.123 ops/s
# Warmup Iteration   5: 3391622.528 ops/s
# Warmup Iteration   6: 3652044.519 ops/s
# Warmup Iteration   7: 3428567.154 ops/s
# Warmup Iteration   8: 3535546.963 ops/s
# Warmup Iteration   9: 3468693.673 ops/s
# Warmup Iteration  10: 3476397.796 ops/s
# Warmup Iteration  11: 3577884.933 ops/s
# Warmup Iteration  12: 3405619.057 ops/s
# Warmup Iteration  13: 3568054.332 ops/s
# Warmup Iteration  14: 3610094.963 ops/s
# Warmup Iteration  15: 3480518.938 ops/s
# Warmup Iteration  16: 3601205.473 ops/s
# Warmup Iteration  17: 2578533.545 ops/s
# Warmup Iteration  18: 3600324.006 ops/s
# Warmup Iteration  19: 3715932.530 ops/s
# Warmup Iteration  20: 3451949.576 ops/s
# Warmup Iteration  21: 3636198.291 ops/s
# Warmup Iteration  22: 3432443.076 ops/s
# Warmup Iteration  23: 3657065.137 ops/s
# Warmup Iteration  24: 3580845.726 ops/s
# Warmup Iteration  25: 3437463.878 ops/s
# Warmup Iteration  26: 3622247.646 ops/s
# Warmup Iteration  27: 3608977.544 ops/s
# Warmup Iteration  28: 3370240.341 ops/s
# Warmup Iteration  29: 3562809.543 ops/s
# Warmup Iteration  30: 3447744.108 ops/s
Iteration   1: 3489735.445 ops/s
Iteration   2: 3505165.110 ops/s
Iteration   3: 3652666.800 ops/s
Iteration   4: 3496560.945 ops/s
Iteration   5: 3428700.847 ops/s
Iteration   6: 3632643.520 ops/s
Iteration   7: 3364296.958 ops/s
Iteration   8: 3684483.420 ops/s
Iteration   9: 3604917.748 ops/s
Iteration  10: 3513958.564 ops/s
Iteration  11: 3627185.973 ops/s
Iteration  12: 3457077.705 ops/s
Iteration  13: 3532090.136 ops/s
Iteration  14: 3572202.795 ops/s
Iteration  15: 3442145.326 ops/s
Iteration  16: 3525923.576 ops/s
Iteration  17: 3669608.677 ops/s
Iteration  18: 3497798.486 ops/s
Iteration  19: 3467430.363 ops/s
Iteration  20: 3622105.909 ops/s
Iteration  21: 3419380.260 ops/s
Iteration  22: 3650057.681 ops/s
Iteration  23: 3526855.159 ops/s
Iteration  24: 3587753.143 ops/s
Iteration  25: 3447857.132 ops/s
Iteration  26: 3596901.577 ops/s
Iteration  27: 3668355.249 ops/s
Iteration  28: 3420853.441 ops/s
Iteration  29: 3572289.739 ops/s
Iteration  30: 3535128.400 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeTest._Benchmark.benchmark_conditionalRequestOneByOne":
  3540404.336 ±(99.9%) 58776.645 ops/s [Average]
  (min, avg, max) = (3364296.958, 3540404.336, 3684483.420), stdev = 87974.121
  CI (99.9%): [3481627.692, 3599180.981] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
FlowableRangeTest._Benchmark.benchmark_conditionalRequestOneByOne  thrpt   30  3540404.336 ± 58776.645  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeTest._Benchmark.benchmark_fused$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeTest._Benchmark.benchmark_fused

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 769812.625 ops/s
# Warmup Iteration   2: 3607554.258 ops/s
# Warmup Iteration   3: 4158935.843 ops/s
# Warmup Iteration   4: 5132931.941 ops/s
# Warmup Iteration   5: 4884632.622 ops/s
# Warmup Iteration   6: 5234287.760 ops/s
# Warmup Iteration   7: 5109958.477 ops/s
# Warmup Iteration   8: 4909448.573 ops/s
# Warmup Iteration   9: 5020839.342 ops/s
# Warmup Iteration  10: 4948757.428 ops/s
# Warmup Iteration  11: 5074731.775 ops/s
# Warmup Iteration  12: 4870811.325 ops/s
# Warmup Iteration  13: 5076905.771 ops/s
# Warmup Iteration  14: 5133558.332 ops/s
# Warmup Iteration  15: 4862395.024 ops/s
# Warmup Iteration  16: 5234772.868 ops/s
# Warmup Iteration  17: 4999922.078 ops/s
# Warmup Iteration  18: 5054749.777 ops/s
# Warmup Iteration  19: 5101160.468 ops/s
# Warmup Iteration  20: 4971440.147 ops/s
# Warmup Iteration  21: 5230471.555 ops/s
# Warmup Iteration  22: 4895747.632 ops/s
# Warmup Iteration  23: 4921176.699 ops/s
# Warmup Iteration  24: 5154023.949 ops/s
# Warmup Iteration  25: 4952777.876 ops/s
# Warmup Iteration  26: 5040694.527 ops/s
# Warmup Iteration  27: 5110658.825 ops/s
# Warmup Iteration  28: 4833840.579 ops/s
# Warmup Iteration  29: 5365304.145 ops/s
# Warmup Iteration  30: 5196078.991 ops/s
Iteration   1: 4771408.257 ops/s
Iteration   2: 5187233.844 ops/s
Iteration   3: 5193536.270 ops/s
Iteration   4: 4953904.353 ops/s
Iteration   5: 5192832.354 ops/s
Iteration   6: 4927310.138 ops/s
Iteration   7: 5139933.528 ops/s
Iteration   8: 4992585.901 ops/s
Iteration   9: 4971166.404 ops/s
Iteration  10: 4942817.272 ops/s
Iteration  11: 4956319.017 ops/s
Iteration  12: 5354570.974 ops/s
Iteration  13: 5094215.246 ops/s
Iteration  14: 4932060.226 ops/s
Iteration  15: 5117995.208 ops/s
Iteration  16: 4938449.162 ops/s
Iteration  17: 5193736.126 ops/s
Iteration  18: 5011441.202 ops/s
Iteration  19: 5070012.375 ops/s
Iteration  20: 5218907.567 ops/s
Iteration  21: 5154765.722 ops/s
Iteration  22: 4874447.354 ops/s
Iteration  23: 5212651.441 ops/s
Iteration  24: 4881206.221 ops/s
Iteration  25: 5046994.922 ops/s
Iteration  26: 4925819.024 ops/s
Iteration  27: 4918171.627 ops/s
Iteration  28: 5147751.689 ops/s
Iteration  29: 4721061.949 ops/s
Iteration  30: 5033381.542 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeTest._Benchmark.benchmark_fused":
  5035889.564 ±(99.9%) 97530.113 ops/s [Average]
  (min, avg, max) = (4721061.949, 5035889.564, 5354570.974), stdev = 145978.493
  CI (99.9%): [4938359.451, 5133419.677] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt        Score       Error  Units
FlowableRangeTest._Benchmark.benchmark_fused  thrpt   30  5035889.564 ± 97530.113  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNextTest._Benchmark.benchmark_syncFused$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNextTest._Benchmark.benchmark_syncFused

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 280243.637 ops/s
# Warmup Iteration   2: 1299009.123 ops/s
# Warmup Iteration   3: 1804696.877 ops/s
# Warmup Iteration   4: 2194373.179 ops/s
# Warmup Iteration   5: 2224621.523 ops/s
# Warmup Iteration   6: 2208732.710 ops/s
# Warmup Iteration   7: 2175240.156 ops/s
# Warmup Iteration   8: 2153702.538 ops/s
# Warmup Iteration   9: 2203976.203 ops/s
# Warmup Iteration  10: 2158856.948 ops/s
# Warmup Iteration  11: 2157585.262 ops/s
# Warmup Iteration  12: 1804385.271 ops/s
# Warmup Iteration  13: 2263271.047 ops/s
# Warmup Iteration  14: 2108347.167 ops/s
# Warmup Iteration  15: 2214333.369 ops/s
# Warmup Iteration  16: 2281543.017 ops/s
# Warmup Iteration  17: 2119965.785 ops/s
# Warmup Iteration  18: 2288648.359 ops/s
# Warmup Iteration  19: 2121751.918 ops/s
# Warmup Iteration  20: 2214451.729 ops/s
# Warmup Iteration  21: 2115140.236 ops/s
# Warmup Iteration  22: 2220577.296 ops/s
# Warmup Iteration  23: 2190169.996 ops/s
# Warmup Iteration  24: 2150339.423 ops/s
# Warmup Iteration  25: 2125897.012 ops/s
# Warmup Iteration  26: 2289911.053 ops/s
# Warmup Iteration  27: 2191793.688 ops/s
# Warmup Iteration  28: 2239104.672 ops/s
# Warmup Iteration  29: 2179447.928 ops/s
# Warmup Iteration  30: 2238087.369 ops/s
Iteration   1: 2258631.566 ops/s
Iteration   2: 2111133.921 ops/s
Iteration   3: 2248316.616 ops/s
Iteration   4: 2113363.090 ops/s
Iteration   5: 2236867.568 ops/s
Iteration   6: 2164809.493 ops/s
Iteration   7: 2189359.288 ops/s
Iteration   8: 2304811.597 ops/s
Iteration   9: 2326977.179 ops/s
Iteration  10: 2128849.384 ops/s
Iteration  11: 2233049.212 ops/s
Iteration  12: 2170131.620 ops/s
Iteration  13: 2159947.184 ops/s
Iteration  14: 2189706.877 ops/s
Iteration  15: 2156664.447 ops/s
Iteration  16: 2185786.113 ops/s
Iteration  17: 2263319.068 ops/s
Iteration  18: 2131539.774 ops/s
Iteration  19: 2271064.804 ops/s
Iteration  20: 2278224.402 ops/s
Iteration  21: 2132053.080 ops/s
Iteration  22: 2266335.939 ops/s
Iteration  23: 2127815.619 ops/s
Iteration  24: 2281072.416 ops/s
Iteration  25: 2209218.359 ops/s
Iteration  26: 2232509.704 ops/s
Iteration  27: 2255456.609 ops/s
Iteration  28: 2097515.677 ops/s
Iteration  29: 2197316.046 ops/s
Iteration  30: 2238361.501 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNextTest._Benchmark.benchmark_syncFused":
  2205340.272 ±(99.9%) 42589.205 ops/s [Average]
  (min, avg, max) = (2097515.677, 2205340.272, 2326977.179), stdev = 63745.523
  CI (99.9%): [2162751.066, 2247929.477] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
FlowableDoAfterNextTest._Benchmark.benchmark_syncFused  thrpt   30  2205340.272 ± 42589.205  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStreamTest._Benchmark.benchmark_range$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStreamTest._Benchmark.benchmark_range

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 60464.450 ops/s
# Warmup Iteration   2: 316123.833 ops/s
# Warmup Iteration   3: 454103.175 ops/s
# Warmup Iteration   4: 476816.441 ops/s
# Warmup Iteration   5: 493083.510 ops/s
# Warmup Iteration   6: 486944.891 ops/s
# Warmup Iteration   7: 489917.406 ops/s
# Warmup Iteration   8: 466334.148 ops/s
# Warmup Iteration   9: 440915.312 ops/s
# Warmup Iteration  10: 475015.105 ops/s
# Warmup Iteration  11: 495314.702 ops/s
# Warmup Iteration  12: 497218.865 ops/s
# Warmup Iteration  13: 508897.163 ops/s
# Warmup Iteration  14: 485900.527 ops/s
# Warmup Iteration  15: 488828.859 ops/s
# Warmup Iteration  16: 500656.007 ops/s
# Warmup Iteration  17: 484393.588 ops/s
# Warmup Iteration  18: 492264.569 ops/s
# Warmup Iteration  19: 510631.314 ops/s
# Warmup Iteration  20: 476999.012 ops/s
# Warmup Iteration  21: 515833.112 ops/s
# Warmup Iteration  22: 486524.183 ops/s
# Warmup Iteration  23: 482597.873 ops/s
# Warmup Iteration  24: 512191.828 ops/s
# Warmup Iteration  25: 479657.335 ops/s
# Warmup Iteration  26: 501709.934 ops/s
# Warmup Iteration  27: 493934.605 ops/s
# Warmup Iteration  28: 484011.571 ops/s
# Warmup Iteration  29: 499789.736 ops/s
# Warmup Iteration  30: 484274.434 ops/s
Iteration   1: 494312.072 ops/s
Iteration   2: 509545.908 ops/s
Iteration   3: 487111.958 ops/s
Iteration   4: 492350.911 ops/s
Iteration   5: 500953.889 ops/s
Iteration   6: 478491.877 ops/s
Iteration   7: 504275.641 ops/s
Iteration   8: 491114.637 ops/s
Iteration   9: 497376.241 ops/s
Iteration  10: 490909.600 ops/s
Iteration  11: 505769.902 ops/s
Iteration  12: 485360.743 ops/s
Iteration  13: 496827.305 ops/s
Iteration  14: 486278.850 ops/s
Iteration  15: 482256.063 ops/s
Iteration  16: 490682.860 ops/s
Iteration  17: 516113.112 ops/s
Iteration  18: 476742.215 ops/s
Iteration  19: 508814.287 ops/s
Iteration  20: 488511.312 ops/s
Iteration  21: 501780.659 ops/s
Iteration  22: 497621.093 ops/s
Iteration  23: 481426.397 ops/s
Iteration  24: 521409.376 ops/s
Iteration  25: 483940.436 ops/s
Iteration  26: 514600.962 ops/s
Iteration  27: 501991.083 ops/s
Iteration  28: 494405.177 ops/s
Iteration  29: 484792.667 ops/s
Iteration  30: 506386.696 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStreamTest._Benchmark.benchmark_range":
  495738.464 ±(99.9%) 7749.815 ops/s [Average]
  (min, avg, max) = (476742.215, 495738.464, 521409.376), stdev = 11599.560
  CI (99.9%): [487988.649, 503488.280] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score      Error  Units
FlowableFlatMapStreamTest._Benchmark.benchmark_range  thrpt   30  495738.464 ± 7749.815  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsTest._Benchmark.benchmark_unsubscribesFromUpstream$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsTest._Benchmark.benchmark_unsubscribesFromUpstream

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 493357.185 ops/s
# Warmup Iteration   2: 1983652.255 ops/s
# Warmup Iteration   3: 2536841.515 ops/s
# Warmup Iteration   4: 2762583.428 ops/s
# Warmup Iteration   5: 2948750.902 ops/s
# Warmup Iteration   6: 2922579.034 ops/s
# Warmup Iteration   7: 2279968.282 ops/s
# Warmup Iteration   8: 3073786.854 ops/s
# Warmup Iteration   9: 2893784.302 ops/s
# Warmup Iteration  10: 3047296.308 ops/s
# Warmup Iteration  11: 2981595.828 ops/s
# Warmup Iteration  12: 2936468.817 ops/s
# Warmup Iteration  13: 3008261.056 ops/s
# Warmup Iteration  14: 3041564.186 ops/s
# Warmup Iteration  15: 3007116.736 ops/s
# Warmup Iteration  16: 2923036.802 ops/s
# Warmup Iteration  17: 3095522.690 ops/s
# Warmup Iteration  18: 3037307.058 ops/s
# Warmup Iteration  19: 3010535.196 ops/s
# Warmup Iteration  20: 2955251.314 ops/s
# Warmup Iteration  21: 2994870.434 ops/s
# Warmup Iteration  22: 3050791.007 ops/s
# Warmup Iteration  23: 2919519.928 ops/s
# Warmup Iteration  24: 2934717.748 ops/s
# Warmup Iteration  25: 3072030.810 ops/s
# Warmup Iteration  26: 2941885.022 ops/s
# Warmup Iteration  27: 3083599.782 ops/s
# Warmup Iteration  28: 2960479.287 ops/s
# Warmup Iteration  29: 2987590.166 ops/s
# Warmup Iteration  30: 3096739.520 ops/s
Iteration   1: 2915822.015 ops/s
Iteration   2: 3097616.602 ops/s
Iteration   3: 3024103.569 ops/s
Iteration   4: 2994070.430 ops/s
Iteration   5: 3059451.805 ops/s
Iteration   6: 2867190.468 ops/s
Iteration   7: 3035756.051 ops/s
Iteration   8: 3031855.035 ops/s
Iteration   9: 3004806.072 ops/s
Iteration  10: 3092614.438 ops/s
Iteration  11: 2912045.725 ops/s
Iteration  12: 3027147.663 ops/s
Iteration  13: 2928185.040 ops/s
Iteration  14: 2950652.254 ops/s
Iteration  15: 3094380.707 ops/s
Iteration  16: 2847316.952 ops/s
Iteration  17: 3082875.289 ops/s
Iteration  18: 3066179.352 ops/s
Iteration  19: 2984438.339 ops/s
Iteration  20: 3141328.431 ops/s
Iteration  21: 3121770.144 ops/s
Iteration  22: 2893922.801 ops/s
Iteration  23: 3097787.456 ops/s
Iteration  24: 2956397.421 ops/s
Iteration  25: 3077230.432 ops/s
Iteration  26: 2881870.794 ops/s
Iteration  27: 2962176.731 ops/s
Iteration  28: 3092313.682 ops/s
Iteration  29: 2974872.916 ops/s
Iteration  30: 3017372.551 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsTest._Benchmark.benchmark_unsubscribesFromUpstream":
  3007785.039 ±(99.9%) 54866.865 ops/s [Average]
  (min, avg, max) = (2847316.952, 3007785.039, 3141328.431), stdev = 82122.147
  CI (99.9%): [2952918.174, 3062651.904] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score       Error  Units
FlowableIgnoreElementsTest._Benchmark.benchmark_unsubscribesFromUpstream  thrpt   30  3007785.039 ± 54866.865  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableMapOptionalTest._Benchmark.benchmark_allPresentConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableMapOptionalTest._Benchmark.benchmark_allPresentConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 280151.385 ops/s
# Warmup Iteration   2: 2157222.330 ops/s
# Warmup Iteration   3: 3516774.093 ops/s
# Warmup Iteration   4: 3230574.147 ops/s
# Warmup Iteration   5: 3290516.728 ops/s
# Warmup Iteration   6: 3434919.579 ops/s
# Warmup Iteration   7: 3424126.785 ops/s
# Warmup Iteration   8: 3232777.073 ops/s
# Warmup Iteration   9: 3369121.603 ops/s
# Warmup Iteration  10: 3002504.702 ops/s
# Warmup Iteration  11: 3242910.709 ops/s
# Warmup Iteration  12: 3382985.271 ops/s
# Warmup Iteration  13: 3440326.712 ops/s
# Warmup Iteration  14: 3252422.426 ops/s
# Warmup Iteration  15: 3342131.020 ops/s
# Warmup Iteration  16: 3502080.547 ops/s
# Warmup Iteration  17: 3235241.782 ops/s
# Warmup Iteration  18: 3464242.350 ops/s
# Warmup Iteration  19: 3305327.331 ops/s
# Warmup Iteration  20: 3484303.819 ops/s
# Warmup Iteration  21: 3427815.159 ops/s
# Warmup Iteration  22: 3346057.563 ops/s
# Warmup Iteration  23: 3472311.548 ops/s
# Warmup Iteration  24: 3432729.899 ops/s
# Warmup Iteration  25: 3288483.221 ops/s
# Warmup Iteration  26: 3450703.591 ops/s
# Warmup Iteration  27: 3342869.529 ops/s
# Warmup Iteration  28: 3360573.994 ops/s
# Warmup Iteration  29: 3323280.424 ops/s
# Warmup Iteration  30: 3400081.182 ops/s
Iteration   1: 3323563.684 ops/s
Iteration   2: 3529843.597 ops/s
Iteration   3: 3381460.780 ops/s
Iteration   4: 3328401.710 ops/s
Iteration   5: 3423022.901 ops/s
Iteration   6: 3411639.986 ops/s
Iteration   7: 3316485.196 ops/s
Iteration   8: 3436699.708 ops/s
Iteration   9: 3272701.412 ops/s
Iteration  10: 3502016.995 ops/s
Iteration  11: 3320411.535 ops/s
Iteration  12: 3325689.323 ops/s
Iteration  13: 3351589.449 ops/s
Iteration  14: 3317557.072 ops/s
Iteration  15: 3471455.076 ops/s
Iteration  16: 3493361.881 ops/s
Iteration  17: 3248927.961 ops/s
Iteration  18: 3432833.426 ops/s
Iteration  19: 3399236.032 ops/s
Iteration  20: 3320582.352 ops/s
Iteration  21: 3459821.346 ops/s
Iteration  22: 3290345.987 ops/s
Iteration  23: 3380183.575 ops/s
Iteration  24: 3192158.024 ops/s
Iteration  25: 3429458.683 ops/s
Iteration  26: 3316382.948 ops/s
Iteration  27: 3360540.063 ops/s
Iteration  28: 3424944.307 ops/s
Iteration  29: 3311385.607 ops/s
Iteration  30: 3494087.759 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableMapOptionalTest._Benchmark.benchmark_allPresentConditional":
  3375559.613 ±(99.9%) 55040.416 ops/s [Average]
  (min, avg, max) = (3192158.024, 3375559.613, 3529843.597), stdev = 82381.910
  CI (99.9%): [3320519.196, 3430600.029] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
FlowableMapOptionalTest._Benchmark.benchmark_allPresentConditional  thrpt   30  3375559.613 ± 55040.416  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableMapOptionalTest._Benchmark.benchmark_mixedConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableMapOptionalTest._Benchmark.benchmark_mixedConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 307305.487 ops/s
# Warmup Iteration   2: 1762554.706 ops/s
# Warmup Iteration   3: 3177666.579 ops/s
# Warmup Iteration   4: 2520892.857 ops/s
# Warmup Iteration   5: 3000879.735 ops/s
# Warmup Iteration   6: 2967928.300 ops/s
# Warmup Iteration   7: 2998176.636 ops/s
# Warmup Iteration   8: 3071330.736 ops/s
# Warmup Iteration   9: 3048720.853 ops/s
# Warmup Iteration  10: 2951306.172 ops/s
# Warmup Iteration  11: 2929441.393 ops/s
# Warmup Iteration  12: 3066227.202 ops/s
# Warmup Iteration  13: 3026428.555 ops/s
# Warmup Iteration  14: 3180386.358 ops/s
# Warmup Iteration  15: 3026417.036 ops/s
# Warmup Iteration  16: 2972102.417 ops/s
# Warmup Iteration  17: 3178361.254 ops/s
# Warmup Iteration  18: 3056364.094 ops/s
# Warmup Iteration  19: 3066052.200 ops/s
# Warmup Iteration  20: 3041504.133 ops/s
# Warmup Iteration  21: 3116764.499 ops/s
# Warmup Iteration  22: 2923566.487 ops/s
# Warmup Iteration  23: 2943764.961 ops/s
# Warmup Iteration  24: 3087568.894 ops/s
# Warmup Iteration  25: 3163510.148 ops/s
# Warmup Iteration  26: 3032832.761 ops/s
# Warmup Iteration  27: 3076394.555 ops/s
# Warmup Iteration  28: 2941103.330 ops/s
# Warmup Iteration  29: 3164584.175 ops/s
# Warmup Iteration  30: 3151210.537 ops/s
Iteration   1: 2936962.728 ops/s
Iteration   2: 3139751.195 ops/s
Iteration   3: 3168447.240 ops/s
Iteration   4: 3096528.290 ops/s
Iteration   5: 3013236.868 ops/s
Iteration   6: 3115761.365 ops/s
Iteration   7: 3050869.604 ops/s
Iteration   8: 3013460.068 ops/s
Iteration   9: 3121985.190 ops/s
Iteration  10: 3045602.220 ops/s
Iteration  11: 3158074.953 ops/s
Iteration  12: 3038643.388 ops/s
Iteration  13: 3016188.794 ops/s
Iteration  14: 3123218.326 ops/s
Iteration  15: 3085656.856 ops/s
Iteration  16: 3006039.777 ops/s
Iteration  17: 3117105.857 ops/s
Iteration  18: 3044965.202 ops/s
Iteration  19: 2995744.201 ops/s
Iteration  20: 3159978.069 ops/s
Iteration  21: 2998079.272 ops/s
Iteration  22: 3046575.767 ops/s
Iteration  23: 3022888.445 ops/s
Iteration  24: 3091070.541 ops/s
Iteration  25: 3129874.497 ops/s
Iteration  26: 2981974.603 ops/s
Iteration  27: 3035987.638 ops/s
Iteration  28: 3075967.800 ops/s
Iteration  29: 2968871.726 ops/s
Iteration  30: 3007760.494 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableMapOptionalTest._Benchmark.benchmark_mixedConditional":
  3060242.366 ±(99.9%) 41622.309 ops/s [Average]
  (min, avg, max) = (2936962.728, 3060242.366, 3168447.240), stdev = 62298.317
  CI (99.9%): [3018620.057, 3101864.675] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
FlowableMapOptionalTest._Benchmark.benchmark_mixedConditional  thrpt   30  3060242.366 ± 41622.309  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_concatMapJustRange$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_concatMapJustRange

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 309585.485 ops/s
# Warmup Iteration   2: 1450316.794 ops/s
# Warmup Iteration   3: 1495683.962 ops/s
# Warmup Iteration   4: 1902290.222 ops/s
# Warmup Iteration   5: 1867509.495 ops/s
# Warmup Iteration   6: 1846191.234 ops/s
# Warmup Iteration   7: 1888223.961 ops/s
# Warmup Iteration   8: 1867781.406 ops/s
# Warmup Iteration   9: 1885085.644 ops/s
# Warmup Iteration  10: 1893943.952 ops/s
# Warmup Iteration  11: 1851487.488 ops/s
# Warmup Iteration  12: 1957786.766 ops/s
# Warmup Iteration  13: 1799267.291 ops/s
# Warmup Iteration  14: 1850175.942 ops/s
# Warmup Iteration  15: 1855684.948 ops/s
# Warmup Iteration  16: 1913640.336 ops/s
# Warmup Iteration  17: 1828959.169 ops/s
# Warmup Iteration  18: 1839738.840 ops/s
# Warmup Iteration  19: 1938255.480 ops/s
# Warmup Iteration  20: 1846643.295 ops/s
# Warmup Iteration  21: 1935893.851 ops/s
# Warmup Iteration  22: 1809541.650 ops/s
# Warmup Iteration  23: 1912634.233 ops/s
# Warmup Iteration  24: 1871746.354 ops/s
# Warmup Iteration  25: 1881388.076 ops/s
# Warmup Iteration  26: 1810143.441 ops/s
# Warmup Iteration  27: 1921438.868 ops/s
# Warmup Iteration  28: 1915780.122 ops/s
# Warmup Iteration  29: 1898974.517 ops/s
# Warmup Iteration  30: 1892953.148 ops/s
Iteration   1: 1824719.225 ops/s
Iteration   2: 1915681.381 ops/s
Iteration   3: 1880038.918 ops/s
Iteration   4: 1942443.832 ops/s
Iteration   5: 1822130.270 ops/s
Iteration   6: 1897434.135 ops/s
Iteration   7: 1860488.305 ops/s
Iteration   8: 1872589.797 ops/s
Iteration   9: 1949582.425 ops/s
Iteration  10: 1848082.627 ops/s
Iteration  11: 1965761.530 ops/s
Iteration  12: 1911837.023 ops/s
Iteration  13: 1827699.475 ops/s
Iteration  14: 1850345.721 ops/s
Iteration  15: 1896005.781 ops/s
Iteration  16: 1861620.866 ops/s
Iteration  17: 1954243.333 ops/s
Iteration  18: 1822813.619 ops/s
Iteration  19: 1915154.184 ops/s
Iteration  20: 1846371.106 ops/s
Iteration  21: 1920530.167 ops/s
Iteration  22: 1915044.264 ops/s
Iteration  23: 1847270.564 ops/s
Iteration  24: 1889721.251 ops/s
Iteration  25: 1909333.851 ops/s
Iteration  26: 1859833.840 ops/s
Iteration  27: 1860046.353 ops/s
Iteration  28: 1486212.675 ops/s
Iteration  29: 1898633.391 ops/s
Iteration  30: 1799355.067 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_concatMapJustRange":
  1868367.499 ±(99.9%) 56236.734 ops/s [Average]
  (min, avg, max) = (1486212.675, 1868367.499, 1965761.530), stdev = 84172.503
  CI (99.9%): [1812130.765, 1924604.233] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score       Error  Units
FlowableConcatMapSchedulerTest._Benchmark.benchmark_concatMapJustRange  thrpt   30  1868367.499 ± 56236.734  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableCollectWithCollectorTest._Benchmark.benchmark_collectorSupplierCrashToFlowable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableCollectWithCollectorTest._Benchmark.benchmark_collectorSupplierCrashToFlowable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 56145.742 ops/s
# Warmup Iteration   2: 545296.108 ops/s
# Warmup Iteration   3: 609552.649 ops/s
# Warmup Iteration   4: 573732.038 ops/s
# Warmup Iteration   5: 668411.697 ops/s
# Warmup Iteration   6: 560932.170 ops/s
# Warmup Iteration   7: 653631.338 ops/s
# Warmup Iteration   8: 687007.127 ops/s
# Warmup Iteration   9: 630200.149 ops/s
# Warmup Iteration  10: 689701.657 ops/s
# Warmup Iteration  11: 683355.085 ops/s
# Warmup Iteration  12: 639647.207 ops/s
# Warmup Iteration  13: 652324.869 ops/s
# Warmup Iteration  14: 670005.473 ops/s
# Warmup Iteration  15: 677955.110 ops/s
# Warmup Iteration  16: 649640.060 ops/s
# Warmup Iteration  17: 684955.141 ops/s
# Warmup Iteration  18: 709884.886 ops/s
# Warmup Iteration  19: 677749.435 ops/s
# Warmup Iteration  20: 706841.817 ops/s
# Warmup Iteration  21: 683401.627 ops/s
# Warmup Iteration  22: 696700.026 ops/s
# Warmup Iteration  23: 692652.943 ops/s
# Warmup Iteration  24: 686741.751 ops/s
# Warmup Iteration  25: 685015.708 ops/s
# Warmup Iteration  26: 680189.126 ops/s
# Warmup Iteration  27: 686922.817 ops/s
# Warmup Iteration  28: 684123.006 ops/s
# Warmup Iteration  29: 695151.796 ops/s
# Warmup Iteration  30: 713937.765 ops/s
Iteration   1: 680987.372 ops/s
Iteration   2: 719669.409 ops/s
Iteration   3: 688048.879 ops/s
Iteration   4: 702086.051 ops/s
Iteration   5: 684149.618 ops/s
Iteration   6: 693832.457 ops/s
Iteration   7: 693397.315 ops/s
Iteration   8: 694593.108 ops/s
Iteration   9: 716931.514 ops/s
Iteration  10: 679762.688 ops/s
Iteration  11: 682359.032 ops/s
Iteration  12: 699115.684 ops/s
Iteration  13: 675294.284 ops/s
Iteration  14: 706145.205 ops/s
Iteration  15: 690151.768 ops/s
Iteration  16: 687395.567 ops/s
Iteration  17: 704231.331 ops/s
Iteration  18: 690857.493 ops/s
Iteration  19: 698972.704 ops/s
Iteration  20: 684580.011 ops/s
Iteration  21: 719248.079 ops/s
Iteration  22: 686126.955 ops/s
Iteration  23: 689507.000 ops/s
Iteration  24: 713051.544 ops/s
Iteration  25: 683142.841 ops/s
Iteration  26: 725210.705 ops/s
Iteration  27: 666164.631 ops/s
Iteration  28: 701004.714 ops/s
Iteration  29: 674259.033 ops/s
Iteration  30: 688689.045 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableCollectWithCollectorTest._Benchmark.benchmark_collectorSupplierCrashToFlowable":
  693965.535 ±(99.9%) 9703.512 ops/s [Average]
  (min, avg, max) = (666164.631, 693965.535, 725210.705), stdev = 14523.761
  CI (99.9%): [684262.022, 703669.047] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                Mode  Cnt       Score      Error  Units
FlowableCollectWithCollectorTest._Benchmark.benchmark_collectorSupplierCrashToFlowable  thrpt   30  693965.535 ± 9703.512  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOnTest._Benchmark.benchmark_requestExactCompletesImmediately$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOnTest._Benchmark.benchmark_requestExactCompletesImmediately

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 229298.655 ops/s
# Warmup Iteration   2: 796539.500 ops/s
# Warmup Iteration   3: 1329916.391 ops/s
# Warmup Iteration   4: 1399587.294 ops/s
# Warmup Iteration   5: 1431074.902 ops/s
# Warmup Iteration   6: 1492123.012 ops/s
# Warmup Iteration   7: 1499953.706 ops/s
# Warmup Iteration   8: 1547111.837 ops/s
# Warmup Iteration   9: 1505617.501 ops/s
# Warmup Iteration  10: 1515975.192 ops/s
# Warmup Iteration  11: 1523239.637 ops/s
# Warmup Iteration  12: 1533100.894 ops/s
# Warmup Iteration  13: 1605788.403 ops/s
# Warmup Iteration  14: 1470500.213 ops/s
# Warmup Iteration  15: 1517336.944 ops/s
# Warmup Iteration  16: 1578663.866 ops/s
# Warmup Iteration  17: 1523826.190 ops/s
# Warmup Iteration  18: 1543613.601 ops/s
# Warmup Iteration  19: 1507342.097 ops/s
# Warmup Iteration  20: 1590742.609 ops/s
# Warmup Iteration  21: 1619459.584 ops/s
# Warmup Iteration  22: 1565922.952 ops/s
# Warmup Iteration  23: 1507811.779 ops/s
# Warmup Iteration  24: 1545361.825 ops/s
# Warmup Iteration  25: 1552968.384 ops/s
# Warmup Iteration  26: 1536657.049 ops/s
# Warmup Iteration  27: 1593711.251 ops/s
# Warmup Iteration  28: 1502227.441 ops/s
# Warmup Iteration  29: 1588058.884 ops/s
# Warmup Iteration  30: 1531588.263 ops/s
Iteration   1: 1532167.515 ops/s
Iteration   2: 1585674.170 ops/s
Iteration   3: 1538595.543 ops/s
Iteration   4: 1528644.708 ops/s
Iteration   5: 1520913.385 ops/s
Iteration   6: 1507327.517 ops/s
Iteration   7: 1595285.947 ops/s
Iteration   8: 1525007.693 ops/s
Iteration   9: 1577218.399 ops/s
Iteration  10: 1515498.228 ops/s
Iteration  11: 1578940.030 ops/s
Iteration  12: 1592615.950 ops/s
Iteration  13: 1480793.301 ops/s
Iteration  14: 1528127.203 ops/s
Iteration  15: 1563900.251 ops/s
Iteration  16: 1483284.924 ops/s
Iteration  17: 1570649.070 ops/s
Iteration  18: 1585683.363 ops/s
Iteration  19: 1578508.087 ops/s
Iteration  20: 1499601.082 ops/s
Iteration  21: 1554720.804 ops/s
Iteration  22: 1532272.234 ops/s
Iteration  23: 1304434.356 ops/s
Iteration  24: 1529548.247 ops/s
Iteration  25: 1552978.244 ops/s
Iteration  26: 1529413.794 ops/s
Iteration  27: 1495029.007 ops/s
Iteration  28: 1623123.188 ops/s
Iteration  29: 1529162.255 ops/s
Iteration  30: 1497670.691 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOnTest._Benchmark.benchmark_requestExactCompletesImmediately":
  1534559.640 ±(99.9%) 37824.255 ops/s [Average]
  (min, avg, max) = (1304434.356, 1534559.640, 1623123.188), stdev = 56613.569
  CI (99.9%): [1496735.385, 1572383.895] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score       Error  Units
FlowableObserveOnTest._Benchmark.benchmark_requestExactCompletesImmediately  thrpt   30  1534559.640 ± 37824.255  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_noCancelPrevious$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_noCancelPrevious

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 79952.704 ops/s
# Warmup Iteration   2: 432822.744 ops/s
# Warmup Iteration   3: 830197.277 ops/s
# Warmup Iteration   4: 764419.844 ops/s
# Warmup Iteration   5: 940883.274 ops/s
# Warmup Iteration   6: 948129.654 ops/s
# Warmup Iteration   7: 902144.223 ops/s
# Warmup Iteration   8: 917975.485 ops/s
# Warmup Iteration   9: 955845.680 ops/s
# Warmup Iteration  10: 958161.207 ops/s
# Warmup Iteration  11: 894702.868 ops/s
# Warmup Iteration  12: 960834.006 ops/s
# Warmup Iteration  13: 916969.093 ops/s
# Warmup Iteration  14: 926163.793 ops/s
# Warmup Iteration  15: 949880.023 ops/s
# Warmup Iteration  16: 900413.766 ops/s
# Warmup Iteration  17: 945679.300 ops/s
# Warmup Iteration  18: 886664.401 ops/s
# Warmup Iteration  19: 974602.259 ops/s
# Warmup Iteration  20: 924166.583 ops/s
# Warmup Iteration  21: 891749.673 ops/s
# Warmup Iteration  22: 958825.439 ops/s
# Warmup Iteration  23: 945988.519 ops/s
# Warmup Iteration  24: 903781.941 ops/s
# Warmup Iteration  25: 899982.683 ops/s
# Warmup Iteration  26: 926328.294 ops/s
# Warmup Iteration  27: 911623.342 ops/s
# Warmup Iteration  28: 896383.246 ops/s
# Warmup Iteration  29: 958474.485 ops/s
# Warmup Iteration  30: 923544.459 ops/s
Iteration   1: 892762.743 ops/s
Iteration   2: 935305.690 ops/s
Iteration   3: 904988.010 ops/s
Iteration   4: 945529.812 ops/s
Iteration   5: 924975.693 ops/s
Iteration   6: 866525.026 ops/s
Iteration   7: 933880.599 ops/s
Iteration   8: 874337.612 ops/s
Iteration   9: 897542.121 ops/s
Iteration  10: 949637.850 ops/s
Iteration  11: 918240.803 ops/s
Iteration  12: 897993.871 ops/s
Iteration  13: 927055.990 ops/s
Iteration  14: 897777.113 ops/s
Iteration  15: 887856.382 ops/s
Iteration  16: 935464.063 ops/s
Iteration  17: 912389.060 ops/s
Iteration  18: 909502.239 ops/s
Iteration  19: 900677.422 ops/s
Iteration  20: 898565.139 ops/s
Iteration  21: 942023.783 ops/s
Iteration  22: 882086.777 ops/s
Iteration  23: 938128.821 ops/s
Iteration  24: 875466.929 ops/s
Iteration  25: 913546.430 ops/s
Iteration  26: 906523.007 ops/s
Iteration  27: 887381.614 ops/s
Iteration  28: 904009.568 ops/s
Iteration  29: 924238.659 ops/s
Iteration  30: 905456.681 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_noCancelPrevious":
  909662.317 ±(99.9%) 14941.036 ops/s [Average]
  (min, avg, max) = (866525.026, 909662.317, 949637.850), stdev = 22363.041
  CI (99.9%): [894721.281, 924603.353] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score       Error  Units
FlowableConcatMapSchedulerTest._Benchmark.benchmark_noCancelPrevious  thrpt   30  909662.317 ± 14941.036  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ParallelCollectorTest._Benchmark.benchmark_collectorSupplierCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ParallelCollectorTest._Benchmark.benchmark_collectorSupplierCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 95850.068 ops/s
# Warmup Iteration   2: 295568.530 ops/s
# Warmup Iteration   3: 346003.723 ops/s
# Warmup Iteration   4: 366346.263 ops/s
# Warmup Iteration   5: 329434.460 ops/s
# Warmup Iteration   6: 369504.335 ops/s
# Warmup Iteration   7: 379412.467 ops/s
# Warmup Iteration   8: 369245.110 ops/s
# Warmup Iteration   9: 368848.543 ops/s
# Warmup Iteration  10: 387135.912 ops/s
# Warmup Iteration  11: 367110.313 ops/s
# Warmup Iteration  12: 365874.486 ops/s
# Warmup Iteration  13: 375148.306 ops/s
# Warmup Iteration  14: 368070.444 ops/s
# Warmup Iteration  15: 374323.361 ops/s
# Warmup Iteration  16: 366268.404 ops/s
# Warmup Iteration  17: 387245.795 ops/s
# Warmup Iteration  18: 396937.284 ops/s
# Warmup Iteration  19: 371390.581 ops/s
# Warmup Iteration  20: 387509.186 ops/s
# Warmup Iteration  21: 384155.358 ops/s
# Warmup Iteration  22: 391466.985 ops/s
# Warmup Iteration  23: 391204.218 ops/s
# Warmup Iteration  24: 379156.185 ops/s
# Warmup Iteration  25: 379301.200 ops/s
# Warmup Iteration  26: 386901.971 ops/s
# Warmup Iteration  27: 375367.586 ops/s
# Warmup Iteration  28: 391343.777 ops/s
# Warmup Iteration  29: 370586.210 ops/s
# Warmup Iteration  30: 387002.653 ops/s
Iteration   1: 392467.303 ops/s
Iteration   2: 378422.450 ops/s
Iteration   3: 380118.737 ops/s
Iteration   4: 376295.866 ops/s
Iteration   5: 386268.431 ops/s
Iteration   6: 383880.685 ops/s
Iteration   7: 366346.584 ops/s
Iteration   8: 388711.624 ops/s
Iteration   9: 374369.226 ops/s
Iteration  10: 400483.960 ops/s
Iteration  11: 373358.369 ops/s
Iteration  12: 383767.518 ops/s
Iteration  13: 385657.086 ops/s
Iteration  14: 382586.106 ops/s
Iteration  15: 374481.235 ops/s
Iteration  16: 386413.709 ops/s
Iteration  17: 372471.379 ops/s
Iteration  18: 287170.591 ops/s
Iteration  19: 374512.897 ops/s
Iteration  20: 390476.617 ops/s
Iteration  21: 375069.084 ops/s
Iteration  22: 375376.080 ops/s
Iteration  23: 390336.056 ops/s
Iteration  24: 376162.200 ops/s
Iteration  25: 384972.586 ops/s
Iteration  26: 378893.333 ops/s
Iteration  27: 391477.445 ops/s
Iteration  28: 375864.044 ops/s
Iteration  29: 386845.258 ops/s
Iteration  30: 377587.670 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ParallelCollectorTest._Benchmark.benchmark_collectorSupplierCrash":
  378361.471 ±(99.9%) 12552.231 ops/s [Average]
  (min, avg, max) = (287170.591, 378361.471, 400483.960), stdev = 18787.590
  CI (99.9%): [365809.240, 390913.702] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score       Error  Units
ParallelCollectorTest._Benchmark.benchmark_collectorSupplierCrash  thrpt   30  378361.471 ± 12552.231  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayEagerTruncateTest._Benchmark.benchmark_replayMaxInt$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayEagerTruncateTest._Benchmark.benchmark_replayMaxInt

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 249002.388 ops/s
# Warmup Iteration   2: 939746.757 ops/s
# Warmup Iteration   3: 1074454.398 ops/s
# Warmup Iteration   4: 1569901.112 ops/s
# Warmup Iteration   5: 1687677.878 ops/s
# Warmup Iteration   6: 1627845.874 ops/s
# Warmup Iteration   7: 1379396.312 ops/s
# Warmup Iteration   8: 1649773.477 ops/s
# Warmup Iteration   9: 1658898.621 ops/s
# Warmup Iteration  10: 1656095.019 ops/s
# Warmup Iteration  11: 1664428.709 ops/s
# Warmup Iteration  12: 1619076.728 ops/s
# Warmup Iteration  13: 1676416.353 ops/s
# Warmup Iteration  14: 1680409.563 ops/s
# Warmup Iteration  15: 1667552.165 ops/s
# Warmup Iteration  16: 1628778.658 ops/s
# Warmup Iteration  17: 1650950.344 ops/s
# Warmup Iteration  18: 1712533.349 ops/s
# Warmup Iteration  19: 1596017.625 ops/s
# Warmup Iteration  20: 1668955.332 ops/s
# Warmup Iteration  21: 1633347.386 ops/s
# Warmup Iteration  22: 1628489.955 ops/s
# Warmup Iteration  23: 1605668.219 ops/s
# Warmup Iteration  24: 1605144.919 ops/s
# Warmup Iteration  25: 1714482.267 ops/s
# Warmup Iteration  26: 1608510.704 ops/s
# Warmup Iteration  27: 1699323.256 ops/s
# Warmup Iteration  28: 1593147.003 ops/s
# Warmup Iteration  29: 1670061.750 ops/s
# Warmup Iteration  30: 1695000.581 ops/s
Iteration   1: 1644530.776 ops/s
Iteration   2: 1667538.030 ops/s
Iteration   3: 1632907.283 ops/s
Iteration   4: 1692919.070 ops/s
Iteration   5: 1668931.697 ops/s
Iteration   6: 1661426.131 ops/s
Iteration   7: 1683395.552 ops/s
Iteration   8: 1638350.056 ops/s
Iteration   9: 1688318.471 ops/s
Iteration  10: 1616063.215 ops/s
Iteration  11: 1679261.674 ops/s
Iteration  12: 1687015.723 ops/s
Iteration  13: 1624318.713 ops/s
Iteration  14: 1702088.059 ops/s
Iteration  15: 1662091.195 ops/s
Iteration  16: 1625888.264 ops/s
Iteration  17: 1658237.535 ops/s
Iteration  18: 1707967.386 ops/s
Iteration  19: 1635602.061 ops/s
Iteration  20: 1660893.178 ops/s
Iteration  21: 1632337.569 ops/s
Iteration  22: 1673390.412 ops/s
Iteration  23: 1715695.798 ops/s
Iteration  24: 1650889.197 ops/s
Iteration  25: 1679123.506 ops/s
Iteration  26: 1621578.847 ops/s
Iteration  27: 1731139.866 ops/s
Iteration  28: 1659525.098 ops/s
Iteration  29: 1640556.140 ops/s
Iteration  30: 1724502.166 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayEagerTruncateTest._Benchmark.benchmark_replayMaxInt":
  1665549.422 ±(99.9%) 21056.340 ops/s [Average]
  (min, avg, max) = (1616063.215, 1665549.422, 1731139.866), stdev = 31516.141
  CI (99.9%): [1644493.082, 1686605.762] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
FlowableReplayEagerTruncateTest._Benchmark.benchmark_replayMaxInt  thrpt   30  1665549.422 ± 21056.340  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayTest._Benchmark.benchmark_replayMaxInt$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayTest._Benchmark.benchmark_replayMaxInt

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 167004.810 ops/s
# Warmup Iteration   2: 687377.785 ops/s
# Warmup Iteration   3: 1222645.675 ops/s
# Warmup Iteration   4: 1413584.728 ops/s
# Warmup Iteration   5: 1450393.344 ops/s
# Warmup Iteration   6: 1565378.684 ops/s
# Warmup Iteration   7: 1690668.425 ops/s
# Warmup Iteration   8: 1647662.698 ops/s
# Warmup Iteration   9: 1651752.918 ops/s
# Warmup Iteration  10: 1699220.317 ops/s
# Warmup Iteration  11: 1719358.218 ops/s
# Warmup Iteration  12: 1579387.575 ops/s
# Warmup Iteration  13: 1706166.828 ops/s
# Warmup Iteration  14: 1620812.752 ops/s
# Warmup Iteration  15: 1700012.395 ops/s
# Warmup Iteration  16: 1733499.791 ops/s
# Warmup Iteration  17: 1606070.471 ops/s
# Warmup Iteration  18: 1719314.725 ops/s
# Warmup Iteration  19: 1583513.421 ops/s
# Warmup Iteration  20: 1641815.215 ops/s
# Warmup Iteration  21: 1672617.473 ops/s
# Warmup Iteration  22: 1669366.328 ops/s
# Warmup Iteration  23: 1674261.817 ops/s
# Warmup Iteration  24: 1601092.225 ops/s
# Warmup Iteration  25: 1705163.984 ops/s
# Warmup Iteration  26: 1742399.561 ops/s
# Warmup Iteration  27: 1638642.847 ops/s
# Warmup Iteration  28: 1654693.530 ops/s
# Warmup Iteration  29: 1660240.690 ops/s
# Warmup Iteration  30: 1683880.203 ops/s
Iteration   1: 1673246.546 ops/s
Iteration   2: 1620660.466 ops/s
Iteration   3: 1696184.358 ops/s
Iteration   4: 1629203.339 ops/s
Iteration   5: 1616951.409 ops/s
Iteration   6: 1704978.697 ops/s
Iteration   7: 1597827.747 ops/s
Iteration   8: 1680246.526 ops/s
Iteration   9: 1687356.373 ops/s
Iteration  10: 1640014.713 ops/s
Iteration  11: 1711920.808 ops/s
Iteration  12: 1433113.809 ops/s
Iteration  13: 1658008.225 ops/s
Iteration  14: 1678436.122 ops/s
Iteration  15: 1642326.501 ops/s
Iteration  16: 1689698.743 ops/s
Iteration  17: 1629116.052 ops/s
Iteration  18: 1681883.800 ops/s
Iteration  19: 1595028.885 ops/s
Iteration  20: 1692950.667 ops/s
Iteration  21: 1587660.294 ops/s
Iteration  22: 1696324.800 ops/s
Iteration  23: 1755151.347 ops/s
Iteration  24: 1609813.768 ops/s
Iteration  25: 1676925.600 ops/s
Iteration  26: 1654052.483 ops/s
Iteration  27: 1692215.903 ops/s
Iteration  28: 1614823.504 ops/s
Iteration  29: 1681599.283 ops/s
Iteration  30: 1678137.173 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayTest._Benchmark.benchmark_replayMaxInt":
  1653528.598 ±(99.9%) 38599.297 ops/s [Average]
  (min, avg, max) = (1433113.809, 1653528.598, 1755151.347), stdev = 57773.615
  CI (99.9%): [1614929.301, 1692127.895] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
FlowableReplayTest._Benchmark.benchmark_replayMaxInt  thrpt   30  1653528.598 ± 38599.297  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_singleInnerErrors$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_singleInnerErrors

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 54979.023 ops/s
# Warmup Iteration   2: 107980.312 ops/s
# Warmup Iteration   3: 320218.164 ops/s
# Warmup Iteration   4: 480320.772 ops/s
# Warmup Iteration   5: 437433.533 ops/s
# Warmup Iteration   6: 460231.707 ops/s
# Warmup Iteration   7: 476948.287 ops/s
# Warmup Iteration   8: 446841.571 ops/s
# Warmup Iteration   9: 460264.572 ops/s
# Warmup Iteration  10: 465644.649 ops/s
# Warmup Iteration  11: 453950.767 ops/s
# Warmup Iteration  12: 463862.581 ops/s
# Warmup Iteration  13: 489669.317 ops/s
# Warmup Iteration  14: 472238.753 ops/s
# Warmup Iteration  15: 468285.606 ops/s
# Warmup Iteration  16: 495975.162 ops/s
# Warmup Iteration  17: 488166.565 ops/s
# Warmup Iteration  18: 521987.573 ops/s
# Warmup Iteration  19: 491431.199 ops/s
# Warmup Iteration  20: 498944.406 ops/s
# Warmup Iteration  21: 492764.214 ops/s
# Warmup Iteration  22: 490975.050 ops/s
# Warmup Iteration  23: 526869.228 ops/s
# Warmup Iteration  24: 477633.317 ops/s
# Warmup Iteration  25: 484841.197 ops/s
# Warmup Iteration  26: 510288.237 ops/s
# Warmup Iteration  27: 475316.226 ops/s
# Warmup Iteration  28: 486179.479 ops/s
# Warmup Iteration  29: 504511.161 ops/s
# Warmup Iteration  30: 494223.009 ops/s
Iteration   1: 487889.167 ops/s
Iteration   2: 514082.743 ops/s
Iteration   3: 479869.570 ops/s
Iteration   4: 504688.507 ops/s
Iteration   5: 481489.957 ops/s
Iteration   6: 513254.947 ops/s
Iteration   7: 477974.851 ops/s
Iteration   8: 507720.617 ops/s
Iteration   9: 494546.094 ops/s
Iteration  10: 497581.593 ops/s
Iteration  11: 498340.024 ops/s
Iteration  12: 486476.757 ops/s
Iteration  13: 514584.605 ops/s
Iteration  14: 488988.221 ops/s
Iteration  15: 486567.127 ops/s
Iteration  16: 510720.399 ops/s
Iteration  17: 514073.893 ops/s
Iteration  18: 482945.653 ops/s
Iteration  19: 490714.119 ops/s
Iteration  20: 512645.626 ops/s
Iteration  21: 488232.860 ops/s
Iteration  22: 511913.003 ops/s
Iteration  23: 487533.968 ops/s
Iteration  24: 491507.156 ops/s
Iteration  25: 504914.322 ops/s
Iteration  26: 502259.262 ops/s
Iteration  27: 485034.528 ops/s
Iteration  28: 501231.504 ops/s
Iteration  29: 507535.102 ops/s
Iteration  30: 474183.528 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_singleInnerErrors":
  496649.990 ±(99.9%) 8387.152 ops/s [Average]
  (min, avg, max) = (474183.528, 496649.990, 514584.605), stdev = 12553.495
  CI (99.9%): [488262.838, 505037.142] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score      Error  Units
FlowableConcatMapSchedulerTest._Benchmark.benchmark_singleInnerErrors  thrpt   30  496649.990 ± 8387.152  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayEagerTruncateTest._Benchmark.benchmark_connectConsumerThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayEagerTruncateTest._Benchmark.benchmark_connectConsumerThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 62631.071 ops/s
# Warmup Iteration   2: 265279.990 ops/s
# Warmup Iteration   3: 308059.898 ops/s
# Warmup Iteration   4: 356153.672 ops/s
# Warmup Iteration   5: 348892.250 ops/s
# Warmup Iteration   6: 362225.732 ops/s
# Warmup Iteration   7: 397674.224 ops/s
# Warmup Iteration   8: 383478.011 ops/s
# Warmup Iteration   9: 398829.246 ops/s
# Warmup Iteration  10: 383972.191 ops/s
# Warmup Iteration  11: 388912.028 ops/s
# Warmup Iteration  12: 408601.003 ops/s
# Warmup Iteration  13: 372680.263 ops/s
# Warmup Iteration  14: 402925.580 ops/s
# Warmup Iteration  15: 387142.669 ops/s
# Warmup Iteration  16: 392940.055 ops/s
# Warmup Iteration  17: 407226.505 ops/s
# Warmup Iteration  18: 403772.407 ops/s
# Warmup Iteration  19: 394400.747 ops/s
# Warmup Iteration  20: 407363.343 ops/s
# Warmup Iteration  21: 416997.918 ops/s
# Warmup Iteration  22: 394084.790 ops/s
# Warmup Iteration  23: 399834.292 ops/s
# Warmup Iteration  24: 387195.724 ops/s
# Warmup Iteration  25: 399665.393 ops/s
# Warmup Iteration  26: 408862.108 ops/s
# Warmup Iteration  27: 387517.557 ops/s
# Warmup Iteration  28: 405259.024 ops/s
# Warmup Iteration  29: 397167.480 ops/s
# Warmup Iteration  30: 406399.072 ops/s
Iteration   1: 405919.976 ops/s
Iteration   2: 403700.868 ops/s
Iteration   3: 392236.373 ops/s
Iteration   4: 405820.394 ops/s
Iteration   5: 403847.051 ops/s
Iteration   6: 403844.957 ops/s
Iteration   7: 300308.105 ops/s
Iteration   8: 387882.392 ops/s
Iteration   9: 405877.479 ops/s
Iteration  10: 399876.889 ops/s
Iteration  11: 386553.350 ops/s
Iteration  12: 424993.085 ops/s
Iteration  13: 388062.872 ops/s
Iteration  14: 394937.684 ops/s
Iteration  15: 402918.378 ops/s
Iteration  16: 390215.616 ops/s
Iteration  17: 406865.228 ops/s
Iteration  18: 397465.140 ops/s
Iteration  19: 384531.724 ops/s
Iteration  20: 416432.450 ops/s
Iteration  21: 381979.937 ops/s
Iteration  22: 413365.445 ops/s
Iteration  23: 398503.934 ops/s
Iteration  24: 392042.714 ops/s
Iteration  25: 405085.754 ops/s
Iteration  26: 399116.531 ops/s
Iteration  27: 398597.634 ops/s
Iteration  28: 394844.050 ops/s
Iteration  29: 412264.677 ops/s
Iteration  30: 396286.713 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayEagerTruncateTest._Benchmark.benchmark_connectConsumerThrows":
  396479.247 ±(99.9%) 13787.176 ops/s [Average]
  (min, avg, max) = (300308.105, 396479.247, 424993.085), stdev = 20635.997
  CI (99.9%): [382692.071, 410266.422] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score       Error  Units
FlowableReplayEagerTruncateTest._Benchmark.benchmark_connectConsumerThrows  thrpt   30  396479.247 ± 13787.176  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayTest._Benchmark.benchmark_connectConsumerThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayTest._Benchmark.benchmark_connectConsumerThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 71746.611 ops/s
# Warmup Iteration   2: 221760.737 ops/s
# Warmup Iteration   3: 327931.189 ops/s
# Warmup Iteration   4: 365904.049 ops/s
# Warmup Iteration   5: 405725.182 ops/s
# Warmup Iteration   6: 379959.678 ops/s
# Warmup Iteration   7: 390524.558 ops/s
# Warmup Iteration   8: 384251.637 ops/s
# Warmup Iteration   9: 381398.279 ops/s
# Warmup Iteration  10: 382328.421 ops/s
# Warmup Iteration  11: 378579.734 ops/s
# Warmup Iteration  12: 374489.220 ops/s
# Warmup Iteration  13: 382798.851 ops/s
# Warmup Iteration  14: 396539.921 ops/s
# Warmup Iteration  15: 360231.323 ops/s
# Warmup Iteration  16: 388112.647 ops/s
# Warmup Iteration  17: 386659.709 ops/s
# Warmup Iteration  18: 385951.478 ops/s
# Warmup Iteration  19: 402030.029 ops/s
# Warmup Iteration  20: 405075.294 ops/s
# Warmup Iteration  21: 402799.553 ops/s
# Warmup Iteration  22: 401088.701 ops/s
# Warmup Iteration  23: 395805.351 ops/s
# Warmup Iteration  24: 402642.417 ops/s
# Warmup Iteration  25: 405561.691 ops/s
# Warmup Iteration  26: 384264.661 ops/s
# Warmup Iteration  27: 405380.729 ops/s
# Warmup Iteration  28: 390817.140 ops/s
# Warmup Iteration  29: 400199.643 ops/s
# Warmup Iteration  30: 401067.362 ops/s
Iteration   1: 395312.458 ops/s
Iteration   2: 408812.623 ops/s
Iteration   3: 394486.752 ops/s
Iteration   4: 400926.539 ops/s
Iteration   5: 410539.944 ops/s
Iteration   6: 388591.601 ops/s
Iteration   7: 404308.478 ops/s
Iteration   8: 403137.617 ops/s
Iteration   9: 405537.886 ops/s
Iteration  10: 394112.212 ops/s
Iteration  11: 395861.271 ops/s
Iteration  12: 404829.524 ops/s
Iteration  13: 391074.869 ops/s
Iteration  14: 410059.797 ops/s
Iteration  15: 390234.311 ops/s
Iteration  16: 405153.408 ops/s
Iteration  17: 394517.389 ops/s
Iteration  18: 408940.963 ops/s
Iteration  19: 411692.753 ops/s
Iteration  20: 378015.210 ops/s
Iteration  21: 408419.977 ops/s
Iteration  22: 396024.480 ops/s
Iteration  23: 392399.272 ops/s
Iteration  24: 395682.685 ops/s
Iteration  25: 401929.679 ops/s
Iteration  26: 416143.266 ops/s
Iteration  27: 410192.935 ops/s
Iteration  28: 395416.511 ops/s
Iteration  29: 417588.347 ops/s
Iteration  30: 418470.895 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayTest._Benchmark.benchmark_connectConsumerThrows":
  401613.788 ±(99.9%) 6403.389 ops/s [Average]
  (min, avg, max) = (378015.210, 401613.788, 418470.895), stdev = 9584.291
  CI (99.9%): [395210.400, 408017.177] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
FlowableReplayTest._Benchmark.benchmark_connectConsumerThrows  thrpt   30  401613.788 ± 6403.389  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_badRequest$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_badRequest

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 73516.804 ops/s
# Warmup Iteration   2: 128178.677 ops/s
# Warmup Iteration   3: 403581.578 ops/s
# Warmup Iteration   4: 429995.640 ops/s
# Warmup Iteration   5: 427000.622 ops/s
# Warmup Iteration   6: 480705.844 ops/s
# Warmup Iteration   7: 473579.561 ops/s
# Warmup Iteration   8: 499791.734 ops/s
# Warmup Iteration   9: 481920.185 ops/s
# Warmup Iteration  10: 496976.111 ops/s
# Warmup Iteration  11: 489766.246 ops/s
# Warmup Iteration  12: 480163.339 ops/s
# Warmup Iteration  13: 497659.240 ops/s
# Warmup Iteration  14: 482795.323 ops/s
# Warmup Iteration  15: 504667.949 ops/s
# Warmup Iteration  16: 500440.014 ops/s
# Warmup Iteration  17: 484187.813 ops/s
# Warmup Iteration  18: 518127.783 ops/s
# Warmup Iteration  19: 493915.135 ops/s
# Warmup Iteration  20: 508041.083 ops/s
# Warmup Iteration  21: 505666.784 ops/s
# Warmup Iteration  22: 501780.683 ops/s
# Warmup Iteration  23: 481258.841 ops/s
# Warmup Iteration  24: 506489.132 ops/s
# Warmup Iteration  25: 498156.272 ops/s
# Warmup Iteration  26: 511714.737 ops/s
# Warmup Iteration  27: 498469.087 ops/s
# Warmup Iteration  28: 503282.506 ops/s
# Warmup Iteration  29: 516976.214 ops/s
# Warmup Iteration  30: 501717.086 ops/s
Iteration   1: 511350.645 ops/s
Iteration   2: 372701.352 ops/s
Iteration   3: 503149.754 ops/s
Iteration   4: 518793.542 ops/s
Iteration   5: 496322.196 ops/s
Iteration   6: 485170.899 ops/s
Iteration   7: 524154.121 ops/s
Iteration   8: 510012.716 ops/s
Iteration   9: 494118.732 ops/s
Iteration  10: 502345.015 ops/s
Iteration  11: 516445.699 ops/s
Iteration  12: 492737.562 ops/s
Iteration  13: 521411.072 ops/s
Iteration  14: 509429.017 ops/s
Iteration  15: 502647.133 ops/s
Iteration  16: 500969.607 ops/s
Iteration  17: 494927.931 ops/s
Iteration  18: 505086.293 ops/s
Iteration  19: 523987.872 ops/s
Iteration  20: 482402.709 ops/s
Iteration  21: 514170.699 ops/s
Iteration  22: 494501.277 ops/s
Iteration  23: 513302.989 ops/s
Iteration  24: 486734.967 ops/s
Iteration  25: 499488.624 ops/s
Iteration  26: 492625.986 ops/s
Iteration  27: 513170.978 ops/s
Iteration  28: 513435.321 ops/s
Iteration  29: 522846.419 ops/s
Iteration  30: 497575.212 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_badRequest":
  500533.878 ±(99.9%) 17970.720 ops/s [Average]
  (min, avg, max) = (372701.352, 500533.878, 524154.121), stdev = 26897.730
  CI (99.9%): [482563.158, 518504.598] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score       Error  Units
FlowablePublishTest._Benchmark.benchmark_badRequest  thrpt   30  500533.878 ± 17970.720  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.schedulers.SingleSchedulerTest._Benchmark.benchmark_scheduleDirectDecoratesRunnable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.schedulers.SingleSchedulerTest._Benchmark.benchmark_scheduleDirectDecoratesRunnable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 28341.923 ops/s
# Warmup Iteration   2: 18814.003 ops/s
# Warmup Iteration   3: 19206.097 ops/s
# Warmup Iteration   4: 19930.282 ops/s
# Warmup Iteration   5: 20073.614 ops/s
# Warmup Iteration   6: 19995.298 ops/s
# Warmup Iteration   7: 25037.994 ops/s
# Warmup Iteration   8: 20063.980 ops/s
# Warmup Iteration   9: 20283.864 ops/s
# Warmup Iteration  10: 20217.912 ops/s
# Warmup Iteration  11: 20294.004 ops/s
# Warmup Iteration  12: 20246.990 ops/s
# Warmup Iteration  13: 20341.470 ops/s
# Warmup Iteration  14: 19995.165 ops/s
# Warmup Iteration  15: 20830.881 ops/s
# Warmup Iteration  16: 19504.392 ops/s
# Warmup Iteration  17: 20857.835 ops/s
# Warmup Iteration  18: 20107.369 ops/s
# Warmup Iteration  19: 20323.932 ops/s
# Warmup Iteration  20: 20570.122 ops/s
# Warmup Iteration  21: 20093.386 ops/s
# Warmup Iteration  22: 19558.821 ops/s
# Warmup Iteration  23: 20025.102 ops/s
# Warmup Iteration  24: 20188.319 ops/s
# Warmup Iteration  25: 19951.110 ops/s
# Warmup Iteration  26: 20571.060 ops/s
# Warmup Iteration  27: 20357.638 ops/s
# Warmup Iteration  28: 20658.182 ops/s
# Warmup Iteration  29: 19560.038 ops/s
# Warmup Iteration  30: 20426.337 ops/s
Iteration   1: 20171.912 ops/s
Iteration   2: 20292.135 ops/s
Iteration   3: 20831.363 ops/s
Iteration   4: 20343.403 ops/s
Iteration   5: 20528.495 ops/s
Iteration   6: 20150.322 ops/s
Iteration   7: 19996.751 ops/s
Iteration   8: 20320.093 ops/s
Iteration   9: 20352.730 ops/s
Iteration  10: 20370.850 ops/s
Iteration  11: 20006.140 ops/s
Iteration  12: 20339.775 ops/s
Iteration  13: 20039.910 ops/s
Iteration  14: 19741.672 ops/s
Iteration  15: 19885.362 ops/s
Iteration  16: 20799.399 ops/s
Iteration  17: 20117.511 ops/s
Iteration  18: 20621.532 ops/s
Iteration  19: 20298.234 ops/s
Iteration  20: 20005.769 ops/s
Iteration  21: 20329.329 ops/s
Iteration  22: 20289.030 ops/s
Iteration  23: 20499.749 ops/s
Iteration  24: 20256.177 ops/s
Iteration  25: 20682.344 ops/s
Iteration  26: 20462.996 ops/s
Iteration  27: 20504.038 ops/s
Iteration  28: 20094.137 ops/s
Iteration  29: 20120.322 ops/s
Iteration  30: 19737.725 ops/s


Result "io.reactivex.rxjava3.internal.schedulers.SingleSchedulerTest._Benchmark.benchmark_scheduleDirectDecoratesRunnable":
  20272.973 ±(99.9%) 184.581 ops/s [Average]
  (min, avg, max) = (19737.725, 20272.973, 20831.363), stdev = 276.272
  CI (99.9%): [20088.393, 20457.554] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt      Score     Error  Units
SingleSchedulerTest._Benchmark.benchmark_scheduleDirectDecoratesRunnable  thrpt   30  20272.973 ± 184.581  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipLastTimedTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipLastTimedTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 360808.461 ops/s
# Warmup Iteration   2: 1235736.266 ops/s
# Warmup Iteration   3: 1851116.842 ops/s
# Warmup Iteration   4: 1803984.385 ops/s
# Warmup Iteration   5: 1759526.579 ops/s
# Warmup Iteration   6: 1829553.027 ops/s
# Warmup Iteration   7: 1835282.575 ops/s
# Warmup Iteration   8: 1696533.421 ops/s
# Warmup Iteration   9: 1832366.704 ops/s
# Warmup Iteration  10: 1796593.680 ops/s
# Warmup Iteration  11: 1758719.475 ops/s
# Warmup Iteration  12: 1789808.609 ops/s
# Warmup Iteration  13: 1760384.932 ops/s
# Warmup Iteration  14: 1766296.016 ops/s
# Warmup Iteration  15: 1804153.177 ops/s
# Warmup Iteration  16: 1679287.328 ops/s
# Warmup Iteration  17: 1823235.432 ops/s
# Warmup Iteration  18: 1785220.438 ops/s
# Warmup Iteration  19: 1788261.956 ops/s
# Warmup Iteration  20: 1725009.039 ops/s
# Warmup Iteration  21: 1782429.573 ops/s
# Warmup Iteration  22: 1865909.215 ops/s
# Warmup Iteration  23: 1744372.434 ops/s
# Warmup Iteration  24: 1794969.621 ops/s
# Warmup Iteration  25: 1784409.685 ops/s
# Warmup Iteration  26: 1834492.859 ops/s
# Warmup Iteration  27: 1510656.034 ops/s
# Warmup Iteration  28: 1804012.361 ops/s
# Warmup Iteration  29: 1754403.370 ops/s
# Warmup Iteration  30: 1830709.042 ops/s
Iteration   1: 1779147.765 ops/s
Iteration   2: 1805100.853 ops/s
Iteration   3: 1748597.860 ops/s
Iteration   4: 1811437.952 ops/s
Iteration   5: 1739376.752 ops/s
Iteration   6: 1762302.392 ops/s
Iteration   7: 1781797.130 ops/s
Iteration   8: 1745024.304 ops/s
Iteration   9: 1820727.895 ops/s
Iteration  10: 1843627.065 ops/s
Iteration  11: 1726970.131 ops/s
Iteration  12: 1782596.068 ops/s
Iteration  13: 1775950.663 ops/s
Iteration  14: 1787354.986 ops/s
Iteration  15: 1786308.383 ops/s
Iteration  16: 1752860.988 ops/s
Iteration  17: 1844260.608 ops/s
Iteration  18: 1750021.387 ops/s
Iteration  19: 1760412.868 ops/s
Iteration  20: 1694970.071 ops/s
Iteration  21: 1766442.274 ops/s
Iteration  22: 1856214.995 ops/s
Iteration  23: 1728511.107 ops/s
Iteration  24: 1860425.721 ops/s
Iteration  25: 1734133.701 ops/s
Iteration  26: 1906895.949 ops/s
Iteration  27: 1824120.645 ops/s
Iteration  28: 1720052.970 ops/s
Iteration  29: 1771483.722 ops/s
Iteration  30: 1753131.114 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipLastTimedTest._Benchmark.benchmark_dispose":
  1780675.277 ±(99.9%) 32221.036 ops/s [Average]
  (min, avg, max) = (1694970.071, 1780675.277, 1906895.949), stdev = 48226.933
  CI (99.9%): [1748454.241, 1812896.313] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
FlowableSkipLastTimedTest._Benchmark.benchmark_dispose  thrpt   30  1780675.277 ± 32221.036  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableUnsubscribeOnTest._Benchmark.benchmark_signalAfterDispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableUnsubscribeOnTest._Benchmark.benchmark_signalAfterDispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 14495.647 ops/s
# Warmup Iteration   2: 33652.648 ops/s
# Warmup Iteration   3: 64770.466 ops/s
# Warmup Iteration   4: 65830.243 ops/s
# Warmup Iteration   5: 64647.242 ops/s
# Warmup Iteration   6: 72581.230 ops/s
# Warmup Iteration   7: 76520.624 ops/s
# Warmup Iteration   8: 72857.274 ops/s
# Warmup Iteration   9: 78541.903 ops/s
# Warmup Iteration  10: 76983.804 ops/s
# Warmup Iteration  11: 74138.830 ops/s
# Warmup Iteration  12: 78220.850 ops/s
# Warmup Iteration  13: 71132.457 ops/s
# Warmup Iteration  14: 75869.083 ops/s
# Warmup Iteration  15: 73534.002 ops/s
# Warmup Iteration  16: 71717.687 ops/s
# Warmup Iteration  17: 71065.991 ops/s
# Warmup Iteration  18: 76035.639 ops/s
# Warmup Iteration  19: 78781.951 ops/s
# Warmup Iteration  20: 77930.390 ops/s
# Warmup Iteration  21: 74450.662 ops/s
# Warmup Iteration  22: 79771.455 ops/s
# Warmup Iteration  23: 70890.300 ops/s
# Warmup Iteration  24: 70245.401 ops/s
# Warmup Iteration  25: 69107.927 ops/s
# Warmup Iteration  26: 78698.050 ops/s
# Warmup Iteration  27: 75393.566 ops/s
# Warmup Iteration  28: 77594.718 ops/s
# Warmup Iteration  29: 77047.527 ops/s
# Warmup Iteration  30: 77635.935 ops/s
Iteration   1: 74715.464 ops/s
Iteration   2: 73337.602 ops/s
Iteration   3: 76714.652 ops/s
Iteration   4: 70003.713 ops/s
Iteration   5: 78423.363 ops/s
Iteration   6: 71441.309 ops/s
Iteration   7: 78999.591 ops/s
Iteration   8: 77434.720 ops/s
Iteration   9: 79868.526 ops/s
Iteration  10: 79126.196 ops/s
Iteration  11: 75143.165 ops/s
Iteration  12: 77755.764 ops/s
Iteration  13: 69845.399 ops/s
Iteration  14: 73570.613 ops/s
Iteration  15: 73302.247 ops/s
Iteration  16: 74888.705 ops/s
Iteration  17: 78140.991 ops/s
Iteration  18: 78027.989 ops/s
Iteration  19: 78458.751 ops/s
Iteration  20: 75270.283 ops/s
Iteration  21: 73453.261 ops/s
Iteration  22: 75864.021 ops/s
Iteration  23: 79645.834 ops/s
Iteration  24: 73976.185 ops/s
Iteration  25: 76328.478 ops/s
Iteration  26: 77298.484 ops/s
Iteration  27: 72639.609 ops/s
Iteration  28: 81201.245 ops/s
Iteration  29: 75784.870 ops/s
Iteration  30: 83742.697 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableUnsubscribeOnTest._Benchmark.benchmark_signalAfterDispose":
  76146.791 ±(99.9%) 2157.524 ops/s [Average]
  (min, avg, max) = (69845.399, 76146.791, 83742.697), stdev = 3229.281
  CI (99.9%): [73989.267, 78304.315] (assumes normal distribution)


# Run complete. Total time: 00:01:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt      Score      Error  Units
FlowableUnsubscribeOnTest._Benchmark.benchmark_signalAfterDispose  thrpt   30  76146.791 ± 2157.524  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRefCountTest._Benchmark.benchmark_byCount$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRefCountTest._Benchmark.benchmark_byCount

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 43959.851 ops/s
# Warmup Iteration   2: 323639.549 ops/s
# Warmup Iteration   3: 322747.837 ops/s
# Warmup Iteration   4: 407253.765 ops/s
# Warmup Iteration   5: 471436.404 ops/s
# Warmup Iteration   6: 465478.997 ops/s
# Warmup Iteration   7: 454504.038 ops/s
# Warmup Iteration   8: 470579.868 ops/s
# Warmup Iteration   9: 452829.511 ops/s
# Warmup Iteration  10: 458800.305 ops/s
# Warmup Iteration  11: 471666.143 ops/s
# Warmup Iteration  12: 460919.359 ops/s
# Warmup Iteration  13: 462227.675 ops/s
# Warmup Iteration  14: 478424.015 ops/s
# Warmup Iteration  15: 450301.482 ops/s
# Warmup Iteration  16: 459893.394 ops/s
# Warmup Iteration  17: 478684.725 ops/s
# Warmup Iteration  18: 464766.360 ops/s
# Warmup Iteration  19: 448054.137 ops/s
# Warmup Iteration  20: 395755.418 ops/s
# Warmup Iteration  21: 463480.597 ops/s
# Warmup Iteration  22: 445745.129 ops/s
# Warmup Iteration  23: 466351.563 ops/s
# Warmup Iteration  24: 451143.908 ops/s
# Warmup Iteration  25: 464369.128 ops/s
# Warmup Iteration  26: 462431.720 ops/s
# Warmup Iteration  27: 452274.794 ops/s
# Warmup Iteration  28: 446116.405 ops/s
# Warmup Iteration  29: 473195.911 ops/s
# Warmup Iteration  30: 437515.984 ops/s
Iteration   1: 475905.432 ops/s
Iteration   2: 457017.662 ops/s
Iteration   3: 469670.992 ops/s
Iteration   4: 471972.530 ops/s
Iteration   5: 450064.439 ops/s
Iteration   6: 463944.073 ops/s
Iteration   7: 459531.492 ops/s
Iteration   8: 456919.488 ops/s
Iteration   9: 465277.983 ops/s
Iteration  10: 449907.328 ops/s
Iteration  11: 474524.315 ops/s
Iteration  12: 452320.053 ops/s
Iteration  13: 476145.329 ops/s
Iteration  14: 447843.000 ops/s
Iteration  15: 465724.587 ops/s
Iteration  16: 471338.303 ops/s
Iteration  17: 461898.672 ops/s
Iteration  18: 461589.199 ops/s
Iteration  19: 459667.626 ops/s
Iteration  20: 455821.511 ops/s
Iteration  21: 466559.201 ops/s
Iteration  22: 474408.617 ops/s
Iteration  23: 454861.928 ops/s
Iteration  24: 468569.029 ops/s
Iteration  25: 463568.326 ops/s
Iteration  26: 467144.765 ops/s
Iteration  27: 455932.224 ops/s
Iteration  28: 450361.520 ops/s
Iteration  29: 480461.045 ops/s
Iteration  30: 448512.278 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableRefCountTest._Benchmark.benchmark_byCount":
  462582.098 ±(99.9%) 6191.063 ops/s [Average]
  (min, avg, max) = (447843.000, 462582.098, 480461.045), stdev = 9266.493
  CI (99.9%): [456391.035, 468773.161] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score      Error  Units
ObservableRefCountTest._Benchmark.benchmark_byCount  thrpt   30  462582.098 ± 6191.063  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableFromCallableTest._Benchmark.benchmark_fromCallable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableFromCallableTest._Benchmark.benchmark_fromCallable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 4485011.500 ops/s
# Warmup Iteration   2: 8061497.759 ops/s
# Warmup Iteration   3: 11657856.289 ops/s
# Warmup Iteration   4: 11105866.366 ops/s
# Warmup Iteration   5: 11574976.046 ops/s
# Warmup Iteration   6: 11137166.214 ops/s
# Warmup Iteration   7: 11560931.648 ops/s
# Warmup Iteration   8: 11996959.877 ops/s
# Warmup Iteration   9: 11825707.172 ops/s
# Warmup Iteration  10: 11442984.890 ops/s
# Warmup Iteration  11: 11520032.506 ops/s
# Warmup Iteration  12: 11259221.476 ops/s
# Warmup Iteration  13: 11640520.666 ops/s
# Warmup Iteration  14: 11341370.584 ops/s
# Warmup Iteration  15: 11267851.859 ops/s
# Warmup Iteration  16: 11590356.316 ops/s
# Warmup Iteration  17: 11151246.821 ops/s
# Warmup Iteration  18: 11874303.036 ops/s
# Warmup Iteration  19: 11047300.415 ops/s
# Warmup Iteration  20: 11844120.720 ops/s
# Warmup Iteration  21: 12207550.054 ops/s
# Warmup Iteration  22: 11572485.800 ops/s
# Warmup Iteration  23: 11159780.939 ops/s
# Warmup Iteration  24: 11447633.693 ops/s
# Warmup Iteration  25: 11652013.388 ops/s
# Warmup Iteration  26: 11260569.022 ops/s
# Warmup Iteration  27: 11687017.979 ops/s
# Warmup Iteration  28: 11288994.932 ops/s
# Warmup Iteration  29: 11894537.467 ops/s
# Warmup Iteration  30: 11322190.134 ops/s
Iteration   1: 11930132.768 ops/s
Iteration   2: 12126989.077 ops/s
Iteration   3: 11029925.101 ops/s
Iteration   4: 11838570.629 ops/s
Iteration   5: 11429072.925 ops/s
Iteration   6: 11223734.851 ops/s
Iteration   7: 11869807.838 ops/s
Iteration   8: 11377708.156 ops/s
Iteration   9: 11542791.304 ops/s
Iteration  10: 11267637.218 ops/s
Iteration  11: 11566487.816 ops/s
Iteration  12: 11775397.535 ops/s
Iteration  13: 11164267.755 ops/s
Iteration  14: 11497903.609 ops/s
Iteration  15: 11826926.407 ops/s
Iteration  16: 11115548.410 ops/s
Iteration  17: 11316944.480 ops/s
Iteration  18: 11759792.756 ops/s
Iteration  19: 11381974.275 ops/s
Iteration  20: 11917110.310 ops/s
Iteration  21: 11170118.316 ops/s
Iteration  22: 11668614.277 ops/s
Iteration  23: 11324838.543 ops/s
Iteration  24: 11559229.558 ops/s
Iteration  25: 11435420.358 ops/s
Iteration  26: 11292384.295 ops/s
Iteration  27: 11683582.723 ops/s
Iteration  28: 11663060.026 ops/s
Iteration  29: 11378113.264 ops/s
Iteration  30: 11267655.990 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableFromCallableTest._Benchmark.benchmark_fromCallable":
  11513391.352 ±(99.9%) 187403.313 ops/s [Average]
  (min, avg, max) = (11029925.101, 11513391.352, 12126989.077), stdev = 280496.478
  CI (99.9%): [11325988.039, 11700794.665] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt         Score        Error  Units
CompletableFromCallableTest._Benchmark.benchmark_fromCallable  thrpt   30  11513391.352 ± 187403.313  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableFromCallableTest._Benchmark.benchmark_fromCallableInvokesLazy$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableFromCallableTest._Benchmark.benchmark_fromCallableInvokesLazy

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2405145.574 ops/s
# Warmup Iteration   2: 6174802.688 ops/s
# Warmup Iteration   3: 8937561.646 ops/s
# Warmup Iteration   4: 8459896.431 ops/s
# Warmup Iteration   5: 8422419.313 ops/s
# Warmup Iteration   6: 8645480.796 ops/s
# Warmup Iteration   7: 8674371.347 ops/s
# Warmup Iteration   8: 8406906.245 ops/s
# Warmup Iteration   9: 8637201.740 ops/s
# Warmup Iteration  10: 8799986.863 ops/s
# Warmup Iteration  11: 8484149.666 ops/s
# Warmup Iteration  12: 8544986.722 ops/s
# Warmup Iteration  13: 8590366.771 ops/s
# Warmup Iteration  14: 8304371.438 ops/s
# Warmup Iteration  15: 7184743.967 ops/s
# Warmup Iteration  16: 8385659.017 ops/s
# Warmup Iteration  17: 8776207.167 ops/s
# Warmup Iteration  18: 8561150.607 ops/s
# Warmup Iteration  19: 8683346.711 ops/s
# Warmup Iteration  20: 8446863.611 ops/s
# Warmup Iteration  21: 8758479.107 ops/s
# Warmup Iteration  22: 8648092.035 ops/s
# Warmup Iteration  23: 8575972.977 ops/s
# Warmup Iteration  24: 8716995.111 ops/s
# Warmup Iteration  25: 8303192.413 ops/s
# Warmup Iteration  26: 8749519.342 ops/s
# Warmup Iteration  27: 8756299.963 ops/s
# Warmup Iteration  28: 8297420.193 ops/s
# Warmup Iteration  29: 8794704.798 ops/s
# Warmup Iteration  30: 8626781.212 ops/s
Iteration   1: 8523741.816 ops/s
Iteration   2: 8726955.929 ops/s
Iteration   3: 8493886.967 ops/s
Iteration   4: 8612173.911 ops/s
Iteration   5: 8708657.830 ops/s
Iteration   6: 8338442.406 ops/s
Iteration   7: 8582632.444 ops/s
Iteration   8: 8490369.332 ops/s
Iteration   9: 8607586.762 ops/s
Iteration  10: 8440164.790 ops/s
Iteration  11: 8594605.094 ops/s
Iteration  12: 8623794.611 ops/s
Iteration  13: 8715692.303 ops/s
Iteration  14: 8789704.956 ops/s
Iteration  15: 8550190.071 ops/s
Iteration  16: 8397823.670 ops/s
Iteration  17: 8664289.409 ops/s
Iteration  18: 8650908.069 ops/s
Iteration  19: 8602364.589 ops/s
Iteration  20: 8708256.628 ops/s
Iteration  21: 8538335.163 ops/s
Iteration  22: 8976978.595 ops/s
Iteration  23: 8199500.977 ops/s
Iteration  24: 8425901.594 ops/s
Iteration  25: 8659413.608 ops/s
Iteration  26: 8408092.744 ops/s
Iteration  27: 8626424.086 ops/s
Iteration  28: 8546318.943 ops/s
Iteration  29: 8303761.475 ops/s
Iteration  30: 8645916.606 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableFromCallableTest._Benchmark.benchmark_fromCallableInvokesLazy":
  8571762.846 ±(99.9%) 104522.366 ops/s [Average]
  (min, avg, max) = (8199500.977, 8571762.846, 8976978.595), stdev = 156444.169
  CI (99.9%): [8467240.479, 8676285.212] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score        Error  Units
CompletableFromCallableTest._Benchmark.benchmark_fromCallableInvokesLazy  thrpt   30  8571762.846 ± 104522.366  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableFromCallableTest._Benchmark.benchmark_fromCallableTwice$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableFromCallableTest._Benchmark.benchmark_fromCallableTwice

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1717170.181 ops/s
# Warmup Iteration   2: 3291710.638 ops/s
# Warmup Iteration   3: 4348968.915 ops/s
# Warmup Iteration   4: 4582647.465 ops/s
# Warmup Iteration   5: 4621265.292 ops/s
# Warmup Iteration   6: 4348305.836 ops/s
# Warmup Iteration   7: 4638329.981 ops/s
# Warmup Iteration   8: 4539456.206 ops/s
# Warmup Iteration   9: 4480041.567 ops/s
# Warmup Iteration  10: 4638089.675 ops/s
# Warmup Iteration  11: 4343926.097 ops/s
# Warmup Iteration  12: 4487643.282 ops/s
# Warmup Iteration  13: 4399206.074 ops/s
# Warmup Iteration  14: 4480262.240 ops/s
# Warmup Iteration  15: 4585656.069 ops/s
# Warmup Iteration  16: 4442559.796 ops/s
# Warmup Iteration  17: 4545708.423 ops/s
# Warmup Iteration  18: 4659755.802 ops/s
# Warmup Iteration  19: 4474079.404 ops/s
# Warmup Iteration  20: 4611211.110 ops/s
# Warmup Iteration  21: 4341871.807 ops/s
# Warmup Iteration  22: 4491736.178 ops/s
# Warmup Iteration  23: 4588284.177 ops/s
# Warmup Iteration  24: 4405933.960 ops/s
# Warmup Iteration  25: 4480474.031 ops/s
# Warmup Iteration  26: 4521051.822 ops/s
# Warmup Iteration  27: 4351585.659 ops/s
# Warmup Iteration  28: 4527670.282 ops/s
# Warmup Iteration  29: 4618738.370 ops/s
# Warmup Iteration  30: 4558194.206 ops/s
Iteration   1: 4752885.343 ops/s
Iteration   2: 4416860.906 ops/s
Iteration   3: 4545296.163 ops/s
Iteration   4: 4355135.837 ops/s
Iteration   5: 4593662.923 ops/s
Iteration   6: 4581235.910 ops/s
Iteration   7: 4372711.515 ops/s
Iteration   8: 4738302.762 ops/s
Iteration   9: 4404663.087 ops/s
Iteration  10: 4479121.782 ops/s
Iteration  11: 4391559.498 ops/s
Iteration  12: 4565700.665 ops/s
Iteration  13: 4427846.690 ops/s
Iteration  14: 4480060.062 ops/s
Iteration  15: 4563517.755 ops/s
Iteration  16: 4625500.251 ops/s
Iteration  17: 4266133.939 ops/s
Iteration  18: 4750422.326 ops/s
Iteration  19: 4494190.832 ops/s
Iteration  20: 4464923.906 ops/s
Iteration  21: 4567617.602 ops/s
Iteration  22: 4521810.707 ops/s
Iteration  23: 4514583.392 ops/s
Iteration  24: 4343234.646 ops/s
Iteration  25: 4604711.635 ops/s
Iteration  26: 4523244.366 ops/s
Iteration  27: 4342046.981 ops/s
Iteration  28: 4472388.101 ops/s
Iteration  29: 4531017.609 ops/s
Iteration  30: 4761595.774 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableFromCallableTest._Benchmark.benchmark_fromCallableTwice":
  4515066.099 ±(99.9%) 86094.485 ops/s [Average]
  (min, avg, max) = (4266133.939, 4515066.099, 4761595.774), stdev = 128862.182
  CI (99.9%): [4428971.614, 4601160.584] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
CompletableFromCallableTest._Benchmark.benchmark_fromCallableTwice  thrpt   30  4515066.099 ± 86094.485  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableCreateTest._Benchmark.benchmark_onCompleteThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableCreateTest._Benchmark.benchmark_onCompleteThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 457067.626 ops/s
# Warmup Iteration   2: 607901.354 ops/s
# Warmup Iteration   3: 666752.749 ops/s
# Warmup Iteration   4: 709172.072 ops/s
# Warmup Iteration   5: 692620.255 ops/s
# Warmup Iteration   6: 695255.500 ops/s
# Warmup Iteration   7: 635268.720 ops/s
# Warmup Iteration   8: 679429.861 ops/s
# Warmup Iteration   9: 662191.115 ops/s
# Warmup Iteration  10: 530308.290 ops/s
# Warmup Iteration  11: 698828.649 ops/s
# Warmup Iteration  12: 721677.259 ops/s
# Warmup Iteration  13: 699041.656 ops/s
# Warmup Iteration  14: 702827.839 ops/s
# Warmup Iteration  15: 685802.827 ops/s
# Warmup Iteration  16: 715041.265 ops/s
# Warmup Iteration  17: 719002.764 ops/s
# Warmup Iteration  18: 778889.144 ops/s
# Warmup Iteration  19: 753409.243 ops/s
# Warmup Iteration  20: 709279.541 ops/s
# Warmup Iteration  21: 764808.513 ops/s
# Warmup Iteration  22: 751405.283 ops/s
# Warmup Iteration  23: 749315.980 ops/s
# Warmup Iteration  24: 730118.889 ops/s
# Warmup Iteration  25: 734591.145 ops/s
# Warmup Iteration  26: 749543.035 ops/s
# Warmup Iteration  27: 729224.523 ops/s
# Warmup Iteration  28: 734406.842 ops/s
# Warmup Iteration  29: 760822.316 ops/s
# Warmup Iteration  30: 726813.943 ops/s
Iteration   1: 761621.908 ops/s
Iteration   2: 719045.879 ops/s
Iteration   3: 744237.625 ops/s
Iteration   4: 754114.469 ops/s
Iteration   5: 709435.799 ops/s
Iteration   6: 752295.538 ops/s
Iteration   7: 734135.789 ops/s
Iteration   8: 755823.227 ops/s
Iteration   9: 725675.504 ops/s
Iteration  10: 734749.382 ops/s
Iteration  11: 762050.526 ops/s
Iteration  12: 716231.563 ops/s
Iteration  13: 765149.191 ops/s
Iteration  14: 751961.369 ops/s
Iteration  15: 723685.765 ops/s
Iteration  16: 744872.225 ops/s
Iteration  17: 738855.167 ops/s
Iteration  18: 742796.924 ops/s
Iteration  19: 769130.958 ops/s
Iteration  20: 710822.973 ops/s
Iteration  21: 783233.315 ops/s
Iteration  22: 716279.923 ops/s
Iteration  23: 737185.855 ops/s
Iteration  24: 741936.819 ops/s
Iteration  25: 773504.213 ops/s
Iteration  26: 711710.154 ops/s
Iteration  27: 760872.509 ops/s
Iteration  28: 746734.571 ops/s
Iteration  29: 719976.080 ops/s
Iteration  30: 758561.293 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableCreateTest._Benchmark.benchmark_onCompleteThrows":
  742222.884 ±(99.9%) 13588.893 ops/s [Average]
  (min, avg, max) = (709435.799, 742222.884, 783233.315), stdev = 20339.217
  CI (99.9%): [728633.990, 755811.777] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score       Error  Units
CompletableCreateTest._Benchmark.benchmark_onCompleteThrows  thrpt   30  742222.884 ± 13588.893  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableCreateTest._Benchmark.benchmark_onErrorThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableCreateTest._Benchmark.benchmark_onErrorThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 201576.001 ops/s
# Warmup Iteration   2: 339821.721 ops/s
# Warmup Iteration   3: 340044.404 ops/s
# Warmup Iteration   4: 360477.042 ops/s
# Warmup Iteration   5: 342729.471 ops/s
# Warmup Iteration   6: 342675.221 ops/s
# Warmup Iteration   7: 359853.018 ops/s
# Warmup Iteration   8: 323757.287 ops/s
# Warmup Iteration   9: 355918.657 ops/s
# Warmup Iteration  10: 357988.783 ops/s
# Warmup Iteration  11: 350491.419 ops/s
# Warmup Iteration  12: 356935.986 ops/s
# Warmup Iteration  13: 346704.603 ops/s
# Warmup Iteration  14: 364964.090 ops/s
# Warmup Iteration  15: 347541.491 ops/s
# Warmup Iteration  16: 351549.434 ops/s
# Warmup Iteration  17: 382452.921 ops/s
# Warmup Iteration  18: 377420.140 ops/s
# Warmup Iteration  19: 362328.414 ops/s
# Warmup Iteration  20: 382608.869 ops/s
# Warmup Iteration  21: 366852.732 ops/s
# Warmup Iteration  22: 363621.361 ops/s
# Warmup Iteration  23: 382835.603 ops/s
# Warmup Iteration  24: 379132.669 ops/s
# Warmup Iteration  25: 375048.035 ops/s
# Warmup Iteration  26: 357444.865 ops/s
# Warmup Iteration  27: 386474.036 ops/s
# Warmup Iteration  28: 370017.396 ops/s
# Warmup Iteration  29: 383138.295 ops/s
# Warmup Iteration  30: 377440.112 ops/s
Iteration   1: 368199.212 ops/s
Iteration   2: 372946.782 ops/s
Iteration   3: 369461.007 ops/s
Iteration   4: 377949.111 ops/s
Iteration   5: 393005.216 ops/s
Iteration   6: 360556.807 ops/s
Iteration   7: 372916.321 ops/s
Iteration   8: 377246.489 ops/s
Iteration   9: 373838.405 ops/s
Iteration  10: 395362.666 ops/s
Iteration  11: 368290.258 ops/s
Iteration  12: 368576.572 ops/s
Iteration  13: 375026.600 ops/s
Iteration  14: 374833.392 ops/s
Iteration  15: 365952.450 ops/s
Iteration  16: 366878.789 ops/s
Iteration  17: 376541.083 ops/s
Iteration  18: 379718.019 ops/s
Iteration  19: 364215.590 ops/s
Iteration  20: 380353.832 ops/s
Iteration  21: 379013.444 ops/s
Iteration  22: 370913.998 ops/s
Iteration  23: 382399.703 ops/s
Iteration  24: 374657.480 ops/s
Iteration  25: 377934.773 ops/s
Iteration  26: 376076.531 ops/s
Iteration  27: 384124.740 ops/s
Iteration  28: 377598.966 ops/s
Iteration  29: 378989.342 ops/s
Iteration  30: 378692.715 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableCreateTest._Benchmark.benchmark_onErrorThrows":
  375409.010 ±(99.9%) 5060.491 ops/s [Average]
  (min, avg, max) = (360556.807, 375409.010, 395362.666), stdev = 7574.305
  CI (99.9%): [370348.519, 380469.500] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score      Error  Units
CompletableCreateTest._Benchmark.benchmark_onErrorThrows  thrpt   30  375409.010 ± 5060.491  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.NotificationLiteTest._Benchmark.benchmark_disposableNotification$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.NotificationLiteTest._Benchmark.benchmark_disposableNotification

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 975321.715 ops/s
# Warmup Iteration   2: 2150919.829 ops/s
# Warmup Iteration   3: 2784493.894 ops/s
# Warmup Iteration   4: 2762763.021 ops/s
# Warmup Iteration   5: 2186087.664 ops/s
# Warmup Iteration   6: 2743727.980 ops/s
# Warmup Iteration   7: 2721744.852 ops/s
# Warmup Iteration   8: 2861121.555 ops/s
# Warmup Iteration   9: 2792708.922 ops/s
# Warmup Iteration  10: 2799363.675 ops/s
# Warmup Iteration  11: 2836796.102 ops/s
# Warmup Iteration  12: 2787004.977 ops/s
# Warmup Iteration  13: 2863225.246 ops/s
# Warmup Iteration  14: 2738209.364 ops/s
# Warmup Iteration  15: 2856224.698 ops/s
# Warmup Iteration  16: 2747325.239 ops/s
# Warmup Iteration  17: 2853336.269 ops/s
# Warmup Iteration  18: 2875038.992 ops/s
# Warmup Iteration  19: 2743769.399 ops/s
# Warmup Iteration  20: 2734570.966 ops/s
# Warmup Iteration  21: 2837477.025 ops/s
# Warmup Iteration  22: 2698225.662 ops/s
# Warmup Iteration  23: 2895652.987 ops/s
# Warmup Iteration  24: 2839492.146 ops/s
# Warmup Iteration  25: 2722928.722 ops/s
# Warmup Iteration  26: 2738847.153 ops/s
# Warmup Iteration  27: 2823274.955 ops/s
# Warmup Iteration  28: 2713293.766 ops/s
# Warmup Iteration  29: 2838457.051 ops/s
# Warmup Iteration  30: 2826356.394 ops/s
Iteration   1: 2830649.042 ops/s
Iteration   2: 2786365.019 ops/s
Iteration   3: 2808953.812 ops/s
Iteration   4: 2838535.916 ops/s
Iteration   5: 2827735.787 ops/s
Iteration   6: 2814528.670 ops/s
Iteration   7: 2819589.430 ops/s
Iteration   8: 2780528.158 ops/s
Iteration   9: 2831317.472 ops/s
Iteration  10: 2786320.021 ops/s
Iteration  11: 2743672.909 ops/s
Iteration  12: 2854999.581 ops/s
Iteration  13: 2733542.832 ops/s
Iteration  14: 2828758.032 ops/s
Iteration  15: 2716426.552 ops/s
Iteration  16: 2774791.088 ops/s
Iteration  17: 2857480.598 ops/s
Iteration  18: 2749533.044 ops/s
Iteration  19: 2869309.757 ops/s
Iteration  20: 2728853.424 ops/s
Iteration  21: 2779842.366 ops/s
Iteration  22: 2905256.588 ops/s
Iteration  23: 2720524.445 ops/s
Iteration  24: 2868969.286 ops/s
Iteration  25: 2695286.398 ops/s
Iteration  26: 2781764.037 ops/s
Iteration  27: 2899684.819 ops/s
Iteration  28: 2765681.431 ops/s
Iteration  29: 2730147.542 ops/s
Iteration  30: 2803800.989 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.NotificationLiteTest._Benchmark.benchmark_disposableNotification":
  2797761.635 ±(99.9%) 37239.019 ops/s [Average]
  (min, avg, max) = (2695286.398, 2797761.635, 2905256.588), stdev = 55737.614
  CI (99.9%): [2760522.616, 2835000.653] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
NotificationLiteTest._Benchmark.benchmark_disposableNotification  thrpt   30  2797761.635 ± 37239.019  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.disposables.DisposableTest._Benchmark.benchmark_empty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.disposables.DisposableTest._Benchmark.benchmark_empty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 12626330.326 ops/s
# Warmup Iteration   2: 15192498.159 ops/s
# Warmup Iteration   3: 21501072.824 ops/s
# Warmup Iteration   4: 22098331.904 ops/s
# Warmup Iteration   5: 21902528.382 ops/s
# Warmup Iteration   6: 22727854.459 ops/s
# Warmup Iteration   7: 22306270.397 ops/s
# Warmup Iteration   8: 21721719.070 ops/s
# Warmup Iteration   9: 22364023.358 ops/s
# Warmup Iteration  10: 22163982.402 ops/s
# Warmup Iteration  11: 21776840.304 ops/s
# Warmup Iteration  12: 22076336.580 ops/s
# Warmup Iteration  13: 22371090.301 ops/s
# Warmup Iteration  14: 22477351.330 ops/s
# Warmup Iteration  15: 21698982.547 ops/s
# Warmup Iteration  16: 22558661.186 ops/s
# Warmup Iteration  17: 21873453.933 ops/s
# Warmup Iteration  18: 21997525.584 ops/s
# Warmup Iteration  19: 23289257.058 ops/s
# Warmup Iteration  20: 22212408.600 ops/s
# Warmup Iteration  21: 22504151.580 ops/s
# Warmup Iteration  22: 21602442.253 ops/s
# Warmup Iteration  23: 22371019.042 ops/s
# Warmup Iteration  24: 21908937.424 ops/s
# Warmup Iteration  25: 22286650.920 ops/s
# Warmup Iteration  26: 22974819.034 ops/s
# Warmup Iteration  27: 21303664.159 ops/s
# Warmup Iteration  28: 22954519.369 ops/s
# Warmup Iteration  29: 23022237.370 ops/s
# Warmup Iteration  30: 22183376.826 ops/s
Iteration   1: 21907952.436 ops/s
Iteration   2: 22522615.606 ops/s
Iteration   3: 22971425.581 ops/s
Iteration   4: 22510654.882 ops/s
Iteration   5: 22185884.340 ops/s
Iteration   6: 22072907.748 ops/s
Iteration   7: 21616037.138 ops/s
Iteration   8: 22525826.866 ops/s
Iteration   9: 21554375.512 ops/s
Iteration  10: 21653627.669 ops/s
Iteration  11: 22788540.595 ops/s
Iteration  12: 21954548.088 ops/s
Iteration  13: 22161480.239 ops/s
Iteration  14: 22106423.389 ops/s
Iteration  15: 22162259.240 ops/s
Iteration  16: 22587510.640 ops/s
Iteration  17: 21112520.713 ops/s
Iteration  18: 22621211.931 ops/s
Iteration  19: 21583787.151 ops/s
Iteration  20: 21769532.076 ops/s
Iteration  21: 23489225.438 ops/s
Iteration  22: 22112260.565 ops/s
Iteration  23: 22306862.318 ops/s
Iteration  24: 22715016.403 ops/s
Iteration  25: 21989809.888 ops/s
Iteration  26: 22474180.679 ops/s
Iteration  27: 23430535.946 ops/s
Iteration  28: 22474458.626 ops/s
Iteration  29: 21727143.315 ops/s
Iteration  30: 22484662.495 ops/s


Result "io.reactivex.rxjava3.disposables.DisposableTest._Benchmark.benchmark_empty":
  22252442.584 ±(99.9%) 360235.471 ops/s [Average]
  (min, avg, max) = (21112520.713, 22252442.584, 23489225.438), stdev = 539183.535
  CI (99.9%): [21892207.113, 22612678.055] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                   Mode  Cnt         Score        Error  Units
DisposableTest._Benchmark.benchmark_empty  thrpt   30  22252442.584 ± 360235.471  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.observers.BlockingMultiObserverTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.observers.BlockingMultiObserverTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 9744951.666 ops/s
# Warmup Iteration   2: 11646916.388 ops/s
# Warmup Iteration   3: 18232469.982 ops/s
# Warmup Iteration   4: 17201992.055 ops/s
# Warmup Iteration   5: 18449276.933 ops/s
# Warmup Iteration   6: 17867683.213 ops/s
# Warmup Iteration   7: 17735257.829 ops/s
# Warmup Iteration   8: 17218395.507 ops/s
# Warmup Iteration   9: 18388661.414 ops/s
# Warmup Iteration  10: 17798697.019 ops/s
# Warmup Iteration  11: 17479401.176 ops/s
# Warmup Iteration  12: 18037912.681 ops/s
# Warmup Iteration  13: 17409345.313 ops/s
# Warmup Iteration  14: 17492189.222 ops/s
# Warmup Iteration  15: 18011281.904 ops/s
# Warmup Iteration  16: 17814266.457 ops/s
# Warmup Iteration  17: 17786075.189 ops/s
# Warmup Iteration  18: 17521319.811 ops/s
# Warmup Iteration  19: 18472128.337 ops/s
# Warmup Iteration  20: 17715881.111 ops/s
# Warmup Iteration  21: 17212320.299 ops/s
# Warmup Iteration  22: 17873082.666 ops/s
# Warmup Iteration  23: 17053869.110 ops/s
# Warmup Iteration  24: 17655177.474 ops/s
# Warmup Iteration  25: 17487815.125 ops/s
# Warmup Iteration  26: 18294974.810 ops/s
# Warmup Iteration  27: 18303200.926 ops/s
# Warmup Iteration  28: 17469569.953 ops/s
# Warmup Iteration  29: 18316042.761 ops/s
# Warmup Iteration  30: 17664279.331 ops/s
Iteration   1: 17204423.489 ops/s
Iteration   2: 17741214.985 ops/s
Iteration   3: 17685070.843 ops/s
Iteration   4: 17817258.205 ops/s
Iteration   5: 18290960.396 ops/s
Iteration   6: 17157550.533 ops/s
Iteration   7: 18240964.074 ops/s
Iteration   8: 17200180.452 ops/s
Iteration   9: 17985859.329 ops/s
Iteration  10: 17769246.015 ops/s
Iteration  11: 17788607.268 ops/s
Iteration  12: 17936694.336 ops/s
Iteration  13: 17375970.747 ops/s
Iteration  14: 18441978.129 ops/s
Iteration  15: 17928104.065 ops/s
Iteration  16: 17787485.152 ops/s
Iteration  17: 17484513.290 ops/s
Iteration  18: 18070383.497 ops/s
Iteration  19: 17720941.896 ops/s
Iteration  20: 17818004.695 ops/s
Iteration  21: 17715769.287 ops/s
Iteration  22: 18087555.840 ops/s
Iteration  23: 17563232.885 ops/s
Iteration  24: 17895954.284 ops/s
Iteration  25: 17947146.725 ops/s
Iteration  26: 17648573.106 ops/s
Iteration  27: 18013384.296 ops/s
Iteration  28: 17772549.327 ops/s
Iteration  29: 18016720.287 ops/s
Iteration  30: 18297752.338 ops/s


Result "io.reactivex.rxjava3.internal.observers.BlockingMultiObserverTest._Benchmark.benchmark_dispose":
  17813468.326 ±(99.9%) 213338.932 ops/s [Average]
  (min, avg, max) = (17157550.533, 17813468.326, 18441978.129), stdev = 319315.694
  CI (99.9%): [17600129.394, 18026807.257] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt         Score        Error  Units
BlockingMultiObserverTest._Benchmark.benchmark_dispose  thrpt   30  17813468.326 ± 213338.932  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeCallbackObserverTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeCallbackObserverTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 7640553.646 ops/s
# Warmup Iteration   2: 10729839.980 ops/s
# Warmup Iteration   3: 11866718.091 ops/s
# Warmup Iteration   4: 12735802.316 ops/s
# Warmup Iteration   5: 13701632.579 ops/s
# Warmup Iteration   6: 12807801.395 ops/s
# Warmup Iteration   7: 12925870.825 ops/s
# Warmup Iteration   8: 13774894.356 ops/s
# Warmup Iteration   9: 13061402.695 ops/s
# Warmup Iteration  10: 13092228.835 ops/s
# Warmup Iteration  11: 13267764.085 ops/s
# Warmup Iteration  12: 13184668.497 ops/s
# Warmup Iteration  13: 13460681.177 ops/s
# Warmup Iteration  14: 13058995.660 ops/s
# Warmup Iteration  15: 13639352.234 ops/s
# Warmup Iteration  16: 13664222.604 ops/s
# Warmup Iteration  17: 13978767.625 ops/s
# Warmup Iteration  18: 12628952.820 ops/s
# Warmup Iteration  19: 13827571.093 ops/s
# Warmup Iteration  20: 12871956.757 ops/s
# Warmup Iteration  21: 13335850.453 ops/s
# Warmup Iteration  22: 13199758.482 ops/s
# Warmup Iteration  23: 13141582.270 ops/s
# Warmup Iteration  24: 13475885.358 ops/s
# Warmup Iteration  25: 13065527.866 ops/s
# Warmup Iteration  26: 13186272.520 ops/s
# Warmup Iteration  27: 13683620.355 ops/s
# Warmup Iteration  28: 13035698.132 ops/s
# Warmup Iteration  29: 13585140.771 ops/s
# Warmup Iteration  30: 12923837.748 ops/s
Iteration   1: 13638807.770 ops/s
Iteration   2: 12722453.456 ops/s
Iteration   3: 13332918.525 ops/s
Iteration   4: 13499405.525 ops/s
Iteration   5: 13042146.006 ops/s
Iteration   6: 13617425.848 ops/s
Iteration   7: 12904396.387 ops/s
Iteration   8: 13461677.287 ops/s
Iteration   9: 12886281.239 ops/s
Iteration  10: 13694830.852 ops/s
Iteration  11: 13227515.849 ops/s
Iteration  12: 12919170.982 ops/s
Iteration  13: 13369412.338 ops/s
Iteration  14: 12742425.189 ops/s
Iteration  15: 13043876.722 ops/s
Iteration  16: 13089445.304 ops/s
Iteration  17: 13596637.206 ops/s
Iteration  18: 13614212.136 ops/s
Iteration  19: 12986159.123 ops/s
Iteration  20: 13592769.660 ops/s
Iteration  21: 13250224.930 ops/s
Iteration  22: 13557363.959 ops/s
Iteration  23: 12553405.239 ops/s
Iteration  24: 13125357.483 ops/s
Iteration  25: 13542983.056 ops/s
Iteration  26: 10998023.490 ops/s
Iteration  27: 13191319.192 ops/s
Iteration  28: 13199406.213 ops/s
Iteration  29: 12782956.637 ops/s
Iteration  30: 13783537.615 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeCallbackObserverTest._Benchmark.benchmark_dispose":
  13165551.507 ±(99.9%) 353282.426 ops/s [Average]
  (min, avg, max) = (10998023.490, 13165551.507, 13783537.615), stdev = 528776.544
  CI (99.9%): [12812269.081, 13518833.933] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt         Score        Error  Units
MaybeCallbackObserverTest._Benchmark.benchmark_dispose  thrpt   30  13165551.507 ± 353282.426  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_windowAbandonmentCancelsUpstreamExactTime$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_windowAbandonmentCancelsUpstreamExactTime

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 7119.961 ops/s
# Warmup Iteration   2: 28495.733 ops/s
# Warmup Iteration   3: 92297.685 ops/s
# Warmup Iteration   4: 108540.039 ops/s
# Warmup Iteration   5: 127429.449 ops/s
# Warmup Iteration   6: 121351.454 ops/s
# Warmup Iteration   7: 126965.508 ops/s
# Warmup Iteration   8: 118161.896 ops/s
# Warmup Iteration   9: 106004.442 ops/s
# Warmup Iteration  10: 111875.186 ops/s
# Warmup Iteration  11: 111294.376 ops/s
# Warmup Iteration  12: 118243.380 ops/s
# Warmup Iteration  13: 114644.395 ops/s
# Warmup Iteration  14: 115723.307 ops/s
# Warmup Iteration  15: 127300.013 ops/s
# Warmup Iteration  16: 132872.570 ops/s
# Warmup Iteration  17: 145043.561 ops/s
# Warmup Iteration  18: 126852.803 ops/s
# Warmup Iteration  19: 130503.851 ops/s
# Warmup Iteration  20: 135576.529 ops/s
# Warmup Iteration  21: 109475.934 ops/s
# Warmup Iteration  22: 139693.264 ops/s
# Warmup Iteration  23: 110482.865 ops/s
# Warmup Iteration  24: 130869.366 ops/s
# Warmup Iteration  25: 122021.462 ops/s
# Warmup Iteration  26: 121666.768 ops/s
# Warmup Iteration  27: 121516.969 ops/s
# Warmup Iteration  28: 137145.338 ops/s
# Warmup Iteration  29: 128863.309 ops/s
# Warmup Iteration  30: 130785.966 ops/s
Iteration   1: 125936.861 ops/s
Iteration   2: 121161.662 ops/s
Iteration   3: 135071.105 ops/s
Iteration   4: 137533.102 ops/s
Iteration   5: 119951.007 ops/s
Iteration   6: 123218.080 ops/s
Iteration   7: 130884.575 ops/s
Iteration   8: 128944.706 ops/s
Iteration   9: 140038.518 ops/s
Iteration  10: 146095.184 ops/s
Iteration  11: 126255.894 ops/s
Iteration  12: 132517.795 ops/s
Iteration  13: 137606.524 ops/s
Iteration  14: 129054.199 ops/s
Iteration  15: 131860.907 ops/s
Iteration  16: 126964.880 ops/s
Iteration  17: 129781.324 ops/s
Iteration  18: 143959.502 ops/s
Iteration  19: 125056.928 ops/s
Iteration  20: 120329.096 ops/s
Iteration  21: 125402.709 ops/s
Iteration  22: 131118.143 ops/s
Iteration  23: 132686.875 ops/s
Iteration  24: 125031.885 ops/s
Iteration  25: 123340.093 ops/s
Iteration  26: 134249.000 ops/s
Iteration  27: 120049.843 ops/s
Iteration  28: 117127.518 ops/s
Iteration  29: 128776.471 ops/s
Iteration  30: 128703.393 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_windowAbandonmentCancelsUpstreamExactTime":
  129290.259 ±(99.9%) 4740.402 ops/s [Average]
  (min, avg, max) = (117127.518, 129290.259, 146095.184), stdev = 7095.211
  CI (99.9%): [124549.857, 134030.661] (assumes normal distribution)


# Run complete. Total time: 00:01:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                   Mode  Cnt       Score      Error  Units
FlowableWindowWithTimeTest._Benchmark.benchmark_windowAbandonmentCancelsUpstreamExactTime  thrpt   30  129290.259 ± 4740.402  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableSubscribeOnTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableSubscribeOnTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 641806.427 ops/s
# Warmup Iteration   2: 2425945.449 ops/s
# Warmup Iteration   3: 4132471.766 ops/s
# Warmup Iteration   4: 4716947.860 ops/s
# Warmup Iteration   5: 4927643.247 ops/s
# Warmup Iteration   6: 4766068.300 ops/s
# Warmup Iteration   7: 4632526.297 ops/s
# Warmup Iteration   8: 4893950.422 ops/s
# Warmup Iteration   9: 4633615.316 ops/s
# Warmup Iteration  10: 4815959.762 ops/s
# Warmup Iteration  11: 4613502.644 ops/s
# Warmup Iteration  12: 4911002.102 ops/s
# Warmup Iteration  13: 4757477.333 ops/s
# Warmup Iteration  14: 4710303.901 ops/s
# Warmup Iteration  15: 4938947.237 ops/s
# Warmup Iteration  16: 4724148.272 ops/s
# Warmup Iteration  17: 4828912.242 ops/s
# Warmup Iteration  18: 4790251.501 ops/s
# Warmup Iteration  19: 4749294.665 ops/s
# Warmup Iteration  20: 4739244.283 ops/s
# Warmup Iteration  21: 4818533.846 ops/s
# Warmup Iteration  22: 4679506.565 ops/s
# Warmup Iteration  23: 4820215.104 ops/s
# Warmup Iteration  24: 4755237.002 ops/s
# Warmup Iteration  25: 4843153.259 ops/s
# Warmup Iteration  26: 4810537.915 ops/s
# Warmup Iteration  27: 4906266.507 ops/s
# Warmup Iteration  28: 4744701.571 ops/s
# Warmup Iteration  29: 4901469.698 ops/s
# Warmup Iteration  30: 4673329.233 ops/s
Iteration   1: 4831904.949 ops/s
Iteration   2: 4862491.457 ops/s
Iteration   3: 4860660.382 ops/s
Iteration   4: 5042259.283 ops/s
Iteration   5: 4970947.193 ops/s
Iteration   6: 4798291.693 ops/s
Iteration   7: 4748737.133 ops/s
Iteration   8: 4823903.173 ops/s
Iteration   9: 4779128.408 ops/s
Iteration  10: 4936234.316 ops/s
Iteration  11: 4805311.234 ops/s
Iteration  12: 4897404.479 ops/s
Iteration  13: 4758974.066 ops/s
Iteration  14: 4618461.336 ops/s
Iteration  15: 4768202.551 ops/s
Iteration  16: 4826323.429 ops/s
Iteration  17: 4793536.217 ops/s
Iteration  18: 5019824.281 ops/s
Iteration  19: 3708746.920 ops/s
Iteration  20: 4512900.952 ops/s
Iteration  21: 4921481.820 ops/s
Iteration  22: 4704903.559 ops/s
Iteration  23: 4911542.670 ops/s
Iteration  24: 4739315.783 ops/s
Iteration  25: 4836477.724 ops/s
Iteration  26: 4672688.883 ops/s
Iteration  27: 4942325.843 ops/s
Iteration  28: 4695027.700 ops/s
Iteration  29: 4859164.532 ops/s
Iteration  30: 4970571.374 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableSubscribeOnTest._Benchmark.benchmark_dispose":
  4787258.111 ±(99.9%) 157062.165 ops/s [Average]
  (min, avg, max) = (3708746.920, 4787258.111, 5042259.283), stdev = 235083.273
  CI (99.9%): [4630195.946, 4944320.277] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score        Error  Units
CompletableSubscribeOnTest._Benchmark.benchmark_dispose  thrpt   30  4787258.111 ± 157062.165  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.disposables.CompositeDisposableTest._Benchmark.benchmark_addAfterDisposed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.disposables.CompositeDisposableTest._Benchmark.benchmark_addAfterDisposed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 5597035.424 ops/s
# Warmup Iteration   2: 8528642.518 ops/s
# Warmup Iteration   3: 10047474.841 ops/s
# Warmup Iteration   4: 9780955.882 ops/s
# Warmup Iteration   5: 10145619.727 ops/s
# Warmup Iteration   6: 9794108.974 ops/s
# Warmup Iteration   7: 9300863.158 ops/s
# Warmup Iteration   8: 10088557.745 ops/s
# Warmup Iteration   9: 10148557.657 ops/s
# Warmup Iteration  10: 9808017.790 ops/s
# Warmup Iteration  11: 9564143.381 ops/s
# Warmup Iteration  12: 9627906.664 ops/s
# Warmup Iteration  13: 10023440.007 ops/s
# Warmup Iteration  14: 10101250.424 ops/s
# Warmup Iteration  15: 10085225.760 ops/s
# Warmup Iteration  16: 10150030.343 ops/s
# Warmup Iteration  17: 9616451.825 ops/s
# Warmup Iteration  18: 9937915.808 ops/s
# Warmup Iteration  19: 10035741.148 ops/s
# Warmup Iteration  20: 9929708.273 ops/s
# Warmup Iteration  21: 9955774.927 ops/s
# Warmup Iteration  22: 10413657.402 ops/s
# Warmup Iteration  23: 9507490.686 ops/s
# Warmup Iteration  24: 9875876.402 ops/s
# Warmup Iteration  25: 10372605.792 ops/s
# Warmup Iteration  26: 9881236.156 ops/s
# Warmup Iteration  27: 10104690.345 ops/s
# Warmup Iteration  28: 9790598.189 ops/s
# Warmup Iteration  29: 10310694.343 ops/s
# Warmup Iteration  30: 10010073.102 ops/s
Iteration   1: 9736395.781 ops/s
Iteration   2: 10144990.949 ops/s
Iteration   3: 9927997.298 ops/s
Iteration   4: 10149090.503 ops/s
Iteration   5: 9758887.160 ops/s
Iteration   6: 10084473.607 ops/s
Iteration   7: 10005143.495 ops/s
Iteration   8: 9822183.479 ops/s
Iteration   9: 9816686.442 ops/s
Iteration  10: 9973144.959 ops/s
Iteration  11: 10423436.214 ops/s
Iteration  12: 9835644.429 ops/s
Iteration  13: 9934865.100 ops/s
Iteration  14: 9825429.122 ops/s
Iteration  15: 9932966.595 ops/s
Iteration  16: 10181351.059 ops/s
Iteration  17: 10016320.450 ops/s
Iteration  18: 9839393.560 ops/s
Iteration  19: 9853722.942 ops/s
Iteration  20: 10186476.197 ops/s
Iteration  21: 9810633.405 ops/s
Iteration  22: 10370684.657 ops/s
Iteration  23: 9840996.176 ops/s
Iteration  24: 10348144.549 ops/s
Iteration  25: 9740250.198 ops/s
Iteration  26: 10303853.386 ops/s
Iteration  27: 10259556.035 ops/s
Iteration  28: 9710743.376 ops/s
Iteration  29: 10428937.952 ops/s
Iteration  30: 9644008.094 ops/s


Result "io.reactivex.rxjava3.disposables.CompositeDisposableTest._Benchmark.benchmark_addAfterDisposed":
  9996880.239 ±(99.9%) 154501.088 ops/s [Average]
  (min, avg, max) = (9644008.094, 9996880.239, 10428937.952), stdev = 231249.972
  CI (99.9%): [9842379.151, 10151381.327] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score        Error  Units
CompositeDisposableTest._Benchmark.benchmark_addAfterDisposed  thrpt   30  9996880.239 ± 154501.088  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnLifecycleTest._Benchmark.benchmark_isDisposed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnLifecycleTest._Benchmark.benchmark_isDisposed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1567048.340 ops/s
# Warmup Iteration   2: 4482167.485 ops/s
# Warmup Iteration   3: 4522057.196 ops/s
# Warmup Iteration   4: 5487710.754 ops/s
# Warmup Iteration   5: 5577088.722 ops/s
# Warmup Iteration   6: 5388017.423 ops/s
# Warmup Iteration   7: 5497535.082 ops/s
# Warmup Iteration   8: 5338644.588 ops/s
# Warmup Iteration   9: 5546018.473 ops/s
# Warmup Iteration  10: 5544151.273 ops/s
# Warmup Iteration  11: 5340877.053 ops/s
# Warmup Iteration  12: 5612906.267 ops/s
# Warmup Iteration  13: 5486870.319 ops/s
# Warmup Iteration  14: 5581561.440 ops/s
# Warmup Iteration  15: 5392079.031 ops/s
# Warmup Iteration  16: 5515153.573 ops/s
# Warmup Iteration  17: 5536398.814 ops/s
# Warmup Iteration  18: 5387750.702 ops/s
# Warmup Iteration  19: 5634742.957 ops/s
# Warmup Iteration  20: 5410895.560 ops/s
# Warmup Iteration  21: 5501505.009 ops/s
# Warmup Iteration  22: 5554799.549 ops/s
# Warmup Iteration  23: 5440785.641 ops/s
# Warmup Iteration  24: 5549224.858 ops/s
# Warmup Iteration  25: 5658655.165 ops/s
# Warmup Iteration  26: 5386990.157 ops/s
# Warmup Iteration  27: 5765299.128 ops/s
# Warmup Iteration  28: 5401898.314 ops/s
# Warmup Iteration  29: 5582089.831 ops/s
# Warmup Iteration  30: 5532044.445 ops/s
Iteration   1: 5420001.707 ops/s
Iteration   2: 5564669.827 ops/s
Iteration   3: 5397974.585 ops/s
Iteration   4: 5498498.360 ops/s
Iteration   5: 5412942.600 ops/s
Iteration   6: 5624601.838 ops/s
Iteration   7: 5530779.890 ops/s
Iteration   8: 5406463.634 ops/s
Iteration   9: 5703248.471 ops/s
Iteration  10: 5411327.620 ops/s
Iteration  11: 5638847.600 ops/s
Iteration  12: 5302661.156 ops/s
Iteration  13: 5638857.916 ops/s
Iteration  14: 4817088.720 ops/s
Iteration  15: 5171622.858 ops/s
Iteration  16: 5669443.147 ops/s
Iteration  17: 5296481.641 ops/s
Iteration  18: 5697228.385 ops/s
Iteration  19: 5258294.813 ops/s
Iteration  20: 5638467.583 ops/s
Iteration  21: 5283335.751 ops/s
Iteration  22: 5454530.982 ops/s
Iteration  23: 5608818.371 ops/s
Iteration  24: 5209250.742 ops/s
Iteration  25: 5498544.010 ops/s
Iteration  26: 5248102.736 ops/s
Iteration  27: 5608228.554 ops/s
Iteration  28: 5466495.256 ops/s
Iteration  29: 5508768.970 ops/s
Iteration  30: 5529141.867 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnLifecycleTest._Benchmark.benchmark_isDisposed":
  5450490.653 ±(99.9%) 129549.659 ops/s [Average]
  (min, avg, max) = (4817088.720, 5450490.653, 5703248.471), stdev = 193903.845
  CI (99.9%): [5320940.994, 5580040.312] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score        Error  Units
CompletableDoOnLifecycleTest._Benchmark.benchmark_isDisposed  thrpt   30  5450490.653 ± 129549.659  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.CompletableFromCompletionStageTest._Benchmark.benchmark_syncFailure$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.CompletableFromCompletionStageTest._Benchmark.benchmark_syncFailure

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 102670.056 ops/s
# Warmup Iteration   2: 297700.709 ops/s
# Warmup Iteration   3: 344287.545 ops/s
# Warmup Iteration   4: 320890.491 ops/s
# Warmup Iteration   5: 322104.799 ops/s
# Warmup Iteration   6: 335794.094 ops/s
# Warmup Iteration   7: 321702.256 ops/s
# Warmup Iteration   8: 334005.249 ops/s
# Warmup Iteration   9: 336607.179 ops/s
# Warmup Iteration  10: 314739.678 ops/s
# Warmup Iteration  11: 315023.169 ops/s
# Warmup Iteration  12: 324906.372 ops/s
# Warmup Iteration  13: 327070.400 ops/s
# Warmup Iteration  14: 337083.750 ops/s
# Warmup Iteration  15: 328120.826 ops/s
# Warmup Iteration  16: 321718.850 ops/s
# Warmup Iteration  17: 356527.454 ops/s
# Warmup Iteration  18: 367136.754 ops/s
# Warmup Iteration  19: 343250.596 ops/s
# Warmup Iteration  20: 361948.872 ops/s
# Warmup Iteration  21: 345104.065 ops/s
# Warmup Iteration  22: 340900.807 ops/s
# Warmup Iteration  23: 355147.616 ops/s
# Warmup Iteration  24: 335232.496 ops/s
# Warmup Iteration  25: 357359.408 ops/s
# Warmup Iteration  26: 363013.758 ops/s
# Warmup Iteration  27: 335519.272 ops/s
# Warmup Iteration  28: 348696.803 ops/s
# Warmup Iteration  29: 341024.654 ops/s
# Warmup Iteration  30: 344532.113 ops/s
Iteration   1: 352309.712 ops/s
Iteration   2: 337213.994 ops/s
Iteration   3: 355928.461 ops/s
Iteration   4: 359731.263 ops/s
Iteration   5: 338676.402 ops/s
Iteration   6: 362900.812 ops/s
Iteration   7: 340006.009 ops/s
Iteration   8: 350723.884 ops/s
Iteration   9: 354639.345 ops/s
Iteration  10: 347996.702 ops/s
Iteration  11: 364218.280 ops/s
Iteration  12: 365044.709 ops/s
Iteration  13: 345747.108 ops/s
Iteration  14: 344183.870 ops/s
Iteration  15: 335814.413 ops/s
Iteration  16: 352944.036 ops/s
Iteration  17: 356935.771 ops/s
Iteration  18: 342415.588 ops/s
Iteration  19: 363959.489 ops/s
Iteration  20: 340579.345 ops/s
Iteration  21: 346080.097 ops/s
Iteration  22: 348386.163 ops/s
Iteration  23: 351590.170 ops/s
Iteration  24: 356006.902 ops/s
Iteration  25: 338480.385 ops/s
Iteration  26: 352107.926 ops/s
Iteration  27: 348496.631 ops/s
Iteration  28: 350808.654 ops/s
Iteration  29: 367271.554 ops/s
Iteration  30: 342023.436 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.CompletableFromCompletionStageTest._Benchmark.benchmark_syncFailure":
  350440.704 ±(99.9%) 6016.294 ops/s [Average]
  (min, avg, max) = (335814.413, 350440.704, 367271.554), stdev = 9004.907
  CI (99.9%): [344424.409, 356456.998] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score      Error  Units
CompletableFromCompletionStageTest._Benchmark.benchmark_syncFailure  thrpt   30  350440.704 ± 6016.294  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableCreateTest._Benchmark.benchmark_callbackThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableCreateTest._Benchmark.benchmark_callbackThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 224106.665 ops/s
# Warmup Iteration   2: 565205.185 ops/s
# Warmup Iteration   3: 689856.680 ops/s
# Warmup Iteration   4: 657837.124 ops/s
# Warmup Iteration   5: 693946.643 ops/s
# Warmup Iteration   6: 671834.985 ops/s
# Warmup Iteration   7: 669270.391 ops/s
# Warmup Iteration   8: 703030.095 ops/s
# Warmup Iteration   9: 669247.403 ops/s
# Warmup Iteration  10: 653150.083 ops/s
# Warmup Iteration  11: 690687.430 ops/s
# Warmup Iteration  12: 669474.651 ops/s
# Warmup Iteration  13: 720990.049 ops/s
# Warmup Iteration  14: 690071.429 ops/s
# Warmup Iteration  15: 652164.708 ops/s
# Warmup Iteration  16: 683848.722 ops/s
# Warmup Iteration  17: 710331.137 ops/s
# Warmup Iteration  18: 745945.050 ops/s
# Warmup Iteration  19: 707788.460 ops/s
# Warmup Iteration  20: 671537.156 ops/s
# Warmup Iteration  21: 738972.504 ops/s
# Warmup Iteration  22: 708775.870 ops/s
# Warmup Iteration  23: 736958.445 ops/s
# Warmup Iteration  24: 718859.217 ops/s
# Warmup Iteration  25: 704355.643 ops/s
# Warmup Iteration  26: 723387.016 ops/s
# Warmup Iteration  27: 735610.142 ops/s
# Warmup Iteration  28: 717790.698 ops/s
# Warmup Iteration  29: 704896.801 ops/s
# Warmup Iteration  30: 717822.743 ops/s
Iteration   1: 729984.225 ops/s
Iteration   2: 729882.260 ops/s
Iteration   3: 729638.082 ops/s
Iteration   4: 733373.581 ops/s
Iteration   5: 719293.175 ops/s
Iteration   6: 719897.402 ops/s
Iteration   7: 736280.035 ops/s
Iteration   8: 717118.651 ops/s
Iteration   9: 582322.638 ops/s
Iteration  10: 746884.482 ops/s
Iteration  11: 692852.773 ops/s
Iteration  12: 767868.717 ops/s
Iteration  13: 695043.988 ops/s
Iteration  14: 719850.838 ops/s
Iteration  15: 735592.767 ops/s
Iteration  16: 712130.679 ops/s
Iteration  17: 724671.309 ops/s
Iteration  18: 721620.489 ops/s
Iteration  19: 719625.232 ops/s
Iteration  20: 700543.151 ops/s
Iteration  21: 708172.073 ops/s
Iteration  22: 740961.562 ops/s
Iteration  23: 714713.890 ops/s
Iteration  24: 724259.975 ops/s
Iteration  25: 708358.678 ops/s
Iteration  26: 717400.956 ops/s
Iteration  27: 732238.970 ops/s
Iteration  28: 725504.793 ops/s
Iteration  29: 697715.955 ops/s
Iteration  30: 724341.072 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableCreateTest._Benchmark.benchmark_callbackThrows":
  717604.747 ±(99.9%) 20032.346 ops/s [Average]
  (min, avg, max) = (582322.638, 717604.747, 767868.717), stdev = 29983.475
  CI (99.9%): [697572.400, 737637.093] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score       Error  Units
CompletableCreateTest._Benchmark.benchmark_callbackThrows  thrpt   30  717604.747 ± 20032.346  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableCreateTest._Benchmark.benchmark_onErrorNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableCreateTest._Benchmark.benchmark_onErrorNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 273305.580 ops/s
# Warmup Iteration   2: 515255.909 ops/s
# Warmup Iteration   3: 529400.211 ops/s
# Warmup Iteration   4: 593421.002 ops/s
# Warmup Iteration   5: 609841.757 ops/s
# Warmup Iteration   6: 613402.737 ops/s
# Warmup Iteration   7: 607749.268 ops/s
# Warmup Iteration   8: 607421.757 ops/s
# Warmup Iteration   9: 610040.204 ops/s
# Warmup Iteration  10: 599047.648 ops/s
# Warmup Iteration  11: 596561.696 ops/s
# Warmup Iteration  12: 612878.787 ops/s
# Warmup Iteration  13: 631040.957 ops/s
# Warmup Iteration  14: 629154.477 ops/s
# Warmup Iteration  15: 566497.915 ops/s
# Warmup Iteration  16: 603642.565 ops/s
# Warmup Iteration  17: 636543.081 ops/s
# Warmup Iteration  18: 629558.022 ops/s
# Warmup Iteration  19: 661601.627 ops/s
# Warmup Iteration  20: 620583.579 ops/s
# Warmup Iteration  21: 660701.586 ops/s
# Warmup Iteration  22: 635387.579 ops/s
# Warmup Iteration  23: 647500.910 ops/s
# Warmup Iteration  24: 641329.788 ops/s
# Warmup Iteration  25: 616133.557 ops/s
# Warmup Iteration  26: 663859.244 ops/s
# Warmup Iteration  27: 609996.786 ops/s
# Warmup Iteration  28: 659748.205 ops/s
# Warmup Iteration  29: 655881.418 ops/s
# Warmup Iteration  30: 617255.688 ops/s
Iteration   1: 654601.226 ops/s
Iteration   2: 613765.583 ops/s
Iteration   3: 660904.394 ops/s
Iteration   4: 627509.008 ops/s
Iteration   5: 622652.527 ops/s
Iteration   6: 631674.720 ops/s
Iteration   7: 634391.739 ops/s
Iteration   8: 634158.879 ops/s
Iteration   9: 649066.903 ops/s
Iteration  10: 642258.802 ops/s
Iteration  11: 666867.615 ops/s
Iteration  12: 611659.185 ops/s
Iteration  13: 665296.352 ops/s
Iteration  14: 646376.275 ops/s
Iteration  15: 621953.918 ops/s
Iteration  16: 630471.023 ops/s
Iteration  17: 653244.604 ops/s
Iteration  18: 684543.346 ops/s
Iteration  19: 610802.697 ops/s
Iteration  20: 654283.952 ops/s
Iteration  21: 628853.683 ops/s
Iteration  22: 659332.203 ops/s
Iteration  23: 618969.601 ops/s
Iteration  24: 650590.536 ops/s
Iteration  25: 648402.870 ops/s
Iteration  26: 625763.088 ops/s
Iteration  27: 656643.191 ops/s
Iteration  28: 622720.387 ops/s
Iteration  29: 661205.206 ops/s
Iteration  30: 620862.069 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableCreateTest._Benchmark.benchmark_onErrorNull":
  640327.519 ±(99.9%) 12755.061 ops/s [Average]
  (min, avg, max) = (610802.697, 640327.519, 684543.346), stdev = 19091.177
  CI (99.9%): [627572.458, 653082.581] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score       Error  Units
CompletableCreateTest._Benchmark.benchmark_onErrorNull  thrpt   30  640327.519 ± 12755.061  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableHideTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableHideTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 142085.643 ops/s
# Warmup Iteration   2: 469865.729 ops/s
# Warmup Iteration   3: 533151.355 ops/s
# Warmup Iteration   4: 503989.142 ops/s
# Warmup Iteration   5: 532182.053 ops/s
# Warmup Iteration   6: 521424.820 ops/s
# Warmup Iteration   7: 507490.149 ops/s
# Warmup Iteration   8: 542282.672 ops/s
# Warmup Iteration   9: 496056.391 ops/s
# Warmup Iteration  10: 537414.966 ops/s
# Warmup Iteration  11: 543224.728 ops/s
# Warmup Iteration  12: 513319.841 ops/s
# Warmup Iteration  13: 537471.462 ops/s
# Warmup Iteration  14: 519914.272 ops/s
# Warmup Iteration  15: 510620.107 ops/s
# Warmup Iteration  16: 561929.580 ops/s
# Warmup Iteration  17: 539974.791 ops/s
# Warmup Iteration  18: 525794.572 ops/s
# Warmup Iteration  19: 544984.960 ops/s
# Warmup Iteration  20: 538496.552 ops/s
# Warmup Iteration  21: 564488.784 ops/s
# Warmup Iteration  22: 545878.432 ops/s
# Warmup Iteration  23: 565681.212 ops/s
# Warmup Iteration  24: 557419.794 ops/s
# Warmup Iteration  25: 538885.531 ops/s
# Warmup Iteration  26: 581991.039 ops/s
# Warmup Iteration  27: 521910.082 ops/s
# Warmup Iteration  28: 573643.770 ops/s
# Warmup Iteration  29: 570510.658 ops/s
# Warmup Iteration  30: 543274.441 ops/s
Iteration   1: 570693.209 ops/s
Iteration   2: 537502.160 ops/s
Iteration   3: 580812.533 ops/s
Iteration   4: 440308.454 ops/s
Iteration   5: 528404.248 ops/s
Iteration   6: 559426.780 ops/s
Iteration   7: 546648.304 ops/s
Iteration   8: 570369.368 ops/s
Iteration   9: 541294.816 ops/s
Iteration  10: 564615.602 ops/s
Iteration  11: 550936.664 ops/s
Iteration  12: 542145.739 ops/s
Iteration  13: 544235.191 ops/s
Iteration  14: 563571.823 ops/s
Iteration  15: 553262.059 ops/s
Iteration  16: 572686.766 ops/s
Iteration  17: 539277.723 ops/s
Iteration  18: 553937.978 ops/s
Iteration  19: 544662.666 ops/s
Iteration  20: 561373.986 ops/s
Iteration  21: 552162.977 ops/s
Iteration  22: 565863.121 ops/s
Iteration  23: 541902.449 ops/s
Iteration  24: 544686.892 ops/s
Iteration  25: 567660.041 ops/s
Iteration  26: 544169.287 ops/s
Iteration  27: 570157.266 ops/s
Iteration  28: 567637.683 ops/s
Iteration  29: 544932.959 ops/s
Iteration  30: 560529.320 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableHideTest._Benchmark.benchmark_doubleOnSubscribe":
  550862.269 ±(99.9%) 16392.665 ops/s [Average]
  (min, avg, max) = (440308.454, 550862.269, 580812.533), stdev = 24535.772
  CI (99.9%): [534469.604, 567254.934] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score       Error  Units
CompletableHideTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  550862.269 ± 16392.665  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableDetachTest._Benchmark.benchmark_doubleSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableDetachTest._Benchmark.benchmark_doubleSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 132221.076 ops/s
# Warmup Iteration   2: 461483.730 ops/s
# Warmup Iteration   3: 489117.479 ops/s
# Warmup Iteration   4: 516935.068 ops/s
# Warmup Iteration   5: 531055.482 ops/s
# Warmup Iteration   6: 558542.510 ops/s
# Warmup Iteration   7: 551922.876 ops/s
# Warmup Iteration   8: 499911.352 ops/s
# Warmup Iteration   9: 551685.661 ops/s
# Warmup Iteration  10: 504124.452 ops/s
# Warmup Iteration  11: 543357.224 ops/s
# Warmup Iteration  12: 540021.319 ops/s
# Warmup Iteration  13: 528617.864 ops/s
# Warmup Iteration  14: 559162.536 ops/s
# Warmup Iteration  15: 534316.697 ops/s
# Warmup Iteration  16: 549528.621 ops/s
# Warmup Iteration  17: 568808.925 ops/s
# Warmup Iteration  18: 554244.412 ops/s
# Warmup Iteration  19: 554916.861 ops/s
# Warmup Iteration  20: 559707.728 ops/s
# Warmup Iteration  21: 567578.879 ops/s
# Warmup Iteration  22: 554165.254 ops/s
# Warmup Iteration  23: 550582.271 ops/s
# Warmup Iteration  24: 575121.186 ops/s
# Warmup Iteration  25: 540220.653 ops/s
# Warmup Iteration  26: 557224.515 ops/s
# Warmup Iteration  27: 555153.194 ops/s
# Warmup Iteration  28: 543094.132 ops/s
# Warmup Iteration  29: 580492.500 ops/s
# Warmup Iteration  30: 547656.293 ops/s
Iteration   1: 571480.315 ops/s
Iteration   2: 558335.438 ops/s
Iteration   3: 529042.733 ops/s
Iteration   4: 574042.197 ops/s
Iteration   5: 581704.151 ops/s
Iteration   6: 536096.145 ops/s
Iteration   7: 564358.858 ops/s
Iteration   8: 548651.616 ops/s
Iteration   9: 578711.705 ops/s
Iteration  10: 553487.994 ops/s
Iteration  11: 543537.813 ops/s
Iteration  12: 548345.932 ops/s
Iteration  13: 540987.412 ops/s
Iteration  14: 582947.455 ops/s
Iteration  15: 569460.206 ops/s
Iteration  16: 554365.806 ops/s
Iteration  17: 559286.010 ops/s
Iteration  18: 559435.095 ops/s
Iteration  19: 581881.050 ops/s
Iteration  20: 569474.504 ops/s
Iteration  21: 541632.934 ops/s
Iteration  22: 556134.044 ops/s
Iteration  23: 590176.445 ops/s
Iteration  24: 546946.729 ops/s
Iteration  25: 575607.065 ops/s
Iteration  26: 536354.754 ops/s
Iteration  27: 569280.262 ops/s
Iteration  28: 548383.871 ops/s
Iteration  29: 553324.656 ops/s
Iteration  30: 570217.792 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableDetachTest._Benchmark.benchmark_doubleSubscribe":
  559789.700 ±(99.9%) 10717.891 ops/s [Average]
  (min, avg, max) = (529042.733, 559789.700, 590176.445), stdev = 16042.037
  CI (99.9%): [549071.808, 570507.591] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score       Error  Units
CompletableDetachTest._Benchmark.benchmark_doubleSubscribe  thrpt   30  559789.700 ± 10717.891  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherTest._Benchmark.benchmark_withCompletableDoubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherTest._Benchmark.benchmark_withCompletableDoubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 110636.293 ops/s
# Warmup Iteration   2: 392149.231 ops/s
# Warmup Iteration   3: 513727.988 ops/s
# Warmup Iteration   4: 490441.089 ops/s
# Warmup Iteration   5: 527928.945 ops/s
# Warmup Iteration   6: 490675.082 ops/s
# Warmup Iteration   7: 505761.339 ops/s
# Warmup Iteration   8: 499847.792 ops/s
# Warmup Iteration   9: 494099.690 ops/s
# Warmup Iteration  10: 527229.598 ops/s
# Warmup Iteration  11: 501610.513 ops/s
# Warmup Iteration  12: 519645.538 ops/s
# Warmup Iteration  13: 516813.016 ops/s
# Warmup Iteration  14: 504518.914 ops/s
# Warmup Iteration  15: 525801.578 ops/s
# Warmup Iteration  16: 517462.706 ops/s
# Warmup Iteration  17: 522785.039 ops/s
# Warmup Iteration  18: 527321.816 ops/s
# Warmup Iteration  19: 535805.340 ops/s
# Warmup Iteration  20: 542797.191 ops/s
# Warmup Iteration  21: 535622.909 ops/s
# Warmup Iteration  22: 517055.937 ops/s
# Warmup Iteration  23: 555171.299 ops/s
# Warmup Iteration  24: 522722.263 ops/s
# Warmup Iteration  25: 540138.618 ops/s
# Warmup Iteration  26: 542973.021 ops/s
# Warmup Iteration  27: 530291.465 ops/s
# Warmup Iteration  28: 536387.634 ops/s
# Warmup Iteration  29: 466079.090 ops/s
# Warmup Iteration  30: 523566.786 ops/s
Iteration   1: 539611.188 ops/s
Iteration   2: 515067.228 ops/s
Iteration   3: 540038.344 ops/s
Iteration   4: 551789.948 ops/s
Iteration   5: 528453.728 ops/s
Iteration   6: 533349.056 ops/s
Iteration   7: 552695.826 ops/s
Iteration   8: 522133.023 ops/s
Iteration   9: 557058.829 ops/s
Iteration  10: 521026.050 ops/s
Iteration  11: 536036.075 ops/s
Iteration  12: 535886.756 ops/s
Iteration  13: 556225.578 ops/s
Iteration  14: 542834.118 ops/s
Iteration  15: 507150.740 ops/s
Iteration  16: 526156.132 ops/s
Iteration  17: 530289.930 ops/s
Iteration  18: 554233.719 ops/s
Iteration  19: 530283.317 ops/s
Iteration  20: 561058.425 ops/s
Iteration  21: 529090.044 ops/s
Iteration  22: 553557.297 ops/s
Iteration  23: 538537.160 ops/s
Iteration  24: 536951.107 ops/s
Iteration  25: 542888.741 ops/s
Iteration  26: 538944.647 ops/s
Iteration  27: 556020.474 ops/s
Iteration  28: 524562.246 ops/s
Iteration  29: 555835.482 ops/s
Iteration  30: 534370.500 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherTest._Benchmark.benchmark_withCompletableDoubleOnSubscribe":
  538404.524 ±(99.9%) 9204.270 ops/s [Average]
  (min, avg, max) = (507150.740, 538404.524, 561058.425), stdev = 13776.518
  CI (99.9%): [529200.254, 547608.793] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score      Error  Units
MaybeDelayOtherTest._Benchmark.benchmark_withCompletableDoubleOnSubscribe  thrpt   30  538404.524 ± 9204.270  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeToCompletableTest._Benchmark.benchmark_doubleSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeToCompletableTest._Benchmark.benchmark_doubleSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 106819.415 ops/s
# Warmup Iteration   2: 455781.040 ops/s
# Warmup Iteration   3: 484902.143 ops/s
# Warmup Iteration   4: 513606.424 ops/s
# Warmup Iteration   5: 526950.197 ops/s
# Warmup Iteration   6: 502358.524 ops/s
# Warmup Iteration   7: 509553.691 ops/s
# Warmup Iteration   8: 537659.764 ops/s
# Warmup Iteration   9: 506400.409 ops/s
# Warmup Iteration  10: 525066.247 ops/s
# Warmup Iteration  11: 512860.459 ops/s
# Warmup Iteration  12: 530575.767 ops/s
# Warmup Iteration  13: 539160.172 ops/s
# Warmup Iteration  14: 508676.210 ops/s
# Warmup Iteration  15: 530622.155 ops/s
# Warmup Iteration  16: 514888.793 ops/s
# Warmup Iteration  17: 565346.569 ops/s
# Warmup Iteration  18: 549199.346 ops/s
# Warmup Iteration  19: 537820.164 ops/s
# Warmup Iteration  20: 565114.501 ops/s
# Warmup Iteration  21: 528805.166 ops/s
# Warmup Iteration  22: 557019.706 ops/s
# Warmup Iteration  23: 546734.588 ops/s
# Warmup Iteration  24: 543020.924 ops/s
# Warmup Iteration  25: 564957.890 ops/s
# Warmup Iteration  26: 540665.116 ops/s
# Warmup Iteration  27: 563322.951 ops/s
# Warmup Iteration  28: 542047.633 ops/s
# Warmup Iteration  29: 544196.222 ops/s
# Warmup Iteration  30: 558138.108 ops/s
Iteration   1: 544170.262 ops/s
Iteration   2: 557964.476 ops/s
Iteration   3: 545995.080 ops/s
Iteration   4: 551404.484 ops/s
Iteration   5: 548449.449 ops/s
Iteration   6: 530806.057 ops/s
Iteration   7: 565920.664 ops/s
Iteration   8: 542207.725 ops/s
Iteration   9: 551111.368 ops/s
Iteration  10: 538662.442 ops/s
Iteration  11: 564563.419 ops/s
Iteration  12: 545696.258 ops/s
Iteration  13: 556871.873 ops/s
Iteration  14: 547424.380 ops/s
Iteration  15: 549823.082 ops/s
Iteration  16: 537227.443 ops/s
Iteration  17: 542592.246 ops/s
Iteration  18: 566876.694 ops/s
Iteration  19: 536278.242 ops/s
Iteration  20: 577700.218 ops/s
Iteration  21: 558636.835 ops/s
Iteration  22: 539167.152 ops/s
Iteration  23: 570390.161 ops/s
Iteration  24: 536247.076 ops/s
Iteration  25: 565541.425 ops/s
Iteration  26: 565504.973 ops/s
Iteration  27: 535619.937 ops/s
Iteration  28: 576555.922 ops/s
Iteration  29: 547013.662 ops/s
Iteration  30: 544730.174 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeToCompletableTest._Benchmark.benchmark_doubleSubscribe":
  551371.773 ±(99.9%) 8634.955 ops/s [Average]
  (min, avg, max) = (530806.057, 551371.773, 577700.218), stdev = 12924.395
  CI (99.9%): [542736.818, 560006.727] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
MaybeToCompletableTest._Benchmark.benchmark_doubleSubscribe  thrpt   30  551371.773 ± 8634.955  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDoOnEachTest._Benchmark.benchmark_onCompleteCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDoOnEachTest._Benchmark.benchmark_onCompleteCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.822 ops/s
# Warmup Iteration   2: 22815.013 ops/s
# Warmup Iteration   3: 44925.203 ops/s
# Warmup Iteration   4: 87734.691 ops/s
# Warmup Iteration   5: 200114.543 ops/s
# Warmup Iteration   6: 237666.743 ops/s
# Warmup Iteration   7: 254402.900 ops/s
# Warmup Iteration   8: 265019.433 ops/s
# Warmup Iteration   9: 259254.758 ops/s
# Warmup Iteration  10: 284538.914 ops/s
# Warmup Iteration  11: 272469.984 ops/s
# Warmup Iteration  12: 262772.041 ops/s
# Warmup Iteration  13: 275603.068 ops/s
# Warmup Iteration  14: 263850.962 ops/s
# Warmup Iteration  15: 275312.405 ops/s
# Warmup Iteration  16: 272831.318 ops/s
# Warmup Iteration  17: 260133.512 ops/s
# Warmup Iteration  18: 277927.772 ops/s
# Warmup Iteration  19: 271393.083 ops/s
# Warmup Iteration  20: 265616.334 ops/s
# Warmup Iteration  21: 280497.975 ops/s
# Warmup Iteration  22: 264892.985 ops/s
# Warmup Iteration  23: 280431.968 ops/s
# Warmup Iteration  24: 218662.218 ops/s
# Warmup Iteration  25: 265286.186 ops/s
# Warmup Iteration  26: 275374.897 ops/s
# Warmup Iteration  27: 271295.876 ops/s
# Warmup Iteration  28: 277811.442 ops/s
# Warmup Iteration  29: 279291.139 ops/s
# Warmup Iteration  30: 261575.612 ops/s
Iteration   1: 282839.452 ops/s
Iteration   2: 292013.725 ops/s
Iteration   3: 275933.994 ops/s
Iteration   4: 264443.677 ops/s
Iteration   5: 269815.068 ops/s
Iteration   6: 266522.003 ops/s
Iteration   7: 273093.384 ops/s
Iteration   8: 282879.613 ops/s
Iteration   9: 287134.261 ops/s
Iteration  10: 263821.798 ops/s
Iteration  11: 289019.528 ops/s
Iteration  12: 260631.722 ops/s
Iteration  13: 282763.080 ops/s
Iteration  14: 263027.594 ops/s
Iteration  15: 272299.778 ops/s
Iteration  16: 271836.597 ops/s
Iteration  17: 279648.343 ops/s
Iteration  18: 265277.172 ops/s
Iteration  19: 273491.873 ops/s
Iteration  20: 269534.796 ops/s
Iteration  21: 278875.469 ops/s
Iteration  22: 271481.762 ops/s
Iteration  23: 276293.577 ops/s
Iteration  24: 275389.636 ops/s
Iteration  25: 271318.661 ops/s
Iteration  26: 277727.800 ops/s
Iteration  27: 266800.588 ops/s
Iteration  28: 279022.529 ops/s
Iteration  29: 265666.261 ops/s
Iteration  30: 272423.906 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableDoOnEachTest._Benchmark.benchmark_onCompleteCrash":
  274034.255 ±(99.9%) 5367.161 ops/s [Average]
  (min, avg, max) = (260631.722, 274034.255, 292013.725), stdev = 8033.314
  CI (99.9%): [268667.094, 279401.416] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
ObservableDoOnEachTest._Benchmark.benchmark_onCompleteCrash  thrpt   30  274034.255 ± 5367.161  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.util.QueueDrainHelperTest._Benchmark.benchmark_observerCheckTerminatedDelayErrorEmptyError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.util.QueueDrainHelperTest._Benchmark.benchmark_observerCheckTerminatedDelayErrorEmptyError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 226474.613 ops/s
# Warmup Iteration   2: 571717.744 ops/s
# Warmup Iteration   3: 606073.141 ops/s
# Warmup Iteration   4: 670577.258 ops/s
# Warmup Iteration   5: 575062.550 ops/s
# Warmup Iteration   6: 681354.184 ops/s
# Warmup Iteration   7: 664210.829 ops/s
# Warmup Iteration   8: 684972.896 ops/s
# Warmup Iteration   9: 658089.100 ops/s
# Warmup Iteration  10: 700449.324 ops/s
# Warmup Iteration  11: 673839.790 ops/s
# Warmup Iteration  12: 675164.832 ops/s
# Warmup Iteration  13: 697757.227 ops/s
# Warmup Iteration  14: 667046.577 ops/s
# Warmup Iteration  15: 694396.422 ops/s
# Warmup Iteration  16: 679182.245 ops/s
# Warmup Iteration  17: 715058.237 ops/s
# Warmup Iteration  18: 721899.474 ops/s
# Warmup Iteration  19: 672488.719 ops/s
# Warmup Iteration  20: 737988.345 ops/s
# Warmup Iteration  21: 709917.864 ops/s
# Warmup Iteration  22: 707001.219 ops/s
# Warmup Iteration  23: 722579.648 ops/s
# Warmup Iteration  24: 678085.518 ops/s
# Warmup Iteration  25: 725221.849 ops/s
# Warmup Iteration  26: 701837.515 ops/s
# Warmup Iteration  27: 713114.226 ops/s
# Warmup Iteration  28: 725041.411 ops/s
# Warmup Iteration  29: 702023.591 ops/s
# Warmup Iteration  30: 751726.124 ops/s
Iteration   1: 718688.546 ops/s
Iteration   2: 705974.876 ops/s
Iteration   3: 714955.562 ops/s
Iteration   4: 708569.545 ops/s
Iteration   5: 739685.821 ops/s
Iteration   6: 722936.836 ops/s
Iteration   7: 698419.181 ops/s
Iteration   8: 748182.500 ops/s
Iteration   9: 701206.959 ops/s
Iteration  10: 723192.736 ops/s
Iteration  11: 691691.232 ops/s
Iteration  12: 716762.766 ops/s
Iteration  13: 741168.043 ops/s
Iteration  14: 722981.522 ops/s
Iteration  15: 681650.331 ops/s
Iteration  16: 743924.729 ops/s
Iteration  17: 689316.621 ops/s
Iteration  18: 724648.067 ops/s
Iteration  19: 689681.889 ops/s
Iteration  20: 700249.633 ops/s
Iteration  21: 756115.003 ops/s
Iteration  22: 699352.107 ops/s
Iteration  23: 723052.396 ops/s
Iteration  24: 711289.900 ops/s
Iteration  25: 712236.179 ops/s
Iteration  26: 715564.846 ops/s
Iteration  27: 712022.696 ops/s
Iteration  28: 695905.491 ops/s
Iteration  29: 693171.510 ops/s
Iteration  30: 730631.944 ops/s


Result "io.reactivex.rxjava3.internal.util.QueueDrainHelperTest._Benchmark.benchmark_observerCheckTerminatedDelayErrorEmptyError":
  714440.982 ±(99.9%) 12654.662 ops/s [Average]
  (min, avg, max) = (681650.331, 714440.982, 756115.003), stdev = 18940.904
  CI (99.9%): [701786.320, 727095.645] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               Mode  Cnt       Score       Error  Units
QueueDrainHelperTest._Benchmark.benchmark_observerCheckTerminatedDelayErrorEmptyError  thrpt   30  714440.982 ± 12654.662  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnLifecycleTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnLifecycleTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 124868.402 ops/s
# Warmup Iteration   2: 422367.217 ops/s
# Warmup Iteration   3: 481912.987 ops/s
# Warmup Iteration   4: 500192.887 ops/s
# Warmup Iteration   5: 503066.579 ops/s
# Warmup Iteration   6: 520491.008 ops/s
# Warmup Iteration   7: 490541.135 ops/s
# Warmup Iteration   8: 518706.514 ops/s
# Warmup Iteration   9: 530790.321 ops/s
# Warmup Iteration  10: 517434.306 ops/s
# Warmup Iteration  11: 508621.931 ops/s
# Warmup Iteration  12: 539869.068 ops/s
# Warmup Iteration  13: 504844.555 ops/s
# Warmup Iteration  14: 541492.013 ops/s
# Warmup Iteration  15: 516257.068 ops/s
# Warmup Iteration  16: 526184.452 ops/s
# Warmup Iteration  17: 551514.866 ops/s
# Warmup Iteration  18: 468683.629 ops/s
# Warmup Iteration  19: 520192.036 ops/s
# Warmup Iteration  20: 529201.871 ops/s
# Warmup Iteration  21: 545366.598 ops/s
# Warmup Iteration  22: 561394.697 ops/s
# Warmup Iteration  23: 530141.134 ops/s
# Warmup Iteration  24: 531842.287 ops/s
# Warmup Iteration  25: 529081.214 ops/s
# Warmup Iteration  26: 541198.237 ops/s
# Warmup Iteration  27: 533337.987 ops/s
# Warmup Iteration  28: 530642.658 ops/s
# Warmup Iteration  29: 561597.275 ops/s
# Warmup Iteration  30: 521793.458 ops/s
Iteration   1: 538057.231 ops/s
Iteration   2: 530841.171 ops/s
Iteration   3: 566072.485 ops/s
Iteration   4: 539918.670 ops/s
Iteration   5: 523678.950 ops/s
Iteration   6: 571240.102 ops/s
Iteration   7: 542436.132 ops/s
Iteration   8: 549757.774 ops/s
Iteration   9: 540517.017 ops/s
Iteration  10: 541723.759 ops/s
Iteration  11: 545394.687 ops/s
Iteration  12: 540000.219 ops/s
Iteration  13: 565389.488 ops/s
Iteration  14: 549266.655 ops/s
Iteration  15: 548730.126 ops/s
Iteration  16: 539449.488 ops/s
Iteration  17: 548002.673 ops/s
Iteration  18: 544142.061 ops/s
Iteration  19: 565651.416 ops/s
Iteration  20: 527685.176 ops/s
Iteration  21: 532920.672 ops/s
Iteration  22: 543870.776 ops/s
Iteration  23: 540639.488 ops/s
Iteration  24: 563113.178 ops/s
Iteration  25: 539185.185 ops/s
Iteration  26: 564889.705 ops/s
Iteration  27: 534762.266 ops/s
Iteration  28: 553516.292 ops/s
Iteration  29: 534512.827 ops/s
Iteration  30: 568490.358 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnLifecycleTest._Benchmark.benchmark_doubleOnSubscribe":
  546461.868 ±(99.9%) 8649.298 ops/s [Average]
  (min, avg, max) = (523678.950, 546461.868, 571240.102), stdev = 12945.863
  CI (99.9%): [537812.570, 555111.166] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score      Error  Units
CompletableDoOnLifecycleTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  546461.868 ± 8649.298  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeCallbackObserverTest._Benchmark.benchmark_onCompleteCrashes$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeCallbackObserverTest._Benchmark.benchmark_onCompleteCrashes

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 126988.164 ops/s
# Warmup Iteration   2: 227242.157 ops/s
# Warmup Iteration   3: 242738.781 ops/s
# Warmup Iteration   4: 231573.125 ops/s
# Warmup Iteration   5: 271695.068 ops/s
# Warmup Iteration   6: 271727.956 ops/s
# Warmup Iteration   7: 261328.645 ops/s
# Warmup Iteration   8: 281640.054 ops/s
# Warmup Iteration   9: 266136.079 ops/s
# Warmup Iteration  10: 269300.075 ops/s
# Warmup Iteration  11: 264225.644 ops/s
# Warmup Iteration  12: 278930.867 ops/s
# Warmup Iteration  13: 270680.681 ops/s
# Warmup Iteration  14: 263453.084 ops/s
# Warmup Iteration  15: 277562.596 ops/s
# Warmup Iteration  16: 266770.223 ops/s
# Warmup Iteration  17: 285947.629 ops/s
# Warmup Iteration  18: 275816.049 ops/s
# Warmup Iteration  19: 285532.256 ops/s
# Warmup Iteration  20: 294419.788 ops/s
# Warmup Iteration  21: 289852.674 ops/s
# Warmup Iteration  22: 277767.939 ops/s
# Warmup Iteration  23: 285267.466 ops/s
# Warmup Iteration  24: 280443.758 ops/s
# Warmup Iteration  25: 276863.165 ops/s
# Warmup Iteration  26: 282889.145 ops/s
# Warmup Iteration  27: 276871.195 ops/s
# Warmup Iteration  28: 293627.866 ops/s
# Warmup Iteration  29: 274390.069 ops/s
# Warmup Iteration  30: 290053.684 ops/s
Iteration   1: 278372.575 ops/s
Iteration   2: 283346.275 ops/s
Iteration   3: 289726.001 ops/s
Iteration   4: 286615.167 ops/s
Iteration   5: 272251.589 ops/s
Iteration   6: 288951.267 ops/s
Iteration   7: 274674.398 ops/s
Iteration   8: 290060.807 ops/s
Iteration   9: 277384.498 ops/s
Iteration  10: 274864.715 ops/s
Iteration  11: 281732.155 ops/s
Iteration  12: 271943.647 ops/s
Iteration  13: 281874.549 ops/s
Iteration  14: 275674.502 ops/s
Iteration  15: 280566.399 ops/s
Iteration  16: 283022.321 ops/s
Iteration  17: 279053.963 ops/s
Iteration  18: 289256.927 ops/s
Iteration  19: 273738.492 ops/s
Iteration  20: 283506.632 ops/s
Iteration  21: 282474.155 ops/s
Iteration  22: 271408.419 ops/s
Iteration  23: 288804.908 ops/s
Iteration  24: 274872.049 ops/s
Iteration  25: 278058.797 ops/s
Iteration  26: 270396.106 ops/s
Iteration  27: 279451.969 ops/s
Iteration  28: 283927.747 ops/s
Iteration  29: 278047.370 ops/s
Iteration  30: 280808.031 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeCallbackObserverTest._Benchmark.benchmark_onCompleteCrashes":
  280162.214 ±(99.9%) 3907.564 ops/s [Average]
  (min, avg, max) = (270396.106, 280162.214, 290060.807), stdev = 5848.658
  CI (99.9%): [276254.650, 284069.778] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
MaybeCallbackObserverTest._Benchmark.benchmark_onCompleteCrashes  thrpt   30  280162.214 ± 3907.564  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableAllTest._Benchmark.benchmark_doubleOnSubscribeObservable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableAllTest._Benchmark.benchmark_doubleOnSubscribeObservable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 87926.826 ops/s
# Warmup Iteration   2: 447852.537 ops/s
# Warmup Iteration   3: 461899.437 ops/s
# Warmup Iteration   4: 502124.736 ops/s
# Warmup Iteration   5: 475532.891 ops/s
# Warmup Iteration   6: 518970.095 ops/s
# Warmup Iteration   7: 441983.960 ops/s
# Warmup Iteration   8: 512253.429 ops/s
# Warmup Iteration   9: 524263.103 ops/s
# Warmup Iteration  10: 524312.740 ops/s
# Warmup Iteration  11: 514088.471 ops/s
# Warmup Iteration  12: 506833.773 ops/s
# Warmup Iteration  13: 452926.886 ops/s
# Warmup Iteration  14: 504442.143 ops/s
# Warmup Iteration  15: 532072.501 ops/s
# Warmup Iteration  16: 519694.752 ops/s
# Warmup Iteration  17: 540249.159 ops/s
# Warmup Iteration  18: 534437.393 ops/s
# Warmup Iteration  19: 557980.784 ops/s
# Warmup Iteration  20: 543658.544 ops/s
# Warmup Iteration  21: 530278.640 ops/s
# Warmup Iteration  22: 548150.706 ops/s
# Warmup Iteration  23: 542667.118 ops/s
# Warmup Iteration  24: 537932.769 ops/s
# Warmup Iteration  25: 553882.669 ops/s
# Warmup Iteration  26: 530725.041 ops/s
# Warmup Iteration  27: 550701.918 ops/s
# Warmup Iteration  28: 542780.569 ops/s
# Warmup Iteration  29: 543621.225 ops/s
# Warmup Iteration  30: 536380.958 ops/s
Iteration   1: 541988.586 ops/s
Iteration   2: 566729.695 ops/s
Iteration   3: 520721.443 ops/s
Iteration   4: 539634.829 ops/s
Iteration   5: 527662.636 ops/s
Iteration   6: 553373.049 ops/s
Iteration   7: 559931.234 ops/s
Iteration   8: 541147.467 ops/s
Iteration   9: 550268.017 ops/s
Iteration  10: 538970.416 ops/s
Iteration  11: 556319.899 ops/s
Iteration  12: 536806.944 ops/s
Iteration  13: 567560.961 ops/s
Iteration  14: 543512.447 ops/s
Iteration  15: 527792.589 ops/s
Iteration  16: 538508.245 ops/s
Iteration  17: 565016.875 ops/s
Iteration  18: 523310.502 ops/s
Iteration  19: 548914.127 ops/s
Iteration  20: 543031.403 ops/s
Iteration  21: 532855.475 ops/s
Iteration  22: 559492.664 ops/s
Iteration  23: 535978.861 ops/s
Iteration  24: 557579.887 ops/s
Iteration  25: 539156.968 ops/s
Iteration  26: 537059.601 ops/s
Iteration  27: 554454.987 ops/s
Iteration  28: 531801.958 ops/s
Iteration  29: 556232.887 ops/s
Iteration  30: 526397.171 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableAllTest._Benchmark.benchmark_doubleOnSubscribeObservable":
  544073.727 ±(99.9%) 8870.051 ops/s [Average]
  (min, avg, max) = (520721.443, 544073.727, 567560.961), stdev = 13276.276
  CI (99.9%): [535203.676, 552943.779] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score      Error  Units
ObservableAllTest._Benchmark.benchmark_doubleOnSubscribeObservable  thrpt   30  544073.727 ± 8870.051  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeCallbackObserverTest._Benchmark.benchmark_onSuccessCrashes$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeCallbackObserverTest._Benchmark.benchmark_onSuccessCrashes

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 103457.384 ops/s
# Warmup Iteration   2: 245696.919 ops/s
# Warmup Iteration   3: 247337.623 ops/s
# Warmup Iteration   4: 238814.285 ops/s
# Warmup Iteration   5: 261949.962 ops/s
# Warmup Iteration   6: 274016.318 ops/s
# Warmup Iteration   7: 275957.625 ops/s
# Warmup Iteration   8: 265732.141 ops/s
# Warmup Iteration   9: 273937.106 ops/s
# Warmup Iteration  10: 265895.421 ops/s
# Warmup Iteration  11: 273526.945 ops/s
# Warmup Iteration  12: 269943.479 ops/s
# Warmup Iteration  13: 267994.376 ops/s
# Warmup Iteration  14: 280549.013 ops/s
# Warmup Iteration  15: 260948.104 ops/s
# Warmup Iteration  16: 273234.925 ops/s
# Warmup Iteration  17: 281896.163 ops/s
# Warmup Iteration  18: 275928.495 ops/s
# Warmup Iteration  19: 286832.070 ops/s
# Warmup Iteration  20: 280888.526 ops/s
# Warmup Iteration  21: 287858.325 ops/s
# Warmup Iteration  22: 288426.113 ops/s
# Warmup Iteration  23: 272942.877 ops/s
# Warmup Iteration  24: 292381.542 ops/s
# Warmup Iteration  25: 285298.859 ops/s
# Warmup Iteration  26: 281397.801 ops/s
# Warmup Iteration  27: 293171.992 ops/s
# Warmup Iteration  28: 272671.019 ops/s
# Warmup Iteration  29: 283917.089 ops/s
# Warmup Iteration  30: 282469.808 ops/s
Iteration   1: 270896.676 ops/s
Iteration   2: 283539.388 ops/s
Iteration   3: 278444.192 ops/s
Iteration   4: 291701.962 ops/s
Iteration   5: 285614.095 ops/s
Iteration   6: 277982.274 ops/s
Iteration   7: 284420.581 ops/s
Iteration   8: 282983.684 ops/s
Iteration   9: 281560.462 ops/s
Iteration  10: 297167.822 ops/s
Iteration  11: 268779.969 ops/s
Iteration  12: 298184.019 ops/s
Iteration  13: 271688.779 ops/s
Iteration  14: 280479.260 ops/s
Iteration  15: 280656.363 ops/s
Iteration  16: 290606.044 ops/s
Iteration  17: 277760.373 ops/s
Iteration  18: 281985.120 ops/s
Iteration  19: 282303.707 ops/s
Iteration  20: 283482.317 ops/s
Iteration  21: 286691.361 ops/s
Iteration  22: 276692.005 ops/s
Iteration  23: 286089.721 ops/s
Iteration  24: 289135.707 ops/s
Iteration  25: 275310.808 ops/s
Iteration  26: 279582.511 ops/s
Iteration  27: 294284.127 ops/s
Iteration  28: 294052.170 ops/s
Iteration  29: 271772.021 ops/s
Iteration  30: 289169.201 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeCallbackObserverTest._Benchmark.benchmark_onSuccessCrashes":
  283100.557 ±(99.9%) 5151.952 ops/s [Average]
  (min, avg, max) = (268779.969, 283100.557, 298184.019), stdev = 7711.199
  CI (99.9%): [277948.606, 288252.509] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score      Error  Units
MaybeCallbackObserverTest._Benchmark.benchmark_onSuccessCrashes  thrpt   30  283100.557 ± 5151.952  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTakeTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTakeTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 90386.249 ops/s
# Warmup Iteration   2: 451236.994 ops/s
# Warmup Iteration   3: 474310.976 ops/s
# Warmup Iteration   4: 493343.028 ops/s
# Warmup Iteration   5: 519067.182 ops/s
# Warmup Iteration   6: 467800.631 ops/s
# Warmup Iteration   7: 540109.922 ops/s
# Warmup Iteration   8: 428781.546 ops/s
# Warmup Iteration   9: 537394.631 ops/s
# Warmup Iteration  10: 514289.219 ops/s
# Warmup Iteration  11: 511485.716 ops/s
# Warmup Iteration  12: 557544.947 ops/s
# Warmup Iteration  13: 507925.063 ops/s
# Warmup Iteration  14: 545432.598 ops/s
# Warmup Iteration  15: 515091.103 ops/s
# Warmup Iteration  16: 544299.014 ops/s
# Warmup Iteration  17: 535656.539 ops/s
# Warmup Iteration  18: 549857.251 ops/s
# Warmup Iteration  19: 570748.990 ops/s
# Warmup Iteration  20: 530804.120 ops/s
# Warmup Iteration  21: 544280.087 ops/s
# Warmup Iteration  22: 552364.450 ops/s
# Warmup Iteration  23: 574198.009 ops/s
# Warmup Iteration  24: 544396.221 ops/s
# Warmup Iteration  25: 535308.438 ops/s
# Warmup Iteration  26: 576983.861 ops/s
# Warmup Iteration  27: 546643.576 ops/s
# Warmup Iteration  28: 551754.192 ops/s
# Warmup Iteration  29: 557274.512 ops/s
# Warmup Iteration  30: 554602.076 ops/s
Iteration   1: 558367.757 ops/s
Iteration   2: 534092.158 ops/s
Iteration   3: 572614.704 ops/s
Iteration   4: 538161.005 ops/s
Iteration   5: 560405.783 ops/s
Iteration   6: 569329.277 ops/s
Iteration   7: 547524.881 ops/s
Iteration   8: 553445.647 ops/s
Iteration   9: 537096.995 ops/s
Iteration  10: 547800.127 ops/s
Iteration  11: 561193.369 ops/s
Iteration  12: 550641.613 ops/s
Iteration  13: 550341.506 ops/s
Iteration  14: 546835.929 ops/s
Iteration  15: 544805.440 ops/s
Iteration  16: 547018.654 ops/s
Iteration  17: 550100.508 ops/s
Iteration  18: 540322.321 ops/s
Iteration  19: 556208.405 ops/s
Iteration  20: 542487.336 ops/s
Iteration  21: 558952.165 ops/s
Iteration  22: 565030.791 ops/s
Iteration  23: 529690.775 ops/s
Iteration  24: 558719.952 ops/s
Iteration  25: 546236.913 ops/s
Iteration  26: 564151.488 ops/s
Iteration  27: 544486.303 ops/s
Iteration  28: 556846.354 ops/s
Iteration  29: 546111.106 ops/s
Iteration  30: 538923.046 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeTest._Benchmark.benchmark_doubleOnSubscribe":
  550598.077 ±(99.9%) 7039.669 ops/s [Average]
  (min, avg, max) = (529690.775, 550598.077, 572614.704), stdev = 10536.645
  CI (99.9%): [543558.408, 557637.745] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
ObservableTakeTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  550598.077 ± 7039.669  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableCreateTest._Benchmark.benchmark_basicWithCancellable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableCreateTest._Benchmark.benchmark_basicWithCancellable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 54941.392 ops/s
# Warmup Iteration   2: 184217.139 ops/s
# Warmup Iteration   3: 230581.305 ops/s
# Warmup Iteration   4: 216939.515 ops/s
# Warmup Iteration   5: 239524.803 ops/s
# Warmup Iteration   6: 242456.321 ops/s
# Warmup Iteration   7: 243213.471 ops/s
# Warmup Iteration   8: 241282.452 ops/s
# Warmup Iteration   9: 250364.088 ops/s
# Warmup Iteration  10: 239016.026 ops/s
# Warmup Iteration  11: 245963.934 ops/s
# Warmup Iteration  12: 239409.347 ops/s
# Warmup Iteration  13: 244729.323 ops/s
# Warmup Iteration  14: 241989.781 ops/s
# Warmup Iteration  15: 237746.598 ops/s
# Warmup Iteration  16: 247250.155 ops/s
# Warmup Iteration  17: 250368.642 ops/s
# Warmup Iteration  18: 253560.987 ops/s
# Warmup Iteration  19: 258676.871 ops/s
# Warmup Iteration  20: 250158.525 ops/s
# Warmup Iteration  21: 265299.537 ops/s
# Warmup Iteration  22: 243399.587 ops/s
# Warmup Iteration  23: 261526.359 ops/s
# Warmup Iteration  24: 255386.038 ops/s
# Warmup Iteration  25: 252871.964 ops/s
# Warmup Iteration  26: 246080.474 ops/s
# Warmup Iteration  27: 250413.828 ops/s
# Warmup Iteration  28: 263850.526 ops/s
# Warmup Iteration  29: 252205.727 ops/s
# Warmup Iteration  30: 260093.364 ops/s
Iteration   1: 244154.542 ops/s
Iteration   2: 260139.973 ops/s
Iteration   3: 260606.125 ops/s
Iteration   4: 252436.422 ops/s
Iteration   5: 249697.727 ops/s
Iteration   6: 261042.496 ops/s
Iteration   7: 251541.768 ops/s
Iteration   8: 261289.251 ops/s
Iteration   9: 250208.244 ops/s
Iteration  10: 263829.848 ops/s
Iteration  11: 269363.428 ops/s
Iteration  12: 246236.671 ops/s
Iteration  13: 257620.432 ops/s
Iteration  14: 252102.340 ops/s
Iteration  15: 251274.716 ops/s
Iteration  16: 265414.667 ops/s
Iteration  17: 249345.513 ops/s
Iteration  18: 258511.357 ops/s
Iteration  19: 254890.638 ops/s
Iteration  20: 260968.512 ops/s
Iteration  21: 249665.019 ops/s
Iteration  22: 259906.116 ops/s
Iteration  23: 251312.884 ops/s
Iteration  24: 264838.443 ops/s
Iteration  25: 261159.907 ops/s
Iteration  26: 247120.139 ops/s
Iteration  27: 260064.273 ops/s
Iteration  28: 251392.766 ops/s
Iteration  29: 253523.586 ops/s
Iteration  30: 261662.191 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableCreateTest._Benchmark.benchmark_basicWithCancellable":
  256044.000 ±(99.9%) 4324.963 ops/s [Average]
  (min, avg, max) = (244154.542, 256044.000, 269363.428), stdev = 6473.402
  CI (99.9%): [251719.037, 260368.963] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score      Error  Units
CompletableCreateTest._Benchmark.benchmark_basicWithCancellable  thrpt   30  256044.000 ± 4324.963  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSkipUntilTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSkipUntilTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.828 ops/s
# Warmup Iteration   2: 20293.842 ops/s
# Warmup Iteration   3: 50939.338 ops/s
# Warmup Iteration   4: 53793.271 ops/s
# Warmup Iteration   5: 52932.910 ops/s
# Warmup Iteration   6: 161415.296 ops/s
# Warmup Iteration   7: 183696.173 ops/s
# Warmup Iteration   8: 146911.384 ops/s
# Warmup Iteration   9: 185385.831 ops/s
# Warmup Iteration  10: 175090.294 ops/s
# Warmup Iteration  11: 179928.605 ops/s
# Warmup Iteration  12: 186149.393 ops/s
# Warmup Iteration  13: 174679.811 ops/s
# Warmup Iteration  14: 182735.307 ops/s
# Warmup Iteration  15: 174471.089 ops/s
# Warmup Iteration  16: 182995.506 ops/s
# Warmup Iteration  17: 184542.000 ops/s
# Warmup Iteration  18: 177772.588 ops/s
# Warmup Iteration  19: 185781.641 ops/s
# Warmup Iteration  20: 188262.197 ops/s
# Warmup Iteration  21: 178495.810 ops/s
# Warmup Iteration  22: 182978.689 ops/s
# Warmup Iteration  23: 176031.267 ops/s
# Warmup Iteration  24: 184091.496 ops/s
# Warmup Iteration  25: 181481.009 ops/s
# Warmup Iteration  26: 179984.768 ops/s
# Warmup Iteration  27: 182711.750 ops/s
# Warmup Iteration  28: 183275.562 ops/s
# Warmup Iteration  29: 181233.284 ops/s
# Warmup Iteration  30: 182968.770 ops/s
Iteration   1: 178862.343 ops/s
Iteration   2: 182539.606 ops/s
Iteration   3: 180697.844 ops/s
Iteration   4: 180345.135 ops/s
Iteration   5: 175540.361 ops/s
Iteration   6: 180434.869 ops/s
Iteration   7: 188442.168 ops/s
Iteration   8: 178566.515 ops/s
Iteration   9: 187145.658 ops/s
Iteration  10: 174681.099 ops/s
Iteration  11: 179300.627 ops/s
Iteration  12: 176542.739 ops/s
Iteration  13: 183639.081 ops/s
Iteration  14: 181896.638 ops/s
Iteration  15: 175913.693 ops/s
Iteration  16: 190009.575 ops/s
Iteration  17: 175655.973 ops/s
Iteration  18: 179298.921 ops/s
Iteration  19: 185724.347 ops/s
Iteration  20: 181361.676 ops/s
Iteration  21: 181617.544 ops/s
Iteration  22: 181300.093 ops/s
Iteration  23: 188582.857 ops/s
Iteration  24: 178907.706 ops/s
Iteration  25: 181065.857 ops/s
Iteration  26: 176970.177 ops/s
Iteration  27: 181127.393 ops/s
Iteration  28: 182059.667 ops/s
Iteration  29: 178549.595 ops/s
Iteration  30: 188886.933 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableSkipUntilTest._Benchmark.benchmark_doubleOnSubscribe":
  181188.890 ±(99.9%) 2815.305 ops/s [Average]
  (min, avg, max) = (174681.099, 181188.890, 190009.575), stdev = 4213.817
  CI (99.9%): [178373.584, 184004.195] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
ObservableSkipUntilTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  181188.890 ± 2815.305  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableFlatMapStreamTest._Benchmark.benchmark_onSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableFlatMapStreamTest._Benchmark.benchmark_onSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 181216.463 ops/s
# Warmup Iteration   2: 470793.651 ops/s
# Warmup Iteration   3: 514460.007 ops/s
# Warmup Iteration   4: 503077.355 ops/s
# Warmup Iteration   5: 525919.038 ops/s
# Warmup Iteration   6: 498506.551 ops/s
# Warmup Iteration   7: 517397.864 ops/s
# Warmup Iteration   8: 516702.035 ops/s
# Warmup Iteration   9: 510114.591 ops/s
# Warmup Iteration  10: 515170.238 ops/s
# Warmup Iteration  11: 483660.129 ops/s
# Warmup Iteration  12: 532142.805 ops/s
# Warmup Iteration  13: 523234.012 ops/s
# Warmup Iteration  14: 528912.332 ops/s
# Warmup Iteration  15: 513620.662 ops/s
# Warmup Iteration  16: 533830.505 ops/s
# Warmup Iteration  17: 527589.757 ops/s
# Warmup Iteration  18: 525537.215 ops/s
# Warmup Iteration  19: 549777.089 ops/s
# Warmup Iteration  20: 539953.762 ops/s
# Warmup Iteration  21: 544450.697 ops/s
# Warmup Iteration  22: 523944.878 ops/s
# Warmup Iteration  23: 553663.623 ops/s
# Warmup Iteration  24: 541225.269 ops/s
# Warmup Iteration  25: 534171.039 ops/s
# Warmup Iteration  26: 544035.461 ops/s
# Warmup Iteration  27: 547263.022 ops/s
# Warmup Iteration  28: 520674.032 ops/s
# Warmup Iteration  29: 539366.536 ops/s
# Warmup Iteration  30: 532273.066 ops/s
Iteration   1: 561105.268 ops/s
Iteration   2: 544482.902 ops/s
Iteration   3: 527379.385 ops/s
Iteration   4: 552147.714 ops/s
Iteration   5: 543243.515 ops/s
Iteration   6: 528221.889 ops/s
Iteration   7: 543683.718 ops/s
Iteration   8: 521174.793 ops/s
Iteration   9: 544960.398 ops/s
Iteration  10: 545204.762 ops/s
Iteration  11: 543518.128 ops/s
Iteration  12: 532955.884 ops/s
Iteration  13: 524702.838 ops/s
Iteration  14: 557196.691 ops/s
Iteration  15: 520384.904 ops/s
Iteration  16: 537405.021 ops/s
Iteration  17: 530536.130 ops/s
Iteration  18: 552906.668 ops/s
Iteration  19: 525779.881 ops/s
Iteration  20: 560871.432 ops/s
Iteration  21: 510993.085 ops/s
Iteration  22: 538832.227 ops/s
Iteration  23: 526237.531 ops/s
Iteration  24: 526432.879 ops/s
Iteration  25: 541858.057 ops/s
Iteration  26: 522173.400 ops/s
Iteration  27: 558130.468 ops/s
Iteration  28: 536295.223 ops/s
Iteration  29: 522688.905 ops/s
Iteration  30: 449297.884 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableFlatMapStreamTest._Benchmark.benchmark_onSubscribe":
  534360.053 ±(99.9%) 13965.304 ops/s [Average]
  (min, avg, max) = (449297.884, 534360.053, 561105.268), stdev = 20902.611
  CI (99.9%): [520394.749, 548325.356] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score       Error  Units
ObservableFlatMapStreamTest._Benchmark.benchmark_onSubscribe  thrpt   30  534360.053 ± 13965.304  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableAllTest._Benchmark.benchmark_predicateThrowsObservable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableAllTest._Benchmark.benchmark_predicateThrowsObservable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 20933.211 ops/s
# Warmup Iteration   2: 96999.293 ops/s
# Warmup Iteration   3: 168009.843 ops/s
# Warmup Iteration   4: 173727.570 ops/s
# Warmup Iteration   5: 170940.475 ops/s
# Warmup Iteration   6: 163190.938 ops/s
# Warmup Iteration   7: 164940.265 ops/s
# Warmup Iteration   8: 179819.862 ops/s
# Warmup Iteration   9: 173634.472 ops/s
# Warmup Iteration  10: 173935.095 ops/s
# Warmup Iteration  11: 172717.153 ops/s
# Warmup Iteration  12: 176043.196 ops/s
# Warmup Iteration  13: 170833.895 ops/s
# Warmup Iteration  14: 173809.516 ops/s
# Warmup Iteration  15: 175942.904 ops/s
# Warmup Iteration  16: 169730.538 ops/s
# Warmup Iteration  17: 182881.740 ops/s
# Warmup Iteration  18: 189352.784 ops/s
# Warmup Iteration  19: 175829.978 ops/s
# Warmup Iteration  20: 188844.569 ops/s
# Warmup Iteration  21: 187352.316 ops/s
# Warmup Iteration  22: 179587.482 ops/s
# Warmup Iteration  23: 187751.623 ops/s
# Warmup Iteration  24: 176440.642 ops/s
# Warmup Iteration  25: 179269.734 ops/s
# Warmup Iteration  26: 189671.062 ops/s
# Warmup Iteration  27: 181176.962 ops/s
# Warmup Iteration  28: 182391.001 ops/s
# Warmup Iteration  29: 183566.195 ops/s
# Warmup Iteration  30: 179364.495 ops/s
Iteration   1: 181731.647 ops/s
Iteration   2: 182980.518 ops/s
Iteration   3: 181410.260 ops/s
Iteration   4: 175087.750 ops/s
Iteration   5: 185421.537 ops/s
Iteration   6: 182167.653 ops/s
Iteration   7: 184248.142 ops/s
Iteration   8: 177702.793 ops/s
Iteration   9: 186042.193 ops/s
Iteration  10: 180122.756 ops/s
Iteration  11: 185621.740 ops/s
Iteration  12: 180914.792 ops/s
Iteration  13: 182657.942 ops/s
Iteration  14: 185210.686 ops/s
Iteration  15: 180362.415 ops/s
Iteration  16: 188077.562 ops/s
Iteration  17: 180022.812 ops/s
Iteration  18: 184380.186 ops/s
Iteration  19: 184155.286 ops/s
Iteration  20: 187042.592 ops/s
Iteration  21: 183634.082 ops/s
Iteration  22: 181097.493 ops/s
Iteration  23: 189114.750 ops/s
Iteration  24: 180790.189 ops/s
Iteration  25: 185387.137 ops/s
Iteration  26: 177565.195 ops/s
Iteration  27: 179661.465 ops/s
Iteration  28: 185983.147 ops/s
Iteration  29: 178581.732 ops/s
Iteration  30: 183210.892 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableAllTest._Benchmark.benchmark_predicateThrowsObservable":
  182679.578 ±(99.9%) 2205.155 ops/s [Average]
  (min, avg, max) = (175087.750, 182679.578, 189114.750), stdev = 3300.572
  CI (99.9%): [180474.423, 184884.733] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
ObservableAllTest._Benchmark.benchmark_predicateThrowsObservable  thrpt   30  182679.578 ± 2205.155  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_bufferExactBoundaryDoubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_bufferExactBoundaryDoubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.888 ops/s
# Warmup Iteration   2: 28916.119 ops/s
# Warmup Iteration   3: 92028.039 ops/s
# Warmup Iteration   4: 102242.327 ops/s
# Warmup Iteration   5: 112653.504 ops/s
# Warmup Iteration   6: 159163.196 ops/s
# Warmup Iteration   7: 269013.287 ops/s
# Warmup Iteration   8: 287603.854 ops/s
# Warmup Iteration   9: 294448.175 ops/s
# Warmup Iteration  10: 289910.056 ops/s
# Warmup Iteration  11: 292729.021 ops/s
# Warmup Iteration  12: 283220.284 ops/s
# Warmup Iteration  13: 285109.168 ops/s
# Warmup Iteration  14: 297196.104 ops/s
# Warmup Iteration  15: 285155.339 ops/s
# Warmup Iteration  16: 286700.398 ops/s
# Warmup Iteration  17: 297041.165 ops/s
# Warmup Iteration  18: 283110.007 ops/s
# Warmup Iteration  19: 279261.324 ops/s
# Warmup Iteration  20: 294224.253 ops/s
# Warmup Iteration  21: 280384.556 ops/s
# Warmup Iteration  22: 287288.047 ops/s
# Warmup Iteration  23: 296006.992 ops/s
# Warmup Iteration  24: 284226.823 ops/s
# Warmup Iteration  25: 283532.704 ops/s
# Warmup Iteration  26: 285524.018 ops/s
# Warmup Iteration  27: 281694.941 ops/s
# Warmup Iteration  28: 303236.302 ops/s
# Warmup Iteration  29: 274469.347 ops/s
# Warmup Iteration  30: 303154.785 ops/s
Iteration   1: 286842.176 ops/s
Iteration   2: 290297.704 ops/s
Iteration   3: 283497.003 ops/s
Iteration   4: 280461.178 ops/s
Iteration   5: 291068.799 ops/s
Iteration   6: 282121.475 ops/s
Iteration   7: 299029.655 ops/s
Iteration   8: 290121.330 ops/s
Iteration   9: 283952.436 ops/s
Iteration  10: 286083.985 ops/s
Iteration  11: 282416.890 ops/s
Iteration  12: 300198.317 ops/s
Iteration  13: 287333.282 ops/s
Iteration  14: 281503.900 ops/s
Iteration  15: 289889.284 ops/s
Iteration  16: 295706.226 ops/s
Iteration  17: 284074.668 ops/s
Iteration  18: 296510.017 ops/s
Iteration  19: 282350.101 ops/s
Iteration  20: 298096.137 ops/s
Iteration  21: 279257.454 ops/s
Iteration  22: 298345.270 ops/s
Iteration  23: 290498.773 ops/s
Iteration  24: 241406.328 ops/s
Iteration  25: 288664.990 ops/s
Iteration  26: 289775.061 ops/s
Iteration  27: 292712.573 ops/s
Iteration  28: 291631.555 ops/s
Iteration  29: 284499.980 ops/s
Iteration  30: 293740.516 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_bufferExactBoundaryDoubleOnSubscribe":
  287402.902 ±(99.9%) 7034.995 ops/s [Average]
  (min, avg, max) = (241406.328, 287402.902, 300198.317), stdev = 10529.650
  CI (99.9%): [280367.907, 294437.897] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt       Score      Error  Units
ObservableBufferTest._Benchmark.benchmark_bufferExactBoundaryDoubleOnSubscribe  thrpt   30  287402.902 ± 7034.995  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRangeTest._Benchmark.benchmark_nearMaxValueWithoutBackpressure$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRangeTest._Benchmark.benchmark_nearMaxValueWithoutBackpressure

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1464746.982 ops/s
# Warmup Iteration   2: 3883663.223 ops/s
# Warmup Iteration   3: 5775288.278 ops/s
# Warmup Iteration   4: 5713310.179 ops/s
# Warmup Iteration   5: 5737502.241 ops/s
# Warmup Iteration   6: 5665260.798 ops/s
# Warmup Iteration   7: 5653711.041 ops/s
# Warmup Iteration   8: 5708727.907 ops/s
# Warmup Iteration   9: 5735682.385 ops/s
# Warmup Iteration  10: 5694346.768 ops/s
# Warmup Iteration  11: 5499647.104 ops/s
# Warmup Iteration  12: 5774493.795 ops/s
# Warmup Iteration  13: 5852327.999 ops/s
# Warmup Iteration  14: 5536970.609 ops/s
# Warmup Iteration  15: 5890932.080 ops/s
# Warmup Iteration  16: 5618641.788 ops/s
# Warmup Iteration  17: 5570022.059 ops/s
# Warmup Iteration  18: 5929406.914 ops/s
# Warmup Iteration  19: 6002097.827 ops/s
# Warmup Iteration  20: 5692473.208 ops/s
# Warmup Iteration  21: 5708839.349 ops/s
# Warmup Iteration  22: 5667872.163 ops/s
# Warmup Iteration  23: 5937749.876 ops/s
# Warmup Iteration  24: 5712150.413 ops/s
# Warmup Iteration  25: 5645690.324 ops/s
# Warmup Iteration  26: 5870101.824 ops/s
# Warmup Iteration  27: 5699481.211 ops/s
# Warmup Iteration  28: 5636568.104 ops/s
# Warmup Iteration  29: 5880313.006 ops/s
# Warmup Iteration  30: 5891396.197 ops/s
Iteration   1: 5659234.050 ops/s
Iteration   2: 5566174.483 ops/s
Iteration   3: 5878106.539 ops/s
Iteration   4: 5598966.894 ops/s
Iteration   5: 5793081.167 ops/s
Iteration   6: 5759574.345 ops/s
Iteration   7: 5915009.664 ops/s
Iteration   8: 5593498.701 ops/s
Iteration   9: 5766734.205 ops/s
Iteration  10: 5818898.858 ops/s
Iteration  11: 5671445.722 ops/s
Iteration  12: 5886769.719 ops/s
Iteration  13: 5675440.708 ops/s
Iteration  14: 5761323.677 ops/s
Iteration  15: 5888787.028 ops/s
Iteration  16: 5834816.216 ops/s
Iteration  17: 5630993.408 ops/s
Iteration  18: 5822177.070 ops/s
Iteration  19: 5741828.290 ops/s
Iteration  20: 5828676.112 ops/s
Iteration  21: 5756931.622 ops/s
Iteration  22: 5876748.767 ops/s
Iteration  23: 5990373.789 ops/s
Iteration  24: 5578801.292 ops/s
Iteration  25: 5972490.738 ops/s
Iteration  26: 5658306.720 ops/s
Iteration  27: 5949289.285 ops/s
Iteration  28: 5758686.883 ops/s
Iteration  29: 5717628.088 ops/s
Iteration  30: 5757317.003 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableRangeTest._Benchmark.benchmark_nearMaxValueWithoutBackpressure":
  5770270.368 ±(99.9%) 79660.723 ops/s [Average]
  (min, avg, max) = (5566174.483, 5770270.368, 5990373.789), stdev = 119232.429
  CI (99.9%): [5690609.645, 5849931.091] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score       Error  Units
ObservableRangeTest._Benchmark.benchmark_nearMaxValueWithoutBackpressure  thrpt   30  5770270.368 ± 79660.723  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableCacheTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableCacheTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 826820.445 ops/s
# Warmup Iteration   2: 2693970.004 ops/s
# Warmup Iteration   3: 2877185.960 ops/s
# Warmup Iteration   4: 3207064.381 ops/s
# Warmup Iteration   5: 3373483.321 ops/s
# Warmup Iteration   6: 3358384.357 ops/s
# Warmup Iteration   7: 3299311.669 ops/s
# Warmup Iteration   8: 3379586.873 ops/s
# Warmup Iteration   9: 3277146.392 ops/s
# Warmup Iteration  10: 3440836.953 ops/s
# Warmup Iteration  11: 3158870.723 ops/s
# Warmup Iteration  12: 3369820.509 ops/s
# Warmup Iteration  13: 3292739.599 ops/s
# Warmup Iteration  14: 3236817.852 ops/s
# Warmup Iteration  15: 3517328.583 ops/s
# Warmup Iteration  16: 3380495.377 ops/s
# Warmup Iteration  17: 3524481.744 ops/s
# Warmup Iteration  18: 3508976.299 ops/s
# Warmup Iteration  19: 3311308.722 ops/s
# Warmup Iteration  20: 3399953.974 ops/s
# Warmup Iteration  21: 3341970.047 ops/s
# Warmup Iteration  22: 3258466.003 ops/s
# Warmup Iteration  23: 3514921.050 ops/s
# Warmup Iteration  24: 3433919.297 ops/s
# Warmup Iteration  25: 3289093.191 ops/s
# Warmup Iteration  26: 3474366.828 ops/s
# Warmup Iteration  27: 3368690.894 ops/s
# Warmup Iteration  28: 3415822.383 ops/s
# Warmup Iteration  29: 3488047.917 ops/s
# Warmup Iteration  30: 3328813.939 ops/s
Iteration   1: 3461556.262 ops/s
Iteration   2: 3368218.609 ops/s
Iteration   3: 3305300.461 ops/s
Iteration   4: 3332480.505 ops/s
Iteration   5: 3305905.395 ops/s
Iteration   6: 3355881.106 ops/s
Iteration   7: 3482296.063 ops/s
Iteration   8: 3287153.839 ops/s
Iteration   9: 3489795.011 ops/s
Iteration  10: 3420967.572 ops/s
Iteration  11: 3345820.657 ops/s
Iteration  12: 3412291.505 ops/s
Iteration  13: 3432366.184 ops/s
Iteration  14: 3436878.246 ops/s
Iteration  15: 3434885.498 ops/s
Iteration  16: 3318869.877 ops/s
Iteration  17: 3475812.592 ops/s
Iteration  18: 3453285.351 ops/s
Iteration  19: 2711262.356 ops/s
Iteration  20: 3507336.572 ops/s
Iteration  21: 3360188.917 ops/s
Iteration  22: 3403467.452 ops/s
Iteration  23: 3493654.403 ops/s
Iteration  24: 3434297.448 ops/s
Iteration  25: 3466464.267 ops/s
Iteration  26: 3306960.630 ops/s
Iteration  27: 3387464.464 ops/s
Iteration  28: 3343800.922 ops/s
Iteration  29: 3282307.680 ops/s
Iteration  30: 3376451.800 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableCacheTest._Benchmark.benchmark_dispose":
  3373114.055 ±(99.9%) 94936.489 ops/s [Average]
  (min, avg, max) = (2711262.356, 3373114.055, 3507336.572), stdev = 142096.478
  CI (99.9%): [3278177.566, 3468050.544] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score       Error  Units
ObservableCacheTest._Benchmark.benchmark_dispose  thrpt   30  3373114.055 ± 94936.489  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRangeTest._Benchmark.benchmark_noBackpressure$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRangeTest._Benchmark.benchmark_noBackpressure

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 4433.008 ops/s
# Warmup Iteration   2: 87878.388 ops/s
# Warmup Iteration   3: 124135.841 ops/s
# Warmup Iteration   4: 138614.701 ops/s
# Warmup Iteration   5: 140611.808 ops/s
# Warmup Iteration   6: 133442.240 ops/s
# Warmup Iteration   7: 134888.990 ops/s
# Warmup Iteration   8: 138733.683 ops/s
# Warmup Iteration   9: 138739.278 ops/s
# Warmup Iteration  10: 123972.550 ops/s
# Warmup Iteration  11: 134760.044 ops/s
# Warmup Iteration  12: 128090.874 ops/s
# Warmup Iteration  13: 141404.719 ops/s
# Warmup Iteration  14: 138709.670 ops/s
# Warmup Iteration  15: 138153.333 ops/s
# Warmup Iteration  16: 137938.905 ops/s
# Warmup Iteration  17: 136651.841 ops/s
# Warmup Iteration  18: 142884.843 ops/s
# Warmup Iteration  19: 134913.601 ops/s
# Warmup Iteration  20: 140733.952 ops/s
# Warmup Iteration  21: 134632.326 ops/s
# Warmup Iteration  22: 139489.876 ops/s
# Warmup Iteration  23: 133648.042 ops/s
# Warmup Iteration  24: 135842.821 ops/s
# Warmup Iteration  25: 140068.396 ops/s
# Warmup Iteration  26: 137643.656 ops/s
# Warmup Iteration  27: 139310.043 ops/s
# Warmup Iteration  28: 141752.874 ops/s
# Warmup Iteration  29: 134480.142 ops/s
# Warmup Iteration  30: 145020.702 ops/s
Iteration   1: 135878.903 ops/s
Iteration   2: 140571.155 ops/s
Iteration   3: 136986.578 ops/s
Iteration   4: 138399.772 ops/s
Iteration   5: 138179.232 ops/s
Iteration   6: 137109.035 ops/s
Iteration   7: 136268.939 ops/s
Iteration   8: 137937.404 ops/s
Iteration   9: 136859.514 ops/s
Iteration  10: 137954.307 ops/s
Iteration  11: 139920.949 ops/s
Iteration  12: 135040.241 ops/s
Iteration  13: 144938.188 ops/s
Iteration  14: 140395.909 ops/s
Iteration  15: 136921.094 ops/s
Iteration  16: 140788.623 ops/s
Iteration  17: 135628.413 ops/s
Iteration  18: 137162.238 ops/s
Iteration  19: 140191.722 ops/s
Iteration  20: 140241.745 ops/s
Iteration  21: 141108.178 ops/s
Iteration  22: 135615.670 ops/s
Iteration  23: 139441.727 ops/s
Iteration  24: 140967.706 ops/s
Iteration  25: 136975.306 ops/s
Iteration  26: 141107.968 ops/s
Iteration  27: 136945.467 ops/s
Iteration  28: 144578.359 ops/s
Iteration  29: 145365.034 ops/s
Iteration  30: 135751.695 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableRangeTest._Benchmark.benchmark_noBackpressure":
  138841.036 ±(99.9%) 1874.403 ops/s [Average]
  (min, avg, max) = (135040.241, 138841.036, 145365.034), stdev = 2805.519
  CI (99.9%): [136966.632, 140715.439] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score      Error  Units
ObservableRangeTest._Benchmark.benchmark_noBackpressure  thrpt   30  138841.036 ± 1874.403  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableIgnoreElementsTest._Benchmark.benchmark_completedOkObservable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableIgnoreElementsTest._Benchmark.benchmark_completedOkObservable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1496898.563 ops/s
# Warmup Iteration   2: 4904240.286 ops/s
# Warmup Iteration   3: 6586949.876 ops/s
# Warmup Iteration   4: 6635025.748 ops/s
# Warmup Iteration   5: 6970105.135 ops/s
# Warmup Iteration   6: 6742596.139 ops/s
# Warmup Iteration   7: 6766335.046 ops/s
# Warmup Iteration   8: 6887168.696 ops/s
# Warmup Iteration   9: 6728490.723 ops/s
# Warmup Iteration  10: 7107566.622 ops/s
# Warmup Iteration  11: 6724340.698 ops/s
# Warmup Iteration  12: 6669159.749 ops/s
# Warmup Iteration  13: 7122413.206 ops/s
# Warmup Iteration  14: 7023766.434 ops/s
# Warmup Iteration  15: 6343111.171 ops/s
# Warmup Iteration  16: 7047551.013 ops/s
# Warmup Iteration  17: 6750315.221 ops/s
# Warmup Iteration  18: 7091513.662 ops/s
# Warmup Iteration  19: 6699037.954 ops/s
# Warmup Iteration  20: 6911935.781 ops/s
# Warmup Iteration  21: 6774952.749 ops/s
# Warmup Iteration  22: 6884825.644 ops/s
# Warmup Iteration  23: 6922819.620 ops/s
# Warmup Iteration  24: 6814021.394 ops/s
# Warmup Iteration  25: 6911267.051 ops/s
# Warmup Iteration  26: 6844986.456 ops/s
# Warmup Iteration  27: 7003308.682 ops/s
# Warmup Iteration  28: 6663265.913 ops/s
# Warmup Iteration  29: 6865635.971 ops/s
# Warmup Iteration  30: 6846344.987 ops/s
Iteration   1: 6684382.887 ops/s
Iteration   2: 7060961.362 ops/s
Iteration   3: 6806625.503 ops/s
Iteration   4: 6998183.391 ops/s
Iteration   5: 6697215.506 ops/s
Iteration   6: 6647233.640 ops/s
Iteration   7: 6787027.483 ops/s
Iteration   8: 6625723.906 ops/s
Iteration   9: 7047114.177 ops/s
Iteration  10: 7050593.220 ops/s
Iteration  11: 6840715.515 ops/s
Iteration  12: 6711838.434 ops/s
Iteration  13: 6286336.337 ops/s
Iteration  14: 6027886.816 ops/s
Iteration  15: 6855680.876 ops/s
Iteration  16: 6828714.109 ops/s
Iteration  17: 6798904.660 ops/s
Iteration  18: 6806986.277 ops/s
Iteration  19: 6940357.597 ops/s
Iteration  20: 6723596.441 ops/s
Iteration  21: 7022178.433 ops/s
Iteration  22: 6597741.141 ops/s
Iteration  23: 6906390.319 ops/s
Iteration  24: 6694992.538 ops/s
Iteration  25: 6921499.956 ops/s
Iteration  26: 6956853.430 ops/s
Iteration  27: 6543484.936 ops/s
Iteration  28: 7082296.002 ops/s
Iteration  29: 6925367.704 ops/s
Iteration  30: 6614287.136 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableIgnoreElementsTest._Benchmark.benchmark_completedOkObservable":
  6783038.991 ±(99.9%) 154315.446 ops/s [Average]
  (min, avg, max) = (6027886.816, 6783038.991, 7082296.002), stdev = 230972.112
  CI (99.9%): [6628723.545, 6937354.437] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score        Error  Units
ObservableIgnoreElementsTest._Benchmark.benchmark_completedOkObservable  thrpt   30  6783038.991 ± 154315.446  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableScanTest._Benchmark.benchmark_noBackpressureWithInitialValue$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableScanTest._Benchmark.benchmark_noBackpressureWithInitialValue

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 201437.291 ops/s
# Warmup Iteration   2: 425032.918 ops/s
# Warmup Iteration   3: 489769.041 ops/s
# Warmup Iteration   4: 529292.708 ops/s
# Warmup Iteration   5: 538553.620 ops/s
# Warmup Iteration   6: 522308.848 ops/s
# Warmup Iteration   7: 524316.201 ops/s
# Warmup Iteration   8: 541936.561 ops/s
# Warmup Iteration   9: 524690.022 ops/s
# Warmup Iteration  10: 536391.221 ops/s
# Warmup Iteration  11: 564839.192 ops/s
# Warmup Iteration  12: 521421.515 ops/s
# Warmup Iteration  13: 508485.991 ops/s
# Warmup Iteration  14: 542219.380 ops/s
# Warmup Iteration  15: 535695.085 ops/s
# Warmup Iteration  16: 533655.541 ops/s
# Warmup Iteration  17: 546177.853 ops/s
# Warmup Iteration  18: 466608.842 ops/s
# Warmup Iteration  19: 502184.449 ops/s
# Warmup Iteration  20: 513996.774 ops/s
# Warmup Iteration  21: 528373.398 ops/s
# Warmup Iteration  22: 526053.559 ops/s
# Warmup Iteration  23: 528829.342 ops/s
# Warmup Iteration  24: 490858.987 ops/s
# Warmup Iteration  25: 522394.719 ops/s
# Warmup Iteration  26: 520166.947 ops/s
# Warmup Iteration  27: 497463.054 ops/s
# Warmup Iteration  28: 526591.937 ops/s
# Warmup Iteration  29: 520126.018 ops/s
# Warmup Iteration  30: 530723.080 ops/s
Iteration   1: 542070.568 ops/s
Iteration   2: 529200.645 ops/s
Iteration   3: 498574.442 ops/s
Iteration   4: 531328.781 ops/s
Iteration   5: 511095.871 ops/s
Iteration   6: 514609.267 ops/s
Iteration   7: 535014.195 ops/s
Iteration   8: 547696.393 ops/s
Iteration   9: 508940.547 ops/s
Iteration  10: 510206.960 ops/s
Iteration  11: 517285.551 ops/s
Iteration  12: 551585.616 ops/s
Iteration  13: 515217.825 ops/s
Iteration  14: 517640.059 ops/s
Iteration  15: 518980.942 ops/s
Iteration  16: 545578.151 ops/s
Iteration  17: 524093.226 ops/s
Iteration  18: 521029.695 ops/s
Iteration  19: 519284.816 ops/s
Iteration  20: 514717.658 ops/s
Iteration  21: 509304.587 ops/s
Iteration  22: 514079.896 ops/s
Iteration  23: 497290.622 ops/s
Iteration  24: 544069.956 ops/s
Iteration  25: 510259.680 ops/s
Iteration  26: 522632.356 ops/s
Iteration  27: 507043.299 ops/s
Iteration  28: 524684.936 ops/s
Iteration  29: 522333.316 ops/s
Iteration  30: 524004.895 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableScanTest._Benchmark.benchmark_noBackpressureWithInitialValue":
  521661.825 ±(99.9%) 9356.854 ops/s [Average]
  (min, avg, max) = (497290.622, 521661.825, 551585.616), stdev = 14004.900
  CI (99.9%): [512304.971, 531018.679] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score      Error  Units
ObservableScanTest._Benchmark.benchmark_noBackpressureWithInitialValue  thrpt   30  521661.825 ± 9356.854  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastOneTest._Benchmark.benchmark_lastOfManyReturnsLast$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastOneTest._Benchmark.benchmark_lastOfManyReturnsLast

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1547104.894 ops/s
# Warmup Iteration   2: 3917994.201 ops/s
# Warmup Iteration   3: 5655186.854 ops/s
# Warmup Iteration   4: 5735245.783 ops/s
# Warmup Iteration   5: 6042426.959 ops/s
# Warmup Iteration   6: 5814018.084 ops/s
# Warmup Iteration   7: 5603252.775 ops/s
# Warmup Iteration   8: 5968308.750 ops/s
# Warmup Iteration   9: 5885218.136 ops/s
# Warmup Iteration  10: 5692483.123 ops/s
# Warmup Iteration  11: 5830249.602 ops/s
# Warmup Iteration  12: 5816288.353 ops/s
# Warmup Iteration  13: 6079669.230 ops/s
# Warmup Iteration  14: 5923927.904 ops/s
# Warmup Iteration  15: 5660651.778 ops/s
# Warmup Iteration  16: 5814815.833 ops/s
# Warmup Iteration  17: 5840428.701 ops/s
# Warmup Iteration  18: 5865616.424 ops/s
# Warmup Iteration  19: 5824416.636 ops/s
# Warmup Iteration  20: 5915156.674 ops/s
# Warmup Iteration  21: 5880758.232 ops/s
# Warmup Iteration  22: 5755833.381 ops/s
# Warmup Iteration  23: 5710476.512 ops/s
# Warmup Iteration  24: 6023145.053 ops/s
# Warmup Iteration  25: 5853578.918 ops/s
# Warmup Iteration  26: 5738003.426 ops/s
# Warmup Iteration  27: 5823047.944 ops/s
# Warmup Iteration  28: 5929953.164 ops/s
# Warmup Iteration  29: 5670437.003 ops/s
# Warmup Iteration  30: 5994797.218 ops/s
Iteration   1: 5776331.023 ops/s
Iteration   2: 5835821.546 ops/s
Iteration   3: 5889242.623 ops/s
Iteration   4: 5902229.041 ops/s
Iteration   5: 6050034.387 ops/s
Iteration   6: 5847352.794 ops/s
Iteration   7: 5653377.476 ops/s
Iteration   8: 4715234.972 ops/s
Iteration   9: 5695761.336 ops/s
Iteration  10: 6089258.622 ops/s
Iteration  11: 5852535.920 ops/s
Iteration  12: 5743997.718 ops/s
Iteration  13: 5920009.422 ops/s
Iteration  14: 5783805.459 ops/s
Iteration  15: 5797588.111 ops/s
Iteration  16: 5845992.142 ops/s
Iteration  17: 5898629.253 ops/s
Iteration  18: 6061184.359 ops/s
Iteration  19: 5700174.088 ops/s
Iteration  20: 6062743.318 ops/s
Iteration  21: 5746496.085 ops/s
Iteration  22: 5832864.269 ops/s
Iteration  23: 5835061.374 ops/s
Iteration  24: 5932658.785 ops/s
Iteration  25: 5641649.476 ops/s
Iteration  26: 5795491.010 ops/s
Iteration  27: 5904384.441 ops/s
Iteration  28: 5629193.545 ops/s
Iteration  29: 5895841.070 ops/s
Iteration  30: 5608067.774 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastOneTest._Benchmark.benchmark_lastOfManyReturnsLast":
  5798100.381 ±(99.9%) 161344.503 ops/s [Average]
  (min, avg, max) = (4715234.972, 5798100.381, 6089258.622), stdev = 241492.874
  CI (99.9%): [5636755.879, 5959444.884] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score        Error  Units
ObservableTakeLastOneTest._Benchmark.benchmark_lastOfManyReturnsLast  thrpt   30  5798100.381 ± 161344.503  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableIgnoreElementsTest._Benchmark.benchmark_completedOk$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableIgnoreElementsTest._Benchmark.benchmark_completedOk

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1309958.905 ops/s
# Warmup Iteration   2: 4929929.281 ops/s
# Warmup Iteration   3: 8009273.324 ops/s
# Warmup Iteration   4: 7458123.992 ops/s
# Warmup Iteration   5: 7659984.002 ops/s
# Warmup Iteration   6: 7442472.144 ops/s
# Warmup Iteration   7: 7960105.791 ops/s
# Warmup Iteration   8: 7599440.921 ops/s
# Warmup Iteration   9: 7905979.261 ops/s
# Warmup Iteration  10: 7665120.375 ops/s
# Warmup Iteration  11: 7736476.773 ops/s
# Warmup Iteration  12: 7854122.637 ops/s
# Warmup Iteration  13: 7425902.448 ops/s
# Warmup Iteration  14: 7913419.971 ops/s
# Warmup Iteration  15: 7621950.206 ops/s
# Warmup Iteration  16: 8016278.798 ops/s
# Warmup Iteration  17: 8029734.308 ops/s
# Warmup Iteration  18: 7878717.249 ops/s
# Warmup Iteration  19: 7587770.384 ops/s
# Warmup Iteration  20: 8118690.294 ops/s
# Warmup Iteration  21: 7585825.647 ops/s
# Warmup Iteration  22: 7973253.960 ops/s
# Warmup Iteration  23: 8101999.049 ops/s
# Warmup Iteration  24: 7694260.966 ops/s
# Warmup Iteration  25: 7298657.546 ops/s
# Warmup Iteration  26: 7844565.733 ops/s
# Warmup Iteration  27: 7664311.399 ops/s
# Warmup Iteration  28: 7787706.773 ops/s
# Warmup Iteration  29: 7583280.158 ops/s
# Warmup Iteration  30: 7747391.411 ops/s
Iteration   1: 7890927.320 ops/s
Iteration   2: 7871442.114 ops/s
Iteration   3: 8080637.709 ops/s
Iteration   4: 7506361.737 ops/s
Iteration   5: 7572149.690 ops/s
Iteration   6: 8164093.306 ops/s
Iteration   7: 7400593.961 ops/s
Iteration   8: 7787026.119 ops/s
Iteration   9: 7883086.850 ops/s
Iteration  10: 7648990.241 ops/s
Iteration  11: 7925549.950 ops/s
Iteration  12: 7715467.212 ops/s
Iteration  13: 7736190.852 ops/s
Iteration  14: 7941675.507 ops/s
Iteration  15: 7624283.348 ops/s
Iteration  16: 7970983.274 ops/s
Iteration  17: 7532372.980 ops/s
Iteration  18: 7578830.339 ops/s
Iteration  19: 7797163.644 ops/s
Iteration  20: 7568683.300 ops/s
Iteration  21: 7806697.522 ops/s
Iteration  22: 7629704.305 ops/s
Iteration  23: 7957357.943 ops/s
Iteration  24: 7552585.360 ops/s
Iteration  25: 8028525.289 ops/s
Iteration  26: 7667297.370 ops/s
Iteration  27: 7887674.023 ops/s
Iteration  28: 7861913.184 ops/s
Iteration  29: 7664332.658 ops/s
Iteration  30: 8043619.536 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableIgnoreElementsTest._Benchmark.benchmark_completedOk":
  7776540.555 ±(99.9%) 129591.886 ops/s [Average]
  (min, avg, max) = (7400593.961, 7776540.555, 8164093.306), stdev = 193967.049
  CI (99.9%): [7646948.669, 7906132.441] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score        Error  Units
ObservableIgnoreElementsTest._Benchmark.benchmark_completedOk  thrpt   30  7776540.555 ± 129591.886  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhileTest._Benchmark.benchmark_noUnsubscribeDownstream$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhileTest._Benchmark.benchmark_noUnsubscribeDownstream

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1507034.360 ops/s
# Warmup Iteration   2: 4336816.119 ops/s
# Warmup Iteration   3: 5984607.069 ops/s
# Warmup Iteration   4: 6318091.130 ops/s
# Warmup Iteration   5: 6161844.511 ops/s
# Warmup Iteration   6: 6048537.272 ops/s
# Warmup Iteration   7: 6208663.520 ops/s
# Warmup Iteration   8: 5996460.048 ops/s
# Warmup Iteration   9: 6127752.168 ops/s
# Warmup Iteration  10: 6334160.242 ops/s
# Warmup Iteration  11: 6085031.848 ops/s
# Warmup Iteration  12: 6221326.667 ops/s
# Warmup Iteration  13: 6072609.694 ops/s
# Warmup Iteration  14: 6197022.895 ops/s
# Warmup Iteration  15: 6192740.362 ops/s
# Warmup Iteration  16: 6114027.552 ops/s
# Warmup Iteration  17: 6307894.179 ops/s
# Warmup Iteration  18: 5996212.574 ops/s
# Warmup Iteration  19: 6140628.029 ops/s
# Warmup Iteration  20: 5982907.561 ops/s
# Warmup Iteration  21: 5931197.189 ops/s
# Warmup Iteration  22: 6494817.716 ops/s
# Warmup Iteration  23: 5875817.866 ops/s
# Warmup Iteration  24: 6236098.096 ops/s
# Warmup Iteration  25: 5988718.665 ops/s
# Warmup Iteration  26: 6162934.969 ops/s
# Warmup Iteration  27: 6097266.091 ops/s
# Warmup Iteration  28: 6065775.828 ops/s
# Warmup Iteration  29: 6163567.061 ops/s
# Warmup Iteration  30: 5955505.574 ops/s
Iteration   1: 6276724.105 ops/s
Iteration   2: 5992679.217 ops/s
Iteration   3: 4824581.317 ops/s
Iteration   4: 6423904.434 ops/s
Iteration   5: 5913030.052 ops/s
Iteration   6: 6139960.461 ops/s
Iteration   7: 6002906.680 ops/s
Iteration   8: 6221295.941 ops/s
Iteration   9: 5934282.828 ops/s
Iteration  10: 6047700.791 ops/s
Iteration  11: 6398613.208 ops/s
Iteration  12: 5980705.371 ops/s
Iteration  13: 6226604.057 ops/s
Iteration  14: 6044100.662 ops/s
Iteration  15: 5960936.117 ops/s
Iteration  16: 6226785.636 ops/s
Iteration  17: 6001814.258 ops/s
Iteration  18: 6157890.794 ops/s
Iteration  19: 6123193.020 ops/s
Iteration  20: 6151833.023 ops/s
Iteration  21: 6281135.079 ops/s
Iteration  22: 6004475.905 ops/s
Iteration  23: 6212703.007 ops/s
Iteration  24: 6186000.007 ops/s
Iteration  25: 6261826.446 ops/s
Iteration  26: 6291420.061 ops/s
Iteration  27: 5993546.000 ops/s
Iteration  28: 6153013.766 ops/s
Iteration  29: 6144507.387 ops/s
Iteration  30: 6211849.411 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhileTest._Benchmark.benchmark_noUnsubscribeDownstream":
  6093000.635 ±(99.9%) 183661.227 ops/s [Average]
  (min, avg, max) = (4824581.317, 6093000.635, 6423904.434), stdev = 274895.499
  CI (99.9%): [5909339.408, 6276661.862] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score        Error  Units
ObservableTakeWhileTest._Benchmark.benchmark_noUnsubscribeDownstream  thrpt   30  6093000.635 ± 183661.227  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableBlockingStreamTest._Benchmark.benchmark_range$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableBlockingStreamTest._Benchmark.benchmark_range

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 61974.570 ops/s
# Warmup Iteration   2: 455912.290 ops/s
# Warmup Iteration   3: 848431.021 ops/s
# Warmup Iteration   4: 1613103.393 ops/s
# Warmup Iteration   5: 1547244.112 ops/s
# Warmup Iteration   6: 1598157.332 ops/s
# Warmup Iteration   7: 1589308.658 ops/s
# Warmup Iteration   8: 1672444.989 ops/s
# Warmup Iteration   9: 1643296.621 ops/s
# Warmup Iteration  10: 1697054.606 ops/s
# Warmup Iteration  11: 1657909.930 ops/s
# Warmup Iteration  12: 1594309.440 ops/s
# Warmup Iteration  13: 1702846.954 ops/s
# Warmup Iteration  14: 1583991.647 ops/s
# Warmup Iteration  15: 1698747.434 ops/s
# Warmup Iteration  16: 1634070.700 ops/s
# Warmup Iteration  17: 1644743.769 ops/s
# Warmup Iteration  18: 1665713.777 ops/s
# Warmup Iteration  19: 1577530.823 ops/s
# Warmup Iteration  20: 1682413.213 ops/s
# Warmup Iteration  21: 1569421.779 ops/s
# Warmup Iteration  22: 1623121.182 ops/s
# Warmup Iteration  23: 1686939.687 ops/s
# Warmup Iteration  24: 1634071.046 ops/s
# Warmup Iteration  25: 1591860.401 ops/s
# Warmup Iteration  26: 1659473.236 ops/s
# Warmup Iteration  27: 1617584.707 ops/s
# Warmup Iteration  28: 1657256.024 ops/s
# Warmup Iteration  29: 1672908.714 ops/s
# Warmup Iteration  30: 1635537.323 ops/s
Iteration   1: 1668465.643 ops/s
Iteration   2: 1588878.448 ops/s
Iteration   3: 1665403.819 ops/s
Iteration   4: 1611979.331 ops/s
Iteration   5: 1579764.556 ops/s
Iteration   6: 1642016.547 ops/s
Iteration   7: 1601389.738 ops/s
Iteration   8: 1627518.315 ops/s
Iteration   9: 1578750.191 ops/s
Iteration  10: 1675024.982 ops/s
Iteration  11: 1717220.666 ops/s
Iteration  12: 1536589.637 ops/s
Iteration  13: 1662356.112 ops/s
Iteration  14: 1540447.656 ops/s
Iteration  15: 1632565.040 ops/s
Iteration  16: 1686282.622 ops/s
Iteration  17: 1647996.878 ops/s
Iteration  18: 1644850.820 ops/s
Iteration  19: 1606840.257 ops/s
Iteration  20: 1625504.640 ops/s
Iteration  21: 1667307.066 ops/s
Iteration  22: 1581765.787 ops/s
Iteration  23: 1662143.374 ops/s
Iteration  24: 1618916.735 ops/s
Iteration  25: 1631039.632 ops/s
Iteration  26: 1617518.289 ops/s
Iteration  27: 1719025.347 ops/s
Iteration  28: 1639419.942 ops/s
Iteration  29: 1650759.819 ops/s
Iteration  30: 1656647.499 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableBlockingStreamTest._Benchmark.benchmark_range":
  1632812.980 ±(99.9%) 29495.045 ops/s [Average]
  (min, avg, max) = (1536589.637, 1632812.980, 1719025.347), stdev = 44146.799
  CI (99.9%): [1603317.934, 1662308.025] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
ObservableBlockingStreamTest._Benchmark.benchmark_range  thrpt   30  1632812.980 ± 29495.045  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableScanTest._Benchmark.benchmark_shouldNotEmitUntilAfterSubscription$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableScanTest._Benchmark.benchmark_shouldNotEmitUntilAfterSubscription

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 98176.181 ops/s
# Warmup Iteration   2: 333698.309 ops/s
# Warmup Iteration   3: 358468.171 ops/s
# Warmup Iteration   4: 434911.486 ops/s
# Warmup Iteration   5: 431379.411 ops/s
# Warmup Iteration   6: 420342.088 ops/s
# Warmup Iteration   7: 434958.673 ops/s
# Warmup Iteration   8: 420624.897 ops/s
# Warmup Iteration   9: 438663.369 ops/s
# Warmup Iteration  10: 414378.320 ops/s
# Warmup Iteration  11: 417689.714 ops/s
# Warmup Iteration  12: 440341.556 ops/s
# Warmup Iteration  13: 418274.472 ops/s
# Warmup Iteration  14: 430774.218 ops/s
# Warmup Iteration  15: 431072.317 ops/s
# Warmup Iteration  16: 429473.671 ops/s
# Warmup Iteration  17: 427794.422 ops/s
# Warmup Iteration  18: 423593.172 ops/s
# Warmup Iteration  19: 441450.196 ops/s
# Warmup Iteration  20: 428349.250 ops/s
# Warmup Iteration  21: 442150.827 ops/s
# Warmup Iteration  22: 417816.708 ops/s
# Warmup Iteration  23: 429947.879 ops/s
# Warmup Iteration  24: 431816.988 ops/s
# Warmup Iteration  25: 431814.274 ops/s
# Warmup Iteration  26: 425462.378 ops/s
# Warmup Iteration  27: 428206.945 ops/s
# Warmup Iteration  28: 329208.804 ops/s
# Warmup Iteration  29: 416988.064 ops/s
# Warmup Iteration  30: 436482.089 ops/s
Iteration   1: 420298.876 ops/s
Iteration   2: 428957.906 ops/s
Iteration   3: 429453.925 ops/s
Iteration   4: 422457.724 ops/s
Iteration   5: 436192.983 ops/s
Iteration   6: 427967.209 ops/s
Iteration   7: 441920.714 ops/s
Iteration   8: 413970.989 ops/s
Iteration   9: 424105.468 ops/s
Iteration  10: 445622.494 ops/s
Iteration  11: 426160.785 ops/s
Iteration  12: 428057.722 ops/s
Iteration  13: 420434.613 ops/s
Iteration  14: 422698.542 ops/s
Iteration  15: 434131.338 ops/s
Iteration  16: 422085.768 ops/s
Iteration  17: 435864.472 ops/s
Iteration  18: 420927.884 ops/s
Iteration  19: 440239.285 ops/s
Iteration  20: 432430.433 ops/s
Iteration  21: 427267.087 ops/s
Iteration  22: 424774.551 ops/s
Iteration  23: 424534.824 ops/s
Iteration  24: 452577.362 ops/s
Iteration  25: 421291.929 ops/s
Iteration  26: 437331.857 ops/s
Iteration  27: 426537.108 ops/s
Iteration  28: 423652.264 ops/s
Iteration  29: 448311.296 ops/s
Iteration  30: 416392.179 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableScanTest._Benchmark.benchmark_shouldNotEmitUntilAfterSubscription":
  429221.653 ±(99.9%) 6328.225 ops/s [Average]
  (min, avg, max) = (413970.989, 429221.653, 452577.362), stdev = 9471.789
  CI (99.9%): [422893.428, 435549.878] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt       Score      Error  Units
ObservableScanTest._Benchmark.benchmark_shouldNotEmitUntilAfterSubscription  thrpt   30  429221.653 ± 6328.225  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithCompletableTest._Benchmark.benchmark_normal$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithCompletableTest._Benchmark.benchmark_normal

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 582986.446 ops/s
# Warmup Iteration   2: 2187969.862 ops/s
# Warmup Iteration   3: 3666021.525 ops/s
# Warmup Iteration   4: 4001482.053 ops/s
# Warmup Iteration   5: 4050352.449 ops/s
# Warmup Iteration   6: 4414220.531 ops/s
# Warmup Iteration   7: 4241508.852 ops/s
# Warmup Iteration   8: 4097394.740 ops/s
# Warmup Iteration   9: 4165075.822 ops/s
# Warmup Iteration  10: 4364234.317 ops/s
# Warmup Iteration  11: 4121836.627 ops/s
# Warmup Iteration  12: 4125175.902 ops/s
# Warmup Iteration  13: 4278009.667 ops/s
# Warmup Iteration  14: 4101551.095 ops/s
# Warmup Iteration  15: 4363366.272 ops/s
# Warmup Iteration  16: 4124247.088 ops/s
# Warmup Iteration  17: 4122723.545 ops/s
# Warmup Iteration  18: 4232442.506 ops/s
# Warmup Iteration  19: 4154803.163 ops/s
# Warmup Iteration  20: 4178828.087 ops/s
# Warmup Iteration  21: 4103713.879 ops/s
# Warmup Iteration  22: 4189843.380 ops/s
# Warmup Iteration  23: 4222552.279 ops/s
# Warmup Iteration  24: 4081085.958 ops/s
# Warmup Iteration  25: 4238942.928 ops/s
# Warmup Iteration  26: 4313426.274 ops/s
# Warmup Iteration  27: 4066926.017 ops/s
# Warmup Iteration  28: 4173648.706 ops/s
# Warmup Iteration  29: 4315237.152 ops/s
# Warmup Iteration  30: 4079272.806 ops/s
Iteration   1: 4182815.079 ops/s
Iteration   2: 4095500.631 ops/s
Iteration   3: 4197976.321 ops/s
Iteration   4: 4099976.474 ops/s
Iteration   5: 4177752.478 ops/s
Iteration   6: 3999942.686 ops/s
Iteration   7: 4113155.093 ops/s
Iteration   8: 4210430.758 ops/s
Iteration   9: 4113229.861 ops/s
Iteration  10: 4349132.539 ops/s
Iteration  11: 4107724.834 ops/s
Iteration  12: 4155050.722 ops/s
Iteration  13: 4146962.875 ops/s
Iteration  14: 4163521.686 ops/s
Iteration  15: 4016396.713 ops/s
Iteration  16: 4229401.914 ops/s
Iteration  17: 4172583.114 ops/s
Iteration  18: 4286827.248 ops/s
Iteration  19: 4040937.644 ops/s
Iteration  20: 4261711.166 ops/s
Iteration  21: 4189893.590 ops/s
Iteration  22: 4167863.245 ops/s
Iteration  23: 4168742.183 ops/s
Iteration  24: 4186808.514 ops/s
Iteration  25: 4156779.209 ops/s
Iteration  26: 4199785.678 ops/s
Iteration  27: 4274053.529 ops/s
Iteration  28: 4059592.169 ops/s
Iteration  29: 4127455.038 ops/s
Iteration  30: 4217304.654 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithCompletableTest._Benchmark.benchmark_normal":
  4162310.255 ±(99.9%) 52360.138 ops/s [Average]
  (min, avg, max) = (3999942.686, 4162310.255, 4349132.539), stdev = 78370.195
  CI (99.9%): [4109950.117, 4214670.392] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
ObservableConcatWithCompletableTest._Benchmark.benchmark_normal  thrpt   30  4162310.255 ± 52360.138  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDoFinallyTest._Benchmark.benchmark_normalTake$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDoFinallyTest._Benchmark.benchmark_normalTake

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 549274.135 ops/s
# Warmup Iteration   2: 2784523.818 ops/s
# Warmup Iteration   3: 3552677.155 ops/s
# Warmup Iteration   4: 3720590.382 ops/s
# Warmup Iteration   5: 3855012.459 ops/s
# Warmup Iteration   6: 4089433.464 ops/s
# Warmup Iteration   7: 3960648.180 ops/s
# Warmup Iteration   8: 3898675.202 ops/s
# Warmup Iteration   9: 3969734.750 ops/s
# Warmup Iteration  10: 3879343.772 ops/s
# Warmup Iteration  11: 3880207.310 ops/s
# Warmup Iteration  12: 4006086.746 ops/s
# Warmup Iteration  13: 3781727.840 ops/s
# Warmup Iteration  14: 4058786.286 ops/s
# Warmup Iteration  15: 3920830.368 ops/s
# Warmup Iteration  16: 4031211.680 ops/s
# Warmup Iteration  17: 3945596.278 ops/s
# Warmup Iteration  18: 3957307.218 ops/s
# Warmup Iteration  19: 3989166.092 ops/s
# Warmup Iteration  20: 3956614.951 ops/s
# Warmup Iteration  21: 3985954.609 ops/s
# Warmup Iteration  22: 3132265.276 ops/s
# Warmup Iteration  23: 4007445.645 ops/s
# Warmup Iteration  24: 3858238.555 ops/s
# Warmup Iteration  25: 3974282.011 ops/s
# Warmup Iteration  26: 4012054.248 ops/s
# Warmup Iteration  27: 3916197.099 ops/s
# Warmup Iteration  28: 4101564.655 ops/s
# Warmup Iteration  29: 3940977.996 ops/s
# Warmup Iteration  30: 4128207.819 ops/s
Iteration   1: 4046633.707 ops/s
Iteration   2: 3979331.562 ops/s
Iteration   3: 3903331.954 ops/s
Iteration   4: 4047063.001 ops/s
Iteration   5: 3833637.588 ops/s
Iteration   6: 4074038.500 ops/s
Iteration   7: 3854562.461 ops/s
Iteration   8: 4084804.071 ops/s
Iteration   9: 3929645.266 ops/s
Iteration  10: 3894734.085 ops/s
Iteration  11: 4024488.060 ops/s
Iteration  12: 3953885.668 ops/s
Iteration  13: 3967427.238 ops/s
Iteration  14: 3932303.859 ops/s
Iteration  15: 3930660.291 ops/s
Iteration  16: 4058003.850 ops/s
Iteration  17: 3949613.324 ops/s
Iteration  18: 3834830.523 ops/s
Iteration  19: 4135335.640 ops/s
Iteration  20: 3917463.193 ops/s
Iteration  21: 3876526.483 ops/s
Iteration  22: 4157105.348 ops/s
Iteration  23: 3909570.632 ops/s
Iteration  24: 4125369.415 ops/s
Iteration  25: 3878479.405 ops/s
Iteration  26: 4083532.452 ops/s
Iteration  27: 3971324.618 ops/s
Iteration  28: 3992610.671 ops/s
Iteration  29: 4051720.153 ops/s
Iteration  30: 3906261.638 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableDoFinallyTest._Benchmark.benchmark_normalTake":
  3976809.822 ±(99.9%) 61403.913 ops/s [Average]
  (min, avg, max) = (3833637.588, 3976809.822, 4157105.348), stdev = 91906.493
  CI (99.9%): [3915405.909, 4038213.735] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
ObservableDoFinallyTest._Benchmark.benchmark_normalTake  thrpt   30  3976809.822 ± 61403.913  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorTest._Benchmark.benchmark_collectorFinisherCrashToObservable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorTest._Benchmark.benchmark_collectorFinisherCrashToObservable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 168839.461 ops/s
# Warmup Iteration   2: 524913.426 ops/s
# Warmup Iteration   3: 574895.744 ops/s
# Warmup Iteration   4: 492552.622 ops/s
# Warmup Iteration   5: 553895.271 ops/s
# Warmup Iteration   6: 539735.504 ops/s
# Warmup Iteration   7: 577009.792 ops/s
# Warmup Iteration   8: 596199.332 ops/s
# Warmup Iteration   9: 583017.293 ops/s
# Warmup Iteration  10: 587291.117 ops/s
# Warmup Iteration  11: 576392.465 ops/s
# Warmup Iteration  12: 589519.801 ops/s
# Warmup Iteration  13: 591279.249 ops/s
# Warmup Iteration  14: 581174.045 ops/s
# Warmup Iteration  15: 592954.089 ops/s
# Warmup Iteration  16: 583394.614 ops/s
# Warmup Iteration  17: 599423.633 ops/s
# Warmup Iteration  18: 617099.652 ops/s
# Warmup Iteration  19: 615117.558 ops/s
# Warmup Iteration  20: 627317.618 ops/s
# Warmup Iteration  21: 608280.428 ops/s
# Warmup Iteration  22: 617943.981 ops/s
# Warmup Iteration  23: 605230.554 ops/s
# Warmup Iteration  24: 608676.192 ops/s
# Warmup Iteration  25: 624150.047 ops/s
# Warmup Iteration  26: 592573.794 ops/s
# Warmup Iteration  27: 617945.224 ops/s
# Warmup Iteration  28: 627508.719 ops/s
# Warmup Iteration  29: 596483.915 ops/s
# Warmup Iteration  30: 622246.914 ops/s
Iteration   1: 597129.919 ops/s
Iteration   2: 611250.012 ops/s
Iteration   3: 621711.111 ops/s
Iteration   4: 608462.957 ops/s
Iteration   5: 611398.874 ops/s
Iteration   6: 606916.596 ops/s
Iteration   7: 619097.677 ops/s
Iteration   8: 639605.325 ops/s
Iteration   9: 606764.757 ops/s
Iteration  10: 611839.310 ops/s
Iteration  11: 608069.300 ops/s
Iteration  12: 620986.820 ops/s
Iteration  13: 615218.648 ops/s
Iteration  14: 596091.010 ops/s
Iteration  15: 624000.217 ops/s
Iteration  16: 615714.475 ops/s
Iteration  17: 600613.709 ops/s
Iteration  18: 635937.759 ops/s
Iteration  19: 627705.659 ops/s
Iteration  20: 600567.497 ops/s
Iteration  21: 648979.827 ops/s
Iteration  22: 596797.040 ops/s
Iteration  23: 644260.334 ops/s
Iteration  24: 592730.840 ops/s
Iteration  25: 636064.575 ops/s
Iteration  26: 624473.604 ops/s
Iteration  27: 597773.945 ops/s
Iteration  28: 636974.748 ops/s
Iteration  29: 583004.883 ops/s
Iteration  30: 639416.790 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorTest._Benchmark.benchmark_collectorFinisherCrashToObservable":
  615985.274 ±(99.9%) 11424.451 ops/s [Average]
  (min, avg, max) = (583004.883, 615985.274, 648979.827), stdev = 17099.582
  CI (99.9%): [604560.822, 627409.725] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                    Mode  Cnt       Score       Error  Units
ObservableCollectWithCollectorTest._Benchmark.benchmark_collectorFinisherCrashToObservable  thrpt   30  615985.274 ± 11424.451  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDoAfterNextTest._Benchmark.benchmark_rangeConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDoAfterNextTest._Benchmark.benchmark_rangeConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 289336.271 ops/s
# Warmup Iteration   2: 1389575.922 ops/s
# Warmup Iteration   3: 1948708.201 ops/s
# Warmup Iteration   4: 2518980.642 ops/s
# Warmup Iteration   5: 2605745.926 ops/s
# Warmup Iteration   6: 2592870.535 ops/s
# Warmup Iteration   7: 2512138.184 ops/s
# Warmup Iteration   8: 2608291.770 ops/s
# Warmup Iteration   9: 2520409.448 ops/s
# Warmup Iteration  10: 2497428.533 ops/s
# Warmup Iteration  11: 2598962.950 ops/s
# Warmup Iteration  12: 2544028.062 ops/s
# Warmup Iteration  13: 2630392.488 ops/s
# Warmup Iteration  14: 2564131.047 ops/s
# Warmup Iteration  15: 2530712.129 ops/s
# Warmup Iteration  16: 2635927.562 ops/s
# Warmup Iteration  17: 2018305.198 ops/s
# Warmup Iteration  18: 2575899.161 ops/s
# Warmup Iteration  19: 2552940.314 ops/s
# Warmup Iteration  20: 2618099.929 ops/s
# Warmup Iteration  21: 2608482.111 ops/s
# Warmup Iteration  22: 2508216.444 ops/s
# Warmup Iteration  23: 2484984.492 ops/s
# Warmup Iteration  24: 2512183.327 ops/s
# Warmup Iteration  25: 2600382.607 ops/s
# Warmup Iteration  26: 2606153.888 ops/s
# Warmup Iteration  27: 2522071.422 ops/s
# Warmup Iteration  28: 2614569.514 ops/s
# Warmup Iteration  29: 2508178.637 ops/s
# Warmup Iteration  30: 2585880.960 ops/s
Iteration   1: 2534062.475 ops/s
Iteration   2: 2588666.849 ops/s
Iteration   3: 2488127.469 ops/s
Iteration   4: 2625534.619 ops/s
Iteration   5: 2509099.686 ops/s
Iteration   6: 2596737.943 ops/s
Iteration   7: 2572158.088 ops/s
Iteration   8: 2537682.384 ops/s
Iteration   9: 2614983.567 ops/s
Iteration  10: 2485402.920 ops/s
Iteration  11: 2545364.744 ops/s
Iteration  12: 2611139.110 ops/s
Iteration  13: 2568032.970 ops/s
Iteration  14: 2523308.751 ops/s
Iteration  15: 2520002.070 ops/s
Iteration  16: 2540183.073 ops/s
Iteration  17: 2610354.203 ops/s
Iteration  18: 2583935.713 ops/s
Iteration  19: 2511522.331 ops/s
Iteration  20: 2573748.109 ops/s
Iteration  21: 2472245.091 ops/s
Iteration  22: 2514791.397 ops/s
Iteration  23: 2533081.952 ops/s
Iteration  24: 2510088.695 ops/s
Iteration  25: 2541356.221 ops/s
Iteration  26: 2676408.081 ops/s
Iteration  27: 2547225.404 ops/s
Iteration  28: 2531024.539 ops/s
Iteration  29: 2544344.843 ops/s
Iteration  30: 2622483.250 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableDoAfterNextTest._Benchmark.benchmark_rangeConditional":
  2554436.552 ±(99.9%) 32135.572 ops/s [Average]
  (min, avg, max) = (2472245.091, 2554436.552, 2676408.081), stdev = 48099.015
  CI (99.9%): [2522300.979, 2586572.124] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
ObservableDoAfterNextTest._Benchmark.benchmark_rangeConditional  thrpt   30  2554436.552 ± 32135.572  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableFlatMapStreamTest._Benchmark.benchmark_rangeTake$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableFlatMapStreamTest._Benchmark.benchmark_rangeTake

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 101632.384 ops/s
# Warmup Iteration   2: 441481.030 ops/s
# Warmup Iteration   3: 780255.153 ops/s
# Warmup Iteration   4: 890953.779 ops/s
# Warmup Iteration   5: 962393.421 ops/s
# Warmup Iteration   6: 945443.535 ops/s
# Warmup Iteration   7: 973418.100 ops/s
# Warmup Iteration   8: 908907.427 ops/s
# Warmup Iteration   9: 963753.161 ops/s
# Warmup Iteration  10: 921085.964 ops/s
# Warmup Iteration  11: 952759.019 ops/s
# Warmup Iteration  12: 934969.059 ops/s
# Warmup Iteration  13: 925556.545 ops/s
# Warmup Iteration  14: 969121.112 ops/s
# Warmup Iteration  15: 943136.469 ops/s
# Warmup Iteration  16: 925301.580 ops/s
# Warmup Iteration  17: 953584.343 ops/s
# Warmup Iteration  18: 939172.401 ops/s
# Warmup Iteration  19: 972247.967 ops/s
# Warmup Iteration  20: 929040.732 ops/s
# Warmup Iteration  21: 933039.155 ops/s
# Warmup Iteration  22: 947945.998 ops/s
# Warmup Iteration  23: 941554.620 ops/s
# Warmup Iteration  24: 948150.375 ops/s
# Warmup Iteration  25: 991882.155 ops/s
# Warmup Iteration  26: 905777.473 ops/s
# Warmup Iteration  27: 965505.776 ops/s
# Warmup Iteration  28: 949716.974 ops/s
# Warmup Iteration  29: 957055.096 ops/s
# Warmup Iteration  30: 930355.473 ops/s
Iteration   1: 932167.893 ops/s
Iteration   2: 980056.769 ops/s
Iteration   3: 957029.242 ops/s
Iteration   4: 921652.707 ops/s
Iteration   5: 916956.124 ops/s
Iteration   6: 944522.108 ops/s
Iteration   7: 981079.628 ops/s
Iteration   8: 893554.903 ops/s
Iteration   9: 936847.044 ops/s
Iteration  10: 920938.550 ops/s
Iteration  11: 933310.943 ops/s
Iteration  12: 947166.851 ops/s
Iteration  13: 944584.231 ops/s
Iteration  14: 931856.259 ops/s
Iteration  15: 940308.834 ops/s
Iteration  16: 949521.108 ops/s
Iteration  17: 926014.471 ops/s
Iteration  18: 942241.312 ops/s
Iteration  19: 965183.616 ops/s
Iteration  20: 931521.660 ops/s
Iteration  21: 963143.189 ops/s
Iteration  22: 901719.151 ops/s
Iteration  23: 928228.302 ops/s
Iteration  24: 936726.865 ops/s
Iteration  25: 955084.101 ops/s
Iteration  26: 951174.862 ops/s
Iteration  27: 911857.856 ops/s
Iteration  28: 970414.152 ops/s
Iteration  29: 934928.394 ops/s
Iteration  30: 969137.899 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableFlatMapStreamTest._Benchmark.benchmark_rangeTake":
  940630.968 ±(99.9%) 14321.561 ops/s [Average]
  (min, avg, max) = (893554.903, 940630.968, 981079.628), stdev = 21435.841
  CI (99.9%): [926309.406, 954952.529] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score       Error  Units
ObservableFlatMapStreamTest._Benchmark.benchmark_rangeTake  thrpt   30  940630.968 ± 14321.561  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMapTest._Benchmark.benchmark_fusedReject$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMapTest._Benchmark.benchmark_fusedReject

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.780 ops/s
# Warmup Iteration   2: 36990.004 ops/s
# Warmup Iteration   3: 83046.327 ops/s
# Warmup Iteration   4: 152677.537 ops/s
# Warmup Iteration   5: 204012.921 ops/s
# Warmup Iteration   6: 454061.619 ops/s
# Warmup Iteration   7: 542953.614 ops/s
# Warmup Iteration   8: 438373.046 ops/s
# Warmup Iteration   9: 537940.318 ops/s
# Warmup Iteration  10: 538639.927 ops/s
# Warmup Iteration  11: 499822.970 ops/s
# Warmup Iteration  12: 449398.406 ops/s
# Warmup Iteration  13: 526924.757 ops/s
# Warmup Iteration  14: 519000.010 ops/s
# Warmup Iteration  15: 548304.541 ops/s
# Warmup Iteration  16: 523974.494 ops/s
# Warmup Iteration  17: 520848.379 ops/s
# Warmup Iteration  18: 542249.208 ops/s
# Warmup Iteration  19: 514277.317 ops/s
# Warmup Iteration  20: 542343.028 ops/s
# Warmup Iteration  21: 520803.122 ops/s
# Warmup Iteration  22: 528679.742 ops/s
# Warmup Iteration  23: 540528.235 ops/s
# Warmup Iteration  24: 516842.365 ops/s
# Warmup Iteration  25: 536895.369 ops/s
# Warmup Iteration  26: 516562.203 ops/s
# Warmup Iteration  27: 522739.811 ops/s
# Warmup Iteration  28: 534376.776 ops/s
# Warmup Iteration  29: 520147.571 ops/s
# Warmup Iteration  30: 544327.324 ops/s
Iteration   1: 536223.275 ops/s
Iteration   2: 531696.020 ops/s
Iteration   3: 527572.978 ops/s
Iteration   4: 535648.812 ops/s
Iteration   5: 513223.974 ops/s
Iteration   6: 530651.515 ops/s
Iteration   7: 531043.753 ops/s
Iteration   8: 522393.470 ops/s
Iteration   9: 536386.680 ops/s
Iteration  10: 515132.933 ops/s
Iteration  11: 552275.146 ops/s
Iteration  12: 551175.644 ops/s
Iteration  13: 513867.125 ops/s
Iteration  14: 522314.269 ops/s
Iteration  15: 528712.133 ops/s
Iteration  16: 521541.353 ops/s
Iteration  17: 535663.107 ops/s
Iteration  18: 513124.629 ops/s
Iteration  19: 525227.800 ops/s
Iteration  20: 534093.430 ops/s
Iteration  21: 536691.455 ops/s
Iteration  22: 542246.327 ops/s
Iteration  23: 516081.977 ops/s
Iteration  24: 538972.504 ops/s
Iteration  25: 527902.054 ops/s
Iteration  26: 532808.645 ops/s
Iteration  27: 536962.886 ops/s
Iteration  28: 518544.320 ops/s
Iteration  29: 546945.100 ops/s
Iteration  30: 517028.038 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableMapTest._Benchmark.benchmark_fusedReject":
  529738.378 ±(99.9%) 7329.185 ops/s [Average]
  (min, avg, max) = (513124.629, 529738.378, 552275.146), stdev = 10969.980
  CI (99.9%): [522409.193, 537067.564] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score      Error  Units
ObservableMapTest._Benchmark.benchmark_fusedReject  thrpt   30  529738.378 ± 7329.185  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDelayTest._Benchmark.benchmark_delaySupplierCompletes$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDelayTest._Benchmark.benchmark_delaySupplierCompletes

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.776 ops/s
# Warmup Iteration   2: 26485.477 ops/s
# Warmup Iteration   3: 81749.121 ops/s
# Warmup Iteration   4: 137509.862 ops/s
# Warmup Iteration   5: 220690.049 ops/s
# Warmup Iteration   6: 237912.172 ops/s
# Warmup Iteration   7: 450673.385 ops/s
# Warmup Iteration   8: 490040.761 ops/s
# Warmup Iteration   9: 487238.460 ops/s
# Warmup Iteration  10: 481253.828 ops/s
# Warmup Iteration  11: 488504.337 ops/s
# Warmup Iteration  12: 445961.913 ops/s
# Warmup Iteration  13: 471137.126 ops/s
# Warmup Iteration  14: 502506.899 ops/s
# Warmup Iteration  15: 505850.092 ops/s
# Warmup Iteration  16: 481279.620 ops/s
# Warmup Iteration  17: 519027.029 ops/s
# Warmup Iteration  18: 512861.757 ops/s
# Warmup Iteration  19: 464502.471 ops/s
# Warmup Iteration  20: 517190.560 ops/s
# Warmup Iteration  21: 490992.687 ops/s
# Warmup Iteration  22: 510885.364 ops/s
# Warmup Iteration  23: 502671.540 ops/s
# Warmup Iteration  24: 488308.458 ops/s
# Warmup Iteration  25: 506883.149 ops/s
# Warmup Iteration  26: 496372.299 ops/s
# Warmup Iteration  27: 492605.174 ops/s
# Warmup Iteration  28: 501801.971 ops/s
# Warmup Iteration  29: 499619.805 ops/s
# Warmup Iteration  30: 514305.139 ops/s
Iteration   1: 486666.108 ops/s
Iteration   2: 493099.097 ops/s
Iteration   3: 515214.432 ops/s
Iteration   4: 486149.959 ops/s
Iteration   5: 515961.105 ops/s
Iteration   6: 501105.536 ops/s
Iteration   7: 500136.501 ops/s
Iteration   8: 480591.377 ops/s
Iteration   9: 491388.520 ops/s
Iteration  10: 507260.798 ops/s
Iteration  11: 476620.529 ops/s
Iteration  12: 503049.965 ops/s
Iteration  13: 496093.693 ops/s
Iteration  14: 496214.394 ops/s
Iteration  15: 486831.390 ops/s
Iteration  16: 513033.003 ops/s
Iteration  17: 499160.291 ops/s
Iteration  18: 516872.679 ops/s
Iteration  19: 513612.318 ops/s
Iteration  20: 493884.580 ops/s
Iteration  21: 513854.239 ops/s
Iteration  22: 485781.945 ops/s
Iteration  23: 497089.599 ops/s
Iteration  24: 520895.645 ops/s
Iteration  25: 491499.628 ops/s
Iteration  26: 521027.979 ops/s
Iteration  27: 487713.020 ops/s
Iteration  28: 499557.812 ops/s
Iteration  29: 499005.265 ops/s
Iteration  30: 504855.872 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableDelayTest._Benchmark.benchmark_delaySupplierCompletes":
  499807.576 ±(99.9%) 8204.642 ops/s [Average]
  (min, avg, max) = (476620.529, 499807.576, 521027.979), stdev = 12280.323
  CI (99.9%): [491602.934, 508012.218] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score      Error  Units
ObservableDelayTest._Benchmark.benchmark_delaySupplierCompletes  thrpt   30  499807.576 ± 8204.642  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableUsingTest._Benchmark.benchmark_eagerDisposeResourceThenDisposeUpstream$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableUsingTest._Benchmark.benchmark_eagerDisposeResourceThenDisposeUpstream

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 203609.802 ops/s
# Warmup Iteration   2: 695335.582 ops/s
# Warmup Iteration   3: 2710496.662 ops/s
# Warmup Iteration   4: 3498427.586 ops/s
# Warmup Iteration   5: 3678721.436 ops/s
# Warmup Iteration   6: 2947508.136 ops/s
# Warmup Iteration   7: 3702342.113 ops/s
# Warmup Iteration   8: 3618506.825 ops/s
# Warmup Iteration   9: 3594704.812 ops/s
# Warmup Iteration  10: 3623548.515 ops/s
# Warmup Iteration  11: 3605230.465 ops/s
# Warmup Iteration  12: 3700642.138 ops/s
# Warmup Iteration  13: 3549419.430 ops/s
# Warmup Iteration  14: 3668770.310 ops/s
# Warmup Iteration  15: 3763291.045 ops/s
# Warmup Iteration  16: 3578731.441 ops/s
# Warmup Iteration  17: 3802928.870 ops/s
# Warmup Iteration  18: 3721002.132 ops/s
# Warmup Iteration  19: 3601908.220 ops/s
# Warmup Iteration  20: 3738872.978 ops/s
# Warmup Iteration  21: 3669219.961 ops/s
# Warmup Iteration  22: 3570093.498 ops/s
# Warmup Iteration  23: 3577558.899 ops/s
# Warmup Iteration  24: 3738139.702 ops/s
# Warmup Iteration  25: 3574471.964 ops/s
# Warmup Iteration  26: 3719374.726 ops/s
# Warmup Iteration  27: 3597618.322 ops/s
# Warmup Iteration  28: 3781383.195 ops/s
# Warmup Iteration  29: 3682971.802 ops/s
# Warmup Iteration  30: 3523137.993 ops/s
Iteration   1: 3653103.055 ops/s
Iteration   2: 3476499.164 ops/s
Iteration   3: 3676236.017 ops/s
Iteration   4: 3638793.195 ops/s
Iteration   5: 3685261.154 ops/s
Iteration   6: 3580440.900 ops/s
Iteration   7: 3619807.430 ops/s
Iteration   8: 3776200.055 ops/s
Iteration   9: 3609571.592 ops/s
Iteration  10: 3574433.127 ops/s
Iteration  11: 3830146.587 ops/s
Iteration  12: 3594382.418 ops/s
Iteration  13: 3647530.766 ops/s
Iteration  14: 3668463.248 ops/s
Iteration  15: 3565234.217 ops/s
Iteration  16: 3672136.919 ops/s
Iteration  17: 3611671.591 ops/s
Iteration  18: 3813587.198 ops/s
Iteration  19: 3645185.908 ops/s
Iteration  20: 3622609.712 ops/s
Iteration  21: 3813763.902 ops/s
Iteration  22: 3555756.836 ops/s
Iteration  23: 3632406.109 ops/s
Iteration  24: 3698860.150 ops/s
Iteration  25: 3466235.788 ops/s
Iteration  26: 3716329.654 ops/s
Iteration  27: 3637974.371 ops/s
Iteration  28: 3745497.548 ops/s
Iteration  29: 3557331.314 ops/s
Iteration  30: 3605803.679 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableUsingTest._Benchmark.benchmark_eagerDisposeResourceThenDisposeUpstream":
  3646375.120 ±(99.9%) 59466.000 ops/s [Average]
  (min, avg, max) = (3466235.788, 3646375.120, 3830146.587), stdev = 89005.917
  CI (99.9%): [3586909.120, 3705841.121] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt        Score       Error  Units
ObservableUsingTest._Benchmark.benchmark_eagerDisposeResourceThenDisposeUpstream  thrpt   30  3646375.120 ± 59466.000  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableUsingTest._Benchmark.benchmark_nonEagerDisposeUpstreamThenDisposeResource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableUsingTest._Benchmark.benchmark_nonEagerDisposeUpstreamThenDisposeResource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 329792.707 ops/s
# Warmup Iteration   2: 1552227.889 ops/s
# Warmup Iteration   3: 3193500.041 ops/s
# Warmup Iteration   4: 3633812.217 ops/s
# Warmup Iteration   5: 3610712.575 ops/s
# Warmup Iteration   6: 3591506.656 ops/s
# Warmup Iteration   7: 3642438.424 ops/s
# Warmup Iteration   8: 3503847.423 ops/s
# Warmup Iteration   9: 3571949.297 ops/s
# Warmup Iteration  10: 3689818.948 ops/s
# Warmup Iteration  11: 3537986.645 ops/s
# Warmup Iteration  12: 3533305.420 ops/s
# Warmup Iteration  13: 3728191.596 ops/s
# Warmup Iteration  14: 3479238.848 ops/s
# Warmup Iteration  15: 3705584.437 ops/s
# Warmup Iteration  16: 3545905.342 ops/s
# Warmup Iteration  17: 3704157.962 ops/s
# Warmup Iteration  18: 3649653.551 ops/s
# Warmup Iteration  19: 3634032.945 ops/s
# Warmup Iteration  20: 3673271.250 ops/s
# Warmup Iteration  21: 3590724.868 ops/s
# Warmup Iteration  22: 3771777.482 ops/s
# Warmup Iteration  23: 3592619.940 ops/s
# Warmup Iteration  24: 3557898.642 ops/s
# Warmup Iteration  25: 3737624.315 ops/s
# Warmup Iteration  26: 3516969.907 ops/s
# Warmup Iteration  27: 3814887.087 ops/s
# Warmup Iteration  28: 3687381.897 ops/s
# Warmup Iteration  29: 3559495.877 ops/s
# Warmup Iteration  30: 3735389.242 ops/s
Iteration   1: 3513854.242 ops/s
Iteration   2: 3461196.768 ops/s
Iteration   3: 3677663.686 ops/s
Iteration   4: 3536790.397 ops/s
Iteration   5: 3610965.309 ops/s
Iteration   6: 3580136.737 ops/s
Iteration   7: 3573430.692 ops/s
Iteration   8: 3717502.073 ops/s
Iteration   9: 3582298.927 ops/s
Iteration  10: 3655422.382 ops/s
Iteration  11: 3601732.086 ops/s
Iteration  12: 3636592.347 ops/s
Iteration  13: 3806386.521 ops/s
Iteration  14: 3587082.987 ops/s
Iteration  15: 3734824.637 ops/s
Iteration  16: 3472870.783 ops/s
Iteration  17: 3741232.142 ops/s
Iteration  18: 3470325.625 ops/s
Iteration  19: 3532611.321 ops/s
Iteration  20: 3699710.363 ops/s
Iteration  21: 3494641.982 ops/s
Iteration  22: 3703430.980 ops/s
Iteration  23: 3556120.555 ops/s
Iteration  24: 3622966.079 ops/s
Iteration  25: 3619231.550 ops/s
Iteration  26: 3731890.036 ops/s
Iteration  27: 3620111.424 ops/s
Iteration  28: 3582722.926 ops/s
Iteration  29: 3650374.403 ops/s
Iteration  30: 3594443.452 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableUsingTest._Benchmark.benchmark_nonEagerDisposeUpstreamThenDisposeResource":
  3612285.447 ±(99.9%) 58924.622 ops/s [Average]
  (min, avg, max) = (3461196.768, 3612285.447, 3806386.521), stdev = 88195.607
  CI (99.9%): [3553360.825, 3671210.069] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             Mode  Cnt        Score       Error  Units
ObservableUsingTest._Benchmark.benchmark_nonEagerDisposeUpstreamThenDisposeResource  thrpt   30  3612285.447 ± 58924.622  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_bufferSkipSupplierCrash2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_bufferSkipSupplierCrash2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.598 ops/s
# Warmup Iteration   2: 25734.576 ops/s
# Warmup Iteration   3: 70917.714 ops/s
# Warmup Iteration   4: 91441.326 ops/s
# Warmup Iteration   5: 101753.049 ops/s
# Warmup Iteration   6: 135527.282 ops/s
# Warmup Iteration   7: 328314.372 ops/s
# Warmup Iteration   8: 311691.020 ops/s
# Warmup Iteration   9: 320032.667 ops/s
# Warmup Iteration  10: 298979.122 ops/s
# Warmup Iteration  11: 304315.822 ops/s
# Warmup Iteration  12: 312898.711 ops/s
# Warmup Iteration  13: 325559.890 ops/s
# Warmup Iteration  14: 314881.891 ops/s
# Warmup Iteration  15: 324956.956 ops/s
# Warmup Iteration  16: 312256.373 ops/s
# Warmup Iteration  17: 326974.400 ops/s
# Warmup Iteration  18: 327707.169 ops/s
# Warmup Iteration  19: 327330.221 ops/s
# Warmup Iteration  20: 325372.693 ops/s
# Warmup Iteration  21: 319039.254 ops/s
# Warmup Iteration  22: 328837.893 ops/s
# Warmup Iteration  23: 316879.002 ops/s
# Warmup Iteration  24: 321888.825 ops/s
# Warmup Iteration  25: 323947.616 ops/s
# Warmup Iteration  26: 323508.659 ops/s
# Warmup Iteration  27: 314789.745 ops/s
# Warmup Iteration  28: 325903.573 ops/s
# Warmup Iteration  29: 312837.670 ops/s
# Warmup Iteration  30: 321952.520 ops/s
Iteration   1: 326824.876 ops/s
Iteration   2: 338312.432 ops/s
Iteration   3: 329413.720 ops/s
Iteration   4: 323584.459 ops/s
Iteration   5: 333170.681 ops/s
Iteration   6: 315872.457 ops/s
Iteration   7: 337154.400 ops/s
Iteration   8: 328859.549 ops/s
Iteration   9: 315504.528 ops/s
Iteration  10: 334042.116 ops/s
Iteration  11: 316729.507 ops/s
Iteration  12: 332114.369 ops/s
Iteration  13: 312538.636 ops/s
Iteration  14: 322677.009 ops/s
Iteration  15: 327772.305 ops/s
Iteration  16: 313964.699 ops/s
Iteration  17: 326042.328 ops/s
Iteration  18: 326511.524 ops/s
Iteration  19: 339563.119 ops/s
Iteration  20: 315054.388 ops/s
Iteration  21: 314354.415 ops/s
Iteration  22: 333999.963 ops/s
Iteration  23: 322046.736 ops/s
Iteration  24: 324971.888 ops/s
Iteration  25: 329733.836 ops/s
Iteration  26: 327597.230 ops/s
Iteration  27: 332238.669 ops/s
Iteration  28: 315766.191 ops/s
Iteration  29: 333314.560 ops/s
Iteration  30: 317141.457 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_bufferSkipSupplierCrash2":
  325562.402 ±(99.9%) 5409.958 ops/s [Average]
  (min, avg, max) = (312538.636, 325562.402, 339563.119), stdev = 8097.371
  CI (99.9%): [320152.443, 330972.360] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score      Error  Units
ObservableBufferTest._Benchmark.benchmark_bufferSkipSupplierCrash2  thrpt   30  325562.402 ± 5409.958  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualTest._Benchmark.benchmark_prefetchObservable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualTest._Benchmark.benchmark_prefetchObservable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 65219.800 ops/s
# Warmup Iteration   2: 448978.480 ops/s
# Warmup Iteration   3: 479599.016 ops/s
# Warmup Iteration   4: 493052.742 ops/s
# Warmup Iteration   5: 515057.268 ops/s
# Warmup Iteration   6: 500218.390 ops/s
# Warmup Iteration   7: 504791.573 ops/s
# Warmup Iteration   8: 513083.429 ops/s
# Warmup Iteration   9: 492771.539 ops/s
# Warmup Iteration  10: 505080.203 ops/s
# Warmup Iteration  11: 470465.071 ops/s
# Warmup Iteration  12: 523261.279 ops/s
# Warmup Iteration  13: 525720.595 ops/s
# Warmup Iteration  14: 505657.718 ops/s
# Warmup Iteration  15: 509963.156 ops/s
# Warmup Iteration  16: 484773.100 ops/s
# Warmup Iteration  17: 511119.634 ops/s
# Warmup Iteration  18: 496561.167 ops/s
# Warmup Iteration  19: 512851.497 ops/s
# Warmup Iteration  20: 491604.532 ops/s
# Warmup Iteration  21: 501789.413 ops/s
# Warmup Iteration  22: 517068.351 ops/s
# Warmup Iteration  23: 502562.780 ops/s
# Warmup Iteration  24: 493325.797 ops/s
# Warmup Iteration  25: 505374.173 ops/s
# Warmup Iteration  26: 476254.464 ops/s
# Warmup Iteration  27: 511915.418 ops/s
# Warmup Iteration  28: 490036.832 ops/s
# Warmup Iteration  29: 491971.783 ops/s
# Warmup Iteration  30: 511375.599 ops/s
Iteration   1: 497435.904 ops/s
Iteration   2: 529614.168 ops/s
Iteration   3: 532039.709 ops/s
Iteration   4: 500802.411 ops/s
Iteration   5: 492971.941 ops/s
Iteration   6: 513217.951 ops/s
Iteration   7: 504019.149 ops/s
Iteration   8: 502986.727 ops/s
Iteration   9: 499063.496 ops/s
Iteration  10: 518061.954 ops/s
Iteration  11: 506276.103 ops/s
Iteration  12: 506007.060 ops/s
Iteration  13: 518637.428 ops/s
Iteration  14: 500875.370 ops/s
Iteration  15: 507806.486 ops/s
Iteration  16: 528184.382 ops/s
Iteration  17: 500460.131 ops/s
Iteration  18: 513997.852 ops/s
Iteration  19: 487941.920 ops/s
Iteration  20: 506817.686 ops/s
Iteration  21: 499559.042 ops/s
Iteration  22: 490313.173 ops/s
Iteration  23: 509349.348 ops/s
Iteration  24: 499058.117 ops/s
Iteration  25: 520375.126 ops/s
Iteration  26: 526512.191 ops/s
Iteration  27: 382667.748 ops/s
Iteration  28: 522206.020 ops/s
Iteration  29: 501294.693 ops/s
Iteration  30: 512733.318 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualTest._Benchmark.benchmark_prefetchObservable":
  504376.220 ±(99.9%) 17237.324 ops/s [Average]
  (min, avg, max) = (382667.748, 504376.220, 532039.709), stdev = 25800.017
  CI (99.9%): [487138.896, 521613.544] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score       Error  Units
ObservableSequenceEqualTest._Benchmark.benchmark_prefetchObservable  thrpt   30  504376.220 ± 17237.324  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybeTest._Benchmark.benchmark_basicFusionRejected$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybeTest._Benchmark.benchmark_basicFusionRejected

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1008348.059 ops/s
# Warmup Iteration   2: 3302510.154 ops/s
# Warmup Iteration   3: 4896618.932 ops/s
# Warmup Iteration   4: 4933146.539 ops/s
# Warmup Iteration   5: 4901585.071 ops/s
# Warmup Iteration   6: 4737556.114 ops/s
# Warmup Iteration   7: 4817889.610 ops/s
# Warmup Iteration   8: 4941834.401 ops/s
# Warmup Iteration   9: 4773326.099 ops/s
# Warmup Iteration  10: 4767734.179 ops/s
# Warmup Iteration  11: 5037844.059 ops/s
# Warmup Iteration  12: 4750016.230 ops/s
# Warmup Iteration  13: 4947160.803 ops/s
# Warmup Iteration  14: 4777262.299 ops/s
# Warmup Iteration  15: 5033046.682 ops/s
# Warmup Iteration  16: 4786006.641 ops/s
# Warmup Iteration  17: 4905780.651 ops/s
# Warmup Iteration  18: 5042842.166 ops/s
# Warmup Iteration  19: 4940235.682 ops/s
# Warmup Iteration  20: 4847659.227 ops/s
# Warmup Iteration  21: 5073139.602 ops/s
# Warmup Iteration  22: 4785432.964 ops/s
# Warmup Iteration  23: 4978953.228 ops/s
# Warmup Iteration  24: 4916348.074 ops/s
# Warmup Iteration  25: 4841150.825 ops/s
# Warmup Iteration  26: 5018367.429 ops/s
# Warmup Iteration  27: 4791642.539 ops/s
# Warmup Iteration  28: 4710933.899 ops/s
# Warmup Iteration  29: 4973307.660 ops/s
# Warmup Iteration  30: 4721837.244 ops/s
Iteration   1: 4920770.906 ops/s
Iteration   2: 4811555.004 ops/s
Iteration   3: 4893434.270 ops/s
Iteration   4: 4886106.354 ops/s
Iteration   5: 4973451.047 ops/s
Iteration   6: 4925888.394 ops/s
Iteration   7: 4918489.256 ops/s
Iteration   8: 4997473.444 ops/s
Iteration   9: 4899202.202 ops/s
Iteration  10: 4987038.034 ops/s
Iteration  11: 4739533.481 ops/s
Iteration  12: 5028171.206 ops/s
Iteration  13: 4699499.755 ops/s
Iteration  14: 4862897.649 ops/s
Iteration  15: 4815030.135 ops/s
Iteration  16: 4779484.269 ops/s
Iteration  17: 5126382.000 ops/s
Iteration  18: 4942503.017 ops/s
Iteration  19: 4759075.978 ops/s
Iteration  20: 4979555.735 ops/s
Iteration  21: 4919033.958 ops/s
Iteration  22: 5015322.992 ops/s
Iteration  23: 4759472.522 ops/s
Iteration  24: 5008264.302 ops/s
Iteration  25: 4912802.131 ops/s
Iteration  26: 4845969.348 ops/s
Iteration  27: 4823952.583 ops/s
Iteration  28: 4808318.578 ops/s
Iteration  29: 5066275.783 ops/s
Iteration  30: 4696277.655 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybeTest._Benchmark.benchmark_basicFusionRejected":
  4893374.400 ±(99.9%) 73077.914 ops/s [Average]
  (min, avg, max) = (4696277.655, 4893374.400, 5126382.000), stdev = 109379.590
  CI (99.9%): [4820296.485, 4966452.314] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
ObservableConcatMapMaybeTest._Benchmark.benchmark_basicFusionRejected  thrpt   30  4893374.400 ± 73077.914  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybeTest._Benchmark.benchmark_mainError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybeTest._Benchmark.benchmark_mainError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 88323.661 ops/s
# Warmup Iteration   2: 540620.377 ops/s
# Warmup Iteration   3: 607650.632 ops/s
# Warmup Iteration   4: 591045.950 ops/s
# Warmup Iteration   5: 637302.353 ops/s
# Warmup Iteration   6: 664944.146 ops/s
# Warmup Iteration   7: 636907.140 ops/s
# Warmup Iteration   8: 659717.613 ops/s
# Warmup Iteration   9: 660068.053 ops/s
# Warmup Iteration  10: 639952.853 ops/s
# Warmup Iteration  11: 630108.169 ops/s
# Warmup Iteration  12: 669752.487 ops/s
# Warmup Iteration  13: 616565.428 ops/s
# Warmup Iteration  14: 549768.300 ops/s
# Warmup Iteration  15: 625618.034 ops/s
# Warmup Iteration  16: 626965.683 ops/s
# Warmup Iteration  17: 730784.233 ops/s
# Warmup Iteration  18: 668066.190 ops/s
# Warmup Iteration  19: 695637.921 ops/s
# Warmup Iteration  20: 716017.356 ops/s
# Warmup Iteration  21: 685705.653 ops/s
# Warmup Iteration  22: 718094.724 ops/s
# Warmup Iteration  23: 675627.875 ops/s
# Warmup Iteration  24: 677225.097 ops/s
# Warmup Iteration  25: 710913.705 ops/s
# Warmup Iteration  26: 677455.249 ops/s
# Warmup Iteration  27: 704965.572 ops/s
# Warmup Iteration  28: 672930.945 ops/s
# Warmup Iteration  29: 712647.051 ops/s
# Warmup Iteration  30: 688646.203 ops/s
Iteration   1: 658101.568 ops/s
Iteration   2: 653356.317 ops/s
Iteration   3: 688547.957 ops/s
Iteration   4: 697244.087 ops/s
Iteration   5: 710548.290 ops/s
Iteration   6: 679526.565 ops/s
Iteration   7: 707484.152 ops/s
Iteration   8: 687683.158 ops/s
Iteration   9: 704786.219 ops/s
Iteration  10: 696310.183 ops/s
Iteration  11: 704501.099 ops/s
Iteration  12: 703523.776 ops/s
Iteration  13: 698846.536 ops/s
Iteration  14: 716801.470 ops/s
Iteration  15: 698008.827 ops/s
Iteration  16: 670609.606 ops/s
Iteration  17: 693125.179 ops/s
Iteration  18: 700805.980 ops/s
Iteration  19: 700201.719 ops/s
Iteration  20: 719447.252 ops/s
Iteration  21: 673637.362 ops/s
Iteration  22: 723182.940 ops/s
Iteration  23: 686415.234 ops/s
Iteration  24: 668754.287 ops/s
Iteration  25: 714729.604 ops/s
Iteration  26: 688094.859 ops/s
Iteration  27: 696906.270 ops/s
Iteration  28: 690704.272 ops/s
Iteration  29: 683465.954 ops/s
Iteration  30: 682583.386 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybeTest._Benchmark.benchmark_mainError":
  693264.470 ±(99.9%) 11450.626 ops/s [Average]
  (min, avg, max) = (653356.317, 693264.470, 723182.940), stdev = 17138.759
  CI (99.9%): [681813.844, 704715.096] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score       Error  Units
ObservableConcatMapMaybeTest._Benchmark.benchmark_mainError  thrpt   30  693264.470 ± 11450.626  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybeTest._Benchmark.benchmark_disposed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybeTest._Benchmark.benchmark_disposed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 537633.771 ops/s
# Warmup Iteration   2: 2274353.968 ops/s
# Warmup Iteration   3: 2997813.626 ops/s
# Warmup Iteration   4: 3740068.786 ops/s
# Warmup Iteration   5: 3595593.841 ops/s
# Warmup Iteration   6: 3597035.412 ops/s
# Warmup Iteration   7: 3635506.833 ops/s
# Warmup Iteration   8: 3509713.422 ops/s
# Warmup Iteration   9: 3557244.065 ops/s
# Warmup Iteration  10: 3560551.308 ops/s
# Warmup Iteration  11: 3674206.018 ops/s
# Warmup Iteration  12: 3408076.833 ops/s
# Warmup Iteration  13: 3589595.220 ops/s
# Warmup Iteration  14: 3515288.174 ops/s
# Warmup Iteration  15: 3699575.967 ops/s
# Warmup Iteration  16: 3464601.687 ops/s
# Warmup Iteration  17: 3613913.709 ops/s
# Warmup Iteration  18: 3568678.827 ops/s
# Warmup Iteration  19: 3605535.564 ops/s
# Warmup Iteration  20: 3562821.056 ops/s
# Warmup Iteration  21: 3522910.820 ops/s
# Warmup Iteration  22: 3745069.153 ops/s
# Warmup Iteration  23: 3519300.165 ops/s
# Warmup Iteration  24: 3526068.587 ops/s
# Warmup Iteration  25: 3676413.227 ops/s
# Warmup Iteration  26: 3491775.164 ops/s
# Warmup Iteration  27: 3558277.061 ops/s
# Warmup Iteration  28: 3600743.772 ops/s
# Warmup Iteration  29: 3544067.890 ops/s
# Warmup Iteration  30: 3617786.758 ops/s
Iteration   1: 3576304.420 ops/s
Iteration   2: 3670901.556 ops/s
Iteration   3: 3545485.495 ops/s
Iteration   4: 3582498.844 ops/s
Iteration   5: 3568062.409 ops/s
Iteration   6: 2796284.892 ops/s
Iteration   7: 3610713.354 ops/s
Iteration   8: 3596625.416 ops/s
Iteration   9: 3695698.119 ops/s
Iteration  10: 3614288.432 ops/s
Iteration  11: 3551763.059 ops/s
Iteration  12: 3705284.797 ops/s
Iteration  13: 3520710.775 ops/s
Iteration  14: 3485875.926 ops/s
Iteration  15: 3624638.263 ops/s
Iteration  16: 3461873.430 ops/s
Iteration  17: 3479318.711 ops/s
Iteration  18: 3622263.709 ops/s
Iteration  19: 3467212.150 ops/s
Iteration  20: 3697244.610 ops/s
Iteration  21: 3454258.378 ops/s
Iteration  22: 3747698.983 ops/s
Iteration  23: 3536716.987 ops/s
Iteration  24: 3653521.221 ops/s
Iteration  25: 3633241.922 ops/s
Iteration  26: 3519294.347 ops/s
Iteration  27: 3581493.910 ops/s
Iteration  28: 3572815.028 ops/s
Iteration  29: 3598889.078 ops/s
Iteration  30: 3717022.406 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybeTest._Benchmark.benchmark_disposed":
  3562933.354 ±(99.9%) 110341.052 ops/s [Average]
  (min, avg, max) = (2796284.892, 3562933.354, 3747698.983), stdev = 165153.304
  CI (99.9%): [3452592.303, 3673274.406] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score        Error  Units
ObservableConcatMapMaybeTest._Benchmark.benchmark_disposed  thrpt   30  3562933.354 ± 110341.052  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservableTest._Benchmark.benchmark_empty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservableTest._Benchmark.benchmark_empty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2004435.222 ops/s
# Warmup Iteration   2: 5736320.402 ops/s
# Warmup Iteration   3: 8813253.680 ops/s
# Warmup Iteration   4: 7822490.478 ops/s
# Warmup Iteration   5: 8353872.591 ops/s
# Warmup Iteration   6: 8555192.621 ops/s
# Warmup Iteration   7: 8258043.449 ops/s
# Warmup Iteration   8: 8441205.403 ops/s
# Warmup Iteration   9: 8712018.814 ops/s
# Warmup Iteration  10: 8290770.007 ops/s
# Warmup Iteration  11: 8240000.060 ops/s
# Warmup Iteration  12: 8557540.508 ops/s
# Warmup Iteration  13: 8382454.608 ops/s
# Warmup Iteration  14: 8779243.676 ops/s
# Warmup Iteration  15: 8208979.016 ops/s
# Warmup Iteration  16: 8344679.190 ops/s
# Warmup Iteration  17: 8248108.325 ops/s
# Warmup Iteration  18: 8493557.999 ops/s
# Warmup Iteration  19: 8481852.327 ops/s
# Warmup Iteration  20: 8318828.350 ops/s
# Warmup Iteration  21: 8557982.656 ops/s
# Warmup Iteration  22: 8325422.295 ops/s
# Warmup Iteration  23: 8588660.164 ops/s
# Warmup Iteration  24: 8357976.326 ops/s
# Warmup Iteration  25: 8515300.322 ops/s
# Warmup Iteration  26: 8466904.101 ops/s
# Warmup Iteration  27: 8172649.672 ops/s
# Warmup Iteration  28: 8347865.524 ops/s
# Warmup Iteration  29: 8612916.922 ops/s
# Warmup Iteration  30: 8435093.178 ops/s
Iteration   1: 8445279.619 ops/s
Iteration   2: 8261376.135 ops/s
Iteration   3: 8575852.947 ops/s
Iteration   4: 8577473.293 ops/s
Iteration   5: 8477011.485 ops/s
Iteration   6: 8307312.415 ops/s
Iteration   7: 8424840.134 ops/s
Iteration   8: 8852700.155 ops/s
Iteration   9: 8158885.342 ops/s
Iteration  10: 8558185.749 ops/s
Iteration  11: 8450085.680 ops/s
Iteration  12: 8712389.610 ops/s
Iteration  13: 8305149.942 ops/s
Iteration  14: 8741801.629 ops/s
Iteration  15: 8251328.323 ops/s
Iteration  16: 6974215.636 ops/s
Iteration  17: 7852744.985 ops/s
Iteration  18: 8570421.832 ops/s
Iteration  19: 8443445.575 ops/s
Iteration  20: 8560458.626 ops/s
Iteration  21: 8231749.773 ops/s
Iteration  22: 8637038.728 ops/s
Iteration  23: 8827471.919 ops/s
Iteration  24: 8893514.101 ops/s
Iteration  25: 8312723.443 ops/s
Iteration  26: 8405557.078 ops/s
Iteration  27: 8465519.102 ops/s
Iteration  28: 8462781.848 ops/s
Iteration  29: 8597864.480 ops/s
Iteration  30: 8357416.255 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservableTest._Benchmark.benchmark_empty":
  8423086.528 ±(99.9%) 234599.028 ops/s [Average]
  (min, avg, max) = (6974215.636, 8423086.528, 8893514.101), stdev = 351136.807
  CI (99.9%): [8188487.500, 8657685.556] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score        Error  Units
MaybeFlatMapIterableObservableTest._Benchmark.benchmark_empty  thrpt   30  8423086.528 ± 234599.028  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybeTest._Benchmark.benchmark_innerError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybeTest._Benchmark.benchmark_innerError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 167287.379 ops/s
# Warmup Iteration   2: 598047.733 ops/s
# Warmup Iteration   3: 676201.877 ops/s
# Warmup Iteration   4: 726549.756 ops/s
# Warmup Iteration   5: 704840.400 ops/s
# Warmup Iteration   6: 686318.550 ops/s
# Warmup Iteration   7: 724261.355 ops/s
# Warmup Iteration   8: 661866.981 ops/s
# Warmup Iteration   9: 711337.115 ops/s
# Warmup Iteration  10: 697147.017 ops/s
# Warmup Iteration  11: 690663.662 ops/s
# Warmup Iteration  12: 699720.524 ops/s
# Warmup Iteration  13: 687696.506 ops/s
# Warmup Iteration  14: 693636.489 ops/s
# Warmup Iteration  15: 709673.211 ops/s
# Warmup Iteration  16: 705823.910 ops/s
# Warmup Iteration  17: 739815.227 ops/s
# Warmup Iteration  18: 755888.164 ops/s
# Warmup Iteration  19: 765907.569 ops/s
# Warmup Iteration  20: 720034.664 ops/s
# Warmup Iteration  21: 754170.202 ops/s
# Warmup Iteration  22: 753999.028 ops/s
# Warmup Iteration  23: 761505.337 ops/s
# Warmup Iteration  24: 762959.937 ops/s
# Warmup Iteration  25: 699860.892 ops/s
# Warmup Iteration  26: 783943.724 ops/s
# Warmup Iteration  27: 734895.408 ops/s
# Warmup Iteration  28: 732610.487 ops/s
# Warmup Iteration  29: 774204.716 ops/s
# Warmup Iteration  30: 739744.599 ops/s
Iteration   1: 764397.514 ops/s
Iteration   2: 753000.871 ops/s
Iteration   3: 743264.567 ops/s
Iteration   4: 761707.644 ops/s
Iteration   5: 724687.952 ops/s
Iteration   6: 770304.476 ops/s
Iteration   7: 747860.559 ops/s
Iteration   8: 769487.630 ops/s
Iteration   9: 745278.813 ops/s
Iteration  10: 761755.296 ops/s
Iteration  11: 752762.160 ops/s
Iteration  12: 733078.844 ops/s
Iteration  13: 750999.634 ops/s
Iteration  14: 760065.293 ops/s
Iteration  15: 777652.730 ops/s
Iteration  16: 731681.782 ops/s
Iteration  17: 780193.845 ops/s
Iteration  18: 712538.448 ops/s
Iteration  19: 756141.750 ops/s
Iteration  20: 760816.349 ops/s
Iteration  21: 758026.455 ops/s
Iteration  22: 740746.869 ops/s
Iteration  23: 742700.512 ops/s
Iteration  24: 780280.704 ops/s
Iteration  25: 732301.494 ops/s
Iteration  26: 738558.651 ops/s
Iteration  27: 755519.986 ops/s
Iteration  28: 733279.478 ops/s
Iteration  29: 760914.883 ops/s
Iteration  30: 712120.275 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybeTest._Benchmark.benchmark_innerError":
  750404.182 ±(99.9%) 12019.830 ops/s [Average]
  (min, avg, max) = (712120.275, 750404.182, 780280.704), stdev = 17990.716
  CI (99.9%): [738384.353, 762424.012] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score       Error  Units
ObservableSwitchMapMaybeTest._Benchmark.benchmark_innerError  thrpt   30  750404.182 ± 12019.830  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybeTest._Benchmark.benchmark_mainBoundaryErrorInnerEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybeTest._Benchmark.benchmark_mainBoundaryErrorInnerEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 66784.517 ops/s
# Warmup Iteration   2: 262585.895 ops/s
# Warmup Iteration   3: 519202.080 ops/s
# Warmup Iteration   4: 514458.319 ops/s
# Warmup Iteration   5: 536175.887 ops/s
# Warmup Iteration   6: 518225.838 ops/s
# Warmup Iteration   7: 537790.368 ops/s
# Warmup Iteration   8: 514933.400 ops/s
# Warmup Iteration   9: 517476.888 ops/s
# Warmup Iteration  10: 517980.077 ops/s
# Warmup Iteration  11: 530882.347 ops/s
# Warmup Iteration  12: 537724.388 ops/s
# Warmup Iteration  13: 539428.080 ops/s
# Warmup Iteration  14: 523697.009 ops/s
# Warmup Iteration  15: 542356.674 ops/s
# Warmup Iteration  16: 532049.308 ops/s
# Warmup Iteration  17: 554670.682 ops/s
# Warmup Iteration  18: 542837.475 ops/s
# Warmup Iteration  19: 553537.327 ops/s
# Warmup Iteration  20: 565135.447 ops/s
# Warmup Iteration  21: 533699.629 ops/s
# Warmup Iteration  22: 560797.453 ops/s
# Warmup Iteration  23: 530645.665 ops/s
# Warmup Iteration  24: 550101.251 ops/s
# Warmup Iteration  25: 536315.001 ops/s
# Warmup Iteration  26: 574015.187 ops/s
# Warmup Iteration  27: 550604.310 ops/s
# Warmup Iteration  28: 555348.938 ops/s
# Warmup Iteration  29: 566855.844 ops/s
# Warmup Iteration  30: 548406.062 ops/s
Iteration   1: 532707.603 ops/s
Iteration   2: 573947.755 ops/s
Iteration   3: 576943.592 ops/s
Iteration   4: 550825.449 ops/s
Iteration   5: 548234.909 ops/s
Iteration   6: 578887.503 ops/s
Iteration   7: 558493.794 ops/s
Iteration   8: 563945.325 ops/s
Iteration   9: 562871.210 ops/s
Iteration  10: 505061.410 ops/s
Iteration  11: 424107.321 ops/s
Iteration  12: 571306.149 ops/s
Iteration  13: 529712.818 ops/s
Iteration  14: 568316.320 ops/s
Iteration  15: 551739.230 ops/s
Iteration  16: 555037.750 ops/s
Iteration  17: 585553.860 ops/s
Iteration  18: 542273.553 ops/s
Iteration  19: 562511.468 ops/s
Iteration  20: 563279.679 ops/s
Iteration  21: 568753.304 ops/s
Iteration  22: 556348.527 ops/s
Iteration  23: 552460.013 ops/s
Iteration  24: 566449.251 ops/s
Iteration  25: 557103.215 ops/s
Iteration  26: 570670.301 ops/s
Iteration  27: 545890.223 ops/s
Iteration  28: 559385.498 ops/s
Iteration  29: 573713.450 ops/s
Iteration  30: 525016.274 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybeTest._Benchmark.benchmark_mainBoundaryErrorInnerEmpty":
  552718.225 ±(99.9%) 19943.201 ops/s [Average]
  (min, avg, max) = (424107.321, 552718.225, 585553.860), stdev = 29850.047
  CI (99.9%): [532775.024, 572661.426] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt       Score       Error  Units
ObservableConcatMapMaybeTest._Benchmark.benchmark_mainBoundaryErrorInnerEmpty  thrpt   30  552718.225 ± 19943.201  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingleTest._Benchmark.benchmark_checkUnboundedInnerQueue$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingleTest._Benchmark.benchmark_checkUnboundedInnerQueue

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 177586.701 ops/s
# Warmup Iteration   2: 816277.562 ops/s
# Warmup Iteration   3: 1511426.761 ops/s
# Warmup Iteration   4: 1393983.404 ops/s
# Warmup Iteration   5: 1385272.188 ops/s
# Warmup Iteration   6: 1262134.471 ops/s
# Warmup Iteration   7: 1468677.209 ops/s
# Warmup Iteration   8: 1522696.249 ops/s
# Warmup Iteration   9: 1481811.828 ops/s
# Warmup Iteration  10: 1407319.837 ops/s
# Warmup Iteration  11: 1467510.458 ops/s
# Warmup Iteration  12: 1519211.807 ops/s
# Warmup Iteration  13: 1430017.815 ops/s
# Warmup Iteration  14: 1499354.327 ops/s
# Warmup Iteration  15: 1406769.629 ops/s
# Warmup Iteration  16: 1508172.663 ops/s
# Warmup Iteration  17: 1429283.185 ops/s
# Warmup Iteration  18: 1488586.294 ops/s
# Warmup Iteration  19: 1469918.110 ops/s
# Warmup Iteration  20: 1462835.001 ops/s
# Warmup Iteration  21: 1530716.363 ops/s
# Warmup Iteration  22: 1424491.798 ops/s
# Warmup Iteration  23: 1457540.122 ops/s
# Warmup Iteration  24: 1494824.725 ops/s
# Warmup Iteration  25: 1456903.674 ops/s
# Warmup Iteration  26: 1459446.379 ops/s
# Warmup Iteration  27: 1500309.553 ops/s
# Warmup Iteration  28: 1431156.824 ops/s
# Warmup Iteration  29: 1515080.715 ops/s
# Warmup Iteration  30: 1465795.617 ops/s
Iteration   1: 1501490.149 ops/s
Iteration   2: 1523331.175 ops/s
Iteration   3: 1448393.264 ops/s
Iteration   4: 1500702.682 ops/s
Iteration   5: 1495123.717 ops/s
Iteration   6: 1395961.926 ops/s
Iteration   7: 1498701.678 ops/s
Iteration   8: 1429150.012 ops/s
Iteration   9: 1490876.964 ops/s
Iteration  10: 1501826.083 ops/s
Iteration  11: 1455182.906 ops/s
Iteration  12: 1474451.765 ops/s
Iteration  13: 1524570.938 ops/s
Iteration  14: 1407021.725 ops/s
Iteration  15: 1503013.313 ops/s
Iteration  16: 1436517.632 ops/s
Iteration  17: 1500979.461 ops/s
Iteration  18: 1474576.004 ops/s
Iteration  19: 1491228.754 ops/s
Iteration  20: 1513740.785 ops/s
Iteration  21: 1445919.660 ops/s
Iteration  22: 1563448.237 ops/s
Iteration  23: 1437462.598 ops/s
Iteration  24: 1547200.388 ops/s
Iteration  25: 1444524.454 ops/s
Iteration  26: 1412189.720 ops/s
Iteration  27: 1523990.244 ops/s
Iteration  28: 1501562.678 ops/s
Iteration  29: 1484039.768 ops/s
Iteration  30: 1459156.582 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingleTest._Benchmark.benchmark_checkUnboundedInnerQueue":
  1479544.509 ±(99.9%) 27701.221 ops/s [Average]
  (min, avg, max) = (1395961.926, 1479544.509, 1563448.237), stdev = 41461.886
  CI (99.9%): [1451843.288, 1507245.729] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score       Error  Units
ObservableConcatMapSingleTest._Benchmark.benchmark_checkUnboundedInnerQueue  thrpt   30  1479544.509 ± 27701.221  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleStartWithTest._Benchmark.benchmark_justObservableError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleStartWithTest._Benchmark.benchmark_justObservableError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 54362.011 ops/s
# Warmup Iteration   2: 514412.108 ops/s
# Warmup Iteration   3: 585181.435 ops/s
# Warmup Iteration   4: 598200.651 ops/s
# Warmup Iteration   5: 553833.457 ops/s
# Warmup Iteration   6: 633404.560 ops/s
# Warmup Iteration   7: 583539.103 ops/s
# Warmup Iteration   8: 631857.412 ops/s
# Warmup Iteration   9: 657178.411 ops/s
# Warmup Iteration  10: 621941.188 ops/s
# Warmup Iteration  11: 630540.872 ops/s
# Warmup Iteration  12: 638006.640 ops/s
# Warmup Iteration  13: 648411.507 ops/s
# Warmup Iteration  14: 639767.297 ops/s
# Warmup Iteration  15: 632842.420 ops/s
# Warmup Iteration  16: 655378.792 ops/s
# Warmup Iteration  17: 642372.626 ops/s
# Warmup Iteration  18: 686596.313 ops/s
# Warmup Iteration  19: 657030.317 ops/s
# Warmup Iteration  20: 665169.712 ops/s
# Warmup Iteration  21: 696505.014 ops/s
# Warmup Iteration  22: 675017.830 ops/s
# Warmup Iteration  23: 670436.563 ops/s
# Warmup Iteration  24: 675402.693 ops/s
# Warmup Iteration  25: 666291.413 ops/s
# Warmup Iteration  26: 677764.530 ops/s
# Warmup Iteration  27: 661793.747 ops/s
# Warmup Iteration  28: 698699.756 ops/s
# Warmup Iteration  29: 674729.377 ops/s
# Warmup Iteration  30: 657105.901 ops/s
Iteration   1: 677911.319 ops/s
Iteration   2: 645600.832 ops/s
Iteration   3: 680043.465 ops/s
Iteration   4: 683986.792 ops/s
Iteration   5: 662092.626 ops/s
Iteration   6: 563860.914 ops/s
Iteration   7: 646912.416 ops/s
Iteration   8: 669504.705 ops/s
Iteration   9: 685436.642 ops/s
Iteration  10: 670296.831 ops/s
Iteration  11: 670849.341 ops/s
Iteration  12: 658967.083 ops/s
Iteration  13: 692049.624 ops/s
Iteration  14: 659220.466 ops/s
Iteration  15: 649190.995 ops/s
Iteration  16: 672221.734 ops/s
Iteration  17: 685633.131 ops/s
Iteration  18: 692522.306 ops/s
Iteration  19: 648354.853 ops/s
Iteration  20: 693191.448 ops/s
Iteration  21: 685382.059 ops/s
Iteration  22: 687435.643 ops/s
Iteration  23: 645439.555 ops/s
Iteration  24: 677730.631 ops/s
Iteration  25: 663421.720 ops/s
Iteration  26: 672500.793 ops/s
Iteration  27: 690286.569 ops/s
Iteration  28: 671261.584 ops/s
Iteration  29: 690685.547 ops/s
Iteration  30: 674940.613 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleStartWithTest._Benchmark.benchmark_justObservableError":
  668897.741 ±(99.9%) 16671.457 ops/s [Average]
  (min, avg, max) = (563860.914, 668897.741, 693191.448), stdev = 24953.054
  CI (99.9%): [652226.284, 685569.198] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score       Error  Units
SingleStartWithTest._Benchmark.benchmark_justObservableError  thrpt   30  668897.741 ± 16671.457  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybeTest._Benchmark.benchmark_mainErrorAfterInnerError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybeTest._Benchmark.benchmark_mainErrorAfterInnerError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 22484.777 ops/s
# Warmup Iteration   2: 101740.205 ops/s
# Warmup Iteration   3: 161554.346 ops/s
# Warmup Iteration   4: 162379.071 ops/s
# Warmup Iteration   5: 169257.832 ops/s
# Warmup Iteration   6: 153009.552 ops/s
# Warmup Iteration   7: 159139.556 ops/s
# Warmup Iteration   8: 162368.331 ops/s
# Warmup Iteration   9: 160311.093 ops/s
# Warmup Iteration  10: 171373.461 ops/s
# Warmup Iteration  11: 169472.058 ops/s
# Warmup Iteration  12: 169558.432 ops/s
# Warmup Iteration  13: 173101.929 ops/s
# Warmup Iteration  14: 167699.463 ops/s
# Warmup Iteration  15: 174970.026 ops/s
# Warmup Iteration  16: 161695.996 ops/s
# Warmup Iteration  17: 180007.796 ops/s
# Warmup Iteration  18: 174455.733 ops/s
# Warmup Iteration  19: 180954.498 ops/s
# Warmup Iteration  20: 179364.980 ops/s
# Warmup Iteration  21: 173075.065 ops/s
# Warmup Iteration  22: 179536.673 ops/s
# Warmup Iteration  23: 176403.963 ops/s
# Warmup Iteration  24: 171430.694 ops/s
# Warmup Iteration  25: 181970.909 ops/s
# Warmup Iteration  26: 176059.943 ops/s
# Warmup Iteration  27: 179158.093 ops/s
# Warmup Iteration  28: 173206.738 ops/s
# Warmup Iteration  29: 181132.029 ops/s
# Warmup Iteration  30: 174016.374 ops/s
Iteration   1: 180189.711 ops/s
Iteration   2: 179139.522 ops/s
Iteration   3: 178097.073 ops/s
Iteration   4: 177551.965 ops/s
Iteration   5: 173482.739 ops/s
Iteration   6: 177635.203 ops/s
Iteration   7: 176767.080 ops/s
Iteration   8: 177407.041 ops/s
Iteration   9: 174093.859 ops/s
Iteration  10: 182853.404 ops/s
Iteration  11: 175369.842 ops/s
Iteration  12: 176754.715 ops/s
Iteration  13: 181918.315 ops/s
Iteration  14: 173142.513 ops/s
Iteration  15: 173768.214 ops/s
Iteration  16: 181659.147 ops/s
Iteration  17: 170270.644 ops/s
Iteration  18: 179470.182 ops/s
Iteration  19: 181302.515 ops/s
Iteration  20: 175483.726 ops/s
Iteration  21: 179897.410 ops/s
Iteration  22: 173264.840 ops/s
Iteration  23: 176214.315 ops/s
Iteration  24: 173623.359 ops/s
Iteration  25: 180799.592 ops/s
Iteration  26: 179420.704 ops/s
Iteration  27: 170328.286 ops/s
Iteration  28: 176699.292 ops/s
Iteration  29: 179140.999 ops/s
Iteration  30: 177836.625 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybeTest._Benchmark.benchmark_mainErrorAfterInnerError":
  177119.428 ±(99.9%) 2227.033 ops/s [Average]
  (min, avg, max) = (170270.644, 177119.428, 182853.404), stdev = 3333.318
  CI (99.9%): [174892.395, 179346.461] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score      Error  Units
ObservableConcatMapMaybeTest._Benchmark.benchmark_mainErrorAfterInnerError  thrpt   30  177119.428 ± 2227.033  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDoFinallyTest._Benchmark.benchmark_normalEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDoFinallyTest._Benchmark.benchmark_normalEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3109689.138 ops/s
# Warmup Iteration   2: 5644101.032 ops/s
# Warmup Iteration   3: 8150715.473 ops/s
# Warmup Iteration   4: 7789052.230 ops/s
# Warmup Iteration   5: 7937448.653 ops/s
# Warmup Iteration   6: 7872277.393 ops/s
# Warmup Iteration   7: 8085476.896 ops/s
# Warmup Iteration   8: 7876822.072 ops/s
# Warmup Iteration   9: 7829964.313 ops/s
# Warmup Iteration  10: 8172740.887 ops/s
# Warmup Iteration  11: 7631915.935 ops/s
# Warmup Iteration  12: 8074571.089 ops/s
# Warmup Iteration  13: 7857063.910 ops/s
# Warmup Iteration  14: 8062287.750 ops/s
# Warmup Iteration  15: 8062546.966 ops/s
# Warmup Iteration  16: 7732818.263 ops/s
# Warmup Iteration  17: 8155536.050 ops/s
# Warmup Iteration  18: 7777587.358 ops/s
# Warmup Iteration  19: 8129347.170 ops/s
# Warmup Iteration  20: 7770067.045 ops/s
# Warmup Iteration  21: 8043922.502 ops/s
# Warmup Iteration  22: 7944794.454 ops/s
# Warmup Iteration  23: 7778868.932 ops/s
# Warmup Iteration  24: 8250144.071 ops/s
# Warmup Iteration  25: 8392373.837 ops/s
# Warmup Iteration  26: 7667265.767 ops/s
# Warmup Iteration  27: 8153116.487 ops/s
# Warmup Iteration  28: 7794454.365 ops/s
# Warmup Iteration  29: 8090966.708 ops/s
# Warmup Iteration  30: 7789992.140 ops/s
Iteration   1: 6756256.357 ops/s
Iteration   2: 7682373.843 ops/s
Iteration   3: 8037130.234 ops/s
Iteration   4: 7820995.088 ops/s
Iteration   5: 7986222.231 ops/s
Iteration   6: 8314930.353 ops/s
Iteration   7: 7866433.100 ops/s
Iteration   8: 7763552.620 ops/s
Iteration   9: 7933447.761 ops/s
Iteration  10: 8291704.713 ops/s
Iteration  11: 7754176.457 ops/s
Iteration  12: 7907621.670 ops/s
Iteration  13: 8209993.904 ops/s
Iteration  14: 7959957.576 ops/s
Iteration  15: 7660886.293 ops/s
Iteration  16: 7983117.275 ops/s
Iteration  17: 7942365.655 ops/s
Iteration  18: 7881338.817 ops/s
Iteration  19: 7989422.955 ops/s
Iteration  20: 7997782.601 ops/s
Iteration  21: 8091520.483 ops/s
Iteration  22: 7906044.890 ops/s
Iteration  23: 7995655.208 ops/s
Iteration  24: 8354296.663 ops/s
Iteration  25: 7721305.649 ops/s
Iteration  26: 8087300.609 ops/s
Iteration  27: 7949684.629 ops/s
Iteration  28: 8235687.297 ops/s
Iteration  29: 7794389.831 ops/s
Iteration  30: 7979535.067 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeDoFinallyTest._Benchmark.benchmark_normalEmpty":
  7928504.328 ±(99.9%) 190866.430 ops/s [Average]
  (min, avg, max) = (6756256.357, 7928504.328, 8354296.663), stdev = 285679.909
  CI (99.9%): [7737637.898, 8119370.758] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score        Error  Units
MaybeDoFinallyTest._Benchmark.benchmark_normalEmpty  thrpt   30  7928504.328 ± 190866.430  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybeTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybeTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 38903.579 ops/s
# Warmup Iteration   2: 412718.157 ops/s
# Warmup Iteration   3: 407544.046 ops/s
# Warmup Iteration   4: 446591.403 ops/s
# Warmup Iteration   5: 475129.232 ops/s
# Warmup Iteration   6: 417350.836 ops/s
# Warmup Iteration   7: 473443.998 ops/s
# Warmup Iteration   8: 483714.529 ops/s
# Warmup Iteration   9: 491565.084 ops/s
# Warmup Iteration  10: 480303.529 ops/s
# Warmup Iteration  11: 483332.489 ops/s
# Warmup Iteration  12: 474080.481 ops/s
# Warmup Iteration  13: 490490.747 ops/s
# Warmup Iteration  14: 481952.327 ops/s
# Warmup Iteration  15: 468486.487 ops/s
# Warmup Iteration  16: 485006.955 ops/s
# Warmup Iteration  17: 499524.798 ops/s
# Warmup Iteration  18: 507458.261 ops/s
# Warmup Iteration  19: 519334.100 ops/s
# Warmup Iteration  20: 509906.204 ops/s
# Warmup Iteration  21: 518483.303 ops/s
# Warmup Iteration  22: 489303.741 ops/s
# Warmup Iteration  23: 513235.520 ops/s
# Warmup Iteration  24: 508595.381 ops/s
# Warmup Iteration  25: 489082.888 ops/s
# Warmup Iteration  26: 513644.712 ops/s
# Warmup Iteration  27: 492624.770 ops/s
# Warmup Iteration  28: 519738.909 ops/s
# Warmup Iteration  29: 487816.172 ops/s
# Warmup Iteration  30: 494356.665 ops/s
Iteration   1: 506346.205 ops/s
Iteration   2: 504543.900 ops/s
Iteration   3: 507088.878 ops/s
Iteration   4: 495056.267 ops/s
Iteration   5: 507945.202 ops/s
Iteration   6: 520374.487 ops/s
Iteration   7: 482801.176 ops/s
Iteration   8: 512131.328 ops/s
Iteration   9: 512716.471 ops/s
Iteration  10: 497155.217 ops/s
Iteration  11: 510894.212 ops/s
Iteration  12: 494068.260 ops/s
Iteration  13: 510054.015 ops/s
Iteration  14: 529067.673 ops/s
Iteration  15: 490064.447 ops/s
Iteration  16: 504248.638 ops/s
Iteration  17: 518432.386 ops/s
Iteration  18: 487639.953 ops/s
Iteration  19: 508352.719 ops/s
Iteration  20: 504318.630 ops/s
Iteration  21: 515268.237 ops/s
Iteration  22: 497910.958 ops/s
Iteration  23: 510686.616 ops/s
Iteration  24: 514482.550 ops/s
Iteration  25: 502260.836 ops/s
Iteration  26: 517993.626 ops/s
Iteration  27: 498720.722 ops/s
Iteration  28: 513191.126 ops/s
Iteration  29: 497022.699 ops/s
Iteration  30: 495332.271 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybeTest._Benchmark.benchmark_doubleOnSubscribe":
  505538.990 ±(99.9%) 7018.657 ops/s [Average]
  (min, avg, max) = (482801.176, 505538.990, 529067.673), stdev = 10505.197
  CI (99.9%): [498520.333, 512557.648] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score      Error  Units
ObservableConcatMapMaybeTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  505538.990 ± 7018.657  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybeTest._Benchmark.benchmark_undeliverableUponCancel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybeTest._Benchmark.benchmark_undeliverableUponCancel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 20348.880 ops/s
# Warmup Iteration   2: 118501.496 ops/s
# Warmup Iteration   3: 177251.492 ops/s
# Warmup Iteration   4: 190370.063 ops/s
# Warmup Iteration   5: 182603.189 ops/s
# Warmup Iteration   6: 203838.176 ops/s
# Warmup Iteration   7: 205563.630 ops/s
# Warmup Iteration   8: 209031.438 ops/s
# Warmup Iteration   9: 205892.584 ops/s
# Warmup Iteration  10: 212499.818 ops/s
# Warmup Iteration  11: 205364.226 ops/s
# Warmup Iteration  12: 212498.845 ops/s
# Warmup Iteration  13: 198517.042 ops/s
# Warmup Iteration  14: 208708.254 ops/s
# Warmup Iteration  15: 213963.642 ops/s
# Warmup Iteration  16: 197821.606 ops/s
# Warmup Iteration  17: 217792.671 ops/s
# Warmup Iteration  18: 214608.196 ops/s
# Warmup Iteration  19: 214593.392 ops/s
# Warmup Iteration  20: 216410.311 ops/s
# Warmup Iteration  21: 211761.792 ops/s
# Warmup Iteration  22: 210279.628 ops/s
# Warmup Iteration  23: 214854.584 ops/s
# Warmup Iteration  24: 205423.894 ops/s
# Warmup Iteration  25: 163859.984 ops/s
# Warmup Iteration  26: 219120.690 ops/s
# Warmup Iteration  27: 201750.466 ops/s
# Warmup Iteration  28: 222093.917 ops/s
# Warmup Iteration  29: 215289.751 ops/s
# Warmup Iteration  30: 211757.320 ops/s
Iteration   1: 216836.589 ops/s
Iteration   2: 214856.210 ops/s
Iteration   3: 217780.149 ops/s
Iteration   4: 217217.227 ops/s
Iteration   5: 213919.381 ops/s
Iteration   6: 218022.779 ops/s
Iteration   7: 206870.887 ops/s
Iteration   8: 213962.902 ops/s
Iteration   9: 222440.911 ops/s
Iteration  10: 211491.393 ops/s
Iteration  11: 215828.002 ops/s
Iteration  12: 211081.027 ops/s
Iteration  13: 220215.415 ops/s
Iteration  14: 217418.830 ops/s
Iteration  15: 213915.147 ops/s
Iteration  16: 213455.009 ops/s
Iteration  17: 215636.902 ops/s
Iteration  18: 214437.295 ops/s
Iteration  19: 220003.049 ops/s
Iteration  20: 217281.168 ops/s
Iteration  21: 216917.108 ops/s
Iteration  22: 213127.047 ops/s
Iteration  23: 221940.396 ops/s
Iteration  24: 208825.384 ops/s
Iteration  25: 213987.758 ops/s
Iteration  26: 208285.928 ops/s
Iteration  27: 223421.960 ops/s
Iteration  28: 216041.796 ops/s
Iteration  29: 204456.628 ops/s
Iteration  30: 215556.898 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybeTest._Benchmark.benchmark_undeliverableUponCancel":
  215174.372 ±(99.9%) 2954.092 ops/s [Average]
  (min, avg, max) = (204456.628, 215174.372, 223421.960), stdev = 4421.547
  CI (99.9%): [212220.280, 218128.465] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score      Error  Units
ObservableConcatMapMaybeTest._Benchmark.benchmark_undeliverableUponCancel  thrpt   30  215174.372 ± 2954.092  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybeTest._Benchmark.benchmark_undeliverableUponCancelDelayErrorTillEnd$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybeTest._Benchmark.benchmark_undeliverableUponCancelDelayErrorTillEnd

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 21400.467 ops/s
# Warmup Iteration   2: 135374.502 ops/s
# Warmup Iteration   3: 177649.542 ops/s
# Warmup Iteration   4: 197733.056 ops/s
# Warmup Iteration   5: 181170.361 ops/s
# Warmup Iteration   6: 214467.737 ops/s
# Warmup Iteration   7: 198042.658 ops/s
# Warmup Iteration   8: 219856.328 ops/s
# Warmup Iteration   9: 213058.934 ops/s
# Warmup Iteration  10: 205012.114 ops/s
# Warmup Iteration  11: 204119.087 ops/s
# Warmup Iteration  12: 207859.778 ops/s
# Warmup Iteration  13: 208383.532 ops/s
# Warmup Iteration  14: 208370.437 ops/s
# Warmup Iteration  15: 202884.485 ops/s
# Warmup Iteration  16: 209033.964 ops/s
# Warmup Iteration  17: 210710.936 ops/s
# Warmup Iteration  18: 217436.713 ops/s
# Warmup Iteration  19: 209080.033 ops/s
# Warmup Iteration  20: 220840.966 ops/s
# Warmup Iteration  21: 216603.842 ops/s
# Warmup Iteration  22: 210508.562 ops/s
# Warmup Iteration  23: 221676.520 ops/s
# Warmup Iteration  24: 202687.173 ops/s
# Warmup Iteration  25: 215386.887 ops/s
# Warmup Iteration  26: 220158.371 ops/s
# Warmup Iteration  27: 210171.168 ops/s
# Warmup Iteration  28: 213153.425 ops/s
# Warmup Iteration  29: 220054.223 ops/s
# Warmup Iteration  30: 215297.404 ops/s
Iteration   1: 215820.627 ops/s
Iteration   2: 210110.316 ops/s
Iteration   3: 222312.333 ops/s
Iteration   4: 212630.022 ops/s
Iteration   5: 217295.461 ops/s
Iteration   6: 217152.576 ops/s
Iteration   7: 212075.280 ops/s
Iteration   8: 219718.895 ops/s
Iteration   9: 209766.407 ops/s
Iteration  10: 221654.534 ops/s
Iteration  11: 219655.882 ops/s
Iteration  12: 210919.800 ops/s
Iteration  13: 214762.066 ops/s
Iteration  14: 210332.610 ops/s
Iteration  15: 207712.964 ops/s
Iteration  16: 224471.654 ops/s
Iteration  17: 212861.605 ops/s
Iteration  18: 212709.301 ops/s
Iteration  19: 214410.103 ops/s
Iteration  20: 225991.051 ops/s
Iteration  21: 216776.264 ops/s
Iteration  22: 213221.580 ops/s
Iteration  23: 216980.182 ops/s
Iteration  24: 207519.384 ops/s
Iteration  25: 224324.660 ops/s
Iteration  26: 206630.718 ops/s
Iteration  27: 214323.137 ops/s
Iteration  28: 211745.959 ops/s
Iteration  29: 205586.656 ops/s
Iteration  30: 218693.317 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybeTest._Benchmark.benchmark_undeliverableUponCancelDelayErrorTillEnd":
  214938.845 ±(99.9%) 3651.820 ops/s [Average]
  (min, avg, max) = (205586.656, 214938.845, 225991.051), stdev = 5465.873
  CI (99.9%): [211287.024, 218590.665] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                    Mode  Cnt       Score      Error  Units
ObservableConcatMapMaybeTest._Benchmark.benchmark_undeliverableUponCancelDelayErrorTillEnd  thrpt   30  214938.845 ± 3651.820  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_arrayDelayErrorMaxConcurrency$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_arrayDelayErrorMaxConcurrency

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 110357.155 ops/s
# Warmup Iteration   2: 277229.838 ops/s
# Warmup Iteration   3: 740704.530 ops/s
# Warmup Iteration   4: 762005.628 ops/s
# Warmup Iteration   5: 950911.667 ops/s
# Warmup Iteration   6: 931851.389 ops/s
# Warmup Iteration   7: 939768.551 ops/s
# Warmup Iteration   8: 932783.911 ops/s
# Warmup Iteration   9: 925394.343 ops/s
# Warmup Iteration  10: 932519.513 ops/s
# Warmup Iteration  11: 910768.383 ops/s
# Warmup Iteration  12: 918999.816 ops/s
# Warmup Iteration  13: 956216.338 ops/s
# Warmup Iteration  14: 934684.082 ops/s
# Warmup Iteration  15: 951985.610 ops/s
# Warmup Iteration  16: 937333.349 ops/s
# Warmup Iteration  17: 948680.690 ops/s
# Warmup Iteration  18: 967198.442 ops/s
# Warmup Iteration  19: 895672.431 ops/s
# Warmup Iteration  20: 795976.109 ops/s
# Warmup Iteration  21: 916937.344 ops/s
# Warmup Iteration  22: 937234.263 ops/s
# Warmup Iteration  23: 940409.944 ops/s
# Warmup Iteration  24: 943805.049 ops/s
# Warmup Iteration  25: 949457.453 ops/s
# Warmup Iteration  26: 978569.427 ops/s
# Warmup Iteration  27: 955236.064 ops/s
# Warmup Iteration  28: 919498.914 ops/s
# Warmup Iteration  29: 971999.385 ops/s
# Warmup Iteration  30: 933602.123 ops/s
Iteration   1: 944058.545 ops/s
Iteration   2: 944836.151 ops/s
Iteration   3: 900596.889 ops/s
Iteration   4: 966020.008 ops/s
Iteration   5: 921598.869 ops/s
Iteration   6: 929423.960 ops/s
Iteration   7: 966442.513 ops/s
Iteration   8: 923476.682 ops/s
Iteration   9: 964305.560 ops/s
Iteration  10: 928472.257 ops/s
Iteration  11: 953661.146 ops/s
Iteration  12: 931933.560 ops/s
Iteration  13: 932037.126 ops/s
Iteration  14: 923042.217 ops/s
Iteration  15: 912588.492 ops/s
Iteration  16: 948206.631 ops/s
Iteration  17: 903429.296 ops/s
Iteration  18: 946698.291 ops/s
Iteration  19: 928478.977 ops/s
Iteration  20: 960982.730 ops/s
Iteration  21: 957614.388 ops/s
Iteration  22: 904073.426 ops/s
Iteration  23: 957036.960 ops/s
Iteration  24: 929947.550 ops/s
Iteration  25: 948600.248 ops/s
Iteration  26: 945206.027 ops/s
Iteration  27: 912456.528 ops/s
Iteration  28: 933987.299 ops/s
Iteration  29: 979369.527 ops/s
Iteration  30: 928941.013 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_arrayDelayErrorMaxConcurrency":
  937584.096 ±(99.9%) 13691.035 ops/s [Average]
  (min, avg, max) = (900596.889, 937584.096, 979369.527), stdev = 20492.098
  CI (99.9%): [923893.060, 951275.131] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt       Score       Error  Units
ObservableConcatMapEagerTest._Benchmark.benchmark_arrayDelayErrorMaxConcurrency  thrpt   30  937584.096 ± 13691.035  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithStartEndObservableTest._Benchmark.benchmark_windowAbandonmentCancelsUpstream$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithStartEndObservableTest._Benchmark.benchmark_windowAbandonmentCancelsUpstream

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 40394.469 ops/s
# Warmup Iteration   2: 220476.888 ops/s
# Warmup Iteration   3: 444872.188 ops/s
# Warmup Iteration   4: 745375.468 ops/s
# Warmup Iteration   5: 719843.943 ops/s
# Warmup Iteration   6: 755650.691 ops/s
# Warmup Iteration   7: 698362.495 ops/s
# Warmup Iteration   8: 695152.525 ops/s
# Warmup Iteration   9: 753567.189 ops/s
# Warmup Iteration  10: 810842.334 ops/s
# Warmup Iteration  11: 762467.557 ops/s
# Warmup Iteration  12: 722732.310 ops/s
# Warmup Iteration  13: 759760.134 ops/s
# Warmup Iteration  14: 754030.777 ops/s
# Warmup Iteration  15: 768461.860 ops/s
# Warmup Iteration  16: 772476.285 ops/s
# Warmup Iteration  17: 681821.171 ops/s
# Warmup Iteration  18: 790436.445 ops/s
# Warmup Iteration  19: 745934.944 ops/s
# Warmup Iteration  20: 778757.455 ops/s
# Warmup Iteration  21: 723361.341 ops/s
# Warmup Iteration  22: 750965.404 ops/s
# Warmup Iteration  23: 793009.348 ops/s
# Warmup Iteration  24: 707362.252 ops/s
# Warmup Iteration  25: 734531.036 ops/s
# Warmup Iteration  26: 767797.650 ops/s
# Warmup Iteration  27: 734252.756 ops/s
# Warmup Iteration  28: 779956.946 ops/s
# Warmup Iteration  29: 750710.477 ops/s
# Warmup Iteration  30: 754894.903 ops/s
Iteration   1: 783328.783 ops/s
Iteration   2: 742245.922 ops/s
Iteration   3: 790519.935 ops/s
Iteration   4: 792522.893 ops/s
Iteration   5: 738678.121 ops/s
Iteration   6: 795306.248 ops/s
Iteration   7: 738508.749 ops/s
Iteration   8: 788974.893 ops/s
Iteration   9: 766930.938 ops/s
Iteration  10: 739034.093 ops/s
Iteration  11: 757784.584 ops/s
Iteration  12: 728514.789 ops/s
Iteration  13: 769063.897 ops/s
Iteration  14: 796415.430 ops/s
Iteration  15: 730965.214 ops/s
Iteration  16: 754843.826 ops/s
Iteration  17: 778317.549 ops/s
Iteration  18: 779493.856 ops/s
Iteration  19: 713565.182 ops/s
Iteration  20: 773946.173 ops/s
Iteration  21: 733068.973 ops/s
Iteration  22: 778474.351 ops/s
Iteration  23: 766530.089 ops/s
Iteration  24: 780178.812 ops/s
Iteration  25: 782872.944 ops/s
Iteration  26: 734261.581 ops/s
Iteration  27: 756607.852 ops/s
Iteration  28: 739008.213 ops/s
Iteration  29: 750544.763 ops/s
Iteration  30: 751638.327 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithStartEndObservableTest._Benchmark.benchmark_windowAbandonmentCancelsUpstream":
  761071.566 ±(99.9%) 15672.665 ops/s [Average]
  (min, avg, max) = (713565.182, 761071.566, 796415.430), stdev = 23458.109
  CI (99.9%): [745398.901, 776744.231] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                          Mode  Cnt       Score       Error  Units
ObservableWindowWithStartEndObservableTest._Benchmark.benchmark_windowAbandonmentCancelsUpstream  thrpt   30  761071.566 ± 15672.665  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWithPredicateTest._Benchmark.benchmark_dontRetry$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWithPredicateTest._Benchmark.benchmark_dontRetry

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 166966.425 ops/s
# Warmup Iteration   2: 554280.418 ops/s
# Warmup Iteration   3: 629796.597 ops/s
# Warmup Iteration   4: 685703.548 ops/s
# Warmup Iteration   5: 594345.994 ops/s
# Warmup Iteration   6: 671609.436 ops/s
# Warmup Iteration   7: 678111.148 ops/s
# Warmup Iteration   8: 691678.996 ops/s
# Warmup Iteration   9: 686931.351 ops/s
# Warmup Iteration  10: 686510.059 ops/s
# Warmup Iteration  11: 702855.456 ops/s
# Warmup Iteration  12: 669838.339 ops/s
# Warmup Iteration  13: 708678.010 ops/s
# Warmup Iteration  14: 667013.606 ops/s
# Warmup Iteration  15: 599328.435 ops/s
# Warmup Iteration  16: 665437.403 ops/s
# Warmup Iteration  17: 707219.633 ops/s
# Warmup Iteration  18: 759011.995 ops/s
# Warmup Iteration  19: 719077.165 ops/s
# Warmup Iteration  20: 745739.517 ops/s
# Warmup Iteration  21: 702523.440 ops/s
# Warmup Iteration  22: 718867.146 ops/s
# Warmup Iteration  23: 726813.910 ops/s
# Warmup Iteration  24: 695299.834 ops/s
# Warmup Iteration  25: 728679.576 ops/s
# Warmup Iteration  26: 740472.521 ops/s
# Warmup Iteration  27: 709212.258 ops/s
# Warmup Iteration  28: 732934.036 ops/s
# Warmup Iteration  29: 723004.856 ops/s
# Warmup Iteration  30: 739278.376 ops/s
Iteration   1: 725166.322 ops/s
Iteration   2: 712968.117 ops/s
Iteration   3: 743781.108 ops/s
Iteration   4: 733469.986 ops/s
Iteration   5: 742306.956 ops/s
Iteration   6: 726461.191 ops/s
Iteration   7: 715124.056 ops/s
Iteration   8: 759877.045 ops/s
Iteration   9: 708541.659 ops/s
Iteration  10: 716227.215 ops/s
Iteration  11: 743451.834 ops/s
Iteration  12: 714125.694 ops/s
Iteration  13: 714824.282 ops/s
Iteration  14: 725601.473 ops/s
Iteration  15: 742254.146 ops/s
Iteration  16: 719531.005 ops/s
Iteration  17: 730125.164 ops/s
Iteration  18: 723408.770 ops/s
Iteration  19: 745347.304 ops/s
Iteration  20: 716708.712 ops/s
Iteration  21: 726179.553 ops/s
Iteration  22: 729106.506 ops/s
Iteration  23: 727257.902 ops/s
Iteration  24: 733653.948 ops/s
Iteration  25: 718964.863 ops/s
Iteration  26: 737604.262 ops/s
Iteration  27: 740580.944 ops/s
Iteration  28: 718861.768 ops/s
Iteration  29: 728877.099 ops/s
Iteration  30: 722903.402 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWithPredicateTest._Benchmark.benchmark_dontRetry":
  728109.743 ±(99.9%) 8076.463 ops/s [Average]
  (min, avg, max) = (708541.659, 728109.743, 759877.045), stdev = 12088.471
  CI (99.9%): [720033.280, 736186.206] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score      Error  Units
ObservableRetryWithPredicateTest._Benchmark.benchmark_dontRetry  thrpt   30  728109.743 ± 8076.463  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingleTest._Benchmark.benchmark_undeliverableUponCancelDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingleTest._Benchmark.benchmark_undeliverableUponCancelDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 25436.790 ops/s
# Warmup Iteration   2: 175880.424 ops/s
# Warmup Iteration   3: 182210.522 ops/s
# Warmup Iteration   4: 194180.842 ops/s
# Warmup Iteration   5: 214317.384 ops/s
# Warmup Iteration   6: 206293.651 ops/s
# Warmup Iteration   7: 215700.265 ops/s
# Warmup Iteration   8: 214739.286 ops/s
# Warmup Iteration   9: 220093.851 ops/s
# Warmup Iteration  10: 204199.580 ops/s
# Warmup Iteration  11: 215984.624 ops/s
# Warmup Iteration  12: 214892.934 ops/s
# Warmup Iteration  13: 217079.328 ops/s
# Warmup Iteration  14: 216393.133 ops/s
# Warmup Iteration  15: 208718.380 ops/s
# Warmup Iteration  16: 219426.915 ops/s
# Warmup Iteration  17: 215149.412 ops/s
# Warmup Iteration  18: 229793.289 ops/s
# Warmup Iteration  19: 226198.758 ops/s
# Warmup Iteration  20: 211095.530 ops/s
# Warmup Iteration  21: 224367.778 ops/s
# Warmup Iteration  22: 216543.839 ops/s
# Warmup Iteration  23: 226682.738 ops/s
# Warmup Iteration  24: 216712.924 ops/s
# Warmup Iteration  25: 220618.588 ops/s
# Warmup Iteration  26: 224434.866 ops/s
# Warmup Iteration  27: 215426.098 ops/s
# Warmup Iteration  28: 224600.760 ops/s
# Warmup Iteration  29: 220613.617 ops/s
# Warmup Iteration  30: 217985.812 ops/s
Iteration   1: 217732.763 ops/s
Iteration   2: 222516.418 ops/s
Iteration   3: 219684.166 ops/s
Iteration   4: 209043.754 ops/s
Iteration   5: 220803.326 ops/s
Iteration   6: 217641.539 ops/s
Iteration   7: 228685.069 ops/s
Iteration   8: 215042.279 ops/s
Iteration   9: 222790.914 ops/s
Iteration  10: 233176.375 ops/s
Iteration  11: 210892.529 ops/s
Iteration  12: 226086.596 ops/s
Iteration  13: 220369.180 ops/s
Iteration  14: 226881.756 ops/s
Iteration  15: 220835.198 ops/s
Iteration  16: 221373.335 ops/s
Iteration  17: 222813.702 ops/s
Iteration  18: 221026.504 ops/s
Iteration  19: 220895.152 ops/s
Iteration  20: 228066.761 ops/s
Iteration  21: 221305.401 ops/s
Iteration  22: 217240.626 ops/s
Iteration  23: 222345.687 ops/s
Iteration  24: 223875.520 ops/s
Iteration  25: 228219.617 ops/s
Iteration  26: 219456.959 ops/s
Iteration  27: 222657.992 ops/s
Iteration  28: 216593.661 ops/s
Iteration  29: 225239.603 ops/s
Iteration  30: 222107.625 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingleTest._Benchmark.benchmark_undeliverableUponCancelDelayError":
  221513.334 ±(99.9%) 3383.386 ops/s [Average]
  (min, avg, max) = (209043.754, 221513.334, 233176.375), stdev = 5064.093
  CI (99.9%): [218129.948, 224896.719] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              Mode  Cnt       Score      Error  Units
ObservableConcatMapSingleTest._Benchmark.benchmark_undeliverableUponCancelDelayError  thrpt   30  221513.334 ± 3383.386  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableScalarXMapTest._Benchmark.benchmark_scalarMapToEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableScalarXMapTest._Benchmark.benchmark_scalarMapToEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2324315.989 ops/s
# Warmup Iteration   2: 6347956.281 ops/s
# Warmup Iteration   3: 8816406.242 ops/s
# Warmup Iteration   4: 8718200.612 ops/s
# Warmup Iteration   5: 9198082.135 ops/s
# Warmup Iteration   6: 8734361.450 ops/s
# Warmup Iteration   7: 9154392.714 ops/s
# Warmup Iteration   8: 9020490.590 ops/s
# Warmup Iteration   9: 7484348.334 ops/s
# Warmup Iteration  10: 8988532.166 ops/s
# Warmup Iteration  11: 8897893.239 ops/s
# Warmup Iteration  12: 9131894.049 ops/s
# Warmup Iteration  13: 8759855.892 ops/s
# Warmup Iteration  14: 8872803.003 ops/s
# Warmup Iteration  15: 9238200.978 ops/s
# Warmup Iteration  16: 9426032.234 ops/s
# Warmup Iteration  17: 8912028.563 ops/s
# Warmup Iteration  18: 8961942.669 ops/s
# Warmup Iteration  19: 9203989.988 ops/s
# Warmup Iteration  20: 9341185.919 ops/s
# Warmup Iteration  21: 8693333.961 ops/s
# Warmup Iteration  22: 8869395.323 ops/s
# Warmup Iteration  23: 9121887.865 ops/s
# Warmup Iteration  24: 8863317.677 ops/s
# Warmup Iteration  25: 9133019.308 ops/s
# Warmup Iteration  26: 9069205.589 ops/s
# Warmup Iteration  27: 9091477.921 ops/s
# Warmup Iteration  28: 9094888.914 ops/s
# Warmup Iteration  29: 8951251.507 ops/s
# Warmup Iteration  30: 9108516.746 ops/s
Iteration   1: 9047607.716 ops/s
Iteration   2: 9147623.390 ops/s
Iteration   3: 9289673.767 ops/s
Iteration   4: 8779570.482 ops/s
Iteration   5: 9374941.168 ops/s
Iteration   6: 8859049.390 ops/s
Iteration   7: 9235728.059 ops/s
Iteration   8: 8901551.748 ops/s
Iteration   9: 9047207.797 ops/s
Iteration  10: 9249489.484 ops/s
Iteration  11: 9166882.429 ops/s
Iteration  12: 9139435.874 ops/s
Iteration  13: 8850968.471 ops/s
Iteration  14: 8934789.978 ops/s
Iteration  15: 8967061.773 ops/s
Iteration  16: 8905957.488 ops/s
Iteration  17: 9405813.666 ops/s
Iteration  18: 9068254.050 ops/s
Iteration  19: 9201085.142 ops/s
Iteration  20: 8896669.466 ops/s
Iteration  21: 9085835.795 ops/s
Iteration  22: 9186629.343 ops/s
Iteration  23: 9047894.207 ops/s
Iteration  24: 9160980.304 ops/s
Iteration  25: 8775179.397 ops/s
Iteration  26: 9308787.148 ops/s
Iteration  27: 8862974.072 ops/s
Iteration  28: 9035724.088 ops/s
Iteration  29: 8998179.420 ops/s
Iteration  30: 9035967.888 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableScalarXMapTest._Benchmark.benchmark_scalarMapToEmpty":
  9065583.767 ±(99.9%) 115019.653 ops/s [Average]
  (min, avg, max) = (8775179.397, 9065583.767, 9405813.666), stdev = 172156.014
  CI (99.9%): [8950564.114, 9180603.419] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score        Error  Units
FlowableScalarXMapTest._Benchmark.benchmark_scalarMapToEmpty  thrpt   30  9065583.767 ± 115019.653  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchIfEmptyTest._Benchmark.benchmark_switchWithProducer$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchIfEmptyTest._Benchmark.benchmark_switchWithProducer

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 849926.404 ops/s
# Warmup Iteration   2: 3293468.090 ops/s
# Warmup Iteration   3: 3672433.279 ops/s
# Warmup Iteration   4: 4154316.285 ops/s
# Warmup Iteration   5: 4432828.083 ops/s
# Warmup Iteration   6: 4412232.613 ops/s
# Warmup Iteration   7: 4240564.026 ops/s
# Warmup Iteration   8: 4345214.293 ops/s
# Warmup Iteration   9: 4235228.287 ops/s
# Warmup Iteration  10: 4252429.228 ops/s
# Warmup Iteration  11: 4380721.303 ops/s
# Warmup Iteration  12: 4178079.380 ops/s
# Warmup Iteration  13: 4236830.073 ops/s
# Warmup Iteration  14: 4299694.045 ops/s
# Warmup Iteration  15: 4320083.369 ops/s
# Warmup Iteration  16: 4511593.154 ops/s
# Warmup Iteration  17: 4081955.622 ops/s
# Warmup Iteration  18: 4488216.405 ops/s
# Warmup Iteration  19: 4233195.433 ops/s
# Warmup Iteration  20: 4257528.483 ops/s
# Warmup Iteration  21: 4485552.258 ops/s
# Warmup Iteration  22: 4242672.773 ops/s
# Warmup Iteration  23: 4364377.741 ops/s
# Warmup Iteration  24: 4317585.571 ops/s
# Warmup Iteration  25: 4183352.337 ops/s
# Warmup Iteration  26: 4451439.602 ops/s
# Warmup Iteration  27: 4303441.129 ops/s
# Warmup Iteration  28: 4248117.734 ops/s
# Warmup Iteration  29: 4445555.876 ops/s
# Warmup Iteration  30: 4301802.757 ops/s
Iteration   1: 4380789.049 ops/s
Iteration   2: 4211370.963 ops/s
Iteration   3: 4431778.280 ops/s
Iteration   4: 4325062.808 ops/s
Iteration   5: 4237063.245 ops/s
Iteration   6: 4297574.497 ops/s
Iteration   7: 4421345.594 ops/s
Iteration   8: 4188128.375 ops/s
Iteration   9: 4368635.651 ops/s
Iteration  10: 4193793.276 ops/s
Iteration  11: 4334616.127 ops/s
Iteration  12: 4477838.179 ops/s
Iteration  13: 4183888.856 ops/s
Iteration  14: 4339207.272 ops/s
Iteration  15: 4403323.218 ops/s
Iteration  16: 4274446.582 ops/s
Iteration  17: 4368873.322 ops/s
Iteration  18: 4142511.481 ops/s
Iteration  19: 4409537.918 ops/s
Iteration  20: 4301842.045 ops/s
Iteration  21: 4304424.837 ops/s
Iteration  22: 4272162.494 ops/s
Iteration  23: 4435465.352 ops/s
Iteration  24: 4349844.927 ops/s
Iteration  25: 4196967.086 ops/s
Iteration  26: 4420691.694 ops/s
Iteration  27: 4268180.795 ops/s
Iteration  28: 4307521.039 ops/s
Iteration  29: 4462224.225 ops/s
Iteration  30: 4265218.656 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchIfEmptyTest._Benchmark.benchmark_switchWithProducer":
  4319144.261 ±(99.9%) 61372.447 ops/s [Average]
  (min, avg, max) = (4142511.481, 4319144.261, 4477838.179), stdev = 91859.396
  CI (99.9%): [4257771.815, 4380516.708] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
FlowableSwitchIfEmptyTest._Benchmark.benchmark_switchWithProducer  thrpt   30  4319144.261 ± 61372.447  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 197360.652 ops/s
# Warmup Iteration   2: 795927.203 ops/s
# Warmup Iteration   3: 1132250.887 ops/s
# Warmup Iteration   4: 1234479.730 ops/s
# Warmup Iteration   5: 1475017.273 ops/s
# Warmup Iteration   6: 1493101.017 ops/s
# Warmup Iteration   7: 1516361.958 ops/s
# Warmup Iteration   8: 1443859.313 ops/s
# Warmup Iteration   9: 1501493.049 ops/s
# Warmup Iteration  10: 1485821.812 ops/s
# Warmup Iteration  11: 1469654.479 ops/s
# Warmup Iteration  12: 1477917.965 ops/s
# Warmup Iteration  13: 1545681.327 ops/s
# Warmup Iteration  14: 1475957.860 ops/s
# Warmup Iteration  15: 1560830.025 ops/s
# Warmup Iteration  16: 1448441.677 ops/s
# Warmup Iteration  17: 1492299.601 ops/s
# Warmup Iteration  18: 1516810.663 ops/s
# Warmup Iteration  19: 1465907.603 ops/s
# Warmup Iteration  20: 1534336.420 ops/s
# Warmup Iteration  21: 1505313.972 ops/s
# Warmup Iteration  22: 1494426.453 ops/s
# Warmup Iteration  23: 1518977.379 ops/s
# Warmup Iteration  24: 1532964.634 ops/s
# Warmup Iteration  25: 1453577.139 ops/s
# Warmup Iteration  26: 1526632.508 ops/s
# Warmup Iteration  27: 1460209.111 ops/s
# Warmup Iteration  28: 1474882.733 ops/s
# Warmup Iteration  29: 1523551.692 ops/s
# Warmup Iteration  30: 1420796.693 ops/s
Iteration   1: 1535376.729 ops/s
Iteration   2: 1502790.544 ops/s
Iteration   3: 1478216.127 ops/s
Iteration   4: 1479053.178 ops/s
Iteration   5: 1491533.785 ops/s
Iteration   6: 1515444.544 ops/s
Iteration   7: 1527103.164 ops/s
Iteration   8: 1471416.395 ops/s
Iteration   9: 1512599.690 ops/s
Iteration  10: 1459527.764 ops/s
Iteration  11: 1460560.962 ops/s
Iteration  12: 1487346.540 ops/s
Iteration  13: 1468327.830 ops/s
Iteration  14: 1504122.357 ops/s
Iteration  15: 1512938.024 ops/s
Iteration  16: 1495094.037 ops/s
Iteration  17: 1538289.087 ops/s
Iteration  18: 1485349.203 ops/s
Iteration  19: 1465796.071 ops/s
Iteration  20: 1497663.210 ops/s
Iteration  21: 1429878.183 ops/s
Iteration  22: 1483158.359 ops/s
Iteration  23: 1519019.757 ops/s
Iteration  24: 1454999.852 ops/s
Iteration  25: 1493072.187 ops/s
Iteration  26: 1437318.024 ops/s
Iteration  27: 1511254.688 ops/s
Iteration  28: 1447587.360 ops/s
Iteration  29: 1489792.369 ops/s
Iteration  30: 1506605.463 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_dispose":
  1488707.849 ±(99.9%) 18558.082 ops/s [Average]
  (min, avg, max) = (1429878.183, 1488707.849, 1538289.087), stdev = 27776.866
  CI (99.9%): [1470149.767, 1507265.932] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score       Error  Units
FlowableConcatTest._Benchmark.benchmark_dispose  thrpt   30  1488707.849 ± 18558.082  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_error$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_error

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 181041.479 ops/s
# Warmup Iteration   2: 521880.699 ops/s
# Warmup Iteration   3: 654792.747 ops/s
# Warmup Iteration   4: 619530.033 ops/s
# Warmup Iteration   5: 661860.923 ops/s
# Warmup Iteration   6: 594606.248 ops/s
# Warmup Iteration   7: 612260.205 ops/s
# Warmup Iteration   8: 656160.855 ops/s
# Warmup Iteration   9: 619133.546 ops/s
# Warmup Iteration  10: 622943.605 ops/s
# Warmup Iteration  11: 606879.854 ops/s
# Warmup Iteration  12: 645092.920 ops/s
# Warmup Iteration  13: 666566.863 ops/s
# Warmup Iteration  14: 646123.548 ops/s
# Warmup Iteration  15: 662242.082 ops/s
# Warmup Iteration  16: 644686.649 ops/s
# Warmup Iteration  17: 698740.406 ops/s
# Warmup Iteration  18: 683733.862 ops/s
# Warmup Iteration  19: 681934.106 ops/s
# Warmup Iteration  20: 709794.596 ops/s
# Warmup Iteration  21: 659565.059 ops/s
# Warmup Iteration  22: 699279.019 ops/s
# Warmup Iteration  23: 690744.334 ops/s
# Warmup Iteration  24: 674858.008 ops/s
# Warmup Iteration  25: 704150.481 ops/s
# Warmup Iteration  26: 667453.809 ops/s
# Warmup Iteration  27: 683600.913 ops/s
# Warmup Iteration  28: 688770.671 ops/s
# Warmup Iteration  29: 697826.515 ops/s
# Warmup Iteration  30: 683782.881 ops/s
Iteration   1: 682848.499 ops/s
Iteration   2: 688340.809 ops/s
Iteration   3: 670201.911 ops/s
Iteration   4: 699936.378 ops/s
Iteration   5: 672495.654 ops/s
Iteration   6: 693544.771 ops/s
Iteration   7: 668613.249 ops/s
Iteration   8: 697692.689 ops/s
Iteration   9: 676843.864 ops/s
Iteration  10: 674558.961 ops/s
Iteration  11: 715149.674 ops/s
Iteration  12: 667648.808 ops/s
Iteration  13: 683617.820 ops/s
Iteration  14: 693637.278 ops/s
Iteration  15: 677315.139 ops/s
Iteration  16: 688534.716 ops/s
Iteration  17: 696654.729 ops/s
Iteration  18: 695897.571 ops/s
Iteration  19: 686853.100 ops/s
Iteration  20: 707661.271 ops/s
Iteration  21: 675257.043 ops/s
Iteration  22: 702575.307 ops/s
Iteration  23: 681457.169 ops/s
Iteration  24: 701633.957 ops/s
Iteration  25: 691033.680 ops/s
Iteration  26: 655118.864 ops/s
Iteration  27: 696048.549 ops/s
Iteration  28: 687468.999 ops/s
Iteration  29: 710513.529 ops/s
Iteration  30: 666663.202 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_error":
  686860.573 ±(99.9%) 9654.758 ops/s [Average]
  (min, avg, max) = (655118.864, 686860.573, 715149.674), stdev = 14450.789
  CI (99.9%): [677205.815, 696515.331] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt       Score      Error  Units
FlowableConcatTest._Benchmark.benchmark_error  thrpt   30  686860.573 ± 9654.758  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapTest._Benchmark.benchmark_pollThrowsDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapTest._Benchmark.benchmark_pollThrowsDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 66181.098 ops/s
# Warmup Iteration   2: 309101.085 ops/s
# Warmup Iteration   3: 379570.590 ops/s
# Warmup Iteration   4: 383876.633 ops/s
# Warmup Iteration   5: 395609.550 ops/s
# Warmup Iteration   6: 377145.776 ops/s
# Warmup Iteration   7: 354128.896 ops/s
# Warmup Iteration   8: 397879.204 ops/s
# Warmup Iteration   9: 353738.999 ops/s
# Warmup Iteration  10: 392622.999 ops/s
# Warmup Iteration  11: 402497.984 ops/s
# Warmup Iteration  12: 408247.191 ops/s
# Warmup Iteration  13: 395506.357 ops/s
# Warmup Iteration  14: 397009.261 ops/s
# Warmup Iteration  15: 404351.388 ops/s
# Warmup Iteration  16: 402002.129 ops/s
# Warmup Iteration  17: 398909.145 ops/s
# Warmup Iteration  18: 411096.891 ops/s
# Warmup Iteration  19: 410526.374 ops/s
# Warmup Iteration  20: 419312.333 ops/s
# Warmup Iteration  21: 404599.926 ops/s
# Warmup Iteration  22: 415098.807 ops/s
# Warmup Iteration  23: 408262.455 ops/s
# Warmup Iteration  24: 395006.827 ops/s
# Warmup Iteration  25: 403090.600 ops/s
# Warmup Iteration  26: 419160.624 ops/s
# Warmup Iteration  27: 412838.985 ops/s
# Warmup Iteration  28: 405778.902 ops/s
# Warmup Iteration  29: 408495.599 ops/s
# Warmup Iteration  30: 413520.499 ops/s
Iteration   1: 424037.917 ops/s
Iteration   2: 413221.070 ops/s
Iteration   3: 401628.344 ops/s
Iteration   4: 419661.734 ops/s
Iteration   5: 416744.101 ops/s
Iteration   6: 392592.940 ops/s
Iteration   7: 406767.131 ops/s
Iteration   8: 407693.674 ops/s
Iteration   9: 420785.779 ops/s
Iteration  10: 403299.271 ops/s
Iteration  11: 411757.760 ops/s
Iteration  12: 412618.321 ops/s
Iteration  13: 403112.228 ops/s
Iteration  14: 420751.065 ops/s
Iteration  15: 392906.209 ops/s
Iteration  16: 409745.868 ops/s
Iteration  17: 424725.613 ops/s
Iteration  18: 401226.964 ops/s
Iteration  19: 415879.795 ops/s
Iteration  20: 427050.968 ops/s
Iteration  21: 404511.069 ops/s
Iteration  22: 416574.643 ops/s
Iteration  23: 414165.926 ops/s
Iteration  24: 408612.928 ops/s
Iteration  25: 417654.851 ops/s
Iteration  26: 397753.479 ops/s
Iteration  27: 427669.800 ops/s
Iteration  28: 400013.858 ops/s
Iteration  29: 401240.279 ops/s
Iteration  30: 414525.876 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapTest._Benchmark.benchmark_pollThrowsDelayError":
  410964.315 ±(99.9%) 6521.628 ops/s [Average]
  (min, avg, max) = (392592.940, 410964.315, 427669.800), stdev = 9761.266
  CI (99.9%): [404442.688, 417485.943] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score      Error  Units
FlowableConcatMapTest._Benchmark.benchmark_pollThrowsDelayError  thrpt   30  410964.315 ± 6521.628  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchIfEmptyTest._Benchmark.benchmark_switchShouldNotTriggerUnsubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchIfEmptyTest._Benchmark.benchmark_switchShouldNotTriggerUnsubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1650740.799 ops/s
# Warmup Iteration   2: 4832153.936 ops/s
# Warmup Iteration   3: 5343648.978 ops/s
# Warmup Iteration   4: 6379955.356 ops/s
# Warmup Iteration   5: 5958008.365 ops/s
# Warmup Iteration   6: 6383421.461 ops/s
# Warmup Iteration   7: 6222287.375 ops/s
# Warmup Iteration   8: 6148204.730 ops/s
# Warmup Iteration   9: 6191616.238 ops/s
# Warmup Iteration  10: 6103364.389 ops/s
# Warmup Iteration  11: 6127304.399 ops/s
# Warmup Iteration  12: 6120541.814 ops/s
# Warmup Iteration  13: 6305200.771 ops/s
# Warmup Iteration  14: 6231124.374 ops/s
# Warmup Iteration  15: 6384511.171 ops/s
# Warmup Iteration  16: 6301894.711 ops/s
# Warmup Iteration  17: 6073756.053 ops/s
# Warmup Iteration  18: 6385007.670 ops/s
# Warmup Iteration  19: 6542548.248 ops/s
# Warmup Iteration  20: 6435344.989 ops/s
# Warmup Iteration  21: 6039524.241 ops/s
# Warmup Iteration  22: 6316844.817 ops/s
# Warmup Iteration  23: 6266319.046 ops/s
# Warmup Iteration  24: 6112699.659 ops/s
# Warmup Iteration  25: 6350933.927 ops/s
# Warmup Iteration  26: 5996964.650 ops/s
# Warmup Iteration  27: 6188849.646 ops/s
# Warmup Iteration  28: 6511903.768 ops/s
# Warmup Iteration  29: 5915397.365 ops/s
# Warmup Iteration  30: 6423238.132 ops/s
Iteration   1: 6085768.839 ops/s
Iteration   2: 6169695.267 ops/s
Iteration   3: 6151636.170 ops/s
Iteration   4: 6241379.117 ops/s
Iteration   5: 6096832.903 ops/s
Iteration   6: 6103511.366 ops/s
Iteration   7: 6353682.316 ops/s
Iteration   8: 6075253.719 ops/s
Iteration   9: 6351561.658 ops/s
Iteration  10: 6024417.025 ops/s
Iteration  11: 6303663.676 ops/s
Iteration  12: 6167340.528 ops/s
Iteration  13: 6054861.248 ops/s
Iteration  14: 6170826.959 ops/s
Iteration  15: 6025453.997 ops/s
Iteration  16: 6267929.012 ops/s
Iteration  17: 6100433.775 ops/s
Iteration  18: 6190310.058 ops/s
Iteration  19: 6436711.456 ops/s
Iteration  20: 6009370.924 ops/s
Iteration  21: 6228815.617 ops/s
Iteration  22: 6007471.435 ops/s
Iteration  23: 6222642.866 ops/s
Iteration  24: 6287006.796 ops/s
Iteration  25: 6095605.767 ops/s
Iteration  26: 5213522.066 ops/s
Iteration  27: 6158120.930 ops/s
Iteration  28: 6063894.557 ops/s
Iteration  29: 6440263.743 ops/s
Iteration  30: 6138300.938 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchIfEmptyTest._Benchmark.benchmark_switchShouldNotTriggerUnsubscribe":
  6141209.491 ±(99.9%) 142014.605 ops/s [Average]
  (min, avg, max) = (5213522.066, 6141209.491, 6440263.743), stdev = 212560.792
  CI (99.9%): [5999194.886, 6283224.096] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt        Score        Error  Units
FlowableSwitchIfEmptyTest._Benchmark.benchmark_switchShouldNotTriggerUnsubscribe  thrpt   30  6141209.491 ± 142014.605  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchIfEmptyTest._Benchmark.benchmark_backpressureOnFirstObservable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchIfEmptyTest._Benchmark.benchmark_backpressureOnFirstObservable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1222490.606 ops/s
# Warmup Iteration   2: 3592962.170 ops/s
# Warmup Iteration   3: 5058294.592 ops/s
# Warmup Iteration   4: 4846311.532 ops/s
# Warmup Iteration   5: 5127536.638 ops/s
# Warmup Iteration   6: 4903710.270 ops/s
# Warmup Iteration   7: 4952773.524 ops/s
# Warmup Iteration   8: 5075726.966 ops/s
# Warmup Iteration   9: 5044562.876 ops/s
# Warmup Iteration  10: 4996771.760 ops/s
# Warmup Iteration  11: 5069232.765 ops/s
# Warmup Iteration  12: 4920326.828 ops/s
# Warmup Iteration  13: 5124857.915 ops/s
# Warmup Iteration  14: 4855332.544 ops/s
# Warmup Iteration  15: 5269341.038 ops/s
# Warmup Iteration  16: 5170015.843 ops/s
# Warmup Iteration  17: 4957480.321 ops/s
# Warmup Iteration  18: 5281534.001 ops/s
# Warmup Iteration  19: 5140002.842 ops/s
# Warmup Iteration  20: 5025113.702 ops/s
# Warmup Iteration  21: 5131246.960 ops/s
# Warmup Iteration  22: 4967070.146 ops/s
# Warmup Iteration  23: 5071634.413 ops/s
# Warmup Iteration  24: 5128962.573 ops/s
# Warmup Iteration  25: 5004285.764 ops/s
# Warmup Iteration  26: 4957593.931 ops/s
# Warmup Iteration  27: 5013359.686 ops/s
# Warmup Iteration  28: 5159184.809 ops/s
# Warmup Iteration  29: 4933799.015 ops/s
# Warmup Iteration  30: 5262096.266 ops/s
Iteration   1: 4928260.079 ops/s
Iteration   2: 5206558.060 ops/s
Iteration   3: 5020382.673 ops/s
Iteration   4: 5038179.810 ops/s
Iteration   5: 5041662.564 ops/s
Iteration   6: 4967380.039 ops/s
Iteration   7: 5256834.560 ops/s
Iteration   8: 4863195.830 ops/s
Iteration   9: 5296958.442 ops/s
Iteration  10: 4983728.308 ops/s
Iteration  11: 4950655.839 ops/s
Iteration  12: 5257228.954 ops/s
Iteration  13: 4943417.432 ops/s
Iteration  14: 5204082.355 ops/s
Iteration  15: 5117642.135 ops/s
Iteration  16: 4876889.448 ops/s
Iteration  17: 5155902.432 ops/s
Iteration  18: 4955860.852 ops/s
Iteration  19: 5340944.399 ops/s
Iteration  20: 5067127.699 ops/s
Iteration  21: 5091054.438 ops/s
Iteration  22: 5104305.566 ops/s
Iteration  23: 5033195.666 ops/s
Iteration  24: 5103454.942 ops/s
Iteration  25: 5060764.314 ops/s
Iteration  26: 4975742.784 ops/s
Iteration  27: 4994278.331 ops/s
Iteration  28: 5091977.418 ops/s
Iteration  29: 5186305.784 ops/s
Iteration  30: 5175230.991 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchIfEmptyTest._Benchmark.benchmark_backpressureOnFirstObservable":
  5076306.738 ±(99.9%) 83183.910 ops/s [Average]
  (min, avg, max) = (4863195.830, 5076306.738, 5340944.399), stdev = 124505.770
  CI (99.9%): [4993122.828, 5159490.649] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score       Error  Units
FlowableSwitchIfEmptyTest._Benchmark.benchmark_backpressureOnFirstObservable  thrpt   30  5076306.738 ± 83183.910  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrDefaultTest._Benchmark.benchmark_firstEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrDefaultTest._Benchmark.benchmark_firstEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 5859143.972 ops/s
# Warmup Iteration   2: 11884168.451 ops/s
# Warmup Iteration   3: 15734615.585 ops/s
# Warmup Iteration   4: 16644155.388 ops/s
# Warmup Iteration   5: 17924871.381 ops/s
# Warmup Iteration   6: 17486131.986 ops/s
# Warmup Iteration   7: 16819722.370 ops/s
# Warmup Iteration   8: 17482955.170 ops/s
# Warmup Iteration   9: 16777482.008 ops/s
# Warmup Iteration  10: 16397890.172 ops/s
# Warmup Iteration  11: 17771485.225 ops/s
# Warmup Iteration  12: 17767139.042 ops/s
# Warmup Iteration  13: 16618797.826 ops/s
# Warmup Iteration  14: 17802244.712 ops/s
# Warmup Iteration  15: 17277074.855 ops/s
# Warmup Iteration  16: 17301718.954 ops/s
# Warmup Iteration  17: 17377312.759 ops/s
# Warmup Iteration  18: 16606653.800 ops/s
# Warmup Iteration  19: 17482447.453 ops/s
# Warmup Iteration  20: 16994739.256 ops/s
# Warmup Iteration  21: 17685280.628 ops/s
# Warmup Iteration  22: 16471649.194 ops/s
# Warmup Iteration  23: 16877834.329 ops/s
# Warmup Iteration  24: 17732429.703 ops/s
# Warmup Iteration  25: 16568569.764 ops/s
# Warmup Iteration  26: 17492840.119 ops/s
# Warmup Iteration  27: 16910387.853 ops/s
# Warmup Iteration  28: 17688759.493 ops/s
# Warmup Iteration  29: 17218039.155 ops/s
# Warmup Iteration  30: 17577658.216 ops/s
Iteration   1: 17207256.174 ops/s
Iteration   2: 17162387.387 ops/s
Iteration   3: 17451095.513 ops/s
Iteration   4: 16911672.412 ops/s
Iteration   5: 16901899.308 ops/s
Iteration   6: 17253066.671 ops/s
Iteration   7: 16633892.963 ops/s
Iteration   8: 17358378.710 ops/s
Iteration   9: 17518345.308 ops/s
Iteration  10: 17161042.754 ops/s
Iteration  11: 17484390.350 ops/s
Iteration  12: 17133452.037 ops/s
Iteration  13: 17704581.809 ops/s
Iteration  14: 17067287.040 ops/s
Iteration  15: 16800975.927 ops/s
Iteration  16: 17455348.850 ops/s
Iteration  17: 17294604.188 ops/s
Iteration  18: 17647626.056 ops/s
Iteration  19: 17304091.653 ops/s
Iteration  20: 13545261.570 ops/s
Iteration  21: 17762740.765 ops/s
Iteration  22: 16436454.135 ops/s
Iteration  23: 17356643.387 ops/s
Iteration  24: 17159282.870 ops/s
Iteration  25: 17183243.939 ops/s
Iteration  26: 16876776.518 ops/s
Iteration  27: 17285188.478 ops/s
Iteration  28: 17802173.020 ops/s
Iteration  29: 15923945.028 ops/s
Iteration  30: 17572561.053 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrDefaultTest._Benchmark.benchmark_firstEmpty":
  17078522.196 ±(99.9%) 520067.720 ops/s [Average]
  (min, avg, max) = (13545261.570, 17078522.196, 17802173.020), stdev = 778412.939
  CI (99.9%): [16558454.476, 17598589.916] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt         Score        Error  Units
FlowableStageSubscriberOrDefaultTest._Benchmark.benchmark_firstEmpty  thrpt   30  17078522.196 ± 520067.720  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_concatMapDelayErrorWithError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_concatMapDelayErrorWithError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 48319.745 ops/s
# Warmup Iteration   2: 210613.609 ops/s
# Warmup Iteration   3: 444704.734 ops/s
# Warmup Iteration   4: 474960.751 ops/s
# Warmup Iteration   5: 482821.304 ops/s
# Warmup Iteration   6: 474420.607 ops/s
# Warmup Iteration   7: 482190.866 ops/s
# Warmup Iteration   8: 470852.163 ops/s
# Warmup Iteration   9: 463134.504 ops/s
# Warmup Iteration  10: 490344.988 ops/s
# Warmup Iteration  11: 456726.974 ops/s
# Warmup Iteration  12: 491801.578 ops/s
# Warmup Iteration  13: 486178.825 ops/s
# Warmup Iteration  14: 464605.222 ops/s
# Warmup Iteration  15: 481183.824 ops/s
# Warmup Iteration  16: 462599.575 ops/s
# Warmup Iteration  17: 494103.812 ops/s
# Warmup Iteration  18: 509262.854 ops/s
# Warmup Iteration  19: 487276.421 ops/s
# Warmup Iteration  20: 479978.731 ops/s
# Warmup Iteration  21: 524192.128 ops/s
# Warmup Iteration  22: 484764.584 ops/s
# Warmup Iteration  23: 511129.175 ops/s
# Warmup Iteration  24: 486250.572 ops/s
# Warmup Iteration  25: 501880.325 ops/s
# Warmup Iteration  26: 500127.312 ops/s
# Warmup Iteration  27: 493260.911 ops/s
# Warmup Iteration  28: 509741.474 ops/s
# Warmup Iteration  29: 474518.070 ops/s
# Warmup Iteration  30: 495197.096 ops/s
Iteration   1: 495746.366 ops/s
Iteration   2: 493186.152 ops/s
Iteration   3: 523960.477 ops/s
Iteration   4: 492493.527 ops/s
Iteration   5: 501959.660 ops/s
Iteration   6: 498949.673 ops/s
Iteration   7: 486381.772 ops/s
Iteration   8: 511341.548 ops/s
Iteration   9: 495367.493 ops/s
Iteration  10: 504326.766 ops/s
Iteration  11: 501339.659 ops/s
Iteration  12: 520878.056 ops/s
Iteration  13: 494098.760 ops/s
Iteration  14: 479711.594 ops/s
Iteration  15: 510385.292 ops/s
Iteration  16: 518673.863 ops/s
Iteration  17: 466813.536 ops/s
Iteration  18: 501186.268 ops/s
Iteration  19: 487224.743 ops/s
Iteration  20: 495314.934 ops/s
Iteration  21: 507602.502 ops/s
Iteration  22: 498773.724 ops/s
Iteration  23: 509192.122 ops/s
Iteration  24: 487264.478 ops/s
Iteration  25: 527075.236 ops/s
Iteration  26: 485234.292 ops/s
Iteration  27: 516295.596 ops/s
Iteration  28: 493651.591 ops/s
Iteration  29: 504357.583 ops/s
Iteration  30: 492966.932 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_concatMapDelayErrorWithError":
  500058.473 ±(99.9%) 9044.085 ops/s [Average]
  (min, avg, max) = (466813.536, 500058.473, 527075.236), stdev = 13536.762
  CI (99.9%): [491014.388, 509102.558] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score      Error  Units
FlowableConcatTest._Benchmark.benchmark_concatMapDelayErrorWithError  thrpt   30  500058.473 ± 9044.085  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_concatObservableDelayErrorTillEnd$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_concatObservableDelayErrorTillEnd

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 75061.228 ops/s
# Warmup Iteration   2: 176881.509 ops/s
# Warmup Iteration   3: 415349.389 ops/s
# Warmup Iteration   4: 413272.385 ops/s
# Warmup Iteration   5: 453279.647 ops/s
# Warmup Iteration   6: 393509.442 ops/s
# Warmup Iteration   7: 442654.616 ops/s
# Warmup Iteration   8: 449101.399 ops/s
# Warmup Iteration   9: 440268.102 ops/s
# Warmup Iteration  10: 442005.030 ops/s
# Warmup Iteration  11: 416326.816 ops/s
# Warmup Iteration  12: 442539.039 ops/s
# Warmup Iteration  13: 437825.619 ops/s
# Warmup Iteration  14: 419403.578 ops/s
# Warmup Iteration  15: 417373.369 ops/s
# Warmup Iteration  16: 448451.825 ops/s
# Warmup Iteration  17: 462032.085 ops/s
# Warmup Iteration  18: 461636.600 ops/s
# Warmup Iteration  19: 474168.171 ops/s
# Warmup Iteration  20: 438078.914 ops/s
# Warmup Iteration  21: 476255.340 ops/s
# Warmup Iteration  22: 446051.304 ops/s
# Warmup Iteration  23: 462238.907 ops/s
# Warmup Iteration  24: 435857.141 ops/s
# Warmup Iteration  25: 452003.693 ops/s
# Warmup Iteration  26: 467479.542 ops/s
# Warmup Iteration  27: 444904.836 ops/s
# Warmup Iteration  28: 438186.665 ops/s
# Warmup Iteration  29: 458993.836 ops/s
# Warmup Iteration  30: 446291.109 ops/s
Iteration   1: 457909.562 ops/s
Iteration   2: 466003.312 ops/s
Iteration   3: 449445.367 ops/s
Iteration   4: 460935.969 ops/s
Iteration   5: 420195.311 ops/s
Iteration   6: 457532.123 ops/s
Iteration   7: 452193.765 ops/s
Iteration   8: 461583.086 ops/s
Iteration   9: 444815.941 ops/s
Iteration  10: 468088.602 ops/s
Iteration  11: 452291.355 ops/s
Iteration  12: 453656.632 ops/s
Iteration  13: 460421.552 ops/s
Iteration  14: 459953.097 ops/s
Iteration  15: 366791.178 ops/s
Iteration  16: 454378.823 ops/s
Iteration  17: 455745.832 ops/s
Iteration  18: 469606.572 ops/s
Iteration  19: 444330.386 ops/s
Iteration  20: 446666.445 ops/s
Iteration  21: 466419.235 ops/s
Iteration  22: 444019.723 ops/s
Iteration  23: 466421.004 ops/s
Iteration  24: 443898.430 ops/s
Iteration  25: 454860.106 ops/s
Iteration  26: 449417.815 ops/s
Iteration  27: 466555.192 ops/s
Iteration  28: 458199.176 ops/s
Iteration  29: 447252.748 ops/s
Iteration  30: 456804.970 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_concatObservableDelayErrorTillEnd":
  451879.777 ±(99.9%) 12671.622 ops/s [Average]
  (min, avg, max) = (366791.178, 451879.777, 469606.572), stdev = 18966.288
  CI (99.9%): [439208.155, 464551.399] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score       Error  Units
FlowableConcatTest._Benchmark.benchmark_concatObservableDelayErrorTillEnd  thrpt   30  451879.777 ± 12671.622  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchIfEmptyTest._Benchmark.benchmark_switchTriggerUnsubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchIfEmptyTest._Benchmark.benchmark_switchTriggerUnsubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1347601.365 ops/s
# Warmup Iteration   2: 4234234.644 ops/s
# Warmup Iteration   3: 4594902.619 ops/s
# Warmup Iteration   4: 5404718.444 ops/s
# Warmup Iteration   5: 5526448.224 ops/s
# Warmup Iteration   6: 5341752.176 ops/s
# Warmup Iteration   7: 5600425.651 ops/s
# Warmup Iteration   8: 5544384.789 ops/s
# Warmup Iteration   9: 5448505.145 ops/s
# Warmup Iteration  10: 5308810.243 ops/s
# Warmup Iteration  11: 5299352.206 ops/s
# Warmup Iteration  12: 5517330.037 ops/s
# Warmup Iteration  13: 5206665.048 ops/s
# Warmup Iteration  14: 5410545.412 ops/s
# Warmup Iteration  15: 5466896.287 ops/s
# Warmup Iteration  16: 5621217.092 ops/s
# Warmup Iteration  17: 5246054.779 ops/s
# Warmup Iteration  18: 5456453.110 ops/s
# Warmup Iteration  19: 5684973.635 ops/s
# Warmup Iteration  20: 5274791.160 ops/s
# Warmup Iteration  21: 5652862.161 ops/s
# Warmup Iteration  22: 5348852.802 ops/s
# Warmup Iteration  23: 5504513.318 ops/s
# Warmup Iteration  24: 5362834.639 ops/s
# Warmup Iteration  25: 5398332.616 ops/s
# Warmup Iteration  26: 5565086.159 ops/s
# Warmup Iteration  27: 5201489.578 ops/s
# Warmup Iteration  28: 5451362.758 ops/s
# Warmup Iteration  29: 5532593.919 ops/s
# Warmup Iteration  30: 5386077.649 ops/s
Iteration   1: 5607362.194 ops/s
Iteration   2: 5628668.432 ops/s
Iteration   3: 5372027.537 ops/s
Iteration   4: 5567851.484 ops/s
Iteration   5: 5461919.095 ops/s
Iteration   6: 5214686.875 ops/s
Iteration   7: 5533149.250 ops/s
Iteration   8: 5480245.974 ops/s
Iteration   9: 5514319.563 ops/s
Iteration  10: 5450402.958 ops/s
Iteration  11: 5377786.932 ops/s
Iteration  12: 5609901.808 ops/s
Iteration  13: 5298491.753 ops/s
Iteration  14: 5500326.409 ops/s
Iteration  15: 5313436.537 ops/s
Iteration  16: 5401262.196 ops/s
Iteration  17: 5601696.398 ops/s
Iteration  18: 5427739.177 ops/s
Iteration  19: 5432992.337 ops/s
Iteration  20: 5330461.685 ops/s
Iteration  21: 4513655.791 ops/s
Iteration  22: 5658702.999 ops/s
Iteration  23: 5255758.175 ops/s
Iteration  24: 5501707.190 ops/s
Iteration  25: 5475695.752 ops/s
Iteration  26: 5531082.187 ops/s
Iteration  27: 5320674.424 ops/s
Iteration  28: 5549302.949 ops/s
Iteration  29: 5341692.363 ops/s
Iteration  30: 5468488.747 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchIfEmptyTest._Benchmark.benchmark_switchTriggerUnsubscribe":
  5424716.306 ±(99.9%) 138539.059 ops/s [Average]
  (min, avg, max) = (4513655.791, 5424716.306, 5658702.999), stdev = 207358.757
  CI (99.9%): [5286177.247, 5563255.365] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score        Error  Units
FlowableSwitchIfEmptyTest._Benchmark.benchmark_switchTriggerUnsubscribe  thrpt   30  5424716.306 ± 138539.059  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 29793.617 ops/s
# Warmup Iteration   2: 151003.350 ops/s
# Warmup Iteration   3: 215413.204 ops/s
# Warmup Iteration   4: 206369.482 ops/s
# Warmup Iteration   5: 224398.986 ops/s
# Warmup Iteration   6: 205145.657 ops/s
# Warmup Iteration   7: 219840.778 ops/s
# Warmup Iteration   8: 214293.169 ops/s
# Warmup Iteration   9: 217098.512 ops/s
# Warmup Iteration  10: 232228.964 ops/s
# Warmup Iteration  11: 216784.168 ops/s
# Warmup Iteration  12: 228323.312 ops/s
# Warmup Iteration  13: 228133.607 ops/s
# Warmup Iteration  14: 227357.245 ops/s
# Warmup Iteration  15: 229842.166 ops/s
# Warmup Iteration  16: 228191.571 ops/s
# Warmup Iteration  17: 226803.533 ops/s
# Warmup Iteration  18: 239227.351 ops/s
# Warmup Iteration  19: 230785.674 ops/s
# Warmup Iteration  20: 239306.022 ops/s
# Warmup Iteration  21: 231970.555 ops/s
# Warmup Iteration  22: 232558.022 ops/s
# Warmup Iteration  23: 233055.838 ops/s
# Warmup Iteration  24: 226503.711 ops/s
# Warmup Iteration  25: 239958.971 ops/s
# Warmup Iteration  26: 234427.646 ops/s
# Warmup Iteration  27: 233342.007 ops/s
# Warmup Iteration  28: 238086.544 ops/s
# Warmup Iteration  29: 226551.334 ops/s
# Warmup Iteration  30: 242693.422 ops/s
Iteration   1: 231675.976 ops/s
Iteration   2: 233338.301 ops/s
Iteration   3: 237861.677 ops/s
Iteration   4: 224180.216 ops/s
Iteration   5: 231859.354 ops/s
Iteration   6: 234172.550 ops/s
Iteration   7: 231940.252 ops/s
Iteration   8: 233904.057 ops/s
Iteration   9: 223881.356 ops/s
Iteration  10: 233839.055 ops/s
Iteration  11: 230167.407 ops/s
Iteration  12: 241351.014 ops/s
Iteration  13: 234420.998 ops/s
Iteration  14: 231616.276 ops/s
Iteration  15: 230911.612 ops/s
Iteration  16: 234988.217 ops/s
Iteration  17: 228596.015 ops/s
Iteration  18: 238683.172 ops/s
Iteration  19: 230791.528 ops/s
Iteration  20: 230555.245 ops/s
Iteration  21: 235140.628 ops/s
Iteration  22: 233920.204 ops/s
Iteration  23: 239914.811 ops/s
Iteration  24: 230340.754 ops/s
Iteration  25: 235475.950 ops/s
Iteration  26: 222286.777 ops/s
Iteration  27: 237361.583 ops/s
Iteration  28: 234073.257 ops/s
Iteration  29: 233627.425 ops/s
Iteration  30: 240343.842 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_doubleOnSubscribe":
  233040.650 ±(99.9%) 3038.948 ops/s [Average]
  (min, avg, max) = (222286.777, 233040.650, 241351.014), stdev = 4548.555
  CI (99.9%): [230001.702, 236079.598] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
FlowableConcatTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  233040.650 ± 3038.948  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_concatMapDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_concatMapDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 464664.561 ops/s
# Warmup Iteration   2: 2265756.996 ops/s
# Warmup Iteration   3: 2803391.345 ops/s
# Warmup Iteration   4: 3066945.138 ops/s
# Warmup Iteration   5: 3383352.709 ops/s
# Warmup Iteration   6: 3209296.260 ops/s
# Warmup Iteration   7: 3258051.993 ops/s
# Warmup Iteration   8: 3267824.696 ops/s
# Warmup Iteration   9: 3270826.835 ops/s
# Warmup Iteration  10: 3147905.237 ops/s
# Warmup Iteration  11: 3238939.318 ops/s
# Warmup Iteration  12: 3131982.227 ops/s
# Warmup Iteration  13: 3278791.404 ops/s
# Warmup Iteration  14: 3201493.395 ops/s
# Warmup Iteration  15: 3222696.094 ops/s
# Warmup Iteration  16: 3258556.413 ops/s
# Warmup Iteration  17: 3147600.903 ops/s
# Warmup Iteration  18: 3307240.011 ops/s
# Warmup Iteration  19: 3203231.684 ops/s
# Warmup Iteration  20: 3370017.381 ops/s
# Warmup Iteration  21: 3192051.112 ops/s
# Warmup Iteration  22: 3202854.057 ops/s
# Warmup Iteration  23: 3305789.184 ops/s
# Warmup Iteration  24: 3182127.748 ops/s
# Warmup Iteration  25: 3254438.024 ops/s
# Warmup Iteration  26: 3251659.853 ops/s
# Warmup Iteration  27: 3248402.073 ops/s
# Warmup Iteration  28: 3307882.684 ops/s
# Warmup Iteration  29: 3211739.767 ops/s
# Warmup Iteration  30: 3333594.875 ops/s
Iteration   1: 3299346.715 ops/s
Iteration   2: 3102280.116 ops/s
Iteration   3: 3291168.675 ops/s
Iteration   4: 3226517.861 ops/s
Iteration   5: 3267172.402 ops/s
Iteration   6: 3196159.805 ops/s
Iteration   7: 2665979.995 ops/s
Iteration   8: 3233427.806 ops/s
Iteration   9: 3146851.255 ops/s
Iteration  10: 3295573.968 ops/s
Iteration  11: 3247614.485 ops/s
Iteration  12: 3343191.409 ops/s
Iteration  13: 3206298.352 ops/s
Iteration  14: 3189393.002 ops/s
Iteration  15: 3248878.286 ops/s
Iteration  16: 3128736.481 ops/s
Iteration  17: 3326611.089 ops/s
Iteration  18: 3256759.424 ops/s
Iteration  19: 3139715.754 ops/s
Iteration  20: 3325759.059 ops/s
Iteration  21: 3189353.595 ops/s
Iteration  22: 3195196.996 ops/s
Iteration  23: 3293157.107 ops/s
Iteration  24: 3131198.619 ops/s
Iteration  25: 3280005.484 ops/s
Iteration  26: 3122786.418 ops/s
Iteration  27: 3271536.841 ops/s
Iteration  28: 3187345.734 ops/s
Iteration  29: 3190946.213 ops/s
Iteration  30: 3163368.568 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_concatMapDelayError":
  3205411.050 ±(99.9%) 81548.015 ops/s [Average]
  (min, avg, max) = (2665979.995, 3205411.050, 3343191.409), stdev = 122057.238
  CI (99.9%): [3123863.036, 3286959.065] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score       Error  Units
FlowableConcatMapSchedulerTest._Benchmark.benchmark_concatMapDelayError  thrpt   30  3205411.050 ± 81548.015  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryTest._Benchmark.benchmark_sourceFlowableCallsUnsubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryTest._Benchmark.benchmark_sourceFlowableCallsUnsubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 61811.386 ops/s
# Warmup Iteration   2: 136312.079 ops/s
# Warmup Iteration   3: 142045.974 ops/s
# Warmup Iteration   4: 146443.704 ops/s
# Warmup Iteration   5: 147054.459 ops/s
# Warmup Iteration   6: 150224.013 ops/s
# Warmup Iteration   7: 136047.922 ops/s
# Warmup Iteration   8: 151887.566 ops/s
# Warmup Iteration   9: 153535.651 ops/s
# Warmup Iteration  10: 156912.869 ops/s
# Warmup Iteration  11: 145769.167 ops/s
# Warmup Iteration  12: 154617.891 ops/s
# Warmup Iteration  13: 153975.170 ops/s
# Warmup Iteration  14: 158300.504 ops/s
# Warmup Iteration  15: 152053.532 ops/s
# Warmup Iteration  16: 153688.209 ops/s
# Warmup Iteration  17: 166006.136 ops/s
# Warmup Iteration  18: 159062.411 ops/s
# Warmup Iteration  19: 161101.679 ops/s
# Warmup Iteration  20: 160339.826 ops/s
# Warmup Iteration  21: 163535.584 ops/s
# Warmup Iteration  22: 160491.159 ops/s
# Warmup Iteration  23: 160226.902 ops/s
# Warmup Iteration  24: 162513.268 ops/s
# Warmup Iteration  25: 159539.841 ops/s
# Warmup Iteration  26: 160931.784 ops/s
# Warmup Iteration  27: 163653.655 ops/s
# Warmup Iteration  28: 160890.181 ops/s
# Warmup Iteration  29: 162299.648 ops/s
# Warmup Iteration  30: 162427.779 ops/s
Iteration   1: 162356.085 ops/s
Iteration   2: 158949.643 ops/s
Iteration   3: 159946.646 ops/s
Iteration   4: 160514.161 ops/s
Iteration   5: 162912.462 ops/s
Iteration   6: 161004.454 ops/s
Iteration   7: 157743.610 ops/s
Iteration   8: 161873.752 ops/s
Iteration   9: 167070.171 ops/s
Iteration  10: 156701.153 ops/s
Iteration  11: 163931.883 ops/s
Iteration  12: 155799.479 ops/s
Iteration  13: 159051.113 ops/s
Iteration  14: 160174.329 ops/s
Iteration  15: 157488.718 ops/s
Iteration  16: 160329.120 ops/s
Iteration  17: 158614.776 ops/s
Iteration  18: 157621.884 ops/s
Iteration  19: 163795.918 ops/s
Iteration  20: 158428.749 ops/s
Iteration  21: 164949.927 ops/s
Iteration  22: 159217.950 ops/s
Iteration  23: 166296.631 ops/s
Iteration  24: 154766.337 ops/s
Iteration  25: 163848.268 ops/s
Iteration  26: 159415.051 ops/s
Iteration  27: 161655.728 ops/s
Iteration  28: 161388.406 ops/s
Iteration  29: 162588.719 ops/s
Iteration  30: 157814.653 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryTest._Benchmark.benchmark_sourceFlowableCallsUnsubscribe":
  160541.659 ±(99.9%) 2021.295 ops/s [Average]
  (min, avg, max) = (154766.337, 160541.659, 167070.171), stdev = 3025.379
  CI (99.9%): [158520.364, 162562.954] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score      Error  Units
FlowableRetryTest._Benchmark.benchmark_sourceFlowableCallsUnsubscribe  thrpt   30  160541.659 ± 2021.295  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleStartWithTest._Benchmark.benchmark_justFlowableError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleStartWithTest._Benchmark.benchmark_justFlowableError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 207888.880 ops/s
# Warmup Iteration   2: 555976.744 ops/s
# Warmup Iteration   3: 629609.172 ops/s
# Warmup Iteration   4: 657608.561 ops/s
# Warmup Iteration   5: 668366.210 ops/s
# Warmup Iteration   6: 685984.965 ops/s
# Warmup Iteration   7: 667968.867 ops/s
# Warmup Iteration   8: 636545.808 ops/s
# Warmup Iteration   9: 680954.791 ops/s
# Warmup Iteration  10: 673394.130 ops/s
# Warmup Iteration  11: 677804.696 ops/s
# Warmup Iteration  12: 661359.823 ops/s
# Warmup Iteration  13: 689943.247 ops/s
# Warmup Iteration  14: 668013.890 ops/s
# Warmup Iteration  15: 697405.502 ops/s
# Warmup Iteration  16: 665029.776 ops/s
# Warmup Iteration  17: 713841.098 ops/s
# Warmup Iteration  18: 718761.757 ops/s
# Warmup Iteration  19: 686718.088 ops/s
# Warmup Iteration  20: 735266.728 ops/s
# Warmup Iteration  21: 689383.286 ops/s
# Warmup Iteration  22: 699624.933 ops/s
# Warmup Iteration  23: 737770.483 ops/s
# Warmup Iteration  24: 692899.717 ops/s
# Warmup Iteration  25: 723053.776 ops/s
# Warmup Iteration  26: 693321.757 ops/s
# Warmup Iteration  27: 674947.200 ops/s
# Warmup Iteration  28: 721841.462 ops/s
# Warmup Iteration  29: 697389.602 ops/s
# Warmup Iteration  30: 712014.953 ops/s
Iteration   1: 706176.198 ops/s
Iteration   2: 560990.391 ops/s
Iteration   3: 709705.644 ops/s
Iteration   4: 710095.280 ops/s
Iteration   5: 716883.192 ops/s
Iteration   6: 720750.944 ops/s
Iteration   7: 691083.437 ops/s
Iteration   8: 726768.621 ops/s
Iteration   9: 698719.842 ops/s
Iteration  10: 724426.312 ops/s
Iteration  11: 705799.672 ops/s
Iteration  12: 698981.747 ops/s
Iteration  13: 699846.817 ops/s
Iteration  14: 716026.986 ops/s
Iteration  15: 731224.095 ops/s
Iteration  16: 698421.149 ops/s
Iteration  17: 713796.616 ops/s
Iteration  18: 716979.126 ops/s
Iteration  19: 696917.246 ops/s
Iteration  20: 735354.371 ops/s
Iteration  21: 698062.294 ops/s
Iteration  22: 713161.961 ops/s
Iteration  23: 705405.204 ops/s
Iteration  24: 698427.695 ops/s
Iteration  25: 713741.537 ops/s
Iteration  26: 715077.219 ops/s
Iteration  27: 715543.437 ops/s
Iteration  28: 694627.954 ops/s
Iteration  29: 718434.926 ops/s
Iteration  30: 712240.207 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleStartWithTest._Benchmark.benchmark_justFlowableError":
  705455.671 ±(99.9%) 19681.888 ops/s [Average]
  (min, avg, max) = (560990.391, 705455.671, 735354.371), stdev = 29458.926
  CI (99.9%): [685773.783, 725137.559] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score       Error  Units
SingleStartWithTest._Benchmark.benchmark_justFlowableError  thrpt   30  705455.671 ± 19681.888  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_concatMapJustJust$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_concatMapJustJust

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 864012.498 ops/s
# Warmup Iteration   2: 2561611.978 ops/s
# Warmup Iteration   3: 3109016.855 ops/s
# Warmup Iteration   4: 3411982.016 ops/s
# Warmup Iteration   5: 3598000.595 ops/s
# Warmup Iteration   6: 3330524.156 ops/s
# Warmup Iteration   7: 3588815.637 ops/s
# Warmup Iteration   8: 3338269.811 ops/s
# Warmup Iteration   9: 3364482.907 ops/s
# Warmup Iteration  10: 3457077.391 ops/s
# Warmup Iteration  11: 3398275.081 ops/s
# Warmup Iteration  12: 3534945.344 ops/s
# Warmup Iteration  13: 3396591.865 ops/s
# Warmup Iteration  14: 3474953.884 ops/s
# Warmup Iteration  15: 3515238.046 ops/s
# Warmup Iteration  16: 3363133.595 ops/s
# Warmup Iteration  17: 3463253.053 ops/s
# Warmup Iteration  18: 3611073.671 ops/s
# Warmup Iteration  19: 3444321.082 ops/s
# Warmup Iteration  20: 3566397.938 ops/s
# Warmup Iteration  21: 3307373.564 ops/s
# Warmup Iteration  22: 3469920.088 ops/s
# Warmup Iteration  23: 3456382.709 ops/s
# Warmup Iteration  24: 3370266.271 ops/s
# Warmup Iteration  25: 3389484.809 ops/s
# Warmup Iteration  26: 3466967.859 ops/s
# Warmup Iteration  27: 3347765.006 ops/s
# Warmup Iteration  28: 3518196.000 ops/s
# Warmup Iteration  29: 3375383.730 ops/s
# Warmup Iteration  30: 3434846.711 ops/s
Iteration   1: 3524491.328 ops/s
Iteration   2: 3373849.541 ops/s
Iteration   3: 3475007.622 ops/s
Iteration   4: 3483990.909 ops/s
Iteration   5: 3476989.837 ops/s
Iteration   6: 3507970.735 ops/s
Iteration   7: 3387615.297 ops/s
Iteration   8: 3547272.832 ops/s
Iteration   9: 3421233.042 ops/s
Iteration  10: 3390470.464 ops/s
Iteration  11: 3547936.385 ops/s
Iteration  12: 3412656.949 ops/s
Iteration  13: 3489206.590 ops/s
Iteration  14: 3382297.689 ops/s
Iteration  15: 3449568.236 ops/s
Iteration  16: 3562783.937 ops/s
Iteration  17: 3377940.860 ops/s
Iteration  18: 3506054.417 ops/s
Iteration  19: 3403698.667 ops/s
Iteration  20: 3434374.148 ops/s
Iteration  21: 3423837.719 ops/s
Iteration  22: 3409358.778 ops/s
Iteration  23: 3486277.527 ops/s
Iteration  24: 3344708.231 ops/s
Iteration  25: 3525306.521 ops/s
Iteration  26: 3476042.732 ops/s
Iteration  27: 3486383.032 ops/s
Iteration  28: 3371361.273 ops/s
Iteration  29: 3474523.879 ops/s
Iteration  30: 3422624.558 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_concatMapJustJust":
  3452527.791 ±(99.9%) 40249.140 ops/s [Average]
  (min, avg, max) = (3344708.231, 3452527.791, 3562783.937), stdev = 60243.023
  CI (99.9%): [3412278.651, 3492776.931] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
FlowableConcatMapSchedulerTest._Benchmark.benchmark_concatMapJustJust  thrpt   30  3452527.791 ± 40249.140  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_onErrorResumeNextFunctionReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_onErrorResumeNextFunctionReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 32127.902 ops/s
# Warmup Iteration   2: 168350.325 ops/s
# Warmup Iteration   3: 178346.170 ops/s
# Warmup Iteration   4: 177925.381 ops/s
# Warmup Iteration   5: 208927.653 ops/s
# Warmup Iteration   6: 200588.817 ops/s
# Warmup Iteration   7: 194768.518 ops/s
# Warmup Iteration   8: 202525.804 ops/s
# Warmup Iteration   9: 199229.875 ops/s
# Warmup Iteration  10: 201921.187 ops/s
# Warmup Iteration  11: 201850.706 ops/s
# Warmup Iteration  12: 196908.861 ops/s
# Warmup Iteration  13: 204405.850 ops/s
# Warmup Iteration  14: 196849.180 ops/s
# Warmup Iteration  15: 200798.462 ops/s
# Warmup Iteration  16: 198323.986 ops/s
# Warmup Iteration  17: 212331.811 ops/s
# Warmup Iteration  18: 207580.417 ops/s
# Warmup Iteration  19: 206858.781 ops/s
# Warmup Iteration  20: 212446.482 ops/s
# Warmup Iteration  21: 209288.291 ops/s
# Warmup Iteration  22: 215246.614 ops/s
# Warmup Iteration  23: 206528.485 ops/s
# Warmup Iteration  24: 205954.454 ops/s
# Warmup Iteration  25: 217244.440 ops/s
# Warmup Iteration  26: 206720.167 ops/s
# Warmup Iteration  27: 160158.280 ops/s
# Warmup Iteration  28: 210279.394 ops/s
# Warmup Iteration  29: 214876.163 ops/s
# Warmup Iteration  30: 206712.650 ops/s
Iteration   1: 221441.475 ops/s
Iteration   2: 205569.026 ops/s
Iteration   3: 216017.207 ops/s
Iteration   4: 210306.461 ops/s
Iteration   5: 201983.848 ops/s
Iteration   6: 223432.179 ops/s
Iteration   7: 202281.466 ops/s
Iteration   8: 218056.513 ops/s
Iteration   9: 202928.019 ops/s
Iteration  10: 208926.474 ops/s
Iteration  11: 215501.443 ops/s
Iteration  12: 203661.147 ops/s
Iteration  13: 216154.126 ops/s
Iteration  14: 200456.288 ops/s
Iteration  15: 202841.133 ops/s
Iteration  16: 216730.545 ops/s
Iteration  17: 204387.870 ops/s
Iteration  18: 211292.152 ops/s
Iteration  19: 210015.358 ops/s
Iteration  20: 215867.199 ops/s
Iteration  21: 210630.401 ops/s
Iteration  22: 214063.384 ops/s
Iteration  23: 191328.037 ops/s
Iteration  24: 205471.363 ops/s
Iteration  25: 221560.713 ops/s
Iteration  26: 204512.932 ops/s
Iteration  27: 216599.982 ops/s
Iteration  28: 209348.078 ops/s
Iteration  29: 207432.670 ops/s
Iteration  30: 218624.260 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_onErrorResumeNextFunctionReturnsNull":
  210247.392 ±(99.9%) 5029.855 ops/s [Average]
  (min, avg, max) = (191328.037, 210247.392, 223432.179), stdev = 7528.450
  CI (99.9%): [205217.537, 215277.246] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt       Score      Error  Units
FlowableNullTests._Benchmark.benchmark_onErrorResumeNextFunctionReturnsNull  thrpt   30  210247.392 ± 5029.855  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferTest._Benchmark.benchmark_noDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferTest._Benchmark.benchmark_noDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 78450.486 ops/s
# Warmup Iteration   2: 380313.767 ops/s
# Warmup Iteration   3: 462487.503 ops/s
# Warmup Iteration   4: 411072.869 ops/s
# Warmup Iteration   5: 490295.537 ops/s
# Warmup Iteration   6: 506213.457 ops/s
# Warmup Iteration   7: 483406.497 ops/s
# Warmup Iteration   8: 491863.281 ops/s
# Warmup Iteration   9: 468593.974 ops/s
# Warmup Iteration  10: 512774.675 ops/s
# Warmup Iteration  11: 496272.010 ops/s
# Warmup Iteration  12: 479308.285 ops/s
# Warmup Iteration  13: 487510.606 ops/s
# Warmup Iteration  14: 518194.726 ops/s
# Warmup Iteration  15: 494515.870 ops/s
# Warmup Iteration  16: 474583.108 ops/s
# Warmup Iteration  17: 523965.571 ops/s
# Warmup Iteration  18: 500622.985 ops/s
# Warmup Iteration  19: 541014.187 ops/s
# Warmup Iteration  20: 508513.925 ops/s
# Warmup Iteration  21: 521910.149 ops/s
# Warmup Iteration  22: 529585.832 ops/s
# Warmup Iteration  23: 497217.517 ops/s
# Warmup Iteration  24: 502368.884 ops/s
# Warmup Iteration  25: 533940.279 ops/s
# Warmup Iteration  26: 501150.052 ops/s
# Warmup Iteration  27: 545154.011 ops/s
# Warmup Iteration  28: 541667.302 ops/s
# Warmup Iteration  29: 501737.416 ops/s
# Warmup Iteration  30: 509617.627 ops/s
Iteration   1: 519306.718 ops/s
Iteration   2: 514474.289 ops/s
Iteration   3: 497290.194 ops/s
Iteration   4: 515256.793 ops/s
Iteration   5: 522768.983 ops/s
Iteration   6: 501932.501 ops/s
Iteration   7: 528618.278 ops/s
Iteration   8: 517895.552 ops/s
Iteration   9: 512855.558 ops/s
Iteration  10: 510380.738 ops/s
Iteration  11: 493866.663 ops/s
Iteration  12: 541135.192 ops/s
Iteration  13: 496101.005 ops/s
Iteration  14: 530019.229 ops/s
Iteration  15: 507937.795 ops/s
Iteration  16: 513196.029 ops/s
Iteration  17: 522584.987 ops/s
Iteration  18: 526358.304 ops/s
Iteration  19: 499363.562 ops/s
Iteration  20: 524236.905 ops/s
Iteration  21: 516059.562 ops/s
Iteration  22: 539616.943 ops/s
Iteration  23: 531976.809 ops/s
Iteration  24: 507524.941 ops/s
Iteration  25: 515693.449 ops/s
Iteration  26: 511223.710 ops/s
Iteration  27: 520499.248 ops/s
Iteration  28: 530160.842 ops/s
Iteration  29: 508025.598 ops/s
Iteration  30: 528333.498 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferTest._Benchmark.benchmark_noDelayError":
  516823.129 ±(99.9%) 8246.459 ops/s [Average]
  (min, avg, max) = (493866.663, 516823.129, 541135.192), stdev = 12342.913
  CI (99.9%): [508576.670, 525069.589] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score      Error  Units
FlowableOnBackpressureBufferTest._Benchmark.benchmark_noDelayError  thrpt   30  516823.129 ± 8246.459  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingTest._Benchmark.benchmark_blockingSubscribeConsumer$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingTest._Benchmark.benchmark_blockingSubscribeConsumer

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 11166.579 ops/s
# Warmup Iteration   2: 24882.418 ops/s
# Warmup Iteration   3: 22371.307 ops/s
# Warmup Iteration   4: 21962.062 ops/s
# Warmup Iteration   5: 20296.777 ops/s
# Warmup Iteration   6: 24439.074 ops/s
# Warmup Iteration   7: 20534.480 ops/s
# Warmup Iteration   8: 20898.717 ops/s
# Warmup Iteration   9: 21041.817 ops/s
# Warmup Iteration  10: 20324.183 ops/s
# Warmup Iteration  11: 20317.074 ops/s
# Warmup Iteration  12: 24043.253 ops/s
# Warmup Iteration  13: 20632.213 ops/s
# Warmup Iteration  14: 20421.281 ops/s
# Warmup Iteration  15: 20269.629 ops/s
# Warmup Iteration  16: 20188.183 ops/s
# Warmup Iteration  17: 20754.184 ops/s
# Warmup Iteration  18: 20685.459 ops/s
# Warmup Iteration  19: 21003.786 ops/s
# Warmup Iteration  20: 20725.499 ops/s
# Warmup Iteration  21: 24792.732 ops/s
# Warmup Iteration  22: 18914.922 ops/s
# Warmup Iteration  23: 20339.414 ops/s
# Warmup Iteration  24: 20725.193 ops/s
# Warmup Iteration  25: 20413.574 ops/s
# Warmup Iteration  26: 20671.952 ops/s
# Warmup Iteration  27: 20569.858 ops/s
# Warmup Iteration  28: 20649.678 ops/s
# Warmup Iteration  29: 20817.287 ops/s
# Warmup Iteration  30: 20745.909 ops/s
Iteration   1: 20383.443 ops/s
Iteration   2: 20610.151 ops/s
Iteration   3: 20931.800 ops/s
Iteration   4: 20665.205 ops/s
Iteration   5: 20958.273 ops/s
Iteration   6: 20451.212 ops/s
Iteration   7: 20544.981 ops/s
Iteration   8: 21286.345 ops/s
Iteration   9: 20883.180 ops/s
Iteration  10: 20623.901 ops/s
Iteration  11: 21095.505 ops/s
Iteration  12: 20836.030 ops/s
Iteration  13: 21273.598 ops/s
Iteration  14: 20292.562 ops/s
Iteration  15: 20191.294 ops/s
Iteration  16: 21224.590 ops/s
Iteration  17: 20457.181 ops/s
Iteration  18: 20751.383 ops/s
Iteration  19: 20783.590 ops/s
Iteration  20: 20774.221 ops/s
Iteration  21: 20725.323 ops/s
Iteration  22: 20598.827 ops/s
Iteration  23: 20306.975 ops/s
Iteration  24: 20907.919 ops/s
Iteration  25: 20455.566 ops/s
Iteration  26: 21262.100 ops/s
Iteration  27: 20561.993 ops/s
Iteration  28: 21007.985 ops/s
Iteration  29: 20549.219 ops/s
Iteration  30: 20329.555 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingTest._Benchmark.benchmark_blockingSubscribeConsumer":
  20724.130 ±(99.9%) 208.256 ops/s [Average]
  (min, avg, max) = (20191.294, 20724.130, 21286.345), stdev = 311.708
  CI (99.9%): [20515.874, 20932.387] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt      Score     Error  Units
ObservableBlockingTest._Benchmark.benchmark_blockingSubscribeConsumer  thrpt   30  20724.130 ± 208.256  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSkipLastTimedTest._Benchmark.benchmark_take$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSkipLastTimedTest._Benchmark.benchmark_take

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 66095.651 ops/s
# Warmup Iteration   2: 238241.722 ops/s
# Warmup Iteration   3: 449782.891 ops/s
# Warmup Iteration   4: 452666.225 ops/s
# Warmup Iteration   5: 473318.724 ops/s
# Warmup Iteration   6: 454857.755 ops/s
# Warmup Iteration   7: 457963.973 ops/s
# Warmup Iteration   8: 475877.835 ops/s
# Warmup Iteration   9: 428894.299 ops/s
# Warmup Iteration  10: 449326.394 ops/s
# Warmup Iteration  11: 462856.884 ops/s
# Warmup Iteration  12: 435602.413 ops/s
# Warmup Iteration  13: 477113.686 ops/s
# Warmup Iteration  14: 467549.788 ops/s
# Warmup Iteration  15: 476062.439 ops/s
# Warmup Iteration  16: 456597.358 ops/s
# Warmup Iteration  17: 468212.172 ops/s
# Warmup Iteration  18: 469897.446 ops/s
# Warmup Iteration  19: 467014.465 ops/s
# Warmup Iteration  20: 461939.869 ops/s
# Warmup Iteration  21: 459767.026 ops/s
# Warmup Iteration  22: 469178.922 ops/s
# Warmup Iteration  23: 474152.718 ops/s
# Warmup Iteration  24: 461547.023 ops/s
# Warmup Iteration  25: 476218.063 ops/s
# Warmup Iteration  26: 459812.561 ops/s
# Warmup Iteration  27: 473099.807 ops/s
# Warmup Iteration  28: 461683.448 ops/s
# Warmup Iteration  29: 364277.409 ops/s
# Warmup Iteration  30: 477793.346 ops/s
Iteration   1: 458396.440 ops/s
Iteration   2: 478201.810 ops/s
Iteration   3: 461175.052 ops/s
Iteration   4: 447659.620 ops/s
Iteration   5: 486521.734 ops/s
Iteration   6: 441593.149 ops/s
Iteration   7: 477035.491 ops/s
Iteration   8: 470022.864 ops/s
Iteration   9: 462953.066 ops/s
Iteration  10: 475405.462 ops/s
Iteration  11: 460775.431 ops/s
Iteration  12: 480346.772 ops/s
Iteration  13: 471421.994 ops/s
Iteration  14: 474685.233 ops/s
Iteration  15: 469358.069 ops/s
Iteration  16: 467338.257 ops/s
Iteration  17: 470522.759 ops/s
Iteration  18: 467358.305 ops/s
Iteration  19: 458797.248 ops/s
Iteration  20: 463352.451 ops/s
Iteration  21: 492264.316 ops/s
Iteration  22: 464058.278 ops/s
Iteration  23: 459163.706 ops/s
Iteration  24: 486484.868 ops/s
Iteration  25: 452176.254 ops/s
Iteration  26: 478452.395 ops/s
Iteration  27: 460170.652 ops/s
Iteration  28: 466625.792 ops/s
Iteration  29: 469275.975 ops/s
Iteration  30: 474216.904 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableSkipLastTimedTest._Benchmark.benchmark_take":
  468193.678 ±(99.9%) 7572.540 ops/s [Average]
  (min, avg, max) = (441593.149, 468193.678, 492264.316), stdev = 11334.222
  CI (99.9%): [460621.138, 475766.218] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score      Error  Units
ObservableSkipLastTimedTest._Benchmark.benchmark_take  thrpt   30  468193.678 ± 7572.540  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_supplierThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_supplierThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.836 ops/s
# Warmup Iteration   2: 38764.555 ops/s
# Warmup Iteration   3: 78094.829 ops/s
# Warmup Iteration   4: 66490.807 ops/s
# Warmup Iteration   5: 149816.063 ops/s
# Warmup Iteration   6: 114067.780 ops/s
# Warmup Iteration   7: 210318.594 ops/s
# Warmup Iteration   8: 296771.873 ops/s
# Warmup Iteration   9: 282717.516 ops/s
# Warmup Iteration  10: 309435.719 ops/s
# Warmup Iteration  11: 305445.307 ops/s
# Warmup Iteration  12: 312809.744 ops/s
# Warmup Iteration  13: 307101.577 ops/s
# Warmup Iteration  14: 321559.085 ops/s
# Warmup Iteration  15: 302533.305 ops/s
# Warmup Iteration  16: 290695.786 ops/s
# Warmup Iteration  17: 314956.997 ops/s
# Warmup Iteration  18: 319572.312 ops/s
# Warmup Iteration  19: 320213.353 ops/s
# Warmup Iteration  20: 312475.723 ops/s
# Warmup Iteration  21: 305016.740 ops/s
# Warmup Iteration  22: 304835.822 ops/s
# Warmup Iteration  23: 309417.124 ops/s
# Warmup Iteration  24: 315555.741 ops/s
# Warmup Iteration  25: 317122.137 ops/s
# Warmup Iteration  26: 315132.556 ops/s
# Warmup Iteration  27: 313874.271 ops/s
# Warmup Iteration  28: 302911.090 ops/s
# Warmup Iteration  29: 315003.792 ops/s
# Warmup Iteration  30: 323920.577 ops/s
Iteration   1: 304720.805 ops/s
Iteration   2: 320171.236 ops/s
Iteration   3: 321387.135 ops/s
Iteration   4: 306051.725 ops/s
Iteration   5: 325605.609 ops/s
Iteration   6: 302883.526 ops/s
Iteration   7: 323353.350 ops/s
Iteration   8: 313127.199 ops/s
Iteration   9: 312686.076 ops/s
Iteration  10: 330330.059 ops/s
Iteration  11: 309431.896 ops/s
Iteration  12: 320064.248 ops/s
Iteration  13: 305334.453 ops/s
Iteration  14: 317428.532 ops/s
Iteration  15: 325770.511 ops/s
Iteration  16: 310096.831 ops/s
Iteration  17: 309277.536 ops/s
Iteration  18: 313375.287 ops/s
Iteration  19: 307873.372 ops/s
Iteration  20: 319689.438 ops/s
Iteration  21: 314489.326 ops/s
Iteration  22: 321562.829 ops/s
Iteration  23: 313549.805 ops/s
Iteration  24: 319223.881 ops/s
Iteration  25: 319811.261 ops/s
Iteration  26: 308475.966 ops/s
Iteration  27: 317237.385 ops/s
Iteration  28: 312694.613 ops/s
Iteration  29: 320259.002 ops/s
Iteration  30: 310285.781 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_supplierThrows":
  315208.289 ±(99.9%) 4672.309 ops/s [Average]
  (min, avg, max) = (302883.526, 315208.289, 330330.059), stdev = 6993.293
  CI (99.9%): [310535.980, 319880.598] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score      Error  Units
ObservableBufferTest._Benchmark.benchmark_supplierThrows  thrpt   30  315208.289 ± 4672.309  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_supplierThrows2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_supplierThrows2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.783 ops/s
# Warmup Iteration   2: 21668.558 ops/s
# Warmup Iteration   3: 58517.723 ops/s
# Warmup Iteration   4: 89683.134 ops/s
# Warmup Iteration   5: 182621.030 ops/s
# Warmup Iteration   6: 301200.653 ops/s
# Warmup Iteration   7: 298973.998 ops/s
# Warmup Iteration   8: 326137.463 ops/s
# Warmup Iteration   9: 332813.598 ops/s
# Warmup Iteration  10: 338157.349 ops/s
# Warmup Iteration  11: 316311.095 ops/s
# Warmup Iteration  12: 326340.273 ops/s
# Warmup Iteration  13: 273869.727 ops/s
# Warmup Iteration  14: 338204.268 ops/s
# Warmup Iteration  15: 323585.237 ops/s
# Warmup Iteration  16: 336619.699 ops/s
# Warmup Iteration  17: 321555.424 ops/s
# Warmup Iteration  18: 329401.047 ops/s
# Warmup Iteration  19: 329393.413 ops/s
# Warmup Iteration  20: 340719.762 ops/s
# Warmup Iteration  21: 324492.394 ops/s
# Warmup Iteration  22: 322353.319 ops/s
# Warmup Iteration  23: 327177.736 ops/s
# Warmup Iteration  24: 330696.517 ops/s
# Warmup Iteration  25: 342464.428 ops/s
# Warmup Iteration  26: 319738.269 ops/s
# Warmup Iteration  27: 332638.866 ops/s
# Warmup Iteration  28: 328404.108 ops/s
# Warmup Iteration  29: 331279.047 ops/s
# Warmup Iteration  30: 327699.909 ops/s
Iteration   1: 334057.141 ops/s
Iteration   2: 333943.271 ops/s
Iteration   3: 328713.696 ops/s
Iteration   4: 323322.079 ops/s
Iteration   5: 336749.107 ops/s
Iteration   6: 325999.920 ops/s
Iteration   7: 334954.839 ops/s
Iteration   8: 322103.908 ops/s
Iteration   9: 339192.231 ops/s
Iteration  10: 325752.338 ops/s
Iteration  11: 331915.704 ops/s
Iteration  12: 331790.213 ops/s
Iteration  13: 339731.324 ops/s
Iteration  14: 332278.204 ops/s
Iteration  15: 326429.128 ops/s
Iteration  16: 327245.439 ops/s
Iteration  17: 318296.181 ops/s
Iteration  18: 335479.173 ops/s
Iteration  19: 325407.105 ops/s
Iteration  20: 343817.734 ops/s
Iteration  21: 335829.299 ops/s
Iteration  22: 328100.875 ops/s
Iteration  23: 333823.074 ops/s
Iteration  24: 322784.045 ops/s
Iteration  25: 342833.490 ops/s
Iteration  26: 328765.454 ops/s
Iteration  27: 337444.092 ops/s
Iteration  28: 329207.333 ops/s
Iteration  29: 333378.759 ops/s
Iteration  30: 323937.963 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_supplierThrows2":
  331109.437 ±(99.9%) 4249.407 ops/s [Average]
  (min, avg, max) = (318296.181, 331109.437, 343817.734), stdev = 6360.312
  CI (99.9%): [326860.031, 335358.844] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
ObservableBufferTest._Benchmark.benchmark_supplierThrows2  thrpt   30  331109.437 ± 4249.407  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.775 ops/s
# Warmup Iteration   2: 16293.232 ops/s
# Warmup Iteration   3: 52418.059 ops/s
# Warmup Iteration   4: 52132.706 ops/s
# Warmup Iteration   5: 56924.734 ops/s
# Warmup Iteration   6: 62246.832 ops/s
# Warmup Iteration   7: 69902.045 ops/s
# Warmup Iteration   8: 79788.238 ops/s
# Warmup Iteration   9: 55487.420 ops/s
# Warmup Iteration  10: 66452.181 ops/s
# Warmup Iteration  11: 88944.738 ops/s
# Warmup Iteration  12: 161669.240 ops/s
# Warmup Iteration  13: 157959.841 ops/s
# Warmup Iteration  14: 173383.705 ops/s
# Warmup Iteration  15: 165631.426 ops/s
# Warmup Iteration  16: 167060.907 ops/s
# Warmup Iteration  17: 168520.673 ops/s
# Warmup Iteration  18: 170477.737 ops/s
# Warmup Iteration  19: 175037.760 ops/s
# Warmup Iteration  20: 169285.621 ops/s
# Warmup Iteration  21: 176961.398 ops/s
# Warmup Iteration  22: 166074.739 ops/s
# Warmup Iteration  23: 171711.679 ops/s
# Warmup Iteration  24: 166859.222 ops/s
# Warmup Iteration  25: 166265.270 ops/s
# Warmup Iteration  26: 171583.533 ops/s
# Warmup Iteration  27: 171206.526 ops/s
# Warmup Iteration  28: 172489.085 ops/s
# Warmup Iteration  29: 170532.917 ops/s
# Warmup Iteration  30: 170741.697 ops/s
Iteration   1: 172366.469 ops/s
Iteration   2: 167456.923 ops/s
Iteration   3: 166862.385 ops/s
Iteration   4: 168322.817 ops/s
Iteration   5: 163999.831 ops/s
Iteration   6: 175491.764 ops/s
Iteration   7: 161703.890 ops/s
Iteration   8: 175958.389 ops/s
Iteration   9: 167719.325 ops/s
Iteration  10: 170790.689 ops/s
Iteration  11: 166821.074 ops/s
Iteration  12: 173649.088 ops/s
Iteration  13: 170161.406 ops/s
Iteration  14: 166273.466 ops/s
Iteration  15: 174080.981 ops/s
Iteration  16: 167691.145 ops/s
Iteration  17: 171908.028 ops/s
Iteration  18: 171286.766 ops/s
Iteration  19: 169010.474 ops/s
Iteration  20: 176140.332 ops/s
Iteration  21: 166604.237 ops/s
Iteration  22: 175060.584 ops/s
Iteration  23: 163779.245 ops/s
Iteration  24: 167641.825 ops/s
Iteration  25: 173864.728 ops/s
Iteration  26: 164118.942 ops/s
Iteration  27: 171541.910 ops/s
Iteration  28: 169770.598 ops/s
Iteration  29: 170897.140 ops/s
Iteration  30: 176636.200 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_dispose":
  169920.355 ±(99.9%) 2724.773 ops/s [Average]
  (min, avg, max) = (161703.890, 169920.355, 176636.200), stdev = 4078.312
  CI (99.9%): [167195.582, 172645.128] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt       Score      Error  Units
ObservableBufferTest._Benchmark.benchmark_dispose  thrpt   30  169920.355 ± 2724.773  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_windowAbandonmentCancelsUpstreamExactTimeAndSize$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_windowAbandonmentCancelsUpstreamExactTimeAndSize

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 12432.756 ops/s
# Warmup Iteration   2: 40265.173 ops/s
# Warmup Iteration   3: 58163.703 ops/s
# Warmup Iteration   4: 71879.421 ops/s
# Warmup Iteration   5: 50033.747 ops/s
# Warmup Iteration   6: 78056.592 ops/s
# Warmup Iteration   7: 60466.933 ops/s
# Warmup Iteration   8: 109236.381 ops/s
# Warmup Iteration   9: 114229.641 ops/s
# Warmup Iteration  10: 118149.780 ops/s
# Warmup Iteration  11: 127596.273 ops/s
# Warmup Iteration  12: 148456.121 ops/s
# Warmup Iteration  13: 124625.940 ops/s
# Warmup Iteration  14: 122650.564 ops/s
# Warmup Iteration  15: 132168.202 ops/s
# Warmup Iteration  16: 114043.074 ops/s
# Warmup Iteration  17: 119905.431 ops/s
# Warmup Iteration  18: 116473.896 ops/s
# Warmup Iteration  19: 125828.361 ops/s
# Warmup Iteration  20: 112404.815 ops/s
# Warmup Iteration  21: 111236.419 ops/s
# Warmup Iteration  22: 131404.133 ops/s
# Warmup Iteration  23: 103893.811 ops/s
# Warmup Iteration  24: 106358.824 ops/s
# Warmup Iteration  25: 117555.430 ops/s
# Warmup Iteration  26: 133039.030 ops/s
# Warmup Iteration  27: 128147.377 ops/s
# Warmup Iteration  28: 126699.483 ops/s
# Warmup Iteration  29: 118713.769 ops/s
# Warmup Iteration  30: 126148.597 ops/s
Iteration   1: 135696.467 ops/s
Iteration   2: 144810.000 ops/s
Iteration   3: 139525.151 ops/s
Iteration   4: 123231.742 ops/s
Iteration   5: 116448.813 ops/s
Iteration   6: 125143.015 ops/s
Iteration   7: 120861.402 ops/s
Iteration   8: 105996.916 ops/s
Iteration   9: 115375.771 ops/s
Iteration  10: 127410.302 ops/s
Iteration  11: 135584.091 ops/s
Iteration  12: 126828.020 ops/s
Iteration  13: 119955.636 ops/s
Iteration  14: 108994.109 ops/s
Iteration  15: 131753.374 ops/s
Iteration  16: 117122.172 ops/s
Iteration  17: 135250.009 ops/s
Iteration  18: 119909.417 ops/s
Iteration  19: 134689.154 ops/s
Iteration  20: 113556.118 ops/s
Iteration  21: 128287.620 ops/s
Iteration  22: 122422.969 ops/s
Iteration  23: 138608.084 ops/s
Iteration  24: 116194.627 ops/s
Iteration  25: 125879.632 ops/s
Iteration  26: 142663.745 ops/s
Iteration  27: 128977.286 ops/s
Iteration  28: 133140.564 ops/s
Iteration  29: 133961.721 ops/s
Iteration  30: 117988.398 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_windowAbandonmentCancelsUpstreamExactTimeAndSize":
  126208.878 ±(99.9%) 6671.831 ops/s [Average]
  (min, avg, max) = (105996.916, 126208.878, 144810.000), stdev = 9986.083
  CI (99.9%): [119537.047, 132880.708] (assumes normal distribution)


# Run complete. Total time: 00:01:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                          Mode  Cnt       Score      Error  Units
FlowableWindowWithTimeTest._Benchmark.benchmark_windowAbandonmentCancelsUpstreamExactTimeAndSize  thrpt   30  126208.878 ± 6671.831  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_badCapacityHint$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_badCapacityHint

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 340114.112 ops/s
# Warmup Iteration   2: 570685.783 ops/s
# Warmup Iteration   3: 627532.930 ops/s
# Warmup Iteration   4: 668663.646 ops/s
# Warmup Iteration   5: 701030.033 ops/s
# Warmup Iteration   6: 685193.838 ops/s
# Warmup Iteration   7: 710632.360 ops/s
# Warmup Iteration   8: 680633.959 ops/s
# Warmup Iteration   9: 696249.631 ops/s
# Warmup Iteration  10: 676021.095 ops/s
# Warmup Iteration  11: 677845.631 ops/s
# Warmup Iteration  12: 676969.354 ops/s
# Warmup Iteration  13: 701466.143 ops/s
# Warmup Iteration  14: 673103.186 ops/s
# Warmup Iteration  15: 715113.984 ops/s
# Warmup Iteration  16: 683809.356 ops/s
# Warmup Iteration  17: 714107.142 ops/s
# Warmup Iteration  18: 715582.503 ops/s
# Warmup Iteration  19: 701254.379 ops/s
# Warmup Iteration  20: 734373.463 ops/s
# Warmup Iteration  21: 701091.532 ops/s
# Warmup Iteration  22: 730486.838 ops/s
# Warmup Iteration  23: 709483.560 ops/s
# Warmup Iteration  24: 704187.136 ops/s
# Warmup Iteration  25: 738528.581 ops/s
# Warmup Iteration  26: 699559.409 ops/s
# Warmup Iteration  27: 760088.276 ops/s
# Warmup Iteration  28: 723127.578 ops/s
# Warmup Iteration  29: 727658.356 ops/s
# Warmup Iteration  30: 730293.120 ops/s
Iteration   1: 730763.911 ops/s
Iteration   2: 731024.391 ops/s
Iteration   3: 727179.921 ops/s
Iteration   4: 713126.075 ops/s
Iteration   5: 739718.492 ops/s
Iteration   6: 717799.790 ops/s
Iteration   7: 727263.584 ops/s
Iteration   8: 727595.986 ops/s
Iteration   9: 712238.953 ops/s
Iteration  10: 733105.788 ops/s
Iteration  11: 707401.486 ops/s
Iteration  12: 735999.832 ops/s
Iteration  13: 761683.579 ops/s
Iteration  14: 705278.811 ops/s
Iteration  15: 723048.359 ops/s
Iteration  16: 723870.037 ops/s
Iteration  17: 710248.026 ops/s
Iteration  18: 753690.825 ops/s
Iteration  19: 713017.724 ops/s
Iteration  20: 734493.369 ops/s
Iteration  21: 685935.254 ops/s
Iteration  22: 725894.433 ops/s
Iteration  23: 748598.946 ops/s
Iteration  24: 700893.979 ops/s
Iteration  25: 720654.855 ops/s
Iteration  26: 727743.310 ops/s
Iteration  27: 759985.998 ops/s
Iteration  28: 739764.921 ops/s
Iteration  29: 716935.461 ops/s
Iteration  30: 752742.199 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_badCapacityHint":
  726923.276 ±(99.9%) 11786.884 ops/s [Average]
  (min, avg, max) = (685935.254, 726923.276, 761683.579), stdev = 17642.054
  CI (99.9%): [715136.393, 738710.160] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score       Error  Units
ObservableConcatMapEagerTest._Benchmark.benchmark_badCapacityHint  thrpt   30  726923.276 ± 11786.884  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchTest._Benchmark.benchmark_switchMapSingleMapperReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchTest._Benchmark.benchmark_switchMapSingleMapperReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.817 ops/s
# Warmup Iteration   2: 31658.048 ops/s
# Warmup Iteration   3: 91037.354 ops/s
# Warmup Iteration   4: 103184.951 ops/s
# Warmup Iteration   5: 122075.028 ops/s
# Warmup Iteration   6: 100154.196 ops/s
# Warmup Iteration   7: 292825.373 ops/s
# Warmup Iteration   8: 341538.311 ops/s
# Warmup Iteration   9: 356455.104 ops/s
# Warmup Iteration  10: 357574.191 ops/s
# Warmup Iteration  11: 349077.592 ops/s
# Warmup Iteration  12: 352604.333 ops/s
# Warmup Iteration  13: 338525.845 ops/s
# Warmup Iteration  14: 346505.352 ops/s
# Warmup Iteration  15: 353952.602 ops/s
# Warmup Iteration  16: 357636.078 ops/s
# Warmup Iteration  17: 351794.789 ops/s
# Warmup Iteration  18: 353548.283 ops/s
# Warmup Iteration  19: 367479.110 ops/s
# Warmup Iteration  20: 362392.820 ops/s
# Warmup Iteration  21: 341839.032 ops/s
# Warmup Iteration  22: 354702.561 ops/s
# Warmup Iteration  23: 353814.285 ops/s
# Warmup Iteration  24: 321573.300 ops/s
# Warmup Iteration  25: 371626.368 ops/s
# Warmup Iteration  26: 350608.613 ops/s
# Warmup Iteration  27: 354871.570 ops/s
# Warmup Iteration  28: 357019.368 ops/s
# Warmup Iteration  29: 348222.047 ops/s
# Warmup Iteration  30: 363622.535 ops/s
Iteration   1: 332786.835 ops/s
Iteration   2: 346761.723 ops/s
Iteration   3: 371193.849 ops/s
Iteration   4: 343382.867 ops/s
Iteration   5: 373476.679 ops/s
Iteration   6: 342077.068 ops/s
Iteration   7: 354118.063 ops/s
Iteration   8: 364032.171 ops/s
Iteration   9: 361681.051 ops/s
Iteration  10: 359936.144 ops/s
Iteration  11: 366194.081 ops/s
Iteration  12: 354479.835 ops/s
Iteration  13: 363674.727 ops/s
Iteration  14: 359272.544 ops/s
Iteration  15: 347075.420 ops/s
Iteration  16: 352595.668 ops/s
Iteration  17: 370227.802 ops/s
Iteration  18: 345762.487 ops/s
Iteration  19: 338669.130 ops/s
Iteration  20: 357971.655 ops/s
Iteration  21: 365068.576 ops/s
Iteration  22: 361012.656 ops/s
Iteration  23: 357627.774 ops/s
Iteration  24: 361087.091 ops/s
Iteration  25: 354387.102 ops/s
Iteration  26: 359020.515 ops/s
Iteration  27: 362484.146 ops/s
Iteration  28: 348688.562 ops/s
Iteration  29: 358447.878 ops/s
Iteration  30: 346344.755 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchTest._Benchmark.benchmark_switchMapSingleMapperReturnsNull":
  355984.628 ±(99.9%) 6623.562 ops/s [Average]
  (min, avg, max) = (332786.835, 355984.628, 373476.679), stdev = 9913.836
  CI (99.9%): [349361.066, 362608.190] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score      Error  Units
ObservableSwitchTest._Benchmark.benchmark_switchMapSingleMapperReturnsNull  thrpt   30  355984.628 ± 6623.562  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_liftReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_liftReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 159894.586 ops/s
# Warmup Iteration   2: 400848.678 ops/s
# Warmup Iteration   3: 435639.593 ops/s
# Warmup Iteration   4: 475521.809 ops/s
# Warmup Iteration   5: 492223.688 ops/s
# Warmup Iteration   6: 492869.602 ops/s
# Warmup Iteration   7: 466193.325 ops/s
# Warmup Iteration   8: 475663.167 ops/s
# Warmup Iteration   9: 466331.779 ops/s
# Warmup Iteration  10: 483163.978 ops/s
# Warmup Iteration  11: 460537.384 ops/s
# Warmup Iteration  12: 480479.861 ops/s
# Warmup Iteration  13: 481641.707 ops/s
# Warmup Iteration  14: 478804.410 ops/s
# Warmup Iteration  15: 485460.034 ops/s
# Warmup Iteration  16: 483553.999 ops/s
# Warmup Iteration  17: 489116.336 ops/s
# Warmup Iteration  18: 482426.085 ops/s
# Warmup Iteration  19: 495272.924 ops/s
# Warmup Iteration  20: 501236.422 ops/s
# Warmup Iteration  21: 489375.931 ops/s
# Warmup Iteration  22: 492882.551 ops/s
# Warmup Iteration  23: 485329.291 ops/s
# Warmup Iteration  24: 471233.585 ops/s
# Warmup Iteration  25: 506796.572 ops/s
# Warmup Iteration  26: 481505.663 ops/s
# Warmup Iteration  27: 494892.162 ops/s
# Warmup Iteration  28: 508560.283 ops/s
# Warmup Iteration  29: 499411.583 ops/s
# Warmup Iteration  30: 502119.581 ops/s
Iteration   1: 505907.874 ops/s
Iteration   2: 506558.876 ops/s
Iteration   3: 499751.732 ops/s
Iteration   4: 516909.663 ops/s
Iteration   5: 494170.310 ops/s
Iteration   6: 507687.118 ops/s
Iteration   7: 502172.276 ops/s
Iteration   8: 494630.244 ops/s
Iteration   9: 508163.261 ops/s
Iteration  10: 500090.459 ops/s
Iteration  11: 503806.234 ops/s
Iteration  12: 507781.570 ops/s
Iteration  13: 487887.766 ops/s
Iteration  14: 495822.798 ops/s
Iteration  15: 512164.951 ops/s
Iteration  16: 511427.633 ops/s
Iteration  17: 477469.304 ops/s
Iteration  18: 514735.158 ops/s
Iteration  19: 486923.272 ops/s
Iteration  20: 511688.840 ops/s
Iteration  21: 488613.367 ops/s
Iteration  22: 513655.761 ops/s
Iteration  23: 493328.779 ops/s
Iteration  24: 512848.665 ops/s
Iteration  25: 485838.325 ops/s
Iteration  26: 470381.410 ops/s
Iteration  27: 446945.111 ops/s
Iteration  28: 485671.759 ops/s
Iteration  29: 517686.669 ops/s
Iteration  30: 490309.918 ops/s


Result "io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_liftReturnsNull":
  498367.637 ±(99.9%) 10422.824 ops/s [Average]
  (min, avg, max) = (446945.111, 498367.637, 517686.669), stdev = 15600.394
  CI (99.9%): [487944.812, 508790.461] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score       Error  Units
ObservableNullTests._Benchmark.benchmark_liftReturnsNull  thrpt   30  498367.637 ± 10422.824  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromRunnableTest._Benchmark.benchmark_fromRunnableThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromRunnableTest._Benchmark.benchmark_fromRunnableThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 126706.497 ops/s
# Warmup Iteration   2: 540551.977 ops/s
# Warmup Iteration   3: 620962.896 ops/s
# Warmup Iteration   4: 571057.613 ops/s
# Warmup Iteration   5: 576869.279 ops/s
# Warmup Iteration   6: 652403.661 ops/s
# Warmup Iteration   7: 646245.488 ops/s
# Warmup Iteration   8: 642920.262 ops/s
# Warmup Iteration   9: 613489.142 ops/s
# Warmup Iteration  10: 654479.091 ops/s
# Warmup Iteration  11: 649243.424 ops/s
# Warmup Iteration  12: 640053.285 ops/s
# Warmup Iteration  13: 640408.555 ops/s
# Warmup Iteration  14: 647305.635 ops/s
# Warmup Iteration  15: 648317.742 ops/s
# Warmup Iteration  16: 637776.386 ops/s
# Warmup Iteration  17: 667219.721 ops/s
# Warmup Iteration  18: 688864.911 ops/s
# Warmup Iteration  19: 658188.076 ops/s
# Warmup Iteration  20: 685955.573 ops/s
# Warmup Iteration  21: 660658.140 ops/s
# Warmup Iteration  22: 699757.180 ops/s
# Warmup Iteration  23: 684624.442 ops/s
# Warmup Iteration  24: 655322.766 ops/s
# Warmup Iteration  25: 696995.399 ops/s
# Warmup Iteration  26: 651444.771 ops/s
# Warmup Iteration  27: 683935.353 ops/s
# Warmup Iteration  28: 656722.198 ops/s
# Warmup Iteration  29: 689108.928 ops/s
# Warmup Iteration  30: 680222.055 ops/s
Iteration   1: 655837.637 ops/s
Iteration   2: 683896.030 ops/s
Iteration   3: 671850.594 ops/s
Iteration   4: 652245.380 ops/s
Iteration   5: 686535.442 ops/s
Iteration   6: 678620.626 ops/s
Iteration   7: 708650.465 ops/s
Iteration   8: 640515.209 ops/s
Iteration   9: 709608.170 ops/s
Iteration  10: 672567.224 ops/s
Iteration  11: 677274.719 ops/s
Iteration  12: 670897.362 ops/s
Iteration  13: 673090.266 ops/s
Iteration  14: 705387.756 ops/s
Iteration  15: 700957.553 ops/s
Iteration  16: 654785.710 ops/s
Iteration  17: 685871.946 ops/s
Iteration  18: 677662.665 ops/s
Iteration  19: 689896.594 ops/s
Iteration  20: 690631.988 ops/s
Iteration  21: 681503.941 ops/s
Iteration  22: 702945.875 ops/s
Iteration  23: 658985.500 ops/s
Iteration  24: 700054.171 ops/s
Iteration  25: 673376.427 ops/s
Iteration  26: 697040.526 ops/s
Iteration  27: 664708.732 ops/s
Iteration  28: 677013.267 ops/s
Iteration  29: 675199.907 ops/s
Iteration  30: 671818.387 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFromRunnableTest._Benchmark.benchmark_fromRunnableThrows":
  679647.669 ±(99.9%) 11728.227 ops/s [Average]
  (min, avg, max) = (640515.209, 679647.669, 709608.170), stdev = 17554.260
  CI (99.9%): [667919.442, 691375.896] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score       Error  Units
ObservableFromRunnableTest._Benchmark.benchmark_fromRunnableThrows  thrpt   30  679647.669 ± 11728.227  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRetryTest._Benchmark.benchmark_sourceObservableCallsUnsubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRetryTest._Benchmark.benchmark_sourceObservableCallsUnsubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 74685.369 ops/s
# Warmup Iteration   2: 140547.226 ops/s
# Warmup Iteration   3: 159891.881 ops/s
# Warmup Iteration   4: 163735.339 ops/s
# Warmup Iteration   5: 163223.174 ops/s
# Warmup Iteration   6: 156966.926 ops/s
# Warmup Iteration   7: 162653.992 ops/s
# Warmup Iteration   8: 151784.016 ops/s
# Warmup Iteration   9: 157616.400 ops/s
# Warmup Iteration  10: 160706.227 ops/s
# Warmup Iteration  11: 160743.751 ops/s
# Warmup Iteration  12: 170556.162 ops/s
# Warmup Iteration  13: 154329.008 ops/s
# Warmup Iteration  14: 156598.735 ops/s
# Warmup Iteration  15: 166389.726 ops/s
# Warmup Iteration  16: 167374.826 ops/s
# Warmup Iteration  17: 168234.236 ops/s
# Warmup Iteration  18: 173184.287 ops/s
# Warmup Iteration  19: 167191.291 ops/s
# Warmup Iteration  20: 174808.409 ops/s
# Warmup Iteration  21: 169206.758 ops/s
# Warmup Iteration  22: 166803.684 ops/s
# Warmup Iteration  23: 171396.212 ops/s
# Warmup Iteration  24: 167345.264 ops/s
# Warmup Iteration  25: 173767.318 ops/s
# Warmup Iteration  26: 167299.111 ops/s
# Warmup Iteration  27: 167295.846 ops/s
# Warmup Iteration  28: 174205.236 ops/s
# Warmup Iteration  29: 166558.387 ops/s
# Warmup Iteration  30: 175126.162 ops/s
Iteration   1: 167683.882 ops/s
Iteration   2: 172305.687 ops/s
Iteration   3: 169099.502 ops/s
Iteration   4: 167772.725 ops/s
Iteration   5: 178764.538 ops/s
Iteration   6: 164084.230 ops/s
Iteration   7: 171573.759 ops/s
Iteration   8: 169808.519 ops/s
Iteration   9: 169568.914 ops/s
Iteration  10: 173388.572 ops/s
Iteration  11: 167627.824 ops/s
Iteration  12: 175123.948 ops/s
Iteration  13: 170913.487 ops/s
Iteration  14: 169126.821 ops/s
Iteration  15: 167337.612 ops/s
Iteration  16: 169617.387 ops/s
Iteration  17: 162523.509 ops/s
Iteration  18: 171602.859 ops/s
Iteration  19: 164025.002 ops/s
Iteration  20: 173830.307 ops/s
Iteration  21: 126513.248 ops/s
Iteration  22: 168630.316 ops/s
Iteration  23: 175402.725 ops/s
Iteration  24: 162476.297 ops/s
Iteration  25: 167961.849 ops/s
Iteration  26: 172962.839 ops/s
Iteration  27: 169700.163 ops/s
Iteration  28: 170146.766 ops/s
Iteration  29: 171988.401 ops/s
Iteration  30: 167988.343 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryTest._Benchmark.benchmark_sourceObservableCallsUnsubscribe":
  168318.334 ±(99.9%) 5828.401 ops/s [Average]
  (min, avg, max) = (126513.248, 168318.334, 178764.538), stdev = 8723.677
  CI (99.9%): [162489.933, 174146.735] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score      Error  Units
ObservableRetryTest._Benchmark.benchmark_sourceObservableCallsUnsubscribe  thrpt   30  168318.334 ± 5828.401  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableGenerateTest._Benchmark.benchmark_stateSupplierThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableGenerateTest._Benchmark.benchmark_stateSupplierThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 202173.039 ops/s
# Warmup Iteration   2: 600584.730 ops/s
# Warmup Iteration   3: 688246.646 ops/s
# Warmup Iteration   4: 636546.759 ops/s
# Warmup Iteration   5: 669221.276 ops/s
# Warmup Iteration   6: 624219.253 ops/s
# Warmup Iteration   7: 632746.326 ops/s
# Warmup Iteration   8: 641930.224 ops/s
# Warmup Iteration   9: 680369.155 ops/s
# Warmup Iteration  10: 664745.625 ops/s
# Warmup Iteration  11: 658817.199 ops/s
# Warmup Iteration  12: 657318.965 ops/s
# Warmup Iteration  13: 676992.462 ops/s
# Warmup Iteration  14: 661655.948 ops/s
# Warmup Iteration  15: 671335.273 ops/s
# Warmup Iteration  16: 656329.835 ops/s
# Warmup Iteration  17: 704418.064 ops/s
# Warmup Iteration  18: 704392.309 ops/s
# Warmup Iteration  19: 699358.047 ops/s
# Warmup Iteration  20: 731956.974 ops/s
# Warmup Iteration  21: 683549.760 ops/s
# Warmup Iteration  22: 742309.037 ops/s
# Warmup Iteration  23: 726419.846 ops/s
# Warmup Iteration  24: 684591.799 ops/s
# Warmup Iteration  25: 701011.277 ops/s
# Warmup Iteration  26: 731813.677 ops/s
# Warmup Iteration  27: 668965.918 ops/s
# Warmup Iteration  28: 662415.601 ops/s
# Warmup Iteration  29: 736222.880 ops/s
# Warmup Iteration  30: 696681.422 ops/s
Iteration   1: 733509.004 ops/s
Iteration   2: 706556.331 ops/s
Iteration   3: 705690.642 ops/s
Iteration   4: 736541.090 ops/s
Iteration   5: 729672.994 ops/s
Iteration   6: 717788.516 ops/s
Iteration   7: 693501.702 ops/s
Iteration   8: 723495.896 ops/s
Iteration   9: 695567.051 ops/s
Iteration  10: 682407.359 ops/s
Iteration  11: 693650.992 ops/s
Iteration  12: 711911.522 ops/s
Iteration  13: 714791.751 ops/s
Iteration  14: 714010.197 ops/s
Iteration  15: 709411.261 ops/s
Iteration  16: 694209.665 ops/s
Iteration  17: 725535.508 ops/s
Iteration  18: 703508.313 ops/s
Iteration  19: 737980.860 ops/s
Iteration  20: 691745.332 ops/s
Iteration  21: 726692.376 ops/s
Iteration  22: 742543.296 ops/s
Iteration  23: 684127.912 ops/s
Iteration  24: 719303.781 ops/s
Iteration  25: 712155.224 ops/s
Iteration  26: 733000.675 ops/s
Iteration  27: 695642.007 ops/s
Iteration  28: 711457.984 ops/s
Iteration  29: 693279.610 ops/s
Iteration  30: 698900.955 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableGenerateTest._Benchmark.benchmark_stateSupplierThrows":
  711286.327 ±(99.9%) 11307.830 ops/s [Average]
  (min, avg, max) = (682407.359, 711286.327, 742543.296), stdev = 16925.029
  CI (99.9%): [699978.497, 722594.157] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score       Error  Units
ObservableGenerateTest._Benchmark.benchmark_stateSupplierThrows  thrpt   30  711286.327 ± 11307.830  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableCreateTest._Benchmark.benchmark_callbackThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableCreateTest._Benchmark.benchmark_callbackThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 297168.058 ops/s
# Warmup Iteration   2: 550149.378 ops/s
# Warmup Iteration   3: 599212.307 ops/s
# Warmup Iteration   4: 597402.812 ops/s
# Warmup Iteration   5: 670170.611 ops/s
# Warmup Iteration   6: 658556.099 ops/s
# Warmup Iteration   7: 683808.256 ops/s
# Warmup Iteration   8: 646008.283 ops/s
# Warmup Iteration   9: 686669.861 ops/s
# Warmup Iteration  10: 606410.421 ops/s
# Warmup Iteration  11: 643791.896 ops/s
# Warmup Iteration  12: 672010.399 ops/s
# Warmup Iteration  13: 651561.116 ops/s
# Warmup Iteration  14: 692679.531 ops/s
# Warmup Iteration  15: 649208.206 ops/s
# Warmup Iteration  16: 683069.328 ops/s
# Warmup Iteration  17: 721419.165 ops/s
# Warmup Iteration  18: 683153.253 ops/s
# Warmup Iteration  19: 726802.642 ops/s
# Warmup Iteration  20: 692146.308 ops/s
# Warmup Iteration  21: 699566.006 ops/s
# Warmup Iteration  22: 700548.367 ops/s
# Warmup Iteration  23: 705181.595 ops/s
# Warmup Iteration  24: 703861.553 ops/s
# Warmup Iteration  25: 700379.533 ops/s
# Warmup Iteration  26: 703025.683 ops/s
# Warmup Iteration  27: 706757.350 ops/s
# Warmup Iteration  28: 681316.150 ops/s
# Warmup Iteration  29: 721288.831 ops/s
# Warmup Iteration  30: 698727.718 ops/s
Iteration   1: 699720.597 ops/s
Iteration   2: 694805.918 ops/s
Iteration   3: 691482.185 ops/s
Iteration   4: 719708.257 ops/s
Iteration   5: 682246.160 ops/s
Iteration   6: 710785.154 ops/s
Iteration   7: 728816.676 ops/s
Iteration   8: 684065.410 ops/s
Iteration   9: 715795.875 ops/s
Iteration  10: 696121.809 ops/s
Iteration  11: 711837.487 ops/s
Iteration  12: 692241.583 ops/s
Iteration  13: 707682.564 ops/s
Iteration  14: 685207.524 ops/s
Iteration  15: 689420.596 ops/s
Iteration  16: 589223.418 ops/s
Iteration  17: 693289.829 ops/s
Iteration  18: 717015.228 ops/s
Iteration  19: 675262.523 ops/s
Iteration  20: 709473.177 ops/s
Iteration  21: 680130.094 ops/s
Iteration  22: 721830.930 ops/s
Iteration  23: 701026.378 ops/s
Iteration  24: 701755.755 ops/s
Iteration  25: 697816.202 ops/s
Iteration  26: 706232.604 ops/s
Iteration  27: 697498.932 ops/s
Iteration  28: 685911.171 ops/s
Iteration  29: 717378.817 ops/s
Iteration  30: 703282.282 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableCreateTest._Benchmark.benchmark_callbackThrows":
  696902.171 ±(99.9%) 16325.321 ops/s [Average]
  (min, avg, max) = (589223.418, 696902.171, 728816.676), stdev = 24434.974
  CI (99.9%): [680576.850, 713227.492] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score       Error  Units
ObservableCreateTest._Benchmark.benchmark_callbackThrows  thrpt   30  696902.171 ± 16325.321  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableGenerateTest._Benchmark.benchmark_generatorThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableGenerateTest._Benchmark.benchmark_generatorThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 232579.398 ops/s
# Warmup Iteration   2: 510319.172 ops/s
# Warmup Iteration   3: 603601.538 ops/s
# Warmup Iteration   4: 623332.384 ops/s
# Warmup Iteration   5: 605892.836 ops/s
# Warmup Iteration   6: 611677.774 ops/s
# Warmup Iteration   7: 622222.920 ops/s
# Warmup Iteration   8: 606387.050 ops/s
# Warmup Iteration   9: 622899.019 ops/s
# Warmup Iteration  10: 609600.522 ops/s
# Warmup Iteration  11: 589132.384 ops/s
# Warmup Iteration  12: 626479.288 ops/s
# Warmup Iteration  13: 608070.646 ops/s
# Warmup Iteration  14: 618820.688 ops/s
# Warmup Iteration  15: 606696.413 ops/s
# Warmup Iteration  16: 629161.057 ops/s
# Warmup Iteration  17: 631036.209 ops/s
# Warmup Iteration  18: 617277.176 ops/s
# Warmup Iteration  19: 667401.078 ops/s
# Warmup Iteration  20: 606048.588 ops/s
# Warmup Iteration  21: 661347.980 ops/s
# Warmup Iteration  22: 650799.226 ops/s
# Warmup Iteration  23: 635535.962 ops/s
# Warmup Iteration  24: 663850.566 ops/s
# Warmup Iteration  25: 610782.709 ops/s
# Warmup Iteration  26: 650634.596 ops/s
# Warmup Iteration  27: 644507.322 ops/s
# Warmup Iteration  28: 647285.612 ops/s
# Warmup Iteration  29: 668676.877 ops/s
# Warmup Iteration  30: 631259.779 ops/s
Iteration   1: 662057.405 ops/s
Iteration   2: 624709.677 ops/s
Iteration   3: 641101.295 ops/s
Iteration   4: 663296.330 ops/s
Iteration   5: 621420.291 ops/s
Iteration   6: 651243.228 ops/s
Iteration   7: 627956.952 ops/s
Iteration   8: 626848.541 ops/s
Iteration   9: 661800.165 ops/s
Iteration  10: 630431.442 ops/s
Iteration  11: 663795.379 ops/s
Iteration  12: 632231.655 ops/s
Iteration  13: 648852.209 ops/s
Iteration  14: 656080.962 ops/s
Iteration  15: 640310.021 ops/s
Iteration  16: 641950.110 ops/s
Iteration  17: 658752.362 ops/s
Iteration  18: 639960.248 ops/s
Iteration  19: 658050.688 ops/s
Iteration  20: 615577.571 ops/s
Iteration  21: 636027.363 ops/s
Iteration  22: 649218.465 ops/s
Iteration  23: 629821.724 ops/s
Iteration  24: 664428.632 ops/s
Iteration  25: 634394.755 ops/s
Iteration  26: 667799.371 ops/s
Iteration  27: 622179.196 ops/s
Iteration  28: 643588.430 ops/s
Iteration  29: 647968.201 ops/s
Iteration  30: 629266.351 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableGenerateTest._Benchmark.benchmark_generatorThrows":
  643037.301 ±(99.9%) 10155.026 ops/s [Average]
  (min, avg, max) = (615577.571, 643037.301, 667799.371), stdev = 15199.567
  CI (99.9%): [632882.274, 653192.327] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score       Error  Units
ObservableGenerateTest._Benchmark.benchmark_generatorThrows  thrpt   30  643037.301 ± 10155.026  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReplayTest._Benchmark.benchmark_replaySelectorConnectableReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReplayTest._Benchmark.benchmark_replaySelectorConnectableReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 174129.431 ops/s
# Warmup Iteration   2: 496722.393 ops/s
# Warmup Iteration   3: 601802.700 ops/s
# Warmup Iteration   4: 536350.701 ops/s
# Warmup Iteration   5: 608714.183 ops/s
# Warmup Iteration   6: 560205.678 ops/s
# Warmup Iteration   7: 629938.529 ops/s
# Warmup Iteration   8: 607620.150 ops/s
# Warmup Iteration   9: 625703.020 ops/s
# Warmup Iteration  10: 614844.886 ops/s
# Warmup Iteration  11: 612514.029 ops/s
# Warmup Iteration  12: 645233.800 ops/s
# Warmup Iteration  13: 624745.636 ops/s
# Warmup Iteration  14: 596671.623 ops/s
# Warmup Iteration  15: 639497.263 ops/s
# Warmup Iteration  16: 638388.805 ops/s
# Warmup Iteration  17: 634512.307 ops/s
# Warmup Iteration  18: 667581.609 ops/s
# Warmup Iteration  19: 644068.634 ops/s
# Warmup Iteration  20: 651434.351 ops/s
# Warmup Iteration  21: 639282.494 ops/s
# Warmup Iteration  22: 643172.822 ops/s
# Warmup Iteration  23: 647911.949 ops/s
# Warmup Iteration  24: 649870.350 ops/s
# Warmup Iteration  25: 645781.594 ops/s
# Warmup Iteration  26: 630870.445 ops/s
# Warmup Iteration  27: 665218.268 ops/s
# Warmup Iteration  28: 616594.402 ops/s
# Warmup Iteration  29: 683495.036 ops/s
# Warmup Iteration  30: 665886.292 ops/s
Iteration   1: 616370.484 ops/s
Iteration   2: 661900.611 ops/s
Iteration   3: 633413.684 ops/s
Iteration   4: 664152.867 ops/s
Iteration   5: 643187.384 ops/s
Iteration   6: 606026.353 ops/s
Iteration   7: 687994.746 ops/s
Iteration   8: 624970.595 ops/s
Iteration   9: 665905.910 ops/s
Iteration  10: 591817.246 ops/s
Iteration  11: 579879.478 ops/s
Iteration  12: 650420.008 ops/s
Iteration  13: 662115.975 ops/s
Iteration  14: 624690.396 ops/s
Iteration  15: 627578.431 ops/s
Iteration  16: 674763.999 ops/s
Iteration  17: 648175.225 ops/s
Iteration  18: 615784.077 ops/s
Iteration  19: 668984.813 ops/s
Iteration  20: 624153.703 ops/s
Iteration  21: 658740.982 ops/s
Iteration  22: 619350.893 ops/s
Iteration  23: 637323.267 ops/s
Iteration  24: 643853.259 ops/s
Iteration  25: 632307.922 ops/s
Iteration  26: 640439.624 ops/s
Iteration  27: 643961.055 ops/s
Iteration  28: 647679.759 ops/s
Iteration  29: 634876.337 ops/s
Iteration  30: 665621.728 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableReplayTest._Benchmark.benchmark_replaySelectorConnectableReturnsNull":
  639881.360 ±(99.9%) 16422.152 ops/s [Average]
  (min, avg, max) = (579879.478, 639881.360, 687994.746), stdev = 24579.906
  CI (99.9%): [623459.208, 656303.513] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt       Score       Error  Units
ObservableReplayTest._Benchmark.benchmark_replaySelectorConnectableReturnsNull  thrpt   30  639881.360 ± 16422.152  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReplayEagerTruncateTest._Benchmark.benchmark_timeAndSizeNoTerminalTruncationOnTimechange$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReplayEagerTruncateTest._Benchmark.benchmark_timeAndSizeNoTerminalTruncationOnTimechange

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 334123.445 ops/s
# Warmup Iteration   2: 1213963.802 ops/s
# Warmup Iteration   3: 1831859.404 ops/s
# Warmup Iteration   4: 2294160.517 ops/s
# Warmup Iteration   5: 2162148.134 ops/s
# Warmup Iteration   6: 2083889.809 ops/s
# Warmup Iteration   7: 2187874.371 ops/s
# Warmup Iteration   8: 2152543.773 ops/s
# Warmup Iteration   9: 2208301.956 ops/s
# Warmup Iteration  10: 2194115.341 ops/s
# Warmup Iteration  11: 2185772.084 ops/s
# Warmup Iteration  12: 2201450.363 ops/s
# Warmup Iteration  13: 2114506.147 ops/s
# Warmup Iteration  14: 2143541.298 ops/s
# Warmup Iteration  15: 2239129.993 ops/s
# Warmup Iteration  16: 2112907.193 ops/s
# Warmup Iteration  17: 2242300.051 ops/s
# Warmup Iteration  18: 2256177.548 ops/s
# Warmup Iteration  19: 2109748.518 ops/s
# Warmup Iteration  20: 2241752.914 ops/s
# Warmup Iteration  21: 2115356.015 ops/s
# Warmup Iteration  22: 2203060.539 ops/s
# Warmup Iteration  23: 2136583.762 ops/s
# Warmup Iteration  24: 2114721.805 ops/s
# Warmup Iteration  25: 2251262.236 ops/s
# Warmup Iteration  26: 2141137.028 ops/s
# Warmup Iteration  27: 2134318.554 ops/s
# Warmup Iteration  28: 2247145.347 ops/s
# Warmup Iteration  29: 2177301.935 ops/s
# Warmup Iteration  30: 2184053.640 ops/s
Iteration   1: 2111722.833 ops/s
Iteration   2: 2263232.884 ops/s
Iteration   3: 2118768.988 ops/s
Iteration   4: 2178787.293 ops/s
Iteration   5: 2193545.902 ops/s
Iteration   6: 2129199.606 ops/s
Iteration   7: 2164908.940 ops/s
Iteration   8: 2171449.109 ops/s
Iteration   9: 2232256.071 ops/s
Iteration  10: 2100830.439 ops/s
Iteration  11: 2253206.492 ops/s
Iteration  12: 2227163.947 ops/s
Iteration  13: 2070032.638 ops/s
Iteration  14: 2168579.269 ops/s
Iteration  15: 2161147.443 ops/s
Iteration  16: 2208791.860 ops/s
Iteration  17: 2107221.426 ops/s
Iteration  18: 2243859.853 ops/s
Iteration  19: 2177832.414 ops/s
Iteration  20: 2219972.085 ops/s
Iteration  21: 2225460.394 ops/s
Iteration  22: 2184121.420 ops/s
Iteration  23: 2213278.610 ops/s
Iteration  24: 2103888.310 ops/s
Iteration  25: 2263811.557 ops/s
Iteration  26: 2206494.238 ops/s
Iteration  27: 2183942.148 ops/s
Iteration  28: 2186607.993 ops/s
Iteration  29: 2141916.073 ops/s
Iteration  30: 2232600.368 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableReplayEagerTruncateTest._Benchmark.benchmark_timeAndSizeNoTerminalTruncationOnTimechange":
  2181487.687 ±(99.9%) 35155.140 ops/s [Average]
  (min, avg, max) = (2070032.638, 2181487.687, 2263811.557), stdev = 52618.563
  CI (99.9%): [2146332.546, 2216642.827] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                            Mode  Cnt        Score       Error  Units
ObservableReplayEagerTruncateTest._Benchmark.benchmark_timeAndSizeNoTerminalTruncationOnTimechange  thrpt   30  2181487.687 ± 35155.140  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReplayEagerTruncateTest._Benchmark.benchmark_replaySelectorConnectableReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReplayEagerTruncateTest._Benchmark.benchmark_replaySelectorConnectableReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 253904.368 ops/s
# Warmup Iteration   2: 538430.540 ops/s
# Warmup Iteration   3: 621182.871 ops/s
# Warmup Iteration   4: 568140.178 ops/s
# Warmup Iteration   5: 598778.219 ops/s
# Warmup Iteration   6: 588079.290 ops/s
# Warmup Iteration   7: 616696.256 ops/s
# Warmup Iteration   8: 639209.548 ops/s
# Warmup Iteration   9: 612817.800 ops/s
# Warmup Iteration  10: 640898.221 ops/s
# Warmup Iteration  11: 620405.251 ops/s
# Warmup Iteration  12: 631318.103 ops/s
# Warmup Iteration  13: 658019.891 ops/s
# Warmup Iteration  14: 612447.622 ops/s
# Warmup Iteration  15: 648009.079 ops/s
# Warmup Iteration  16: 624652.565 ops/s
# Warmup Iteration  17: 664602.395 ops/s
# Warmup Iteration  18: 672760.032 ops/s
# Warmup Iteration  19: 652825.297 ops/s
# Warmup Iteration  20: 684354.866 ops/s
# Warmup Iteration  21: 658102.270 ops/s
# Warmup Iteration  22: 651157.589 ops/s
# Warmup Iteration  23: 688671.693 ops/s
# Warmup Iteration  24: 653558.854 ops/s
# Warmup Iteration  25: 638504.615 ops/s
# Warmup Iteration  26: 675405.927 ops/s
# Warmup Iteration  27: 626873.977 ops/s
# Warmup Iteration  28: 631150.278 ops/s
# Warmup Iteration  29: 654728.610 ops/s
# Warmup Iteration  30: 671595.978 ops/s
Iteration   1: 627056.108 ops/s
Iteration   2: 664561.321 ops/s
Iteration   3: 678878.812 ops/s
Iteration   4: 661936.417 ops/s
Iteration   5: 520120.674 ops/s
Iteration   6: 640729.781 ops/s
Iteration   7: 690197.541 ops/s
Iteration   8: 659768.214 ops/s
Iteration   9: 660932.354 ops/s
Iteration  10: 684297.894 ops/s
Iteration  11: 657370.211 ops/s
Iteration  12: 667369.545 ops/s
Iteration  13: 658661.462 ops/s
Iteration  14: 671813.897 ops/s
Iteration  15: 657767.887 ops/s
Iteration  16: 671746.809 ops/s
Iteration  17: 637941.904 ops/s
Iteration  18: 668580.212 ops/s
Iteration  19: 655888.831 ops/s
Iteration  20: 644667.844 ops/s
Iteration  21: 641206.331 ops/s
Iteration  22: 667203.423 ops/s
Iteration  23: 679004.329 ops/s
Iteration  24: 625319.609 ops/s
Iteration  25: 685191.019 ops/s
Iteration  26: 624091.123 ops/s
Iteration  27: 684847.532 ops/s
Iteration  28: 673725.979 ops/s
Iteration  29: 645465.249 ops/s
Iteration  30: 653038.239 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableReplayEagerTruncateTest._Benchmark.benchmark_replaySelectorConnectableReturnsNull":
  655312.685 ±(99.9%) 20894.687 ops/s [Average]
  (min, avg, max) = (520120.674, 655312.685, 690197.541), stdev = 31274.186
  CI (99.9%): [634417.998, 676207.372] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                     Mode  Cnt       Score       Error  Units
ObservableReplayEagerTruncateTest._Benchmark.benchmark_replaySelectorConnectableReturnsNull  thrpt   30  655312.685 ± 20894.687  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableUsingTest._Benchmark.benchmark_sourceSupplierReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableUsingTest._Benchmark.benchmark_sourceSupplierReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 242666.467 ops/s
# Warmup Iteration   2: 564172.674 ops/s
# Warmup Iteration   3: 626715.914 ops/s
# Warmup Iteration   4: 587463.207 ops/s
# Warmup Iteration   5: 635832.988 ops/s
# Warmup Iteration   6: 617812.490 ops/s
# Warmup Iteration   7: 606726.661 ops/s
# Warmup Iteration   8: 602490.493 ops/s
# Warmup Iteration   9: 609483.742 ops/s
# Warmup Iteration  10: 617745.982 ops/s
# Warmup Iteration  11: 637810.004 ops/s
# Warmup Iteration  12: 615187.098 ops/s
# Warmup Iteration  13: 631163.544 ops/s
# Warmup Iteration  14: 612534.614 ops/s
# Warmup Iteration  15: 600648.367 ops/s
# Warmup Iteration  16: 610743.006 ops/s
# Warmup Iteration  17: 669980.372 ops/s
# Warmup Iteration  18: 624095.444 ops/s
# Warmup Iteration  19: 617430.701 ops/s
# Warmup Iteration  20: 673892.679 ops/s
# Warmup Iteration  21: 646421.296 ops/s
# Warmup Iteration  22: 670988.674 ops/s
# Warmup Iteration  23: 665844.341 ops/s
# Warmup Iteration  24: 651562.198 ops/s
# Warmup Iteration  25: 614694.089 ops/s
# Warmup Iteration  26: 661257.298 ops/s
# Warmup Iteration  27: 666292.552 ops/s
# Warmup Iteration  28: 645437.669 ops/s
# Warmup Iteration  29: 677445.038 ops/s
# Warmup Iteration  30: 634838.136 ops/s
Iteration   1: 652355.463 ops/s
Iteration   2: 676081.778 ops/s
Iteration   3: 637730.206 ops/s
Iteration   4: 669642.535 ops/s
Iteration   5: 647591.643 ops/s
Iteration   6: 662182.893 ops/s
Iteration   7: 654304.538 ops/s
Iteration   8: 650974.478 ops/s
Iteration   9: 678935.685 ops/s
Iteration  10: 644617.877 ops/s
Iteration  11: 668077.257 ops/s
Iteration  12: 627590.447 ops/s
Iteration  13: 678718.217 ops/s
Iteration  14: 651207.864 ops/s
Iteration  15: 611234.428 ops/s
Iteration  16: 689900.635 ops/s
Iteration  17: 647352.263 ops/s
Iteration  18: 661244.018 ops/s
Iteration  19: 649500.082 ops/s
Iteration  20: 653889.973 ops/s
Iteration  21: 673273.401 ops/s
Iteration  22: 657172.608 ops/s
Iteration  23: 674070.324 ops/s
Iteration  24: 622339.544 ops/s
Iteration  25: 658339.834 ops/s
Iteration  26: 623942.929 ops/s
Iteration  27: 649312.275 ops/s
Iteration  28: 668691.907 ops/s
Iteration  29: 632365.837 ops/s
Iteration  30: 656324.192 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableUsingTest._Benchmark.benchmark_sourceSupplierReturnsNull":
  654298.838 ±(99.9%) 12402.493 ops/s [Average]
  (min, avg, max) = (611234.428, 654298.838, 689900.635), stdev = 18563.470
  CI (99.9%): [641896.344, 666701.331] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score       Error  Units
ObservableUsingTest._Benchmark.benchmark_sourceSupplierReturnsNull  thrpt   30  654298.838 ± 12402.493  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableFromStreamTest._Benchmark.benchmark_streamOfNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableFromStreamTest._Benchmark.benchmark_streamOfNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 132693.873 ops/s
# Warmup Iteration   2: 495300.592 ops/s
# Warmup Iteration   3: 570252.099 ops/s
# Warmup Iteration   4: 564957.201 ops/s
# Warmup Iteration   5: 585500.535 ops/s
# Warmup Iteration   6: 543011.133 ops/s
# Warmup Iteration   7: 634235.030 ops/s
# Warmup Iteration   8: 600730.481 ops/s
# Warmup Iteration   9: 616219.413 ops/s
# Warmup Iteration  10: 627773.447 ops/s
# Warmup Iteration  11: 588628.519 ops/s
# Warmup Iteration  12: 629654.991 ops/s
# Warmup Iteration  13: 611730.723 ops/s
# Warmup Iteration  14: 647777.722 ops/s
# Warmup Iteration  15: 619582.335 ops/s
# Warmup Iteration  16: 605106.688 ops/s
# Warmup Iteration  17: 664853.979 ops/s
# Warmup Iteration  18: 642388.784 ops/s
# Warmup Iteration  19: 671299.556 ops/s
# Warmup Iteration  20: 638039.561 ops/s
# Warmup Iteration  21: 657843.737 ops/s
# Warmup Iteration  22: 668586.309 ops/s
# Warmup Iteration  23: 626949.851 ops/s
# Warmup Iteration  24: 654061.062 ops/s
# Warmup Iteration  25: 638190.669 ops/s
# Warmup Iteration  26: 643695.145 ops/s
# Warmup Iteration  27: 669415.813 ops/s
# Warmup Iteration  28: 635198.146 ops/s
# Warmup Iteration  29: 672522.789 ops/s
# Warmup Iteration  30: 434374.451 ops/s
Iteration   1: 617572.901 ops/s
Iteration   2: 660545.209 ops/s
Iteration   3: 657541.436 ops/s
Iteration   4: 637928.249 ops/s
Iteration   5: 658759.388 ops/s
Iteration   6: 635240.291 ops/s
Iteration   7: 662449.438 ops/s
Iteration   8: 640104.093 ops/s
Iteration   9: 660516.120 ops/s
Iteration  10: 637668.137 ops/s
Iteration  11: 660774.279 ops/s
Iteration  12: 630662.785 ops/s
Iteration  13: 656700.594 ops/s
Iteration  14: 657171.829 ops/s
Iteration  15: 658209.054 ops/s
Iteration  16: 632336.790 ops/s
Iteration  17: 664870.073 ops/s
Iteration  18: 662151.326 ops/s
Iteration  19: 636925.642 ops/s
Iteration  20: 655577.856 ops/s
Iteration  21: 629412.604 ops/s
Iteration  22: 670002.722 ops/s
Iteration  23: 641396.185 ops/s
Iteration  24: 665505.269 ops/s
Iteration  25: 642585.477 ops/s
Iteration  26: 657127.664 ops/s
Iteration  27: 645871.307 ops/s
Iteration  28: 656250.634 ops/s
Iteration  29: 672502.362 ops/s
Iteration  30: 655939.642 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableFromStreamTest._Benchmark.benchmark_streamOfNull":
  650676.645 ±(99.9%) 9234.511 ops/s [Average]
  (min, avg, max) = (617572.901, 650676.645, 672502.362), stdev = 13821.783
  CI (99.9%): [641442.134, 659911.157] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score      Error  Units
ObservableFromStreamTest._Benchmark.benchmark_streamOfNull  thrpt   30  650676.645 ± 9234.511  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableFromStreamTest._Benchmark.benchmark_streamOfNullConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableFromStreamTest._Benchmark.benchmark_streamOfNullConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 118433.439 ops/s
# Warmup Iteration   2: 504461.955 ops/s
# Warmup Iteration   3: 574430.105 ops/s
# Warmup Iteration   4: 519464.167 ops/s
# Warmup Iteration   5: 533981.372 ops/s
# Warmup Iteration   6: 566384.566 ops/s
# Warmup Iteration   7: 600643.576 ops/s
# Warmup Iteration   8: 601698.554 ops/s
# Warmup Iteration   9: 578898.682 ops/s
# Warmup Iteration  10: 589038.364 ops/s
# Warmup Iteration  11: 581754.458 ops/s
# Warmup Iteration  12: 598742.742 ops/s
# Warmup Iteration  13: 579644.101 ops/s
# Warmup Iteration  14: 600911.540 ops/s
# Warmup Iteration  15: 618836.664 ops/s
# Warmup Iteration  16: 563726.908 ops/s
# Warmup Iteration  17: 640366.220 ops/s
# Warmup Iteration  18: 619242.796 ops/s
# Warmup Iteration  19: 595168.441 ops/s
# Warmup Iteration  20: 633489.204 ops/s
# Warmup Iteration  21: 612167.275 ops/s
# Warmup Iteration  22: 615538.653 ops/s
# Warmup Iteration  23: 609327.066 ops/s
# Warmup Iteration  24: 610612.344 ops/s
# Warmup Iteration  25: 611290.820 ops/s
# Warmup Iteration  26: 590159.445 ops/s
# Warmup Iteration  27: 617527.718 ops/s
# Warmup Iteration  28: 632023.046 ops/s
# Warmup Iteration  29: 630027.633 ops/s
# Warmup Iteration  30: 592764.135 ops/s
Iteration   1: 619742.319 ops/s
Iteration   2: 644957.176 ops/s
Iteration   3: 610394.584 ops/s
Iteration   4: 642859.951 ops/s
Iteration   5: 632821.532 ops/s
Iteration   6: 586448.461 ops/s
Iteration   7: 640536.484 ops/s
Iteration   8: 604919.470 ops/s
Iteration   9: 624747.580 ops/s
Iteration  10: 599171.906 ops/s
Iteration  11: 643977.720 ops/s
Iteration  12: 638949.803 ops/s
Iteration  13: 587934.694 ops/s
Iteration  14: 623003.818 ops/s
Iteration  15: 606377.006 ops/s
Iteration  16: 617113.952 ops/s
Iteration  17: 608810.691 ops/s
Iteration  18: 617404.638 ops/s
Iteration  19: 618491.910 ops/s
Iteration  20: 620016.916 ops/s
Iteration  21: 623174.303 ops/s
Iteration  22: 609842.915 ops/s
Iteration  23: 640224.076 ops/s
Iteration  24: 639582.324 ops/s
Iteration  25: 587375.812 ops/s
Iteration  26: 650223.704 ops/s
Iteration  27: 601442.375 ops/s
Iteration  28: 617929.896 ops/s
Iteration  29: 632759.149 ops/s
Iteration  30: 602622.585 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableFromStreamTest._Benchmark.benchmark_streamOfNullConditional":
  619795.258 ±(99.9%) 12173.887 ops/s [Average]
  (min, avg, max) = (586448.461, 619795.258, 650223.704), stdev = 18221.303
  CI (99.9%): [607621.371, 631969.146] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score       Error  Units
ObservableFromStreamTest._Benchmark.benchmark_streamOfNullConditional  thrpt   30  619795.258 ± 12173.887  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableGenerateTest._Benchmark.benchmark_multipleOnNext$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableGenerateTest._Benchmark.benchmark_multipleOnNext

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 177413.466 ops/s
# Warmup Iteration   2: 502848.291 ops/s
# Warmup Iteration   3: 560673.195 ops/s
# Warmup Iteration   4: 496782.428 ops/s
# Warmup Iteration   5: 581532.612 ops/s
# Warmup Iteration   6: 483019.366 ops/s
# Warmup Iteration   7: 587205.225 ops/s
# Warmup Iteration   8: 552296.210 ops/s
# Warmup Iteration   9: 565340.534 ops/s
# Warmup Iteration  10: 593431.609 ops/s
# Warmup Iteration  11: 567650.975 ops/s
# Warmup Iteration  12: 587724.771 ops/s
# Warmup Iteration  13: 570341.012 ops/s
# Warmup Iteration  14: 586268.549 ops/s
# Warmup Iteration  15: 579051.999 ops/s
# Warmup Iteration  16: 582507.829 ops/s
# Warmup Iteration  17: 592300.820 ops/s
# Warmup Iteration  18: 588818.162 ops/s
# Warmup Iteration  19: 612180.315 ops/s
# Warmup Iteration  20: 600958.894 ops/s
# Warmup Iteration  21: 628398.183 ops/s
# Warmup Iteration  22: 608664.549 ops/s
# Warmup Iteration  23: 588671.047 ops/s
# Warmup Iteration  24: 622139.942 ops/s
# Warmup Iteration  25: 479185.485 ops/s
# Warmup Iteration  26: 588629.004 ops/s
# Warmup Iteration  27: 612572.780 ops/s
# Warmup Iteration  28: 601262.922 ops/s
# Warmup Iteration  29: 622844.396 ops/s
# Warmup Iteration  30: 579758.984 ops/s
Iteration   1: 607756.541 ops/s
Iteration   2: 605886.059 ops/s
Iteration   3: 593620.235 ops/s
Iteration   4: 625607.381 ops/s
Iteration   5: 579890.922 ops/s
Iteration   6: 593030.638 ops/s
Iteration   7: 610803.260 ops/s
Iteration   8: 584613.574 ops/s
Iteration   9: 609301.293 ops/s
Iteration  10: 593797.702 ops/s
Iteration  11: 612821.255 ops/s
Iteration  12: 599533.744 ops/s
Iteration  13: 605726.757 ops/s
Iteration  14: 590177.620 ops/s
Iteration  15: 604415.920 ops/s
Iteration  16: 593399.376 ops/s
Iteration  17: 604754.507 ops/s
Iteration  18: 587881.657 ops/s
Iteration  19: 627926.440 ops/s
Iteration  20: 592540.531 ops/s
Iteration  21: 606392.572 ops/s
Iteration  22: 588128.201 ops/s
Iteration  23: 608290.180 ops/s
Iteration  24: 587093.323 ops/s
Iteration  25: 593936.656 ops/s
Iteration  26: 630073.583 ops/s
Iteration  27: 583302.810 ops/s
Iteration  28: 593684.870 ops/s
Iteration  29: 614871.772 ops/s
Iteration  30: 590369.734 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableGenerateTest._Benchmark.benchmark_multipleOnNext":
  600654.304 ±(99.9%) 8827.507 ops/s [Average]
  (min, avg, max) = (579890.922, 600654.304, 630073.583), stdev = 13212.598
  CI (99.9%): [591826.797, 609481.811] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score      Error  Units
ObservableGenerateTest._Benchmark.benchmark_multipleOnNext  thrpt   30  600654.304 ± 8827.507  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableMapOptionalTest._Benchmark.benchmark_crashDropsOnNexts$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableMapOptionalTest._Benchmark.benchmark_crashDropsOnNexts

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 151596.840 ops/s
# Warmup Iteration   2: 489530.661 ops/s
# Warmup Iteration   3: 544591.904 ops/s
# Warmup Iteration   4: 509844.251 ops/s
# Warmup Iteration   5: 572504.955 ops/s
# Warmup Iteration   6: 554954.860 ops/s
# Warmup Iteration   7: 588361.337 ops/s
# Warmup Iteration   8: 584649.646 ops/s
# Warmup Iteration   9: 551914.119 ops/s
# Warmup Iteration  10: 589120.548 ops/s
# Warmup Iteration  11: 544095.420 ops/s
# Warmup Iteration  12: 565372.269 ops/s
# Warmup Iteration  13: 590100.981 ops/s
# Warmup Iteration  14: 575908.700 ops/s
# Warmup Iteration  15: 557946.905 ops/s
# Warmup Iteration  16: 562055.044 ops/s
# Warmup Iteration  17: 578691.311 ops/s
# Warmup Iteration  18: 585115.820 ops/s
# Warmup Iteration  19: 589022.501 ops/s
# Warmup Iteration  20: 585353.066 ops/s
# Warmup Iteration  21: 608504.802 ops/s
# Warmup Iteration  22: 600616.215 ops/s
# Warmup Iteration  23: 576968.461 ops/s
# Warmup Iteration  24: 610963.347 ops/s
# Warmup Iteration  25: 554028.700 ops/s
# Warmup Iteration  26: 592919.237 ops/s
# Warmup Iteration  27: 614105.664 ops/s
# Warmup Iteration  28: 614026.896 ops/s
# Warmup Iteration  29: 582618.037 ops/s
# Warmup Iteration  30: 609850.380 ops/s
Iteration   1: 577519.156 ops/s
Iteration   2: 588408.335 ops/s
Iteration   3: 623383.307 ops/s
Iteration   4: 606750.066 ops/s
Iteration   5: 574926.991 ops/s
Iteration   6: 586864.230 ops/s
Iteration   7: 598969.832 ops/s
Iteration   8: 600935.740 ops/s
Iteration   9: 598943.082 ops/s
Iteration  10: 565073.474 ops/s
Iteration  11: 598229.515 ops/s
Iteration  12: 586242.254 ops/s
Iteration  13: 605641.576 ops/s
Iteration  14: 584177.115 ops/s
Iteration  15: 583500.109 ops/s
Iteration  16: 584044.074 ops/s
Iteration  17: 604829.520 ops/s
Iteration  18: 582846.825 ops/s
Iteration  19: 623816.736 ops/s
Iteration  20: 609241.508 ops/s
Iteration  21: 569750.685 ops/s
Iteration  22: 618753.026 ops/s
Iteration  23: 579020.006 ops/s
Iteration  24: 591465.909 ops/s
Iteration  25: 570574.264 ops/s
Iteration  26: 600860.879 ops/s
Iteration  27: 606539.526 ops/s
Iteration  28: 589367.110 ops/s
Iteration  29: 587931.351 ops/s
Iteration  30: 585967.592 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableMapOptionalTest._Benchmark.benchmark_crashDropsOnNexts":
  592819.126 ±(99.9%) 10249.934 ops/s [Average]
  (min, avg, max) = (565073.474, 592819.126, 623816.736), stdev = 15341.621
  CI (99.9%): [582569.192, 603069.061] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score       Error  Units
ObservableMapOptionalTest._Benchmark.benchmark_crashDropsOnNexts  thrpt   30  592819.126 ± 10249.934  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReplayTest._Benchmark.benchmark_replaySelectorReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReplayTest._Benchmark.benchmark_replaySelectorReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 147281.439 ops/s
# Warmup Iteration   2: 500146.536 ops/s
# Warmup Iteration   3: 593463.770 ops/s
# Warmup Iteration   4: 600950.067 ops/s
# Warmup Iteration   5: 617719.139 ops/s
# Warmup Iteration   6: 597115.722 ops/s
# Warmup Iteration   7: 599473.027 ops/s
# Warmup Iteration   8: 589332.353 ops/s
# Warmup Iteration   9: 609892.064 ops/s
# Warmup Iteration  10: 607663.660 ops/s
# Warmup Iteration  11: 606099.262 ops/s
# Warmup Iteration  12: 591605.262 ops/s
# Warmup Iteration  13: 589880.416 ops/s
# Warmup Iteration  14: 606712.221 ops/s
# Warmup Iteration  15: 643226.206 ops/s
# Warmup Iteration  16: 608971.644 ops/s
# Warmup Iteration  17: 649461.590 ops/s
# Warmup Iteration  18: 653436.589 ops/s
# Warmup Iteration  19: 579407.520 ops/s
# Warmup Iteration  20: 618142.986 ops/s
# Warmup Iteration  21: 631874.978 ops/s
# Warmup Iteration  22: 654978.105 ops/s
# Warmup Iteration  23: 642803.543 ops/s
# Warmup Iteration  24: 645643.443 ops/s
# Warmup Iteration  25: 647912.085 ops/s
# Warmup Iteration  26: 630127.771 ops/s
# Warmup Iteration  27: 648454.744 ops/s
# Warmup Iteration  28: 662966.945 ops/s
# Warmup Iteration  29: 644840.201 ops/s
# Warmup Iteration  30: 659475.244 ops/s
Iteration   1: 639278.833 ops/s
Iteration   2: 627564.884 ops/s
Iteration   3: 678586.777 ops/s
Iteration   4: 634117.576 ops/s
Iteration   5: 654716.465 ops/s
Iteration   6: 642415.609 ops/s
Iteration   7: 662221.714 ops/s
Iteration   8: 661532.206 ops/s
Iteration   9: 621121.661 ops/s
Iteration  10: 678004.635 ops/s
Iteration  11: 641372.202 ops/s
Iteration  12: 641615.470 ops/s
Iteration  13: 670179.157 ops/s
Iteration  14: 648295.664 ops/s
Iteration  15: 652441.237 ops/s
Iteration  16: 639851.265 ops/s
Iteration  17: 661674.200 ops/s
Iteration  18: 636255.003 ops/s
Iteration  19: 639209.226 ops/s
Iteration  20: 664138.511 ops/s
Iteration  21: 635641.083 ops/s
Iteration  22: 635338.283 ops/s
Iteration  23: 666435.606 ops/s
Iteration  24: 644622.842 ops/s
Iteration  25: 663464.439 ops/s
Iteration  26: 642767.544 ops/s
Iteration  27: 658696.998 ops/s
Iteration  28: 647314.625 ops/s
Iteration  29: 651342.947 ops/s
Iteration  30: 650607.409 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableReplayTest._Benchmark.benchmark_replaySelectorReturnsNull":
  649694.136 ±(99.9%) 9617.619 ops/s [Average]
  (min, avg, max) = (621121.661, 649694.136, 678586.777), stdev = 14395.200
  CI (99.9%): [640076.517, 659311.755] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score      Error  Units
ObservableReplayTest._Benchmark.benchmark_replaySelectorReturnsNull  thrpt   30  649694.136 ± 9617.619  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableFlatMapStreamTest._Benchmark.benchmark_eventsIgnoredAfterDispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableFlatMapStreamTest._Benchmark.benchmark_eventsIgnoredAfterDispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 469129.223 ops/s
# Warmup Iteration   2: 2698897.611 ops/s
# Warmup Iteration   3: 4279655.151 ops/s
# Warmup Iteration   4: 3953416.104 ops/s
# Warmup Iteration   5: 4135648.954 ops/s
# Warmup Iteration   6: 3923634.380 ops/s
# Warmup Iteration   7: 3493420.059 ops/s
# Warmup Iteration   8: 4083442.195 ops/s
# Warmup Iteration   9: 4101839.574 ops/s
# Warmup Iteration  10: 4054803.320 ops/s
# Warmup Iteration  11: 4027278.908 ops/s
# Warmup Iteration  12: 4054883.790 ops/s
# Warmup Iteration  13: 4183305.937 ops/s
# Warmup Iteration  14: 4005298.139 ops/s
# Warmup Iteration  15: 4105591.477 ops/s
# Warmup Iteration  16: 4012836.224 ops/s
# Warmup Iteration  17: 4124244.560 ops/s
# Warmup Iteration  18: 4071326.776 ops/s
# Warmup Iteration  19: 4049354.345 ops/s
# Warmup Iteration  20: 4135983.630 ops/s
# Warmup Iteration  21: 4041659.465 ops/s
# Warmup Iteration  22: 4050383.661 ops/s
# Warmup Iteration  23: 4091302.226 ops/s
# Warmup Iteration  24: 4039672.051 ops/s
# Warmup Iteration  25: 4160470.982 ops/s
# Warmup Iteration  26: 3970568.026 ops/s
# Warmup Iteration  27: 4089648.124 ops/s
# Warmup Iteration  28: 3994968.509 ops/s
# Warmup Iteration  29: 4054507.914 ops/s
# Warmup Iteration  30: 4090825.895 ops/s
Iteration   1: 4087691.613 ops/s
Iteration   2: 4184871.152 ops/s
Iteration   3: 3938166.210 ops/s
Iteration   4: 4021748.140 ops/s
Iteration   5: 4068508.884 ops/s
Iteration   6: 3952373.117 ops/s
Iteration   7: 4163504.828 ops/s
Iteration   8: 3999075.513 ops/s
Iteration   9: 3946831.233 ops/s
Iteration  10: 4069888.790 ops/s
Iteration  11: 4076137.127 ops/s
Iteration  12: 4225157.531 ops/s
Iteration  13: 3869509.533 ops/s
Iteration  14: 3934116.194 ops/s
Iteration  15: 4083181.579 ops/s
Iteration  16: 4285516.220 ops/s
Iteration  17: 3921321.668 ops/s
Iteration  18: 4099019.837 ops/s
Iteration  19: 3997400.257 ops/s
Iteration  20: 4112028.804 ops/s
Iteration  21: 3994544.499 ops/s
Iteration  22: 4104500.052 ops/s
Iteration  23: 3957028.702 ops/s
Iteration  24: 4047478.464 ops/s
Iteration  25: 4064933.850 ops/s
Iteration  26: 4038731.586 ops/s
Iteration  27: 4131537.311 ops/s
Iteration  28: 4054480.349 ops/s
Iteration  29: 3982493.871 ops/s
Iteration  30: 4129622.690 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableFlatMapStreamTest._Benchmark.benchmark_eventsIgnoredAfterDispose":
  4051379.987 ±(99.9%) 63427.980 ops/s [Average]
  (min, avg, max) = (3869509.533, 4051379.987, 4285516.220), stdev = 94936.022
  CI (99.9%): [3987952.006, 4114807.967] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score       Error  Units
ObservableFlatMapStreamTest._Benchmark.benchmark_eventsIgnoredAfterDispose  thrpt   30  4051379.987 ± 63427.980  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReplayTest._Benchmark.benchmark_timedNoOutdatedData$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReplayTest._Benchmark.benchmark_timedNoOutdatedData

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 138960.786 ops/s
# Warmup Iteration   2: 646403.634 ops/s
# Warmup Iteration   3: 1178837.574 ops/s
# Warmup Iteration   4: 1247706.125 ops/s
# Warmup Iteration   5: 1282870.406 ops/s
# Warmup Iteration   6: 1136041.171 ops/s
# Warmup Iteration   7: 1280007.600 ops/s
# Warmup Iteration   8: 1333835.626 ops/s
# Warmup Iteration   9: 1288737.461 ops/s
# Warmup Iteration  10: 1338611.349 ops/s
# Warmup Iteration  11: 1253063.616 ops/s
# Warmup Iteration  12: 1346594.033 ops/s
# Warmup Iteration  13: 1257499.864 ops/s
# Warmup Iteration  14: 1045643.709 ops/s
# Warmup Iteration  15: 1301249.635 ops/s
# Warmup Iteration  16: 1270519.591 ops/s
# Warmup Iteration  17: 1314663.481 ops/s
# Warmup Iteration  18: 1292077.893 ops/s
# Warmup Iteration  19: 1338121.921 ops/s
# Warmup Iteration  20: 1267312.383 ops/s
# Warmup Iteration  21: 1267678.866 ops/s
# Warmup Iteration  22: 1331212.950 ops/s
# Warmup Iteration  23: 1256443.186 ops/s
# Warmup Iteration  24: 1314193.354 ops/s
# Warmup Iteration  25: 1313291.554 ops/s
# Warmup Iteration  26: 1254802.135 ops/s
# Warmup Iteration  27: 1327626.550 ops/s
# Warmup Iteration  28: 1257181.741 ops/s
# Warmup Iteration  29: 1261263.793 ops/s
# Warmup Iteration  30: 1332054.720 ops/s
Iteration   1: 1278186.110 ops/s
Iteration   2: 1271600.775 ops/s
Iteration   3: 1322652.324 ops/s
Iteration   4: 1290577.707 ops/s
Iteration   5: 1340110.937 ops/s
Iteration   6: 1328819.067 ops/s
Iteration   7: 1277764.247 ops/s
Iteration   8: 1324658.431 ops/s
Iteration   9: 1265012.377 ops/s
Iteration  10: 1321536.693 ops/s
Iteration  11: 1314225.354 ops/s
Iteration  12: 1308695.774 ops/s
Iteration  13: 1298601.672 ops/s
Iteration  14: 1297380.718 ops/s
Iteration  15: 1304258.079 ops/s
Iteration  16: 1304400.286 ops/s
Iteration  17: 1300107.492 ops/s
Iteration  18: 1282723.755 ops/s
Iteration  19: 1319453.046 ops/s
Iteration  20: 1302951.536 ops/s
Iteration  21: 1246754.121 ops/s
Iteration  22: 1290740.392 ops/s
Iteration  23: 1339816.122 ops/s
Iteration  24: 1245483.898 ops/s
Iteration  25: 1323547.315 ops/s
Iteration  26: 1298304.660 ops/s
Iteration  27: 1303314.592 ops/s
Iteration  28: 1270179.018 ops/s
Iteration  29: 1287415.884 ops/s
Iteration  30: 1345627.842 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableReplayTest._Benchmark.benchmark_timedNoOutdatedData":
  1300163.341 ±(99.9%) 17235.413 ops/s [Average]
  (min, avg, max) = (1245483.898, 1300163.341, 1345627.842), stdev = 25797.156
  CI (99.9%): [1282927.928, 1317398.753] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
ObservableReplayTest._Benchmark.benchmark_timedNoOutdatedData  thrpt   30  1300163.341 ± 17235.413  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableFromStreamTest._Benchmark.benchmark_hasNextCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableFromStreamTest._Benchmark.benchmark_hasNextCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 154901.108 ops/s
# Warmup Iteration   2: 445581.298 ops/s
# Warmup Iteration   3: 498765.036 ops/s
# Warmup Iteration   4: 433842.013 ops/s
# Warmup Iteration   5: 528634.165 ops/s
# Warmup Iteration   6: 512254.723 ops/s
# Warmup Iteration   7: 512510.282 ops/s
# Warmup Iteration   8: 530290.716 ops/s
# Warmup Iteration   9: 508354.786 ops/s
# Warmup Iteration  10: 505325.439 ops/s
# Warmup Iteration  11: 523100.112 ops/s
# Warmup Iteration  12: 500292.849 ops/s
# Warmup Iteration  13: 514026.754 ops/s
# Warmup Iteration  14: 527283.565 ops/s
# Warmup Iteration  15: 502078.112 ops/s
# Warmup Iteration  16: 516911.689 ops/s
# Warmup Iteration  17: 525191.209 ops/s
# Warmup Iteration  18: 536191.579 ops/s
# Warmup Iteration  19: 565116.888 ops/s
# Warmup Iteration  20: 513831.240 ops/s
# Warmup Iteration  21: 555919.811 ops/s
# Warmup Iteration  22: 562536.327 ops/s
# Warmup Iteration  23: 521748.657 ops/s
# Warmup Iteration  24: 552130.499 ops/s
# Warmup Iteration  25: 533286.271 ops/s
# Warmup Iteration  26: 552584.039 ops/s
# Warmup Iteration  27: 542719.251 ops/s
# Warmup Iteration  28: 538201.876 ops/s
# Warmup Iteration  29: 549240.309 ops/s
# Warmup Iteration  30: 520951.528 ops/s
Iteration   1: 558330.550 ops/s
Iteration   2: 529550.905 ops/s
Iteration   3: 555707.129 ops/s
Iteration   4: 532055.927 ops/s
Iteration   5: 537929.518 ops/s
Iteration   6: 541157.365 ops/s
Iteration   7: 535308.893 ops/s
Iteration   8: 548507.027 ops/s
Iteration   9: 522529.041 ops/s
Iteration  10: 551477.214 ops/s
Iteration  11: 529729.722 ops/s
Iteration  12: 552924.900 ops/s
Iteration  13: 548025.092 ops/s
Iteration  14: 531255.468 ops/s
Iteration  15: 536799.015 ops/s
Iteration  16: 548963.550 ops/s
Iteration  17: 541951.415 ops/s
Iteration  18: 559248.414 ops/s
Iteration  19: 550611.281 ops/s
Iteration  20: 524307.893 ops/s
Iteration  21: 558672.072 ops/s
Iteration  22: 532958.303 ops/s
Iteration  23: 549761.021 ops/s
Iteration  24: 534940.352 ops/s
Iteration  25: 530764.004 ops/s
Iteration  26: 538525.884 ops/s
Iteration  27: 541402.547 ops/s
Iteration  28: 544158.786 ops/s
Iteration  29: 517832.610 ops/s
Iteration  30: 527207.743 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableFromStreamTest._Benchmark.benchmark_hasNextCrash":
  540419.788 ±(99.9%) 7652.654 ops/s [Average]
  (min, avg, max) = (517832.610, 540419.788, 559248.414), stdev = 11454.134
  CI (99.9%): [532767.134, 548072.442] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score      Error  Units
ObservableFromStreamTest._Benchmark.benchmark_hasNextCrash  thrpt   30  540419.788 ± 7652.654  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReplayEagerTruncateTest._Benchmark.benchmark_timedNoOutdatedData$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReplayEagerTruncateTest._Benchmark.benchmark_timedNoOutdatedData

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 138773.659 ops/s
# Warmup Iteration   2: 464590.233 ops/s
# Warmup Iteration   3: 956680.784 ops/s
# Warmup Iteration   4: 1186959.515 ops/s
# Warmup Iteration   5: 1288689.899 ops/s
# Warmup Iteration   6: 1203624.346 ops/s
# Warmup Iteration   7: 1235967.804 ops/s
# Warmup Iteration   8: 1299652.917 ops/s
# Warmup Iteration   9: 1029545.902 ops/s
# Warmup Iteration  10: 1208991.375 ops/s
# Warmup Iteration  11: 1229485.050 ops/s
# Warmup Iteration  12: 1244302.769 ops/s
# Warmup Iteration  13: 1256032.622 ops/s
# Warmup Iteration  14: 1187207.010 ops/s
# Warmup Iteration  15: 1277102.191 ops/s
# Warmup Iteration  16: 1236718.048 ops/s
# Warmup Iteration  17: 1234734.037 ops/s
# Warmup Iteration  18: 1234780.703 ops/s
# Warmup Iteration  19: 1236681.697 ops/s
# Warmup Iteration  20: 1280501.608 ops/s
# Warmup Iteration  21: 1231152.372 ops/s
# Warmup Iteration  22: 1274225.107 ops/s
# Warmup Iteration  23: 1244724.134 ops/s
# Warmup Iteration  24: 1202248.475 ops/s
# Warmup Iteration  25: 1227577.488 ops/s
# Warmup Iteration  26: 1235643.936 ops/s
# Warmup Iteration  27: 1231563.371 ops/s
# Warmup Iteration  28: 1254728.746 ops/s
# Warmup Iteration  29: 1210990.042 ops/s
# Warmup Iteration  30: 1241714.242 ops/s
Iteration   1: 1246451.323 ops/s
Iteration   2: 1228712.953 ops/s
Iteration   3: 1271338.575 ops/s
Iteration   4: 1207621.017 ops/s
Iteration   5: 1210482.195 ops/s
Iteration   6: 1259809.711 ops/s
Iteration   7: 1232793.702 ops/s
Iteration   8: 1250118.838 ops/s
Iteration   9: 1190738.539 ops/s
Iteration  10: 1276149.128 ops/s
Iteration  11: 1207299.230 ops/s
Iteration  12: 1186751.832 ops/s
Iteration  13: 1301767.565 ops/s
Iteration  14: 1185333.337 ops/s
Iteration  15: 1237230.508 ops/s
Iteration  16: 1284502.829 ops/s
Iteration  17: 1215956.203 ops/s
Iteration  18: 1303430.858 ops/s
Iteration  19: 1216025.887 ops/s
Iteration  20: 1251017.940 ops/s
Iteration  21: 1221655.075 ops/s
Iteration  22: 1257492.919 ops/s
Iteration  23: 1220556.197 ops/s
Iteration  24: 1293124.261 ops/s
Iteration  25: 1199048.907 ops/s
Iteration  26: 1275875.753 ops/s
Iteration  27: 1215083.682 ops/s
Iteration  28: 1248174.131 ops/s
Iteration  29: 1259396.605 ops/s
Iteration  30: 1220131.633 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableReplayEagerTruncateTest._Benchmark.benchmark_timedNoOutdatedData":
  1239135.711 ±(99.9%) 22737.635 ops/s [Average]
  (min, avg, max) = (1185333.337, 1239135.711, 1303430.858), stdev = 34032.624
  CI (99.9%): [1216398.076, 1261873.346] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score       Error  Units
ObservableReplayEagerTruncateTest._Benchmark.benchmark_timedNoOutdatedData  thrpt   30  1239135.711 ± 22737.635  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableFromStreamTest._Benchmark.benchmark_closeCalledOnItemCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableFromStreamTest._Benchmark.benchmark_closeCalledOnItemCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 139987.230 ops/s
# Warmup Iteration   2: 458546.741 ops/s
# Warmup Iteration   3: 548273.313 ops/s
# Warmup Iteration   4: 517908.994 ops/s
# Warmup Iteration   5: 505744.899 ops/s
# Warmup Iteration   6: 588808.075 ops/s
# Warmup Iteration   7: 576491.025 ops/s
# Warmup Iteration   8: 555384.752 ops/s
# Warmup Iteration   9: 586655.134 ops/s
# Warmup Iteration  10: 565639.347 ops/s
# Warmup Iteration  11: 575842.224 ops/s
# Warmup Iteration  12: 581898.044 ops/s
# Warmup Iteration  13: 569604.311 ops/s
# Warmup Iteration  14: 592684.922 ops/s
# Warmup Iteration  15: 574930.025 ops/s
# Warmup Iteration  16: 576415.765 ops/s
# Warmup Iteration  17: 609652.474 ops/s
# Warmup Iteration  18: 572502.023 ops/s
# Warmup Iteration  19: 604343.845 ops/s
# Warmup Iteration  20: 608483.250 ops/s
# Warmup Iteration  21: 604536.134 ops/s
# Warmup Iteration  22: 583388.445 ops/s
# Warmup Iteration  23: 603720.177 ops/s
# Warmup Iteration  24: 593753.608 ops/s
# Warmup Iteration  25: 604687.620 ops/s
# Warmup Iteration  26: 586236.935 ops/s
# Warmup Iteration  27: 619200.326 ops/s
# Warmup Iteration  28: 614985.056 ops/s
# Warmup Iteration  29: 576703.650 ops/s
# Warmup Iteration  30: 607287.647 ops/s
Iteration   1: 588458.348 ops/s
Iteration   2: 571471.961 ops/s
Iteration   3: 616832.035 ops/s
Iteration   4: 578979.699 ops/s
Iteration   5: 603243.131 ops/s
Iteration   6: 592748.649 ops/s
Iteration   7: 595481.615 ops/s
Iteration   8: 615622.472 ops/s
Iteration   9: 594806.078 ops/s
Iteration  10: 606630.334 ops/s
Iteration  11: 589924.620 ops/s
Iteration  12: 617324.516 ops/s
Iteration  13: 581808.479 ops/s
Iteration  14: 599895.631 ops/s
Iteration  15: 612643.805 ops/s
Iteration  16: 611794.511 ops/s
Iteration  17: 584408.184 ops/s
Iteration  18: 600260.595 ops/s
Iteration  19: 587031.640 ops/s
Iteration  20: 590979.801 ops/s
Iteration  21: 563626.243 ops/s
Iteration  22: 603260.147 ops/s
Iteration  23: 621781.626 ops/s
Iteration  24: 578758.461 ops/s
Iteration  25: 611258.239 ops/s
Iteration  26: 601191.614 ops/s
Iteration  27: 614923.791 ops/s
Iteration  28: 589657.453 ops/s
Iteration  29: 607371.607 ops/s
Iteration  30: 610409.391 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableFromStreamTest._Benchmark.benchmark_closeCalledOnItemCrash":
  598086.156 ±(99.9%) 9898.074 ops/s [Average]
  (min, avg, max) = (563626.243, 598086.156, 621781.626), stdev = 14814.973
  CI (99.9%): [588188.081, 607984.230] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score      Error  Units
ObservableFromStreamTest._Benchmark.benchmark_closeCalledOnItemCrash  thrpt   30  598086.156 ± 9898.074  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDelaySubscriptionOtherTest._Benchmark.benchmark_badSourceOther$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDelaySubscriptionOtherTest._Benchmark.benchmark_badSourceOther

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 46968.378 ops/s
# Warmup Iteration   2: 196598.218 ops/s
# Warmup Iteration   3: 194106.415 ops/s
# Warmup Iteration   4: 159335.313 ops/s
# Warmup Iteration   5: 222195.456 ops/s
# Warmup Iteration   6: 234996.546 ops/s
# Warmup Iteration   7: 233555.229 ops/s
# Warmup Iteration   8: 227295.890 ops/s
# Warmup Iteration   9: 239643.489 ops/s
# Warmup Iteration  10: 231886.537 ops/s
# Warmup Iteration  11: 228668.598 ops/s
# Warmup Iteration  12: 237838.501 ops/s
# Warmup Iteration  13: 231413.730 ops/s
# Warmup Iteration  14: 236938.840 ops/s
# Warmup Iteration  15: 230878.025 ops/s
# Warmup Iteration  16: 242783.973 ops/s
# Warmup Iteration  17: 239891.651 ops/s
# Warmup Iteration  18: 245499.938 ops/s
# Warmup Iteration  19: 240456.442 ops/s
# Warmup Iteration  20: 252075.874 ops/s
# Warmup Iteration  21: 232305.230 ops/s
# Warmup Iteration  22: 249208.130 ops/s
# Warmup Iteration  23: 241152.055 ops/s
# Warmup Iteration  24: 243493.764 ops/s
# Warmup Iteration  25: 247901.799 ops/s
# Warmup Iteration  26: 241009.955 ops/s
# Warmup Iteration  27: 245581.824 ops/s
# Warmup Iteration  28: 232775.240 ops/s
# Warmup Iteration  29: 243411.889 ops/s
# Warmup Iteration  30: 247648.088 ops/s
Iteration   1: 238858.764 ops/s
Iteration   2: 245617.444 ops/s
Iteration   3: 237692.614 ops/s
Iteration   4: 238076.490 ops/s
Iteration   5: 248117.571 ops/s
Iteration   6: 240507.672 ops/s
Iteration   7: 248813.720 ops/s
Iteration   8: 236388.195 ops/s
Iteration   9: 238784.940 ops/s
Iteration  10: 256416.526 ops/s
Iteration  11: 239538.143 ops/s
Iteration  12: 241277.722 ops/s
Iteration  13: 238637.259 ops/s
Iteration  14: 247209.954 ops/s
Iteration  15: 246704.957 ops/s
Iteration  16: 232575.023 ops/s
Iteration  17: 252931.985 ops/s
Iteration  18: 234453.256 ops/s
Iteration  19: 244262.371 ops/s
Iteration  20: 242268.186 ops/s
Iteration  21: 247049.219 ops/s
Iteration  22: 240918.701 ops/s
Iteration  23: 239897.426 ops/s
Iteration  24: 249074.347 ops/s
Iteration  25: 239630.583 ops/s
Iteration  26: 248294.998 ops/s
Iteration  27: 243645.797 ops/s
Iteration  28: 244492.622 ops/s
Iteration  29: 246346.635 ops/s
Iteration  30: 239255.668 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableDelaySubscriptionOtherTest._Benchmark.benchmark_badSourceOther":
  242924.626 ±(99.9%) 3651.758 ops/s [Average]
  (min, avg, max) = (232575.023, 242924.626, 256416.526), stdev = 5465.780
  CI (99.9%): [239272.868, 246576.384] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score      Error  Units
ObservableDelaySubscriptionOtherTest._Benchmark.benchmark_badSourceOther  thrpt   30  242924.626 ± 3651.758  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrDefaultTest._Benchmark.benchmark_lastDoubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrDefaultTest._Benchmark.benchmark_lastDoubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 197266.565 ops/s
# Warmup Iteration   2: 469147.389 ops/s
# Warmup Iteration   3: 479234.645 ops/s
# Warmup Iteration   4: 523995.916 ops/s
# Warmup Iteration   5: 498460.690 ops/s
# Warmup Iteration   6: 509213.906 ops/s
# Warmup Iteration   7: 507802.959 ops/s
# Warmup Iteration   8: 501012.196 ops/s
# Warmup Iteration   9: 501362.307 ops/s
# Warmup Iteration  10: 516843.883 ops/s
# Warmup Iteration  11: 517628.341 ops/s
# Warmup Iteration  12: 515875.388 ops/s
# Warmup Iteration  13: 492303.946 ops/s
# Warmup Iteration  14: 513415.649 ops/s
# Warmup Iteration  15: 506801.533 ops/s
# Warmup Iteration  16: 528344.848 ops/s
# Warmup Iteration  17: 523430.672 ops/s
# Warmup Iteration  18: 544934.936 ops/s
# Warmup Iteration  19: 538488.460 ops/s
# Warmup Iteration  20: 530809.614 ops/s
# Warmup Iteration  21: 546956.572 ops/s
# Warmup Iteration  22: 530187.751 ops/s
# Warmup Iteration  23: 549179.736 ops/s
# Warmup Iteration  24: 548717.828 ops/s
# Warmup Iteration  25: 516082.035 ops/s
# Warmup Iteration  26: 554074.111 ops/s
# Warmup Iteration  27: 525604.406 ops/s
# Warmup Iteration  28: 526428.947 ops/s
# Warmup Iteration  29: 548485.166 ops/s
# Warmup Iteration  30: 515151.443 ops/s
Iteration   1: 543042.335 ops/s
Iteration   2: 508410.648 ops/s
Iteration   3: 556492.948 ops/s
Iteration   4: 546553.773 ops/s
Iteration   5: 512671.310 ops/s
Iteration   6: 529940.447 ops/s
Iteration   7: 540836.114 ops/s
Iteration   8: 531217.384 ops/s
Iteration   9: 550346.362 ops/s
Iteration  10: 523439.353 ops/s
Iteration  11: 539860.061 ops/s
Iteration  12: 535327.547 ops/s
Iteration  13: 546534.649 ops/s
Iteration  14: 545354.863 ops/s
Iteration  15: 531809.372 ops/s
Iteration  16: 526288.996 ops/s
Iteration  17: 548627.695 ops/s
Iteration  18: 528272.040 ops/s
Iteration  19: 535668.766 ops/s
Iteration  20: 546275.632 ops/s
Iteration  21: 546547.106 ops/s
Iteration  22: 525910.203 ops/s
Iteration  23: 524735.338 ops/s
Iteration  24: 552434.911 ops/s
Iteration  25: 515688.691 ops/s
Iteration  26: 546736.802 ops/s
Iteration  27: 552569.511 ops/s
Iteration  28: 531985.748 ops/s
Iteration  29: 525620.560 ops/s
Iteration  30: 496425.727 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrDefaultTest._Benchmark.benchmark_lastDoubleOnSubscribe":
  534854.163 ±(99.9%) 9647.232 ops/s [Average]
  (min, avg, max) = (496425.727, 534854.163, 556492.948), stdev = 14439.524
  CI (99.9%): [525206.931, 544501.395] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           Mode  Cnt       Score      Error  Units
ObservableStageSubscriberOrDefaultTest._Benchmark.benchmark_lastDoubleOnSubscribe  thrpt   30  534854.163 ± 9647.232  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrErrorTest._Benchmark.benchmark_lastDoubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrErrorTest._Benchmark.benchmark_lastDoubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 171728.579 ops/s
# Warmup Iteration   2: 436720.001 ops/s
# Warmup Iteration   3: 495532.596 ops/s
# Warmup Iteration   4: 475929.450 ops/s
# Warmup Iteration   5: 473510.235 ops/s
# Warmup Iteration   6: 516499.724 ops/s
# Warmup Iteration   7: 497724.778 ops/s
# Warmup Iteration   8: 500380.890 ops/s
# Warmup Iteration   9: 503181.714 ops/s
# Warmup Iteration  10: 500390.137 ops/s
# Warmup Iteration  11: 524442.947 ops/s
# Warmup Iteration  12: 500976.637 ops/s
# Warmup Iteration  13: 498976.048 ops/s
# Warmup Iteration  14: 525698.153 ops/s
# Warmup Iteration  15: 476193.401 ops/s
# Warmup Iteration  16: 527638.176 ops/s
# Warmup Iteration  17: 543125.488 ops/s
# Warmup Iteration  18: 513797.276 ops/s
# Warmup Iteration  19: 532905.643 ops/s
# Warmup Iteration  20: 525064.329 ops/s
# Warmup Iteration  21: 510008.982 ops/s
# Warmup Iteration  22: 537467.734 ops/s
# Warmup Iteration  23: 514544.934 ops/s
# Warmup Iteration  24: 518068.899 ops/s
# Warmup Iteration  25: 527113.605 ops/s
# Warmup Iteration  26: 542570.296 ops/s
# Warmup Iteration  27: 518455.720 ops/s
# Warmup Iteration  28: 523124.448 ops/s
# Warmup Iteration  29: 560716.840 ops/s
# Warmup Iteration  30: 513366.581 ops/s
Iteration   1: 543728.640 ops/s
Iteration   2: 515513.868 ops/s
Iteration   3: 528495.295 ops/s
Iteration   4: 536637.500 ops/s
Iteration   5: 507478.095 ops/s
Iteration   6: 534926.120 ops/s
Iteration   7: 532517.095 ops/s
Iteration   8: 528671.030 ops/s
Iteration   9: 524180.821 ops/s
Iteration  10: 529135.542 ops/s
Iteration  11: 531633.438 ops/s
Iteration  12: 525304.191 ops/s
Iteration  13: 528404.166 ops/s
Iteration  14: 510494.351 ops/s
Iteration  15: 539393.774 ops/s
Iteration  16: 511923.492 ops/s
Iteration  17: 511479.606 ops/s
Iteration  18: 521131.239 ops/s
Iteration  19: 543169.194 ops/s
Iteration  20: 500366.076 ops/s
Iteration  21: 559997.031 ops/s
Iteration  22: 518776.488 ops/s
Iteration  23: 536962.479 ops/s
Iteration  24: 511720.507 ops/s
Iteration  25: 538754.041 ops/s
Iteration  26: 523812.732 ops/s
Iteration  27: 524535.919 ops/s
Iteration  28: 537721.471 ops/s
Iteration  29: 529557.255 ops/s
Iteration  30: 515527.107 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrErrorTest._Benchmark.benchmark_lastDoubleOnSubscribe":
  526731.619 ±(99.9%) 8610.575 ops/s [Average]
  (min, avg, max) = (500366.076, 526731.619, 559997.031), stdev = 12887.904
  CI (99.9%): [518121.044, 535342.194] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt       Score      Error  Units
ObservableStageSubscriberOrErrorTest._Benchmark.benchmark_lastDoubleOnSubscribe  thrpt   30  526731.619 ± 8610.575  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromTest._Benchmark.benchmark_manyErrors$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromTest._Benchmark.benchmark_manyErrors

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 28825.415 ops/s
# Warmup Iteration   2: 115668.974 ops/s
# Warmup Iteration   3: 147313.594 ops/s
# Warmup Iteration   4: 159747.201 ops/s
# Warmup Iteration   5: 145783.866 ops/s
# Warmup Iteration   6: 158287.920 ops/s
# Warmup Iteration   7: 166947.595 ops/s
# Warmup Iteration   8: 160740.590 ops/s
# Warmup Iteration   9: 164908.844 ops/s
# Warmup Iteration  10: 162548.180 ops/s
# Warmup Iteration  11: 159311.438 ops/s
# Warmup Iteration  12: 169877.356 ops/s
# Warmup Iteration  13: 160751.495 ops/s
# Warmup Iteration  14: 170662.991 ops/s
# Warmup Iteration  15: 158810.777 ops/s
# Warmup Iteration  16: 161330.978 ops/s
# Warmup Iteration  17: 175572.948 ops/s
# Warmup Iteration  18: 167699.648 ops/s
# Warmup Iteration  19: 172015.943 ops/s
# Warmup Iteration  20: 173101.664 ops/s
# Warmup Iteration  21: 171978.622 ops/s
# Warmup Iteration  22: 171137.801 ops/s
# Warmup Iteration  23: 171892.640 ops/s
# Warmup Iteration  24: 169886.762 ops/s
# Warmup Iteration  25: 165331.588 ops/s
# Warmup Iteration  26: 175540.456 ops/s
# Warmup Iteration  27: 169627.762 ops/s
# Warmup Iteration  28: 170119.985 ops/s
# Warmup Iteration  29: 173322.577 ops/s
# Warmup Iteration  30: 169296.226 ops/s
Iteration   1: 174357.197 ops/s
Iteration   2: 169338.291 ops/s
Iteration   3: 178119.551 ops/s
Iteration   4: 167512.765 ops/s
Iteration   5: 168626.361 ops/s
Iteration   6: 176129.472 ops/s
Iteration   7: 168297.758 ops/s
Iteration   8: 168481.561 ops/s
Iteration   9: 180745.597 ops/s
Iteration  10: 174439.474 ops/s
Iteration  11: 169134.033 ops/s
Iteration  12: 168923.072 ops/s
Iteration  13: 173407.782 ops/s
Iteration  14: 169712.788 ops/s
Iteration  15: 177748.352 ops/s
Iteration  16: 165274.515 ops/s
Iteration  17: 172858.832 ops/s
Iteration  18: 175507.672 ops/s
Iteration  19: 170518.140 ops/s
Iteration  20: 173762.089 ops/s
Iteration  21: 165115.812 ops/s
Iteration  22: 177410.010 ops/s
Iteration  23: 166933.072 ops/s
Iteration  24: 166178.904 ops/s
Iteration  25: 148954.548 ops/s
Iteration  26: 165105.686 ops/s
Iteration  27: 169001.571 ops/s
Iteration  28: 171917.943 ops/s
Iteration  29: 171001.138 ops/s
Iteration  30: 166987.862 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromTest._Benchmark.benchmark_manyErrors":
  170383.395 ±(99.9%) 3923.788 ops/s [Average]
  (min, avg, max) = (148954.548, 170383.395, 180745.597), stdev = 5872.942
  CI (99.9%): [166459.607, 174307.183] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
ObservableWithLatestFromTest._Benchmark.benchmark_manyErrors  thrpt   30  170383.395 ± 3923.788  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableMapOptionalTest._Benchmark.benchmark_mapperNullConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableMapOptionalTest._Benchmark.benchmark_mapperNullConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 99446.151 ops/s
# Warmup Iteration   2: 278627.474 ops/s
# Warmup Iteration   3: 490584.193 ops/s
# Warmup Iteration   4: 512752.138 ops/s
# Warmup Iteration   5: 503775.956 ops/s
# Warmup Iteration   6: 513499.096 ops/s
# Warmup Iteration   7: 498003.548 ops/s
# Warmup Iteration   8: 525980.246 ops/s
# Warmup Iteration   9: 493081.081 ops/s
# Warmup Iteration  10: 523686.763 ops/s
# Warmup Iteration  11: 501015.296 ops/s
# Warmup Iteration  12: 513169.424 ops/s
# Warmup Iteration  13: 489388.504 ops/s
# Warmup Iteration  14: 506358.900 ops/s
# Warmup Iteration  15: 506137.364 ops/s
# Warmup Iteration  16: 508530.152 ops/s
# Warmup Iteration  17: 541529.171 ops/s
# Warmup Iteration  18: 539516.593 ops/s
# Warmup Iteration  19: 548440.438 ops/s
# Warmup Iteration  20: 534359.611 ops/s
# Warmup Iteration  21: 547821.583 ops/s
# Warmup Iteration  22: 554075.967 ops/s
# Warmup Iteration  23: 521168.022 ops/s
# Warmup Iteration  24: 525856.032 ops/s
# Warmup Iteration  25: 524231.801 ops/s
# Warmup Iteration  26: 543004.875 ops/s
# Warmup Iteration  27: 536822.448 ops/s
# Warmup Iteration  28: 540692.776 ops/s
# Warmup Iteration  29: 532550.197 ops/s
# Warmup Iteration  30: 555578.320 ops/s
Iteration   1: 515012.975 ops/s
Iteration   2: 538669.900 ops/s
Iteration   3: 536938.731 ops/s
Iteration   4: 547359.481 ops/s
Iteration   5: 539283.679 ops/s
Iteration   6: 515610.318 ops/s
Iteration   7: 558993.013 ops/s
Iteration   8: 515996.555 ops/s
Iteration   9: 546880.962 ops/s
Iteration  10: 543454.282 ops/s
Iteration  11: 516580.888 ops/s
Iteration  12: 547514.241 ops/s
Iteration  13: 524122.116 ops/s
Iteration  14: 546133.351 ops/s
Iteration  15: 511972.012 ops/s
Iteration  16: 530524.834 ops/s
Iteration  17: 556675.159 ops/s
Iteration  18: 522580.783 ops/s
Iteration  19: 514375.211 ops/s
Iteration  20: 528333.862 ops/s
Iteration  21: 521028.938 ops/s
Iteration  22: 551764.207 ops/s
Iteration  23: 517396.632 ops/s
Iteration  24: 548788.095 ops/s
Iteration  25: 517254.426 ops/s
Iteration  26: 537848.800 ops/s
Iteration  27: 533223.157 ops/s
Iteration  28: 521605.301 ops/s
Iteration  29: 532965.111 ops/s
Iteration  30: 529495.660 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableMapOptionalTest._Benchmark.benchmark_mapperNullConditional":
  532279.423 ±(99.9%) 9440.186 ops/s [Average]
  (min, avg, max) = (511972.012, 532279.423, 558993.013), stdev = 14129.626
  CI (99.9%): [522839.237, 541719.608] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score      Error  Units
ObservableMapOptionalTest._Benchmark.benchmark_mapperNullConditional  thrpt   30  532279.423 ± 9440.186  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableMapOptionalTest._Benchmark.benchmark_mapperChash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableMapOptionalTest._Benchmark.benchmark_mapperChash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 126945.691 ops/s
# Warmup Iteration   2: 400371.914 ops/s
# Warmup Iteration   3: 487806.903 ops/s
# Warmup Iteration   4: 536861.055 ops/s
# Warmup Iteration   5: 549223.520 ops/s
# Warmup Iteration   6: 522564.932 ops/s
# Warmup Iteration   7: 513006.580 ops/s
# Warmup Iteration   8: 516433.056 ops/s
# Warmup Iteration   9: 542063.148 ops/s
# Warmup Iteration  10: 491560.677 ops/s
# Warmup Iteration  11: 523850.799 ops/s
# Warmup Iteration  12: 526523.111 ops/s
# Warmup Iteration  13: 527553.640 ops/s
# Warmup Iteration  14: 541706.641 ops/s
# Warmup Iteration  15: 493886.175 ops/s
# Warmup Iteration  16: 511070.048 ops/s
# Warmup Iteration  17: 526038.069 ops/s
# Warmup Iteration  18: 563055.234 ops/s
# Warmup Iteration  19: 534751.325 ops/s
# Warmup Iteration  20: 537736.558 ops/s
# Warmup Iteration  21: 564162.853 ops/s
# Warmup Iteration  22: 544013.156 ops/s
# Warmup Iteration  23: 547615.767 ops/s
# Warmup Iteration  24: 526890.909 ops/s
# Warmup Iteration  25: 542343.859 ops/s
# Warmup Iteration  26: 536122.848 ops/s
# Warmup Iteration  27: 536103.778 ops/s
# Warmup Iteration  28: 546984.055 ops/s
# Warmup Iteration  29: 524469.188 ops/s
# Warmup Iteration  30: 558498.214 ops/s
Iteration   1: 551899.708 ops/s
Iteration   2: 520220.749 ops/s
Iteration   3: 552465.727 ops/s
Iteration   4: 529017.148 ops/s
Iteration   5: 547521.148 ops/s
Iteration   6: 557293.877 ops/s
Iteration   7: 530704.986 ops/s
Iteration   8: 554177.108 ops/s
Iteration   9: 548179.297 ops/s
Iteration  10: 563563.576 ops/s
Iteration  11: 530989.884 ops/s
Iteration  12: 544611.552 ops/s
Iteration  13: 553425.445 ops/s
Iteration  14: 533746.543 ops/s
Iteration  15: 519476.071 ops/s
Iteration  16: 537181.322 ops/s
Iteration  17: 570361.228 ops/s
Iteration  18: 581887.986 ops/s
Iteration  19: 507909.843 ops/s
Iteration  20: 410915.934 ops/s
Iteration  21: 563080.744 ops/s
Iteration  22: 538394.900 ops/s
Iteration  23: 575975.769 ops/s
Iteration  24: 536298.736 ops/s
Iteration  25: 540223.258 ops/s
Iteration  26: 573821.742 ops/s
Iteration  27: 552425.076 ops/s
Iteration  28: 530167.148 ops/s
Iteration  29: 556601.644 ops/s
Iteration  30: 537253.960 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableMapOptionalTest._Benchmark.benchmark_mapperChash":
  541659.737 ±(99.9%) 20246.883 ops/s [Average]
  (min, avg, max) = (410915.934, 541659.737, 581887.986), stdev = 30304.583
  CI (99.9%): [521412.855, 561906.620] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score       Error  Units
ObservableMapOptionalTest._Benchmark.benchmark_mapperChash  thrpt   30  541659.737 ± 20246.883  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDoOnEachTest._Benchmark.benchmark_onCompleteAfterCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDoOnEachTest._Benchmark.benchmark_onCompleteAfterCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.769 ops/s
# Warmup Iteration   2: 14626.087 ops/s
# Warmup Iteration   3: 32380.123 ops/s
# Warmup Iteration   4: 46296.109 ops/s
# Warmup Iteration   5: 70821.235 ops/s
# Warmup Iteration   6: 107556.401 ops/s
# Warmup Iteration   7: 136732.082 ops/s
# Warmup Iteration   8: 167125.835 ops/s
# Warmup Iteration   9: 165328.311 ops/s
# Warmup Iteration  10: 158633.242 ops/s
# Warmup Iteration  11: 164225.028 ops/s
# Warmup Iteration  12: 157857.149 ops/s
# Warmup Iteration  13: 159345.349 ops/s
# Warmup Iteration  14: 166871.015 ops/s
# Warmup Iteration  15: 160278.868 ops/s
# Warmup Iteration  16: 165353.239 ops/s
# Warmup Iteration  17: 154548.987 ops/s
# Warmup Iteration  18: 167561.693 ops/s
# Warmup Iteration  19: 164563.540 ops/s
# Warmup Iteration  20: 160328.753 ops/s
# Warmup Iteration  21: 164481.595 ops/s
# Warmup Iteration  22: 160504.877 ops/s
# Warmup Iteration  23: 157320.137 ops/s
# Warmup Iteration  24: 159976.133 ops/s
# Warmup Iteration  25: 165284.636 ops/s
# Warmup Iteration  26: 152472.158 ops/s
# Warmup Iteration  27: 161678.256 ops/s
# Warmup Iteration  28: 162019.775 ops/s
# Warmup Iteration  29: 162246.716 ops/s
# Warmup Iteration  30: 160878.707 ops/s
Iteration   1: 158743.921 ops/s
Iteration   2: 158630.362 ops/s
Iteration   3: 158890.789 ops/s
Iteration   4: 159833.059 ops/s
Iteration   5: 159964.052 ops/s
Iteration   6: 156547.798 ops/s
Iteration   7: 158688.163 ops/s
Iteration   8: 166131.777 ops/s
Iteration   9: 161461.551 ops/s
Iteration  10: 166336.737 ops/s
Iteration  11: 153550.561 ops/s
Iteration  12: 169024.782 ops/s
Iteration  13: 160471.450 ops/s
Iteration  14: 159865.787 ops/s
Iteration  15: 163899.542 ops/s
Iteration  16: 158310.928 ops/s
Iteration  17: 162725.539 ops/s
Iteration  18: 162125.126 ops/s
Iteration  19: 158247.112 ops/s
Iteration  20: 165115.399 ops/s
Iteration  21: 157777.343 ops/s
Iteration  22: 168233.782 ops/s
Iteration  23: 166873.326 ops/s
Iteration  24: 158435.996 ops/s
Iteration  25: 162691.362 ops/s
Iteration  26: 157034.299 ops/s
Iteration  27: 159315.608 ops/s
Iteration  28: 167020.392 ops/s
Iteration  29: 156805.324 ops/s
Iteration  30: 165818.101 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableDoOnEachTest._Benchmark.benchmark_onCompleteAfterCrash":
  161285.666 ±(99.9%) 2670.874 ops/s [Average]
  (min, avg, max) = (153550.561, 161285.666, 169024.782), stdev = 3997.639
  CI (99.9%): [158614.791, 163956.540] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
ObservableDoOnEachTest._Benchmark.benchmark_onCompleteAfterCrash  thrpt   30  161285.666 ± 2670.874  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableScanTest._Benchmark.benchmark_scanFunctionThrowsAndUpstreamErrorsDoesNotResultInTwoTerminalEvents$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableScanTest._Benchmark.benchmark_scanFunctionThrowsAndUpstreamErrorsDoesNotResultInTwoTerminalEvents

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 39147.099 ops/s
# Warmup Iteration   2: 142075.213 ops/s
# Warmup Iteration   3: 149998.191 ops/s
# Warmup Iteration   4: 188795.213 ops/s
# Warmup Iteration   5: 183675.606 ops/s
# Warmup Iteration   6: 183235.953 ops/s
# Warmup Iteration   7: 182197.820 ops/s
# Warmup Iteration   8: 185597.244 ops/s
# Warmup Iteration   9: 181193.185 ops/s
# Warmup Iteration  10: 184744.777 ops/s
# Warmup Iteration  11: 177313.702 ops/s
# Warmup Iteration  12: 182153.394 ops/s
# Warmup Iteration  13: 192039.663 ops/s
# Warmup Iteration  14: 173600.573 ops/s
# Warmup Iteration  15: 189093.370 ops/s
# Warmup Iteration  16: 174843.763 ops/s
# Warmup Iteration  17: 193781.582 ops/s
# Warmup Iteration  18: 187827.450 ops/s
# Warmup Iteration  19: 191005.047 ops/s
# Warmup Iteration  20: 189934.611 ops/s
# Warmup Iteration  21: 196357.560 ops/s
# Warmup Iteration  22: 192119.078 ops/s
# Warmup Iteration  23: 191711.705 ops/s
# Warmup Iteration  24: 188696.577 ops/s
# Warmup Iteration  25: 188543.291 ops/s
# Warmup Iteration  26: 190994.250 ops/s
# Warmup Iteration  27: 191676.175 ops/s
# Warmup Iteration  28: 196010.961 ops/s
# Warmup Iteration  29: 192155.588 ops/s
# Warmup Iteration  30: 196167.309 ops/s
Iteration   1: 195881.555 ops/s
Iteration   2: 187937.960 ops/s
Iteration   3: 205114.235 ops/s
Iteration   4: 186285.722 ops/s
Iteration   5: 192055.144 ops/s
Iteration   6: 200596.453 ops/s
Iteration   7: 189234.187 ops/s
Iteration   8: 196842.320 ops/s
Iteration   9: 187962.918 ops/s
Iteration  10: 196806.791 ops/s
Iteration  11: 188870.230 ops/s
Iteration  12: 197044.800 ops/s
Iteration  13: 192144.911 ops/s
Iteration  14: 184585.019 ops/s
Iteration  15: 161032.519 ops/s
Iteration  16: 186773.465 ops/s
Iteration  17: 198495.063 ops/s
Iteration  18: 189975.230 ops/s
Iteration  19: 196210.003 ops/s
Iteration  20: 191688.803 ops/s
Iteration  21: 192788.660 ops/s
Iteration  22: 195411.917 ops/s
Iteration  23: 190272.436 ops/s
Iteration  24: 197215.558 ops/s
Iteration  25: 188472.038 ops/s
Iteration  26: 201864.637 ops/s
Iteration  27: 198536.079 ops/s
Iteration  28: 190978.223 ops/s
Iteration  29: 194341.970 ops/s
Iteration  30: 189629.722 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableScanTest._Benchmark.benchmark_scanFunctionThrowsAndUpstreamErrorsDoesNotResultInTwoTerminalEvents":
  192168.286 ±(99.9%) 5156.539 ops/s [Average]
  (min, avg, max) = (161032.519, 192168.286, 205114.235), stdev = 7718.065
  CI (99.9%): [187011.747, 197324.824] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                                     Mode  Cnt       Score      Error  Units
ObservableScanTest._Benchmark.benchmark_scanFunctionThrowsAndUpstreamErrorsDoesNotResultInTwoTerminalEvents  thrpt   30  192168.286 ± 5156.539  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableScanTest._Benchmark.benchmark_badSource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableScanTest._Benchmark.benchmark_badSource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 23518.136 ops/s
# Warmup Iteration   2: 142533.991 ops/s
# Warmup Iteration   3: 200368.969 ops/s
# Warmup Iteration   4: 199462.562 ops/s
# Warmup Iteration   5: 228572.801 ops/s
# Warmup Iteration   6: 223406.591 ops/s
# Warmup Iteration   7: 227003.259 ops/s
# Warmup Iteration   8: 241679.966 ops/s
# Warmup Iteration   9: 223960.860 ops/s
# Warmup Iteration  10: 235187.639 ops/s
# Warmup Iteration  11: 228847.493 ops/s
# Warmup Iteration  12: 242242.496 ops/s
# Warmup Iteration  13: 221556.224 ops/s
# Warmup Iteration  14: 234795.279 ops/s
# Warmup Iteration  15: 237369.543 ops/s
# Warmup Iteration  16: 225956.712 ops/s
# Warmup Iteration  17: 251200.389 ops/s
# Warmup Iteration  18: 234957.858 ops/s
# Warmup Iteration  19: 251402.343 ops/s
# Warmup Iteration  20: 248502.517 ops/s
# Warmup Iteration  21: 239456.437 ops/s
# Warmup Iteration  22: 247365.264 ops/s
# Warmup Iteration  23: 234837.526 ops/s
# Warmup Iteration  24: 241213.573 ops/s
# Warmup Iteration  25: 250766.831 ops/s
# Warmup Iteration  26: 236614.348 ops/s
# Warmup Iteration  27: 248444.112 ops/s
# Warmup Iteration  28: 238584.580 ops/s
# Warmup Iteration  29: 237733.806 ops/s
# Warmup Iteration  30: 240897.996 ops/s
Iteration   1: 243154.616 ops/s
Iteration   2: 254077.889 ops/s
Iteration   3: 234999.159 ops/s
Iteration   4: 243220.825 ops/s
Iteration   5: 250356.661 ops/s
Iteration   6: 235533.579 ops/s
Iteration   7: 245406.787 ops/s
Iteration   8: 231403.527 ops/s
Iteration   9: 244310.495 ops/s
Iteration  10: 244597.884 ops/s
Iteration  11: 243914.292 ops/s
Iteration  12: 241438.673 ops/s
Iteration  13: 242196.276 ops/s
Iteration  14: 246202.702 ops/s
Iteration  15: 247146.099 ops/s
Iteration  16: 236982.227 ops/s
Iteration  17: 251057.373 ops/s
Iteration  18: 253641.775 ops/s
Iteration  19: 233967.203 ops/s
Iteration  20: 249318.516 ops/s
Iteration  21: 239362.591 ops/s
Iteration  22: 238510.957 ops/s
Iteration  23: 248038.970 ops/s
Iteration  24: 234827.455 ops/s
Iteration  25: 247729.129 ops/s
Iteration  26: 230327.210 ops/s
Iteration  27: 242039.486 ops/s
Iteration  28: 251430.402 ops/s
Iteration  29: 247239.007 ops/s
Iteration  30: 234385.725 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableScanTest._Benchmark.benchmark_badSource":
  242893.916 ±(99.9%) 4440.155 ops/s [Average]
  (min, avg, max) = (230327.210, 242893.916, 254077.889), stdev = 6645.816
  CI (99.9%): [238453.761, 247334.072] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt       Score      Error  Units
ObservableScanTest._Benchmark.benchmark_badSource  thrpt   30  242893.916 ± 4440.155  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleTimeoutTest._Benchmark.benchmark_mainSuccess$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleTimeoutTest._Benchmark.benchmark_mainSuccess

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 23964.178 ops/s
# Warmup Iteration   2: 108451.338 ops/s
# Warmup Iteration   3: 162772.516 ops/s
# Warmup Iteration   4: 149212.843 ops/s
# Warmup Iteration   5: 138467.714 ops/s
# Warmup Iteration   6: 130347.603 ops/s
# Warmup Iteration   7: 139572.002 ops/s
# Warmup Iteration   8: 144385.458 ops/s
# Warmup Iteration   9: 148902.531 ops/s
# Warmup Iteration  10: 148136.525 ops/s
# Warmup Iteration  11: 148724.400 ops/s
# Warmup Iteration  12: 190830.326 ops/s
# Warmup Iteration  13: 156852.984 ops/s
# Warmup Iteration  14: 155836.638 ops/s
# Warmup Iteration  15: 166638.763 ops/s
# Warmup Iteration  16: 154688.046 ops/s
# Warmup Iteration  17: 154401.391 ops/s
# Warmup Iteration  18: 136504.591 ops/s
# Warmup Iteration  19: 147381.400 ops/s
# Warmup Iteration  20: 141325.027 ops/s
# Warmup Iteration  21: 156585.605 ops/s
# Warmup Iteration  22: 149614.947 ops/s
# Warmup Iteration  23: 140436.584 ops/s
# Warmup Iteration  24: 167812.665 ops/s
# Warmup Iteration  25: 151568.797 ops/s
# Warmup Iteration  26: 198236.148 ops/s
# Warmup Iteration  27: 162889.951 ops/s
# Warmup Iteration  28: 209145.576 ops/s
# Warmup Iteration  29: 142633.440 ops/s
# Warmup Iteration  30: 186305.071 ops/s
Iteration   1: 125616.801 ops/s
Iteration   2: 118774.836 ops/s
Iteration   3: 150689.436 ops/s
Iteration   4: 158498.072 ops/s
Iteration   5: 180550.420 ops/s
Iteration   6: 133075.544 ops/s
Iteration   7: 147114.867 ops/s
Iteration   8: 144601.205 ops/s
Iteration   9: 176852.388 ops/s
Iteration  10: 151049.969 ops/s
Iteration  11: 206600.423 ops/s
Iteration  12: 143567.961 ops/s
Iteration  13: 156462.868 ops/s
Iteration  14: 168275.112 ops/s
Iteration  15: 143181.289 ops/s
Iteration  16: 171279.866 ops/s
Iteration  17: 161696.568 ops/s
Iteration  18: 174677.404 ops/s
Iteration  19: 199386.714 ops/s
Iteration  20: 157361.389 ops/s
Iteration  21: 137028.376 ops/s
Iteration  22: 125920.734 ops/s
Iteration  23: 158998.174 ops/s
Iteration  24: 140732.814 ops/s
Iteration  25: 157826.065 ops/s
Iteration  26: 174300.466 ops/s
Iteration  27: 138275.131 ops/s
Iteration  28: 160841.475 ops/s
Iteration  29: 150198.742 ops/s
Iteration  30: 151748.196 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleTimeoutTest._Benchmark.benchmark_mainSuccess":
  155506.110 ±(99.9%) 13531.657 ops/s [Average]
  (min, avg, max) = (118774.836, 155506.110, 206600.423), stdev = 20253.548
  CI (99.9%): [141974.454, 169037.767] (assumes normal distribution)


# Run complete. Total time: 00:01:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score       Error  Units
SingleTimeoutTest._Benchmark.benchmark_mainSuccess  thrpt   30  155506.110 ± 13531.657  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleTimeoutTest._Benchmark.benchmark_normalSuccessDoesntDisposeMain$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleTimeoutTest._Benchmark.benchmark_normalSuccessDoesntDisposeMain

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 22302.045 ops/s
# Warmup Iteration   2: 101484.264 ops/s
# Warmup Iteration   3: 155893.075 ops/s
# Warmup Iteration   4: 130205.493 ops/s
# Warmup Iteration   5: 136638.304 ops/s
# Warmup Iteration   6: 162899.885 ops/s
# Warmup Iteration   7: 153390.983 ops/s
# Warmup Iteration   8: 187272.925 ops/s
# Warmup Iteration   9: 114954.981 ops/s
# Warmup Iteration  10: 145820.863 ops/s
# Warmup Iteration  11: 151692.543 ops/s
# Warmup Iteration  12: 138843.774 ops/s
# Warmup Iteration  13: 135086.352 ops/s
# Warmup Iteration  14: 162669.009 ops/s
# Warmup Iteration  15: 158204.294 ops/s
# Warmup Iteration  16: 156990.859 ops/s
# Warmup Iteration  17: 118295.353 ops/s
# Warmup Iteration  18: 165745.801 ops/s
# Warmup Iteration  19: 151826.523 ops/s
# Warmup Iteration  20: 169746.642 ops/s
# Warmup Iteration  21: 149762.805 ops/s
# Warmup Iteration  22: 109520.328 ops/s
# Warmup Iteration  23: 136742.876 ops/s
# Warmup Iteration  24: 155673.173 ops/s
# Warmup Iteration  25: 142486.700 ops/s
# Warmup Iteration  26: 157028.800 ops/s
# Warmup Iteration  27: 134253.778 ops/s
# Warmup Iteration  28: 192632.708 ops/s
# Warmup Iteration  29: 154415.929 ops/s
# Warmup Iteration  30: 193350.812 ops/s
Iteration   1: 156544.517 ops/s
Iteration   2: 144838.212 ops/s
Iteration   3: 159536.089 ops/s
Iteration   4: 123829.400 ops/s
Iteration   5: 164729.962 ops/s
Iteration   6: 135306.828 ops/s
Iteration   7: 167559.256 ops/s
Iteration   8: 164481.652 ops/s
Iteration   9: 171866.195 ops/s
Iteration  10: 162468.986 ops/s
Iteration  11: 157148.091 ops/s
Iteration  12: 149886.264 ops/s
Iteration  13: 130338.580 ops/s
Iteration  14: 140048.262 ops/s
Iteration  15: 164901.763 ops/s
Iteration  16: 199589.659 ops/s
Iteration  17: 166826.310 ops/s
Iteration  18: 145013.332 ops/s
Iteration  19: 143791.515 ops/s
Iteration  20: 137535.168 ops/s
Iteration  21: 160064.114 ops/s
Iteration  22: 132205.990 ops/s
Iteration  23: 180910.697 ops/s
Iteration  24: 149148.190 ops/s
Iteration  25: 151197.798 ops/s
Iteration  26: 171467.462 ops/s
Iteration  27: 192804.864 ops/s
Iteration  28: 144578.611 ops/s
Iteration  29: 180975.838 ops/s
Iteration  30: 157005.020 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleTimeoutTest._Benchmark.benchmark_normalSuccessDoesntDisposeMain":
  156886.621 ±(99.9%) 12050.005 ops/s [Average]
  (min, avg, max) = (123829.400, 156886.621, 199589.659), stdev = 18035.882
  CI (99.9%): [144836.616, 168936.626] (assumes normal distribution)


# Run complete. Total time: 00:01:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score       Error  Units
SingleTimeoutTest._Benchmark.benchmark_normalSuccessDoesntDisposeMain  thrpt   30  156886.621 ± 12050.005  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutTest._Benchmark.benchmark_normalMaybe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutTest._Benchmark.benchmark_normalMaybe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 29039.433 ops/s
# Warmup Iteration   2: 186012.906 ops/s
# Warmup Iteration   3: 134876.483 ops/s
# Warmup Iteration   4: 131435.576 ops/s
# Warmup Iteration   5: 157111.185 ops/s
# Warmup Iteration   6: 173390.841 ops/s
# Warmup Iteration   7: 138747.055 ops/s
# Warmup Iteration   8: 183107.760 ops/s
# Warmup Iteration   9: 172478.414 ops/s
# Warmup Iteration  10: 139079.252 ops/s
# Warmup Iteration  11: 158535.192 ops/s
# Warmup Iteration  12: 165460.444 ops/s
# Warmup Iteration  13: 143966.949 ops/s
# Warmup Iteration  14: 215030.427 ops/s
# Warmup Iteration  15: 203197.801 ops/s
# Warmup Iteration  16: 149398.975 ops/s
# Warmup Iteration  17: 181003.118 ops/s
# Warmup Iteration  18: 152738.689 ops/s
# Warmup Iteration  19: 157924.485 ops/s
# Warmup Iteration  20: 172693.418 ops/s
# Warmup Iteration  21: 174724.454 ops/s
# Warmup Iteration  22: 140845.144 ops/s
# Warmup Iteration  23: 152334.292 ops/s
# Warmup Iteration  24: 129964.412 ops/s
# Warmup Iteration  25: 162323.297 ops/s
# Warmup Iteration  26: 121540.382 ops/s
# Warmup Iteration  27: 118719.065 ops/s
# Warmup Iteration  28: 175257.783 ops/s
# Warmup Iteration  29: 144714.843 ops/s
# Warmup Iteration  30: 215728.175 ops/s
Iteration   1: 181928.635 ops/s
Iteration   2: 140111.094 ops/s
Iteration   3: 156608.980 ops/s
Iteration   4: 175124.588 ops/s
Iteration   5: 188203.979 ops/s
Iteration   6: 179553.676 ops/s
Iteration   7: 167894.703 ops/s
Iteration   8: 142937.040 ops/s
Iteration   9: 151969.305 ops/s
Iteration  10: 163562.115 ops/s
Iteration  11: 147518.543 ops/s
Iteration  12: 137306.415 ops/s
Iteration  13: 181824.869 ops/s
Iteration  14: 159670.914 ops/s
Iteration  15: 155025.248 ops/s
Iteration  16: 128897.964 ops/s
Iteration  17: 160634.634 ops/s
Iteration  18: 150481.196 ops/s
Iteration  19: 157129.184 ops/s
Iteration  20: 131204.780 ops/s
Iteration  21: 181436.103 ops/s
Iteration  22: 156694.046 ops/s
Iteration  23: 148332.320 ops/s
Iteration  24: 157207.912 ops/s
Iteration  25: 139856.052 ops/s
Iteration  26: 139292.637 ops/s
Iteration  27: 143440.700 ops/s
Iteration  28: 139766.909 ops/s
Iteration  29: 133843.687 ops/s
Iteration  30: 160678.320 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutTest._Benchmark.benchmark_normalMaybe":
  155271.218 ±(99.9%) 11054.481 ops/s [Average]
  (min, avg, max) = (128897.964, 155271.218, 188203.979), stdev = 16545.828
  CI (99.9%): [144216.737, 166325.699] (assumes normal distribution)


# Run complete. Total time: 00:01:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt       Score       Error  Units
MaybeTimeoutTest._Benchmark.benchmark_normalMaybe  thrpt   30  155271.218 ± 11054.481  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_observeOnSuccess$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_observeOnSuccess

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 18280.728 ops/s
# Warmup Iteration   2: 23243.103 ops/s
# Warmup Iteration   3: 19163.727 ops/s
# Warmup Iteration   4: 19226.781 ops/s
# Warmup Iteration   5: 19458.501 ops/s
# Warmup Iteration   6: 18934.713 ops/s
# Warmup Iteration   7: 19918.397 ops/s
# Warmup Iteration   8: 19975.973 ops/s
# Warmup Iteration   9: 19491.130 ops/s
# Warmup Iteration  10: 19492.861 ops/s
# Warmup Iteration  11: 19555.246 ops/s
# Warmup Iteration  12: 19463.674 ops/s
# Warmup Iteration  13: 19798.507 ops/s
# Warmup Iteration  14: 19559.988 ops/s
# Warmup Iteration  15: 19950.269 ops/s
# Warmup Iteration  16: 19984.269 ops/s
# Warmup Iteration  17: 19495.719 ops/s
# Warmup Iteration  18: 19656.693 ops/s
# Warmup Iteration  19: 19863.703 ops/s
# Warmup Iteration  20: 19715.578 ops/s
# Warmup Iteration  21: 20020.285 ops/s
# Warmup Iteration  22: 19362.075 ops/s
# Warmup Iteration  23: 19120.392 ops/s
# Warmup Iteration  24: 20304.989 ops/s
# Warmup Iteration  25: 19681.980 ops/s
# Warmup Iteration  26: 19900.945 ops/s
# Warmup Iteration  27: 19192.577 ops/s
# Warmup Iteration  28: 20238.968 ops/s
# Warmup Iteration  29: 19682.550 ops/s
# Warmup Iteration  30: 19786.005 ops/s
Iteration   1: 19527.927 ops/s
Iteration   2: 20105.021 ops/s
Iteration   3: 19802.441 ops/s
Iteration   4: 20288.506 ops/s
Iteration   5: 19907.725 ops/s
Iteration   6: 19781.537 ops/s
Iteration   7: 19946.587 ops/s
Iteration   8: 19502.169 ops/s
Iteration   9: 19820.608 ops/s
Iteration  10: 19697.700 ops/s
Iteration  11: 19868.048 ops/s
Iteration  12: 19672.533 ops/s
Iteration  13: 20004.043 ops/s
Iteration  14: 19466.843 ops/s
Iteration  15: 19458.350 ops/s
Iteration  16: 20139.934 ops/s
Iteration  17: 18894.161 ops/s
Iteration  18: 19881.936 ops/s
Iteration  19: 19298.744 ops/s
Iteration  20: 19679.011 ops/s
Iteration  21: 19466.608 ops/s
Iteration  22: 19909.043 ops/s
Iteration  23: 19671.217 ops/s
Iteration  24: 19760.458 ops/s
Iteration  25: 19118.310 ops/s
Iteration  26: 19399.386 ops/s
Iteration  27: 19550.697 ops/s
Iteration  28: 19976.786 ops/s
Iteration  29: 19864.049 ops/s
Iteration  30: 22072.992 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_observeOnSuccess":
  19784.446 ±(99.9%) 352.241 ops/s [Average]
  (min, avg, max) = (18894.161, 19784.446, 22072.992), stdev = 527.218
  CI (99.9%): [19432.205, 20136.687] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt      Score     Error  Units
MaybeTest._Benchmark.benchmark_observeOnSuccess  thrpt   30  19784.446 ± 352.241  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.schedulers.SchedulerPoolFactoryTest._Benchmark.benchmark_boolPropertiesReturnsValue$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.schedulers.SchedulerPoolFactoryTest._Benchmark.benchmark_boolPropertiesReturnsValue

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 27094573.363 ops/s
# Warmup Iteration   2: 40882143.552 ops/s
# Warmup Iteration   3: 61265126.247 ops/s
# Warmup Iteration   4: 57544289.973 ops/s
# Warmup Iteration   5: 60441629.248 ops/s
# Warmup Iteration   6: 58696608.225 ops/s
# Warmup Iteration   7: 60768616.231 ops/s
# Warmup Iteration   8: 58554454.992 ops/s
# Warmup Iteration   9: 58396808.529 ops/s
# Warmup Iteration  10: 61322725.969 ops/s
# Warmup Iteration  11: 61625860.083 ops/s
# Warmup Iteration  12: 57274603.369 ops/s
# Warmup Iteration  13: 61689419.170 ops/s
# Warmup Iteration  14: 58359170.737 ops/s
# Warmup Iteration  15: 59326331.721 ops/s
# Warmup Iteration  16: 58541997.622 ops/s
# Warmup Iteration  17: 60820638.043 ops/s
# Warmup Iteration  18: 59336642.146 ops/s
# Warmup Iteration  19: 61883651.251 ops/s
# Warmup Iteration  20: 57206126.300 ops/s
# Warmup Iteration  21: 59289016.293 ops/s
# Warmup Iteration  22: 59900466.352 ops/s
# Warmup Iteration  23: 60869104.703 ops/s
# Warmup Iteration  24: 44554339.954 ops/s
# Warmup Iteration  25: 57116608.819 ops/s
# Warmup Iteration  26: 60230943.427 ops/s
# Warmup Iteration  27: 59273964.962 ops/s
# Warmup Iteration  28: 59760322.772 ops/s
# Warmup Iteration  29: 60287096.115 ops/s
# Warmup Iteration  30: 58645975.147 ops/s
Iteration   1: 61024682.962 ops/s
Iteration   2: 60463507.058 ops/s
Iteration   3: 61455501.679 ops/s
Iteration   4: 58121795.479 ops/s
Iteration   5: 59291118.540 ops/s
Iteration   6: 61548339.911 ops/s
Iteration   7: 59408494.471 ops/s
Iteration   8: 62653415.671 ops/s
Iteration   9: 57696796.779 ops/s
Iteration  10: 60407249.271 ops/s
Iteration  11: 59868151.126 ops/s
Iteration  12: 58133717.775 ops/s
Iteration  13: 61298073.481 ops/s
Iteration  14: 57703422.771 ops/s
Iteration  15: 59057084.765 ops/s
Iteration  16: 60541261.879 ops/s
Iteration  17: 57473636.153 ops/s
Iteration  18: 60091472.298 ops/s
Iteration  19: 59902537.350 ops/s
Iteration  20: 59068832.805 ops/s
Iteration  21: 61874091.977 ops/s
Iteration  22: 59353397.565 ops/s
Iteration  23: 60856092.325 ops/s
Iteration  24: 57956647.741 ops/s
Iteration  25: 59740782.376 ops/s
Iteration  26: 60094675.263 ops/s
Iteration  27: 56825181.170 ops/s
Iteration  28: 61917050.565 ops/s
Iteration  29: 57706413.721 ops/s
Iteration  30: 61480210.840 ops/s


Result "io.reactivex.rxjava3.internal.schedulers.SchedulerPoolFactoryTest._Benchmark.benchmark_boolPropertiesReturnsValue":
  59767121.192 ±(99.9%) 1038560.995 ops/s [Average]
  (min, avg, max) = (56825181.170, 59767121.192, 62653415.671), stdev = 1554469.323
  CI (99.9%): [58728560.197, 60805682.187] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt         Score         Error  Units
SchedulerPoolFactoryTest._Benchmark.benchmark_boolPropertiesReturnsValue  thrpt   30  59767121.192 ± 1038560.995  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithTimeTest._Benchmark.benchmark_windowAbandonmentCancelsUpstreamExactTimeSkip$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithTimeTest._Benchmark.benchmark_windowAbandonmentCancelsUpstreamExactTimeSkip

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 6101.465 ops/s
# Warmup Iteration   2: 26338.607 ops/s
# Warmup Iteration   3: 63215.911 ops/s
# Warmup Iteration   4: 32388.764 ops/s
# Warmup Iteration   5: 80481.608 ops/s
# Warmup Iteration   6: 87263.056 ops/s
# Warmup Iteration   7: 87832.032 ops/s
# Warmup Iteration   8: 94673.560 ops/s
# Warmup Iteration   9: 86961.932 ops/s
# Warmup Iteration  10: 86698.757 ops/s
# Warmup Iteration  11: 78677.718 ops/s
# Warmup Iteration  12: 90757.845 ops/s
# Warmup Iteration  13: 90076.497 ops/s
# Warmup Iteration  14: 90696.887 ops/s
# Warmup Iteration  15: 80036.397 ops/s
# Warmup Iteration  16: 93906.178 ops/s
# Warmup Iteration  17: 87653.445 ops/s
# Warmup Iteration  18: 89556.233 ops/s
# Warmup Iteration  19: 85640.128 ops/s
# Warmup Iteration  20: 83930.484 ops/s
# Warmup Iteration  21: 92943.393 ops/s
# Warmup Iteration  22: 76561.467 ops/s
# Warmup Iteration  23: 97826.490 ops/s
# Warmup Iteration  24: 93497.515 ops/s
# Warmup Iteration  25: 69501.274 ops/s
# Warmup Iteration  26: 72956.230 ops/s
# Warmup Iteration  27: 85994.518 ops/s
# Warmup Iteration  28: 85526.766 ops/s
# Warmup Iteration  29: 91755.601 ops/s
# Warmup Iteration  30: 88282.103 ops/s
Iteration   1: 97205.179 ops/s
Iteration   2: 95514.438 ops/s
Iteration   3: 94974.017 ops/s
Iteration   4: 88910.029 ops/s
Iteration   5: 93147.857 ops/s
Iteration   6: 88974.218 ops/s
Iteration   7: 92481.983 ops/s
Iteration   8: 80772.589 ops/s
Iteration   9: 93906.796 ops/s
Iteration  10: 90589.341 ops/s
Iteration  11: 91053.234 ops/s
Iteration  12: 99910.803 ops/s
Iteration  13: 97168.354 ops/s
Iteration  14: 93865.199 ops/s
Iteration  15: 89039.574 ops/s
Iteration  16: 95581.581 ops/s
Iteration  17: 92012.019 ops/s
Iteration  18: 90427.871 ops/s
Iteration  19: 90045.722 ops/s
Iteration  20: 81729.337 ops/s
Iteration  21: 89145.749 ops/s
Iteration  22: 89918.879 ops/s
Iteration  23: 90565.984 ops/s
Iteration  24: 95462.630 ops/s
Iteration  25: 83503.382 ops/s
Iteration  26: 78457.149 ops/s
Iteration  27: 88433.970 ops/s
Iteration  28: 89191.040 ops/s
Iteration  29: 92692.820 ops/s
Iteration  30: 99366.044 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithTimeTest._Benchmark.benchmark_windowAbandonmentCancelsUpstreamExactTimeSkip":
  91134.926 ±(99.9%) 3425.378 ops/s [Average]
  (min, avg, max) = (78457.149, 91134.926, 99910.803), stdev = 5126.944
  CI (99.9%): [87709.548, 94560.304] (assumes normal distribution)


# Run complete. Total time: 00:01:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                         Mode  Cnt      Score      Error  Units
ObservableWindowWithTimeTest._Benchmark.benchmark_windowAbandonmentCancelsUpstreamExactTimeSkip  thrpt   30  91134.926 ± 3425.378  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryTest._Benchmark.benchmark_retryWhenTrampolineScheduler$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryTest._Benchmark.benchmark_retryWhenTrampolineScheduler

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 17441.049 ops/s
# Warmup Iteration   2: 57469.743 ops/s
# Warmup Iteration   3: 108773.389 ops/s
# Warmup Iteration   4: 203037.928 ops/s
# Warmup Iteration   5: 200689.315 ops/s
# Warmup Iteration   6: 200072.601 ops/s
# Warmup Iteration   7: 212606.344 ops/s
# Warmup Iteration   8: 211258.216 ops/s
# Warmup Iteration   9: 213970.643 ops/s
# Warmup Iteration  10: 214272.297 ops/s
# Warmup Iteration  11: 207801.403 ops/s
# Warmup Iteration  12: 217394.700 ops/s
# Warmup Iteration  13: 205687.353 ops/s
# Warmup Iteration  14: 218209.087 ops/s
# Warmup Iteration  15: 207490.016 ops/s
# Warmup Iteration  16: 211026.946 ops/s
# Warmup Iteration  17: 169166.967 ops/s
# Warmup Iteration  18: 214067.628 ops/s
# Warmup Iteration  19: 214607.924 ops/s
# Warmup Iteration  20: 204705.999 ops/s
# Warmup Iteration  21: 220348.820 ops/s
# Warmup Iteration  22: 215476.876 ops/s
# Warmup Iteration  23: 211585.617 ops/s
# Warmup Iteration  24: 210814.480 ops/s
# Warmup Iteration  25: 221158.455 ops/s
# Warmup Iteration  26: 209720.825 ops/s
# Warmup Iteration  27: 222131.967 ops/s
# Warmup Iteration  28: 210480.429 ops/s
# Warmup Iteration  29: 218156.139 ops/s
# Warmup Iteration  30: 219234.798 ops/s
Iteration   1: 213813.813 ops/s
Iteration   2: 219700.036 ops/s
Iteration   3: 218017.069 ops/s
Iteration   4: 216831.907 ops/s
Iteration   5: 215461.387 ops/s
Iteration   6: 211777.097 ops/s
Iteration   7: 217486.278 ops/s
Iteration   8: 217059.743 ops/s
Iteration   9: 211589.257 ops/s
Iteration  10: 222630.128 ops/s
Iteration  11: 211672.066 ops/s
Iteration  12: 218655.670 ops/s
Iteration  13: 215738.542 ops/s
Iteration  14: 211734.546 ops/s
Iteration  15: 213036.323 ops/s
Iteration  16: 205791.477 ops/s
Iteration  17: 222993.306 ops/s
Iteration  18: 216288.768 ops/s
Iteration  19: 211128.875 ops/s
Iteration  20: 215926.253 ops/s
Iteration  21: 215149.825 ops/s
Iteration  22: 222591.525 ops/s
Iteration  23: 211675.231 ops/s
Iteration  24: 219407.753 ops/s
Iteration  25: 209813.377 ops/s
Iteration  26: 229038.524 ops/s
Iteration  27: 210940.475 ops/s
Iteration  28: 214022.233 ops/s
Iteration  29: 213587.827 ops/s
Iteration  30: 212147.954 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryTest._Benchmark.benchmark_retryWhenTrampolineScheduler":
  215523.576 ±(99.9%) 3196.913 ops/s [Average]
  (min, avg, max) = (205791.477, 215523.576, 229038.524), stdev = 4784.990
  CI (99.9%): [212326.662, 218720.489] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score      Error  Units
FlowableRetryTest._Benchmark.benchmark_retryWhenTrampolineScheduler  thrpt   30  215523.576 ± 3196.913  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableResumeNextTest._Benchmark.benchmark_resumeNextError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableResumeNextTest._Benchmark.benchmark_resumeNextError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 162168.425 ops/s
# Warmup Iteration   2: 304548.698 ops/s
# Warmup Iteration   3: 357798.133 ops/s
# Warmup Iteration   4: 352556.663 ops/s
# Warmup Iteration   5: 365247.146 ops/s
# Warmup Iteration   6: 366834.517 ops/s
# Warmup Iteration   7: 352667.611 ops/s
# Warmup Iteration   8: 375805.382 ops/s
# Warmup Iteration   9: 374320.715 ops/s
# Warmup Iteration  10: 350898.313 ops/s
# Warmup Iteration  11: 362636.271 ops/s
# Warmup Iteration  12: 358426.193 ops/s
# Warmup Iteration  13: 357568.151 ops/s
# Warmup Iteration  14: 340010.542 ops/s
# Warmup Iteration  15: 357613.377 ops/s
# Warmup Iteration  16: 365573.223 ops/s
# Warmup Iteration  17: 371017.783 ops/s
# Warmup Iteration  18: 389948.566 ops/s
# Warmup Iteration  19: 370765.171 ops/s
# Warmup Iteration  20: 386509.150 ops/s
# Warmup Iteration  21: 378365.545 ops/s
# Warmup Iteration  22: 381140.672 ops/s
# Warmup Iteration  23: 387418.640 ops/s
# Warmup Iteration  24: 371869.168 ops/s
# Warmup Iteration  25: 382582.792 ops/s
# Warmup Iteration  26: 389624.549 ops/s
# Warmup Iteration  27: 362337.237 ops/s
# Warmup Iteration  28: 399157.006 ops/s
# Warmup Iteration  29: 385785.608 ops/s
# Warmup Iteration  30: 361954.977 ops/s
Iteration   1: 400134.472 ops/s
Iteration   2: 381816.939 ops/s
Iteration   3: 373254.206 ops/s
Iteration   4: 386606.530 ops/s
Iteration   5: 369837.606 ops/s
Iteration   6: 376664.531 ops/s
Iteration   7: 379077.428 ops/s
Iteration   8: 381619.574 ops/s
Iteration   9: 382192.395 ops/s
Iteration  10: 372446.444 ops/s
Iteration  11: 384955.846 ops/s
Iteration  12: 374877.250 ops/s
Iteration  13: 388933.621 ops/s
Iteration  14: 356712.366 ops/s
Iteration  15: 369163.980 ops/s
Iteration  16: 389950.179 ops/s
Iteration  17: 370823.678 ops/s
Iteration  18: 386008.600 ops/s
Iteration  19: 386410.321 ops/s
Iteration  20: 375808.550 ops/s
Iteration  21: 385296.539 ops/s
Iteration  22: 368365.735 ops/s
Iteration  23: 390344.216 ops/s
Iteration  24: 380249.470 ops/s
Iteration  25: 375037.599 ops/s
Iteration  26: 389446.548 ops/s
Iteration  27: 381183.205 ops/s
Iteration  28: 386476.002 ops/s
Iteration  29: 376709.817 ops/s
Iteration  30: 378649.110 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableResumeNextTest._Benchmark.benchmark_resumeNextError":
  379968.425 ±(99.9%) 5800.910 ops/s [Average]
  (min, avg, max) = (356712.366, 379968.425, 400134.472), stdev = 8682.530
  CI (99.9%): [374167.515, 385769.335] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
CompletableResumeNextTest._Benchmark.benchmark_resumeNextError  thrpt   30  379968.425 ± 5800.910  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableDoFinallyTest._Benchmark.benchmark_normalError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableDoFinallyTest._Benchmark.benchmark_normalError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 305983.160 ops/s
# Warmup Iteration   2: 582323.844 ops/s
# Warmup Iteration   3: 652563.348 ops/s
# Warmup Iteration   4: 675444.886 ops/s
# Warmup Iteration   5: 611700.731 ops/s
# Warmup Iteration   6: 684195.498 ops/s
# Warmup Iteration   7: 693764.275 ops/s
# Warmup Iteration   8: 705670.410 ops/s
# Warmup Iteration   9: 697889.599 ops/s
# Warmup Iteration  10: 715194.451 ops/s
# Warmup Iteration  11: 663279.652 ops/s
# Warmup Iteration  12: 588998.530 ops/s
# Warmup Iteration  13: 695901.476 ops/s
# Warmup Iteration  14: 675469.548 ops/s
# Warmup Iteration  15: 714251.285 ops/s
# Warmup Iteration  16: 688912.776 ops/s
# Warmup Iteration  17: 742693.763 ops/s
# Warmup Iteration  18: 725912.671 ops/s
# Warmup Iteration  19: 746707.584 ops/s
# Warmup Iteration  20: 770055.877 ops/s
# Warmup Iteration  21: 716339.016 ops/s
# Warmup Iteration  22: 746965.517 ops/s
# Warmup Iteration  23: 722510.472 ops/s
# Warmup Iteration  24: 727420.340 ops/s
# Warmup Iteration  25: 734869.541 ops/s
# Warmup Iteration  26: 722313.378 ops/s
# Warmup Iteration  27: 760177.601 ops/s
# Warmup Iteration  28: 713500.641 ops/s
# Warmup Iteration  29: 775185.198 ops/s
# Warmup Iteration  30: 722523.992 ops/s
Iteration   1: 762734.315 ops/s
Iteration   2: 732504.009 ops/s
Iteration   3: 735940.440 ops/s
Iteration   4: 757411.705 ops/s
Iteration   5: 730219.476 ops/s
Iteration   6: 758533.323 ops/s
Iteration   7: 715791.898 ops/s
Iteration   8: 727782.063 ops/s
Iteration   9: 741441.007 ops/s
Iteration  10: 758597.223 ops/s
Iteration  11: 743507.391 ops/s
Iteration  12: 724226.463 ops/s
Iteration  13: 739945.218 ops/s
Iteration  14: 744471.218 ops/s
Iteration  15: 725169.745 ops/s
Iteration  16: 756387.224 ops/s
Iteration  17: 726166.611 ops/s
Iteration  18: 753813.161 ops/s
Iteration  19: 733349.365 ops/s
Iteration  20: 760591.153 ops/s
Iteration  21: 722052.611 ops/s
Iteration  22: 765027.821 ops/s
Iteration  23: 727353.796 ops/s
Iteration  24: 752957.744 ops/s
Iteration  25: 738681.475 ops/s
Iteration  26: 733843.934 ops/s
Iteration  27: 757357.541 ops/s
Iteration  28: 724046.164 ops/s
Iteration  29: 731322.892 ops/s
Iteration  30: 741166.119 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableDoFinallyTest._Benchmark.benchmark_normalError":
  740746.437 ±(99.9%) 9583.408 ops/s [Average]
  (min, avg, max) = (715791.898, 740746.437, 765027.821), stdev = 14343.995
  CI (99.9%): [731163.029, 750329.845] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
CompletableDoFinallyTest._Benchmark.benchmark_normalError  thrpt   30  740746.437 ± 9583.408  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableUsingTest._Benchmark.benchmark_resourceSupplierThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableUsingTest._Benchmark.benchmark_resourceSupplierThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 322910.617 ops/s
# Warmup Iteration   2: 534123.825 ops/s
# Warmup Iteration   3: 675677.250 ops/s
# Warmup Iteration   4: 614756.823 ops/s
# Warmup Iteration   5: 633165.188 ops/s
# Warmup Iteration   6: 662878.135 ops/s
# Warmup Iteration   7: 654529.086 ops/s
# Warmup Iteration   8: 687688.042 ops/s
# Warmup Iteration   9: 671585.769 ops/s
# Warmup Iteration  10: 658038.576 ops/s
# Warmup Iteration  11: 667438.687 ops/s
# Warmup Iteration  12: 720173.979 ops/s
# Warmup Iteration  13: 662605.186 ops/s
# Warmup Iteration  14: 707902.097 ops/s
# Warmup Iteration  15: 656259.682 ops/s
# Warmup Iteration  16: 689346.086 ops/s
# Warmup Iteration  17: 698813.004 ops/s
# Warmup Iteration  18: 720175.059 ops/s
# Warmup Iteration  19: 686946.326 ops/s
# Warmup Iteration  20: 712697.504 ops/s
# Warmup Iteration  21: 735328.819 ops/s
# Warmup Iteration  22: 700115.753 ops/s
# Warmup Iteration  23: 723245.047 ops/s
# Warmup Iteration  24: 706323.330 ops/s
# Warmup Iteration  25: 689310.343 ops/s
# Warmup Iteration  26: 712707.849 ops/s
# Warmup Iteration  27: 691152.745 ops/s
# Warmup Iteration  28: 703904.569 ops/s
# Warmup Iteration  29: 730451.849 ops/s
# Warmup Iteration  30: 680555.306 ops/s
Iteration   1: 734172.944 ops/s
Iteration   2: 743921.374 ops/s
Iteration   3: 720602.128 ops/s
Iteration   4: 696040.817 ops/s
Iteration   5: 733959.375 ops/s
Iteration   6: 694859.340 ops/s
Iteration   7: 711740.011 ops/s
Iteration   8: 701350.004 ops/s
Iteration   9: 714733.116 ops/s
Iteration  10: 731308.633 ops/s
Iteration  11: 716076.883 ops/s
Iteration  12: 710157.553 ops/s
Iteration  13: 698924.080 ops/s
Iteration  14: 722334.418 ops/s
Iteration  15: 707685.603 ops/s
Iteration  16: 705270.724 ops/s
Iteration  17: 738906.940 ops/s
Iteration  18: 701225.005 ops/s
Iteration  19: 712905.938 ops/s
Iteration  20: 706649.793 ops/s
Iteration  21: 696332.302 ops/s
Iteration  22: 731899.294 ops/s
Iteration  23: 701955.090 ops/s
Iteration  24: 717807.584 ops/s
Iteration  25: 696440.540 ops/s
Iteration  26: 730771.287 ops/s
Iteration  27: 689016.322 ops/s
Iteration  28: 705438.530 ops/s
Iteration  29: 709639.636 ops/s
Iteration  30: 690496.274 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableUsingTest._Benchmark.benchmark_resourceSupplierThrows":
  712420.718 ±(99.9%) 10189.125 ops/s [Average]
  (min, avg, max) = (689016.322, 712420.718, 743921.374), stdev = 15250.603
  CI (99.9%): [702231.593, 722609.843] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score       Error  Units
CompletableUsingTest._Benchmark.benchmark_resourceSupplierThrows  thrpt   30  712420.718 ± 10189.125  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableDisposeOnTest._Benchmark.benchmark_error$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableDisposeOnTest._Benchmark.benchmark_error

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 130466.654 ops/s
# Warmup Iteration   2: 419649.679 ops/s
# Warmup Iteration   3: 592871.497 ops/s
# Warmup Iteration   4: 638293.986 ops/s
# Warmup Iteration   5: 558722.969 ops/s
# Warmup Iteration   6: 626039.140 ops/s
# Warmup Iteration   7: 554788.220 ops/s
# Warmup Iteration   8: 638457.166 ops/s
# Warmup Iteration   9: 623250.214 ops/s
# Warmup Iteration  10: 658425.105 ops/s
# Warmup Iteration  11: 632060.844 ops/s
# Warmup Iteration  12: 639940.496 ops/s
# Warmup Iteration  13: 667450.123 ops/s
# Warmup Iteration  14: 614348.186 ops/s
# Warmup Iteration  15: 671607.446 ops/s
# Warmup Iteration  16: 618952.862 ops/s
# Warmup Iteration  17: 713128.214 ops/s
# Warmup Iteration  18: 662932.646 ops/s
# Warmup Iteration  19: 659506.765 ops/s
# Warmup Iteration  20: 676162.900 ops/s
# Warmup Iteration  21: 691542.910 ops/s
# Warmup Iteration  22: 680901.669 ops/s
# Warmup Iteration  23: 667014.692 ops/s
# Warmup Iteration  24: 659796.510 ops/s
# Warmup Iteration  25: 703137.422 ops/s
# Warmup Iteration  26: 650481.249 ops/s
# Warmup Iteration  27: 692818.443 ops/s
# Warmup Iteration  28: 690815.447 ops/s
# Warmup Iteration  29: 665830.748 ops/s
# Warmup Iteration  30: 700584.499 ops/s
Iteration   1: 663698.157 ops/s
Iteration   2: 698471.046 ops/s
Iteration   3: 706272.974 ops/s
Iteration   4: 685729.696 ops/s
Iteration   5: 650849.535 ops/s
Iteration   6: 703354.064 ops/s
Iteration   7: 665031.721 ops/s
Iteration   8: 721185.980 ops/s
Iteration   9: 694664.091 ops/s
Iteration  10: 669862.810 ops/s
Iteration  11: 678771.642 ops/s
Iteration  12: 717002.352 ops/s
Iteration  13: 671080.774 ops/s
Iteration  14: 686366.277 ops/s
Iteration  15: 667788.986 ops/s
Iteration  16: 688977.334 ops/s
Iteration  17: 700165.765 ops/s
Iteration  18: 676759.737 ops/s
Iteration  19: 702747.738 ops/s
Iteration  20: 662949.002 ops/s
Iteration  21: 689781.594 ops/s
Iteration  22: 660297.420 ops/s
Iteration  23: 686273.712 ops/s
Iteration  24: 686224.361 ops/s
Iteration  25: 668566.177 ops/s
Iteration  26: 711145.439 ops/s
Iteration  27: 713488.228 ops/s
Iteration  28: 656615.857 ops/s
Iteration  29: 699116.784 ops/s
Iteration  30: 685277.825 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableDisposeOnTest._Benchmark.benchmark_error":
  685617.236 ±(99.9%) 12825.555 ops/s [Average]
  (min, avg, max) = (650849.535, 685617.236, 721185.980), stdev = 19196.689
  CI (99.9%): [672791.681, 698442.791] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score       Error  Units
CompletableDisposeOnTest._Benchmark.benchmark_error  thrpt   30  685617.236 ± 12825.555  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_combineLatestArrayEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_combineLatestArrayEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 18665322.763 ops/s
# Warmup Iteration   2: 34918217.237 ops/s
# Warmup Iteration   3: 42043183.221 ops/s
# Warmup Iteration   4: 41399003.057 ops/s
# Warmup Iteration   5: 42634331.956 ops/s
# Warmup Iteration   6: 41897206.237 ops/s
# Warmup Iteration   7: 41728284.381 ops/s
# Warmup Iteration   8: 40346801.250 ops/s
# Warmup Iteration   9: 42474171.250 ops/s
# Warmup Iteration  10: 40439989.052 ops/s
# Warmup Iteration  11: 41878080.698 ops/s
# Warmup Iteration  12: 40529935.408 ops/s
# Warmup Iteration  13: 40322718.197 ops/s
# Warmup Iteration  14: 43490178.007 ops/s
# Warmup Iteration  15: 40184927.764 ops/s
# Warmup Iteration  16: 42781469.276 ops/s
# Warmup Iteration  17: 40858431.221 ops/s
# Warmup Iteration  18: 40656686.308 ops/s
# Warmup Iteration  19: 42930870.429 ops/s
# Warmup Iteration  20: 42639030.555 ops/s
# Warmup Iteration  21: 41068110.436 ops/s
# Warmup Iteration  22: 41703760.074 ops/s
# Warmup Iteration  23: 41413230.227 ops/s
# Warmup Iteration  24: 41377176.695 ops/s
# Warmup Iteration  25: 42100546.513 ops/s
# Warmup Iteration  26: 39803553.291 ops/s
# Warmup Iteration  27: 41119236.556 ops/s
# Warmup Iteration  28: 41673195.543 ops/s
# Warmup Iteration  29: 42341339.558 ops/s
# Warmup Iteration  30: 42648895.997 ops/s
Iteration   1: 39878700.710 ops/s
Iteration   2: 42038920.208 ops/s
Iteration   3: 40892394.637 ops/s
Iteration   4: 41157998.208 ops/s
Iteration   5: 40688246.771 ops/s
Iteration   6: 40810166.642 ops/s
Iteration   7: 43534113.773 ops/s
Iteration   8: 40682106.745 ops/s
Iteration   9: 41043824.145 ops/s
Iteration  10: 40430167.078 ops/s
Iteration  11: 41388652.408 ops/s
Iteration  12: 40745992.928 ops/s
Iteration  13: 41017788.320 ops/s
Iteration  14: 42132546.921 ops/s
Iteration  15: 40731375.699 ops/s
Iteration  16: 41243173.855 ops/s
Iteration  17: 42144612.275 ops/s
Iteration  18: 40228070.373 ops/s
Iteration  19: 41926589.137 ops/s
Iteration  20: 40696937.841 ops/s
Iteration  21: 42920932.347 ops/s
Iteration  22: 42498820.754 ops/s
Iteration  23: 39160545.831 ops/s
Iteration  24: 43119474.723 ops/s
Iteration  25: 40695944.276 ops/s
Iteration  26: 42054263.256 ops/s
Iteration  27: 39865864.551 ops/s
Iteration  28: 41422405.286 ops/s
Iteration  29: 42115939.443 ops/s
Iteration  30: 41404522.637 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_combineLatestArrayEmpty":
  41289036.393 ±(99.9%) 670707.067 ops/s [Average]
  (min, avg, max) = (39160545.831, 41289036.393, 43534113.773), stdev = 1003882.839
  CI (99.9%): [40618329.326, 41959743.460] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt         Score        Error  Units
FlowableCombineLatestTest._Benchmark.benchmark_combineLatestArrayEmpty  thrpt   30  41289036.393 ± 670707.067  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.exceptions.OnErrorNotImplementedExceptionTest._Benchmark.benchmark_completableSubscribe1$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.exceptions.OnErrorNotImplementedExceptionTest._Benchmark.benchmark_completableSubscribe1

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 44063.004 ops/s
# Warmup Iteration   2: 134328.357 ops/s
# Warmup Iteration   3: 170798.877 ops/s
# Warmup Iteration   4: 199466.520 ops/s
# Warmup Iteration   5: 197783.241 ops/s
# Warmup Iteration   6: 199141.820 ops/s
# Warmup Iteration   7: 208738.752 ops/s
# Warmup Iteration   8: 201061.171 ops/s
# Warmup Iteration   9: 201884.322 ops/s
# Warmup Iteration  10: 211031.572 ops/s
# Warmup Iteration  11: 198563.490 ops/s
# Warmup Iteration  12: 208174.474 ops/s
# Warmup Iteration  13: 213829.412 ops/s
# Warmup Iteration  14: 195395.243 ops/s
# Warmup Iteration  15: 216680.058 ops/s
# Warmup Iteration  16: 201888.652 ops/s
# Warmup Iteration  17: 207304.070 ops/s
# Warmup Iteration  18: 217308.447 ops/s
# Warmup Iteration  19: 209341.908 ops/s
# Warmup Iteration  20: 215445.806 ops/s
# Warmup Iteration  21: 208046.844 ops/s
# Warmup Iteration  22: 216901.665 ops/s
# Warmup Iteration  23: 215732.664 ops/s
# Warmup Iteration  24: 209120.348 ops/s
# Warmup Iteration  25: 218707.352 ops/s
# Warmup Iteration  26: 211682.614 ops/s
# Warmup Iteration  27: 211802.090 ops/s
# Warmup Iteration  28: 215163.173 ops/s
# Warmup Iteration  29: 209455.255 ops/s
# Warmup Iteration  30: 218186.111 ops/s
Iteration   1: 209358.793 ops/s
Iteration   2: 207852.771 ops/s
Iteration   3: 218430.002 ops/s
Iteration   4: 210672.024 ops/s
Iteration   5: 215512.732 ops/s
Iteration   6: 209282.105 ops/s
Iteration   7: 223133.896 ops/s
Iteration   8: 212901.171 ops/s
Iteration   9: 209902.863 ops/s
Iteration  10: 217019.644 ops/s
Iteration  11: 201944.039 ops/s
Iteration  12: 214109.948 ops/s
Iteration  13: 207494.162 ops/s
Iteration  14: 214532.566 ops/s
Iteration  15: 208899.886 ops/s
Iteration  16: 207840.215 ops/s
Iteration  17: 217861.403 ops/s
Iteration  18: 206053.625 ops/s
Iteration  19: 218705.671 ops/s
Iteration  20: 222290.262 ops/s
Iteration  21: 208912.227 ops/s
Iteration  22: 213983.842 ops/s
Iteration  23: 209720.674 ops/s
Iteration  24: 216747.306 ops/s
Iteration  25: 209775.085 ops/s
Iteration  26: 212929.835 ops/s
Iteration  27: 216806.733 ops/s
Iteration  28: 212647.739 ops/s
Iteration  29: 203711.095 ops/s
Iteration  30: 224095.926 ops/s


Result "io.reactivex.rxjava3.exceptions.OnErrorNotImplementedExceptionTest._Benchmark.benchmark_completableSubscribe1":
  212770.941 ±(99.9%) 3698.909 ops/s [Average]
  (min, avg, max) = (201944.039, 212770.941, 224095.926), stdev = 5536.353
  CI (99.9%): [209072.032, 216469.850] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt       Score      Error  Units
OnErrorNotImplementedExceptionTest._Benchmark.benchmark_completableSubscribe1  thrpt   30  212770.941 ± 3698.909  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableUsingTest._Benchmark.benchmark_supplierAndDisposerCrashEager$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableUsingTest._Benchmark.benchmark_supplierAndDisposerCrashEager

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 27076.094 ops/s
# Warmup Iteration   2: 164508.008 ops/s
# Warmup Iteration   3: 188410.970 ops/s
# Warmup Iteration   4: 176112.844 ops/s
# Warmup Iteration   5: 203818.424 ops/s
# Warmup Iteration   6: 168503.588 ops/s
# Warmup Iteration   7: 193265.052 ops/s
# Warmup Iteration   8: 168923.025 ops/s
# Warmup Iteration   9: 185388.302 ops/s
# Warmup Iteration  10: 200121.580 ops/s
# Warmup Iteration  11: 202586.922 ops/s
# Warmup Iteration  12: 199151.849 ops/s
# Warmup Iteration  13: 199044.341 ops/s
# Warmup Iteration  14: 200632.661 ops/s
# Warmup Iteration  15: 202602.349 ops/s
# Warmup Iteration  16: 201253.325 ops/s
# Warmup Iteration  17: 208175.655 ops/s
# Warmup Iteration  18: 211099.799 ops/s
# Warmup Iteration  19: 204949.854 ops/s
# Warmup Iteration  20: 212503.615 ops/s
# Warmup Iteration  21: 207897.035 ops/s
# Warmup Iteration  22: 216193.258 ops/s
# Warmup Iteration  23: 217956.470 ops/s
# Warmup Iteration  24: 202430.598 ops/s
# Warmup Iteration  25: 211898.081 ops/s
# Warmup Iteration  26: 208043.188 ops/s
# Warmup Iteration  27: 210319.739 ops/s
# Warmup Iteration  28: 211504.565 ops/s
# Warmup Iteration  29: 205711.256 ops/s
# Warmup Iteration  30: 210376.231 ops/s
Iteration   1: 203286.722 ops/s
Iteration   2: 213300.013 ops/s
Iteration   3: 201954.541 ops/s
Iteration   4: 208654.364 ops/s
Iteration   5: 210431.296 ops/s
Iteration   6: 197570.038 ops/s
Iteration   7: 216529.052 ops/s
Iteration   8: 210199.896 ops/s
Iteration   9: 207706.766 ops/s
Iteration  10: 211311.190 ops/s
Iteration  11: 207524.319 ops/s
Iteration  12: 208039.868 ops/s
Iteration  13: 203940.165 ops/s
Iteration  14: 201961.706 ops/s
Iteration  15: 211628.867 ops/s
Iteration  16: 202179.903 ops/s
Iteration  17: 209598.421 ops/s
Iteration  18: 203347.210 ops/s
Iteration  19: 213073.357 ops/s
Iteration  20: 210929.892 ops/s
Iteration  21: 204579.619 ops/s
Iteration  22: 216255.862 ops/s
Iteration  23: 199979.422 ops/s
Iteration  24: 216673.324 ops/s
Iteration  25: 204320.274 ops/s
Iteration  26: 207526.510 ops/s
Iteration  27: 209201.673 ops/s
Iteration  28: 206776.616 ops/s
Iteration  29: 204965.377 ops/s
Iteration  30: 204811.500 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableUsingTest._Benchmark.benchmark_supplierAndDisposerCrashEager":
  207608.592 ±(99.9%) 3283.048 ops/s [Average]
  (min, avg, max) = (197570.038, 207608.592, 216673.324), stdev = 4913.913
  CI (99.9%): [204325.544, 210891.641] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score      Error  Units
CompletableUsingTest._Benchmark.benchmark_supplierAndDisposerCrashEager  thrpt   30  207608.592 ± 3283.048  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTests._Benchmark.benchmark_shouldTimeoutIfOnNextNotWithinTimeout$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTests._Benchmark.benchmark_shouldTimeoutIfOnNextNotWithinTimeout

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 59309.634 ops/s
# Warmup Iteration   2: 325507.784 ops/s
# Warmup Iteration   3: 427670.633 ops/s
# Warmup Iteration   4: 420400.877 ops/s
# Warmup Iteration   5: 418682.529 ops/s
# Warmup Iteration   6: 414290.731 ops/s
# Warmup Iteration   7: 418592.630 ops/s
# Warmup Iteration   8: 427580.370 ops/s
# Warmup Iteration   9: 412880.264 ops/s
# Warmup Iteration  10: 422175.238 ops/s
# Warmup Iteration  11: 398460.431 ops/s
# Warmup Iteration  12: 428148.436 ops/s
# Warmup Iteration  13: 439708.267 ops/s
# Warmup Iteration  14: 423515.365 ops/s
# Warmup Iteration  15: 430615.515 ops/s
# Warmup Iteration  16: 407813.849 ops/s
# Warmup Iteration  17: 426028.215 ops/s
# Warmup Iteration  18: 425445.907 ops/s
# Warmup Iteration  19: 428074.250 ops/s
# Warmup Iteration  20: 450431.123 ops/s
# Warmup Iteration  21: 435512.070 ops/s
# Warmup Iteration  22: 462978.335 ops/s
# Warmup Iteration  23: 391438.892 ops/s
# Warmup Iteration  24: 450745.830 ops/s
# Warmup Iteration  25: 452930.515 ops/s
# Warmup Iteration  26: 424503.414 ops/s
# Warmup Iteration  27: 449024.966 ops/s
# Warmup Iteration  28: 449613.987 ops/s
# Warmup Iteration  29: 426577.432 ops/s
# Warmup Iteration  30: 468894.828 ops/s
Iteration   1: 435019.126 ops/s
Iteration   2: 442825.255 ops/s
Iteration   3: 449270.608 ops/s
Iteration   4: 453698.167 ops/s
Iteration   5: 435522.722 ops/s
Iteration   6: 460975.700 ops/s
Iteration   7: 439650.852 ops/s
Iteration   8: 466017.928 ops/s
Iteration   9: 424025.893 ops/s
Iteration  10: 449341.187 ops/s
Iteration  11: 457011.187 ops/s
Iteration  12: 437582.178 ops/s
Iteration  13: 444731.792 ops/s
Iteration  14: 427743.500 ops/s
Iteration  15: 446148.476 ops/s
Iteration  16: 444071.101 ops/s
Iteration  17: 446191.732 ops/s
Iteration  18: 437360.322 ops/s
Iteration  19: 448828.510 ops/s
Iteration  20: 434215.209 ops/s
Iteration  21: 474454.203 ops/s
Iteration  22: 429529.091 ops/s
Iteration  23: 452404.088 ops/s
Iteration  24: 436047.168 ops/s
Iteration  25: 464533.760 ops/s
Iteration  26: 354511.271 ops/s
Iteration  27: 425348.626 ops/s
Iteration  28: 458954.383 ops/s
Iteration  29: 433411.733 ops/s
Iteration  30: 454517.352 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTests._Benchmark.benchmark_shouldTimeoutIfOnNextNotWithinTimeout":
  442131.437 ±(99.9%) 13889.269 ops/s [Average]
  (min, avg, max) = (354511.271, 442131.437, 474454.203), stdev = 20788.806
  CI (99.9%): [428242.168, 456020.706] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           Mode  Cnt       Score       Error  Units
ObservableTimeoutTests._Benchmark.benchmark_shouldTimeoutIfOnNextNotWithinTimeout  thrpt   30  442131.437 ± 13889.269  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilTest._Benchmark.benchmark_otherErrors$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilTest._Benchmark.benchmark_otherErrors

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 157570.099 ops/s
# Warmup Iteration   2: 489072.270 ops/s
# Warmup Iteration   3: 553471.674 ops/s
# Warmup Iteration   4: 615055.562 ops/s
# Warmup Iteration   5: 513081.358 ops/s
# Warmup Iteration   6: 621199.757 ops/s
# Warmup Iteration   7: 630228.810 ops/s
# Warmup Iteration   8: 599272.692 ops/s
# Warmup Iteration   9: 619165.921 ops/s
# Warmup Iteration  10: 616653.370 ops/s
# Warmup Iteration  11: 624782.205 ops/s
# Warmup Iteration  12: 609890.942 ops/s
# Warmup Iteration  13: 615337.049 ops/s
# Warmup Iteration  14: 637509.110 ops/s
# Warmup Iteration  15: 600094.398 ops/s
# Warmup Iteration  16: 623730.965 ops/s
# Warmup Iteration  17: 654584.310 ops/s
# Warmup Iteration  18: 645008.775 ops/s
# Warmup Iteration  19: 654454.684 ops/s
# Warmup Iteration  20: 649110.712 ops/s
# Warmup Iteration  21: 685289.605 ops/s
# Warmup Iteration  22: 621813.100 ops/s
# Warmup Iteration  23: 667363.708 ops/s
# Warmup Iteration  24: 656790.422 ops/s
# Warmup Iteration  25: 661165.260 ops/s
# Warmup Iteration  26: 630768.498 ops/s
# Warmup Iteration  27: 661613.310 ops/s
# Warmup Iteration  28: 686397.130 ops/s
# Warmup Iteration  29: 633440.338 ops/s
# Warmup Iteration  30: 677990.294 ops/s
Iteration   1: 621520.611 ops/s
Iteration   2: 674836.980 ops/s
Iteration   3: 636572.152 ops/s
Iteration   4: 658607.317 ops/s
Iteration   5: 642861.048 ops/s
Iteration   6: 640034.486 ops/s
Iteration   7: 679482.629 ops/s
Iteration   8: 618390.741 ops/s
Iteration   9: 678286.170 ops/s
Iteration  10: 622386.436 ops/s
Iteration  11: 644736.457 ops/s
Iteration  12: 670094.726 ops/s
Iteration  13: 623764.074 ops/s
Iteration  14: 658791.434 ops/s
Iteration  15: 669885.757 ops/s
Iteration  16: 633295.821 ops/s
Iteration  17: 658238.373 ops/s
Iteration  18: 672119.816 ops/s
Iteration  19: 651910.794 ops/s
Iteration  20: 650441.180 ops/s
Iteration  21: 650210.509 ops/s
Iteration  22: 685344.694 ops/s
Iteration  23: 665034.090 ops/s
Iteration  24: 626625.867 ops/s
Iteration  25: 670569.503 ops/s
Iteration  26: 649889.556 ops/s
Iteration  27: 664537.580 ops/s
Iteration  28: 669366.151 ops/s
Iteration  29: 667134.331 ops/s
Iteration  30: 628958.776 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilTest._Benchmark.benchmark_otherErrors":
  652797.602 ±(99.9%) 13146.777 ops/s [Average]
  (min, avg, max) = (618390.741, 652797.602, 685344.694), stdev = 19677.478
  CI (99.9%): [639650.825, 665944.379] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score       Error  Units
CompletableTakeUntilTest._Benchmark.benchmark_otherErrors  thrpt   30  652797.602 ± 13146.777  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableScalarXMapTest._Benchmark.benchmark_mapperToCrashingCallable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableScalarXMapTest._Benchmark.benchmark_mapperToCrashingCallable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 374534.868 ops/s
# Warmup Iteration   2: 556178.619 ops/s
# Warmup Iteration   3: 625144.160 ops/s
# Warmup Iteration   4: 627249.407 ops/s
# Warmup Iteration   5: 702309.061 ops/s
# Warmup Iteration   6: 681152.716 ops/s
# Warmup Iteration   7: 684192.465 ops/s
# Warmup Iteration   8: 671573.279 ops/s
# Warmup Iteration   9: 704095.053 ops/s
# Warmup Iteration  10: 665992.571 ops/s
# Warmup Iteration  11: 687654.496 ops/s
# Warmup Iteration  12: 709817.680 ops/s
# Warmup Iteration  13: 670476.714 ops/s
# Warmup Iteration  14: 698816.315 ops/s
# Warmup Iteration  15: 668362.617 ops/s
# Warmup Iteration  16: 680118.021 ops/s
# Warmup Iteration  17: 733208.998 ops/s
# Warmup Iteration  18: 726892.776 ops/s
# Warmup Iteration  19: 731154.538 ops/s
# Warmup Iteration  20: 724218.777 ops/s
# Warmup Iteration  21: 750715.341 ops/s
# Warmup Iteration  22: 712083.778 ops/s
# Warmup Iteration  23: 728027.177 ops/s
# Warmup Iteration  24: 719324.254 ops/s
# Warmup Iteration  25: 737690.172 ops/s
# Warmup Iteration  26: 724128.956 ops/s
# Warmup Iteration  27: 729676.361 ops/s
# Warmup Iteration  28: 728116.036 ops/s
# Warmup Iteration  29: 729448.783 ops/s
# Warmup Iteration  30: 742314.155 ops/s
Iteration   1: 703613.336 ops/s
Iteration   2: 709870.239 ops/s
Iteration   3: 724222.029 ops/s
Iteration   4: 716268.987 ops/s
Iteration   5: 731012.893 ops/s
Iteration   6: 713944.878 ops/s
Iteration   7: 736295.585 ops/s
Iteration   8: 733245.865 ops/s
Iteration   9: 734180.623 ops/s
Iteration  10: 735936.696 ops/s
Iteration  11: 722651.509 ops/s
Iteration  12: 726500.250 ops/s
Iteration  13: 716640.486 ops/s
Iteration  14: 730341.658 ops/s
Iteration  15: 745587.886 ops/s
Iteration  16: 719768.847 ops/s
Iteration  17: 719100.953 ops/s
Iteration  18: 732616.786 ops/s
Iteration  19: 736827.677 ops/s
Iteration  20: 601722.464 ops/s
Iteration  21: 725285.690 ops/s
Iteration  22: 709578.168 ops/s
Iteration  23: 684544.978 ops/s
Iteration  24: 738939.789 ops/s
Iteration  25: 717644.956 ops/s
Iteration  26: 745771.442 ops/s
Iteration  27: 727888.765 ops/s
Iteration  28: 713566.689 ops/s
Iteration  29: 732345.064 ops/s
Iteration  30: 719792.742 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableScalarXMapTest._Benchmark.benchmark_mapperToCrashingCallable":
  720190.264 ±(99.9%) 17275.403 ops/s [Average]
  (min, avg, max) = (601722.464, 720190.264, 745771.442), stdev = 25857.011
  CI (99.9%): [702914.862, 737465.667] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score       Error  Units
ObservableScalarXMapTest._Benchmark.benchmark_mapperToCrashingCallable  thrpt   30  720190.264 ± 17275.403  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilTest._Benchmark.benchmark_mainErrorLate$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilTest._Benchmark.benchmark_mainErrorLate

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 55652.296 ops/s
# Warmup Iteration   2: 110553.055 ops/s
# Warmup Iteration   3: 204233.205 ops/s
# Warmup Iteration   4: 234261.320 ops/s
# Warmup Iteration   5: 245236.826 ops/s
# Warmup Iteration   6: 245199.094 ops/s
# Warmup Iteration   7: 239107.957 ops/s
# Warmup Iteration   8: 248914.668 ops/s
# Warmup Iteration   9: 215310.485 ops/s
# Warmup Iteration  10: 246804.275 ops/s
# Warmup Iteration  11: 248807.009 ops/s
# Warmup Iteration  12: 240339.339 ops/s
# Warmup Iteration  13: 236291.077 ops/s
# Warmup Iteration  14: 249252.922 ops/s
# Warmup Iteration  15: 238136.465 ops/s
# Warmup Iteration  16: 250738.982 ops/s
# Warmup Iteration  17: 242263.569 ops/s
# Warmup Iteration  18: 255528.778 ops/s
# Warmup Iteration  19: 250790.515 ops/s
# Warmup Iteration  20: 252901.433 ops/s
# Warmup Iteration  21: 260261.731 ops/s
# Warmup Iteration  22: 243551.869 ops/s
# Warmup Iteration  23: 247289.383 ops/s
# Warmup Iteration  24: 248814.740 ops/s
# Warmup Iteration  25: 248614.504 ops/s
# Warmup Iteration  26: 256646.050 ops/s
# Warmup Iteration  27: 237448.667 ops/s
# Warmup Iteration  28: 260538.983 ops/s
# Warmup Iteration  29: 248581.901 ops/s
# Warmup Iteration  30: 253644.938 ops/s
Iteration   1: 250269.176 ops/s
Iteration   2: 252588.297 ops/s
Iteration   3: 262780.642 ops/s
Iteration   4: 249753.541 ops/s
Iteration   5: 246644.073 ops/s
Iteration   6: 253144.105 ops/s
Iteration   7: 259333.157 ops/s
Iteration   8: 250433.618 ops/s
Iteration   9: 262157.798 ops/s
Iteration  10: 255832.278 ops/s
Iteration  11: 250226.795 ops/s
Iteration  12: 261937.112 ops/s
Iteration  13: 251953.146 ops/s
Iteration  14: 241720.741 ops/s
Iteration  15: 254731.372 ops/s
Iteration  16: 248253.850 ops/s
Iteration  17: 250787.345 ops/s
Iteration  18: 260187.201 ops/s
Iteration  19: 249229.423 ops/s
Iteration  20: 247171.240 ops/s
Iteration  21: 266734.415 ops/s
Iteration  22: 249178.844 ops/s
Iteration  23: 253324.775 ops/s
Iteration  24: 260782.071 ops/s
Iteration  25: 250967.921 ops/s
Iteration  26: 257986.774 ops/s
Iteration  27: 250193.945 ops/s
Iteration  28: 257777.017 ops/s
Iteration  29: 250463.726 ops/s
Iteration  30: 255024.804 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilTest._Benchmark.benchmark_mainErrorLate":
  253718.973 ±(99.9%) 3839.205 ops/s [Average]
  (min, avg, max) = (241720.741, 253718.973, 266734.415), stdev = 5746.342
  CI (99.9%): [249879.768, 257558.178] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
CompletableTakeUntilTest._Benchmark.benchmark_mainErrorLate  thrpt   30  253718.973 ± 3839.205  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorCompleteTest._Benchmark.benchmark_error$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorCompleteTest._Benchmark.benchmark_error

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 153607.795 ops/s
# Warmup Iteration   2: 480111.117 ops/s
# Warmup Iteration   3: 537455.132 ops/s
# Warmup Iteration   4: 555825.790 ops/s
# Warmup Iteration   5: 572364.657 ops/s
# Warmup Iteration   6: 576040.272 ops/s
# Warmup Iteration   7: 582608.714 ops/s
# Warmup Iteration   8: 561354.440 ops/s
# Warmup Iteration   9: 534004.149 ops/s
# Warmup Iteration  10: 566457.389 ops/s
# Warmup Iteration  11: 584994.361 ops/s
# Warmup Iteration  12: 575480.710 ops/s
# Warmup Iteration  13: 584010.844 ops/s
# Warmup Iteration  14: 574462.678 ops/s
# Warmup Iteration  15: 599135.198 ops/s
# Warmup Iteration  16: 575640.439 ops/s
# Warmup Iteration  17: 612434.159 ops/s
# Warmup Iteration  18: 639147.179 ops/s
# Warmup Iteration  19: 594910.926 ops/s
# Warmup Iteration  20: 630299.400 ops/s
# Warmup Iteration  21: 592848.816 ops/s
# Warmup Iteration  22: 628006.533 ops/s
# Warmup Iteration  23: 625281.663 ops/s
# Warmup Iteration  24: 596474.790 ops/s
# Warmup Iteration  25: 592183.191 ops/s
# Warmup Iteration  26: 634477.594 ops/s
# Warmup Iteration  27: 606536.111 ops/s
# Warmup Iteration  28: 577210.430 ops/s
# Warmup Iteration  29: 633458.559 ops/s
# Warmup Iteration  30: 598351.693 ops/s
Iteration   1: 611742.004 ops/s
Iteration   2: 600198.279 ops/s
Iteration   3: 609815.050 ops/s
Iteration   4: 625388.790 ops/s
Iteration   5: 604146.849 ops/s
Iteration   6: 622146.469 ops/s
Iteration   7: 609553.079 ops/s
Iteration   8: 607109.141 ops/s
Iteration   9: 615136.219 ops/s
Iteration  10: 604462.002 ops/s
Iteration  11: 627714.367 ops/s
Iteration  12: 607885.055 ops/s
Iteration  13: 619412.966 ops/s
Iteration  14: 618472.206 ops/s
Iteration  15: 438793.527 ops/s
Iteration  16: 619469.210 ops/s
Iteration  17: 595979.316 ops/s
Iteration  18: 624973.973 ops/s
Iteration  19: 640636.226 ops/s
Iteration  20: 595769.028 ops/s
Iteration  21: 619719.405 ops/s
Iteration  22: 597307.775 ops/s
Iteration  23: 625376.412 ops/s
Iteration  24: 598415.334 ops/s
Iteration  25: 602065.650 ops/s
Iteration  26: 617779.382 ops/s
Iteration  27: 604458.924 ops/s
Iteration  28: 613335.658 ops/s
Iteration  29: 621225.383 ops/s
Iteration  30: 604662.729 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorCompleteTest._Benchmark.benchmark_error":
  606771.680 ±(99.9%) 22420.714 ops/s [Average]
  (min, avg, max) = (438793.527, 606771.680, 640636.226), stdev = 33558.272
  CI (99.9%): [584350.966, 629192.394] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score       Error  Units
ObservableOnErrorCompleteTest._Benchmark.benchmark_error  thrpt   30  606771.680 ± 22420.714  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.exceptions.OnErrorNotImplementedExceptionTest._Benchmark.benchmark_observableForEachWhile$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.exceptions.OnErrorNotImplementedExceptionTest._Benchmark.benchmark_observableForEachWhile

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 46727.689 ops/s
# Warmup Iteration   2: 136820.703 ops/s
# Warmup Iteration   3: 162042.762 ops/s
# Warmup Iteration   4: 208556.867 ops/s
# Warmup Iteration   5: 207800.800 ops/s
# Warmup Iteration   6: 210490.013 ops/s
# Warmup Iteration   7: 209949.891 ops/s
# Warmup Iteration   8: 203512.988 ops/s
# Warmup Iteration   9: 214591.574 ops/s
# Warmup Iteration  10: 206519.423 ops/s
# Warmup Iteration  11: 205127.810 ops/s
# Warmup Iteration  12: 216257.568 ops/s
# Warmup Iteration  13: 211750.571 ops/s
# Warmup Iteration  14: 204587.701 ops/s
# Warmup Iteration  15: 213281.749 ops/s
# Warmup Iteration  16: 208227.196 ops/s
# Warmup Iteration  17: 217466.782 ops/s
# Warmup Iteration  18: 225646.947 ops/s
# Warmup Iteration  19: 213366.185 ops/s
# Warmup Iteration  20: 220856.805 ops/s
# Warmup Iteration  21: 213477.927 ops/s
# Warmup Iteration  22: 220762.921 ops/s
# Warmup Iteration  23: 212263.554 ops/s
# Warmup Iteration  24: 219060.302 ops/s
# Warmup Iteration  25: 216748.152 ops/s
# Warmup Iteration  26: 216913.722 ops/s
# Warmup Iteration  27: 221789.472 ops/s
# Warmup Iteration  28: 213211.618 ops/s
# Warmup Iteration  29: 224010.820 ops/s
# Warmup Iteration  30: 225574.366 ops/s
Iteration   1: 211916.401 ops/s
Iteration   2: 220849.740 ops/s
Iteration   3: 221889.106 ops/s
Iteration   4: 206554.779 ops/s
Iteration   5: 216924.503 ops/s
Iteration   6: 215688.001 ops/s
Iteration   7: 219068.826 ops/s
Iteration   8: 224816.409 ops/s
Iteration   9: 211789.951 ops/s
Iteration  10: 221720.507 ops/s
Iteration  11: 218342.038 ops/s
Iteration  12: 223320.083 ops/s
Iteration  13: 219681.562 ops/s
Iteration  14: 215637.882 ops/s
Iteration  15: 218756.368 ops/s
Iteration  16: 207928.646 ops/s
Iteration  17: 217710.865 ops/s
Iteration  18: 220880.294 ops/s
Iteration  19: 216766.446 ops/s
Iteration  20: 219064.574 ops/s
Iteration  21: 214320.467 ops/s
Iteration  22: 216018.072 ops/s
Iteration  23: 222250.982 ops/s
Iteration  24: 215870.358 ops/s
Iteration  25: 220825.987 ops/s
Iteration  26: 217229.568 ops/s
Iteration  27: 223748.711 ops/s
Iteration  28: 223626.164 ops/s
Iteration  29: 210302.459 ops/s
Iteration  30: 222460.305 ops/s


Result "io.reactivex.rxjava3.exceptions.OnErrorNotImplementedExceptionTest._Benchmark.benchmark_observableForEachWhile":
  217865.335 ±(99.9%) 3137.623 ops/s [Average]
  (min, avg, max) = (206554.779, 217865.335, 224816.409), stdev = 4696.247
  CI (99.9%): [214727.712, 221002.958] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt       Score      Error  Units
OnErrorNotImplementedExceptionTest._Benchmark.benchmark_observableForEachWhile  thrpt   30  217865.335 ± 3137.623  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReplayEagerTruncateTest._Benchmark.benchmark_replaySelectorReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReplayEagerTruncateTest._Benchmark.benchmark_replaySelectorReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 118750.253 ops/s
# Warmup Iteration   2: 517218.536 ops/s
# Warmup Iteration   3: 586038.511 ops/s
# Warmup Iteration   4: 573716.688 ops/s
# Warmup Iteration   5: 599314.638 ops/s
# Warmup Iteration   6: 525195.835 ops/s
# Warmup Iteration   7: 606242.822 ops/s
# Warmup Iteration   8: 623039.326 ops/s
# Warmup Iteration   9: 622305.441 ops/s
# Warmup Iteration  10: 612890.607 ops/s
# Warmup Iteration  11: 620508.456 ops/s
# Warmup Iteration  12: 602023.684 ops/s
# Warmup Iteration  13: 631666.724 ops/s
# Warmup Iteration  14: 626140.801 ops/s
# Warmup Iteration  15: 591222.127 ops/s
# Warmup Iteration  16: 622788.288 ops/s
# Warmup Iteration  17: 640327.171 ops/s
# Warmup Iteration  18: 634875.843 ops/s
# Warmup Iteration  19: 660687.998 ops/s
# Warmup Iteration  20: 620646.178 ops/s
# Warmup Iteration  21: 664309.530 ops/s
# Warmup Iteration  22: 638000.191 ops/s
# Warmup Iteration  23: 621472.664 ops/s
# Warmup Iteration  24: 634653.488 ops/s
# Warmup Iteration  25: 647703.244 ops/s
# Warmup Iteration  26: 612099.063 ops/s
# Warmup Iteration  27: 624933.646 ops/s
# Warmup Iteration  28: 655597.412 ops/s
# Warmup Iteration  29: 626725.550 ops/s
# Warmup Iteration  30: 653933.882 ops/s
Iteration   1: 623850.294 ops/s
Iteration   2: 667849.205 ops/s
Iteration   3: 645859.451 ops/s
Iteration   4: 637797.909 ops/s
Iteration   5: 667274.205 ops/s
Iteration   6: 622107.619 ops/s
Iteration   7: 666217.651 ops/s
Iteration   8: 630919.213 ops/s
Iteration   9: 659878.078 ops/s
Iteration  10: 527189.376 ops/s
Iteration  11: 638914.656 ops/s
Iteration  12: 633668.446 ops/s
Iteration  13: 662048.506 ops/s
Iteration  14: 630429.472 ops/s
Iteration  15: 630846.963 ops/s
Iteration  16: 651894.298 ops/s
Iteration  17: 643099.632 ops/s
Iteration  18: 668267.587 ops/s
Iteration  19: 652587.318 ops/s
Iteration  20: 639656.245 ops/s
Iteration  21: 640873.474 ops/s
Iteration  22: 646935.392 ops/s
Iteration  23: 648709.165 ops/s
Iteration  24: 626971.647 ops/s
Iteration  25: 642664.966 ops/s
Iteration  26: 663596.887 ops/s
Iteration  27: 609930.891 ops/s
Iteration  28: 648798.273 ops/s
Iteration  29: 639378.269 ops/s
Iteration  30: 667709.170 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableReplayEagerTruncateTest._Benchmark.benchmark_replaySelectorReturnsNull":
  641197.475 ±(99.9%) 17723.287 ops/s [Average]
  (min, avg, max) = (527189.376, 641197.475, 668267.587), stdev = 26527.383
  CI (99.9%): [623474.189, 658920.762] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt       Score       Error  Units
ObservableReplayEagerTruncateTest._Benchmark.benchmark_replaySelectorReturnsNull  thrpt   30  641197.475 ± 17723.287  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTimerTest._Benchmark.benchmark_interval$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTimerTest._Benchmark.benchmark_interval

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.784 ops/s
# Warmup Iteration   2: 26775.403 ops/s
# Warmup Iteration   3: 72006.742 ops/s
# Warmup Iteration   4: 78623.986 ops/s
# Warmup Iteration   5: 148445.216 ops/s
# Warmup Iteration   6: 150434.288 ops/s
# Warmup Iteration   7: 296964.872 ops/s
# Warmup Iteration   8: 383752.031 ops/s
# Warmup Iteration   9: 398137.111 ops/s
# Warmup Iteration  10: 416933.065 ops/s
# Warmup Iteration  11: 395720.742 ops/s
# Warmup Iteration  12: 391617.059 ops/s
# Warmup Iteration  13: 359435.080 ops/s
# Warmup Iteration  14: 420883.792 ops/s
# Warmup Iteration  15: 404801.758 ops/s
# Warmup Iteration  16: 406112.628 ops/s
# Warmup Iteration  17: 413879.023 ops/s
# Warmup Iteration  18: 406837.238 ops/s
# Warmup Iteration  19: 405764.917 ops/s
# Warmup Iteration  20: 403724.510 ops/s
# Warmup Iteration  21: 428016.862 ops/s
# Warmup Iteration  22: 398974.236 ops/s
# Warmup Iteration  23: 413159.550 ops/s
# Warmup Iteration  24: 417626.375 ops/s
# Warmup Iteration  25: 400396.583 ops/s
# Warmup Iteration  26: 403800.522 ops/s
# Warmup Iteration  27: 407390.274 ops/s
# Warmup Iteration  28: 415296.891 ops/s
# Warmup Iteration  29: 415291.249 ops/s
# Warmup Iteration  30: 413517.585 ops/s
Iteration   1: 424083.745 ops/s
Iteration   2: 393962.965 ops/s
Iteration   3: 415499.613 ops/s
Iteration   4: 407698.343 ops/s
Iteration   5: 414774.012 ops/s
Iteration   6: 391100.182 ops/s
Iteration   7: 412837.874 ops/s
Iteration   8: 411100.674 ops/s
Iteration   9: 411062.672 ops/s
Iteration  10: 427824.589 ops/s
Iteration  11: 393578.854 ops/s
Iteration  12: 417709.827 ops/s
Iteration  13: 421638.435 ops/s
Iteration  14: 419291.988 ops/s
Iteration  15: 410093.717 ops/s
Iteration  16: 419586.742 ops/s
Iteration  17: 329083.227 ops/s
Iteration  18: 403889.106 ops/s
Iteration  19: 431345.147 ops/s
Iteration  20: 401648.248 ops/s
Iteration  21: 425695.069 ops/s
Iteration  22: 428087.340 ops/s
Iteration  23: 396865.496 ops/s
Iteration  24: 415176.591 ops/s
Iteration  25: 411225.371 ops/s
Iteration  26: 408733.561 ops/s
Iteration  27: 429585.062 ops/s
Iteration  28: 398697.464 ops/s
Iteration  29: 425711.289 ops/s
Iteration  30: 403550.574 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableTimerTest._Benchmark.benchmark_interval":
  410037.926 ±(99.9%) 12729.773 ops/s [Average]
  (min, avg, max) = (329083.227, 410037.926, 431345.147), stdev = 19053.326
  CI (99.9%): [397308.153, 422767.699] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt       Score       Error  Units
ObservableTimerTest._Benchmark.benchmark_interval  thrpt   30  410037.926 ± 12729.773  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTimerTest._Benchmark.benchmark_timerPeriodically$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTimerTest._Benchmark.benchmark_timerPeriodically

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.740 ops/s
# Warmup Iteration   2: 14728.487 ops/s
# Warmup Iteration   3: 63900.274 ops/s
# Warmup Iteration   4: 88459.612 ops/s
# Warmup Iteration   5: 103377.824 ops/s
# Warmup Iteration   6: 118248.643 ops/s
# Warmup Iteration   7: 123360.880 ops/s
# Warmup Iteration   8: 339661.010 ops/s
# Warmup Iteration   9: 336121.747 ops/s
# Warmup Iteration  10: 356166.429 ops/s
# Warmup Iteration  11: 339969.705 ops/s
# Warmup Iteration  12: 334316.360 ops/s
# Warmup Iteration  13: 354009.515 ops/s
# Warmup Iteration  14: 334279.634 ops/s
# Warmup Iteration  15: 345610.420 ops/s
# Warmup Iteration  16: 346990.813 ops/s
# Warmup Iteration  17: 348587.732 ops/s
# Warmup Iteration  18: 335569.495 ops/s
# Warmup Iteration  19: 353351.817 ops/s
# Warmup Iteration  20: 326814.696 ops/s
# Warmup Iteration  21: 351053.145 ops/s
# Warmup Iteration  22: 356117.162 ops/s
# Warmup Iteration  23: 342662.737 ops/s
# Warmup Iteration  24: 351663.072 ops/s
# Warmup Iteration  25: 344400.386 ops/s
# Warmup Iteration  26: 345918.402 ops/s
# Warmup Iteration  27: 340195.679 ops/s
# Warmup Iteration  28: 343232.407 ops/s
# Warmup Iteration  29: 350005.480 ops/s
# Warmup Iteration  30: 343523.927 ops/s
Iteration   1: 347970.036 ops/s
Iteration   2: 338700.680 ops/s
Iteration   3: 350330.054 ops/s
Iteration   4: 340511.893 ops/s
Iteration   5: 347325.275 ops/s
Iteration   6: 327836.623 ops/s
Iteration   7: 356032.186 ops/s
Iteration   8: 351606.272 ops/s
Iteration   9: 353062.302 ops/s
Iteration  10: 349963.734 ops/s
Iteration  11: 338117.418 ops/s
Iteration  12: 361702.279 ops/s
Iteration  13: 330405.564 ops/s
Iteration  14: 337649.076 ops/s
Iteration  15: 356952.607 ops/s
Iteration  16: 341354.904 ops/s
Iteration  17: 346253.994 ops/s
Iteration  18: 329635.492 ops/s
Iteration  19: 363512.019 ops/s
Iteration  20: 354089.553 ops/s
Iteration  21: 343428.895 ops/s
Iteration  22: 364896.483 ops/s
Iteration  23: 332270.443 ops/s
Iteration  24: 352323.786 ops/s
Iteration  25: 353696.147 ops/s
Iteration  26: 339190.458 ops/s
Iteration  27: 352682.885 ops/s
Iteration  28: 345759.025 ops/s
Iteration  29: 350071.736 ops/s
Iteration  30: 344174.956 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableTimerTest._Benchmark.benchmark_timerPeriodically":
  346716.892 ±(99.9%) 6547.880 ops/s [Average]
  (min, avg, max) = (327836.623, 346716.892, 364896.483), stdev = 9800.559
  CI (99.9%): [340169.013, 353264.772] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score      Error  Units
ObservableTimerTest._Benchmark.benchmark_timerPeriodically  thrpt   30  346716.892 ± 6547.880  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_bufferTimedExactSupplierCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_bufferTimedExactSupplierCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.782 ops/s
# Warmup Iteration   2: 11176.870 ops/s
# Warmup Iteration   3: 57651.332 ops/s
# Warmup Iteration   4: 81911.713 ops/s
# Warmup Iteration   5: 92498.190 ops/s
# Warmup Iteration   6: 126531.853 ops/s
# Warmup Iteration   7: 116482.847 ops/s
# Warmup Iteration   8: 138117.616 ops/s
# Warmup Iteration   9: 228936.474 ops/s
# Warmup Iteration  10: 270899.521 ops/s
# Warmup Iteration  11: 259253.771 ops/s
# Warmup Iteration  12: 271932.957 ops/s
# Warmup Iteration  13: 259478.221 ops/s
# Warmup Iteration  14: 270093.040 ops/s
# Warmup Iteration  15: 247857.232 ops/s
# Warmup Iteration  16: 273694.967 ops/s
# Warmup Iteration  17: 277519.937 ops/s
# Warmup Iteration  18: 267748.498 ops/s
# Warmup Iteration  19: 269706.450 ops/s
# Warmup Iteration  20: 250439.539 ops/s
# Warmup Iteration  21: 262941.157 ops/s
# Warmup Iteration  22: 277135.583 ops/s
# Warmup Iteration  23: 268643.086 ops/s
# Warmup Iteration  24: 277423.591 ops/s
# Warmup Iteration  25: 277996.192 ops/s
# Warmup Iteration  26: 266142.481 ops/s
# Warmup Iteration  27: 278315.017 ops/s
# Warmup Iteration  28: 271864.740 ops/s
# Warmup Iteration  29: 270829.369 ops/s
# Warmup Iteration  30: 279145.067 ops/s
Iteration   1: 219168.501 ops/s
Iteration   2: 272737.136 ops/s
Iteration   3: 264303.146 ops/s
Iteration   4: 269341.580 ops/s
Iteration   5: 274575.601 ops/s
Iteration   6: 265322.804 ops/s
Iteration   7: 284978.771 ops/s
Iteration   8: 278235.713 ops/s
Iteration   9: 264540.778 ops/s
Iteration  10: 283278.541 ops/s
Iteration  11: 266177.097 ops/s
Iteration  12: 276309.758 ops/s
Iteration  13: 269320.113 ops/s
Iteration  14: 269228.387 ops/s
Iteration  15: 270575.140 ops/s
Iteration  16: 276458.982 ops/s
Iteration  17: 273060.505 ops/s
Iteration  18: 264930.224 ops/s
Iteration  19: 278619.723 ops/s
Iteration  20: 270069.487 ops/s
Iteration  21: 273123.159 ops/s
Iteration  22: 280570.125 ops/s
Iteration  23: 258697.646 ops/s
Iteration  24: 276674.560 ops/s
Iteration  25: 259503.549 ops/s
Iteration  26: 275832.297 ops/s
Iteration  27: 265102.894 ops/s
Iteration  28: 268558.245 ops/s
Iteration  29: 271639.204 ops/s
Iteration  30: 273282.878 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_bufferTimedExactSupplierCrash":
  269807.218 ±(99.9%) 7696.689 ops/s [Average]
  (min, avg, max) = (219168.501, 269807.218, 284978.771), stdev = 11520.043
  CI (99.9%): [262110.529, 277503.907] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score      Error  Units
ObservableBufferTest._Benchmark.benchmark_bufferTimedExactSupplierCrash  thrpt   30  269807.218 ± 7696.689  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.BlockingObservableLatestTest._Benchmark.benchmark_simpleJustNext$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.BlockingObservableLatestTest._Benchmark.benchmark_simpleJustNext

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 54377.117 ops/s
# Warmup Iteration   2: 213226.014 ops/s
# Warmup Iteration   3: 210079.656 ops/s
# Warmup Iteration   4: 211623.502 ops/s
# Warmup Iteration   5: 230180.984 ops/s
# Warmup Iteration   6: 238079.077 ops/s
# Warmup Iteration   7: 211395.000 ops/s
# Warmup Iteration   8: 244283.807 ops/s
# Warmup Iteration   9: 242360.831 ops/s
# Warmup Iteration  10: 237285.134 ops/s
# Warmup Iteration  11: 245718.242 ops/s
# Warmup Iteration  12: 249805.851 ops/s
# Warmup Iteration  13: 230440.390 ops/s
# Warmup Iteration  14: 249337.944 ops/s
# Warmup Iteration  15: 231331.793 ops/s
# Warmup Iteration  16: 239332.153 ops/s
# Warmup Iteration  17: 245094.922 ops/s
# Warmup Iteration  18: 241014.069 ops/s
# Warmup Iteration  19: 247578.006 ops/s
# Warmup Iteration  20: 228940.770 ops/s
# Warmup Iteration  21: 253939.481 ops/s
# Warmup Iteration  22: 238283.167 ops/s
# Warmup Iteration  23: 237992.433 ops/s
# Warmup Iteration  24: 239897.697 ops/s
# Warmup Iteration  25: 247327.452 ops/s
# Warmup Iteration  26: 243746.601 ops/s
# Warmup Iteration  27: 246241.426 ops/s
# Warmup Iteration  28: 242383.842 ops/s
# Warmup Iteration  29: 239343.203 ops/s
# Warmup Iteration  30: 240504.801 ops/s
Iteration   1: 243222.042 ops/s
Iteration   2: 245317.879 ops/s
Iteration   3: 241377.440 ops/s
Iteration   4: 247769.044 ops/s
Iteration   5: 236243.468 ops/s
Iteration   6: 237922.990 ops/s
Iteration   7: 243285.775 ops/s
Iteration   8: 241190.339 ops/s
Iteration   9: 244405.303 ops/s
Iteration  10: 239089.345 ops/s
Iteration  11: 245510.151 ops/s
Iteration  12: 242000.073 ops/s
Iteration  13: 243898.859 ops/s
Iteration  14: 246437.106 ops/s
Iteration  15: 237954.302 ops/s
Iteration  16: 231062.935 ops/s
Iteration  17: 245591.861 ops/s
Iteration  18: 242553.670 ops/s
Iteration  19: 239116.554 ops/s
Iteration  20: 247933.799 ops/s
Iteration  21: 242064.066 ops/s
Iteration  22: 249978.326 ops/s
Iteration  23: 235861.412 ops/s
Iteration  24: 250233.974 ops/s
Iteration  25: 237426.232 ops/s
Iteration  26: 241542.075 ops/s
Iteration  27: 247623.731 ops/s
Iteration  28: 237327.410 ops/s
Iteration  29: 235581.770 ops/s
Iteration  30: 249436.782 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.BlockingObservableLatestTest._Benchmark.benchmark_simpleJustNext":
  242298.624 ±(99.9%) 3231.380 ops/s [Average]
  (min, avg, max) = (231062.935, 242298.624, 250233.974), stdev = 4836.578
  CI (99.9%): [239067.244, 245530.004] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
BlockingObservableLatestTest._Benchmark.benchmark_simpleJustNext  thrpt   30  242298.624 ± 3231.380  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybeTest._Benchmark.benchmark_simpleEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybeTest._Benchmark.benchmark_simpleEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 390864.844 ops/s
# Warmup Iteration   2: 1700493.075 ops/s
# Warmup Iteration   3: 1941684.791 ops/s
# Warmup Iteration   4: 1778961.749 ops/s
# Warmup Iteration   5: 2214036.436 ops/s
# Warmup Iteration   6: 2065488.702 ops/s
# Warmup Iteration   7: 2130516.266 ops/s
# Warmup Iteration   8: 2199309.030 ops/s
# Warmup Iteration   9: 2035360.133 ops/s
# Warmup Iteration  10: 2176749.888 ops/s
# Warmup Iteration  11: 2209466.388 ops/s
# Warmup Iteration  12: 2089884.907 ops/s
# Warmup Iteration  13: 2231356.224 ops/s
# Warmup Iteration  14: 2039578.508 ops/s
# Warmup Iteration  15: 2103902.868 ops/s
# Warmup Iteration  16: 2183418.829 ops/s
# Warmup Iteration  17: 2030193.397 ops/s
# Warmup Iteration  18: 2197300.515 ops/s
# Warmup Iteration  19: 2181306.337 ops/s
# Warmup Iteration  20: 2092809.858 ops/s
# Warmup Iteration  21: 2210631.010 ops/s
# Warmup Iteration  22: 2229339.695 ops/s
# Warmup Iteration  23: 2113016.968 ops/s
# Warmup Iteration  24: 2133007.546 ops/s
# Warmup Iteration  25: 2131265.826 ops/s
# Warmup Iteration  26: 1699539.006 ops/s
# Warmup Iteration  27: 2195187.281 ops/s
# Warmup Iteration  28: 2116175.475 ops/s
# Warmup Iteration  29: 2105677.069 ops/s
# Warmup Iteration  30: 2268584.717 ops/s
Iteration   1: 2028110.672 ops/s
Iteration   2: 2222391.681 ops/s
Iteration   3: 2204642.411 ops/s
Iteration   4: 2170047.561 ops/s
Iteration   5: 2168943.968 ops/s
Iteration   6: 2050677.667 ops/s
Iteration   7: 2201596.938 ops/s
Iteration   8: 2060911.927 ops/s
Iteration   9: 2230869.661 ops/s
Iteration  10: 2184467.058 ops/s
Iteration  11: 2170263.405 ops/s
Iteration  12: 2094588.561 ops/s
Iteration  13: 2190457.861 ops/s
Iteration  14: 2108342.009 ops/s
Iteration  15: 2111098.227 ops/s
Iteration  16: 2154736.173 ops/s
Iteration  17: 2101979.998 ops/s
Iteration  18: 2132296.499 ops/s
Iteration  19: 2178939.534 ops/s
Iteration  20: 2205490.393 ops/s
Iteration  21: 2153942.715 ops/s
Iteration  22: 2210776.915 ops/s
Iteration  23: 2234996.326 ops/s
Iteration  24: 2064005.567 ops/s
Iteration  25: 2144374.698 ops/s
Iteration  26: 2216653.198 ops/s
Iteration  27: 2058696.652 ops/s
Iteration  28: 2176641.594 ops/s
Iteration  29: 2111887.300 ops/s
Iteration  30: 2131138.131 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybeTest._Benchmark.benchmark_simpleEmpty":
  2149132.177 ±(99.9%) 39349.650 ops/s [Average]
  (min, avg, max) = (2028110.672, 2149132.177, 2234996.326), stdev = 58896.708
  CI (99.9%): [2109782.527, 2188481.827] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
ObservableSwitchMapMaybeTest._Benchmark.benchmark_simpleEmpty  thrpt   30  2149132.177 ± 39349.650  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybeTest._Benchmark.benchmark_simpleMixed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybeTest._Benchmark.benchmark_simpleMixed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 250847.384 ops/s
# Warmup Iteration   2: 872782.463 ops/s
# Warmup Iteration   3: 857144.387 ops/s
# Warmup Iteration   4: 1078784.471 ops/s
# Warmup Iteration   5: 1114602.157 ops/s
# Warmup Iteration   6: 1021424.985 ops/s
# Warmup Iteration   7: 1021615.995 ops/s
# Warmup Iteration   8: 968613.538 ops/s
# Warmup Iteration   9: 1044256.865 ops/s
# Warmup Iteration  10: 1066994.055 ops/s
# Warmup Iteration  11: 1112402.154 ops/s
# Warmup Iteration  12: 1043106.794 ops/s
# Warmup Iteration  13: 1095185.511 ops/s
# Warmup Iteration  14: 1061175.480 ops/s
# Warmup Iteration  15: 1079350.418 ops/s
# Warmup Iteration  16: 1099138.031 ops/s
# Warmup Iteration  17: 1054399.415 ops/s
# Warmup Iteration  18: 1080636.251 ops/s
# Warmup Iteration  19: 1059663.224 ops/s
# Warmup Iteration  20: 1035950.632 ops/s
# Warmup Iteration  21: 1057502.926 ops/s
# Warmup Iteration  22: 1037347.661 ops/s
# Warmup Iteration  23: 1074798.298 ops/s
# Warmup Iteration  24: 1037040.723 ops/s
# Warmup Iteration  25: 1051850.329 ops/s
# Warmup Iteration  26: 1060129.840 ops/s
# Warmup Iteration  27: 1038029.861 ops/s
# Warmup Iteration  28: 1068077.396 ops/s
# Warmup Iteration  29: 1034020.722 ops/s
# Warmup Iteration  30: 1063656.197 ops/s
Iteration   1: 1078667.040 ops/s
Iteration   2: 1044266.619 ops/s
Iteration   3: 1076169.333 ops/s
Iteration   4: 1076398.183 ops/s
Iteration   5: 1030150.997 ops/s
Iteration   6: 1107035.272 ops/s
Iteration   7: 1010044.644 ops/s
Iteration   8: 1103776.288 ops/s
Iteration   9: 1010812.135 ops/s
Iteration  10: 1093636.251 ops/s
Iteration  11: 1055287.433 ops/s
Iteration  12: 1026469.701 ops/s
Iteration  13: 1086656.330 ops/s
Iteration  14: 1063112.021 ops/s
Iteration  15: 1032494.767 ops/s
Iteration  16: 1059102.507 ops/s
Iteration  17: 1062619.976 ops/s
Iteration  18: 1077383.370 ops/s
Iteration  19: 1065959.950 ops/s
Iteration  20: 1060713.696 ops/s
Iteration  21: 1084203.216 ops/s
Iteration  22: 1046128.474 ops/s
Iteration  23: 1078495.680 ops/s
Iteration  24: 1050003.424 ops/s
Iteration  25: 1074628.606 ops/s
Iteration  26: 1019299.014 ops/s
Iteration  27: 1045451.471 ops/s
Iteration  28: 1088888.042 ops/s
Iteration  29: 1027250.304 ops/s
Iteration  30: 1030800.549 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybeTest._Benchmark.benchmark_simpleMixed":
  1058863.510 ±(99.9%) 18057.771 ops/s [Average]
  (min, avg, max) = (1010044.644, 1058863.510, 1107035.272), stdev = 27028.023
  CI (99.9%): [1040805.739, 1076921.280] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
ObservableSwitchMapMaybeTest._Benchmark.benchmark_simpleMixed  thrpt   30  1058863.510 ± 18057.771  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybeTest._Benchmark.benchmark_simple$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybeTest._Benchmark.benchmark_simple

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 300682.868 ops/s
# Warmup Iteration   2: 1112166.136 ops/s
# Warmup Iteration   3: 1263441.460 ops/s
# Warmup Iteration   4: 1533479.150 ops/s
# Warmup Iteration   5: 1485101.307 ops/s
# Warmup Iteration   6: 1503144.048 ops/s
# Warmup Iteration   7: 1490863.708 ops/s
# Warmup Iteration   8: 1472609.729 ops/s
# Warmup Iteration   9: 1545431.243 ops/s
# Warmup Iteration  10: 1535355.516 ops/s
# Warmup Iteration  11: 1417676.455 ops/s
# Warmup Iteration  12: 1447531.400 ops/s
# Warmup Iteration  13: 1525637.491 ops/s
# Warmup Iteration  14: 1440008.647 ops/s
# Warmup Iteration  15: 1473045.174 ops/s
# Warmup Iteration  16: 1550554.447 ops/s
# Warmup Iteration  17: 1414235.480 ops/s
# Warmup Iteration  18: 1499951.547 ops/s
# Warmup Iteration  19: 1467457.937 ops/s
# Warmup Iteration  20: 1485908.050 ops/s
# Warmup Iteration  21: 1288380.043 ops/s
# Warmup Iteration  22: 1332627.000 ops/s
# Warmup Iteration  23: 1564088.340 ops/s
# Warmup Iteration  24: 1552571.851 ops/s
# Warmup Iteration  25: 1552306.547 ops/s
# Warmup Iteration  26: 1430115.070 ops/s
# Warmup Iteration  27: 1536906.022 ops/s
# Warmup Iteration  28: 1467583.156 ops/s
# Warmup Iteration  29: 1507945.844 ops/s
# Warmup Iteration  30: 1538251.649 ops/s
Iteration   1: 1470407.493 ops/s
Iteration   2: 1545887.346 ops/s
Iteration   3: 1488632.323 ops/s
Iteration   4: 1493297.033 ops/s
Iteration   5: 1502937.022 ops/s
Iteration   6: 1474618.957 ops/s
Iteration   7: 1514563.419 ops/s
Iteration   8: 1487182.515 ops/s
Iteration   9: 1513295.147 ops/s
Iteration  10: 1504943.527 ops/s
Iteration  11: 1524868.295 ops/s
Iteration  12: 1577963.433 ops/s
Iteration  13: 1458325.122 ops/s
Iteration  14: 1526304.498 ops/s
Iteration  15: 1448890.110 ops/s
Iteration  16: 1431290.172 ops/s
Iteration  17: 1526078.314 ops/s
Iteration  18: 1509735.922 ops/s
Iteration  19: 1453599.769 ops/s
Iteration  20: 1498756.122 ops/s
Iteration  21: 1473352.163 ops/s
Iteration  22: 1569689.905 ops/s
Iteration  23: 1447370.206 ops/s
Iteration  24: 1488731.262 ops/s
Iteration  25: 1548268.303 ops/s
Iteration  26: 1465533.938 ops/s
Iteration  27: 1530271.928 ops/s
Iteration  28: 1507130.975 ops/s
Iteration  29: 1451631.792 ops/s
Iteration  30: 1501927.579 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybeTest._Benchmark.benchmark_simple":
  1497849.486 ±(99.9%) 24478.065 ops/s [Average]
  (min, avg, max) = (1431290.172, 1497849.486, 1577963.433), stdev = 36637.618
  CI (99.9%): [1473371.421, 1522327.551] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
ObservableSwitchMapMaybeTest._Benchmark.benchmark_simple  thrpt   30  1497849.486 ± 24478.065  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybeTest._Benchmark.benchmark_drainReentrant$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybeTest._Benchmark.benchmark_drainReentrant

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 319278.665 ops/s
# Warmup Iteration   2: 1117316.141 ops/s
# Warmup Iteration   3: 1996651.544 ops/s
# Warmup Iteration   4: 1839778.457 ops/s
# Warmup Iteration   5: 2180527.483 ops/s
# Warmup Iteration   6: 2160728.656 ops/s
# Warmup Iteration   7: 2193781.671 ops/s
# Warmup Iteration   8: 2166766.484 ops/s
# Warmup Iteration   9: 2174877.915 ops/s
# Warmup Iteration  10: 2195955.588 ops/s
# Warmup Iteration  11: 2195601.817 ops/s
# Warmup Iteration  12: 2197005.075 ops/s
# Warmup Iteration  13: 2239983.782 ops/s
# Warmup Iteration  14: 2202593.661 ops/s
# Warmup Iteration  15: 2107803.517 ops/s
# Warmup Iteration  16: 2184349.526 ops/s
# Warmup Iteration  17: 2305514.985 ops/s
# Warmup Iteration  18: 2174675.243 ops/s
# Warmup Iteration  19: 2286160.236 ops/s
# Warmup Iteration  20: 2248688.085 ops/s
# Warmup Iteration  21: 2291697.133 ops/s
# Warmup Iteration  22: 2238860.179 ops/s
# Warmup Iteration  23: 2261409.078 ops/s
# Warmup Iteration  24: 2122973.118 ops/s
# Warmup Iteration  25: 2305210.603 ops/s
# Warmup Iteration  26: 2187692.471 ops/s
# Warmup Iteration  27: 2226840.425 ops/s
# Warmup Iteration  28: 2292068.356 ops/s
# Warmup Iteration  29: 2170541.599 ops/s
# Warmup Iteration  30: 2306941.247 ops/s
Iteration   1: 2192321.160 ops/s
Iteration   2: 2234472.869 ops/s
Iteration   3: 2251364.285 ops/s
Iteration   4: 2189471.905 ops/s
Iteration   5: 2280007.862 ops/s
Iteration   6: 2146645.127 ops/s
Iteration   7: 2245378.035 ops/s
Iteration   8: 2234353.410 ops/s
Iteration   9: 2182379.968 ops/s
Iteration  10: 2268430.688 ops/s
Iteration  11: 2230366.387 ops/s
Iteration  12: 2281705.231 ops/s
Iteration  13: 2210119.305 ops/s
Iteration  14: 2206258.770 ops/s
Iteration  15: 2247458.384 ops/s
Iteration  16: 2192110.612 ops/s
Iteration  17: 2263573.264 ops/s
Iteration  18: 2172677.093 ops/s
Iteration  19: 2327403.613 ops/s
Iteration  20: 2219463.580 ops/s
Iteration  21: 2276122.528 ops/s
Iteration  22: 2269104.160 ops/s
Iteration  23: 2210670.627 ops/s
Iteration  24: 2201883.228 ops/s
Iteration  25: 2216371.869 ops/s
Iteration  26: 2187728.120 ops/s
Iteration  27: 2222631.330 ops/s
Iteration  28: 2188542.233 ops/s
Iteration  29: 2269475.014 ops/s
Iteration  30: 2209750.672 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybeTest._Benchmark.benchmark_drainReentrant":
  2227608.044 ±(99.9%) 26820.777 ops/s [Average]
  (min, avg, max) = (2146645.127, 2227608.044, 2327403.613), stdev = 40144.080
  CI (99.9%): [2200787.267, 2254428.822] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
ObservableSwitchMapMaybeTest._Benchmark.benchmark_drainReentrant  thrpt   30  2227608.044 ± 26820.777  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybeTest._Benchmark.benchmark_take$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybeTest._Benchmark.benchmark_take

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 427588.883 ops/s
# Warmup Iteration   2: 1630791.541 ops/s
# Warmup Iteration   3: 1927778.860 ops/s
# Warmup Iteration   4: 2220287.323 ops/s
# Warmup Iteration   5: 2232231.760 ops/s
# Warmup Iteration   6: 2241780.023 ops/s
# Warmup Iteration   7: 2196506.035 ops/s
# Warmup Iteration   8: 2372261.292 ops/s
# Warmup Iteration   9: 2205098.691 ops/s
# Warmup Iteration  10: 2291497.153 ops/s
# Warmup Iteration  11: 2224906.827 ops/s
# Warmup Iteration  12: 2231782.251 ops/s
# Warmup Iteration  13: 2319416.014 ops/s
# Warmup Iteration  14: 2248862.302 ops/s
# Warmup Iteration  15: 2025650.005 ops/s
# Warmup Iteration  16: 2166785.762 ops/s
# Warmup Iteration  17: 2227455.469 ops/s
# Warmup Iteration  18: 2207477.082 ops/s
# Warmup Iteration  19: 2362282.301 ops/s
# Warmup Iteration  20: 2169376.578 ops/s
# Warmup Iteration  21: 2323784.925 ops/s
# Warmup Iteration  22: 2332937.955 ops/s
# Warmup Iteration  23: 2156039.908 ops/s
# Warmup Iteration  24: 2312478.811 ops/s
# Warmup Iteration  25: 2233027.380 ops/s
# Warmup Iteration  26: 2354272.773 ops/s
# Warmup Iteration  27: 2202595.352 ops/s
# Warmup Iteration  28: 2269428.667 ops/s
# Warmup Iteration  29: 2356412.728 ops/s
# Warmup Iteration  30: 2185837.225 ops/s
Iteration   1: 2333215.875 ops/s
Iteration   2: 2215481.541 ops/s
Iteration   3: 2215075.258 ops/s
Iteration   4: 2361497.818 ops/s
Iteration   5: 2147941.995 ops/s
Iteration   6: 2320180.909 ops/s
Iteration   7: 2240418.168 ops/s
Iteration   8: 2289477.279 ops/s
Iteration   9: 2239778.784 ops/s
Iteration  10: 2342093.746 ops/s
Iteration  11: 2334777.242 ops/s
Iteration  12: 2333740.195 ops/s
Iteration  13: 2248492.517 ops/s
Iteration  14: 2247096.710 ops/s
Iteration  15: 2189404.976 ops/s
Iteration  16: 2306786.988 ops/s
Iteration  17: 2246311.719 ops/s
Iteration  18: 2306362.808 ops/s
Iteration  19: 2281885.637 ops/s
Iteration  20: 2215169.403 ops/s
Iteration  21: 2274800.148 ops/s
Iteration  22: 2202099.575 ops/s
Iteration  23: 2210293.686 ops/s
Iteration  24: 2212519.431 ops/s
Iteration  25: 2278035.326 ops/s
Iteration  26: 2172104.028 ops/s
Iteration  27: 2219683.123 ops/s
Iteration  28: 2181004.627 ops/s
Iteration  29: 2290664.480 ops/s
Iteration  30: 2303312.160 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybeTest._Benchmark.benchmark_take":
  2258656.872 ±(99.9%) 38147.618 ops/s [Average]
  (min, avg, max) = (2147941.995, 2258656.872, 2361497.818), stdev = 57097.563
  CI (99.9%): [2220509.254, 2296804.490] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
ObservableSwitchMapMaybeTest._Benchmark.benchmark_take  thrpt   30  2258656.872 ± 38147.618  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybeTest._Benchmark.benchmark_mainErrorInnerCompleteDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybeTest._Benchmark.benchmark_mainErrorInnerCompleteDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 76369.394 ops/s
# Warmup Iteration   2: 351477.148 ops/s
# Warmup Iteration   3: 541388.235 ops/s
# Warmup Iteration   4: 516369.123 ops/s
# Warmup Iteration   5: 521443.898 ops/s
# Warmup Iteration   6: 531830.861 ops/s
# Warmup Iteration   7: 593408.621 ops/s
# Warmup Iteration   8: 554639.742 ops/s
# Warmup Iteration   9: 576147.655 ops/s
# Warmup Iteration  10: 601755.528 ops/s
# Warmup Iteration  11: 588730.956 ops/s
# Warmup Iteration  12: 565974.546 ops/s
# Warmup Iteration  13: 597269.091 ops/s
# Warmup Iteration  14: 551297.755 ops/s
# Warmup Iteration  15: 580302.376 ops/s
# Warmup Iteration  16: 558431.587 ops/s
# Warmup Iteration  17: 606051.917 ops/s
# Warmup Iteration  18: 613354.086 ops/s
# Warmup Iteration  19: 585011.570 ops/s
# Warmup Iteration  20: 608719.001 ops/s
# Warmup Iteration  21: 590987.105 ops/s
# Warmup Iteration  22: 605488.159 ops/s
# Warmup Iteration  23: 617782.589 ops/s
# Warmup Iteration  24: 608855.401 ops/s
# Warmup Iteration  25: 570395.359 ops/s
# Warmup Iteration  26: 603744.708 ops/s
# Warmup Iteration  27: 596286.663 ops/s
# Warmup Iteration  28: 617511.921 ops/s
# Warmup Iteration  29: 616035.362 ops/s
# Warmup Iteration  30: 581745.614 ops/s
Iteration   1: 603889.851 ops/s
Iteration   2: 630713.259 ops/s
Iteration   3: 575818.695 ops/s
Iteration   4: 630138.359 ops/s
Iteration   5: 618723.082 ops/s
Iteration   6: 572524.870 ops/s
Iteration   7: 604365.546 ops/s
Iteration   8: 637072.935 ops/s
Iteration   9: 577710.853 ops/s
Iteration  10: 628203.215 ops/s
Iteration  11: 588189.571 ops/s
Iteration  12: 598018.027 ops/s
Iteration  13: 613442.433 ops/s
Iteration  14: 593784.154 ops/s
Iteration  15: 604784.414 ops/s
Iteration  16: 583853.887 ops/s
Iteration  17: 600768.163 ops/s
Iteration  18: 616283.607 ops/s
Iteration  19: 597030.197 ops/s
Iteration  20: 593482.436 ops/s
Iteration  21: 616830.331 ops/s
Iteration  22: 598749.392 ops/s
Iteration  23: 628997.798 ops/s
Iteration  24: 584095.055 ops/s
Iteration  25: 605901.113 ops/s
Iteration  26: 614205.936 ops/s
Iteration  27: 592705.669 ops/s
Iteration  28: 608653.013 ops/s
Iteration  29: 599675.382 ops/s
Iteration  30: 592604.021 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybeTest._Benchmark.benchmark_mainErrorInnerCompleteDelayError":
  603707.175 ±(99.9%) 11499.928 ops/s [Average]
  (min, avg, max) = (572524.870, 603707.175, 637072.935), stdev = 17212.552
  CI (99.9%): [592207.247, 615207.103] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            Mode  Cnt       Score       Error  Units
ObservableSwitchMapMaybeTest._Benchmark.benchmark_mainErrorInnerCompleteDelayError  thrpt   30  603707.175 ± 11499.928  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybeTest._Benchmark.benchmark_mainError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybeTest._Benchmark.benchmark_mainError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 104899.401 ops/s
# Warmup Iteration   2: 544694.606 ops/s
# Warmup Iteration   3: 607416.153 ops/s
# Warmup Iteration   4: 632511.966 ops/s
# Warmup Iteration   5: 679528.047 ops/s
# Warmup Iteration   6: 650346.920 ops/s
# Warmup Iteration   7: 624411.999 ops/s
# Warmup Iteration   8: 644287.506 ops/s
# Warmup Iteration   9: 654362.708 ops/s
# Warmup Iteration  10: 616080.991 ops/s
# Warmup Iteration  11: 569055.840 ops/s
# Warmup Iteration  12: 640781.651 ops/s
# Warmup Iteration  13: 656623.340 ops/s
# Warmup Iteration  14: 619561.332 ops/s
# Warmup Iteration  15: 653678.076 ops/s
# Warmup Iteration  16: 611911.954 ops/s
# Warmup Iteration  17: 688864.876 ops/s
# Warmup Iteration  18: 664402.160 ops/s
# Warmup Iteration  19: 681210.551 ops/s
# Warmup Iteration  20: 681138.400 ops/s
# Warmup Iteration  21: 646486.726 ops/s
# Warmup Iteration  22: 699187.557 ops/s
# Warmup Iteration  23: 670022.561 ops/s
# Warmup Iteration  24: 693376.098 ops/s
# Warmup Iteration  25: 703307.950 ops/s
# Warmup Iteration  26: 669646.266 ops/s
# Warmup Iteration  27: 690326.226 ops/s
# Warmup Iteration  28: 676347.003 ops/s
# Warmup Iteration  29: 692462.878 ops/s
# Warmup Iteration  30: 666655.962 ops/s
Iteration   1: 687963.944 ops/s
Iteration   2: 677936.386 ops/s
Iteration   3: 663542.815 ops/s
Iteration   4: 693870.299 ops/s
Iteration   5: 666645.615 ops/s
Iteration   6: 725755.838 ops/s
Iteration   7: 689205.491 ops/s
Iteration   8: 677791.922 ops/s
Iteration   9: 699766.301 ops/s
Iteration  10: 671455.673 ops/s
Iteration  11: 711746.770 ops/s
Iteration  12: 698276.245 ops/s
Iteration  13: 670049.413 ops/s
Iteration  14: 687707.943 ops/s
Iteration  15: 693932.940 ops/s
Iteration  16: 706491.250 ops/s
Iteration  17: 652414.180 ops/s
Iteration  18: 710522.307 ops/s
Iteration  19: 673209.471 ops/s
Iteration  20: 715256.830 ops/s
Iteration  21: 662766.310 ops/s
Iteration  22: 709763.039 ops/s
Iteration  23: 712509.651 ops/s
Iteration  24: 666667.200 ops/s
Iteration  25: 699371.474 ops/s
Iteration  26: 686142.572 ops/s
Iteration  27: 716680.643 ops/s
Iteration  28: 657812.610 ops/s
Iteration  29: 698156.771 ops/s
Iteration  30: 703469.930 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybeTest._Benchmark.benchmark_mainError":
  689562.728 ±(99.9%) 13327.356 ops/s [Average]
  (min, avg, max) = (652414.180, 689562.728, 725755.838), stdev = 19947.761
  CI (99.9%): [676235.371, 702890.084] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score       Error  Units
ObservableSwitchMapMaybeTest._Benchmark.benchmark_mainError  thrpt   30  689562.728 ± 13327.356  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybeTest._Benchmark.benchmark_mainErrorInnerSuccessDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybeTest._Benchmark.benchmark_mainErrorInnerSuccessDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 63124.690 ops/s
# Warmup Iteration   2: 263015.173 ops/s
# Warmup Iteration   3: 530935.902 ops/s
# Warmup Iteration   4: 460098.654 ops/s
# Warmup Iteration   5: 569957.338 ops/s
# Warmup Iteration   6: 541517.628 ops/s
# Warmup Iteration   7: 560049.052 ops/s
# Warmup Iteration   8: 548462.826 ops/s
# Warmup Iteration   9: 564625.936 ops/s
# Warmup Iteration  10: 550602.608 ops/s
# Warmup Iteration  11: 540247.222 ops/s
# Warmup Iteration  12: 561391.534 ops/s
# Warmup Iteration  13: 557398.185 ops/s
# Warmup Iteration  14: 547507.638 ops/s
# Warmup Iteration  15: 576071.070 ops/s
# Warmup Iteration  16: 523544.384 ops/s
# Warmup Iteration  17: 599268.434 ops/s
# Warmup Iteration  18: 571950.628 ops/s
# Warmup Iteration  19: 577782.974 ops/s
# Warmup Iteration  20: 592132.684 ops/s
# Warmup Iteration  21: 585684.489 ops/s
# Warmup Iteration  22: 599227.352 ops/s
# Warmup Iteration  23: 591619.105 ops/s
# Warmup Iteration  24: 561202.565 ops/s
# Warmup Iteration  25: 607626.877 ops/s
# Warmup Iteration  26: 566407.940 ops/s
# Warmup Iteration  27: 595746.882 ops/s
# Warmup Iteration  28: 557676.319 ops/s
# Warmup Iteration  29: 590930.553 ops/s
# Warmup Iteration  30: 580677.567 ops/s
Iteration   1: 587362.390 ops/s
Iteration   2: 591771.475 ops/s
Iteration   3: 566226.838 ops/s
Iteration   4: 582869.107 ops/s
Iteration   5: 589397.553 ops/s
Iteration   6: 572966.558 ops/s
Iteration   7: 577202.815 ops/s
Iteration   8: 579706.882 ops/s
Iteration   9: 582021.783 ops/s
Iteration  10: 583451.102 ops/s
Iteration  11: 598767.486 ops/s
Iteration  12: 568022.084 ops/s
Iteration  13: 591768.085 ops/s
Iteration  14: 583867.269 ops/s
Iteration  15: 582342.772 ops/s
Iteration  16: 582717.769 ops/s
Iteration  17: 573118.310 ops/s
Iteration  18: 590537.135 ops/s
Iteration  19: 577194.329 ops/s
Iteration  20: 571735.440 ops/s
Iteration  21: 577668.300 ops/s
Iteration  22: 586910.619 ops/s
Iteration  23: 607411.374 ops/s
Iteration  24: 554585.815 ops/s
Iteration  25: 596616.003 ops/s
Iteration  26: 585801.772 ops/s
Iteration  27: 578663.411 ops/s
Iteration  28: 555389.267 ops/s
Iteration  29: 558113.960 ops/s
Iteration  30: 582309.407 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybeTest._Benchmark.benchmark_mainErrorInnerSuccessDelayError":
  580550.570 ±(99.9%) 8127.839 ops/s [Average]
  (min, avg, max) = (554585.815, 580550.570, 607411.374), stdev = 12165.368
  CI (99.9%): [572422.731, 588678.410] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           Mode  Cnt       Score      Error  Units
ObservableSwitchMapMaybeTest._Benchmark.benchmark_mainErrorInnerSuccessDelayError  thrpt   30  580550.570 ± 8127.839  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybeTest._Benchmark.benchmark_mainErrorAfterTermination$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybeTest._Benchmark.benchmark_mainErrorAfterTermination

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 19406.850 ops/s
# Warmup Iteration   2: 100018.403 ops/s
# Warmup Iteration   3: 156705.059 ops/s
# Warmup Iteration   4: 146706.730 ops/s
# Warmup Iteration   5: 113260.939 ops/s
# Warmup Iteration   6: 169232.134 ops/s
# Warmup Iteration   7: 163451.034 ops/s
# Warmup Iteration   8: 163774.848 ops/s
# Warmup Iteration   9: 168485.742 ops/s
# Warmup Iteration  10: 158388.313 ops/s
# Warmup Iteration  11: 169573.624 ops/s
# Warmup Iteration  12: 163206.743 ops/s
# Warmup Iteration  13: 166195.938 ops/s
# Warmup Iteration  14: 166429.035 ops/s
# Warmup Iteration  15: 161157.334 ops/s
# Warmup Iteration  16: 172867.200 ops/s
# Warmup Iteration  17: 165518.891 ops/s
# Warmup Iteration  18: 177737.159 ops/s
# Warmup Iteration  19: 168053.142 ops/s
# Warmup Iteration  20: 167032.540 ops/s
# Warmup Iteration  21: 176064.082 ops/s
# Warmup Iteration  22: 167504.679 ops/s
# Warmup Iteration  23: 176140.309 ops/s
# Warmup Iteration  24: 169459.209 ops/s
# Warmup Iteration  25: 169788.832 ops/s
# Warmup Iteration  26: 176633.493 ops/s
# Warmup Iteration  27: 172540.872 ops/s
# Warmup Iteration  28: 166588.065 ops/s
# Warmup Iteration  29: 180469.240 ops/s
# Warmup Iteration  30: 166240.145 ops/s
Iteration   1: 171697.806 ops/s
Iteration   2: 176691.112 ops/s
Iteration   3: 168632.046 ops/s
Iteration   4: 169768.098 ops/s
Iteration   5: 174326.643 ops/s
Iteration   6: 169554.372 ops/s
Iteration   7: 172574.887 ops/s
Iteration   8: 176738.224 ops/s
Iteration   9: 168357.975 ops/s
Iteration  10: 177087.263 ops/s
Iteration  11: 165956.571 ops/s
Iteration  12: 178538.105 ops/s
Iteration  13: 172423.667 ops/s
Iteration  14: 176840.122 ops/s
Iteration  15: 170453.494 ops/s
Iteration  16: 170706.387 ops/s
Iteration  17: 175415.931 ops/s
Iteration  18: 173031.580 ops/s
Iteration  19: 170973.356 ops/s
Iteration  20: 173344.160 ops/s
Iteration  21: 168390.409 ops/s
Iteration  22: 176235.570 ops/s
Iteration  23: 168621.502 ops/s
Iteration  24: 169742.521 ops/s
Iteration  25: 175529.860 ops/s
Iteration  26: 168242.239 ops/s
Iteration  27: 170719.574 ops/s
Iteration  28: 167381.733 ops/s
Iteration  29: 172469.852 ops/s
Iteration  30: 170433.674 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybeTest._Benchmark.benchmark_mainErrorAfterTermination":
  172029.291 ±(99.9%) 2267.222 ops/s [Average]
  (min, avg, max) = (165956.571, 172029.291, 178538.105), stdev = 3393.472
  CI (99.9%): [169762.069, 174296.514] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt       Score      Error  Units
ObservableSwitchMapMaybeTest._Benchmark.benchmark_mainErrorAfterTermination  thrpt   30  172029.291 ± 2267.222  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_switchMapFunctionReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_switchMapFunctionReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 279325.555 ops/s
# Warmup Iteration   2: 569226.460 ops/s
# Warmup Iteration   3: 590736.145 ops/s
# Warmup Iteration   4: 675281.457 ops/s
# Warmup Iteration   5: 717619.353 ops/s
# Warmup Iteration   6: 668355.046 ops/s
# Warmup Iteration   7: 708200.766 ops/s
# Warmup Iteration   8: 690976.801 ops/s
# Warmup Iteration   9: 669713.634 ops/s
# Warmup Iteration  10: 678805.643 ops/s
# Warmup Iteration  11: 673726.679 ops/s
# Warmup Iteration  12: 676606.230 ops/s
# Warmup Iteration  13: 693272.768 ops/s
# Warmup Iteration  14: 691553.387 ops/s
# Warmup Iteration  15: 679806.426 ops/s
# Warmup Iteration  16: 692819.138 ops/s
# Warmup Iteration  17: 688114.152 ops/s
# Warmup Iteration  18: 745281.425 ops/s
# Warmup Iteration  19: 704509.915 ops/s
# Warmup Iteration  20: 735926.933 ops/s
# Warmup Iteration  21: 752469.353 ops/s
# Warmup Iteration  22: 704852.625 ops/s
# Warmup Iteration  23: 754589.524 ops/s
# Warmup Iteration  24: 721680.697 ops/s
# Warmup Iteration  25: 723100.026 ops/s
# Warmup Iteration  26: 743127.503 ops/s
# Warmup Iteration  27: 718209.959 ops/s
# Warmup Iteration  28: 748770.533 ops/s
# Warmup Iteration  29: 709819.439 ops/s
# Warmup Iteration  30: 738925.267 ops/s
Iteration   1: 695651.617 ops/s
Iteration   2: 740079.907 ops/s
Iteration   3: 721683.549 ops/s
Iteration   4: 747119.403 ops/s
Iteration   5: 737084.958 ops/s
Iteration   6: 692280.275 ops/s
Iteration   7: 740748.451 ops/s
Iteration   8: 702059.473 ops/s
Iteration   9: 739922.182 ops/s
Iteration  10: 742763.235 ops/s
Iteration  11: 713086.053 ops/s
Iteration  12: 732274.254 ops/s
Iteration  13: 729453.372 ops/s
Iteration  14: 728126.163 ops/s
Iteration  15: 737383.478 ops/s
Iteration  16: 699398.701 ops/s
Iteration  17: 750648.645 ops/s
Iteration  18: 760073.424 ops/s
Iteration  19: 694282.151 ops/s
Iteration  20: 749235.758 ops/s
Iteration  21: 712350.609 ops/s
Iteration  22: 748091.298 ops/s
Iteration  23: 715829.322 ops/s
Iteration  24: 720717.073 ops/s
Iteration  25: 701163.561 ops/s
Iteration  26: 731410.734 ops/s
Iteration  27: 732323.993 ops/s
Iteration  28: 742055.738 ops/s
Iteration  29: 693673.821 ops/s
Iteration  30: 740023.587 ops/s


Result "io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_switchMapFunctionReturnsNull":
  726366.493 ±(99.9%) 13287.634 ops/s [Average]
  (min, avg, max) = (692280.275, 726366.493, 760073.424), stdev = 19888.306
  CI (99.9%): [713078.859, 739654.126] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score       Error  Units
ObservableNullTests._Benchmark.benchmark_switchMapFunctionReturnsNull  thrpt   30  726366.493 ± 13287.634  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybeTest._Benchmark.benchmark_isDisposed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybeTest._Benchmark.benchmark_isDisposed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 419455.400 ops/s
# Warmup Iteration   2: 1997242.179 ops/s
# Warmup Iteration   3: 2717181.659 ops/s
# Warmup Iteration   4: 3162914.304 ops/s
# Warmup Iteration   5: 3270522.815 ops/s
# Warmup Iteration   6: 3095813.779 ops/s
# Warmup Iteration   7: 3279461.938 ops/s
# Warmup Iteration   8: 3366009.896 ops/s
# Warmup Iteration   9: 3163237.784 ops/s
# Warmup Iteration  10: 3180194.854 ops/s
# Warmup Iteration  11: 3328315.988 ops/s
# Warmup Iteration  12: 3170756.233 ops/s
# Warmup Iteration  13: 3348287.005 ops/s
# Warmup Iteration  14: 3162139.223 ops/s
# Warmup Iteration  15: 3183169.248 ops/s
# Warmup Iteration  16: 3326595.225 ops/s
# Warmup Iteration  17: 3159021.723 ops/s
# Warmup Iteration  18: 3213858.885 ops/s
# Warmup Iteration  19: 3209147.004 ops/s
# Warmup Iteration  20: 3172998.849 ops/s
# Warmup Iteration  21: 3241733.736 ops/s
# Warmup Iteration  22: 3109032.022 ops/s
# Warmup Iteration  23: 3275751.318 ops/s
# Warmup Iteration  24: 3204930.434 ops/s
# Warmup Iteration  25: 3155536.359 ops/s
# Warmup Iteration  26: 3348533.267 ops/s
# Warmup Iteration  27: 3134814.628 ops/s
# Warmup Iteration  28: 3239023.029 ops/s
# Warmup Iteration  29: 3088391.705 ops/s
# Warmup Iteration  30: 3230289.863 ops/s
Iteration   1: 3238295.667 ops/s
Iteration   2: 3196353.677 ops/s
Iteration   3: 3280301.490 ops/s
Iteration   4: 3179316.638 ops/s
Iteration   5: 3245301.826 ops/s
Iteration   6: 3178733.794 ops/s
Iteration   7: 3308602.159 ops/s
Iteration   8: 3213419.722 ops/s
Iteration   9: 3142361.766 ops/s
Iteration  10: 3331414.336 ops/s
Iteration  11: 3151809.889 ops/s
Iteration  12: 3355954.483 ops/s
Iteration  13: 3150401.335 ops/s
Iteration  14: 3122918.981 ops/s
Iteration  15: 3182365.950 ops/s
Iteration  16: 3337987.361 ops/s
Iteration  17: 3112380.579 ops/s
Iteration  18: 3318446.695 ops/s
Iteration  19: 3207624.791 ops/s
Iteration  20: 3214293.616 ops/s
Iteration  21: 3163960.767 ops/s
Iteration  22: 3288913.470 ops/s
Iteration  23: 3099212.288 ops/s
Iteration  24: 3218050.612 ops/s
Iteration  25: 3233513.551 ops/s
Iteration  26: 3170685.678 ops/s
Iteration  27: 3303411.600 ops/s
Iteration  28: 3142488.997 ops/s
Iteration  29: 3262864.190 ops/s
Iteration  30: 3125433.120 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybeTest._Benchmark.benchmark_isDisposed":
  3215893.968 ±(99.9%) 49221.184 ops/s [Average]
  (min, avg, max) = (3099212.288, 3215893.968, 3355954.483), stdev = 73671.957
  CI (99.9%): [3166672.783, 3265115.152] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
ObservableMergeWithMaybeTest._Benchmark.benchmark_isDisposed  thrpt   30  3215893.968 ± 49221.184  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybeTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybeTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 68546.304 ops/s
# Warmup Iteration   2: 440984.586 ops/s
# Warmup Iteration   3: 444081.352 ops/s
# Warmup Iteration   4: 456126.219 ops/s
# Warmup Iteration   5: 495824.173 ops/s
# Warmup Iteration   6: 497916.116 ops/s
# Warmup Iteration   7: 454300.789 ops/s
# Warmup Iteration   8: 501952.308 ops/s
# Warmup Iteration   9: 495320.058 ops/s
# Warmup Iteration  10: 509543.186 ops/s
# Warmup Iteration  11: 514286.038 ops/s
# Warmup Iteration  12: 504876.882 ops/s
# Warmup Iteration  13: 504345.109 ops/s
# Warmup Iteration  14: 523672.571 ops/s
# Warmup Iteration  15: 495000.657 ops/s
# Warmup Iteration  16: 529875.948 ops/s
# Warmup Iteration  17: 519696.647 ops/s
# Warmup Iteration  18: 532138.392 ops/s
# Warmup Iteration  19: 532973.174 ops/s
# Warmup Iteration  20: 525598.713 ops/s
# Warmup Iteration  21: 547210.604 ops/s
# Warmup Iteration  22: 522688.650 ops/s
# Warmup Iteration  23: 519957.151 ops/s
# Warmup Iteration  24: 533641.903 ops/s
# Warmup Iteration  25: 540930.568 ops/s
# Warmup Iteration  26: 520318.087 ops/s
# Warmup Iteration  27: 536799.586 ops/s
# Warmup Iteration  28: 520250.112 ops/s
# Warmup Iteration  29: 539325.213 ops/s
# Warmup Iteration  30: 535942.568 ops/s
Iteration   1: 513757.465 ops/s
Iteration   2: 531857.587 ops/s
Iteration   3: 527741.395 ops/s
Iteration   4: 524553.972 ops/s
Iteration   5: 549419.374 ops/s
Iteration   6: 507767.171 ops/s
Iteration   7: 527675.065 ops/s
Iteration   8: 537127.303 ops/s
Iteration   9: 516691.091 ops/s
Iteration  10: 534365.794 ops/s
Iteration  11: 506410.745 ops/s
Iteration  12: 520636.692 ops/s
Iteration  13: 528185.119 ops/s
Iteration  14: 516605.221 ops/s
Iteration  15: 523864.440 ops/s
Iteration  16: 532193.312 ops/s
Iteration  17: 542384.408 ops/s
Iteration  18: 541360.478 ops/s
Iteration  19: 509950.787 ops/s
Iteration  20: 530493.773 ops/s
Iteration  21: 531139.872 ops/s
Iteration  22: 531950.430 ops/s
Iteration  23: 515490.811 ops/s
Iteration  24: 524285.020 ops/s
Iteration  25: 539075.851 ops/s
Iteration  26: 425662.089 ops/s
Iteration  27: 546071.785 ops/s
Iteration  28: 520109.570 ops/s
Iteration  29: 509915.385 ops/s
Iteration  30: 530559.928 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybeTest._Benchmark.benchmark_doubleOnSubscribe":
  523243.398 ±(99.9%) 14461.533 ops/s [Average]
  (min, avg, max) = (425662.089, 523243.398, 549419.374), stdev = 21645.343
  CI (99.9%): [508781.865, 537704.931] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score       Error  Units
ObservableSwitchMapMaybeTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  523243.398 ± 14461.533  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybeTest._Benchmark.benchmark_undeliverableUponCancel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybeTest._Benchmark.benchmark_undeliverableUponCancel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 33504.533 ops/s
# Warmup Iteration   2: 161374.090 ops/s
# Warmup Iteration   3: 176349.585 ops/s
# Warmup Iteration   4: 200111.862 ops/s
# Warmup Iteration   5: 212787.129 ops/s
# Warmup Iteration   6: 206958.107 ops/s
# Warmup Iteration   7: 198921.237 ops/s
# Warmup Iteration   8: 206107.418 ops/s
# Warmup Iteration   9: 214991.152 ops/s
# Warmup Iteration  10: 198536.126 ops/s
# Warmup Iteration  11: 208506.296 ops/s
# Warmup Iteration  12: 217860.492 ops/s
# Warmup Iteration  13: 199339.934 ops/s
# Warmup Iteration  14: 216391.052 ops/s
# Warmup Iteration  15: 200532.745 ops/s
# Warmup Iteration  16: 204153.502 ops/s
# Warmup Iteration  17: 218141.366 ops/s
# Warmup Iteration  18: 215063.560 ops/s
# Warmup Iteration  19: 211656.100 ops/s
# Warmup Iteration  20: 205966.014 ops/s
# Warmup Iteration  21: 214424.889 ops/s
# Warmup Iteration  22: 216809.254 ops/s
# Warmup Iteration  23: 212998.628 ops/s
# Warmup Iteration  24: 210616.402 ops/s
# Warmup Iteration  25: 211006.456 ops/s
# Warmup Iteration  26: 215454.085 ops/s
# Warmup Iteration  27: 216706.174 ops/s
# Warmup Iteration  28: 213462.435 ops/s
# Warmup Iteration  29: 217731.763 ops/s
# Warmup Iteration  30: 206952.326 ops/s
Iteration   1: 216488.442 ops/s
Iteration   2: 210984.249 ops/s
Iteration   3: 212324.174 ops/s
Iteration   4: 217860.570 ops/s
Iteration   5: 203256.223 ops/s
Iteration   6: 210954.979 ops/s
Iteration   7: 214795.055 ops/s
Iteration   8: 205402.838 ops/s
Iteration   9: 213752.871 ops/s
Iteration  10: 206670.501 ops/s
Iteration  11: 215052.858 ops/s
Iteration  12: 217383.942 ops/s
Iteration  13: 209266.487 ops/s
Iteration  14: 219037.615 ops/s
Iteration  15: 223890.484 ops/s
Iteration  16: 209792.678 ops/s
Iteration  17: 214636.304 ops/s
Iteration  18: 205940.091 ops/s
Iteration  19: 219447.474 ops/s
Iteration  20: 209362.387 ops/s
Iteration  21: 215815.679 ops/s
Iteration  22: 214635.559 ops/s
Iteration  23: 215699.676 ops/s
Iteration  24: 212860.591 ops/s
Iteration  25: 212096.065 ops/s
Iteration  26: 220982.360 ops/s
Iteration  27: 214188.550 ops/s
Iteration  28: 219149.181 ops/s
Iteration  29: 214485.524 ops/s
Iteration  30: 212735.115 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybeTest._Benchmark.benchmark_undeliverableUponCancel":
  213631.617 ±(99.9%) 3194.589 ops/s [Average]
  (min, avg, max) = (203256.223, 213631.617, 223890.484), stdev = 4781.511
  CI (99.9%): [210437.028, 216826.206] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score      Error  Units
ObservableSwitchMapMaybeTest._Benchmark.benchmark_undeliverableUponCancel  thrpt   30  213631.617 ± 3194.589  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableCombineLatestTest._Benchmark.benchmark_error$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableCombineLatestTest._Benchmark.benchmark_error

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 60272.690 ops/s
# Warmup Iteration   2: 302967.022 ops/s
# Warmup Iteration   3: 504900.013 ops/s
# Warmup Iteration   4: 480230.466 ops/s
# Warmup Iteration   5: 484656.849 ops/s
# Warmup Iteration   6: 538856.003 ops/s
# Warmup Iteration   7: 546905.162 ops/s
# Warmup Iteration   8: 540618.205 ops/s
# Warmup Iteration   9: 538629.597 ops/s
# Warmup Iteration  10: 564738.915 ops/s
# Warmup Iteration  11: 548928.505 ops/s
# Warmup Iteration  12: 536647.953 ops/s
# Warmup Iteration  13: 567470.867 ops/s
# Warmup Iteration  14: 540908.069 ops/s
# Warmup Iteration  15: 552845.956 ops/s
# Warmup Iteration  16: 528111.722 ops/s
# Warmup Iteration  17: 591931.471 ops/s
# Warmup Iteration  18: 595461.558 ops/s
# Warmup Iteration  19: 551970.682 ops/s
# Warmup Iteration  20: 569592.758 ops/s
# Warmup Iteration  21: 576010.802 ops/s
# Warmup Iteration  22: 575360.642 ops/s
# Warmup Iteration  23: 569154.194 ops/s
# Warmup Iteration  24: 533869.538 ops/s
# Warmup Iteration  25: 596996.581 ops/s
# Warmup Iteration  26: 550036.260 ops/s
# Warmup Iteration  27: 579619.327 ops/s
# Warmup Iteration  28: 549070.092 ops/s
# Warmup Iteration  29: 573767.042 ops/s
# Warmup Iteration  30: 600978.422 ops/s
Iteration   1: 550205.159 ops/s
Iteration   2: 595565.930 ops/s
Iteration   3: 551697.273 ops/s
Iteration   4: 576715.478 ops/s
Iteration   5: 570261.534 ops/s
Iteration   6: 559039.096 ops/s
Iteration   7: 565062.515 ops/s
Iteration   8: 549550.866 ops/s
Iteration   9: 589191.196 ops/s
Iteration  10: 570426.487 ops/s
Iteration  11: 560730.748 ops/s
Iteration  12: 565266.418 ops/s
Iteration  13: 562402.605 ops/s
Iteration  14: 556274.874 ops/s
Iteration  15: 566473.583 ops/s
Iteration  16: 565707.955 ops/s
Iteration  17: 569133.237 ops/s
Iteration  18: 580240.041 ops/s
Iteration  19: 566797.087 ops/s
Iteration  20: 557272.868 ops/s
Iteration  21: 495768.581 ops/s
Iteration  22: 554282.473 ops/s
Iteration  23: 562839.087 ops/s
Iteration  24: 577560.010 ops/s
Iteration  25: 549758.760 ops/s
Iteration  26: 574596.770 ops/s
Iteration  27: 551133.829 ops/s
Iteration  28: 550614.327 ops/s
Iteration  29: 593465.057 ops/s
Iteration  30: 550858.953 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableCombineLatestTest._Benchmark.benchmark_error":
  562963.093 ±(99.9%) 12079.483 ops/s [Average]
  (min, avg, max) = (495768.581, 562963.093, 595565.930), stdev = 18080.003
  CI (99.9%): [550883.610, 575042.576] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score       Error  Units
ObservableCombineLatestTest._Benchmark.benchmark_error  thrpt   30  562963.093 ± 12079.483  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithSizeTest._Benchmark.benchmark_nonOverlappingWindows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithSizeTest._Benchmark.benchmark_nonOverlappingWindows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 12924.734 ops/s
# Warmup Iteration   2: 105911.822 ops/s
# Warmup Iteration   3: 264837.447 ops/s
# Warmup Iteration   4: 402917.776 ops/s
# Warmup Iteration   5: 399300.218 ops/s
# Warmup Iteration   6: 386817.629 ops/s
# Warmup Iteration   7: 385979.379 ops/s
# Warmup Iteration   8: 406826.225 ops/s
# Warmup Iteration   9: 417451.213 ops/s
# Warmup Iteration  10: 399433.871 ops/s
# Warmup Iteration  11: 419777.049 ops/s
# Warmup Iteration  12: 419622.896 ops/s
# Warmup Iteration  13: 403289.823 ops/s
# Warmup Iteration  14: 422134.234 ops/s
# Warmup Iteration  15: 389952.075 ops/s
# Warmup Iteration  16: 419437.473 ops/s
# Warmup Iteration  17: 394420.963 ops/s
# Warmup Iteration  18: 403837.656 ops/s
# Warmup Iteration  19: 402900.314 ops/s
# Warmup Iteration  20: 427470.592 ops/s
# Warmup Iteration  21: 400456.261 ops/s
# Warmup Iteration  22: 410340.318 ops/s
# Warmup Iteration  23: 396166.884 ops/s
# Warmup Iteration  24: 415417.965 ops/s
# Warmup Iteration  25: 409126.636 ops/s
# Warmup Iteration  26: 405133.870 ops/s
# Warmup Iteration  27: 411439.530 ops/s
# Warmup Iteration  28: 395807.749 ops/s
# Warmup Iteration  29: 421209.273 ops/s
# Warmup Iteration  30: 400585.707 ops/s
Iteration   1: 417432.012 ops/s
Iteration   2: 392501.365 ops/s
Iteration   3: 410675.058 ops/s
Iteration   4: 397236.016 ops/s
Iteration   5: 401071.971 ops/s
Iteration   6: 417527.210 ops/s
Iteration   7: 403151.724 ops/s
Iteration   8: 399532.161 ops/s
Iteration   9: 417885.308 ops/s
Iteration  10: 393417.704 ops/s
Iteration  11: 409872.750 ops/s
Iteration  12: 397920.814 ops/s
Iteration  13: 406369.718 ops/s
Iteration  14: 402322.071 ops/s
Iteration  15: 411135.815 ops/s
Iteration  16: 415258.096 ops/s
Iteration  17: 401998.586 ops/s
Iteration  18: 409917.496 ops/s
Iteration  19: 390189.231 ops/s
Iteration  20: 430121.981 ops/s
Iteration  21: 401572.962 ops/s
Iteration  22: 403912.336 ops/s
Iteration  23: 397426.535 ops/s
Iteration  24: 404062.959 ops/s
Iteration  25: 404099.955 ops/s
Iteration  26: 397818.940 ops/s
Iteration  27: 418053.494 ops/s
Iteration  28: 412923.675 ops/s
Iteration  29: 390381.360 ops/s
Iteration  30: 403174.597 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithSizeTest._Benchmark.benchmark_nonOverlappingWindows":
  405298.797 ±(99.9%) 6313.498 ops/s [Average]
  (min, avg, max) = (390189.231, 405298.797, 430121.981), stdev = 9449.748
  CI (99.9%): [398985.298, 411612.295] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score      Error  Units
ObservableWindowWithSizeTest._Benchmark.benchmark_nonOverlappingWindows  thrpt   30  405298.797 ± 6313.498  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithSizeTest._Benchmark.benchmark_skipAndCountGaplessWindows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithSizeTest._Benchmark.benchmark_skipAndCountGaplessWindows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 19680.156 ops/s
# Warmup Iteration   2: 163058.493 ops/s
# Warmup Iteration   3: 324665.880 ops/s
# Warmup Iteration   4: 394591.411 ops/s
# Warmup Iteration   5: 420112.497 ops/s
# Warmup Iteration   6: 417712.603 ops/s
# Warmup Iteration   7: 403170.565 ops/s
# Warmup Iteration   8: 397254.156 ops/s
# Warmup Iteration   9: 410189.268 ops/s
# Warmup Iteration  10: 395628.069 ops/s
# Warmup Iteration  11: 396948.391 ops/s
# Warmup Iteration  12: 407741.370 ops/s
# Warmup Iteration  13: 400027.444 ops/s
# Warmup Iteration  14: 403947.295 ops/s
# Warmup Iteration  15: 405144.399 ops/s
# Warmup Iteration  16: 396568.709 ops/s
# Warmup Iteration  17: 399252.235 ops/s
# Warmup Iteration  18: 396736.165 ops/s
# Warmup Iteration  19: 416044.031 ops/s
# Warmup Iteration  20: 410604.853 ops/s
# Warmup Iteration  21: 402562.789 ops/s
# Warmup Iteration  22: 412352.907 ops/s
# Warmup Iteration  23: 398854.756 ops/s
# Warmup Iteration  24: 411411.800 ops/s
# Warmup Iteration  25: 412430.157 ops/s
# Warmup Iteration  26: 399452.252 ops/s
# Warmup Iteration  27: 412862.484 ops/s
# Warmup Iteration  28: 393352.123 ops/s
# Warmup Iteration  29: 418567.162 ops/s
# Warmup Iteration  30: 392406.357 ops/s
Iteration   1: 408773.627 ops/s
Iteration   2: 421604.596 ops/s
Iteration   3: 404636.277 ops/s
Iteration   4: 397678.879 ops/s
Iteration   5: 412349.261 ops/s
Iteration   6: 394399.133 ops/s
Iteration   7: 421831.322 ops/s
Iteration   8: 398179.092 ops/s
Iteration   9: 418305.905 ops/s
Iteration  10: 394124.857 ops/s
Iteration  11: 410386.010 ops/s
Iteration  12: 416114.592 ops/s
Iteration  13: 423669.718 ops/s
Iteration  14: 409483.487 ops/s
Iteration  15: 340579.372 ops/s
Iteration  16: 375284.867 ops/s
Iteration  17: 415326.553 ops/s
Iteration  18: 386710.267 ops/s
Iteration  19: 408555.290 ops/s
Iteration  20: 423272.889 ops/s
Iteration  21: 385625.792 ops/s
Iteration  22: 437227.619 ops/s
Iteration  23: 393259.275 ops/s
Iteration  24: 419450.084 ops/s
Iteration  25: 413899.338 ops/s
Iteration  26: 402736.552 ops/s
Iteration  27: 423301.589 ops/s
Iteration  28: 413912.234 ops/s
Iteration  29: 403625.054 ops/s
Iteration  30: 410549.343 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithSizeTest._Benchmark.benchmark_skipAndCountGaplessWindows":
  406161.762 ±(99.9%) 12237.049 ops/s [Average]
  (min, avg, max) = (340579.372, 406161.762, 437227.619), stdev = 18315.840
  CI (99.9%): [393924.714, 418398.811] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt       Score       Error  Units
ObservableWindowWithSizeTest._Benchmark.benchmark_skipAndCountGaplessWindows  thrpt   30  406161.762 ± 12237.049  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapTest._Benchmark.benchmark_signalsAfterMapperCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapTest._Benchmark.benchmark_signalsAfterMapperCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 18467.896 ops/s
# Warmup Iteration   2: 102581.305 ops/s
# Warmup Iteration   3: 149917.548 ops/s
# Warmup Iteration   4: 151388.124 ops/s
# Warmup Iteration   5: 160310.215 ops/s
# Warmup Iteration   6: 170476.729 ops/s
# Warmup Iteration   7: 166067.502 ops/s
# Warmup Iteration   8: 165176.633 ops/s
# Warmup Iteration   9: 174037.516 ops/s
# Warmup Iteration  10: 165954.882 ops/s
# Warmup Iteration  11: 161215.913 ops/s
# Warmup Iteration  12: 170353.199 ops/s
# Warmup Iteration  13: 166868.707 ops/s
# Warmup Iteration  14: 160379.503 ops/s
# Warmup Iteration  15: 175611.141 ops/s
# Warmup Iteration  16: 164085.454 ops/s
# Warmup Iteration  17: 170343.908 ops/s
# Warmup Iteration  18: 162666.078 ops/s
# Warmup Iteration  19: 182142.738 ops/s
# Warmup Iteration  20: 172914.498 ops/s
# Warmup Iteration  21: 174732.032 ops/s
# Warmup Iteration  22: 177080.271 ops/s
# Warmup Iteration  23: 172315.377 ops/s
# Warmup Iteration  24: 173759.023 ops/s
# Warmup Iteration  25: 180423.975 ops/s
# Warmup Iteration  26: 171477.885 ops/s
# Warmup Iteration  27: 176135.793 ops/s
# Warmup Iteration  28: 168941.373 ops/s
# Warmup Iteration  29: 175971.779 ops/s
# Warmup Iteration  30: 174285.048 ops/s
Iteration   1: 176953.269 ops/s
Iteration   2: 165934.155 ops/s
Iteration   3: 168112.078 ops/s
Iteration   4: 174365.785 ops/s
Iteration   5: 170535.494 ops/s
Iteration   6: 178465.276 ops/s
Iteration   7: 173489.538 ops/s
Iteration   8: 173426.338 ops/s
Iteration   9: 180236.617 ops/s
Iteration  10: 171363.643 ops/s
Iteration  11: 175836.360 ops/s
Iteration  12: 171987.493 ops/s
Iteration  13: 176449.182 ops/s
Iteration  14: 180314.307 ops/s
Iteration  15: 164575.917 ops/s
Iteration  16: 175673.524 ops/s
Iteration  17: 178810.512 ops/s
Iteration  18: 171287.357 ops/s
Iteration  19: 168693.395 ops/s
Iteration  20: 184098.768 ops/s
Iteration  21: 166752.627 ops/s
Iteration  22: 175489.657 ops/s
Iteration  23: 170189.513 ops/s
Iteration  24: 174250.279 ops/s
Iteration  25: 171363.558 ops/s
Iteration  26: 170313.388 ops/s
Iteration  27: 179824.409 ops/s
Iteration  28: 168890.078 ops/s
Iteration  29: 181835.410 ops/s
Iteration  30: 171054.022 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapTest._Benchmark.benchmark_signalsAfterMapperCrash":
  173685.732 ±(99.9%) 3304.710 ops/s [Average]
  (min, avg, max) = (164575.917, 173685.732, 184098.768), stdev = 4946.334
  CI (99.9%): [170381.022, 176990.441] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score      Error  Units
ObservableFlatMapTest._Benchmark.benchmark_signalsAfterMapperCrash  thrpt   30  173685.732 ± 3304.710  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithStartEndObservableTest._Benchmark.benchmark_startError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithStartEndObservableTest._Benchmark.benchmark_startError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 26923.163 ops/s
# Warmup Iteration   2: 291598.055 ops/s
# Warmup Iteration   3: 409576.475 ops/s
# Warmup Iteration   4: 476143.150 ops/s
# Warmup Iteration   5: 455498.620 ops/s
# Warmup Iteration   6: 489692.801 ops/s
# Warmup Iteration   7: 454540.282 ops/s
# Warmup Iteration   8: 465167.661 ops/s
# Warmup Iteration   9: 451451.926 ops/s
# Warmup Iteration  10: 430442.636 ops/s
# Warmup Iteration  11: 477680.469 ops/s
# Warmup Iteration  12: 463464.479 ops/s
# Warmup Iteration  13: 490209.628 ops/s
# Warmup Iteration  14: 473441.444 ops/s
# Warmup Iteration  15: 462541.855 ops/s
# Warmup Iteration  16: 475248.754 ops/s
# Warmup Iteration  17: 487314.450 ops/s
# Warmup Iteration  18: 484859.870 ops/s
# Warmup Iteration  19: 486559.623 ops/s
# Warmup Iteration  20: 490548.425 ops/s
# Warmup Iteration  21: 506218.561 ops/s
# Warmup Iteration  22: 502915.125 ops/s
# Warmup Iteration  23: 490163.879 ops/s
# Warmup Iteration  24: 473770.458 ops/s
# Warmup Iteration  25: 486525.356 ops/s
# Warmup Iteration  26: 465716.950 ops/s
# Warmup Iteration  27: 507219.407 ops/s
# Warmup Iteration  28: 496870.776 ops/s
# Warmup Iteration  29: 482633.374 ops/s
# Warmup Iteration  30: 499961.552 ops/s
Iteration   1: 488680.582 ops/s
Iteration   2: 498143.545 ops/s
Iteration   3: 480946.544 ops/s
Iteration   4: 482127.024 ops/s
Iteration   5: 510634.739 ops/s
Iteration   6: 466458.099 ops/s
Iteration   7: 510285.741 ops/s
Iteration   8: 481761.814 ops/s
Iteration   9: 490098.061 ops/s
Iteration  10: 397246.873 ops/s
Iteration  11: 508832.567 ops/s
Iteration  12: 487745.493 ops/s
Iteration  13: 483473.505 ops/s
Iteration  14: 511472.363 ops/s
Iteration  15: 465066.459 ops/s
Iteration  16: 514938.377 ops/s
Iteration  17: 469589.662 ops/s
Iteration  18: 501771.712 ops/s
Iteration  19: 485676.212 ops/s
Iteration  20: 498140.775 ops/s
Iteration  21: 502652.299 ops/s
Iteration  22: 473570.500 ops/s
Iteration  23: 505947.263 ops/s
Iteration  24: 484139.846 ops/s
Iteration  25: 476793.763 ops/s
Iteration  26: 477007.895 ops/s
Iteration  27: 510052.720 ops/s
Iteration  28: 491115.017 ops/s
Iteration  29: 483405.537 ops/s
Iteration  30: 483358.398 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithStartEndObservableTest._Benchmark.benchmark_startError":
  487371.113 ±(99.9%) 14870.874 ops/s [Average]
  (min, avg, max) = (397246.873, 487371.113, 514938.377), stdev = 22258.025
  CI (99.9%): [472500.239, 502241.986] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score       Error  Units
ObservableWindowWithStartEndObservableTest._Benchmark.benchmark_startError  thrpt   30  487371.113 ± 14870.874  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapTest._Benchmark.benchmark_mainErrorDelayed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapTest._Benchmark.benchmark_mainErrorDelayed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 107543.476 ops/s
# Warmup Iteration   2: 505841.573 ops/s
# Warmup Iteration   3: 611823.570 ops/s
# Warmup Iteration   4: 645902.055 ops/s
# Warmup Iteration   5: 642180.716 ops/s
# Warmup Iteration   6: 624133.478 ops/s
# Warmup Iteration   7: 568476.488 ops/s
# Warmup Iteration   8: 656425.913 ops/s
# Warmup Iteration   9: 642056.016 ops/s
# Warmup Iteration  10: 663653.348 ops/s
# Warmup Iteration  11: 643276.259 ops/s
# Warmup Iteration  12: 651529.983 ops/s
# Warmup Iteration  13: 628267.909 ops/s
# Warmup Iteration  14: 654699.368 ops/s
# Warmup Iteration  15: 668171.070 ops/s
# Warmup Iteration  16: 673956.947 ops/s
# Warmup Iteration  17: 679783.308 ops/s
# Warmup Iteration  18: 709160.230 ops/s
# Warmup Iteration  19: 690933.535 ops/s
# Warmup Iteration  20: 663879.576 ops/s
# Warmup Iteration  21: 692054.287 ops/s
# Warmup Iteration  22: 713716.849 ops/s
# Warmup Iteration  23: 663027.223 ops/s
# Warmup Iteration  24: 683079.293 ops/s
# Warmup Iteration  25: 720701.401 ops/s
# Warmup Iteration  26: 673475.917 ops/s
# Warmup Iteration  27: 679713.215 ops/s
# Warmup Iteration  28: 703652.899 ops/s
# Warmup Iteration  29: 676280.538 ops/s
# Warmup Iteration  30: 697736.790 ops/s
Iteration   1: 679322.958 ops/s
Iteration   2: 668055.091 ops/s
Iteration   3: 708523.950 ops/s
Iteration   4: 675019.588 ops/s
Iteration   5: 683803.107 ops/s
Iteration   6: 674887.408 ops/s
Iteration   7: 687496.800 ops/s
Iteration   8: 698633.070 ops/s
Iteration   9: 684127.386 ops/s
Iteration  10: 688109.688 ops/s
Iteration  11: 685869.846 ops/s
Iteration  12: 695554.077 ops/s
Iteration  13: 670465.884 ops/s
Iteration  14: 668966.422 ops/s
Iteration  15: 701552.032 ops/s
Iteration  16: 675582.412 ops/s
Iteration  17: 677455.149 ops/s
Iteration  18: 670281.805 ops/s
Iteration  19: 677380.982 ops/s
Iteration  20: 712710.781 ops/s
Iteration  21: 644091.666 ops/s
Iteration  22: 684697.624 ops/s
Iteration  23: 664432.484 ops/s
Iteration  24: 674898.105 ops/s
Iteration  25: 697389.899 ops/s
Iteration  26: 675645.615 ops/s
Iteration  27: 686951.935 ops/s
Iteration  28: 681628.109 ops/s
Iteration  29: 691248.491 ops/s
Iteration  30: 701169.733 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapTest._Benchmark.benchmark_mainErrorDelayed":
  682865.070 ±(99.9%) 9561.728 ops/s [Average]
  (min, avg, max) = (644091.666, 682865.070, 712710.781), stdev = 14311.546
  CI (99.9%): [673303.342, 692426.798] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
ObservableConcatMapTest._Benchmark.benchmark_mainErrorDelayed  thrpt   30  682865.070 ± 9561.728  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_delayErrorCallableEager$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_delayErrorCallableEager

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 108023.321 ops/s
# Warmup Iteration   2: 448096.423 ops/s
# Warmup Iteration   3: 514966.346 ops/s
# Warmup Iteration   4: 524014.786 ops/s
# Warmup Iteration   5: 552849.597 ops/s
# Warmup Iteration   6: 525634.302 ops/s
# Warmup Iteration   7: 519081.983 ops/s
# Warmup Iteration   8: 542336.663 ops/s
# Warmup Iteration   9: 484333.147 ops/s
# Warmup Iteration  10: 531313.355 ops/s
# Warmup Iteration  11: 500099.118 ops/s
# Warmup Iteration  12: 526486.390 ops/s
# Warmup Iteration  13: 544304.533 ops/s
# Warmup Iteration  14: 528664.581 ops/s
# Warmup Iteration  15: 543094.170 ops/s
# Warmup Iteration  16: 548126.107 ops/s
# Warmup Iteration  17: 562371.437 ops/s
# Warmup Iteration  18: 554151.042 ops/s
# Warmup Iteration  19: 548764.676 ops/s
# Warmup Iteration  20: 575966.570 ops/s
# Warmup Iteration  21: 531801.701 ops/s
# Warmup Iteration  22: 559397.873 ops/s
# Warmup Iteration  23: 542377.274 ops/s
# Warmup Iteration  24: 546143.051 ops/s
# Warmup Iteration  25: 555840.993 ops/s
# Warmup Iteration  26: 548259.280 ops/s
# Warmup Iteration  27: 549590.787 ops/s
# Warmup Iteration  28: 557890.351 ops/s
# Warmup Iteration  29: 529147.100 ops/s
# Warmup Iteration  30: 586460.333 ops/s
Iteration   1: 536287.921 ops/s
Iteration   2: 558761.703 ops/s
Iteration   3: 539422.803 ops/s
Iteration   4: 550467.762 ops/s
Iteration   5: 446079.556 ops/s
Iteration   6: 558727.568 ops/s
Iteration   7: 559426.268 ops/s
Iteration   8: 549579.669 ops/s
Iteration   9: 543515.496 ops/s
Iteration  10: 567549.424 ops/s
Iteration  11: 563243.736 ops/s
Iteration  12: 537795.649 ops/s
Iteration  13: 547617.772 ops/s
Iteration  14: 568936.431 ops/s
Iteration  15: 570986.663 ops/s
Iteration  16: 524838.742 ops/s
Iteration  17: 567575.803 ops/s
Iteration  18: 549772.362 ops/s
Iteration  19: 519710.377 ops/s
Iteration  20: 539288.256 ops/s
Iteration  21: 556987.606 ops/s
Iteration  22: 550392.356 ops/s
Iteration  23: 536323.302 ops/s
Iteration  24: 586374.309 ops/s
Iteration  25: 534416.670 ops/s
Iteration  26: 570351.418 ops/s
Iteration  27: 545761.858 ops/s
Iteration  28: 562555.795 ops/s
Iteration  29: 562933.086 ops/s
Iteration  30: 535550.146 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_delayErrorCallableEager":
  548041.017 ±(99.9%) 16387.709 ops/s [Average]
  (min, avg, max) = (446079.556, 548041.017, 586374.309), stdev = 24528.352
  CI (99.9%): [531653.308, 564428.725] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt       Score       Error  Units
ObservableConcatMapSchedulerTest._Benchmark.benchmark_delayErrorCallableEager  thrpt   30  548041.017 ± 16387.709  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithCompletableTest._Benchmark.benchmark_otherError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithCompletableTest._Benchmark.benchmark_otherError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 263455.619 ops/s
# Warmup Iteration   2: 586255.040 ops/s
# Warmup Iteration   3: 610714.256 ops/s
# Warmup Iteration   4: 681839.246 ops/s
# Warmup Iteration   5: 586651.474 ops/s
# Warmup Iteration   6: 696269.656 ops/s
# Warmup Iteration   7: 659904.793 ops/s
# Warmup Iteration   8: 718408.169 ops/s
# Warmup Iteration   9: 686465.068 ops/s
# Warmup Iteration  10: 673446.809 ops/s
# Warmup Iteration  11: 711855.313 ops/s
# Warmup Iteration  12: 658457.118 ops/s
# Warmup Iteration  13: 682651.008 ops/s
# Warmup Iteration  14: 702050.366 ops/s
# Warmup Iteration  15: 687395.532 ops/s
# Warmup Iteration  16: 699835.526 ops/s
# Warmup Iteration  17: 753343.555 ops/s
# Warmup Iteration  18: 712388.550 ops/s
# Warmup Iteration  19: 732090.735 ops/s
# Warmup Iteration  20: 695980.198 ops/s
# Warmup Iteration  21: 744259.970 ops/s
# Warmup Iteration  22: 695770.099 ops/s
# Warmup Iteration  23: 736913.257 ops/s
# Warmup Iteration  24: 723441.744 ops/s
# Warmup Iteration  25: 728153.425 ops/s
# Warmup Iteration  26: 728833.956 ops/s
# Warmup Iteration  27: 748328.869 ops/s
# Warmup Iteration  28: 700190.144 ops/s
# Warmup Iteration  29: 748038.177 ops/s
# Warmup Iteration  30: 706344.837 ops/s
Iteration   1: 735243.684 ops/s
Iteration   2: 686656.578 ops/s
Iteration   3: 731722.043 ops/s
Iteration   4: 700290.709 ops/s
Iteration   5: 715524.770 ops/s
Iteration   6: 722437.544 ops/s
Iteration   7: 715857.626 ops/s
Iteration   8: 750856.003 ops/s
Iteration   9: 708486.910 ops/s
Iteration  10: 730949.112 ops/s
Iteration  11: 722478.028 ops/s
Iteration  12: 709269.515 ops/s
Iteration  13: 744473.087 ops/s
Iteration  14: 705480.774 ops/s
Iteration  15: 718578.198 ops/s
Iteration  16: 740610.782 ops/s
Iteration  17: 699974.364 ops/s
Iteration  18: 745554.504 ops/s
Iteration  19: 734155.717 ops/s
Iteration  20: 711475.964 ops/s
Iteration  21: 716085.264 ops/s
Iteration  22: 723238.139 ops/s
Iteration  23: 729516.075 ops/s
Iteration  24: 711090.803 ops/s
Iteration  25: 756148.362 ops/s
Iteration  26: 697571.227 ops/s
Iteration  27: 744702.309 ops/s
Iteration  28: 732563.573 ops/s
Iteration  29: 694381.182 ops/s
Iteration  30: 734782.594 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithCompletableTest._Benchmark.benchmark_otherError":
  722338.515 ±(99.9%) 11956.044 ops/s [Average]
  (min, avg, max) = (686656.578, 722338.515, 756148.362), stdev = 17895.246
  CI (99.9%): [710382.470, 734294.559] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score       Error  Units
ObservableMergeWithCompletableTest._Benchmark.benchmark_otherError  thrpt   30  722338.515 ± 11956.044  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_concatIterableOneIsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_concatIterableOneIsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 58755.192 ops/s
# Warmup Iteration   2: 487085.629 ops/s
# Warmup Iteration   3: 505402.737 ops/s
# Warmup Iteration   4: 565909.117 ops/s
# Warmup Iteration   5: 583325.448 ops/s
# Warmup Iteration   6: 542996.562 ops/s
# Warmup Iteration   7: 572382.243 ops/s
# Warmup Iteration   8: 547346.970 ops/s
# Warmup Iteration   9: 538759.348 ops/s
# Warmup Iteration  10: 577459.054 ops/s
# Warmup Iteration  11: 541428.266 ops/s
# Warmup Iteration  12: 574997.686 ops/s
# Warmup Iteration  13: 560929.611 ops/s
# Warmup Iteration  14: 576994.114 ops/s
# Warmup Iteration  15: 546850.807 ops/s
# Warmup Iteration  16: 553342.652 ops/s
# Warmup Iteration  17: 590720.993 ops/s
# Warmup Iteration  18: 591568.016 ops/s
# Warmup Iteration  19: 576364.428 ops/s
# Warmup Iteration  20: 578668.258 ops/s
# Warmup Iteration  21: 587103.472 ops/s
# Warmup Iteration  22: 600330.878 ops/s
# Warmup Iteration  23: 585279.777 ops/s
# Warmup Iteration  24: 576080.596 ops/s
# Warmup Iteration  25: 603366.138 ops/s
# Warmup Iteration  26: 605833.307 ops/s
# Warmup Iteration  27: 586027.760 ops/s
# Warmup Iteration  28: 580462.690 ops/s
# Warmup Iteration  29: 579342.930 ops/s
# Warmup Iteration  30: 443138.879 ops/s
Iteration   1: 589784.026 ops/s
Iteration   2: 586307.459 ops/s
Iteration   3: 599956.523 ops/s
Iteration   4: 588903.129 ops/s
Iteration   5: 591427.860 ops/s
Iteration   6: 579924.728 ops/s
Iteration   7: 608182.092 ops/s
Iteration   8: 576664.625 ops/s
Iteration   9: 613565.052 ops/s
Iteration  10: 566834.257 ops/s
Iteration  11: 602150.405 ops/s
Iteration  12: 585846.552 ops/s
Iteration  13: 591936.725 ops/s
Iteration  14: 579751.422 ops/s
Iteration  15: 593487.989 ops/s
Iteration  16: 584748.450 ops/s
Iteration  17: 584897.708 ops/s
Iteration  18: 593016.871 ops/s
Iteration  19: 590500.285 ops/s
Iteration  20: 614937.250 ops/s
Iteration  21: 605154.448 ops/s
Iteration  22: 583282.352 ops/s
Iteration  23: 603452.685 ops/s
Iteration  24: 570820.155 ops/s
Iteration  25: 592776.326 ops/s
Iteration  26: 585754.970 ops/s
Iteration  27: 605903.250 ops/s
Iteration  28: 582212.257 ops/s
Iteration  29: 586751.585 ops/s
Iteration  30: 610994.784 ops/s


Result "io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_concatIterableOneIsNull":
  591664.207 ±(99.9%) 8154.203 ops/s [Average]
  (min, avg, max) = (566834.257, 591664.207, 614937.250), stdev = 12204.827
  CI (99.9%): [583510.005, 599818.410] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
ObservableNullTests._Benchmark.benchmark_concatIterableOneIsNull  thrpt   30  591664.207 ± 8154.203  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_mainError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_mainError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 100426.738 ops/s
# Warmup Iteration   2: 488694.599 ops/s
# Warmup Iteration   3: 634515.673 ops/s
# Warmup Iteration   4: 661945.763 ops/s
# Warmup Iteration   5: 575567.915 ops/s
# Warmup Iteration   6: 682942.897 ops/s
# Warmup Iteration   7: 702514.767 ops/s
# Warmup Iteration   8: 693797.241 ops/s
# Warmup Iteration   9: 678307.668 ops/s
# Warmup Iteration  10: 684463.822 ops/s
# Warmup Iteration  11: 675751.408 ops/s
# Warmup Iteration  12: 692218.836 ops/s
# Warmup Iteration  13: 712455.545 ops/s
# Warmup Iteration  14: 680675.402 ops/s
# Warmup Iteration  15: 688987.489 ops/s
# Warmup Iteration  16: 677897.379 ops/s
# Warmup Iteration  17: 734167.483 ops/s
# Warmup Iteration  18: 737360.226 ops/s
# Warmup Iteration  19: 725336.219 ops/s
# Warmup Iteration  20: 732631.073 ops/s
# Warmup Iteration  21: 716560.575 ops/s
# Warmup Iteration  22: 719676.948 ops/s
# Warmup Iteration  23: 732629.885 ops/s
# Warmup Iteration  24: 710300.010 ops/s
# Warmup Iteration  25: 739784.883 ops/s
# Warmup Iteration  26: 716064.160 ops/s
# Warmup Iteration  27: 719579.949 ops/s
# Warmup Iteration  28: 743887.719 ops/s
# Warmup Iteration  29: 746737.126 ops/s
# Warmup Iteration  30: 702376.998 ops/s
Iteration   1: 748843.303 ops/s
Iteration   2: 749393.284 ops/s
Iteration   3: 710820.311 ops/s
Iteration   4: 744111.063 ops/s
Iteration   5: 729971.352 ops/s
Iteration   6: 731528.963 ops/s
Iteration   7: 714961.775 ops/s
Iteration   8: 691700.811 ops/s
Iteration   9: 718526.210 ops/s
Iteration  10: 714158.561 ops/s
Iteration  11: 705094.183 ops/s
Iteration  12: 723894.416 ops/s
Iteration  13: 689417.465 ops/s
Iteration  14: 721373.193 ops/s
Iteration  15: 727209.742 ops/s
Iteration  16: 727977.011 ops/s
Iteration  17: 689122.166 ops/s
Iteration  18: 749650.739 ops/s
Iteration  19: 698706.763 ops/s
Iteration  20: 707196.110 ops/s
Iteration  21: 758603.677 ops/s
Iteration  22: 707671.707 ops/s
Iteration  23: 747415.589 ops/s
Iteration  24: 710163.889 ops/s
Iteration  25: 746351.812 ops/s
Iteration  26: 725142.021 ops/s
Iteration  27: 734381.811 ops/s
Iteration  28: 730411.808 ops/s
Iteration  29: 712426.497 ops/s
Iteration  30: 720817.505 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_mainError":
  722901.458 ±(99.9%) 12730.248 ops/s [Average]
  (min, avg, max) = (689122.166, 722901.458, 758603.677), stdev = 19054.038
  CI (99.9%): [710171.209, 735631.706] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score       Error  Units
ObservableConcatMapEagerTest._Benchmark.benchmark_mainError  thrpt   30  722901.458 ± 12730.248  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilTest._Benchmark.benchmark_untilPublisherMainError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilTest._Benchmark.benchmark_untilPublisherMainError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 158076.352 ops/s
# Warmup Iteration   2: 478902.422 ops/s
# Warmup Iteration   3: 627087.066 ops/s
# Warmup Iteration   4: 621210.166 ops/s
# Warmup Iteration   5: 638180.732 ops/s
# Warmup Iteration   6: 603860.783 ops/s
# Warmup Iteration   7: 634050.973 ops/s
# Warmup Iteration   8: 596021.062 ops/s
# Warmup Iteration   9: 608627.550 ops/s
# Warmup Iteration  10: 628941.609 ops/s
# Warmup Iteration  11: 601033.067 ops/s
# Warmup Iteration  12: 623475.370 ops/s
# Warmup Iteration  13: 612243.526 ops/s
# Warmup Iteration  14: 636462.218 ops/s
# Warmup Iteration  15: 620242.690 ops/s
# Warmup Iteration  16: 603801.305 ops/s
# Warmup Iteration  17: 644354.953 ops/s
# Warmup Iteration  18: 647633.400 ops/s
# Warmup Iteration  19: 674270.297 ops/s
# Warmup Iteration  20: 643669.988 ops/s
# Warmup Iteration  21: 660521.501 ops/s
# Warmup Iteration  22: 599764.050 ops/s
# Warmup Iteration  23: 644194.696 ops/s
# Warmup Iteration  24: 557483.786 ops/s
# Warmup Iteration  25: 646893.936 ops/s
# Warmup Iteration  26: 646774.916 ops/s
# Warmup Iteration  27: 682438.495 ops/s
# Warmup Iteration  28: 645799.614 ops/s
# Warmup Iteration  29: 655531.844 ops/s
# Warmup Iteration  30: 660513.229 ops/s
Iteration   1: 660724.329 ops/s
Iteration   2: 642103.055 ops/s
Iteration   3: 694091.028 ops/s
Iteration   4: 624108.001 ops/s
Iteration   5: 661491.920 ops/s
Iteration   6: 683253.239 ops/s
Iteration   7: 648356.508 ops/s
Iteration   8: 668186.076 ops/s
Iteration   9: 652656.135 ops/s
Iteration  10: 654489.894 ops/s
Iteration  11: 683419.433 ops/s
Iteration  12: 604242.984 ops/s
Iteration  13: 670388.989 ops/s
Iteration  14: 640809.070 ops/s
Iteration  15: 651522.924 ops/s
Iteration  16: 686546.626 ops/s
Iteration  17: 634137.666 ops/s
Iteration  18: 673175.957 ops/s
Iteration  19: 667721.999 ops/s
Iteration  20: 653537.100 ops/s
Iteration  21: 663413.419 ops/s
Iteration  22: 652771.750 ops/s
Iteration  23: 693828.806 ops/s
Iteration  24: 653429.446 ops/s
Iteration  25: 636828.677 ops/s
Iteration  26: 681072.472 ops/s
Iteration  27: 650356.948 ops/s
Iteration  28: 684144.180 ops/s
Iteration  29: 672438.388 ops/s
Iteration  30: 651204.663 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilTest._Benchmark.benchmark_untilPublisherMainError":
  659815.056 ±(99.9%) 13923.247 ops/s [Average]
  (min, avg, max) = (604242.984, 659815.056, 694091.028), stdev = 20839.663
  CI (99.9%): [645891.809, 673738.303] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score       Error  Units
ObservableTakeUntilTest._Benchmark.benchmark_untilPublisherMainError  thrpt   30  659815.056 ± 13923.247  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilTest._Benchmark.benchmark_untilPublisherOtherError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilTest._Benchmark.benchmark_untilPublisherOtherError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 130633.808 ops/s
# Warmup Iteration   2: 455095.044 ops/s
# Warmup Iteration   3: 630428.171 ops/s
# Warmup Iteration   4: 587782.011 ops/s
# Warmup Iteration   5: 609320.562 ops/s
# Warmup Iteration   6: 633470.413 ops/s
# Warmup Iteration   7: 591782.304 ops/s
# Warmup Iteration   8: 621844.561 ops/s
# Warmup Iteration   9: 602170.343 ops/s
# Warmup Iteration  10: 624772.544 ops/s
# Warmup Iteration  11: 601735.241 ops/s
# Warmup Iteration  12: 626525.481 ops/s
# Warmup Iteration  13: 602797.811 ops/s
# Warmup Iteration  14: 597964.135 ops/s
# Warmup Iteration  15: 623932.025 ops/s
# Warmup Iteration  16: 591298.751 ops/s
# Warmup Iteration  17: 606110.429 ops/s
# Warmup Iteration  18: 679464.323 ops/s
# Warmup Iteration  19: 647010.692 ops/s
# Warmup Iteration  20: 628873.157 ops/s
# Warmup Iteration  21: 680504.638 ops/s
# Warmup Iteration  22: 663713.327 ops/s
# Warmup Iteration  23: 666079.666 ops/s
# Warmup Iteration  24: 625024.766 ops/s
# Warmup Iteration  25: 641926.040 ops/s
# Warmup Iteration  26: 678974.306 ops/s
# Warmup Iteration  27: 651461.893 ops/s
# Warmup Iteration  28: 666736.289 ops/s
# Warmup Iteration  29: 650413.077 ops/s
# Warmup Iteration  30: 611583.852 ops/s
Iteration   1: 656433.856 ops/s
Iteration   2: 647521.200 ops/s
Iteration   3: 675136.472 ops/s
Iteration   4: 654401.185 ops/s
Iteration   5: 640743.342 ops/s
Iteration   6: 675580.418 ops/s
Iteration   7: 650257.715 ops/s
Iteration   8: 676530.016 ops/s
Iteration   9: 641669.056 ops/s
Iteration  10: 659973.979 ops/s
Iteration  11: 665173.651 ops/s
Iteration  12: 639623.536 ops/s
Iteration  13: 664022.381 ops/s
Iteration  14: 671662.117 ops/s
Iteration  15: 671887.703 ops/s
Iteration  16: 632095.066 ops/s
Iteration  17: 652927.587 ops/s
Iteration  18: 670733.926 ops/s
Iteration  19: 643999.840 ops/s
Iteration  20: 641809.919 ops/s
Iteration  21: 665657.961 ops/s
Iteration  22: 626079.123 ops/s
Iteration  23: 665785.025 ops/s
Iteration  24: 664998.158 ops/s
Iteration  25: 638912.373 ops/s
Iteration  26: 674768.897 ops/s
Iteration  27: 632322.848 ops/s
Iteration  28: 667205.207 ops/s
Iteration  29: 642240.755 ops/s
Iteration  30: 662658.014 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilTest._Benchmark.benchmark_untilPublisherOtherError":
  655760.378 ±(99.9%) 10016.298 ops/s [Average]
  (min, avg, max) = (626079.123, 655760.378, 676530.016), stdev = 14991.925
  CI (99.9%): [645744.079, 665776.676] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score       Error  Units
ObservableTakeUntilTest._Benchmark.benchmark_untilPublisherOtherError  thrpt   30  655760.378 ± 10016.298  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableBlockingTest._Benchmark.benchmark_firstFgnoredCancelAndOnNext$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableBlockingTest._Benchmark.benchmark_firstFgnoredCancelAndOnNext

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 4341566.671 ops/s
# Warmup Iteration   2: 9438312.742 ops/s
# Warmup Iteration   3: 12934444.845 ops/s
# Warmup Iteration   4: 14210408.058 ops/s
# Warmup Iteration   5: 14734460.466 ops/s
# Warmup Iteration   6: 14215994.633 ops/s
# Warmup Iteration   7: 14351260.525 ops/s
# Warmup Iteration   8: 14636078.990 ops/s
# Warmup Iteration   9: 14007384.715 ops/s
# Warmup Iteration  10: 15025417.255 ops/s
# Warmup Iteration  11: 15012148.127 ops/s
# Warmup Iteration  12: 13730815.160 ops/s
# Warmup Iteration  13: 14932761.971 ops/s
# Warmup Iteration  14: 14355942.126 ops/s
# Warmup Iteration  15: 14838371.494 ops/s
# Warmup Iteration  16: 14189617.943 ops/s
# Warmup Iteration  17: 14347789.288 ops/s
# Warmup Iteration  18: 15029267.566 ops/s
# Warmup Iteration  19: 11539217.486 ops/s
# Warmup Iteration  20: 14947886.746 ops/s
# Warmup Iteration  21: 14419348.410 ops/s
# Warmup Iteration  22: 14313082.689 ops/s
# Warmup Iteration  23: 14294490.741 ops/s
# Warmup Iteration  24: 14393058.056 ops/s
# Warmup Iteration  25: 14087056.769 ops/s
# Warmup Iteration  26: 14820927.895 ops/s
# Warmup Iteration  27: 14170442.284 ops/s
# Warmup Iteration  28: 14820702.896 ops/s
# Warmup Iteration  29: 13769218.602 ops/s
# Warmup Iteration  30: 15052228.765 ops/s
Iteration   1: 14264120.252 ops/s
Iteration   2: 14360455.095 ops/s
Iteration   3: 14801095.885 ops/s
Iteration   4: 13886403.409 ops/s
Iteration   5: 14483878.838 ops/s
Iteration   6: 14511852.401 ops/s
Iteration   7: 14139591.042 ops/s
Iteration   8: 14985071.580 ops/s
Iteration   9: 14712927.831 ops/s
Iteration  10: 13697391.846 ops/s
Iteration  11: 14161099.144 ops/s
Iteration  12: 13874867.476 ops/s
Iteration  13: 14244181.583 ops/s
Iteration  14: 14818178.785 ops/s
Iteration  15: 14291666.396 ops/s
Iteration  16: 14232196.578 ops/s
Iteration  17: 14311288.191 ops/s
Iteration  18: 14536228.137 ops/s
Iteration  19: 14674594.686 ops/s
Iteration  20: 14538716.922 ops/s
Iteration  21: 15020229.911 ops/s
Iteration  22: 14591936.476 ops/s
Iteration  23: 14384482.870 ops/s
Iteration  24: 14773354.933 ops/s
Iteration  25: 14371617.326 ops/s
Iteration  26: 13828508.743 ops/s
Iteration  27: 14845077.542 ops/s
Iteration  28: 14136384.137 ops/s
Iteration  29: 14962739.844 ops/s
Iteration  30: 14837955.793 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableBlockingTest._Benchmark.benchmark_firstFgnoredCancelAndOnNext":
  14442603.122 ±(99.9%) 240862.112 ops/s [Average]
  (min, avg, max) = (13697391.846, 14442603.122, 15020229.911), stdev = 360511.098
  CI (99.9%): [14201741.010, 14683465.234] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt         Score        Error  Units
FlowableBlockingTest._Benchmark.benchmark_firstFgnoredCancelAndOnNext  thrpt   30  14442603.122 ± 240862.112  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableUsingTest._Benchmark.benchmark_usingWithResourceFactoryError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableUsingTest._Benchmark.benchmark_usingWithResourceFactoryError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 297563.185 ops/s
# Warmup Iteration   2: 616591.309 ops/s
# Warmup Iteration   3: 622161.803 ops/s
# Warmup Iteration   4: 659356.803 ops/s
# Warmup Iteration   5: 687007.481 ops/s
# Warmup Iteration   6: 642125.208 ops/s
# Warmup Iteration   7: 670768.437 ops/s
# Warmup Iteration   8: 650258.168 ops/s
# Warmup Iteration   9: 658084.363 ops/s
# Warmup Iteration  10: 681067.456 ops/s
# Warmup Iteration  11: 652272.369 ops/s
# Warmup Iteration  12: 663449.076 ops/s
# Warmup Iteration  13: 659191.078 ops/s
# Warmup Iteration  14: 658884.026 ops/s
# Warmup Iteration  15: 662698.850 ops/s
# Warmup Iteration  16: 641816.828 ops/s
# Warmup Iteration  17: 697152.327 ops/s
# Warmup Iteration  18: 717488.652 ops/s
# Warmup Iteration  19: 697959.119 ops/s
# Warmup Iteration  20: 729623.404 ops/s
# Warmup Iteration  21: 681007.311 ops/s
# Warmup Iteration  22: 713914.741 ops/s
# Warmup Iteration  23: 692766.384 ops/s
# Warmup Iteration  24: 714659.693 ops/s
# Warmup Iteration  25: 704032.082 ops/s
# Warmup Iteration  26: 663350.105 ops/s
# Warmup Iteration  27: 726983.899 ops/s
# Warmup Iteration  28: 690077.765 ops/s
# Warmup Iteration  29: 732176.630 ops/s
# Warmup Iteration  30: 695651.368 ops/s
Iteration   1: 692595.144 ops/s
Iteration   2: 723858.177 ops/s
Iteration   3: 697083.921 ops/s
Iteration   4: 705001.130 ops/s
Iteration   5: 711411.824 ops/s
Iteration   6: 693090.253 ops/s
Iteration   7: 698793.263 ops/s
Iteration   8: 703482.781 ops/s
Iteration   9: 716877.327 ops/s
Iteration  10: 693137.398 ops/s
Iteration  11: 717185.389 ops/s
Iteration  12: 696324.416 ops/s
Iteration  13: 707173.938 ops/s
Iteration  14: 730306.858 ops/s
Iteration  15: 715911.071 ops/s
Iteration  16: 675918.588 ops/s
Iteration  17: 732223.376 ops/s
Iteration  18: 670709.452 ops/s
Iteration  19: 741407.692 ops/s
Iteration  20: 701059.934 ops/s
Iteration  21: 715457.260 ops/s
Iteration  22: 682705.398 ops/s
Iteration  23: 723401.069 ops/s
Iteration  24: 716049.905 ops/s
Iteration  25: 702563.877 ops/s
Iteration  26: 711825.555 ops/s
Iteration  27: 703442.120 ops/s
Iteration  28: 697783.193 ops/s
Iteration  29: 743475.530 ops/s
Iteration  30: 685772.432 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableUsingTest._Benchmark.benchmark_usingWithResourceFactoryError":
  706867.609 ±(99.9%) 11827.934 ops/s [Average]
  (min, avg, max) = (670709.452, 706867.609, 743475.530), stdev = 17703.496
  CI (99.9%): [695039.675, 718695.543] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score       Error  Units
FlowableUsingTest._Benchmark.benchmark_usingWithResourceFactoryError  thrpt   30  706867.609 ± 11827.934  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableUsingTest._Benchmark.benchmark_usingWithResourceFactoryErrorDisposeEagerly$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableUsingTest._Benchmark.benchmark_usingWithResourceFactoryErrorDisposeEagerly

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 337506.422 ops/s
# Warmup Iteration   2: 554137.446 ops/s
# Warmup Iteration   3: 670083.950 ops/s
# Warmup Iteration   4: 655648.639 ops/s
# Warmup Iteration   5: 687495.731 ops/s
# Warmup Iteration   6: 695782.835 ops/s
# Warmup Iteration   7: 651607.671 ops/s
# Warmup Iteration   8: 643810.793 ops/s
# Warmup Iteration   9: 679172.518 ops/s
# Warmup Iteration  10: 595590.966 ops/s
# Warmup Iteration  11: 652960.252 ops/s
# Warmup Iteration  12: 642032.975 ops/s
# Warmup Iteration  13: 683731.623 ops/s
# Warmup Iteration  14: 556642.363 ops/s
# Warmup Iteration  15: 654955.833 ops/s
# Warmup Iteration  16: 682761.582 ops/s
# Warmup Iteration  17: 702927.982 ops/s
# Warmup Iteration  18: 697691.977 ops/s
# Warmup Iteration  19: 708123.088 ops/s
# Warmup Iteration  20: 714659.978 ops/s
# Warmup Iteration  21: 699934.061 ops/s
# Warmup Iteration  22: 699730.526 ops/s
# Warmup Iteration  23: 721592.991 ops/s
# Warmup Iteration  24: 682507.992 ops/s
# Warmup Iteration  25: 705382.983 ops/s
# Warmup Iteration  26: 682044.847 ops/s
# Warmup Iteration  27: 707418.981 ops/s
# Warmup Iteration  28: 711310.350 ops/s
# Warmup Iteration  29: 708188.115 ops/s
# Warmup Iteration  30: 687052.699 ops/s
Iteration   1: 688628.006 ops/s
Iteration   2: 713412.837 ops/s
Iteration   3: 679272.808 ops/s
Iteration   4: 709933.918 ops/s
Iteration   5: 696809.897 ops/s
Iteration   6: 699602.279 ops/s
Iteration   7: 733671.741 ops/s
Iteration   8: 684273.937 ops/s
Iteration   9: 732425.419 ops/s
Iteration  10: 698783.162 ops/s
Iteration  11: 729567.894 ops/s
Iteration  12: 691225.942 ops/s
Iteration  13: 695812.289 ops/s
Iteration  14: 699260.772 ops/s
Iteration  15: 685259.112 ops/s
Iteration  16: 721818.074 ops/s
Iteration  17: 707824.164 ops/s
Iteration  18: 694627.644 ops/s
Iteration  19: 715164.695 ops/s
Iteration  20: 704596.452 ops/s
Iteration  21: 711387.750 ops/s
Iteration  22: 717920.589 ops/s
Iteration  23: 696523.425 ops/s
Iteration  24: 705968.908 ops/s
Iteration  25: 703064.037 ops/s
Iteration  26: 711011.551 ops/s
Iteration  27: 709838.057 ops/s
Iteration  28: 694295.881 ops/s
Iteration  29: 732467.895 ops/s
Iteration  30: 699077.252 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableUsingTest._Benchmark.benchmark_usingWithResourceFactoryErrorDisposeEagerly":
  705450.880 ±(99.9%) 9775.091 ops/s [Average]
  (min, avg, max) = (679272.808, 705450.880, 733671.741), stdev = 14630.898
  CI (99.9%): [695675.788, 715225.971] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            Mode  Cnt       Score      Error  Units
FlowableUsingTest._Benchmark.benchmark_usingWithResourceFactoryErrorDisposeEagerly  thrpt   30  705450.880 ± 9775.091  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableBlockingTest._Benchmark.benchmark_firstOnError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableBlockingTest._Benchmark.benchmark_firstOnError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 408994.543 ops/s
# Warmup Iteration   2: 636274.330 ops/s
# Warmup Iteration   3: 713815.177 ops/s
# Warmup Iteration   4: 706739.765 ops/s
# Warmup Iteration   5: 658913.978 ops/s
# Warmup Iteration   6: 678023.512 ops/s
# Warmup Iteration   7: 688843.975 ops/s
# Warmup Iteration   8: 668959.717 ops/s
# Warmup Iteration   9: 695683.009 ops/s
# Warmup Iteration  10: 716996.961 ops/s
# Warmup Iteration  11: 677159.942 ops/s
# Warmup Iteration  12: 689271.357 ops/s
# Warmup Iteration  13: 697570.661 ops/s
# Warmup Iteration  14: 663708.131 ops/s
# Warmup Iteration  15: 723651.981 ops/s
# Warmup Iteration  16: 688671.566 ops/s
# Warmup Iteration  17: 730558.155 ops/s
# Warmup Iteration  18: 727065.578 ops/s
# Warmup Iteration  19: 758760.995 ops/s
# Warmup Iteration  20: 736190.923 ops/s
# Warmup Iteration  21: 745917.281 ops/s
# Warmup Iteration  22: 743455.555 ops/s
# Warmup Iteration  23: 732907.202 ops/s
# Warmup Iteration  24: 748563.582 ops/s
# Warmup Iteration  25: 745766.707 ops/s
# Warmup Iteration  26: 735853.814 ops/s
# Warmup Iteration  27: 746972.998 ops/s
# Warmup Iteration  28: 727903.245 ops/s
# Warmup Iteration  29: 729243.850 ops/s
# Warmup Iteration  30: 776979.485 ops/s
Iteration   1: 702821.842 ops/s
Iteration   2: 756552.906 ops/s
Iteration   3: 732580.471 ops/s
Iteration   4: 725183.053 ops/s
Iteration   5: 768885.009 ops/s
Iteration   6: 715232.145 ops/s
Iteration   7: 724814.648 ops/s
Iteration   8: 727060.085 ops/s
Iteration   9: 757680.095 ops/s
Iteration  10: 740413.647 ops/s
Iteration  11: 718381.420 ops/s
Iteration  12: 765051.276 ops/s
Iteration  13: 724557.510 ops/s
Iteration  14: 755646.466 ops/s
Iteration  15: 740920.208 ops/s
Iteration  16: 725618.475 ops/s
Iteration  17: 739920.115 ops/s
Iteration  18: 760136.997 ops/s
Iteration  19: 732258.926 ops/s
Iteration  20: 734477.404 ops/s
Iteration  21: 758611.591 ops/s
Iteration  22: 724064.054 ops/s
Iteration  23: 763558.516 ops/s
Iteration  24: 731874.075 ops/s
Iteration  25: 727614.083 ops/s
Iteration  26: 752816.072 ops/s
Iteration  27: 730050.256 ops/s
Iteration  28: 747093.958 ops/s
Iteration  29: 774814.011 ops/s
Iteration  30: 717685.476 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableBlockingTest._Benchmark.benchmark_firstOnError":
  739212.493 ±(99.9%) 12251.058 ops/s [Average]
  (min, avg, max) = (702821.842, 739212.493, 774814.011), stdev = 18336.808
  CI (99.9%): [726961.435, 751463.551] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score       Error  Units
FlowableBlockingTest._Benchmark.benchmark_firstOnError  thrpt   30  739212.493 ± 12251.058  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDematerializeTest._Benchmark.benchmark_selectorCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDematerializeTest._Benchmark.benchmark_selectorCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 74821.899 ops/s
# Warmup Iteration   2: 354364.315 ops/s
# Warmup Iteration   3: 397371.664 ops/s
# Warmup Iteration   4: 376373.564 ops/s
# Warmup Iteration   5: 427347.828 ops/s
# Warmup Iteration   6: 382218.301 ops/s
# Warmup Iteration   7: 424606.818 ops/s
# Warmup Iteration   8: 432543.099 ops/s
# Warmup Iteration   9: 350054.685 ops/s
# Warmup Iteration  10: 434038.378 ops/s
# Warmup Iteration  11: 413280.022 ops/s
# Warmup Iteration  12: 422110.618 ops/s
# Warmup Iteration  13: 438100.550 ops/s
# Warmup Iteration  14: 441923.560 ops/s
# Warmup Iteration  15: 422723.507 ops/s
# Warmup Iteration  16: 440778.470 ops/s
# Warmup Iteration  17: 421050.015 ops/s
# Warmup Iteration  18: 446554.234 ops/s
# Warmup Iteration  19: 454893.589 ops/s
# Warmup Iteration  20: 422773.198 ops/s
# Warmup Iteration  21: 449832.813 ops/s
# Warmup Iteration  22: 438617.079 ops/s
# Warmup Iteration  23: 434710.788 ops/s
# Warmup Iteration  24: 443655.734 ops/s
# Warmup Iteration  25: 449626.509 ops/s
# Warmup Iteration  26: 437146.358 ops/s
# Warmup Iteration  27: 456045.116 ops/s
# Warmup Iteration  28: 438538.851 ops/s
# Warmup Iteration  29: 444887.805 ops/s
# Warmup Iteration  30: 429682.600 ops/s
Iteration   1: 457814.964 ops/s
Iteration   2: 429277.995 ops/s
Iteration   3: 426951.153 ops/s
Iteration   4: 467844.770 ops/s
Iteration   5: 445235.284 ops/s
Iteration   6: 436398.529 ops/s
Iteration   7: 444236.793 ops/s
Iteration   8: 437100.429 ops/s
Iteration   9: 449514.682 ops/s
Iteration  10: 458811.208 ops/s
Iteration  11: 436154.634 ops/s
Iteration  12: 442337.312 ops/s
Iteration  13: 426448.443 ops/s
Iteration  14: 462265.129 ops/s
Iteration  15: 436349.464 ops/s
Iteration  16: 432572.842 ops/s
Iteration  17: 448662.949 ops/s
Iteration  18: 427695.700 ops/s
Iteration  19: 451392.064 ops/s
Iteration  20: 444984.256 ops/s
Iteration  21: 429168.159 ops/s
Iteration  22: 455219.761 ops/s
Iteration  23: 428931.698 ops/s
Iteration  24: 450818.375 ops/s
Iteration  25: 440034.148 ops/s
Iteration  26: 442444.579 ops/s
Iteration  27: 467339.009 ops/s
Iteration  28: 436172.133 ops/s
Iteration  29: 431035.569 ops/s
Iteration  30: 454166.754 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableDematerializeTest._Benchmark.benchmark_selectorCrash":
  443245.959 ±(99.9%) 8191.877 ops/s [Average]
  (min, avg, max) = (426448.443, 443245.959, 467844.770), stdev = 12261.216
  CI (99.9%): [435054.083, 451437.836] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
FlowableDematerializeTest._Benchmark.benchmark_selectorCrash  thrpt   30  443245.959 ± 8191.877  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArrayTest._Benchmark.benchmark_conditionalOneIsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArrayTest._Benchmark.benchmark_conditionalOneIsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 196836.055 ops/s
# Warmup Iteration   2: 428113.547 ops/s
# Warmup Iteration   3: 508032.453 ops/s
# Warmup Iteration   4: 515619.963 ops/s
# Warmup Iteration   5: 538246.530 ops/s
# Warmup Iteration   6: 512442.045 ops/s
# Warmup Iteration   7: 565232.804 ops/s
# Warmup Iteration   8: 549311.134 ops/s
# Warmup Iteration   9: 560385.845 ops/s
# Warmup Iteration  10: 565838.635 ops/s
# Warmup Iteration  11: 581365.991 ops/s
# Warmup Iteration  12: 538502.919 ops/s
# Warmup Iteration  13: 580866.124 ops/s
# Warmup Iteration  14: 550048.748 ops/s
# Warmup Iteration  15: 564241.977 ops/s
# Warmup Iteration  16: 574632.498 ops/s
# Warmup Iteration  17: 573046.920 ops/s
# Warmup Iteration  18: 574201.116 ops/s
# Warmup Iteration  19: 592116.753 ops/s
# Warmup Iteration  20: 556588.445 ops/s
# Warmup Iteration  21: 572593.328 ops/s
# Warmup Iteration  22: 584996.270 ops/s
# Warmup Iteration  23: 570322.164 ops/s
# Warmup Iteration  24: 586190.003 ops/s
# Warmup Iteration  25: 565476.611 ops/s
# Warmup Iteration  26: 582699.069 ops/s
# Warmup Iteration  27: 583507.093 ops/s
# Warmup Iteration  28: 555905.305 ops/s
# Warmup Iteration  29: 597930.618 ops/s
# Warmup Iteration  30: 563090.325 ops/s
Iteration   1: 585079.994 ops/s
Iteration   2: 574699.966 ops/s
Iteration   3: 565762.823 ops/s
Iteration   4: 593698.076 ops/s
Iteration   5: 550346.670 ops/s
Iteration   6: 599589.211 ops/s
Iteration   7: 567185.730 ops/s
Iteration   8: 609084.736 ops/s
Iteration   9: 562467.295 ops/s
Iteration  10: 576685.248 ops/s
Iteration  11: 581585.253 ops/s
Iteration  12: 591588.089 ops/s
Iteration  13: 562646.536 ops/s
Iteration  14: 596951.870 ops/s
Iteration  15: 566320.466 ops/s
Iteration  16: 557387.740 ops/s
Iteration  17: 589525.593 ops/s
Iteration  18: 576396.065 ops/s
Iteration  19: 602212.474 ops/s
Iteration  20: 560620.508 ops/s
Iteration  21: 582366.074 ops/s
Iteration  22: 578533.038 ops/s
Iteration  23: 584905.902 ops/s
Iteration  24: 578252.159 ops/s
Iteration  25: 567459.251 ops/s
Iteration  26: 593628.046 ops/s
Iteration  27: 556174.037 ops/s
Iteration  28: 607475.176 ops/s
Iteration  29: 571995.136 ops/s
Iteration  30: 575893.531 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArrayTest._Benchmark.benchmark_conditionalOneIsNull":
  578883.890 ±(99.9%) 10509.912 ops/s [Average]
  (min, avg, max) = (550346.670, 578883.890, 609084.736), stdev = 15730.742
  CI (99.9%): [568373.978, 589393.801] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score       Error  Units
FlowableFromArrayTest._Benchmark.benchmark_conditionalOneIsNull  thrpt   30  578883.890 ± 10509.912  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastOneTest._Benchmark.benchmark_lastOfOneReturnsLast$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastOneTest._Benchmark.benchmark_lastOfOneReturnsLast

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1131241.296 ops/s
# Warmup Iteration   2: 3493346.274 ops/s
# Warmup Iteration   3: 3938726.700 ops/s
# Warmup Iteration   4: 3939210.678 ops/s
# Warmup Iteration   5: 4552232.506 ops/s
# Warmup Iteration   6: 4608563.512 ops/s
# Warmup Iteration   7: 4685772.649 ops/s
# Warmup Iteration   8: 4494766.756 ops/s
# Warmup Iteration   9: 4657202.505 ops/s
# Warmup Iteration  10: 4653371.677 ops/s
# Warmup Iteration  11: 4700849.661 ops/s
# Warmup Iteration  12: 4445830.855 ops/s
# Warmup Iteration  13: 4688041.298 ops/s
# Warmup Iteration  14: 4627991.218 ops/s
# Warmup Iteration  15: 4640472.632 ops/s
# Warmup Iteration  16: 4618026.813 ops/s
# Warmup Iteration  17: 4614857.762 ops/s
# Warmup Iteration  18: 4809516.783 ops/s
# Warmup Iteration  19: 4454356.348 ops/s
# Warmup Iteration  20: 4720609.616 ops/s
# Warmup Iteration  21: 4545480.728 ops/s
# Warmup Iteration  22: 4671984.111 ops/s
# Warmup Iteration  23: 4665715.940 ops/s
# Warmup Iteration  24: 4495698.922 ops/s
# Warmup Iteration  25: 4625545.454 ops/s
# Warmup Iteration  26: 4547723.577 ops/s
# Warmup Iteration  27: 4646709.086 ops/s
# Warmup Iteration  28: 4744756.045 ops/s
# Warmup Iteration  29: 4510076.293 ops/s
# Warmup Iteration  30: 4756370.760 ops/s
Iteration   1: 4611640.160 ops/s
Iteration   2: 4664524.920 ops/s
Iteration   3: 4615128.407 ops/s
Iteration   4: 4610759.052 ops/s
Iteration   5: 4505522.868 ops/s
Iteration   6: 4566736.241 ops/s
Iteration   7: 4695172.847 ops/s
Iteration   8: 4589442.703 ops/s
Iteration   9: 4635829.321 ops/s
Iteration  10: 4805901.450 ops/s
Iteration  11: 4539572.068 ops/s
Iteration  12: 4827836.705 ops/s
Iteration  13: 4471906.060 ops/s
Iteration  14: 4549455.037 ops/s
Iteration  15: 4725939.424 ops/s
Iteration  16: 4566738.920 ops/s
Iteration  17: 4476797.900 ops/s
Iteration  18: 4668041.422 ops/s
Iteration  19: 4568214.847 ops/s
Iteration  20: 4769361.059 ops/s
Iteration  21: 4526691.357 ops/s
Iteration  22: 4785299.261 ops/s
Iteration  23: 4505922.053 ops/s
Iteration  24: 4547065.114 ops/s
Iteration  25: 4628821.456 ops/s
Iteration  26: 4622894.916 ops/s
Iteration  27: 4642339.107 ops/s
Iteration  28: 4565654.095 ops/s
Iteration  29: 4585668.939 ops/s
Iteration  30: 4564048.631 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastOneTest._Benchmark.benchmark_lastOfOneReturnsLast":
  4614630.878 ±(99.9%) 63173.944 ops/s [Average]
  (min, avg, max) = (4471906.060, 4614630.878, 4827836.705), stdev = 94555.793
  CI (99.9%): [4551456.934, 4677804.822] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
FlowableTakeLastOneTest._Benchmark.benchmark_lastOfOneReturnsLast  thrpt   30  4614630.878 ± 63173.944  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_combineLatestIterableOneIsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_combineLatestIterableOneIsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 318218.289 ops/s
# Warmup Iteration   2: 601742.664 ops/s
# Warmup Iteration   3: 654679.418 ops/s
# Warmup Iteration   4: 615449.913 ops/s
# Warmup Iteration   5: 665907.992 ops/s
# Warmup Iteration   6: 636722.097 ops/s
# Warmup Iteration   7: 705031.970 ops/s
# Warmup Iteration   8: 657708.847 ops/s
# Warmup Iteration   9: 709800.500 ops/s
# Warmup Iteration  10: 708395.411 ops/s
# Warmup Iteration  11: 668248.382 ops/s
# Warmup Iteration  12: 708503.642 ops/s
# Warmup Iteration  13: 653929.833 ops/s
# Warmup Iteration  14: 706456.200 ops/s
# Warmup Iteration  15: 675426.204 ops/s
# Warmup Iteration  16: 708340.048 ops/s
# Warmup Iteration  17: 756489.952 ops/s
# Warmup Iteration  18: 691506.935 ops/s
# Warmup Iteration  19: 725504.203 ops/s
# Warmup Iteration  20: 744239.852 ops/s
# Warmup Iteration  21: 698671.732 ops/s
# Warmup Iteration  22: 731863.058 ops/s
# Warmup Iteration  23: 733674.406 ops/s
# Warmup Iteration  24: 724847.221 ops/s
# Warmup Iteration  25: 730627.132 ops/s
# Warmup Iteration  26: 735947.895 ops/s
# Warmup Iteration  27: 694989.963 ops/s
# Warmup Iteration  28: 746511.858 ops/s
# Warmup Iteration  29: 699492.365 ops/s
# Warmup Iteration  30: 707431.190 ops/s
Iteration   1: 724204.521 ops/s
Iteration   2: 732042.475 ops/s
Iteration   3: 736621.699 ops/s
Iteration   4: 709204.465 ops/s
Iteration   5: 723880.571 ops/s
Iteration   6: 703279.529 ops/s
Iteration   7: 751902.802 ops/s
Iteration   8: 702457.252 ops/s
Iteration   9: 730024.150 ops/s
Iteration  10: 756142.754 ops/s
Iteration  11: 704214.601 ops/s
Iteration  12: 705340.950 ops/s
Iteration  13: 739158.099 ops/s
Iteration  14: 696123.719 ops/s
Iteration  15: 746039.698 ops/s
Iteration  16: 710418.708 ops/s
Iteration  17: 728721.636 ops/s
Iteration  18: 716883.338 ops/s
Iteration  19: 694032.500 ops/s
Iteration  20: 742760.886 ops/s
Iteration  21: 695535.660 ops/s
Iteration  22: 739398.701 ops/s
Iteration  23: 736087.904 ops/s
Iteration  24: 712644.096 ops/s
Iteration  25: 744359.012 ops/s
Iteration  26: 708400.703 ops/s
Iteration  27: 733487.705 ops/s
Iteration  28: 718795.535 ops/s
Iteration  29: 720632.608 ops/s
Iteration  30: 729921.705 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_combineLatestIterableOneIsNull":
  723090.599 ±(99.9%) 11797.947 ops/s [Average]
  (min, avg, max) = (694032.500, 723090.599, 756142.754), stdev = 17658.613
  CI (99.9%): [711292.652, 734888.547] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score       Error  Units
FlowableNullTests._Benchmark.benchmark_combineLatestIterableOneIsNull  thrpt   30  723090.599 ± 11797.947  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_generateConsumerEmitsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_generateConsumerEmitsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 248600.352 ops/s
# Warmup Iteration   2: 439519.420 ops/s
# Warmup Iteration   3: 522777.609 ops/s
# Warmup Iteration   4: 499974.855 ops/s
# Warmup Iteration   5: 541100.993 ops/s
# Warmup Iteration   6: 459380.591 ops/s
# Warmup Iteration   7: 561503.858 ops/s
# Warmup Iteration   8: 538446.579 ops/s
# Warmup Iteration   9: 544962.080 ops/s
# Warmup Iteration  10: 562520.139 ops/s
# Warmup Iteration  11: 524309.229 ops/s
# Warmup Iteration  12: 564444.056 ops/s
# Warmup Iteration  13: 556542.980 ops/s
# Warmup Iteration  14: 539051.854 ops/s
# Warmup Iteration  15: 559192.794 ops/s
# Warmup Iteration  16: 539374.542 ops/s
# Warmup Iteration  17: 578574.793 ops/s
# Warmup Iteration  18: 576686.207 ops/s
# Warmup Iteration  19: 575740.121 ops/s
# Warmup Iteration  20: 593348.908 ops/s
# Warmup Iteration  21: 555182.477 ops/s
# Warmup Iteration  22: 589712.063 ops/s
# Warmup Iteration  23: 575276.876 ops/s
# Warmup Iteration  24: 545708.476 ops/s
# Warmup Iteration  25: 597601.719 ops/s
# Warmup Iteration  26: 554898.416 ops/s
# Warmup Iteration  27: 574390.817 ops/s
# Warmup Iteration  28: 562299.047 ops/s
# Warmup Iteration  29: 575863.823 ops/s
# Warmup Iteration  30: 562273.037 ops/s
Iteration   1: 566911.102 ops/s
Iteration   2: 597524.076 ops/s
Iteration   3: 550538.393 ops/s
Iteration   4: 591897.955 ops/s
Iteration   5: 557696.782 ops/s
Iteration   6: 575543.325 ops/s
Iteration   7: 589646.381 ops/s
Iteration   8: 566358.424 ops/s
Iteration   9: 598470.724 ops/s
Iteration  10: 544495.027 ops/s
Iteration  11: 588863.553 ops/s
Iteration  12: 569278.847 ops/s
Iteration  13: 560746.054 ops/s
Iteration  14: 591480.560 ops/s
Iteration  15: 558883.676 ops/s
Iteration  16: 565516.016 ops/s
Iteration  17: 590005.990 ops/s
Iteration  18: 569884.217 ops/s
Iteration  19: 579585.279 ops/s
Iteration  20: 572336.329 ops/s
Iteration  21: 580592.312 ops/s
Iteration  22: 581638.175 ops/s
Iteration  23: 576298.211 ops/s
Iteration  24: 588369.466 ops/s
Iteration  25: 563165.175 ops/s
Iteration  26: 590631.392 ops/s
Iteration  27: 566075.604 ops/s
Iteration  28: 558153.691 ops/s
Iteration  29: 573301.311 ops/s
Iteration  30: 559557.886 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_generateConsumerEmitsNull":
  574114.864 ±(99.9%) 9671.786 ops/s [Average]
  (min, avg, max) = (544495.027, 574114.864, 598470.724), stdev = 14476.275
  CI (99.9%): [564443.078, 583786.651] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
FlowableNullTests._Benchmark.benchmark_generateConsumerEmitsNull  thrpt   30  574114.864 ± 9671.786  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_fromFutureTimedReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_fromFutureTimedReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 277163.456 ops/s
# Warmup Iteration   2: 478290.593 ops/s
# Warmup Iteration   3: 584265.405 ops/s
# Warmup Iteration   4: 599380.174 ops/s
# Warmup Iteration   5: 545549.128 ops/s
# Warmup Iteration   6: 629843.247 ops/s
# Warmup Iteration   7: 608845.681 ops/s
# Warmup Iteration   8: 637439.243 ops/s
# Warmup Iteration   9: 623372.512 ops/s
# Warmup Iteration  10: 599932.621 ops/s
# Warmup Iteration  11: 623587.835 ops/s
# Warmup Iteration  12: 630429.228 ops/s
# Warmup Iteration  13: 610380.354 ops/s
# Warmup Iteration  14: 640923.236 ops/s
# Warmup Iteration  15: 604933.399 ops/s
# Warmup Iteration  16: 627604.794 ops/s
# Warmup Iteration  17: 634525.428 ops/s
# Warmup Iteration  18: 664765.098 ops/s
# Warmup Iteration  19: 637415.329 ops/s
# Warmup Iteration  20: 639122.955 ops/s
# Warmup Iteration  21: 660556.856 ops/s
# Warmup Iteration  22: 630722.876 ops/s
# Warmup Iteration  23: 667130.052 ops/s
# Warmup Iteration  24: 633092.616 ops/s
# Warmup Iteration  25: 652171.640 ops/s
# Warmup Iteration  26: 656789.086 ops/s
# Warmup Iteration  27: 636145.080 ops/s
# Warmup Iteration  28: 659605.760 ops/s
# Warmup Iteration  29: 634786.683 ops/s
# Warmup Iteration  30: 659919.618 ops/s
Iteration   1: 647755.509 ops/s
Iteration   2: 642449.336 ops/s
Iteration   3: 662027.683 ops/s
Iteration   4: 615039.069 ops/s
Iteration   5: 641598.202 ops/s
Iteration   6: 644040.453 ops/s
Iteration   7: 657623.978 ops/s
Iteration   8: 645968.074 ops/s
Iteration   9: 655494.650 ops/s
Iteration  10: 649145.079 ops/s
Iteration  11: 649838.999 ops/s
Iteration  12: 621874.425 ops/s
Iteration  13: 662834.333 ops/s
Iteration  14: 644048.368 ops/s
Iteration  15: 640168.546 ops/s
Iteration  16: 629359.285 ops/s
Iteration  17: 645036.007 ops/s
Iteration  18: 666375.660 ops/s
Iteration  19: 625853.107 ops/s
Iteration  20: 664894.586 ops/s
Iteration  21: 656837.290 ops/s
Iteration  22: 658131.924 ops/s
Iteration  23: 637142.116 ops/s
Iteration  24: 661922.236 ops/s
Iteration  25: 556027.106 ops/s
Iteration  26: 624667.882 ops/s
Iteration  27: 658394.392 ops/s
Iteration  28: 635772.399 ops/s
Iteration  29: 657773.597 ops/s
Iteration  30: 630306.266 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_fromFutureTimedReturnsNull":
  642946.685 ±(99.9%) 14347.501 ops/s [Average]
  (min, avg, max) = (556027.106, 642946.685, 666375.660), stdev = 21474.666
  CI (99.9%): [628599.184, 657294.186] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score       Error  Units
FlowableNullTests._Benchmark.benchmark_fromFutureTimedReturnsNull  thrpt   30  642946.685 ± 14347.501  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_usingFlowableSupplierReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_usingFlowableSupplierReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 262109.843 ops/s
# Warmup Iteration   2: 614575.629 ops/s
# Warmup Iteration   3: 647194.186 ops/s
# Warmup Iteration   4: 693743.215 ops/s
# Warmup Iteration   5: 698137.991 ops/s
# Warmup Iteration   6: 682516.983 ops/s
# Warmup Iteration   7: 660841.951 ops/s
# Warmup Iteration   8: 678639.400 ops/s
# Warmup Iteration   9: 680882.427 ops/s
# Warmup Iteration  10: 704798.956 ops/s
# Warmup Iteration  11: 687592.955 ops/s
# Warmup Iteration  12: 667743.255 ops/s
# Warmup Iteration  13: 731562.089 ops/s
# Warmup Iteration  14: 668306.381 ops/s
# Warmup Iteration  15: 700501.966 ops/s
# Warmup Iteration  16: 707064.014 ops/s
# Warmup Iteration  17: 721605.691 ops/s
# Warmup Iteration  18: 747106.485 ops/s
# Warmup Iteration  19: 720916.729 ops/s
# Warmup Iteration  20: 738413.683 ops/s
# Warmup Iteration  21: 751323.616 ops/s
# Warmup Iteration  22: 715915.462 ops/s
# Warmup Iteration  23: 741977.568 ops/s
# Warmup Iteration  24: 749729.140 ops/s
# Warmup Iteration  25: 708489.994 ops/s
# Warmup Iteration  26: 742873.684 ops/s
# Warmup Iteration  27: 718172.209 ops/s
# Warmup Iteration  28: 746290.112 ops/s
# Warmup Iteration  29: 699417.901 ops/s
# Warmup Iteration  30: 722282.695 ops/s
Iteration   1: 747259.499 ops/s
Iteration   2: 718376.969 ops/s
Iteration   3: 741613.119 ops/s
Iteration   4: 715781.412 ops/s
Iteration   5: 728277.464 ops/s
Iteration   6: 734389.177 ops/s
Iteration   7: 725367.038 ops/s
Iteration   8: 762006.559 ops/s
Iteration   9: 714427.312 ops/s
Iteration  10: 718112.943 ops/s
Iteration  11: 724471.280 ops/s
Iteration  12: 725606.981 ops/s
Iteration  13: 755753.758 ops/s
Iteration  14: 736099.346 ops/s
Iteration  15: 690034.499 ops/s
Iteration  16: 752111.973 ops/s
Iteration  17: 722165.343 ops/s
Iteration  18: 719152.694 ops/s
Iteration  19: 703551.549 ops/s
Iteration  20: 733660.411 ops/s
Iteration  21: 741742.547 ops/s
Iteration  22: 726075.675 ops/s
Iteration  23: 741828.528 ops/s
Iteration  24: 721147.082 ops/s
Iteration  25: 731114.111 ops/s
Iteration  26: 729860.612 ops/s
Iteration  27: 741997.538 ops/s
Iteration  28: 750143.545 ops/s
Iteration  29: 734958.455 ops/s
Iteration  30: 712933.708 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_usingFlowableSupplierReturnsNull":
  730000.704 ±(99.9%) 10519.110 ops/s [Average]
  (min, avg, max) = (690034.499, 730000.704, 762006.559), stdev = 15744.510
  CI (99.9%): [719481.594, 740519.815] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score       Error  Units
FlowableNullTests._Benchmark.benchmark_usingFlowableSupplierReturnsNull  thrpt   30  730000.704 ± 10519.110  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFromStreamTest._Benchmark.benchmark_badRequest$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFromStreamTest._Benchmark.benchmark_badRequest

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 76041.150 ops/s
# Warmup Iteration   2: 378800.587 ops/s
# Warmup Iteration   3: 468523.634 ops/s
# Warmup Iteration   4: 485670.434 ops/s
# Warmup Iteration   5: 486435.723 ops/s
# Warmup Iteration   6: 460234.219 ops/s
# Warmup Iteration   7: 453308.534 ops/s
# Warmup Iteration   8: 440286.051 ops/s
# Warmup Iteration   9: 502293.057 ops/s
# Warmup Iteration  10: 503661.800 ops/s
# Warmup Iteration  11: 495345.680 ops/s
# Warmup Iteration  12: 505719.539 ops/s
# Warmup Iteration  13: 498985.747 ops/s
# Warmup Iteration  14: 478940.040 ops/s
# Warmup Iteration  15: 518139.433 ops/s
# Warmup Iteration  16: 476458.335 ops/s
# Warmup Iteration  17: 531359.000 ops/s
# Warmup Iteration  18: 521555.321 ops/s
# Warmup Iteration  19: 520918.173 ops/s
# Warmup Iteration  20: 502093.685 ops/s
# Warmup Iteration  21: 526796.712 ops/s
# Warmup Iteration  22: 526096.470 ops/s
# Warmup Iteration  23: 529454.562 ops/s
# Warmup Iteration  24: 506576.910 ops/s
# Warmup Iteration  25: 517022.334 ops/s
# Warmup Iteration  26: 528427.375 ops/s
# Warmup Iteration  27: 509286.459 ops/s
# Warmup Iteration  28: 511111.293 ops/s
# Warmup Iteration  29: 536285.744 ops/s
# Warmup Iteration  30: 507329.364 ops/s
Iteration   1: 501750.899 ops/s
Iteration   2: 534281.521 ops/s
Iteration   3: 495511.079 ops/s
Iteration   4: 519253.453 ops/s
Iteration   5: 498212.316 ops/s
Iteration   6: 508536.905 ops/s
Iteration   7: 522140.856 ops/s
Iteration   8: 507145.098 ops/s
Iteration   9: 520932.511 ops/s
Iteration  10: 517451.769 ops/s
Iteration  11: 520894.281 ops/s
Iteration  12: 508601.921 ops/s
Iteration  13: 508735.889 ops/s
Iteration  14: 524936.442 ops/s
Iteration  15: 508966.226 ops/s
Iteration  16: 500384.291 ops/s
Iteration  17: 512891.221 ops/s
Iteration  18: 535871.676 ops/s
Iteration  19: 498114.812 ops/s
Iteration  20: 408976.126 ops/s
Iteration  21: 520359.452 ops/s
Iteration  22: 520881.130 ops/s
Iteration  23: 516420.992 ops/s
Iteration  24: 517097.110 ops/s
Iteration  25: 512998.623 ops/s
Iteration  26: 515992.395 ops/s
Iteration  27: 540974.379 ops/s
Iteration  28: 498570.030 ops/s
Iteration  29: 530146.670 ops/s
Iteration  30: 506278.776 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableFromStreamTest._Benchmark.benchmark_badRequest":
  511110.295 ±(99.9%) 15054.185 ops/s [Average]
  (min, avg, max) = (408976.126, 511110.295, 540974.379), stdev = 22532.398
  CI (99.9%): [496056.110, 526164.481] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score       Error  Units
FlowableFromStreamTest._Benchmark.benchmark_badRequest  thrpt   30  511110.295 ± 15054.185  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCountTest._Benchmark.benchmark_noOpConnect$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCountTest._Benchmark.benchmark_noOpConnect

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1402303.102 ops/s
# Warmup Iteration   2: 2515818.754 ops/s
# Warmup Iteration   3: 3332280.525 ops/s
# Warmup Iteration   4: 3792644.079 ops/s
# Warmup Iteration   5: 3831038.339 ops/s
# Warmup Iteration   6: 3872034.755 ops/s
# Warmup Iteration   7: 3771067.947 ops/s
# Warmup Iteration   8: 3889177.993 ops/s
# Warmup Iteration   9: 3801605.224 ops/s
# Warmup Iteration  10: 3833669.554 ops/s
# Warmup Iteration  11: 3743371.706 ops/s
# Warmup Iteration  12: 3798932.927 ops/s
# Warmup Iteration  13: 3951862.437 ops/s
# Warmup Iteration  14: 3741193.854 ops/s
# Warmup Iteration  15: 3974651.816 ops/s
# Warmup Iteration  16: 3699036.602 ops/s
# Warmup Iteration  17: 3876274.241 ops/s
# Warmup Iteration  18: 3734014.657 ops/s
# Warmup Iteration  19: 3763698.641 ops/s
# Warmup Iteration  20: 3794835.537 ops/s
# Warmup Iteration  21: 3779560.183 ops/s
# Warmup Iteration  22: 4000615.180 ops/s
# Warmup Iteration  23: 3762159.430 ops/s
# Warmup Iteration  24: 3866184.475 ops/s
# Warmup Iteration  25: 3837617.049 ops/s
# Warmup Iteration  26: 3863694.660 ops/s
# Warmup Iteration  27: 3637968.451 ops/s
# Warmup Iteration  28: 3943010.074 ops/s
# Warmup Iteration  29: 3903277.091 ops/s
# Warmup Iteration  30: 3788772.620 ops/s
Iteration   1: 3943607.304 ops/s
Iteration   2: 3723773.832 ops/s
Iteration   3: 3900880.964 ops/s
Iteration   4: 3873794.390 ops/s
Iteration   5: 3707043.780 ops/s
Iteration   6: 3869827.370 ops/s
Iteration   7: 3841189.570 ops/s
Iteration   8: 3886168.263 ops/s
Iteration   9: 3858878.523 ops/s
Iteration  10: 3836585.726 ops/s
Iteration  11: 3739661.694 ops/s
Iteration  12: 3828855.566 ops/s
Iteration  13: 3810559.635 ops/s
Iteration  14: 3730813.491 ops/s
Iteration  15: 3993575.863 ops/s
Iteration  16: 3776391.289 ops/s
Iteration  17: 3766432.922 ops/s
Iteration  18: 3893134.866 ops/s
Iteration  19: 3788454.923 ops/s
Iteration  20: 3960188.843 ops/s
Iteration  21: 3750529.054 ops/s
Iteration  22: 3816716.637 ops/s
Iteration  23: 3944043.490 ops/s
Iteration  24: 3650131.137 ops/s
Iteration  25: 3905848.070 ops/s
Iteration  26: 3718027.724 ops/s
Iteration  27: 3997346.811 ops/s
Iteration  28: 3876782.630 ops/s
Iteration  29: 3647046.980 ops/s
Iteration  30: 3882074.411 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCountTest._Benchmark.benchmark_noOpConnect":
  3830612.192 ±(99.9%) 63650.900 ops/s [Average]
  (min, avg, max) = (3647046.980, 3830612.192, 3997346.811), stdev = 95269.678
  CI (99.9%): [3766961.292, 3894263.092] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
FlowableRefCountTest._Benchmark.benchmark_noOpConnect  thrpt   30  3830612.192 ± 63650.900  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLongTest._Benchmark.benchmark_noBackpressure$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLongTest._Benchmark.benchmark_noBackpressure

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 13508.430 ops/s
# Warmup Iteration   2: 90048.404 ops/s
# Warmup Iteration   3: 114073.837 ops/s
# Warmup Iteration   4: 124128.309 ops/s
# Warmup Iteration   5: 133372.571 ops/s
# Warmup Iteration   6: 131670.333 ops/s
# Warmup Iteration   7: 124314.251 ops/s
# Warmup Iteration   8: 129326.668 ops/s
# Warmup Iteration   9: 126101.031 ops/s
# Warmup Iteration  10: 131385.318 ops/s
# Warmup Iteration  11: 122689.823 ops/s
# Warmup Iteration  12: 126671.580 ops/s
# Warmup Iteration  13: 128166.660 ops/s
# Warmup Iteration  14: 125421.475 ops/s
# Warmup Iteration  15: 129405.029 ops/s
# Warmup Iteration  16: 127532.287 ops/s
# Warmup Iteration  17: 128093.355 ops/s
# Warmup Iteration  18: 134111.415 ops/s
# Warmup Iteration  19: 126993.132 ops/s
# Warmup Iteration  20: 134308.730 ops/s
# Warmup Iteration  21: 123072.210 ops/s
# Warmup Iteration  22: 130157.067 ops/s
# Warmup Iteration  23: 131269.517 ops/s
# Warmup Iteration  24: 128735.411 ops/s
# Warmup Iteration  25: 124927.877 ops/s
# Warmup Iteration  26: 133088.327 ops/s
# Warmup Iteration  27: 121918.912 ops/s
# Warmup Iteration  28: 128923.173 ops/s
# Warmup Iteration  29: 131304.662 ops/s
# Warmup Iteration  30: 126230.687 ops/s
Iteration   1: 132392.437 ops/s
Iteration   2: 128680.593 ops/s
Iteration   3: 130202.254 ops/s
Iteration   4: 127043.331 ops/s
Iteration   5: 128728.510 ops/s
Iteration   6: 129211.168 ops/s
Iteration   7: 128834.265 ops/s
Iteration   8: 129965.704 ops/s
Iteration   9: 128660.777 ops/s
Iteration  10: 133360.920 ops/s
Iteration  11: 128599.452 ops/s
Iteration  12: 130195.134 ops/s
Iteration  13: 129077.914 ops/s
Iteration  14: 116602.560 ops/s
Iteration  15: 120207.661 ops/s
Iteration  16: 132118.231 ops/s
Iteration  17: 125942.332 ops/s
Iteration  18: 130950.628 ops/s
Iteration  19: 129349.997 ops/s
Iteration  20: 131521.554 ops/s
Iteration  21: 125058.567 ops/s
Iteration  22: 131067.552 ops/s
Iteration  23: 129481.900 ops/s
Iteration  24: 129716.522 ops/s
Iteration  25: 133180.967 ops/s
Iteration  26: 125917.807 ops/s
Iteration  27: 133565.439 ops/s
Iteration  28: 128722.907 ops/s
Iteration  29: 125984.471 ops/s
Iteration  30: 131583.118 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLongTest._Benchmark.benchmark_noBackpressure":
  128864.156 ±(99.9%) 2427.117 ops/s [Average]
  (min, avg, max) = (116602.560, 128864.156, 133565.439), stdev = 3632.794
  CI (99.9%): [126437.039, 131291.272] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
FlowableRangeLongTest._Benchmark.benchmark_noBackpressure  thrpt   30  128864.156 ± 2427.117  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLongTest._Benchmark.benchmark_withBackpressureRequestWayMore$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLongTest._Benchmark.benchmark_withBackpressureRequestWayMore

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 44259.894 ops/s
# Warmup Iteration   2: 276216.863 ops/s
# Warmup Iteration   3: 303070.902 ops/s
# Warmup Iteration   4: 314564.040 ops/s
# Warmup Iteration   5: 335618.797 ops/s
# Warmup Iteration   6: 347532.408 ops/s
# Warmup Iteration   7: 337170.084 ops/s
# Warmup Iteration   8: 354181.888 ops/s
# Warmup Iteration   9: 336313.620 ops/s
# Warmup Iteration  10: 351296.369 ops/s
# Warmup Iteration  11: 349325.201 ops/s
# Warmup Iteration  12: 338594.552 ops/s
# Warmup Iteration  13: 351611.791 ops/s
# Warmup Iteration  14: 339817.555 ops/s
# Warmup Iteration  15: 355250.148 ops/s
# Warmup Iteration  16: 347623.028 ops/s
# Warmup Iteration  17: 333582.505 ops/s
# Warmup Iteration  18: 344082.679 ops/s
# Warmup Iteration  19: 358197.788 ops/s
# Warmup Iteration  20: 333717.592 ops/s
# Warmup Iteration  21: 346381.314 ops/s
# Warmup Iteration  22: 346041.705 ops/s
# Warmup Iteration  23: 350336.528 ops/s
# Warmup Iteration  24: 338541.276 ops/s
# Warmup Iteration  25: 336376.099 ops/s
# Warmup Iteration  26: 350966.357 ops/s
# Warmup Iteration  27: 338487.546 ops/s
# Warmup Iteration  28: 349086.684 ops/s
# Warmup Iteration  29: 343117.442 ops/s
# Warmup Iteration  30: 347639.511 ops/s
Iteration   1: 334029.357 ops/s
Iteration   2: 343647.894 ops/s
Iteration   3: 356343.569 ops/s
Iteration   4: 337685.099 ops/s
Iteration   5: 352160.493 ops/s
Iteration   6: 340992.027 ops/s
Iteration   7: 352079.508 ops/s
Iteration   8: 336563.329 ops/s
Iteration   9: 343746.111 ops/s
Iteration  10: 355832.273 ops/s
Iteration  11: 343027.104 ops/s
Iteration  12: 343359.478 ops/s
Iteration  13: 357557.581 ops/s
Iteration  14: 338953.605 ops/s
Iteration  15: 340638.579 ops/s
Iteration  16: 334240.269 ops/s
Iteration  17: 352271.494 ops/s
Iteration  18: 333980.460 ops/s
Iteration  19: 353139.867 ops/s
Iteration  20: 332659.449 ops/s
Iteration  21: 345943.654 ops/s
Iteration  22: 333568.833 ops/s
Iteration  23: 343663.838 ops/s
Iteration  24: 354397.097 ops/s
Iteration  25: 335061.011 ops/s
Iteration  26: 353230.256 ops/s
Iteration  27: 343647.943 ops/s
Iteration  28: 354027.759 ops/s
Iteration  29: 335576.539 ops/s
Iteration  30: 349487.069 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLongTest._Benchmark.benchmark_withBackpressureRequestWayMore":
  344383.718 ±(99.9%) 5421.298 ops/s [Average]
  (min, avg, max) = (332659.449, 344383.718, 357557.581), stdev = 8114.345
  CI (99.9%): [338962.420, 349805.017] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score      Error  Units
FlowableRangeLongTest._Benchmark.benchmark_withBackpressureRequestWayMore  thrpt   30  344383.718 ± 5421.298  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableStartWithTest._Benchmark.benchmark_emptyCompletableComplete$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableStartWithTest._Benchmark.benchmark_emptyCompletableComplete

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 731888.030 ops/s
# Warmup Iteration   2: 2808992.102 ops/s
# Warmup Iteration   3: 2976007.379 ops/s
# Warmup Iteration   4: 3219331.449 ops/s
# Warmup Iteration   5: 3447061.709 ops/s
# Warmup Iteration   6: 3380778.436 ops/s
# Warmup Iteration   7: 3297956.366 ops/s
# Warmup Iteration   8: 3440033.632 ops/s
# Warmup Iteration   9: 3350718.194 ops/s
# Warmup Iteration  10: 3385870.385 ops/s
# Warmup Iteration  11: 3260865.284 ops/s
# Warmup Iteration  12: 3300520.142 ops/s
# Warmup Iteration  13: 3362007.313 ops/s
# Warmup Iteration  14: 3242245.137 ops/s
# Warmup Iteration  15: 3340926.130 ops/s
# Warmup Iteration  16: 3324970.297 ops/s
# Warmup Iteration  17: 3501873.367 ops/s
# Warmup Iteration  18: 3327773.418 ops/s
# Warmup Iteration  19: 3411923.295 ops/s
# Warmup Iteration  20: 3433955.612 ops/s
# Warmup Iteration  21: 3369224.953 ops/s
# Warmup Iteration  22: 3465650.003 ops/s
# Warmup Iteration  23: 3350271.693 ops/s
# Warmup Iteration  24: 3323148.476 ops/s
# Warmup Iteration  25: 3521072.098 ops/s
# Warmup Iteration  26: 3336633.595 ops/s
# Warmup Iteration  27: 3330553.317 ops/s
# Warmup Iteration  28: 3465880.020 ops/s
# Warmup Iteration  29: 3347735.968 ops/s
# Warmup Iteration  30: 3471759.318 ops/s
Iteration   1: 3358104.396 ops/s
Iteration   2: 3350592.975 ops/s
Iteration   3: 3490417.683 ops/s
Iteration   4: 3339047.473 ops/s
Iteration   5: 3491430.224 ops/s
Iteration   6: 3231724.669 ops/s
Iteration   7: 3410275.837 ops/s
Iteration   8: 3343509.710 ops/s
Iteration   9: 2866465.047 ops/s
Iteration  10: 3320110.814 ops/s
Iteration  11: 3308016.263 ops/s
Iteration  12: 3428109.742 ops/s
Iteration  13: 3322573.654 ops/s
Iteration  14: 3422150.633 ops/s
Iteration  15: 3410389.255 ops/s
Iteration  16: 3328640.118 ops/s
Iteration  17: 3511226.671 ops/s
Iteration  18: 3410085.654 ops/s
Iteration  19: 3398564.509 ops/s
Iteration  20: 3365009.573 ops/s
Iteration  21: 3472754.653 ops/s
Iteration  22: 3388669.850 ops/s
Iteration  23: 3440964.582 ops/s
Iteration  24: 3292509.970 ops/s
Iteration  25: 3363078.161 ops/s
Iteration  26: 3352991.074 ops/s
Iteration  27: 3361752.827 ops/s
Iteration  28: 3481111.239 ops/s
Iteration  29: 3294533.724 ops/s
Iteration  30: 3383494.869 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableStartWithTest._Benchmark.benchmark_emptyCompletableComplete":
  3364610.195 ±(99.9%) 77063.419 ops/s [Average]
  (min, avg, max) = (2866465.047, 3364610.195, 3511226.671), stdev = 115344.907
  CI (99.9%): [3287546.776, 3441673.614] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
FlowableStartWithTest._Benchmark.benchmark_emptyCompletableComplete  thrpt   30  3364610.195 ± 77063.419  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.completable.CompletableRetryTest._Benchmark.benchmark_untilTrueEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.completable.CompletableRetryTest._Benchmark.benchmark_untilTrueEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1106361.790 ops/s
# Warmup Iteration   2: 3028025.366 ops/s
# Warmup Iteration   3: 3738119.199 ops/s
# Warmup Iteration   4: 4071434.711 ops/s
# Warmup Iteration   5: 4267905.555 ops/s
# Warmup Iteration   6: 4041385.922 ops/s
# Warmup Iteration   7: 4162584.583 ops/s
# Warmup Iteration   8: 4200549.701 ops/s
# Warmup Iteration   9: 3994672.501 ops/s
# Warmup Iteration  10: 4227915.484 ops/s
# Warmup Iteration  11: 4198307.161 ops/s
# Warmup Iteration  12: 4058901.303 ops/s
# Warmup Iteration  13: 4144927.522 ops/s
# Warmup Iteration  14: 4103879.513 ops/s
# Warmup Iteration  15: 4178207.285 ops/s
# Warmup Iteration  16: 4059183.563 ops/s
# Warmup Iteration  17: 4238004.369 ops/s
# Warmup Iteration  18: 4145502.451 ops/s
# Warmup Iteration  19: 4247032.103 ops/s
# Warmup Iteration  20: 4142365.367 ops/s
# Warmup Iteration  21: 4063360.906 ops/s
# Warmup Iteration  22: 4243091.768 ops/s
# Warmup Iteration  23: 4093903.211 ops/s
# Warmup Iteration  24: 4127901.111 ops/s
# Warmup Iteration  25: 4123936.032 ops/s
# Warmup Iteration  26: 4259270.095 ops/s
# Warmup Iteration  27: 4288929.424 ops/s
# Warmup Iteration  28: 4075526.842 ops/s
# Warmup Iteration  29: 4267812.608 ops/s
# Warmup Iteration  30: 4163344.581 ops/s
Iteration   1: 4023172.161 ops/s
Iteration   2: 4186604.002 ops/s
Iteration   3: 4077626.176 ops/s
Iteration   4: 4095705.703 ops/s
Iteration   5: 4165084.076 ops/s
Iteration   6: 4022921.048 ops/s
Iteration   7: 4218944.338 ops/s
Iteration   8: 4125098.828 ops/s
Iteration   9: 4174544.606 ops/s
Iteration  10: 4280114.719 ops/s
Iteration  11: 4045441.046 ops/s
Iteration  12: 4145645.323 ops/s
Iteration  13: 4250654.273 ops/s
Iteration  14: 4056744.930 ops/s
Iteration  15: 4299574.023 ops/s
Iteration  16: 3977892.476 ops/s
Iteration  17: 4266768.317 ops/s
Iteration  18: 4044846.447 ops/s
Iteration  19: 4107169.424 ops/s
Iteration  20: 4212464.147 ops/s
Iteration  21: 4034070.380 ops/s
Iteration  22: 4328119.143 ops/s
Iteration  23: 4036849.402 ops/s
Iteration  24: 4257440.143 ops/s
Iteration  25: 4066648.942 ops/s
Iteration  26: 4243893.044 ops/s
Iteration  27: 4110495.507 ops/s
Iteration  28: 4076332.780 ops/s
Iteration  29: 4255304.291 ops/s
Iteration  30: 4008615.714 ops/s


Result "io.reactivex.rxjava3.completable.CompletableRetryTest._Benchmark.benchmark_untilTrueEmpty":
  4139826.180 ±(99.9%) 67650.483 ops/s [Average]
  (min, avg, max) = (3977892.476, 4139826.180, 4328119.143), stdev = 101256.065
  CI (99.9%): [4072175.698, 4207476.663] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
CompletableRetryTest._Benchmark.benchmark_untilTrueEmpty  thrpt   30  4139826.180 ± 67650.483  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.completable.CompletableRetryTest._Benchmark.benchmark_untilFalseEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.completable.CompletableRetryTest._Benchmark.benchmark_untilFalseEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 869151.641 ops/s
# Warmup Iteration   2: 3222172.680 ops/s
# Warmup Iteration   3: 3644979.739 ops/s
# Warmup Iteration   4: 4163929.326 ops/s
# Warmup Iteration   5: 4348661.914 ops/s
# Warmup Iteration   6: 4105378.792 ops/s
# Warmup Iteration   7: 4120454.755 ops/s
# Warmup Iteration   8: 4394576.616 ops/s
# Warmup Iteration   9: 4066493.247 ops/s
# Warmup Iteration  10: 4260198.903 ops/s
# Warmup Iteration  11: 4191130.316 ops/s
# Warmup Iteration  12: 4342547.847 ops/s
# Warmup Iteration  13: 4055148.211 ops/s
# Warmup Iteration  14: 4395308.835 ops/s
# Warmup Iteration  15: 4178237.472 ops/s
# Warmup Iteration  16: 4202724.246 ops/s
# Warmup Iteration  17: 4308459.179 ops/s
# Warmup Iteration  18: 4119337.711 ops/s
# Warmup Iteration  19: 4368987.396 ops/s
# Warmup Iteration  20: 4362420.974 ops/s
# Warmup Iteration  21: 4166018.423 ops/s
# Warmup Iteration  22: 4245750.131 ops/s
# Warmup Iteration  23: 4112117.613 ops/s
# Warmup Iteration  24: 4139465.204 ops/s
# Warmup Iteration  25: 4294897.192 ops/s
# Warmup Iteration  26: 4049328.829 ops/s
# Warmup Iteration  27: 4307285.760 ops/s
# Warmup Iteration  28: 4149046.547 ops/s
# Warmup Iteration  29: 4175824.273 ops/s
# Warmup Iteration  30: 4177341.626 ops/s
Iteration   1: 4129660.327 ops/s
Iteration   2: 4206259.246 ops/s
Iteration   3: 4184966.615 ops/s
Iteration   4: 3333998.031 ops/s
Iteration   5: 4204014.382 ops/s
Iteration   6: 4108598.073 ops/s
Iteration   7: 4234712.264 ops/s
Iteration   8: 4152139.748 ops/s
Iteration   9: 4159039.384 ops/s
Iteration  10: 4153634.591 ops/s
Iteration  11: 4185603.066 ops/s
Iteration  12: 4157920.595 ops/s
Iteration  13: 4214574.463 ops/s
Iteration  14: 4292506.590 ops/s
Iteration  15: 4296368.815 ops/s
Iteration  16: 3966194.617 ops/s
Iteration  17: 4241940.133 ops/s
Iteration  18: 4312132.145 ops/s
Iteration  19: 4027418.809 ops/s
Iteration  20: 4344793.876 ops/s
Iteration  21: 4073604.402 ops/s
Iteration  22: 4288144.880 ops/s
Iteration  23: 4192311.682 ops/s
Iteration  24: 4339095.439 ops/s
Iteration  25: 4141351.524 ops/s
Iteration  26: 4174523.249 ops/s
Iteration  27: 4208120.299 ops/s
Iteration  28: 4040408.600 ops/s
Iteration  29: 4153669.335 ops/s
Iteration  30: 4231701.629 ops/s


Result "io.reactivex.rxjava3.completable.CompletableRetryTest._Benchmark.benchmark_untilFalseEmpty":
  4158313.560 ±(99.9%) 119929.806 ops/s [Average]
  (min, avg, max) = (3333998.031, 4158313.560, 4344793.876), stdev = 179505.302
  CI (99.9%): [4038383.754, 4278243.367] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score        Error  Units
CompletableRetryTest._Benchmark.benchmark_untilFalseEmpty  thrpt   30  4158313.560 ± 119929.806  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableStartWithTest._Benchmark.benchmark_singleNormal$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableStartWithTest._Benchmark.benchmark_singleNormal

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 448373.792 ops/s
# Warmup Iteration   2: 2024260.805 ops/s
# Warmup Iteration   3: 2604855.499 ops/s
# Warmup Iteration   4: 2527837.359 ops/s
# Warmup Iteration   5: 2587018.213 ops/s
# Warmup Iteration   6: 2288849.500 ops/s
# Warmup Iteration   7: 2519265.276 ops/s
# Warmup Iteration   8: 2401913.036 ops/s
# Warmup Iteration   9: 2593934.217 ops/s
# Warmup Iteration  10: 2668322.316 ops/s
# Warmup Iteration  11: 2548842.455 ops/s
# Warmup Iteration  12: 2576946.929 ops/s
# Warmup Iteration  13: 2721309.435 ops/s
# Warmup Iteration  14: 2625480.125 ops/s
# Warmup Iteration  15: 2713293.513 ops/s
# Warmup Iteration  16: 2652522.278 ops/s
# Warmup Iteration  17: 2583097.755 ops/s
# Warmup Iteration  18: 2680227.923 ops/s
# Warmup Iteration  19: 2609055.341 ops/s
# Warmup Iteration  20: 2728061.283 ops/s
# Warmup Iteration  21: 2660819.759 ops/s
# Warmup Iteration  22: 2584525.057 ops/s
# Warmup Iteration  23: 2726157.361 ops/s
# Warmup Iteration  24: 2628148.073 ops/s
# Warmup Iteration  25: 2577708.412 ops/s
# Warmup Iteration  26: 2644960.190 ops/s
# Warmup Iteration  27: 2586936.308 ops/s
# Warmup Iteration  28: 2693145.075 ops/s
# Warmup Iteration  29: 2648778.112 ops/s
# Warmup Iteration  30: 2541621.462 ops/s
Iteration   1: 2729362.733 ops/s
Iteration   2: 2555283.710 ops/s
Iteration   3: 2589062.712 ops/s
Iteration   4: 2684149.991 ops/s
Iteration   5: 2496081.751 ops/s
Iteration   6: 2680591.919 ops/s
Iteration   7: 2571542.272 ops/s
Iteration   8: 2639902.363 ops/s
Iteration   9: 2672439.135 ops/s
Iteration  10: 2543405.796 ops/s
Iteration  11: 2677678.080 ops/s
Iteration  12: 2546083.965 ops/s
Iteration  13: 2635445.373 ops/s
Iteration  14: 2731799.143 ops/s
Iteration  15: 2599378.833 ops/s
Iteration  16: 2602111.808 ops/s
Iteration  17: 2602050.798 ops/s
Iteration  18: 2732373.144 ops/s
Iteration  19: 2557381.464 ops/s
Iteration  20: 2730778.989 ops/s
Iteration  21: 2577919.855 ops/s
Iteration  22: 2697018.937 ops/s
Iteration  23: 2610746.875 ops/s
Iteration  24: 2659840.870 ops/s
Iteration  25: 2600218.613 ops/s
Iteration  26: 2613380.690 ops/s
Iteration  27: 2612723.197 ops/s
Iteration  28: 2544975.400 ops/s
Iteration  29: 2674938.366 ops/s
Iteration  30: 2577176.433 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableStartWithTest._Benchmark.benchmark_singleNormal":
  2624861.441 ±(99.9%) 43451.288 ops/s [Average]
  (min, avg, max) = (2496081.751, 2624861.441, 2732373.144), stdev = 65035.848
  CI (99.9%): [2581410.152, 2668312.729] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
CompletableStartWithTest._Benchmark.benchmark_singleNormal  thrpt   30  2624861.441 ± 43451.288  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleStartWithTest._Benchmark.benchmark_justCompletableComplete$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleStartWithTest._Benchmark.benchmark_justCompletableComplete

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 377447.340 ops/s
# Warmup Iteration   2: 1894811.428 ops/s
# Warmup Iteration   3: 2683536.356 ops/s
# Warmup Iteration   4: 2546789.768 ops/s
# Warmup Iteration   5: 2640361.627 ops/s
# Warmup Iteration   6: 2511596.958 ops/s
# Warmup Iteration   7: 2571376.612 ops/s
# Warmup Iteration   8: 2294526.295 ops/s
# Warmup Iteration   9: 2675372.567 ops/s
# Warmup Iteration  10: 2580969.728 ops/s
# Warmup Iteration  11: 2630455.578 ops/s
# Warmup Iteration  12: 2541611.543 ops/s
# Warmup Iteration  13: 2602738.138 ops/s
# Warmup Iteration  14: 2630026.452 ops/s
# Warmup Iteration  15: 2573668.258 ops/s
# Warmup Iteration  16: 2675393.084 ops/s
# Warmup Iteration  17: 2606415.093 ops/s
# Warmup Iteration  18: 2561858.441 ops/s
# Warmup Iteration  19: 2666388.636 ops/s
# Warmup Iteration  20: 2582263.774 ops/s
# Warmup Iteration  21: 2677306.500 ops/s
# Warmup Iteration  22: 2566274.702 ops/s
# Warmup Iteration  23: 2653430.016 ops/s
# Warmup Iteration  24: 2707676.022 ops/s
# Warmup Iteration  25: 2533542.518 ops/s
# Warmup Iteration  26: 2688162.045 ops/s
# Warmup Iteration  27: 2567907.204 ops/s
# Warmup Iteration  28: 2662583.965 ops/s
# Warmup Iteration  29: 2124299.436 ops/s
# Warmup Iteration  30: 2656269.854 ops/s
Iteration   1: 2550648.728 ops/s
Iteration   2: 2678693.273 ops/s
Iteration   3: 2619813.540 ops/s
Iteration   4: 2652555.317 ops/s
Iteration   5: 2641563.340 ops/s
Iteration   6: 2590537.265 ops/s
Iteration   7: 2694940.984 ops/s
Iteration   8: 2629416.105 ops/s
Iteration   9: 2595341.130 ops/s
Iteration  10: 2656271.206 ops/s
Iteration  11: 2678202.845 ops/s
Iteration  12: 2568831.545 ops/s
Iteration  13: 2680748.698 ops/s
Iteration  14: 2610605.160 ops/s
Iteration  15: 2553482.447 ops/s
Iteration  16: 2694696.950 ops/s
Iteration  17: 2588478.183 ops/s
Iteration  18: 2731545.138 ops/s
Iteration  19: 2590156.458 ops/s
Iteration  20: 2638983.762 ops/s
Iteration  21: 2615333.943 ops/s
Iteration  22: 2649495.013 ops/s
Iteration  23: 2607604.172 ops/s
Iteration  24: 2540327.009 ops/s
Iteration  25: 2686445.117 ops/s
Iteration  26: 2555919.218 ops/s
Iteration  27: 2660472.276 ops/s
Iteration  28: 2599840.292 ops/s
Iteration  29: 2673834.518 ops/s
Iteration  30: 2557651.722 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleStartWithTest._Benchmark.benchmark_justCompletableComplete":
  2626414.512 ±(99.9%) 34261.274 ops/s [Average]
  (min, avg, max) = (2540327.009, 2626414.512, 2731545.138), stdev = 51280.665
  CI (99.9%): [2592153.238, 2660675.785] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
SingleStartWithTest._Benchmark.benchmark_justCompletableComplete  thrpt   30  2626414.512 ± 34261.274  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.completable.CompletableRetryTest._Benchmark.benchmark_untilFalseError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.completable.CompletableRetryTest._Benchmark.benchmark_untilFalseError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 130334.778 ops/s
# Warmup Iteration   2: 443022.031 ops/s
# Warmup Iteration   3: 520778.789 ops/s
# Warmup Iteration   4: 488374.624 ops/s
# Warmup Iteration   5: 525664.900 ops/s
# Warmup Iteration   6: 508508.212 ops/s
# Warmup Iteration   7: 483126.995 ops/s
# Warmup Iteration   8: 492945.101 ops/s
# Warmup Iteration   9: 519840.211 ops/s
# Warmup Iteration  10: 529330.228 ops/s
# Warmup Iteration  11: 505616.439 ops/s
# Warmup Iteration  12: 503547.191 ops/s
# Warmup Iteration  13: 517490.229 ops/s
# Warmup Iteration  14: 524533.925 ops/s
# Warmup Iteration  15: 505793.141 ops/s
# Warmup Iteration  16: 533943.630 ops/s
# Warmup Iteration  17: 519904.718 ops/s
# Warmup Iteration  18: 538017.673 ops/s
# Warmup Iteration  19: 495171.029 ops/s
# Warmup Iteration  20: 552661.704 ops/s
# Warmup Iteration  21: 478464.528 ops/s
# Warmup Iteration  22: 547704.874 ops/s
# Warmup Iteration  23: 533859.076 ops/s
# Warmup Iteration  24: 528443.749 ops/s
# Warmup Iteration  25: 546967.407 ops/s
# Warmup Iteration  26: 529420.214 ops/s
# Warmup Iteration  27: 539119.740 ops/s
# Warmup Iteration  28: 534158.702 ops/s
# Warmup Iteration  29: 535822.520 ops/s
# Warmup Iteration  30: 516740.680 ops/s
Iteration   1: 554433.391 ops/s
Iteration   2: 544267.916 ops/s
Iteration   3: 522738.562 ops/s
Iteration   4: 524265.694 ops/s
Iteration   5: 539633.023 ops/s
Iteration   6: 527295.296 ops/s
Iteration   7: 548698.874 ops/s
Iteration   8: 548191.436 ops/s
Iteration   9: 522377.953 ops/s
Iteration  10: 542816.962 ops/s
Iteration  11: 510203.437 ops/s
Iteration  12: 536246.740 ops/s
Iteration  13: 518345.611 ops/s
Iteration  14: 510855.239 ops/s
Iteration  15: 544242.837 ops/s
Iteration  16: 546834.703 ops/s
Iteration  17: 528726.988 ops/s
Iteration  18: 532083.435 ops/s
Iteration  19: 544607.045 ops/s
Iteration  20: 527653.450 ops/s
Iteration  21: 550094.885 ops/s
Iteration  22: 538800.855 ops/s
Iteration  23: 539918.474 ops/s
Iteration  24: 545196.734 ops/s
Iteration  25: 511402.329 ops/s
Iteration  26: 540894.401 ops/s
Iteration  27: 542738.090 ops/s
Iteration  28: 537699.520 ops/s
Iteration  29: 516299.384 ops/s
Iteration  30: 536164.008 ops/s


Result "io.reactivex.rxjava3.completable.CompletableRetryTest._Benchmark.benchmark_untilFalseError":
  534457.576 ±(99.9%) 8469.123 ops/s [Average]
  (min, avg, max) = (510203.437, 534457.576, 554433.391), stdev = 12676.185
  CI (99.9%): [525988.453, 542926.699] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
CompletableRetryTest._Benchmark.benchmark_untilFalseError  thrpt   30  534457.576 ± 8469.123  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleStartWithTest._Benchmark.benchmark_justCompletableError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleStartWithTest._Benchmark.benchmark_justCompletableError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 149353.488 ops/s
# Warmup Iteration   2: 531303.140 ops/s
# Warmup Iteration   3: 592689.916 ops/s
# Warmup Iteration   4: 644526.284 ops/s
# Warmup Iteration   5: 569617.927 ops/s
# Warmup Iteration   6: 636944.232 ops/s
# Warmup Iteration   7: 643898.207 ops/s
# Warmup Iteration   8: 631864.687 ops/s
# Warmup Iteration   9: 670975.954 ops/s
# Warmup Iteration  10: 631541.730 ops/s
# Warmup Iteration  11: 674541.333 ops/s
# Warmup Iteration  12: 666107.694 ops/s
# Warmup Iteration  13: 630018.897 ops/s
# Warmup Iteration  14: 671543.116 ops/s
# Warmup Iteration  15: 640804.168 ops/s
# Warmup Iteration  16: 637666.501 ops/s
# Warmup Iteration  17: 665437.315 ops/s
# Warmup Iteration  18: 710627.916 ops/s
# Warmup Iteration  19: 683817.410 ops/s
# Warmup Iteration  20: 683172.834 ops/s
# Warmup Iteration  21: 673688.087 ops/s
# Warmup Iteration  22: 693010.277 ops/s
# Warmup Iteration  23: 695327.472 ops/s
# Warmup Iteration  24: 532940.017 ops/s
# Warmup Iteration  25: 719915.573 ops/s
# Warmup Iteration  26: 688330.192 ops/s
# Warmup Iteration  27: 660995.826 ops/s
# Warmup Iteration  28: 678080.062 ops/s
# Warmup Iteration  29: 683655.755 ops/s
# Warmup Iteration  30: 661671.988 ops/s
Iteration   1: 689428.433 ops/s
Iteration   2: 692415.428 ops/s
Iteration   3: 665744.061 ops/s
Iteration   4: 704436.760 ops/s
Iteration   5: 673248.832 ops/s
Iteration   6: 713142.388 ops/s
Iteration   7: 670358.054 ops/s
Iteration   8: 685388.155 ops/s
Iteration   9: 701683.119 ops/s
Iteration  10: 677317.072 ops/s
Iteration  11: 697226.179 ops/s
Iteration  12: 672375.325 ops/s
Iteration  13: 688276.021 ops/s
Iteration  14: 690853.276 ops/s
Iteration  15: 682386.819 ops/s
Iteration  16: 685082.560 ops/s
Iteration  17: 677533.968 ops/s
Iteration  18: 692457.830 ops/s
Iteration  19: 671962.238 ops/s
Iteration  20: 704583.251 ops/s
Iteration  21: 678229.724 ops/s
Iteration  22: 660317.163 ops/s
Iteration  23: 709068.825 ops/s
Iteration  24: 669287.344 ops/s
Iteration  25: 694593.824 ops/s
Iteration  26: 691751.417 ops/s
Iteration  27: 695053.748 ops/s
Iteration  28: 680631.049 ops/s
Iteration  29: 673721.757 ops/s
Iteration  30: 692587.035 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleStartWithTest._Benchmark.benchmark_justCompletableError":
  686038.055 ±(99.9%) 8965.556 ops/s [Average]
  (min, avg, max) = (660317.163, 686038.055, 713142.388), stdev = 13419.223
  CI (99.9%): [677072.499, 695003.611] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
SingleStartWithTest._Benchmark.benchmark_justCompletableError  thrpt   30  686038.055 ± 8965.556  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.completable.CompletableRetryTest._Benchmark.benchmark_untilTrueError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.completable.CompletableRetryTest._Benchmark.benchmark_untilTrueError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 154794.092 ops/s
# Warmup Iteration   2: 533413.538 ops/s
# Warmup Iteration   3: 560931.024 ops/s
# Warmup Iteration   4: 640689.742 ops/s
# Warmup Iteration   5: 613183.933 ops/s
# Warmup Iteration   6: 641803.745 ops/s
# Warmup Iteration   7: 673195.820 ops/s
# Warmup Iteration   8: 660214.011 ops/s
# Warmup Iteration   9: 665256.700 ops/s
# Warmup Iteration  10: 692667.771 ops/s
# Warmup Iteration  11: 643295.690 ops/s
# Warmup Iteration  12: 628844.534 ops/s
# Warmup Iteration  13: 667179.775 ops/s
# Warmup Iteration  14: 662260.748 ops/s
# Warmup Iteration  15: 680518.780 ops/s
# Warmup Iteration  16: 674349.380 ops/s
# Warmup Iteration  17: 677638.691 ops/s
# Warmup Iteration  18: 699435.869 ops/s
# Warmup Iteration  19: 700287.174 ops/s
# Warmup Iteration  20: 673107.447 ops/s
# Warmup Iteration  21: 691233.615 ops/s
# Warmup Iteration  22: 698488.643 ops/s
# Warmup Iteration  23: 683500.929 ops/s
# Warmup Iteration  24: 700497.117 ops/s
# Warmup Iteration  25: 686799.134 ops/s
# Warmup Iteration  26: 700129.514 ops/s
# Warmup Iteration  27: 706314.398 ops/s
# Warmup Iteration  28: 676527.073 ops/s
# Warmup Iteration  29: 709155.717 ops/s
# Warmup Iteration  30: 685014.189 ops/s
Iteration   1: 721115.999 ops/s
Iteration   2: 676586.329 ops/s
Iteration   3: 692701.279 ops/s
Iteration   4: 711893.205 ops/s
Iteration   5: 681253.621 ops/s
Iteration   6: 695893.253 ops/s
Iteration   7: 693135.237 ops/s
Iteration   8: 687365.548 ops/s
Iteration   9: 672287.934 ops/s
Iteration  10: 706162.140 ops/s
Iteration  11: 692059.480 ops/s
Iteration  12: 667797.761 ops/s
Iteration  13: 700765.156 ops/s
Iteration  14: 715588.388 ops/s
Iteration  15: 698171.173 ops/s
Iteration  16: 657075.688 ops/s
Iteration  17: 723297.555 ops/s
Iteration  18: 720329.217 ops/s
Iteration  19: 701303.290 ops/s
Iteration  20: 713340.338 ops/s
Iteration  21: 677841.075 ops/s
Iteration  22: 703316.926 ops/s
Iteration  23: 691853.794 ops/s
Iteration  24: 691911.442 ops/s
Iteration  25: 717012.485 ops/s
Iteration  26: 694446.178 ops/s
Iteration  27: 709211.109 ops/s
Iteration  28: 690670.397 ops/s
Iteration  29: 673762.918 ops/s
Iteration  30: 705092.047 ops/s


Result "io.reactivex.rxjava3.completable.CompletableRetryTest._Benchmark.benchmark_untilTrueError":
  696108.032 ±(99.9%) 11289.827 ops/s [Average]
  (min, avg, max) = (657075.688, 696108.032, 723297.555), stdev = 16898.083
  CI (99.9%): [684818.205, 707397.859] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score       Error  Units
CompletableRetryTest._Benchmark.benchmark_untilTrueError  thrpt   30  696108.032 ± 11289.827  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.completable.CompletableRetryTest._Benchmark.benchmark_retryTimesPredicateWithMatchingRetryAmount$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.completable.CompletableRetryTest._Benchmark.benchmark_retryTimesPredicateWithMatchingRetryAmount

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 92118.606 ops/s
# Warmup Iteration   2: 218354.926 ops/s
# Warmup Iteration   3: 255690.487 ops/s
# Warmup Iteration   4: 243633.939 ops/s
# Warmup Iteration   5: 243568.382 ops/s
# Warmup Iteration   6: 247093.990 ops/s
# Warmup Iteration   7: 234369.603 ops/s
# Warmup Iteration   8: 258039.451 ops/s
# Warmup Iteration   9: 239331.546 ops/s
# Warmup Iteration  10: 258393.535 ops/s
# Warmup Iteration  11: 240002.834 ops/s
# Warmup Iteration  12: 236050.305 ops/s
# Warmup Iteration  13: 262466.332 ops/s
# Warmup Iteration  14: 247980.382 ops/s
# Warmup Iteration  15: 254734.761 ops/s
# Warmup Iteration  16: 258890.933 ops/s
# Warmup Iteration  17: 255134.735 ops/s
# Warmup Iteration  18: 264456.996 ops/s
# Warmup Iteration  19: 212870.892 ops/s
# Warmup Iteration  20: 271190.170 ops/s
# Warmup Iteration  21: 250761.984 ops/s
# Warmup Iteration  22: 265354.594 ops/s
# Warmup Iteration  23: 256842.480 ops/s
# Warmup Iteration  24: 266658.519 ops/s
# Warmup Iteration  25: 261715.240 ops/s
# Warmup Iteration  26: 263731.236 ops/s
# Warmup Iteration  27: 262810.295 ops/s
# Warmup Iteration  28: 254638.896 ops/s
# Warmup Iteration  29: 268806.651 ops/s
# Warmup Iteration  30: 263311.933 ops/s
Iteration   1: 275803.462 ops/s
Iteration   2: 263312.147 ops/s
Iteration   3: 259518.109 ops/s
Iteration   4: 270500.670 ops/s
Iteration   5: 259034.146 ops/s
Iteration   6: 266132.477 ops/s
Iteration   7: 270216.021 ops/s
Iteration   8: 253513.762 ops/s
Iteration   9: 271614.521 ops/s
Iteration  10: 257338.393 ops/s
Iteration  11: 273267.208 ops/s
Iteration  12: 252376.111 ops/s
Iteration  13: 265067.226 ops/s
Iteration  14: 257266.508 ops/s
Iteration  15: 258127.550 ops/s
Iteration  16: 269452.077 ops/s
Iteration  17: 260820.180 ops/s
Iteration  18: 264782.657 ops/s
Iteration  19: 258286.075 ops/s
Iteration  20: 270193.004 ops/s
Iteration  21: 272659.772 ops/s
Iteration  22: 257396.390 ops/s
Iteration  23: 263751.235 ops/s
Iteration  24: 260538.118 ops/s
Iteration  25: 270685.003 ops/s
Iteration  26: 258559.856 ops/s
Iteration  27: 268691.874 ops/s
Iteration  28: 270551.083 ops/s
Iteration  29: 257342.076 ops/s
Iteration  30: 264453.833 ops/s


Result "io.reactivex.rxjava3.completable.CompletableRetryTest._Benchmark.benchmark_retryTimesPredicateWithMatchingRetryAmount":
  264041.718 ±(99.9%) 4315.731 ops/s [Average]
  (min, avg, max) = (252376.111, 264041.718, 275803.462), stdev = 6459.583
  CI (99.9%): [259725.987, 268357.449] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              Mode  Cnt       Score      Error  Units
CompletableRetryTest._Benchmark.benchmark_retryTimesPredicateWithMatchingRetryAmount  thrpt   30  264041.718 ± 4315.731  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.completable.CompletableRetryTest._Benchmark.benchmark_retryTimesPredicateWithZeroRetries$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.completable.CompletableRetryTest._Benchmark.benchmark_retryTimesPredicateWithZeroRetries

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 72151.191 ops/s
# Warmup Iteration   2: 444374.499 ops/s
# Warmup Iteration   3: 451440.680 ops/s
# Warmup Iteration   4: 498387.718 ops/s
# Warmup Iteration   5: 503254.713 ops/s
# Warmup Iteration   6: 498198.496 ops/s
# Warmup Iteration   7: 482516.548 ops/s
# Warmup Iteration   8: 491220.940 ops/s
# Warmup Iteration   9: 506407.796 ops/s
# Warmup Iteration  10: 462059.599 ops/s
# Warmup Iteration  11: 490271.092 ops/s
# Warmup Iteration  12: 480613.163 ops/s
# Warmup Iteration  13: 496919.396 ops/s
# Warmup Iteration  14: 497321.525 ops/s
# Warmup Iteration  15: 498547.623 ops/s
# Warmup Iteration  16: 498921.125 ops/s
# Warmup Iteration  17: 510482.627 ops/s
# Warmup Iteration  18: 516557.518 ops/s
# Warmup Iteration  19: 533889.157 ops/s
# Warmup Iteration  20: 494197.769 ops/s
# Warmup Iteration  21: 521366.760 ops/s
# Warmup Iteration  22: 511614.342 ops/s
# Warmup Iteration  23: 492874.723 ops/s
# Warmup Iteration  24: 523574.945 ops/s
# Warmup Iteration  25: 514132.887 ops/s
# Warmup Iteration  26: 511825.625 ops/s
# Warmup Iteration  27: 519010.785 ops/s
# Warmup Iteration  28: 520091.810 ops/s
# Warmup Iteration  29: 523783.244 ops/s
# Warmup Iteration  30: 531819.504 ops/s
Iteration   1: 514886.764 ops/s
Iteration   2: 501010.106 ops/s
Iteration   3: 511770.080 ops/s
Iteration   4: 513642.555 ops/s
Iteration   5: 519214.953 ops/s
Iteration   6: 512549.981 ops/s
Iteration   7: 533694.938 ops/s
Iteration   8: 499742.944 ops/s
Iteration   9: 515448.094 ops/s
Iteration  10: 524374.450 ops/s
Iteration  11: 512105.592 ops/s
Iteration  12: 512986.219 ops/s
Iteration  13: 525078.572 ops/s
Iteration  14: 513178.247 ops/s
Iteration  15: 523221.599 ops/s
Iteration  16: 515937.528 ops/s
Iteration  17: 515151.269 ops/s
Iteration  18: 542136.300 ops/s
Iteration  19: 510539.178 ops/s
Iteration  20: 532187.211 ops/s
Iteration  21: 517759.930 ops/s
Iteration  22: 529873.635 ops/s
Iteration  23: 506471.843 ops/s
Iteration  24: 528542.204 ops/s
Iteration  25: 523889.126 ops/s
Iteration  26: 501880.339 ops/s
Iteration  27: 542862.658 ops/s
Iteration  28: 524064.401 ops/s
Iteration  29: 530734.021 ops/s
Iteration  30: 503847.698 ops/s


Result "io.reactivex.rxjava3.completable.CompletableRetryTest._Benchmark.benchmark_retryTimesPredicateWithZeroRetries":
  518626.081 ±(99.9%) 7558.541 ops/s [Average]
  (min, avg, max) = (499742.944, 518626.081, 542862.658), stdev = 11313.270
  CI (99.9%): [511067.540, 526184.623] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt       Score      Error  Units
CompletableRetryTest._Benchmark.benchmark_retryTimesPredicateWithZeroRetries  thrpt   30  518626.081 ± 7558.541  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_badSource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_badSource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 18603.027 ops/s
# Warmup Iteration   2: 95462.246 ops/s
# Warmup Iteration   3: 136256.981 ops/s
# Warmup Iteration   4: 135668.232 ops/s
# Warmup Iteration   5: 135497.898 ops/s
# Warmup Iteration   6: 153465.018 ops/s
# Warmup Iteration   7: 150390.552 ops/s
# Warmup Iteration   8: 156418.355 ops/s
# Warmup Iteration   9: 151506.018 ops/s
# Warmup Iteration  10: 149948.037 ops/s
# Warmup Iteration  11: 154660.143 ops/s
# Warmup Iteration  12: 149419.963 ops/s
# Warmup Iteration  13: 149944.875 ops/s
# Warmup Iteration  14: 134362.960 ops/s
# Warmup Iteration  15: 151795.083 ops/s
# Warmup Iteration  16: 156250.649 ops/s
# Warmup Iteration  17: 163035.619 ops/s
# Warmup Iteration  18: 158344.175 ops/s
# Warmup Iteration  19: 158113.978 ops/s
# Warmup Iteration  20: 156709.029 ops/s
# Warmup Iteration  21: 158096.841 ops/s
# Warmup Iteration  22: 162681.990 ops/s
# Warmup Iteration  23: 148833.219 ops/s
# Warmup Iteration  24: 155534.311 ops/s
# Warmup Iteration  25: 161322.168 ops/s
# Warmup Iteration  26: 150200.368 ops/s
# Warmup Iteration  27: 155221.347 ops/s
# Warmup Iteration  28: 162253.127 ops/s
# Warmup Iteration  29: 153189.468 ops/s
# Warmup Iteration  30: 163647.042 ops/s
Iteration   1: 155167.268 ops/s
Iteration   2: 160221.620 ops/s
Iteration   3: 162444.883 ops/s
Iteration   4: 153164.627 ops/s
Iteration   5: 161041.643 ops/s
Iteration   6: 156021.314 ops/s
Iteration   7: 161054.405 ops/s
Iteration   8: 162994.208 ops/s
Iteration   9: 155284.504 ops/s
Iteration  10: 160165.861 ops/s
Iteration  11: 155353.615 ops/s
Iteration  12: 157385.742 ops/s
Iteration  13: 156036.902 ops/s
Iteration  14: 156811.661 ops/s
Iteration  15: 161040.335 ops/s
Iteration  16: 154701.076 ops/s
Iteration  17: 160386.846 ops/s
Iteration  18: 157859.714 ops/s
Iteration  19: 159230.669 ops/s
Iteration  20: 163987.473 ops/s
Iteration  21: 153037.016 ops/s
Iteration  22: 162602.110 ops/s
Iteration  23: 166294.355 ops/s
Iteration  24: 154251.450 ops/s
Iteration  25: 161260.362 ops/s
Iteration  26: 158690.541 ops/s
Iteration  27: 159016.465 ops/s
Iteration  28: 162704.726 ops/s
Iteration  29: 152943.697 ops/s
Iteration  30: 165299.817 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_badSource":
  158881.830 ±(99.9%) 2511.867 ops/s [Average]
  (min, avg, max) = (152943.697, 158881.830, 166294.355), stdev = 3759.645
  CI (99.9%): [156369.963, 161393.697] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt       Score      Error  Units
FlowableConcatTest._Benchmark.benchmark_badSource  thrpt   30  158881.830 ± 2511.867  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWithPredicateTest._Benchmark.benchmark_dontRetry$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWithPredicateTest._Benchmark.benchmark_dontRetry

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 195141.324 ops/s
# Warmup Iteration   2: 508236.131 ops/s
# Warmup Iteration   3: 633264.695 ops/s
# Warmup Iteration   4: 625704.139 ops/s
# Warmup Iteration   5: 644331.385 ops/s
# Warmup Iteration   6: 634685.728 ops/s
# Warmup Iteration   7: 626327.129 ops/s
# Warmup Iteration   8: 654171.069 ops/s
# Warmup Iteration   9: 628117.961 ops/s
# Warmup Iteration  10: 617558.507 ops/s
# Warmup Iteration  11: 607449.048 ops/s
# Warmup Iteration  12: 645864.206 ops/s
# Warmup Iteration  13: 617772.948 ops/s
# Warmup Iteration  14: 593454.756 ops/s
# Warmup Iteration  15: 652866.180 ops/s
# Warmup Iteration  16: 667835.918 ops/s
# Warmup Iteration  17: 685977.503 ops/s
# Warmup Iteration  18: 665739.106 ops/s
# Warmup Iteration  19: 690779.985 ops/s
# Warmup Iteration  20: 667727.650 ops/s
# Warmup Iteration  21: 693585.674 ops/s
# Warmup Iteration  22: 685384.315 ops/s
# Warmup Iteration  23: 685288.358 ops/s
# Warmup Iteration  24: 665477.797 ops/s
# Warmup Iteration  25: 668233.306 ops/s
# Warmup Iteration  26: 703173.959 ops/s
# Warmup Iteration  27: 649205.723 ops/s
# Warmup Iteration  28: 713060.400 ops/s
# Warmup Iteration  29: 709173.823 ops/s
# Warmup Iteration  30: 655028.845 ops/s
Iteration   1: 695858.176 ops/s
Iteration   2: 643018.794 ops/s
Iteration   3: 686734.882 ops/s
Iteration   4: 679087.866 ops/s
Iteration   5: 660193.628 ops/s
Iteration   6: 707939.917 ops/s
Iteration   7: 640553.809 ops/s
Iteration   8: 683796.754 ops/s
Iteration   9: 657896.530 ops/s
Iteration  10: 676339.935 ops/s
Iteration  11: 665342.995 ops/s
Iteration  12: 671732.714 ops/s
Iteration  13: 704046.492 ops/s
Iteration  14: 671343.501 ops/s
Iteration  15: 670269.161 ops/s
Iteration  16: 670333.571 ops/s
Iteration  17: 683528.879 ops/s
Iteration  18: 665745.758 ops/s
Iteration  19: 696770.822 ops/s
Iteration  20: 661319.847 ops/s
Iteration  21: 691625.452 ops/s
Iteration  22: 672152.869 ops/s
Iteration  23: 697548.419 ops/s
Iteration  24: 670070.401 ops/s
Iteration  25: 681538.975 ops/s
Iteration  26: 705924.801 ops/s
Iteration  27: 654529.191 ops/s
Iteration  28: 690504.238 ops/s
Iteration  29: 679553.502 ops/s
Iteration  30: 698225.869 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWithPredicateTest._Benchmark.benchmark_dontRetry":
  677784.258 ±(99.9%) 11836.938 ops/s [Average]
  (min, avg, max) = (640553.809, 677784.258, 707939.917), stdev = 17716.973
  CI (99.9%): [665947.320, 689621.196] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score       Error  Units
FlowableRetryWithPredicateTest._Benchmark.benchmark_dontRetry  thrpt   30  677784.258 ± 11836.938  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableRepeatWhenTest._Benchmark.benchmark_whenCounted$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableRepeatWhenTest._Benchmark.benchmark_whenCounted

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 40945.537 ops/s
# Warmup Iteration   2: 441779.596 ops/s
# Warmup Iteration   3: 720045.423 ops/s
# Warmup Iteration   4: 773921.874 ops/s
# Warmup Iteration   5: 846814.020 ops/s
# Warmup Iteration   6: 778407.703 ops/s
# Warmup Iteration   7: 832905.341 ops/s
# Warmup Iteration   8: 777135.869 ops/s
# Warmup Iteration   9: 587122.024 ops/s
# Warmup Iteration  10: 846079.825 ops/s
# Warmup Iteration  11: 837966.342 ops/s
# Warmup Iteration  12: 873308.836 ops/s
# Warmup Iteration  13: 845697.173 ops/s
# Warmup Iteration  14: 859805.080 ops/s
# Warmup Iteration  15: 857595.507 ops/s
# Warmup Iteration  16: 857602.441 ops/s
# Warmup Iteration  17: 838556.906 ops/s
# Warmup Iteration  18: 873744.776 ops/s
# Warmup Iteration  19: 822286.272 ops/s
# Warmup Iteration  20: 845412.508 ops/s
# Warmup Iteration  21: 850741.573 ops/s
# Warmup Iteration  22: 818667.152 ops/s
# Warmup Iteration  23: 875446.156 ops/s
# Warmup Iteration  24: 849437.295 ops/s
# Warmup Iteration  25: 821286.857 ops/s
# Warmup Iteration  26: 871025.220 ops/s
# Warmup Iteration  27: 839264.230 ops/s
# Warmup Iteration  28: 820514.894 ops/s
# Warmup Iteration  29: 869194.390 ops/s
# Warmup Iteration  30: 840907.444 ops/s
Iteration   1: 881874.808 ops/s
Iteration   2: 841694.744 ops/s
Iteration   3: 811596.516 ops/s
Iteration   4: 893309.772 ops/s
Iteration   5: 865533.371 ops/s
Iteration   6: 809821.564 ops/s
Iteration   7: 863159.719 ops/s
Iteration   8: 842060.701 ops/s
Iteration   9: 838256.665 ops/s
Iteration  10: 836050.357 ops/s
Iteration  11: 838222.613 ops/s
Iteration  12: 863436.924 ops/s
Iteration  13: 817633.613 ops/s
Iteration  14: 869152.397 ops/s
Iteration  15: 858976.190 ops/s
Iteration  16: 859229.920 ops/s
Iteration  17: 861231.733 ops/s
Iteration  18: 838941.603 ops/s
Iteration  19: 849013.200 ops/s
Iteration  20: 869120.618 ops/s
Iteration  21: 857943.095 ops/s
Iteration  22: 860984.978 ops/s
Iteration  23: 826869.004 ops/s
Iteration  24: 850621.511 ops/s
Iteration  25: 846238.834 ops/s
Iteration  26: 857857.641 ops/s
Iteration  27: 839607.662 ops/s
Iteration  28: 844398.251 ops/s
Iteration  29: 870069.544 ops/s
Iteration  30: 845990.396 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableRepeatWhenTest._Benchmark.benchmark_whenCounted":
  850296.598 ±(99.9%) 12848.390 ops/s [Average]
  (min, avg, max) = (809821.564, 850296.598, 893309.772), stdev = 19230.867
  CI (99.9%): [837448.208, 863144.989] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score       Error  Units
CompletableRepeatWhenTest._Benchmark.benchmark_whenCounted  thrpt   30  850296.598 ± 12848.390  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_concatWithNonCompliantSourceDoubleOnComplete$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_concatWithNonCompliantSourceDoubleOnComplete

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 691698.079 ops/s
# Warmup Iteration   2: 2480409.476 ops/s
# Warmup Iteration   3: 2645115.542 ops/s
# Warmup Iteration   4: 3016142.237 ops/s
# Warmup Iteration   5: 3168530.585 ops/s
# Warmup Iteration   6: 3111610.660 ops/s
# Warmup Iteration   7: 3021488.801 ops/s
# Warmup Iteration   8: 3169881.269 ops/s
# Warmup Iteration   9: 2961489.030 ops/s
# Warmup Iteration  10: 3102214.136 ops/s
# Warmup Iteration  11: 3039237.708 ops/s
# Warmup Iteration  12: 3121812.744 ops/s
# Warmup Iteration  13: 3043079.268 ops/s
# Warmup Iteration  14: 3087904.943 ops/s
# Warmup Iteration  15: 3150235.963 ops/s
# Warmup Iteration  16: 2968122.482 ops/s
# Warmup Iteration  17: 3078406.155 ops/s
# Warmup Iteration  18: 2984062.917 ops/s
# Warmup Iteration  19: 3208155.378 ops/s
# Warmup Iteration  20: 3054855.771 ops/s
# Warmup Iteration  21: 3172429.780 ops/s
# Warmup Iteration  22: 3086723.150 ops/s
# Warmup Iteration  23: 3028881.138 ops/s
# Warmup Iteration  24: 3075610.618 ops/s
# Warmup Iteration  25: 2993017.343 ops/s
# Warmup Iteration  26: 3122108.635 ops/s
# Warmup Iteration  27: 3257105.334 ops/s
# Warmup Iteration  28: 2948447.854 ops/s
# Warmup Iteration  29: 3175306.438 ops/s
# Warmup Iteration  30: 3159579.317 ops/s
Iteration   1: 3077805.598 ops/s
Iteration   2: 3101241.075 ops/s
Iteration   3: 3000766.917 ops/s
Iteration   4: 3064233.915 ops/s
Iteration   5: 3089469.170 ops/s
Iteration   6: 3159763.349 ops/s
Iteration   7: 2947046.027 ops/s
Iteration   8: 3149505.367 ops/s
Iteration   9: 3008335.792 ops/s
Iteration  10: 3176586.905 ops/s
Iteration  11: 3072915.748 ops/s
Iteration  12: 3177266.982 ops/s
Iteration  13: 3117180.251 ops/s
Iteration  14: 3040887.655 ops/s
Iteration  15: 3101555.483 ops/s
Iteration  16: 3142393.092 ops/s
Iteration  17: 2997140.421 ops/s
Iteration  18: 3213658.089 ops/s
Iteration  19: 3058484.469 ops/s
Iteration  20: 2986788.741 ops/s
Iteration  21: 3153360.380 ops/s
Iteration  22: 3066663.327 ops/s
Iteration  23: 3192435.467 ops/s
Iteration  24: 3198929.993 ops/s
Iteration  25: 3032690.091 ops/s
Iteration  26: 3216700.425 ops/s
Iteration  27: 2979086.940 ops/s
Iteration  28: 3220443.432 ops/s
Iteration  29: 3013470.343 ops/s
Iteration  30: 3051645.089 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_concatWithNonCompliantSourceDoubleOnComplete":
  3093615.018 ±(99.9%) 53206.130 ops/s [Average]
  (min, avg, max) = (2947046.027, 3093615.018, 3220443.432), stdev = 79636.437
  CI (99.9%): [3040408.888, 3146821.148] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              Mode  Cnt        Score       Error  Units
FlowableConcatTest._Benchmark.benchmark_concatWithNonCompliantSourceDoubleOnComplete  thrpt   30  3093615.018 ± 53206.130  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_badInnerSourceDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_badInnerSourceDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 15298.957 ops/s
# Warmup Iteration   2: 94921.526 ops/s
# Warmup Iteration   3: 107833.504 ops/s
# Warmup Iteration   4: 158555.106 ops/s
# Warmup Iteration   5: 141034.454 ops/s
# Warmup Iteration   6: 153389.093 ops/s
# Warmup Iteration   7: 156262.904 ops/s
# Warmup Iteration   8: 147274.239 ops/s
# Warmup Iteration   9: 155137.704 ops/s
# Warmup Iteration  10: 151805.165 ops/s
# Warmup Iteration  11: 148637.977 ops/s
# Warmup Iteration  12: 154989.734 ops/s
# Warmup Iteration  13: 133085.563 ops/s
# Warmup Iteration  14: 154464.186 ops/s
# Warmup Iteration  15: 157897.343 ops/s
# Warmup Iteration  16: 149067.481 ops/s
# Warmup Iteration  17: 165348.908 ops/s
# Warmup Iteration  18: 156710.762 ops/s
# Warmup Iteration  19: 163033.173 ops/s
# Warmup Iteration  20: 155000.799 ops/s
# Warmup Iteration  21: 163324.261 ops/s
# Warmup Iteration  22: 161215.385 ops/s
# Warmup Iteration  23: 153504.674 ops/s
# Warmup Iteration  24: 162095.746 ops/s
# Warmup Iteration  25: 165177.342 ops/s
# Warmup Iteration  26: 153416.441 ops/s
# Warmup Iteration  27: 161149.455 ops/s
# Warmup Iteration  28: 157224.472 ops/s
# Warmup Iteration  29: 165686.380 ops/s
# Warmup Iteration  30: 152126.025 ops/s
Iteration   1: 160269.941 ops/s
Iteration   2: 160842.375 ops/s
Iteration   3: 152826.303 ops/s
Iteration   4: 163313.371 ops/s
Iteration   5: 156699.227 ops/s
Iteration   6: 164086.070 ops/s
Iteration   7: 156221.572 ops/s
Iteration   8: 163353.699 ops/s
Iteration   9: 154430.520 ops/s
Iteration  10: 160374.264 ops/s
Iteration  11: 162174.303 ops/s
Iteration  12: 159409.716 ops/s
Iteration  13: 167022.208 ops/s
Iteration  14: 165350.223 ops/s
Iteration  15: 158902.863 ops/s
Iteration  16: 160089.519 ops/s
Iteration  17: 163446.468 ops/s
Iteration  18: 152931.047 ops/s
Iteration  19: 156984.735 ops/s
Iteration  20: 166178.295 ops/s
Iteration  21: 153794.093 ops/s
Iteration  22: 164627.171 ops/s
Iteration  23: 155722.808 ops/s
Iteration  24: 159975.989 ops/s
Iteration  25: 161832.280 ops/s
Iteration  26: 159352.577 ops/s
Iteration  27: 159142.175 ops/s
Iteration  28: 157110.381 ops/s
Iteration  29: 156692.924 ops/s
Iteration  30: 164527.027 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_badInnerSourceDelayError":
  159922.805 ±(99.9%) 2670.047 ops/s [Average]
  (min, avg, max) = (152826.303, 159922.805, 167022.208), stdev = 3996.401
  CI (99.9%): [157252.758, 162592.852] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
FlowableConcatTest._Benchmark.benchmark_badInnerSourceDelayError  thrpt   30  159922.805 ± 2670.047  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletableTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletableTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 70608.881 ops/s
# Warmup Iteration   2: 419513.005 ops/s
# Warmup Iteration   3: 461451.048 ops/s
# Warmup Iteration   4: 485419.665 ops/s
# Warmup Iteration   5: 496176.164 ops/s
# Warmup Iteration   6: 487340.486 ops/s
# Warmup Iteration   7: 476408.978 ops/s
# Warmup Iteration   8: 487453.773 ops/s
# Warmup Iteration   9: 493083.218 ops/s
# Warmup Iteration  10: 471009.336 ops/s
# Warmup Iteration  11: 486706.523 ops/s
# Warmup Iteration  12: 481374.729 ops/s
# Warmup Iteration  13: 478739.646 ops/s
# Warmup Iteration  14: 503997.869 ops/s
# Warmup Iteration  15: 493712.912 ops/s
# Warmup Iteration  16: 503434.356 ops/s
# Warmup Iteration  17: 533580.363 ops/s
# Warmup Iteration  18: 489626.527 ops/s
# Warmup Iteration  19: 519569.726 ops/s
# Warmup Iteration  20: 507190.812 ops/s
# Warmup Iteration  21: 517098.867 ops/s
# Warmup Iteration  22: 508224.532 ops/s
# Warmup Iteration  23: 510980.708 ops/s
# Warmup Iteration  24: 498650.383 ops/s
# Warmup Iteration  25: 500062.837 ops/s
# Warmup Iteration  26: 508664.748 ops/s
# Warmup Iteration  27: 497811.158 ops/s
# Warmup Iteration  28: 497875.211 ops/s
# Warmup Iteration  29: 501788.146 ops/s
# Warmup Iteration  30: 493791.771 ops/s
Iteration   1: 521360.752 ops/s
Iteration   2: 503515.744 ops/s
Iteration   3: 493858.778 ops/s
Iteration   4: 500982.396 ops/s
Iteration   5: 517644.008 ops/s
Iteration   6: 495222.013 ops/s
Iteration   7: 522276.893 ops/s
Iteration   8: 494241.952 ops/s
Iteration   9: 501336.095 ops/s
Iteration  10: 536332.950 ops/s
Iteration  11: 496114.146 ops/s
Iteration  12: 499748.135 ops/s
Iteration  13: 510708.473 ops/s
Iteration  14: 512081.181 ops/s
Iteration  15: 520949.612 ops/s
Iteration  16: 483895.290 ops/s
Iteration  17: 502774.223 ops/s
Iteration  18: 506339.933 ops/s
Iteration  19: 499285.431 ops/s
Iteration  20: 512111.344 ops/s
Iteration  21: 500043.398 ops/s
Iteration  22: 516355.007 ops/s
Iteration  23: 503258.910 ops/s
Iteration  24: 522692.949 ops/s
Iteration  25: 509244.439 ops/s
Iteration  26: 494878.135 ops/s
Iteration  27: 523739.752 ops/s
Iteration  28: 522435.774 ops/s
Iteration  29: 484714.941 ops/s
Iteration  30: 409002.517 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletableTest._Benchmark.benchmark_doubleOnSubscribe":
  503904.839 ±(99.9%) 14622.008 ops/s [Average]
  (min, avg, max) = (409002.517, 503904.839, 536332.950), stdev = 21885.535
  CI (99.9%): [489282.831, 518526.847] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score       Error  Units
FlowableConcatMapCompletableTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  503904.839 ± 14622.008  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_badInnerSource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_badInnerSource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 24363.324 ops/s
# Warmup Iteration   2: 74225.215 ops/s
# Warmup Iteration   3: 134821.830 ops/s
# Warmup Iteration   4: 139213.517 ops/s
# Warmup Iteration   5: 127646.497 ops/s
# Warmup Iteration   6: 152688.364 ops/s
# Warmup Iteration   7: 150922.562 ops/s
# Warmup Iteration   8: 152875.690 ops/s
# Warmup Iteration   9: 152912.574 ops/s
# Warmup Iteration  10: 155427.883 ops/s
# Warmup Iteration  11: 147703.032 ops/s
# Warmup Iteration  12: 155864.184 ops/s
# Warmup Iteration  13: 153916.120 ops/s
# Warmup Iteration  14: 145884.942 ops/s
# Warmup Iteration  15: 155479.894 ops/s
# Warmup Iteration  16: 148439.835 ops/s
# Warmup Iteration  17: 155443.581 ops/s
# Warmup Iteration  18: 157519.011 ops/s
# Warmup Iteration  19: 156751.805 ops/s
# Warmup Iteration  20: 158720.366 ops/s
# Warmup Iteration  21: 153021.052 ops/s
# Warmup Iteration  22: 152349.408 ops/s
# Warmup Iteration  23: 163107.053 ops/s
# Warmup Iteration  24: 160175.838 ops/s
# Warmup Iteration  25: 153539.237 ops/s
# Warmup Iteration  26: 155454.361 ops/s
# Warmup Iteration  27: 156419.939 ops/s
# Warmup Iteration  28: 153963.487 ops/s
# Warmup Iteration  29: 165599.577 ops/s
# Warmup Iteration  30: 152416.406 ops/s
Iteration   1: 158004.472 ops/s
Iteration   2: 153143.249 ops/s
Iteration   3: 159891.964 ops/s
Iteration   4: 158046.722 ops/s
Iteration   5: 157682.503 ops/s
Iteration   6: 158482.324 ops/s
Iteration   7: 154321.204 ops/s
Iteration   8: 160948.740 ops/s
Iteration   9: 157672.641 ops/s
Iteration  10: 155964.634 ops/s
Iteration  11: 157886.322 ops/s
Iteration  12: 157844.565 ops/s
Iteration  13: 162515.404 ops/s
Iteration  14: 152939.972 ops/s
Iteration  15: 150340.803 ops/s
Iteration  16: 163912.769 ops/s
Iteration  17: 155330.916 ops/s
Iteration  18: 157165.395 ops/s
Iteration  19: 159979.128 ops/s
Iteration  20: 156638.192 ops/s
Iteration  21: 158383.565 ops/s
Iteration  22: 153487.325 ops/s
Iteration  23: 160414.300 ops/s
Iteration  24: 156425.181 ops/s
Iteration  25: 153684.717 ops/s
Iteration  26: 157595.630 ops/s
Iteration  27: 156690.385 ops/s
Iteration  28: 162692.734 ops/s
Iteration  29: 154284.097 ops/s
Iteration  30: 164202.309 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_badInnerSource":
  157552.405 ±(99.9%) 2236.058 ops/s [Average]
  (min, avg, max) = (150340.803, 157552.405, 164202.309), stdev = 3346.827
  CI (99.9%): [155316.347, 159788.464] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score      Error  Units
FlowableConcatMapSchedulerTest._Benchmark.benchmark_badInnerSource  thrpt   30  157552.405 ± 2236.058  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishFunctionTest._Benchmark.benchmark_canBeCancelled$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishFunctionTest._Benchmark.benchmark_canBeCancelled

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 94174.652 ops/s
# Warmup Iteration   2: 625216.586 ops/s
# Warmup Iteration   3: 1005319.691 ops/s
# Warmup Iteration   4: 1017359.230 ops/s
# Warmup Iteration   5: 1122540.317 ops/s
# Warmup Iteration   6: 1063707.547 ops/s
# Warmup Iteration   7: 1095768.278 ops/s
# Warmup Iteration   8: 1099744.871 ops/s
# Warmup Iteration   9: 1064770.301 ops/s
# Warmup Iteration  10: 1076989.915 ops/s
# Warmup Iteration  11: 1117926.944 ops/s
# Warmup Iteration  12: 1141309.435 ops/s
# Warmup Iteration  13: 1089402.887 ops/s
# Warmup Iteration  14: 1097702.164 ops/s
# Warmup Iteration  15: 1084172.913 ops/s
# Warmup Iteration  16: 1127912.512 ops/s
# Warmup Iteration  17: 1126920.100 ops/s
# Warmup Iteration  18: 1063082.891 ops/s
# Warmup Iteration  19: 1141715.652 ops/s
# Warmup Iteration  20: 1072772.176 ops/s
# Warmup Iteration  21: 1045968.230 ops/s
# Warmup Iteration  22: 1125386.474 ops/s
# Warmup Iteration  23: 1082653.791 ops/s
# Warmup Iteration  24: 1095565.806 ops/s
# Warmup Iteration  25: 1094275.677 ops/s
# Warmup Iteration  26: 1101197.373 ops/s
# Warmup Iteration  27: 1106233.620 ops/s
# Warmup Iteration  28: 1095797.953 ops/s
# Warmup Iteration  29: 1079254.468 ops/s
# Warmup Iteration  30: 1121546.331 ops/s
Iteration   1: 1106002.009 ops/s
Iteration   2: 1122772.351 ops/s
Iteration   3: 1120692.240 ops/s
Iteration   4: 1115140.116 ops/s
Iteration   5: 1132669.038 ops/s
Iteration   6: 1095218.691 ops/s
Iteration   7: 1136020.684 ops/s
Iteration   8: 1071744.395 ops/s
Iteration   9: 1149836.555 ops/s
Iteration  10: 1097868.579 ops/s
Iteration  11: 1109118.491 ops/s
Iteration  12: 1142285.647 ops/s
Iteration  13: 1074921.166 ops/s
Iteration  14: 1101304.620 ops/s
Iteration  15: 1066621.481 ops/s
Iteration  16: 1116632.413 ops/s
Iteration  17: 1121489.227 ops/s
Iteration  18: 1064579.485 ops/s
Iteration  19: 1134800.816 ops/s
Iteration  20: 1072375.341 ops/s
Iteration  21: 1125903.632 ops/s
Iteration  22: 1116730.721 ops/s
Iteration  23: 1084687.453 ops/s
Iteration  24: 1010733.698 ops/s
Iteration  25: 1069907.815 ops/s
Iteration  26: 1095827.493 ops/s
Iteration  27: 1126552.038 ops/s
Iteration  28: 1124477.849 ops/s
Iteration  29: 1066598.372 ops/s
Iteration  30: 1140735.596 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishFunctionTest._Benchmark.benchmark_canBeCancelled":
  1103808.267 ±(99.9%) 20830.596 ops/s [Average]
  (min, avg, max) = (1010733.698, 1103808.267, 1149836.555), stdev = 31178.258
  CI (99.9%): [1082977.671, 1124638.863] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
FlowablePublishFunctionTest._Benchmark.benchmark_canBeCancelled  thrpt   30  1103808.267 ± 20830.596  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChangedTest._Benchmark.benchmark_customComparatorThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChangedTest._Benchmark.benchmark_customComparatorThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.732 ops/s
# Warmup Iteration   2: 13242.549 ops/s
# Warmup Iteration   3: 58893.799 ops/s
# Warmup Iteration   4: 63279.230 ops/s
# Warmup Iteration   5: 103082.709 ops/s
# Warmup Iteration   6: 202759.973 ops/s
# Warmup Iteration   7: 250061.253 ops/s
# Warmup Iteration   8: 252613.949 ops/s
# Warmup Iteration   9: 248750.562 ops/s
# Warmup Iteration  10: 243151.717 ops/s
# Warmup Iteration  11: 248368.235 ops/s
# Warmup Iteration  12: 243335.590 ops/s
# Warmup Iteration  13: 261555.234 ops/s
# Warmup Iteration  14: 262736.172 ops/s
# Warmup Iteration  15: 264056.004 ops/s
# Warmup Iteration  16: 240184.989 ops/s
# Warmup Iteration  17: 257466.764 ops/s
# Warmup Iteration  18: 266798.671 ops/s
# Warmup Iteration  19: 258222.907 ops/s
# Warmup Iteration  20: 263197.137 ops/s
# Warmup Iteration  21: 255495.560 ops/s
# Warmup Iteration  22: 255187.040 ops/s
# Warmup Iteration  23: 263363.728 ops/s
# Warmup Iteration  24: 251549.850 ops/s
# Warmup Iteration  25: 255247.073 ops/s
# Warmup Iteration  26: 258469.741 ops/s
# Warmup Iteration  27: 257481.924 ops/s
# Warmup Iteration  28: 262641.064 ops/s
# Warmup Iteration  29: 269201.964 ops/s
# Warmup Iteration  30: 242463.483 ops/s
Iteration   1: 262353.419 ops/s
Iteration   2: 260856.912 ops/s
Iteration   3: 269887.030 ops/s
Iteration   4: 267311.282 ops/s
Iteration   5: 259261.757 ops/s
Iteration   6: 256571.851 ops/s
Iteration   7: 267245.525 ops/s
Iteration   8: 254500.442 ops/s
Iteration   9: 264192.019 ops/s
Iteration  10: 259550.878 ops/s
Iteration  11: 257373.725 ops/s
Iteration  12: 263189.425 ops/s
Iteration  13: 253332.971 ops/s
Iteration  14: 267092.434 ops/s
Iteration  15: 265137.725 ops/s
Iteration  16: 255292.971 ops/s
Iteration  17: 269322.366 ops/s
Iteration  18: 259244.047 ops/s
Iteration  19: 257640.190 ops/s
Iteration  20: 269190.417 ops/s
Iteration  21: 254742.528 ops/s
Iteration  22: 263891.208 ops/s
Iteration  23: 259232.918 ops/s
Iteration  24: 262987.035 ops/s
Iteration  25: 254160.104 ops/s
Iteration  26: 263433.497 ops/s
Iteration  27: 260121.320 ops/s
Iteration  28: 257326.612 ops/s
Iteration  29: 275794.839 ops/s
Iteration  30: 265885.100 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChangedTest._Benchmark.benchmark_customComparatorThrows":
  261870.752 ±(99.9%) 3706.731 ops/s [Average]
  (min, avg, max) = (253332.971, 261870.752, 275794.839), stdev = 5548.061
  CI (99.9%): [258164.020, 265577.483] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt       Score      Error  Units
ObservableDistinctUntilChangedTest._Benchmark.benchmark_customComparatorThrows  thrpt   30  261870.752 ± 3706.731  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableScanTest._Benchmark.benchmark_scanWithRequestOne$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableScanTest._Benchmark.benchmark_scanWithRequestOne

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1206973.839 ops/s
# Warmup Iteration   2: 3684889.758 ops/s
# Warmup Iteration   3: 5205138.458 ops/s
# Warmup Iteration   4: 5231076.929 ops/s
# Warmup Iteration   5: 5468554.209 ops/s
# Warmup Iteration   6: 5274644.757 ops/s
# Warmup Iteration   7: 5215626.959 ops/s
# Warmup Iteration   8: 5351968.628 ops/s
# Warmup Iteration   9: 5055613.998 ops/s
# Warmup Iteration  10: 5276584.172 ops/s
# Warmup Iteration  11: 5281767.144 ops/s
# Warmup Iteration  12: 5303857.793 ops/s
# Warmup Iteration  13: 5149937.537 ops/s
# Warmup Iteration  14: 5415887.740 ops/s
# Warmup Iteration  15: 5099133.596 ops/s
# Warmup Iteration  16: 5269668.508 ops/s
# Warmup Iteration  17: 5322207.939 ops/s
# Warmup Iteration  18: 5138844.929 ops/s
# Warmup Iteration  19: 5484540.127 ops/s
# Warmup Iteration  20: 5375131.764 ops/s
# Warmup Iteration  21: 5241670.790 ops/s
# Warmup Iteration  22: 5168701.821 ops/s
# Warmup Iteration  23: 5276445.893 ops/s
# Warmup Iteration  24: 5171209.445 ops/s
# Warmup Iteration  25: 5433265.295 ops/s
# Warmup Iteration  26: 5047515.625 ops/s
# Warmup Iteration  27: 5432060.462 ops/s
# Warmup Iteration  28: 5462934.317 ops/s
# Warmup Iteration  29: 5252133.660 ops/s
# Warmup Iteration  30: 5277767.539 ops/s
Iteration   1: 5234593.529 ops/s
Iteration   2: 5332586.148 ops/s
Iteration   3: 5220409.934 ops/s
Iteration   4: 5292744.558 ops/s
Iteration   5: 5439183.000 ops/s
Iteration   6: 5164974.507 ops/s
Iteration   7: 5419329.149 ops/s
Iteration   8: 5410768.746 ops/s
Iteration   9: 5068208.151 ops/s
Iteration  10: 5413424.822 ops/s
Iteration  11: 5214353.595 ops/s
Iteration  12: 5273374.255 ops/s
Iteration  13: 5289676.983 ops/s
Iteration  14: 5233013.755 ops/s
Iteration  15: 5128445.941 ops/s
Iteration  16: 5318033.332 ops/s
Iteration  17: 5197287.662 ops/s
Iteration  18: 5377987.019 ops/s
Iteration  19: 3779257.372 ops/s
Iteration  20: 5352409.983 ops/s
Iteration  21: 5224284.765 ops/s
Iteration  22: 5172433.832 ops/s
Iteration  23: 5367562.057 ops/s
Iteration  24: 5184557.732 ops/s
Iteration  25: 5502243.810 ops/s
Iteration  26: 5137236.923 ops/s
Iteration  27: 5178263.338 ops/s
Iteration  28: 5320781.972 ops/s
Iteration  29: 5267412.214 ops/s
Iteration  30: 5579981.774 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableScanTest._Benchmark.benchmark_scanWithRequestOne":
  5236494.029 ±(99.9%) 199967.506 ops/s [Average]
  (min, avg, max) = (3779257.372, 5236494.029, 5579981.774), stdev = 299301.972
  CI (99.9%): [5036526.522, 5436461.535] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score        Error  Units
ObservableScanTest._Benchmark.benchmark_scanWithRequestOne  thrpt   30  5236494.029 ± 199967.506  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhileTest._Benchmark.benchmark_errorCauseIncludesLastValue$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhileTest._Benchmark.benchmark_errorCauseIncludesLastValue

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 223461.846 ops/s
# Warmup Iteration   2: 499618.614 ops/s
# Warmup Iteration   3: 571632.901 ops/s
# Warmup Iteration   4: 542443.969 ops/s
# Warmup Iteration   5: 562006.743 ops/s
# Warmup Iteration   6: 537697.922 ops/s
# Warmup Iteration   7: 586609.153 ops/s
# Warmup Iteration   8: 599855.199 ops/s
# Warmup Iteration   9: 585921.278 ops/s
# Warmup Iteration  10: 601904.229 ops/s
# Warmup Iteration  11: 590346.318 ops/s
# Warmup Iteration  12: 580732.207 ops/s
# Warmup Iteration  13: 609092.543 ops/s
# Warmup Iteration  14: 585706.696 ops/s
# Warmup Iteration  15: 598477.281 ops/s
# Warmup Iteration  16: 590655.733 ops/s
# Warmup Iteration  17: 637567.195 ops/s
# Warmup Iteration  18: 617128.812 ops/s
# Warmup Iteration  19: 604553.802 ops/s
# Warmup Iteration  20: 659355.079 ops/s
# Warmup Iteration  21: 601828.203 ops/s
# Warmup Iteration  22: 647298.329 ops/s
# Warmup Iteration  23: 605532.626 ops/s
# Warmup Iteration  24: 613412.024 ops/s
# Warmup Iteration  25: 638558.989 ops/s
# Warmup Iteration  26: 609712.137 ops/s
# Warmup Iteration  27: 618042.434 ops/s
# Warmup Iteration  28: 630748.666 ops/s
# Warmup Iteration  29: 611763.926 ops/s
# Warmup Iteration  30: 642390.654 ops/s
Iteration   1: 614780.415 ops/s
Iteration   2: 640181.471 ops/s
Iteration   3: 637842.338 ops/s
Iteration   4: 601772.839 ops/s
Iteration   5: 646365.198 ops/s
Iteration   6: 613507.153 ops/s
Iteration   7: 626245.821 ops/s
Iteration   8: 618980.060 ops/s
Iteration   9: 626969.062 ops/s
Iteration  10: 648754.035 ops/s
Iteration  11: 615367.612 ops/s
Iteration  12: 625205.890 ops/s
Iteration  13: 615007.682 ops/s
Iteration  14: 650338.814 ops/s
Iteration  15: 621817.604 ops/s
Iteration  16: 606545.884 ops/s
Iteration  17: 622353.959 ops/s
Iteration  18: 635268.137 ops/s
Iteration  19: 629938.668 ops/s
Iteration  20: 619332.518 ops/s
Iteration  21: 607604.309 ops/s
Iteration  22: 637362.073 ops/s
Iteration  23: 617162.386 ops/s
Iteration  24: 638288.808 ops/s
Iteration  25: 622052.703 ops/s
Iteration  26: 620634.326 ops/s
Iteration  27: 627514.728 ops/s
Iteration  28: 601470.519 ops/s
Iteration  29: 634985.427 ops/s
Iteration  30: 615872.118 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhileTest._Benchmark.benchmark_errorCauseIncludesLastValue":
  624650.752 ±(99.9%) 8815.377 ops/s [Average]
  (min, avg, max) = (601470.519, 624650.752, 650338.814), stdev = 13194.442
  CI (99.9%): [615835.375, 633466.128] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score      Error  Units
ObservableTakeWhileTest._Benchmark.benchmark_errorCauseIncludesLastValue  thrpt   30  624650.752 ± 8815.377  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_scanFunctionReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_scanFunctionReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 188909.318 ops/s
# Warmup Iteration   2: 531038.543 ops/s
# Warmup Iteration   3: 568688.617 ops/s
# Warmup Iteration   4: 546067.964 ops/s
# Warmup Iteration   5: 635196.354 ops/s
# Warmup Iteration   6: 494890.750 ops/s
# Warmup Iteration   7: 586873.886 ops/s
# Warmup Iteration   8: 646113.195 ops/s
# Warmup Iteration   9: 587000.582 ops/s
# Warmup Iteration  10: 614190.436 ops/s
# Warmup Iteration  11: 613241.155 ops/s
# Warmup Iteration  12: 604057.391 ops/s
# Warmup Iteration  13: 616647.347 ops/s
# Warmup Iteration  14: 609460.377 ops/s
# Warmup Iteration  15: 609957.408 ops/s
# Warmup Iteration  16: 611618.805 ops/s
# Warmup Iteration  17: 617842.744 ops/s
# Warmup Iteration  18: 650512.561 ops/s
# Warmup Iteration  19: 614119.322 ops/s
# Warmup Iteration  20: 667703.293 ops/s
# Warmup Iteration  21: 633493.851 ops/s
# Warmup Iteration  22: 632107.876 ops/s
# Warmup Iteration  23: 643380.719 ops/s
# Warmup Iteration  24: 642759.004 ops/s
# Warmup Iteration  25: 629833.764 ops/s
# Warmup Iteration  26: 653483.241 ops/s
# Warmup Iteration  27: 636092.995 ops/s
# Warmup Iteration  28: 623756.324 ops/s
# Warmup Iteration  29: 657034.700 ops/s
# Warmup Iteration  30: 616305.362 ops/s
Iteration   1: 679224.205 ops/s
Iteration   2: 617730.187 ops/s
Iteration   3: 632367.898 ops/s
Iteration   4: 645799.405 ops/s
Iteration   5: 632481.704 ops/s
Iteration   6: 651559.733 ops/s
Iteration   7: 640311.644 ops/s
Iteration   8: 633672.971 ops/s
Iteration   9: 670898.131 ops/s
Iteration  10: 622841.386 ops/s
Iteration  11: 648885.771 ops/s
Iteration  12: 625954.371 ops/s
Iteration  13: 586264.858 ops/s
Iteration  14: 574451.424 ops/s
Iteration  15: 661461.854 ops/s
Iteration  16: 620570.864 ops/s
Iteration  17: 664568.734 ops/s
Iteration  18: 624198.471 ops/s
Iteration  19: 666543.936 ops/s
Iteration  20: 639791.179 ops/s
Iteration  21: 651507.795 ops/s
Iteration  22: 631750.927 ops/s
Iteration  23: 631223.375 ops/s
Iteration  24: 647820.330 ops/s
Iteration  25: 647464.841 ops/s
Iteration  26: 623119.056 ops/s
Iteration  27: 635397.929 ops/s
Iteration  28: 660753.648 ops/s
Iteration  29: 669905.340 ops/s
Iteration  30: 627364.634 ops/s


Result "io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_scanFunctionReturnsNull":
  638862.887 ±(99.9%) 15500.016 ops/s [Average]
  (min, avg, max) = (574451.424, 638862.887, 679224.205), stdev = 23199.696
  CI (99.9%): [623362.871, 654362.903] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score       Error  Units
ObservableNullTests._Benchmark.benchmark_scanFunctionReturnsNull  thrpt   30  638862.887 ± 15500.016  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromTest._Benchmark.benchmark_zeroOtherCombinerReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromTest._Benchmark.benchmark_zeroOtherCombinerReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 200824.525 ops/s
# Warmup Iteration   2: 463763.942 ops/s
# Warmup Iteration   3: 538368.928 ops/s
# Warmup Iteration   4: 538467.675 ops/s
# Warmup Iteration   5: 569601.146 ops/s
# Warmup Iteration   6: 545332.056 ops/s
# Warmup Iteration   7: 534910.915 ops/s
# Warmup Iteration   8: 525501.431 ops/s
# Warmup Iteration   9: 536044.593 ops/s
# Warmup Iteration  10: 549345.165 ops/s
# Warmup Iteration  11: 549149.682 ops/s
# Warmup Iteration  12: 543905.405 ops/s
# Warmup Iteration  13: 572748.103 ops/s
# Warmup Iteration  14: 573490.560 ops/s
# Warmup Iteration  15: 516873.521 ops/s
# Warmup Iteration  16: 573217.157 ops/s
# Warmup Iteration  17: 560647.473 ops/s
# Warmup Iteration  18: 572516.072 ops/s
# Warmup Iteration  19: 579068.644 ops/s
# Warmup Iteration  20: 554561.936 ops/s
# Warmup Iteration  21: 581016.723 ops/s
# Warmup Iteration  22: 550487.464 ops/s
# Warmup Iteration  23: 591877.386 ops/s
# Warmup Iteration  24: 578281.294 ops/s
# Warmup Iteration  25: 556557.138 ops/s
# Warmup Iteration  26: 572117.832 ops/s
# Warmup Iteration  27: 566959.080 ops/s
# Warmup Iteration  28: 551361.529 ops/s
# Warmup Iteration  29: 583205.595 ops/s
# Warmup Iteration  30: 558906.000 ops/s
Iteration   1: 596793.855 ops/s
Iteration   2: 548235.172 ops/s
Iteration   3: 581003.966 ops/s
Iteration   4: 569862.938 ops/s
Iteration   5: 565401.002 ops/s
Iteration   6: 573117.524 ops/s
Iteration   7: 573037.631 ops/s
Iteration   8: 581487.063 ops/s
Iteration   9: 575373.570 ops/s
Iteration  10: 554046.409 ops/s
Iteration  11: 588726.380 ops/s
Iteration  12: 590201.325 ops/s
Iteration  13: 561556.641 ops/s
Iteration  14: 591369.380 ops/s
Iteration  15: 582981.032 ops/s
Iteration  16: 577468.514 ops/s
Iteration  17: 564375.594 ops/s
Iteration  18: 586581.180 ops/s
Iteration  19: 555431.238 ops/s
Iteration  20: 585978.969 ops/s
Iteration  21: 565352.253 ops/s
Iteration  22: 580213.709 ops/s
Iteration  23: 544483.841 ops/s
Iteration  24: 583343.831 ops/s
Iteration  25: 584572.895 ops/s
Iteration  26: 548964.429 ops/s
Iteration  27: 577384.915 ops/s
Iteration  28: 575035.368 ops/s
Iteration  29: 564293.476 ops/s
Iteration  30: 583143.980 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromTest._Benchmark.benchmark_zeroOtherCombinerReturnsNull":
  573660.603 ±(99.9%) 9239.710 ops/s [Average]
  (min, avg, max) = (544483.841, 573660.603, 596793.855), stdev = 13829.563
  CI (99.9%): [564420.893, 582900.312] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt       Score      Error  Units
ObservableWithLatestFromTest._Benchmark.benchmark_zeroOtherCombinerReturnsNull  thrpt   30  573660.603 ± 9239.710  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_mapReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_mapReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 310503.619 ops/s
# Warmup Iteration   2: 552435.246 ops/s
# Warmup Iteration   3: 604975.359 ops/s
# Warmup Iteration   4: 539744.886 ops/s
# Warmup Iteration   5: 625854.800 ops/s
# Warmup Iteration   6: 519535.929 ops/s
# Warmup Iteration   7: 599778.786 ops/s
# Warmup Iteration   8: 614355.792 ops/s
# Warmup Iteration   9: 611694.673 ops/s
# Warmup Iteration  10: 606954.043 ops/s
# Warmup Iteration  11: 625281.194 ops/s
# Warmup Iteration  12: 615618.818 ops/s
# Warmup Iteration  13: 652385.546 ops/s
# Warmup Iteration  14: 595854.571 ops/s
# Warmup Iteration  15: 620092.946 ops/s
# Warmup Iteration  16: 616347.045 ops/s
# Warmup Iteration  17: 643852.201 ops/s
# Warmup Iteration  18: 651169.741 ops/s
# Warmup Iteration  19: 637004.272 ops/s
# Warmup Iteration  20: 650927.133 ops/s
# Warmup Iteration  21: 633104.991 ops/s
# Warmup Iteration  22: 642760.843 ops/s
# Warmup Iteration  23: 643095.583 ops/s
# Warmup Iteration  24: 658234.596 ops/s
# Warmup Iteration  25: 621318.439 ops/s
# Warmup Iteration  26: 663803.612 ops/s
# Warmup Iteration  27: 641292.085 ops/s
# Warmup Iteration  28: 662621.412 ops/s
# Warmup Iteration  29: 644608.098 ops/s
# Warmup Iteration  30: 635525.098 ops/s
Iteration   1: 640368.690 ops/s
Iteration   2: 649244.662 ops/s
Iteration   3: 659181.542 ops/s
Iteration   4: 628558.480 ops/s
Iteration   5: 662251.660 ops/s
Iteration   6: 630416.057 ops/s
Iteration   7: 649261.016 ops/s
Iteration   8: 568259.326 ops/s
Iteration   9: 619055.019 ops/s
Iteration  10: 654782.756 ops/s
Iteration  11: 637990.579 ops/s
Iteration  12: 650165.730 ops/s
Iteration  13: 632459.944 ops/s
Iteration  14: 656235.011 ops/s
Iteration  15: 663659.517 ops/s
Iteration  16: 629262.377 ops/s
Iteration  17: 648915.810 ops/s
Iteration  18: 631513.088 ops/s
Iteration  19: 643316.257 ops/s
Iteration  20: 645271.766 ops/s
Iteration  21: 652554.777 ops/s
Iteration  22: 634991.318 ops/s
Iteration  23: 654237.606 ops/s
Iteration  24: 646293.227 ops/s
Iteration  25: 653855.987 ops/s
Iteration  26: 627038.773 ops/s
Iteration  27: 636504.646 ops/s
Iteration  28: 675062.886 ops/s
Iteration  29: 619980.997 ops/s
Iteration  30: 671869.132 ops/s


Result "io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_mapReturnsNull":
  642418.621 ±(99.9%) 13374.845 ops/s [Average]
  (min, avg, max) = (568259.326, 642418.621, 675062.886), stdev = 20018.841
  CI (99.9%): [629043.776, 655793.467] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score       Error  Units
ObservableNullTests._Benchmark.benchmark_mapReturnsNull  thrpt   30  642418.621 ± 13374.845  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_scanSeedSupplierFunctionReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_scanSeedSupplierFunctionReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 253580.762 ops/s
# Warmup Iteration   2: 548366.128 ops/s
# Warmup Iteration   3: 596107.562 ops/s
# Warmup Iteration   4: 598811.686 ops/s
# Warmup Iteration   5: 636463.448 ops/s
# Warmup Iteration   6: 618900.782 ops/s
# Warmup Iteration   7: 602179.763 ops/s
# Warmup Iteration   8: 639628.949 ops/s
# Warmup Iteration   9: 634310.464 ops/s
# Warmup Iteration  10: 606915.172 ops/s
# Warmup Iteration  11: 569249.338 ops/s
# Warmup Iteration  12: 604298.799 ops/s
# Warmup Iteration  13: 627478.791 ops/s
# Warmup Iteration  14: 609279.945 ops/s
# Warmup Iteration  15: 611884.792 ops/s
# Warmup Iteration  16: 619556.281 ops/s
# Warmup Iteration  17: 638285.280 ops/s
# Warmup Iteration  18: 667033.423 ops/s
# Warmup Iteration  19: 626982.341 ops/s
# Warmup Iteration  20: 662479.083 ops/s
# Warmup Iteration  21: 640393.307 ops/s
# Warmup Iteration  22: 635048.010 ops/s
# Warmup Iteration  23: 670888.989 ops/s
# Warmup Iteration  24: 663342.667 ops/s
# Warmup Iteration  25: 636190.508 ops/s
# Warmup Iteration  26: 635970.624 ops/s
# Warmup Iteration  27: 648801.598 ops/s
# Warmup Iteration  28: 631929.884 ops/s
# Warmup Iteration  29: 637909.765 ops/s
# Warmup Iteration  30: 623043.528 ops/s
Iteration   1: 656906.301 ops/s
Iteration   2: 645833.173 ops/s
Iteration   3: 651459.410 ops/s
Iteration   4: 656517.422 ops/s
Iteration   5: 660639.482 ops/s
Iteration   6: 634527.348 ops/s
Iteration   7: 641604.827 ops/s
Iteration   8: 643267.529 ops/s
Iteration   9: 656341.766 ops/s
Iteration  10: 652533.046 ops/s
Iteration  11: 604250.155 ops/s
Iteration  12: 646898.320 ops/s
Iteration  13: 653323.743 ops/s
Iteration  14: 637281.643 ops/s
Iteration  15: 637680.213 ops/s
Iteration  16: 642071.474 ops/s
Iteration  17: 644345.787 ops/s
Iteration  18: 634579.133 ops/s
Iteration  19: 650094.254 ops/s
Iteration  20: 626049.322 ops/s
Iteration  21: 642547.938 ops/s
Iteration  22: 660895.210 ops/s
Iteration  23: 617138.029 ops/s
Iteration  24: 667355.973 ops/s
Iteration  25: 638500.692 ops/s
Iteration  26: 635282.035 ops/s
Iteration  27: 646947.990 ops/s
Iteration  28: 635054.867 ops/s
Iteration  29: 662789.015 ops/s
Iteration  30: 645459.115 ops/s


Result "io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_scanSeedSupplierFunctionReturnsNull":
  644272.507 ±(99.9%) 9028.002 ops/s [Average]
  (min, avg, max) = (604250.155, 644272.507, 667355.973), stdev = 13512.690
  CI (99.9%): [635244.505, 653300.509] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt       Score      Error  Units
ObservableNullTests._Benchmark.benchmark_scanSeedSupplierFunctionReturnsNull  thrpt   30  644272.507 ± 9028.002  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithSizeTest._Benchmark.benchmark_cancelWithoutWindowSize$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithSizeTest._Benchmark.benchmark_cancelWithoutWindowSize

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 633744.217 ops/s
# Warmup Iteration   2: 3376133.564 ops/s
# Warmup Iteration   3: 3856764.440 ops/s
# Warmup Iteration   4: 4743896.385 ops/s
# Warmup Iteration   5: 4790320.322 ops/s
# Warmup Iteration   6: 4442082.036 ops/s
# Warmup Iteration   7: 4723992.049 ops/s
# Warmup Iteration   8: 4429943.764 ops/s
# Warmup Iteration   9: 4753262.367 ops/s
# Warmup Iteration  10: 4575711.783 ops/s
# Warmup Iteration  11: 4544252.490 ops/s
# Warmup Iteration  12: 4744953.218 ops/s
# Warmup Iteration  13: 4691876.606 ops/s
# Warmup Iteration  14: 4821116.485 ops/s
# Warmup Iteration  15: 4484918.783 ops/s
# Warmup Iteration  16: 4751048.722 ops/s
# Warmup Iteration  17: 4657944.301 ops/s
# Warmup Iteration  18: 4597545.481 ops/s
# Warmup Iteration  19: 4720130.260 ops/s
# Warmup Iteration  20: 4719308.709 ops/s
# Warmup Iteration  21: 4672918.699 ops/s
# Warmup Iteration  22: 4724299.513 ops/s
# Warmup Iteration  23: 4531512.028 ops/s
# Warmup Iteration  24: 4501308.486 ops/s
# Warmup Iteration  25: 4544789.676 ops/s
# Warmup Iteration  26: 4815582.653 ops/s
# Warmup Iteration  27: 4587128.162 ops/s
# Warmup Iteration  28: 4537064.064 ops/s
# Warmup Iteration  29: 4748725.366 ops/s
# Warmup Iteration  30: 4661820.565 ops/s
Iteration   1: 4689186.610 ops/s
Iteration   2: 3968619.976 ops/s
Iteration   3: 4229082.139 ops/s
Iteration   4: 4742205.393 ops/s
Iteration   5: 4549934.490 ops/s
Iteration   6: 4783848.959 ops/s
Iteration   7: 4511095.000 ops/s
Iteration   8: 4711106.889 ops/s
Iteration   9: 4544308.485 ops/s
Iteration  10: 4710246.139 ops/s
Iteration  11: 4754354.693 ops/s
Iteration  12: 4530071.994 ops/s
Iteration  13: 4873407.965 ops/s
Iteration  14: 4837615.877 ops/s
Iteration  15: 4676017.795 ops/s
Iteration  16: 4600583.059 ops/s
Iteration  17: 4733768.890 ops/s
Iteration  18: 4570901.923 ops/s
Iteration  19: 4868516.755 ops/s
Iteration  20: 4583549.322 ops/s
Iteration  21: 4655034.908 ops/s
Iteration  22: 4818093.374 ops/s
Iteration  23: 4545999.325 ops/s
Iteration  24: 4875206.537 ops/s
Iteration  25: 4470869.356 ops/s
Iteration  26: 4776319.151 ops/s
Iteration  27: 4603924.987 ops/s
Iteration  28: 4735039.643 ops/s
Iteration  29: 4718895.569 ops/s
Iteration  30: 4552206.696 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithSizeTest._Benchmark.benchmark_cancelWithoutWindowSize":
  4640667.063 ±(99.9%) 127437.495 ops/s [Average]
  (min, avg, max) = (3968619.976, 4640667.063, 4875206.537), stdev = 190742.457
  CI (99.9%): [4513229.568, 4768104.558] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score        Error  Units
ObservableWindowWithSizeTest._Benchmark.benchmark_cancelWithoutWindowSize  thrpt   30  4640667.063 ± 127437.495  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDoFinallyTest._Benchmark.benchmark_fusionRejected$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDoFinallyTest._Benchmark.benchmark_fusionRejected

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2354430.788 ops/s
# Warmup Iteration   2: 6120842.605 ops/s
# Warmup Iteration   3: 8064323.505 ops/s
# Warmup Iteration   4: 8592648.160 ops/s
# Warmup Iteration   5: 8396586.894 ops/s
# Warmup Iteration   6: 8319887.374 ops/s
# Warmup Iteration   7: 7982438.915 ops/s
# Warmup Iteration   8: 8024405.799 ops/s
# Warmup Iteration   9: 8572809.505 ops/s
# Warmup Iteration  10: 8177512.834 ops/s
# Warmup Iteration  11: 8187355.325 ops/s
# Warmup Iteration  12: 8525047.281 ops/s
# Warmup Iteration  13: 8069845.271 ops/s
# Warmup Iteration  14: 8268307.432 ops/s
# Warmup Iteration  15: 8252260.357 ops/s
# Warmup Iteration  16: 8034894.288 ops/s
# Warmup Iteration  17: 8771247.854 ops/s
# Warmup Iteration  18: 8161020.733 ops/s
# Warmup Iteration  19: 8275978.127 ops/s
# Warmup Iteration  20: 8057408.228 ops/s
# Warmup Iteration  21: 8537956.432 ops/s
# Warmup Iteration  22: 8484516.526 ops/s
# Warmup Iteration  23: 8222486.044 ops/s
# Warmup Iteration  24: 8205714.994 ops/s
# Warmup Iteration  25: 8689759.443 ops/s
# Warmup Iteration  26: 8180506.054 ops/s
# Warmup Iteration  27: 8187753.815 ops/s
# Warmup Iteration  28: 8542029.313 ops/s
# Warmup Iteration  29: 8248193.119 ops/s
# Warmup Iteration  30: 8378092.812 ops/s
Iteration   1: 8369240.098 ops/s
Iteration   2: 8202154.536 ops/s
Iteration   3: 8400991.665 ops/s
Iteration   4: 8245047.773 ops/s
Iteration   5: 8455104.791 ops/s
Iteration   6: 8063093.221 ops/s
Iteration   7: 8135961.205 ops/s
Iteration   8: 8508460.755 ops/s
Iteration   9: 8342654.020 ops/s
Iteration  10: 8598350.928 ops/s
Iteration  11: 8182901.768 ops/s
Iteration  12: 8480057.006 ops/s
Iteration  13: 8561250.410 ops/s
Iteration  14: 8071515.823 ops/s
Iteration  15: 8418074.047 ops/s
Iteration  16: 8496477.331 ops/s
Iteration  17: 8270668.422 ops/s
Iteration  18: 7894916.092 ops/s
Iteration  19: 8564471.802 ops/s
Iteration  20: 8266318.824 ops/s
Iteration  21: 8379170.678 ops/s
Iteration  22: 8340819.082 ops/s
Iteration  23: 8365514.917 ops/s
Iteration  24: 8324268.383 ops/s
Iteration  25: 8362014.268 ops/s
Iteration  26: 8138814.304 ops/s
Iteration  27: 8240293.184 ops/s
Iteration  28: 8493377.442 ops/s
Iteration  29: 8226633.194 ops/s
Iteration  30: 8258532.939 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableDoFinallyTest._Benchmark.benchmark_fusionRejected":
  8321904.964 ±(99.9%) 110998.221 ops/s [Average]
  (min, avg, max) = (7894916.092, 8321904.964, 8598350.928), stdev = 166136.924
  CI (99.9%): [8210906.743, 8432903.184] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score        Error  Units
ObservableDoFinallyTest._Benchmark.benchmark_fusionRejected  thrpt   30  8321904.964 ± 110998.221  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableAmbTest._Benchmark.benchmark_observableSourcesInIterable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableAmbTest._Benchmark.benchmark_observableSourcesInIterable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 246405.573 ops/s
# Warmup Iteration   2: 1686828.417 ops/s
# Warmup Iteration   3: 2735574.490 ops/s
# Warmup Iteration   4: 3567971.984 ops/s
# Warmup Iteration   5: 3318950.498 ops/s
# Warmup Iteration   6: 3406687.706 ops/s
# Warmup Iteration   7: 3323591.897 ops/s
# Warmup Iteration   8: 3419630.453 ops/s
# Warmup Iteration   9: 3436646.971 ops/s
# Warmup Iteration  10: 3291024.243 ops/s
# Warmup Iteration  11: 3454574.483 ops/s
# Warmup Iteration  12: 3501716.417 ops/s
# Warmup Iteration  13: 3255938.851 ops/s
# Warmup Iteration  14: 3511297.090 ops/s
# Warmup Iteration  15: 3387702.962 ops/s
# Warmup Iteration  16: 3424800.084 ops/s
# Warmup Iteration  17: 3535995.191 ops/s
# Warmup Iteration  18: 3318030.272 ops/s
# Warmup Iteration  19: 3419869.218 ops/s
# Warmup Iteration  20: 3486286.776 ops/s
# Warmup Iteration  21: 3412519.782 ops/s
# Warmup Iteration  22: 3505715.203 ops/s
# Warmup Iteration  23: 3564248.982 ops/s
# Warmup Iteration  24: 3374189.761 ops/s
# Warmup Iteration  25: 3456113.654 ops/s
# Warmup Iteration  26: 3505599.803 ops/s
# Warmup Iteration  27: 2731981.428 ops/s
# Warmup Iteration  28: 3490707.803 ops/s
# Warmup Iteration  29: 3307519.829 ops/s
# Warmup Iteration  30: 3579814.417 ops/s
Iteration   1: 3510978.713 ops/s
Iteration   2: 3362588.325 ops/s
Iteration   3: 3463365.964 ops/s
Iteration   4: 3355167.653 ops/s
Iteration   5: 3519686.801 ops/s
Iteration   6: 3541791.543 ops/s
Iteration   7: 3290016.446 ops/s
Iteration   8: 3468874.601 ops/s
Iteration   9: 3437226.488 ops/s
Iteration  10: 3504315.132 ops/s
Iteration  11: 3350344.156 ops/s
Iteration  12: 3552019.733 ops/s
Iteration  13: 3533657.284 ops/s
Iteration  14: 3366923.908 ops/s
Iteration  15: 3363605.021 ops/s
Iteration  16: 3580176.452 ops/s
Iteration  17: 3319136.869 ops/s
Iteration  18: 3494525.798 ops/s
Iteration  19: 3339251.436 ops/s
Iteration  20: 3520225.961 ops/s
Iteration  21: 3433871.448 ops/s
Iteration  22: 3403044.878 ops/s
Iteration  23: 3553866.767 ops/s
Iteration  24: 3288538.418 ops/s
Iteration  25: 3590943.307 ops/s
Iteration  26: 3327128.269 ops/s
Iteration  27: 3532366.002 ops/s
Iteration  28: 3331447.219 ops/s
Iteration  29: 3402918.958 ops/s
Iteration  30: 3336962.689 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableAmbTest._Benchmark.benchmark_observableSourcesInIterable":
  3435832.208 ±(99.9%) 63495.347 ops/s [Average]
  (min, avg, max) = (3288538.418, 3435832.208, 3590943.307), stdev = 95036.854
  CI (99.9%): [3372336.860, 3499327.555] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
ObservableAmbTest._Benchmark.benchmark_observableSourcesInIterable  thrpt   30  3435832.208 ± 63495.347  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithSizeTest._Benchmark.benchmark_cancelWithoutWindowOverlap$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithSizeTest._Benchmark.benchmark_cancelWithoutWindowOverlap

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 719476.677 ops/s
# Warmup Iteration   2: 2842509.479 ops/s
# Warmup Iteration   3: 3791836.213 ops/s
# Warmup Iteration   4: 4179049.523 ops/s
# Warmup Iteration   5: 4248587.138 ops/s
# Warmup Iteration   6: 4119939.029 ops/s
# Warmup Iteration   7: 4265609.305 ops/s
# Warmup Iteration   8: 4188108.161 ops/s
# Warmup Iteration   9: 4514528.206 ops/s
# Warmup Iteration  10: 4128838.127 ops/s
# Warmup Iteration  11: 4176268.815 ops/s
# Warmup Iteration  12: 4376290.442 ops/s
# Warmup Iteration  13: 4258842.456 ops/s
# Warmup Iteration  14: 4291626.355 ops/s
# Warmup Iteration  15: 4243308.431 ops/s
# Warmup Iteration  16: 4399068.795 ops/s
# Warmup Iteration  17: 4215579.482 ops/s
# Warmup Iteration  18: 4343592.685 ops/s
# Warmup Iteration  19: 4153345.501 ops/s
# Warmup Iteration  20: 4205479.285 ops/s
# Warmup Iteration  21: 4413376.815 ops/s
# Warmup Iteration  22: 4270185.832 ops/s
# Warmup Iteration  23: 4419832.004 ops/s
# Warmup Iteration  24: 4189774.928 ops/s
# Warmup Iteration  25: 4176687.148 ops/s
# Warmup Iteration  26: 4316071.104 ops/s
# Warmup Iteration  27: 4175543.992 ops/s
# Warmup Iteration  28: 4433380.787 ops/s
# Warmup Iteration  29: 4268028.022 ops/s
# Warmup Iteration  30: 4312372.357 ops/s
Iteration   1: 4327003.185 ops/s
Iteration   2: 4091612.922 ops/s
Iteration   3: 4111626.702 ops/s
Iteration   4: 4305419.069 ops/s
Iteration   5: 4140573.985 ops/s
Iteration   6: 4443140.287 ops/s
Iteration   7: 4250309.492 ops/s
Iteration   8: 4421372.580 ops/s
Iteration   9: 4359815.272 ops/s
Iteration  10: 4217940.599 ops/s
Iteration  11: 4321548.574 ops/s
Iteration  12: 4256903.167 ops/s
Iteration  13: 4298204.895 ops/s
Iteration  14: 4266273.791 ops/s
Iteration  15: 4197015.912 ops/s
Iteration  16: 4275870.329 ops/s
Iteration  17: 4387844.002 ops/s
Iteration  18: 4166568.510 ops/s
Iteration  19: 4339226.846 ops/s
Iteration  20: 4232861.817 ops/s
Iteration  21: 4415963.721 ops/s
Iteration  22: 4359286.525 ops/s
Iteration  23: 4230413.492 ops/s
Iteration  24: 4231037.863 ops/s
Iteration  25: 4254974.503 ops/s
Iteration  26: 4138575.518 ops/s
Iteration  27: 4478666.711 ops/s
Iteration  28: 4281328.888 ops/s
Iteration  29: 4261320.710 ops/s
Iteration  30: 4277717.390 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithSizeTest._Benchmark.benchmark_cancelWithoutWindowOverlap":
  4278013.909 ±(99.9%) 64907.725 ops/s [Average]
  (min, avg, max) = (4091612.922, 4278013.909, 4478666.711), stdev = 97150.835
  CI (99.9%): [4213106.183, 4342921.634] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score       Error  Units
ObservableWindowWithSizeTest._Benchmark.benchmark_cancelWithoutWindowOverlap  thrpt   30  4278013.909 ± 64907.725  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithSizeTest._Benchmark.benchmark_cancelWithoutWindowSkip$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithSizeTest._Benchmark.benchmark_cancelWithoutWindowSkip

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 829633.227 ops/s
# Warmup Iteration   2: 3059805.060 ops/s
# Warmup Iteration   3: 3877149.844 ops/s
# Warmup Iteration   4: 4400606.021 ops/s
# Warmup Iteration   5: 4319903.359 ops/s
# Warmup Iteration   6: 4364022.276 ops/s
# Warmup Iteration   7: 4313958.798 ops/s
# Warmup Iteration   8: 4345527.854 ops/s
# Warmup Iteration   9: 4405099.621 ops/s
# Warmup Iteration  10: 4174816.485 ops/s
# Warmup Iteration  11: 4409479.335 ops/s
# Warmup Iteration  12: 4295409.194 ops/s
# Warmup Iteration  13: 4367565.471 ops/s
# Warmup Iteration  14: 4467570.504 ops/s
# Warmup Iteration  15: 4300330.984 ops/s
# Warmup Iteration  16: 4377118.438 ops/s
# Warmup Iteration  17: 4362309.583 ops/s
# Warmup Iteration  18: 4323531.269 ops/s
# Warmup Iteration  19: 4493740.285 ops/s
# Warmup Iteration  20: 4223349.335 ops/s
# Warmup Iteration  21: 4608635.146 ops/s
# Warmup Iteration  22: 3463968.131 ops/s
# Warmup Iteration  23: 4475357.245 ops/s
# Warmup Iteration  24: 4234080.856 ops/s
# Warmup Iteration  25: 4432301.790 ops/s
# Warmup Iteration  26: 4424639.259 ops/s
# Warmup Iteration  27: 4482084.287 ops/s
# Warmup Iteration  28: 4378415.137 ops/s
# Warmup Iteration  29: 4505183.285 ops/s
# Warmup Iteration  30: 4414704.623 ops/s
Iteration   1: 4336274.059 ops/s
Iteration   2: 4264444.818 ops/s
Iteration   3: 4362554.413 ops/s
Iteration   4: 4451736.372 ops/s
Iteration   5: 4487796.651 ops/s
Iteration   6: 4230051.592 ops/s
Iteration   7: 4504732.664 ops/s
Iteration   8: 4360401.442 ops/s
Iteration   9: 4249142.612 ops/s
Iteration  10: 4409141.021 ops/s
Iteration  11: 4356776.152 ops/s
Iteration  12: 4447844.941 ops/s
Iteration  13: 4347930.488 ops/s
Iteration  14: 4285680.157 ops/s
Iteration  15: 4390998.948 ops/s
Iteration  16: 4496703.451 ops/s
Iteration  17: 4305844.054 ops/s
Iteration  18: 4359345.660 ops/s
Iteration  19: 4277628.011 ops/s
Iteration  20: 4537612.072 ops/s
Iteration  21: 4293465.852 ops/s
Iteration  22: 4208893.540 ops/s
Iteration  23: 4418275.326 ops/s
Iteration  24: 4323893.361 ops/s
Iteration  25: 4463760.219 ops/s
Iteration  26: 4350757.289 ops/s
Iteration  27: 4277274.081 ops/s
Iteration  28: 4603377.542 ops/s
Iteration  29: 4177704.130 ops/s
Iteration  30: 4521062.523 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithSizeTest._Benchmark.benchmark_cancelWithoutWindowSkip":
  4370036.781 ±(99.9%) 70873.202 ops/s [Average]
  (min, avg, max) = (4177704.130, 4370036.781, 4603377.542), stdev = 106079.680
  CI (99.9%): [4299163.579, 4440909.983] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score       Error  Units
ObservableWindowWithSizeTest._Benchmark.benchmark_cancelWithoutWindowSkip  thrpt   30  4370036.781 ± 70873.202  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithSizeTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithSizeTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 201463.396 ops/s
# Warmup Iteration   2: 807208.538 ops/s
# Warmup Iteration   3: 1735926.044 ops/s
# Warmup Iteration   4: 1833982.223 ops/s
# Warmup Iteration   5: 1883517.406 ops/s
# Warmup Iteration   6: 1732656.020 ops/s
# Warmup Iteration   7: 1733070.618 ops/s
# Warmup Iteration   8: 1906449.065 ops/s
# Warmup Iteration   9: 1870719.966 ops/s
# Warmup Iteration  10: 1936906.942 ops/s
# Warmup Iteration  11: 1958061.015 ops/s
# Warmup Iteration  12: 1786753.106 ops/s
# Warmup Iteration  13: 1884417.752 ops/s
# Warmup Iteration  14: 1862457.311 ops/s
# Warmup Iteration  15: 1974753.027 ops/s
# Warmup Iteration  16: 1885339.716 ops/s
# Warmup Iteration  17: 1893013.141 ops/s
# Warmup Iteration  18: 1944181.695 ops/s
# Warmup Iteration  19: 1824697.789 ops/s
# Warmup Iteration  20: 1954649.156 ops/s
# Warmup Iteration  21: 1845827.280 ops/s
# Warmup Iteration  22: 1861946.926 ops/s
# Warmup Iteration  23: 2002883.210 ops/s
# Warmup Iteration  24: 1809660.070 ops/s
# Warmup Iteration  25: 1867887.414 ops/s
# Warmup Iteration  26: 1920255.190 ops/s
# Warmup Iteration  27: 1892013.970 ops/s
# Warmup Iteration  28: 1880644.042 ops/s
# Warmup Iteration  29: 1907004.457 ops/s
# Warmup Iteration  30: 1821149.686 ops/s
Iteration   1: 1903489.373 ops/s
Iteration   2: 1998689.928 ops/s
Iteration   3: 1836013.410 ops/s
Iteration   4: 1891213.782 ops/s
Iteration   5: 1951045.928 ops/s
Iteration   6: 1848247.007 ops/s
Iteration   7: 1970296.477 ops/s
Iteration   8: 1895161.542 ops/s
Iteration   9: 1850951.375 ops/s
Iteration  10: 1878930.422 ops/s
Iteration  11: 1873782.436 ops/s
Iteration  12: 1997942.460 ops/s
Iteration  13: 1842034.058 ops/s
Iteration  14: 1874323.845 ops/s
Iteration  15: 1905724.875 ops/s
Iteration  16: 1868130.918 ops/s
Iteration  17: 1852046.754 ops/s
Iteration  18: 1910202.081 ops/s
Iteration  19: 1904238.692 ops/s
Iteration  20: 1913264.816 ops/s
Iteration  21: 1901864.011 ops/s
Iteration  22: 1906990.179 ops/s
Iteration  23: 1910488.169 ops/s
Iteration  24: 1828521.108 ops/s
Iteration  25: 1889237.369 ops/s
Iteration  26: 1876158.763 ops/s
Iteration  27: 1877824.379 ops/s
Iteration  28: 1926507.793 ops/s
Iteration  29: 1831732.635 ops/s
Iteration  30: 1887518.614 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithSizeTest._Benchmark.benchmark_dispose":
  1893419.107 ±(99.9%) 29263.317 ops/s [Average]
  (min, avg, max) = (1828521.108, 1893419.107, 1998689.928), stdev = 43799.958
  CI (99.9%): [1864155.790, 1922682.424] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
ObservableWindowWithSizeTest._Benchmark.benchmark_dispose  thrpt   30  1893419.107 ± 29263.317  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterableTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterableTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 133836.510 ops/s
# Warmup Iteration   2: 436544.732 ops/s
# Warmup Iteration   3: 489400.701 ops/s
# Warmup Iteration   4: 495926.141 ops/s
# Warmup Iteration   5: 516738.777 ops/s
# Warmup Iteration   6: 454149.064 ops/s
# Warmup Iteration   7: 540448.618 ops/s
# Warmup Iteration   8: 529917.710 ops/s
# Warmup Iteration   9: 540522.232 ops/s
# Warmup Iteration  10: 522296.986 ops/s
# Warmup Iteration  11: 528207.633 ops/s
# Warmup Iteration  12: 534444.478 ops/s
# Warmup Iteration  13: 528675.303 ops/s
# Warmup Iteration  14: 528072.841 ops/s
# Warmup Iteration  15: 532736.947 ops/s
# Warmup Iteration  16: 513185.015 ops/s
# Warmup Iteration  17: 462078.991 ops/s
# Warmup Iteration  18: 531562.908 ops/s
# Warmup Iteration  19: 542853.785 ops/s
# Warmup Iteration  20: 544271.438 ops/s
# Warmup Iteration  21: 541893.507 ops/s
# Warmup Iteration  22: 528873.681 ops/s
# Warmup Iteration  23: 533029.945 ops/s
# Warmup Iteration  24: 552038.545 ops/s
# Warmup Iteration  25: 547563.426 ops/s
# Warmup Iteration  26: 529784.854 ops/s
# Warmup Iteration  27: 556338.279 ops/s
# Warmup Iteration  28: 532811.151 ops/s
# Warmup Iteration  29: 544601.723 ops/s
# Warmup Iteration  30: 553838.620 ops/s
Iteration   1: 531483.938 ops/s
Iteration   2: 549700.681 ops/s
Iteration   3: 550607.357 ops/s
Iteration   4: 546698.842 ops/s
Iteration   5: 550000.421 ops/s
Iteration   6: 538223.044 ops/s
Iteration   7: 545975.214 ops/s
Iteration   8: 533087.497 ops/s
Iteration   9: 555906.509 ops/s
Iteration  10: 557219.721 ops/s
Iteration  11: 528111.333 ops/s
Iteration  12: 558482.145 ops/s
Iteration  13: 533011.339 ops/s
Iteration  14: 529398.386 ops/s
Iteration  15: 558811.364 ops/s
Iteration  16: 542329.509 ops/s
Iteration  17: 547884.869 ops/s
Iteration  18: 503888.389 ops/s
Iteration  19: 543129.461 ops/s
Iteration  20: 556002.016 ops/s
Iteration  21: 547347.190 ops/s
Iteration  22: 544503.798 ops/s
Iteration  23: 536590.154 ops/s
Iteration  24: 569863.212 ops/s
Iteration  25: 536291.139 ops/s
Iteration  26: 534985.018 ops/s
Iteration  27: 565725.911 ops/s
Iteration  28: 532004.950 ops/s
Iteration  29: 560365.596 ops/s
Iteration  30: 528050.195 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterableTest._Benchmark.benchmark_doubleOnSubscribe":
  543855.973 ±(99.9%) 9242.330 ops/s [Average]
  (min, avg, max) = (503888.389, 543855.973, 569863.212), stdev = 13833.486
  CI (99.9%): [534613.643, 553098.303] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score      Error  Units
ObservableFlattenIterableTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  543855.973 ± 9242.330  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRetryTest._Benchmark.benchmark_noCancelPreviousRetryUntil$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRetryTest._Benchmark.benchmark_noCancelPreviousRetryUntil

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 24963.895 ops/s
# Warmup Iteration   2: 107430.761 ops/s
# Warmup Iteration   3: 141649.532 ops/s
# Warmup Iteration   4: 145070.120 ops/s
# Warmup Iteration   5: 137570.141 ops/s
# Warmup Iteration   6: 147354.668 ops/s
# Warmup Iteration   7: 125766.671 ops/s
# Warmup Iteration   8: 146538.547 ops/s
# Warmup Iteration   9: 148445.678 ops/s
# Warmup Iteration  10: 152304.177 ops/s
# Warmup Iteration  11: 141421.367 ops/s
# Warmup Iteration  12: 147487.585 ops/s
# Warmup Iteration  13: 147593.710 ops/s
# Warmup Iteration  14: 150525.591 ops/s
# Warmup Iteration  15: 152758.522 ops/s
# Warmup Iteration  16: 143546.041 ops/s
# Warmup Iteration  17: 157927.621 ops/s
# Warmup Iteration  18: 156090.768 ops/s
# Warmup Iteration  19: 164612.491 ops/s
# Warmup Iteration  20: 149933.905 ops/s
# Warmup Iteration  21: 158337.476 ops/s
# Warmup Iteration  22: 159707.855 ops/s
# Warmup Iteration  23: 153569.092 ops/s
# Warmup Iteration  24: 161514.913 ops/s
# Warmup Iteration  25: 153220.187 ops/s
# Warmup Iteration  26: 158719.993 ops/s
# Warmup Iteration  27: 156206.199 ops/s
# Warmup Iteration  28: 151034.608 ops/s
# Warmup Iteration  29: 161449.126 ops/s
# Warmup Iteration  30: 155593.104 ops/s
Iteration   1: 156113.767 ops/s
Iteration   2: 157887.504 ops/s
Iteration   3: 157253.351 ops/s
Iteration   4: 154933.494 ops/s
Iteration   5: 155111.619 ops/s
Iteration   6: 159574.440 ops/s
Iteration   7: 161573.683 ops/s
Iteration   8: 151614.055 ops/s
Iteration   9: 156903.172 ops/s
Iteration  10: 156035.407 ops/s
Iteration  11: 161796.660 ops/s
Iteration  12: 156143.528 ops/s
Iteration  13: 157780.148 ops/s
Iteration  14: 153851.867 ops/s
Iteration  15: 157104.890 ops/s
Iteration  16: 153155.239 ops/s
Iteration  17: 158147.511 ops/s
Iteration  18: 151884.866 ops/s
Iteration  19: 161579.849 ops/s
Iteration  20: 151956.564 ops/s
Iteration  21: 155585.021 ops/s
Iteration  22: 161621.597 ops/s
Iteration  23: 153942.595 ops/s
Iteration  24: 160503.277 ops/s
Iteration  25: 152256.027 ops/s
Iteration  26: 160929.309 ops/s
Iteration  27: 157484.516 ops/s
Iteration  28: 150671.490 ops/s
Iteration  29: 160137.419 ops/s
Iteration  30: 155300.138 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryTest._Benchmark.benchmark_noCancelPreviousRetryUntil":
  156627.767 ±(99.9%) 2225.247 ops/s [Average]
  (min, avg, max) = (150671.490, 156627.767, 161796.660), stdev = 3330.645
  CI (99.9%): [154402.520, 158853.014] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score      Error  Units
ObservableRetryTest._Benchmark.benchmark_noCancelPreviousRetryUntil  thrpt   30  156627.767 ± 2225.247  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_mappingBadCapacityHint$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_mappingBadCapacityHint

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 330366.337 ops/s
# Warmup Iteration   2: 611401.957 ops/s
# Warmup Iteration   3: 624067.317 ops/s
# Warmup Iteration   4: 687393.881 ops/s
# Warmup Iteration   5: 592082.641 ops/s
# Warmup Iteration   6: 694250.384 ops/s
# Warmup Iteration   7: 669053.013 ops/s
# Warmup Iteration   8: 708942.787 ops/s
# Warmup Iteration   9: 690250.174 ops/s
# Warmup Iteration  10: 710233.168 ops/s
# Warmup Iteration  11: 666092.819 ops/s
# Warmup Iteration  12: 564958.064 ops/s
# Warmup Iteration  13: 691723.303 ops/s
# Warmup Iteration  14: 678276.162 ops/s
# Warmup Iteration  15: 708042.341 ops/s
# Warmup Iteration  16: 699651.681 ops/s
# Warmup Iteration  17: 761295.922 ops/s
# Warmup Iteration  18: 765708.045 ops/s
# Warmup Iteration  19: 724885.228 ops/s
# Warmup Iteration  20: 749104.006 ops/s
# Warmup Iteration  21: 742634.143 ops/s
# Warmup Iteration  22: 752582.913 ops/s
# Warmup Iteration  23: 720731.701 ops/s
# Warmup Iteration  24: 713468.574 ops/s
# Warmup Iteration  25: 768095.540 ops/s
# Warmup Iteration  26: 731046.178 ops/s
# Warmup Iteration  27: 750272.771 ops/s
# Warmup Iteration  28: 719012.667 ops/s
# Warmup Iteration  29: 761778.746 ops/s
# Warmup Iteration  30: 746423.440 ops/s
Iteration   1: 767621.284 ops/s
Iteration   2: 693659.139 ops/s
Iteration   3: 774807.549 ops/s
Iteration   4: 735172.392 ops/s
Iteration   5: 737585.179 ops/s
Iteration   6: 741964.563 ops/s
Iteration   7: 719403.115 ops/s
Iteration   8: 746819.822 ops/s
Iteration   9: 724796.920 ops/s
Iteration  10: 775676.377 ops/s
Iteration  11: 726151.936 ops/s
Iteration  12: 742551.096 ops/s
Iteration  13: 754485.893 ops/s
Iteration  14: 704745.749 ops/s
Iteration  15: 755396.538 ops/s
Iteration  16: 756888.306 ops/s
Iteration  17: 732638.603 ops/s
Iteration  18: 731196.771 ops/s
Iteration  19: 738868.796 ops/s
Iteration  20: 756726.717 ops/s
Iteration  21: 717106.669 ops/s
Iteration  22: 732831.150 ops/s
Iteration  23: 754532.932 ops/s
Iteration  24: 750424.992 ops/s
Iteration  25: 741235.842 ops/s
Iteration  26: 728645.478 ops/s
Iteration  27: 750520.115 ops/s
Iteration  28: 744254.339 ops/s
Iteration  29: 736277.266 ops/s
Iteration  30: 756980.399 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_mappingBadCapacityHint":
  740998.864 ±(99.9%) 12494.641 ops/s [Average]
  (min, avg, max) = (693659.139, 740998.864, 775676.377), stdev = 18701.392
  CI (99.9%): [728504.223, 753493.505] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score       Error  Units
ObservableConcatMapEagerTest._Benchmark.benchmark_mappingBadCapacityHint  thrpt   30  740998.864 ± 12494.641  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingleTest._Benchmark.benchmark_innerError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingleTest._Benchmark.benchmark_innerError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 121628.125 ops/s
# Warmup Iteration   2: 581784.411 ops/s
# Warmup Iteration   3: 643758.391 ops/s
# Warmup Iteration   4: 627207.997 ops/s
# Warmup Iteration   5: 686497.017 ops/s
# Warmup Iteration   6: 670027.998 ops/s
# Warmup Iteration   7: 727289.566 ops/s
# Warmup Iteration   8: 689080.780 ops/s
# Warmup Iteration   9: 722182.928 ops/s
# Warmup Iteration  10: 692860.027 ops/s
# Warmup Iteration  11: 710343.296 ops/s
# Warmup Iteration  12: 722783.878 ops/s
# Warmup Iteration  13: 703867.414 ops/s
# Warmup Iteration  14: 725487.773 ops/s
# Warmup Iteration  15: 705767.613 ops/s
# Warmup Iteration  16: 726625.535 ops/s
# Warmup Iteration  17: 757922.748 ops/s
# Warmup Iteration  18: 736921.572 ops/s
# Warmup Iteration  19: 763613.581 ops/s
# Warmup Iteration  20: 746389.265 ops/s
# Warmup Iteration  21: 758741.691 ops/s
# Warmup Iteration  22: 731476.466 ops/s
# Warmup Iteration  23: 757848.624 ops/s
# Warmup Iteration  24: 774568.403 ops/s
# Warmup Iteration  25: 735523.774 ops/s
# Warmup Iteration  26: 772471.555 ops/s
# Warmup Iteration  27: 737792.819 ops/s
# Warmup Iteration  28: 729168.689 ops/s
# Warmup Iteration  29: 759508.825 ops/s
# Warmup Iteration  30: 736055.133 ops/s
Iteration   1: 753771.579 ops/s
Iteration   2: 743377.764 ops/s
Iteration   3: 742951.882 ops/s
Iteration   4: 741879.208 ops/s
Iteration   5: 765713.611 ops/s
Iteration   6: 732769.105 ops/s
Iteration   7: 759046.751 ops/s
Iteration   8: 760886.447 ops/s
Iteration   9: 717912.684 ops/s
Iteration  10: 743647.222 ops/s
Iteration  11: 740490.808 ops/s
Iteration  12: 759297.151 ops/s
Iteration  13: 764282.967 ops/s
Iteration  14: 733585.128 ops/s
Iteration  15: 750359.542 ops/s
Iteration  16: 736112.786 ops/s
Iteration  17: 771339.664 ops/s
Iteration  18: 730575.687 ops/s
Iteration  19: 784497.580 ops/s
Iteration  20: 777023.528 ops/s
Iteration  21: 724380.390 ops/s
Iteration  22: 756712.135 ops/s
Iteration  23: 741124.363 ops/s
Iteration  24: 774883.455 ops/s
Iteration  25: 713231.178 ops/s
Iteration  26: 769182.876 ops/s
Iteration  27: 747600.563 ops/s
Iteration  28: 739622.405 ops/s
Iteration  29: 747624.368 ops/s
Iteration  30: 744330.005 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingleTest._Benchmark.benchmark_innerError":
  748940.428 ±(99.9%) 11652.279 ops/s [Average]
  (min, avg, max) = (713231.178, 748940.428, 784497.580), stdev = 17440.583
  CI (99.9%): [737288.149, 760592.706] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score       Error  Units
ObservableConcatMapSingleTest._Benchmark.benchmark_innerError  thrpt   30  748940.428 ± 11652.279  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleMiscTest._Benchmark.benchmark_toObservable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleMiscTest._Benchmark.benchmark_toObservable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 70728.279 ops/s
# Warmup Iteration   2: 256692.660 ops/s
# Warmup Iteration   3: 574894.219 ops/s
# Warmup Iteration   4: 593029.610 ops/s
# Warmup Iteration   5: 616865.634 ops/s
# Warmup Iteration   6: 466637.792 ops/s
# Warmup Iteration   7: 564509.124 ops/s
# Warmup Iteration   8: 606998.386 ops/s
# Warmup Iteration   9: 598014.015 ops/s
# Warmup Iteration  10: 571677.242 ops/s
# Warmup Iteration  11: 621558.033 ops/s
# Warmup Iteration  12: 590318.563 ops/s
# Warmup Iteration  13: 611291.094 ops/s
# Warmup Iteration  14: 621663.027 ops/s
# Warmup Iteration  15: 605098.756 ops/s
# Warmup Iteration  16: 589045.498 ops/s
# Warmup Iteration  17: 615336.563 ops/s
# Warmup Iteration  18: 662257.257 ops/s
# Warmup Iteration  19: 636053.714 ops/s
# Warmup Iteration  20: 621875.658 ops/s
# Warmup Iteration  21: 588651.411 ops/s
# Warmup Iteration  22: 628426.869 ops/s
# Warmup Iteration  23: 658224.998 ops/s
# Warmup Iteration  24: 648358.520 ops/s
# Warmup Iteration  25: 623528.714 ops/s
# Warmup Iteration  26: 635884.534 ops/s
# Warmup Iteration  27: 639918.134 ops/s
# Warmup Iteration  28: 651129.480 ops/s
# Warmup Iteration  29: 649411.142 ops/s
# Warmup Iteration  30: 616621.864 ops/s
Iteration   1: 661866.127 ops/s
Iteration   2: 656197.699 ops/s
Iteration   3: 594707.826 ops/s
Iteration   4: 648727.108 ops/s
Iteration   5: 590230.214 ops/s
Iteration   6: 635754.638 ops/s
Iteration   7: 641698.016 ops/s
Iteration   8: 651602.433 ops/s
Iteration   9: 639159.530 ops/s
Iteration  10: 646079.174 ops/s
Iteration  11: 638270.266 ops/s
Iteration  12: 626723.820 ops/s
Iteration  13: 647492.167 ops/s
Iteration  14: 630625.043 ops/s
Iteration  15: 611345.251 ops/s
Iteration  16: 652526.256 ops/s
Iteration  17: 638276.649 ops/s
Iteration  18: 637071.112 ops/s
Iteration  19: 643014.922 ops/s
Iteration  20: 642655.510 ops/s
Iteration  21: 640326.708 ops/s
Iteration  22: 643658.175 ops/s
Iteration  23: 656809.733 ops/s
Iteration  24: 610885.015 ops/s
Iteration  25: 668420.735 ops/s
Iteration  26: 637329.587 ops/s
Iteration  27: 649272.567 ops/s
Iteration  28: 614731.989 ops/s
Iteration  29: 640659.768 ops/s
Iteration  30: 658802.689 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleMiscTest._Benchmark.benchmark_toObservable":
  638497.358 ±(99.9%) 12304.713 ops/s [Average]
  (min, avg, max) = (590230.214, 638497.358, 668420.735), stdev = 18417.117
  CI (99.9%): [626192.644, 650802.071] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt       Score       Error  Units
SingleMiscTest._Benchmark.benchmark_toObservable  thrpt   30  638497.358 ± 12304.713  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFromSupplierTest._Benchmark.benchmark_toObservableAndBack$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFromSupplierTest._Benchmark.benchmark_toObservableAndBack

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1476533.949 ops/s
# Warmup Iteration   2: 3633254.173 ops/s
# Warmup Iteration   3: 5428115.491 ops/s
# Warmup Iteration   4: 5289028.474 ops/s
# Warmup Iteration   5: 5498345.493 ops/s
# Warmup Iteration   6: 5203917.010 ops/s
# Warmup Iteration   7: 5323928.551 ops/s
# Warmup Iteration   8: 5374782.630 ops/s
# Warmup Iteration   9: 5275301.980 ops/s
# Warmup Iteration  10: 5517104.813 ops/s
# Warmup Iteration  11: 5465343.883 ops/s
# Warmup Iteration  12: 5401644.043 ops/s
# Warmup Iteration  13: 5297302.285 ops/s
# Warmup Iteration  14: 5480706.925 ops/s
# Warmup Iteration  15: 5289058.721 ops/s
# Warmup Iteration  16: 5554675.969 ops/s
# Warmup Iteration  17: 5449913.860 ops/s
# Warmup Iteration  18: 5309336.902 ops/s
# Warmup Iteration  19: 5528609.703 ops/s
# Warmup Iteration  20: 5287485.141 ops/s
# Warmup Iteration  21: 5533292.572 ops/s
# Warmup Iteration  22: 5241184.740 ops/s
# Warmup Iteration  23: 5285318.015 ops/s
# Warmup Iteration  24: 5528789.684 ops/s
# Warmup Iteration  25: 5287549.819 ops/s
# Warmup Iteration  26: 5412904.775 ops/s
# Warmup Iteration  27: 5351502.462 ops/s
# Warmup Iteration  28: 5231758.312 ops/s
# Warmup Iteration  29: 5434363.820 ops/s
# Warmup Iteration  30: 5334730.589 ops/s
Iteration   1: 5253163.582 ops/s
Iteration   2: 5519614.587 ops/s
Iteration   3: 5312708.448 ops/s
Iteration   4: 5362538.528 ops/s
Iteration   5: 5472067.332 ops/s
Iteration   6: 5225869.457 ops/s
Iteration   7: 5371484.661 ops/s
Iteration   8: 5602901.425 ops/s
Iteration   9: 5194047.551 ops/s
Iteration  10: 5405246.220 ops/s
Iteration  11: 5261454.246 ops/s
Iteration  12: 5279228.217 ops/s
Iteration  13: 5643621.915 ops/s
Iteration  14: 5235420.983 ops/s
Iteration  15: 5177788.745 ops/s
Iteration  16: 5559387.112 ops/s
Iteration  17: 5223540.285 ops/s
Iteration  18: 5254809.925 ops/s
Iteration  19: 5476828.797 ops/s
Iteration  20: 5288988.931 ops/s
Iteration  21: 5483140.924 ops/s
Iteration  22: 5245588.047 ops/s
Iteration  23: 5523608.524 ops/s
Iteration  24: 5352054.682 ops/s
Iteration  25: 5241931.987 ops/s
Iteration  26: 5555362.625 ops/s
Iteration  27: 5307429.593 ops/s
Iteration  28: 5593700.434 ops/s
Iteration  29: 5319880.479 ops/s
Iteration  30: 5449416.406 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleFromSupplierTest._Benchmark.benchmark_toObservableAndBack":
  5373094.155 ±(99.9%) 92922.193 ops/s [Average]
  (min, avg, max) = (5177788.745, 5373094.155, 5643621.915), stdev = 139081.574
  CI (99.9%): [5280171.962, 5466016.348] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
SingleFromSupplierTest._Benchmark.benchmark_toObservableAndBack  thrpt   30  5373094.155 ± 92922.193  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFromSupplierTest._Benchmark.benchmark_toObservableTake$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFromSupplierTest._Benchmark.benchmark_toObservableTake

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 442991.938 ops/s
# Warmup Iteration   2: 2403363.600 ops/s
# Warmup Iteration   3: 3678854.730 ops/s
# Warmup Iteration   4: 4285756.394 ops/s
# Warmup Iteration   5: 4526431.284 ops/s
# Warmup Iteration   6: 4443471.151 ops/s
# Warmup Iteration   7: 4170307.114 ops/s
# Warmup Iteration   8: 4493066.906 ops/s
# Warmup Iteration   9: 4255742.876 ops/s
# Warmup Iteration  10: 4449923.679 ops/s
# Warmup Iteration  11: 4289998.213 ops/s
# Warmup Iteration  12: 4331095.072 ops/s
# Warmup Iteration  13: 4549868.360 ops/s
# Warmup Iteration  14: 4156712.215 ops/s
# Warmup Iteration  15: 4401493.180 ops/s
# Warmup Iteration  16: 4376329.333 ops/s
# Warmup Iteration  17: 4289773.392 ops/s
# Warmup Iteration  18: 4393769.983 ops/s
# Warmup Iteration  19: 4181747.513 ops/s
# Warmup Iteration  20: 4302739.026 ops/s
# Warmup Iteration  21: 4546886.293 ops/s
# Warmup Iteration  22: 4477547.531 ops/s
# Warmup Iteration  23: 4271257.999 ops/s
# Warmup Iteration  24: 4294101.762 ops/s
# Warmup Iteration  25: 4433345.472 ops/s
# Warmup Iteration  26: 4200293.713 ops/s
# Warmup Iteration  27: 4541658.951 ops/s
# Warmup Iteration  28: 4376791.278 ops/s
# Warmup Iteration  29: 4336056.243 ops/s
# Warmup Iteration  30: 4450560.111 ops/s
Iteration   1: 4339224.567 ops/s
Iteration   2: 4475142.480 ops/s
Iteration   3: 4239393.749 ops/s
Iteration   4: 4334314.924 ops/s
Iteration   5: 4315121.202 ops/s
Iteration   6: 4379632.524 ops/s
Iteration   7: 4319662.504 ops/s
Iteration   8: 4363243.989 ops/s
Iteration   9: 4489577.628 ops/s
Iteration  10: 4245944.978 ops/s
Iteration  11: 4300127.101 ops/s
Iteration  12: 4439296.124 ops/s
Iteration  13: 4235264.556 ops/s
Iteration  14: 4550341.592 ops/s
Iteration  15: 4457997.242 ops/s
Iteration  16: 4319398.456 ops/s
Iteration  17: 4492843.327 ops/s
Iteration  18: 4226093.802 ops/s
Iteration  19: 4422389.035 ops/s
Iteration  20: 4328405.871 ops/s
Iteration  21: 4438957.799 ops/s
Iteration  22: 4385088.463 ops/s
Iteration  23: 4331328.786 ops/s
Iteration  24: 4415798.929 ops/s
Iteration  25: 4284143.116 ops/s
Iteration  26: 4241939.695 ops/s
Iteration  27: 4437719.800 ops/s
Iteration  28: 4139015.509 ops/s
Iteration  29: 4382220.844 ops/s
Iteration  30: 4305897.604 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleFromSupplierTest._Benchmark.benchmark_toObservableTake":
  4354517.540 ±(99.9%) 63745.835 ops/s [Average]
  (min, avg, max) = (4139015.509, 4354517.540, 4550341.592), stdev = 95411.772
  CI (99.9%): [4290771.705, 4418263.375] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
SingleFromSupplierTest._Benchmark.benchmark_toObservableTake  thrpt   30  4354517.540 ± 63745.835  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromSingleTest._Benchmark.benchmark_cancelComposes$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromSingleTest._Benchmark.benchmark_cancelComposes

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1322878.227 ops/s
# Warmup Iteration   2: 3896591.065 ops/s
# Warmup Iteration   3: 4196110.439 ops/s
# Warmup Iteration   4: 4623883.595 ops/s
# Warmup Iteration   5: 4771040.166 ops/s
# Warmup Iteration   6: 4921806.727 ops/s
# Warmup Iteration   7: 4709746.247 ops/s
# Warmup Iteration   8: 4698084.987 ops/s
# Warmup Iteration   9: 4696036.729 ops/s
# Warmup Iteration  10: 4903007.202 ops/s
# Warmup Iteration  11: 4763187.805 ops/s
# Warmup Iteration  12: 4724912.895 ops/s
# Warmup Iteration  13: 4971360.902 ops/s
# Warmup Iteration  14: 4709225.494 ops/s
# Warmup Iteration  15: 5008671.575 ops/s
# Warmup Iteration  16: 4795199.428 ops/s
# Warmup Iteration  17: 4748910.142 ops/s
# Warmup Iteration  18: 4837029.630 ops/s
# Warmup Iteration  19: 4673012.795 ops/s
# Warmup Iteration  20: 4922305.731 ops/s
# Warmup Iteration  21: 4696310.570 ops/s
# Warmup Iteration  22: 4914461.507 ops/s
# Warmup Iteration  23: 4741092.440 ops/s
# Warmup Iteration  24: 4611906.618 ops/s
# Warmup Iteration  25: 4874339.462 ops/s
# Warmup Iteration  26: 4719771.443 ops/s
# Warmup Iteration  27: 4768842.436 ops/s
# Warmup Iteration  28: 4848163.580 ops/s
# Warmup Iteration  29: 4747156.453 ops/s
# Warmup Iteration  30: 4940100.910 ops/s
Iteration   1: 4674507.633 ops/s
Iteration   2: 4847494.089 ops/s
Iteration   3: 4646318.073 ops/s
Iteration   4: 4742535.570 ops/s
Iteration   5: 4884930.298 ops/s
Iteration   6: 4734669.954 ops/s
Iteration   7: 4860967.307 ops/s
Iteration   8: 4779666.886 ops/s
Iteration   9: 4863162.319 ops/s
Iteration  10: 4735939.649 ops/s
Iteration  11: 4576382.468 ops/s
Iteration  12: 4808085.282 ops/s
Iteration  13: 4890467.086 ops/s
Iteration  14: 4807763.214 ops/s
Iteration  15: 4875182.091 ops/s
Iteration  16: 4636358.094 ops/s
Iteration  17: 4791593.127 ops/s
Iteration  18: 4956990.267 ops/s
Iteration  19: 4585124.559 ops/s
Iteration  20: 4903641.697 ops/s
Iteration  21: 4599325.649 ops/s
Iteration  22: 4951991.980 ops/s
Iteration  23: 4771248.406 ops/s
Iteration  24: 4644688.609 ops/s
Iteration  25: 4934419.680 ops/s
Iteration  26: 4840021.867 ops/s
Iteration  27: 4878274.261 ops/s
Iteration  28: 3815380.496 ops/s
Iteration  29: 4875839.426 ops/s
Iteration  30: 4792374.541 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFromSingleTest._Benchmark.benchmark_cancelComposes":
  4756844.819 ±(99.9%) 140064.130 ops/s [Average]
  (min, avg, max) = (3815380.496, 4756844.819, 4956990.267), stdev = 209641.411
  CI (99.9%): [4616780.690, 4896908.949] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score        Error  Units
ObservableFromSingleTest._Benchmark.benchmark_cancelComposes  thrpt   30  4756844.819 ± 140064.130  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.SingleFlattenStreamAsObservableTest._Benchmark.benchmark_fusedEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.SingleFlattenStreamAsObservableTest._Benchmark.benchmark_fusedEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 693804.558 ops/s
# Warmup Iteration   2: 4057870.717 ops/s
# Warmup Iteration   3: 6087938.142 ops/s
# Warmup Iteration   4: 6607965.823 ops/s
# Warmup Iteration   5: 6941143.578 ops/s
# Warmup Iteration   6: 6835414.628 ops/s
# Warmup Iteration   7: 6670297.176 ops/s
# Warmup Iteration   8: 6802427.459 ops/s
# Warmup Iteration   9: 6693397.263 ops/s
# Warmup Iteration  10: 6632216.699 ops/s
# Warmup Iteration  11: 6894520.668 ops/s
# Warmup Iteration  12: 6605258.824 ops/s
# Warmup Iteration  13: 6793496.587 ops/s
# Warmup Iteration  14: 6620991.207 ops/s
# Warmup Iteration  15: 6688794.741 ops/s
# Warmup Iteration  16: 6707999.835 ops/s
# Warmup Iteration  17: 6964676.323 ops/s
# Warmup Iteration  18: 6494338.825 ops/s
# Warmup Iteration  19: 6902331.010 ops/s
# Warmup Iteration  20: 6758598.862 ops/s
# Warmup Iteration  21: 6642805.119 ops/s
# Warmup Iteration  22: 6796460.621 ops/s
# Warmup Iteration  23: 6831963.088 ops/s
# Warmup Iteration  24: 6407472.518 ops/s
# Warmup Iteration  25: 7078181.303 ops/s
# Warmup Iteration  26: 6426960.578 ops/s
# Warmup Iteration  27: 6994956.597 ops/s
# Warmup Iteration  28: 6513161.561 ops/s
# Warmup Iteration  29: 6631496.174 ops/s
# Warmup Iteration  30: 6872515.245 ops/s
Iteration   1: 6735733.952 ops/s
Iteration   2: 6889327.947 ops/s
Iteration   3: 6526139.597 ops/s
Iteration   4: 6859974.383 ops/s
Iteration   5: 6783481.685 ops/s
Iteration   6: 6576092.053 ops/s
Iteration   7: 6868205.790 ops/s
Iteration   8: 6555900.971 ops/s
Iteration   9: 6803634.295 ops/s
Iteration  10: 6641107.292 ops/s
Iteration  11: 6830911.524 ops/s
Iteration  12: 6880245.194 ops/s
Iteration  13: 6521824.301 ops/s
Iteration  14: 6859211.178 ops/s
Iteration  15: 6419530.469 ops/s
Iteration  16: 6623494.671 ops/s
Iteration  17: 6713705.386 ops/s
Iteration  18: 6609748.123 ops/s
Iteration  19: 6750709.630 ops/s
Iteration  20: 6526789.675 ops/s
Iteration  21: 6927036.605 ops/s
Iteration  22: 6619645.145 ops/s
Iteration  23: 6531901.908 ops/s
Iteration  24: 7018491.978 ops/s
Iteration  25: 6659508.023 ops/s
Iteration  26: 6819185.245 ops/s
Iteration  27: 6467441.172 ops/s
Iteration  28: 6748711.366 ops/s
Iteration  29: 6680668.240 ops/s
Iteration  30: 6618952.413 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.SingleFlattenStreamAsObservableTest._Benchmark.benchmark_fusedEmpty":
  6702243.674 ±(99.9%) 102115.933 ops/s [Average]
  (min, avg, max) = (6419530.469, 6702243.674, 7018491.978), stdev = 152842.333
  CI (99.9%): [6600127.740, 6804359.607] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score        Error  Units
SingleFlattenStreamAsObservableTest._Benchmark.benchmark_fusedEmpty  thrpt   30  6702243.674 ± 102115.933  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableLastTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableLastTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 192207.305 ops/s
# Warmup Iteration   2: 608675.107 ops/s
# Warmup Iteration   3: 1196976.254 ops/s
# Warmup Iteration   4: 1612512.354 ops/s
# Warmup Iteration   5: 1702431.711 ops/s
# Warmup Iteration   6: 1655322.570 ops/s
# Warmup Iteration   7: 1668151.989 ops/s
# Warmup Iteration   8: 1708351.699 ops/s
# Warmup Iteration   9: 1617093.355 ops/s
# Warmup Iteration  10: 1748421.116 ops/s
# Warmup Iteration  11: 1663530.720 ops/s
# Warmup Iteration  12: 1640242.513 ops/s
# Warmup Iteration  13: 1706741.676 ops/s
# Warmup Iteration  14: 1645445.714 ops/s
# Warmup Iteration  15: 1744924.497 ops/s
# Warmup Iteration  16: 1654636.679 ops/s
# Warmup Iteration  17: 1715934.956 ops/s
# Warmup Iteration  18: 1681577.222 ops/s
# Warmup Iteration  19: 1656677.804 ops/s
# Warmup Iteration  20: 1733958.667 ops/s
# Warmup Iteration  21: 1609720.682 ops/s
# Warmup Iteration  22: 1732772.323 ops/s
# Warmup Iteration  23: 1628564.664 ops/s
# Warmup Iteration  24: 1683129.065 ops/s
# Warmup Iteration  25: 1744536.080 ops/s
# Warmup Iteration  26: 1629237.714 ops/s
# Warmup Iteration  27: 1712921.942 ops/s
# Warmup Iteration  28: 1647238.254 ops/s
# Warmup Iteration  29: 1759021.399 ops/s
# Warmup Iteration  30: 1725546.950 ops/s
Iteration   1: 1673212.639 ops/s
Iteration   2: 1671972.958 ops/s
Iteration   3: 1707290.053 ops/s
Iteration   4: 1651512.658 ops/s
Iteration   5: 1684449.188 ops/s
Iteration   6: 1667275.169 ops/s
Iteration   7: 1708685.475 ops/s
Iteration   8: 1644276.196 ops/s
Iteration   9: 1679505.707 ops/s
Iteration  10: 1684510.841 ops/s
Iteration  11: 1633550.145 ops/s
Iteration  12: 1713961.362 ops/s
Iteration  13: 1669012.836 ops/s
Iteration  14: 1673793.922 ops/s
Iteration  15: 1707468.918 ops/s
Iteration  16: 1693776.562 ops/s
Iteration  17: 1649081.802 ops/s
Iteration  18: 1694613.788 ops/s
Iteration  19: 1664804.150 ops/s
Iteration  20: 1714597.447 ops/s
Iteration  21: 1651478.076 ops/s
Iteration  22: 1689383.496 ops/s
Iteration  23: 1388818.465 ops/s
Iteration  24: 1663910.278 ops/s
Iteration  25: 1695940.591 ops/s
Iteration  26: 1672924.061 ops/s
Iteration  27: 1760953.849 ops/s
Iteration  28: 1683495.685 ops/s
Iteration  29: 1604285.302 ops/s
Iteration  30: 1788508.129 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableLastTest._Benchmark.benchmark_dispose":
  1672901.658 ±(99.9%) 42940.310 ops/s [Average]
  (min, avg, max) = (1388818.465, 1672901.658, 1788508.129), stdev = 64271.039
  CI (99.9%): [1629961.348, 1715841.968] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score       Error  Units
ObservableLastTest._Benchmark.benchmark_dispose  thrpt   30  1672901.658 ± 42940.310  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorTest._Benchmark.benchmark_disposeToObservable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorTest._Benchmark.benchmark_disposeToObservable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 538076.759 ops/s
# Warmup Iteration   2: 3039032.235 ops/s
# Warmup Iteration   3: 4232328.203 ops/s
# Warmup Iteration   4: 4655666.482 ops/s
# Warmup Iteration   5: 5017359.259 ops/s
# Warmup Iteration   6: 4663284.002 ops/s
# Warmup Iteration   7: 4799009.783 ops/s
# Warmup Iteration   8: 4972041.534 ops/s
# Warmup Iteration   9: 4886296.292 ops/s
# Warmup Iteration  10: 4610258.919 ops/s
# Warmup Iteration  11: 4832024.076 ops/s
# Warmup Iteration  12: 4899250.423 ops/s
# Warmup Iteration  13: 4690598.486 ops/s
# Warmup Iteration  14: 5040893.061 ops/s
# Warmup Iteration  15: 4780937.973 ops/s
# Warmup Iteration  16: 4974130.803 ops/s
# Warmup Iteration  17: 5017400.245 ops/s
# Warmup Iteration  18: 4626141.032 ops/s
# Warmup Iteration  19: 4942858.497 ops/s
# Warmup Iteration  20: 5032663.586 ops/s
# Warmup Iteration  21: 4688844.446 ops/s
# Warmup Iteration  22: 4975665.171 ops/s
# Warmup Iteration  23: 4777673.332 ops/s
# Warmup Iteration  24: 4709108.415 ops/s
# Warmup Iteration  25: 5048308.859 ops/s
# Warmup Iteration  26: 4979818.819 ops/s
# Warmup Iteration  27: 4645921.287 ops/s
# Warmup Iteration  28: 4949060.848 ops/s
# Warmup Iteration  29: 4725450.109 ops/s
# Warmup Iteration  30: 4897174.244 ops/s
Iteration   1: 4766341.106 ops/s
Iteration   2: 4877279.385 ops/s
Iteration   3: 4948190.061 ops/s
Iteration   4: 4760750.521 ops/s
Iteration   5: 4946145.637 ops/s
Iteration   6: 4854855.970 ops/s
Iteration   7: 4761918.126 ops/s
Iteration   8: 4899984.869 ops/s
Iteration   9: 4860705.706 ops/s
Iteration  10: 4998740.435 ops/s
Iteration  11: 4641443.409 ops/s
Iteration  12: 4926091.035 ops/s
Iteration  13: 4772879.724 ops/s
Iteration  14: 4788170.100 ops/s
Iteration  15: 5044977.445 ops/s
Iteration  16: 4784886.985 ops/s
Iteration  17: 4914519.223 ops/s
Iteration  18: 4914348.416 ops/s
Iteration  19: 4753450.591 ops/s
Iteration  20: 4930945.604 ops/s
Iteration  21: 5034600.274 ops/s
Iteration  22: 4776026.093 ops/s
Iteration  23: 4948586.805 ops/s
Iteration  24: 4695095.627 ops/s
Iteration  25: 4930026.082 ops/s
Iteration  26: 4679476.992 ops/s
Iteration  27: 4814447.105 ops/s
Iteration  28: 5009141.410 ops/s
Iteration  29: 4654611.747 ops/s
Iteration  30: 5021301.998 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorTest._Benchmark.benchmark_disposeToObservable":
  4856997.949 ±(99.9%) 77874.197 ops/s [Average]
  (min, avg, max) = (4641443.409, 4856997.949, 5044977.445), stdev = 116558.441
  CI (99.9%): [4779123.752, 4934872.146] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score       Error  Units
ObservableCollectWithCollectorTest._Benchmark.benchmark_disposeToObservable  thrpt   30  4856997.949 ± 77874.197  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorTest._Benchmark.benchmark_disposeBeforeEnd$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorTest._Benchmark.benchmark_disposeBeforeEnd

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 130642.499 ops/s
# Warmup Iteration   2: 1402027.156 ops/s
# Warmup Iteration   3: 1941059.277 ops/s
# Warmup Iteration   4: 2026561.601 ops/s
# Warmup Iteration   5: 2033411.414 ops/s
# Warmup Iteration   6: 1956932.341 ops/s
# Warmup Iteration   7: 1865052.896 ops/s
# Warmup Iteration   8: 2061642.958 ops/s
# Warmup Iteration   9: 2035974.575 ops/s
# Warmup Iteration  10: 2102641.286 ops/s
# Warmup Iteration  11: 2105053.526 ops/s
# Warmup Iteration  12: 2030804.896 ops/s
# Warmup Iteration  13: 2130484.634 ops/s
# Warmup Iteration  14: 1996855.080 ops/s
# Warmup Iteration  15: 2133147.986 ops/s
# Warmup Iteration  16: 1989904.691 ops/s
# Warmup Iteration  17: 2074960.846 ops/s
# Warmup Iteration  18: 2162787.498 ops/s
# Warmup Iteration  19: 2068897.607 ops/s
# Warmup Iteration  20: 2185390.822 ops/s
# Warmup Iteration  21: 2051562.359 ops/s
# Warmup Iteration  22: 2105652.314 ops/s
# Warmup Iteration  23: 2155503.685 ops/s
# Warmup Iteration  24: 2056531.597 ops/s
# Warmup Iteration  25: 2078025.740 ops/s
# Warmup Iteration  26: 2209486.802 ops/s
# Warmup Iteration  27: 2090840.593 ops/s
# Warmup Iteration  28: 2144077.507 ops/s
# Warmup Iteration  29: 2065389.737 ops/s
# Warmup Iteration  30: 2089889.195 ops/s
Iteration   1: 2215719.488 ops/s
Iteration   2: 2066934.142 ops/s
Iteration   3: 2160397.710 ops/s
Iteration   4: 2058537.386 ops/s
Iteration   5: 2130391.646 ops/s
Iteration   6: 2155700.484 ops/s
Iteration   7: 2062155.323 ops/s
Iteration   8: 2144500.036 ops/s
Iteration   9: 2034632.611 ops/s
Iteration  10: 2137451.774 ops/s
Iteration  11: 2100180.445 ops/s
Iteration  12: 2066953.405 ops/s
Iteration  13: 2140632.613 ops/s
Iteration  14: 2114088.685 ops/s
Iteration  15: 2103848.542 ops/s
Iteration  16: 2040480.331 ops/s
Iteration  17: 1789922.290 ops/s
Iteration  18: 1976718.834 ops/s
Iteration  19: 2087816.813 ops/s
Iteration  20: 2201688.396 ops/s
Iteration  21: 2070982.958 ops/s
Iteration  22: 2114371.181 ops/s
Iteration  23: 2108071.764 ops/s
Iteration  24: 2081937.806 ops/s
Iteration  25: 2117735.872 ops/s
Iteration  26: 2106780.817 ops/s
Iteration  27: 2131076.531 ops/s
Iteration  28: 2175809.009 ops/s
Iteration  29: 2094003.563 ops/s
Iteration  30: 2087455.552 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorTest._Benchmark.benchmark_disposeBeforeEnd":
  2095899.200 ±(99.9%) 51078.519 ops/s [Average]
  (min, avg, max) = (1789922.290, 2095899.200, 2215719.488), stdev = 76451.929
  CI (99.9%): [2044820.681, 2146977.719] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score       Error  Units
ObservableCollectWithCollectorTest._Benchmark.benchmark_disposeBeforeEnd  thrpt   30  2095899.200 ± 51078.519  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableLastTest._Benchmark.benchmark_emptyLastOrErrorObservable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableLastTest._Benchmark.benchmark_emptyLastOrErrorObservable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 129458.070 ops/s
# Warmup Iteration   2: 503295.354 ops/s
# Warmup Iteration   3: 529228.651 ops/s
# Warmup Iteration   4: 500494.140 ops/s
# Warmup Iteration   5: 592064.706 ops/s
# Warmup Iteration   6: 581069.558 ops/s
# Warmup Iteration   7: 558089.377 ops/s
# Warmup Iteration   8: 579566.311 ops/s
# Warmup Iteration   9: 581832.295 ops/s
# Warmup Iteration  10: 567737.087 ops/s
# Warmup Iteration  11: 575084.749 ops/s
# Warmup Iteration  12: 568635.346 ops/s
# Warmup Iteration  13: 599428.896 ops/s
# Warmup Iteration  14: 563130.143 ops/s
# Warmup Iteration  15: 574280.363 ops/s
# Warmup Iteration  16: 595149.823 ops/s
# Warmup Iteration  17: 584562.351 ops/s
# Warmup Iteration  18: 608153.223 ops/s
# Warmup Iteration  19: 591052.300 ops/s
# Warmup Iteration  20: 591180.019 ops/s
# Warmup Iteration  21: 605689.635 ops/s
# Warmup Iteration  22: 613686.894 ops/s
# Warmup Iteration  23: 578839.053 ops/s
# Warmup Iteration  24: 603203.549 ops/s
# Warmup Iteration  25: 613986.303 ops/s
# Warmup Iteration  26: 595314.019 ops/s
# Warmup Iteration  27: 609656.238 ops/s
# Warmup Iteration  28: 595337.423 ops/s
# Warmup Iteration  29: 608585.306 ops/s
# Warmup Iteration  30: 605096.509 ops/s
Iteration   1: 596156.587 ops/s
Iteration   2: 611928.443 ops/s
Iteration   3: 599298.870 ops/s
Iteration   4: 594093.423 ops/s
Iteration   5: 618443.831 ops/s
Iteration   6: 577979.034 ops/s
Iteration   7: 615643.116 ops/s
Iteration   8: 593822.723 ops/s
Iteration   9: 596508.493 ops/s
Iteration  10: 605662.732 ops/s
Iteration  11: 600689.270 ops/s
Iteration  12: 583961.965 ops/s
Iteration  13: 596418.561 ops/s
Iteration  14: 577940.711 ops/s
Iteration  15: 584796.955 ops/s
Iteration  16: 592978.422 ops/s
Iteration  17: 591075.628 ops/s
Iteration  18: 595133.028 ops/s
Iteration  19: 618647.479 ops/s
Iteration  20: 576458.400 ops/s
Iteration  21: 612169.280 ops/s
Iteration  22: 596862.361 ops/s
Iteration  23: 602877.151 ops/s
Iteration  24: 600970.822 ops/s
Iteration  25: 610433.213 ops/s
Iteration  26: 616514.000 ops/s
Iteration  27: 593931.368 ops/s
Iteration  28: 597519.266 ops/s
Iteration  29: 599099.176 ops/s
Iteration  30: 609079.212 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableLastTest._Benchmark.benchmark_emptyLastOrErrorObservable":
  598903.117 ±(99.9%) 7872.387 ops/s [Average]
  (min, avg, max) = (576458.400, 598903.117, 618647.479), stdev = 11783.019
  CI (99.9%): [591030.730, 606775.505] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score      Error  Units
ObservableLastTest._Benchmark.benchmark_emptyLastOrErrorObservable  thrpt   30  598903.117 ± 7872.387  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromSingleTest._Benchmark.benchmark_error$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromSingleTest._Benchmark.benchmark_error

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 197840.975 ops/s
# Warmup Iteration   2: 574743.872 ops/s
# Warmup Iteration   3: 684208.233 ops/s
# Warmup Iteration   4: 625685.494 ops/s
# Warmup Iteration   5: 684962.050 ops/s
# Warmup Iteration   6: 616891.354 ops/s
# Warmup Iteration   7: 728222.697 ops/s
# Warmup Iteration   8: 686170.696 ops/s
# Warmup Iteration   9: 672464.550 ops/s
# Warmup Iteration  10: 736681.871 ops/s
# Warmup Iteration  11: 721816.293 ops/s
# Warmup Iteration  12: 696905.095 ops/s
# Warmup Iteration  13: 710233.269 ops/s
# Warmup Iteration  14: 701766.503 ops/s
# Warmup Iteration  15: 702792.119 ops/s
# Warmup Iteration  16: 709217.031 ops/s
# Warmup Iteration  17: 756414.338 ops/s
# Warmup Iteration  18: 733058.567 ops/s
# Warmup Iteration  19: 756185.998 ops/s
# Warmup Iteration  20: 712950.800 ops/s
# Warmup Iteration  21: 741596.748 ops/s
# Warmup Iteration  22: 758151.858 ops/s
# Warmup Iteration  23: 716209.576 ops/s
# Warmup Iteration  24: 736496.629 ops/s
# Warmup Iteration  25: 747506.612 ops/s
# Warmup Iteration  26: 741292.146 ops/s
# Warmup Iteration  27: 730874.240 ops/s
# Warmup Iteration  28: 715198.918 ops/s
# Warmup Iteration  29: 747556.466 ops/s
# Warmup Iteration  30: 717924.295 ops/s
Iteration   1: 760620.651 ops/s
Iteration   2: 760013.857 ops/s
Iteration   3: 728879.273 ops/s
Iteration   4: 767966.212 ops/s
Iteration   5: 715137.669 ops/s
Iteration   6: 737244.091 ops/s
Iteration   7: 767564.561 ops/s
Iteration   8: 728785.777 ops/s
Iteration   9: 753193.418 ops/s
Iteration  10: 754872.588 ops/s
Iteration  11: 734940.563 ops/s
Iteration  12: 619871.104 ops/s
Iteration  13: 667895.372 ops/s
Iteration  14: 734121.793 ops/s
Iteration  15: 745973.729 ops/s
Iteration  16: 740509.950 ops/s
Iteration  17: 736495.536 ops/s
Iteration  18: 752005.791 ops/s
Iteration  19: 748874.635 ops/s
Iteration  20: 750174.689 ops/s
Iteration  21: 756806.656 ops/s
Iteration  22: 732711.349 ops/s
Iteration  23: 759319.254 ops/s
Iteration  24: 757791.255 ops/s
Iteration  25: 745355.791 ops/s
Iteration  26: 761991.541 ops/s
Iteration  27: 733018.247 ops/s
Iteration  28: 739843.065 ops/s
Iteration  29: 759614.865 ops/s
Iteration  30: 732372.676 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFromSingleTest._Benchmark.benchmark_error":
  739465.532 ±(99.9%) 19898.377 ops/s [Average]
  (min, avg, max) = (619871.104, 739465.532, 767966.212), stdev = 29782.957
  CI (99.9%): [719567.155, 759363.909] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score       Error  Units
ObservableFromSingleTest._Benchmark.benchmark_error  thrpt   30  739465.532 ± 19898.377  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingleTest._Benchmark.benchmark_simple$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingleTest._Benchmark.benchmark_simple

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 474088.120 ops/s
# Warmup Iteration   2: 1226934.366 ops/s
# Warmup Iteration   3: 1412237.021 ops/s
# Warmup Iteration   4: 1457024.279 ops/s
# Warmup Iteration   5: 1597598.283 ops/s
# Warmup Iteration   6: 1482950.884 ops/s
# Warmup Iteration   7: 1494623.402 ops/s
# Warmup Iteration   8: 1532520.225 ops/s
# Warmup Iteration   9: 1427434.991 ops/s
# Warmup Iteration  10: 1569513.432 ops/s
# Warmup Iteration  11: 1535982.704 ops/s
# Warmup Iteration  12: 1462070.057 ops/s
# Warmup Iteration  13: 1545649.590 ops/s
# Warmup Iteration  14: 1476185.538 ops/s
# Warmup Iteration  15: 1526614.129 ops/s
# Warmup Iteration  16: 1434442.917 ops/s
# Warmup Iteration  17: 1559727.585 ops/s
# Warmup Iteration  18: 1522074.171 ops/s
# Warmup Iteration  19: 1465964.062 ops/s
# Warmup Iteration  20: 1547888.390 ops/s
# Warmup Iteration  21: 1380814.070 ops/s
# Warmup Iteration  22: 1523783.365 ops/s
# Warmup Iteration  23: 1417006.147 ops/s
# Warmup Iteration  24: 1546587.679 ops/s
# Warmup Iteration  25: 1572711.263 ops/s
# Warmup Iteration  26: 1515288.121 ops/s
# Warmup Iteration  27: 1551741.365 ops/s
# Warmup Iteration  28: 1502729.326 ops/s
# Warmup Iteration  29: 1502998.508 ops/s
# Warmup Iteration  30: 1534042.951 ops/s
Iteration   1: 1495115.428 ops/s
Iteration   2: 1538556.730 ops/s
Iteration   3: 1440539.901 ops/s
Iteration   4: 1534783.425 ops/s
Iteration   5: 1542134.837 ops/s
Iteration   6: 1482920.363 ops/s
Iteration   7: 1588197.763 ops/s
Iteration   8: 1593503.757 ops/s
Iteration   9: 1485848.468 ops/s
Iteration  10: 1596687.221 ops/s
Iteration  11: 1466210.973 ops/s
Iteration  12: 1552446.058 ops/s
Iteration  13: 1493695.698 ops/s
Iteration  14: 1494966.173 ops/s
Iteration  15: 1519120.878 ops/s
Iteration  16: 1565329.567 ops/s
Iteration  17: 1485735.816 ops/s
Iteration  18: 1555961.842 ops/s
Iteration  19: 1442991.792 ops/s
Iteration  20: 1560604.186 ops/s
Iteration  21: 1531526.647 ops/s
Iteration  22: 1496735.671 ops/s
Iteration  23: 1574995.392 ops/s
Iteration  24: 1509668.964 ops/s
Iteration  25: 1564211.000 ops/s
Iteration  26: 1513232.780 ops/s
Iteration  27: 1541283.339 ops/s
Iteration  28: 1532278.932 ops/s
Iteration  29: 1515000.761 ops/s
Iteration  30: 1595684.553 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingleTest._Benchmark.benchmark_simple":
  1526998.964 ±(99.9%) 28969.046 ops/s [Average]
  (min, avg, max) = (1440539.901, 1526998.964, 1596687.221), stdev = 43359.508
  CI (99.9%): [1498029.918, 1555968.010] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
ObservableConcatMapSingleTest._Benchmark.benchmark_simple  thrpt   30  1526998.964 ± 28969.046  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSingleTest._Benchmark.benchmark_singleOrError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSingleTest._Benchmark.benchmark_singleOrError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 171856.471 ops/s
# Warmup Iteration   2: 481141.159 ops/s
# Warmup Iteration   3: 555056.364 ops/s
# Warmup Iteration   4: 554045.978 ops/s
# Warmup Iteration   5: 591324.641 ops/s
# Warmup Iteration   6: 564288.768 ops/s
# Warmup Iteration   7: 592447.599 ops/s
# Warmup Iteration   8: 557504.305 ops/s
# Warmup Iteration   9: 561443.028 ops/s
# Warmup Iteration  10: 581212.383 ops/s
# Warmup Iteration  11: 566237.995 ops/s
# Warmup Iteration  12: 576366.280 ops/s
# Warmup Iteration  13: 570211.347 ops/s
# Warmup Iteration  14: 566431.822 ops/s
# Warmup Iteration  15: 588237.356 ops/s
# Warmup Iteration  16: 563375.855 ops/s
# Warmup Iteration  17: 614046.489 ops/s
# Warmup Iteration  18: 600587.963 ops/s
# Warmup Iteration  19: 620761.990 ops/s
# Warmup Iteration  20: 619781.598 ops/s
# Warmup Iteration  21: 568457.402 ops/s
# Warmup Iteration  22: 598984.952 ops/s
# Warmup Iteration  23: 615134.996 ops/s
# Warmup Iteration  24: 588293.829 ops/s
# Warmup Iteration  25: 637976.142 ops/s
# Warmup Iteration  26: 591496.436 ops/s
# Warmup Iteration  27: 594947.293 ops/s
# Warmup Iteration  28: 611213.724 ops/s
# Warmup Iteration  29: 605206.955 ops/s
# Warmup Iteration  30: 592995.990 ops/s
Iteration   1: 598010.980 ops/s
Iteration   2: 615995.652 ops/s
Iteration   3: 612749.561 ops/s
Iteration   4: 597631.222 ops/s
Iteration   5: 608689.225 ops/s
Iteration   6: 604430.334 ops/s
Iteration   7: 491206.359 ops/s
Iteration   8: 621668.916 ops/s
Iteration   9: 598108.662 ops/s
Iteration  10: 591163.957 ops/s
Iteration  11: 576807.746 ops/s
Iteration  12: 610565.350 ops/s
Iteration  13: 608158.422 ops/s
Iteration  14: 608635.221 ops/s
Iteration  15: 622416.439 ops/s
Iteration  16: 591061.414 ops/s
Iteration  17: 610790.065 ops/s
Iteration  18: 615249.320 ops/s
Iteration  19: 594776.896 ops/s
Iteration  20: 612347.646 ops/s
Iteration  21: 625172.178 ops/s
Iteration  22: 584151.551 ops/s
Iteration  23: 627235.337 ops/s
Iteration  24: 639923.861 ops/s
Iteration  25: 581312.374 ops/s
Iteration  26: 624928.234 ops/s
Iteration  27: 598248.471 ops/s
Iteration  28: 616399.894 ops/s
Iteration  29: 623922.240 ops/s
Iteration  30: 590625.838 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableSingleTest._Benchmark.benchmark_singleOrError":
  603412.779 ±(99.9%) 17362.958 ops/s [Average]
  (min, avg, max) = (491206.359, 603412.779, 639923.861), stdev = 25988.060
  CI (99.9%): [586049.821, 620775.737] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score       Error  Units
ObservableSingleTest._Benchmark.benchmark_singleOrError  thrpt   30  603412.779 ± 17362.958  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingleTest._Benchmark.benchmark_mapperCrashScalar$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingleTest._Benchmark.benchmark_mapperCrashScalar

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 146551.862 ops/s
# Warmup Iteration   2: 545859.149 ops/s
# Warmup Iteration   3: 629939.917 ops/s
# Warmup Iteration   4: 640832.303 ops/s
# Warmup Iteration   5: 627521.887 ops/s
# Warmup Iteration   6: 608388.691 ops/s
# Warmup Iteration   7: 636618.963 ops/s
# Warmup Iteration   8: 608825.450 ops/s
# Warmup Iteration   9: 653826.915 ops/s
# Warmup Iteration  10: 620570.797 ops/s
# Warmup Iteration  11: 604706.403 ops/s
# Warmup Iteration  12: 655890.049 ops/s
# Warmup Iteration  13: 601630.963 ops/s
# Warmup Iteration  14: 647119.070 ops/s
# Warmup Iteration  15: 619690.385 ops/s
# Warmup Iteration  16: 636137.499 ops/s
# Warmup Iteration  17: 674299.102 ops/s
# Warmup Iteration  18: 656252.481 ops/s
# Warmup Iteration  19: 688596.450 ops/s
# Warmup Iteration  20: 641438.429 ops/s
# Warmup Iteration  21: 706640.125 ops/s
# Warmup Iteration  22: 629742.978 ops/s
# Warmup Iteration  23: 642233.262 ops/s
# Warmup Iteration  24: 639137.989 ops/s
# Warmup Iteration  25: 696521.778 ops/s
# Warmup Iteration  26: 653508.931 ops/s
# Warmup Iteration  27: 701164.404 ops/s
# Warmup Iteration  28: 659173.979 ops/s
# Warmup Iteration  29: 660509.103 ops/s
# Warmup Iteration  30: 694495.331 ops/s
Iteration   1: 649643.572 ops/s
Iteration   2: 670342.394 ops/s
Iteration   3: 675816.835 ops/s
Iteration   4: 648008.643 ops/s
Iteration   5: 668991.369 ops/s
Iteration   6: 662944.394 ops/s
Iteration   7: 669581.476 ops/s
Iteration   8: 687302.820 ops/s
Iteration   9: 651030.162 ops/s
Iteration  10: 664224.179 ops/s
Iteration  11: 687480.683 ops/s
Iteration  12: 655358.665 ops/s
Iteration  13: 688532.474 ops/s
Iteration  14: 668700.483 ops/s
Iteration  15: 678717.452 ops/s
Iteration  16: 656098.579 ops/s
Iteration  17: 651108.631 ops/s
Iteration  18: 670372.383 ops/s
Iteration  19: 650286.457 ops/s
Iteration  20: 677453.534 ops/s
Iteration  21: 677280.690 ops/s
Iteration  22: 669876.729 ops/s
Iteration  23: 683210.687 ops/s
Iteration  24: 653581.688 ops/s
Iteration  25: 684100.766 ops/s
Iteration  26: 655726.585 ops/s
Iteration  27: 688888.990 ops/s
Iteration  28: 675195.046 ops/s
Iteration  29: 640469.567 ops/s
Iteration  30: 701062.800 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingleTest._Benchmark.benchmark_mapperCrashScalar":
  668712.958 ±(99.9%) 10141.365 ops/s [Average]
  (min, avg, max) = (640469.567, 668712.958, 701062.800), stdev = 15179.118
  CI (99.9%): [658571.593, 678854.322] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score       Error  Units
ObservableConcatMapSingleTest._Benchmark.benchmark_mapperCrashScalar  thrpt   30  668712.958 ± 10141.365  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingleTest._Benchmark.benchmark_scalarEmptySource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingleTest._Benchmark.benchmark_scalarEmptySource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1981142.929 ops/s
# Warmup Iteration   2: 6297067.408 ops/s
# Warmup Iteration   3: 8433313.666 ops/s
# Warmup Iteration   4: 8557374.223 ops/s
# Warmup Iteration   5: 8711420.642 ops/s
# Warmup Iteration   6: 8467453.698 ops/s
# Warmup Iteration   7: 8291724.059 ops/s
# Warmup Iteration   8: 8882597.799 ops/s
# Warmup Iteration   9: 8433489.243 ops/s
# Warmup Iteration  10: 8336125.731 ops/s
# Warmup Iteration  11: 8422146.059 ops/s
# Warmup Iteration  12: 9079978.331 ops/s
# Warmup Iteration  13: 8234815.671 ops/s
# Warmup Iteration  14: 8867613.980 ops/s
# Warmup Iteration  15: 8356599.644 ops/s
# Warmup Iteration  16: 8743312.108 ops/s
# Warmup Iteration  17: 8803571.747 ops/s
# Warmup Iteration  18: 8369249.556 ops/s
# Warmup Iteration  19: 8569476.750 ops/s
# Warmup Iteration  20: 8875164.780 ops/s
# Warmup Iteration  21: 8397814.232 ops/s
# Warmup Iteration  22: 8798768.965 ops/s
# Warmup Iteration  23: 8235782.307 ops/s
# Warmup Iteration  24: 8242067.507 ops/s
# Warmup Iteration  25: 8829158.029 ops/s
# Warmup Iteration  26: 8270719.906 ops/s
# Warmup Iteration  27: 8782627.989 ops/s
# Warmup Iteration  28: 8166903.820 ops/s
# Warmup Iteration  29: 8683051.463 ops/s
# Warmup Iteration  30: 8382050.188 ops/s
Iteration   1: 8414633.279 ops/s
Iteration   2: 7190795.586 ops/s
Iteration   3: 8467291.787 ops/s
Iteration   4: 8632880.509 ops/s
Iteration   5: 8524831.535 ops/s
Iteration   6: 8745001.072 ops/s
Iteration   7: 8655361.277 ops/s
Iteration   8: 8323423.600 ops/s
Iteration   9: 8912937.448 ops/s
Iteration  10: 8107919.373 ops/s
Iteration  11: 8557637.930 ops/s
Iteration  12: 8845882.781 ops/s
Iteration  13: 8635646.543 ops/s
Iteration  14: 8336713.581 ops/s
Iteration  15: 8530854.791 ops/s
Iteration  16: 8263988.138 ops/s
Iteration  17: 8408124.247 ops/s
Iteration  18: 8542708.689 ops/s
Iteration  19: 8539879.524 ops/s
Iteration  20: 8627961.537 ops/s
Iteration  21: 8417043.397 ops/s
Iteration  22: 8756729.116 ops/s
Iteration  23: 8368783.298 ops/s
Iteration  24: 8692865.297 ops/s
Iteration  25: 8552940.804 ops/s
Iteration  26: 8487010.971 ops/s
Iteration  27: 8750418.482 ops/s
Iteration  28: 8535013.774 ops/s
Iteration  29: 8749602.424 ops/s
Iteration  30: 8409317.332 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingleTest._Benchmark.benchmark_scalarEmptySource":
  8499473.271 ±(99.9%) 203775.991 ops/s [Average]
  (min, avg, max) = (7190795.586, 8499473.271, 8912937.448), stdev = 305002.333
  CI (99.9%): [8295697.280, 8703249.262] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score        Error  Units
ObservableConcatMapSingleTest._Benchmark.benchmark_scalarEmptySource  thrpt   30  8499473.271 ± 203775.991  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromTest._Benchmark.benchmark_unsubscription$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromTest._Benchmark.benchmark_unsubscription

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 482619.741 ops/s
# Warmup Iteration   2: 1772134.061 ops/s
# Warmup Iteration   3: 2443560.633 ops/s
# Warmup Iteration   4: 2578300.025 ops/s
# Warmup Iteration   5: 2437120.445 ops/s
# Warmup Iteration   6: 2540139.346 ops/s
# Warmup Iteration   7: 2510829.987 ops/s
# Warmup Iteration   8: 2484574.209 ops/s
# Warmup Iteration   9: 2566913.199 ops/s
# Warmup Iteration  10: 2487839.124 ops/s
# Warmup Iteration  11: 2477381.671 ops/s
# Warmup Iteration  12: 2583848.333 ops/s
# Warmup Iteration  13: 2322471.280 ops/s
# Warmup Iteration  14: 2400748.563 ops/s
# Warmup Iteration  15: 2491570.831 ops/s
# Warmup Iteration  16: 2569846.791 ops/s
# Warmup Iteration  17: 2580416.328 ops/s
# Warmup Iteration  18: 2502926.882 ops/s
# Warmup Iteration  19: 2601911.672 ops/s
# Warmup Iteration  20: 2533139.748 ops/s
# Warmup Iteration  21: 2595078.974 ops/s
# Warmup Iteration  22: 2526275.453 ops/s
# Warmup Iteration  23: 2593920.578 ops/s
# Warmup Iteration  24: 2541849.407 ops/s
# Warmup Iteration  25: 2475685.494 ops/s
# Warmup Iteration  26: 2619475.225 ops/s
# Warmup Iteration  27: 2492409.895 ops/s
# Warmup Iteration  28: 2618741.811 ops/s
# Warmup Iteration  29: 2533121.530 ops/s
# Warmup Iteration  30: 2585263.233 ops/s
Iteration   1: 2606405.355 ops/s
Iteration   2: 2485196.012 ops/s
Iteration   3: 2517302.804 ops/s
Iteration   4: 2549420.833 ops/s
Iteration   5: 2617089.174 ops/s
Iteration   6: 2506707.190 ops/s
Iteration   7: 2523183.102 ops/s
Iteration   8: 2581465.775 ops/s
Iteration   9: 2541211.541 ops/s
Iteration  10: 2636742.826 ops/s
Iteration  11: 2467417.482 ops/s
Iteration  12: 2624044.431 ops/s
Iteration  13: 2449835.778 ops/s
Iteration  14: 2497732.247 ops/s
Iteration  15: 2522980.578 ops/s
Iteration  16: 2473319.459 ops/s
Iteration  17: 2649648.519 ops/s
Iteration  18: 2451733.596 ops/s
Iteration  19: 2538759.077 ops/s
Iteration  20: 2524879.882 ops/s
Iteration  21: 2567088.284 ops/s
Iteration  22: 2565282.268 ops/s
Iteration  23: 2530106.297 ops/s
Iteration  24: 2591203.652 ops/s
Iteration  25: 2607728.452 ops/s
Iteration  26: 2484594.127 ops/s
Iteration  27: 2559118.764 ops/s
Iteration  28: 2427478.211 ops/s
Iteration  29: 2605255.547 ops/s
Iteration  30: 2553743.321 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromTest._Benchmark.benchmark_unsubscription":
  2541889.153 ±(99.9%) 39734.889 ops/s [Average]
  (min, avg, max) = (2427478.211, 2541889.153, 2649648.519), stdev = 59473.316
  CI (99.9%): [2502154.264, 2581624.042] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
ObservableWithLatestFromTest._Benchmark.benchmark_unsubscription  thrpt   30  2541889.153 ± 39734.889  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchTest._Benchmark.benchmark_switchMapSingleFunctionDoesntReturnSingle$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchTest._Benchmark.benchmark_switchMapSingleFunctionDoesntReturnSingle

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.703 ops/s
# Warmup Iteration   2: 45575.226 ops/s
# Warmup Iteration   3: 193190.789 ops/s
# Warmup Iteration   4: 267744.771 ops/s
# Warmup Iteration   5: 845602.710 ops/s
# Warmup Iteration   6: 993237.651 ops/s
# Warmup Iteration   7: 967224.303 ops/s
# Warmup Iteration   8: 978111.447 ops/s
# Warmup Iteration   9: 841671.546 ops/s
# Warmup Iteration  10: 1032137.624 ops/s
# Warmup Iteration  11: 1039516.378 ops/s
# Warmup Iteration  12: 990358.758 ops/s
# Warmup Iteration  13: 1046792.655 ops/s
# Warmup Iteration  14: 983843.618 ops/s
# Warmup Iteration  15: 1041188.955 ops/s
# Warmup Iteration  16: 1037827.872 ops/s
# Warmup Iteration  17: 1004862.008 ops/s
# Warmup Iteration  18: 1033958.457 ops/s
# Warmup Iteration  19: 984384.064 ops/s
# Warmup Iteration  20: 1059909.909 ops/s
# Warmup Iteration  21: 1002211.212 ops/s
# Warmup Iteration  22: 1005614.347 ops/s
# Warmup Iteration  23: 1006349.861 ops/s
# Warmup Iteration  24: 986163.386 ops/s
# Warmup Iteration  25: 1020194.792 ops/s
# Warmup Iteration  26: 819894.573 ops/s
# Warmup Iteration  27: 1028192.359 ops/s
# Warmup Iteration  28: 1016773.752 ops/s
# Warmup Iteration  29: 986871.638 ops/s
# Warmup Iteration  30: 1074206.977 ops/s
Iteration   1: 980512.150 ops/s
Iteration   2: 1005205.116 ops/s
Iteration   3: 1004191.239 ops/s
Iteration   4: 1031730.373 ops/s
Iteration   5: 1003068.801 ops/s
Iteration   6: 997163.813 ops/s
Iteration   7: 1066009.342 ops/s
Iteration   8: 990374.445 ops/s
Iteration   9: 1048790.255 ops/s
Iteration  10: 990187.877 ops/s
Iteration  11: 1019845.629 ops/s
Iteration  12: 1015638.387 ops/s
Iteration  13: 996711.150 ops/s
Iteration  14: 1046416.525 ops/s
Iteration  15: 999519.872 ops/s
Iteration  16: 1014814.924 ops/s
Iteration  17: 1064689.830 ops/s
Iteration  18: 1033969.681 ops/s
Iteration  19: 999915.468 ops/s
Iteration  20: 1038159.006 ops/s
Iteration  21: 1000514.032 ops/s
Iteration  22: 1002433.617 ops/s
Iteration  23: 982696.521 ops/s
Iteration  24: 1019650.670 ops/s
Iteration  25: 1005594.841 ops/s
Iteration  26: 995753.793 ops/s
Iteration  27: 993306.017 ops/s
Iteration  28: 1055856.582 ops/s
Iteration  29: 980845.971 ops/s
Iteration  30: 1027154.555 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchTest._Benchmark.benchmark_switchMapSingleFunctionDoesntReturnSingle":
  1013690.683 ±(99.9%) 16450.103 ops/s [Average]
  (min, avg, max) = (980512.150, 1013690.683, 1066009.342), stdev = 24621.742
  CI (99.9%): [997240.580, 1030140.786] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             Mode  Cnt        Score       Error  Units
ObservableSwitchTest._Benchmark.benchmark_switchMapSingleFunctionDoesntReturnSingle  thrpt   30  1013690.683 ± 16450.103  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_innerEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_innerEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 310716.506 ops/s
# Warmup Iteration   2: 2218181.436 ops/s
# Warmup Iteration   3: 3084778.799 ops/s
# Warmup Iteration   4: 3397464.440 ops/s
# Warmup Iteration   5: 3551454.300 ops/s
# Warmup Iteration   6: 3605446.778 ops/s
# Warmup Iteration   7: 3373488.804 ops/s
# Warmup Iteration   8: 3579555.682 ops/s
# Warmup Iteration   9: 3395149.828 ops/s
# Warmup Iteration  10: 3555120.850 ops/s
# Warmup Iteration  11: 3585232.519 ops/s
# Warmup Iteration  12: 3674767.293 ops/s
# Warmup Iteration  13: 3367403.582 ops/s
# Warmup Iteration  14: 3676504.120 ops/s
# Warmup Iteration  15: 3504305.924 ops/s
# Warmup Iteration  16: 3503354.107 ops/s
# Warmup Iteration  17: 3581633.644 ops/s
# Warmup Iteration  18: 3536307.017 ops/s
# Warmup Iteration  19: 3532468.099 ops/s
# Warmup Iteration  20: 3505670.410 ops/s
# Warmup Iteration  21: 3378351.151 ops/s
# Warmup Iteration  22: 3701566.618 ops/s
# Warmup Iteration  23: 3325540.901 ops/s
# Warmup Iteration  24: 3576041.184 ops/s
# Warmup Iteration  25: 3454130.314 ops/s
# Warmup Iteration  26: 3529177.566 ops/s
# Warmup Iteration  27: 3447852.765 ops/s
# Warmup Iteration  28: 3389093.822 ops/s
# Warmup Iteration  29: 3590768.784 ops/s
# Warmup Iteration  30: 3625938.960 ops/s
Iteration   1: 3427118.134 ops/s
Iteration   2: 3491124.340 ops/s
Iteration   3: 3438941.786 ops/s
Iteration   4: 3526720.401 ops/s
Iteration   5: 3545961.226 ops/s
Iteration   6: 3392661.954 ops/s
Iteration   7: 3734657.314 ops/s
Iteration   8: 3428348.556 ops/s
Iteration   9: 3609251.986 ops/s
Iteration  10: 3463080.688 ops/s
Iteration  11: 3586142.142 ops/s
Iteration  12: 3645084.101 ops/s
Iteration  13: 3444138.240 ops/s
Iteration  14: 3575010.128 ops/s
Iteration  15: 3456194.534 ops/s
Iteration  16: 3439347.714 ops/s
Iteration  17: 3606432.076 ops/s
Iteration  18: 3353729.855 ops/s
Iteration  19: 3552028.297 ops/s
Iteration  20: 3602554.482 ops/s
Iteration  21: 3528947.797 ops/s
Iteration  22: 3597692.506 ops/s
Iteration  23: 3251543.406 ops/s
Iteration  24: 3649780.997 ops/s
Iteration  25: 3535957.324 ops/s
Iteration  26: 3538392.014 ops/s
Iteration  27: 3392378.508 ops/s
Iteration  28: 3386535.718 ops/s
Iteration  29: 3527877.644 ops/s
Iteration  30: 3438004.858 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_innerEmpty":
  3505521.291 ±(99.9%) 69210.446 ops/s [Average]
  (min, avg, max) = (3251543.406, 3505521.291, 3734657.314), stdev = 103590.945
  CI (99.9%): [3436310.845, 3574731.737] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
ObservableConcatMapEagerTest._Benchmark.benchmark_innerEmpty  thrpt   30  3505521.291 ± 69210.446  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRetryTest._Benchmark.benchmark_retryPredicate$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRetryTest._Benchmark.benchmark_retryPredicate

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 45355.430 ops/s
# Warmup Iteration   2: 212869.663 ops/s
# Warmup Iteration   3: 318006.243 ops/s
# Warmup Iteration   4: 304503.446 ops/s
# Warmup Iteration   5: 314370.174 ops/s
# Warmup Iteration   6: 310035.627 ops/s
# Warmup Iteration   7: 291079.903 ops/s
# Warmup Iteration   8: 309069.203 ops/s
# Warmup Iteration   9: 300494.480 ops/s
# Warmup Iteration  10: 301180.259 ops/s
# Warmup Iteration  11: 308672.682 ops/s
# Warmup Iteration  12: 301235.652 ops/s
# Warmup Iteration  13: 311566.271 ops/s
# Warmup Iteration  14: 300484.844 ops/s
# Warmup Iteration  15: 302581.552 ops/s
# Warmup Iteration  16: 314006.684 ops/s
# Warmup Iteration  17: 298641.598 ops/s
# Warmup Iteration  18: 306931.049 ops/s
# Warmup Iteration  19: 328682.572 ops/s
# Warmup Iteration  20: 312260.018 ops/s
# Warmup Iteration  21: 264489.776 ops/s
# Warmup Iteration  22: 320997.697 ops/s
# Warmup Iteration  23: 303641.580 ops/s
# Warmup Iteration  24: 311297.362 ops/s
# Warmup Iteration  25: 313280.854 ops/s
# Warmup Iteration  26: 297685.333 ops/s
# Warmup Iteration  27: 320505.119 ops/s
# Warmup Iteration  28: 305485.546 ops/s
# Warmup Iteration  29: 309281.219 ops/s
# Warmup Iteration  30: 308003.278 ops/s
Iteration   1: 315818.264 ops/s
Iteration   2: 303808.567 ops/s
Iteration   3: 314737.630 ops/s
Iteration   4: 326591.631 ops/s
Iteration   5: 311353.734 ops/s
Iteration   6: 313393.945 ops/s
Iteration   7: 323098.316 ops/s
Iteration   8: 302079.889 ops/s
Iteration   9: 326814.293 ops/s
Iteration  10: 316542.149 ops/s
Iteration  11: 299292.677 ops/s
Iteration  12: 313769.008 ops/s
Iteration  13: 323823.425 ops/s
Iteration  14: 316277.105 ops/s
Iteration  15: 321840.920 ops/s
Iteration  16: 307312.173 ops/s
Iteration  17: 319902.001 ops/s
Iteration  18: 326739.089 ops/s
Iteration  19: 308287.176 ops/s
Iteration  20: 326468.690 ops/s
Iteration  21: 307588.370 ops/s
Iteration  22: 316522.061 ops/s
Iteration  23: 306398.389 ops/s
Iteration  24: 319687.398 ops/s
Iteration  25: 303014.921 ops/s
Iteration  26: 309066.960 ops/s
Iteration  27: 322055.816 ops/s
Iteration  28: 309346.588 ops/s
Iteration  29: 319829.134 ops/s
Iteration  30: 304936.088 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryTest._Benchmark.benchmark_retryPredicate":
  314546.547 ±(99.9%) 5485.566 ops/s [Average]
  (min, avg, max) = (299292.677, 314546.547, 326814.293), stdev = 8210.538
  CI (99.9%): [309060.981, 320032.113] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score      Error  Units
ObservableRetryTest._Benchmark.benchmark_retryPredicate  thrpt   30  314546.547 ± 5485.566  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableToListTest._Benchmark.benchmark_errorSingle$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableToListTest._Benchmark.benchmark_errorSingle

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 237900.366 ops/s
# Warmup Iteration   2: 525303.452 ops/s
# Warmup Iteration   3: 702940.008 ops/s
# Warmup Iteration   4: 652845.170 ops/s
# Warmup Iteration   5: 621874.461 ops/s
# Warmup Iteration   6: 694400.822 ops/s
# Warmup Iteration   7: 646475.009 ops/s
# Warmup Iteration   8: 689884.960 ops/s
# Warmup Iteration   9: 684440.033 ops/s
# Warmup Iteration  10: 654087.543 ops/s
# Warmup Iteration  11: 699853.424 ops/s
# Warmup Iteration  12: 659699.798 ops/s
# Warmup Iteration  13: 670309.836 ops/s
# Warmup Iteration  14: 685573.267 ops/s
# Warmup Iteration  15: 649848.082 ops/s
# Warmup Iteration  16: 693745.556 ops/s
# Warmup Iteration  17: 729064.773 ops/s
# Warmup Iteration  18: 714931.825 ops/s
# Warmup Iteration  19: 717897.602 ops/s
# Warmup Iteration  20: 713311.849 ops/s
# Warmup Iteration  21: 736394.314 ops/s
# Warmup Iteration  22: 733782.769 ops/s
# Warmup Iteration  23: 682517.342 ops/s
# Warmup Iteration  24: 717223.055 ops/s
# Warmup Iteration  25: 683821.235 ops/s
# Warmup Iteration  26: 715721.324 ops/s
# Warmup Iteration  27: 709262.548 ops/s
# Warmup Iteration  28: 713970.784 ops/s
# Warmup Iteration  29: 732263.992 ops/s
# Warmup Iteration  30: 654392.734 ops/s
Iteration   1: 735358.804 ops/s
Iteration   2: 726376.819 ops/s
Iteration   3: 703525.714 ops/s
Iteration   4: 719761.585 ops/s
Iteration   5: 712402.516 ops/s
Iteration   6: 705550.015 ops/s
Iteration   7: 726471.834 ops/s
Iteration   8: 713562.540 ops/s
Iteration   9: 738745.102 ops/s
Iteration  10: 687642.733 ops/s
Iteration  11: 706182.888 ops/s
Iteration  12: 727749.224 ops/s
Iteration  13: 710605.520 ops/s
Iteration  14: 709866.795 ops/s
Iteration  15: 726028.391 ops/s
Iteration  16: 704466.649 ops/s
Iteration  17: 725756.822 ops/s
Iteration  18: 706186.349 ops/s
Iteration  19: 721572.532 ops/s
Iteration  20: 697230.934 ops/s
Iteration  21: 717230.879 ops/s
Iteration  22: 715681.719 ops/s
Iteration  23: 708704.099 ops/s
Iteration  24: 708787.422 ops/s
Iteration  25: 701948.872 ops/s
Iteration  26: 747234.938 ops/s
Iteration  27: 696598.998 ops/s
Iteration  28: 732516.275 ops/s
Iteration  29: 712886.784 ops/s
Iteration  30: 710541.670 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableToListTest._Benchmark.benchmark_errorSingle":
  715239.181 ±(99.9%) 9008.386 ops/s [Average]
  (min, avg, max) = (687642.733, 715239.181, 747234.938), stdev = 13483.330
  CI (99.9%): [706230.794, 724247.567] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score      Error  Units
ObservableToListTest._Benchmark.benchmark_errorSingle  thrpt   30  715239.181 ± 9008.386  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFirstTest._Benchmark.benchmark_firstOrErrorNoElement$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFirstTest._Benchmark.benchmark_firstOrErrorNoElement

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.731 ops/s
# Warmup Iteration   2: 23678.142 ops/s
# Warmup Iteration   3: 34707.901 ops/s
# Warmup Iteration   4: 77175.039 ops/s
# Warmup Iteration   5: 123192.843 ops/s
# Warmup Iteration   6: 176184.969 ops/s
# Warmup Iteration   7: 201964.151 ops/s
# Warmup Iteration   8: 207693.633 ops/s
# Warmup Iteration   9: 195788.884 ops/s
# Warmup Iteration  10: 202596.701 ops/s
# Warmup Iteration  11: 210007.176 ops/s
# Warmup Iteration  12: 205239.379 ops/s
# Warmup Iteration  13: 204625.855 ops/s
# Warmup Iteration  14: 199939.303 ops/s
# Warmup Iteration  15: 181350.321 ops/s
# Warmup Iteration  16: 174582.533 ops/s
# Warmup Iteration  17: 199205.888 ops/s
# Warmup Iteration  18: 202946.563 ops/s
# Warmup Iteration  19: 210255.895 ops/s
# Warmup Iteration  20: 211136.565 ops/s
# Warmup Iteration  21: 200777.802 ops/s
# Warmup Iteration  22: 206125.871 ops/s
# Warmup Iteration  23: 193405.637 ops/s
# Warmup Iteration  24: 202790.928 ops/s
# Warmup Iteration  25: 209829.291 ops/s
# Warmup Iteration  26: 198489.886 ops/s
# Warmup Iteration  27: 205201.819 ops/s
# Warmup Iteration  28: 210769.555 ops/s
# Warmup Iteration  29: 195348.307 ops/s
# Warmup Iteration  30: 206771.669 ops/s
Iteration   1: 199753.012 ops/s
Iteration   2: 200738.696 ops/s
Iteration   3: 204473.806 ops/s
Iteration   4: 201920.729 ops/s
Iteration   5: 209655.697 ops/s
Iteration   6: 199118.920 ops/s
Iteration   7: 207544.487 ops/s
Iteration   8: 199380.790 ops/s
Iteration   9: 210113.383 ops/s
Iteration  10: 204661.436 ops/s
Iteration  11: 206043.706 ops/s
Iteration  12: 203326.569 ops/s
Iteration  13: 199046.586 ops/s
Iteration  14: 205209.442 ops/s
Iteration  15: 206632.470 ops/s
Iteration  16: 197497.359 ops/s
Iteration  17: 198762.059 ops/s
Iteration  18: 203112.404 ops/s
Iteration  19: 202271.287 ops/s
Iteration  20: 202838.724 ops/s
Iteration  21: 194721.968 ops/s
Iteration  22: 208416.755 ops/s
Iteration  23: 203340.795 ops/s
Iteration  24: 198690.340 ops/s
Iteration  25: 204007.659 ops/s
Iteration  26: 205320.437 ops/s
Iteration  27: 206728.710 ops/s
Iteration  28: 202053.799 ops/s
Iteration  29: 202257.034 ops/s
Iteration  30: 207345.338 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFirstTest._Benchmark.benchmark_firstOrErrorNoElement":
  203166.147 ±(99.9%) 2523.481 ops/s [Average]
  (min, avg, max) = (194721.968, 203166.147, 210113.383), stdev = 3777.028
  CI (99.9%): [200642.665, 205689.628] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
ObservableFirstTest._Benchmark.benchmark_firstOrErrorNoElement  thrpt   30  203166.147 ± 2523.481  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleZipTest._Benchmark.benchmark_noDisposeOnAllSuccess2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleZipTest._Benchmark.benchmark_noDisposeOnAllSuccess2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 716382.022 ops/s
# Warmup Iteration   2: 2422168.295 ops/s
# Warmup Iteration   3: 3328261.260 ops/s
# Warmup Iteration   4: 3503593.153 ops/s
# Warmup Iteration   5: 3483779.551 ops/s
# Warmup Iteration   6: 3486697.494 ops/s
# Warmup Iteration   7: 3606993.921 ops/s
# Warmup Iteration   8: 3467785.774 ops/s
# Warmup Iteration   9: 3598488.556 ops/s
# Warmup Iteration  10: 3540630.836 ops/s
# Warmup Iteration  11: 3371111.435 ops/s
# Warmup Iteration  12: 3633321.016 ops/s
# Warmup Iteration  13: 3399030.622 ops/s
# Warmup Iteration  14: 3650302.668 ops/s
# Warmup Iteration  15: 3566722.825 ops/s
# Warmup Iteration  16: 3682463.351 ops/s
# Warmup Iteration  17: 3564290.436 ops/s
# Warmup Iteration  18: 3577723.930 ops/s
# Warmup Iteration  19: 3426295.549 ops/s
# Warmup Iteration  20: 3591153.608 ops/s
# Warmup Iteration  21: 3353297.306 ops/s
# Warmup Iteration  22: 3662258.736 ops/s
# Warmup Iteration  23: 3471993.053 ops/s
# Warmup Iteration  24: 3462950.513 ops/s
# Warmup Iteration  25: 3476538.348 ops/s
# Warmup Iteration  26: 3458363.204 ops/s
# Warmup Iteration  27: 3638583.446 ops/s
# Warmup Iteration  28: 3461655.746 ops/s
# Warmup Iteration  29: 3638499.885 ops/s
# Warmup Iteration  30: 3521328.820 ops/s
Iteration   1: 3629517.598 ops/s
Iteration   2: 3495121.776 ops/s
Iteration   3: 3521754.793 ops/s
Iteration   4: 3458507.697 ops/s
Iteration   5: 3569977.873 ops/s
Iteration   6: 3439668.900 ops/s
Iteration   7: 3600104.302 ops/s
Iteration   8: 3525444.956 ops/s
Iteration   9: 3521648.226 ops/s
Iteration  10: 3625648.344 ops/s
Iteration  11: 3480037.971 ops/s
Iteration  12: 3718505.428 ops/s
Iteration  13: 3544615.700 ops/s
Iteration  14: 3567132.193 ops/s
Iteration  15: 3551995.811 ops/s
Iteration  16: 3540494.624 ops/s
Iteration  17: 3411806.081 ops/s
Iteration  18: 3548023.201 ops/s
Iteration  19: 3471818.260 ops/s
Iteration  20: 3580269.927 ops/s
Iteration  21: 3514744.422 ops/s
Iteration  22: 3541663.647 ops/s
Iteration  23: 3586544.942 ops/s
Iteration  24: 3520651.075 ops/s
Iteration  25: 3596179.864 ops/s
Iteration  26: 3512378.470 ops/s
Iteration  27: 3457542.152 ops/s
Iteration  28: 3583738.114 ops/s
Iteration  29: 3611584.683 ops/s
Iteration  30: 3421524.180 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleZipTest._Benchmark.benchmark_noDisposeOnAllSuccess2":
  3538288.174 ±(99.9%) 45326.985 ops/s [Average]
  (min, avg, max) = (3411806.081, 3538288.174, 3718505.428), stdev = 67843.302
  CI (99.9%): [3492961.189, 3583615.159] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
SingleZipTest._Benchmark.benchmark_noDisposeOnAllSuccess2  thrpt   30  3538288.174 ± 45326.985  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorTest._Benchmark.benchmark_collectorAccumulatorCrashToObservable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorTest._Benchmark.benchmark_collectorAccumulatorCrashToObservable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 36318.886 ops/s
# Warmup Iteration   2: 330713.746 ops/s
# Warmup Iteration   3: 485273.101 ops/s
# Warmup Iteration   4: 484395.835 ops/s
# Warmup Iteration   5: 507783.004 ops/s
# Warmup Iteration   6: 499267.057 ops/s
# Warmup Iteration   7: 495993.353 ops/s
# Warmup Iteration   8: 485876.445 ops/s
# Warmup Iteration   9: 487456.076 ops/s
# Warmup Iteration  10: 406163.313 ops/s
# Warmup Iteration  11: 499974.859 ops/s
# Warmup Iteration  12: 492661.786 ops/s
# Warmup Iteration  13: 493444.736 ops/s
# Warmup Iteration  14: 504465.974 ops/s
# Warmup Iteration  15: 501934.057 ops/s
# Warmup Iteration  16: 504366.119 ops/s
# Warmup Iteration  17: 490854.492 ops/s
# Warmup Iteration  18: 525103.402 ops/s
# Warmup Iteration  19: 505610.884 ops/s
# Warmup Iteration  20: 524481.324 ops/s
# Warmup Iteration  21: 513596.560 ops/s
# Warmup Iteration  22: 523979.395 ops/s
# Warmup Iteration  23: 519053.905 ops/s
# Warmup Iteration  24: 498029.324 ops/s
# Warmup Iteration  25: 527000.609 ops/s
# Warmup Iteration  26: 534421.176 ops/s
# Warmup Iteration  27: 507331.568 ops/s
# Warmup Iteration  28: 511301.896 ops/s
# Warmup Iteration  29: 515317.861 ops/s
# Warmup Iteration  30: 502863.008 ops/s
Iteration   1: 535001.693 ops/s
Iteration   2: 503545.262 ops/s
Iteration   3: 515204.023 ops/s
Iteration   4: 503004.578 ops/s
Iteration   5: 516861.665 ops/s
Iteration   6: 531103.653 ops/s
Iteration   7: 506741.627 ops/s
Iteration   8: 533642.348 ops/s
Iteration   9: 517991.277 ops/s
Iteration  10: 516866.368 ops/s
Iteration  11: 502664.950 ops/s
Iteration  12: 533405.664 ops/s
Iteration  13: 514041.653 ops/s
Iteration  14: 492697.076 ops/s
Iteration  15: 534815.708 ops/s
Iteration  16: 512830.581 ops/s
Iteration  17: 521159.082 ops/s
Iteration  18: 511827.694 ops/s
Iteration  19: 501700.937 ops/s
Iteration  20: 513013.344 ops/s
Iteration  21: 501559.134 ops/s
Iteration  22: 516746.868 ops/s
Iteration  23: 519813.875 ops/s
Iteration  24: 525908.272 ops/s
Iteration  25: 516371.313 ops/s
Iteration  26: 520039.973 ops/s
Iteration  27: 505372.008 ops/s
Iteration  28: 524461.524 ops/s
Iteration  29: 536802.407 ops/s
Iteration  30: 501039.229 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorTest._Benchmark.benchmark_collectorAccumulatorCrashToObservable":
  516207.793 ±(99.9%) 7986.067 ops/s [Average]
  (min, avg, max) = (492697.076, 516207.793, 536802.407), stdev = 11953.170
  CI (99.9%): [508221.726, 524193.860] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                       Mode  Cnt       Score      Error  Units
ObservableCollectWithCollectorTest._Benchmark.benchmark_collectorAccumulatorCrashToObservable  thrpt   30  516207.793 ± 7986.067  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_bufferExactBoundaryBadSource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_bufferExactBoundaryBadSource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.829 ops/s
# Warmup Iteration   2: 50482.318 ops/s
# Warmup Iteration   3: 130348.304 ops/s
# Warmup Iteration   4: 202849.746 ops/s
# Warmup Iteration   5: 202578.217 ops/s
# Warmup Iteration   6: 175037.986 ops/s
# Warmup Iteration   7: 417295.113 ops/s
# Warmup Iteration   8: 734094.755 ops/s
# Warmup Iteration   9: 698274.018 ops/s
# Warmup Iteration  10: 718551.401 ops/s
# Warmup Iteration  11: 685949.139 ops/s
# Warmup Iteration  12: 712583.581 ops/s
# Warmup Iteration  13: 697019.965 ops/s
# Warmup Iteration  14: 725315.491 ops/s
# Warmup Iteration  15: 718978.155 ops/s
# Warmup Iteration  16: 714746.363 ops/s
# Warmup Iteration  17: 717902.918 ops/s
# Warmup Iteration  18: 724525.903 ops/s
# Warmup Iteration  19: 706084.297 ops/s
# Warmup Iteration  20: 736276.745 ops/s
# Warmup Iteration  21: 715552.581 ops/s
# Warmup Iteration  22: 737321.851 ops/s
# Warmup Iteration  23: 710492.867 ops/s
# Warmup Iteration  24: 695720.040 ops/s
# Warmup Iteration  25: 736244.665 ops/s
# Warmup Iteration  26: 693017.845 ops/s
# Warmup Iteration  27: 706914.767 ops/s
# Warmup Iteration  28: 719408.403 ops/s
# Warmup Iteration  29: 712538.269 ops/s
# Warmup Iteration  30: 717556.615 ops/s
Iteration   1: 724588.055 ops/s
Iteration   2: 709355.986 ops/s
Iteration   3: 707506.017 ops/s
Iteration   4: 728212.330 ops/s
Iteration   5: 735922.492 ops/s
Iteration   6: 705751.614 ops/s
Iteration   7: 747587.464 ops/s
Iteration   8: 720817.251 ops/s
Iteration   9: 726560.122 ops/s
Iteration  10: 714990.754 ops/s
Iteration  11: 675446.223 ops/s
Iteration  12: 752066.016 ops/s
Iteration  13: 727297.145 ops/s
Iteration  14: 719280.796 ops/s
Iteration  15: 693829.545 ops/s
Iteration  16: 739008.174 ops/s
Iteration  17: 706105.843 ops/s
Iteration  18: 722258.824 ops/s
Iteration  19: 706934.699 ops/s
Iteration  20: 739236.733 ops/s
Iteration  21: 722844.546 ops/s
Iteration  22: 731188.637 ops/s
Iteration  23: 696580.546 ops/s
Iteration  24: 714659.334 ops/s
Iteration  25: 733713.132 ops/s
Iteration  26: 717156.034 ops/s
Iteration  27: 742373.968 ops/s
Iteration  28: 697492.480 ops/s
Iteration  29: 729514.369 ops/s
Iteration  30: 708361.267 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_bufferExactBoundaryBadSource":
  719888.013 ±(99.9%) 11529.168 ops/s [Average]
  (min, avg, max) = (675446.223, 719888.013, 752066.016), stdev = 17256.316
  CI (99.9%): [708358.846, 731417.181] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score       Error  Units
ObservableBufferTest._Benchmark.benchmark_bufferExactBoundaryBadSource  thrpt   30  719888.013 ± 11529.168  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDebounceTest._Benchmark.benchmark_disposeInOnNext$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDebounceTest._Benchmark.benchmark_disposeInOnNext

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.788 ops/s
# Warmup Iteration   2: 33256.463 ops/s
# Warmup Iteration   3: 114443.521 ops/s
# Warmup Iteration   4: 190467.323 ops/s
# Warmup Iteration   5: 180029.801 ops/s
# Warmup Iteration   6: 237660.878 ops/s
# Warmup Iteration   7: 604115.956 ops/s
# Warmup Iteration   8: 796842.021 ops/s
# Warmup Iteration   9: 820530.960 ops/s
# Warmup Iteration  10: 790443.990 ops/s
# Warmup Iteration  11: 807080.262 ops/s
# Warmup Iteration  12: 828953.893 ops/s
# Warmup Iteration  13: 773052.600 ops/s
# Warmup Iteration  14: 825245.945 ops/s
# Warmup Iteration  15: 786643.506 ops/s
# Warmup Iteration  16: 825370.957 ops/s
# Warmup Iteration  17: 789982.502 ops/s
# Warmup Iteration  18: 824096.649 ops/s
# Warmup Iteration  19: 795059.498 ops/s
# Warmup Iteration  20: 796145.590 ops/s
# Warmup Iteration  21: 843512.604 ops/s
# Warmup Iteration  22: 809501.462 ops/s
# Warmup Iteration  23: 831236.986 ops/s
# Warmup Iteration  24: 824405.977 ops/s
# Warmup Iteration  25: 806610.862 ops/s
# Warmup Iteration  26: 801238.835 ops/s
# Warmup Iteration  27: 861232.689 ops/s
# Warmup Iteration  28: 803249.345 ops/s
# Warmup Iteration  29: 807556.340 ops/s
# Warmup Iteration  30: 849289.102 ops/s
Iteration   1: 841564.427 ops/s
Iteration   2: 820333.026 ops/s
Iteration   3: 807964.712 ops/s
Iteration   4: 826294.827 ops/s
Iteration   5: 815592.822 ops/s
Iteration   6: 796138.910 ops/s
Iteration   7: 817382.775 ops/s
Iteration   8: 795107.159 ops/s
Iteration   9: 836214.875 ops/s
Iteration  10: 796837.752 ops/s
Iteration  11: 825836.642 ops/s
Iteration  12: 825175.841 ops/s
Iteration  13: 799606.939 ops/s
Iteration  14: 837012.726 ops/s
Iteration  15: 814134.766 ops/s
Iteration  16: 806187.113 ops/s
Iteration  17: 832866.835 ops/s
Iteration  18: 798401.680 ops/s
Iteration  19: 845416.010 ops/s
Iteration  20: 812173.937 ops/s
Iteration  21: 810644.940 ops/s
Iteration  22: 806730.311 ops/s
Iteration  23: 788633.690 ops/s
Iteration  24: 829146.015 ops/s
Iteration  25: 829736.980 ops/s
Iteration  26: 776542.257 ops/s
Iteration  27: 826730.481 ops/s
Iteration  28: 781734.521 ops/s
Iteration  29: 837611.294 ops/s
Iteration  30: 833525.390 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableDebounceTest._Benchmark.benchmark_disposeInOnNext":
  815709.322 ±(99.9%) 12256.604 ops/s [Average]
  (min, avg, max) = (776542.257, 815709.322, 845416.010), stdev = 18345.109
  CI (99.9%): [803452.718, 827965.926] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score       Error  Units
ObservableDebounceTest._Benchmark.benchmark_disposeInOnNext  thrpt   30  815709.322 ± 12256.604  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableCollectTest._Benchmark.benchmark_collectorFailureDoesNotResultInErrorAndOnNextEmissions$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableCollectTest._Benchmark.benchmark_collectorFailureDoesNotResultInErrorAndOnNextEmissions

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 139347.826 ops/s
# Warmup Iteration   2: 532809.869 ops/s
# Warmup Iteration   3: 660523.270 ops/s
# Warmup Iteration   4: 684504.582 ops/s
# Warmup Iteration   5: 670981.674 ops/s
# Warmup Iteration   6: 669000.673 ops/s
# Warmup Iteration   7: 680967.480 ops/s
# Warmup Iteration   8: 662806.803 ops/s
# Warmup Iteration   9: 688140.130 ops/s
# Warmup Iteration  10: 635590.688 ops/s
# Warmup Iteration  11: 667243.286 ops/s
# Warmup Iteration  12: 680728.127 ops/s
# Warmup Iteration  13: 678948.074 ops/s
# Warmup Iteration  14: 684859.146 ops/s
# Warmup Iteration  15: 662816.476 ops/s
# Warmup Iteration  16: 705134.766 ops/s
# Warmup Iteration  17: 691929.192 ops/s
# Warmup Iteration  18: 730416.620 ops/s
# Warmup Iteration  19: 732553.781 ops/s
# Warmup Iteration  20: 703286.225 ops/s
# Warmup Iteration  21: 724164.564 ops/s
# Warmup Iteration  22: 670607.240 ops/s
# Warmup Iteration  23: 724455.133 ops/s
# Warmup Iteration  24: 702466.970 ops/s
# Warmup Iteration  25: 695957.503 ops/s
# Warmup Iteration  26: 716245.755 ops/s
# Warmup Iteration  27: 721818.727 ops/s
# Warmup Iteration  28: 753364.541 ops/s
# Warmup Iteration  29: 688775.742 ops/s
# Warmup Iteration  30: 727184.779 ops/s
Iteration   1: 725012.049 ops/s
Iteration   2: 728252.297 ops/s
Iteration   3: 738994.396 ops/s
Iteration   4: 712712.672 ops/s
Iteration   5: 729267.919 ops/s
Iteration   6: 694253.228 ops/s
Iteration   7: 703651.183 ops/s
Iteration   8: 725452.748 ops/s
Iteration   9: 688238.981 ops/s
Iteration  10: 744192.294 ops/s
Iteration  11: 698685.441 ops/s
Iteration  12: 736384.851 ops/s
Iteration  13: 744116.351 ops/s
Iteration  14: 700615.832 ops/s
Iteration  15: 665041.766 ops/s
Iteration  16: 730096.647 ops/s
Iteration  17: 741696.538 ops/s
Iteration  18: 726680.647 ops/s
Iteration  19: 691416.650 ops/s
Iteration  20: 743923.263 ops/s
Iteration  21: 699285.840 ops/s
Iteration  22: 752204.915 ops/s
Iteration  23: 739080.970 ops/s
Iteration  24: 700961.688 ops/s
Iteration  25: 724397.383 ops/s
Iteration  26: 738237.866 ops/s
Iteration  27: 695683.953 ops/s
Iteration  28: 723168.996 ops/s
Iteration  29: 704790.120 ops/s
Iteration  30: 719324.883 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableCollectTest._Benchmark.benchmark_collectorFailureDoesNotResultInErrorAndOnNextEmissions":
  718860.746 ±(99.9%) 14250.266 ops/s [Average]
  (min, avg, max) = (665041.766, 718860.746, 752204.915), stdev = 21329.129
  CI (99.9%): [704610.479, 733111.012] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                           Mode  Cnt       Score       Error  Units
ObservableCollectTest._Benchmark.benchmark_collectorFailureDoesNotResultInErrorAndOnNextEmissions  thrpt   30  718860.746 ± 14250.266  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableCollectTest._Benchmark.benchmark_collectorFailureDoesNotResultInErrorAndOnNextEmissionsObservable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableCollectTest._Benchmark.benchmark_collectorFailureDoesNotResultInErrorAndOnNextEmissionsObservable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 198949.609 ops/s
# Warmup Iteration   2: 551812.387 ops/s
# Warmup Iteration   3: 656467.714 ops/s
# Warmup Iteration   4: 597724.721 ops/s
# Warmup Iteration   5: 683400.862 ops/s
# Warmup Iteration   6: 618851.546 ops/s
# Warmup Iteration   7: 708253.209 ops/s
# Warmup Iteration   8: 691592.704 ops/s
# Warmup Iteration   9: 723552.500 ops/s
# Warmup Iteration  10: 663049.897 ops/s
# Warmup Iteration  11: 725096.846 ops/s
# Warmup Iteration  12: 696681.315 ops/s
# Warmup Iteration  13: 687564.793 ops/s
# Warmup Iteration  14: 721993.425 ops/s
# Warmup Iteration  15: 683907.843 ops/s
# Warmup Iteration  16: 705185.333 ops/s
# Warmup Iteration  17: 770530.284 ops/s
# Warmup Iteration  18: 713440.755 ops/s
# Warmup Iteration  19: 747642.151 ops/s
# Warmup Iteration  20: 726736.725 ops/s
# Warmup Iteration  21: 754017.036 ops/s
# Warmup Iteration  22: 719955.961 ops/s
# Warmup Iteration  23: 725150.036 ops/s
# Warmup Iteration  24: 722273.996 ops/s
# Warmup Iteration  25: 713255.354 ops/s
# Warmup Iteration  26: 739500.829 ops/s
# Warmup Iteration  27: 713471.154 ops/s
# Warmup Iteration  28: 727657.953 ops/s
# Warmup Iteration  29: 749852.637 ops/s
# Warmup Iteration  30: 731497.377 ops/s
Iteration   1: 759204.699 ops/s
Iteration   2: 722252.710 ops/s
Iteration   3: 712893.318 ops/s
Iteration   4: 739804.726 ops/s
Iteration   5: 733302.042 ops/s
Iteration   6: 726374.425 ops/s
Iteration   7: 743412.497 ops/s
Iteration   8: 721432.672 ops/s
Iteration   9: 766452.569 ops/s
Iteration  10: 717126.252 ops/s
Iteration  11: 732844.165 ops/s
Iteration  12: 714500.817 ops/s
Iteration  13: 740272.543 ops/s
Iteration  14: 747259.346 ops/s
Iteration  15: 725998.302 ops/s
Iteration  16: 729078.483 ops/s
Iteration  17: 756521.053 ops/s
Iteration  18: 742452.358 ops/s
Iteration  19: 715426.023 ops/s
Iteration  20: 771093.918 ops/s
Iteration  21: 765777.134 ops/s
Iteration  22: 775584.569 ops/s
Iteration  23: 723154.665 ops/s
Iteration  24: 728713.425 ops/s
Iteration  25: 781115.536 ops/s
Iteration  26: 708160.280 ops/s
Iteration  27: 757166.106 ops/s
Iteration  28: 714706.330 ops/s
Iteration  29: 767242.006 ops/s
Iteration  30: 722172.913 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableCollectTest._Benchmark.benchmark_collectorFailureDoesNotResultInErrorAndOnNextEmissionsObservable":
  738716.529 ±(99.9%) 14220.913 ops/s [Average]
  (min, avg, max) = (708160.280, 738716.529, 781115.536), stdev = 21285.195
  CI (99.9%): [724495.616, 752937.442] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                                     Mode  Cnt       Score       Error  Units
ObservableCollectTest._Benchmark.benchmark_collectorFailureDoesNotResultInErrorAndOnNextEmissionsObservable  thrpt   30  738716.529 ± 14220.913  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDebounceTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDebounceTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.701 ops/s
# Warmup Iteration   2: 29929.430 ops/s
# Warmup Iteration   3: 155604.666 ops/s
# Warmup Iteration   4: 166022.432 ops/s
# Warmup Iteration   5: 121035.969 ops/s
# Warmup Iteration   6: 227651.204 ops/s
# Warmup Iteration   7: 335842.587 ops/s
# Warmup Iteration   8: 580690.863 ops/s
# Warmup Iteration   9: 663638.687 ops/s
# Warmup Iteration  10: 730486.382 ops/s
# Warmup Iteration  11: 703161.163 ops/s
# Warmup Iteration  12: 706137.623 ops/s
# Warmup Iteration  13: 728608.713 ops/s
# Warmup Iteration  14: 710672.070 ops/s
# Warmup Iteration  15: 728175.979 ops/s
# Warmup Iteration  16: 707355.197 ops/s
# Warmup Iteration  17: 735584.610 ops/s
# Warmup Iteration  18: 722768.759 ops/s
# Warmup Iteration  19: 703839.153 ops/s
# Warmup Iteration  20: 718693.470 ops/s
# Warmup Iteration  21: 704443.548 ops/s
# Warmup Iteration  22: 727385.718 ops/s
# Warmup Iteration  23: 736764.094 ops/s
# Warmup Iteration  24: 705283.390 ops/s
# Warmup Iteration  25: 725147.154 ops/s
# Warmup Iteration  26: 711357.641 ops/s
# Warmup Iteration  27: 727200.954 ops/s
# Warmup Iteration  28: 723289.507 ops/s
# Warmup Iteration  29: 705225.419 ops/s
# Warmup Iteration  30: 719347.603 ops/s
Iteration   1: 713047.670 ops/s
Iteration   2: 720628.353 ops/s
Iteration   3: 729630.224 ops/s
Iteration   4: 693591.183 ops/s
Iteration   5: 730646.722 ops/s
Iteration   6: 684476.509 ops/s
Iteration   7: 740503.099 ops/s
Iteration   8: 692759.286 ops/s
Iteration   9: 696735.897 ops/s
Iteration  10: 737792.805 ops/s
Iteration  11: 697833.589 ops/s
Iteration  12: 724503.447 ops/s
Iteration  13: 712157.459 ops/s
Iteration  14: 715087.119 ops/s
Iteration  15: 711009.959 ops/s
Iteration  16: 683962.329 ops/s
Iteration  17: 697927.937 ops/s
Iteration  18: 745881.579 ops/s
Iteration  19: 693173.025 ops/s
Iteration  20: 731977.329 ops/s
Iteration  21: 705326.730 ops/s
Iteration  22: 707172.546 ops/s
Iteration  23: 724943.724 ops/s
Iteration  24: 696210.577 ops/s
Iteration  25: 573160.388 ops/s
Iteration  26: 739027.017 ops/s
Iteration  27: 706320.902 ops/s
Iteration  28: 722825.942 ops/s
Iteration  29: 686156.138 ops/s
Iteration  30: 732857.081 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableDebounceTest._Benchmark.benchmark_dispose":
  708244.219 ±(99.9%) 20939.283 ops/s [Average]
  (min, avg, max) = (573160.388, 708244.219, 745881.579), stdev = 31340.936
  CI (99.9%): [687304.936, 729183.502] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score       Error  Units
ObservableDebounceTest._Benchmark.benchmark_dispose  thrpt   30  708244.219 ± 20939.283  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterableTest._Benchmark.benchmark_doesNotCallIteratorHasNextMoreThanRequiredWithBackpressure$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterableTest._Benchmark.benchmark_doesNotCallIteratorHasNextMoreThanRequiredWithBackpressure

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2125426.602 ops/s
# Warmup Iteration   2: 5131401.381 ops/s
# Warmup Iteration   3: 5777653.471 ops/s
# Warmup Iteration   4: 6961813.748 ops/s
# Warmup Iteration   5: 6698609.132 ops/s
# Warmup Iteration   6: 6838796.583 ops/s
# Warmup Iteration   7: 7105396.699 ops/s
# Warmup Iteration   8: 6766343.325 ops/s
# Warmup Iteration   9: 6980600.304 ops/s
# Warmup Iteration  10: 6579282.414 ops/s
# Warmup Iteration  11: 6782192.559 ops/s
# Warmup Iteration  12: 7141902.402 ops/s
# Warmup Iteration  13: 6699296.764 ops/s
# Warmup Iteration  14: 6688865.139 ops/s
# Warmup Iteration  15: 7063116.688 ops/s
# Warmup Iteration  16: 6872017.313 ops/s
# Warmup Iteration  17: 6770683.620 ops/s
# Warmup Iteration  18: 7075726.027 ops/s
# Warmup Iteration  19: 6723859.027 ops/s
# Warmup Iteration  20: 7054508.419 ops/s
# Warmup Iteration  21: 6737130.132 ops/s
# Warmup Iteration  22: 7077995.303 ops/s
# Warmup Iteration  23: 6760775.802 ops/s
# Warmup Iteration  24: 6784518.186 ops/s
# Warmup Iteration  25: 6879365.709 ops/s
# Warmup Iteration  26: 6434332.329 ops/s
# Warmup Iteration  27: 6937449.779 ops/s
# Warmup Iteration  28: 7018888.480 ops/s
# Warmup Iteration  29: 6904958.060 ops/s
# Warmup Iteration  30: 7029399.617 ops/s
Iteration   1: 6810235.040 ops/s
Iteration   2: 6828110.648 ops/s
Iteration   3: 6902533.872 ops/s
Iteration   4: 6872582.745 ops/s
Iteration   5: 6729837.191 ops/s
Iteration   6: 6953606.665 ops/s
Iteration   7: 6875420.561 ops/s
Iteration   8: 6795365.771 ops/s
Iteration   9: 7055840.652 ops/s
Iteration  10: 7109656.369 ops/s
Iteration  11: 6889137.603 ops/s
Iteration  12: 7047250.928 ops/s
Iteration  13: 6798763.237 ops/s
Iteration  14: 6709324.472 ops/s
Iteration  15: 6885736.694 ops/s
Iteration  16: 7002955.803 ops/s
Iteration  17: 6855067.629 ops/s
Iteration  18: 6949400.740 ops/s
Iteration  19: 6722911.735 ops/s
Iteration  20: 7109484.207 ops/s
Iteration  21: 7079387.672 ops/s
Iteration  22: 6704367.976 ops/s
Iteration  23: 7059275.030 ops/s
Iteration  24: 6801127.526 ops/s
Iteration  25: 7081436.016 ops/s
Iteration  26: 6697975.264 ops/s
Iteration  27: 7038469.394 ops/s
Iteration  28: 6821252.041 ops/s
Iteration  29: 7096295.064 ops/s
Iteration  30: 6852921.938 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterableTest._Benchmark.benchmark_doesNotCallIteratorHasNextMoreThanRequiredWithBackpressure":
  6904524.349 ±(99.9%) 90266.392 ops/s [Average]
  (min, avg, max) = (6697975.264, 6904524.349, 7109656.369), stdev = 135106.496
  CI (99.9%): [6814257.958, 6994790.741] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                                  Mode  Cnt        Score       Error  Units
FlowableFromIterableTest._Benchmark.benchmark_doesNotCallIteratorHasNextMoreThanRequiredWithBackpressure  thrpt   30  6904524.349 ± 90266.392  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_scalarInnerOuterOverflowSlowPath$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_scalarInnerOuterOverflowSlowPath

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 50917.873 ops/s
# Warmup Iteration   2: 166027.289 ops/s
# Warmup Iteration   3: 406089.959 ops/s
# Warmup Iteration   4: 397303.061 ops/s
# Warmup Iteration   5: 387014.725 ops/s
# Warmup Iteration   6: 396204.519 ops/s
# Warmup Iteration   7: 385547.136 ops/s
# Warmup Iteration   8: 420009.063 ops/s
# Warmup Iteration   9: 419261.675 ops/s
# Warmup Iteration  10: 411593.704 ops/s
# Warmup Iteration  11: 425983.428 ops/s
# Warmup Iteration  12: 436697.303 ops/s
# Warmup Iteration  13: 413635.853 ops/s
# Warmup Iteration  14: 421303.810 ops/s
# Warmup Iteration  15: 410921.143 ops/s
# Warmup Iteration  16: 430166.255 ops/s
# Warmup Iteration  17: 428988.366 ops/s
# Warmup Iteration  18: 422003.144 ops/s
# Warmup Iteration  19: 440892.573 ops/s
# Warmup Iteration  20: 434725.841 ops/s
# Warmup Iteration  21: 432362.681 ops/s
# Warmup Iteration  22: 452055.556 ops/s
# Warmup Iteration  23: 435058.768 ops/s
# Warmup Iteration  24: 413076.382 ops/s
# Warmup Iteration  25: 434092.976 ops/s
# Warmup Iteration  26: 426255.774 ops/s
# Warmup Iteration  27: 444441.054 ops/s
# Warmup Iteration  28: 422488.264 ops/s
# Warmup Iteration  29: 445610.193 ops/s
# Warmup Iteration  30: 423793.149 ops/s
Iteration   1: 432628.299 ops/s
Iteration   2: 439268.397 ops/s
Iteration   3: 420099.818 ops/s
Iteration   4: 435185.509 ops/s
Iteration   5: 417678.597 ops/s
Iteration   6: 428220.031 ops/s
Iteration   7: 448998.756 ops/s
Iteration   8: 426099.252 ops/s
Iteration   9: 434141.731 ops/s
Iteration  10: 425431.355 ops/s
Iteration  11: 447051.329 ops/s
Iteration  12: 429901.603 ops/s
Iteration  13: 437990.900 ops/s
Iteration  14: 439027.140 ops/s
Iteration  15: 426768.656 ops/s
Iteration  16: 419158.814 ops/s
Iteration  17: 449694.388 ops/s
Iteration  18: 436387.379 ops/s
Iteration  19: 425400.654 ops/s
Iteration  20: 328199.125 ops/s
Iteration  21: 440834.676 ops/s
Iteration  22: 427277.097 ops/s
Iteration  23: 443157.400 ops/s
Iteration  24: 420698.723 ops/s
Iteration  25: 435051.182 ops/s
Iteration  26: 439596.429 ops/s
Iteration  27: 425350.389 ops/s
Iteration  28: 440339.676 ops/s
Iteration  29: 430047.939 ops/s
Iteration  30: 435496.769 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_scalarInnerOuterOverflowSlowPath":
  429506.067 ±(99.9%) 14046.091 ops/s [Average]
  (min, avg, max) = (328199.125, 429506.067, 449694.388), stdev = 21023.530
  CI (99.9%): [415459.976, 443552.158] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score       Error  Units
FlowableFlatMapTest._Benchmark.benchmark_scalarInnerOuterOverflowSlowPath  thrpt   30  429506.067 ± 14046.091  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_scalarInnerOuterOverflow$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_scalarInnerOuterOverflow

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 101534.225 ops/s
# Warmup Iteration   2: 447187.818 ops/s
# Warmup Iteration   3: 479841.184 ops/s
# Warmup Iteration   4: 496212.185 ops/s
# Warmup Iteration   5: 524061.162 ops/s
# Warmup Iteration   6: 493592.975 ops/s
# Warmup Iteration   7: 515837.429 ops/s
# Warmup Iteration   8: 464948.169 ops/s
# Warmup Iteration   9: 514762.744 ops/s
# Warmup Iteration  10: 487281.645 ops/s
# Warmup Iteration  11: 503605.790 ops/s
# Warmup Iteration  12: 523273.834 ops/s
# Warmup Iteration  13: 491056.014 ops/s
# Warmup Iteration  14: 526681.322 ops/s
# Warmup Iteration  15: 483005.358 ops/s
# Warmup Iteration  16: 494943.854 ops/s
# Warmup Iteration  17: 559260.243 ops/s
# Warmup Iteration  18: 501816.748 ops/s
# Warmup Iteration  19: 530894.987 ops/s
# Warmup Iteration  20: 533900.019 ops/s
# Warmup Iteration  21: 528742.757 ops/s
# Warmup Iteration  22: 516070.643 ops/s
# Warmup Iteration  23: 540033.337 ops/s
# Warmup Iteration  24: 530796.319 ops/s
# Warmup Iteration  25: 549757.038 ops/s
# Warmup Iteration  26: 514925.613 ops/s
# Warmup Iteration  27: 535682.665 ops/s
# Warmup Iteration  28: 528910.670 ops/s
# Warmup Iteration  29: 531942.370 ops/s
# Warmup Iteration  30: 531223.180 ops/s
Iteration   1: 509966.201 ops/s
Iteration   2: 546713.738 ops/s
Iteration   3: 506827.300 ops/s
Iteration   4: 531278.166 ops/s
Iteration   5: 521026.472 ops/s
Iteration   6: 546984.327 ops/s
Iteration   7: 525736.939 ops/s
Iteration   8: 514205.501 ops/s
Iteration   9: 540791.269 ops/s
Iteration  10: 512274.760 ops/s
Iteration  11: 527307.626 ops/s
Iteration  12: 554736.468 ops/s
Iteration  13: 516144.430 ops/s
Iteration  14: 533410.446 ops/s
Iteration  15: 517728.280 ops/s
Iteration  16: 513765.580 ops/s
Iteration  17: 533152.286 ops/s
Iteration  18: 530727.805 ops/s
Iteration  19: 537825.110 ops/s
Iteration  20: 521829.745 ops/s
Iteration  21: 540683.428 ops/s
Iteration  22: 531379.243 ops/s
Iteration  23: 533706.240 ops/s
Iteration  24: 525559.497 ops/s
Iteration  25: 536794.375 ops/s
Iteration  26: 544194.784 ops/s
Iteration  27: 492329.268 ops/s
Iteration  28: 527840.124 ops/s
Iteration  29: 542549.756 ops/s
Iteration  30: 520347.474 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_scalarInnerOuterOverflow":
  527927.221 ±(99.9%) 9288.022 ops/s [Average]
  (min, avg, max) = (492329.268, 527927.221, 554736.468), stdev = 13901.876
  CI (99.9%): [518639.199, 537215.243] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score      Error  Units
FlowableFlatMapTest._Benchmark.benchmark_scalarInnerOuterOverflow  thrpt   30  527927.221 ± 9288.022  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterableTest._Benchmark.benchmark_hasNextThrowsSecondTimeSlowpath$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterableTest._Benchmark.benchmark_hasNextThrowsSecondTimeSlowpath

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 129494.803 ops/s
# Warmup Iteration   2: 509182.352 ops/s
# Warmup Iteration   3: 551633.552 ops/s
# Warmup Iteration   4: 550198.820 ops/s
# Warmup Iteration   5: 523853.957 ops/s
# Warmup Iteration   6: 537299.392 ops/s
# Warmup Iteration   7: 607555.320 ops/s
# Warmup Iteration   8: 563245.155 ops/s
# Warmup Iteration   9: 602310.280 ops/s
# Warmup Iteration  10: 580264.178 ops/s
# Warmup Iteration  11: 586254.166 ops/s
# Warmup Iteration  12: 598644.218 ops/s
# Warmup Iteration  13: 583472.124 ops/s
# Warmup Iteration  14: 583071.300 ops/s
# Warmup Iteration  15: 590054.149 ops/s
# Warmup Iteration  16: 586697.091 ops/s
# Warmup Iteration  17: 604469.722 ops/s
# Warmup Iteration  18: 630256.859 ops/s
# Warmup Iteration  19: 634630.238 ops/s
# Warmup Iteration  20: 598165.103 ops/s
# Warmup Iteration  21: 644771.642 ops/s
# Warmup Iteration  22: 614444.939 ops/s
# Warmup Iteration  23: 593789.635 ops/s
# Warmup Iteration  24: 639986.557 ops/s
# Warmup Iteration  25: 641341.982 ops/s
# Warmup Iteration  26: 649071.197 ops/s
# Warmup Iteration  27: 610453.229 ops/s
# Warmup Iteration  28: 617074.076 ops/s
# Warmup Iteration  29: 607231.186 ops/s
# Warmup Iteration  30: 624107.867 ops/s
Iteration   1: 632802.009 ops/s
Iteration   2: 613306.087 ops/s
Iteration   3: 643535.844 ops/s
Iteration   4: 607803.037 ops/s
Iteration   5: 632109.114 ops/s
Iteration   6: 636008.304 ops/s
Iteration   7: 624004.465 ops/s
Iteration   8: 636166.009 ops/s
Iteration   9: 642253.245 ops/s
Iteration  10: 610792.417 ops/s
Iteration  11: 638658.295 ops/s
Iteration  12: 623925.502 ops/s
Iteration  13: 630389.751 ops/s
Iteration  14: 631203.043 ops/s
Iteration  15: 511969.374 ops/s
Iteration  16: 614235.000 ops/s
Iteration  17: 617188.584 ops/s
Iteration  18: 642558.960 ops/s
Iteration  19: 612942.080 ops/s
Iteration  20: 635694.810 ops/s
Iteration  21: 614101.053 ops/s
Iteration  22: 634862.109 ops/s
Iteration  23: 597701.251 ops/s
Iteration  24: 643835.701 ops/s
Iteration  25: 607791.588 ops/s
Iteration  26: 625617.880 ops/s
Iteration  27: 634154.484 ops/s
Iteration  28: 618008.362 ops/s
Iteration  29: 623881.976 ops/s
Iteration  30: 604737.192 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterableTest._Benchmark.benchmark_hasNextThrowsSecondTimeSlowpath":
  621407.918 ±(99.9%) 16261.565 ops/s [Average]
  (min, avg, max) = (511969.374, 621407.918, 643835.701), stdev = 24339.547
  CI (99.9%): [605146.352, 637669.483] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt       Score       Error  Units
FlowableFromIterableTest._Benchmark.benchmark_hasNextThrowsSecondTimeSlowpath  thrpt   30  621407.918 ± 16261.565  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterableTest._Benchmark.benchmark_nextThrowsSlowpath$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterableTest._Benchmark.benchmark_nextThrowsSlowpath

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 187405.049 ops/s
# Warmup Iteration   2: 483699.631 ops/s
# Warmup Iteration   3: 488429.397 ops/s
# Warmup Iteration   4: 470515.096 ops/s
# Warmup Iteration   5: 521222.179 ops/s
# Warmup Iteration   6: 436161.352 ops/s
# Warmup Iteration   7: 544586.429 ops/s
# Warmup Iteration   8: 532932.843 ops/s
# Warmup Iteration   9: 539888.640 ops/s
# Warmup Iteration  10: 531521.993 ops/s
# Warmup Iteration  11: 507017.139 ops/s
# Warmup Iteration  12: 543682.388 ops/s
# Warmup Iteration  13: 510961.173 ops/s
# Warmup Iteration  14: 555268.347 ops/s
# Warmup Iteration  15: 523497.723 ops/s
# Warmup Iteration  16: 531556.391 ops/s
# Warmup Iteration  17: 557808.320 ops/s
# Warmup Iteration  18: 547697.408 ops/s
# Warmup Iteration  19: 565941.209 ops/s
# Warmup Iteration  20: 536885.653 ops/s
# Warmup Iteration  21: 562083.219 ops/s
# Warmup Iteration  22: 548234.467 ops/s
# Warmup Iteration  23: 557347.008 ops/s
# Warmup Iteration  24: 540047.063 ops/s
# Warmup Iteration  25: 537819.021 ops/s
# Warmup Iteration  26: 578178.227 ops/s
# Warmup Iteration  27: 532820.092 ops/s
# Warmup Iteration  28: 564356.289 ops/s
# Warmup Iteration  29: 562123.596 ops/s
# Warmup Iteration  30: 534308.525 ops/s
Iteration   1: 564838.505 ops/s
Iteration   2: 567342.538 ops/s
Iteration   3: 537545.661 ops/s
Iteration   4: 547685.854 ops/s
Iteration   5: 552558.697 ops/s
Iteration   6: 563808.417 ops/s
Iteration   7: 545564.147 ops/s
Iteration   8: 548892.228 ops/s
Iteration   9: 559527.446 ops/s
Iteration  10: 555268.631 ops/s
Iteration  11: 543573.609 ops/s
Iteration  12: 547601.732 ops/s
Iteration  13: 552738.814 ops/s
Iteration  14: 569295.486 ops/s
Iteration  15: 539167.327 ops/s
Iteration  16: 539965.355 ops/s
Iteration  17: 579976.094 ops/s
Iteration  18: 550198.448 ops/s
Iteration  19: 548013.786 ops/s
Iteration  20: 568183.214 ops/s
Iteration  21: 549370.752 ops/s
Iteration  22: 573531.522 ops/s
Iteration  23: 535617.084 ops/s
Iteration  24: 584073.956 ops/s
Iteration  25: 529792.493 ops/s
Iteration  26: 563821.188 ops/s
Iteration  27: 558646.089 ops/s
Iteration  28: 544177.645 ops/s
Iteration  29: 552316.133 ops/s
Iteration  30: 537742.413 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterableTest._Benchmark.benchmark_nextThrowsSlowpath":
  553694.509 ±(99.9%) 9008.500 ops/s [Average]
  (min, avg, max) = (529792.493, 553694.509, 584073.956), stdev = 13483.500
  CI (99.9%): [544686.009, 562703.009] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
FlowableFromIterableTest._Benchmark.benchmark_nextThrowsSlowpath  thrpt   30  553694.509 ± 9008.500  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableForEachTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableForEachTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 6413963.155 ops/s
# Warmup Iteration   2: 11223371.560 ops/s
# Warmup Iteration   3: 13024142.849 ops/s
# Warmup Iteration   4: 14617511.397 ops/s
# Warmup Iteration   5: 15198706.857 ops/s
# Warmup Iteration   6: 15170024.424 ops/s
# Warmup Iteration   7: 15083675.355 ops/s
# Warmup Iteration   8: 14849273.881 ops/s
# Warmup Iteration   9: 14841636.078 ops/s
# Warmup Iteration  10: 15250600.893 ops/s
# Warmup Iteration  11: 14361978.925 ops/s
# Warmup Iteration  12: 15191195.042 ops/s
# Warmup Iteration  13: 14921255.540 ops/s
# Warmup Iteration  14: 14965168.545 ops/s
# Warmup Iteration  15: 15450585.144 ops/s
# Warmup Iteration  16: 14727708.613 ops/s
# Warmup Iteration  17: 15151124.059 ops/s
# Warmup Iteration  18: 15003222.861 ops/s
# Warmup Iteration  19: 15292598.192 ops/s
# Warmup Iteration  20: 14822611.582 ops/s
# Warmup Iteration  21: 15144504.844 ops/s
# Warmup Iteration  22: 15331288.487 ops/s
# Warmup Iteration  23: 14680704.961 ops/s
# Warmup Iteration  24: 15163036.042 ops/s
# Warmup Iteration  25: 15238062.310 ops/s
# Warmup Iteration  26: 15026830.445 ops/s
# Warmup Iteration  27: 14901987.970 ops/s
# Warmup Iteration  28: 14602848.275 ops/s
# Warmup Iteration  29: 15112586.156 ops/s
# Warmup Iteration  30: 14678325.385 ops/s
Iteration   1: 15028919.568 ops/s
Iteration   2: 15734661.848 ops/s
Iteration   3: 14782882.252 ops/s
Iteration   4: 15379361.090 ops/s
Iteration   5: 14539912.605 ops/s
Iteration   6: 15510216.780 ops/s
Iteration   7: 14688914.683 ops/s
Iteration   8: 15486081.904 ops/s
Iteration   9: 12889379.192 ops/s
Iteration  10: 13841819.550 ops/s
Iteration  11: 15004149.863 ops/s
Iteration  12: 15016771.320 ops/s
Iteration  13: 15606165.397 ops/s
Iteration  14: 14710861.439 ops/s
Iteration  15: 15121331.466 ops/s
Iteration  16: 15148780.553 ops/s
Iteration  17: 14949623.899 ops/s
Iteration  18: 15097463.252 ops/s
Iteration  19: 15142557.224 ops/s
Iteration  20: 15165870.999 ops/s
Iteration  21: 14848701.394 ops/s
Iteration  22: 15044130.219 ops/s
Iteration  23: 15295388.171 ops/s
Iteration  24: 14790593.980 ops/s
Iteration  25: 15376931.863 ops/s
Iteration  26: 14843457.565 ops/s
Iteration  27: 15592144.438 ops/s
Iteration  28: 15066997.381 ops/s
Iteration  29: 14744961.589 ops/s
Iteration  30: 15332620.315 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableForEachTest._Benchmark.benchmark_dispose":
  14992721.727 ±(99.9%) 366625.069 ops/s [Average]
  (min, avg, max) = (12889379.192, 14992721.727, 15734661.848), stdev = 548747.185
  CI (99.9%): [14626096.658, 15359346.795] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt         Score        Error  Units
FlowableForEachTest._Benchmark.benchmark_dispose  thrpt   30  14992721.727 ± 366625.069  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.observers.CallbackCompletableObserverTest._Benchmark.benchmark_customOnErrorShouldReportCustomOnError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.observers.CallbackCompletableObserverTest._Benchmark.benchmark_customOnErrorShouldReportCustomOnError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 30588738.765 ops/s
# Warmup Iteration   2: 42019997.382 ops/s
# Warmup Iteration   3: 59507867.071 ops/s
# Warmup Iteration   4: 57538361.809 ops/s
# Warmup Iteration   5: 59746795.902 ops/s
# Warmup Iteration   6: 57246206.428 ops/s
# Warmup Iteration   7: 59337245.401 ops/s
# Warmup Iteration   8: 57231408.560 ops/s
# Warmup Iteration   9: 59353627.486 ops/s
# Warmup Iteration  10: 59181339.695 ops/s
# Warmup Iteration  11: 57008850.255 ops/s
# Warmup Iteration  12: 61518643.411 ops/s
# Warmup Iteration  13: 57390301.306 ops/s
# Warmup Iteration  14: 61138871.273 ops/s
# Warmup Iteration  15: 58518906.320 ops/s
# Warmup Iteration  16: 59495126.330 ops/s
# Warmup Iteration  17: 57923857.088 ops/s
# Warmup Iteration  18: 57899062.999 ops/s
# Warmup Iteration  19: 61444599.525 ops/s
# Warmup Iteration  20: 57477838.670 ops/s
# Warmup Iteration  21: 58697935.156 ops/s
# Warmup Iteration  22: 56904415.851 ops/s
# Warmup Iteration  23: 60033245.955 ops/s
# Warmup Iteration  24: 56871110.567 ops/s
# Warmup Iteration  25: 58414987.880 ops/s
# Warmup Iteration  26: 59461621.347 ops/s
# Warmup Iteration  27: 57844523.831 ops/s
# Warmup Iteration  28: 59534029.795 ops/s
# Warmup Iteration  29: 60850102.367 ops/s
# Warmup Iteration  30: 56998144.545 ops/s
Iteration   1: 60971795.831 ops/s
Iteration   2: 56837367.948 ops/s
Iteration   3: 60178217.032 ops/s
Iteration   4: 58236362.845 ops/s
Iteration   5: 58086411.824 ops/s
Iteration   6: 60353536.543 ops/s
Iteration   7: 56029617.253 ops/s
Iteration   8: 58691484.257 ops/s
Iteration   9: 58661182.772 ops/s
Iteration  10: 59350474.753 ops/s
Iteration  11: 56862363.529 ops/s
Iteration  12: 58791065.712 ops/s
Iteration  13: 58185789.095 ops/s
Iteration  14: 59282826.851 ops/s
Iteration  15: 57895787.011 ops/s
Iteration  16: 60169994.373 ops/s
Iteration  17: 59447083.901 ops/s
Iteration  18: 58080561.641 ops/s
Iteration  19: 59225591.309 ops/s
Iteration  20: 58926649.741 ops/s
Iteration  21: 57672105.570 ops/s
Iteration  22: 60420144.106 ops/s
Iteration  23: 57056479.086 ops/s
Iteration  24: 61034840.601 ops/s
Iteration  25: 56970605.403 ops/s
Iteration  26: 59008432.686 ops/s
Iteration  27: 60627514.758 ops/s
Iteration  28: 57614116.656 ops/s
Iteration  29: 58449597.176 ops/s
Iteration  30: 56659961.572 ops/s


Result "io.reactivex.rxjava3.internal.observers.CallbackCompletableObserverTest._Benchmark.benchmark_customOnErrorShouldReportCustomOnError":
  58659265.394 ±(99.9%) 912420.424 ops/s [Average]
  (min, avg, max) = (56029617.253, 58659265.394, 61034840.601), stdev = 1365668.040
  CI (99.9%): [57746844.971, 59571685.818] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                     Mode  Cnt         Score        Error  Units
CallbackCompletableObserverTest._Benchmark.benchmark_customOnErrorShouldReportCustomOnError  thrpt   30  58659265.394 ± 912420.424  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.observers.ConsumerSingleObserverTest._Benchmark.benchmark_onErrorMissingShouldReportNoCustomOnError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.observers.ConsumerSingleObserverTest._Benchmark.benchmark_onErrorMissingShouldReportNoCustomOnError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 29214829.045 ops/s
# Warmup Iteration   2: 41263647.486 ops/s
# Warmup Iteration   3: 58582468.990 ops/s
# Warmup Iteration   4: 55960584.379 ops/s
# Warmup Iteration   5: 60558316.866 ops/s
# Warmup Iteration   6: 56785746.645 ops/s
# Warmup Iteration   7: 58275540.966 ops/s
# Warmup Iteration   8: 60050897.130 ops/s
# Warmup Iteration   9: 56336375.733 ops/s
# Warmup Iteration  10: 59140038.940 ops/s
# Warmup Iteration  11: 60895094.039 ops/s
# Warmup Iteration  12: 55309693.948 ops/s
# Warmup Iteration  13: 59832719.286 ops/s
# Warmup Iteration  14: 55846972.970 ops/s
# Warmup Iteration  15: 59129755.573 ops/s
# Warmup Iteration  16: 57115259.973 ops/s
# Warmup Iteration  17: 58068144.899 ops/s
# Warmup Iteration  18: 61459548.335 ops/s
# Warmup Iteration  19: 55619071.226 ops/s
# Warmup Iteration  20: 60130312.314 ops/s
# Warmup Iteration  21: 58833590.664 ops/s
# Warmup Iteration  22: 58513259.233 ops/s
# Warmup Iteration  23: 60543880.824 ops/s
# Warmup Iteration  24: 58320845.165 ops/s
# Warmup Iteration  25: 56846272.935 ops/s
# Warmup Iteration  26: 59085829.456 ops/s
# Warmup Iteration  27: 57411031.249 ops/s
# Warmup Iteration  28: 58492886.084 ops/s
# Warmup Iteration  29: 59210032.391 ops/s
# Warmup Iteration  30: 58424055.893 ops/s
Iteration   1: 60260418.053 ops/s
Iteration   2: 57607325.463 ops/s
Iteration   3: 59058948.242 ops/s
Iteration   4: 48190346.036 ops/s
Iteration   5: 59492907.277 ops/s
Iteration   6: 56905316.429 ops/s
Iteration   7: 58602865.652 ops/s
Iteration   8: 57870560.613 ops/s
Iteration   9: 58051788.619 ops/s
Iteration  10: 59353663.275 ops/s
Iteration  11: 56645226.151 ops/s
Iteration  12: 61297292.520 ops/s
Iteration  13: 60246951.266 ops/s
Iteration  14: 57481179.759 ops/s
Iteration  15: 57083822.595 ops/s
Iteration  16: 59713561.229 ops/s
Iteration  17: 57070401.615 ops/s
Iteration  18: 60191430.575 ops/s
Iteration  19: 57087676.678 ops/s
Iteration  20: 58101301.617 ops/s
Iteration  21: 60565541.066 ops/s
Iteration  22: 56611452.184 ops/s
Iteration  23: 58205842.178 ops/s
Iteration  24: 58661928.963 ops/s
Iteration  25: 57857189.428 ops/s
Iteration  26: 58884673.072 ops/s
Iteration  27: 58825396.813 ops/s
Iteration  28: 59814624.821 ops/s
Iteration  29: 59259872.743 ops/s
Iteration  30: 57755210.275 ops/s


Result "io.reactivex.rxjava3.internal.observers.ConsumerSingleObserverTest._Benchmark.benchmark_onErrorMissingShouldReportNoCustomOnError":
  58225157.174 ±(99.9%) 1521819.201 ops/s [Average]
  (min, avg, max) = (48190346.036, 58225157.174, 61297292.520), stdev = 2277787.510
  CI (99.9%): [56703337.973, 59746976.375] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                   Mode  Cnt         Score         Error  Units
ConsumerSingleObserverTest._Benchmark.benchmark_onErrorMissingShouldReportNoCustomOnError  thrpt   30  58225157.174 ± 1521819.201  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.observers.ConsumerSingleObserverTest._Benchmark.benchmark_customOnErrorShouldReportCustomOnError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.observers.ConsumerSingleObserverTest._Benchmark.benchmark_customOnErrorShouldReportCustomOnError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 30143482.660 ops/s
# Warmup Iteration   2: 39377701.668 ops/s
# Warmup Iteration   3: 61475452.717 ops/s
# Warmup Iteration   4: 56343959.681 ops/s
# Warmup Iteration   5: 59465872.553 ops/s
# Warmup Iteration   6: 56868476.122 ops/s
# Warmup Iteration   7: 57943689.537 ops/s
# Warmup Iteration   8: 61457320.281 ops/s
# Warmup Iteration   9: 58593425.129 ops/s
# Warmup Iteration  10: 58081796.830 ops/s
# Warmup Iteration  11: 58518655.060 ops/s
# Warmup Iteration  12: 58092147.664 ops/s
# Warmup Iteration  13: 59201704.676 ops/s
# Warmup Iteration  14: 60502055.806 ops/s
# Warmup Iteration  15: 56977646.483 ops/s
# Warmup Iteration  16: 59753246.786 ops/s
# Warmup Iteration  17: 56589874.289 ops/s
# Warmup Iteration  18: 58663934.871 ops/s
# Warmup Iteration  19: 60481032.550 ops/s
# Warmup Iteration  20: 58880619.667 ops/s
# Warmup Iteration  21: 58763436.651 ops/s
# Warmup Iteration  22: 58993695.175 ops/s
# Warmup Iteration  23: 58861744.504 ops/s
# Warmup Iteration  24: 59348677.282 ops/s
# Warmup Iteration  25: 59098776.364 ops/s
# Warmup Iteration  26: 57371997.414 ops/s
# Warmup Iteration  27: 59512430.282 ops/s
# Warmup Iteration  28: 58219368.754 ops/s
# Warmup Iteration  29: 57096813.916 ops/s
# Warmup Iteration  30: 60779968.660 ops/s
Iteration   1: 58806377.459 ops/s
Iteration   2: 57924403.806 ops/s
Iteration   3: 60214068.769 ops/s
Iteration   4: 56552237.147 ops/s
Iteration   5: 61277483.884 ops/s
Iteration   6: 60813397.079 ops/s
Iteration   7: 58153157.259 ops/s
Iteration   8: 56542987.509 ops/s
Iteration   9: 60031408.025 ops/s
Iteration  10: 58465401.913 ops/s
Iteration  11: 60434504.838 ops/s
Iteration  12: 59729549.907 ops/s
Iteration  13: 56584595.043 ops/s
Iteration  14: 59659777.150 ops/s
Iteration  15: 58142899.708 ops/s
Iteration  16: 60103903.263 ops/s
Iteration  17: 60231153.534 ops/s
Iteration  18: 57284687.437 ops/s
Iteration  19: 61108127.657 ops/s
Iteration  20: 58159384.081 ops/s
Iteration  21: 59035721.957 ops/s
Iteration  22: 61203706.290 ops/s
Iteration  23: 55995417.783 ops/s
Iteration  24: 59861849.873 ops/s
Iteration  25: 57623341.990 ops/s
Iteration  26: 60141313.471 ops/s
Iteration  27: 58612329.444 ops/s
Iteration  28: 60004106.379 ops/s
Iteration  29: 60097596.134 ops/s
Iteration  30: 56445949.939 ops/s


Result "io.reactivex.rxjava3.internal.observers.ConsumerSingleObserverTest._Benchmark.benchmark_customOnErrorShouldReportCustomOnError":
  58974694.624 ±(99.9%) 1055310.684 ops/s [Average]
  (min, avg, max) = (55995417.783, 58974694.624, 61277483.884), stdev = 1579539.471
  CI (99.9%): [57919383.940, 60030005.308] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                Mode  Cnt         Score         Error  Units
ConsumerSingleObserverTest._Benchmark.benchmark_customOnErrorShouldReportCustomOnError  thrpt   30  58974694.624 ± 1055310.684  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishFunctionTest._Benchmark.benchmark_invalidPrefetch$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishFunctionTest._Benchmark.benchmark_invalidPrefetch

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 431508.690 ops/s
# Warmup Iteration   2: 597172.534 ops/s
# Warmup Iteration   3: 697384.531 ops/s
# Warmup Iteration   4: 743371.864 ops/s
# Warmup Iteration   5: 721697.892 ops/s
# Warmup Iteration   6: 679764.196 ops/s
# Warmup Iteration   7: 741459.978 ops/s
# Warmup Iteration   8: 741494.330 ops/s
# Warmup Iteration   9: 728667.778 ops/s
# Warmup Iteration  10: 760113.026 ops/s
# Warmup Iteration  11: 708743.222 ops/s
# Warmup Iteration  12: 738617.139 ops/s
# Warmup Iteration  13: 729407.555 ops/s
# Warmup Iteration  14: 731350.141 ops/s
# Warmup Iteration  15: 777648.374 ops/s
# Warmup Iteration  16: 720819.883 ops/s
# Warmup Iteration  17: 806282.734 ops/s
# Warmup Iteration  18: 742917.679 ops/s
# Warmup Iteration  19: 772959.461 ops/s
# Warmup Iteration  20: 805241.916 ops/s
# Warmup Iteration  21: 766257.472 ops/s
# Warmup Iteration  22: 768937.102 ops/s
# Warmup Iteration  23: 730210.362 ops/s
# Warmup Iteration  24: 782007.207 ops/s
# Warmup Iteration  25: 778236.574 ops/s
# Warmup Iteration  26: 753710.678 ops/s
# Warmup Iteration  27: 775508.427 ops/s
# Warmup Iteration  28: 779044.004 ops/s
# Warmup Iteration  29: 713160.772 ops/s
# Warmup Iteration  30: 723740.769 ops/s
Iteration   1: 778131.325 ops/s
Iteration   2: 782291.070 ops/s
Iteration   3: 780515.709 ops/s
Iteration   4: 764255.605 ops/s
Iteration   5: 786480.308 ops/s
Iteration   6: 767435.615 ops/s
Iteration   7: 790906.557 ops/s
Iteration   8: 777392.524 ops/s
Iteration   9: 763719.480 ops/s
Iteration  10: 787428.448 ops/s
Iteration  11: 777892.717 ops/s
Iteration  12: 794952.836 ops/s
Iteration  13: 776451.606 ops/s
Iteration  14: 780599.613 ops/s
Iteration  15: 771931.177 ops/s
Iteration  16: 773005.206 ops/s
Iteration  17: 787677.335 ops/s
Iteration  18: 808389.716 ops/s
Iteration  19: 765767.534 ops/s
Iteration  20: 810145.082 ops/s
Iteration  21: 785000.808 ops/s
Iteration  22: 779645.816 ops/s
Iteration  23: 826707.060 ops/s
Iteration  24: 737325.825 ops/s
Iteration  25: 816261.123 ops/s
Iteration  26: 781386.070 ops/s
Iteration  27: 781018.204 ops/s
Iteration  28: 772015.966 ops/s
Iteration  29: 785849.326 ops/s
Iteration  30: 783868.282 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishFunctionTest._Benchmark.benchmark_invalidPrefetch":
  782481.598 ±(99.9%) 11443.467 ops/s [Average]
  (min, avg, max) = (737325.825, 782481.598, 826707.060), stdev = 17128.044
  CI (99.9%): [771038.131, 793925.065] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score       Error  Units
FlowablePublishFunctionTest._Benchmark.benchmark_invalidPrefetch  thrpt   30  782481.598 ± 11443.467  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeCallbackObserverTest._Benchmark.benchmark_customOnErrorShouldReportCustomOnError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeCallbackObserverTest._Benchmark.benchmark_customOnErrorShouldReportCustomOnError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 28726540.890 ops/s
# Warmup Iteration   2: 49225985.806 ops/s
# Warmup Iteration   3: 51503081.822 ops/s
# Warmup Iteration   4: 56624420.681 ops/s
# Warmup Iteration   5: 59232254.441 ops/s
# Warmup Iteration   6: 56918860.021 ops/s
# Warmup Iteration   7: 57366064.269 ops/s
# Warmup Iteration   8: 60313709.048 ops/s
# Warmup Iteration   9: 56713256.077 ops/s
# Warmup Iteration  10: 60130057.630 ops/s
# Warmup Iteration  11: 60816084.420 ops/s
# Warmup Iteration  12: 59242211.183 ops/s
# Warmup Iteration  13: 56910997.395 ops/s
# Warmup Iteration  14: 59337915.467 ops/s
# Warmup Iteration  15: 57533924.903 ops/s
# Warmup Iteration  16: 58619411.495 ops/s
# Warmup Iteration  17: 59635544.339 ops/s
# Warmup Iteration  18: 57546915.356 ops/s
# Warmup Iteration  19: 58362067.659 ops/s
# Warmup Iteration  20: 60858554.321 ops/s
# Warmup Iteration  21: 58625462.345 ops/s
# Warmup Iteration  22: 59858881.082 ops/s
# Warmup Iteration  23: 55843770.820 ops/s
# Warmup Iteration  24: 59271085.109 ops/s
# Warmup Iteration  25: 57967334.983 ops/s
# Warmup Iteration  26: 59738938.376 ops/s
# Warmup Iteration  27: 58547557.913 ops/s
# Warmup Iteration  28: 61893342.348 ops/s
# Warmup Iteration  29: 57957054.495 ops/s
# Warmup Iteration  30: 61127278.258 ops/s
Iteration   1: 57804055.344 ops/s
Iteration   2: 58896187.981 ops/s
Iteration   3: 57903856.807 ops/s
Iteration   4: 57225569.530 ops/s
Iteration   5: 58852897.230 ops/s
Iteration   6: 57932264.467 ops/s
Iteration   7: 60214835.751 ops/s
Iteration   8: 57122087.405 ops/s
Iteration   9: 59743952.358 ops/s
Iteration  10: 57237825.649 ops/s
Iteration  11: 59045927.829 ops/s
Iteration  12: 59346363.641 ops/s
Iteration  13: 57637460.422 ops/s
Iteration  14: 58820968.661 ops/s
Iteration  15: 58097938.367 ops/s
Iteration  16: 58791399.943 ops/s
Iteration  17: 59908722.184 ops/s
Iteration  18: 57223395.784 ops/s
Iteration  19: 60382950.739 ops/s
Iteration  20: 57090169.874 ops/s
Iteration  21: 59007081.201 ops/s
Iteration  22: 57617157.042 ops/s
Iteration  23: 59303169.796 ops/s
Iteration  24: 57944458.226 ops/s
Iteration  25: 58538427.139 ops/s
Iteration  26: 59822507.454 ops/s
Iteration  27: 58905870.736 ops/s
Iteration  28: 57090900.815 ops/s
Iteration  29: 58082900.807 ops/s
Iteration  30: 59775920.153 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeCallbackObserverTest._Benchmark.benchmark_customOnErrorShouldReportCustomOnError":
  58512240.778 ±(99.9%) 679435.879 ops/s [Average]
  (min, avg, max) = (57090169.874, 58512240.778, 60382950.739), stdev = 1016947.715
  CI (99.9%): [57832804.899, 59191676.657] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               Mode  Cnt         Score        Error  Units
MaybeCallbackObserverTest._Benchmark.benchmark_customOnErrorShouldReportCustomOnError  thrpt   30  58512240.778 ± 679435.879  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeCallbackObserverTest._Benchmark.benchmark_onErrorMissingShouldReportNoCustomOnError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeCallbackObserverTest._Benchmark.benchmark_onErrorMissingShouldReportNoCustomOnError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 30698920.802 ops/s
# Warmup Iteration   2: 40470926.616 ops/s
# Warmup Iteration   3: 59028086.773 ops/s
# Warmup Iteration   4: 58128813.623 ops/s
# Warmup Iteration   5: 57010012.190 ops/s
# Warmup Iteration   6: 57877276.995 ops/s
# Warmup Iteration   7: 57870620.249 ops/s
# Warmup Iteration   8: 60490408.845 ops/s
# Warmup Iteration   9: 57023075.366 ops/s
# Warmup Iteration  10: 59416425.815 ops/s
# Warmup Iteration  11: 59586658.029 ops/s
# Warmup Iteration  12: 58711947.969 ops/s
# Warmup Iteration  13: 59294805.478 ops/s
# Warmup Iteration  14: 58625813.068 ops/s
# Warmup Iteration  15: 60608472.539 ops/s
# Warmup Iteration  16: 60197166.899 ops/s
# Warmup Iteration  17: 57317023.911 ops/s
# Warmup Iteration  18: 57012170.594 ops/s
# Warmup Iteration  19: 60962288.525 ops/s
# Warmup Iteration  20: 57125905.594 ops/s
# Warmup Iteration  21: 61034501.801 ops/s
# Warmup Iteration  22: 57536250.395 ops/s
# Warmup Iteration  23: 59896888.305 ops/s
# Warmup Iteration  24: 48387075.528 ops/s
# Warmup Iteration  25: 56495908.379 ops/s
# Warmup Iteration  26: 57347029.723 ops/s
# Warmup Iteration  27: 58680475.387 ops/s
# Warmup Iteration  28: 59740750.551 ops/s
# Warmup Iteration  29: 59605997.629 ops/s
# Warmup Iteration  30: 58384455.473 ops/s
Iteration   1: 59428246.195 ops/s
Iteration   2: 57733570.201 ops/s
Iteration   3: 60915595.322 ops/s
Iteration   4: 57566704.673 ops/s
Iteration   5: 57449562.913 ops/s
Iteration   6: 58629191.222 ops/s
Iteration   7: 59986162.613 ops/s
Iteration   8: 57042114.720 ops/s
Iteration   9: 60038947.655 ops/s
Iteration  10: 58411061.399 ops/s
Iteration  11: 56525522.244 ops/s
Iteration  12: 60009513.794 ops/s
Iteration  13: 58196964.992 ops/s
Iteration  14: 59354418.271 ops/s
Iteration  15: 60553138.777 ops/s
Iteration  16: 57157016.091 ops/s
Iteration  17: 59919014.266 ops/s
Iteration  18: 57224412.035 ops/s
Iteration  19: 59884685.784 ops/s
Iteration  20: 58665428.304 ops/s
Iteration  21: 58071071.644 ops/s
Iteration  22: 60251224.522 ops/s
Iteration  23: 57218210.864 ops/s
Iteration  24: 61421598.409 ops/s
Iteration  25: 57850570.909 ops/s
Iteration  26: 58504420.890 ops/s
Iteration  27: 58680448.553 ops/s
Iteration  28: 59593608.913 ops/s
Iteration  29: 60479488.993 ops/s
Iteration  30: 57573439.822 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeCallbackObserverTest._Benchmark.benchmark_onErrorMissingShouldReportNoCustomOnError":
  58811178.500 ±(99.9%) 890690.625 ops/s [Average]
  (min, avg, max) = (56525522.244, 58811178.500, 61421598.409), stdev = 1333143.898
  CI (99.9%): [57920487.875, 59701869.125] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                  Mode  Cnt         Score        Error  Units
MaybeCallbackObserverTest._Benchmark.benchmark_onErrorMissingShouldReportNoCustomOnError  thrpt   30  58811178.500 ± 890690.625  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.disposables.FutureDisposableTest._Benchmark.benchmark_normalDone$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.disposables.FutureDisposableTest._Benchmark.benchmark_normalDone

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 6334238.998 ops/s
# Warmup Iteration   2: 11301653.176 ops/s
# Warmup Iteration   3: 11486371.983 ops/s
# Warmup Iteration   4: 13214252.619 ops/s
# Warmup Iteration   5: 12324704.483 ops/s
# Warmup Iteration   6: 12700876.660 ops/s
# Warmup Iteration   7: 13363591.659 ops/s
# Warmup Iteration   8: 13272642.993 ops/s
# Warmup Iteration   9: 13106179.429 ops/s
# Warmup Iteration  10: 13013039.880 ops/s
# Warmup Iteration  11: 13279616.230 ops/s
# Warmup Iteration  12: 12812110.958 ops/s
# Warmup Iteration  13: 13311416.774 ops/s
# Warmup Iteration  14: 13437788.824 ops/s
# Warmup Iteration  15: 12712231.798 ops/s
# Warmup Iteration  16: 13321400.435 ops/s
# Warmup Iteration  17: 12546648.723 ops/s
# Warmup Iteration  18: 13014657.878 ops/s
# Warmup Iteration  19: 13448552.561 ops/s
# Warmup Iteration  20: 12986819.266 ops/s
# Warmup Iteration  21: 13317917.603 ops/s
# Warmup Iteration  22: 12889329.856 ops/s
# Warmup Iteration  23: 13014172.351 ops/s
# Warmup Iteration  24: 13250026.777 ops/s
# Warmup Iteration  25: 13011198.486 ops/s
# Warmup Iteration  26: 12762120.270 ops/s
# Warmup Iteration  27: 13199320.058 ops/s
# Warmup Iteration  28: 13035226.818 ops/s
# Warmup Iteration  29: 12752978.250 ops/s
# Warmup Iteration  30: 13037309.600 ops/s
Iteration   1: 12924726.654 ops/s
Iteration   2: 13002128.679 ops/s
Iteration   3: 13537275.734 ops/s
Iteration   4: 12822198.037 ops/s
Iteration   5: 13338332.459 ops/s
Iteration   6: 12669446.346 ops/s
Iteration   7: 13748926.236 ops/s
Iteration   8: 13208327.859 ops/s
Iteration   9: 12677931.057 ops/s
Iteration  10: 13034272.867 ops/s
Iteration  11: 12741764.198 ops/s
Iteration  12: 13199928.931 ops/s
Iteration  13: 13330350.001 ops/s
Iteration  14: 13328128.703 ops/s
Iteration  15: 12654687.877 ops/s
Iteration  16: 13152379.090 ops/s
Iteration  17: 13600516.595 ops/s
Iteration  18: 13059035.197 ops/s
Iteration  19: 12693327.461 ops/s
Iteration  20: 13422282.245 ops/s
Iteration  21: 12901629.679 ops/s
Iteration  22: 13124800.126 ops/s
Iteration  23: 13153364.671 ops/s
Iteration  24: 12923537.536 ops/s
Iteration  25: 13163822.040 ops/s
Iteration  26: 12761025.417 ops/s
Iteration  27: 13623549.688 ops/s
Iteration  28: 12555236.200 ops/s
Iteration  29: 13018227.915 ops/s
Iteration  30: 12404894.417 ops/s


Result "io.reactivex.rxjava3.disposables.FutureDisposableTest._Benchmark.benchmark_normalDone":
  13059201.797 ±(99.9%) 226595.356 ops/s [Average]
  (min, avg, max) = (12404894.417, 13059201.797, 13748926.236), stdev = 339157.286
  CI (99.9%): [12832606.442, 13285797.153] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt         Score        Error  Units
FutureDisposableTest._Benchmark.benchmark_normalDone  thrpt   30  13059201.797 ± 226595.356  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatTest._Benchmark.benchmark_repeatAndDistinctUnbounded$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatTest._Benchmark.benchmark_repeatAndDistinctUnbounded

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 181405.008 ops/s
# Warmup Iteration   2: 644856.148 ops/s
# Warmup Iteration   3: 961325.666 ops/s
# Warmup Iteration   4: 954969.756 ops/s
# Warmup Iteration   5: 1124913.287 ops/s
# Warmup Iteration   6: 1097201.445 ops/s
# Warmup Iteration   7: 1068527.676 ops/s
# Warmup Iteration   8: 1108623.301 ops/s
# Warmup Iteration   9: 1055614.491 ops/s
# Warmup Iteration  10: 1100240.109 ops/s
# Warmup Iteration  11: 1045420.094 ops/s
# Warmup Iteration  12: 1091843.423 ops/s
# Warmup Iteration  13: 1075483.653 ops/s
# Warmup Iteration  14: 1037428.053 ops/s
# Warmup Iteration  15: 1113159.284 ops/s
# Warmup Iteration  16: 1082719.084 ops/s
# Warmup Iteration  17: 1050341.757 ops/s
# Warmup Iteration  18: 1142905.926 ops/s
# Warmup Iteration  19: 816242.331 ops/s
# Warmup Iteration  20: 1081895.476 ops/s
# Warmup Iteration  21: 1142410.544 ops/s
# Warmup Iteration  22: 1107893.836 ops/s
# Warmup Iteration  23: 1050088.512 ops/s
# Warmup Iteration  24: 1065390.528 ops/s
# Warmup Iteration  25: 1105721.475 ops/s
# Warmup Iteration  26: 1073295.669 ops/s
# Warmup Iteration  27: 1064821.344 ops/s
# Warmup Iteration  28: 1117738.400 ops/s
# Warmup Iteration  29: 1066276.719 ops/s
# Warmup Iteration  30: 1107156.472 ops/s
Iteration   1: 1085652.958 ops/s
Iteration   2: 1060398.572 ops/s
Iteration   3: 1047012.638 ops/s
Iteration   4: 1142104.767 ops/s
Iteration   5: 1033685.845 ops/s
Iteration   6: 1100816.797 ops/s
Iteration   7: 1081475.647 ops/s
Iteration   8: 1078321.557 ops/s
Iteration   9: 1099194.666 ops/s
Iteration  10: 1091111.337 ops/s
Iteration  11: 1098803.032 ops/s
Iteration  12: 1038887.278 ops/s
Iteration  13: 1139345.296 ops/s
Iteration  14: 1070133.401 ops/s
Iteration  15: 1077635.396 ops/s
Iteration  16: 1108048.556 ops/s
Iteration  17: 1047265.277 ops/s
Iteration  18: 1101950.366 ops/s
Iteration  19: 1046562.822 ops/s
Iteration  20: 1118734.777 ops/s
Iteration  21: 1075295.309 ops/s
Iteration  22: 1099421.229 ops/s
Iteration  23: 1060384.822 ops/s
Iteration  24: 1048502.549 ops/s
Iteration  25: 1127780.709 ops/s
Iteration  26: 1070824.408 ops/s
Iteration  27: 1118977.028 ops/s
Iteration  28: 1067685.299 ops/s
Iteration  29: 1090684.016 ops/s
Iteration  30: 1117099.232 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatTest._Benchmark.benchmark_repeatAndDistinctUnbounded":
  1084793.186 ±(99.9%) 19881.151 ops/s [Average]
  (min, avg, max) = (1033685.845, 1084793.186, 1142104.767), stdev = 29757.173
  CI (99.9%): [1064912.036, 1104674.337] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
FlowableRepeatTest._Benchmark.benchmark_repeatAndDistinctUnbounded  thrpt   30  1084793.186 ± 19881.151  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMapNotificationTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMapNotificationTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 876195.741 ops/s
# Warmup Iteration   2: 4163939.949 ops/s
# Warmup Iteration   3: 6525129.582 ops/s
# Warmup Iteration   4: 6083008.324 ops/s
# Warmup Iteration   5: 6463212.980 ops/s
# Warmup Iteration   6: 6259208.107 ops/s
# Warmup Iteration   7: 6467217.755 ops/s
# Warmup Iteration   8: 6085340.967 ops/s
# Warmup Iteration   9: 6315101.755 ops/s
# Warmup Iteration  10: 6215053.592 ops/s
# Warmup Iteration  11: 6374091.547 ops/s
# Warmup Iteration  12: 6316976.592 ops/s
# Warmup Iteration  13: 6446983.660 ops/s
# Warmup Iteration  14: 6104568.495 ops/s
# Warmup Iteration  15: 6514587.679 ops/s
# Warmup Iteration  16: 6208900.572 ops/s
# Warmup Iteration  17: 6346268.861 ops/s
# Warmup Iteration  18: 6343801.232 ops/s
# Warmup Iteration  19: 6244151.010 ops/s
# Warmup Iteration  20: 6658455.551 ops/s
# Warmup Iteration  21: 6381355.704 ops/s
# Warmup Iteration  22: 6322070.360 ops/s
# Warmup Iteration  23: 6443041.502 ops/s
# Warmup Iteration  24: 6276832.391 ops/s
# Warmup Iteration  25: 6215027.169 ops/s
# Warmup Iteration  26: 6570941.761 ops/s
# Warmup Iteration  27: 5986754.583 ops/s
# Warmup Iteration  28: 6568175.154 ops/s
# Warmup Iteration  29: 6369477.500 ops/s
# Warmup Iteration  30: 6310725.803 ops/s
Iteration   1: 6463265.065 ops/s
Iteration   2: 6394205.293 ops/s
Iteration   3: 6281568.649 ops/s
Iteration   4: 6285051.389 ops/s
Iteration   5: 6585469.254 ops/s
Iteration   6: 6424520.069 ops/s
Iteration   7: 6229869.090 ops/s
Iteration   8: 6536769.072 ops/s
Iteration   9: 6223484.453 ops/s
Iteration  10: 6520266.130 ops/s
Iteration  11: 6716863.015 ops/s
Iteration  12: 6190358.363 ops/s
Iteration  13: 6622195.560 ops/s
Iteration  14: 6425996.528 ops/s
Iteration  15: 6401880.912 ops/s
Iteration  16: 6295009.126 ops/s
Iteration  17: 6418666.172 ops/s
Iteration  18: 6234282.488 ops/s
Iteration  19: 6433375.093 ops/s
Iteration  20: 6390345.851 ops/s
Iteration  21: 6415029.928 ops/s
Iteration  22: 6245039.844 ops/s
Iteration  23: 6350025.373 ops/s
Iteration  24: 6541570.431 ops/s
Iteration  25: 6197417.626 ops/s
Iteration  26: 6466787.327 ops/s
Iteration  27: 6211974.484 ops/s
Iteration  28: 6635624.677 ops/s
Iteration  29: 6363702.201 ops/s
Iteration  30: 6339106.266 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableMapNotificationTest._Benchmark.benchmark_dispose":
  6394657.324 ±(99.9%) 94592.106 ops/s [Average]
  (min, avg, max) = (6190358.363, 6394657.324, 6716863.015), stdev = 141581.022
  CI (99.9%): [6300065.218, 6489249.431] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
FlowableMapNotificationTest._Benchmark.benchmark_dispose  thrpt   30  6394657.324 ± 94592.106  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.functions.FunctionsTest._Benchmark.benchmark_identityFunctionToString$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.functions.FunctionsTest._Benchmark.benchmark_identityFunctionToString

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 31086586.932 ops/s
# Warmup Iteration   2: 42610092.032 ops/s
# Warmup Iteration   3: 60416203.601 ops/s
# Warmup Iteration   4: 58058819.680 ops/s
# Warmup Iteration   5: 62552357.481 ops/s
# Warmup Iteration   6: 59078575.267 ops/s
# Warmup Iteration   7: 57907971.459 ops/s
# Warmup Iteration   8: 61966816.561 ops/s
# Warmup Iteration   9: 57863484.475 ops/s
# Warmup Iteration  10: 60285503.446 ops/s
# Warmup Iteration  11: 59835479.061 ops/s
# Warmup Iteration  12: 58977756.365 ops/s
# Warmup Iteration  13: 58508930.359 ops/s
# Warmup Iteration  14: 48279370.779 ops/s
# Warmup Iteration  15: 59695856.080 ops/s
# Warmup Iteration  16: 59481494.350 ops/s
# Warmup Iteration  17: 60062737.042 ops/s
# Warmup Iteration  18: 59569507.894 ops/s
# Warmup Iteration  19: 60133153.430 ops/s
# Warmup Iteration  20: 59824970.777 ops/s
# Warmup Iteration  21: 60941386.556 ops/s
# Warmup Iteration  22: 58637717.638 ops/s
# Warmup Iteration  23: 60461247.194 ops/s
# Warmup Iteration  24: 60279546.220 ops/s
# Warmup Iteration  25: 57825282.891 ops/s
# Warmup Iteration  26: 60933407.346 ops/s
# Warmup Iteration  27: 60023463.061 ops/s
# Warmup Iteration  28: 60054915.905 ops/s
# Warmup Iteration  29: 60725172.538 ops/s
# Warmup Iteration  30: 59799058.067 ops/s
Iteration   1: 60416728.588 ops/s
Iteration   2: 59477760.866 ops/s
Iteration   3: 58762810.770 ops/s
Iteration   4: 60922990.943 ops/s
Iteration   5: 59650768.740 ops/s
Iteration   6: 60158821.351 ops/s
Iteration   7: 62005727.710 ops/s
Iteration   8: 58299816.833 ops/s
Iteration   9: 61513159.949 ops/s
Iteration  10: 59028280.981 ops/s
Iteration  11: 60708769.549 ops/s
Iteration  12: 60613235.616 ops/s
Iteration  13: 58877108.768 ops/s
Iteration  14: 59476011.775 ops/s
Iteration  15: 60568251.538 ops/s
Iteration  16: 57993438.255 ops/s
Iteration  17: 59490920.159 ops/s
Iteration  18: 62225626.100 ops/s
Iteration  19: 57577062.450 ops/s
Iteration  20: 62751463.256 ops/s
Iteration  21: 59302369.668 ops/s
Iteration  22: 60946131.165 ops/s
Iteration  23: 59507584.862 ops/s
Iteration  24: 61013375.237 ops/s
Iteration  25: 58544635.444 ops/s
Iteration  26: 58303258.550 ops/s
Iteration  27: 63656546.534 ops/s
Iteration  28: 58647682.636 ops/s
Iteration  29: 58835383.670 ops/s
Iteration  30: 62559466.640 ops/s


Result "io.reactivex.rxjava3.internal.functions.FunctionsTest._Benchmark.benchmark_identityFunctionToString":
  60061172.953 ±(99.9%) 1031928.529 ops/s [Average]
  (min, avg, max) = (57577062.450, 60061172.953, 63656546.534), stdev = 1544542.160
  CI (99.9%): [59029244.424, 61093101.483] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score         Error  Units
FunctionsTest._Benchmark.benchmark_identityFunctionToString  thrpt   30  60061172.953 ± 1031928.529  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.observers.LambdaObserverTest._Benchmark.benchmark_customOnErrorShouldReportCustomOnError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.observers.LambdaObserverTest._Benchmark.benchmark_customOnErrorShouldReportCustomOnError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 27102456.809 ops/s
# Warmup Iteration   2: 42110230.820 ops/s
# Warmup Iteration   3: 58231358.751 ops/s
# Warmup Iteration   4: 59281073.704 ops/s
# Warmup Iteration   5: 57019076.492 ops/s
# Warmup Iteration   6: 59112948.638 ops/s
# Warmup Iteration   7: 59670951.375 ops/s
# Warmup Iteration   8: 58163393.839 ops/s
# Warmup Iteration   9: 55720065.677 ops/s
# Warmup Iteration  10: 61967172.363 ops/s
# Warmup Iteration  11: 59388563.282 ops/s
# Warmup Iteration  12: 56973334.396 ops/s
# Warmup Iteration  13: 60216652.978 ops/s
# Warmup Iteration  14: 58012076.594 ops/s
# Warmup Iteration  15: 56528704.842 ops/s
# Warmup Iteration  16: 61560876.680 ops/s
# Warmup Iteration  17: 57807870.593 ops/s
# Warmup Iteration  18: 59946877.075 ops/s
# Warmup Iteration  19: 56353135.505 ops/s
# Warmup Iteration  20: 59666125.415 ops/s
# Warmup Iteration  21: 57019390.825 ops/s
# Warmup Iteration  22: 57116096.364 ops/s
# Warmup Iteration  23: 59917147.621 ops/s
# Warmup Iteration  24: 57779928.076 ops/s
# Warmup Iteration  25: 59249497.735 ops/s
# Warmup Iteration  26: 58729736.834 ops/s
# Warmup Iteration  27: 57709525.643 ops/s
# Warmup Iteration  28: 57673207.388 ops/s
# Warmup Iteration  29: 61474218.207 ops/s
# Warmup Iteration  30: 55232973.002 ops/s
Iteration   1: 60753317.657 ops/s
Iteration   2: 57636146.674 ops/s
Iteration   3: 59752436.433 ops/s
Iteration   4: 58198700.754 ops/s
Iteration   5: 57181510.924 ops/s
Iteration   6: 61140769.376 ops/s
Iteration   7: 56749679.570 ops/s
Iteration   8: 59453354.803 ops/s
Iteration   9: 59616914.406 ops/s
Iteration  10: 58154408.553 ops/s
Iteration  11: 60828044.621 ops/s
Iteration  12: 58333730.832 ops/s
Iteration  13: 59385727.934 ops/s
Iteration  14: 57084024.105 ops/s
Iteration  15: 57585268.977 ops/s
Iteration  16: 60787843.765 ops/s
Iteration  17: 57222378.729 ops/s
Iteration  18: 59970042.932 ops/s
Iteration  19: 58910008.512 ops/s
Iteration  20: 59214999.799 ops/s
Iteration  21: 58228637.648 ops/s
Iteration  22: 60096957.839 ops/s
Iteration  23: 57543198.348 ops/s
Iteration  24: 59672890.735 ops/s
Iteration  25: 58672304.385 ops/s
Iteration  26: 58692267.936 ops/s
Iteration  27: 58467615.312 ops/s
Iteration  28: 57203680.224 ops/s
Iteration  29: 58398853.962 ops/s
Iteration  30: 59898644.430 ops/s


Result "io.reactivex.rxjava3.internal.observers.LambdaObserverTest._Benchmark.benchmark_customOnErrorShouldReportCustomOnError":
  58827812.006 ±(99.9%) 838896.860 ops/s [Average]
  (min, avg, max) = (56749679.570, 58827812.006, 61140769.376), stdev = 1255621.423
  CI (99.9%): [57988915.146, 59666708.866] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt         Score        Error  Units
LambdaObserverTest._Benchmark.benchmark_customOnErrorShouldReportCustomOnError  thrpt   30  58827812.006 ± 838896.860  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.observers.LambdaObserverTest._Benchmark.benchmark_onErrorMissingShouldReportNoCustomOnError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.observers.LambdaObserverTest._Benchmark.benchmark_onErrorMissingShouldReportNoCustomOnError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 32353534.757 ops/s
# Warmup Iteration   2: 42699980.205 ops/s
# Warmup Iteration   3: 61682847.025 ops/s
# Warmup Iteration   4: 58061376.841 ops/s
# Warmup Iteration   5: 57392674.557 ops/s
# Warmup Iteration   6: 58162787.718 ops/s
# Warmup Iteration   7: 59028165.781 ops/s
# Warmup Iteration   8: 47151531.352 ops/s
# Warmup Iteration   9: 59632956.656 ops/s
# Warmup Iteration  10: 59828891.490 ops/s
# Warmup Iteration  11: 57745142.282 ops/s
# Warmup Iteration  12: 58690122.486 ops/s
# Warmup Iteration  13: 60539112.910 ops/s
# Warmup Iteration  14: 58130437.877 ops/s
# Warmup Iteration  15: 58971790.688 ops/s
# Warmup Iteration  16: 59379295.298 ops/s
# Warmup Iteration  17: 57349520.004 ops/s
# Warmup Iteration  18: 58889714.401 ops/s
# Warmup Iteration  19: 59085792.045 ops/s
# Warmup Iteration  20: 58135626.981 ops/s
# Warmup Iteration  21: 59132008.740 ops/s
# Warmup Iteration  22: 61012430.288 ops/s
# Warmup Iteration  23: 58933334.074 ops/s
# Warmup Iteration  24: 57722248.312 ops/s
# Warmup Iteration  25: 59735704.650 ops/s
# Warmup Iteration  26: 57122856.635 ops/s
# Warmup Iteration  27: 58708294.480 ops/s
# Warmup Iteration  28: 59421103.266 ops/s
# Warmup Iteration  29: 58340898.015 ops/s
# Warmup Iteration  30: 60168662.284 ops/s
Iteration   1: 56951018.313 ops/s
Iteration   2: 59398533.385 ops/s
Iteration   3: 56974070.455 ops/s
Iteration   4: 58049980.053 ops/s
Iteration   5: 61186634.662 ops/s
Iteration   6: 57580856.953 ops/s
Iteration   7: 60884973.396 ops/s
Iteration   8: 57697832.647 ops/s
Iteration   9: 58951094.685 ops/s
Iteration  10: 56476134.575 ops/s
Iteration  11: 59858341.428 ops/s
Iteration  12: 58614107.984 ops/s
Iteration  13: 57635205.830 ops/s
Iteration  14: 59189283.090 ops/s
Iteration  15: 57358062.877 ops/s
Iteration  16: 59118734.959 ops/s
Iteration  17: 58806604.520 ops/s
Iteration  18: 57667351.834 ops/s
Iteration  19: 59053327.674 ops/s
Iteration  20: 58341036.118 ops/s
Iteration  21: 59412467.444 ops/s
Iteration  22: 57283439.588 ops/s
Iteration  23: 57987813.969 ops/s
Iteration  24: 60329425.512 ops/s
Iteration  25: 57250795.458 ops/s
Iteration  26: 58967519.406 ops/s
Iteration  27: 56581711.104 ops/s
Iteration  28: 58686546.235 ops/s
Iteration  29: 62334063.141 ops/s
Iteration  30: 56380720.852 ops/s


Result "io.reactivex.rxjava3.internal.observers.LambdaObserverTest._Benchmark.benchmark_onErrorMissingShouldReportNoCustomOnError":
  58500256.272 ±(99.9%) 968387.444 ops/s [Average]
  (min, avg, max) = (56380720.852, 58500256.272, 62334063.141), stdev = 1449436.848
  CI (99.9%): [57531868.827, 59468643.716] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           Mode  Cnt         Score        Error  Units
LambdaObserverTest._Benchmark.benchmark_onErrorMissingShouldReportNoCustomOnError  thrpt   30  58500256.272 ± 968387.444  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.disposables.FutureDisposableTest._Benchmark.benchmark_interruptible$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.disposables.FutureDisposableTest._Benchmark.benchmark_interruptible

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 6878044.302 ops/s
# Warmup Iteration   2: 8993386.005 ops/s
# Warmup Iteration   3: 10254910.138 ops/s
# Warmup Iteration   4: 11539838.028 ops/s
# Warmup Iteration   5: 11393353.769 ops/s
# Warmup Iteration   6: 11181762.694 ops/s
# Warmup Iteration   7: 11027730.672 ops/s
# Warmup Iteration   8: 11456920.995 ops/s
# Warmup Iteration   9: 10754029.284 ops/s
# Warmup Iteration  10: 11465677.178 ops/s
# Warmup Iteration  11: 11237486.782 ops/s
# Warmup Iteration  12: 11062460.141 ops/s
# Warmup Iteration  13: 11608012.612 ops/s
# Warmup Iteration  14: 11876989.416 ops/s
# Warmup Iteration  15: 11075967.084 ops/s
# Warmup Iteration  16: 11446915.554 ops/s
# Warmup Iteration  17: 11166351.165 ops/s
# Warmup Iteration  18: 11151961.541 ops/s
# Warmup Iteration  19: 11144635.833 ops/s
# Warmup Iteration  20: 11341090.236 ops/s
# Warmup Iteration  21: 11501017.604 ops/s
# Warmup Iteration  22: 11408175.329 ops/s
# Warmup Iteration  23: 10887846.853 ops/s
# Warmup Iteration  24: 11467170.176 ops/s
# Warmup Iteration  25: 11214895.327 ops/s
# Warmup Iteration  26: 11299268.646 ops/s
# Warmup Iteration  27: 11527899.129 ops/s
# Warmup Iteration  28: 10957780.766 ops/s
# Warmup Iteration  29: 11674146.388 ops/s
# Warmup Iteration  30: 11117843.580 ops/s
Iteration   1: 11410732.969 ops/s
Iteration   2: 11448263.107 ops/s
Iteration   3: 10768582.754 ops/s
Iteration   4: 11334564.672 ops/s
Iteration   5: 11009382.908 ops/s
Iteration   6: 11552445.973 ops/s
Iteration   7: 11136134.122 ops/s
Iteration   8: 11559486.027 ops/s
Iteration   9: 11016460.549 ops/s
Iteration  10: 11624535.390 ops/s
Iteration  11: 11342557.649 ops/s
Iteration  12: 11324792.677 ops/s
Iteration  13: 11754927.838 ops/s
Iteration  14: 11469128.182 ops/s
Iteration  15: 10954575.115 ops/s
Iteration  16: 11120063.709 ops/s
Iteration  17: 11815129.047 ops/s
Iteration  18: 10693698.951 ops/s
Iteration  19: 11604363.161 ops/s
Iteration  20: 11761301.243 ops/s
Iteration  21: 11080269.323 ops/s
Iteration  22: 11703087.909 ops/s
Iteration  23: 11031970.600 ops/s
Iteration  24: 11338597.665 ops/s
Iteration  25: 11192039.012 ops/s
Iteration  26: 11415947.263 ops/s
Iteration  27: 10872325.005 ops/s
Iteration  28: 11568406.721 ops/s
Iteration  29: 11184128.778 ops/s
Iteration  30: 11280405.576 ops/s


Result "io.reactivex.rxjava3.disposables.FutureDisposableTest._Benchmark.benchmark_interruptible":
  11312276.797 ±(99.9%) 201866.318 ops/s [Average]
  (min, avg, max) = (10693698.951, 11312276.797, 11815129.047), stdev = 302144.025
  CI (99.9%): [11110410.478, 11514143.115] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt         Score        Error  Units
FutureDisposableTest._Benchmark.benchmark_interruptible  thrpt   30  11312276.797 ± 201866.318  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerateTest._Benchmark.benchmark_badRequest$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerateTest._Benchmark.benchmark_badRequest

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 99633.167 ops/s
# Warmup Iteration   2: 412769.552 ops/s
# Warmup Iteration   3: 371995.740 ops/s
# Warmup Iteration   4: 491634.503 ops/s
# Warmup Iteration   5: 500549.550 ops/s
# Warmup Iteration   6: 498034.281 ops/s
# Warmup Iteration   7: 490631.545 ops/s
# Warmup Iteration   8: 505986.160 ops/s
# Warmup Iteration   9: 484478.235 ops/s
# Warmup Iteration  10: 510269.439 ops/s
# Warmup Iteration  11: 482881.057 ops/s
# Warmup Iteration  12: 490476.676 ops/s
# Warmup Iteration  13: 498108.879 ops/s
# Warmup Iteration  14: 501612.153 ops/s
# Warmup Iteration  15: 508289.499 ops/s
# Warmup Iteration  16: 490119.698 ops/s
# Warmup Iteration  17: 513709.448 ops/s
# Warmup Iteration  18: 507370.900 ops/s
# Warmup Iteration  19: 523984.548 ops/s
# Warmup Iteration  20: 553620.897 ops/s
# Warmup Iteration  21: 504461.103 ops/s
# Warmup Iteration  22: 521255.084 ops/s
# Warmup Iteration  23: 539912.936 ops/s
# Warmup Iteration  24: 534064.433 ops/s
# Warmup Iteration  25: 508031.134 ops/s
# Warmup Iteration  26: 533654.969 ops/s
# Warmup Iteration  27: 536064.259 ops/s
# Warmup Iteration  28: 524524.092 ops/s
# Warmup Iteration  29: 514910.538 ops/s
# Warmup Iteration  30: 513865.693 ops/s
Iteration   1: 496174.995 ops/s
Iteration   2: 547023.060 ops/s
Iteration   3: 516570.014 ops/s
Iteration   4: 528762.502 ops/s
Iteration   5: 542303.221 ops/s
Iteration   6: 514054.864 ops/s
Iteration   7: 531907.037 ops/s
Iteration   8: 512979.611 ops/s
Iteration   9: 539346.051 ops/s
Iteration  10: 514101.243 ops/s
Iteration  11: 532897.505 ops/s
Iteration  12: 542771.662 ops/s
Iteration  13: 522244.888 ops/s
Iteration  14: 540874.837 ops/s
Iteration  15: 536810.703 ops/s
Iteration  16: 514035.803 ops/s
Iteration  17: 548650.923 ops/s
Iteration  18: 531651.892 ops/s
Iteration  19: 518082.535 ops/s
Iteration  20: 523526.786 ops/s
Iteration  21: 515600.783 ops/s
Iteration  22: 553030.135 ops/s
Iteration  23: 510328.775 ops/s
Iteration  24: 548090.995 ops/s
Iteration  25: 508856.558 ops/s
Iteration  26: 554116.770 ops/s
Iteration  27: 517234.070 ops/s
Iteration  28: 526515.870 ops/s
Iteration  29: 551703.570 ops/s
Iteration  30: 485777.666 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerateTest._Benchmark.benchmark_badRequest":
  527534.177 ±(99.9%) 11598.983 ops/s [Average]
  (min, avg, max) = (485777.666, 527534.177, 554116.770), stdev = 17360.813
  CI (99.9%): [515935.195, 539133.160] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score       Error  Units
FlowableGenerateTest._Benchmark.benchmark_badRequest  thrpt   30  527534.177 ± 11598.983  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.functions.FunctionsTest._Benchmark.benchmark_emptyConsumerToString$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.functions.FunctionsTest._Benchmark.benchmark_emptyConsumerToString

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 29561329.783 ops/s
# Warmup Iteration   2: 41588438.160 ops/s
# Warmup Iteration   3: 59521087.126 ops/s
# Warmup Iteration   4: 58190159.299 ops/s
# Warmup Iteration   5: 58912851.246 ops/s
# Warmup Iteration   6: 57185170.566 ops/s
# Warmup Iteration   7: 59466259.121 ops/s
# Warmup Iteration   8: 58939249.007 ops/s
# Warmup Iteration   9: 58589504.837 ops/s
# Warmup Iteration  10: 60758349.191 ops/s
# Warmup Iteration  11: 58843771.118 ops/s
# Warmup Iteration  12: 56374132.242 ops/s
# Warmup Iteration  13: 59394690.587 ops/s
# Warmup Iteration  14: 57505185.444 ops/s
# Warmup Iteration  15: 60422676.230 ops/s
# Warmup Iteration  16: 57235808.494 ops/s
# Warmup Iteration  17: 57556167.717 ops/s
# Warmup Iteration  18: 58960879.913 ops/s
# Warmup Iteration  19: 59694299.294 ops/s
# Warmup Iteration  20: 57585018.826 ops/s
# Warmup Iteration  21: 60788821.189 ops/s
# Warmup Iteration  22: 57980863.962 ops/s
# Warmup Iteration  23: 58254339.800 ops/s
# Warmup Iteration  24: 58170968.218 ops/s
# Warmup Iteration  25: 59144533.381 ops/s
# Warmup Iteration  26: 58730123.180 ops/s
# Warmup Iteration  27: 59495065.598 ops/s
# Warmup Iteration  28: 60275572.210 ops/s
# Warmup Iteration  29: 57295432.600 ops/s
# Warmup Iteration  30: 60138295.584 ops/s
Iteration   1: 58150735.022 ops/s
Iteration   2: 57747748.728 ops/s
Iteration   3: 59438986.632 ops/s
Iteration   4: 59386697.900 ops/s
Iteration   5: 57195223.224 ops/s
Iteration   6: 60271364.566 ops/s
Iteration   7: 57532920.840 ops/s
Iteration   8: 58585177.887 ops/s
Iteration   9: 61380568.309 ops/s
Iteration  10: 56630411.386 ops/s
Iteration  11: 59672909.571 ops/s
Iteration  12: 60759300.306 ops/s
Iteration  13: 56437575.087 ops/s
Iteration  14: 58591849.033 ops/s
Iteration  15: 58267711.821 ops/s
Iteration  16: 57959983.326 ops/s
Iteration  17: 59776477.920 ops/s
Iteration  18: 59137181.395 ops/s
Iteration  19: 59793305.993 ops/s
Iteration  20: 56955783.571 ops/s
Iteration  21: 58043736.328 ops/s
Iteration  22: 60613104.038 ops/s
Iteration  23: 56943473.633 ops/s
Iteration  24: 58891011.697 ops/s
Iteration  25: 58823971.832 ops/s
Iteration  26: 58908405.368 ops/s
Iteration  27: 59674745.037 ops/s
Iteration  28: 57223460.167 ops/s
Iteration  29: 57383775.752 ops/s
Iteration  30: 46251982.464 ops/s


Result "io.reactivex.rxjava3.internal.functions.FunctionsTest._Benchmark.benchmark_emptyConsumerToString":
  58214319.294 ±(99.9%) 1738925.775 ops/s [Average]
  (min, avg, max) = (46251982.464, 58214319.294, 61380568.309), stdev = 2602742.434
  CI (99.9%): [56475393.520, 59953245.069] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt         Score         Error  Units
FunctionsTest._Benchmark.benchmark_emptyConsumerToString  thrpt   30  58214319.294 ± 1738925.775  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.functions.FunctionsTest._Benchmark.benchmark_emptyActionToString$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.functions.FunctionsTest._Benchmark.benchmark_emptyActionToString

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 29537068.227 ops/s
# Warmup Iteration   2: 41787069.817 ops/s
# Warmup Iteration   3: 58470396.531 ops/s
# Warmup Iteration   4: 58864000.507 ops/s
# Warmup Iteration   5: 60317952.190 ops/s
# Warmup Iteration   6: 58710631.448 ops/s
# Warmup Iteration   7: 57094416.481 ops/s
# Warmup Iteration   8: 59848536.820 ops/s
# Warmup Iteration   9: 57857045.579 ops/s
# Warmup Iteration  10: 61069566.836 ops/s
# Warmup Iteration  11: 57107070.811 ops/s
# Warmup Iteration  12: 60590503.067 ops/s
# Warmup Iteration  13: 57436001.045 ops/s
# Warmup Iteration  14: 59378051.008 ops/s
# Warmup Iteration  15: 58734970.578 ops/s
# Warmup Iteration  16: 58185691.758 ops/s
# Warmup Iteration  17: 60941828.208 ops/s
# Warmup Iteration  18: 57389569.791 ops/s
# Warmup Iteration  19: 58617287.632 ops/s
# Warmup Iteration  20: 57154701.715 ops/s
# Warmup Iteration  21: 60322721.248 ops/s
# Warmup Iteration  22: 58970934.533 ops/s
# Warmup Iteration  23: 56346801.363 ops/s
# Warmup Iteration  24: 59929134.372 ops/s
# Warmup Iteration  25: 58786368.268 ops/s
# Warmup Iteration  26: 57097606.559 ops/s
# Warmup Iteration  27: 58866086.037 ops/s
# Warmup Iteration  28: 60093410.274 ops/s
# Warmup Iteration  29: 57750045.472 ops/s
# Warmup Iteration  30: 61496638.134 ops/s
Iteration   1: 56138412.114 ops/s
Iteration   2: 58581499.165 ops/s
Iteration   3: 59640005.578 ops/s
Iteration   4: 57786619.847 ops/s
Iteration   5: 60786771.840 ops/s
Iteration   6: 59001532.902 ops/s
Iteration   7: 59175512.314 ops/s
Iteration   8: 59074009.936 ops/s
Iteration   9: 58535151.839 ops/s
Iteration  10: 59885341.024 ops/s
Iteration  11: 58049657.082 ops/s
Iteration  12: 58397321.851 ops/s
Iteration  13: 58173356.454 ops/s
Iteration  14: 60047981.537 ops/s
Iteration  15: 57148965.674 ops/s
Iteration  16: 56462232.205 ops/s
Iteration  17: 59970007.079 ops/s
Iteration  18: 57760657.225 ops/s
Iteration  19: 58596891.741 ops/s
Iteration  20: 56712486.894 ops/s
Iteration  21: 58614980.674 ops/s
Iteration  22: 57418893.595 ops/s
Iteration  23: 59284626.989 ops/s
Iteration  24: 55779390.917 ops/s
Iteration  25: 58043150.480 ops/s
Iteration  26: 58198652.342 ops/s
Iteration  27: 59055654.998 ops/s
Iteration  28: 58996610.994 ops/s
Iteration  29: 58604795.521 ops/s
Iteration  30: 59567442.090 ops/s


Result "io.reactivex.rxjava3.internal.functions.FunctionsTest._Benchmark.benchmark_emptyActionToString":
  58449620.430 ±(99.9%) 797443.574 ops/s [Average]
  (min, avg, max) = (55779390.917, 58449620.430, 60786771.840), stdev = 1193576.091
  CI (99.9%): [57652176.856, 59247064.004] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt         Score        Error  Units
FunctionsTest._Benchmark.benchmark_emptyActionToString  thrpt   30  58449620.430 ± 797443.574  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.functions.FunctionsTest._Benchmark.benchmark_emptyRunnableToString$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.functions.FunctionsTest._Benchmark.benchmark_emptyRunnableToString

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 29664879.491 ops/s
# Warmup Iteration   2: 41056848.976 ops/s
# Warmup Iteration   3: 59954162.782 ops/s
# Warmup Iteration   4: 57522110.896 ops/s
# Warmup Iteration   5: 60129884.190 ops/s
# Warmup Iteration   6: 57461017.547 ops/s
# Warmup Iteration   7: 57841326.675 ops/s
# Warmup Iteration   8: 60626173.996 ops/s
# Warmup Iteration   9: 59712933.940 ops/s
# Warmup Iteration  10: 57931829.919 ops/s
# Warmup Iteration  11: 60284242.407 ops/s
# Warmup Iteration  12: 59565127.990 ops/s
# Warmup Iteration  13: 56011360.738 ops/s
# Warmup Iteration  14: 59766282.393 ops/s
# Warmup Iteration  15: 58573556.969 ops/s
# Warmup Iteration  16: 59353866.947 ops/s
# Warmup Iteration  17: 57449807.827 ops/s
# Warmup Iteration  18: 57740370.326 ops/s
# Warmup Iteration  19: 59727634.060 ops/s
# Warmup Iteration  20: 56754564.950 ops/s
# Warmup Iteration  21: 59532120.624 ops/s
# Warmup Iteration  22: 56857525.855 ops/s
# Warmup Iteration  23: 59091366.977 ops/s
# Warmup Iteration  24: 57429821.218 ops/s
# Warmup Iteration  25: 57465160.725 ops/s
# Warmup Iteration  26: 61076683.105 ops/s
# Warmup Iteration  27: 57559714.720 ops/s
# Warmup Iteration  28: 58651148.753 ops/s
# Warmup Iteration  29: 59698270.635 ops/s
# Warmup Iteration  30: 59139616.401 ops/s
Iteration   1: 56536982.277 ops/s
Iteration   2: 60866533.907 ops/s
Iteration   3: 56988448.248 ops/s
Iteration   4: 58459626.543 ops/s
Iteration   5: 60242756.575 ops/s
Iteration   6: 56120983.132 ops/s
Iteration   7: 60142078.609 ops/s
Iteration   8: 57150059.240 ops/s
Iteration   9: 60010609.544 ops/s
Iteration  10: 56865134.433 ops/s
Iteration  11: 59910555.115 ops/s
Iteration  12: 58305689.787 ops/s
Iteration  13: 58168103.176 ops/s
Iteration  14: 58752892.290 ops/s
Iteration  15: 59419686.403 ops/s
Iteration  16: 56744714.311 ops/s
Iteration  17: 59217171.466 ops/s
Iteration  18: 57802911.201 ops/s
Iteration  19: 59836692.270 ops/s
Iteration  20: 57033997.563 ops/s
Iteration  21: 58622586.726 ops/s
Iteration  22: 59283949.536 ops/s
Iteration  23: 57589404.227 ops/s
Iteration  24: 56919711.723 ops/s
Iteration  25: 49036803.603 ops/s
Iteration  26: 59963631.576 ops/s
Iteration  27: 56608105.862 ops/s
Iteration  28: 59509122.447 ops/s
Iteration  29: 57282553.707 ops/s
Iteration  30: 59523101.434 ops/s


Result "io.reactivex.rxjava3.internal.functions.FunctionsTest._Benchmark.benchmark_emptyRunnableToString":
  58097153.231 ±(99.9%) 1462097.780 ops/s [Average]
  (min, avg, max) = (49036803.603, 58097153.231, 60866533.907), stdev = 2188399.292
  CI (99.9%): [56635055.451, 59559251.011] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt         Score         Error  Units
FunctionsTest._Benchmark.benchmark_emptyRunnableToString  thrpt   30  58097153.231 ± 1462097.780  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterableTest._Benchmark.benchmark_normalConditionalBackpressured$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterableTest._Benchmark.benchmark_normalConditionalBackpressured

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 538844.890 ops/s
# Warmup Iteration   2: 1944326.400 ops/s
# Warmup Iteration   3: 2528544.479 ops/s
# Warmup Iteration   4: 3183010.267 ops/s
# Warmup Iteration   5: 2937772.082 ops/s
# Warmup Iteration   6: 3100625.715 ops/s
# Warmup Iteration   7: 3148101.603 ops/s
# Warmup Iteration   8: 3047347.670 ops/s
# Warmup Iteration   9: 3046247.323 ops/s
# Warmup Iteration  10: 2954378.774 ops/s
# Warmup Iteration  11: 3028978.741 ops/s
# Warmup Iteration  12: 3168704.373 ops/s
# Warmup Iteration  13: 2993462.189 ops/s
# Warmup Iteration  14: 3178927.032 ops/s
# Warmup Iteration  15: 3002031.276 ops/s
# Warmup Iteration  16: 3155576.783 ops/s
# Warmup Iteration  17: 2894795.559 ops/s
# Warmup Iteration  18: 3061554.451 ops/s
# Warmup Iteration  19: 3034321.794 ops/s
# Warmup Iteration  20: 3092085.406 ops/s
# Warmup Iteration  21: 3141137.634 ops/s
# Warmup Iteration  22: 3213775.864 ops/s
# Warmup Iteration  23: 2883114.633 ops/s
# Warmup Iteration  24: 3079120.057 ops/s
# Warmup Iteration  25: 3080425.163 ops/s
# Warmup Iteration  26: 3038465.736 ops/s
# Warmup Iteration  27: 3176516.222 ops/s
# Warmup Iteration  28: 2988449.295 ops/s
# Warmup Iteration  29: 3064954.524 ops/s
# Warmup Iteration  30: 2972214.268 ops/s
Iteration   1: 3102886.233 ops/s
Iteration   2: 3019814.233 ops/s
Iteration   3: 3016179.956 ops/s
Iteration   4: 3081190.478 ops/s
Iteration   5: 3127449.472 ops/s
Iteration   6: 2962968.867 ops/s
Iteration   7: 3105465.342 ops/s
Iteration   8: 3061912.638 ops/s
Iteration   9: 3124291.136 ops/s
Iteration  10: 3031100.196 ops/s
Iteration  11: 3026886.218 ops/s
Iteration  12: 3147045.251 ops/s
Iteration  13: 3014023.328 ops/s
Iteration  14: 3017756.063 ops/s
Iteration  15: 3063019.711 ops/s
Iteration  16: 3031809.328 ops/s
Iteration  17: 3081509.222 ops/s
Iteration  18: 3090307.296 ops/s
Iteration  19: 3022041.757 ops/s
Iteration  20: 3174410.576 ops/s
Iteration  21: 2939114.919 ops/s
Iteration  22: 3039510.845 ops/s
Iteration  23: 3163497.284 ops/s
Iteration  24: 3049197.002 ops/s
Iteration  25: 3124072.789 ops/s
Iteration  26: 3020273.430 ops/s
Iteration  27: 3043495.356 ops/s
Iteration  28: 3189044.255 ops/s
Iteration  29: 3014196.943 ops/s
Iteration  30: 3115713.872 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterableTest._Benchmark.benchmark_normalConditionalBackpressured":
  3066672.800 ±(99.9%) 40857.009 ops/s [Average]
  (min, avg, max) = (2939114.919, 3066672.800, 3189044.255), stdev = 61152.853
  CI (99.9%): [3025815.791, 3107529.809] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score       Error  Units
FlowableFromIterableTest._Benchmark.benchmark_normalConditionalBackpressured  thrpt   30  3066672.800 ± 40857.009  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterableTest._Benchmark.benchmark_normalConditionalBackpressured2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterableTest._Benchmark.benchmark_normalConditionalBackpressured2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 294153.349 ops/s
# Warmup Iteration   2: 1681852.546 ops/s
# Warmup Iteration   3: 2246355.038 ops/s
# Warmup Iteration   4: 2725049.363 ops/s
# Warmup Iteration   5: 2906422.906 ops/s
# Warmup Iteration   6: 2807059.495 ops/s
# Warmup Iteration   7: 2862067.518 ops/s
# Warmup Iteration   8: 2826102.443 ops/s
# Warmup Iteration   9: 2859067.249 ops/s
# Warmup Iteration  10: 2917539.938 ops/s
# Warmup Iteration  11: 2688091.030 ops/s
# Warmup Iteration  12: 2892503.474 ops/s
# Warmup Iteration  13: 2763091.866 ops/s
# Warmup Iteration  14: 2868585.806 ops/s
# Warmup Iteration  15: 2878809.543 ops/s
# Warmup Iteration  16: 2928929.004 ops/s
# Warmup Iteration  17: 2741796.661 ops/s
# Warmup Iteration  18: 2833703.813 ops/s
# Warmup Iteration  19: 2894058.092 ops/s
# Warmup Iteration  20: 2685968.886 ops/s
# Warmup Iteration  21: 2870988.780 ops/s
# Warmup Iteration  22: 2747384.933 ops/s
# Warmup Iteration  23: 2880825.945 ops/s
# Warmup Iteration  24: 2744546.125 ops/s
# Warmup Iteration  25: 2795916.225 ops/s
# Warmup Iteration  26: 2818134.272 ops/s
# Warmup Iteration  27: 2748874.588 ops/s
# Warmup Iteration  28: 2851326.823 ops/s
# Warmup Iteration  29: 2846819.689 ops/s
# Warmup Iteration  30: 2812620.229 ops/s
Iteration   1: 2823367.553 ops/s
Iteration   2: 2804411.955 ops/s
Iteration   3: 2865980.255 ops/s
Iteration   4: 2760183.190 ops/s
Iteration   5: 2813576.604 ops/s
Iteration   6: 2758580.554 ops/s
Iteration   7: 2868213.573 ops/s
Iteration   8: 2758971.486 ops/s
Iteration   9: 2934528.655 ops/s
Iteration  10: 2890293.220 ops/s
Iteration  11: 2709775.119 ops/s
Iteration  12: 2987395.591 ops/s
Iteration  13: 2795236.491 ops/s
Iteration  14: 2814949.747 ops/s
Iteration  15: 2893868.563 ops/s
Iteration  16: 2766767.787 ops/s
Iteration  17: 2832637.253 ops/s
Iteration  18: 2846131.633 ops/s
Iteration  19: 2228948.091 ops/s
Iteration  20: 2909876.457 ops/s
Iteration  21: 2716933.097 ops/s
Iteration  22: 2897437.508 ops/s
Iteration  23: 2778157.098 ops/s
Iteration  24: 2889861.703 ops/s
Iteration  25: 2818476.531 ops/s
Iteration  26: 2808426.505 ops/s
Iteration  27: 2842036.337 ops/s
Iteration  28: 2804560.496 ops/s
Iteration  29: 2830250.452 ops/s
Iteration  30: 2818931.751 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterableTest._Benchmark.benchmark_normalConditionalBackpressured2":
  2808958.842 ±(99.9%) 84308.814 ops/s [Average]
  (min, avg, max) = (2228948.091, 2808958.842, 2987395.591), stdev = 126189.473
  CI (99.9%): [2724650.028, 2893267.656] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt        Score       Error  Units
FlowableFromIterableTest._Benchmark.benchmark_normalConditionalBackpressured2  thrpt   30  2808958.842 ± 84308.814  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.disposables.FutureDisposableTest._Benchmark.benchmark_normal$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.disposables.FutureDisposableTest._Benchmark.benchmark_normal

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 6590044.888 ops/s
# Warmup Iteration   2: 9226859.435 ops/s
# Warmup Iteration   3: 10104946.349 ops/s
# Warmup Iteration   4: 10772264.161 ops/s
# Warmup Iteration   5: 11699104.923 ops/s
# Warmup Iteration   6: 11062662.001 ops/s
# Warmup Iteration   7: 10921255.341 ops/s
# Warmup Iteration   8: 11573611.392 ops/s
# Warmup Iteration   9: 10897280.705 ops/s
# Warmup Iteration  10: 11848028.395 ops/s
# Warmup Iteration  11: 10917437.953 ops/s
# Warmup Iteration  12: 11289022.091 ops/s
# Warmup Iteration  13: 11429702.882 ops/s
# Warmup Iteration  14: 11117993.483 ops/s
# Warmup Iteration  15: 11353425.053 ops/s
# Warmup Iteration  16: 11111563.287 ops/s
# Warmup Iteration  17: 11139378.235 ops/s
# Warmup Iteration  18: 11211453.258 ops/s
# Warmup Iteration  19: 11766486.965 ops/s
# Warmup Iteration  20: 11166879.211 ops/s
# Warmup Iteration  21: 11332458.360 ops/s
# Warmup Iteration  22: 11548130.754 ops/s
# Warmup Iteration  23: 11307435.890 ops/s
# Warmup Iteration  24: 11261365.759 ops/s
# Warmup Iteration  25: 11392575.710 ops/s
# Warmup Iteration  26: 10692485.361 ops/s
# Warmup Iteration  27: 11334134.276 ops/s
# Warmup Iteration  28: 11431134.629 ops/s
# Warmup Iteration  29: 11335261.614 ops/s
# Warmup Iteration  30: 11346187.382 ops/s
Iteration   1: 10984567.938 ops/s
Iteration   2: 11241462.380 ops/s
Iteration   3: 11294536.018 ops/s
Iteration   4: 11050042.586 ops/s
Iteration   5: 11613438.044 ops/s
Iteration   6: 10694417.653 ops/s
Iteration   7: 11442155.403 ops/s
Iteration   8: 11190424.219 ops/s
Iteration   9: 11494225.913 ops/s
Iteration  10: 11248454.017 ops/s
Iteration  11: 11014788.633 ops/s
Iteration  12: 11807508.117 ops/s
Iteration  13: 11124129.151 ops/s
Iteration  14: 11004031.508 ops/s
Iteration  15: 11223645.776 ops/s
Iteration  16: 11355557.674 ops/s
Iteration  17: 11253264.059 ops/s
Iteration  18: 11529322.461 ops/s
Iteration  19: 11080356.351 ops/s
Iteration  20: 11503859.695 ops/s
Iteration  21: 10861791.890 ops/s
Iteration  22: 11612170.753 ops/s
Iteration  23: 11167385.248 ops/s
Iteration  24: 11650697.964 ops/s
Iteration  25: 11483995.870 ops/s
Iteration  26: 11597144.328 ops/s
Iteration  27: 11425897.679 ops/s
Iteration  28: 11008551.227 ops/s
Iteration  29: 11401193.649 ops/s
Iteration  30: 11664373.837 ops/s


Result "io.reactivex.rxjava3.disposables.FutureDisposableTest._Benchmark.benchmark_normal":
  11300779.668 ±(99.9%) 180211.892 ops/s [Average]
  (min, avg, max) = (10694417.653, 11300779.668, 11807508.117), stdev = 269732.696
  CI (99.9%): [11120567.776, 11480991.560] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt         Score        Error  Units
FutureDisposableTest._Benchmark.benchmark_normal  thrpt   30  11300779.668 ± 180211.892  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMaterializeTest._Benchmark.benchmark_backpressureWithEmissionThenError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMaterializeTest._Benchmark.benchmark_backpressureWithEmissionThenError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 72652.582 ops/s
# Warmup Iteration   2: 464633.363 ops/s
# Warmup Iteration   3: 567843.878 ops/s
# Warmup Iteration   4: 532455.128 ops/s
# Warmup Iteration   5: 569142.199 ops/s
# Warmup Iteration   6: 556637.788 ops/s
# Warmup Iteration   7: 567668.932 ops/s
# Warmup Iteration   8: 523028.957 ops/s
# Warmup Iteration   9: 541552.657 ops/s
# Warmup Iteration  10: 580108.469 ops/s
# Warmup Iteration  11: 553193.855 ops/s
# Warmup Iteration  12: 561999.429 ops/s
# Warmup Iteration  13: 575851.818 ops/s
# Warmup Iteration  14: 555604.787 ops/s
# Warmup Iteration  15: 561490.983 ops/s
# Warmup Iteration  16: 545362.669 ops/s
# Warmup Iteration  17: 584468.499 ops/s
# Warmup Iteration  18: 586472.041 ops/s
# Warmup Iteration  19: 571276.027 ops/s
# Warmup Iteration  20: 590021.481 ops/s
# Warmup Iteration  21: 597787.374 ops/s
# Warmup Iteration  22: 573209.565 ops/s
# Warmup Iteration  23: 563908.261 ops/s
# Warmup Iteration  24: 596369.767 ops/s
# Warmup Iteration  25: 572323.489 ops/s
# Warmup Iteration  26: 611916.858 ops/s
# Warmup Iteration  27: 595593.321 ops/s
# Warmup Iteration  28: 585949.185 ops/s
# Warmup Iteration  29: 606568.481 ops/s
# Warmup Iteration  30: 579090.176 ops/s
Iteration   1: 601789.595 ops/s
Iteration   2: 582487.553 ops/s
Iteration   3: 599296.829 ops/s
Iteration   4: 593830.973 ops/s
Iteration   5: 572003.497 ops/s
Iteration   6: 585921.378 ops/s
Iteration   7: 585428.328 ops/s
Iteration   8: 553370.825 ops/s
Iteration   9: 592864.189 ops/s
Iteration  10: 581603.381 ops/s
Iteration  11: 606623.679 ops/s
Iteration  12: 580858.599 ops/s
Iteration  13: 607789.392 ops/s
Iteration  14: 491845.031 ops/s
Iteration  15: 545361.934 ops/s
Iteration  16: 616126.648 ops/s
Iteration  17: 570944.231 ops/s
Iteration  18: 600695.805 ops/s
Iteration  19: 573352.593 ops/s
Iteration  20: 608195.714 ops/s
Iteration  21: 597100.057 ops/s
Iteration  22: 582140.456 ops/s
Iteration  23: 598284.773 ops/s
Iteration  24: 572576.765 ops/s
Iteration  25: 592315.414 ops/s
Iteration  26: 615169.371 ops/s
Iteration  27: 579749.363 ops/s
Iteration  28: 610123.342 ops/s
Iteration  29: 559323.498 ops/s
Iteration  30: 594067.530 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableMaterializeTest._Benchmark.benchmark_backpressureWithEmissionThenError":
  585041.358 ±(99.9%) 16646.628 ops/s [Average]
  (min, avg, max) = (491845.031, 585041.358, 616126.648), stdev = 24915.891
  CI (99.9%): [568394.730, 601687.986] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt       Score       Error  Units
FlowableMaterializeTest._Benchmark.benchmark_backpressureWithEmissionThenError  thrpt   30  585041.358 ± 16646.628  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.subscribers.BoundedSubscriberTest._Benchmark.benchmark_customOnErrorShouldReportCustomOnError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.subscribers.BoundedSubscriberTest._Benchmark.benchmark_customOnErrorShouldReportCustomOnError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 26655376.628 ops/s
# Warmup Iteration   2: 39442766.005 ops/s
# Warmup Iteration   3: 42663106.896 ops/s
# Warmup Iteration   4: 42876311.462 ops/s
# Warmup Iteration   5: 44162612.537 ops/s
# Warmup Iteration   6: 41979661.707 ops/s
# Warmup Iteration   7: 42175196.369 ops/s
# Warmup Iteration   8: 42619938.793 ops/s
# Warmup Iteration   9: 44502415.986 ops/s
# Warmup Iteration  10: 41395864.940 ops/s
# Warmup Iteration  11: 43003234.507 ops/s
# Warmup Iteration  12: 44099213.707 ops/s
# Warmup Iteration  13: 42457265.226 ops/s
# Warmup Iteration  14: 43972714.002 ops/s
# Warmup Iteration  15: 41679444.073 ops/s
# Warmup Iteration  16: 43202055.851 ops/s
# Warmup Iteration  17: 42714152.357 ops/s
# Warmup Iteration  18: 44943443.870 ops/s
# Warmup Iteration  19: 43914968.262 ops/s
# Warmup Iteration  20: 41383866.041 ops/s
# Warmup Iteration  21: 45239865.842 ops/s
# Warmup Iteration  22: 41663471.409 ops/s
# Warmup Iteration  23: 43006701.437 ops/s
# Warmup Iteration  24: 42299567.755 ops/s
# Warmup Iteration  25: 43806577.484 ops/s
# Warmup Iteration  26: 41939566.188 ops/s
# Warmup Iteration  27: 44408576.610 ops/s
# Warmup Iteration  28: 42287871.419 ops/s
# Warmup Iteration  29: 43094550.171 ops/s
# Warmup Iteration  30: 43437012.523 ops/s
Iteration   1: 42553040.602 ops/s
Iteration   2: 43948864.886 ops/s
Iteration   3: 42933240.517 ops/s
Iteration   4: 44227822.774 ops/s
Iteration   5: 45793112.727 ops/s
Iteration   6: 41773866.984 ops/s
Iteration   7: 42721078.964 ops/s
Iteration   8: 45056737.366 ops/s
Iteration   9: 41222529.702 ops/s
Iteration  10: 44224893.430 ops/s
Iteration  11: 42192682.184 ops/s
Iteration  12: 43374455.606 ops/s
Iteration  13: 42361067.750 ops/s
Iteration  14: 42869772.155 ops/s
Iteration  15: 43101579.418 ops/s
Iteration  16: 44910092.275 ops/s
Iteration  17: 42289055.190 ops/s
Iteration  18: 43428869.185 ops/s
Iteration  19: 42571405.652 ops/s
Iteration  20: 43734783.874 ops/s
Iteration  21: 43940124.176 ops/s
Iteration  22: 40651578.534 ops/s
Iteration  23: 43278512.317 ops/s
Iteration  24: 43360256.576 ops/s
Iteration  25: 44744845.905 ops/s
Iteration  26: 42934970.226 ops/s
Iteration  27: 42812500.853 ops/s
Iteration  28: 45095451.869 ops/s
Iteration  29: 44332859.131 ops/s
Iteration  30: 43167248.169 ops/s


Result "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriberTest._Benchmark.benchmark_customOnErrorShouldReportCustomOnError":
  43320243.300 ±(99.9%) 784487.360 ops/s [Average]
  (min, avg, max) = (40651578.534, 43320243.300, 45793112.727), stdev = 1174183.838
  CI (99.9%): [42535755.940, 44104730.660] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           Mode  Cnt         Score        Error  Units
BoundedSubscriberTest._Benchmark.benchmark_customOnErrorShouldReportCustomOnError  thrpt   30  43320243.300 ± 784487.360  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.subscribers.BoundedSubscriberTest._Benchmark.benchmark_onErrorMissingShouldReportNoCustomOnError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.subscribers.BoundedSubscriberTest._Benchmark.benchmark_onErrorMissingShouldReportNoCustomOnError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 21462951.969 ops/s
# Warmup Iteration   2: 34221748.889 ops/s
# Warmup Iteration   3: 46863068.956 ops/s
# Warmup Iteration   4: 41182089.558 ops/s
# Warmup Iteration   5: 43940470.501 ops/s
# Warmup Iteration   6: 42071567.714 ops/s
# Warmup Iteration   7: 42280496.077 ops/s
# Warmup Iteration   8: 44010809.487 ops/s
# Warmup Iteration   9: 44453878.602 ops/s
# Warmup Iteration  10: 43428768.481 ops/s
# Warmup Iteration  11: 43188898.233 ops/s
# Warmup Iteration  12: 42893127.544 ops/s
# Warmup Iteration  13: 43728905.249 ops/s
# Warmup Iteration  14: 42466556.500 ops/s
# Warmup Iteration  15: 44343424.925 ops/s
# Warmup Iteration  16: 44153229.193 ops/s
# Warmup Iteration  17: 42488506.359 ops/s
# Warmup Iteration  18: 44319926.703 ops/s
# Warmup Iteration  19: 43055374.929 ops/s
# Warmup Iteration  20: 44894855.111 ops/s
# Warmup Iteration  21: 44378243.037 ops/s
# Warmup Iteration  22: 41806325.802 ops/s
# Warmup Iteration  23: 43583731.377 ops/s
# Warmup Iteration  24: 43199038.692 ops/s
# Warmup Iteration  25: 42291999.404 ops/s
# Warmup Iteration  26: 43318989.878 ops/s
# Warmup Iteration  27: 42321397.130 ops/s
# Warmup Iteration  28: 42916355.056 ops/s
# Warmup Iteration  29: 44070364.247 ops/s
# Warmup Iteration  30: 44192183.838 ops/s
Iteration   1: 41082858.056 ops/s
Iteration   2: 43349283.166 ops/s
Iteration   3: 42581978.640 ops/s
Iteration   4: 42499882.241 ops/s
Iteration   5: 44117015.806 ops/s
Iteration   6: 41587590.206 ops/s
Iteration   7: 44188712.281 ops/s
Iteration   8: 42747467.947 ops/s
Iteration   9: 33454829.521 ops/s
Iteration  10: 43496550.607 ops/s
Iteration  11: 41712960.157 ops/s
Iteration  12: 44015338.098 ops/s
Iteration  13: 43532142.965 ops/s
Iteration  14: 41606013.396 ops/s
Iteration  15: 44042167.619 ops/s
Iteration  16: 41315059.385 ops/s
Iteration  17: 43583072.992 ops/s
Iteration  18: 42301540.852 ops/s
Iteration  19: 42142127.758 ops/s
Iteration  20: 43739558.947 ops/s
Iteration  21: 41558907.110 ops/s
Iteration  22: 43945121.086 ops/s
Iteration  23: 42037343.920 ops/s
Iteration  24: 44468012.529 ops/s
Iteration  25: 41735953.456 ops/s
Iteration  26: 43348509.415 ops/s
Iteration  27: 44777992.435 ops/s
Iteration  28: 41724905.857 ops/s
Iteration  29: 44275686.048 ops/s
Iteration  30: 43108379.416 ops/s


Result "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriberTest._Benchmark.benchmark_onErrorMissingShouldReportNoCustomOnError":
  42602565.397 ±(99.9%) 1363065.679 ops/s [Average]
  (min, avg, max) = (33454829.521, 42602565.397, 44777992.435), stdev = 2040172.694
  CI (99.9%): [41239499.718, 43965631.076] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              Mode  Cnt         Score         Error  Units
BoundedSubscriberTest._Benchmark.benchmark_onErrorMissingShouldReportNoCustomOnError  thrpt   30  42602565.397 ± 1363065.679  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.functions.FunctionsTest._Benchmark.benchmark_toFunction5$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.functions.FunctionsTest._Benchmark.benchmark_toFunction5

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 512570.300 ops/s
# Warmup Iteration   2: 604216.901 ops/s
# Warmup Iteration   3: 741273.213 ops/s
# Warmup Iteration   4: 732886.033 ops/s
# Warmup Iteration   5: 754791.373 ops/s
# Warmup Iteration   6: 715930.117 ops/s
# Warmup Iteration   7: 713170.786 ops/s
# Warmup Iteration   8: 755570.484 ops/s
# Warmup Iteration   9: 706997.991 ops/s
# Warmup Iteration  10: 722095.460 ops/s
# Warmup Iteration  11: 734966.008 ops/s
# Warmup Iteration  12: 718703.492 ops/s
# Warmup Iteration  13: 736836.246 ops/s
# Warmup Iteration  14: 721343.582 ops/s
# Warmup Iteration  15: 754626.827 ops/s
# Warmup Iteration  16: 722446.979 ops/s
# Warmup Iteration  17: 779151.173 ops/s
# Warmup Iteration  18: 803833.092 ops/s
# Warmup Iteration  19: 772222.883 ops/s
# Warmup Iteration  20: 784721.005 ops/s
# Warmup Iteration  21: 731936.187 ops/s
# Warmup Iteration  22: 793090.446 ops/s
# Warmup Iteration  23: 791109.535 ops/s
# Warmup Iteration  24: 748638.108 ops/s
# Warmup Iteration  25: 774024.224 ops/s
# Warmup Iteration  26: 771584.993 ops/s
# Warmup Iteration  27: 766055.688 ops/s
# Warmup Iteration  28: 796715.211 ops/s
# Warmup Iteration  29: 775606.632 ops/s
# Warmup Iteration  30: 782298.372 ops/s
Iteration   1: 763806.906 ops/s
Iteration   2: 797080.013 ops/s
Iteration   3: 769816.278 ops/s
Iteration   4: 766180.800 ops/s
Iteration   5: 757465.053 ops/s
Iteration   6: 755732.453 ops/s
Iteration   7: 781388.560 ops/s
Iteration   8: 765744.951 ops/s
Iteration   9: 776673.695 ops/s
Iteration  10: 812018.364 ops/s
Iteration  11: 742016.957 ops/s
Iteration  12: 796044.742 ops/s
Iteration  13: 749877.284 ops/s
Iteration  14: 798463.785 ops/s
Iteration  15: 758991.523 ops/s
Iteration  16: 769653.455 ops/s
Iteration  17: 775018.089 ops/s
Iteration  18: 772264.957 ops/s
Iteration  19: 752663.465 ops/s
Iteration  20: 803862.847 ops/s
Iteration  21: 769199.029 ops/s
Iteration  22: 788968.645 ops/s
Iteration  23: 755097.325 ops/s
Iteration  24: 801137.461 ops/s
Iteration  25: 770055.617 ops/s
Iteration  26: 778679.122 ops/s
Iteration  27: 787106.112 ops/s
Iteration  28: 784801.405 ops/s
Iteration  29: 767345.221 ops/s
Iteration  30: 764532.242 ops/s


Result "io.reactivex.rxjava3.internal.functions.FunctionsTest._Benchmark.benchmark_toFunction5":
  774389.545 ±(99.9%) 11755.648 ops/s [Average]
  (min, avg, max) = (742016.957, 774389.545, 812018.364), stdev = 17595.302
  CI (99.9%): [762633.897, 786145.193] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt       Score       Error  Units
FunctionsTest._Benchmark.benchmark_toFunction5  thrpt   30  774389.545 ± 11755.648  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.functions.FunctionsTest._Benchmark.benchmark_toFunction2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.functions.FunctionsTest._Benchmark.benchmark_toFunction2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 492035.945 ops/s
# Warmup Iteration   2: 571965.334 ops/s
# Warmup Iteration   3: 751085.309 ops/s
# Warmup Iteration   4: 714302.547 ops/s
# Warmup Iteration   5: 730221.011 ops/s
# Warmup Iteration   6: 690750.091 ops/s
# Warmup Iteration   7: 734103.832 ops/s
# Warmup Iteration   8: 755493.143 ops/s
# Warmup Iteration   9: 695611.564 ops/s
# Warmup Iteration  10: 731146.230 ops/s
# Warmup Iteration  11: 695075.540 ops/s
# Warmup Iteration  12: 697748.612 ops/s
# Warmup Iteration  13: 733264.408 ops/s
# Warmup Iteration  14: 712377.670 ops/s
# Warmup Iteration  15: 707770.887 ops/s
# Warmup Iteration  16: 716291.957 ops/s
# Warmup Iteration  17: 754026.171 ops/s
# Warmup Iteration  18: 775732.667 ops/s
# Warmup Iteration  19: 757826.403 ops/s
# Warmup Iteration  20: 755953.069 ops/s
# Warmup Iteration  21: 750481.532 ops/s
# Warmup Iteration  22: 771702.620 ops/s
# Warmup Iteration  23: 794860.934 ops/s
# Warmup Iteration  24: 747144.101 ops/s
# Warmup Iteration  25: 756176.159 ops/s
# Warmup Iteration  26: 747220.305 ops/s
# Warmup Iteration  27: 770830.657 ops/s
# Warmup Iteration  28: 774242.610 ops/s
# Warmup Iteration  29: 727582.658 ops/s
# Warmup Iteration  30: 779470.801 ops/s
Iteration   1: 770208.840 ops/s
Iteration   2: 760227.596 ops/s
Iteration   3: 778524.870 ops/s
Iteration   4: 600987.661 ops/s
Iteration   5: 780326.994 ops/s
Iteration   6: 745855.559 ops/s
Iteration   7: 799965.167 ops/s
Iteration   8: 768237.951 ops/s
Iteration   9: 782046.640 ops/s
Iteration  10: 771952.232 ops/s
Iteration  11: 753121.157 ops/s
Iteration  12: 780096.441 ops/s
Iteration  13: 782411.219 ops/s
Iteration  14: 742104.420 ops/s
Iteration  15: 776778.811 ops/s
Iteration  16: 755489.036 ops/s
Iteration  17: 764917.460 ops/s
Iteration  18: 761463.594 ops/s
Iteration  19: 768517.152 ops/s
Iteration  20: 774012.209 ops/s
Iteration  21: 738949.668 ops/s
Iteration  22: 792950.028 ops/s
Iteration  23: 758322.812 ops/s
Iteration  24: 781402.610 ops/s
Iteration  25: 759635.347 ops/s
Iteration  26: 744405.114 ops/s
Iteration  27: 790847.046 ops/s
Iteration  28: 731724.504 ops/s
Iteration  29: 781349.864 ops/s
Iteration  30: 728760.829 ops/s


Result "io.reactivex.rxjava3.internal.functions.FunctionsTest._Benchmark.benchmark_toFunction2":
  760853.094 ±(99.9%) 23508.469 ops/s [Average]
  (min, avg, max) = (600987.661, 760853.094, 799965.167), stdev = 35186.373
  CI (99.9%): [737344.625, 784361.564] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt       Score       Error  Units
FunctionsTest._Benchmark.benchmark_toFunction2  thrpt   30  760853.094 ± 23508.469  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.functions.FunctionsTest._Benchmark.benchmark_toFunction3$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.functions.FunctionsTest._Benchmark.benchmark_toFunction3

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 499275.554 ops/s
# Warmup Iteration   2: 557082.222 ops/s
# Warmup Iteration   3: 747334.838 ops/s
# Warmup Iteration   4: 714525.163 ops/s
# Warmup Iteration   5: 748568.469 ops/s
# Warmup Iteration   6: 722018.187 ops/s
# Warmup Iteration   7: 732699.177 ops/s
# Warmup Iteration   8: 744152.606 ops/s
# Warmup Iteration   9: 722230.303 ops/s
# Warmup Iteration  10: 705094.371 ops/s
# Warmup Iteration  11: 709330.539 ops/s
# Warmup Iteration  12: 719460.863 ops/s
# Warmup Iteration  13: 740276.189 ops/s
# Warmup Iteration  14: 709903.896 ops/s
# Warmup Iteration  15: 746820.864 ops/s
# Warmup Iteration  16: 720768.558 ops/s
# Warmup Iteration  17: 770712.926 ops/s
# Warmup Iteration  18: 771903.332 ops/s
# Warmup Iteration  19: 758711.688 ops/s
# Warmup Iteration  20: 787215.744 ops/s
# Warmup Iteration  21: 750203.020 ops/s
# Warmup Iteration  22: 765358.549 ops/s
# Warmup Iteration  23: 794264.514 ops/s
# Warmup Iteration  24: 733884.948 ops/s
# Warmup Iteration  25: 774873.498 ops/s
# Warmup Iteration  26: 797957.645 ops/s
# Warmup Iteration  27: 757246.523 ops/s
# Warmup Iteration  28: 778117.655 ops/s
# Warmup Iteration  29: 764107.031 ops/s
# Warmup Iteration  30: 756792.778 ops/s
Iteration   1: 797734.913 ops/s
Iteration   2: 765882.415 ops/s
Iteration   3: 771583.861 ops/s
Iteration   4: 765822.391 ops/s
Iteration   5: 759372.465 ops/s
Iteration   6: 803454.102 ops/s
Iteration   7: 741262.938 ops/s
Iteration   8: 768768.624 ops/s
Iteration   9: 804758.376 ops/s
Iteration  10: 742757.708 ops/s
Iteration  11: 791857.559 ops/s
Iteration  12: 747617.368 ops/s
Iteration  13: 783568.268 ops/s
Iteration  14: 738286.178 ops/s
Iteration  15: 788751.527 ops/s
Iteration  16: 773833.489 ops/s
Iteration  17: 767707.256 ops/s
Iteration  18: 759880.056 ops/s
Iteration  19: 746055.785 ops/s
Iteration  20: 797323.888 ops/s
Iteration  21: 737070.198 ops/s
Iteration  22: 776043.241 ops/s
Iteration  23: 756356.749 ops/s
Iteration  24: 758340.001 ops/s
Iteration  25: 777855.338 ops/s
Iteration  26: 742004.477 ops/s
Iteration  27: 796754.425 ops/s
Iteration  28: 787875.985 ops/s
Iteration  29: 749515.373 ops/s
Iteration  30: 771085.120 ops/s


Result "io.reactivex.rxjava3.internal.functions.FunctionsTest._Benchmark.benchmark_toFunction3":
  768972.669 ±(99.9%) 13866.120 ops/s [Average]
  (min, avg, max) = (737070.198, 768972.669, 804758.376), stdev = 20754.158
  CI (99.9%): [755106.549, 782838.790] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt       Score       Error  Units
FunctionsTest._Benchmark.benchmark_toFunction3  thrpt   30  768972.669 ± 13866.120  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.functions.FunctionsTest._Benchmark.benchmark_toFunction4$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.functions.FunctionsTest._Benchmark.benchmark_toFunction4

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 515378.548 ops/s
# Warmup Iteration   2: 614819.048 ops/s
# Warmup Iteration   3: 684148.973 ops/s
# Warmup Iteration   4: 702232.633 ops/s
# Warmup Iteration   5: 701010.345 ops/s
# Warmup Iteration   6: 701916.623 ops/s
# Warmup Iteration   7: 721018.248 ops/s
# Warmup Iteration   8: 693923.304 ops/s
# Warmup Iteration   9: 710149.146 ops/s
# Warmup Iteration  10: 694968.477 ops/s
# Warmup Iteration  11: 687954.754 ops/s
# Warmup Iteration  12: 728699.975 ops/s
# Warmup Iteration  13: 667483.491 ops/s
# Warmup Iteration  14: 713114.358 ops/s
# Warmup Iteration  15: 690019.343 ops/s
# Warmup Iteration  16: 726911.408 ops/s
# Warmup Iteration  17: 744403.044 ops/s
# Warmup Iteration  18: 767217.997 ops/s
# Warmup Iteration  19: 756732.720 ops/s
# Warmup Iteration  20: 732756.402 ops/s
# Warmup Iteration  21: 769709.146 ops/s
# Warmup Iteration  22: 746605.526 ops/s
# Warmup Iteration  23: 756850.161 ops/s
# Warmup Iteration  24: 748104.059 ops/s
# Warmup Iteration  25: 743765.878 ops/s
# Warmup Iteration  26: 774864.594 ops/s
# Warmup Iteration  27: 764782.649 ops/s
# Warmup Iteration  28: 719577.343 ops/s
# Warmup Iteration  29: 629319.120 ops/s
# Warmup Iteration  30: 733619.097 ops/s
Iteration   1: 746940.680 ops/s
Iteration   2: 778376.399 ops/s
Iteration   3: 747117.997 ops/s
Iteration   4: 764694.366 ops/s
Iteration   5: 748130.741 ops/s
Iteration   6: 763631.119 ops/s
Iteration   7: 798423.088 ops/s
Iteration   8: 722092.105 ops/s
Iteration   9: 783364.582 ops/s
Iteration  10: 730113.958 ops/s
Iteration  11: 777780.171 ops/s
Iteration  12: 768908.841 ops/s
Iteration  13: 718044.604 ops/s
Iteration  14: 772929.062 ops/s
Iteration  15: 765767.398 ops/s
Iteration  16: 733530.503 ops/s
Iteration  17: 776879.612 ops/s
Iteration  18: 742713.414 ops/s
Iteration  19: 763888.201 ops/s
Iteration  20: 765539.951 ops/s
Iteration  21: 751615.320 ops/s
Iteration  22: 787622.734 ops/s
Iteration  23: 726542.500 ops/s
Iteration  24: 786181.300 ops/s
Iteration  25: 746088.336 ops/s
Iteration  26: 759079.627 ops/s
Iteration  27: 740582.274 ops/s
Iteration  28: 766201.331 ops/s
Iteration  29: 764471.470 ops/s
Iteration  30: 734210.928 ops/s


Result "io.reactivex.rxjava3.internal.functions.FunctionsTest._Benchmark.benchmark_toFunction4":
  757715.420 ±(99.9%) 13962.539 ops/s [Average]
  (min, avg, max) = (718044.604, 757715.420, 798423.088), stdev = 20898.473
  CI (99.9%): [743752.881, 771677.959] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt       Score       Error  Units
FunctionsTest._Benchmark.benchmark_toFunction4  thrpt   30  757715.420 ± 13962.539  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.functions.FunctionsTest._Benchmark.benchmark_toFunction6$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.functions.FunctionsTest._Benchmark.benchmark_toFunction6

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 551350.297 ops/s
# Warmup Iteration   2: 604578.197 ops/s
# Warmup Iteration   3: 703185.409 ops/s
# Warmup Iteration   4: 690852.260 ops/s
# Warmup Iteration   5: 709286.738 ops/s
# Warmup Iteration   6: 660846.667 ops/s
# Warmup Iteration   7: 756329.336 ops/s
# Warmup Iteration   8: 736008.812 ops/s
# Warmup Iteration   9: 716279.743 ops/s
# Warmup Iteration  10: 732813.898 ops/s
# Warmup Iteration  11: 758316.504 ops/s
# Warmup Iteration  12: 727838.209 ops/s
# Warmup Iteration  13: 760838.909 ops/s
# Warmup Iteration  14: 729909.079 ops/s
# Warmup Iteration  15: 756354.936 ops/s
# Warmup Iteration  16: 740419.753 ops/s
# Warmup Iteration  17: 778897.934 ops/s
# Warmup Iteration  18: 796943.709 ops/s
# Warmup Iteration  19: 769250.310 ops/s
# Warmup Iteration  20: 782181.297 ops/s
# Warmup Iteration  21: 785085.659 ops/s
# Warmup Iteration  22: 763484.036 ops/s
# Warmup Iteration  23: 811187.740 ops/s
# Warmup Iteration  24: 778323.412 ops/s
# Warmup Iteration  25: 755168.157 ops/s
# Warmup Iteration  26: 788162.253 ops/s
# Warmup Iteration  27: 787039.452 ops/s
# Warmup Iteration  28: 776926.656 ops/s
# Warmup Iteration  29: 789542.872 ops/s
# Warmup Iteration  30: 782389.338 ops/s
Iteration   1: 790675.970 ops/s
Iteration   2: 771450.559 ops/s
Iteration   3: 784033.260 ops/s
Iteration   4: 770398.709 ops/s
Iteration   5: 790860.368 ops/s
Iteration   6: 799444.980 ops/s
Iteration   7: 760879.161 ops/s
Iteration   8: 776567.503 ops/s
Iteration   9: 760990.244 ops/s
Iteration  10: 775797.563 ops/s
Iteration  11: 774504.829 ops/s
Iteration  12: 774805.462 ops/s
Iteration  13: 779031.193 ops/s
Iteration  14: 787975.473 ops/s
Iteration  15: 781688.499 ops/s
Iteration  16: 797525.910 ops/s
Iteration  17: 761342.313 ops/s
Iteration  18: 822274.378 ops/s
Iteration  19: 762525.282 ops/s
Iteration  20: 807195.674 ops/s
Iteration  21: 761885.912 ops/s
Iteration  22: 791925.374 ops/s
Iteration  23: 805890.048 ops/s
Iteration  24: 753413.074 ops/s
Iteration  25: 821644.699 ops/s
Iteration  26: 796986.928 ops/s
Iteration  27: 792494.961 ops/s
Iteration  28: 801768.774 ops/s
Iteration  29: 779062.677 ops/s
Iteration  30: 810757.129 ops/s


Result "io.reactivex.rxjava3.internal.functions.FunctionsTest._Benchmark.benchmark_toFunction6":
  784859.897 ±(99.9%) 12343.477 ops/s [Average]
  (min, avg, max) = (753413.074, 784859.897, 822274.378), stdev = 18475.137
  CI (99.9%): [772516.420, 797203.374] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt       Score       Error  Units
FunctionsTest._Benchmark.benchmark_toFunction6  thrpt   30  784859.897 ± 12343.477  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.functions.FunctionsTest._Benchmark.benchmark_toFunction8$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.functions.FunctionsTest._Benchmark.benchmark_toFunction8

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 497156.667 ops/s
# Warmup Iteration   2: 599446.003 ops/s
# Warmup Iteration   3: 712626.022 ops/s
# Warmup Iteration   4: 687266.742 ops/s
# Warmup Iteration   5: 714739.122 ops/s
# Warmup Iteration   6: 681020.855 ops/s
# Warmup Iteration   7: 711574.913 ops/s
# Warmup Iteration   8: 710600.397 ops/s
# Warmup Iteration   9: 740795.778 ops/s
# Warmup Iteration  10: 709426.026 ops/s
# Warmup Iteration  11: 731870.750 ops/s
# Warmup Iteration  12: 747572.269 ops/s
# Warmup Iteration  13: 699660.334 ops/s
# Warmup Iteration  14: 760924.601 ops/s
# Warmup Iteration  15: 700957.729 ops/s
# Warmup Iteration  16: 748338.751 ops/s
# Warmup Iteration  17: 761162.888 ops/s
# Warmup Iteration  18: 774283.889 ops/s
# Warmup Iteration  19: 783486.192 ops/s
# Warmup Iteration  20: 774394.702 ops/s
# Warmup Iteration  21: 794005.971 ops/s
# Warmup Iteration  22: 765755.444 ops/s
# Warmup Iteration  23: 774162.564 ops/s
# Warmup Iteration  24: 542777.001 ops/s
# Warmup Iteration  25: 760955.081 ops/s
# Warmup Iteration  26: 809303.492 ops/s
# Warmup Iteration  27: 750854.778 ops/s
# Warmup Iteration  28: 775469.606 ops/s
# Warmup Iteration  29: 761253.550 ops/s
# Warmup Iteration  30: 766319.755 ops/s
Iteration   1: 812883.724 ops/s
Iteration   2: 754788.990 ops/s
Iteration   3: 799844.036 ops/s
Iteration   4: 785966.289 ops/s
Iteration   5: 768464.984 ops/s
Iteration   6: 772977.920 ops/s
Iteration   7: 775318.401 ops/s
Iteration   8: 779425.740 ops/s
Iteration   9: 805553.725 ops/s
Iteration  10: 752776.030 ops/s
Iteration  11: 785804.697 ops/s
Iteration  12: 774027.875 ops/s
Iteration  13: 771761.675 ops/s
Iteration  14: 789211.952 ops/s
Iteration  15: 740917.869 ops/s
Iteration  16: 793462.039 ops/s
Iteration  17: 758450.686 ops/s
Iteration  18: 773867.529 ops/s
Iteration  19: 787685.310 ops/s
Iteration  20: 751840.206 ops/s
Iteration  21: 778623.542 ops/s
Iteration  22: 781614.310 ops/s
Iteration  23: 795518.904 ops/s
Iteration  24: 760608.837 ops/s
Iteration  25: 789406.868 ops/s
Iteration  26: 765451.535 ops/s
Iteration  27: 776169.769 ops/s
Iteration  28: 807500.012 ops/s
Iteration  29: 793842.770 ops/s
Iteration  30: 757262.486 ops/s


Result "io.reactivex.rxjava3.internal.functions.FunctionsTest._Benchmark.benchmark_toFunction8":
  778034.290 ±(99.9%) 11974.042 ops/s [Average]
  (min, avg, max) = (740917.869, 778034.290, 812883.724), stdev = 17922.183
  CI (99.9%): [766060.249, 790008.332] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt       Score       Error  Units
FunctionsTest._Benchmark.benchmark_toFunction8  thrpt   30  778034.290 ± 11974.042  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.util.AtomicThrowableTest._Benchmark.benchmark_tryTerminateConsumerSubscriberError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.util.AtomicThrowableTest._Benchmark.benchmark_tryTerminateConsumerSubscriberError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 461865.498 ops/s
# Warmup Iteration   2: 639865.486 ops/s
# Warmup Iteration   3: 726506.798 ops/s
# Warmup Iteration   4: 694503.046 ops/s
# Warmup Iteration   5: 737113.775 ops/s
# Warmup Iteration   6: 702442.733 ops/s
# Warmup Iteration   7: 728779.338 ops/s
# Warmup Iteration   8: 717338.438 ops/s
# Warmup Iteration   9: 700638.434 ops/s
# Warmup Iteration  10: 731641.655 ops/s
# Warmup Iteration  11: 729891.913 ops/s
# Warmup Iteration  12: 661342.681 ops/s
# Warmup Iteration  13: 718391.660 ops/s
# Warmup Iteration  14: 702711.561 ops/s
# Warmup Iteration  15: 745795.853 ops/s
# Warmup Iteration  16: 717211.415 ops/s
# Warmup Iteration  17: 762394.523 ops/s
# Warmup Iteration  18: 752858.289 ops/s
# Warmup Iteration  19: 780645.062 ops/s
# Warmup Iteration  20: 797570.865 ops/s
# Warmup Iteration  21: 739366.599 ops/s
# Warmup Iteration  22: 786036.160 ops/s
# Warmup Iteration  23: 746402.758 ops/s
# Warmup Iteration  24: 756872.634 ops/s
# Warmup Iteration  25: 785738.381 ops/s
# Warmup Iteration  26: 754803.200 ops/s
# Warmup Iteration  27: 766280.698 ops/s
# Warmup Iteration  28: 754815.023 ops/s
# Warmup Iteration  29: 779101.074 ops/s
# Warmup Iteration  30: 746518.486 ops/s
Iteration   1: 754959.721 ops/s
Iteration   2: 771982.770 ops/s
Iteration   3: 760096.483 ops/s
Iteration   4: 777481.248 ops/s
Iteration   5: 758425.571 ops/s
Iteration   6: 788605.614 ops/s
Iteration   7: 755380.545 ops/s
Iteration   8: 771709.054 ops/s
Iteration   9: 777226.925 ops/s
Iteration  10: 746485.194 ops/s
Iteration  11: 786678.478 ops/s
Iteration  12: 747809.787 ops/s
Iteration  13: 746473.158 ops/s
Iteration  14: 744842.067 ops/s
Iteration  15: 761777.435 ops/s
Iteration  16: 787363.154 ops/s
Iteration  17: 741457.698 ops/s
Iteration  18: 783745.077 ops/s
Iteration  19: 751328.285 ops/s
Iteration  20: 797165.281 ops/s
Iteration  21: 773145.079 ops/s
Iteration  22: 760188.280 ops/s
Iteration  23: 790124.030 ops/s
Iteration  24: 750314.500 ops/s
Iteration  25: 779853.847 ops/s
Iteration  26: 752924.168 ops/s
Iteration  27: 776190.494 ops/s
Iteration  28: 767633.850 ops/s
Iteration  29: 746601.477 ops/s
Iteration  30: 793027.947 ops/s


Result "io.reactivex.rxjava3.internal.util.AtomicThrowableTest._Benchmark.benchmark_tryTerminateConsumerSubscriberError":
  766699.907 ±(99.9%) 11224.150 ops/s [Average]
  (min, avg, max) = (741457.698, 766699.907, 797165.281), stdev = 16799.780
  CI (99.9%): [755475.758, 777924.057] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt       Score       Error  Units
AtomicThrowableTest._Benchmark.benchmark_tryTerminateConsumerSubscriberError  thrpt   30  766699.907 ± 11224.150  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterableTest._Benchmark.benchmark_getIteratorThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterableTest._Benchmark.benchmark_getIteratorThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 257423.907 ops/s
# Warmup Iteration   2: 565688.808 ops/s
# Warmup Iteration   3: 613100.574 ops/s
# Warmup Iteration   4: 671031.427 ops/s
# Warmup Iteration   5: 545962.626 ops/s
# Warmup Iteration   6: 665173.650 ops/s
# Warmup Iteration   7: 697777.718 ops/s
# Warmup Iteration   8: 643126.320 ops/s
# Warmup Iteration   9: 690080.446 ops/s
# Warmup Iteration  10: 654501.769 ops/s
# Warmup Iteration  11: 654572.118 ops/s
# Warmup Iteration  12: 699373.158 ops/s
# Warmup Iteration  13: 649033.006 ops/s
# Warmup Iteration  14: 689765.070 ops/s
# Warmup Iteration  15: 661793.173 ops/s
# Warmup Iteration  16: 685190.152 ops/s
# Warmup Iteration  17: 725220.415 ops/s
# Warmup Iteration  18: 694196.426 ops/s
# Warmup Iteration  19: 649859.497 ops/s
# Warmup Iteration  20: 619418.637 ops/s
# Warmup Iteration  21: 688698.977 ops/s
# Warmup Iteration  22: 714182.100 ops/s
# Warmup Iteration  23: 709706.854 ops/s
# Warmup Iteration  24: 695747.941 ops/s
# Warmup Iteration  25: 728273.382 ops/s
# Warmup Iteration  26: 695226.533 ops/s
# Warmup Iteration  27: 720540.701 ops/s
# Warmup Iteration  28: 701022.312 ops/s
# Warmup Iteration  29: 724462.835 ops/s
# Warmup Iteration  30: 689429.075 ops/s
Iteration   1: 719175.150 ops/s
Iteration   2: 700145.633 ops/s
Iteration   3: 723135.016 ops/s
Iteration   4: 725842.742 ops/s
Iteration   5: 692848.272 ops/s
Iteration   6: 719923.245 ops/s
Iteration   7: 714042.743 ops/s
Iteration   8: 678055.573 ops/s
Iteration   9: 729552.182 ops/s
Iteration  10: 687051.266 ops/s
Iteration  11: 723795.629 ops/s
Iteration  12: 690130.596 ops/s
Iteration  13: 715821.996 ops/s
Iteration  14: 744029.914 ops/s
Iteration  15: 724359.968 ops/s
Iteration  16: 670495.806 ops/s
Iteration  17: 738090.249 ops/s
Iteration  18: 709007.501 ops/s
Iteration  19: 710322.590 ops/s
Iteration  20: 706521.380 ops/s
Iteration  21: 699044.318 ops/s
Iteration  22: 726017.838 ops/s
Iteration  23: 684235.076 ops/s
Iteration  24: 725626.411 ops/s
Iteration  25: 697970.266 ops/s
Iteration  26: 719793.442 ops/s
Iteration  27: 726838.691 ops/s
Iteration  28: 677591.713 ops/s
Iteration  29: 716581.653 ops/s
Iteration  30: 698729.517 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterableTest._Benchmark.benchmark_getIteratorThrows":
  709825.879 ±(99.9%) 12602.134 ops/s [Average]
  (min, avg, max) = (670495.806, 709825.879, 744029.914), stdev = 18862.282
  CI (99.9%): [697223.746, 722428.013] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score       Error  Units
FlowableFromIterableTest._Benchmark.benchmark_getIteratorThrows  thrpt   30  709825.879 ± 12602.134  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.util.AtomicThrowableTest._Benchmark.benchmark_tryTerminateConsumerMaybeObserverNoError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.util.AtomicThrowableTest._Benchmark.benchmark_tryTerminateConsumerMaybeObserverNoError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 4392258.257 ops/s
# Warmup Iteration   2: 7463995.160 ops/s
# Warmup Iteration   3: 10491649.566 ops/s
# Warmup Iteration   4: 10348027.787 ops/s
# Warmup Iteration   5: 10638379.674 ops/s
# Warmup Iteration   6: 10270362.126 ops/s
# Warmup Iteration   7: 10132039.222 ops/s
# Warmup Iteration   8: 10568958.274 ops/s
# Warmup Iteration   9: 10243057.616 ops/s
# Warmup Iteration  10: 10858271.490 ops/s
# Warmup Iteration  11: 10571647.345 ops/s
# Warmup Iteration  12: 10570676.273 ops/s
# Warmup Iteration  13: 10250822.306 ops/s
# Warmup Iteration  14: 10901721.500 ops/s
# Warmup Iteration  15: 10475468.643 ops/s
# Warmup Iteration  16: 10514606.061 ops/s
# Warmup Iteration  17: 10037722.009 ops/s
# Warmup Iteration  18: 10508264.418 ops/s
# Warmup Iteration  19: 10625192.918 ops/s
# Warmup Iteration  20: 10091620.229 ops/s
# Warmup Iteration  21: 10351218.858 ops/s
# Warmup Iteration  22: 10633060.182 ops/s
# Warmup Iteration  23: 10601999.211 ops/s
# Warmup Iteration  24: 10042201.358 ops/s
# Warmup Iteration  25: 10603748.624 ops/s
# Warmup Iteration  26: 10142221.262 ops/s
# Warmup Iteration  27: 9903156.570 ops/s
# Warmup Iteration  28: 10845399.747 ops/s
# Warmup Iteration  29: 10476923.085 ops/s
# Warmup Iteration  30: 10149871.819 ops/s
Iteration   1: 10135971.445 ops/s
Iteration   2: 10285990.930 ops/s
Iteration   3: 10326416.361 ops/s
Iteration   4: 10399040.837 ops/s
Iteration   5: 10072391.315 ops/s
Iteration   6: 10817347.664 ops/s
Iteration   7: 10528024.692 ops/s
Iteration   8: 10326846.885 ops/s
Iteration   9: 10363937.888 ops/s
Iteration  10: 10129421.557 ops/s
Iteration  11: 10571299.194 ops/s
Iteration  12: 10268498.919 ops/s
Iteration  13: 10340819.964 ops/s
Iteration  14: 10628106.579 ops/s
Iteration  15: 10220219.346 ops/s
Iteration  16: 10176018.293 ops/s
Iteration  17: 10456249.449 ops/s
Iteration  18: 10072040.139 ops/s
Iteration  19: 10431572.151 ops/s
Iteration  20: 10589863.879 ops/s
Iteration  21: 10089463.227 ops/s
Iteration  22: 10656523.648 ops/s
Iteration  23: 10307210.292 ops/s
Iteration  24: 10685918.374 ops/s
Iteration  25: 10114873.147 ops/s
Iteration  26: 10125544.195 ops/s
Iteration  27: 10301119.987 ops/s
Iteration  28: 10374161.739 ops/s
Iteration  29: 10433656.263 ops/s
Iteration  30: 10327428.170 ops/s


Result "io.reactivex.rxjava3.internal.util.AtomicThrowableTest._Benchmark.benchmark_tryTerminateConsumerMaybeObserverNoError":
  10351865.884 ±(99.9%) 133326.785 ops/s [Average]
  (min, avg, max) = (10072040.139, 10351865.884, 10817347.664), stdev = 199557.270
  CI (99.9%): [10218539.099, 10485192.669] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           Mode  Cnt         Score        Error  Units
AtomicThrowableTest._Benchmark.benchmark_tryTerminateConsumerMaybeObserverNoError  thrpt   30  10351865.884 ± 133326.785  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.util.AtomicThrowableTest._Benchmark.benchmark_tryTerminateConsumerObserverNoError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.util.AtomicThrowableTest._Benchmark.benchmark_tryTerminateConsumerObserverNoError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 4452400.951 ops/s
# Warmup Iteration   2: 7460905.968 ops/s
# Warmup Iteration   3: 10489873.557 ops/s
# Warmup Iteration   4: 10427856.971 ops/s
# Warmup Iteration   5: 10813210.427 ops/s
# Warmup Iteration   6: 10575394.729 ops/s
# Warmup Iteration   7: 10204598.034 ops/s
# Warmup Iteration   8: 10202097.060 ops/s
# Warmup Iteration   9: 10869306.534 ops/s
# Warmup Iteration  10: 10000658.550 ops/s
# Warmup Iteration  11: 10385340.156 ops/s
# Warmup Iteration  12: 10459734.900 ops/s
# Warmup Iteration  13: 10160006.849 ops/s
# Warmup Iteration  14: 7968586.865 ops/s
# Warmup Iteration  15: 10295441.254 ops/s
# Warmup Iteration  16: 10836805.878 ops/s
# Warmup Iteration  17: 10037035.182 ops/s
# Warmup Iteration  18: 10431545.985 ops/s
# Warmup Iteration  19: 10682062.167 ops/s
# Warmup Iteration  20: 10594078.608 ops/s
# Warmup Iteration  21: 10020675.766 ops/s
# Warmup Iteration  22: 10805140.732 ops/s
# Warmup Iteration  23: 10156758.519 ops/s
# Warmup Iteration  24: 9994926.242 ops/s
# Warmup Iteration  25: 10680546.405 ops/s
# Warmup Iteration  26: 10408309.180 ops/s
# Warmup Iteration  27: 10745501.534 ops/s
# Warmup Iteration  28: 10447246.363 ops/s
# Warmup Iteration  29: 10127755.255 ops/s
# Warmup Iteration  30: 10466252.670 ops/s
Iteration   1: 10138179.933 ops/s
Iteration   2: 10557523.886 ops/s
Iteration   3: 10334534.963 ops/s
Iteration   4: 10286602.490 ops/s
Iteration   5: 10708443.037 ops/s
Iteration   6: 9971047.556 ops/s
Iteration   7: 10336759.341 ops/s
Iteration   8: 10043782.091 ops/s
Iteration   9: 10599576.958 ops/s
Iteration  10: 10601941.035 ops/s
Iteration  11: 10132901.508 ops/s
Iteration  12: 10640010.770 ops/s
Iteration  13: 10200329.928 ops/s
Iteration  14: 10092276.926 ops/s
Iteration  15: 10297492.103 ops/s
Iteration  16: 10502796.328 ops/s
Iteration  17: 10644111.055 ops/s
Iteration  18: 10327743.506 ops/s
Iteration  19: 10509455.496 ops/s
Iteration  20: 10509582.007 ops/s
Iteration  21: 10406534.833 ops/s
Iteration  22: 10556960.897 ops/s
Iteration  23: 10306881.788 ops/s
Iteration  24: 10300924.369 ops/s
Iteration  25: 10713397.914 ops/s
Iteration  26: 10164502.850 ops/s
Iteration  27: 10701198.386 ops/s
Iteration  28: 10155396.674 ops/s
Iteration  29: 10201564.010 ops/s
Iteration  30: 10674226.998 ops/s


Result "io.reactivex.rxjava3.internal.util.AtomicThrowableTest._Benchmark.benchmark_tryTerminateConsumerObserverNoError":
  10387222.654 ±(99.9%) 148443.924 ops/s [Average]
  (min, avg, max) = (9971047.556, 10387222.654, 10713397.914), stdev = 222183.894
  CI (99.9%): [10238778.730, 10535666.579] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt         Score        Error  Units
AtomicThrowableTest._Benchmark.benchmark_tryTerminateConsumerObserverNoError  thrpt   30  10387222.654 ± 148443.924  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromActionTest._Benchmark.benchmark_fromActionThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromActionTest._Benchmark.benchmark_fromActionThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 245488.763 ops/s
# Warmup Iteration   2: 567250.353 ops/s
# Warmup Iteration   3: 651267.191 ops/s
# Warmup Iteration   4: 599054.947 ops/s
# Warmup Iteration   5: 617374.005 ops/s
# Warmup Iteration   6: 601468.875 ops/s
# Warmup Iteration   7: 659236.363 ops/s
# Warmup Iteration   8: 662469.817 ops/s
# Warmup Iteration   9: 684642.519 ops/s
# Warmup Iteration  10: 655228.172 ops/s
# Warmup Iteration  11: 656313.483 ops/s
# Warmup Iteration  12: 661789.244 ops/s
# Warmup Iteration  13: 661805.544 ops/s
# Warmup Iteration  14: 689828.322 ops/s
# Warmup Iteration  15: 646790.921 ops/s
# Warmup Iteration  16: 678367.475 ops/s
# Warmup Iteration  17: 708125.031 ops/s
# Warmup Iteration  18: 696293.058 ops/s
# Warmup Iteration  19: 698492.403 ops/s
# Warmup Iteration  20: 700335.264 ops/s
# Warmup Iteration  21: 728077.068 ops/s
# Warmup Iteration  22: 677057.536 ops/s
# Warmup Iteration  23: 697977.148 ops/s
# Warmup Iteration  24: 709258.032 ops/s
# Warmup Iteration  25: 714071.420 ops/s
# Warmup Iteration  26: 713713.410 ops/s
# Warmup Iteration  27: 717769.867 ops/s
# Warmup Iteration  28: 681360.105 ops/s
# Warmup Iteration  29: 729815.460 ops/s
# Warmup Iteration  30: 683765.902 ops/s
Iteration   1: 703206.431 ops/s
Iteration   2: 729037.289 ops/s
Iteration   3: 687287.820 ops/s
Iteration   4: 695000.245 ops/s
Iteration   5: 713265.426 ops/s
Iteration   6: 692326.411 ops/s
Iteration   7: 693725.753 ops/s
Iteration   8: 723223.429 ops/s
Iteration   9: 694803.389 ops/s
Iteration  10: 731212.085 ops/s
Iteration  11: 691569.347 ops/s
Iteration  12: 665587.123 ops/s
Iteration  13: 728917.325 ops/s
Iteration  14: 732092.206 ops/s
Iteration  15: 698311.609 ops/s
Iteration  16: 697147.229 ops/s
Iteration  17: 710950.257 ops/s
Iteration  18: 709069.181 ops/s
Iteration  19: 700367.462 ops/s
Iteration  20: 700724.926 ops/s
Iteration  21: 704150.939 ops/s
Iteration  22: 731980.034 ops/s
Iteration  23: 711460.104 ops/s
Iteration  24: 677908.457 ops/s
Iteration  25: 737452.560 ops/s
Iteration  26: 683159.097 ops/s
Iteration  27: 709676.412 ops/s
Iteration  28: 687214.347 ops/s
Iteration  29: 715954.299 ops/s
Iteration  30: 738831.466 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromActionTest._Benchmark.benchmark_fromActionThrows":
  706520.422 ±(99.9%) 12578.870 ops/s [Average]
  (min, avg, max) = (665587.123, 706520.422, 738831.466), stdev = 18827.462
  CI (99.9%): [693941.552, 719099.292] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score       Error  Units
FlowableFromActionTest._Benchmark.benchmark_fromActionThrows  thrpt   30  706520.422 ± 12578.870  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromRunnableTest._Benchmark.benchmark_fromRunnableThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromRunnableTest._Benchmark.benchmark_fromRunnableThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 217682.576 ops/s
# Warmup Iteration   2: 550984.989 ops/s
# Warmup Iteration   3: 668317.854 ops/s
# Warmup Iteration   4: 559487.606 ops/s
# Warmup Iteration   5: 679915.842 ops/s
# Warmup Iteration   6: 614374.240 ops/s
# Warmup Iteration   7: 662962.257 ops/s
# Warmup Iteration   8: 595896.401 ops/s
# Warmup Iteration   9: 644274.525 ops/s
# Warmup Iteration  10: 664029.314 ops/s
# Warmup Iteration  11: 654274.668 ops/s
# Warmup Iteration  12: 713799.921 ops/s
# Warmup Iteration  13: 654596.401 ops/s
# Warmup Iteration  14: 664694.307 ops/s
# Warmup Iteration  15: 699390.107 ops/s
# Warmup Iteration  16: 654972.426 ops/s
# Warmup Iteration  17: 740174.256 ops/s
# Warmup Iteration  18: 678011.576 ops/s
# Warmup Iteration  19: 716229.722 ops/s
# Warmup Iteration  20: 717557.075 ops/s
# Warmup Iteration  21: 705367.033 ops/s
# Warmup Iteration  22: 717542.290 ops/s
# Warmup Iteration  23: 689269.526 ops/s
# Warmup Iteration  24: 716065.355 ops/s
# Warmup Iteration  25: 693683.965 ops/s
# Warmup Iteration  26: 720292.561 ops/s
# Warmup Iteration  27: 730426.661 ops/s
# Warmup Iteration  28: 691974.749 ops/s
# Warmup Iteration  29: 722718.793 ops/s
# Warmup Iteration  30: 708629.427 ops/s
Iteration   1: 708451.759 ops/s
Iteration   2: 705833.894 ops/s
Iteration   3: 728438.982 ops/s
Iteration   4: 682163.298 ops/s
Iteration   5: 704802.051 ops/s
Iteration   6: 693012.632 ops/s
Iteration   7: 736785.975 ops/s
Iteration   8: 685488.867 ops/s
Iteration   9: 719851.522 ops/s
Iteration  10: 699466.412 ops/s
Iteration  11: 692374.149 ops/s
Iteration  12: 723555.714 ops/s
Iteration  13: 671851.906 ops/s
Iteration  14: 702776.743 ops/s
Iteration  15: 725092.547 ops/s
Iteration  16: 687543.021 ops/s
Iteration  17: 727098.765 ops/s
Iteration  18: 696502.058 ops/s
Iteration  19: 710669.201 ops/s
Iteration  20: 740764.083 ops/s
Iteration  21: 691564.268 ops/s
Iteration  22: 705457.476 ops/s
Iteration  23: 716143.335 ops/s
Iteration  24: 696534.049 ops/s
Iteration  25: 746552.418 ops/s
Iteration  26: 667833.976 ops/s
Iteration  27: 727120.503 ops/s
Iteration  28: 701009.826 ops/s
Iteration  29: 719354.037 ops/s
Iteration  30: 705477.161 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromRunnableTest._Benchmark.benchmark_fromRunnableThrows":
  707319.021 ±(99.9%) 13066.295 ops/s [Average]
  (min, avg, max) = (667833.976, 707319.021, 746552.418), stdev = 19557.016
  CI (99.9%): [694252.726, 720385.316] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score       Error  Units
FlowableFromRunnableTest._Benchmark.benchmark_fromRunnableThrows  thrpt   30  707319.021 ± 13066.295  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerateTest._Benchmark.benchmark_stateSupplierThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerateTest._Benchmark.benchmark_stateSupplierThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 210633.440 ops/s
# Warmup Iteration   2: 517815.146 ops/s
# Warmup Iteration   3: 612708.539 ops/s
# Warmup Iteration   4: 576304.684 ops/s
# Warmup Iteration   5: 645340.573 ops/s
# Warmup Iteration   6: 630935.872 ops/s
# Warmup Iteration   7: 644533.770 ops/s
# Warmup Iteration   8: 660807.378 ops/s
# Warmup Iteration   9: 639666.178 ops/s
# Warmup Iteration  10: 652994.567 ops/s
# Warmup Iteration  11: 624834.662 ops/s
# Warmup Iteration  12: 652322.309 ops/s
# Warmup Iteration  13: 641464.585 ops/s
# Warmup Iteration  14: 648728.491 ops/s
# Warmup Iteration  15: 659579.163 ops/s
# Warmup Iteration  16: 624868.348 ops/s
# Warmup Iteration  17: 695484.759 ops/s
# Warmup Iteration  18: 678910.618 ops/s
# Warmup Iteration  19: 703515.802 ops/s
# Warmup Iteration  20: 689124.016 ops/s
# Warmup Iteration  21: 673035.494 ops/s
# Warmup Iteration  22: 698104.317 ops/s
# Warmup Iteration  23: 658373.545 ops/s
# Warmup Iteration  24: 693438.809 ops/s
# Warmup Iteration  25: 690421.332 ops/s
# Warmup Iteration  26: 699850.374 ops/s
# Warmup Iteration  27: 664724.967 ops/s
# Warmup Iteration  28: 668289.061 ops/s
# Warmup Iteration  29: 686149.066 ops/s
# Warmup Iteration  30: 672123.995 ops/s
Iteration   1: 670603.805 ops/s
Iteration   2: 670568.969 ops/s
Iteration   3: 683706.069 ops/s
Iteration   4: 682049.405 ops/s
Iteration   5: 639642.562 ops/s
Iteration   6: 702729.382 ops/s
Iteration   7: 655362.562 ops/s
Iteration   8: 688461.128 ops/s
Iteration   9: 656374.878 ops/s
Iteration  10: 704234.489 ops/s
Iteration  11: 674511.401 ops/s
Iteration  12: 668577.071 ops/s
Iteration  13: 686863.933 ops/s
Iteration  14: 680137.618 ops/s
Iteration  15: 681783.006 ops/s
Iteration  16: 681156.794 ops/s
Iteration  17: 684208.848 ops/s
Iteration  18: 688595.980 ops/s
Iteration  19: 666773.486 ops/s
Iteration  20: 684841.360 ops/s
Iteration  21: 663841.890 ops/s
Iteration  22: 676916.342 ops/s
Iteration  23: 659972.149 ops/s
Iteration  24: 676791.668 ops/s
Iteration  25: 687904.268 ops/s
Iteration  26: 681024.633 ops/s
Iteration  27: 683871.039 ops/s
Iteration  28: 680105.235 ops/s
Iteration  29: 676288.095 ops/s
Iteration  30: 699823.456 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerateTest._Benchmark.benchmark_stateSupplierThrows":
  677924.051 ±(99.9%) 9370.675 ops/s [Average]
  (min, avg, max) = (639642.562, 677924.051, 704234.489), stdev = 14025.586
  CI (99.9%): [668553.376, 687294.725] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
FlowableGenerateTest._Benchmark.benchmark_stateSupplierThrows  thrpt   30  677924.051 ± 9370.675  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.util.AtomicThrowableTest._Benchmark.benchmark_tryTerminateConsumerEmitterNoError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.util.AtomicThrowableTest._Benchmark.benchmark_tryTerminateConsumerEmitterNoError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3189639.739 ops/s
# Warmup Iteration   2: 5128039.205 ops/s
# Warmup Iteration   3: 4929507.372 ops/s
# Warmup Iteration   4: 6874313.370 ops/s
# Warmup Iteration   5: 6806302.114 ops/s
# Warmup Iteration   6: 6770941.088 ops/s
# Warmup Iteration   7: 6874149.171 ops/s
# Warmup Iteration   8: 6848699.960 ops/s
# Warmup Iteration   9: 7045769.225 ops/s
# Warmup Iteration  10: 6806506.867 ops/s
# Warmup Iteration  11: 6766685.202 ops/s
# Warmup Iteration  12: 6985439.494 ops/s
# Warmup Iteration  13: 6730563.241 ops/s
# Warmup Iteration  14: 6792055.273 ops/s
# Warmup Iteration  15: 6822105.797 ops/s
# Warmup Iteration  16: 6838478.051 ops/s
# Warmup Iteration  17: 6996525.570 ops/s
# Warmup Iteration  18: 6740327.131 ops/s
# Warmup Iteration  19: 6938134.441 ops/s
# Warmup Iteration  20: 6752030.941 ops/s
# Warmup Iteration  21: 7226197.211 ops/s
# Warmup Iteration  22: 6711295.854 ops/s
# Warmup Iteration  23: 6561495.139 ops/s
# Warmup Iteration  24: 6716747.191 ops/s
# Warmup Iteration  25: 6751934.957 ops/s
# Warmup Iteration  26: 6988444.250 ops/s
# Warmup Iteration  27: 6887191.949 ops/s
# Warmup Iteration  28: 6880560.358 ops/s
# Warmup Iteration  29: 7001688.966 ops/s
# Warmup Iteration  30: 6757313.747 ops/s
Iteration   1: 6811248.646 ops/s
Iteration   2: 7073010.854 ops/s
Iteration   3: 6814845.093 ops/s
Iteration   4: 6931806.844 ops/s
Iteration   5: 6670649.632 ops/s
Iteration   6: 6716610.477 ops/s
Iteration   7: 6761107.717 ops/s
Iteration   8: 6885543.632 ops/s
Iteration   9: 6696387.874 ops/s
Iteration  10: 6889811.605 ops/s
Iteration  11: 6853427.198 ops/s
Iteration  12: 6580967.879 ops/s
Iteration  13: 7064830.316 ops/s
Iteration  14: 6738603.306 ops/s
Iteration  15: 6707981.740 ops/s
Iteration  16: 7166704.177 ops/s
Iteration  17: 6689558.558 ops/s
Iteration  18: 6927535.066 ops/s
Iteration  19: 6976923.791 ops/s
Iteration  20: 6987020.687 ops/s
Iteration  21: 6719141.993 ops/s
Iteration  22: 6766185.887 ops/s
Iteration  23: 7112246.828 ops/s
Iteration  24: 6574662.190 ops/s
Iteration  25: 6747371.187 ops/s
Iteration  26: 6771164.846 ops/s
Iteration  27: 6879799.732 ops/s
Iteration  28: 6789500.589 ops/s
Iteration  29: 6686253.963 ops/s
Iteration  30: 7001703.541 ops/s


Result "io.reactivex.rxjava3.internal.util.AtomicThrowableTest._Benchmark.benchmark_tryTerminateConsumerEmitterNoError":
  6833086.862 ±(99.9%) 103265.635 ops/s [Average]
  (min, avg, max) = (6574662.190, 6833086.862, 7166704.177), stdev = 154563.153
  CI (99.9%): [6729821.226, 6936352.497] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score        Error  Units
AtomicThrowableTest._Benchmark.benchmark_tryTerminateConsumerEmitterNoError  thrpt   30  6833086.862 ± 103265.635  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFromStreamTest._Benchmark.benchmark_hasNextCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFromStreamTest._Benchmark.benchmark_hasNextCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 107663.438 ops/s
# Warmup Iteration   2: 467403.931 ops/s
# Warmup Iteration   3: 508750.990 ops/s
# Warmup Iteration   4: 466602.454 ops/s
# Warmup Iteration   5: 546458.954 ops/s
# Warmup Iteration   6: 519920.804 ops/s
# Warmup Iteration   7: 533540.722 ops/s
# Warmup Iteration   8: 544547.565 ops/s
# Warmup Iteration   9: 525984.196 ops/s
# Warmup Iteration  10: 538764.051 ops/s
# Warmup Iteration  11: 514031.539 ops/s
# Warmup Iteration  12: 519982.523 ops/s
# Warmup Iteration  13: 552187.458 ops/s
# Warmup Iteration  14: 529326.406 ops/s
# Warmup Iteration  15: 534279.597 ops/s
# Warmup Iteration  16: 520512.027 ops/s
# Warmup Iteration  17: 539298.867 ops/s
# Warmup Iteration  18: 570505.945 ops/s
# Warmup Iteration  19: 523146.977 ops/s
# Warmup Iteration  20: 565472.613 ops/s
# Warmup Iteration  21: 552513.098 ops/s
# Warmup Iteration  22: 564926.120 ops/s
# Warmup Iteration  23: 558203.772 ops/s
# Warmup Iteration  24: 538621.448 ops/s
# Warmup Iteration  25: 549900.980 ops/s
# Warmup Iteration  26: 573584.696 ops/s
# Warmup Iteration  27: 537615.671 ops/s
# Warmup Iteration  28: 552666.942 ops/s
# Warmup Iteration  29: 559306.194 ops/s
# Warmup Iteration  30: 555527.594 ops/s
Iteration   1: 548933.454 ops/s
Iteration   2: 553119.653 ops/s
Iteration   3: 565325.991 ops/s
Iteration   4: 543147.543 ops/s
Iteration   5: 552244.314 ops/s
Iteration   6: 567188.433 ops/s
Iteration   7: 570353.164 ops/s
Iteration   8: 543498.681 ops/s
Iteration   9: 582391.067 ops/s
Iteration  10: 534094.611 ops/s
Iteration  11: 558832.486 ops/s
Iteration  12: 546266.995 ops/s
Iteration  13: 540647.703 ops/s
Iteration  14: 546117.687 ops/s
Iteration  15: 540598.817 ops/s
Iteration  16: 541801.489 ops/s
Iteration  17: 555661.351 ops/s
Iteration  18: 546582.262 ops/s
Iteration  19: 560097.619 ops/s
Iteration  20: 552232.635 ops/s
Iteration  21: 536653.242 ops/s
Iteration  22: 519715.770 ops/s
Iteration  23: 541807.704 ops/s
Iteration  24: 548278.291 ops/s
Iteration  25: 538337.063 ops/s
Iteration  26: 563065.154 ops/s
Iteration  27: 551800.687 ops/s
Iteration  28: 565660.339 ops/s
Iteration  29: 541457.866 ops/s
Iteration  30: 465045.512 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableFromStreamTest._Benchmark.benchmark_hasNextCrash":
  547365.253 ±(99.9%) 13393.996 ops/s [Average]
  (min, avg, max) = (465045.512, 547365.253, 582391.067), stdev = 20047.504
  CI (99.9%): [533971.257, 560759.249] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score       Error  Units
FlowableFromStreamTest._Benchmark.benchmark_hasNextCrash  thrpt   30  547365.253 ± 13393.996  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFromStreamTest._Benchmark.benchmark_closeCalledOnItemCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFromStreamTest._Benchmark.benchmark_closeCalledOnItemCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 89662.071 ops/s
# Warmup Iteration   2: 256251.650 ops/s
# Warmup Iteration   3: 473353.021 ops/s
# Warmup Iteration   4: 493345.898 ops/s
# Warmup Iteration   5: 531953.913 ops/s
# Warmup Iteration   6: 537040.563 ops/s
# Warmup Iteration   7: 536106.971 ops/s
# Warmup Iteration   8: 539864.168 ops/s
# Warmup Iteration   9: 549901.000 ops/s
# Warmup Iteration  10: 526117.383 ops/s
# Warmup Iteration  11: 522613.287 ops/s
# Warmup Iteration  12: 558004.037 ops/s
# Warmup Iteration  13: 520704.935 ops/s
# Warmup Iteration  14: 542665.930 ops/s
# Warmup Iteration  15: 528114.481 ops/s
# Warmup Iteration  16: 537129.272 ops/s
# Warmup Iteration  17: 558717.707 ops/s
# Warmup Iteration  18: 533779.531 ops/s
# Warmup Iteration  19: 548104.173 ops/s
# Warmup Iteration  20: 554551.143 ops/s
# Warmup Iteration  21: 562469.251 ops/s
# Warmup Iteration  22: 575166.588 ops/s
# Warmup Iteration  23: 517714.165 ops/s
# Warmup Iteration  24: 519332.946 ops/s
# Warmup Iteration  25: 546238.247 ops/s
# Warmup Iteration  26: 580633.076 ops/s
# Warmup Iteration  27: 557972.854 ops/s
# Warmup Iteration  28: 553255.869 ops/s
# Warmup Iteration  29: 580827.522 ops/s
# Warmup Iteration  30: 547425.189 ops/s
Iteration   1: 560723.225 ops/s
Iteration   2: 541922.828 ops/s
Iteration   3: 566677.125 ops/s
Iteration   4: 581707.007 ops/s
Iteration   5: 543653.365 ops/s
Iteration   6: 572953.587 ops/s
Iteration   7: 550410.507 ops/s
Iteration   8: 559717.800 ops/s
Iteration   9: 572814.884 ops/s
Iteration  10: 553256.049 ops/s
Iteration  11: 557618.619 ops/s
Iteration  12: 573453.401 ops/s
Iteration  13: 551066.582 ops/s
Iteration  14: 574430.623 ops/s
Iteration  15: 570446.798 ops/s
Iteration  16: 538369.643 ops/s
Iteration  17: 564415.563 ops/s
Iteration  18: 554268.036 ops/s
Iteration  19: 565415.550 ops/s
Iteration  20: 577946.751 ops/s
Iteration  21: 547406.966 ops/s
Iteration  22: 561650.096 ops/s
Iteration  23: 561431.570 ops/s
Iteration  24: 576433.155 ops/s
Iteration  25: 547447.877 ops/s
Iteration  26: 572304.480 ops/s
Iteration  27: 546978.516 ops/s
Iteration  28: 559487.658 ops/s
Iteration  29: 580032.633 ops/s
Iteration  30: 534185.627 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableFromStreamTest._Benchmark.benchmark_closeCalledOnItemCrash":
  560620.884 ±(99.9%) 8775.934 ops/s [Average]
  (min, avg, max) = (534185.627, 560620.884, 581707.007), stdev = 13135.406
  CI (99.9%): [551844.950, 569396.818] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score      Error  Units
FlowableFromStreamTest._Benchmark.benchmark_closeCalledOnItemCrash  thrpt   30  560620.884 ± 8775.934  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupByTest._Benchmark.benchmark_mapFactoryThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupByTest._Benchmark.benchmark_mapFactoryThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 206428.127 ops/s
# Warmup Iteration   2: 536289.680 ops/s
# Warmup Iteration   3: 647318.057 ops/s
# Warmup Iteration   4: 683250.948 ops/s
# Warmup Iteration   5: 721316.530 ops/s
# Warmup Iteration   6: 683125.051 ops/s
# Warmup Iteration   7: 598921.355 ops/s
# Warmup Iteration   8: 709819.095 ops/s
# Warmup Iteration   9: 702016.051 ops/s
# Warmup Iteration  10: 728123.939 ops/s
# Warmup Iteration  11: 716334.437 ops/s
# Warmup Iteration  12: 697381.980 ops/s
# Warmup Iteration  13: 720078.283 ops/s
# Warmup Iteration  14: 681983.456 ops/s
# Warmup Iteration  15: 711316.705 ops/s
# Warmup Iteration  16: 725701.645 ops/s
# Warmup Iteration  17: 742945.316 ops/s
# Warmup Iteration  18: 719235.265 ops/s
# Warmup Iteration  19: 786011.908 ops/s
# Warmup Iteration  20: 721067.173 ops/s
# Warmup Iteration  21: 755672.145 ops/s
# Warmup Iteration  22: 742522.313 ops/s
# Warmup Iteration  23: 717269.600 ops/s
# Warmup Iteration  24: 760797.262 ops/s
# Warmup Iteration  25: 743025.343 ops/s
# Warmup Iteration  26: 754530.090 ops/s
# Warmup Iteration  27: 760767.905 ops/s
# Warmup Iteration  28: 781836.345 ops/s
# Warmup Iteration  29: 736806.791 ops/s
# Warmup Iteration  30: 746575.176 ops/s
Iteration   1: 740800.500 ops/s
Iteration   2: 741330.638 ops/s
Iteration   3: 725540.214 ops/s
Iteration   4: 729037.238 ops/s
Iteration   5: 773436.634 ops/s
Iteration   6: 759356.605 ops/s
Iteration   7: 712208.663 ops/s
Iteration   8: 752993.294 ops/s
Iteration   9: 737279.622 ops/s
Iteration  10: 750192.584 ops/s
Iteration  11: 729138.719 ops/s
Iteration  12: 739594.814 ops/s
Iteration  13: 741445.516 ops/s
Iteration  14: 758217.899 ops/s
Iteration  15: 711785.189 ops/s
Iteration  16: 761528.102 ops/s
Iteration  17: 772930.276 ops/s
Iteration  18: 742432.899 ops/s
Iteration  19: 736615.970 ops/s
Iteration  20: 763040.603 ops/s
Iteration  21: 728053.906 ops/s
Iteration  22: 767206.276 ops/s
Iteration  23: 740691.327 ops/s
Iteration  24: 753195.353 ops/s
Iteration  25: 637071.987 ops/s
Iteration  26: 732809.630 ops/s
Iteration  27: 781281.195 ops/s
Iteration  28: 734583.272 ops/s
Iteration  29: 762189.590 ops/s
Iteration  30: 731370.390 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupByTest._Benchmark.benchmark_mapFactoryThrows":
  741578.630 ±(99.9%) 17611.202 ops/s [Average]
  (min, avg, max) = (637071.987, 741578.630, 781281.195), stdev = 26359.620
  CI (99.9%): [723967.428, 759189.832] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score       Error  Units
FlowableGroupByTest._Benchmark.benchmark_mapFactoryThrows  thrpt   30  741578.630 ± 17611.202  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.util.AtomicThrowableTest._Benchmark.benchmark_tryTerminateConsumerEmitterError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.util.AtomicThrowableTest._Benchmark.benchmark_tryTerminateConsumerEmitterError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 397038.824 ops/s
# Warmup Iteration   2: 598551.007 ops/s
# Warmup Iteration   3: 636246.137 ops/s
# Warmup Iteration   4: 729509.792 ops/s
# Warmup Iteration   5: 562423.249 ops/s
# Warmup Iteration   6: 709216.979 ops/s
# Warmup Iteration   7: 680354.637 ops/s
# Warmup Iteration   8: 687147.383 ops/s
# Warmup Iteration   9: 720653.363 ops/s
# Warmup Iteration  10: 679981.022 ops/s
# Warmup Iteration  11: 721805.999 ops/s
# Warmup Iteration  12: 683036.926 ops/s
# Warmup Iteration  13: 706072.595 ops/s
# Warmup Iteration  14: 720947.073 ops/s
# Warmup Iteration  15: 691099.641 ops/s
# Warmup Iteration  16: 720035.616 ops/s
# Warmup Iteration  17: 772428.172 ops/s
# Warmup Iteration  18: 731274.416 ops/s
# Warmup Iteration  19: 753145.864 ops/s
# Warmup Iteration  20: 749095.579 ops/s
# Warmup Iteration  21: 753004.586 ops/s
# Warmup Iteration  22: 761758.808 ops/s
# Warmup Iteration  23: 743391.899 ops/s
# Warmup Iteration  24: 722328.857 ops/s
# Warmup Iteration  25: 761245.207 ops/s
# Warmup Iteration  26: 747288.308 ops/s
# Warmup Iteration  27: 736370.979 ops/s
# Warmup Iteration  28: 747713.639 ops/s
# Warmup Iteration  29: 748232.403 ops/s
# Warmup Iteration  30: 757174.649 ops/s
Iteration   1: 727065.346 ops/s
Iteration   2: 758111.479 ops/s
Iteration   3: 729641.191 ops/s
Iteration   4: 754589.693 ops/s
Iteration   5: 760635.210 ops/s
Iteration   6: 726683.004 ops/s
Iteration   7: 775649.387 ops/s
Iteration   8: 733690.809 ops/s
Iteration   9: 760036.351 ops/s
Iteration  10: 759098.936 ops/s
Iteration  11: 760120.545 ops/s
Iteration  12: 769962.970 ops/s
Iteration  13: 767804.900 ops/s
Iteration  14: 753525.792 ops/s
Iteration  15: 732140.700 ops/s
Iteration  16: 729303.742 ops/s
Iteration  17: 774725.015 ops/s
Iteration  18: 709424.967 ops/s
Iteration  19: 791055.818 ops/s
Iteration  20: 718554.178 ops/s
Iteration  21: 752051.497 ops/s
Iteration  22: 750418.849 ops/s
Iteration  23: 744140.163 ops/s
Iteration  24: 759194.835 ops/s
Iteration  25: 734770.457 ops/s
Iteration  26: 761031.900 ops/s
Iteration  27: 740274.782 ops/s
Iteration  28: 747857.354 ops/s
Iteration  29: 749561.666 ops/s
Iteration  30: 752645.582 ops/s


Result "io.reactivex.rxjava3.internal.util.AtomicThrowableTest._Benchmark.benchmark_tryTerminateConsumerEmitterError":
  749458.904 ±(99.9%) 12329.246 ops/s [Average]
  (min, avg, max) = (709424.967, 749458.904, 791055.818), stdev = 18453.836
  CI (99.9%): [737129.658, 761788.150] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score       Error  Units
AtomicThrowableTest._Benchmark.benchmark_tryTerminateConsumerEmitterError  thrpt   30  749458.904 ± 12329.246  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_iterableNullPublisher$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_iterableNullPublisher

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 117144.177 ops/s
# Warmup Iteration   2: 506578.566 ops/s
# Warmup Iteration   3: 596300.456 ops/s
# Warmup Iteration   4: 566068.379 ops/s
# Warmup Iteration   5: 569495.719 ops/s
# Warmup Iteration   6: 630953.218 ops/s
# Warmup Iteration   7: 634121.237 ops/s
# Warmup Iteration   8: 629746.018 ops/s
# Warmup Iteration   9: 632760.538 ops/s
# Warmup Iteration  10: 636334.566 ops/s
# Warmup Iteration  11: 631662.587 ops/s
# Warmup Iteration  12: 663227.427 ops/s
# Warmup Iteration  13: 648967.058 ops/s
# Warmup Iteration  14: 623183.659 ops/s
# Warmup Iteration  15: 631223.944 ops/s
# Warmup Iteration  16: 644415.626 ops/s
# Warmup Iteration  17: 660338.922 ops/s
# Warmup Iteration  18: 678855.735 ops/s
# Warmup Iteration  19: 668923.915 ops/s
# Warmup Iteration  20: 696782.185 ops/s
# Warmup Iteration  21: 664420.499 ops/s
# Warmup Iteration  22: 665736.648 ops/s
# Warmup Iteration  23: 658391.964 ops/s
# Warmup Iteration  24: 656574.169 ops/s
# Warmup Iteration  25: 675560.098 ops/s
# Warmup Iteration  26: 675416.080 ops/s
# Warmup Iteration  27: 688327.087 ops/s
# Warmup Iteration  28: 704024.822 ops/s
# Warmup Iteration  29: 644232.943 ops/s
# Warmup Iteration  30: 690760.852 ops/s
Iteration   1: 657107.241 ops/s
Iteration   2: 663186.233 ops/s
Iteration   3: 673047.617 ops/s
Iteration   4: 684229.883 ops/s
Iteration   5: 686921.812 ops/s
Iteration   6: 663346.676 ops/s
Iteration   7: 669709.114 ops/s
Iteration   8: 665958.871 ops/s
Iteration   9: 689540.519 ops/s
Iteration  10: 642938.178 ops/s
Iteration  11: 675171.432 ops/s
Iteration  12: 685560.899 ops/s
Iteration  13: 662225.220 ops/s
Iteration  14: 668831.066 ops/s
Iteration  15: 659121.442 ops/s
Iteration  16: 640424.388 ops/s
Iteration  17: 700536.806 ops/s
Iteration  18: 659412.619 ops/s
Iteration  19: 672997.562 ops/s
Iteration  20: 581028.473 ops/s
Iteration  21: 655876.918 ops/s
Iteration  22: 680181.584 ops/s
Iteration  23: 683475.191 ops/s
Iteration  24: 657447.263 ops/s
Iteration  25: 665431.490 ops/s
Iteration  26: 682858.283 ops/s
Iteration  27: 657169.604 ops/s
Iteration  28: 685766.314 ops/s
Iteration  29: 669560.040 ops/s
Iteration  30: 654375.323 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_iterableNullPublisher":
  666447.935 ±(99.9%) 14300.602 ops/s [Average]
  (min, avg, max) = (581028.473, 666447.935, 700536.806), stdev = 21404.469
  CI (99.9%): [652147.334, 680748.537] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score       Error  Units
FlowableCombineLatestTest._Benchmark.benchmark_iterableNullPublisher  thrpt   30  666447.935 ± 14300.602  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriberTest._Benchmark.benchmark_unorderedFastPathReject$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriberTest._Benchmark.benchmark_unorderedFastPathReject

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 624314.539 ops/s
# Warmup Iteration   2: 1964328.677 ops/s
# Warmup Iteration   3: 3261494.031 ops/s
# Warmup Iteration   4: 2961627.581 ops/s
# Warmup Iteration   5: 3235727.511 ops/s
# Warmup Iteration   6: 3235261.334 ops/s
# Warmup Iteration   7: 3125494.374 ops/s
# Warmup Iteration   8: 3135170.110 ops/s
# Warmup Iteration   9: 3189467.853 ops/s
# Warmup Iteration  10: 3029281.267 ops/s
# Warmup Iteration  11: 3151255.076 ops/s
# Warmup Iteration  12: 3107346.101 ops/s
# Warmup Iteration  13: 3036626.792 ops/s
# Warmup Iteration  14: 3197377.645 ops/s
# Warmup Iteration  15: 3026261.323 ops/s
# Warmup Iteration  16: 3186223.301 ops/s
# Warmup Iteration  17: 3044396.568 ops/s
# Warmup Iteration  18: 3187644.038 ops/s
# Warmup Iteration  19: 3155895.668 ops/s
# Warmup Iteration  20: 3158186.052 ops/s
# Warmup Iteration  21: 3168277.520 ops/s
# Warmup Iteration  22: 3041690.792 ops/s
# Warmup Iteration  23: 3236988.314 ops/s
# Warmup Iteration  24: 3090719.948 ops/s
# Warmup Iteration  25: 3043755.322 ops/s
# Warmup Iteration  26: 3197907.364 ops/s
# Warmup Iteration  27: 3193933.341 ops/s
# Warmup Iteration  28: 2998152.978 ops/s
# Warmup Iteration  29: 3124495.396 ops/s
# Warmup Iteration  30: 3236661.373 ops/s
Iteration   1: 3036257.715 ops/s
Iteration   2: 3269885.307 ops/s
Iteration   3: 3151107.025 ops/s
Iteration   4: 3143015.962 ops/s
Iteration   5: 3193094.362 ops/s
Iteration   6: 3032824.302 ops/s
Iteration   7: 3235523.685 ops/s
Iteration   8: 3105376.433 ops/s
Iteration   9: 3080891.095 ops/s
Iteration  10: 3195572.469 ops/s
Iteration  11: 3009969.775 ops/s
Iteration  12: 3146610.441 ops/s
Iteration  13: 3123206.157 ops/s
Iteration  14: 3070848.739 ops/s
Iteration  15: 3202667.081 ops/s
Iteration  16: 2982449.883 ops/s
Iteration  17: 3253320.765 ops/s
Iteration  18: 3217276.315 ops/s
Iteration  19: 3069361.781 ops/s
Iteration  20: 3190524.632 ops/s
Iteration  21: 3040148.954 ops/s
Iteration  22: 3094509.057 ops/s
Iteration  23: 3175029.754 ops/s
Iteration  24: 3145940.307 ops/s
Iteration  25: 3141950.162 ops/s
Iteration  26: 3222530.319 ops/s
Iteration  27: 3029295.117 ops/s
Iteration  28: 3214234.136 ops/s
Iteration  29: 3089177.481 ops/s
Iteration  30: 3153938.245 ops/s


Result "io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriberTest._Benchmark.benchmark_unorderedFastPathReject":
  3133884.582 ±(99.9%) 51994.454 ops/s [Average]
  (min, avg, max) = (2982449.883, 3133884.582, 3269885.307), stdev = 77822.856
  CI (99.9%): [3081890.128, 3185879.036] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
QueueDrainSubscriberTest._Benchmark.benchmark_unorderedFastPathReject  thrpt   30  3133884.582 ± 51994.454  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_ambIterableOneIsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_ambIterableOneIsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 208144.272 ops/s
# Warmup Iteration   2: 540355.908 ops/s
# Warmup Iteration   3: 666098.598 ops/s
# Warmup Iteration   4: 630297.550 ops/s
# Warmup Iteration   5: 653333.539 ops/s
# Warmup Iteration   6: 658699.694 ops/s
# Warmup Iteration   7: 623650.530 ops/s
# Warmup Iteration   8: 672691.679 ops/s
# Warmup Iteration   9: 634076.533 ops/s
# Warmup Iteration  10: 636354.547 ops/s
# Warmup Iteration  11: 648353.017 ops/s
# Warmup Iteration  12: 630057.909 ops/s
# Warmup Iteration  13: 652911.762 ops/s
# Warmup Iteration  14: 649860.189 ops/s
# Warmup Iteration  15: 664015.079 ops/s
# Warmup Iteration  16: 648363.491 ops/s
# Warmup Iteration  17: 668256.586 ops/s
# Warmup Iteration  18: 664105.038 ops/s
# Warmup Iteration  19: 678495.966 ops/s
# Warmup Iteration  20: 637469.075 ops/s
# Warmup Iteration  21: 691996.551 ops/s
# Warmup Iteration  22: 694479.354 ops/s
# Warmup Iteration  23: 687914.143 ops/s
# Warmup Iteration  24: 685116.369 ops/s
# Warmup Iteration  25: 709394.830 ops/s
# Warmup Iteration  26: 676326.727 ops/s
# Warmup Iteration  27: 692172.131 ops/s
# Warmup Iteration  28: 689762.088 ops/s
# Warmup Iteration  29: 702305.273 ops/s
# Warmup Iteration  30: 674465.451 ops/s
Iteration   1: 645934.273 ops/s
Iteration   2: 721536.015 ops/s
Iteration   3: 697131.645 ops/s
Iteration   4: 686169.048 ops/s
Iteration   5: 699567.669 ops/s
Iteration   6: 703912.451 ops/s
Iteration   7: 662547.648 ops/s
Iteration   8: 698733.071 ops/s
Iteration   9: 676822.097 ops/s
Iteration  10: 698719.571 ops/s
Iteration  11: 669619.397 ops/s
Iteration  12: 689308.261 ops/s
Iteration  13: 709256.682 ops/s
Iteration  14: 581990.149 ops/s
Iteration  15: 676303.670 ops/s
Iteration  16: 664657.054 ops/s
Iteration  17: 701225.224 ops/s
Iteration  18: 668080.821 ops/s
Iteration  19: 697365.022 ops/s
Iteration  20: 639609.904 ops/s
Iteration  21: 695681.938 ops/s
Iteration  22: 680557.406 ops/s
Iteration  23: 689025.867 ops/s
Iteration  24: 701911.361 ops/s
Iteration  25: 663725.931 ops/s
Iteration  26: 688653.174 ops/s
Iteration  27: 688594.967 ops/s
Iteration  28: 697329.291 ops/s
Iteration  29: 702734.420 ops/s
Iteration  30: 668600.047 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_ambIterableOneIsNull":
  682176.802 ±(99.9%) 17826.266 ops/s [Average]
  (min, avg, max) = (581990.149, 682176.802, 721536.015), stdev = 26681.518
  CI (99.9%): [664350.536, 700003.069] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score       Error  Units
FlowableNullTests._Benchmark.benchmark_ambIterableOneIsNull  thrpt   30  682176.802 ± 17826.266  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableScalarXMapTest._Benchmark.benchmark_tryScalarXMap$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableScalarXMapTest._Benchmark.benchmark_tryScalarXMap

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 313886.712 ops/s
# Warmup Iteration   2: 579829.752 ops/s
# Warmup Iteration   3: 679518.003 ops/s
# Warmup Iteration   4: 648575.826 ops/s
# Warmup Iteration   5: 634930.863 ops/s
# Warmup Iteration   6: 684044.927 ops/s
# Warmup Iteration   7: 682915.985 ops/s
# Warmup Iteration   8: 714295.295 ops/s
# Warmup Iteration   9: 660956.990 ops/s
# Warmup Iteration  10: 726026.177 ops/s
# Warmup Iteration  11: 713672.289 ops/s
# Warmup Iteration  12: 662556.806 ops/s
# Warmup Iteration  13: 724833.532 ops/s
# Warmup Iteration  14: 682624.124 ops/s
# Warmup Iteration  15: 698942.888 ops/s
# Warmup Iteration  16: 688071.068 ops/s
# Warmup Iteration  17: 731657.896 ops/s
# Warmup Iteration  18: 731633.499 ops/s
# Warmup Iteration  19: 764531.534 ops/s
# Warmup Iteration  20: 712151.438 ops/s
# Warmup Iteration  21: 755870.359 ops/s
# Warmup Iteration  22: 698600.626 ops/s
# Warmup Iteration  23: 720796.816 ops/s
# Warmup Iteration  24: 719858.094 ops/s
# Warmup Iteration  25: 756622.575 ops/s
# Warmup Iteration  26: 703250.484 ops/s
# Warmup Iteration  27: 734135.434 ops/s
# Warmup Iteration  28: 713586.265 ops/s
# Warmup Iteration  29: 729842.952 ops/s
# Warmup Iteration  30: 729784.750 ops/s
Iteration   1: 739568.651 ops/s
Iteration   2: 705572.073 ops/s
Iteration   3: 749445.258 ops/s
Iteration   4: 722380.639 ops/s
Iteration   5: 731541.223 ops/s
Iteration   6: 712082.491 ops/s
Iteration   7: 741493.094 ops/s
Iteration   8: 725585.610 ops/s
Iteration   9: 723569.981 ops/s
Iteration  10: 751511.276 ops/s
Iteration  11: 712665.447 ops/s
Iteration  12: 746048.228 ops/s
Iteration  13: 725301.602 ops/s
Iteration  14: 719210.678 ops/s
Iteration  15: 739813.619 ops/s
Iteration  16: 705064.789 ops/s
Iteration  17: 752328.434 ops/s
Iteration  18: 717183.149 ops/s
Iteration  19: 704282.175 ops/s
Iteration  20: 750741.108 ops/s
Iteration  21: 703699.663 ops/s
Iteration  22: 728146.582 ops/s
Iteration  23: 701993.788 ops/s
Iteration  24: 714219.850 ops/s
Iteration  25: 736458.552 ops/s
Iteration  26: 711662.511 ops/s
Iteration  27: 725478.741 ops/s
Iteration  28: 742604.180 ops/s
Iteration  29: 715190.901 ops/s
Iteration  30: 743316.017 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableScalarXMapTest._Benchmark.benchmark_tryScalarXMap":
  726605.344 ±(99.9%) 10822.354 ops/s [Average]
  (min, avg, max) = (701993.788, 726605.344, 752328.434), stdev = 16198.391
  CI (99.9%): [715782.990, 737427.697] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score       Error  Units
FlowableScalarXMapTest._Benchmark.benchmark_tryScalarXMap  thrpt   30  726605.344 ± 10822.354  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableUsingTest._Benchmark.benchmark_supplierDisposerCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableUsingTest._Benchmark.benchmark_supplierDisposerCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 35811.498 ops/s
# Warmup Iteration   2: 153997.459 ops/s
# Warmup Iteration   3: 171742.632 ops/s
# Warmup Iteration   4: 175342.080 ops/s
# Warmup Iteration   5: 202728.990 ops/s
# Warmup Iteration   6: 194147.106 ops/s
# Warmup Iteration   7: 195249.942 ops/s
# Warmup Iteration   8: 202815.914 ops/s
# Warmup Iteration   9: 199880.234 ops/s
# Warmup Iteration  10: 192721.872 ops/s
# Warmup Iteration  11: 197584.022 ops/s
# Warmup Iteration  12: 194219.672 ops/s
# Warmup Iteration  13: 197725.581 ops/s
# Warmup Iteration  14: 200427.036 ops/s
# Warmup Iteration  15: 191798.506 ops/s
# Warmup Iteration  16: 200371.719 ops/s
# Warmup Iteration  17: 188970.712 ops/s
# Warmup Iteration  18: 207590.829 ops/s
# Warmup Iteration  19: 206127.843 ops/s
# Warmup Iteration  20: 204534.314 ops/s
# Warmup Iteration  21: 213447.958 ops/s
# Warmup Iteration  22: 208454.199 ops/s
# Warmup Iteration  23: 206867.129 ops/s
# Warmup Iteration  24: 201410.202 ops/s
# Warmup Iteration  25: 213509.844 ops/s
# Warmup Iteration  26: 204346.435 ops/s
# Warmup Iteration  27: 206697.998 ops/s
# Warmup Iteration  28: 209757.710 ops/s
# Warmup Iteration  29: 200257.306 ops/s
# Warmup Iteration  30: 202692.464 ops/s
Iteration   1: 211495.972 ops/s
Iteration   2: 201463.272 ops/s
Iteration   3: 213581.868 ops/s
Iteration   4: 196008.135 ops/s
Iteration   5: 207161.493 ops/s
Iteration   6: 210443.682 ops/s
Iteration   7: 200300.364 ops/s
Iteration   8: 171412.216 ops/s
Iteration   9: 186185.708 ops/s
Iteration  10: 202596.802 ops/s
Iteration  11: 213652.826 ops/s
Iteration  12: 205617.369 ops/s
Iteration  13: 203646.827 ops/s
Iteration  14: 213843.668 ops/s
Iteration  15: 210420.952 ops/s
Iteration  16: 197593.331 ops/s
Iteration  17: 211004.103 ops/s
Iteration  18: 201245.649 ops/s
Iteration  19: 212501.392 ops/s
Iteration  20: 202044.610 ops/s
Iteration  21: 205852.989 ops/s
Iteration  22: 208141.322 ops/s
Iteration  23: 203558.338 ops/s
Iteration  24: 210671.269 ops/s
Iteration  25: 207357.908 ops/s
Iteration  26: 210056.095 ops/s
Iteration  27: 205483.864 ops/s
Iteration  28: 206604.811 ops/s
Iteration  29: 203415.241 ops/s
Iteration  30: 207904.159 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableUsingTest._Benchmark.benchmark_supplierDisposerCrash":
  204708.875 ±(99.9%) 5813.039 ops/s [Average]
  (min, avg, max) = (171412.216, 204708.875, 213843.668), stdev = 8700.684
  CI (99.9%): [198895.835, 210521.914] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
FlowableUsingTest._Benchmark.benchmark_supplierDisposerCrash  thrpt   30  204708.875 ± 5813.039  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicateTest._Benchmark.benchmark_badSource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicateTest._Benchmark.benchmark_badSource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 61671.965 ops/s
# Warmup Iteration   2: 205701.932 ops/s
# Warmup Iteration   3: 226036.773 ops/s
# Warmup Iteration   4: 198227.113 ops/s
# Warmup Iteration   5: 244377.215 ops/s
# Warmup Iteration   6: 236002.443 ops/s
# Warmup Iteration   7: 249188.463 ops/s
# Warmup Iteration   8: 234893.077 ops/s
# Warmup Iteration   9: 244772.988 ops/s
# Warmup Iteration  10: 243297.976 ops/s
# Warmup Iteration  11: 233424.600 ops/s
# Warmup Iteration  12: 246794.442 ops/s
# Warmup Iteration  13: 235609.313 ops/s
# Warmup Iteration  14: 246019.815 ops/s
# Warmup Iteration  15: 233175.390 ops/s
# Warmup Iteration  16: 247219.043 ops/s
# Warmup Iteration  17: 249106.104 ops/s
# Warmup Iteration  18: 247941.712 ops/s
# Warmup Iteration  19: 260729.181 ops/s
# Warmup Iteration  20: 240953.448 ops/s
# Warmup Iteration  21: 259142.964 ops/s
# Warmup Iteration  22: 250774.621 ops/s
# Warmup Iteration  23: 245911.222 ops/s
# Warmup Iteration  24: 247028.403 ops/s
# Warmup Iteration  25: 244663.440 ops/s
# Warmup Iteration  26: 259355.387 ops/s
# Warmup Iteration  27: 247010.457 ops/s
# Warmup Iteration  28: 245204.867 ops/s
# Warmup Iteration  29: 256675.188 ops/s
# Warmup Iteration  30: 256390.580 ops/s
Iteration   1: 244150.602 ops/s
Iteration   2: 251146.622 ops/s
Iteration   3: 244885.704 ops/s
Iteration   4: 255653.254 ops/s
Iteration   5: 259336.744 ops/s
Iteration   6: 245665.556 ops/s
Iteration   7: 256435.859 ops/s
Iteration   8: 251518.191 ops/s
Iteration   9: 243850.083 ops/s
Iteration  10: 259577.513 ops/s
Iteration  11: 241503.846 ops/s
Iteration  12: 245646.238 ops/s
Iteration  13: 254352.493 ops/s
Iteration  14: 241473.727 ops/s
Iteration  15: 244761.322 ops/s
Iteration  16: 256924.769 ops/s
Iteration  17: 241479.235 ops/s
Iteration  18: 249918.699 ops/s
Iteration  19: 247836.193 ops/s
Iteration  20: 260981.422 ops/s
Iteration  21: 243334.424 ops/s
Iteration  22: 249826.119 ops/s
Iteration  23: 260287.716 ops/s
Iteration  24: 242556.838 ops/s
Iteration  25: 259747.927 ops/s
Iteration  26: 262185.249 ops/s
Iteration  27: 241264.032 ops/s
Iteration  28: 252199.222 ops/s
Iteration  29: 242414.004 ops/s
Iteration  30: 256979.680 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicateTest._Benchmark.benchmark_badSource":
  250263.109 ±(99.9%) 4746.188 ops/s [Average]
  (min, avg, max) = (241264.032, 250263.109, 262185.249), stdev = 7103.872
  CI (99.9%): [245516.921, 255009.298] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
FlowableTakeUntilPredicateTest._Benchmark.benchmark_badSource  thrpt   30  250263.109 ± 4746.188  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerateTest._Benchmark.benchmark_multipleOnError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerateTest._Benchmark.benchmark_multipleOnError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 45137.156 ops/s
# Warmup Iteration   2: 94514.083 ops/s
# Warmup Iteration   3: 154153.406 ops/s
# Warmup Iteration   4: 166604.860 ops/s
# Warmup Iteration   5: 167460.606 ops/s
# Warmup Iteration   6: 165484.161 ops/s
# Warmup Iteration   7: 164064.307 ops/s
# Warmup Iteration   8: 173681.397 ops/s
# Warmup Iteration   9: 159633.424 ops/s
# Warmup Iteration  10: 166490.528 ops/s
# Warmup Iteration  11: 167285.882 ops/s
# Warmup Iteration  12: 166807.673 ops/s
# Warmup Iteration  13: 163901.294 ops/s
# Warmup Iteration  14: 171864.211 ops/s
# Warmup Iteration  15: 164436.746 ops/s
# Warmup Iteration  16: 170451.939 ops/s
# Warmup Iteration  17: 173404.986 ops/s
# Warmup Iteration  18: 174287.798 ops/s
# Warmup Iteration  19: 170681.655 ops/s
# Warmup Iteration  20: 174590.932 ops/s
# Warmup Iteration  21: 174678.302 ops/s
# Warmup Iteration  22: 172180.396 ops/s
# Warmup Iteration  23: 177141.319 ops/s
# Warmup Iteration  24: 174022.249 ops/s
# Warmup Iteration  25: 174579.192 ops/s
# Warmup Iteration  26: 179116.589 ops/s
# Warmup Iteration  27: 178632.298 ops/s
# Warmup Iteration  28: 168723.798 ops/s
# Warmup Iteration  29: 176209.437 ops/s
# Warmup Iteration  30: 180967.294 ops/s
Iteration   1: 167194.184 ops/s
Iteration   2: 179722.574 ops/s
Iteration   3: 141155.593 ops/s
Iteration   4: 175926.646 ops/s
Iteration   5: 172794.243 ops/s
Iteration   6: 171493.218 ops/s
Iteration   7: 177887.917 ops/s
Iteration   8: 170320.619 ops/s
Iteration   9: 182645.113 ops/s
Iteration  10: 167478.657 ops/s
Iteration  11: 174885.817 ops/s
Iteration  12: 181801.011 ops/s
Iteration  13: 169732.141 ops/s
Iteration  14: 175731.008 ops/s
Iteration  15: 178327.491 ops/s
Iteration  16: 170260.482 ops/s
Iteration  17: 177387.446 ops/s
Iteration  18: 174189.434 ops/s
Iteration  19: 170625.568 ops/s
Iteration  20: 173065.136 ops/s
Iteration  21: 175084.629 ops/s
Iteration  22: 178719.994 ops/s
Iteration  23: 171384.015 ops/s
Iteration  24: 180038.831 ops/s
Iteration  25: 171023.101 ops/s
Iteration  26: 174314.891 ops/s
Iteration  27: 164083.709 ops/s
Iteration  28: 175304.579 ops/s
Iteration  29: 179549.729 ops/s
Iteration  30: 174570.268 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerateTest._Benchmark.benchmark_multipleOnError":
  173223.268 ±(99.9%) 5029.339 ops/s [Average]
  (min, avg, max) = (141155.593, 173223.268, 182645.113), stdev = 7527.678
  CI (99.9%): [168193.929, 178252.607] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
FlowableGenerateTest._Benchmark.benchmark_multipleOnError  thrpt   30  173223.268 ± 5029.339  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingTest._Benchmark.benchmark_blockingSubscribeConsumerConsumer$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingTest._Benchmark.benchmark_blockingSubscribeConsumerConsumer

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 13509.178 ops/s
# Warmup Iteration   2: 17608.196 ops/s
# Warmup Iteration   3: 18929.987 ops/s
# Warmup Iteration   4: 19247.756 ops/s
# Warmup Iteration   5: 20896.681 ops/s
# Warmup Iteration   6: 23595.966 ops/s
# Warmup Iteration   7: 20192.349 ops/s
# Warmup Iteration   8: 20907.448 ops/s
# Warmup Iteration   9: 20634.354 ops/s
# Warmup Iteration  10: 20647.916 ops/s
# Warmup Iteration  11: 20336.089 ops/s
# Warmup Iteration  12: 19813.193 ops/s
# Warmup Iteration  13: 20522.018 ops/s
# Warmup Iteration  14: 21314.044 ops/s
# Warmup Iteration  15: 20744.058 ops/s
# Warmup Iteration  16: 20779.037 ops/s
# Warmup Iteration  17: 20519.410 ops/s
# Warmup Iteration  18: 20973.668 ops/s
# Warmup Iteration  19: 20377.182 ops/s
# Warmup Iteration  20: 21160.510 ops/s
# Warmup Iteration  21: 20463.931 ops/s
# Warmup Iteration  22: 20857.607 ops/s
# Warmup Iteration  23: 20599.419 ops/s
# Warmup Iteration  24: 20718.297 ops/s
# Warmup Iteration  25: 20573.831 ops/s
# Warmup Iteration  26: 20769.334 ops/s
# Warmup Iteration  27: 20482.492 ops/s
# Warmup Iteration  28: 20130.170 ops/s
# Warmup Iteration  29: 20668.333 ops/s
# Warmup Iteration  30: 20722.336 ops/s
Iteration   1: 21272.166 ops/s
Iteration   2: 20377.901 ops/s
Iteration   3: 20565.607 ops/s
Iteration   4: 20422.027 ops/s
Iteration   5: 21314.842 ops/s
Iteration   6: 20272.748 ops/s
Iteration   7: 21057.782 ops/s
Iteration   8: 20571.016 ops/s
Iteration   9: 20669.111 ops/s
Iteration  10: 20580.969 ops/s
Iteration  11: 20929.706 ops/s
Iteration  12: 20611.724 ops/s
Iteration  13: 20199.941 ops/s
Iteration  14: 20404.205 ops/s
Iteration  15: 26749.106 ops/s
Iteration  16: 20515.909 ops/s
Iteration  17: 20401.145 ops/s
Iteration  18: 20534.453 ops/s
Iteration  19: 20994.224 ops/s
Iteration  20: 20706.154 ops/s
Iteration  21: 20418.768 ops/s
Iteration  22: 20494.742 ops/s
Iteration  23: 21036.275 ops/s
Iteration  24: 20190.696 ops/s
Iteration  25: 21022.031 ops/s
Iteration  26: 20765.377 ops/s
Iteration  27: 20396.060 ops/s
Iteration  28: 20424.639 ops/s
Iteration  29: 20401.334 ops/s
Iteration  30: 20620.038 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingTest._Benchmark.benchmark_blockingSubscribeConsumerConsumer":
  20830.690 ±(99.9%) 773.067 ops/s [Average]
  (min, avg, max) = (20190.696, 20830.690, 26749.106), stdev = 1157.090
  CI (99.9%): [20057.623, 21603.757] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt      Score     Error  Units
ObservableBlockingTest._Benchmark.benchmark_blockingSubscribeConsumerConsumer  thrpt   30  20830.690 ± 773.067  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_observeOnDispose2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_observeOnDispose2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 66367.395 ops/s
# Warmup Iteration   2: 250722.954 ops/s
# Warmup Iteration   3: 345592.926 ops/s
# Warmup Iteration   4: 398769.185 ops/s
# Warmup Iteration   5: 370037.245 ops/s
# Warmup Iteration   6: 351557.033 ops/s
# Warmup Iteration   7: 376271.026 ops/s
# Warmup Iteration   8: 298939.414 ops/s
# Warmup Iteration   9: 385074.404 ops/s
# Warmup Iteration  10: 387566.676 ops/s
# Warmup Iteration  11: 343427.123 ops/s
# Warmup Iteration  12: 352183.951 ops/s
# Warmup Iteration  13: 387310.665 ops/s
# Warmup Iteration  14: 380198.946 ops/s
# Warmup Iteration  15: 359295.458 ops/s
# Warmup Iteration  16: 398649.853 ops/s
# Warmup Iteration  17: 389164.387 ops/s
# Warmup Iteration  18: 395785.109 ops/s
# Warmup Iteration  19: 397975.745 ops/s
# Warmup Iteration  20: 386674.233 ops/s
# Warmup Iteration  21: 377072.489 ops/s
# Warmup Iteration  22: 377831.216 ops/s
# Warmup Iteration  23: 352645.659 ops/s
# Warmup Iteration  24: 388803.036 ops/s
# Warmup Iteration  25: 373830.011 ops/s
# Warmup Iteration  26: 369053.905 ops/s
# Warmup Iteration  27: 353185.460 ops/s
# Warmup Iteration  28: 349951.165 ops/s
# Warmup Iteration  29: 319103.971 ops/s
# Warmup Iteration  30: 359831.533 ops/s
Iteration   1: 381111.158 ops/s
Iteration   2: 384855.567 ops/s
Iteration   3: 345014.235 ops/s
Iteration   4: 349838.685 ops/s
Iteration   5: 331434.936 ops/s
Iteration   6: 345499.461 ops/s
Iteration   7: 416538.044 ops/s
Iteration   8: 410023.841 ops/s
Iteration   9: 382148.240 ops/s
Iteration  10: 372765.069 ops/s
Iteration  11: 359728.849 ops/s
Iteration  12: 364700.018 ops/s
Iteration  13: 418157.051 ops/s
Iteration  14: 399640.945 ops/s
Iteration  15: 376764.158 ops/s
Iteration  16: 375074.465 ops/s
Iteration  17: 404449.222 ops/s
Iteration  18: 363432.428 ops/s
Iteration  19: 379971.980 ops/s
Iteration  20: 396246.187 ops/s
Iteration  21: 333237.525 ops/s
Iteration  22: 343536.104 ops/s
Iteration  23: 387355.648 ops/s
Iteration  24: 345192.255 ops/s
Iteration  25: 404561.989 ops/s
Iteration  26: 356218.772 ops/s
Iteration  27: 367407.731 ops/s
Iteration  28: 393738.408 ops/s
Iteration  29: 330952.366 ops/s
Iteration  30: 420069.747 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_observeOnDispose2":
  374655.503 ±(99.9%) 18026.232 ops/s [Average]
  (min, avg, max) = (330952.366, 374655.503, 420069.747), stdev = 26980.817
  CI (99.9%): [356629.271, 392681.734] (assumes normal distribution)


# Run complete. Total time: 00:01:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt       Score       Error  Units
MaybeTest._Benchmark.benchmark_observeOnDispose2  thrpt   30  374655.503 ± 18026.232  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_supplierThrows3$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_supplierThrows3

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.795 ops/s
# Warmup Iteration   2: 25500.799 ops/s
# Warmup Iteration   3: 83781.966 ops/s
# Warmup Iteration   4: 119240.684 ops/s
# Warmup Iteration   5: 184677.352 ops/s
# Warmup Iteration   6: 284389.161 ops/s
# Warmup Iteration   7: 318013.814 ops/s
# Warmup Iteration   8: 311839.361 ops/s
# Warmup Iteration   9: 317878.889 ops/s
# Warmup Iteration  10: 319268.450 ops/s
# Warmup Iteration  11: 303909.544 ops/s
# Warmup Iteration  12: 320947.871 ops/s
# Warmup Iteration  13: 312534.547 ops/s
# Warmup Iteration  14: 320907.278 ops/s
# Warmup Iteration  15: 306502.490 ops/s
# Warmup Iteration  16: 309812.662 ops/s
# Warmup Iteration  17: 325468.735 ops/s
# Warmup Iteration  18: 327853.133 ops/s
# Warmup Iteration  19: 313671.514 ops/s
# Warmup Iteration  20: 322836.784 ops/s
# Warmup Iteration  21: 307691.196 ops/s
# Warmup Iteration  22: 334845.705 ops/s
# Warmup Iteration  23: 310748.786 ops/s
# Warmup Iteration  24: 317383.244 ops/s
# Warmup Iteration  25: 327375.793 ops/s
# Warmup Iteration  26: 315104.546 ops/s
# Warmup Iteration  27: 319632.160 ops/s
# Warmup Iteration  28: 316427.019 ops/s
# Warmup Iteration  29: 322762.923 ops/s
# Warmup Iteration  30: 322362.249 ops/s
Iteration   1: 306759.331 ops/s
Iteration   2: 324171.361 ops/s
Iteration   3: 316570.714 ops/s
Iteration   4: 321659.291 ops/s
Iteration   5: 310769.208 ops/s
Iteration   6: 325970.639 ops/s
Iteration   7: 321853.029 ops/s
Iteration   8: 318980.303 ops/s
Iteration   9: 324052.586 ops/s
Iteration  10: 310930.310 ops/s
Iteration  11: 318696.859 ops/s
Iteration  12: 329815.902 ops/s
Iteration  13: 323025.733 ops/s
Iteration  14: 312424.228 ops/s
Iteration  15: 320715.539 ops/s
Iteration  16: 314864.912 ops/s
Iteration  17: 328310.845 ops/s
Iteration  18: 316344.138 ops/s
Iteration  19: 317639.244 ops/s
Iteration  20: 327501.144 ops/s
Iteration  21: 312091.097 ops/s
Iteration  22: 331873.512 ops/s
Iteration  23: 322836.839 ops/s
Iteration  24: 311721.662 ops/s
Iteration  25: 322424.689 ops/s
Iteration  26: 318359.858 ops/s
Iteration  27: 331867.779 ops/s
Iteration  28: 309501.624 ops/s
Iteration  29: 317516.694 ops/s
Iteration  30: 331942.404 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_supplierThrows3":
  320039.716 ±(99.9%) 4733.182 ops/s [Average]
  (min, avg, max) = (306759.331, 320039.716, 331942.404), stdev = 7084.405
  CI (99.9%): [315306.534, 324772.898] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
ObservableBufferTest._Benchmark.benchmark_supplierThrows3  thrpt   30  320039.716 ± 4733.182  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDebounceTest._Benchmark.benchmark_doubleOnSubscribeTime$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDebounceTest._Benchmark.benchmark_doubleOnSubscribeTime

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.733 ops/s
# Warmup Iteration   2: 37607.006 ops/s
# Warmup Iteration   3: 84011.378 ops/s
# Warmup Iteration   4: 81670.371 ops/s
# Warmup Iteration   5: 107497.689 ops/s
# Warmup Iteration   6: 76857.617 ops/s
# Warmup Iteration   7: 294520.536 ops/s
# Warmup Iteration   8: 290717.414 ops/s
# Warmup Iteration   9: 308523.882 ops/s
# Warmup Iteration  10: 292499.214 ops/s
# Warmup Iteration  11: 298790.735 ops/s
# Warmup Iteration  12: 309222.038 ops/s
# Warmup Iteration  13: 297336.458 ops/s
# Warmup Iteration  14: 292920.318 ops/s
# Warmup Iteration  15: 271416.375 ops/s
# Warmup Iteration  16: 313589.765 ops/s
# Warmup Iteration  17: 312339.213 ops/s
# Warmup Iteration  18: 299791.628 ops/s
# Warmup Iteration  19: 313444.840 ops/s
# Warmup Iteration  20: 249139.868 ops/s
# Warmup Iteration  21: 293413.425 ops/s
# Warmup Iteration  22: 316519.749 ops/s
# Warmup Iteration  23: 299367.889 ops/s
# Warmup Iteration  24: 295732.002 ops/s
# Warmup Iteration  25: 310675.125 ops/s
# Warmup Iteration  26: 298142.047 ops/s
# Warmup Iteration  27: 311971.097 ops/s
# Warmup Iteration  28: 306660.472 ops/s
# Warmup Iteration  29: 302280.975 ops/s
# Warmup Iteration  30: 303310.856 ops/s
Iteration   1: 304374.901 ops/s
Iteration   2: 306865.999 ops/s
Iteration   3: 300590.838 ops/s
Iteration   4: 298920.118 ops/s
Iteration   5: 312876.085 ops/s
Iteration   6: 300620.505 ops/s
Iteration   7: 305238.508 ops/s
Iteration   8: 296864.338 ops/s
Iteration   9: 312930.581 ops/s
Iteration  10: 294384.101 ops/s
Iteration  11: 303814.717 ops/s
Iteration  12: 312430.480 ops/s
Iteration  13: 300179.113 ops/s
Iteration  14: 311764.795 ops/s
Iteration  15: 289579.385 ops/s
Iteration  16: 299994.109 ops/s
Iteration  17: 311113.882 ops/s
Iteration  18: 304427.607 ops/s
Iteration  19: 313955.288 ops/s
Iteration  20: 302173.302 ops/s
Iteration  21: 311245.566 ops/s
Iteration  22: 298786.249 ops/s
Iteration  23: 310779.639 ops/s
Iteration  24: 313832.568 ops/s
Iteration  25: 287502.035 ops/s
Iteration  26: 312059.533 ops/s
Iteration  27: 301627.486 ops/s
Iteration  28: 318882.202 ops/s
Iteration  29: 303261.098 ops/s
Iteration  30: 303796.894 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableDebounceTest._Benchmark.benchmark_doubleOnSubscribeTime":
  304829.064 ±(99.9%) 5040.225 ops/s [Average]
  (min, avg, max) = (287502.035, 304829.064, 318882.202), stdev = 7543.972
  CI (99.9%): [299788.839, 309869.289] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score      Error  Units
ObservableDebounceTest._Benchmark.benchmark_doubleOnSubscribeTime  thrpt   30  304829.064 ± 5040.225  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_windowAbandonmentCancelsUpstreamExactTimeSkip$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_windowAbandonmentCancelsUpstreamExactTimeSkip

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 7332.421 ops/s
# Warmup Iteration   2: 28744.526 ops/s
# Warmup Iteration   3: 53613.470 ops/s
# Warmup Iteration   4: 92176.643 ops/s
# Warmup Iteration   5: 84246.681 ops/s
# Warmup Iteration   6: 86820.301 ops/s
# Warmup Iteration   7: 82632.549 ops/s
# Warmup Iteration   8: 81844.615 ops/s
# Warmup Iteration   9: 99382.298 ops/s
# Warmup Iteration  10: 84349.728 ops/s
# Warmup Iteration  11: 92286.008 ops/s
# Warmup Iteration  12: 71047.966 ops/s
# Warmup Iteration  13: 82429.978 ops/s
# Warmup Iteration  14: 88132.672 ops/s
# Warmup Iteration  15: 86368.094 ops/s
# Warmup Iteration  16: 83129.774 ops/s
# Warmup Iteration  17: 81983.747 ops/s
# Warmup Iteration  18: 91709.698 ops/s
# Warmup Iteration  19: 79530.431 ops/s
# Warmup Iteration  20: 83333.918 ops/s
# Warmup Iteration  21: 89398.605 ops/s
# Warmup Iteration  22: 87128.593 ops/s
# Warmup Iteration  23: 90483.503 ops/s
# Warmup Iteration  24: 84169.735 ops/s
# Warmup Iteration  25: 91478.422 ops/s
# Warmup Iteration  26: 88580.335 ops/s
# Warmup Iteration  27: 84324.821 ops/s
# Warmup Iteration  28: 86777.292 ops/s
# Warmup Iteration  29: 97724.586 ops/s
# Warmup Iteration  30: 91392.914 ops/s
Iteration   1: 85426.971 ops/s
Iteration   2: 87195.594 ops/s
Iteration   3: 83807.981 ops/s
Iteration   4: 77485.780 ops/s
Iteration   5: 75725.308 ops/s
Iteration   6: 82186.388 ops/s
Iteration   7: 94557.012 ops/s
Iteration   8: 82025.116 ops/s
Iteration   9: 80886.805 ops/s
Iteration  10: 77384.551 ops/s
Iteration  11: 82476.343 ops/s
Iteration  12: 87318.426 ops/s
Iteration  13: 88125.578 ops/s
Iteration  14: 89553.226 ops/s
Iteration  15: 94215.890 ops/s
Iteration  16: 92440.766 ops/s
Iteration  17: 85581.876 ops/s
Iteration  18: 80136.075 ops/s
Iteration  19: 89147.796 ops/s
Iteration  20: 82110.772 ops/s
Iteration  21: 84277.140 ops/s
Iteration  22: 89435.178 ops/s
Iteration  23: 89393.617 ops/s
Iteration  24: 85927.049 ops/s
Iteration  25: 89169.016 ops/s
Iteration  26: 82638.664 ops/s
Iteration  27: 90762.144 ops/s
Iteration  28: 94853.790 ops/s
Iteration  29: 91192.595 ops/s
Iteration  30: 94277.269 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_windowAbandonmentCancelsUpstreamExactTimeSkip":
  86323.824 ±(99.9%) 3573.145 ops/s [Average]
  (min, avg, max) = (75725.308, 86323.824, 94853.790), stdev = 5348.115
  CI (99.9%): [82750.679, 89896.969] (assumes normal distribution)


# Run complete. Total time: 00:01:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                       Mode  Cnt      Score      Error  Units
FlowableWindowWithTimeTest._Benchmark.benchmark_windowAbandonmentCancelsUpstreamExactTimeSkip  thrpt   30  86323.824 ± 3573.145  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapMaybeTest._Benchmark.benchmark_flatMapMaybeValueNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapMaybeTest._Benchmark.benchmark_flatMapMaybeValueNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 228595.146 ops/s
# Warmup Iteration   2: 514543.370 ops/s
# Warmup Iteration   3: 558298.507 ops/s
# Warmup Iteration   4: 521381.823 ops/s
# Warmup Iteration   5: 589604.434 ops/s
# Warmup Iteration   6: 489102.122 ops/s
# Warmup Iteration   7: 595941.938 ops/s
# Warmup Iteration   8: 585704.623 ops/s
# Warmup Iteration   9: 573087.563 ops/s
# Warmup Iteration  10: 597650.521 ops/s
# Warmup Iteration  11: 580549.567 ops/s
# Warmup Iteration  12: 597628.185 ops/s
# Warmup Iteration  13: 578523.465 ops/s
# Warmup Iteration  14: 457604.308 ops/s
# Warmup Iteration  15: 584923.271 ops/s
# Warmup Iteration  16: 581711.916 ops/s
# Warmup Iteration  17: 647600.827 ops/s
# Warmup Iteration  18: 591310.551 ops/s
# Warmup Iteration  19: 634671.669 ops/s
# Warmup Iteration  20: 603228.303 ops/s
# Warmup Iteration  21: 635749.583 ops/s
# Warmup Iteration  22: 628290.238 ops/s
# Warmup Iteration  23: 593655.009 ops/s
# Warmup Iteration  24: 601165.958 ops/s
# Warmup Iteration  25: 621177.141 ops/s
# Warmup Iteration  26: 613476.154 ops/s
# Warmup Iteration  27: 626952.761 ops/s
# Warmup Iteration  28: 595682.855 ops/s
# Warmup Iteration  29: 632690.498 ops/s
# Warmup Iteration  30: 602806.988 ops/s
Iteration   1: 629162.967 ops/s
Iteration   2: 625747.586 ops/s
Iteration   3: 603077.813 ops/s
Iteration   4: 607134.119 ops/s
Iteration   5: 616628.046 ops/s
Iteration   6: 632609.337 ops/s
Iteration   7: 597359.530 ops/s
Iteration   8: 617634.435 ops/s
Iteration   9: 628163.846 ops/s
Iteration  10: 627701.398 ops/s
Iteration  11: 613491.038 ops/s
Iteration  12: 625385.124 ops/s
Iteration  13: 589817.023 ops/s
Iteration  14: 632082.021 ops/s
Iteration  15: 610033.601 ops/s
Iteration  16: 617957.786 ops/s
Iteration  17: 615129.815 ops/s
Iteration  18: 608833.848 ops/s
Iteration  19: 611993.791 ops/s
Iteration  20: 606458.770 ops/s
Iteration  21: 612766.561 ops/s
Iteration  22: 613352.742 ops/s
Iteration  23: 607422.968 ops/s
Iteration  24: 602883.457 ops/s
Iteration  25: 601907.794 ops/s
Iteration  26: 601458.445 ops/s
Iteration  27: 611705.254 ops/s
Iteration  28: 640214.570 ops/s
Iteration  29: 607196.583 ops/s
Iteration  30: 602945.178 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleFlatMapMaybeTest._Benchmark.benchmark_flatMapMaybeValueNull":
  613941.848 ±(99.9%) 7906.280 ops/s [Average]
  (min, avg, max) = (589817.023, 613941.848, 640214.570), stdev = 11833.749
  CI (99.9%): [606035.568, 621848.129] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score      Error  Units
SingleFlatMapMaybeTest._Benchmark.benchmark_flatMapMaybeValueNull  thrpt   30  613941.848 ± 7906.280  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapMaybeTest._Benchmark.benchmark_flatMapMaybeValueErrorThrown$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapMaybeTest._Benchmark.benchmark_flatMapMaybeValueErrorThrown

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 153416.463 ops/s
# Warmup Iteration   2: 518289.067 ops/s
# Warmup Iteration   3: 532035.995 ops/s
# Warmup Iteration   4: 562020.086 ops/s
# Warmup Iteration   5: 565369.731 ops/s
# Warmup Iteration   6: 558034.430 ops/s
# Warmup Iteration   7: 578003.604 ops/s
# Warmup Iteration   8: 541120.097 ops/s
# Warmup Iteration   9: 574196.956 ops/s
# Warmup Iteration  10: 556205.915 ops/s
# Warmup Iteration  11: 554389.892 ops/s
# Warmup Iteration  12: 566268.484 ops/s
# Warmup Iteration  13: 546594.783 ops/s
# Warmup Iteration  14: 580565.801 ops/s
# Warmup Iteration  15: 566512.654 ops/s
# Warmup Iteration  16: 561608.857 ops/s
# Warmup Iteration  17: 585600.572 ops/s
# Warmup Iteration  18: 591337.209 ops/s
# Warmup Iteration  19: 605098.982 ops/s
# Warmup Iteration  20: 581818.790 ops/s
# Warmup Iteration  21: 602072.255 ops/s
# Warmup Iteration  22: 584366.343 ops/s
# Warmup Iteration  23: 606874.237 ops/s
# Warmup Iteration  24: 584562.588 ops/s
# Warmup Iteration  25: 577668.898 ops/s
# Warmup Iteration  26: 593992.813 ops/s
# Warmup Iteration  27: 571135.931 ops/s
# Warmup Iteration  28: 597853.714 ops/s
# Warmup Iteration  29: 578890.600 ops/s
# Warmup Iteration  30: 587036.212 ops/s
Iteration   1: 594678.970 ops/s
Iteration   2: 577752.430 ops/s
Iteration   3: 596176.154 ops/s
Iteration   4: 583999.998 ops/s
Iteration   5: 604405.442 ops/s
Iteration   6: 600076.883 ops/s
Iteration   7: 585368.028 ops/s
Iteration   8: 618196.192 ops/s
Iteration   9: 583926.924 ops/s
Iteration  10: 585981.965 ops/s
Iteration  11: 555274.669 ops/s
Iteration  12: 611705.013 ops/s
Iteration  13: 553845.045 ops/s
Iteration  14: 584912.085 ops/s
Iteration  15: 605717.419 ops/s
Iteration  16: 584003.567 ops/s
Iteration  17: 587420.512 ops/s
Iteration  18: 620575.844 ops/s
Iteration  19: 605150.939 ops/s
Iteration  20: 592593.486 ops/s
Iteration  21: 609283.744 ops/s
Iteration  22: 587977.039 ops/s
Iteration  23: 612466.629 ops/s
Iteration  24: 581176.817 ops/s
Iteration  25: 592593.701 ops/s
Iteration  26: 606969.126 ops/s
Iteration  27: 586571.831 ops/s
Iteration  28: 621274.234 ops/s
Iteration  29: 586235.590 ops/s
Iteration  30: 608298.781 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleFlatMapMaybeTest._Benchmark.benchmark_flatMapMaybeValueErrorThrown":
  594153.635 ±(99.9%) 11075.881 ops/s [Average]
  (min, avg, max) = (553845.045, 594153.635, 621274.234), stdev = 16577.859
  CI (99.9%): [583077.754, 605229.517] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score       Error  Units
SingleFlatMapMaybeTest._Benchmark.benchmark_flatMapMaybeValueErrorThrown  thrpt   30  594153.635 ± 11075.881  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleUsingTest._Benchmark.benchmark_resourceSupplierThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleUsingTest._Benchmark.benchmark_resourceSupplierThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 294532.542 ops/s
# Warmup Iteration   2: 570925.395 ops/s
# Warmup Iteration   3: 605318.189 ops/s
# Warmup Iteration   4: 605869.129 ops/s
# Warmup Iteration   5: 576898.621 ops/s
# Warmup Iteration   6: 616840.436 ops/s
# Warmup Iteration   7: 646192.219 ops/s
# Warmup Iteration   8: 657026.754 ops/s
# Warmup Iteration   9: 488372.832 ops/s
# Warmup Iteration  10: 647071.383 ops/s
# Warmup Iteration  11: 631830.133 ops/s
# Warmup Iteration  12: 660431.478 ops/s
# Warmup Iteration  13: 647938.236 ops/s
# Warmup Iteration  14: 632458.716 ops/s
# Warmup Iteration  15: 647497.113 ops/s
# Warmup Iteration  16: 630416.866 ops/s
# Warmup Iteration  17: 715521.776 ops/s
# Warmup Iteration  18: 673200.289 ops/s
# Warmup Iteration  19: 677619.987 ops/s
# Warmup Iteration  20: 692641.681 ops/s
# Warmup Iteration  21: 650149.004 ops/s
# Warmup Iteration  22: 703673.792 ops/s
# Warmup Iteration  23: 669331.349 ops/s
# Warmup Iteration  24: 680004.475 ops/s
# Warmup Iteration  25: 722641.663 ops/s
# Warmup Iteration  26: 661645.467 ops/s
# Warmup Iteration  27: 704007.921 ops/s
# Warmup Iteration  28: 706832.598 ops/s
# Warmup Iteration  29: 670514.633 ops/s
# Warmup Iteration  30: 693216.694 ops/s
Iteration   1: 675718.250 ops/s
Iteration   2: 693228.222 ops/s
Iteration   3: 701986.251 ops/s
Iteration   4: 655556.679 ops/s
Iteration   5: 707261.436 ops/s
Iteration   6: 663414.402 ops/s
Iteration   7: 682780.298 ops/s
Iteration   8: 695007.113 ops/s
Iteration   9: 662857.415 ops/s
Iteration  10: 705291.133 ops/s
Iteration  11: 677705.633 ops/s
Iteration  12: 652783.600 ops/s
Iteration  13: 681022.462 ops/s
Iteration  14: 657545.178 ops/s
Iteration  15: 662393.086 ops/s
Iteration  16: 679479.086 ops/s
Iteration  17: 668960.641 ops/s
Iteration  18: 698420.304 ops/s
Iteration  19: 660167.336 ops/s
Iteration  20: 670804.950 ops/s
Iteration  21: 696421.791 ops/s
Iteration  22: 661670.760 ops/s
Iteration  23: 696205.675 ops/s
Iteration  24: 663090.666 ops/s
Iteration  25: 671694.209 ops/s
Iteration  26: 710828.121 ops/s
Iteration  27: 713124.690 ops/s
Iteration  28: 661810.824 ops/s
Iteration  29: 676414.758 ops/s
Iteration  30: 677922.297 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleUsingTest._Benchmark.benchmark_resourceSupplierThrows":
  679385.576 ±(99.9%) 12134.963 ops/s [Average]
  (min, avg, max) = (652783.600, 679385.576, 713124.690), stdev = 18163.043
  CI (99.9%): [667250.613, 691520.538] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score       Error  Units
SingleUsingTest._Benchmark.benchmark_resourceSupplierThrows  thrpt   30  679385.576 ± 12134.963  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDelayTest._Benchmark.benchmark_delayedErrorOnError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDelayTest._Benchmark.benchmark_delayedErrorOnError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 90188.999 ops/s
# Warmup Iteration   2: 423029.772 ops/s
# Warmup Iteration   3: 539866.615 ops/s
# Warmup Iteration   4: 550077.192 ops/s
# Warmup Iteration   5: 572751.439 ops/s
# Warmup Iteration   6: 521891.886 ops/s
# Warmup Iteration   7: 529238.192 ops/s
# Warmup Iteration   8: 569823.512 ops/s
# Warmup Iteration   9: 553678.164 ops/s
# Warmup Iteration  10: 579710.975 ops/s
# Warmup Iteration  11: 543428.673 ops/s
# Warmup Iteration  12: 581128.794 ops/s
# Warmup Iteration  13: 535012.663 ops/s
# Warmup Iteration  14: 575316.652 ops/s
# Warmup Iteration  15: 555276.080 ops/s
# Warmup Iteration  16: 556799.441 ops/s
# Warmup Iteration  17: 594542.166 ops/s
# Warmup Iteration  18: 599234.938 ops/s
# Warmup Iteration  19: 588991.057 ops/s
# Warmup Iteration  20: 572530.204 ops/s
# Warmup Iteration  21: 603687.532 ops/s
# Warmup Iteration  22: 579949.553 ops/s
# Warmup Iteration  23: 586949.221 ops/s
# Warmup Iteration  24: 583510.344 ops/s
# Warmup Iteration  25: 596565.668 ops/s
# Warmup Iteration  26: 563795.358 ops/s
# Warmup Iteration  27: 581660.340 ops/s
# Warmup Iteration  28: 592007.418 ops/s
# Warmup Iteration  29: 578220.960 ops/s
# Warmup Iteration  30: 581368.925 ops/s
Iteration   1: 566281.788 ops/s
Iteration   2: 589380.460 ops/s
Iteration   3: 578058.834 ops/s
Iteration   4: 581581.159 ops/s
Iteration   5: 557269.891 ops/s
Iteration   6: 590810.082 ops/s
Iteration   7: 584503.891 ops/s
Iteration   8: 612341.324 ops/s
Iteration   9: 573572.334 ops/s
Iteration  10: 599955.154 ops/s
Iteration  11: 589237.276 ops/s
Iteration  12: 605542.463 ops/s
Iteration  13: 583632.020 ops/s
Iteration  14: 584347.597 ops/s
Iteration  15: 599476.437 ops/s
Iteration  16: 570118.103 ops/s
Iteration  17: 608841.728 ops/s
Iteration  18: 578156.655 ops/s
Iteration  19: 608983.288 ops/s
Iteration  20: 575927.710 ops/s
Iteration  21: 580541.299 ops/s
Iteration  22: 608089.339 ops/s
Iteration  23: 563000.497 ops/s
Iteration  24: 587066.228 ops/s
Iteration  25: 586352.990 ops/s
Iteration  26: 585653.927 ops/s
Iteration  27: 586783.462 ops/s
Iteration  28: 566703.132 ops/s
Iteration  29: 601517.011 ops/s
Iteration  30: 568677.842 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleDelayTest._Benchmark.benchmark_delayedErrorOnError":
  585746.797 ±(99.9%) 9912.966 ops/s [Average]
  (min, avg, max) = (557269.891, 585746.797, 612341.324), stdev = 14837.261
  CI (99.9%): [575833.832, 595659.763] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score      Error  Units
SingleDelayTest._Benchmark.benchmark_delayedErrorOnError  thrpt   30  585746.797 ± 9912.966  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDoOnTest._Benchmark.benchmark_doOnError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDoOnTest._Benchmark.benchmark_doOnError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 362230.876 ops/s
# Warmup Iteration   2: 623815.023 ops/s
# Warmup Iteration   3: 664425.737 ops/s
# Warmup Iteration   4: 529633.179 ops/s
# Warmup Iteration   5: 739482.499 ops/s
# Warmup Iteration   6: 706524.550 ops/s
# Warmup Iteration   7: 668680.781 ops/s
# Warmup Iteration   8: 731927.999 ops/s
# Warmup Iteration   9: 686224.679 ops/s
# Warmup Iteration  10: 738531.023 ops/s
# Warmup Iteration  11: 735228.707 ops/s
# Warmup Iteration  12: 729282.914 ops/s
# Warmup Iteration  13: 753852.862 ops/s
# Warmup Iteration  14: 732188.831 ops/s
# Warmup Iteration  15: 710496.745 ops/s
# Warmup Iteration  16: 746274.102 ops/s
# Warmup Iteration  17: 767009.795 ops/s
# Warmup Iteration  18: 780534.420 ops/s
# Warmup Iteration  19: 784023.686 ops/s
# Warmup Iteration  20: 785021.955 ops/s
# Warmup Iteration  21: 775395.933 ops/s
# Warmup Iteration  22: 775246.324 ops/s
# Warmup Iteration  23: 792990.981 ops/s
# Warmup Iteration  24: 762152.281 ops/s
# Warmup Iteration  25: 746408.747 ops/s
# Warmup Iteration  26: 783229.247 ops/s
# Warmup Iteration  27: 780260.483 ops/s
# Warmup Iteration  28: 780217.547 ops/s
# Warmup Iteration  29: 758245.320 ops/s
# Warmup Iteration  30: 785325.841 ops/s
Iteration   1: 781386.863 ops/s
Iteration   2: 760970.653 ops/s
Iteration   3: 771540.357 ops/s
Iteration   4: 745248.011 ops/s
Iteration   5: 804979.902 ops/s
Iteration   6: 771376.792 ops/s
Iteration   7: 799408.328 ops/s
Iteration   8: 767845.826 ops/s
Iteration   9: 781663.255 ops/s
Iteration  10: 773559.285 ops/s
Iteration  11: 764249.286 ops/s
Iteration  12: 765839.070 ops/s
Iteration  13: 780021.342 ops/s
Iteration  14: 797928.728 ops/s
Iteration  15: 773799.095 ops/s
Iteration  16: 777795.239 ops/s
Iteration  17: 777104.622 ops/s
Iteration  18: 792728.868 ops/s
Iteration  19: 758606.474 ops/s
Iteration  20: 791373.325 ops/s
Iteration  21: 752024.618 ops/s
Iteration  22: 786510.401 ops/s
Iteration  23: 783012.526 ops/s
Iteration  24: 766708.641 ops/s
Iteration  25: 753282.862 ops/s
Iteration  26: 760215.016 ops/s
Iteration  27: 784846.152 ops/s
Iteration  28: 758989.699 ops/s
Iteration  29: 768205.397 ops/s
Iteration  30: 765084.855 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleDoOnTest._Benchmark.benchmark_doOnError":
  773876.850 ±(99.9%) 9846.472 ops/s [Average]
  (min, avg, max) = (745248.011, 773876.850, 804979.902), stdev = 14737.737
  CI (99.9%): [764030.378, 783723.322] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt       Score      Error  Units
SingleDoOnTest._Benchmark.benchmark_doOnError  thrpt   30  773876.850 ± 9846.472  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleZipIterableTest._Benchmark.benchmark_emptyIterable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleZipIterableTest._Benchmark.benchmark_emptyIterable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 382540.929 ops/s
# Warmup Iteration   2: 556153.690 ops/s
# Warmup Iteration   3: 668880.621 ops/s
# Warmup Iteration   4: 624715.900 ops/s
# Warmup Iteration   5: 641097.540 ops/s
# Warmup Iteration   6: 627414.914 ops/s
# Warmup Iteration   7: 686020.145 ops/s
# Warmup Iteration   8: 709704.019 ops/s
# Warmup Iteration   9: 663201.065 ops/s
# Warmup Iteration  10: 682414.350 ops/s
# Warmup Iteration  11: 700567.002 ops/s
# Warmup Iteration  12: 664695.374 ops/s
# Warmup Iteration  13: 683969.937 ops/s
# Warmup Iteration  14: 704773.208 ops/s
# Warmup Iteration  15: 664676.886 ops/s
# Warmup Iteration  16: 690911.161 ops/s
# Warmup Iteration  17: 707365.069 ops/s
# Warmup Iteration  18: 725429.630 ops/s
# Warmup Iteration  19: 704692.988 ops/s
# Warmup Iteration  20: 737772.200 ops/s
# Warmup Iteration  21: 718854.434 ops/s
# Warmup Iteration  22: 713318.863 ops/s
# Warmup Iteration  23: 714658.164 ops/s
# Warmup Iteration  24: 684641.310 ops/s
# Warmup Iteration  25: 712333.247 ops/s
# Warmup Iteration  26: 734980.105 ops/s
# Warmup Iteration  27: 679806.761 ops/s
# Warmup Iteration  28: 731557.272 ops/s
# Warmup Iteration  29: 713340.120 ops/s
# Warmup Iteration  30: 747791.531 ops/s
Iteration   1: 723958.369 ops/s
Iteration   2: 695476.873 ops/s
Iteration   3: 750751.039 ops/s
Iteration   4: 698016.926 ops/s
Iteration   5: 712719.610 ops/s
Iteration   6: 700310.592 ops/s
Iteration   7: 730213.206 ops/s
Iteration   8: 730105.739 ops/s
Iteration   9: 685803.006 ops/s
Iteration  10: 729711.525 ops/s
Iteration  11: 707074.182 ops/s
Iteration  12: 704195.326 ops/s
Iteration  13: 728423.577 ops/s
Iteration  14: 705831.303 ops/s
Iteration  15: 721570.692 ops/s
Iteration  16: 704586.775 ops/s
Iteration  17: 718390.403 ops/s
Iteration  18: 736201.357 ops/s
Iteration  19: 702018.296 ops/s
Iteration  20: 732999.385 ops/s
Iteration  21: 715328.959 ops/s
Iteration  22: 724084.005 ops/s
Iteration  23: 704725.215 ops/s
Iteration  24: 735440.589 ops/s
Iteration  25: 730723.440 ops/s
Iteration  26: 706469.243 ops/s
Iteration  27: 747920.947 ops/s
Iteration  28: 749808.144 ops/s
Iteration  29: 696129.902 ops/s
Iteration  30: 733940.016 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleZipIterableTest._Benchmark.benchmark_emptyIterable":
  718764.288 ±(99.9%) 11663.146 ops/s [Average]
  (min, avg, max) = (685803.006, 718764.288, 750751.039), stdev = 17456.849
  CI (99.9%): [707101.142, 730427.434] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score       Error  Units
SingleZipIterableTest._Benchmark.benchmark_emptyIterable  thrpt   30  718764.288 ± 11663.146  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleContainstTest._Benchmark.benchmark_error$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleContainstTest._Benchmark.benchmark_error

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 258213.457 ops/s
# Warmup Iteration   2: 596802.488 ops/s
# Warmup Iteration   3: 679287.833 ops/s
# Warmup Iteration   4: 684373.711 ops/s
# Warmup Iteration   5: 630486.562 ops/s
# Warmup Iteration   6: 695540.589 ops/s
# Warmup Iteration   7: 755724.166 ops/s
# Warmup Iteration   8: 699869.046 ops/s
# Warmup Iteration   9: 713608.562 ops/s
# Warmup Iteration  10: 738644.758 ops/s
# Warmup Iteration  11: 725961.771 ops/s
# Warmup Iteration  12: 684008.875 ops/s
# Warmup Iteration  13: 741148.158 ops/s
# Warmup Iteration  14: 699366.435 ops/s
# Warmup Iteration  15: 731329.866 ops/s
# Warmup Iteration  16: 720297.393 ops/s
# Warmup Iteration  17: 745688.307 ops/s
# Warmup Iteration  18: 763228.377 ops/s
# Warmup Iteration  19: 770631.663 ops/s
# Warmup Iteration  20: 786976.814 ops/s
# Warmup Iteration  21: 754554.113 ops/s
# Warmup Iteration  22: 738496.315 ops/s
# Warmup Iteration  23: 774033.290 ops/s
# Warmup Iteration  24: 763587.648 ops/s
# Warmup Iteration  25: 738332.289 ops/s
# Warmup Iteration  26: 746246.908 ops/s
# Warmup Iteration  27: 758890.209 ops/s
# Warmup Iteration  28: 762879.423 ops/s
# Warmup Iteration  29: 742548.107 ops/s
# Warmup Iteration  30: 755298.351 ops/s
Iteration   1: 777839.773 ops/s
Iteration   2: 747682.633 ops/s
Iteration   3: 780981.168 ops/s
Iteration   4: 792076.768 ops/s
Iteration   5: 737393.858 ops/s
Iteration   6: 789514.484 ops/s
Iteration   7: 760550.018 ops/s
Iteration   8: 751248.151 ops/s
Iteration   9: 760201.916 ops/s
Iteration  10: 775766.664 ops/s
Iteration  11: 791703.434 ops/s
Iteration  12: 787360.300 ops/s
Iteration  13: 765994.223 ops/s
Iteration  14: 731958.376 ops/s
Iteration  15: 770593.612 ops/s
Iteration  16: 760976.451 ops/s
Iteration  17: 767648.035 ops/s
Iteration  18: 784282.965 ops/s
Iteration  19: 746951.219 ops/s
Iteration  20: 799136.921 ops/s
Iteration  21: 753832.276 ops/s
Iteration  22: 789810.263 ops/s
Iteration  23: 748057.784 ops/s
Iteration  24: 780413.908 ops/s
Iteration  25: 757222.740 ops/s
Iteration  26: 758211.926 ops/s
Iteration  27: 797320.748 ops/s
Iteration  28: 774358.986 ops/s
Iteration  29: 742676.872 ops/s
Iteration  30: 783950.489 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleContainstTest._Benchmark.benchmark_error":
  768857.232 ±(99.9%) 12592.611 ops/s [Average]
  (min, avg, max) = (731958.376, 768857.232, 799136.921), stdev = 18848.028
  CI (99.9%): [756264.621, 781449.843] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt       Score       Error  Units
SingleContainstTest._Benchmark.benchmark_error  thrpt   30  768857.232 ± 12592.611  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleUsingTest._Benchmark.benchmark_errorNonEager$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleUsingTest._Benchmark.benchmark_errorNonEager

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 231210.506 ops/s
# Warmup Iteration   2: 580361.640 ops/s
# Warmup Iteration   3: 558306.162 ops/s
# Warmup Iteration   4: 716095.034 ops/s
# Warmup Iteration   5: 689079.358 ops/s
# Warmup Iteration   6: 698189.878 ops/s
# Warmup Iteration   7: 624191.007 ops/s
# Warmup Iteration   8: 657368.269 ops/s
# Warmup Iteration   9: 724410.512 ops/s
# Warmup Iteration  10: 683196.110 ops/s
# Warmup Iteration  11: 697197.485 ops/s
# Warmup Iteration  12: 685858.132 ops/s
# Warmup Iteration  13: 698481.321 ops/s
# Warmup Iteration  14: 727188.709 ops/s
# Warmup Iteration  15: 685654.318 ops/s
# Warmup Iteration  16: 715638.999 ops/s
# Warmup Iteration  17: 715734.933 ops/s
# Warmup Iteration  18: 740644.451 ops/s
# Warmup Iteration  19: 732361.639 ops/s
# Warmup Iteration  20: 720501.403 ops/s
# Warmup Iteration  21: 757589.501 ops/s
# Warmup Iteration  22: 741047.127 ops/s
# Warmup Iteration  23: 729500.760 ops/s
# Warmup Iteration  24: 757371.703 ops/s
# Warmup Iteration  25: 753827.945 ops/s
# Warmup Iteration  26: 717360.952 ops/s
# Warmup Iteration  27: 727945.655 ops/s
# Warmup Iteration  28: 739929.318 ops/s
# Warmup Iteration  29: 722964.771 ops/s
# Warmup Iteration  30: 738245.259 ops/s
Iteration   1: 755268.380 ops/s
Iteration   2: 754657.854 ops/s
Iteration   3: 716398.411 ops/s
Iteration   4: 761269.555 ops/s
Iteration   5: 720137.745 ops/s
Iteration   6: 739452.109 ops/s
Iteration   7: 733392.926 ops/s
Iteration   8: 731841.702 ops/s
Iteration   9: 780475.475 ops/s
Iteration  10: 725808.639 ops/s
Iteration  11: 749811.448 ops/s
Iteration  12: 731150.913 ops/s
Iteration  13: 727929.262 ops/s
Iteration  14: 749033.212 ops/s
Iteration  15: 730461.591 ops/s
Iteration  16: 729069.189 ops/s
Iteration  17: 776992.600 ops/s
Iteration  18: 716349.737 ops/s
Iteration  19: 770586.231 ops/s
Iteration  20: 713247.284 ops/s
Iteration  21: 740289.211 ops/s
Iteration  22: 764007.477 ops/s
Iteration  23: 707217.312 ops/s
Iteration  24: 770456.785 ops/s
Iteration  25: 589154.172 ops/s
Iteration  26: 730702.800 ops/s
Iteration  27: 705221.171 ops/s
Iteration  28: 743619.975 ops/s
Iteration  29: 718509.051 ops/s
Iteration  30: 718678.151 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleUsingTest._Benchmark.benchmark_errorNonEager":
  733373.012 ±(99.9%) 22955.375 ops/s [Average]
  (min, avg, max) = (589154.172, 733373.012, 780475.475), stdev = 34358.527
  CI (99.9%): [710417.637, 756328.387] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score       Error  Units
SingleUsingTest._Benchmark.benchmark_errorNonEager  thrpt   30  733373.012 ± 22955.375  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDoOnTerminateTest._Benchmark.benchmark_doOnTerminateErrorCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDoOnTerminateTest._Benchmark.benchmark_doOnTerminateErrorCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 49707.979 ops/s
# Warmup Iteration   2: 170703.304 ops/s
# Warmup Iteration   3: 176530.946 ops/s
# Warmup Iteration   4: 177560.989 ops/s
# Warmup Iteration   5: 207822.892 ops/s
# Warmup Iteration   6: 173773.886 ops/s
# Warmup Iteration   7: 197968.402 ops/s
# Warmup Iteration   8: 202935.241 ops/s
# Warmup Iteration   9: 196853.556 ops/s
# Warmup Iteration  10: 203766.868 ops/s
# Warmup Iteration  11: 209679.762 ops/s
# Warmup Iteration  12: 198825.983 ops/s
# Warmup Iteration  13: 201102.209 ops/s
# Warmup Iteration  14: 200280.523 ops/s
# Warmup Iteration  15: 209021.952 ops/s
# Warmup Iteration  16: 196398.671 ops/s
# Warmup Iteration  17: 209121.158 ops/s
# Warmup Iteration  18: 219403.456 ops/s
# Warmup Iteration  19: 205385.252 ops/s
# Warmup Iteration  20: 216317.755 ops/s
# Warmup Iteration  21: 206432.581 ops/s
# Warmup Iteration  22: 208996.922 ops/s
# Warmup Iteration  23: 218051.073 ops/s
# Warmup Iteration  24: 201572.561 ops/s
# Warmup Iteration  25: 218380.274 ops/s
# Warmup Iteration  26: 207122.855 ops/s
# Warmup Iteration  27: 209429.066 ops/s
# Warmup Iteration  28: 209453.151 ops/s
# Warmup Iteration  29: 208240.400 ops/s
# Warmup Iteration  30: 215475.794 ops/s
Iteration   1: 218923.705 ops/s
Iteration   2: 202319.700 ops/s
Iteration   3: 211331.791 ops/s
Iteration   4: 202330.561 ops/s
Iteration   5: 213155.728 ops/s
Iteration   6: 204913.663 ops/s
Iteration   7: 208502.810 ops/s
Iteration   8: 214872.018 ops/s
Iteration   9: 209092.699 ops/s
Iteration  10: 212729.190 ops/s
Iteration  11: 211237.506 ops/s
Iteration  12: 215784.339 ops/s
Iteration  13: 208148.713 ops/s
Iteration  14: 205699.547 ops/s
Iteration  15: 213201.100 ops/s
Iteration  16: 208880.219 ops/s
Iteration  17: 208274.625 ops/s
Iteration  18: 215890.746 ops/s
Iteration  19: 211182.827 ops/s
Iteration  20: 214889.485 ops/s
Iteration  21: 206063.028 ops/s
Iteration  22: 211328.868 ops/s
Iteration  23: 207872.822 ops/s
Iteration  24: 215691.016 ops/s
Iteration  25: 209887.674 ops/s
Iteration  26: 204538.238 ops/s
Iteration  27: 217033.821 ops/s
Iteration  28: 207503.219 ops/s
Iteration  29: 213996.153 ops/s
Iteration  30: 221035.754 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleDoOnTerminateTest._Benchmark.benchmark_doOnTerminateErrorCrash":
  210877.052 ±(99.9%) 3175.444 ops/s [Average]
  (min, avg, max) = (202319.700, 210877.052, 221035.754), stdev = 4752.856
  CI (99.9%): [207701.608, 214052.496] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score      Error  Units
SingleDoOnTerminateTest._Benchmark.benchmark_doOnTerminateErrorCrash  thrpt   30  210877.052 ± 3175.444  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmptySingleTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmptySingleTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 132226.478 ops/s
# Warmup Iteration   2: 411365.622 ops/s
# Warmup Iteration   3: 487906.734 ops/s
# Warmup Iteration   4: 457834.321 ops/s
# Warmup Iteration   5: 540766.357 ops/s
# Warmup Iteration   6: 501838.182 ops/s
# Warmup Iteration   7: 534781.100 ops/s
# Warmup Iteration   8: 512617.383 ops/s
# Warmup Iteration   9: 504592.327 ops/s
# Warmup Iteration  10: 526550.136 ops/s
# Warmup Iteration  11: 499630.553 ops/s
# Warmup Iteration  12: 530529.782 ops/s
# Warmup Iteration  13: 504922.493 ops/s
# Warmup Iteration  14: 520684.795 ops/s
# Warmup Iteration  15: 508644.740 ops/s
# Warmup Iteration  16: 494024.763 ops/s
# Warmup Iteration  17: 552420.872 ops/s
# Warmup Iteration  18: 523151.965 ops/s
# Warmup Iteration  19: 556283.369 ops/s
# Warmup Iteration  20: 518030.452 ops/s
# Warmup Iteration  21: 534443.658 ops/s
# Warmup Iteration  22: 530026.967 ops/s
# Warmup Iteration  23: 523070.536 ops/s
# Warmup Iteration  24: 533632.031 ops/s
# Warmup Iteration  25: 507830.164 ops/s
# Warmup Iteration  26: 527355.646 ops/s
# Warmup Iteration  27: 557571.338 ops/s
# Warmup Iteration  28: 512292.527 ops/s
# Warmup Iteration  29: 564856.587 ops/s
# Warmup Iteration  30: 536649.364 ops/s
Iteration   1: 540085.381 ops/s
Iteration   2: 535111.373 ops/s
Iteration   3: 539207.587 ops/s
Iteration   4: 540331.753 ops/s
Iteration   5: 529506.970 ops/s
Iteration   6: 537958.763 ops/s
Iteration   7: 549537.985 ops/s
Iteration   8: 525769.106 ops/s
Iteration   9: 556692.746 ops/s
Iteration  10: 524038.294 ops/s
Iteration  11: 547256.883 ops/s
Iteration  12: 523008.729 ops/s
Iteration  13: 544173.952 ops/s
Iteration  14: 543545.826 ops/s
Iteration  15: 552130.052 ops/s
Iteration  16: 520736.218 ops/s
Iteration  17: 564167.804 ops/s
Iteration  18: 541308.673 ops/s
Iteration  19: 528565.949 ops/s
Iteration  20: 462572.661 ops/s
Iteration  21: 515869.976 ops/s
Iteration  22: 556518.769 ops/s
Iteration  23: 542953.021 ops/s
Iteration  24: 536682.770 ops/s
Iteration  25: 548462.715 ops/s
Iteration  26: 540289.555 ops/s
Iteration  27: 551392.530 ops/s
Iteration  28: 523375.008 ops/s
Iteration  29: 560944.429 ops/s
Iteration  30: 564900.859 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmptySingleTest._Benchmark.benchmark_doubleOnSubscribe":
  538236.545 ±(99.9%) 12943.963 ops/s [Average]
  (min, avg, max) = (462572.661, 538236.545, 564900.859), stdev = 19373.915
  CI (99.9%): [525292.582, 551180.507] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score       Error  Units
MaybeSwitchIfEmptySingleTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  538236.545 ± 12943.963  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDoOnTest._Benchmark.benchmark_doOnEventThrowsError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDoOnTest._Benchmark.benchmark_doOnEventThrowsError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 56656.926 ops/s
# Warmup Iteration   2: 177011.385 ops/s
# Warmup Iteration   3: 171041.578 ops/s
# Warmup Iteration   4: 185855.732 ops/s
# Warmup Iteration   5: 196399.896 ops/s
# Warmup Iteration   6: 171227.797 ops/s
# Warmup Iteration   7: 204955.453 ops/s
# Warmup Iteration   8: 190336.579 ops/s
# Warmup Iteration   9: 202028.590 ops/s
# Warmup Iteration  10: 194590.017 ops/s
# Warmup Iteration  11: 192568.974 ops/s
# Warmup Iteration  12: 209195.223 ops/s
# Warmup Iteration  13: 191451.844 ops/s
# Warmup Iteration  14: 207414.716 ops/s
# Warmup Iteration  15: 197243.405 ops/s
# Warmup Iteration  16: 190942.041 ops/s
# Warmup Iteration  17: 213049.228 ops/s
# Warmup Iteration  18: 205110.393 ops/s
# Warmup Iteration  19: 214834.609 ops/s
# Warmup Iteration  20: 214878.275 ops/s
# Warmup Iteration  21: 198849.193 ops/s
# Warmup Iteration  22: 209549.971 ops/s
# Warmup Iteration  23: 205166.485 ops/s
# Warmup Iteration  24: 209016.860 ops/s
# Warmup Iteration  25: 211125.623 ops/s
# Warmup Iteration  26: 212351.039 ops/s
# Warmup Iteration  27: 197932.032 ops/s
# Warmup Iteration  28: 212434.646 ops/s
# Warmup Iteration  29: 215466.627 ops/s
# Warmup Iteration  30: 199186.975 ops/s
Iteration   1: 213588.751 ops/s
Iteration   2: 202568.764 ops/s
Iteration   3: 201919.342 ops/s
Iteration   4: 209072.417 ops/s
Iteration   5: 206671.841 ops/s
Iteration   6: 205285.483 ops/s
Iteration   7: 216554.292 ops/s
Iteration   8: 203706.215 ops/s
Iteration   9: 205537.720 ops/s
Iteration  10: 206437.926 ops/s
Iteration  11: 208901.461 ops/s
Iteration  12: 205256.552 ops/s
Iteration  13: 214707.910 ops/s
Iteration  14: 204796.381 ops/s
Iteration  15: 206656.386 ops/s
Iteration  16: 207551.480 ops/s
Iteration  17: 208312.747 ops/s
Iteration  18: 204387.450 ops/s
Iteration  19: 211104.049 ops/s
Iteration  20: 212142.558 ops/s
Iteration  21: 211339.959 ops/s
Iteration  22: 208404.249 ops/s
Iteration  23: 201944.904 ops/s
Iteration  24: 211766.179 ops/s
Iteration  25: 204955.938 ops/s
Iteration  26: 205395.237 ops/s
Iteration  27: 206821.397 ops/s
Iteration  28: 203198.666 ops/s
Iteration  29: 214457.636 ops/s
Iteration  30: 209047.325 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleDoOnTest._Benchmark.benchmark_doOnEventThrowsError":
  207749.707 ±(99.9%) 2652.891 ops/s [Average]
  (min, avg, max) = (201919.342, 207749.707, 216554.292), stdev = 3970.723
  CI (99.9%): [205096.816, 210402.598] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score      Error  Units
SingleDoOnTest._Benchmark.benchmark_doOnEventThrowsError  thrpt   30  207749.707 ± 2652.891  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleBlockingSubscribeTest._Benchmark.benchmark_noArgError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleBlockingSubscribeTest._Benchmark.benchmark_noArgError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 99248.072 ops/s
# Warmup Iteration   2: 201827.021 ops/s
# Warmup Iteration   3: 263133.450 ops/s
# Warmup Iteration   4: 250922.036 ops/s
# Warmup Iteration   5: 258928.518 ops/s
# Warmup Iteration   6: 253083.636 ops/s
# Warmup Iteration   7: 243562.829 ops/s
# Warmup Iteration   8: 270781.618 ops/s
# Warmup Iteration   9: 253204.951 ops/s
# Warmup Iteration  10: 249403.214 ops/s
# Warmup Iteration  11: 269764.528 ops/s
# Warmup Iteration  12: 252632.789 ops/s
# Warmup Iteration  13: 263661.179 ops/s
# Warmup Iteration  14: 268411.031 ops/s
# Warmup Iteration  15: 253646.091 ops/s
# Warmup Iteration  16: 263072.836 ops/s
# Warmup Iteration  17: 270858.097 ops/s
# Warmup Iteration  18: 273485.355 ops/s
# Warmup Iteration  19: 262569.269 ops/s
# Warmup Iteration  20: 266943.326 ops/s
# Warmup Iteration  21: 269624.546 ops/s
# Warmup Iteration  22: 271431.272 ops/s
# Warmup Iteration  23: 270914.512 ops/s
# Warmup Iteration  24: 276783.107 ops/s
# Warmup Iteration  25: 279954.435 ops/s
# Warmup Iteration  26: 277548.716 ops/s
# Warmup Iteration  27: 267527.899 ops/s
# Warmup Iteration  28: 275102.677 ops/s
# Warmup Iteration  29: 259693.803 ops/s
# Warmup Iteration  30: 273358.687 ops/s
Iteration   1: 258898.307 ops/s
Iteration   2: 272347.098 ops/s
Iteration   3: 277791.702 ops/s
Iteration   4: 262038.002 ops/s
Iteration   5: 273454.357 ops/s
Iteration   6: 259873.341 ops/s
Iteration   7: 271887.304 ops/s
Iteration   8: 263700.988 ops/s
Iteration   9: 277280.636 ops/s
Iteration  10: 266863.551 ops/s
Iteration  11: 265539.017 ops/s
Iteration  12: 273685.427 ops/s
Iteration  13: 270672.206 ops/s
Iteration  14: 274421.005 ops/s
Iteration  15: 226368.161 ops/s
Iteration  16: 259404.058 ops/s
Iteration  17: 279971.066 ops/s
Iteration  18: 265098.531 ops/s
Iteration  19: 289124.318 ops/s
Iteration  20: 257603.597 ops/s
Iteration  21: 273053.707 ops/s
Iteration  22: 268737.117 ops/s
Iteration  23: 284056.961 ops/s
Iteration  24: 270285.146 ops/s
Iteration  25: 267951.884 ops/s
Iteration  26: 273852.993 ops/s
Iteration  27: 269864.842 ops/s
Iteration  28: 270093.725 ops/s
Iteration  29: 252794.269 ops/s
Iteration  30: 274776.442 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleBlockingSubscribeTest._Benchmark.benchmark_noArgError":
  268382.992 ±(99.9%) 7499.397 ops/s [Average]
  (min, avg, max) = (226368.161, 268382.992, 289124.318), stdev = 11224.745
  CI (99.9%): [260883.595, 275882.388] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
SingleBlockingSubscribeTest._Benchmark.benchmark_noArgError  thrpt   30  268382.992 ± 7499.397  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleOnErrorCompleteTest._Benchmark.benchmark_errorPredicateCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleOnErrorCompleteTest._Benchmark.benchmark_errorPredicateCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 31041.295 ops/s
# Warmup Iteration   2: 148027.671 ops/s
# Warmup Iteration   3: 174392.425 ops/s
# Warmup Iteration   4: 198251.763 ops/s
# Warmup Iteration   5: 195348.968 ops/s
# Warmup Iteration   6: 183892.848 ops/s
# Warmup Iteration   7: 204912.024 ops/s
# Warmup Iteration   8: 204116.426 ops/s
# Warmup Iteration   9: 198065.139 ops/s
# Warmup Iteration  10: 193749.687 ops/s
# Warmup Iteration  11: 191488.002 ops/s
# Warmup Iteration  12: 188753.941 ops/s
# Warmup Iteration  13: 195967.957 ops/s
# Warmup Iteration  14: 195597.401 ops/s
# Warmup Iteration  15: 183441.540 ops/s
# Warmup Iteration  16: 190827.695 ops/s
# Warmup Iteration  17: 196649.537 ops/s
# Warmup Iteration  18: 199265.114 ops/s
# Warmup Iteration  19: 186809.623 ops/s
# Warmup Iteration  20: 190879.821 ops/s
# Warmup Iteration  21: 201615.107 ops/s
# Warmup Iteration  22: 199870.200 ops/s
# Warmup Iteration  23: 205551.323 ops/s
# Warmup Iteration  24: 193390.030 ops/s
# Warmup Iteration  25: 191380.774 ops/s
# Warmup Iteration  26: 206054.889 ops/s
# Warmup Iteration  27: 207395.925 ops/s
# Warmup Iteration  28: 200267.629 ops/s
# Warmup Iteration  29: 200126.892 ops/s
# Warmup Iteration  30: 199602.638 ops/s
Iteration   1: 199726.489 ops/s
Iteration   2: 197678.177 ops/s
Iteration   3: 202747.905 ops/s
Iteration   4: 205128.064 ops/s
Iteration   5: 191023.711 ops/s
Iteration   6: 203814.140 ops/s
Iteration   7: 207510.161 ops/s
Iteration   8: 192748.768 ops/s
Iteration   9: 198467.227 ops/s
Iteration  10: 199535.673 ops/s
Iteration  11: 195795.891 ops/s
Iteration  12: 200159.178 ops/s
Iteration  13: 195384.980 ops/s
Iteration  14: 200190.474 ops/s
Iteration  15: 195610.346 ops/s
Iteration  16: 200682.641 ops/s
Iteration  17: 199933.530 ops/s
Iteration  18: 194906.651 ops/s
Iteration  19: 204421.977 ops/s
Iteration  20: 195393.587 ops/s
Iteration  21: 201936.968 ops/s
Iteration  22: 203800.779 ops/s
Iteration  23: 194313.448 ops/s
Iteration  24: 200962.256 ops/s
Iteration  25: 198629.147 ops/s
Iteration  26: 199076.873 ops/s
Iteration  27: 199493.479 ops/s
Iteration  28: 194170.475 ops/s
Iteration  29: 205036.219 ops/s
Iteration  30: 197502.452 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleOnErrorCompleteTest._Benchmark.benchmark_errorPredicateCrash":
  199192.722 ±(99.9%) 2695.261 ops/s [Average]
  (min, avg, max) = (191023.711, 199192.722, 207510.161), stdev = 4034.140
  CI (99.9%): [196497.461, 201887.983] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score      Error  Units
SingleOnErrorCompleteTest._Benchmark.benchmark_errorPredicateCrash  thrpt   30  199192.722 ± 2695.261  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_singleFilterThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_singleFilterThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 181695.461 ops/s
# Warmup Iteration   2: 494138.266 ops/s
# Warmup Iteration   3: 517249.335 ops/s
# Warmup Iteration   4: 508393.629 ops/s
# Warmup Iteration   5: 522091.098 ops/s
# Warmup Iteration   6: 525106.086 ops/s
# Warmup Iteration   7: 557847.202 ops/s
# Warmup Iteration   8: 498271.847 ops/s
# Warmup Iteration   9: 548634.803 ops/s
# Warmup Iteration  10: 554976.809 ops/s
# Warmup Iteration  11: 549419.223 ops/s
# Warmup Iteration  12: 535723.543 ops/s
# Warmup Iteration  13: 557653.023 ops/s
# Warmup Iteration  14: 548277.344 ops/s
# Warmup Iteration  15: 547686.369 ops/s
# Warmup Iteration  16: 580979.428 ops/s
# Warmup Iteration  17: 586956.865 ops/s
# Warmup Iteration  18: 560587.316 ops/s
# Warmup Iteration  19: 601618.317 ops/s
# Warmup Iteration  20: 594359.178 ops/s
# Warmup Iteration  21: 576613.761 ops/s
# Warmup Iteration  22: 573493.961 ops/s
# Warmup Iteration  23: 571956.258 ops/s
# Warmup Iteration  24: 590847.717 ops/s
# Warmup Iteration  25: 562048.317 ops/s
# Warmup Iteration  26: 584219.460 ops/s
# Warmup Iteration  27: 581394.902 ops/s
# Warmup Iteration  28: 553436.258 ops/s
# Warmup Iteration  29: 599625.426 ops/s
# Warmup Iteration  30: 552377.919 ops/s
Iteration   1: 585505.030 ops/s
Iteration   2: 561007.406 ops/s
Iteration   3: 573237.258 ops/s
Iteration   4: 576383.155 ops/s
Iteration   5: 575653.600 ops/s
Iteration   6: 566504.270 ops/s
Iteration   7: 564732.950 ops/s
Iteration   8: 599475.325 ops/s
Iteration   9: 551029.388 ops/s
Iteration  10: 418825.917 ops/s
Iteration  11: 567760.557 ops/s
Iteration  12: 579202.803 ops/s
Iteration  13: 605004.910 ops/s
Iteration  14: 558711.821 ops/s
Iteration  15: 566942.035 ops/s
Iteration  16: 578995.937 ops/s
Iteration  17: 580557.500 ops/s
Iteration  18: 585702.246 ops/s
Iteration  19: 572044.182 ops/s
Iteration  20: 567494.515 ops/s
Iteration  21: 593101.823 ops/s
Iteration  22: 577001.502 ops/s
Iteration  23: 580988.545 ops/s
Iteration  24: 565541.421 ops/s
Iteration  25: 588955.022 ops/s
Iteration  26: 574657.727 ops/s
Iteration  27: 565133.927 ops/s
Iteration  28: 584008.265 ops/s
Iteration  29: 562318.375 ops/s
Iteration  30: 582721.493 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_singleFilterThrows":
  570306.630 ±(99.9%) 20749.069 ops/s [Average]
  (min, avg, max) = (418825.917, 570306.630, 605004.910), stdev = 31056.232
  CI (99.9%): [549557.561, 591055.699] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt       Score       Error  Units
MaybeTest._Benchmark.benchmark_singleFilterThrows  thrpt   30  570306.630 ± 20749.069  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTimerTest._Benchmark.benchmark_withMultipleStaggeredSubscribers$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTimerTest._Benchmark.benchmark_withMultipleStaggeredSubscribers

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.698 ops/s
# Warmup Iteration   2: 17328.780 ops/s
# Warmup Iteration   3: 89531.607 ops/s
# Warmup Iteration   4: 120923.274 ops/s
# Warmup Iteration   5: 284359.171 ops/s
# Warmup Iteration   6: 303492.406 ops/s
# Warmup Iteration   7: 314846.053 ops/s
# Warmup Iteration   8: 312435.615 ops/s
# Warmup Iteration   9: 306662.090 ops/s
# Warmup Iteration  10: 315185.310 ops/s
# Warmup Iteration  11: 290534.869 ops/s
# Warmup Iteration  12: 288390.847 ops/s
# Warmup Iteration  13: 326080.528 ops/s
# Warmup Iteration  14: 313697.336 ops/s
# Warmup Iteration  15: 321859.956 ops/s
# Warmup Iteration  16: 318560.767 ops/s
# Warmup Iteration  17: 313675.841 ops/s
# Warmup Iteration  18: 320281.975 ops/s
# Warmup Iteration  19: 314762.024 ops/s
# Warmup Iteration  20: 320883.964 ops/s
# Warmup Iteration  21: 308881.664 ops/s
# Warmup Iteration  22: 320285.353 ops/s
# Warmup Iteration  23: 315868.078 ops/s
# Warmup Iteration  24: 322139.617 ops/s
# Warmup Iteration  25: 308987.586 ops/s
# Warmup Iteration  26: 323995.973 ops/s
# Warmup Iteration  27: 317312.985 ops/s
# Warmup Iteration  28: 315035.658 ops/s
# Warmup Iteration  29: 318959.472 ops/s
# Warmup Iteration  30: 314001.063 ops/s
Iteration   1: 326693.238 ops/s
Iteration   2: 319433.499 ops/s
Iteration   3: 313034.553 ops/s
Iteration   4: 323595.924 ops/s
Iteration   5: 310651.218 ops/s
Iteration   6: 328473.670 ops/s
Iteration   7: 321745.929 ops/s
Iteration   8: 313886.437 ops/s
Iteration   9: 332731.626 ops/s
Iteration  10: 315671.153 ops/s
Iteration  11: 321298.749 ops/s
Iteration  12: 314864.210 ops/s
Iteration  13: 315414.766 ops/s
Iteration  14: 311838.975 ops/s
Iteration  15: 317109.333 ops/s
Iteration  16: 320117.461 ops/s
Iteration  17: 323890.507 ops/s
Iteration  18: 318219.182 ops/s
Iteration  19: 322965.252 ops/s
Iteration  20: 321951.730 ops/s
Iteration  21: 311167.470 ops/s
Iteration  22: 328067.919 ops/s
Iteration  23: 309487.560 ops/s
Iteration  24: 326702.581 ops/s
Iteration  25: 313392.209 ops/s
Iteration  26: 323610.784 ops/s
Iteration  27: 323265.676 ops/s
Iteration  28: 315697.393 ops/s
Iteration  29: 315805.076 ops/s
Iteration  30: 314961.280 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableTimerTest._Benchmark.benchmark_withMultipleStaggeredSubscribers":
  319191.512 ±(99.9%) 4019.783 ops/s [Average]
  (min, avg, max) = (309487.560, 319191.512, 332731.626), stdev = 6016.622
  CI (99.9%): [315171.729, 323211.295] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score      Error  Units
ObservableTimerTest._Benchmark.benchmark_withMultipleStaggeredSubscribers  thrpt   30  319191.512 ± 4019.783  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservablePublishTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservablePublishTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 94666.371 ops/s
# Warmup Iteration   2: 427494.930 ops/s
# Warmup Iteration   3: 493762.418 ops/s
# Warmup Iteration   4: 492259.052 ops/s
# Warmup Iteration   5: 511827.765 ops/s
# Warmup Iteration   6: 506405.608 ops/s
# Warmup Iteration   7: 478597.185 ops/s
# Warmup Iteration   8: 500057.102 ops/s
# Warmup Iteration   9: 485611.145 ops/s
# Warmup Iteration  10: 490058.969 ops/s
# Warmup Iteration  11: 484405.868 ops/s
# Warmup Iteration  12: 515983.951 ops/s
# Warmup Iteration  13: 480767.867 ops/s
# Warmup Iteration  14: 517206.925 ops/s
# Warmup Iteration  15: 487513.848 ops/s
# Warmup Iteration  16: 500240.218 ops/s
# Warmup Iteration  17: 515867.322 ops/s
# Warmup Iteration  18: 524539.610 ops/s
# Warmup Iteration  19: 515923.765 ops/s
# Warmup Iteration  20: 500422.858 ops/s
# Warmup Iteration  21: 513732.821 ops/s
# Warmup Iteration  22: 527660.507 ops/s
# Warmup Iteration  23: 511589.323 ops/s
# Warmup Iteration  24: 534403.079 ops/s
# Warmup Iteration  25: 514500.427 ops/s
# Warmup Iteration  26: 521714.812 ops/s
# Warmup Iteration  27: 514209.008 ops/s
# Warmup Iteration  28: 530273.296 ops/s
# Warmup Iteration  29: 525535.910 ops/s
# Warmup Iteration  30: 526018.171 ops/s
Iteration   1: 544499.725 ops/s
Iteration   2: 502578.692 ops/s
Iteration   3: 538345.446 ops/s
Iteration   4: 421448.896 ops/s
Iteration   5: 521884.874 ops/s
Iteration   6: 519732.606 ops/s
Iteration   7: 524760.675 ops/s
Iteration   8: 483702.805 ops/s
Iteration   9: 539324.331 ops/s
Iteration  10: 472069.914 ops/s
Iteration  11: 536040.821 ops/s
Iteration  12: 512633.458 ops/s
Iteration  13: 526574.179 ops/s
Iteration  14: 541920.289 ops/s
Iteration  15: 511389.961 ops/s
Iteration  16: 544465.632 ops/s
Iteration  17: 504784.029 ops/s
Iteration  18: 527661.855 ops/s
Iteration  19: 538004.402 ops/s
Iteration  20: 508407.196 ops/s
Iteration  21: 523252.212 ops/s
Iteration  22: 512882.758 ops/s
Iteration  23: 526653.584 ops/s
Iteration  24: 515124.620 ops/s
Iteration  25: 526180.483 ops/s
Iteration  26: 527128.966 ops/s
Iteration  27: 524656.708 ops/s
Iteration  28: 517916.701 ops/s
Iteration  29: 518465.208 ops/s
Iteration  30: 534676.854 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservablePublishTest._Benchmark.benchmark_doubleOnSubscribe":
  518238.929 ±(99.9%) 16455.834 ops/s [Average]
  (min, avg, max) = (421448.896, 518238.929, 544499.725), stdev = 24630.320
  CI (99.9%): [501783.095, 534694.764] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score       Error  Units
ObservablePublishTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  518238.929 ± 16455.834  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTimerTest._Benchmark.benchmark_withMultipleSubscribersStartingAtSameTime$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTimerTest._Benchmark.benchmark_withMultipleSubscribersStartingAtSameTime

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.786 ops/s
# Warmup Iteration   2: 23287.276 ops/s
# Warmup Iteration   3: 54984.199 ops/s
# Warmup Iteration   4: 92305.621 ops/s
# Warmup Iteration   5: 109755.308 ops/s
# Warmup Iteration   6: 187331.257 ops/s
# Warmup Iteration   7: 307956.268 ops/s
# Warmup Iteration   8: 305675.257 ops/s
# Warmup Iteration   9: 289463.201 ops/s
# Warmup Iteration  10: 329913.374 ops/s
# Warmup Iteration  11: 338443.194 ops/s
# Warmup Iteration  12: 313159.353 ops/s
# Warmup Iteration  13: 323981.099 ops/s
# Warmup Iteration  14: 330376.207 ops/s
# Warmup Iteration  15: 317269.056 ops/s
# Warmup Iteration  16: 327863.661 ops/s
# Warmup Iteration  17: 325836.455 ops/s
# Warmup Iteration  18: 332216.912 ops/s
# Warmup Iteration  19: 331689.260 ops/s
# Warmup Iteration  20: 325287.095 ops/s
# Warmup Iteration  21: 325193.542 ops/s
# Warmup Iteration  22: 326289.969 ops/s
# Warmup Iteration  23: 326764.525 ops/s
# Warmup Iteration  24: 327626.540 ops/s
# Warmup Iteration  25: 320407.505 ops/s
# Warmup Iteration  26: 336202.905 ops/s
# Warmup Iteration  27: 333341.119 ops/s
# Warmup Iteration  28: 311702.955 ops/s
# Warmup Iteration  29: 340530.662 ops/s
# Warmup Iteration  30: 322123.283 ops/s
Iteration   1: 335815.175 ops/s
Iteration   2: 323635.947 ops/s
Iteration   3: 334324.958 ops/s
Iteration   4: 322797.424 ops/s
Iteration   5: 324841.838 ops/s
Iteration   6: 341582.766 ops/s
Iteration   7: 316714.506 ops/s
Iteration   8: 329539.783 ops/s
Iteration   9: 325271.016 ops/s
Iteration  10: 330891.391 ops/s
Iteration  11: 313838.149 ops/s
Iteration  12: 320087.318 ops/s
Iteration  13: 320015.297 ops/s
Iteration  14: 318221.473 ops/s
Iteration  15: 334219.029 ops/s
Iteration  16: 319406.355 ops/s
Iteration  17: 326229.076 ops/s
Iteration  18: 323536.976 ops/s
Iteration  19: 323026.575 ops/s
Iteration  20: 338261.369 ops/s
Iteration  21: 319016.085 ops/s
Iteration  22: 335609.918 ops/s
Iteration  23: 325398.536 ops/s
Iteration  24: 333188.888 ops/s
Iteration  25: 322042.212 ops/s
Iteration  26: 320931.855 ops/s
Iteration  27: 314367.311 ops/s
Iteration  28: 321325.109 ops/s
Iteration  29: 340679.449 ops/s
Iteration  30: 342295.719 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableTimerTest._Benchmark.benchmark_withMultipleSubscribersStartingAtSameTime":
  326570.383 ±(99.9%) 5502.901 ops/s [Average]
  (min, avg, max) = (313838.149, 326570.383, 342295.719), stdev = 8236.484
  CI (99.9%): [321067.483, 332073.284] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            Mode  Cnt       Score      Error  Units
ObservableTimerTest._Benchmark.benchmark_withMultipleSubscribersStartingAtSameTime  thrpt   30  326570.383 ± 5502.901  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDoOnTest._Benchmark.benchmark_doOnSubscribeErrorCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDoOnTest._Benchmark.benchmark_doOnSubscribeErrorCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 39763.767 ops/s
# Warmup Iteration   2: 143092.978 ops/s
# Warmup Iteration   3: 174138.118 ops/s
# Warmup Iteration   4: 168563.463 ops/s
# Warmup Iteration   5: 180433.564 ops/s
# Warmup Iteration   6: 170497.086 ops/s
# Warmup Iteration   7: 172700.184 ops/s
# Warmup Iteration   8: 170374.563 ops/s
# Warmup Iteration   9: 170744.279 ops/s
# Warmup Iteration  10: 178777.299 ops/s
# Warmup Iteration  11: 172859.942 ops/s
# Warmup Iteration  12: 169082.981 ops/s
# Warmup Iteration  13: 172200.075 ops/s
# Warmup Iteration  14: 177510.802 ops/s
# Warmup Iteration  15: 174149.761 ops/s
# Warmup Iteration  16: 175217.137 ops/s
# Warmup Iteration  17: 171061.811 ops/s
# Warmup Iteration  18: 171709.700 ops/s
# Warmup Iteration  19: 179772.593 ops/s
# Warmup Iteration  20: 169816.294 ops/s
# Warmup Iteration  21: 175602.758 ops/s
# Warmup Iteration  22: 170427.963 ops/s
# Warmup Iteration  23: 177672.291 ops/s
# Warmup Iteration  24: 171166.669 ops/s
# Warmup Iteration  25: 168336.433 ops/s
# Warmup Iteration  26: 178751.974 ops/s
# Warmup Iteration  27: 173402.950 ops/s
# Warmup Iteration  28: 172877.695 ops/s
# Warmup Iteration  29: 142992.096 ops/s
# Warmup Iteration  30: 176115.524 ops/s
Iteration   1: 179759.026 ops/s
Iteration   2: 169209.259 ops/s
Iteration   3: 177545.947 ops/s
Iteration   4: 170507.060 ops/s
Iteration   5: 169727.580 ops/s
Iteration   6: 180713.478 ops/s
Iteration   7: 167271.467 ops/s
Iteration   8: 174582.457 ops/s
Iteration   9: 170627.712 ops/s
Iteration  10: 174925.744 ops/s
Iteration  11: 170331.235 ops/s
Iteration  12: 168022.324 ops/s
Iteration  13: 178031.779 ops/s
Iteration  14: 166953.243 ops/s
Iteration  15: 168958.810 ops/s
Iteration  16: 174482.691 ops/s
Iteration  17: 171828.121 ops/s
Iteration  18: 176083.307 ops/s
Iteration  19: 173315.201 ops/s
Iteration  20: 178229.948 ops/s
Iteration  21: 168078.741 ops/s
Iteration  22: 181410.062 ops/s
Iteration  23: 177307.147 ops/s
Iteration  24: 180848.689 ops/s
Iteration  25: 169780.133 ops/s
Iteration  26: 176712.565 ops/s
Iteration  27: 174063.322 ops/s
Iteration  28: 169143.127 ops/s
Iteration  29: 173029.889 ops/s
Iteration  30: 176964.127 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleDoOnTest._Benchmark.benchmark_doOnSubscribeErrorCrash":
  173614.806 ±(99.9%) 2967.407 ops/s [Average]
  (min, avg, max) = (166953.243, 173614.806, 181410.062), stdev = 4441.475
  CI (99.9%): [170647.400, 176582.213] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
SingleDoOnTest._Benchmark.benchmark_doOnSubscribeErrorCrash  thrpt   30  173614.806 ± 2967.407  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_emptyToSingle$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_emptyToSingle

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 227707.107 ops/s
# Warmup Iteration   2: 556663.092 ops/s
# Warmup Iteration   3: 625513.963 ops/s
# Warmup Iteration   4: 601359.250 ops/s
# Warmup Iteration   5: 607194.701 ops/s
# Warmup Iteration   6: 588262.472 ops/s
# Warmup Iteration   7: 680960.829 ops/s
# Warmup Iteration   8: 635330.415 ops/s
# Warmup Iteration   9: 675968.751 ops/s
# Warmup Iteration  10: 662640.744 ops/s
# Warmup Iteration  11: 665260.681 ops/s
# Warmup Iteration  12: 646139.521 ops/s
# Warmup Iteration  13: 675501.877 ops/s
# Warmup Iteration  14: 642265.412 ops/s
# Warmup Iteration  15: 669745.618 ops/s
# Warmup Iteration  16: 646079.622 ops/s
# Warmup Iteration  17: 701262.871 ops/s
# Warmup Iteration  18: 682872.556 ops/s
# Warmup Iteration  19: 681023.016 ops/s
# Warmup Iteration  20: 704588.109 ops/s
# Warmup Iteration  21: 679833.277 ops/s
# Warmup Iteration  22: 679165.796 ops/s
# Warmup Iteration  23: 716338.093 ops/s
# Warmup Iteration  24: 676211.705 ops/s
# Warmup Iteration  25: 643397.093 ops/s
# Warmup Iteration  26: 713178.883 ops/s
# Warmup Iteration  27: 686297.546 ops/s
# Warmup Iteration  28: 678045.655 ops/s
# Warmup Iteration  29: 674414.586 ops/s
# Warmup Iteration  30: 704777.605 ops/s
Iteration   1: 677038.520 ops/s
Iteration   2: 686518.003 ops/s
Iteration   3: 707298.700 ops/s
Iteration   4: 683936.924 ops/s
Iteration   5: 688719.358 ops/s
Iteration   6: 687523.580 ops/s
Iteration   7: 700251.927 ops/s
Iteration   8: 668303.691 ops/s
Iteration   9: 683104.670 ops/s
Iteration  10: 693878.172 ops/s
Iteration  11: 675890.372 ops/s
Iteration  12: 682313.352 ops/s
Iteration  13: 677971.708 ops/s
Iteration  14: 673152.427 ops/s
Iteration  15: 686713.738 ops/s
Iteration  16: 697301.169 ops/s
Iteration  17: 659839.106 ops/s
Iteration  18: 681894.509 ops/s
Iteration  19: 694799.209 ops/s
Iteration  20: 651932.882 ops/s
Iteration  21: 695600.470 ops/s
Iteration  22: 672242.853 ops/s
Iteration  23: 706331.653 ops/s
Iteration  24: 672122.436 ops/s
Iteration  25: 711857.808 ops/s
Iteration  26: 687350.850 ops/s
Iteration  27: 696256.546 ops/s
Iteration  28: 683624.343 ops/s
Iteration  29: 709302.685 ops/s
Iteration  30: 668918.176 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_emptyToSingle":
  685399.661 ±(99.9%) 9642.336 ops/s [Average]
  (min, avg, max) = (651932.882, 685399.661, 711857.808), stdev = 14432.196
  CI (99.9%): [675757.325, 695041.998] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt       Score      Error  Units
MaybeTest._Benchmark.benchmark_emptyToSingle  thrpt   30  685399.661 ± 9642.336  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeTest._Benchmark.benchmark_badRequest$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeTest._Benchmark.benchmark_badRequest

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 53162.313 ops/s
# Warmup Iteration   2: 195073.239 ops/s
# Warmup Iteration   3: 195483.133 ops/s
# Warmup Iteration   4: 240652.275 ops/s
# Warmup Iteration   5: 214695.507 ops/s
# Warmup Iteration   6: 239389.704 ops/s
# Warmup Iteration   7: 232207.370 ops/s
# Warmup Iteration   8: 246278.248 ops/s
# Warmup Iteration   9: 244376.282 ops/s
# Warmup Iteration  10: 243999.443 ops/s
# Warmup Iteration  11: 243450.740 ops/s
# Warmup Iteration  12: 240971.452 ops/s
# Warmup Iteration  13: 252362.477 ops/s
# Warmup Iteration  14: 232908.494 ops/s
# Warmup Iteration  15: 245579.405 ops/s
# Warmup Iteration  16: 244546.441 ops/s
# Warmup Iteration  17: 243386.373 ops/s
# Warmup Iteration  18: 260019.080 ops/s
# Warmup Iteration  19: 252602.769 ops/s
# Warmup Iteration  20: 251568.547 ops/s
# Warmup Iteration  21: 258175.229 ops/s
# Warmup Iteration  22: 248671.254 ops/s
# Warmup Iteration  23: 193144.755 ops/s
# Warmup Iteration  24: 248293.500 ops/s
# Warmup Iteration  25: 249565.603 ops/s
# Warmup Iteration  26: 251635.692 ops/s
# Warmup Iteration  27: 258121.597 ops/s
# Warmup Iteration  28: 249492.684 ops/s
# Warmup Iteration  29: 249663.838 ops/s
# Warmup Iteration  30: 242858.859 ops/s
Iteration   1: 257342.655 ops/s
Iteration   2: 254283.469 ops/s
Iteration   3: 240723.753 ops/s
Iteration   4: 248055.632 ops/s
Iteration   5: 259432.322 ops/s
Iteration   6: 255025.434 ops/s
Iteration   7: 256743.037 ops/s
Iteration   8: 245818.747 ops/s
Iteration   9: 249199.536 ops/s
Iteration  10: 259418.448 ops/s
Iteration  11: 247047.415 ops/s
Iteration  12: 246686.836 ops/s
Iteration  13: 254807.071 ops/s
Iteration  14: 251103.468 ops/s
Iteration  15: 258961.968 ops/s
Iteration  16: 247145.025 ops/s
Iteration  17: 253443.947 ops/s
Iteration  18: 247757.818 ops/s
Iteration  19: 250662.398 ops/s
Iteration  20: 261284.338 ops/s
Iteration  21: 240930.164 ops/s
Iteration  22: 265250.056 ops/s
Iteration  23: 255016.354 ops/s
Iteration  24: 255738.950 ops/s
Iteration  25: 253841.899 ops/s
Iteration  26: 249096.638 ops/s
Iteration  27: 255253.507 ops/s
Iteration  28: 244960.095 ops/s
Iteration  29: 261765.047 ops/s
Iteration  30: 241680.100 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeTest._Benchmark.benchmark_badRequest":
  252282.538 ±(99.9%) 4295.256 ops/s [Average]
  (min, avg, max) = (240723.753, 252282.538, 265250.056), stdev = 6428.937
  CI (99.9%): [247987.282, 256577.793] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt       Score      Error  Units
FlowableRangeTest._Benchmark.benchmark_badRequest  thrpt   30  252282.538 ± 4295.256  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchOnNextTest._Benchmark.benchmark_normalDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchOnNextTest._Benchmark.benchmark_normalDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 106975.925 ops/s
# Warmup Iteration   2: 489891.860 ops/s
# Warmup Iteration   3: 786934.422 ops/s
# Warmup Iteration   4: 897538.960 ops/s
# Warmup Iteration   5: 815567.157 ops/s
# Warmup Iteration   6: 922631.850 ops/s
# Warmup Iteration   7: 969044.864 ops/s
# Warmup Iteration   8: 944835.422 ops/s
# Warmup Iteration   9: 946918.117 ops/s
# Warmup Iteration  10: 924089.681 ops/s
# Warmup Iteration  11: 917643.930 ops/s
# Warmup Iteration  12: 961840.830 ops/s
# Warmup Iteration  13: 945141.549 ops/s
# Warmup Iteration  14: 989945.420 ops/s
# Warmup Iteration  15: 916303.435 ops/s
# Warmup Iteration  16: 921432.916 ops/s
# Warmup Iteration  17: 941493.709 ops/s
# Warmup Iteration  18: 920869.163 ops/s
# Warmup Iteration  19: 976024.314 ops/s
# Warmup Iteration  20: 883720.343 ops/s
# Warmup Iteration  21: 961047.050 ops/s
# Warmup Iteration  22: 941007.285 ops/s
# Warmup Iteration  23: 912790.918 ops/s
# Warmup Iteration  24: 924278.881 ops/s
# Warmup Iteration  25: 953768.723 ops/s
# Warmup Iteration  26: 890359.125 ops/s
# Warmup Iteration  27: 934935.140 ops/s
# Warmup Iteration  28: 966772.680 ops/s
# Warmup Iteration  29: 892806.566 ops/s
# Warmup Iteration  30: 948209.410 ops/s
Iteration   1: 948057.699 ops/s
Iteration   2: 887903.888 ops/s
Iteration   3: 936811.007 ops/s
Iteration   4: 939295.181 ops/s
Iteration   5: 887047.032 ops/s
Iteration   6: 935940.734 ops/s
Iteration   7: 933573.638 ops/s
Iteration   8: 943675.724 ops/s
Iteration   9: 960086.642 ops/s
Iteration  10: 902420.859 ops/s
Iteration  11: 967185.879 ops/s
Iteration  12: 933598.060 ops/s
Iteration  13: 937512.270 ops/s
Iteration  14: 933901.869 ops/s
Iteration  15: 953125.510 ops/s
Iteration  16: 925630.765 ops/s
Iteration  17: 990176.566 ops/s
Iteration  18: 928518.524 ops/s
Iteration  19: 943028.030 ops/s
Iteration  20: 936502.621 ops/s
Iteration  21: 937484.844 ops/s
Iteration  22: 913894.639 ops/s
Iteration  23: 956511.246 ops/s
Iteration  24: 960696.944 ops/s
Iteration  25: 903709.083 ops/s
Iteration  26: 945059.016 ops/s
Iteration  27: 919900.815 ops/s
Iteration  28: 948229.394 ops/s
Iteration  29: 971093.533 ops/s
Iteration  30: 923718.871 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchOnNextTest._Benchmark.benchmark_normalDelayError":
  936809.696 ±(99.9%) 15437.717 ops/s [Average]
  (min, avg, max) = (887047.032, 936809.696, 990176.566), stdev = 23106.450
  CI (99.9%): [921371.979, 952247.413] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score       Error  Units
MaybeSwitchOnNextTest._Benchmark.benchmark_normalDelayError  thrpt   30  936809.696 ± 15437.717  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchOnNextTest._Benchmark.benchmark_normal$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchOnNextTest._Benchmark.benchmark_normal

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 158771.663 ops/s
# Warmup Iteration   2: 735704.033 ops/s
# Warmup Iteration   3: 845347.854 ops/s
# Warmup Iteration   4: 777461.548 ops/s
# Warmup Iteration   5: 964353.170 ops/s
# Warmup Iteration   6: 898462.210 ops/s
# Warmup Iteration   7: 932883.868 ops/s
# Warmup Iteration   8: 938262.843 ops/s
# Warmup Iteration   9: 939516.177 ops/s
# Warmup Iteration  10: 938475.495 ops/s
# Warmup Iteration  11: 887968.187 ops/s
# Warmup Iteration  12: 935959.560 ops/s
# Warmup Iteration  13: 907193.046 ops/s
# Warmup Iteration  14: 937485.737 ops/s
# Warmup Iteration  15: 989079.432 ops/s
# Warmup Iteration  16: 907633.508 ops/s
# Warmup Iteration  17: 968217.749 ops/s
# Warmup Iteration  18: 741153.963 ops/s
# Warmup Iteration  19: 909803.189 ops/s
# Warmup Iteration  20: 956492.558 ops/s
# Warmup Iteration  21: 901792.342 ops/s
# Warmup Iteration  22: 929311.232 ops/s
# Warmup Iteration  23: 931206.560 ops/s
# Warmup Iteration  24: 884995.636 ops/s
# Warmup Iteration  25: 950380.899 ops/s
# Warmup Iteration  26: 904373.129 ops/s
# Warmup Iteration  27: 944249.742 ops/s
# Warmup Iteration  28: 929797.643 ops/s
# Warmup Iteration  29: 926610.734 ops/s
# Warmup Iteration  30: 992816.579 ops/s
Iteration   1: 903713.052 ops/s
Iteration   2: 970096.784 ops/s
Iteration   3: 908959.568 ops/s
Iteration   4: 912987.119 ops/s
Iteration   5: 977320.072 ops/s
Iteration   6: 923940.928 ops/s
Iteration   7: 976126.462 ops/s
Iteration   8: 912827.154 ops/s
Iteration   9: 916146.663 ops/s
Iteration  10: 950050.235 ops/s
Iteration  11: 902257.847 ops/s
Iteration  12: 949540.838 ops/s
Iteration  13: 893899.587 ops/s
Iteration  14: 898918.453 ops/s
Iteration  15: 937743.292 ops/s
Iteration  16: 934631.081 ops/s
Iteration  17: 897744.796 ops/s
Iteration  18: 955897.855 ops/s
Iteration  19: 933657.981 ops/s
Iteration  20: 905590.165 ops/s
Iteration  21: 954786.790 ops/s
Iteration  22: 957077.342 ops/s
Iteration  23: 893651.321 ops/s
Iteration  24: 953983.917 ops/s
Iteration  25: 911617.983 ops/s
Iteration  26: 950272.121 ops/s
Iteration  27: 911943.766 ops/s
Iteration  28: 913035.974 ops/s
Iteration  29: 951707.832 ops/s
Iteration  30: 894332.678 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchOnNextTest._Benchmark.benchmark_normal":
  928481.988 ±(99.9%) 17731.691 ops/s [Average]
  (min, avg, max) = (893651.321, 928481.988, 977320.072), stdev = 26539.963
  CI (99.9%): [910750.297, 946213.680] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt       Score       Error  Units
MaybeSwitchOnNextTest._Benchmark.benchmark_normal  thrpt   30  928481.988 ± 17731.691  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFilterTest._Benchmark.benchmark_conditionalNone2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFilterTest._Benchmark.benchmark_conditionalNone2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1277829.355 ops/s
# Warmup Iteration   2: 3391536.403 ops/s
# Warmup Iteration   3: 4469554.432 ops/s
# Warmup Iteration   4: 4570236.104 ops/s
# Warmup Iteration   5: 4708074.663 ops/s
# Warmup Iteration   6: 4608306.329 ops/s
# Warmup Iteration   7: 4441271.246 ops/s
# Warmup Iteration   8: 4880070.994 ops/s
# Warmup Iteration   9: 4495694.650 ops/s
# Warmup Iteration  10: 4730107.087 ops/s
# Warmup Iteration  11: 4610416.301 ops/s
# Warmup Iteration  12: 4647576.619 ops/s
# Warmup Iteration  13: 4847348.879 ops/s
# Warmup Iteration  14: 4517113.280 ops/s
# Warmup Iteration  15: 4585586.432 ops/s
# Warmup Iteration  16: 4780916.526 ops/s
# Warmup Iteration  17: 4508495.724 ops/s
# Warmup Iteration  18: 4800513.958 ops/s
# Warmup Iteration  19: 4623648.430 ops/s
# Warmup Iteration  20: 4678501.517 ops/s
# Warmup Iteration  21: 4881197.904 ops/s
# Warmup Iteration  22: 4584060.088 ops/s
# Warmup Iteration  23: 4598210.336 ops/s
# Warmup Iteration  24: 4796738.367 ops/s
# Warmup Iteration  25: 4562375.285 ops/s
# Warmup Iteration  26: 4634773.952 ops/s
# Warmup Iteration  27: 4745106.077 ops/s
# Warmup Iteration  28: 4634996.265 ops/s
# Warmup Iteration  29: 4838387.004 ops/s
# Warmup Iteration  30: 4843838.838 ops/s
Iteration   1: 4579689.856 ops/s
Iteration   2: 4688740.913 ops/s
Iteration   3: 4592271.629 ops/s
Iteration   4: 4674657.610 ops/s
Iteration   5: 4805835.056 ops/s
Iteration   6: 4596912.650 ops/s
Iteration   7: 4770639.154 ops/s
Iteration   8: 4626950.390 ops/s
Iteration   9: 4787058.866 ops/s
Iteration  10: 4598002.566 ops/s
Iteration  11: 4851064.300 ops/s
Iteration  12: 4883592.502 ops/s
Iteration  13: 4601794.469 ops/s
Iteration  14: 4377387.334 ops/s
Iteration  15: 4674921.441 ops/s
Iteration  16: 4680654.735 ops/s
Iteration  17: 4667610.020 ops/s
Iteration  18: 4794989.864 ops/s
Iteration  19: 4666030.812 ops/s
Iteration  20: 4721600.125 ops/s
Iteration  21: 4588259.286 ops/s
Iteration  22: 4651927.669 ops/s
Iteration  23: 4673544.198 ops/s
Iteration  24: 4655609.054 ops/s
Iteration  25: 4542469.386 ops/s
Iteration  26: 4558337.055 ops/s
Iteration  27: 4806602.048 ops/s
Iteration  28: 4670251.692 ops/s
Iteration  29: 4741567.806 ops/s
Iteration  30: 4742666.154 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFilterTest._Benchmark.benchmark_conditionalNone2":
  4675721.288 ±(99.9%) 70225.519 ops/s [Average]
  (min, avg, max) = (4377387.334, 4675721.288, 4883592.502), stdev = 105110.258
  CI (99.9%): [4605495.769, 4745946.807] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
FlowableFilterTest._Benchmark.benchmark_conditionalNone2  thrpt   30  4675721.288 ± 70225.519  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFilterTest._Benchmark.benchmark_doesntRequestOnItsOwn$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFilterTest._Benchmark.benchmark_doesntRequestOnItsOwn

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 511389.801 ops/s
# Warmup Iteration   2: 1809958.976 ops/s
# Warmup Iteration   3: 2395463.511 ops/s
# Warmup Iteration   4: 2361642.551 ops/s
# Warmup Iteration   5: 2464155.316 ops/s
# Warmup Iteration   6: 2394024.653 ops/s
# Warmup Iteration   7: 2343248.736 ops/s
# Warmup Iteration   8: 2449484.016 ops/s
# Warmup Iteration   9: 2407815.742 ops/s
# Warmup Iteration  10: 2060897.952 ops/s
# Warmup Iteration  11: 2396840.937 ops/s
# Warmup Iteration  12: 2333766.059 ops/s
# Warmup Iteration  13: 1955967.236 ops/s
# Warmup Iteration  14: 2524970.193 ops/s
# Warmup Iteration  15: 2371394.562 ops/s
# Warmup Iteration  16: 2444574.423 ops/s
# Warmup Iteration  17: 2486673.505 ops/s
# Warmup Iteration  18: 2355978.535 ops/s
# Warmup Iteration  19: 2447718.793 ops/s
# Warmup Iteration  20: 2349172.670 ops/s
# Warmup Iteration  21: 2441575.644 ops/s
# Warmup Iteration  22: 2437446.195 ops/s
# Warmup Iteration  23: 2340197.490 ops/s
# Warmup Iteration  24: 2438458.116 ops/s
# Warmup Iteration  25: 2432342.781 ops/s
# Warmup Iteration  26: 2420025.406 ops/s
# Warmup Iteration  27: 2488539.904 ops/s
# Warmup Iteration  28: 2370008.230 ops/s
# Warmup Iteration  29: 2526226.215 ops/s
# Warmup Iteration  30: 2443203.126 ops/s
Iteration   1: 2501290.646 ops/s
Iteration   2: 2393059.869 ops/s
Iteration   3: 2327770.715 ops/s
Iteration   4: 2487589.425 ops/s
Iteration   5: 2453583.740 ops/s
Iteration   6: 2357329.358 ops/s
Iteration   7: 2548907.465 ops/s
Iteration   8: 2500807.273 ops/s
Iteration   9: 2375486.619 ops/s
Iteration  10: 2485095.700 ops/s
Iteration  11: 2417591.097 ops/s
Iteration  12: 2423163.305 ops/s
Iteration  13: 2445766.208 ops/s
Iteration  14: 2434322.457 ops/s
Iteration  15: 2475863.533 ops/s
Iteration  16: 2403585.327 ops/s
Iteration  17: 2415628.215 ops/s
Iteration  18: 2330763.074 ops/s
Iteration  19: 2399573.646 ops/s
Iteration  20: 2497288.807 ops/s
Iteration  21: 2392579.256 ops/s
Iteration  22: 2505252.777 ops/s
Iteration  23: 2427029.968 ops/s
Iteration  24: 2512682.949 ops/s
Iteration  25: 2480086.719 ops/s
Iteration  26: 2379697.889 ops/s
Iteration  27: 2451848.922 ops/s
Iteration  28: 2419399.573 ops/s
Iteration  29: 2485717.919 ops/s
Iteration  30: 2379238.399 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFilterTest._Benchmark.benchmark_doesntRequestOnItsOwn":
  2436933.362 ±(99.9%) 37990.178 ops/s [Average]
  (min, avg, max) = (2327770.715, 2436933.362, 2548907.465), stdev = 56861.915
  CI (99.9%): [2398943.183, 2474923.540] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
FlowableFilterTest._Benchmark.benchmark_doesntRequestOnItsOwn  thrpt   30  2436933.362 ± 37990.178  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategyTest._Benchmark.benchmark_badRequest$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategyTest._Benchmark.benchmark_badRequest

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 85310.647 ops/s
# Warmup Iteration   2: 336414.788 ops/s
# Warmup Iteration   3: 426164.408 ops/s
# Warmup Iteration   4: 411389.136 ops/s
# Warmup Iteration   5: 494171.269 ops/s
# Warmup Iteration   6: 473457.433 ops/s
# Warmup Iteration   7: 494663.824 ops/s
# Warmup Iteration   8: 472782.263 ops/s
# Warmup Iteration   9: 479203.980 ops/s
# Warmup Iteration  10: 475582.133 ops/s
# Warmup Iteration  11: 474905.600 ops/s
# Warmup Iteration  12: 486778.539 ops/s
# Warmup Iteration  13: 485258.599 ops/s
# Warmup Iteration  14: 484850.895 ops/s
# Warmup Iteration  15: 467977.681 ops/s
# Warmup Iteration  16: 489279.257 ops/s
# Warmup Iteration  17: 492856.446 ops/s
# Warmup Iteration  18: 474730.724 ops/s
# Warmup Iteration  19: 513625.985 ops/s
# Warmup Iteration  20: 486619.914 ops/s
# Warmup Iteration  21: 499295.426 ops/s
# Warmup Iteration  22: 508988.668 ops/s
# Warmup Iteration  23: 485899.472 ops/s
# Warmup Iteration  24: 499696.390 ops/s
# Warmup Iteration  25: 498650.220 ops/s
# Warmup Iteration  26: 499783.881 ops/s
# Warmup Iteration  27: 503600.016 ops/s
# Warmup Iteration  28: 497717.871 ops/s
# Warmup Iteration  29: 521820.605 ops/s
# Warmup Iteration  30: 516858.940 ops/s
Iteration   1: 492529.244 ops/s
Iteration   2: 498430.442 ops/s
Iteration   3: 511239.380 ops/s
Iteration   4: 494415.231 ops/s
Iteration   5: 481470.914 ops/s
Iteration   6: 497255.397 ops/s
Iteration   7: 493783.244 ops/s
Iteration   8: 512243.235 ops/s
Iteration   9: 473846.183 ops/s
Iteration  10: 494075.387 ops/s
Iteration  11: 492973.348 ops/s
Iteration  12: 492824.484 ops/s
Iteration  13: 496541.011 ops/s
Iteration  14: 493934.357 ops/s
Iteration  15: 495659.026 ops/s
Iteration  16: 493605.631 ops/s
Iteration  17: 504068.160 ops/s
Iteration  18: 507463.524 ops/s
Iteration  19: 493356.742 ops/s
Iteration  20: 510232.892 ops/s
Iteration  21: 482460.727 ops/s
Iteration  22: 516583.043 ops/s
Iteration  23: 498836.738 ops/s
Iteration  24: 500011.116 ops/s
Iteration  25: 492758.953 ops/s
Iteration  26: 495534.407 ops/s
Iteration  27: 518847.899 ops/s
Iteration  28: 486895.592 ops/s
Iteration  29: 506665.813 ops/s
Iteration  30: 491100.312 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategyTest._Benchmark.benchmark_badRequest":
  497321.414 ±(99.9%) 6791.356 ops/s [Average]
  (min, avg, max) = (473846.183, 497321.414, 518847.899), stdev = 10164.982
  CI (99.9%): [490530.059, 504112.770] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score      Error  Units
FlowableOnBackpressureBufferStrategyTest._Benchmark.benchmark_badRequest  thrpt   30  497321.414 ± 6791.356  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFilterTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFilterTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1964673.753 ops/s
# Warmup Iteration   2: 4207684.076 ops/s
# Warmup Iteration   3: 5905272.050 ops/s
# Warmup Iteration   4: 5840201.747 ops/s
# Warmup Iteration   5: 5787973.387 ops/s
# Warmup Iteration   6: 6003902.601 ops/s
# Warmup Iteration   7: 5736424.817 ops/s
# Warmup Iteration   8: 4893436.807 ops/s
# Warmup Iteration   9: 5995021.888 ops/s
# Warmup Iteration  10: 5774847.926 ops/s
# Warmup Iteration  11: 5914385.317 ops/s
# Warmup Iteration  12: 5749301.075 ops/s
# Warmup Iteration  13: 5724633.941 ops/s
# Warmup Iteration  14: 5915849.298 ops/s
# Warmup Iteration  15: 5844122.976 ops/s
# Warmup Iteration  16: 6047884.634 ops/s
# Warmup Iteration  17: 5733291.607 ops/s
# Warmup Iteration  18: 5945748.826 ops/s
# Warmup Iteration  19: 5890107.302 ops/s
# Warmup Iteration  20: 5689730.836 ops/s
# Warmup Iteration  21: 6153372.469 ops/s
# Warmup Iteration  22: 5645153.903 ops/s
# Warmup Iteration  23: 6028507.787 ops/s
# Warmup Iteration  24: 5824629.457 ops/s
# Warmup Iteration  25: 5740573.765 ops/s
# Warmup Iteration  26: 5909471.868 ops/s
# Warmup Iteration  27: 5756661.052 ops/s
# Warmup Iteration  28: 5779342.393 ops/s
# Warmup Iteration  29: 6161093.838 ops/s
# Warmup Iteration  30: 5699361.658 ops/s
Iteration   1: 6081982.109 ops/s
Iteration   2: 5737991.081 ops/s
Iteration   3: 6135465.837 ops/s
Iteration   4: 5957709.657 ops/s
Iteration   5: 5753381.345 ops/s
Iteration   6: 5891338.085 ops/s
Iteration   7: 5733105.363 ops/s
Iteration   8: 5980168.858 ops/s
Iteration   9: 5708761.864 ops/s
Iteration  10: 5990835.176 ops/s
Iteration  11: 5870679.367 ops/s
Iteration  12: 5972117.453 ops/s
Iteration  13: 5851518.367 ops/s
Iteration  14: 5870910.411 ops/s
Iteration  15: 5978464.585 ops/s
Iteration  16: 6041506.419 ops/s
Iteration  17: 5685215.487 ops/s
Iteration  18: 6014134.428 ops/s
Iteration  19: 5743972.487 ops/s
Iteration  20: 6036086.379 ops/s
Iteration  21: 5904046.682 ops/s
Iteration  22: 5825916.866 ops/s
Iteration  23: 5838614.101 ops/s
Iteration  24: 5799500.180 ops/s
Iteration  25: 5909612.995 ops/s
Iteration  26: 5636755.542 ops/s
Iteration  27: 5866681.536 ops/s
Iteration  28: 6059875.344 ops/s
Iteration  29: 5710474.899 ops/s
Iteration  30: 5974561.328 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFilterTest._Benchmark.benchmark_dispose":
  5885379.474 ±(99.9%) 88319.954 ops/s [Average]
  (min, avg, max) = (5636755.542, 5885379.474, 6135465.837), stdev = 132193.160
  CI (99.9%): [5797059.520, 5973699.428] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score       Error  Units
FlowableFilterTest._Benchmark.benchmark_dispose  thrpt   30  5885379.474 ± 88319.954  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableConcatTest._Benchmark.benchmark_synchronousFusedCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableConcatTest._Benchmark.benchmark_synchronousFusedCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 135943.946 ops/s
# Warmup Iteration   2: 446156.693 ops/s
# Warmup Iteration   3: 479954.717 ops/s
# Warmup Iteration   4: 498922.104 ops/s
# Warmup Iteration   5: 463106.750 ops/s
# Warmup Iteration   6: 475444.400 ops/s
# Warmup Iteration   7: 487136.732 ops/s
# Warmup Iteration   8: 516431.885 ops/s
# Warmup Iteration   9: 506198.293 ops/s
# Warmup Iteration  10: 530965.723 ops/s
# Warmup Iteration  11: 499918.257 ops/s
# Warmup Iteration  12: 528183.250 ops/s
# Warmup Iteration  13: 500771.195 ops/s
# Warmup Iteration  14: 513034.206 ops/s
# Warmup Iteration  15: 531873.771 ops/s
# Warmup Iteration  16: 511901.635 ops/s
# Warmup Iteration  17: 543928.332 ops/s
# Warmup Iteration  18: 536129.958 ops/s
# Warmup Iteration  19: 541165.488 ops/s
# Warmup Iteration  20: 533779.737 ops/s
# Warmup Iteration  21: 550744.972 ops/s
# Warmup Iteration  22: 552857.381 ops/s
# Warmup Iteration  23: 524471.747 ops/s
# Warmup Iteration  24: 553688.558 ops/s
# Warmup Iteration  25: 529995.098 ops/s
# Warmup Iteration  26: 521269.354 ops/s
# Warmup Iteration  27: 546501.629 ops/s
# Warmup Iteration  28: 510452.731 ops/s
# Warmup Iteration  29: 550067.887 ops/s
# Warmup Iteration  30: 535977.333 ops/s
Iteration   1: 526585.443 ops/s
Iteration   2: 552772.732 ops/s
Iteration   3: 536414.361 ops/s
Iteration   4: 551307.006 ops/s
Iteration   5: 517560.752 ops/s
Iteration   6: 538666.869 ops/s
Iteration   7: 540636.734 ops/s
Iteration   8: 533429.295 ops/s
Iteration   9: 555512.372 ops/s
Iteration  10: 529120.115 ops/s
Iteration  11: 539378.178 ops/s
Iteration  12: 547451.206 ops/s
Iteration  13: 529952.773 ops/s
Iteration  14: 543094.874 ops/s
Iteration  15: 536259.770 ops/s
Iteration  16: 534563.847 ops/s
Iteration  17: 547138.555 ops/s
Iteration  18: 530962.440 ops/s
Iteration  19: 534801.913 ops/s
Iteration  20: 534716.015 ops/s
Iteration  21: 565982.905 ops/s
Iteration  22: 532175.424 ops/s
Iteration  23: 551770.812 ops/s
Iteration  24: 560614.611 ops/s
Iteration  25: 559792.036 ops/s
Iteration  26: 530911.902 ops/s
Iteration  27: 548017.736 ops/s
Iteration  28: 531737.354 ops/s
Iteration  29: 544584.195 ops/s
Iteration  30: 522908.000 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatTest._Benchmark.benchmark_synchronousFusedCrash":
  540294.008 ±(99.9%) 7852.973 ops/s [Average]
  (min, avg, max) = (517560.752, 540294.008, 565982.905), stdev = 11753.960
  CI (99.9%): [532441.035, 548146.980] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
CompletableConcatTest._Benchmark.benchmark_synchronousFusedCrash  thrpt   30  540294.008 ± 7852.973  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFilterTest._Benchmark.benchmark_syncFused$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFilterTest._Benchmark.benchmark_syncFused

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 741689.784 ops/s
# Warmup Iteration   2: 2008652.752 ops/s
# Warmup Iteration   3: 3159770.820 ops/s
# Warmup Iteration   4: 3663158.545 ops/s
# Warmup Iteration   5: 3781739.743 ops/s
# Warmup Iteration   6: 3631078.512 ops/s
# Warmup Iteration   7: 3588450.737 ops/s
# Warmup Iteration   8: 3920899.697 ops/s
# Warmup Iteration   9: 3575506.787 ops/s
# Warmup Iteration  10: 3738545.649 ops/s
# Warmup Iteration  11: 3623413.712 ops/s
# Warmup Iteration  12: 3664939.240 ops/s
# Warmup Iteration  13: 3703106.920 ops/s
# Warmup Iteration  14: 3704113.892 ops/s
# Warmup Iteration  15: 3823002.828 ops/s
# Warmup Iteration  16: 3701014.427 ops/s
# Warmup Iteration  17: 3709156.979 ops/s
# Warmup Iteration  18: 3761150.523 ops/s
# Warmup Iteration  19: 3650235.991 ops/s
# Warmup Iteration  20: 3660143.925 ops/s
# Warmup Iteration  21: 3763955.587 ops/s
# Warmup Iteration  22: 3694099.023 ops/s
# Warmup Iteration  23: 3743133.975 ops/s
# Warmup Iteration  24: 3578211.798 ops/s
# Warmup Iteration  25: 3640205.203 ops/s
# Warmup Iteration  26: 3851022.113 ops/s
# Warmup Iteration  27: 3580170.721 ops/s
# Warmup Iteration  28: 3644429.742 ops/s
# Warmup Iteration  29: 3860779.657 ops/s
# Warmup Iteration  30: 3604764.704 ops/s
Iteration   1: 3890322.358 ops/s
Iteration   2: 3592390.128 ops/s
Iteration   3: 3693278.252 ops/s
Iteration   4: 3768979.156 ops/s
Iteration   5: 3684771.334 ops/s
Iteration   6: 3852526.139 ops/s
Iteration   7: 3701851.563 ops/s
Iteration   8: 3722469.967 ops/s
Iteration   9: 3711376.059 ops/s
Iteration  10: 3687244.733 ops/s
Iteration  11: 3725675.264 ops/s
Iteration  12: 3767891.527 ops/s
Iteration  13: 3634333.721 ops/s
Iteration  14: 3834628.518 ops/s
Iteration  15: 3815369.297 ops/s
Iteration  16: 3701582.286 ops/s
Iteration  17: 3782758.313 ops/s
Iteration  18: 3650069.369 ops/s
Iteration  19: 3663249.342 ops/s
Iteration  20: 3826600.882 ops/s
Iteration  21: 3724547.260 ops/s
Iteration  22: 3805709.863 ops/s
Iteration  23: 3584636.784 ops/s
Iteration  24: 3798407.691 ops/s
Iteration  25: 3669811.527 ops/s
Iteration  26: 3629021.134 ops/s
Iteration  27: 3746929.972 ops/s
Iteration  28: 3581410.823 ops/s
Iteration  29: 3714637.308 ops/s
Iteration  30: 3669220.229 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFilterTest._Benchmark.benchmark_syncFused":
  3721056.693 ±(99.9%) 54005.661 ops/s [Average]
  (min, avg, max) = (3581410.823, 3721056.693, 3890322.358), stdev = 80833.137
  CI (99.9%): [3667051.033, 3775062.354] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score       Error  Units
FlowableFilterTest._Benchmark.benchmark_syncFused  thrpt   30  3721056.693 ± 54005.661  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_mapReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_mapReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 149422.133 ops/s
# Warmup Iteration   2: 396704.090 ops/s
# Warmup Iteration   3: 449446.734 ops/s
# Warmup Iteration   4: 419378.028 ops/s
# Warmup Iteration   5: 479999.574 ops/s
# Warmup Iteration   6: 457981.211 ops/s
# Warmup Iteration   7: 453589.891 ops/s
# Warmup Iteration   8: 481014.005 ops/s
# Warmup Iteration   9: 443357.654 ops/s
# Warmup Iteration  10: 470848.846 ops/s
# Warmup Iteration  11: 459268.425 ops/s
# Warmup Iteration  12: 471880.980 ops/s
# Warmup Iteration  13: 463685.996 ops/s
# Warmup Iteration  14: 473382.343 ops/s
# Warmup Iteration  15: 458766.795 ops/s
# Warmup Iteration  16: 486035.588 ops/s
# Warmup Iteration  17: 439941.112 ops/s
# Warmup Iteration  18: 488898.822 ops/s
# Warmup Iteration  19: 488735.239 ops/s
# Warmup Iteration  20: 442777.219 ops/s
# Warmup Iteration  21: 491908.871 ops/s
# Warmup Iteration  22: 470438.922 ops/s
# Warmup Iteration  23: 503737.416 ops/s
# Warmup Iteration  24: 467909.788 ops/s
# Warmup Iteration  25: 475836.869 ops/s
# Warmup Iteration  26: 494668.518 ops/s
# Warmup Iteration  27: 488973.123 ops/s
# Warmup Iteration  28: 478987.273 ops/s
# Warmup Iteration  29: 497433.851 ops/s
# Warmup Iteration  30: 468098.496 ops/s
Iteration   1: 502533.700 ops/s
Iteration   2: 473773.636 ops/s
Iteration   3: 496608.817 ops/s
Iteration   4: 462245.793 ops/s
Iteration   5: 493473.590 ops/s
Iteration   6: 478761.383 ops/s
Iteration   7: 490660.369 ops/s
Iteration   8: 495611.273 ops/s
Iteration   9: 471130.906 ops/s
Iteration  10: 490061.426 ops/s
Iteration  11: 477563.193 ops/s
Iteration  12: 497897.440 ops/s
Iteration  13: 475200.058 ops/s
Iteration  14: 479267.482 ops/s
Iteration  15: 492984.183 ops/s
Iteration  16: 481344.251 ops/s
Iteration  17: 463238.083 ops/s
Iteration  18: 507821.103 ops/s
Iteration  19: 474426.801 ops/s
Iteration  20: 492090.269 ops/s
Iteration  21: 469905.280 ops/s
Iteration  22: 493361.678 ops/s
Iteration  23: 506556.101 ops/s
Iteration  24: 477996.184 ops/s
Iteration  25: 492491.901 ops/s
Iteration  26: 476712.288 ops/s
Iteration  27: 490545.644 ops/s
Iteration  28: 484238.166 ops/s
Iteration  29: 389339.868 ops/s
Iteration  30: 492076.119 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_mapReturnsNull":
  482330.566 ±(99.9%) 14198.972 ops/s [Average]
  (min, avg, max) = (389339.868, 482330.566, 507821.103), stdev = 21252.354
  CI (99.9%): [468131.594, 496529.538] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score       Error  Units
FlowableNullTests._Benchmark.benchmark_mapReturnsNull  thrpt   30  482330.566 ± 14198.972  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromTest._Benchmark.benchmark_zeroOtherCombinerReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromTest._Benchmark.benchmark_zeroOtherCombinerReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 109355.925 ops/s
# Warmup Iteration   2: 337809.176 ops/s
# Warmup Iteration   3: 364244.935 ops/s
# Warmup Iteration   4: 338705.120 ops/s
# Warmup Iteration   5: 400312.221 ops/s
# Warmup Iteration   6: 388394.983 ops/s
# Warmup Iteration   7: 387590.113 ops/s
# Warmup Iteration   8: 399130.448 ops/s
# Warmup Iteration   9: 378849.277 ops/s
# Warmup Iteration  10: 410119.361 ops/s
# Warmup Iteration  11: 390528.584 ops/s
# Warmup Iteration  12: 398670.725 ops/s
# Warmup Iteration  13: 392672.995 ops/s
# Warmup Iteration  14: 405787.393 ops/s
# Warmup Iteration  15: 385832.639 ops/s
# Warmup Iteration  16: 400449.206 ops/s
# Warmup Iteration  17: 401714.139 ops/s
# Warmup Iteration  18: 420142.432 ops/s
# Warmup Iteration  19: 413349.434 ops/s
# Warmup Iteration  20: 398655.110 ops/s
# Warmup Iteration  21: 426142.321 ops/s
# Warmup Iteration  22: 385976.959 ops/s
# Warmup Iteration  23: 417837.715 ops/s
# Warmup Iteration  24: 397702.068 ops/s
# Warmup Iteration  25: 417094.709 ops/s
# Warmup Iteration  26: 399350.801 ops/s
# Warmup Iteration  27: 394932.435 ops/s
# Warmup Iteration  28: 419321.350 ops/s
# Warmup Iteration  29: 410069.903 ops/s
# Warmup Iteration  30: 396787.252 ops/s
Iteration   1: 403607.960 ops/s
Iteration   2: 413406.599 ops/s
Iteration   3: 401807.637 ops/s
Iteration   4: 392069.568 ops/s
Iteration   5: 393306.963 ops/s
Iteration   6: 417345.156 ops/s
Iteration   7: 404755.252 ops/s
Iteration   8: 402703.013 ops/s
Iteration   9: 422848.339 ops/s
Iteration  10: 405376.499 ops/s
Iteration  11: 407303.962 ops/s
Iteration  12: 404846.998 ops/s
Iteration  13: 406183.194 ops/s
Iteration  14: 409550.834 ops/s
Iteration  15: 398095.560 ops/s
Iteration  16: 408351.686 ops/s
Iteration  17: 411064.666 ops/s
Iteration  18: 405703.350 ops/s
Iteration  19: 404463.460 ops/s
Iteration  20: 395741.603 ops/s
Iteration  21: 416425.590 ops/s
Iteration  22: 389508.886 ops/s
Iteration  23: 420250.801 ops/s
Iteration  24: 396924.427 ops/s
Iteration  25: 414409.581 ops/s
Iteration  26: 399036.201 ops/s
Iteration  27: 401553.476 ops/s
Iteration  28: 418309.712 ops/s
Iteration  29: 397207.892 ops/s
Iteration  30: 406843.182 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromTest._Benchmark.benchmark_zeroOtherCombinerReturnsNull":
  405633.402 ±(99.9%) 5693.952 ops/s [Average]
  (min, avg, max) = (389508.886, 405633.402, 422848.339), stdev = 8522.440
  CI (99.9%): [399939.450, 411327.353] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt       Score      Error  Units
FlowableWithLatestFromTest._Benchmark.benchmark_zeroOtherCombinerReturnsNull  thrpt   30  405633.402 ± 5693.952  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNextTest._Benchmark.benchmark_syncFusedConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNextTest._Benchmark.benchmark_syncFusedConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 282894.896 ops/s
# Warmup Iteration   2: 883685.239 ops/s
# Warmup Iteration   3: 1755223.048 ops/s
# Warmup Iteration   4: 2137218.217 ops/s
# Warmup Iteration   5: 2095359.678 ops/s
# Warmup Iteration   6: 2219051.522 ops/s
# Warmup Iteration   7: 2182280.383 ops/s
# Warmup Iteration   8: 2164375.120 ops/s
# Warmup Iteration   9: 2177864.136 ops/s
# Warmup Iteration  10: 2090947.986 ops/s
# Warmup Iteration  11: 2110470.049 ops/s
# Warmup Iteration  12: 2210419.497 ops/s
# Warmup Iteration  13: 2116531.132 ops/s
# Warmup Iteration  14: 2242062.079 ops/s
# Warmup Iteration  15: 2192480.422 ops/s
# Warmup Iteration  16: 2215820.685 ops/s
# Warmup Iteration  17: 2154946.376 ops/s
# Warmup Iteration  18: 2153192.339 ops/s
# Warmup Iteration  19: 2272310.518 ops/s
# Warmup Iteration  20: 2174114.484 ops/s
# Warmup Iteration  21: 2120771.861 ops/s
# Warmup Iteration  22: 2241808.521 ops/s
# Warmup Iteration  23: 2137846.171 ops/s
# Warmup Iteration  24: 2123074.223 ops/s
# Warmup Iteration  25: 2308562.757 ops/s
# Warmup Iteration  26: 2175939.583 ops/s
# Warmup Iteration  27: 2102495.117 ops/s
# Warmup Iteration  28: 2251055.977 ops/s
# Warmup Iteration  29: 2155722.865 ops/s
# Warmup Iteration  30: 2162416.837 ops/s
Iteration   1: 2134997.585 ops/s
Iteration   2: 2202096.032 ops/s
Iteration   3: 2250904.128 ops/s
Iteration   4: 2157914.951 ops/s
Iteration   5: 2091099.509 ops/s
Iteration   6: 2156448.489 ops/s
Iteration   7: 2167009.228 ops/s
Iteration   8: 2148757.548 ops/s
Iteration   9: 2239385.217 ops/s
Iteration  10: 2124670.744 ops/s
Iteration  11: 2201818.477 ops/s
Iteration  12: 2173898.425 ops/s
Iteration  13: 2168574.595 ops/s
Iteration  14: 2176376.825 ops/s
Iteration  15: 2136063.507 ops/s
Iteration  16: 2263875.906 ops/s
Iteration  17: 2078678.424 ops/s
Iteration  18: 2204572.427 ops/s
Iteration  19: 2236216.915 ops/s
Iteration  20: 2141750.710 ops/s
Iteration  21: 2287156.279 ops/s
Iteration  22: 2096394.747 ops/s
Iteration  23: 2265091.963 ops/s
Iteration  24: 1892747.800 ops/s
Iteration  25: 2119945.746 ops/s
Iteration  26: 2250373.334 ops/s
Iteration  27: 2141266.543 ops/s
Iteration  28: 2174886.477 ops/s
Iteration  29: 2256776.448 ops/s
Iteration  30: 2150631.108 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNextTest._Benchmark.benchmark_syncFusedConditional":
  2169679.336 ±(99.9%) 51335.052 ops/s [Average]
  (min, avg, max) = (1892747.800, 2169679.336, 2287156.279), stdev = 76835.894
  CI (99.9%): [2118344.285, 2221014.388] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
FlowableDoAfterNextTest._Benchmark.benchmark_syncFusedConditional  thrpt   30  2169679.336 ± 51335.052  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualTest._Benchmark.benchmark_syncFusedCrashFlowable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualTest._Benchmark.benchmark_syncFusedCrashFlowable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 19756.116 ops/s
# Warmup Iteration   2: 94262.779 ops/s
# Warmup Iteration   3: 138468.818 ops/s
# Warmup Iteration   4: 129166.215 ops/s
# Warmup Iteration   5: 135248.843 ops/s
# Warmup Iteration   6: 141266.199 ops/s
# Warmup Iteration   7: 152731.085 ops/s
# Warmup Iteration   8: 152776.546 ops/s
# Warmup Iteration   9: 145450.952 ops/s
# Warmup Iteration  10: 150180.133 ops/s
# Warmup Iteration  11: 147974.715 ops/s
# Warmup Iteration  12: 147704.460 ops/s
# Warmup Iteration  13: 155705.265 ops/s
# Warmup Iteration  14: 146835.886 ops/s
# Warmup Iteration  15: 152253.414 ops/s
# Warmup Iteration  16: 152099.117 ops/s
# Warmup Iteration  17: 157082.829 ops/s
# Warmup Iteration  18: 155192.619 ops/s
# Warmup Iteration  19: 164037.937 ops/s
# Warmup Iteration  20: 158440.283 ops/s
# Warmup Iteration  21: 153083.757 ops/s
# Warmup Iteration  22: 160810.887 ops/s
# Warmup Iteration  23: 154363.526 ops/s
# Warmup Iteration  24: 156328.168 ops/s
# Warmup Iteration  25: 156976.031 ops/s
# Warmup Iteration  26: 157740.244 ops/s
# Warmup Iteration  27: 156951.101 ops/s
# Warmup Iteration  28: 153901.335 ops/s
# Warmup Iteration  29: 154657.818 ops/s
# Warmup Iteration  30: 160046.085 ops/s
Iteration   1: 149235.807 ops/s
Iteration   2: 162646.815 ops/s
Iteration   3: 164483.476 ops/s
Iteration   4: 153224.229 ops/s
Iteration   5: 163526.906 ops/s
Iteration   6: 161260.295 ops/s
Iteration   7: 152408.081 ops/s
Iteration   8: 157820.707 ops/s
Iteration   9: 155440.028 ops/s
Iteration  10: 159292.678 ops/s
Iteration  11: 156189.883 ops/s
Iteration  12: 158905.629 ops/s
Iteration  13: 155363.989 ops/s
Iteration  14: 152591.907 ops/s
Iteration  15: 157669.436 ops/s
Iteration  16: 149914.335 ops/s
Iteration  17: 156097.004 ops/s
Iteration  18: 161271.448 ops/s
Iteration  19: 157411.225 ops/s
Iteration  20: 159523.878 ops/s
Iteration  21: 153832.063 ops/s
Iteration  22: 159741.395 ops/s
Iteration  23: 153405.690 ops/s
Iteration  24: 160188.476 ops/s
Iteration  25: 159901.716 ops/s
Iteration  26: 156586.160 ops/s
Iteration  27: 160688.257 ops/s
Iteration  28: 152821.093 ops/s
Iteration  29: 159498.337 ops/s
Iteration  30: 156713.350 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualTest._Benchmark.benchmark_syncFusedCrashFlowable":
  157255.143 ±(99.9%) 2602.250 ops/s [Average]
  (min, avg, max) = (149235.807, 157255.143, 164483.476), stdev = 3894.926
  CI (99.9%): [154652.893, 159857.394] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score      Error  Units
FlowableSequenceEqualTest._Benchmark.benchmark_syncFusedCrashFlowable  thrpt   30  157255.143 ± 2602.250  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLongTest._Benchmark.benchmark_conditionalNormal$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLongTest._Benchmark.benchmark_conditionalNormal

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 503982.954 ops/s
# Warmup Iteration   2: 2439332.899 ops/s
# Warmup Iteration   3: 3224780.514 ops/s
# Warmup Iteration   4: 3316153.907 ops/s
# Warmup Iteration   5: 3045091.361 ops/s
# Warmup Iteration   6: 3026039.255 ops/s
# Warmup Iteration   7: 3385183.213 ops/s
# Warmup Iteration   8: 3203357.611 ops/s
# Warmup Iteration   9: 3368087.000 ops/s
# Warmup Iteration  10: 3306690.366 ops/s
# Warmup Iteration  11: 3292195.873 ops/s
# Warmup Iteration  12: 3456292.081 ops/s
# Warmup Iteration  13: 3197851.299 ops/s
# Warmup Iteration  14: 3365108.297 ops/s
# Warmup Iteration  15: 3251299.159 ops/s
# Warmup Iteration  16: 3337240.199 ops/s
# Warmup Iteration  17: 3251188.132 ops/s
# Warmup Iteration  18: 3227713.025 ops/s
# Warmup Iteration  19: 3375597.571 ops/s
# Warmup Iteration  20: 3409658.461 ops/s
# Warmup Iteration  21: 3246771.614 ops/s
# Warmup Iteration  22: 3398603.691 ops/s
# Warmup Iteration  23: 3212378.177 ops/s
# Warmup Iteration  24: 3272832.205 ops/s
# Warmup Iteration  25: 3382049.685 ops/s
# Warmup Iteration  26: 3217897.416 ops/s
# Warmup Iteration  27: 3375209.796 ops/s
# Warmup Iteration  28: 3188652.811 ops/s
# Warmup Iteration  29: 3370223.166 ops/s
# Warmup Iteration  30: 3366248.011 ops/s
Iteration   1: 3237728.022 ops/s
Iteration   2: 3391120.663 ops/s
Iteration   3: 3240717.238 ops/s
Iteration   4: 3367167.947 ops/s
Iteration   5: 3314226.978 ops/s
Iteration   6: 3252238.130 ops/s
Iteration   7: 3316352.981 ops/s
Iteration   8: 3200120.175 ops/s
Iteration   9: 3315692.523 ops/s
Iteration  10: 3247691.804 ops/s
Iteration  11: 3312719.743 ops/s
Iteration  12: 3483708.745 ops/s
Iteration  13: 3200014.461 ops/s
Iteration  14: 3332429.452 ops/s
Iteration  15: 3320271.879 ops/s
Iteration  16: 3304240.880 ops/s
Iteration  17: 3355443.486 ops/s
Iteration  18: 3239149.834 ops/s
Iteration  19: 2789784.906 ops/s
Iteration  20: 3307784.064 ops/s
Iteration  21: 3312789.376 ops/s
Iteration  22: 3354361.821 ops/s
Iteration  23: 3265830.850 ops/s
Iteration  24: 3371170.652 ops/s
Iteration  25: 3291177.922 ops/s
Iteration  26: 3320644.766 ops/s
Iteration  27: 3226775.249 ops/s
Iteration  28: 3422351.438 ops/s
Iteration  29: 3459752.562 ops/s
Iteration  30: 3222541.971 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLongTest._Benchmark.benchmark_conditionalNormal":
  3292533.351 ±(99.9%) 79294.883 ops/s [Average]
  (min, avg, max) = (2789784.906, 3292533.351, 3483708.745), stdev = 118684.857
  CI (99.9%): [3213238.467, 3371828.234] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
FlowableRangeLongTest._Benchmark.benchmark_conditionalNormal  thrpt   30  3292533.351 ± 79294.883  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_dryRunCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_dryRunCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 51200.106 ops/s
# Warmup Iteration   2: 124254.549 ops/s
# Warmup Iteration   3: 337084.765 ops/s
# Warmup Iteration   4: 321470.555 ops/s
# Warmup Iteration   5: 341412.625 ops/s
# Warmup Iteration   6: 330518.394 ops/s
# Warmup Iteration   7: 332496.172 ops/s
# Warmup Iteration   8: 341336.680 ops/s
# Warmup Iteration   9: 317538.925 ops/s
# Warmup Iteration  10: 324303.207 ops/s
# Warmup Iteration  11: 323960.010 ops/s
# Warmup Iteration  12: 319105.851 ops/s
# Warmup Iteration  13: 321978.270 ops/s
# Warmup Iteration  14: 325254.762 ops/s
# Warmup Iteration  15: 347057.716 ops/s
# Warmup Iteration  16: 337161.090 ops/s
# Warmup Iteration  17: 346156.112 ops/s
# Warmup Iteration  18: 346212.459 ops/s
# Warmup Iteration  19: 340370.735 ops/s
# Warmup Iteration  20: 340438.632 ops/s
# Warmup Iteration  21: 349984.662 ops/s
# Warmup Iteration  22: 343645.166 ops/s
# Warmup Iteration  23: 329532.437 ops/s
# Warmup Iteration  24: 343283.201 ops/s
# Warmup Iteration  25: 348294.365 ops/s
# Warmup Iteration  26: 339738.658 ops/s
# Warmup Iteration  27: 334770.247 ops/s
# Warmup Iteration  28: 329700.901 ops/s
# Warmup Iteration  29: 348704.956 ops/s
# Warmup Iteration  30: 341039.975 ops/s
Iteration   1: 357762.326 ops/s
Iteration   2: 333088.238 ops/s
Iteration   3: 363858.679 ops/s
Iteration   4: 337700.789 ops/s
Iteration   5: 350987.412 ops/s
Iteration   6: 341950.831 ops/s
Iteration   7: 341992.011 ops/s
Iteration   8: 344358.618 ops/s
Iteration   9: 338739.012 ops/s
Iteration  10: 350020.351 ops/s
Iteration  11: 347261.514 ops/s
Iteration  12: 326718.849 ops/s
Iteration  13: 350828.442 ops/s
Iteration  14: 332129.499 ops/s
Iteration  15: 328215.441 ops/s
Iteration  16: 340382.229 ops/s
Iteration  17: 349661.964 ops/s
Iteration  18: 336803.556 ops/s
Iteration  19: 354688.365 ops/s
Iteration  20: 349425.274 ops/s
Iteration  21: 346384.715 ops/s
Iteration  22: 348927.328 ops/s
Iteration  23: 340787.674 ops/s
Iteration  24: 352457.081 ops/s
Iteration  25: 337730.170 ops/s
Iteration  26: 355506.653 ops/s
Iteration  27: 337492.378 ops/s
Iteration  28: 339437.826 ops/s
Iteration  29: 352183.188 ops/s
Iteration  30: 332119.809 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_dryRunCrash":
  343986.674 ±(99.9%) 6084.240 ops/s [Average]
  (min, avg, max) = (326718.849, 343986.674, 363858.679), stdev = 9106.604
  CI (99.9%): [337902.434, 350070.914] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score      Error  Units
FlowablePublishTest._Benchmark.benchmark_dryRunCrash  thrpt   30  343986.674 ± 6084.240  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableMapOptionalTest._Benchmark.benchmark_crashDropsOnNextsConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableMapOptionalTest._Benchmark.benchmark_crashDropsOnNextsConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 175457.118 ops/s
# Warmup Iteration   2: 480246.396 ops/s
# Warmup Iteration   3: 497541.485 ops/s
# Warmup Iteration   4: 521826.177 ops/s
# Warmup Iteration   5: 502493.041 ops/s
# Warmup Iteration   6: 543900.677 ops/s
# Warmup Iteration   7: 497035.898 ops/s
# Warmup Iteration   8: 505049.315 ops/s
# Warmup Iteration   9: 511330.304 ops/s
# Warmup Iteration  10: 524358.333 ops/s
# Warmup Iteration  11: 530916.752 ops/s
# Warmup Iteration  12: 518135.204 ops/s
# Warmup Iteration  13: 531926.692 ops/s
# Warmup Iteration  14: 509841.537 ops/s
# Warmup Iteration  15: 516090.442 ops/s
# Warmup Iteration  16: 530756.952 ops/s
# Warmup Iteration  17: 544754.429 ops/s
# Warmup Iteration  18: 556625.554 ops/s
# Warmup Iteration  19: 541400.077 ops/s
# Warmup Iteration  20: 560712.256 ops/s
# Warmup Iteration  21: 537761.364 ops/s
# Warmup Iteration  22: 574452.331 ops/s
# Warmup Iteration  23: 537022.012 ops/s
# Warmup Iteration  24: 551028.887 ops/s
# Warmup Iteration  25: 556673.433 ops/s
# Warmup Iteration  26: 535231.896 ops/s
# Warmup Iteration  27: 560272.934 ops/s
# Warmup Iteration  28: 569591.837 ops/s
# Warmup Iteration  29: 532843.673 ops/s
# Warmup Iteration  30: 563204.454 ops/s
Iteration   1: 545293.728 ops/s
Iteration   2: 551995.821 ops/s
Iteration   3: 544383.550 ops/s
Iteration   4: 557489.391 ops/s
Iteration   5: 558615.076 ops/s
Iteration   6: 550285.132 ops/s
Iteration   7: 559029.148 ops/s
Iteration   8: 543410.222 ops/s
Iteration   9: 564429.906 ops/s
Iteration  10: 542433.213 ops/s
Iteration  11: 546365.077 ops/s
Iteration  12: 555836.456 ops/s
Iteration  13: 500915.942 ops/s
Iteration  14: 476886.846 ops/s
Iteration  15: 549713.410 ops/s
Iteration  16: 538110.728 ops/s
Iteration  17: 576876.268 ops/s
Iteration  18: 555914.131 ops/s
Iteration  19: 533477.803 ops/s
Iteration  20: 565103.956 ops/s
Iteration  21: 526087.408 ops/s
Iteration  22: 554086.701 ops/s
Iteration  23: 564778.109 ops/s
Iteration  24: 525335.173 ops/s
Iteration  25: 559480.801 ops/s
Iteration  26: 549988.875 ops/s
Iteration  27: 566735.368 ops/s
Iteration  28: 527811.191 ops/s
Iteration  29: 563242.329 ops/s
Iteration  30: 541566.905 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableMapOptionalTest._Benchmark.benchmark_crashDropsOnNextsConditional":
  546522.622 ±(99.9%) 13557.627 ops/s [Average]
  (min, avg, max) = (476886.846, 546522.622, 576876.268), stdev = 20292.419
  CI (99.9%): [532964.996, 560080.249] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score       Error  Units
FlowableMapOptionalTest._Benchmark.benchmark_crashDropsOnNextsConditional  thrpt   30  546522.622 ± 13557.627  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ParallelFlatMapStreamTest._Benchmark.benchmark_subscriberCount$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ParallelFlatMapStreamTest._Benchmark.benchmark_subscriberCount

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 63105.290 ops/s
# Warmup Iteration   2: 278467.451 ops/s
# Warmup Iteration   3: 308257.793 ops/s
# Warmup Iteration   4: 357999.771 ops/s
# Warmup Iteration   5: 341929.233 ops/s
# Warmup Iteration   6: 336589.024 ops/s
# Warmup Iteration   7: 361335.161 ops/s
# Warmup Iteration   8: 342206.248 ops/s
# Warmup Iteration   9: 346800.157 ops/s
# Warmup Iteration  10: 350916.539 ops/s
# Warmup Iteration  11: 355232.362 ops/s
# Warmup Iteration  12: 332734.671 ops/s
# Warmup Iteration  13: 357288.900 ops/s
# Warmup Iteration  14: 328201.565 ops/s
# Warmup Iteration  15: 353712.691 ops/s
# Warmup Iteration  16: 346622.176 ops/s
# Warmup Iteration  17: 358109.183 ops/s
# Warmup Iteration  18: 363627.896 ops/s
# Warmup Iteration  19: 349932.364 ops/s
# Warmup Iteration  20: 356620.153 ops/s
# Warmup Iteration  21: 347650.782 ops/s
# Warmup Iteration  22: 353166.059 ops/s
# Warmup Iteration  23: 354684.135 ops/s
# Warmup Iteration  24: 359436.620 ops/s
# Warmup Iteration  25: 369923.429 ops/s
# Warmup Iteration  26: 347354.700 ops/s
# Warmup Iteration  27: 369220.119 ops/s
# Warmup Iteration  28: 364726.699 ops/s
# Warmup Iteration  29: 336061.751 ops/s
# Warmup Iteration  30: 380304.343 ops/s
Iteration   1: 370872.592 ops/s
Iteration   2: 357093.788 ops/s
Iteration   3: 368446.864 ops/s
Iteration   4: 357866.378 ops/s
Iteration   5: 352724.949 ops/s
Iteration   6: 358102.842 ops/s
Iteration   7: 357704.059 ops/s
Iteration   8: 366477.425 ops/s
Iteration   9: 357091.765 ops/s
Iteration  10: 355732.762 ops/s
Iteration  11: 360032.362 ops/s
Iteration  12: 347963.102 ops/s
Iteration  13: 364905.655 ops/s
Iteration  14: 345271.405 ops/s
Iteration  15: 343859.546 ops/s
Iteration  16: 363962.212 ops/s
Iteration  17: 348384.159 ops/s
Iteration  18: 362851.810 ops/s
Iteration  19: 342965.211 ops/s
Iteration  20: 371770.307 ops/s
Iteration  21: 346637.273 ops/s
Iteration  22: 360427.552 ops/s
Iteration  23: 373377.696 ops/s
Iteration  24: 348157.810 ops/s
Iteration  25: 365424.872 ops/s
Iteration  26: 356309.567 ops/s
Iteration  27: 368224.000 ops/s
Iteration  28: 359152.693 ops/s
Iteration  29: 354695.361 ops/s
Iteration  30: 373987.924 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ParallelFlatMapStreamTest._Benchmark.benchmark_subscriberCount":
  358682.465 ±(99.9%) 6011.654 ops/s [Average]
  (min, avg, max) = (342965.211, 358682.465, 373987.924), stdev = 8997.961
  CI (99.9%): [352670.811, 364694.118] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
ParallelFlatMapStreamTest._Benchmark.benchmark_subscriberCount  thrpt   30  358682.465 ± 6011.654  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFilterTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFilterTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 108530.814 ops/s
# Warmup Iteration   2: 396709.315 ops/s
# Warmup Iteration   3: 475972.456 ops/s
# Warmup Iteration   4: 452830.710 ops/s
# Warmup Iteration   5: 518703.163 ops/s
# Warmup Iteration   6: 431250.922 ops/s
# Warmup Iteration   7: 494760.193 ops/s
# Warmup Iteration   8: 516899.365 ops/s
# Warmup Iteration   9: 497404.464 ops/s
# Warmup Iteration  10: 462815.152 ops/s
# Warmup Iteration  11: 497351.672 ops/s
# Warmup Iteration  12: 490475.231 ops/s
# Warmup Iteration  13: 516397.253 ops/s
# Warmup Iteration  14: 494179.255 ops/s
# Warmup Iteration  15: 523580.724 ops/s
# Warmup Iteration  16: 489210.643 ops/s
# Warmup Iteration  17: 522464.066 ops/s
# Warmup Iteration  18: 533890.401 ops/s
# Warmup Iteration  19: 514029.789 ops/s
# Warmup Iteration  20: 525122.093 ops/s
# Warmup Iteration  21: 518942.987 ops/s
# Warmup Iteration  22: 515588.581 ops/s
# Warmup Iteration  23: 543420.948 ops/s
# Warmup Iteration  24: 520623.512 ops/s
# Warmup Iteration  25: 510639.506 ops/s
# Warmup Iteration  26: 521269.812 ops/s
# Warmup Iteration  27: 522082.311 ops/s
# Warmup Iteration  28: 542155.786 ops/s
# Warmup Iteration  29: 501002.248 ops/s
# Warmup Iteration  30: 538160.335 ops/s
Iteration   1: 514509.382 ops/s
Iteration   2: 517087.132 ops/s
Iteration   3: 526004.957 ops/s
Iteration   4: 506067.796 ops/s
Iteration   5: 530885.274 ops/s
Iteration   6: 519501.137 ops/s
Iteration   7: 528421.591 ops/s
Iteration   8: 461226.642 ops/s
Iteration   9: 479601.432 ops/s
Iteration  10: 514823.786 ops/s
Iteration  11: 531266.583 ops/s
Iteration  12: 540807.390 ops/s
Iteration  13: 509021.736 ops/s
Iteration  14: 525795.789 ops/s
Iteration  15: 523806.808 ops/s
Iteration  16: 503330.286 ops/s
Iteration  17: 538034.112 ops/s
Iteration  18: 512665.136 ops/s
Iteration  19: 506790.623 ops/s
Iteration  20: 541741.151 ops/s
Iteration  21: 507708.617 ops/s
Iteration  22: 532803.531 ops/s
Iteration  23: 509929.255 ops/s
Iteration  24: 533924.306 ops/s
Iteration  25: 516997.405 ops/s
Iteration  26: 504886.031 ops/s
Iteration  27: 536784.615 ops/s
Iteration  28: 513600.351 ops/s
Iteration  29: 535554.534 ops/s
Iteration  30: 497135.200 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFilterTest._Benchmark.benchmark_doubleOnSubscribe":
  517357.086 ±(99.9%) 11983.592 ops/s [Average]
  (min, avg, max) = (461226.642, 517357.086, 541741.151), stdev = 17936.478
  CI (99.9%): [505373.494, 529340.679] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score       Error  Units
FlowableFilterTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  517357.086 ± 11983.592  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStreamTest._Benchmark.benchmark_fusedPollCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStreamTest._Benchmark.benchmark_fusedPollCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 48610.217 ops/s
# Warmup Iteration   2: 209256.317 ops/s
# Warmup Iteration   3: 403109.972 ops/s
# Warmup Iteration   4: 402896.627 ops/s
# Warmup Iteration   5: 392161.919 ops/s
# Warmup Iteration   6: 429127.829 ops/s
# Warmup Iteration   7: 452563.270 ops/s
# Warmup Iteration   8: 439341.763 ops/s
# Warmup Iteration   9: 441514.377 ops/s
# Warmup Iteration  10: 442200.918 ops/s
# Warmup Iteration  11: 450012.365 ops/s
# Warmup Iteration  12: 434412.182 ops/s
# Warmup Iteration  13: 457980.895 ops/s
# Warmup Iteration  14: 433637.128 ops/s
# Warmup Iteration  15: 444489.933 ops/s
# Warmup Iteration  16: 445939.304 ops/s
# Warmup Iteration  17: 441224.017 ops/s
# Warmup Iteration  18: 467349.365 ops/s
# Warmup Iteration  19: 450229.684 ops/s
# Warmup Iteration  20: 466600.651 ops/s
# Warmup Iteration  21: 453963.936 ops/s
# Warmup Iteration  22: 459195.655 ops/s
# Warmup Iteration  23: 474631.063 ops/s
# Warmup Iteration  24: 442068.494 ops/s
# Warmup Iteration  25: 455482.352 ops/s
# Warmup Iteration  26: 479114.541 ops/s
# Warmup Iteration  27: 457769.446 ops/s
# Warmup Iteration  28: 458475.890 ops/s
# Warmup Iteration  29: 447166.818 ops/s
# Warmup Iteration  30: 467368.512 ops/s
Iteration   1: 468593.119 ops/s
Iteration   2: 443027.326 ops/s
Iteration   3: 480023.894 ops/s
Iteration   4: 447952.025 ops/s
Iteration   5: 456082.824 ops/s
Iteration   6: 477466.345 ops/s
Iteration   7: 448759.883 ops/s
Iteration   8: 477426.019 ops/s
Iteration   9: 444259.249 ops/s
Iteration  10: 471388.596 ops/s
Iteration  11: 451303.720 ops/s
Iteration  12: 465292.481 ops/s
Iteration  13: 465050.271 ops/s
Iteration  14: 466900.282 ops/s
Iteration  15: 460607.823 ops/s
Iteration  16: 457963.549 ops/s
Iteration  17: 457974.633 ops/s
Iteration  18: 481170.909 ops/s
Iteration  19: 468637.642 ops/s
Iteration  20: 453802.930 ops/s
Iteration  21: 466983.509 ops/s
Iteration  22: 452562.270 ops/s
Iteration  23: 470449.111 ops/s
Iteration  24: 451028.301 ops/s
Iteration  25: 445226.085 ops/s
Iteration  26: 464637.879 ops/s
Iteration  27: 448774.980 ops/s
Iteration  28: 485646.903 ops/s
Iteration  29: 470785.468 ops/s
Iteration  30: 443201.434 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStreamTest._Benchmark.benchmark_fusedPollCrash":
  461432.649 ±(99.9%) 8263.880 ops/s [Average]
  (min, avg, max) = (443027.326, 461432.649, 485646.903), stdev = 12368.987
  CI (99.9%): [453168.769, 469696.528] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
FlowableFlatMapStreamTest._Benchmark.benchmark_fusedPollCrash  thrpt   30  461432.649 ± 8263.880  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptionalTest._Benchmark.benchmark_invalidSubscriberCount$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptionalTest._Benchmark.benchmark_invalidSubscriberCount

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 87252.368 ops/s
# Warmup Iteration   2: 274094.906 ops/s
# Warmup Iteration   3: 334058.538 ops/s
# Warmup Iteration   4: 317550.578 ops/s
# Warmup Iteration   5: 316768.571 ops/s
# Warmup Iteration   6: 337175.057 ops/s
# Warmup Iteration   7: 358354.947 ops/s
# Warmup Iteration   8: 344412.548 ops/s
# Warmup Iteration   9: 349044.348 ops/s
# Warmup Iteration  10: 375328.042 ops/s
# Warmup Iteration  11: 360232.157 ops/s
# Warmup Iteration  12: 335865.915 ops/s
# Warmup Iteration  13: 366636.339 ops/s
# Warmup Iteration  14: 344928.834 ops/s
# Warmup Iteration  15: 361642.225 ops/s
# Warmup Iteration  16: 355981.947 ops/s
# Warmup Iteration  17: 355407.674 ops/s
# Warmup Iteration  18: 374030.714 ops/s
# Warmup Iteration  19: 354789.091 ops/s
# Warmup Iteration  20: 358580.539 ops/s
# Warmup Iteration  21: 367416.148 ops/s
# Warmup Iteration  22: 349276.831 ops/s
# Warmup Iteration  23: 365427.206 ops/s
# Warmup Iteration  24: 351406.452 ops/s
# Warmup Iteration  25: 357509.761 ops/s
# Warmup Iteration  26: 366788.983 ops/s
# Warmup Iteration  27: 348553.870 ops/s
# Warmup Iteration  28: 370164.168 ops/s
# Warmup Iteration  29: 359138.513 ops/s
# Warmup Iteration  30: 354105.054 ops/s
Iteration   1: 359867.902 ops/s
Iteration   2: 358810.643 ops/s
Iteration   3: 334725.763 ops/s
Iteration   4: 333883.954 ops/s
Iteration   5: 366945.880 ops/s
Iteration   6: 341843.687 ops/s
Iteration   7: 374556.362 ops/s
Iteration   8: 367842.074 ops/s
Iteration   9: 338174.268 ops/s
Iteration  10: 369676.159 ops/s
Iteration  11: 347088.108 ops/s
Iteration  12: 365941.685 ops/s
Iteration  13: 353451.484 ops/s
Iteration  14: 371253.551 ops/s
Iteration  15: 348538.910 ops/s
Iteration  16: 360685.833 ops/s
Iteration  17: 368116.186 ops/s
Iteration  18: 367192.784 ops/s
Iteration  19: 369105.139 ops/s
Iteration  20: 368191.994 ops/s
Iteration  21: 360361.564 ops/s
Iteration  22: 368550.244 ops/s
Iteration  23: 348503.848 ops/s
Iteration  24: 366948.145 ops/s
Iteration  25: 370438.922 ops/s
Iteration  26: 362625.291 ops/s
Iteration  27: 360508.128 ops/s
Iteration  28: 365636.235 ops/s
Iteration  29: 361620.094 ops/s
Iteration  30: 365578.191 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptionalTest._Benchmark.benchmark_invalidSubscriberCount":
  359888.768 ±(99.9%) 7596.887 ops/s [Average]
  (min, avg, max) = (333883.954, 359888.768, 374556.362), stdev = 11370.664
  CI (99.9%): [352291.880, 367485.655] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score      Error  Units
ParallelMapTryOptionalTest._Benchmark.benchmark_invalidSubscriberCount  thrpt   30  359888.768 ± 7596.887  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableMapOptionalTest._Benchmark.benchmark_mapperNullConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableMapOptionalTest._Benchmark.benchmark_mapperNullConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 63488.430 ops/s
# Warmup Iteration   2: 254640.976 ops/s
# Warmup Iteration   3: 452264.301 ops/s
# Warmup Iteration   4: 444500.424 ops/s
# Warmup Iteration   5: 421280.569 ops/s
# Warmup Iteration   6: 467946.507 ops/s
# Warmup Iteration   7: 491910.413 ops/s
# Warmup Iteration   8: 469823.916 ops/s
# Warmup Iteration   9: 481501.397 ops/s
# Warmup Iteration  10: 469628.730 ops/s
# Warmup Iteration  11: 467838.141 ops/s
# Warmup Iteration  12: 483345.100 ops/s
# Warmup Iteration  13: 472950.801 ops/s
# Warmup Iteration  14: 484112.791 ops/s
# Warmup Iteration  15: 478855.211 ops/s
# Warmup Iteration  16: 488492.677 ops/s
# Warmup Iteration  17: 483719.698 ops/s
# Warmup Iteration  18: 491672.423 ops/s
# Warmup Iteration  19: 488948.914 ops/s
# Warmup Iteration  20: 491439.209 ops/s
# Warmup Iteration  21: 502158.100 ops/s
# Warmup Iteration  22: 476263.880 ops/s
# Warmup Iteration  23: 506767.836 ops/s
# Warmup Iteration  24: 479181.868 ops/s
# Warmup Iteration  25: 489730.859 ops/s
# Warmup Iteration  26: 498766.820 ops/s
# Warmup Iteration  27: 480632.441 ops/s
# Warmup Iteration  28: 501280.171 ops/s
# Warmup Iteration  29: 484040.841 ops/s
# Warmup Iteration  30: 496667.533 ops/s
Iteration   1: 485640.385 ops/s
Iteration   2: 494803.761 ops/s
Iteration   3: 475406.945 ops/s
Iteration   4: 498692.065 ops/s
Iteration   5: 511755.363 ops/s
Iteration   6: 476906.853 ops/s
Iteration   7: 507056.678 ops/s
Iteration   8: 498361.224 ops/s
Iteration   9: 488749.466 ops/s
Iteration  10: 507792.677 ops/s
Iteration  11: 484268.203 ops/s
Iteration  12: 514356.657 ops/s
Iteration  13: 479048.861 ops/s
Iteration  14: 492700.510 ops/s
Iteration  15: 498516.620 ops/s
Iteration  16: 484840.200 ops/s
Iteration  17: 507877.345 ops/s
Iteration  18: 477716.404 ops/s
Iteration  19: 475967.714 ops/s
Iteration  20: 505169.003 ops/s
Iteration  21: 473475.834 ops/s
Iteration  22: 506079.594 ops/s
Iteration  23: 467709.221 ops/s
Iteration  24: 479615.486 ops/s
Iteration  25: 496908.887 ops/s
Iteration  26: 494063.975 ops/s
Iteration  27: 503251.964 ops/s
Iteration  28: 478514.884 ops/s
Iteration  29: 512241.706 ops/s
Iteration  30: 479654.969 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableMapOptionalTest._Benchmark.benchmark_mapperNullConditional":
  491904.782 ±(99.9%) 9121.321 ops/s [Average]
  (min, avg, max) = (467709.221, 491904.782, 514356.657), stdev = 13652.365
  CI (99.9%): [482783.461, 501026.103] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score      Error  Units
FlowableMapOptionalTest._Benchmark.benchmark_mapperNullConditional  thrpt   30  491904.782 ± 9121.321  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFilterTest._Benchmark.benchmark_sourceIgnoresCancel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFilterTest._Benchmark.benchmark_sourceIgnoresCancel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 27710.422 ops/s
# Warmup Iteration   2: 116891.950 ops/s
# Warmup Iteration   3: 154333.348 ops/s
# Warmup Iteration   4: 160223.081 ops/s
# Warmup Iteration   5: 173321.604 ops/s
# Warmup Iteration   6: 166913.176 ops/s
# Warmup Iteration   7: 170090.278 ops/s
# Warmup Iteration   8: 173309.765 ops/s
# Warmup Iteration   9: 166853.375 ops/s
# Warmup Iteration  10: 171967.981 ops/s
# Warmup Iteration  11: 166640.213 ops/s
# Warmup Iteration  12: 172753.534 ops/s
# Warmup Iteration  13: 154652.405 ops/s
# Warmup Iteration  14: 164949.448 ops/s
# Warmup Iteration  15: 167657.084 ops/s
# Warmup Iteration  16: 169010.870 ops/s
# Warmup Iteration  17: 182109.666 ops/s
# Warmup Iteration  18: 169312.601 ops/s
# Warmup Iteration  19: 180862.892 ops/s
# Warmup Iteration  20: 176094.466 ops/s
# Warmup Iteration  21: 180860.758 ops/s
# Warmup Iteration  22: 185650.055 ops/s
# Warmup Iteration  23: 173334.197 ops/s
# Warmup Iteration  24: 173176.005 ops/s
# Warmup Iteration  25: 180689.020 ops/s
# Warmup Iteration  26: 177694.237 ops/s
# Warmup Iteration  27: 177398.637 ops/s
# Warmup Iteration  28: 136604.197 ops/s
# Warmup Iteration  29: 181025.760 ops/s
# Warmup Iteration  30: 178498.350 ops/s
Iteration   1: 171608.098 ops/s
Iteration   2: 177037.623 ops/s
Iteration   3: 169986.186 ops/s
Iteration   4: 180359.510 ops/s
Iteration   5: 168385.754 ops/s
Iteration   6: 180301.278 ops/s
Iteration   7: 184684.617 ops/s
Iteration   8: 173940.855 ops/s
Iteration   9: 180348.616 ops/s
Iteration  10: 176679.618 ops/s
Iteration  11: 171470.783 ops/s
Iteration  12: 178829.487 ops/s
Iteration  13: 177869.073 ops/s
Iteration  14: 174549.181 ops/s
Iteration  15: 174417.928 ops/s
Iteration  16: 173449.254 ops/s
Iteration  17: 182041.117 ops/s
Iteration  18: 176878.875 ops/s
Iteration  19: 171093.401 ops/s
Iteration  20: 180960.351 ops/s
Iteration  21: 176222.915 ops/s
Iteration  22: 179634.333 ops/s
Iteration  23: 172152.887 ops/s
Iteration  24: 177590.552 ops/s
Iteration  25: 174656.053 ops/s
Iteration  26: 181219.523 ops/s
Iteration  27: 177095.829 ops/s
Iteration  28: 169467.298 ops/s
Iteration  29: 178238.283 ops/s
Iteration  30: 175131.664 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFilterTest._Benchmark.benchmark_sourceIgnoresCancel":
  176210.031 ±(99.9%) 2740.919 ops/s [Average]
  (min, avg, max) = (168385.754, 176210.031, 184684.617), stdev = 4102.478
  CI (99.9%): [173469.113, 178950.950] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
FlowableFilterTest._Benchmark.benchmark_sourceIgnoresCancel  thrpt   30  176210.031 ± 2740.919  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriberTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriberTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 57008.822 ops/s
# Warmup Iteration   2: 410032.433 ops/s
# Warmup Iteration   3: 459635.086 ops/s
# Warmup Iteration   4: 457245.769 ops/s
# Warmup Iteration   5: 454613.448 ops/s
# Warmup Iteration   6: 449289.392 ops/s
# Warmup Iteration   7: 468863.549 ops/s
# Warmup Iteration   8: 471597.331 ops/s
# Warmup Iteration   9: 473157.418 ops/s
# Warmup Iteration  10: 474226.356 ops/s
# Warmup Iteration  11: 470780.360 ops/s
# Warmup Iteration  12: 460812.778 ops/s
# Warmup Iteration  13: 482062.221 ops/s
# Warmup Iteration  14: 464491.309 ops/s
# Warmup Iteration  15: 475860.489 ops/s
# Warmup Iteration  16: 446262.145 ops/s
# Warmup Iteration  17: 483994.864 ops/s
# Warmup Iteration  18: 478828.215 ops/s
# Warmup Iteration  19: 489194.819 ops/s
# Warmup Iteration  20: 481622.694 ops/s
# Warmup Iteration  21: 481795.457 ops/s
# Warmup Iteration  22: 499468.292 ops/s
# Warmup Iteration  23: 474636.337 ops/s
# Warmup Iteration  24: 480507.110 ops/s
# Warmup Iteration  25: 481100.778 ops/s
# Warmup Iteration  26: 476174.074 ops/s
# Warmup Iteration  27: 482356.501 ops/s
# Warmup Iteration  28: 475245.743 ops/s
# Warmup Iteration  29: 481122.735 ops/s
# Warmup Iteration  30: 505460.442 ops/s
Iteration   1: 468681.304 ops/s
Iteration   2: 509134.892 ops/s
Iteration   3: 476624.929 ops/s
Iteration   4: 497499.497 ops/s
Iteration   5: 473546.919 ops/s
Iteration   6: 490010.232 ops/s
Iteration   7: 481721.196 ops/s
Iteration   8: 478667.422 ops/s
Iteration   9: 499620.041 ops/s
Iteration  10: 469011.569 ops/s
Iteration  11: 497424.828 ops/s
Iteration  12: 479490.520 ops/s
Iteration  13: 482348.025 ops/s
Iteration  14: 497031.996 ops/s
Iteration  15: 501876.368 ops/s
Iteration  16: 474458.286 ops/s
Iteration  17: 499482.428 ops/s
Iteration  18: 468529.807 ops/s
Iteration  19: 497861.051 ops/s
Iteration  20: 488504.177 ops/s
Iteration  21: 475627.039 ops/s
Iteration  22: 491810.200 ops/s
Iteration  23: 477006.266 ops/s
Iteration  24: 490026.447 ops/s
Iteration  25: 480513.989 ops/s
Iteration  26: 502127.101 ops/s
Iteration  27: 483813.901 ops/s
Iteration  28: 503983.857 ops/s
Iteration  29: 475149.559 ops/s
Iteration  30: 500902.888 ops/s


Result "io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriberTest._Benchmark.benchmark_doubleOnSubscribe":
  487082.891 ±(99.9%) 8098.797 ops/s [Average]
  (min, avg, max) = (468529.807, 487082.891, 509134.892), stdev = 12121.899
  CI (99.9%): [478984.094, 495181.688] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt       Score      Error  Units
BasicFuseableConditionalSubscriberTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  487082.891 ± 8098.797  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategyTest._Benchmark.benchmark_badSource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategyTest._Benchmark.benchmark_badSource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 39809.673 ops/s
# Warmup Iteration   2: 165919.612 ops/s
# Warmup Iteration   3: 215970.580 ops/s
# Warmup Iteration   4: 214596.014 ops/s
# Warmup Iteration   5: 226290.920 ops/s
# Warmup Iteration   6: 219492.465 ops/s
# Warmup Iteration   7: 214208.068 ops/s
# Warmup Iteration   8: 216664.566 ops/s
# Warmup Iteration   9: 208411.673 ops/s
# Warmup Iteration  10: 215017.645 ops/s
# Warmup Iteration  11: 217154.078 ops/s
# Warmup Iteration  12: 227297.088 ops/s
# Warmup Iteration  13: 221374.067 ops/s
# Warmup Iteration  14: 216154.094 ops/s
# Warmup Iteration  15: 224477.450 ops/s
# Warmup Iteration  16: 221192.684 ops/s
# Warmup Iteration  17: 231627.489 ops/s
# Warmup Iteration  18: 220254.041 ops/s
# Warmup Iteration  19: 154827.047 ops/s
# Warmup Iteration  20: 227615.001 ops/s
# Warmup Iteration  21: 216900.666 ops/s
# Warmup Iteration  22: 224044.668 ops/s
# Warmup Iteration  23: 223062.749 ops/s
# Warmup Iteration  24: 229214.940 ops/s
# Warmup Iteration  25: 220458.547 ops/s
# Warmup Iteration  26: 218127.229 ops/s
# Warmup Iteration  27: 221940.602 ops/s
# Warmup Iteration  28: 217597.002 ops/s
# Warmup Iteration  29: 224088.519 ops/s
# Warmup Iteration  30: 220708.667 ops/s
Iteration   1: 224968.151 ops/s
Iteration   2: 230956.962 ops/s
Iteration   3: 227720.093 ops/s
Iteration   4: 219343.581 ops/s
Iteration   5: 231112.177 ops/s
Iteration   6: 214845.978 ops/s
Iteration   7: 234714.732 ops/s
Iteration   8: 213069.765 ops/s
Iteration   9: 226167.477 ops/s
Iteration  10: 226629.305 ops/s
Iteration  11: 218294.145 ops/s
Iteration  12: 225365.143 ops/s
Iteration  13: 214247.377 ops/s
Iteration  14: 220880.394 ops/s
Iteration  15: 224864.239 ops/s
Iteration  16: 222734.006 ops/s
Iteration  17: 224713.003 ops/s
Iteration  18: 227581.479 ops/s
Iteration  19: 221051.315 ops/s
Iteration  20: 223606.222 ops/s
Iteration  21: 212377.927 ops/s
Iteration  22: 234132.961 ops/s
Iteration  23: 219369.237 ops/s
Iteration  24: 227537.552 ops/s
Iteration  25: 222846.023 ops/s
Iteration  26: 228201.176 ops/s
Iteration  27: 219077.167 ops/s
Iteration  28: 224662.040 ops/s
Iteration  29: 232786.427 ops/s
Iteration  30: 214266.427 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategyTest._Benchmark.benchmark_badSource":
  223604.083 ±(99.9%) 4136.290 ops/s [Average]
  (min, avg, max) = (212377.927, 223604.083, 234714.732), stdev = 6191.005
  CI (99.9%): [219467.792, 227740.373] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score      Error  Units
FlowableOnBackpressureBufferStrategyTest._Benchmark.benchmark_badSource  thrpt   30  223604.083 ± 4136.290  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 213120.453 ops/s
# Warmup Iteration   2: 812074.303 ops/s
# Warmup Iteration   3: 1465426.200 ops/s
# Warmup Iteration   4: 1884969.204 ops/s
# Warmup Iteration   5: 1920376.261 ops/s
# Warmup Iteration   6: 1929427.875 ops/s
# Warmup Iteration   7: 1869453.441 ops/s
# Warmup Iteration   8: 1978694.740 ops/s
# Warmup Iteration   9: 1909700.673 ops/s
# Warmup Iteration  10: 1828406.138 ops/s
# Warmup Iteration  11: 1845315.790 ops/s
# Warmup Iteration  12: 1913134.780 ops/s
# Warmup Iteration  13: 1889247.189 ops/s
# Warmup Iteration  14: 1951810.978 ops/s
# Warmup Iteration  15: 1930006.626 ops/s
# Warmup Iteration  16: 1921033.339 ops/s
# Warmup Iteration  17: 1910880.326 ops/s
# Warmup Iteration  18: 1909034.617 ops/s
# Warmup Iteration  19: 1990434.486 ops/s
# Warmup Iteration  20: 1932222.335 ops/s
# Warmup Iteration  21: 1944796.640 ops/s
# Warmup Iteration  22: 1876316.475 ops/s
# Warmup Iteration  23: 1924879.488 ops/s
# Warmup Iteration  24: 1962571.563 ops/s
# Warmup Iteration  25: 1894926.203 ops/s
# Warmup Iteration  26: 1983579.870 ops/s
# Warmup Iteration  27: 1892085.480 ops/s
# Warmup Iteration  28: 1902081.567 ops/s
# Warmup Iteration  29: 1970749.050 ops/s
# Warmup Iteration  30: 1947935.413 ops/s
Iteration   1: 1979279.158 ops/s
Iteration   2: 1928108.537 ops/s
Iteration   3: 1975162.224 ops/s
Iteration   4: 1558570.529 ops/s
Iteration   5: 1873376.454 ops/s
Iteration   6: 1895124.036 ops/s
Iteration   7: 1828919.380 ops/s
Iteration   8: 1944349.665 ops/s
Iteration   9: 1851051.677 ops/s
Iteration  10: 1879572.359 ops/s
Iteration  11: 1964589.759 ops/s
Iteration  12: 1855848.801 ops/s
Iteration  13: 2017314.138 ops/s
Iteration  14: 1906990.317 ops/s
Iteration  15: 1894494.854 ops/s
Iteration  16: 1944503.499 ops/s
Iteration  17: 1852719.057 ops/s
Iteration  18: 1937223.164 ops/s
Iteration  19: 1970243.420 ops/s
Iteration  20: 1866613.194 ops/s
Iteration  21: 1923277.648 ops/s
Iteration  22: 1875279.343 ops/s
Iteration  23: 1912111.031 ops/s
Iteration  24: 1915219.578 ops/s
Iteration  25: 1871987.293 ops/s
Iteration  26: 1960903.553 ops/s
Iteration  27: 1863704.126 ops/s
Iteration  28: 1880610.193 ops/s
Iteration  29: 1967220.344 ops/s
Iteration  30: 1844233.620 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_dispose":
  1897953.365 ±(99.9%) 53606.991 ops/s [Average]
  (min, avg, max) = (1558570.529, 1897953.365, 2017314.138), stdev = 80236.426
  CI (99.9%): [1844346.374, 1951560.356] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score       Error  Units
FlowablePublishTest._Benchmark.benchmark_dispose  thrpt   30  1897953.365 ± 53606.991  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableIgnoreElementsTest._Benchmark.benchmark_unsubscribesFromUpstream$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableIgnoreElementsTest._Benchmark.benchmark_unsubscribesFromUpstream

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 209458.060 ops/s
# Warmup Iteration   2: 1498398.982 ops/s
# Warmup Iteration   3: 2167314.226 ops/s
# Warmup Iteration   4: 2309030.421 ops/s
# Warmup Iteration   5: 2488362.927 ops/s
# Warmup Iteration   6: 2367491.704 ops/s
# Warmup Iteration   7: 2310431.471 ops/s
# Warmup Iteration   8: 2329793.992 ops/s
# Warmup Iteration   9: 2395997.428 ops/s
# Warmup Iteration  10: 2251840.576 ops/s
# Warmup Iteration  11: 2338622.349 ops/s
# Warmup Iteration  12: 2272049.406 ops/s
# Warmup Iteration  13: 2310639.539 ops/s
# Warmup Iteration  14: 2378788.023 ops/s
# Warmup Iteration  15: 2361470.248 ops/s
# Warmup Iteration  16: 2330943.834 ops/s
# Warmup Iteration  17: 2350172.376 ops/s
# Warmup Iteration  18: 2393867.804 ops/s
# Warmup Iteration  19: 2302320.662 ops/s
# Warmup Iteration  20: 2428177.662 ops/s
# Warmup Iteration  21: 2280000.363 ops/s
# Warmup Iteration  22: 2387396.185 ops/s
# Warmup Iteration  23: 2440455.759 ops/s
# Warmup Iteration  24: 2234379.892 ops/s
# Warmup Iteration  25: 2368521.489 ops/s
# Warmup Iteration  26: 2418491.074 ops/s
# Warmup Iteration  27: 2265766.971 ops/s
# Warmup Iteration  28: 2384863.992 ops/s
# Warmup Iteration  29: 2361208.328 ops/s
# Warmup Iteration  30: 2299799.417 ops/s
Iteration   1: 2421728.805 ops/s
Iteration   2: 2286619.820 ops/s
Iteration   3: 2396219.873 ops/s
Iteration   4: 2412311.760 ops/s
Iteration   5: 2322804.865 ops/s
Iteration   6: 1869620.588 ops/s
Iteration   7: 2361187.633 ops/s
Iteration   8: 2505624.481 ops/s
Iteration   9: 2335754.537 ops/s
Iteration  10: 2295498.423 ops/s
Iteration  11: 2540219.660 ops/s
Iteration  12: 2350980.082 ops/s
Iteration  13: 2490262.049 ops/s
Iteration  14: 2492133.877 ops/s
Iteration  15: 2340898.537 ops/s
Iteration  16: 2312657.867 ops/s
Iteration  17: 2440790.406 ops/s
Iteration  18: 2287463.557 ops/s
Iteration  19: 2413257.398 ops/s
Iteration  20: 2377296.205 ops/s
Iteration  21: 2366116.238 ops/s
Iteration  22: 2333501.256 ops/s
Iteration  23: 2358764.247 ops/s
Iteration  24: 2462402.794 ops/s
Iteration  25: 2307099.565 ops/s
Iteration  26: 2433986.743 ops/s
Iteration  27: 2330978.599 ops/s
Iteration  28: 2357294.555 ops/s
Iteration  29: 2352834.473 ops/s
Iteration  30: 2371868.146 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableIgnoreElementsTest._Benchmark.benchmark_unsubscribesFromUpstream":
  2364272.568 ±(99.9%) 77037.304 ops/s [Average]
  (min, avg, max) = (1869620.588, 2364272.568, 2540219.660), stdev = 115305.819
  CI (99.9%): [2287235.264, 2441309.872] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score       Error  Units
ObservableIgnoreElementsTest._Benchmark.benchmark_unsubscribesFromUpstream  thrpt   30  2364272.568 ± 77037.304  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromCompletableTest._Benchmark.benchmark_fromCompletable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromCompletableTest._Benchmark.benchmark_fromCompletable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2092247.748 ops/s
# Warmup Iteration   2: 4823342.144 ops/s
# Warmup Iteration   3: 6726203.914 ops/s
# Warmup Iteration   4: 7111395.569 ops/s
# Warmup Iteration   5: 6745240.245 ops/s
# Warmup Iteration   6: 6999080.149 ops/s
# Warmup Iteration   7: 6847512.898 ops/s
# Warmup Iteration   8: 6890188.034 ops/s
# Warmup Iteration   9: 6859443.096 ops/s
# Warmup Iteration  10: 6710100.109 ops/s
# Warmup Iteration  11: 6643263.272 ops/s
# Warmup Iteration  12: 6689248.346 ops/s
# Warmup Iteration  13: 7078268.352 ops/s
# Warmup Iteration  14: 6775288.430 ops/s
# Warmup Iteration  15: 6705743.531 ops/s
# Warmup Iteration  16: 6993988.346 ops/s
# Warmup Iteration  17: 6822779.102 ops/s
# Warmup Iteration  18: 6726063.958 ops/s
# Warmup Iteration  19: 7150179.677 ops/s
# Warmup Iteration  20: 7085277.411 ops/s
# Warmup Iteration  21: 6696765.706 ops/s
# Warmup Iteration  22: 7185823.365 ops/s
# Warmup Iteration  23: 6843191.487 ops/s
# Warmup Iteration  24: 6760784.168 ops/s
# Warmup Iteration  25: 7119733.384 ops/s
# Warmup Iteration  26: 6918652.887 ops/s
# Warmup Iteration  27: 6704670.330 ops/s
# Warmup Iteration  28: 7040088.962 ops/s
# Warmup Iteration  29: 6870871.066 ops/s
# Warmup Iteration  30: 7045668.016 ops/s
Iteration   1: 7179025.388 ops/s
Iteration   2: 6983069.044 ops/s
Iteration   3: 7183377.106 ops/s
Iteration   4: 6599033.435 ops/s
Iteration   5: 6994454.461 ops/s
Iteration   6: 6734821.206 ops/s
Iteration   7: 6743733.951 ops/s
Iteration   8: 6997641.067 ops/s
Iteration   9: 5626214.150 ops/s
Iteration  10: 7059524.506 ops/s
Iteration  11: 6729850.676 ops/s
Iteration  12: 7057597.429 ops/s
Iteration  13: 6893345.769 ops/s
Iteration  14: 7063615.280 ops/s
Iteration  15: 7317210.131 ops/s
Iteration  16: 7257389.629 ops/s
Iteration  17: 6855675.261 ops/s
Iteration  18: 7034259.336 ops/s
Iteration  19: 7251203.892 ops/s
Iteration  20: 6854601.590 ops/s
Iteration  21: 7237060.986 ops/s
Iteration  22: 6933413.887 ops/s
Iteration  23: 7266390.936 ops/s
Iteration  24: 7309056.248 ops/s
Iteration  25: 6666726.369 ops/s
Iteration  26: 7184268.545 ops/s
Iteration  27: 6621377.050 ops/s
Iteration  28: 6889332.756 ops/s
Iteration  29: 6798965.385 ops/s
Iteration  30: 6973548.729 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFromCompletableTest._Benchmark.benchmark_fromCompletable":
  6943192.807 ±(99.9%) 218104.084 ops/s [Average]
  (min, avg, max) = (5626214.150, 6943192.807, 7317210.131), stdev = 326447.950
  CI (99.9%): [6725088.723, 7161296.891] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score        Error  Units
ObservableFromCompletableTest._Benchmark.benchmark_fromCompletable  thrpt   30  6943192.807 ± 218104.084  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromCompletableTest._Benchmark.benchmark_fromCompletableInvokesLazy$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromCompletableTest._Benchmark.benchmark_fromCompletableInvokesLazy

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 994814.856 ops/s
# Warmup Iteration   2: 5065179.833 ops/s
# Warmup Iteration   3: 5979811.072 ops/s
# Warmup Iteration   4: 6838703.375 ops/s
# Warmup Iteration   5: 6843048.397 ops/s
# Warmup Iteration   6: 6945910.899 ops/s
# Warmup Iteration   7: 7010504.262 ops/s
# Warmup Iteration   8: 6736060.305 ops/s
# Warmup Iteration   9: 7117530.935 ops/s
# Warmup Iteration  10: 6698759.381 ops/s
# Warmup Iteration  11: 6772271.068 ops/s
# Warmup Iteration  12: 6948122.520 ops/s
# Warmup Iteration  13: 6597147.038 ops/s
# Warmup Iteration  14: 6994719.551 ops/s
# Warmup Iteration  15: 6812469.365 ops/s
# Warmup Iteration  16: 7162702.003 ops/s
# Warmup Iteration  17: 6754166.394 ops/s
# Warmup Iteration  18: 7144290.355 ops/s
# Warmup Iteration  19: 7376023.821 ops/s
# Warmup Iteration  20: 6873223.110 ops/s
# Warmup Iteration  21: 7238183.959 ops/s
# Warmup Iteration  22: 7156799.411 ops/s
# Warmup Iteration  23: 6708925.932 ops/s
# Warmup Iteration  24: 7148606.028 ops/s
# Warmup Iteration  25: 6937560.663 ops/s
# Warmup Iteration  26: 6882914.856 ops/s
# Warmup Iteration  27: 7264112.732 ops/s
# Warmup Iteration  28: 6852171.563 ops/s
# Warmup Iteration  29: 6986360.878 ops/s
# Warmup Iteration  30: 7342268.991 ops/s
Iteration   1: 6759170.174 ops/s
Iteration   2: 7334550.791 ops/s
Iteration   3: 6730378.678 ops/s
Iteration   4: 7234231.769 ops/s
Iteration   5: 7049975.379 ops/s
Iteration   6: 7154218.176 ops/s
Iteration   7: 7047325.131 ops/s
Iteration   8: 6855778.507 ops/s
Iteration   9: 7291939.678 ops/s
Iteration  10: 6935704.427 ops/s
Iteration  11: 7163068.433 ops/s
Iteration  12: 6922864.912 ops/s
Iteration  13: 6837373.758 ops/s
Iteration  14: 7219288.618 ops/s
Iteration  15: 7075682.374 ops/s
Iteration  16: 7277534.062 ops/s
Iteration  17: 6777570.396 ops/s
Iteration  18: 7300916.625 ops/s
Iteration  19: 6838130.613 ops/s
Iteration  20: 7226085.809 ops/s
Iteration  21: 6800321.355 ops/s
Iteration  22: 7018623.721 ops/s
Iteration  23: 7220502.625 ops/s
Iteration  24: 7025090.649 ops/s
Iteration  25: 6951153.150 ops/s
Iteration  26: 6876197.811 ops/s
Iteration  27: 6985653.747 ops/s
Iteration  28: 7339585.304 ops/s
Iteration  29: 6802297.064 ops/s
Iteration  30: 7214397.235 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFromCompletableTest._Benchmark.benchmark_fromCompletableInvokesLazy":
  7042187.032 ±(99.9%) 129985.080 ops/s [Average]
  (min, avg, max) = (6730378.678, 7042187.032, 7339585.304), stdev = 194555.563
  CI (99.9%): [6912201.953, 7172172.112] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt        Score        Error  Units
ObservableFromCompletableTest._Benchmark.benchmark_fromCompletableInvokesLazy  thrpt   30  7042187.032 ± 129985.080  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromCompletableTest._Benchmark.benchmark_fromCompletableTwice$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromCompletableTest._Benchmark.benchmark_fromCompletableTwice

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 691420.302 ops/s
# Warmup Iteration   2: 2259879.331 ops/s
# Warmup Iteration   3: 3382736.497 ops/s
# Warmup Iteration   4: 3731069.110 ops/s
# Warmup Iteration   5: 3880456.431 ops/s
# Warmup Iteration   6: 3864823.315 ops/s
# Warmup Iteration   7: 3721377.473 ops/s
# Warmup Iteration   8: 3806976.283 ops/s
# Warmup Iteration   9: 3445354.900 ops/s
# Warmup Iteration  10: 3081086.502 ops/s
# Warmup Iteration  11: 3889538.452 ops/s
# Warmup Iteration  12: 3776622.457 ops/s
# Warmup Iteration  13: 3973631.755 ops/s
# Warmup Iteration  14: 3659046.615 ops/s
# Warmup Iteration  15: 3844529.652 ops/s
# Warmup Iteration  16: 3796101.365 ops/s
# Warmup Iteration  17: 3720946.182 ops/s
# Warmup Iteration  18: 3872928.559 ops/s
# Warmup Iteration  19: 3884923.973 ops/s
# Warmup Iteration  20: 3819041.382 ops/s
# Warmup Iteration  21: 3900275.219 ops/s
# Warmup Iteration  22: 3782151.995 ops/s
# Warmup Iteration  23: 3695205.380 ops/s
# Warmup Iteration  24: 3779920.171 ops/s
# Warmup Iteration  25: 3814178.395 ops/s
# Warmup Iteration  26: 3740381.586 ops/s
# Warmup Iteration  27: 3919080.673 ops/s
# Warmup Iteration  28: 3796143.358 ops/s
# Warmup Iteration  29: 3899311.951 ops/s
# Warmup Iteration  30: 3804275.213 ops/s
Iteration   1: 3884813.667 ops/s
Iteration   2: 3768122.632 ops/s
Iteration   3: 3863223.108 ops/s
Iteration   4: 3701177.980 ops/s
Iteration   5: 3805049.614 ops/s
Iteration   6: 3785318.289 ops/s
Iteration   7: 3942137.555 ops/s
Iteration   8: 3730249.640 ops/s
Iteration   9: 3836873.233 ops/s
Iteration  10: 3769939.637 ops/s
Iteration  11: 3924708.874 ops/s
Iteration  12: 3718598.035 ops/s
Iteration  13: 3930391.335 ops/s
Iteration  14: 3897384.440 ops/s
Iteration  15: 3754644.442 ops/s
Iteration  16: 3948582.676 ops/s
Iteration  17: 3824777.523 ops/s
Iteration  18: 3837730.089 ops/s
Iteration  19: 3885060.715 ops/s
Iteration  20: 3716583.036 ops/s
Iteration  21: 3902287.764 ops/s
Iteration  22: 3827566.812 ops/s
Iteration  23: 3823796.155 ops/s
Iteration  24: 3846850.367 ops/s
Iteration  25: 3763007.112 ops/s
Iteration  26: 4018767.374 ops/s
Iteration  27: 3764755.379 ops/s
Iteration  28: 3870881.994 ops/s
Iteration  29: 3728840.481 ops/s
Iteration  30: 3828523.957 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFromCompletableTest._Benchmark.benchmark_fromCompletableTwice":
  3830021.464 ±(99.9%) 53634.599 ops/s [Average]
  (min, avg, max) = (3701177.980, 3830021.464, 4018767.374), stdev = 80277.749
  CI (99.9%): [3776386.865, 3883656.063] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score       Error  Units
ObservableFromCompletableTest._Benchmark.benchmark_fromCompletableTwice  thrpt   30  3830021.464 ± 53634.599  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableIgnoreElementsTest._Benchmark.benchmark_unsubscribesFromUpstreamObservable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableIgnoreElementsTest._Benchmark.benchmark_unsubscribesFromUpstreamObservable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 318193.723 ops/s
# Warmup Iteration   2: 1601540.493 ops/s
# Warmup Iteration   3: 2172566.650 ops/s
# Warmup Iteration   4: 2372645.601 ops/s
# Warmup Iteration   5: 2426471.226 ops/s
# Warmup Iteration   6: 2415351.158 ops/s
# Warmup Iteration   7: 2377938.447 ops/s
# Warmup Iteration   8: 2451384.843 ops/s
# Warmup Iteration   9: 2327512.711 ops/s
# Warmup Iteration  10: 2427612.018 ops/s
# Warmup Iteration  11: 2380954.717 ops/s
# Warmup Iteration  12: 2374877.252 ops/s
# Warmup Iteration  13: 2337770.890 ops/s
# Warmup Iteration  14: 2231498.647 ops/s
# Warmup Iteration  15: 2430080.967 ops/s
# Warmup Iteration  16: 2545102.804 ops/s
# Warmup Iteration  17: 2384418.626 ops/s
# Warmup Iteration  18: 2414972.064 ops/s
# Warmup Iteration  19: 2446495.205 ops/s
# Warmup Iteration  20: 2483577.796 ops/s
# Warmup Iteration  21: 2360402.661 ops/s
# Warmup Iteration  22: 2243428.339 ops/s
# Warmup Iteration  23: 2497835.696 ops/s
# Warmup Iteration  24: 2304906.905 ops/s
# Warmup Iteration  25: 2403828.983 ops/s
# Warmup Iteration  26: 2433250.089 ops/s
# Warmup Iteration  27: 2414359.911 ops/s
# Warmup Iteration  28: 2360270.951 ops/s
# Warmup Iteration  29: 2508499.064 ops/s
# Warmup Iteration  30: 2404856.175 ops/s
Iteration   1: 2489139.585 ops/s
Iteration   2: 2429931.680 ops/s
Iteration   3: 2412728.390 ops/s
Iteration   4: 2374513.604 ops/s
Iteration   5: 2544955.139 ops/s
Iteration   6: 2329204.845 ops/s
Iteration   7: 2472245.087 ops/s
Iteration   8: 2452389.153 ops/s
Iteration   9: 2410432.693 ops/s
Iteration  10: 2471889.697 ops/s
Iteration  11: 2360847.775 ops/s
Iteration  12: 2541240.166 ops/s
Iteration  13: 2401510.128 ops/s
Iteration  14: 2396377.745 ops/s
Iteration  15: 2445436.937 ops/s
Iteration  16: 2388737.084 ops/s
Iteration  17: 2503963.085 ops/s
Iteration  18: 2406855.148 ops/s
Iteration  19: 2392049.347 ops/s
Iteration  20: 2563170.344 ops/s
Iteration  21: 2331046.974 ops/s
Iteration  22: 2435079.555 ops/s
Iteration  23: 2407675.287 ops/s
Iteration  24: 2510630.408 ops/s
Iteration  25: 2310736.453 ops/s
Iteration  26: 2489014.554 ops/s
Iteration  27: 2438286.226 ops/s
Iteration  28: 2346731.873 ops/s
Iteration  29: 2481017.921 ops/s
Iteration  30: 2387853.348 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableIgnoreElementsTest._Benchmark.benchmark_unsubscribesFromUpstreamObservable":
  2430856.341 ±(99.9%) 44174.234 ops/s [Average]
  (min, avg, max) = (2310736.453, 2430856.341, 2563170.344), stdev = 66117.919
  CI (99.9%): [2386682.107, 2475030.575] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              Mode  Cnt        Score       Error  Units
ObservableIgnoreElementsTest._Benchmark.benchmark_unsubscribesFromUpstreamObservable  thrpt   30  2430856.341 ± 44174.234  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableHideTest._Benchmark.benchmark_complete$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableHideTest._Benchmark.benchmark_complete

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3366398.622 ops/s
# Warmup Iteration   2: 6302328.154 ops/s
# Warmup Iteration   3: 8490194.276 ops/s
# Warmup Iteration   4: 5711381.664 ops/s
# Warmup Iteration   5: 8374061.283 ops/s
# Warmup Iteration   6: 8718066.683 ops/s
# Warmup Iteration   7: 8103059.229 ops/s
# Warmup Iteration   8: 8415846.894 ops/s
# Warmup Iteration   9: 8288550.987 ops/s
# Warmup Iteration  10: 8592074.116 ops/s
# Warmup Iteration  11: 8287000.728 ops/s
# Warmup Iteration  12: 8581190.673 ops/s
# Warmup Iteration  13: 8329195.940 ops/s
# Warmup Iteration  14: 8398737.998 ops/s
# Warmup Iteration  15: 8703560.113 ops/s
# Warmup Iteration  16: 8173982.187 ops/s
# Warmup Iteration  17: 8757512.666 ops/s
# Warmup Iteration  18: 8405408.590 ops/s
# Warmup Iteration  19: 8500435.610 ops/s
# Warmup Iteration  20: 8454265.931 ops/s
# Warmup Iteration  21: 8353003.615 ops/s
# Warmup Iteration  22: 8668575.278 ops/s
# Warmup Iteration  23: 8277295.560 ops/s
# Warmup Iteration  24: 8389187.891 ops/s
# Warmup Iteration  25: 8404912.491 ops/s
# Warmup Iteration  26: 8483567.676 ops/s
# Warmup Iteration  27: 8647735.643 ops/s
# Warmup Iteration  28: 8028874.884 ops/s
# Warmup Iteration  29: 8654922.810 ops/s
# Warmup Iteration  30: 8514534.775 ops/s
Iteration   1: 8647700.636 ops/s
Iteration   2: 8338533.037 ops/s
Iteration   3: 8644497.433 ops/s
Iteration   4: 8345889.702 ops/s
Iteration   5: 8261980.108 ops/s
Iteration   6: 8735271.931 ops/s
Iteration   7: 8352391.821 ops/s
Iteration   8: 8195835.581 ops/s
Iteration   9: 8748072.888 ops/s
Iteration  10: 8320611.072 ops/s
Iteration  11: 8752733.527 ops/s
Iteration  12: 8275252.996 ops/s
Iteration  13: 8493841.513 ops/s
Iteration  14: 8457402.321 ops/s
Iteration  15: 8254361.447 ops/s
Iteration  16: 8470193.527 ops/s
Iteration  17: 8421697.320 ops/s
Iteration  18: 8520747.601 ops/s
Iteration  19: 8410413.418 ops/s
Iteration  20: 8546337.589 ops/s
Iteration  21: 8276737.791 ops/s
Iteration  22: 8678847.644 ops/s
Iteration  23: 8120016.072 ops/s
Iteration  24: 8330308.276 ops/s
Iteration  25: 8566878.499 ops/s
Iteration  26: 8495547.015 ops/s
Iteration  27: 8773477.307 ops/s
Iteration  28: 8182447.411 ops/s
Iteration  29: 8425268.625 ops/s
Iteration  30: 8831974.008 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableHideTest._Benchmark.benchmark_complete":
  8462508.937 ±(99.9%) 131035.007 ops/s [Average]
  (min, avg, max) = (8120016.072, 8462508.937, 8831974.008), stdev = 196127.045
  CI (99.9%): [8331473.930, 8593543.944] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score        Error  Units
CompletableHideTest._Benchmark.benchmark_complete  thrpt   30  8462508.937 ± 131035.007  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.BlockingObservableLatestTest._Benchmark.benchmark_remove$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.BlockingObservableLatestTest._Benchmark.benchmark_remove

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 467554.062 ops/s
# Warmup Iteration   2: 667565.172 ops/s
# Warmup Iteration   3: 689636.155 ops/s
# Warmup Iteration   4: 710727.566 ops/s
# Warmup Iteration   5: 697109.025 ops/s
# Warmup Iteration   6: 643913.030 ops/s
# Warmup Iteration   7: 752976.329 ops/s
# Warmup Iteration   8: 737487.942 ops/s
# Warmup Iteration   9: 760989.898 ops/s
# Warmup Iteration  10: 711443.967 ops/s
# Warmup Iteration  11: 755866.110 ops/s
# Warmup Iteration  12: 725555.304 ops/s
# Warmup Iteration  13: 768108.064 ops/s
# Warmup Iteration  14: 738462.969 ops/s
# Warmup Iteration  15: 742850.906 ops/s
# Warmup Iteration  16: 737469.595 ops/s
# Warmup Iteration  17: 785041.087 ops/s
# Warmup Iteration  18: 820257.798 ops/s
# Warmup Iteration  19: 818186.358 ops/s
# Warmup Iteration  20: 811220.225 ops/s
# Warmup Iteration  21: 767239.398 ops/s
# Warmup Iteration  22: 820304.433 ops/s
# Warmup Iteration  23: 810417.314 ops/s
# Warmup Iteration  24: 768311.741 ops/s
# Warmup Iteration  25: 758836.272 ops/s
# Warmup Iteration  26: 808608.635 ops/s
# Warmup Iteration  27: 787065.618 ops/s
# Warmup Iteration  28: 790578.861 ops/s
# Warmup Iteration  29: 788745.287 ops/s
# Warmup Iteration  30: 800370.197 ops/s
Iteration   1: 778238.052 ops/s
Iteration   2: 771669.281 ops/s
Iteration   3: 815163.936 ops/s
Iteration   4: 759036.755 ops/s
Iteration   5: 795273.059 ops/s
Iteration   6: 771058.629 ops/s
Iteration   7: 795101.501 ops/s
Iteration   8: 790156.001 ops/s
Iteration   9: 770181.439 ops/s
Iteration  10: 808255.364 ops/s
Iteration  11: 796988.861 ops/s
Iteration  12: 756896.099 ops/s
Iteration  13: 790513.728 ops/s
Iteration  14: 780336.176 ops/s
Iteration  15: 784594.143 ops/s
Iteration  16: 795422.347 ops/s
Iteration  17: 781264.671 ops/s
Iteration  18: 801968.512 ops/s
Iteration  19: 804190.118 ops/s
Iteration  20: 764193.242 ops/s
Iteration  21: 804394.578 ops/s
Iteration  22: 778395.146 ops/s
Iteration  23: 808133.973 ops/s
Iteration  24: 752176.385 ops/s
Iteration  25: 778443.447 ops/s
Iteration  26: 803549.888 ops/s
Iteration  27: 796573.286 ops/s
Iteration  28: 761983.026 ops/s
Iteration  29: 793775.642 ops/s
Iteration  30: 788977.645 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.BlockingObservableLatestTest._Benchmark.benchmark_remove":
  785896.831 ±(99.9%) 11333.999 ops/s [Average]
  (min, avg, max) = (752176.385, 785896.831, 815163.936), stdev = 16964.197
  CI (99.9%): [774562.832, 797230.830] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score       Error  Units
BlockingObservableLatestTest._Benchmark.benchmark_remove  thrpt   30  785896.831 ± 11333.999  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromCompletableTest._Benchmark.benchmark_cancelWhileRunning$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromCompletableTest._Benchmark.benchmark_cancelWhileRunning

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1056892.351 ops/s
# Warmup Iteration   2: 4875923.449 ops/s
# Warmup Iteration   3: 5572222.606 ops/s
# Warmup Iteration   4: 6598944.575 ops/s
# Warmup Iteration   5: 6144728.790 ops/s
# Warmup Iteration   6: 6620261.289 ops/s
# Warmup Iteration   7: 6288632.842 ops/s
# Warmup Iteration   8: 6443393.446 ops/s
# Warmup Iteration   9: 6570138.754 ops/s
# Warmup Iteration  10: 6292874.054 ops/s
# Warmup Iteration  11: 6346307.127 ops/s
# Warmup Iteration  12: 6519225.177 ops/s
# Warmup Iteration  13: 6577415.295 ops/s
# Warmup Iteration  14: 6514936.750 ops/s
# Warmup Iteration  15: 6583043.556 ops/s
# Warmup Iteration  16: 6510283.606 ops/s
# Warmup Iteration  17: 6535783.737 ops/s
# Warmup Iteration  18: 6641076.485 ops/s
# Warmup Iteration  19: 6340038.195 ops/s
# Warmup Iteration  20: 6647884.798 ops/s
# Warmup Iteration  21: 6342853.354 ops/s
# Warmup Iteration  22: 6480182.948 ops/s
# Warmup Iteration  23: 6479366.643 ops/s
# Warmup Iteration  24: 6524542.812 ops/s
# Warmup Iteration  25: 6392066.069 ops/s
# Warmup Iteration  26: 6543799.797 ops/s
# Warmup Iteration  27: 6278068.751 ops/s
# Warmup Iteration  28: 6589702.411 ops/s
# Warmup Iteration  29: 6221094.134 ops/s
# Warmup Iteration  30: 6408687.781 ops/s
Iteration   1: 6461598.481 ops/s
Iteration   2: 6325474.299 ops/s
Iteration   3: 6558374.757 ops/s
Iteration   4: 6312466.812 ops/s
Iteration   5: 6752973.031 ops/s
Iteration   6: 6322640.437 ops/s
Iteration   7: 6579007.055 ops/s
Iteration   8: 6350789.996 ops/s
Iteration   9: 6416005.970 ops/s
Iteration  10: 6364097.259 ops/s
Iteration  11: 6374066.846 ops/s
Iteration  12: 6608391.635 ops/s
Iteration  13: 6566361.842 ops/s
Iteration  14: 6606485.717 ops/s
Iteration  15: 6672538.384 ops/s
Iteration  16: 6167000.452 ops/s
Iteration  17: 6694658.875 ops/s
Iteration  18: 6442940.321 ops/s
Iteration  19: 6607167.206 ops/s
Iteration  20: 6426599.001 ops/s
Iteration  21: 6477448.940 ops/s
Iteration  22: 6444177.000 ops/s
Iteration  23: 6372341.856 ops/s
Iteration  24: 6630584.158 ops/s
Iteration  25: 6340987.075 ops/s
Iteration  26: 6690704.652 ops/s
Iteration  27: 6323027.912 ops/s
Iteration  28: 6491367.671 ops/s
Iteration  29: 6470545.141 ops/s
Iteration  30: 6563742.162 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFromCompletableTest._Benchmark.benchmark_cancelWhileRunning":
  6480485.498 ±(99.9%) 94936.309 ops/s [Average]
  (min, avg, max) = (6167000.452, 6480485.498, 6752973.031), stdev = 142096.208
  CI (99.9%): [6385549.189, 6575421.807] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
ObservableFromCompletableTest._Benchmark.benchmark_cancelWhileRunning  thrpt   30  6480485.498 ± 94936.309  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletableTest._Benchmark.benchmark_emptyScalarSource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletableTest._Benchmark.benchmark_emptyScalarSource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2468440.263 ops/s
# Warmup Iteration   2: 5792448.628 ops/s
# Warmup Iteration   3: 7819105.215 ops/s
# Warmup Iteration   4: 7962923.207 ops/s
# Warmup Iteration   5: 8347097.125 ops/s
# Warmup Iteration   6: 8217509.680 ops/s
# Warmup Iteration   7: 7883424.629 ops/s
# Warmup Iteration   8: 7943725.976 ops/s
# Warmup Iteration   9: 8184307.418 ops/s
# Warmup Iteration  10: 7938601.809 ops/s
# Warmup Iteration  11: 8019934.378 ops/s
# Warmup Iteration  12: 7930553.676 ops/s
# Warmup Iteration  13: 8309889.319 ops/s
# Warmup Iteration  14: 8136452.694 ops/s
# Warmup Iteration  15: 7935676.103 ops/s
# Warmup Iteration  16: 8053215.479 ops/s
# Warmup Iteration  17: 7899247.391 ops/s
# Warmup Iteration  18: 8315525.366 ops/s
# Warmup Iteration  19: 8107222.954 ops/s
# Warmup Iteration  20: 7706066.788 ops/s
# Warmup Iteration  21: 8180080.503 ops/s
# Warmup Iteration  22: 7838559.809 ops/s
# Warmup Iteration  23: 8088284.399 ops/s
# Warmup Iteration  24: 7726392.897 ops/s
# Warmup Iteration  25: 7772738.389 ops/s
# Warmup Iteration  26: 8105963.314 ops/s
# Warmup Iteration  27: 7934469.789 ops/s
# Warmup Iteration  28: 7856766.753 ops/s
# Warmup Iteration  29: 8230152.936 ops/s
# Warmup Iteration  30: 8055352.770 ops/s
Iteration   1: 8339800.487 ops/s
Iteration   2: 8204807.203 ops/s
Iteration   3: 7620725.868 ops/s
Iteration   4: 8128336.692 ops/s
Iteration   5: 7952577.103 ops/s
Iteration   6: 7948640.255 ops/s
Iteration   7: 8168023.067 ops/s
Iteration   8: 8010126.548 ops/s
Iteration   9: 8172596.264 ops/s
Iteration  10: 7866184.145 ops/s
Iteration  11: 7865897.817 ops/s
Iteration  12: 8244405.094 ops/s
Iteration  13: 7829688.561 ops/s
Iteration  14: 8353550.474 ops/s
Iteration  15: 8114604.531 ops/s
Iteration  16: 7830180.647 ops/s
Iteration  17: 8085859.131 ops/s
Iteration  18: 7986455.838 ops/s
Iteration  19: 7988462.675 ops/s
Iteration  20: 8261655.755 ops/s
Iteration  21: 7837283.812 ops/s
Iteration  22: 8322376.180 ops/s
Iteration  23: 7929563.678 ops/s
Iteration  24: 8001641.841 ops/s
Iteration  25: 8044055.830 ops/s
Iteration  26: 6331526.293 ops/s
Iteration  27: 7800008.234 ops/s
Iteration  28: 8014124.575 ops/s
Iteration  29: 8092486.283 ops/s
Iteration  30: 7845096.325 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletableTest._Benchmark.benchmark_emptyScalarSource":
  7973024.707 ±(99.9%) 239305.505 ops/s [Average]
  (min, avg, max) = (6331526.293, 7973024.707, 8353550.474), stdev = 358181.241
  CI (99.9%): [7733719.202, 8212330.211] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score        Error  Units
ObservableConcatMapCompletableTest._Benchmark.benchmark_emptyScalarSource  thrpt   30  7973024.707 ± 239305.505  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapTest._Benchmark.benchmark_rejectedFusionDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapTest._Benchmark.benchmark_rejectedFusionDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 473706.719 ops/s
# Warmup Iteration   2: 1800484.626 ops/s
# Warmup Iteration   3: 2503218.002 ops/s
# Warmup Iteration   4: 2427654.286 ops/s
# Warmup Iteration   5: 2610343.535 ops/s
# Warmup Iteration   6: 2589224.347 ops/s
# Warmup Iteration   7: 2450100.865 ops/s
# Warmup Iteration   8: 2661865.135 ops/s
# Warmup Iteration   9: 2623229.742 ops/s
# Warmup Iteration  10: 2481691.828 ops/s
# Warmup Iteration  11: 2528749.779 ops/s
# Warmup Iteration  12: 2473475.998 ops/s
# Warmup Iteration  13: 2600406.408 ops/s
# Warmup Iteration  14: 2632439.224 ops/s
# Warmup Iteration  15: 2418646.717 ops/s
# Warmup Iteration  16: 2577601.370 ops/s
# Warmup Iteration  17: 2443653.316 ops/s
# Warmup Iteration  18: 2396922.339 ops/s
# Warmup Iteration  19: 2539145.913 ops/s
# Warmup Iteration  20: 2438254.635 ops/s
# Warmup Iteration  21: 2515055.628 ops/s
# Warmup Iteration  22: 2606889.546 ops/s
# Warmup Iteration  23: 2427461.273 ops/s
# Warmup Iteration  24: 2589234.766 ops/s
# Warmup Iteration  25: 2592895.788 ops/s
# Warmup Iteration  26: 2456629.350 ops/s
# Warmup Iteration  27: 2593129.712 ops/s
# Warmup Iteration  28: 2454230.900 ops/s
# Warmup Iteration  29: 2638347.802 ops/s
# Warmup Iteration  30: 2428338.919 ops/s
Iteration   1: 2460585.418 ops/s
Iteration   2: 2494620.313 ops/s
Iteration   3: 2413856.479 ops/s
Iteration   4: 2503008.631 ops/s
Iteration   5: 2541990.505 ops/s
Iteration   6: 2457988.957 ops/s
Iteration   7: 2579183.945 ops/s
Iteration   8: 2472250.344 ops/s
Iteration   9: 2471800.814 ops/s
Iteration  10: 2528653.040 ops/s
Iteration  11: 2408839.828 ops/s
Iteration  12: 2631345.854 ops/s
Iteration  13: 2403283.252 ops/s
Iteration  14: 2588052.214 ops/s
Iteration  15: 2495188.606 ops/s
Iteration  16: 2471358.753 ops/s
Iteration  17: 2489299.734 ops/s
Iteration  18: 2565838.372 ops/s
Iteration  19: 2476672.897 ops/s
Iteration  20: 2595302.219 ops/s
Iteration  21: 2510693.468 ops/s
Iteration  22: 2614518.708 ops/s
Iteration  23: 2448878.110 ops/s
Iteration  24: 2491934.055 ops/s
Iteration  25: 2567013.207 ops/s
Iteration  26: 2452245.975 ops/s
Iteration  27: 2507671.454 ops/s
Iteration  28: 2535598.983 ops/s
Iteration  29: 2459509.079 ops/s
Iteration  30: 2516368.175 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapTest._Benchmark.benchmark_rejectedFusionDelayError":
  2505118.380 ±(99.9%) 39992.873 ops/s [Average]
  (min, avg, max) = (2403283.252, 2505118.380, 2631345.854), stdev = 59859.454
  CI (99.9%): [2465125.507, 2545111.252] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
ObservableConcatMapTest._Benchmark.benchmark_rejectedFusionDelayError  thrpt   30  2505118.380 ± 39992.873  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.BlockingObservableToFutureTest._Benchmark.benchmark_getAfterCancel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.BlockingObservableToFutureTest._Benchmark.benchmark_getAfterCancel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 367983.802 ops/s
# Warmup Iteration   2: 660159.180 ops/s
# Warmup Iteration   3: 661015.038 ops/s
# Warmup Iteration   4: 710400.718 ops/s
# Warmup Iteration   5: 732298.466 ops/s
# Warmup Iteration   6: 686069.227 ops/s
# Warmup Iteration   7: 718351.912 ops/s
# Warmup Iteration   8: 718016.149 ops/s
# Warmup Iteration   9: 722621.294 ops/s
# Warmup Iteration  10: 757914.004 ops/s
# Warmup Iteration  11: 698343.177 ops/s
# Warmup Iteration  12: 738821.574 ops/s
# Warmup Iteration  13: 772415.575 ops/s
# Warmup Iteration  14: 698716.375 ops/s
# Warmup Iteration  15: 753960.959 ops/s
# Warmup Iteration  16: 742899.851 ops/s
# Warmup Iteration  17: 734051.124 ops/s
# Warmup Iteration  18: 810568.185 ops/s
# Warmup Iteration  19: 791851.418 ops/s
# Warmup Iteration  20: 763231.673 ops/s
# Warmup Iteration  21: 762041.631 ops/s
# Warmup Iteration  22: 781028.602 ops/s
# Warmup Iteration  23: 769343.169 ops/s
# Warmup Iteration  24: 783927.871 ops/s
# Warmup Iteration  25: 783449.626 ops/s
# Warmup Iteration  26: 765925.135 ops/s
# Warmup Iteration  27: 767929.393 ops/s
# Warmup Iteration  28: 755363.091 ops/s
# Warmup Iteration  29: 758033.988 ops/s
# Warmup Iteration  30: 779707.824 ops/s
Iteration   1: 736456.133 ops/s
Iteration   2: 765722.976 ops/s
Iteration   3: 796704.443 ops/s
Iteration   4: 744954.247 ops/s
Iteration   5: 764740.845 ops/s
Iteration   6: 774823.398 ops/s
Iteration   7: 769540.582 ops/s
Iteration   8: 751738.266 ops/s
Iteration   9: 782120.420 ops/s
Iteration  10: 780639.493 ops/s
Iteration  11: 760949.348 ops/s
Iteration  12: 785299.859 ops/s
Iteration  13: 769200.102 ops/s
Iteration  14: 755682.669 ops/s
Iteration  15: 757336.961 ops/s
Iteration  16: 777312.513 ops/s
Iteration  17: 737756.070 ops/s
Iteration  18: 756916.129 ops/s
Iteration  19: 784280.747 ops/s
Iteration  20: 672494.935 ops/s
Iteration  21: 721746.405 ops/s
Iteration  22: 768402.851 ops/s
Iteration  23: 731706.112 ops/s
Iteration  24: 767621.643 ops/s
Iteration  25: 758109.129 ops/s
Iteration  26: 731126.102 ops/s
Iteration  27: 784457.755 ops/s
Iteration  28: 798020.655 ops/s
Iteration  29: 738954.696 ops/s
Iteration  30: 805077.176 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.BlockingObservableToFutureTest._Benchmark.benchmark_getAfterCancel":
  760996.422 ±(99.9%) 17978.021 ops/s [Average]
  (min, avg, max) = (672494.935, 760996.422, 805077.176), stdev = 26908.657
  CI (99.9%): [743018.401, 778974.443] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score       Error  Units
BlockingObservableToFutureTest._Benchmark.benchmark_getAfterCancel  thrpt   30  760996.422 ± 17978.021  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.BlockingObservableToFutureTest._Benchmark.benchmark_getWithTimeoutAfterCancel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.BlockingObservableToFutureTest._Benchmark.benchmark_getWithTimeoutAfterCancel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 436049.527 ops/s
# Warmup Iteration   2: 648890.511 ops/s
# Warmup Iteration   3: 708249.176 ops/s
# Warmup Iteration   4: 695122.130 ops/s
# Warmup Iteration   5: 729742.662 ops/s
# Warmup Iteration   6: 748544.147 ops/s
# Warmup Iteration   7: 716335.454 ops/s
# Warmup Iteration   8: 697849.136 ops/s
# Warmup Iteration   9: 717239.095 ops/s
# Warmup Iteration  10: 722428.973 ops/s
# Warmup Iteration  11: 727451.503 ops/s
# Warmup Iteration  12: 705744.403 ops/s
# Warmup Iteration  13: 759588.706 ops/s
# Warmup Iteration  14: 748314.390 ops/s
# Warmup Iteration  15: 721106.093 ops/s
# Warmup Iteration  16: 756369.546 ops/s
# Warmup Iteration  17: 784799.641 ops/s
# Warmup Iteration  18: 748571.452 ops/s
# Warmup Iteration  19: 766522.096 ops/s
# Warmup Iteration  20: 799017.951 ops/s
# Warmup Iteration  21: 773669.095 ops/s
# Warmup Iteration  22: 765872.715 ops/s
# Warmup Iteration  23: 791638.815 ops/s
# Warmup Iteration  24: 769600.613 ops/s
# Warmup Iteration  25: 764183.685 ops/s
# Warmup Iteration  26: 783858.672 ops/s
# Warmup Iteration  27: 741585.998 ops/s
# Warmup Iteration  28: 777902.011 ops/s
# Warmup Iteration  29: 802726.434 ops/s
# Warmup Iteration  30: 758983.976 ops/s
Iteration   1: 769658.447 ops/s
Iteration   2: 794562.024 ops/s
Iteration   3: 757351.824 ops/s
Iteration   4: 792777.111 ops/s
Iteration   5: 794686.447 ops/s
Iteration   6: 749678.251 ops/s
Iteration   7: 786197.778 ops/s
Iteration   8: 752602.616 ops/s
Iteration   9: 801550.311 ops/s
Iteration  10: 800964.741 ops/s
Iteration  11: 757609.663 ops/s
Iteration  12: 775073.323 ops/s
Iteration  13: 779597.842 ops/s
Iteration  14: 754966.477 ops/s
Iteration  15: 773810.207 ops/s
Iteration  16: 753884.202 ops/s
Iteration  17: 786408.819 ops/s
Iteration  18: 783952.042 ops/s
Iteration  19: 738201.520 ops/s
Iteration  20: 806935.055 ops/s
Iteration  21: 740495.891 ops/s
Iteration  22: 767142.606 ops/s
Iteration  23: 762246.292 ops/s
Iteration  24: 769407.014 ops/s
Iteration  25: 787725.007 ops/s
Iteration  26: 719138.480 ops/s
Iteration  27: 628004.257 ops/s
Iteration  28: 746573.238 ops/s
Iteration  29: 784193.048 ops/s
Iteration  30: 725093.315 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.BlockingObservableToFutureTest._Benchmark.benchmark_getWithTimeoutAfterCancel":
  764682.928 ±(99.9%) 22996.140 ops/s [Average]
  (min, avg, max) = (628004.257, 764682.928, 806935.055), stdev = 34419.542
  CI (99.9%): [741686.789, 787679.068] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt       Score       Error  Units
BlockingObservableToFutureTest._Benchmark.benchmark_getWithTimeoutAfterCancel  thrpt   30  764682.928 ± 22996.140  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletableTest._Benchmark.benchmark_mapperCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletableTest._Benchmark.benchmark_mapperCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 86376.969 ops/s
# Warmup Iteration   2: 478495.081 ops/s
# Warmup Iteration   3: 592092.369 ops/s
# Warmup Iteration   4: 587948.599 ops/s
# Warmup Iteration   5: 619114.287 ops/s
# Warmup Iteration   6: 588721.225 ops/s
# Warmup Iteration   7: 643937.912 ops/s
# Warmup Iteration   8: 580031.332 ops/s
# Warmup Iteration   9: 649133.106 ops/s
# Warmup Iteration  10: 635432.815 ops/s
# Warmup Iteration  11: 660193.179 ops/s
# Warmup Iteration  12: 607601.451 ops/s
# Warmup Iteration  13: 635267.694 ops/s
# Warmup Iteration  14: 644754.251 ops/s
# Warmup Iteration  15: 651494.692 ops/s
# Warmup Iteration  16: 660382.693 ops/s
# Warmup Iteration  17: 674210.237 ops/s
# Warmup Iteration  18: 700212.986 ops/s
# Warmup Iteration  19: 662035.560 ops/s
# Warmup Iteration  20: 687185.841 ops/s
# Warmup Iteration  21: 655304.718 ops/s
# Warmup Iteration  22: 681080.917 ops/s
# Warmup Iteration  23: 664030.041 ops/s
# Warmup Iteration  24: 666587.545 ops/s
# Warmup Iteration  25: 689268.660 ops/s
# Warmup Iteration  26: 667397.035 ops/s
# Warmup Iteration  27: 678419.743 ops/s
# Warmup Iteration  28: 678505.139 ops/s
# Warmup Iteration  29: 646895.962 ops/s
# Warmup Iteration  30: 695547.158 ops/s
Iteration   1: 666423.393 ops/s
Iteration   2: 684047.549 ops/s
Iteration   3: 688318.902 ops/s
Iteration   4: 683428.017 ops/s
Iteration   5: 685265.476 ops/s
Iteration   6: 658629.759 ops/s
Iteration   7: 690940.734 ops/s
Iteration   8: 676816.729 ops/s
Iteration   9: 660952.331 ops/s
Iteration  10: 692793.418 ops/s
Iteration  11: 668676.635 ops/s
Iteration  12: 697677.843 ops/s
Iteration  13: 647895.901 ops/s
Iteration  14: 686383.033 ops/s
Iteration  15: 691669.323 ops/s
Iteration  16: 649657.684 ops/s
Iteration  17: 689511.972 ops/s
Iteration  18: 672662.858 ops/s
Iteration  19: 699445.230 ops/s
Iteration  20: 688937.102 ops/s
Iteration  21: 670054.560 ops/s
Iteration  22: 677201.494 ops/s
Iteration  23: 654791.584 ops/s
Iteration  24: 679653.697 ops/s
Iteration  25: 657180.449 ops/s
Iteration  26: 697219.699 ops/s
Iteration  27: 659181.470 ops/s
Iteration  28: 651186.105 ops/s
Iteration  29: 683613.558 ops/s
Iteration  30: 637252.016 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletableTest._Benchmark.benchmark_mapperCrash":
  674915.617 ±(99.9%) 11426.025 ops/s [Average]
  (min, avg, max) = (637252.016, 674915.617, 699445.230), stdev = 17101.938
  CI (99.9%): [663489.592, 686341.643] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score       Error  Units
ObservableConcatMapCompletableTest._Benchmark.benchmark_mapperCrash  thrpt   30  674915.617 ± 11426.025  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDebounceTest._Benchmark.benchmark_debounceOnEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDebounceTest._Benchmark.benchmark_debounceOnEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.777 ops/s
# Warmup Iteration   2: 46036.274 ops/s
# Warmup Iteration   3: 149782.692 ops/s
# Warmup Iteration   4: 266015.673 ops/s
# Warmup Iteration   5: 380659.741 ops/s
# Warmup Iteration   6: 920286.299 ops/s
# Warmup Iteration   7: 1127735.188 ops/s
# Warmup Iteration   8: 1086533.247 ops/s
# Warmup Iteration   9: 1085906.832 ops/s
# Warmup Iteration  10: 1130561.489 ops/s
# Warmup Iteration  11: 1087265.225 ops/s
# Warmup Iteration  12: 1106807.072 ops/s
# Warmup Iteration  13: 1073483.638 ops/s
# Warmup Iteration  14: 1124000.512 ops/s
# Warmup Iteration  15: 1090935.636 ops/s
# Warmup Iteration  16: 1113617.980 ops/s
# Warmup Iteration  17: 1101385.923 ops/s
# Warmup Iteration  18: 1095335.272 ops/s
# Warmup Iteration  19: 1117878.337 ops/s
# Warmup Iteration  20: 1095296.128 ops/s
# Warmup Iteration  21: 1129477.946 ops/s
# Warmup Iteration  22: 1142454.343 ops/s
# Warmup Iteration  23: 1078890.828 ops/s
# Warmup Iteration  24: 1099311.416 ops/s
# Warmup Iteration  25: 1089747.769 ops/s
# Warmup Iteration  26: 1094773.370 ops/s
# Warmup Iteration  27: 1136365.203 ops/s
# Warmup Iteration  28: 1109913.664 ops/s
# Warmup Iteration  29: 1115803.661 ops/s
# Warmup Iteration  30: 1096056.347 ops/s
Iteration   1: 1097550.377 ops/s
Iteration   2: 1091252.890 ops/s
Iteration   3: 1104661.984 ops/s
Iteration   4: 1137364.053 ops/s
Iteration   5: 1086239.200 ops/s
Iteration   6: 1157401.174 ops/s
Iteration   7: 1061114.066 ops/s
Iteration   8: 1129328.249 ops/s
Iteration   9: 1140527.602 ops/s
Iteration  10: 1084624.095 ops/s
Iteration  11: 1090220.694 ops/s
Iteration  12: 812727.208 ops/s
Iteration  13: 1157544.451 ops/s
Iteration  14: 1134963.188 ops/s
Iteration  15: 1074284.982 ops/s
Iteration  16: 1105399.927 ops/s
Iteration  17: 1050401.693 ops/s
Iteration  18: 1160775.758 ops/s
Iteration  19: 1094036.911 ops/s
Iteration  20: 1127805.470 ops/s
Iteration  21: 1082006.715 ops/s
Iteration  22: 1134464.511 ops/s
Iteration  23: 1057498.806 ops/s
Iteration  24: 1136222.999 ops/s
Iteration  25: 1092072.943 ops/s
Iteration  26: 1115306.125 ops/s
Iteration  27: 1080961.489 ops/s
Iteration  28: 1080305.388 ops/s
Iteration  29: 1081859.055 ops/s
Iteration  30: 1093217.823 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableDebounceTest._Benchmark.benchmark_debounceOnEmpty":
  1095071.327 ±(99.9%) 41029.373 ops/s [Average]
  (min, avg, max) = (812727.208, 1095071.327, 1160775.758), stdev = 61410.839
  CI (99.9%): [1054041.954, 1136100.701] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
ObservableDebounceTest._Benchmark.benchmark_debounceOnEmpty  thrpt   30  1095071.327 ± 41029.373  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletableTest._Benchmark.benchmark_innerError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletableTest._Benchmark.benchmark_innerError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 231583.630 ops/s
# Warmup Iteration   2: 603898.340 ops/s
# Warmup Iteration   3: 662623.445 ops/s
# Warmup Iteration   4: 649610.781 ops/s
# Warmup Iteration   5: 641585.644 ops/s
# Warmup Iteration   6: 675631.026 ops/s
# Warmup Iteration   7: 671953.108 ops/s
# Warmup Iteration   8: 713667.923 ops/s
# Warmup Iteration   9: 711110.091 ops/s
# Warmup Iteration  10: 697102.613 ops/s
# Warmup Iteration  11: 723225.874 ops/s
# Warmup Iteration  12: 703674.899 ops/s
# Warmup Iteration  13: 709050.298 ops/s
# Warmup Iteration  14: 692757.204 ops/s
# Warmup Iteration  15: 730385.476 ops/s
# Warmup Iteration  16: 696303.147 ops/s
# Warmup Iteration  17: 744911.042 ops/s
# Warmup Iteration  18: 754867.842 ops/s
# Warmup Iteration  19: 740228.344 ops/s
# Warmup Iteration  20: 745653.812 ops/s
# Warmup Iteration  21: 717229.721 ops/s
# Warmup Iteration  22: 738625.131 ops/s
# Warmup Iteration  23: 770304.733 ops/s
# Warmup Iteration  24: 712501.444 ops/s
# Warmup Iteration  25: 760580.508 ops/s
# Warmup Iteration  26: 728606.358 ops/s
# Warmup Iteration  27: 758736.561 ops/s
# Warmup Iteration  28: 761490.837 ops/s
# Warmup Iteration  29: 730920.107 ops/s
# Warmup Iteration  30: 737200.139 ops/s
Iteration   1: 771276.510 ops/s
Iteration   2: 742576.796 ops/s
Iteration   3: 762042.203 ops/s
Iteration   4: 751695.236 ops/s
Iteration   5: 720375.855 ops/s
Iteration   6: 775425.805 ops/s
Iteration   7: 740802.054 ops/s
Iteration   8: 755962.552 ops/s
Iteration   9: 720775.045 ops/s
Iteration  10: 750632.107 ops/s
Iteration  11: 786689.756 ops/s
Iteration  12: 706918.992 ops/s
Iteration  13: 740086.102 ops/s
Iteration  14: 726464.438 ops/s
Iteration  15: 741087.359 ops/s
Iteration  16: 762211.173 ops/s
Iteration  17: 706049.120 ops/s
Iteration  18: 755312.805 ops/s
Iteration  19: 737621.014 ops/s
Iteration  20: 742183.686 ops/s
Iteration  21: 734629.492 ops/s
Iteration  22: 754943.574 ops/s
Iteration  23: 779840.377 ops/s
Iteration  24: 713708.528 ops/s
Iteration  25: 777972.166 ops/s
Iteration  26: 738895.824 ops/s
Iteration  27: 775141.479 ops/s
Iteration  28: 740731.625 ops/s
Iteration  29: 737980.339 ops/s
Iteration  30: 761393.015 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletableTest._Benchmark.benchmark_innerError":
  747047.501 ±(99.9%) 14423.755 ops/s [Average]
  (min, avg, max) = (706049.120, 747047.501, 786689.756), stdev = 21588.799
  CI (99.9%): [732623.746, 761471.256] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score       Error  Units
ObservableConcatMapCompletableTest._Benchmark.benchmark_innerError  thrpt   30  747047.501 ± 14423.755  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromCompletableTest._Benchmark.benchmark_fromCompletableThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromCompletableTest._Benchmark.benchmark_fromCompletableThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 189975.157 ops/s
# Warmup Iteration   2: 548328.378 ops/s
# Warmup Iteration   3: 600258.516 ops/s
# Warmup Iteration   4: 622640.070 ops/s
# Warmup Iteration   5: 580428.423 ops/s
# Warmup Iteration   6: 634283.970 ops/s
# Warmup Iteration   7: 588874.711 ops/s
# Warmup Iteration   8: 666788.117 ops/s
# Warmup Iteration   9: 630522.176 ops/s
# Warmup Iteration  10: 658401.994 ops/s
# Warmup Iteration  11: 629329.817 ops/s
# Warmup Iteration  12: 674730.185 ops/s
# Warmup Iteration  13: 639813.569 ops/s
# Warmup Iteration  14: 627452.803 ops/s
# Warmup Iteration  15: 673827.465 ops/s
# Warmup Iteration  16: 631030.003 ops/s
# Warmup Iteration  17: 700739.932 ops/s
# Warmup Iteration  18: 662903.351 ops/s
# Warmup Iteration  19: 711573.675 ops/s
# Warmup Iteration  20: 683798.193 ops/s
# Warmup Iteration  21: 654215.128 ops/s
# Warmup Iteration  22: 699887.676 ops/s
# Warmup Iteration  23: 690180.008 ops/s
# Warmup Iteration  24: 686174.707 ops/s
# Warmup Iteration  25: 699102.549 ops/s
# Warmup Iteration  26: 666564.128 ops/s
# Warmup Iteration  27: 696034.663 ops/s
# Warmup Iteration  28: 678074.767 ops/s
# Warmup Iteration  29: 688860.291 ops/s
# Warmup Iteration  30: 686998.172 ops/s
Iteration   1: 695455.006 ops/s
Iteration   2: 697144.561 ops/s
Iteration   3: 665309.112 ops/s
Iteration   4: 682990.295 ops/s
Iteration   5: 695819.888 ops/s
Iteration   6: 680984.912 ops/s
Iteration   7: 508573.250 ops/s
Iteration   8: 695224.328 ops/s
Iteration   9: 706134.684 ops/s
Iteration  10: 674768.878 ops/s
Iteration  11: 694774.924 ops/s
Iteration  12: 666921.119 ops/s
Iteration  13: 687051.376 ops/s
Iteration  14: 663706.732 ops/s
Iteration  15: 687721.669 ops/s
Iteration  16: 688255.864 ops/s
Iteration  17: 663985.820 ops/s
Iteration  18: 699131.726 ops/s
Iteration  19: 670336.090 ops/s
Iteration  20: 678494.575 ops/s
Iteration  21: 696253.599 ops/s
Iteration  22: 674022.636 ops/s
Iteration  23: 693481.854 ops/s
Iteration  24: 671502.798 ops/s
Iteration  25: 686405.898 ops/s
Iteration  26: 676238.105 ops/s
Iteration  27: 683091.163 ops/s
Iteration  28: 682501.459 ops/s
Iteration  29: 675948.584 ops/s
Iteration  30: 684621.395 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFromCompletableTest._Benchmark.benchmark_fromCompletableThrows":
  677561.743 ±(99.9%) 22664.570 ops/s [Average]
  (min, avg, max) = (508573.250, 677561.743, 706134.684), stdev = 33923.265
  CI (99.9%): [654897.173, 700226.314] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score       Error  Units
ObservableFromCompletableTest._Benchmark.benchmark_fromCompletableThrows  thrpt   30  677561.743 ± 22664.570  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletableTest._Benchmark.benchmark_justScalarSource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletableTest._Benchmark.benchmark_justScalarSource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1466511.354 ops/s
# Warmup Iteration   2: 3663439.781 ops/s
# Warmup Iteration   3: 4852842.420 ops/s
# Warmup Iteration   4: 5058267.044 ops/s
# Warmup Iteration   5: 4969295.522 ops/s
# Warmup Iteration   6: 5027546.118 ops/s
# Warmup Iteration   7: 5001084.174 ops/s
# Warmup Iteration   8: 5009253.941 ops/s
# Warmup Iteration   9: 5186837.576 ops/s
# Warmup Iteration  10: 5050004.629 ops/s
# Warmup Iteration  11: 4902017.810 ops/s
# Warmup Iteration  12: 5274330.951 ops/s
# Warmup Iteration  13: 5054496.497 ops/s
# Warmup Iteration  14: 4997445.331 ops/s
# Warmup Iteration  15: 5392566.570 ops/s
# Warmup Iteration  16: 4957737.426 ops/s
# Warmup Iteration  17: 5138287.255 ops/s
# Warmup Iteration  18: 5076690.969 ops/s
# Warmup Iteration  19: 5366063.232 ops/s
# Warmup Iteration  20: 4948387.791 ops/s
# Warmup Iteration  21: 4982413.422 ops/s
# Warmup Iteration  22: 5247505.946 ops/s
# Warmup Iteration  23: 5049599.408 ops/s
# Warmup Iteration  24: 4974822.435 ops/s
# Warmup Iteration  25: 5305921.966 ops/s
# Warmup Iteration  26: 4932279.345 ops/s
# Warmup Iteration  27: 5210693.869 ops/s
# Warmup Iteration  28: 4970500.754 ops/s
# Warmup Iteration  29: 5035745.745 ops/s
# Warmup Iteration  30: 4968234.690 ops/s
Iteration   1: 4996682.746 ops/s
Iteration   2: 5106308.488 ops/s
Iteration   3: 5031885.425 ops/s
Iteration   4: 4997131.956 ops/s
Iteration   5: 5070601.207 ops/s
Iteration   6: 4923434.093 ops/s
Iteration   7: 5333994.279 ops/s
Iteration   8: 4916636.102 ops/s
Iteration   9: 5192283.798 ops/s
Iteration  10: 5010014.228 ops/s
Iteration  11: 5196628.232 ops/s
Iteration  12: 5094845.829 ops/s
Iteration  13: 4936372.780 ops/s
Iteration  14: 5243869.104 ops/s
Iteration  15: 5098873.371 ops/s
Iteration  16: 4802013.084 ops/s
Iteration  17: 5041270.571 ops/s
Iteration  18: 5044273.441 ops/s
Iteration  19: 5129074.513 ops/s
Iteration  20: 5046762.395 ops/s
Iteration  21: 5191401.130 ops/s
Iteration  22: 4943442.114 ops/s
Iteration  23: 5096808.062 ops/s
Iteration  24: 5042301.286 ops/s
Iteration  25: 4994989.891 ops/s
Iteration  26: 5219175.721 ops/s
Iteration  27: 4928847.902 ops/s
Iteration  28: 5080170.115 ops/s
Iteration  29: 5155826.174 ops/s
Iteration  30: 4880189.287 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletableTest._Benchmark.benchmark_justScalarSource":
  5058203.577 ±(99.9%) 79341.525 ops/s [Average]
  (min, avg, max) = (4802013.084, 5058203.577, 5333994.279), stdev = 118754.668
  CI (99.9%): [4978862.053, 5137545.102] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score       Error  Units
ObservableConcatMapCompletableTest._Benchmark.benchmark_justScalarSource  thrpt   30  5058203.577 ± 79341.525  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_concatMapReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_concatMapReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 381652.914 ops/s
# Warmup Iteration   2: 587997.204 ops/s
# Warmup Iteration   3: 649738.243 ops/s
# Warmup Iteration   4: 590354.620 ops/s
# Warmup Iteration   5: 696881.488 ops/s
# Warmup Iteration   6: 573185.789 ops/s
# Warmup Iteration   7: 653737.894 ops/s
# Warmup Iteration   8: 681509.974 ops/s
# Warmup Iteration   9: 660120.942 ops/s
# Warmup Iteration  10: 687425.698 ops/s
# Warmup Iteration  11: 660759.872 ops/s
# Warmup Iteration  12: 658599.864 ops/s
# Warmup Iteration  13: 690205.877 ops/s
# Warmup Iteration  14: 650930.907 ops/s
# Warmup Iteration  15: 686981.105 ops/s
# Warmup Iteration  16: 657672.821 ops/s
# Warmup Iteration  17: 706905.579 ops/s
# Warmup Iteration  18: 742968.629 ops/s
# Warmup Iteration  19: 690533.286 ops/s
# Warmup Iteration  20: 743016.304 ops/s
# Warmup Iteration  21: 692985.570 ops/s
# Warmup Iteration  22: 725411.335 ops/s
# Warmup Iteration  23: 706511.403 ops/s
# Warmup Iteration  24: 719138.109 ops/s
# Warmup Iteration  25: 697683.539 ops/s
# Warmup Iteration  26: 712607.631 ops/s
# Warmup Iteration  27: 726603.747 ops/s
# Warmup Iteration  28: 732158.669 ops/s
# Warmup Iteration  29: 705709.503 ops/s
# Warmup Iteration  30: 721353.685 ops/s
Iteration   1: 670575.356 ops/s
Iteration   2: 616279.956 ops/s
Iteration   3: 728796.413 ops/s
Iteration   4: 707982.164 ops/s
Iteration   5: 743720.373 ops/s
Iteration   6: 705379.451 ops/s
Iteration   7: 681631.895 ops/s
Iteration   8: 751061.243 ops/s
Iteration   9: 702639.189 ops/s
Iteration  10: 737983.603 ops/s
Iteration  11: 695795.828 ops/s
Iteration  12: 714474.953 ops/s
Iteration  13: 723980.950 ops/s
Iteration  14: 689995.754 ops/s
Iteration  15: 718666.808 ops/s
Iteration  16: 703961.326 ops/s
Iteration  17: 698225.030 ops/s
Iteration  18: 736564.448 ops/s
Iteration  19: 750522.226 ops/s
Iteration  20: 689564.958 ops/s
Iteration  21: 725169.630 ops/s
Iteration  22: 690318.173 ops/s
Iteration  23: 727971.956 ops/s
Iteration  24: 696989.024 ops/s
Iteration  25: 714929.084 ops/s
Iteration  26: 707846.980 ops/s
Iteration  27: 709400.757 ops/s
Iteration  28: 714048.967 ops/s
Iteration  29: 679373.929 ops/s
Iteration  30: 722682.278 ops/s


Result "io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_concatMapReturnsNull":
  708551.090 ±(99.9%) 18066.677 ops/s [Average]
  (min, avg, max) = (616279.956, 708551.090, 751061.243), stdev = 27041.353
  CI (99.9%): [690484.414, 726617.767] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score       Error  Units
ObservableNullTests._Benchmark.benchmark_concatMapReturnsNull  thrpt   30  708551.090 ± 18066.677  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRetryTest._Benchmark.benchmark_retryUntil$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRetryTest._Benchmark.benchmark_retryUntil

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 21191.172 ops/s
# Warmup Iteration   2: 226701.587 ops/s
# Warmup Iteration   3: 286320.063 ops/s
# Warmup Iteration   4: 288564.040 ops/s
# Warmup Iteration   5: 317222.809 ops/s
# Warmup Iteration   6: 305613.450 ops/s
# Warmup Iteration   7: 322519.541 ops/s
# Warmup Iteration   8: 312864.407 ops/s
# Warmup Iteration   9: 298988.453 ops/s
# Warmup Iteration  10: 287773.729 ops/s
# Warmup Iteration  11: 316857.298 ops/s
# Warmup Iteration  12: 322947.444 ops/s
# Warmup Iteration  13: 316926.615 ops/s
# Warmup Iteration  14: 310715.979 ops/s
# Warmup Iteration  15: 323392.924 ops/s
# Warmup Iteration  16: 322455.176 ops/s
# Warmup Iteration  17: 323248.183 ops/s
# Warmup Iteration  18: 329740.142 ops/s
# Warmup Iteration  19: 318820.587 ops/s
# Warmup Iteration  20: 328559.139 ops/s
# Warmup Iteration  21: 324423.552 ops/s
# Warmup Iteration  22: 328654.353 ops/s
# Warmup Iteration  23: 328682.349 ops/s
# Warmup Iteration  24: 313923.502 ops/s
# Warmup Iteration  25: 335305.641 ops/s
# Warmup Iteration  26: 316939.329 ops/s
# Warmup Iteration  27: 328966.749 ops/s
# Warmup Iteration  28: 315009.933 ops/s
# Warmup Iteration  29: 336051.295 ops/s
# Warmup Iteration  30: 335984.687 ops/s
Iteration   1: 323187.566 ops/s
Iteration   2: 321548.290 ops/s
Iteration   3: 329222.562 ops/s
Iteration   4: 323221.009 ops/s
Iteration   5: 331803.302 ops/s
Iteration   6: 322222.825 ops/s
Iteration   7: 335437.943 ops/s
Iteration   8: 332342.065 ops/s
Iteration   9: 323240.974 ops/s
Iteration  10: 333948.201 ops/s
Iteration  11: 317762.744 ops/s
Iteration  12: 335168.948 ops/s
Iteration  13: 325603.609 ops/s
Iteration  14: 324680.625 ops/s
Iteration  15: 321087.525 ops/s
Iteration  16: 331114.597 ops/s
Iteration  17: 314466.236 ops/s
Iteration  18: 329084.000 ops/s
Iteration  19: 320651.792 ops/s
Iteration  20: 337188.417 ops/s
Iteration  21: 339920.487 ops/s
Iteration  22: 330723.857 ops/s
Iteration  23: 320825.712 ops/s
Iteration  24: 338528.361 ops/s
Iteration  25: 313661.825 ops/s
Iteration  26: 334548.811 ops/s
Iteration  27: 319192.112 ops/s
Iteration  28: 328083.027 ops/s
Iteration  29: 322626.042 ops/s
Iteration  30: 330030.737 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryTest._Benchmark.benchmark_retryUntil":
  327037.473 ±(99.9%) 4749.397 ops/s [Average]
  (min, avg, max) = (313661.825, 327037.473, 339920.487), stdev = 7108.674
  CI (99.9%): [322288.076, 331786.870] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score      Error  Units
ObservableRetryTest._Benchmark.benchmark_retryUntil  thrpt   30  327037.473 ± 4749.397  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_fusionRejected$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_fusionRejected

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2320112.593 ops/s
# Warmup Iteration   2: 4645217.136 ops/s
# Warmup Iteration   3: 6769298.245 ops/s
# Warmup Iteration   4: 6163197.353 ops/s
# Warmup Iteration   5: 6705065.220 ops/s
# Warmup Iteration   6: 6516289.123 ops/s
# Warmup Iteration   7: 6659161.450 ops/s
# Warmup Iteration   8: 6282616.909 ops/s
# Warmup Iteration   9: 6631125.921 ops/s
# Warmup Iteration  10: 6428997.131 ops/s
# Warmup Iteration  11: 6604477.037 ops/s
# Warmup Iteration  12: 6384314.050 ops/s
# Warmup Iteration  13: 6449469.827 ops/s
# Warmup Iteration  14: 6607715.190 ops/s
# Warmup Iteration  15: 6390103.847 ops/s
# Warmup Iteration  16: 6761341.492 ops/s
# Warmup Iteration  17: 6650830.877 ops/s
# Warmup Iteration  18: 6368895.527 ops/s
# Warmup Iteration  19: 6729063.604 ops/s
# Warmup Iteration  20: 6337893.045 ops/s
# Warmup Iteration  21: 6429036.348 ops/s
# Warmup Iteration  22: 6787018.740 ops/s
# Warmup Iteration  23: 6490674.465 ops/s
# Warmup Iteration  24: 6338491.253 ops/s
# Warmup Iteration  25: 6727665.596 ops/s
# Warmup Iteration  26: 5531081.814 ops/s
# Warmup Iteration  27: 5951037.506 ops/s
# Warmup Iteration  28: 6745092.015 ops/s
# Warmup Iteration  29: 6378305.271 ops/s
# Warmup Iteration  30: 6816899.896 ops/s
Iteration   1: 6274724.854 ops/s
Iteration   2: 6822443.813 ops/s
Iteration   3: 6722849.218 ops/s
Iteration   4: 6509585.431 ops/s
Iteration   5: 6303455.890 ops/s
Iteration   6: 6650307.287 ops/s
Iteration   7: 6420464.359 ops/s
Iteration   8: 6676480.869 ops/s
Iteration   9: 6564694.829 ops/s
Iteration  10: 6405484.740 ops/s
Iteration  11: 6689345.789 ops/s
Iteration  12: 6659279.999 ops/s
Iteration  13: 6471846.737 ops/s
Iteration  14: 6387540.700 ops/s
Iteration  15: 6709803.737 ops/s
Iteration  16: 6438922.910 ops/s
Iteration  17: 6640027.005 ops/s
Iteration  18: 6718943.737 ops/s
Iteration  19: 6340317.409 ops/s
Iteration  20: 6611014.401 ops/s
Iteration  21: 6456234.200 ops/s
Iteration  22: 6668622.361 ops/s
Iteration  23: 6549310.912 ops/s
Iteration  24: 6301188.327 ops/s
Iteration  25: 6755651.880 ops/s
Iteration  26: 6294577.937 ops/s
Iteration  27: 6475895.715 ops/s
Iteration  28: 6660900.681 ops/s
Iteration  29: 6597769.462 ops/s
Iteration  30: 6573963.323 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_fusionRejected":
  6545054.950 ±(99.9%) 104135.519 ops/s [Average]
  (min, avg, max) = (6274724.854, 6545054.950, 6822443.813), stdev = 155865.154
  CI (99.9%): [6440919.431, 6649190.469] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score        Error  Units
ObservableConcatMapSchedulerTest._Benchmark.benchmark_fusionRejected  thrpt   30  6545054.950 ± 104135.519  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableUsingTest._Benchmark.benchmark_emptyEager$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableUsingTest._Benchmark.benchmark_emptyEager

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3237416.972 ops/s
# Warmup Iteration   2: 5880385.092 ops/s
# Warmup Iteration   3: 7853401.427 ops/s
# Warmup Iteration   4: 7394458.346 ops/s
# Warmup Iteration   5: 7959377.841 ops/s
# Warmup Iteration   6: 8053695.143 ops/s
# Warmup Iteration   7: 7475878.283 ops/s
# Warmup Iteration   8: 7952828.204 ops/s
# Warmup Iteration   9: 7524671.488 ops/s
# Warmup Iteration  10: 7727026.484 ops/s
# Warmup Iteration  11: 7761758.524 ops/s
# Warmup Iteration  12: 7525625.089 ops/s
# Warmup Iteration  13: 7967206.019 ops/s
# Warmup Iteration  14: 7677437.076 ops/s
# Warmup Iteration  15: 7833585.801 ops/s
# Warmup Iteration  16: 7481250.326 ops/s
# Warmup Iteration  17: 7637934.187 ops/s
# Warmup Iteration  18: 7881123.989 ops/s
# Warmup Iteration  19: 7759397.689 ops/s
# Warmup Iteration  20: 7908493.302 ops/s
# Warmup Iteration  21: 7767382.034 ops/s
# Warmup Iteration  22: 7591159.874 ops/s
# Warmup Iteration  23: 7476488.507 ops/s
# Warmup Iteration  24: 7587251.994 ops/s
# Warmup Iteration  25: 7853079.934 ops/s
# Warmup Iteration  26: 7439135.297 ops/s
# Warmup Iteration  27: 7904771.646 ops/s
# Warmup Iteration  28: 7718922.830 ops/s
# Warmup Iteration  29: 7707180.504 ops/s
# Warmup Iteration  30: 7849372.148 ops/s
Iteration   1: 7795928.613 ops/s
Iteration   2: 7605283.168 ops/s
Iteration   3: 7745146.729 ops/s
Iteration   4: 7917147.784 ops/s
Iteration   5: 7704825.953 ops/s
Iteration   6: 7666079.067 ops/s
Iteration   7: 8103091.259 ops/s
Iteration   8: 7397093.900 ops/s
Iteration   9: 7981436.647 ops/s
Iteration  10: 7479745.203 ops/s
Iteration  11: 7988984.575 ops/s
Iteration  12: 7435791.317 ops/s
Iteration  13: 7706885.638 ops/s
Iteration  14: 7936158.752 ops/s
Iteration  15: 7709604.020 ops/s
Iteration  16: 7720862.992 ops/s
Iteration  17: 7712867.843 ops/s
Iteration  18: 7749786.540 ops/s
Iteration  19: 8069393.713 ops/s
Iteration  20: 7481258.331 ops/s
Iteration  21: 7902887.291 ops/s
Iteration  22: 7737156.796 ops/s
Iteration  23: 7823991.533 ops/s
Iteration  24: 7753870.446 ops/s
Iteration  25: 7887380.528 ops/s
Iteration  26: 7655441.592 ops/s
Iteration  27: 8133324.164 ops/s
Iteration  28: 7427675.623 ops/s
Iteration  29: 7701711.857 ops/s
Iteration  30: 7737216.864 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableUsingTest._Benchmark.benchmark_emptyEager":
  7755600.958 ±(99.9%) 131039.873 ops/s [Average]
  (min, avg, max) = (7397093.900, 7755600.958, 8133324.164), stdev = 196134.327
  CI (99.9%): [7624561.085, 7886640.831] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score        Error  Units
CompletableUsingTest._Benchmark.benchmark_emptyEager  thrpt   30  7755600.958 ± 131039.873  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletableTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletableTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 60467.460 ops/s
# Warmup Iteration   2: 358288.864 ops/s
# Warmup Iteration   3: 482412.613 ops/s
# Warmup Iteration   4: 491309.407 ops/s
# Warmup Iteration   5: 489364.026 ops/s
# Warmup Iteration   6: 475730.454 ops/s
# Warmup Iteration   7: 486868.636 ops/s
# Warmup Iteration   8: 487179.289 ops/s
# Warmup Iteration   9: 465623.292 ops/s
# Warmup Iteration  10: 503989.492 ops/s
# Warmup Iteration  11: 469684.730 ops/s
# Warmup Iteration  12: 490767.222 ops/s
# Warmup Iteration  13: 483170.234 ops/s
# Warmup Iteration  14: 477069.675 ops/s
# Warmup Iteration  15: 473355.154 ops/s
# Warmup Iteration  16: 487523.380 ops/s
# Warmup Iteration  17: 501919.340 ops/s
# Warmup Iteration  18: 529557.180 ops/s
# Warmup Iteration  19: 497793.312 ops/s
# Warmup Iteration  20: 492835.518 ops/s
# Warmup Iteration  21: 435491.967 ops/s
# Warmup Iteration  22: 460577.728 ops/s
# Warmup Iteration  23: 526092.105 ops/s
# Warmup Iteration  24: 493683.519 ops/s
# Warmup Iteration  25: 514299.834 ops/s
# Warmup Iteration  26: 475191.191 ops/s
# Warmup Iteration  27: 495675.512 ops/s
# Warmup Iteration  28: 504786.398 ops/s
# Warmup Iteration  29: 506563.162 ops/s
# Warmup Iteration  30: 511687.889 ops/s
Iteration   1: 506444.842 ops/s
Iteration   2: 508418.787 ops/s
Iteration   3: 522649.715 ops/s
Iteration   4: 501919.510 ops/s
Iteration   5: 506731.621 ops/s
Iteration   6: 534448.736 ops/s
Iteration   7: 495251.584 ops/s
Iteration   8: 508383.196 ops/s
Iteration   9: 517754.044 ops/s
Iteration  10: 495817.053 ops/s
Iteration  11: 521713.771 ops/s
Iteration  12: 498131.991 ops/s
Iteration  13: 531429.361 ops/s
Iteration  14: 517787.128 ops/s
Iteration  15: 500946.943 ops/s
Iteration  16: 525928.949 ops/s
Iteration  17: 504259.858 ops/s
Iteration  18: 514747.824 ops/s
Iteration  19: 498020.901 ops/s
Iteration  20: 516079.172 ops/s
Iteration  21: 491029.460 ops/s
Iteration  22: 506759.568 ops/s
Iteration  23: 506917.429 ops/s
Iteration  24: 498543.885 ops/s
Iteration  25: 528070.359 ops/s
Iteration  26: 499340.016 ops/s
Iteration  27: 530590.311 ops/s
Iteration  28: 531029.151 ops/s
Iteration  29: 497915.908 ops/s
Iteration  30: 515782.509 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletableTest._Benchmark.benchmark_doubleOnSubscribe":
  511094.786 ±(99.9%) 8469.981 ops/s [Average]
  (min, avg, max) = (491029.460, 511094.786, 534448.736), stdev = 12677.470
  CI (99.9%): [502624.805, 519564.767] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score      Error  Units
ObservableConcatMapCompletableTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  511094.786 ± 8469.981  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithSizeTest._Benchmark.benchmark_errorExactInner$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithSizeTest._Benchmark.benchmark_errorExactInner

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 27065.203 ops/s
# Warmup Iteration   2: 140507.360 ops/s
# Warmup Iteration   3: 371108.243 ops/s
# Warmup Iteration   4: 372209.646 ops/s
# Warmup Iteration   5: 409319.379 ops/s
# Warmup Iteration   6: 397265.807 ops/s
# Warmup Iteration   7: 373608.098 ops/s
# Warmup Iteration   8: 399613.779 ops/s
# Warmup Iteration   9: 416872.726 ops/s
# Warmup Iteration  10: 389460.884 ops/s
# Warmup Iteration  11: 409027.504 ops/s
# Warmup Iteration  12: 395851.359 ops/s
# Warmup Iteration  13: 407339.352 ops/s
# Warmup Iteration  14: 388438.149 ops/s
# Warmup Iteration  15: 394038.431 ops/s
# Warmup Iteration  16: 415426.851 ops/s
# Warmup Iteration  17: 413012.532 ops/s
# Warmup Iteration  18: 424116.557 ops/s
# Warmup Iteration  19: 402170.010 ops/s
# Warmup Iteration  20: 426668.365 ops/s
# Warmup Iteration  21: 400973.095 ops/s
# Warmup Iteration  22: 409517.535 ops/s
# Warmup Iteration  23: 422235.958 ops/s
# Warmup Iteration  24: 401340.485 ops/s
# Warmup Iteration  25: 417169.740 ops/s
# Warmup Iteration  26: 411095.857 ops/s
# Warmup Iteration  27: 418289.892 ops/s
# Warmup Iteration  28: 431889.459 ops/s
# Warmup Iteration  29: 413401.113 ops/s
# Warmup Iteration  30: 404998.117 ops/s
Iteration   1: 400107.890 ops/s
Iteration   2: 381129.040 ops/s
Iteration   3: 439515.600 ops/s
Iteration   4: 407042.177 ops/s
Iteration   5: 419600.641 ops/s
Iteration   6: 441627.702 ops/s
Iteration   7: 399782.880 ops/s
Iteration   8: 426055.534 ops/s
Iteration   9: 420679.616 ops/s
Iteration  10: 416567.543 ops/s
Iteration  11: 423596.028 ops/s
Iteration  12: 411759.358 ops/s
Iteration  13: 421449.849 ops/s
Iteration  14: 399037.726 ops/s
Iteration  15: 424189.666 ops/s
Iteration  16: 410627.886 ops/s
Iteration  17: 427810.671 ops/s
Iteration  18: 420844.063 ops/s
Iteration  19: 404542.426 ops/s
Iteration  20: 425940.676 ops/s
Iteration  21: 396547.230 ops/s
Iteration  22: 415608.254 ops/s
Iteration  23: 399346.261 ops/s
Iteration  24: 423229.757 ops/s
Iteration  25: 415458.119 ops/s
Iteration  26: 422693.838 ops/s
Iteration  27: 416090.882 ops/s
Iteration  28: 425039.809 ops/s
Iteration  29: 417668.390 ops/s
Iteration  30: 406975.408 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithSizeTest._Benchmark.benchmark_errorExactInner":
  415352.164 ±(99.9%) 8725.752 ops/s [Average]
  (min, avg, max) = (381129.040, 415352.164, 441627.702), stdev = 13060.296
  CI (99.9%): [406626.412, 424077.916] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score      Error  Units
ObservableWindowWithSizeTest._Benchmark.benchmark_errorExactInner  thrpt   30  415352.164 ± 8725.752  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithSizeTest._Benchmark.benchmark_errorOverlapInner$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithSizeTest._Benchmark.benchmark_errorOverlapInner

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 27349.194 ops/s
# Warmup Iteration   2: 111290.478 ops/s
# Warmup Iteration   3: 138259.228 ops/s
# Warmup Iteration   4: 366814.802 ops/s
# Warmup Iteration   5: 358502.895 ops/s
# Warmup Iteration   6: 429407.706 ops/s
# Warmup Iteration   7: 403372.999 ops/s
# Warmup Iteration   8: 426731.521 ops/s
# Warmup Iteration   9: 404614.717 ops/s
# Warmup Iteration  10: 407593.327 ops/s
# Warmup Iteration  11: 416204.453 ops/s
# Warmup Iteration  12: 424785.199 ops/s
# Warmup Iteration  13: 401454.037 ops/s
# Warmup Iteration  14: 411753.423 ops/s
# Warmup Iteration  15: 423933.723 ops/s
# Warmup Iteration  16: 312521.402 ops/s
# Warmup Iteration  17: 448162.987 ops/s
# Warmup Iteration  18: 419799.946 ops/s
# Warmup Iteration  19: 421869.722 ops/s
# Warmup Iteration  20: 436582.614 ops/s
# Warmup Iteration  21: 422501.384 ops/s
# Warmup Iteration  22: 426390.122 ops/s
# Warmup Iteration  23: 438767.351 ops/s
# Warmup Iteration  24: 417367.971 ops/s
# Warmup Iteration  25: 432295.631 ops/s
# Warmup Iteration  26: 442142.524 ops/s
# Warmup Iteration  27: 413666.520 ops/s
# Warmup Iteration  28: 440135.688 ops/s
# Warmup Iteration  29: 414779.139 ops/s
# Warmup Iteration  30: 419585.473 ops/s
Iteration   1: 425419.455 ops/s
Iteration   2: 419406.497 ops/s
Iteration   3: 418932.402 ops/s
Iteration   4: 427910.411 ops/s
Iteration   5: 435543.081 ops/s
Iteration   6: 428024.434 ops/s
Iteration   7: 440897.509 ops/s
Iteration   8: 414822.697 ops/s
Iteration   9: 442856.631 ops/s
Iteration  10: 440997.084 ops/s
Iteration  11: 413993.040 ops/s
Iteration  12: 451719.223 ops/s
Iteration  13: 434953.698 ops/s
Iteration  14: 420056.427 ops/s
Iteration  15: 421880.532 ops/s
Iteration  16: 445868.335 ops/s
Iteration  17: 424860.955 ops/s
Iteration  18: 439210.371 ops/s
Iteration  19: 425710.405 ops/s
Iteration  20: 424239.612 ops/s
Iteration  21: 421562.583 ops/s
Iteration  22: 449828.539 ops/s
Iteration  23: 422507.065 ops/s
Iteration  24: 426949.414 ops/s
Iteration  25: 437659.514 ops/s
Iteration  26: 429271.373 ops/s
Iteration  27: 452682.685 ops/s
Iteration  28: 446331.696 ops/s
Iteration  29: 419170.194 ops/s
Iteration  30: 433263.374 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithSizeTest._Benchmark.benchmark_errorOverlapInner":
  431217.641 ±(99.9%) 7562.533 ops/s [Average]
  (min, avg, max) = (413993.040, 431217.641, 452682.685), stdev = 11319.244
  CI (99.9%): [423655.108, 438780.174] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score      Error  Units
ObservableWindowWithSizeTest._Benchmark.benchmark_errorOverlapInner  thrpt   30  431217.641 ± 7562.533  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithSizeTest._Benchmark.benchmark_errorSkipInner$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithSizeTest._Benchmark.benchmark_errorSkipInner

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 27150.508 ops/s
# Warmup Iteration   2: 108354.083 ops/s
# Warmup Iteration   3: 202511.011 ops/s
# Warmup Iteration   4: 371903.234 ops/s
# Warmup Iteration   5: 426654.832 ops/s
# Warmup Iteration   6: 389261.406 ops/s
# Warmup Iteration   7: 380329.273 ops/s
# Warmup Iteration   8: 386551.632 ops/s
# Warmup Iteration   9: 408979.566 ops/s
# Warmup Iteration  10: 422794.121 ops/s
# Warmup Iteration  11: 400999.340 ops/s
# Warmup Iteration  12: 411296.377 ops/s
# Warmup Iteration  13: 412036.461 ops/s
# Warmup Iteration  14: 398284.423 ops/s
# Warmup Iteration  15: 417037.717 ops/s
# Warmup Iteration  16: 390039.933 ops/s
# Warmup Iteration  17: 413949.799 ops/s
# Warmup Iteration  18: 422118.447 ops/s
# Warmup Iteration  19: 423987.361 ops/s
# Warmup Iteration  20: 426397.807 ops/s
# Warmup Iteration  21: 425007.044 ops/s
# Warmup Iteration  22: 422842.026 ops/s
# Warmup Iteration  23: 418030.715 ops/s
# Warmup Iteration  24: 416762.289 ops/s
# Warmup Iteration  25: 441447.295 ops/s
# Warmup Iteration  26: 417078.433 ops/s
# Warmup Iteration  27: 430112.942 ops/s
# Warmup Iteration  28: 407838.863 ops/s
# Warmup Iteration  29: 421167.052 ops/s
# Warmup Iteration  30: 434474.735 ops/s
Iteration   1: 412901.782 ops/s
Iteration   2: 415379.438 ops/s
Iteration   3: 433718.536 ops/s
Iteration   4: 418175.287 ops/s
Iteration   5: 446419.413 ops/s
Iteration   6: 432022.647 ops/s
Iteration   7: 417901.297 ops/s
Iteration   8: 431233.518 ops/s
Iteration   9: 434123.493 ops/s
Iteration  10: 435601.512 ops/s
Iteration  11: 407099.747 ops/s
Iteration  12: 423512.649 ops/s
Iteration  13: 438551.683 ops/s
Iteration  14: 409721.827 ops/s
Iteration  15: 415299.813 ops/s
Iteration  16: 433844.609 ops/s
Iteration  17: 410843.757 ops/s
Iteration  18: 449020.699 ops/s
Iteration  19: 424247.495 ops/s
Iteration  20: 429711.468 ops/s
Iteration  21: 432303.717 ops/s
Iteration  22: 413311.572 ops/s
Iteration  23: 431520.973 ops/s
Iteration  24: 414285.736 ops/s
Iteration  25: 426820.604 ops/s
Iteration  26: 427852.195 ops/s
Iteration  27: 432912.792 ops/s
Iteration  28: 428962.043 ops/s
Iteration  29: 413783.173 ops/s
Iteration  30: 418501.060 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithSizeTest._Benchmark.benchmark_errorSkipInner":
  425319.485 ±(99.9%) 7306.931 ops/s [Average]
  (min, avg, max) = (407099.747, 425319.485, 449020.699), stdev = 10936.671
  CI (99.9%): [418012.554, 432626.415] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
ObservableWindowWithSizeTest._Benchmark.benchmark_errorSkipInner  thrpt   30  425319.485 ± 7306.931  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletableTest._Benchmark.benchmark_undeliverableUponCancel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletableTest._Benchmark.benchmark_undeliverableUponCancel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 20474.199 ops/s
# Warmup Iteration   2: 154481.470 ops/s
# Warmup Iteration   3: 179130.887 ops/s
# Warmup Iteration   4: 186821.479 ops/s
# Warmup Iteration   5: 212798.165 ops/s
# Warmup Iteration   6: 192348.384 ops/s
# Warmup Iteration   7: 218430.008 ops/s
# Warmup Iteration   8: 205079.968 ops/s
# Warmup Iteration   9: 218389.842 ops/s
# Warmup Iteration  10: 210523.388 ops/s
# Warmup Iteration  11: 174129.650 ops/s
# Warmup Iteration  12: 206767.066 ops/s
# Warmup Iteration  13: 213396.265 ops/s
# Warmup Iteration  14: 201099.907 ops/s
# Warmup Iteration  15: 206484.423 ops/s
# Warmup Iteration  16: 212867.143 ops/s
# Warmup Iteration  17: 210529.203 ops/s
# Warmup Iteration  18: 222494.732 ops/s
# Warmup Iteration  19: 220283.756 ops/s
# Warmup Iteration  20: 216051.813 ops/s
# Warmup Iteration  21: 225260.670 ops/s
# Warmup Iteration  22: 213493.022 ops/s
# Warmup Iteration  23: 222377.804 ops/s
# Warmup Iteration  24: 220271.549 ops/s
# Warmup Iteration  25: 209067.646 ops/s
# Warmup Iteration  26: 217080.077 ops/s
# Warmup Iteration  27: 227891.837 ops/s
# Warmup Iteration  28: 212347.940 ops/s
# Warmup Iteration  29: 220179.117 ops/s
# Warmup Iteration  30: 226212.132 ops/s
Iteration   1: 212860.810 ops/s
Iteration   2: 221078.355 ops/s
Iteration   3: 214632.975 ops/s
Iteration   4: 222659.997 ops/s
Iteration   5: 208577.083 ops/s
Iteration   6: 217728.402 ops/s
Iteration   7: 222862.296 ops/s
Iteration   8: 212881.057 ops/s
Iteration   9: 221496.644 ops/s
Iteration  10: 214371.714 ops/s
Iteration  11: 217486.268 ops/s
Iteration  12: 220116.361 ops/s
Iteration  13: 216194.467 ops/s
Iteration  14: 223118.863 ops/s
Iteration  15: 212525.725 ops/s
Iteration  16: 214555.846 ops/s
Iteration  17: 226153.043 ops/s
Iteration  18: 222086.416 ops/s
Iteration  19: 213800.706 ops/s
Iteration  20: 216352.069 ops/s
Iteration  21: 211597.133 ops/s
Iteration  22: 215453.356 ops/s
Iteration  23: 221995.315 ops/s
Iteration  24: 208685.066 ops/s
Iteration  25: 214448.540 ops/s
Iteration  26: 222861.187 ops/s
Iteration  27: 209342.378 ops/s
Iteration  28: 212777.427 ops/s
Iteration  29: 214918.779 ops/s
Iteration  30: 215796.561 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletableTest._Benchmark.benchmark_undeliverableUponCancel":
  216647.161 ±(99.9%) 3189.056 ops/s [Average]
  (min, avg, max) = (208577.083, 216647.161, 226153.043), stdev = 4773.230
  CI (99.9%): [213458.105, 219836.218] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt       Score      Error  Units
ObservableConcatMapCompletableTest._Benchmark.benchmark_undeliverableUponCancel  thrpt   30  216647.161 ± 3189.056  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapTest._Benchmark.benchmark_doubleOnSubscribeDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapTest._Benchmark.benchmark_doubleOnSubscribeDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 91513.590 ops/s
# Warmup Iteration   2: 338563.152 ops/s
# Warmup Iteration   3: 401617.387 ops/s
# Warmup Iteration   4: 397823.871 ops/s
# Warmup Iteration   5: 377898.147 ops/s
# Warmup Iteration   6: 426294.093 ops/s
# Warmup Iteration   7: 423640.606 ops/s
# Warmup Iteration   8: 440226.383 ops/s
# Warmup Iteration   9: 427619.083 ops/s
# Warmup Iteration  10: 437094.986 ops/s
# Warmup Iteration  11: 410918.461 ops/s
# Warmup Iteration  12: 440537.293 ops/s
# Warmup Iteration  13: 416431.715 ops/s
# Warmup Iteration  14: 442091.019 ops/s
# Warmup Iteration  15: 435645.288 ops/s
# Warmup Iteration  16: 419023.164 ops/s
# Warmup Iteration  17: 445040.933 ops/s
# Warmup Iteration  18: 441854.851 ops/s
# Warmup Iteration  19: 443032.934 ops/s
# Warmup Iteration  20: 448271.094 ops/s
# Warmup Iteration  21: 439594.914 ops/s
# Warmup Iteration  22: 450232.604 ops/s
# Warmup Iteration  23: 429380.257 ops/s
# Warmup Iteration  24: 449657.267 ops/s
# Warmup Iteration  25: 424479.676 ops/s
# Warmup Iteration  26: 444556.116 ops/s
# Warmup Iteration  27: 450742.305 ops/s
# Warmup Iteration  28: 439709.427 ops/s
# Warmup Iteration  29: 459189.375 ops/s
# Warmup Iteration  30: 445688.633 ops/s
Iteration   1: 443460.139 ops/s
Iteration   2: 450413.458 ops/s
Iteration   3: 430671.047 ops/s
Iteration   4: 461470.622 ops/s
Iteration   5: 444129.121 ops/s
Iteration   6: 441539.436 ops/s
Iteration   7: 457977.863 ops/s
Iteration   8: 429270.990 ops/s
Iteration   9: 443284.614 ops/s
Iteration  10: 456355.665 ops/s
Iteration  11: 429562.275 ops/s
Iteration  12: 438992.981 ops/s
Iteration  13: 432385.646 ops/s
Iteration  14: 441254.576 ops/s
Iteration  15: 436701.096 ops/s
Iteration  16: 464914.036 ops/s
Iteration  17: 437151.798 ops/s
Iteration  18: 453788.467 ops/s
Iteration  19: 439263.883 ops/s
Iteration  20: 454105.120 ops/s
Iteration  21: 431198.904 ops/s
Iteration  22: 439875.533 ops/s
Iteration  23: 435500.125 ops/s
Iteration  24: 436559.849 ops/s
Iteration  25: 463598.955 ops/s
Iteration  26: 423529.452 ops/s
Iteration  27: 454697.244 ops/s
Iteration  28: 456659.412 ops/s
Iteration  29: 432693.659 ops/s
Iteration  30: 460929.003 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapTest._Benchmark.benchmark_doubleOnSubscribeDelayError":
  444064.499 ±(99.9%) 7876.339 ops/s [Average]
  (min, avg, max) = (423529.452, 444064.499, 464914.036), stdev = 11788.934
  CI (99.9%): [436188.160, 451940.838] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score      Error  Units
ObservableConcatMapTest._Benchmark.benchmark_doubleOnSubscribeDelayError  thrpt   30  444064.499 ± 7876.339  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingTest._Benchmark.benchmark_blockingForEachThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingTest._Benchmark.benchmark_blockingForEachThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 181200.762 ops/s
# Warmup Iteration   2: 454893.845 ops/s
# Warmup Iteration   3: 548655.094 ops/s
# Warmup Iteration   4: 542893.339 ops/s
# Warmup Iteration   5: 474366.735 ops/s
# Warmup Iteration   6: 494030.653 ops/s
# Warmup Iteration   7: 538335.367 ops/s
# Warmup Iteration   8: 593584.826 ops/s
# Warmup Iteration   9: 549820.837 ops/s
# Warmup Iteration  10: 574596.531 ops/s
# Warmup Iteration  11: 570159.082 ops/s
# Warmup Iteration  12: 549076.876 ops/s
# Warmup Iteration  13: 591753.055 ops/s
# Warmup Iteration  14: 572938.577 ops/s
# Warmup Iteration  15: 543579.945 ops/s
# Warmup Iteration  16: 580882.616 ops/s
# Warmup Iteration  17: 580625.411 ops/s
# Warmup Iteration  18: 603388.806 ops/s
# Warmup Iteration  19: 597080.574 ops/s
# Warmup Iteration  20: 591580.634 ops/s
# Warmup Iteration  21: 615739.237 ops/s
# Warmup Iteration  22: 581131.468 ops/s
# Warmup Iteration  23: 609691.490 ops/s
# Warmup Iteration  24: 586788.644 ops/s
# Warmup Iteration  25: 585435.102 ops/s
# Warmup Iteration  26: 592637.407 ops/s
# Warmup Iteration  27: 579345.606 ops/s
# Warmup Iteration  28: 592714.428 ops/s
# Warmup Iteration  29: 611711.086 ops/s
# Warmup Iteration  30: 565659.745 ops/s
Iteration   1: 611776.705 ops/s
Iteration   2: 584247.274 ops/s
Iteration   3: 583448.305 ops/s
Iteration   4: 592691.940 ops/s
Iteration   5: 619166.555 ops/s
Iteration   6: 579148.346 ops/s
Iteration   7: 620159.038 ops/s
Iteration   8: 580791.045 ops/s
Iteration   9: 595331.571 ops/s
Iteration  10: 615197.333 ops/s
Iteration  11: 576921.827 ops/s
Iteration  12: 603417.608 ops/s
Iteration  13: 581593.961 ops/s
Iteration  14: 596877.523 ops/s
Iteration  15: 591095.484 ops/s
Iteration  16: 607869.374 ops/s
Iteration  17: 579256.650 ops/s
Iteration  18: 603521.303 ops/s
Iteration  19: 576636.219 ops/s
Iteration  20: 597233.269 ops/s
Iteration  21: 596319.341 ops/s
Iteration  22: 596691.942 ops/s
Iteration  23: 603629.122 ops/s
Iteration  24: 562279.731 ops/s
Iteration  25: 639738.573 ops/s
Iteration  26: 610029.187 ops/s
Iteration  27: 591411.550 ops/s
Iteration  28: 607679.089 ops/s
Iteration  29: 599073.565 ops/s
Iteration  30: 604667.659 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingTest._Benchmark.benchmark_blockingForEachThrows":
  596930.036 ±(99.9%) 10806.927 ops/s [Average]
  (min, avg, max) = (562279.731, 596930.036, 639738.573), stdev = 16175.300
  CI (99.9%): [586123.110, 607736.963] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score       Error  Units
ObservableBlockingTest._Benchmark.benchmark_blockingForEachThrows  thrpt   30  596930.036 ± 10806.927  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipTest._Benchmark.benchmark_skipNegativeElements$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipTest._Benchmark.benchmark_skipNegativeElements

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 298265.331 ops/s
# Warmup Iteration   2: 610280.888 ops/s
# Warmup Iteration   3: 675960.507 ops/s
# Warmup Iteration   4: 704776.967 ops/s
# Warmup Iteration   5: 656955.842 ops/s
# Warmup Iteration   6: 707995.015 ops/s
# Warmup Iteration   7: 723085.191 ops/s
# Warmup Iteration   8: 773406.745 ops/s
# Warmup Iteration   9: 699706.862 ops/s
# Warmup Iteration  10: 719643.349 ops/s
# Warmup Iteration  11: 747009.951 ops/s
# Warmup Iteration  12: 720464.158 ops/s
# Warmup Iteration  13: 752585.413 ops/s
# Warmup Iteration  14: 728182.669 ops/s
# Warmup Iteration  15: 747165.097 ops/s
# Warmup Iteration  16: 715112.686 ops/s
# Warmup Iteration  17: 762364.645 ops/s
# Warmup Iteration  18: 811930.940 ops/s
# Warmup Iteration  19: 755409.532 ops/s
# Warmup Iteration  20: 797993.535 ops/s
# Warmup Iteration  21: 809614.283 ops/s
# Warmup Iteration  22: 766201.490 ops/s
# Warmup Iteration  23: 788907.946 ops/s
# Warmup Iteration  24: 768651.960 ops/s
# Warmup Iteration  25: 765988.952 ops/s
# Warmup Iteration  26: 740862.633 ops/s
# Warmup Iteration  27: 810586.200 ops/s
# Warmup Iteration  28: 806712.209 ops/s
# Warmup Iteration  29: 766901.354 ops/s
# Warmup Iteration  30: 813282.422 ops/s
Iteration   1: 780625.486 ops/s
Iteration   2: 805843.491 ops/s
Iteration   3: 800385.962 ops/s
Iteration   4: 781987.873 ops/s
Iteration   5: 788539.674 ops/s
Iteration   6: 761946.503 ops/s
Iteration   7: 816288.885 ops/s
Iteration   8: 777767.887 ops/s
Iteration   9: 796276.275 ops/s
Iteration  10: 788079.321 ops/s
Iteration  11: 771171.009 ops/s
Iteration  12: 780716.691 ops/s
Iteration  13: 777317.420 ops/s
Iteration  14: 797385.357 ops/s
Iteration  15: 775090.471 ops/s
Iteration  16: 788777.162 ops/s
Iteration  17: 786659.949 ops/s
Iteration  18: 762689.637 ops/s
Iteration  19: 816300.980 ops/s
Iteration  20: 754352.155 ops/s
Iteration  21: 784414.096 ops/s
Iteration  22: 752767.626 ops/s
Iteration  23: 808251.122 ops/s
Iteration  24: 772773.450 ops/s
Iteration  25: 777354.074 ops/s
Iteration  26: 788162.248 ops/s
Iteration  27: 773279.895 ops/s
Iteration  28: 784989.413 ops/s
Iteration  29: 811475.299 ops/s
Iteration  30: 778280.398 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipTest._Benchmark.benchmark_skipNegativeElements":
  784664.994 ±(99.9%) 11126.713 ops/s [Average]
  (min, avg, max) = (752767.626, 784664.994, 816300.980), stdev = 16653.941
  CI (99.9%): [773538.281, 795791.706] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score       Error  Units
FlowableSkipTest._Benchmark.benchmark_skipNegativeElements  thrpt   30  784664.994 ± 11126.713  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFirstTest._Benchmark.benchmark_firstOrErrorOneElementObservable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFirstTest._Benchmark.benchmark_firstOrErrorOneElementObservable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.740 ops/s
# Warmup Iteration   2: 29802.338 ops/s
# Warmup Iteration   3: 56872.612 ops/s
# Warmup Iteration   4: 72887.009 ops/s
# Warmup Iteration   5: 72215.409 ops/s
# Warmup Iteration   6: 138383.981 ops/s
# Warmup Iteration   7: 329478.468 ops/s
# Warmup Iteration   8: 326679.618 ops/s
# Warmup Iteration   9: 339003.068 ops/s
# Warmup Iteration  10: 327847.313 ops/s
# Warmup Iteration  11: 331849.637 ops/s
# Warmup Iteration  12: 326156.403 ops/s
# Warmup Iteration  13: 328245.503 ops/s
# Warmup Iteration  14: 332683.564 ops/s
# Warmup Iteration  15: 335525.362 ops/s
# Warmup Iteration  16: 339766.034 ops/s
# Warmup Iteration  17: 325855.370 ops/s
# Warmup Iteration  18: 345374.399 ops/s
# Warmup Iteration  19: 344711.757 ops/s
# Warmup Iteration  20: 320614.397 ops/s
# Warmup Iteration  21: 344997.818 ops/s
# Warmup Iteration  22: 330823.826 ops/s
# Warmup Iteration  23: 344575.079 ops/s
# Warmup Iteration  24: 347079.837 ops/s
# Warmup Iteration  25: 316762.117 ops/s
# Warmup Iteration  26: 338318.461 ops/s
# Warmup Iteration  27: 342704.580 ops/s
# Warmup Iteration  28: 331966.480 ops/s
# Warmup Iteration  29: 330400.911 ops/s
# Warmup Iteration  30: 331973.729 ops/s
Iteration   1: 343795.727 ops/s
Iteration   2: 322999.632 ops/s
Iteration   3: 338447.169 ops/s
Iteration   4: 343376.161 ops/s
Iteration   5: 324894.934 ops/s
Iteration   6: 347496.202 ops/s
Iteration   7: 339034.644 ops/s
Iteration   8: 330955.033 ops/s
Iteration   9: 342606.882 ops/s
Iteration  10: 332551.047 ops/s
Iteration  11: 347139.042 ops/s
Iteration  12: 349203.351 ops/s
Iteration  13: 321989.322 ops/s
Iteration  14: 334671.162 ops/s
Iteration  15: 330762.017 ops/s
Iteration  16: 340635.844 ops/s
Iteration  17: 330720.918 ops/s
Iteration  18: 335777.380 ops/s
Iteration  19: 350814.334 ops/s
Iteration  20: 330368.797 ops/s
Iteration  21: 336374.142 ops/s
Iteration  22: 338162.579 ops/s
Iteration  23: 338580.501 ops/s
Iteration  24: 338987.993 ops/s
Iteration  25: 326356.704 ops/s
Iteration  26: 342162.086 ops/s
Iteration  27: 318338.590 ops/s
Iteration  28: 335225.171 ops/s
Iteration  29: 334515.399 ops/s
Iteration  30: 330186.683 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFirstTest._Benchmark.benchmark_firstOrErrorOneElementObservable":
  335904.315 ±(99.9%) 5492.586 ops/s [Average]
  (min, avg, max) = (318338.590, 335904.315, 350814.334), stdev = 8221.045
  CI (99.9%): [330411.729, 341396.901] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score      Error  Units
ObservableFirstTest._Benchmark.benchmark_firstOrErrorOneElementObservable  thrpt   30  335904.315 ± 5492.586  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableAnyTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableAnyTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 648367.253 ops/s
# Warmup Iteration   2: 3726685.908 ops/s
# Warmup Iteration   3: 4917913.048 ops/s
# Warmup Iteration   4: 5460934.547 ops/s
# Warmup Iteration   5: 5793862.015 ops/s
# Warmup Iteration   6: 5571533.664 ops/s
# Warmup Iteration   7: 5556704.025 ops/s
# Warmup Iteration   8: 5619072.902 ops/s
# Warmup Iteration   9: 5457005.222 ops/s
# Warmup Iteration  10: 5833976.613 ops/s
# Warmup Iteration  11: 5671965.480 ops/s
# Warmup Iteration  12: 5549671.850 ops/s
# Warmup Iteration  13: 5713957.911 ops/s
# Warmup Iteration  14: 5642963.435 ops/s
# Warmup Iteration  15: 5900043.073 ops/s
# Warmup Iteration  16: 5458054.106 ops/s
# Warmup Iteration  17: 5519155.985 ops/s
# Warmup Iteration  18: 5780753.403 ops/s
# Warmup Iteration  19: 5534331.430 ops/s
# Warmup Iteration  20: 5500728.482 ops/s
# Warmup Iteration  21: 5869024.776 ops/s
# Warmup Iteration  22: 5463632.767 ops/s
# Warmup Iteration  23: 5817655.335 ops/s
# Warmup Iteration  24: 5394663.957 ops/s
# Warmup Iteration  25: 5801218.072 ops/s
# Warmup Iteration  26: 5737146.380 ops/s
# Warmup Iteration  27: 5553365.726 ops/s
# Warmup Iteration  28: 5881909.692 ops/s
# Warmup Iteration  29: 5530653.616 ops/s
# Warmup Iteration  30: 5493935.174 ops/s
Iteration   1: 5837845.316 ops/s
Iteration   2: 5489068.328 ops/s
Iteration   3: 5868310.298 ops/s
Iteration   4: 5558647.987 ops/s
Iteration   5: 5714782.073 ops/s
Iteration   6: 5869943.117 ops/s
Iteration   7: 5397672.077 ops/s
Iteration   8: 5764091.905 ops/s
Iteration   9: 5687042.354 ops/s
Iteration  10: 5746621.178 ops/s
Iteration  11: 5554461.915 ops/s
Iteration  12: 5645353.176 ops/s
Iteration  13: 5604220.862 ops/s
Iteration  14: 5459664.785 ops/s
Iteration  15: 5719008.751 ops/s
Iteration  16: 5746801.185 ops/s
Iteration  17: 5472344.133 ops/s
Iteration  18: 5727270.937 ops/s
Iteration  19: 5436419.169 ops/s
Iteration  20: 5631350.681 ops/s
Iteration  21: 5843801.651 ops/s
Iteration  22: 5540057.357 ops/s
Iteration  23: 5707496.018 ops/s
Iteration  24: 5596353.747 ops/s
Iteration  25: 5680314.536 ops/s
Iteration  26: 5315303.530 ops/s
Iteration  27: 4962253.696 ops/s
Iteration  28: 5479450.012 ops/s
Iteration  29: 5523312.453 ops/s
Iteration  30: 5878824.539 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableAnyTest._Benchmark.benchmark_dispose":
  5615269.592 ±(99.9%) 130436.090 ops/s [Average]
  (min, avg, max) = (4962253.696, 5615269.592, 5878824.539), stdev = 195230.613
  CI (99.9%): [5484833.503, 5745705.682] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt        Score        Error  Units
ObservableAnyTest._Benchmark.benchmark_dispose  thrpt   30  5615269.592 ± 130436.090  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDoAfterNextTest._Benchmark.benchmark_consumerThrowsConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDoAfterNextTest._Benchmark.benchmark_consumerThrowsConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 118991.517 ops/s
# Warmup Iteration   2: 434223.879 ops/s
# Warmup Iteration   3: 533363.418 ops/s
# Warmup Iteration   4: 513687.985 ops/s
# Warmup Iteration   5: 538811.911 ops/s
# Warmup Iteration   6: 547337.244 ops/s
# Warmup Iteration   7: 522213.224 ops/s
# Warmup Iteration   8: 538733.766 ops/s
# Warmup Iteration   9: 511013.347 ops/s
# Warmup Iteration  10: 535237.549 ops/s
# Warmup Iteration  11: 551091.593 ops/s
# Warmup Iteration  12: 510510.620 ops/s
# Warmup Iteration  13: 558906.431 ops/s
# Warmup Iteration  14: 520074.805 ops/s
# Warmup Iteration  15: 542507.254 ops/s
# Warmup Iteration  16: 535649.877 ops/s
# Warmup Iteration  17: 563645.116 ops/s
# Warmup Iteration  18: 546093.844 ops/s
# Warmup Iteration  19: 541644.588 ops/s
# Warmup Iteration  20: 576379.893 ops/s
# Warmup Iteration  21: 565248.153 ops/s
# Warmup Iteration  22: 567046.078 ops/s
# Warmup Iteration  23: 548255.606 ops/s
# Warmup Iteration  24: 531814.671 ops/s
# Warmup Iteration  25: 547788.672 ops/s
# Warmup Iteration  26: 560698.160 ops/s
# Warmup Iteration  27: 508135.474 ops/s
# Warmup Iteration  28: 542361.256 ops/s
# Warmup Iteration  29: 542647.062 ops/s
# Warmup Iteration  30: 588406.474 ops/s
Iteration   1: 560608.561 ops/s
Iteration   2: 559458.575 ops/s
Iteration   3: 558323.874 ops/s
Iteration   4: 565910.110 ops/s
Iteration   5: 570937.659 ops/s
Iteration   6: 536586.508 ops/s
Iteration   7: 566021.584 ops/s
Iteration   8: 552533.073 ops/s
Iteration   9: 554663.743 ops/s
Iteration  10: 564211.156 ops/s
Iteration  11: 545430.003 ops/s
Iteration  12: 554863.923 ops/s
Iteration  13: 574893.878 ops/s
Iteration  14: 548606.528 ops/s
Iteration  15: 545206.659 ops/s
Iteration  16: 574581.335 ops/s
Iteration  17: 563488.320 ops/s
Iteration  18: 558117.417 ops/s
Iteration  19: 562651.017 ops/s
Iteration  20: 560549.428 ops/s
Iteration  21: 576929.877 ops/s
Iteration  22: 544327.530 ops/s
Iteration  23: 568861.662 ops/s
Iteration  24: 554277.807 ops/s
Iteration  25: 569195.381 ops/s
Iteration  26: 545458.889 ops/s
Iteration  27: 572229.246 ops/s
Iteration  28: 546695.221 ops/s
Iteration  29: 559284.291 ops/s
Iteration  30: 584768.282 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableDoAfterNextTest._Benchmark.benchmark_consumerThrowsConditional":
  559989.051 ±(99.9%) 7616.972 ops/s [Average]
  (min, avg, max) = (536586.508, 559989.051, 584768.282), stdev = 11400.726
  CI (99.9%): [552372.079, 567606.023] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score      Error  Units
ObservableDoAfterNextTest._Benchmark.benchmark_consumerThrowsConditional  thrpt   30  559989.051 ± 7616.972  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_scanSeedFunctionReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_scanSeedFunctionReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 161473.904 ops/s
# Warmup Iteration   2: 550354.274 ops/s
# Warmup Iteration   3: 573391.750 ops/s
# Warmup Iteration   4: 616371.058 ops/s
# Warmup Iteration   5: 610060.829 ops/s
# Warmup Iteration   6: 610025.965 ops/s
# Warmup Iteration   7: 597932.209 ops/s
# Warmup Iteration   8: 619771.128 ops/s
# Warmup Iteration   9: 605497.883 ops/s
# Warmup Iteration  10: 625931.093 ops/s
# Warmup Iteration  11: 605590.558 ops/s
# Warmup Iteration  12: 589295.496 ops/s
# Warmup Iteration  13: 623441.473 ops/s
# Warmup Iteration  14: 597960.407 ops/s
# Warmup Iteration  15: 614053.320 ops/s
# Warmup Iteration  16: 626722.944 ops/s
# Warmup Iteration  17: 618468.846 ops/s
# Warmup Iteration  18: 599163.634 ops/s
# Warmup Iteration  19: 621886.552 ops/s
# Warmup Iteration  20: 647698.716 ops/s
# Warmup Iteration  21: 647943.925 ops/s
# Warmup Iteration  22: 628428.527 ops/s
# Warmup Iteration  23: 658564.195 ops/s
# Warmup Iteration  24: 636869.708 ops/s
# Warmup Iteration  25: 614081.883 ops/s
# Warmup Iteration  26: 653238.939 ops/s
# Warmup Iteration  27: 627712.408 ops/s
# Warmup Iteration  28: 645233.018 ops/s
# Warmup Iteration  29: 650126.777 ops/s
# Warmup Iteration  30: 634059.599 ops/s
Iteration   1: 660548.527 ops/s
Iteration   2: 616776.322 ops/s
Iteration   3: 637556.740 ops/s
Iteration   4: 639666.961 ops/s
Iteration   5: 643658.062 ops/s
Iteration   6: 632192.572 ops/s
Iteration   7: 621540.303 ops/s
Iteration   8: 652408.353 ops/s
Iteration   9: 631372.670 ops/s
Iteration  10: 607316.618 ops/s
Iteration  11: 645257.956 ops/s
Iteration  12: 634194.833 ops/s
Iteration  13: 649151.647 ops/s
Iteration  14: 643781.115 ops/s
Iteration  15: 616413.723 ops/s
Iteration  16: 638470.424 ops/s
Iteration  17: 657541.998 ops/s
Iteration  18: 605108.448 ops/s
Iteration  19: 639001.934 ops/s
Iteration  20: 632197.876 ops/s
Iteration  21: 462920.602 ops/s
Iteration  22: 645859.254 ops/s
Iteration  23: 623902.903 ops/s
Iteration  24: 648577.007 ops/s
Iteration  25: 636184.789 ops/s
Iteration  26: 656108.761 ops/s
Iteration  27: 623698.340 ops/s
Iteration  28: 638329.269 ops/s
Iteration  29: 660465.741 ops/s
Iteration  30: 626312.117 ops/s


Result "io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_scanSeedFunctionReturnsNull":
  630883.862 ±(99.9%) 23330.974 ops/s [Average]
  (min, avg, max) = (462920.602, 630883.862, 660548.527), stdev = 34920.706
  CI (99.9%): [607552.889, 654214.836] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score       Error  Units
ObservableNullTests._Benchmark.benchmark_scanSeedFunctionReturnsNull  thrpt   30  630883.862 ± 23330.974  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDelaySubscriptionOtherTest._Benchmark.benchmark_noPrematureSubscription$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDelaySubscriptionOtherTest._Benchmark.benchmark_noPrematureSubscription

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 502995.140 ops/s
# Warmup Iteration   2: 1545430.311 ops/s
# Warmup Iteration   3: 2927949.879 ops/s
# Warmup Iteration   4: 3323147.098 ops/s
# Warmup Iteration   5: 3517815.723 ops/s
# Warmup Iteration   6: 3453015.224 ops/s
# Warmup Iteration   7: 3365660.122 ops/s
# Warmup Iteration   8: 3533659.294 ops/s
# Warmup Iteration   9: 3390342.398 ops/s
# Warmup Iteration  10: 3444458.188 ops/s
# Warmup Iteration  11: 3399824.976 ops/s
# Warmup Iteration  12: 3476833.012 ops/s
# Warmup Iteration  13: 3399774.470 ops/s
# Warmup Iteration  14: 3381023.572 ops/s
# Warmup Iteration  15: 3448656.037 ops/s
# Warmup Iteration  16: 3621386.492 ops/s
# Warmup Iteration  17: 3454709.633 ops/s
# Warmup Iteration  18: 3358309.669 ops/s
# Warmup Iteration  19: 3447822.308 ops/s
# Warmup Iteration  20: 3498345.616 ops/s
# Warmup Iteration  21: 3326553.106 ops/s
# Warmup Iteration  22: 3548945.616 ops/s
# Warmup Iteration  23: 3447942.774 ops/s
# Warmup Iteration  24: 3479113.947 ops/s
# Warmup Iteration  25: 3501662.758 ops/s
# Warmup Iteration  26: 3411194.040 ops/s
# Warmup Iteration  27: 3610513.379 ops/s
# Warmup Iteration  28: 3358170.403 ops/s
# Warmup Iteration  29: 3462761.423 ops/s
# Warmup Iteration  30: 3544465.826 ops/s
Iteration   1: 3490229.867 ops/s
Iteration   2: 3549312.189 ops/s
Iteration   3: 3394775.363 ops/s
Iteration   4: 3435014.997 ops/s
Iteration   5: 3393211.761 ops/s
Iteration   6: 3535833.251 ops/s
Iteration   7: 3603613.265 ops/s
Iteration   8: 3319865.678 ops/s
Iteration   9: 3508050.081 ops/s
Iteration  10: 3417937.141 ops/s
Iteration  11: 3558835.236 ops/s
Iteration  12: 3300179.773 ops/s
Iteration  13: 3576804.269 ops/s
Iteration  14: 3320410.345 ops/s
Iteration  15: 3439290.462 ops/s
Iteration  16: 3491027.752 ops/s
Iteration  17: 3337921.752 ops/s
Iteration  18: 3603100.073 ops/s
Iteration  19: 3561861.057 ops/s
Iteration  20: 3375647.249 ops/s
Iteration  21: 3516469.049 ops/s
Iteration  22: 3371026.016 ops/s
Iteration  23: 3474490.400 ops/s
Iteration  24: 3403932.411 ops/s
Iteration  25: 3380392.468 ops/s
Iteration  26: 3501281.751 ops/s
Iteration  27: 3533242.139 ops/s
Iteration  28: 3266725.812 ops/s
Iteration  29: 3609330.174 ops/s
Iteration  30: 3429013.001 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableDelaySubscriptionOtherTest._Benchmark.benchmark_noPrematureSubscription":
  3456627.493 ±(99.9%) 65550.916 ops/s [Average]
  (min, avg, max) = (3266725.812, 3456627.493, 3609330.174), stdev = 98113.532
  CI (99.9%): [3391076.577, 3522178.408] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           Mode  Cnt        Score       Error  Units
ObservableDelaySubscriptionOtherTest._Benchmark.benchmark_noPrematureSubscription  thrpt   30  3456627.493 ± 65550.916  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDelaySubscriptionOtherTest._Benchmark.benchmark_noMultipleSubscriptions$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDelaySubscriptionOtherTest._Benchmark.benchmark_noMultipleSubscriptions

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 427057.539 ops/s
# Warmup Iteration   2: 2237167.115 ops/s
# Warmup Iteration   3: 2787794.542 ops/s
# Warmup Iteration   4: 3377876.846 ops/s
# Warmup Iteration   5: 3611253.335 ops/s
# Warmup Iteration   6: 3341077.023 ops/s
# Warmup Iteration   7: 3323840.495 ops/s
# Warmup Iteration   8: 3404814.422 ops/s
# Warmup Iteration   9: 3461124.378 ops/s
# Warmup Iteration  10: 3370871.014 ops/s
# Warmup Iteration  11: 3433765.801 ops/s
# Warmup Iteration  12: 3382929.769 ops/s
# Warmup Iteration  13: 3464742.275 ops/s
# Warmup Iteration  14: 3629564.587 ops/s
# Warmup Iteration  15: 3478737.735 ops/s
# Warmup Iteration  16: 3373295.193 ops/s
# Warmup Iteration  17: 3585981.779 ops/s
# Warmup Iteration  18: 3532559.873 ops/s
# Warmup Iteration  19: 3305579.194 ops/s
# Warmup Iteration  20: 3494501.335 ops/s
# Warmup Iteration  21: 3314566.216 ops/s
# Warmup Iteration  22: 3530817.740 ops/s
# Warmup Iteration  23: 3409714.792 ops/s
# Warmup Iteration  24: 3372591.155 ops/s
# Warmup Iteration  25: 3527112.855 ops/s
# Warmup Iteration  26: 3320299.516 ops/s
# Warmup Iteration  27: 3417586.454 ops/s
# Warmup Iteration  28: 3408680.947 ops/s
# Warmup Iteration  29: 3433706.348 ops/s
# Warmup Iteration  30: 3461359.625 ops/s
Iteration   1: 3339422.380 ops/s
Iteration   2: 3456851.617 ops/s
Iteration   3: 3370015.715 ops/s
Iteration   4: 3405136.408 ops/s
Iteration   5: 3349294.795 ops/s
Iteration   6: 3407019.603 ops/s
Iteration   7: 3445750.963 ops/s
Iteration   8: 3382875.696 ops/s
Iteration   9: 3452655.815 ops/s
Iteration  10: 3371596.553 ops/s
Iteration  11: 3437655.824 ops/s
Iteration  12: 3386604.144 ops/s
Iteration  13: 3413139.274 ops/s
Iteration  14: 3401900.388 ops/s
Iteration  15: 3337229.265 ops/s
Iteration  16: 2715253.528 ops/s
Iteration  17: 3469330.276 ops/s
Iteration  18: 3299251.777 ops/s
Iteration  19: 3479008.280 ops/s
Iteration  20: 3339641.308 ops/s
Iteration  21: 3371925.519 ops/s
Iteration  22: 3410666.382 ops/s
Iteration  23: 3488891.157 ops/s
Iteration  24: 3339389.404 ops/s
Iteration  25: 3425586.979 ops/s
Iteration  26: 3457940.915 ops/s
Iteration  27: 3403682.264 ops/s
Iteration  28: 3464347.884 ops/s
Iteration  29: 3363769.472 ops/s
Iteration  30: 3462007.308 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableDelaySubscriptionOtherTest._Benchmark.benchmark_noMultipleSubscriptions":
  3381594.696 ±(99.9%) 90447.489 ops/s [Average]
  (min, avg, max) = (2715253.528, 3381594.696, 3488891.157), stdev = 135377.554
  CI (99.9%): [3291147.207, 3472042.186] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           Mode  Cnt        Score       Error  Units
ObservableDelaySubscriptionOtherTest._Benchmark.benchmark_noMultipleSubscriptions  thrpt   30  3381594.696 ± 90447.489  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservablePublishTest._Benchmark.benchmark_subscribeAfterDisconnectThenConnect$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservablePublishTest._Benchmark.benchmark_subscribeAfterDisconnectThenConnect

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 340145.622 ops/s
# Warmup Iteration   2: 1387484.344 ops/s
# Warmup Iteration   3: 1948792.041 ops/s
# Warmup Iteration   4: 2073215.179 ops/s
# Warmup Iteration   5: 1920321.399 ops/s
# Warmup Iteration   6: 1950585.231 ops/s
# Warmup Iteration   7: 2079921.838 ops/s
# Warmup Iteration   8: 1959379.266 ops/s
# Warmup Iteration   9: 1903156.841 ops/s
# Warmup Iteration  10: 1823429.611 ops/s
# Warmup Iteration  11: 1919647.864 ops/s
# Warmup Iteration  12: 2105470.427 ops/s
# Warmup Iteration  13: 2002722.836 ops/s
# Warmup Iteration  14: 2064658.417 ops/s
# Warmup Iteration  15: 1932510.422 ops/s
# Warmup Iteration  16: 2077653.824 ops/s
# Warmup Iteration  17: 1982731.905 ops/s
# Warmup Iteration  18: 1966613.751 ops/s
# Warmup Iteration  19: 2058830.838 ops/s
# Warmup Iteration  20: 1963151.873 ops/s
# Warmup Iteration  21: 2049200.075 ops/s
# Warmup Iteration  22: 1944484.670 ops/s
# Warmup Iteration  23: 1915543.921 ops/s
# Warmup Iteration  24: 2016273.195 ops/s
# Warmup Iteration  25: 1976414.165 ops/s
# Warmup Iteration  26: 2031669.210 ops/s
# Warmup Iteration  27: 2017931.978 ops/s
# Warmup Iteration  28: 2053298.743 ops/s
# Warmup Iteration  29: 2008008.634 ops/s
# Warmup Iteration  30: 1985286.990 ops/s
Iteration   1: 2053799.892 ops/s
Iteration   2: 2046527.655 ops/s
Iteration   3: 1995324.194 ops/s
Iteration   4: 2040782.969 ops/s
Iteration   5: 2021771.505 ops/s
Iteration   6: 2006918.708 ops/s
Iteration   7: 1996137.984 ops/s
Iteration   8: 1996528.026 ops/s
Iteration   9: 2028279.072 ops/s
Iteration  10: 1982779.251 ops/s
Iteration  11: 2004629.827 ops/s
Iteration  12: 2043402.134 ops/s
Iteration  13: 1971596.880 ops/s
Iteration  14: 2080468.995 ops/s
Iteration  15: 2077227.176 ops/s
Iteration  16: 1975172.002 ops/s
Iteration  17: 2103188.642 ops/s
Iteration  18: 2093045.243 ops/s
Iteration  19: 1984989.524 ops/s
Iteration  20: 2078470.601 ops/s
Iteration  21: 1963494.540 ops/s
Iteration  22: 2073079.130 ops/s
Iteration  23: 1879903.122 ops/s
Iteration  24: 2088014.881 ops/s
Iteration  25: 1984684.400 ops/s
Iteration  26: 2028364.128 ops/s
Iteration  27: 2100035.123 ops/s
Iteration  28: 1957998.779 ops/s
Iteration  29: 2011501.617 ops/s
Iteration  30: 2004335.174 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservablePublishTest._Benchmark.benchmark_subscribeAfterDisconnectThenConnect":
  2022415.039 ±(99.9%) 34332.014 ops/s [Average]
  (min, avg, max) = (1879903.122, 2022415.039, 2103188.642), stdev = 51386.546
  CI (99.9%): [1988083.025, 2056747.053] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt        Score       Error  Units
ObservablePublishTest._Benchmark.benchmark_subscribeAfterDisconnectThenConnect  thrpt   30  2022415.039 ± 34332.014  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservablePublishTest._Benchmark.benchmark_noSubscriberRetentionOnCompleted$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservablePublishTest._Benchmark.benchmark_noSubscriberRetentionOnCompleted

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1177202.611 ops/s
# Warmup Iteration   2: 2913994.420 ops/s
# Warmup Iteration   3: 3414256.080 ops/s
# Warmup Iteration   4: 3788806.375 ops/s
# Warmup Iteration   5: 3888047.858 ops/s
# Warmup Iteration   6: 3820072.004 ops/s
# Warmup Iteration   7: 3839556.470 ops/s
# Warmup Iteration   8: 3747668.826 ops/s
# Warmup Iteration   9: 3846835.894 ops/s
# Warmup Iteration  10: 3909755.404 ops/s
# Warmup Iteration  11: 3705039.821 ops/s
# Warmup Iteration  12: 3906498.759 ops/s
# Warmup Iteration  13: 3852854.079 ops/s
# Warmup Iteration  14: 3812899.409 ops/s
# Warmup Iteration  15: 3792562.461 ops/s
# Warmup Iteration  16: 3910253.982 ops/s
# Warmup Iteration  17: 3898008.661 ops/s
# Warmup Iteration  18: 3787734.706 ops/s
# Warmup Iteration  19: 3923900.429 ops/s
# Warmup Iteration  20: 3816846.393 ops/s
# Warmup Iteration  21: 4022450.672 ops/s
# Warmup Iteration  22: 3903156.317 ops/s
# Warmup Iteration  23: 3818029.769 ops/s
# Warmup Iteration  24: 3878557.616 ops/s
# Warmup Iteration  25: 3851874.849 ops/s
# Warmup Iteration  26: 3928559.247 ops/s
# Warmup Iteration  27: 3866822.999 ops/s
# Warmup Iteration  28: 3931880.173 ops/s
# Warmup Iteration  29: 3844557.049 ops/s
# Warmup Iteration  30: 3843234.332 ops/s
Iteration   1: 3931574.560 ops/s
Iteration   2: 3669448.979 ops/s
Iteration   3: 3906961.248 ops/s
Iteration   4: 3797896.641 ops/s
Iteration   5: 3866511.650 ops/s
Iteration   6: 3875145.378 ops/s
Iteration   7: 3856582.909 ops/s
Iteration   8: 4041182.801 ops/s
Iteration   9: 3670997.232 ops/s
Iteration  10: 3564222.916 ops/s
Iteration  11: 3334039.401 ops/s
Iteration  12: 3850793.167 ops/s
Iteration  13: 3927281.568 ops/s
Iteration  14: 3967285.607 ops/s
Iteration  15: 3666103.771 ops/s
Iteration  16: 3724521.957 ops/s
Iteration  17: 3994725.267 ops/s
Iteration  18: 3872638.871 ops/s
Iteration  19: 3696049.940 ops/s
Iteration  20: 3895113.475 ops/s
Iteration  21: 3784672.334 ops/s
Iteration  22: 3836753.212 ops/s
Iteration  23: 3866061.766 ops/s
Iteration  24: 3885621.451 ops/s
Iteration  25: 3887241.947 ops/s
Iteration  26: 3837750.771 ops/s
Iteration  27: 4054120.770 ops/s
Iteration  28: 3700797.116 ops/s
Iteration  29: 3927847.849 ops/s
Iteration  30: 3864861.258 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservablePublishTest._Benchmark.benchmark_noSubscriberRetentionOnCompleted":
  3825160.194 ±(99.9%) 99122.568 ops/s [Average]
  (min, avg, max) = (3334039.401, 3825160.194, 4054120.770), stdev = 148362.004
  CI (99.9%): [3726037.626, 3924282.761] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score       Error  Units
ObservablePublishTest._Benchmark.benchmark_noSubscriberRetentionOnCompleted  thrpt   30  3825160.194 ± 99122.568  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_distinctFunctionReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_distinctFunctionReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 224240.598 ops/s
# Warmup Iteration   2: 543842.931 ops/s
# Warmup Iteration   3: 574122.476 ops/s
# Warmup Iteration   4: 528809.436 ops/s
# Warmup Iteration   5: 631755.635 ops/s
# Warmup Iteration   6: 493866.859 ops/s
# Warmup Iteration   7: 618109.213 ops/s
# Warmup Iteration   8: 623703.375 ops/s
# Warmup Iteration   9: 599163.032 ops/s
# Warmup Iteration  10: 622795.574 ops/s
# Warmup Iteration  11: 596134.568 ops/s
# Warmup Iteration  12: 619810.801 ops/s
# Warmup Iteration  13: 598588.678 ops/s
# Warmup Iteration  14: 607836.152 ops/s
# Warmup Iteration  15: 628657.511 ops/s
# Warmup Iteration  16: 603755.437 ops/s
# Warmup Iteration  17: 640186.585 ops/s
# Warmup Iteration  18: 630235.887 ops/s
# Warmup Iteration  19: 647910.047 ops/s
# Warmup Iteration  20: 628999.623 ops/s
# Warmup Iteration  21: 638882.243 ops/s
# Warmup Iteration  22: 637600.993 ops/s
# Warmup Iteration  23: 650962.406 ops/s
# Warmup Iteration  24: 632325.397 ops/s
# Warmup Iteration  25: 634849.722 ops/s
# Warmup Iteration  26: 654581.887 ops/s
# Warmup Iteration  27: 601450.321 ops/s
# Warmup Iteration  28: 628043.963 ops/s
# Warmup Iteration  29: 637223.934 ops/s
# Warmup Iteration  30: 630028.356 ops/s
Iteration   1: 626975.239 ops/s
Iteration   2: 638388.342 ops/s
Iteration   3: 641330.860 ops/s
Iteration   4: 635003.061 ops/s
Iteration   5: 628102.044 ops/s
Iteration   6: 622561.033 ops/s
Iteration   7: 657478.158 ops/s
Iteration   8: 630287.906 ops/s
Iteration   9: 633456.055 ops/s
Iteration  10: 616195.637 ops/s
Iteration  11: 646216.856 ops/s
Iteration  12: 649800.409 ops/s
Iteration  13: 635795.931 ops/s
Iteration  14: 625891.900 ops/s
Iteration  15: 613440.444 ops/s
Iteration  16: 662134.545 ops/s
Iteration  17: 623780.706 ops/s
Iteration  18: 632073.027 ops/s
Iteration  19: 660038.523 ops/s
Iteration  20: 624009.984 ops/s
Iteration  21: 661489.747 ops/s
Iteration  22: 631781.899 ops/s
Iteration  23: 664931.802 ops/s
Iteration  24: 625549.255 ops/s
Iteration  25: 635614.291 ops/s
Iteration  26: 640177.236 ops/s
Iteration  27: 627681.806 ops/s
Iteration  28: 660128.678 ops/s
Iteration  29: 630108.148 ops/s
Iteration  30: 650800.594 ops/s


Result "io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_distinctFunctionReturnsNull":
  637707.471 ±(99.9%) 9750.463 ops/s [Average]
  (min, avg, max) = (613440.444, 637707.471, 664931.802), stdev = 14594.035
  CI (99.9%): [627957.008, 647457.934] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score      Error  Units
ObservableNullTests._Benchmark.benchmark_distinctFunctionReturnsNull  thrpt   30  637707.471 ± 9750.463  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastTest._Benchmark.benchmark_takeLastWithNegativeCount$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastTest._Benchmark.benchmark_takeLastWithNegativeCount

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 413161.347 ops/s
# Warmup Iteration   2: 590776.901 ops/s
# Warmup Iteration   3: 716234.956 ops/s
# Warmup Iteration   4: 660769.038 ops/s
# Warmup Iteration   5: 756831.509 ops/s
# Warmup Iteration   6: 618610.167 ops/s
# Warmup Iteration   7: 753847.201 ops/s
# Warmup Iteration   8: 718551.800 ops/s
# Warmup Iteration   9: 716987.179 ops/s
# Warmup Iteration  10: 734011.157 ops/s
# Warmup Iteration  11: 736863.000 ops/s
# Warmup Iteration  12: 711575.930 ops/s
# Warmup Iteration  13: 770762.476 ops/s
# Warmup Iteration  14: 734924.080 ops/s
# Warmup Iteration  15: 718343.319 ops/s
# Warmup Iteration  16: 746990.291 ops/s
# Warmup Iteration  17: 769089.733 ops/s
# Warmup Iteration  18: 783308.476 ops/s
# Warmup Iteration  19: 783904.930 ops/s
# Warmup Iteration  20: 775655.729 ops/s
# Warmup Iteration  21: 791485.586 ops/s
# Warmup Iteration  22: 767061.467 ops/s
# Warmup Iteration  23: 778993.662 ops/s
# Warmup Iteration  24: 776619.354 ops/s
# Warmup Iteration  25: 778474.950 ops/s
# Warmup Iteration  26: 801999.377 ops/s
# Warmup Iteration  27: 766879.963 ops/s
# Warmup Iteration  28: 762598.041 ops/s
# Warmup Iteration  29: 791243.196 ops/s
# Warmup Iteration  30: 771388.451 ops/s
Iteration   1: 781837.945 ops/s
Iteration   2: 792283.538 ops/s
Iteration   3: 761832.629 ops/s
Iteration   4: 779794.739 ops/s
Iteration   5: 744993.019 ops/s
Iteration   6: 722733.645 ops/s
Iteration   7: 772045.627 ops/s
Iteration   8: 798780.087 ops/s
Iteration   9: 769333.905 ops/s
Iteration  10: 757710.949 ops/s
Iteration  11: 789915.686 ops/s
Iteration  12: 763082.732 ops/s
Iteration  13: 783669.291 ops/s
Iteration  14: 776567.691 ops/s
Iteration  15: 787792.063 ops/s
Iteration  16: 785126.365 ops/s
Iteration  17: 773107.931 ops/s
Iteration  18: 774359.148 ops/s
Iteration  19: 767171.438 ops/s
Iteration  20: 797584.897 ops/s
Iteration  21: 772622.597 ops/s
Iteration  22: 776420.099 ops/s
Iteration  23: 808466.747 ops/s
Iteration  24: 745630.064 ops/s
Iteration  25: 799234.900 ops/s
Iteration  26: 758581.370 ops/s
Iteration  27: 778263.319 ops/s
Iteration  28: 761630.081 ops/s
Iteration  29: 805860.079 ops/s
Iteration  30: 786870.506 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastTest._Benchmark.benchmark_takeLastWithNegativeCount":
  775776.770 ±(99.9%) 12697.580 ops/s [Average]
  (min, avg, max) = (722733.645, 775776.770, 808466.747), stdev = 19005.141
  CI (99.9%): [763079.190, 788474.349] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score       Error  Units
ObservableTakeLastTest._Benchmark.benchmark_takeLastWithNegativeCount  thrpt   30  775776.770 ± 12697.580  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtTest._Benchmark.benchmark_elementAtWithMinusIndex$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtTest._Benchmark.benchmark_elementAtWithMinusIndex

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 443818.990 ops/s
# Warmup Iteration   2: 670737.882 ops/s
# Warmup Iteration   3: 631252.159 ops/s
# Warmup Iteration   4: 747469.296 ops/s
# Warmup Iteration   5: 624876.975 ops/s
# Warmup Iteration   6: 727191.372 ops/s
# Warmup Iteration   7: 732421.055 ops/s
# Warmup Iteration   8: 773934.530 ops/s
# Warmup Iteration   9: 729845.546 ops/s
# Warmup Iteration  10: 754911.178 ops/s
# Warmup Iteration  11: 720284.281 ops/s
# Warmup Iteration  12: 753418.558 ops/s
# Warmup Iteration  13: 759377.188 ops/s
# Warmup Iteration  14: 720482.692 ops/s
# Warmup Iteration  15: 760394.492 ops/s
# Warmup Iteration  16: 719588.529 ops/s
# Warmup Iteration  17: 807353.203 ops/s
# Warmup Iteration  18: 766419.778 ops/s
# Warmup Iteration  19: 800285.343 ops/s
# Warmup Iteration  20: 811666.262 ops/s
# Warmup Iteration  21: 765108.017 ops/s
# Warmup Iteration  22: 806414.429 ops/s
# Warmup Iteration  23: 771700.335 ops/s
# Warmup Iteration  24: 805503.607 ops/s
# Warmup Iteration  25: 790446.325 ops/s
# Warmup Iteration  26: 801586.150 ops/s
# Warmup Iteration  27: 803591.141 ops/s
# Warmup Iteration  28: 765105.533 ops/s
# Warmup Iteration  29: 809358.023 ops/s
# Warmup Iteration  30: 822748.131 ops/s
Iteration   1: 770259.809 ops/s
Iteration   2: 788815.543 ops/s
Iteration   3: 798383.681 ops/s
Iteration   4: 798832.906 ops/s
Iteration   5: 801682.520 ops/s
Iteration   6: 793463.432 ops/s
Iteration   7: 808346.777 ops/s
Iteration   8: 814246.518 ops/s
Iteration   9: 775042.676 ops/s
Iteration  10: 802765.321 ops/s
Iteration  11: 748960.329 ops/s
Iteration  12: 793157.832 ops/s
Iteration  13: 795806.653 ops/s
Iteration  14: 762677.506 ops/s
Iteration  15: 799445.255 ops/s
Iteration  16: 792858.977 ops/s
Iteration  17: 771113.005 ops/s
Iteration  18: 811804.566 ops/s
Iteration  19: 785036.291 ops/s
Iteration  20: 827861.696 ops/s
Iteration  21: 749744.120 ops/s
Iteration  22: 801644.281 ops/s
Iteration  23: 831064.498 ops/s
Iteration  24: 779260.483 ops/s
Iteration  25: 805793.355 ops/s
Iteration  26: 773414.429 ops/s
Iteration  27: 802608.400 ops/s
Iteration  28: 801079.196 ops/s
Iteration  29: 781196.052 ops/s
Iteration  30: 798251.859 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtTest._Benchmark.benchmark_elementAtWithMinusIndex":
  792153.932 ±(99.9%) 13148.359 ops/s [Average]
  (min, avg, max) = (748960.329, 792153.932, 831064.498), stdev = 19679.846
  CI (99.9%): [779005.573, 805302.291] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score       Error  Units
ObservableElementAtTest._Benchmark.benchmark_elementAtWithMinusIndex  thrpt   30  792153.932 ± 13148.359  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtTest._Benchmark.benchmark_elementAtOrDefaultWithMinusIndex$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtTest._Benchmark.benchmark_elementAtOrDefaultWithMinusIndex

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 450098.675 ops/s
# Warmup Iteration   2: 665651.877 ops/s
# Warmup Iteration   3: 724854.477 ops/s
# Warmup Iteration   4: 755506.167 ops/s
# Warmup Iteration   5: 739931.444 ops/s
# Warmup Iteration   6: 731544.708 ops/s
# Warmup Iteration   7: 745152.225 ops/s
# Warmup Iteration   8: 741127.662 ops/s
# Warmup Iteration   9: 743437.247 ops/s
# Warmup Iteration  10: 716183.132 ops/s
# Warmup Iteration  11: 724638.227 ops/s
# Warmup Iteration  12: 754024.732 ops/s
# Warmup Iteration  13: 717696.535 ops/s
# Warmup Iteration  14: 746869.543 ops/s
# Warmup Iteration  15: 762378.007 ops/s
# Warmup Iteration  16: 719064.109 ops/s
# Warmup Iteration  17: 812284.122 ops/s
# Warmup Iteration  18: 770388.202 ops/s
# Warmup Iteration  19: 768398.828 ops/s
# Warmup Iteration  20: 814492.500 ops/s
# Warmup Iteration  21: 758568.927 ops/s
# Warmup Iteration  22: 768772.567 ops/s
# Warmup Iteration  23: 783881.980 ops/s
# Warmup Iteration  24: 788335.369 ops/s
# Warmup Iteration  25: 785772.040 ops/s
# Warmup Iteration  26: 785549.186 ops/s
# Warmup Iteration  27: 790521.505 ops/s
# Warmup Iteration  28: 818380.815 ops/s
# Warmup Iteration  29: 779824.178 ops/s
# Warmup Iteration  30: 627891.087 ops/s
Iteration   1: 779301.179 ops/s
Iteration   2: 776199.403 ops/s
Iteration   3: 811271.245 ops/s
Iteration   4: 776479.652 ops/s
Iteration   5: 788357.875 ops/s
Iteration   6: 804345.542 ops/s
Iteration   7: 767687.158 ops/s
Iteration   8: 782524.428 ops/s
Iteration   9: 810973.469 ops/s
Iteration  10: 763780.089 ops/s
Iteration  11: 825407.403 ops/s
Iteration  12: 755751.152 ops/s
Iteration  13: 803319.706 ops/s
Iteration  14: 796795.194 ops/s
Iteration  15: 769538.991 ops/s
Iteration  16: 808482.125 ops/s
Iteration  17: 795425.291 ops/s
Iteration  18: 807039.293 ops/s
Iteration  19: 772668.899 ops/s
Iteration  20: 815648.683 ops/s
Iteration  21: 780475.861 ops/s
Iteration  22: 790881.730 ops/s
Iteration  23: 819236.722 ops/s
Iteration  24: 799503.720 ops/s
Iteration  25: 771990.645 ops/s
Iteration  26: 810791.408 ops/s
Iteration  27: 776493.694 ops/s
Iteration  28: 802504.066 ops/s
Iteration  29: 767466.722 ops/s
Iteration  30: 811015.657 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtTest._Benchmark.benchmark_elementAtOrDefaultWithMinusIndex":
  791378.567 ±(99.9%) 12738.728 ops/s [Average]
  (min, avg, max) = (755751.152, 791378.567, 825407.403), stdev = 19066.730
  CI (99.9%): [778639.839, 804117.295] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt       Score       Error  Units
ObservableElementAtTest._Benchmark.benchmark_elementAtOrDefaultWithMinusIndex  thrpt   30  791378.567 ± 12738.728  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableJoinTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableJoinTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.742 ops/s
# Warmup Iteration   2: 6915.453 ops/s
# Warmup Iteration   3: 23583.601 ops/s
# Warmup Iteration   4: 50744.860 ops/s
# Warmup Iteration   5: 43286.578 ops/s
# Warmup Iteration   6: 70682.338 ops/s
# Warmup Iteration   7: 62236.620 ops/s
# Warmup Iteration   8: 59848.772 ops/s
# Warmup Iteration   9: 66589.294 ops/s
# Warmup Iteration  10: 58676.085 ops/s
# Warmup Iteration  11: 54825.905 ops/s
# Warmup Iteration  12: 136159.186 ops/s
# Warmup Iteration  13: 177168.194 ops/s
# Warmup Iteration  14: 184882.539 ops/s
# Warmup Iteration  15: 173026.887 ops/s
# Warmup Iteration  16: 171641.662 ops/s
# Warmup Iteration  17: 183380.717 ops/s
# Warmup Iteration  18: 172139.548 ops/s
# Warmup Iteration  19: 186471.819 ops/s
# Warmup Iteration  20: 181534.704 ops/s
# Warmup Iteration  21: 174403.641 ops/s
# Warmup Iteration  22: 182721.194 ops/s
# Warmup Iteration  23: 172575.287 ops/s
# Warmup Iteration  24: 173126.068 ops/s
# Warmup Iteration  25: 176218.224 ops/s
# Warmup Iteration  26: 176863.272 ops/s
# Warmup Iteration  27: 184262.255 ops/s
# Warmup Iteration  28: 171112.576 ops/s
# Warmup Iteration  29: 183637.618 ops/s
# Warmup Iteration  30: 176758.451 ops/s
Iteration   1: 182260.184 ops/s
Iteration   2: 176956.803 ops/s
Iteration   3: 176243.635 ops/s
Iteration   4: 179069.251 ops/s
Iteration   5: 175660.110 ops/s
Iteration   6: 178795.717 ops/s
Iteration   7: 178408.940 ops/s
Iteration   8: 185248.317 ops/s
Iteration   9: 169283.061 ops/s
Iteration  10: 179241.204 ops/s
Iteration  11: 178080.295 ops/s
Iteration  12: 184636.316 ops/s
Iteration  13: 181946.814 ops/s
Iteration  14: 174479.691 ops/s
Iteration  15: 178484.775 ops/s
Iteration  16: 184685.854 ops/s
Iteration  17: 166217.787 ops/s
Iteration  18: 184680.924 ops/s
Iteration  19: 174683.170 ops/s
Iteration  20: 181915.123 ops/s
Iteration  21: 176967.095 ops/s
Iteration  22: 177482.575 ops/s
Iteration  23: 178987.508 ops/s
Iteration  24: 180756.531 ops/s
Iteration  25: 177580.105 ops/s
Iteration  26: 171156.207 ops/s
Iteration  27: 184849.559 ops/s
Iteration  28: 174303.087 ops/s
Iteration  29: 172876.119 ops/s
Iteration  30: 188016.228 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableJoinTest._Benchmark.benchmark_dispose":
  178465.100 ±(99.9%) 3338.577 ops/s [Average]
  (min, avg, max) = (166217.787, 178465.100, 188016.228), stdev = 4997.025
  CI (99.9%): [175126.523, 181803.676] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt       Score      Error  Units
ObservableJoinTest._Benchmark.benchmark_dispose  thrpt   30  178465.100 ± 3338.577  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableGroupByTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableGroupByTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 65397.830 ops/s
# Warmup Iteration   2: 271938.284 ops/s
# Warmup Iteration   3: 381991.886 ops/s
# Warmup Iteration   4: 971851.829 ops/s
# Warmup Iteration   5: 1029430.163 ops/s
# Warmup Iteration   6: 1108652.085 ops/s
# Warmup Iteration   7: 1152398.446 ops/s
# Warmup Iteration   8: 1060582.124 ops/s
# Warmup Iteration   9: 1087485.486 ops/s
# Warmup Iteration  10: 1121462.222 ops/s
# Warmup Iteration  11: 1107866.622 ops/s
# Warmup Iteration  12: 1067675.906 ops/s
# Warmup Iteration  13: 1132019.705 ops/s
# Warmup Iteration  14: 1096228.498 ops/s
# Warmup Iteration  15: 1110597.262 ops/s
# Warmup Iteration  16: 1118790.235 ops/s
# Warmup Iteration  17: 1083352.740 ops/s
# Warmup Iteration  18: 1091846.840 ops/s
# Warmup Iteration  19: 1128952.592 ops/s
# Warmup Iteration  20: 1084270.131 ops/s
# Warmup Iteration  21: 1086398.096 ops/s
# Warmup Iteration  22: 1103549.407 ops/s
# Warmup Iteration  23: 1094406.183 ops/s
# Warmup Iteration  24: 998076.226 ops/s
# Warmup Iteration  25: 1017672.687 ops/s
# Warmup Iteration  26: 1079874.124 ops/s
# Warmup Iteration  27: 1123327.332 ops/s
# Warmup Iteration  28: 1109267.378 ops/s
# Warmup Iteration  29: 1049292.111 ops/s
# Warmup Iteration  30: 1131097.944 ops/s
Iteration   1: 1058795.661 ops/s
Iteration   2: 1129319.610 ops/s
Iteration   3: 1113841.129 ops/s
Iteration   4: 1119707.874 ops/s
Iteration   5: 1074948.944 ops/s
Iteration   6: 1114848.209 ops/s
Iteration   7: 1066560.276 ops/s
Iteration   8: 1106684.808 ops/s
Iteration   9: 1058292.195 ops/s
Iteration  10: 1091180.282 ops/s
Iteration  11: 1101354.113 ops/s
Iteration  12: 1066546.205 ops/s
Iteration  13: 1132085.987 ops/s
Iteration  14: 1043546.170 ops/s
Iteration  15: 1074763.801 ops/s
Iteration  16: 1116478.134 ops/s
Iteration  17: 1097244.588 ops/s
Iteration  18: 1111311.753 ops/s
Iteration  19: 1081669.077 ops/s
Iteration  20: 1095676.847 ops/s
Iteration  21: 1109364.395 ops/s
Iteration  22: 1118880.115 ops/s
Iteration  23: 1090551.543 ops/s
Iteration  24: 1079395.204 ops/s
Iteration  25: 1134529.180 ops/s
Iteration  26: 1081163.371 ops/s
Iteration  27: 1121552.079 ops/s
Iteration  28: 1104440.256 ops/s
Iteration  29: 1042039.629 ops/s
Iteration  30: 1112939.318 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableGroupByTest._Benchmark.benchmark_dispose":
  1094990.358 ±(99.9%) 17309.272 ops/s [Average]
  (min, avg, max) = (1042039.629, 1094990.358, 1134529.180), stdev = 25907.706
  CI (99.9%): [1077681.086, 1112299.631] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score       Error  Units
ObservableGroupByTest._Benchmark.benchmark_dispose  thrpt   30  1094990.358 ± 17309.272  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_invalidCapacityHint$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_invalidCapacityHint

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 315409.688 ops/s
# Warmup Iteration   2: 584779.153 ops/s
# Warmup Iteration   3: 626925.231 ops/s
# Warmup Iteration   4: 673941.115 ops/s
# Warmup Iteration   5: 560999.944 ops/s
# Warmup Iteration   6: 711116.540 ops/s
# Warmup Iteration   7: 680721.529 ops/s
# Warmup Iteration   8: 664549.962 ops/s
# Warmup Iteration   9: 711264.247 ops/s
# Warmup Iteration  10: 683446.618 ops/s
# Warmup Iteration  11: 685828.516 ops/s
# Warmup Iteration  12: 661355.024 ops/s
# Warmup Iteration  13: 693630.022 ops/s
# Warmup Iteration  14: 688319.300 ops/s
# Warmup Iteration  15: 699702.356 ops/s
# Warmup Iteration  16: 697238.452 ops/s
# Warmup Iteration  17: 714418.968 ops/s
# Warmup Iteration  18: 754047.896 ops/s
# Warmup Iteration  19: 701419.238 ops/s
# Warmup Iteration  20: 733829.374 ops/s
# Warmup Iteration  21: 729079.998 ops/s
# Warmup Iteration  22: 724250.079 ops/s
# Warmup Iteration  23: 734231.652 ops/s
# Warmup Iteration  24: 727385.039 ops/s
# Warmup Iteration  25: 760656.426 ops/s
# Warmup Iteration  26: 722285.524 ops/s
# Warmup Iteration  27: 709324.130 ops/s
# Warmup Iteration  28: 758329.351 ops/s
# Warmup Iteration  29: 754096.946 ops/s
# Warmup Iteration  30: 719126.128 ops/s
Iteration   1: 730396.274 ops/s
Iteration   2: 719688.357 ops/s
Iteration   3: 747649.262 ops/s
Iteration   4: 714564.866 ops/s
Iteration   5: 737322.127 ops/s
Iteration   6: 747918.818 ops/s
Iteration   7: 720816.299 ops/s
Iteration   8: 708710.683 ops/s
Iteration   9: 758948.326 ops/s
Iteration  10: 707249.472 ops/s
Iteration  11: 752070.839 ops/s
Iteration  12: 724489.163 ops/s
Iteration  13: 728803.622 ops/s
Iteration  14: 741171.081 ops/s
Iteration  15: 747438.747 ops/s
Iteration  16: 739610.061 ops/s
Iteration  17: 708060.808 ops/s
Iteration  18: 759713.965 ops/s
Iteration  19: 714107.219 ops/s
Iteration  20: 742027.202 ops/s
Iteration  21: 722867.618 ops/s
Iteration  22: 743550.713 ops/s
Iteration  23: 726386.111 ops/s
Iteration  24: 753287.724 ops/s
Iteration  25: 701775.191 ops/s
Iteration  26: 729815.094 ops/s
Iteration  27: 733480.206 ops/s
Iteration  28: 722367.602 ops/s
Iteration  29: 729202.268 ops/s
Iteration  30: 733475.638 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_invalidCapacityHint":
  731565.512 ±(99.9%) 10616.012 ops/s [Average]
  (min, avg, max) = (701775.191, 731565.512, 759713.965), stdev = 15889.548
  CI (99.9%): [720949.500, 742181.524] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score       Error  Units
ObservableConcatMapEagerTest._Benchmark.benchmark_invalidCapacityHint  thrpt   30  731565.512 ± 10616.012  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithFlowableTest._Benchmark.benchmark_innerBadSource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithFlowableTest._Benchmark.benchmark_innerBadSource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 16544.166 ops/s
# Warmup Iteration   2: 80298.265 ops/s
# Warmup Iteration   3: 145449.393 ops/s
# Warmup Iteration   4: 156077.907 ops/s
# Warmup Iteration   5: 161291.642 ops/s
# Warmup Iteration   6: 155267.459 ops/s
# Warmup Iteration   7: 158179.663 ops/s
# Warmup Iteration   8: 161181.581 ops/s
# Warmup Iteration   9: 154134.237 ops/s
# Warmup Iteration  10: 164725.986 ops/s
# Warmup Iteration  11: 156270.949 ops/s
# Warmup Iteration  12: 162714.625 ops/s
# Warmup Iteration  13: 153603.805 ops/s
# Warmup Iteration  14: 162546.402 ops/s
# Warmup Iteration  15: 154956.630 ops/s
# Warmup Iteration  16: 162484.911 ops/s
# Warmup Iteration  17: 159756.082 ops/s
# Warmup Iteration  18: 163148.524 ops/s
# Warmup Iteration  19: 140049.123 ops/s
# Warmup Iteration  20: 155519.487 ops/s
# Warmup Iteration  21: 162619.425 ops/s
# Warmup Iteration  22: 161013.451 ops/s
# Warmup Iteration  23: 161982.546 ops/s
# Warmup Iteration  24: 161630.643 ops/s
# Warmup Iteration  25: 161250.900 ops/s
# Warmup Iteration  26: 165462.764 ops/s
# Warmup Iteration  27: 155052.706 ops/s
# Warmup Iteration  28: 165012.294 ops/s
# Warmup Iteration  29: 163232.623 ops/s
# Warmup Iteration  30: 156914.028 ops/s
Iteration   1: 162917.963 ops/s
Iteration   2: 159908.202 ops/s
Iteration   3: 162571.014 ops/s
Iteration   4: 164471.668 ops/s
Iteration   5: 163204.036 ops/s
Iteration   6: 164771.420 ops/s
Iteration   7: 160126.653 ops/s
Iteration   8: 158614.522 ops/s
Iteration   9: 162137.867 ops/s
Iteration  10: 164916.805 ops/s
Iteration  11: 161955.615 ops/s
Iteration  12: 164716.374 ops/s
Iteration  13: 164352.997 ops/s
Iteration  14: 160088.277 ops/s
Iteration  15: 158256.901 ops/s
Iteration  16: 165611.122 ops/s
Iteration  17: 164822.413 ops/s
Iteration  18: 164105.306 ops/s
Iteration  19: 162644.658 ops/s
Iteration  20: 164375.913 ops/s
Iteration  21: 162627.120 ops/s
Iteration  22: 160347.274 ops/s
Iteration  23: 164399.999 ops/s
Iteration  24: 162499.644 ops/s
Iteration  25: 162663.591 ops/s
Iteration  26: 164627.210 ops/s
Iteration  27: 165083.440 ops/s
Iteration  28: 160746.251 ops/s
Iteration  29: 169488.991 ops/s
Iteration  30: 168091.752 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithFlowableTest._Benchmark.benchmark_innerBadSource":
  163171.500 ±(99.9%) 1691.763 ops/s [Average]
  (min, avg, max) = (158256.901, 163171.500, 169488.991), stdev = 2532.151
  CI (99.9%): [161479.737, 164863.263] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score      Error  Units
FlowableWindowWithFlowableTest._Benchmark.benchmark_innerBadSource  thrpt   30  163171.500 ± 1691.763  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupByTest._Benchmark.benchmark_groupComplete$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupByTest._Benchmark.benchmark_groupComplete

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 67480.898 ops/s
# Warmup Iteration   2: 420892.926 ops/s
# Warmup Iteration   3: 701192.218 ops/s
# Warmup Iteration   4: 804111.229 ops/s
# Warmup Iteration   5: 844099.955 ops/s
# Warmup Iteration   6: 874347.863 ops/s
# Warmup Iteration   7: 881474.084 ops/s
# Warmup Iteration   8: 871625.830 ops/s
# Warmup Iteration   9: 880954.543 ops/s
# Warmup Iteration  10: 844993.009 ops/s
# Warmup Iteration  11: 852313.770 ops/s
# Warmup Iteration  12: 889862.639 ops/s
# Warmup Iteration  13: 864544.818 ops/s
# Warmup Iteration  14: 858648.201 ops/s
# Warmup Iteration  15: 845619.538 ops/s
# Warmup Iteration  16: 914913.839 ops/s
# Warmup Iteration  17: 863552.701 ops/s
# Warmup Iteration  18: 870229.898 ops/s
# Warmup Iteration  19: 865978.077 ops/s
# Warmup Iteration  20: 860069.303 ops/s
# Warmup Iteration  21: 895676.752 ops/s
# Warmup Iteration  22: 829438.693 ops/s
# Warmup Iteration  23: 866999.060 ops/s
# Warmup Iteration  24: 848763.909 ops/s
# Warmup Iteration  25: 866032.024 ops/s
# Warmup Iteration  26: 843633.916 ops/s
# Warmup Iteration  27: 864100.739 ops/s
# Warmup Iteration  28: 899048.513 ops/s
# Warmup Iteration  29: 853724.094 ops/s
# Warmup Iteration  30: 892440.014 ops/s
Iteration   1: 834441.567 ops/s
Iteration   2: 878738.227 ops/s
Iteration   3: 873195.290 ops/s
Iteration   4: 842986.850 ops/s
Iteration   5: 878370.122 ops/s
Iteration   6: 890273.377 ops/s
Iteration   7: 854124.126 ops/s
Iteration   8: 882550.523 ops/s
Iteration   9: 852627.621 ops/s
Iteration  10: 872873.240 ops/s
Iteration  11: 894532.176 ops/s
Iteration  12: 854138.888 ops/s
Iteration  13: 841954.171 ops/s
Iteration  14: 899803.839 ops/s
Iteration  15: 904485.469 ops/s
Iteration  16: 847781.670 ops/s
Iteration  17: 873893.969 ops/s
Iteration  18: 899211.490 ops/s
Iteration  19: 835793.347 ops/s
Iteration  20: 917777.210 ops/s
Iteration  21: 848238.224 ops/s
Iteration  22: 874727.399 ops/s
Iteration  23: 890375.508 ops/s
Iteration  24: 846947.380 ops/s
Iteration  25: 899708.676 ops/s
Iteration  26: 861051.547 ops/s
Iteration  27: 864095.648 ops/s
Iteration  28: 904963.518 ops/s
Iteration  29: 859476.721 ops/s
Iteration  30: 903840.684 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupByTest._Benchmark.benchmark_groupComplete":
  872765.949 ±(99.9%) 15937.775 ops/s [Average]
  (min, avg, max) = (834441.567, 872765.949, 917777.210), stdev = 23854.912
  CI (99.9%): [856828.175, 888703.724] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score       Error  Units
FlowableGroupByTest._Benchmark.benchmark_groupComplete  thrpt   30  872765.949 ± 15937.775  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.schedulers.SchedulerWhenTest._Benchmark.benchmark_syncMaxConcurrent$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.schedulers.SchedulerWhenTest._Benchmark.benchmark_syncMaxConcurrent

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2034.001 ops/s
# Warmup Iteration   2: 29869.380 ops/s
# Warmup Iteration   3: 43447.444 ops/s
# Warmup Iteration   4: 64642.720 ops/s
# Warmup Iteration   5: 122092.919 ops/s
# Warmup Iteration   6: 118593.042 ops/s
# Warmup Iteration   7: 113440.848 ops/s
# Warmup Iteration   8: 115315.351 ops/s
# Warmup Iteration   9: 126719.664 ops/s
# Warmup Iteration  10: 123956.012 ops/s
# Warmup Iteration  11: 123066.719 ops/s
# Warmup Iteration  12: 128982.674 ops/s
# Warmup Iteration  13: 122905.398 ops/s
# Warmup Iteration  14: 104653.331 ops/s
# Warmup Iteration  15: 123249.082 ops/s
# Warmup Iteration  16: 124725.437 ops/s
# Warmup Iteration  17: 127045.135 ops/s
# Warmup Iteration  18: 125047.491 ops/s
# Warmup Iteration  19: 131200.953 ops/s
# Warmup Iteration  20: 124818.807 ops/s
# Warmup Iteration  21: 130652.306 ops/s
# Warmup Iteration  22: 125592.356 ops/s
# Warmup Iteration  23: 125375.579 ops/s
# Warmup Iteration  24: 127118.122 ops/s
# Warmup Iteration  25: 124351.828 ops/s
# Warmup Iteration  26: 124215.380 ops/s
# Warmup Iteration  27: 127666.558 ops/s
# Warmup Iteration  28: 123123.778 ops/s
# Warmup Iteration  29: 127109.927 ops/s
# Warmup Iteration  30: 121856.095 ops/s
Iteration   1: 126450.713 ops/s
Iteration   2: 118114.498 ops/s
Iteration   3: 124273.835 ops/s
Iteration   4: 128254.399 ops/s
Iteration   5: 120970.474 ops/s
Iteration   6: 125144.120 ops/s
Iteration   7: 126701.832 ops/s
Iteration   8: 124273.868 ops/s
Iteration   9: 128306.008 ops/s
Iteration  10: 123486.021 ops/s
Iteration  11: 127859.731 ops/s
Iteration  12: 127950.157 ops/s
Iteration  13: 127472.510 ops/s
Iteration  14: 127983.525 ops/s
Iteration  15: 120556.536 ops/s
Iteration  16: 127299.546 ops/s
Iteration  17: 128532.864 ops/s
Iteration  18: 127138.026 ops/s
Iteration  19: 128733.243 ops/s
Iteration  20: 122477.408 ops/s
Iteration  21: 127845.419 ops/s
Iteration  22: 130190.543 ops/s
Iteration  23: 127528.644 ops/s
Iteration  24: 124064.152 ops/s
Iteration  25: 124020.652 ops/s
Iteration  26: 130852.565 ops/s
Iteration  27: 124651.811 ops/s
Iteration  28: 130398.855 ops/s
Iteration  29: 121452.953 ops/s
Iteration  30: 124378.764 ops/s


Result "io.reactivex.rxjava3.internal.schedulers.SchedulerWhenTest._Benchmark.benchmark_syncMaxConcurrent":
  125912.122 ±(99.9%) 2085.682 ops/s [Average]
  (min, avg, max) = (118114.498, 125912.122, 130852.565), stdev = 3121.751
  CI (99.9%): [123826.440, 127997.805] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score      Error  Units
SchedulerWhenTest._Benchmark.benchmark_syncMaxConcurrent  thrpt   30  125912.122 ± 2085.682  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybeTest._Benchmark.benchmark_emptyOther$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybeTest._Benchmark.benchmark_emptyOther

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 339762.596 ops/s
# Warmup Iteration   2: 1004977.536 ops/s
# Warmup Iteration   3: 1743673.138 ops/s
# Warmup Iteration   4: 1751494.042 ops/s
# Warmup Iteration   5: 1999501.638 ops/s
# Warmup Iteration   6: 1961310.917 ops/s
# Warmup Iteration   7: 1984817.931 ops/s
# Warmup Iteration   8: 2010162.921 ops/s
# Warmup Iteration   9: 1993838.351 ops/s
# Warmup Iteration  10: 2042140.684 ops/s
# Warmup Iteration  11: 1995508.457 ops/s
# Warmup Iteration  12: 1975959.533 ops/s
# Warmup Iteration  13: 1976586.787 ops/s
# Warmup Iteration  14: 2073652.187 ops/s
# Warmup Iteration  15: 1926851.371 ops/s
# Warmup Iteration  16: 2022195.354 ops/s
# Warmup Iteration  17: 2022691.566 ops/s
# Warmup Iteration  18: 2031161.919 ops/s
# Warmup Iteration  19: 2045001.512 ops/s
# Warmup Iteration  20: 2000042.690 ops/s
# Warmup Iteration  21: 2009175.326 ops/s
# Warmup Iteration  22: 2033034.601 ops/s
# Warmup Iteration  23: 1991829.243 ops/s
# Warmup Iteration  24: 2047827.917 ops/s
# Warmup Iteration  25: 2002742.732 ops/s
# Warmup Iteration  26: 1989966.949 ops/s
# Warmup Iteration  27: 2074059.183 ops/s
# Warmup Iteration  28: 2002911.409 ops/s
# Warmup Iteration  29: 2005585.843 ops/s
# Warmup Iteration  30: 2037833.635 ops/s
Iteration   1: 1961909.074 ops/s
Iteration   2: 2001446.927 ops/s
Iteration   3: 2113589.275 ops/s
Iteration   4: 1959963.910 ops/s
Iteration   5: 2038313.692 ops/s
Iteration   6: 1951410.402 ops/s
Iteration   7: 2050466.747 ops/s
Iteration   8: 2017729.374 ops/s
Iteration   9: 2023746.100 ops/s
Iteration  10: 1979291.276 ops/s
Iteration  11: 1985891.076 ops/s
Iteration  12: 2005760.660 ops/s
Iteration  13: 1899778.176 ops/s
Iteration  14: 1992017.772 ops/s
Iteration  15: 2018547.474 ops/s
Iteration  16: 1985695.900 ops/s
Iteration  17: 2073000.246 ops/s
Iteration  18: 1961668.071 ops/s
Iteration  19: 2122516.679 ops/s
Iteration  20: 2023673.294 ops/s
Iteration  21: 1958379.411 ops/s
Iteration  22: 1998284.801 ops/s
Iteration  23: 2016117.582 ops/s
Iteration  24: 2058669.534 ops/s
Iteration  25: 1920004.048 ops/s
Iteration  26: 2081575.838 ops/s
Iteration  27: 2009852.943 ops/s
Iteration  28: 1978544.870 ops/s
Iteration  29: 1978245.442 ops/s
Iteration  30: 2059555.166 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybeTest._Benchmark.benchmark_emptyOther":
  2007521.525 ±(99.9%) 34709.679 ops/s [Average]
  (min, avg, max) = (1899778.176, 2007521.525, 2122516.679), stdev = 51951.817
  CI (99.9%): [1972811.846, 2042231.204] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
FlowableMergeWithMaybeTest._Benchmark.benchmark_emptyOther  thrpt   30  2007521.525 ± 34709.679  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybeTest._Benchmark.benchmark_normal$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybeTest._Benchmark.benchmark_normal

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 320337.779 ops/s
# Warmup Iteration   2: 1346150.478 ops/s
# Warmup Iteration   3: 1746308.172 ops/s
# Warmup Iteration   4: 1855782.886 ops/s
# Warmup Iteration   5: 1958190.430 ops/s
# Warmup Iteration   6: 1904832.946 ops/s
# Warmup Iteration   7: 1839115.688 ops/s
# Warmup Iteration   8: 1772138.003 ops/s
# Warmup Iteration   9: 1377227.119 ops/s
# Warmup Iteration  10: 1883351.781 ops/s
# Warmup Iteration  11: 1840937.907 ops/s
# Warmup Iteration  12: 2006373.363 ops/s
# Warmup Iteration  13: 1973807.350 ops/s
# Warmup Iteration  14: 1821395.888 ops/s
# Warmup Iteration  15: 1945938.788 ops/s
# Warmup Iteration  16: 1881975.997 ops/s
# Warmup Iteration  17: 1954209.678 ops/s
# Warmup Iteration  18: 1909503.415 ops/s
# Warmup Iteration  19: 1930679.506 ops/s
# Warmup Iteration  20: 1960735.120 ops/s
# Warmup Iteration  21: 1884201.971 ops/s
# Warmup Iteration  22: 1927687.665 ops/s
# Warmup Iteration  23: 1837886.496 ops/s
# Warmup Iteration  24: 1944521.071 ops/s
# Warmup Iteration  25: 1916448.760 ops/s
# Warmup Iteration  26: 1881171.169 ops/s
# Warmup Iteration  27: 1884684.087 ops/s
# Warmup Iteration  28: 1906292.405 ops/s
# Warmup Iteration  29: 1960001.952 ops/s
# Warmup Iteration  30: 1940463.117 ops/s
Iteration   1: 1879158.457 ops/s
Iteration   2: 1960727.886 ops/s
Iteration   3: 1895709.550 ops/s
Iteration   4: 1918760.698 ops/s
Iteration   5: 2006631.624 ops/s
Iteration   6: 1893525.223 ops/s
Iteration   7: 1901518.256 ops/s
Iteration   8: 1920699.843 ops/s
Iteration   9: 1955314.280 ops/s
Iteration  10: 1845027.866 ops/s
Iteration  11: 1966360.575 ops/s
Iteration  12: 1929905.499 ops/s
Iteration  13: 1925137.357 ops/s
Iteration  14: 1892258.907 ops/s
Iteration  15: 1958054.771 ops/s
Iteration  16: 1871098.654 ops/s
Iteration  17: 1982574.303 ops/s
Iteration  18: 1864786.372 ops/s
Iteration  19: 1893142.392 ops/s
Iteration  20: 1977178.756 ops/s
Iteration  21: 1911634.155 ops/s
Iteration  22: 1958600.935 ops/s
Iteration  23: 1884817.210 ops/s
Iteration  24: 1984574.360 ops/s
Iteration  25: 2002059.168 ops/s
Iteration  26: 1927806.802 ops/s
Iteration  27: 1904134.178 ops/s
Iteration  28: 1943016.648 ops/s
Iteration  29: 1884433.051 ops/s
Iteration  30: 1973322.638 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybeTest._Benchmark.benchmark_normal":
  1927065.681 ±(99.9%) 28917.217 ops/s [Average]
  (min, avg, max) = (1845027.866, 1927065.681, 2006631.624), stdev = 43281.933
  CI (99.9%): [1898148.463, 1955982.898] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
FlowableMergeWithMaybeTest._Benchmark.benchmark_normal  thrpt   30  1927065.681 ± 28917.217  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategyTest._Benchmark.benchmark_backpressureWithBufferDropLatest$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategyTest._Benchmark.benchmark_backpressureWithBufferDropLatest

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 17362.838 ops/s
# Warmup Iteration   2: 38320.423 ops/s
# Warmup Iteration   3: 40884.732 ops/s
# Warmup Iteration   4: 83450.809 ops/s
# Warmup Iteration   5: 104375.301 ops/s
# Warmup Iteration   6: 99941.360 ops/s
# Warmup Iteration   7: 99719.715 ops/s
# Warmup Iteration   8: 100727.332 ops/s
# Warmup Iteration   9: 97788.005 ops/s
# Warmup Iteration  10: 96781.124 ops/s
# Warmup Iteration  11: 99778.064 ops/s
# Warmup Iteration  12: 92657.998 ops/s
# Warmup Iteration  13: 100768.086 ops/s
# Warmup Iteration  14: 100970.979 ops/s
# Warmup Iteration  15: 105548.317 ops/s
# Warmup Iteration  16: 108398.071 ops/s
# Warmup Iteration  17: 98553.549 ops/s
# Warmup Iteration  18: 101741.708 ops/s
# Warmup Iteration  19: 102160.016 ops/s
# Warmup Iteration  20: 108017.972 ops/s
# Warmup Iteration  21: 102009.139 ops/s
# Warmup Iteration  22: 98800.895 ops/s
# Warmup Iteration  23: 103718.041 ops/s
# Warmup Iteration  24: 104293.390 ops/s
# Warmup Iteration  25: 101075.362 ops/s
# Warmup Iteration  26: 99597.073 ops/s
# Warmup Iteration  27: 108513.715 ops/s
# Warmup Iteration  28: 101744.256 ops/s
# Warmup Iteration  29: 103875.449 ops/s
# Warmup Iteration  30: 101472.524 ops/s
Iteration   1: 105015.288 ops/s
Iteration   2: 98649.878 ops/s
Iteration   3: 101636.830 ops/s
Iteration   4: 105556.358 ops/s
Iteration   5: 100296.583 ops/s
Iteration   6: 99886.525 ops/s
Iteration   7: 105342.826 ops/s
Iteration   8: 103650.546 ops/s
Iteration   9: 99679.399 ops/s
Iteration  10: 107319.328 ops/s
Iteration  11: 100162.275 ops/s
Iteration  12: 105582.729 ops/s
Iteration  13: 100064.041 ops/s
Iteration  14: 104596.816 ops/s
Iteration  15: 103969.619 ops/s
Iteration  16: 106056.061 ops/s
Iteration  17: 101404.017 ops/s
Iteration  18: 103079.909 ops/s
Iteration  19: 105181.358 ops/s
Iteration  20: 100321.950 ops/s
Iteration  21: 104936.786 ops/s
Iteration  22: 99101.547 ops/s
Iteration  23: 102455.376 ops/s
Iteration  24: 106390.425 ops/s
Iteration  25: 101985.442 ops/s
Iteration  26: 101788.732 ops/s
Iteration  27: 100664.043 ops/s
Iteration  28: 102202.837 ops/s
Iteration  29: 104173.536 ops/s
Iteration  30: 104532.628 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategyTest._Benchmark.benchmark_backpressureWithBufferDropLatest":
  102856.123 ±(99.9%) 1650.892 ops/s [Average]
  (min, avg, max) = (98649.878, 102856.123, 107319.328), stdev = 2470.977
  CI (99.9%): [101205.231, 104507.015] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                        Mode  Cnt       Score      Error  Units
FlowableOnBackpressureBufferStrategyTest._Benchmark.benchmark_backpressureWithBufferDropLatest  thrpt   30  102856.123 ± 1650.892  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableMapOptionalTest._Benchmark.benchmark_syncFusedAllConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableMapOptionalTest._Benchmark.benchmark_syncFusedAllConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 380132.975 ops/s
# Warmup Iteration   2: 2752162.930 ops/s
# Warmup Iteration   3: 3041572.271 ops/s
# Warmup Iteration   4: 3463907.380 ops/s
# Warmup Iteration   5: 3684024.461 ops/s
# Warmup Iteration   6: 3836222.397 ops/s
# Warmup Iteration   7: 3893011.224 ops/s
# Warmup Iteration   8: 3697615.440 ops/s
# Warmup Iteration   9: 3779196.705 ops/s
# Warmup Iteration  10: 3695397.126 ops/s
# Warmup Iteration  11: 3811970.140 ops/s
# Warmup Iteration  12: 3874021.802 ops/s
# Warmup Iteration  13: 3762100.105 ops/s
# Warmup Iteration  14: 3893794.903 ops/s
# Warmup Iteration  15: 3767639.744 ops/s
# Warmup Iteration  16: 4005456.673 ops/s
# Warmup Iteration  17: 3855144.697 ops/s
# Warmup Iteration  18: 3699677.855 ops/s
# Warmup Iteration  19: 3925688.576 ops/s
# Warmup Iteration  20: 3946637.811 ops/s
# Warmup Iteration  21: 3629203.274 ops/s
# Warmup Iteration  22: 3872724.516 ops/s
# Warmup Iteration  23: 3768951.677 ops/s
# Warmup Iteration  24: 3589861.992 ops/s
# Warmup Iteration  25: 3805698.092 ops/s
# Warmup Iteration  26: 3718674.717 ops/s
# Warmup Iteration  27: 3783369.185 ops/s
# Warmup Iteration  28: 3864897.564 ops/s
# Warmup Iteration  29: 3734054.920 ops/s
# Warmup Iteration  30: 3838041.245 ops/s
Iteration   1: 3811019.887 ops/s
Iteration   2: 3785881.663 ops/s
Iteration   3: 3740506.865 ops/s
Iteration   4: 3851930.902 ops/s
Iteration   5: 3825085.614 ops/s
Iteration   6: 3709462.989 ops/s
Iteration   7: 3939206.838 ops/s
Iteration   8: 3752645.106 ops/s
Iteration   9: 3958989.585 ops/s
Iteration  10: 3746607.848 ops/s
Iteration  11: 3833004.707 ops/s
Iteration  12: 3788749.631 ops/s
Iteration  13: 3900766.521 ops/s
Iteration  14: 3645968.254 ops/s
Iteration  15: 3831615.822 ops/s
Iteration  16: 3617477.976 ops/s
Iteration  17: 3803788.507 ops/s
Iteration  18: 3905007.461 ops/s
Iteration  19: 3696907.087 ops/s
Iteration  20: 3777245.614 ops/s
Iteration  21: 3904744.489 ops/s
Iteration  22: 3789541.500 ops/s
Iteration  23: 3870867.429 ops/s
Iteration  24: 3726504.057 ops/s
Iteration  25: 3871716.977 ops/s
Iteration  26: 3763349.005 ops/s
Iteration  27: 3727404.195 ops/s
Iteration  28: 3994841.625 ops/s
Iteration  29: 3674033.393 ops/s
Iteration  30: 3836038.263 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableMapOptionalTest._Benchmark.benchmark_syncFusedAllConditional":
  3802696.994 ±(99.9%) 61396.946 ops/s [Average]
  (min, avg, max) = (3617477.976, 3802696.994, 3994841.625), stdev = 91896.066
  CI (99.9%): [3741300.047, 3864093.940] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
FlowableMapOptionalTest._Benchmark.benchmark_syncFusedAllConditional  thrpt   30  3802696.994 ± 61396.946  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromTest._Benchmark.benchmark_backpressureWithSignal$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromTest._Benchmark.benchmark_backpressureWithSignal

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 64595.604 ops/s
# Warmup Iteration   2: 269371.521 ops/s
# Warmup Iteration   3: 556488.746 ops/s
# Warmup Iteration   4: 766431.525 ops/s
# Warmup Iteration   5: 793060.601 ops/s
# Warmup Iteration   6: 728691.519 ops/s
# Warmup Iteration   7: 732060.342 ops/s
# Warmup Iteration   8: 818143.843 ops/s
# Warmup Iteration   9: 795255.896 ops/s
# Warmup Iteration  10: 794714.243 ops/s
# Warmup Iteration  11: 800777.746 ops/s
# Warmup Iteration  12: 789159.976 ops/s
# Warmup Iteration  13: 792254.966 ops/s
# Warmup Iteration  14: 782981.946 ops/s
# Warmup Iteration  15: 782266.684 ops/s
# Warmup Iteration  16: 782482.073 ops/s
# Warmup Iteration  17: 819167.692 ops/s
# Warmup Iteration  18: 787303.119 ops/s
# Warmup Iteration  19: 831534.120 ops/s
# Warmup Iteration  20: 809140.256 ops/s
# Warmup Iteration  21: 799207.719 ops/s
# Warmup Iteration  22: 799178.220 ops/s
# Warmup Iteration  23: 787441.014 ops/s
# Warmup Iteration  24: 784457.428 ops/s
# Warmup Iteration  25: 777119.059 ops/s
# Warmup Iteration  26: 818014.397 ops/s
# Warmup Iteration  27: 800918.229 ops/s
# Warmup Iteration  28: 753765.241 ops/s
# Warmup Iteration  29: 804013.524 ops/s
# Warmup Iteration  30: 807769.897 ops/s
Iteration   1: 793503.593 ops/s
Iteration   2: 820885.860 ops/s
Iteration   3: 781240.425 ops/s
Iteration   4: 823016.700 ops/s
Iteration   5: 830910.237 ops/s
Iteration   6: 768250.843 ops/s
Iteration   7: 817662.771 ops/s
Iteration   8: 793973.519 ops/s
Iteration   9: 816295.685 ops/s
Iteration  10: 773758.898 ops/s
Iteration  11: 808228.998 ops/s
Iteration  12: 807227.864 ops/s
Iteration  13: 805420.150 ops/s
Iteration  14: 820977.624 ops/s
Iteration  15: 830752.193 ops/s
Iteration  16: 782036.186 ops/s
Iteration  17: 806592.333 ops/s
Iteration  18: 789403.273 ops/s
Iteration  19: 820411.096 ops/s
Iteration  20: 789561.480 ops/s
Iteration  21: 803971.338 ops/s
Iteration  22: 760897.686 ops/s
Iteration  23: 802750.837 ops/s
Iteration  24: 823332.923 ops/s
Iteration  25: 789734.004 ops/s
Iteration  26: 814024.233 ops/s
Iteration  27: 779848.970 ops/s
Iteration  28: 790603.088 ops/s
Iteration  29: 816060.907 ops/s
Iteration  30: 766768.929 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromTest._Benchmark.benchmark_backpressureWithSignal":
  800936.755 ±(99.9%) 13243.219 ops/s [Average]
  (min, avg, max) = (760897.686, 800936.755, 830910.237), stdev = 19821.828
  CI (99.9%): [787693.536, 814179.974] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score       Error  Units
FlowableWithLatestFromTest._Benchmark.benchmark_backpressureWithSignal  thrpt   30  800936.755 ± 13243.219  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableMapOptionalTest._Benchmark.benchmark_syncFusedMixedConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableMapOptionalTest._Benchmark.benchmark_syncFusedMixedConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 379518.658 ops/s
# Warmup Iteration   2: 1889104.744 ops/s
# Warmup Iteration   3: 2923483.248 ops/s
# Warmup Iteration   4: 3197890.896 ops/s
# Warmup Iteration   5: 3192094.532 ops/s
# Warmup Iteration   6: 3222978.308 ops/s
# Warmup Iteration   7: 3287087.159 ops/s
# Warmup Iteration   8: 3214768.395 ops/s
# Warmup Iteration   9: 3147208.092 ops/s
# Warmup Iteration  10: 3217960.382 ops/s
# Warmup Iteration  11: 3226801.079 ops/s
# Warmup Iteration  12: 3305429.525 ops/s
# Warmup Iteration  13: 3229923.933 ops/s
# Warmup Iteration  14: 3232197.986 ops/s
# Warmup Iteration  15: 3226627.185 ops/s
# Warmup Iteration  16: 3164702.969 ops/s
# Warmup Iteration  17: 3238298.756 ops/s
# Warmup Iteration  18: 3144336.725 ops/s
# Warmup Iteration  19: 3203942.866 ops/s
# Warmup Iteration  20: 3188117.742 ops/s
# Warmup Iteration  21: 3196295.997 ops/s
# Warmup Iteration  22: 3241504.563 ops/s
# Warmup Iteration  23: 3111068.903 ops/s
# Warmup Iteration  24: 3149449.155 ops/s
# Warmup Iteration  25: 3147275.722 ops/s
# Warmup Iteration  26: 3205753.658 ops/s
# Warmup Iteration  27: 3175379.847 ops/s
# Warmup Iteration  28: 3154389.883 ops/s
# Warmup Iteration  29: 3347825.371 ops/s
# Warmup Iteration  30: 3079665.870 ops/s
Iteration   1: 3239720.297 ops/s
Iteration   2: 3134378.901 ops/s
Iteration   3: 3271942.537 ops/s
Iteration   4: 3139175.852 ops/s
Iteration   5: 3144056.670 ops/s
Iteration   6: 3160973.570 ops/s
Iteration   7: 3224750.816 ops/s
Iteration   8: 3260789.528 ops/s
Iteration   9: 3202905.359 ops/s
Iteration  10: 3177015.671 ops/s
Iteration  11: 3291005.816 ops/s
Iteration  12: 3084967.421 ops/s
Iteration  13: 3269636.049 ops/s
Iteration  14: 3335517.813 ops/s
Iteration  15: 3091355.395 ops/s
Iteration  16: 3270702.342 ops/s
Iteration  17: 3154283.077 ops/s
Iteration  18: 3201312.404 ops/s
Iteration  19: 3289491.862 ops/s
Iteration  20: 3161966.241 ops/s
Iteration  21: 3254067.939 ops/s
Iteration  22: 3065123.841 ops/s
Iteration  23: 3354213.674 ops/s
Iteration  24: 3103908.220 ops/s
Iteration  25: 3293453.639 ops/s
Iteration  26: 3186999.007 ops/s
Iteration  27: 3152053.330 ops/s
Iteration  28: 3205373.466 ops/s
Iteration  29: 3075072.314 ops/s
Iteration  30: 3285295.628 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableMapOptionalTest._Benchmark.benchmark_syncFusedMixedConditional":
  3202716.956 ±(99.9%) 53413.963 ops/s [Average]
  (min, avg, max) = (3065123.841, 3202716.956, 3354213.674), stdev = 79947.512
  CI (99.9%): [3149302.993, 3256130.919] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score       Error  Units
FlowableMapOptionalTest._Benchmark.benchmark_syncFusedMixedConditional  thrpt   30  3202716.956 ± 53413.963  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ParallelCollectorTest._Benchmark.benchmark_collectorFinisherCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ParallelCollectorTest._Benchmark.benchmark_collectorFinisherCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 38467.890 ops/s
# Warmup Iteration   2: 130953.977 ops/s
# Warmup Iteration   3: 239579.854 ops/s
# Warmup Iteration   4: 233012.355 ops/s
# Warmup Iteration   5: 260974.750 ops/s
# Warmup Iteration   6: 257581.826 ops/s
# Warmup Iteration   7: 260591.729 ops/s
# Warmup Iteration   8: 254267.589 ops/s
# Warmup Iteration   9: 257483.462 ops/s
# Warmup Iteration  10: 270388.705 ops/s
# Warmup Iteration  11: 252532.418 ops/s
# Warmup Iteration  12: 257152.313 ops/s
# Warmup Iteration  13: 258146.014 ops/s
# Warmup Iteration  14: 262769.725 ops/s
# Warmup Iteration  15: 264154.513 ops/s
# Warmup Iteration  16: 262776.300 ops/s
# Warmup Iteration  17: 274893.912 ops/s
# Warmup Iteration  18: 261787.758 ops/s
# Warmup Iteration  19: 271035.019 ops/s
# Warmup Iteration  20: 259071.639 ops/s
# Warmup Iteration  21: 269357.466 ops/s
# Warmup Iteration  22: 259403.821 ops/s
# Warmup Iteration  23: 269268.770 ops/s
# Warmup Iteration  24: 264415.066 ops/s
# Warmup Iteration  25: 261221.658 ops/s
# Warmup Iteration  26: 271635.927 ops/s
# Warmup Iteration  27: 259467.568 ops/s
# Warmup Iteration  28: 271483.591 ops/s
# Warmup Iteration  29: 267029.635 ops/s
# Warmup Iteration  30: 260623.523 ops/s
Iteration   1: 279754.552 ops/s
Iteration   2: 273205.391 ops/s
Iteration   3: 259677.520 ops/s
Iteration   4: 276723.224 ops/s
Iteration   5: 252692.265 ops/s
Iteration   6: 266728.868 ops/s
Iteration   7: 276409.656 ops/s
Iteration   8: 259774.037 ops/s
Iteration   9: 263286.851 ops/s
Iteration  10: 260812.557 ops/s
Iteration  11: 276950.225 ops/s
Iteration  12: 253646.417 ops/s
Iteration  13: 275525.123 ops/s
Iteration  14: 264239.675 ops/s
Iteration  15: 255240.045 ops/s
Iteration  16: 258347.591 ops/s
Iteration  17: 271706.867 ops/s
Iteration  18: 252246.878 ops/s
Iteration  19: 276348.105 ops/s
Iteration  20: 262926.317 ops/s
Iteration  21: 266582.663 ops/s
Iteration  22: 252484.078 ops/s
Iteration  23: 269717.300 ops/s
Iteration  24: 269126.451 ops/s
Iteration  25: 262980.527 ops/s
Iteration  26: 176898.633 ops/s
Iteration  27: 261064.996 ops/s
Iteration  28: 269496.531 ops/s
Iteration  29: 268665.050 ops/s
Iteration  30: 259055.054 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ParallelCollectorTest._Benchmark.benchmark_collectorFinisherCrash":
  262410.448 ±(99.9%) 12088.692 ops/s [Average]
  (min, avg, max) = (176898.633, 262410.448, 279754.552), stdev = 18093.787
  CI (99.9%): [250321.756, 274499.140] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score       Error  Units
ParallelCollectorTest._Benchmark.benchmark_collectorFinisherCrash  thrpt   30  262410.448 ± 12088.692  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayTest._Benchmark.benchmark_backpressureBounded$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayTest._Benchmark.benchmark_backpressureBounded

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 14184.937 ops/s
# Warmup Iteration   2: 42706.722 ops/s
# Warmup Iteration   3: 50341.665 ops/s
# Warmup Iteration   4: 106195.586 ops/s
# Warmup Iteration   5: 133477.844 ops/s
# Warmup Iteration   6: 129986.969 ops/s
# Warmup Iteration   7: 132882.676 ops/s
# Warmup Iteration   8: 128026.950 ops/s
# Warmup Iteration   9: 133114.654 ops/s
# Warmup Iteration  10: 130599.863 ops/s
# Warmup Iteration  11: 127162.783 ops/s
# Warmup Iteration  12: 124248.291 ops/s
# Warmup Iteration  13: 136416.949 ops/s
# Warmup Iteration  14: 128712.803 ops/s
# Warmup Iteration  15: 131162.602 ops/s
# Warmup Iteration  16: 134677.393 ops/s
# Warmup Iteration  17: 134069.189 ops/s
# Warmup Iteration  18: 132405.086 ops/s
# Warmup Iteration  19: 134367.731 ops/s
# Warmup Iteration  20: 128946.883 ops/s
# Warmup Iteration  21: 134689.962 ops/s
# Warmup Iteration  22: 129248.579 ops/s
# Warmup Iteration  23: 134733.513 ops/s
# Warmup Iteration  24: 135376.647 ops/s
# Warmup Iteration  25: 133238.578 ops/s
# Warmup Iteration  26: 124472.548 ops/s
# Warmup Iteration  27: 136755.320 ops/s
# Warmup Iteration  28: 122970.223 ops/s
# Warmup Iteration  29: 133985.931 ops/s
# Warmup Iteration  30: 132816.477 ops/s
Iteration   1: 130871.295 ops/s
Iteration   2: 137942.950 ops/s
Iteration   3: 125228.465 ops/s
Iteration   4: 131597.231 ops/s
Iteration   5: 139917.289 ops/s
Iteration   6: 128481.899 ops/s
Iteration   7: 137352.527 ops/s
Iteration   8: 129106.900 ops/s
Iteration   9: 135291.157 ops/s
Iteration  10: 130910.255 ops/s
Iteration  11: 135339.649 ops/s
Iteration  12: 135020.776 ops/s
Iteration  13: 125881.884 ops/s
Iteration  14: 137986.457 ops/s
Iteration  15: 137978.105 ops/s
Iteration  16: 129191.470 ops/s
Iteration  17: 135181.617 ops/s
Iteration  18: 133343.192 ops/s
Iteration  19: 133602.699 ops/s
Iteration  20: 135798.899 ops/s
Iteration  21: 129160.983 ops/s
Iteration  22: 136029.847 ops/s
Iteration  23: 131736.635 ops/s
Iteration  24: 131833.480 ops/s
Iteration  25: 137229.168 ops/s
Iteration  26: 129777.992 ops/s
Iteration  27: 137318.256 ops/s
Iteration  28: 133875.358 ops/s
Iteration  29: 134985.639 ops/s
Iteration  30: 137705.597 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayTest._Benchmark.benchmark_backpressureBounded":
  133522.589 ±(99.9%) 2582.251 ops/s [Average]
  (min, avg, max) = (125228.465, 133522.589, 139917.289), stdev = 3864.991
  CI (99.9%): [130940.338, 136104.840] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
FlowableReplayTest._Benchmark.benchmark_backpressureBounded  thrpt   30  133522.589 ± 2582.251  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybeTest._Benchmark.benchmark_simple$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybeTest._Benchmark.benchmark_simple

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 204969.962 ops/s
# Warmup Iteration   2: 998106.719 ops/s
# Warmup Iteration   3: 1367141.471 ops/s
# Warmup Iteration   4: 1337573.174 ops/s
# Warmup Iteration   5: 1306887.416 ops/s
# Warmup Iteration   6: 1267525.866 ops/s
# Warmup Iteration   7: 1308943.583 ops/s
# Warmup Iteration   8: 1337857.425 ops/s
# Warmup Iteration   9: 1204113.945 ops/s
# Warmup Iteration  10: 1401962.078 ops/s
# Warmup Iteration  11: 1308317.088 ops/s
# Warmup Iteration  12: 1342431.340 ops/s
# Warmup Iteration  13: 1399279.051 ops/s
# Warmup Iteration  14: 1284360.771 ops/s
# Warmup Iteration  15: 1325128.543 ops/s
# Warmup Iteration  16: 1376078.420 ops/s
# Warmup Iteration  17: 1308212.649 ops/s
# Warmup Iteration  18: 1316023.118 ops/s
# Warmup Iteration  19: 1332496.176 ops/s
# Warmup Iteration  20: 1315279.050 ops/s
# Warmup Iteration  21: 1357191.224 ops/s
# Warmup Iteration  22: 1312303.725 ops/s
# Warmup Iteration  23: 1349699.371 ops/s
# Warmup Iteration  24: 1301686.238 ops/s
# Warmup Iteration  25: 1285692.613 ops/s
# Warmup Iteration  26: 1371896.429 ops/s
# Warmup Iteration  27: 1301352.074 ops/s
# Warmup Iteration  28: 1323609.810 ops/s
# Warmup Iteration  29: 1337122.632 ops/s
# Warmup Iteration  30: 1319888.184 ops/s
Iteration   1: 1354983.136 ops/s
Iteration   2: 1341750.601 ops/s
Iteration   3: 1338910.015 ops/s
Iteration   4: 1373847.470 ops/s
Iteration   5: 1347763.562 ops/s
Iteration   6: 1304447.462 ops/s
Iteration   7: 1318412.424 ops/s
Iteration   8: 1321542.333 ops/s
Iteration   9: 1362751.707 ops/s
Iteration  10: 1295619.354 ops/s
Iteration  11: 1237384.866 ops/s
Iteration  12: 1286832.945 ops/s
Iteration  13: 1361510.946 ops/s
Iteration  14: 1336834.591 ops/s
Iteration  15: 1303660.010 ops/s
Iteration  16: 1369696.714 ops/s
Iteration  17: 1281033.240 ops/s
Iteration  18: 1357166.914 ops/s
Iteration  19: 1332069.673 ops/s
Iteration  20: 1114150.213 ops/s
Iteration  21: 1353801.775 ops/s
Iteration  22: 1320808.251 ops/s
Iteration  23: 1411421.832 ops/s
Iteration  24: 1297154.224 ops/s
Iteration  25: 1343005.105 ops/s
Iteration  26: 1308571.511 ops/s
Iteration  27: 1319085.538 ops/s
Iteration  28: 1326483.551 ops/s
Iteration  29: 1323086.880 ops/s
Iteration  30: 1350706.579 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybeTest._Benchmark.benchmark_simple":
  1323149.781 ±(99.9%) 34619.063 ops/s [Average]
  (min, avg, max) = (1114150.213, 1323149.781, 1411421.832), stdev = 51816.188
  CI (99.9%): [1288530.717, 1357768.844] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
FlowableSwitchMapMaybeTest._Benchmark.benchmark_simple  thrpt   30  1323149.781 ± 34619.063  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybeTest._Benchmark.benchmark_simpleMixed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybeTest._Benchmark.benchmark_simpleMixed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 134012.151 ops/s
# Warmup Iteration   2: 577509.118 ops/s
# Warmup Iteration   3: 790402.552 ops/s
# Warmup Iteration   4: 899226.339 ops/s
# Warmup Iteration   5: 834902.557 ops/s
# Warmup Iteration   6: 873831.133 ops/s
# Warmup Iteration   7: 879013.540 ops/s
# Warmup Iteration   8: 948311.593 ops/s
# Warmup Iteration   9: 930859.206 ops/s
# Warmup Iteration  10: 941384.023 ops/s
# Warmup Iteration  11: 942894.853 ops/s
# Warmup Iteration  12: 901167.245 ops/s
# Warmup Iteration  13: 893064.121 ops/s
# Warmup Iteration  14: 942998.465 ops/s
# Warmup Iteration  15: 895253.674 ops/s
# Warmup Iteration  16: 909309.276 ops/s
# Warmup Iteration  17: 939669.293 ops/s
# Warmup Iteration  18: 906662.473 ops/s
# Warmup Iteration  19: 917450.253 ops/s
# Warmup Iteration  20: 899519.325 ops/s
# Warmup Iteration  21: 898479.030 ops/s
# Warmup Iteration  22: 899177.576 ops/s
# Warmup Iteration  23: 910295.947 ops/s
# Warmup Iteration  24: 920874.975 ops/s
# Warmup Iteration  25: 922655.581 ops/s
# Warmup Iteration  26: 930378.965 ops/s
# Warmup Iteration  27: 885897.514 ops/s
# Warmup Iteration  28: 947829.816 ops/s
# Warmup Iteration  29: 942968.659 ops/s
# Warmup Iteration  30: 886971.543 ops/s
Iteration   1: 919572.912 ops/s
Iteration   2: 882874.950 ops/s
Iteration   3: 930978.876 ops/s
Iteration   4: 905168.402 ops/s
Iteration   5: 922718.978 ops/s
Iteration   6: 915520.757 ops/s
Iteration   7: 866428.407 ops/s
Iteration   8: 933000.158 ops/s
Iteration   9: 908630.996 ops/s
Iteration  10: 886195.324 ops/s
Iteration  11: 910215.654 ops/s
Iteration  12: 885292.923 ops/s
Iteration  13: 915813.694 ops/s
Iteration  14: 887573.206 ops/s
Iteration  15: 885029.746 ops/s
Iteration  16: 920205.910 ops/s
Iteration  17: 886771.450 ops/s
Iteration  18: 931564.887 ops/s
Iteration  19: 907714.671 ops/s
Iteration  20: 912306.513 ops/s
Iteration  21: 908638.254 ops/s
Iteration  22: 913361.918 ops/s
Iteration  23: 919274.702 ops/s
Iteration  24: 870929.381 ops/s
Iteration  25: 919652.191 ops/s
Iteration  26: 894419.331 ops/s
Iteration  27: 931648.201 ops/s
Iteration  28: 882074.137 ops/s
Iteration  29: 923625.662 ops/s
Iteration  30: 919710.197 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybeTest._Benchmark.benchmark_simpleMixed":
  906563.746 ±(99.9%) 12715.977 ops/s [Average]
  (min, avg, max) = (866428.407, 906563.746, 933000.158), stdev = 19032.677
  CI (99.9%): [893847.770, 919279.723] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score       Error  Units
FlowableSwitchMapMaybeTest._Benchmark.benchmark_simpleMixed  thrpt   30  906563.746 ± 12715.977  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybeTest._Benchmark.benchmark_simpleEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybeTest._Benchmark.benchmark_simpleEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 397032.357 ops/s
# Warmup Iteration   2: 1287558.264 ops/s
# Warmup Iteration   3: 1565393.616 ops/s
# Warmup Iteration   4: 1665121.670 ops/s
# Warmup Iteration   5: 1891641.042 ops/s
# Warmup Iteration   6: 1647317.939 ops/s
# Warmup Iteration   7: 1640548.834 ops/s
# Warmup Iteration   8: 1664618.144 ops/s
# Warmup Iteration   9: 1681471.697 ops/s
# Warmup Iteration  10: 1800911.066 ops/s
# Warmup Iteration  11: 1714916.863 ops/s
# Warmup Iteration  12: 1808507.576 ops/s
# Warmup Iteration  13: 1693667.645 ops/s
# Warmup Iteration  14: 1808581.953 ops/s
# Warmup Iteration  15: 1717461.294 ops/s
# Warmup Iteration  16: 1735294.844 ops/s
# Warmup Iteration  17: 1805095.767 ops/s
# Warmup Iteration  18: 1693110.002 ops/s
# Warmup Iteration  19: 1777677.286 ops/s
# Warmup Iteration  20: 1748967.491 ops/s
# Warmup Iteration  21: 1697146.110 ops/s
# Warmup Iteration  22: 1823600.409 ops/s
# Warmup Iteration  23: 1683562.293 ops/s
# Warmup Iteration  24: 1802759.906 ops/s
# Warmup Iteration  25: 1754828.021 ops/s
# Warmup Iteration  26: 1659219.634 ops/s
# Warmup Iteration  27: 1791022.869 ops/s
# Warmup Iteration  28: 1781277.743 ops/s
# Warmup Iteration  29: 1763170.512 ops/s
# Warmup Iteration  30: 1788837.825 ops/s
Iteration   1: 1727528.290 ops/s
Iteration   2: 1793450.085 ops/s
Iteration   3: 1819388.237 ops/s
Iteration   4: 1725413.500 ops/s
Iteration   5: 1721354.893 ops/s
Iteration   6: 1744534.270 ops/s
Iteration   7: 1737915.435 ops/s
Iteration   8: 1749217.664 ops/s
Iteration   9: 1702819.430 ops/s
Iteration  10: 1845341.381 ops/s
Iteration  11: 1689698.547 ops/s
Iteration  12: 1758764.903 ops/s
Iteration  13: 1755578.710 ops/s
Iteration  14: 1730220.241 ops/s
Iteration  15: 1300569.233 ops/s
Iteration  16: 1691914.920 ops/s
Iteration  17: 1782186.120 ops/s
Iteration  18: 1679039.033 ops/s
Iteration  19: 1772030.793 ops/s
Iteration  20: 1687469.786 ops/s
Iteration  21: 1776185.615 ops/s
Iteration  22: 1660803.874 ops/s
Iteration  23: 1756094.764 ops/s
Iteration  24: 1726935.180 ops/s
Iteration  25: 1723589.985 ops/s
Iteration  26: 1799074.455 ops/s
Iteration  27: 1685695.597 ops/s
Iteration  28: 1683791.209 ops/s
Iteration  29: 1729340.495 ops/s
Iteration  30: 1771242.764 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybeTest._Benchmark.benchmark_simpleEmpty":
  1724239.647 ±(99.9%) 61018.852 ops/s [Average]
  (min, avg, max) = (1300569.233, 1724239.647, 1845341.381), stdev = 91330.152
  CI (99.9%): [1663220.795, 1785258.499] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
FlowableSwitchMapMaybeTest._Benchmark.benchmark_simpleEmpty  thrpt   30  1724239.647 ± 61018.852  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybeTest._Benchmark.benchmark_requestMoreOnNext$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybeTest._Benchmark.benchmark_requestMoreOnNext

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 184201.704 ops/s
# Warmup Iteration   2: 854644.961 ops/s
# Warmup Iteration   3: 1052540.232 ops/s
# Warmup Iteration   4: 997397.835 ops/s
# Warmup Iteration   5: 1056399.766 ops/s
# Warmup Iteration   6: 1023149.898 ops/s
# Warmup Iteration   7: 976914.348 ops/s
# Warmup Iteration   8: 1062708.073 ops/s
# Warmup Iteration   9: 953937.802 ops/s
# Warmup Iteration  10: 1041308.473 ops/s
# Warmup Iteration  11: 1064029.735 ops/s
# Warmup Iteration  12: 1042341.490 ops/s
# Warmup Iteration  13: 1044338.406 ops/s
# Warmup Iteration  14: 1000948.898 ops/s
# Warmup Iteration  15: 1000822.445 ops/s
# Warmup Iteration  16: 1047492.135 ops/s
# Warmup Iteration  17: 1051957.382 ops/s
# Warmup Iteration  18: 1079677.772 ops/s
# Warmup Iteration  19: 1070221.773 ops/s
# Warmup Iteration  20: 1021434.713 ops/s
# Warmup Iteration  21: 1045214.390 ops/s
# Warmup Iteration  22: 1004481.583 ops/s
# Warmup Iteration  23: 1026854.297 ops/s
# Warmup Iteration  24: 1054943.626 ops/s
# Warmup Iteration  25: 1042813.209 ops/s
# Warmup Iteration  26: 1033385.657 ops/s
# Warmup Iteration  27: 1030708.970 ops/s
# Warmup Iteration  28: 1014196.341 ops/s
# Warmup Iteration  29: 1048656.603 ops/s
# Warmup Iteration  30: 1031383.509 ops/s
Iteration   1: 1051825.571 ops/s
Iteration   2: 1061342.280 ops/s
Iteration   3: 1082741.033 ops/s
Iteration   4: 1020061.647 ops/s
Iteration   5: 1036285.026 ops/s
Iteration   6: 1019291.484 ops/s
Iteration   7: 1042815.759 ops/s
Iteration   8: 1066051.589 ops/s
Iteration   9: 1065503.573 ops/s
Iteration  10: 990783.466 ops/s
Iteration  11: 1084305.648 ops/s
Iteration  12: 1077293.069 ops/s
Iteration  13: 1049215.953 ops/s
Iteration  14: 991392.630 ops/s
Iteration  15: 1081205.404 ops/s
Iteration  16: 1038211.191 ops/s
Iteration  17: 1018744.993 ops/s
Iteration  18: 1066349.986 ops/s
Iteration  19: 1021192.260 ops/s
Iteration  20: 1059988.804 ops/s
Iteration  21: 1006135.656 ops/s
Iteration  22: 1084492.391 ops/s
Iteration  23: 1067200.108 ops/s
Iteration  24: 1066675.427 ops/s
Iteration  25: 1018548.828 ops/s
Iteration  26: 1075591.533 ops/s
Iteration  27: 1044010.630 ops/s
Iteration  28: 1065555.050 ops/s
Iteration  29: 1032934.605 ops/s
Iteration  30: 1070546.866 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybeTest._Benchmark.benchmark_requestMoreOnNext":
  1048543.082 ±(99.9%) 18481.512 ops/s [Average]
  (min, avg, max) = (990783.466, 1048543.082, 1084492.391), stdev = 27662.259
  CI (99.9%): [1030061.570, 1067024.594] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
FlowableSwitchMapMaybeTest._Benchmark.benchmark_requestMoreOnNext  thrpt   30  1048543.082 ± 18481.512  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybeTest._Benchmark.benchmark_innerError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybeTest._Benchmark.benchmark_innerError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 157344.112 ops/s
# Warmup Iteration   2: 509617.028 ops/s
# Warmup Iteration   3: 586387.010 ops/s
# Warmup Iteration   4: 592161.875 ops/s
# Warmup Iteration   5: 514520.640 ops/s
# Warmup Iteration   6: 613208.690 ops/s
# Warmup Iteration   7: 596230.082 ops/s
# Warmup Iteration   8: 640416.418 ops/s
# Warmup Iteration   9: 641445.694 ops/s
# Warmup Iteration  10: 594236.891 ops/s
# Warmup Iteration  11: 636086.672 ops/s
# Warmup Iteration  12: 594731.596 ops/s
# Warmup Iteration  13: 629050.420 ops/s
# Warmup Iteration  14: 641070.676 ops/s
# Warmup Iteration  15: 591099.007 ops/s
# Warmup Iteration  16: 628424.381 ops/s
# Warmup Iteration  17: 639418.789 ops/s
# Warmup Iteration  18: 645394.238 ops/s
# Warmup Iteration  19: 670448.153 ops/s
# Warmup Iteration  20: 615564.962 ops/s
# Warmup Iteration  21: 653508.897 ops/s
# Warmup Iteration  22: 652161.935 ops/s
# Warmup Iteration  23: 656356.472 ops/s
# Warmup Iteration  24: 648231.522 ops/s
# Warmup Iteration  25: 638838.971 ops/s
# Warmup Iteration  26: 641397.522 ops/s
# Warmup Iteration  27: 627458.919 ops/s
# Warmup Iteration  28: 647295.561 ops/s
# Warmup Iteration  29: 632238.579 ops/s
# Warmup Iteration  30: 646593.652 ops/s
Iteration   1: 633190.407 ops/s
Iteration   2: 652884.339 ops/s
Iteration   3: 656068.230 ops/s
Iteration   4: 632255.028 ops/s
Iteration   5: 682452.334 ops/s
Iteration   6: 616194.576 ops/s
Iteration   7: 650544.992 ops/s
Iteration   8: 655314.611 ops/s
Iteration   9: 641422.648 ops/s
Iteration  10: 554660.404 ops/s
Iteration  11: 626548.507 ops/s
Iteration  12: 650131.435 ops/s
Iteration  13: 647609.163 ops/s
Iteration  14: 644302.798 ops/s
Iteration  15: 645616.086 ops/s
Iteration  16: 668014.947 ops/s
Iteration  17: 633688.275 ops/s
Iteration  18: 651035.058 ops/s
Iteration  19: 647712.305 ops/s
Iteration  20: 628422.158 ops/s
Iteration  21: 656782.842 ops/s
Iteration  22: 643538.060 ops/s
Iteration  23: 686064.932 ops/s
Iteration  24: 634302.790 ops/s
Iteration  25: 637142.944 ops/s
Iteration  26: 662594.244 ops/s
Iteration  27: 647782.448 ops/s
Iteration  28: 654145.688 ops/s
Iteration  29: 649616.815 ops/s
Iteration  30: 654358.960 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybeTest._Benchmark.benchmark_innerError":
  644813.267 ±(99.9%) 15140.638 ops/s [Average]
  (min, avg, max) = (554660.404, 644813.267, 686064.932), stdev = 22661.796
  CI (99.9%): [629672.629, 659953.906] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score       Error  Units
FlowableSwitchMapMaybeTest._Benchmark.benchmark_innerError  thrpt   30  644813.267 ± 15140.638  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybeTest._Benchmark.benchmark_limit$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybeTest._Benchmark.benchmark_limit

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 263249.490 ops/s
# Warmup Iteration   2: 1037421.390 ops/s
# Warmup Iteration   3: 1708186.067 ops/s
# Warmup Iteration   4: 1627189.051 ops/s
# Warmup Iteration   5: 1876781.430 ops/s
# Warmup Iteration   6: 1803107.972 ops/s
# Warmup Iteration   7: 1953561.338 ops/s
# Warmup Iteration   8: 1878207.356 ops/s
# Warmup Iteration   9: 1804071.352 ops/s
# Warmup Iteration  10: 1915649.509 ops/s
# Warmup Iteration  11: 1930642.587 ops/s
# Warmup Iteration  12: 1795659.779 ops/s
# Warmup Iteration  13: 1900051.660 ops/s
# Warmup Iteration  14: 1808478.952 ops/s
# Warmup Iteration  15: 1925098.875 ops/s
# Warmup Iteration  16: 1899014.474 ops/s
# Warmup Iteration  17: 1794013.213 ops/s
# Warmup Iteration  18: 1856470.391 ops/s
# Warmup Iteration  19: 1895996.202 ops/s
# Warmup Iteration  20: 1794366.754 ops/s
# Warmup Iteration  21: 1867620.795 ops/s
# Warmup Iteration  22: 1837090.974 ops/s
# Warmup Iteration  23: 1806426.004 ops/s
# Warmup Iteration  24: 1798281.712 ops/s
# Warmup Iteration  25: 1867458.375 ops/s
# Warmup Iteration  26: 1926089.019 ops/s
# Warmup Iteration  27: 1805108.760 ops/s
# Warmup Iteration  28: 1909606.373 ops/s
# Warmup Iteration  29: 1832734.020 ops/s
# Warmup Iteration  30: 1806531.302 ops/s
Iteration   1: 1930965.231 ops/s
Iteration   2: 1826455.448 ops/s
Iteration   3: 1813935.370 ops/s
Iteration   4: 1880500.438 ops/s
Iteration   5: 1822223.553 ops/s
Iteration   6: 1826968.860 ops/s
Iteration   7: 1937258.480 ops/s
Iteration   8: 1800459.712 ops/s
Iteration   9: 1901390.600 ops/s
Iteration  10: 1842210.964 ops/s
Iteration  11: 1865539.328 ops/s
Iteration  12: 1872569.675 ops/s
Iteration  13: 1885688.273 ops/s
Iteration  14: 1861357.108 ops/s
Iteration  15: 1883164.450 ops/s
Iteration  16: 1778345.733 ops/s
Iteration  17: 1826804.468 ops/s
Iteration  18: 1917956.987 ops/s
Iteration  19: 1771152.153 ops/s
Iteration  20: 1859824.994 ops/s
Iteration  21: 1867577.119 ops/s
Iteration  22: 1816165.287 ops/s
Iteration  23: 1909629.734 ops/s
Iteration  24: 1791749.458 ops/s
Iteration  25: 1892030.128 ops/s
Iteration  26: 1861314.139 ops/s
Iteration  27: 1811925.409 ops/s
Iteration  28: 1887449.901 ops/s
Iteration  29: 1856317.326 ops/s
Iteration  30: 1792821.689 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybeTest._Benchmark.benchmark_limit":
  1853058.400 ±(99.9%) 30249.565 ops/s [Average]
  (min, avg, max) = (1771152.153, 1853058.400, 1937258.480), stdev = 45276.129
  CI (99.9%): [1822808.835, 1883307.966] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
FlowableSwitchMapMaybeTest._Benchmark.benchmark_limit  thrpt   30  1853058.400 ± 30249.565  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybeTest._Benchmark.benchmark_mapperCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybeTest._Benchmark.benchmark_mapperCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 74845.348 ops/s
# Warmup Iteration   2: 423302.617 ops/s
# Warmup Iteration   3: 504362.074 ops/s
# Warmup Iteration   4: 490254.408 ops/s
# Warmup Iteration   5: 542390.606 ops/s
# Warmup Iteration   6: 467410.950 ops/s
# Warmup Iteration   7: 557817.132 ops/s
# Warmup Iteration   8: 538358.747 ops/s
# Warmup Iteration   9: 566421.907 ops/s
# Warmup Iteration  10: 533895.042 ops/s
# Warmup Iteration  11: 572590.362 ops/s
# Warmup Iteration  12: 540298.405 ops/s
# Warmup Iteration  13: 563881.380 ops/s
# Warmup Iteration  14: 547139.424 ops/s
# Warmup Iteration  15: 550633.928 ops/s
# Warmup Iteration  16: 570003.476 ops/s
# Warmup Iteration  17: 583573.295 ops/s
# Warmup Iteration  18: 562367.153 ops/s
# Warmup Iteration  19: 586897.995 ops/s
# Warmup Iteration  20: 582193.096 ops/s
# Warmup Iteration  21: 575951.795 ops/s
# Warmup Iteration  22: 587376.951 ops/s
# Warmup Iteration  23: 544776.241 ops/s
# Warmup Iteration  24: 579162.399 ops/s
# Warmup Iteration  25: 571875.135 ops/s
# Warmup Iteration  26: 569356.188 ops/s
# Warmup Iteration  27: 590685.755 ops/s
# Warmup Iteration  28: 554606.886 ops/s
# Warmup Iteration  29: 593823.475 ops/s
# Warmup Iteration  30: 563244.108 ops/s
Iteration   1: 572098.267 ops/s
Iteration   2: 567724.555 ops/s
Iteration   3: 577107.003 ops/s
Iteration   4: 503435.226 ops/s
Iteration   5: 571763.946 ops/s
Iteration   6: 554971.331 ops/s
Iteration   7: 584325.948 ops/s
Iteration   8: 569318.828 ops/s
Iteration   9: 583119.638 ops/s
Iteration  10: 569992.468 ops/s
Iteration  11: 546553.992 ops/s
Iteration  12: 581211.059 ops/s
Iteration  13: 561315.783 ops/s
Iteration  14: 598404.260 ops/s
Iteration  15: 545664.534 ops/s
Iteration  16: 576596.961 ops/s
Iteration  17: 588527.903 ops/s
Iteration  18: 561330.467 ops/s
Iteration  19: 587173.933 ops/s
Iteration  20: 566142.784 ops/s
Iteration  21: 590004.299 ops/s
Iteration  22: 579185.347 ops/s
Iteration  23: 571112.705 ops/s
Iteration  24: 560822.938 ops/s
Iteration  25: 582605.249 ops/s
Iteration  26: 586487.541 ops/s
Iteration  27: 561951.204 ops/s
Iteration  28: 578134.132 ops/s
Iteration  29: 576597.762 ops/s
Iteration  30: 582937.570 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybeTest._Benchmark.benchmark_mapperCrash":
  571220.588 ±(99.9%) 11975.542 ops/s [Average]
  (min, avg, max) = (503435.226, 571220.588, 598404.260), stdev = 17924.428
  CI (99.9%): [559245.046, 583196.129] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score       Error  Units
FlowableSwitchMapMaybeTest._Benchmark.benchmark_mapperCrash  thrpt   30  571220.588 ± 11975.542  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybeTest._Benchmark.benchmark_mainError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybeTest._Benchmark.benchmark_mainError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 83945.681 ops/s
# Warmup Iteration   2: 526154.814 ops/s
# Warmup Iteration   3: 654236.877 ops/s
# Warmup Iteration   4: 601087.002 ops/s
# Warmup Iteration   5: 659795.540 ops/s
# Warmup Iteration   6: 591543.957 ops/s
# Warmup Iteration   7: 662936.656 ops/s
# Warmup Iteration   8: 642326.265 ops/s
# Warmup Iteration   9: 650613.348 ops/s
# Warmup Iteration  10: 689586.604 ops/s
# Warmup Iteration  11: 659836.118 ops/s
# Warmup Iteration  12: 660919.123 ops/s
# Warmup Iteration  13: 681969.693 ops/s
# Warmup Iteration  14: 671239.332 ops/s
# Warmup Iteration  15: 681826.720 ops/s
# Warmup Iteration  16: 660451.791 ops/s
# Warmup Iteration  17: 694289.617 ops/s
# Warmup Iteration  18: 721058.190 ops/s
# Warmup Iteration  19: 686349.922 ops/s
# Warmup Iteration  20: 713392.345 ops/s
# Warmup Iteration  21: 706247.583 ops/s
# Warmup Iteration  22: 739768.098 ops/s
# Warmup Iteration  23: 706326.588 ops/s
# Warmup Iteration  24: 683245.400 ops/s
# Warmup Iteration  25: 701445.604 ops/s
# Warmup Iteration  26: 702731.469 ops/s
# Warmup Iteration  27: 704051.570 ops/s
# Warmup Iteration  28: 729206.817 ops/s
# Warmup Iteration  29: 695632.459 ops/s
# Warmup Iteration  30: 729073.599 ops/s
Iteration   1: 742252.744 ops/s
Iteration   2: 686181.635 ops/s
Iteration   3: 718883.167 ops/s
Iteration   4: 726207.872 ops/s
Iteration   5: 690203.716 ops/s
Iteration   6: 706367.851 ops/s
Iteration   7: 714626.505 ops/s
Iteration   8: 705776.555 ops/s
Iteration   9: 719321.905 ops/s
Iteration  10: 691307.805 ops/s
Iteration  11: 715497.612 ops/s
Iteration  12: 697954.943 ops/s
Iteration  13: 711612.431 ops/s
Iteration  14: 709184.178 ops/s
Iteration  15: 706191.623 ops/s
Iteration  16: 690089.303 ops/s
Iteration  17: 730518.589 ops/s
Iteration  18: 684793.865 ops/s
Iteration  19: 716860.206 ops/s
Iteration  20: 693064.387 ops/s
Iteration  21: 708242.897 ops/s
Iteration  22: 700644.459 ops/s
Iteration  23: 708139.500 ops/s
Iteration  24: 711650.917 ops/s
Iteration  25: 683548.534 ops/s
Iteration  26: 735898.526 ops/s
Iteration  27: 688758.429 ops/s
Iteration  28: 703039.220 ops/s
Iteration  29: 720828.415 ops/s
Iteration  30: 692452.728 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybeTest._Benchmark.benchmark_mainError":
  707003.351 ±(99.9%) 10329.646 ops/s [Average]
  (min, avg, max) = (683548.534, 707003.351, 742252.744), stdev = 15460.929
  CI (99.9%): [696673.704, 717332.997] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score       Error  Units
FlowableSwitchMapMaybeTest._Benchmark.benchmark_mainError  thrpt   30  707003.351 ± 10329.646  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchOnNextTest._Benchmark.benchmark_noDelaySwitch$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchOnNextTest._Benchmark.benchmark_noDelaySwitch

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 199216.089 ops/s
# Warmup Iteration   2: 924451.848 ops/s
# Warmup Iteration   3: 1372497.714 ops/s
# Warmup Iteration   4: 1332054.025 ops/s
# Warmup Iteration   5: 1541015.356 ops/s
# Warmup Iteration   6: 1565129.271 ops/s
# Warmup Iteration   7: 1593207.871 ops/s
# Warmup Iteration   8: 1559182.138 ops/s
# Warmup Iteration   9: 1648317.474 ops/s
# Warmup Iteration  10: 1521305.424 ops/s
# Warmup Iteration  11: 1541339.076 ops/s
# Warmup Iteration  12: 1643378.498 ops/s
# Warmup Iteration  13: 1525096.908 ops/s
# Warmup Iteration  14: 1574333.500 ops/s
# Warmup Iteration  15: 1648722.331 ops/s
# Warmup Iteration  16: 1651480.315 ops/s
# Warmup Iteration  17: 1541026.975 ops/s
# Warmup Iteration  18: 1598887.085 ops/s
# Warmup Iteration  19: 1528110.958 ops/s
# Warmup Iteration  20: 1584716.577 ops/s
# Warmup Iteration  21: 1548698.735 ops/s
# Warmup Iteration  22: 1596178.025 ops/s
# Warmup Iteration  23: 1540999.028 ops/s
# Warmup Iteration  24: 1552115.908 ops/s
# Warmup Iteration  25: 1646498.542 ops/s
# Warmup Iteration  26: 1541289.424 ops/s
# Warmup Iteration  27: 1569412.058 ops/s
# Warmup Iteration  28: 1551625.895 ops/s
# Warmup Iteration  29: 1314597.461 ops/s
# Warmup Iteration  30: 1593525.028 ops/s
Iteration   1: 1493429.058 ops/s
Iteration   2: 1583694.646 ops/s
Iteration   3: 1517034.833 ops/s
Iteration   4: 1585958.178 ops/s
Iteration   5: 1558534.571 ops/s
Iteration   6: 1549271.064 ops/s
Iteration   7: 1598956.422 ops/s
Iteration   8: 1561474.595 ops/s
Iteration   9: 1580456.655 ops/s
Iteration  10: 1620891.964 ops/s
Iteration  11: 1523130.241 ops/s
Iteration  12: 1641755.146 ops/s
Iteration  13: 1621636.548 ops/s
Iteration  14: 1524729.639 ops/s
Iteration  15: 1575519.861 ops/s
Iteration  16: 1600316.172 ops/s
Iteration  17: 1531306.856 ops/s
Iteration  18: 1615022.365 ops/s
Iteration  19: 1559037.688 ops/s
Iteration  20: 1606613.012 ops/s
Iteration  21: 1552049.315 ops/s
Iteration  22: 1551985.657 ops/s
Iteration  23: 1605379.809 ops/s
Iteration  24: 1561340.485 ops/s
Iteration  25: 1520080.371 ops/s
Iteration  26: 1619260.240 ops/s
Iteration  27: 1478905.184 ops/s
Iteration  28: 1619024.531 ops/s
Iteration  29: 1500153.819 ops/s
Iteration  30: 1610330.965 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchOnNextTest._Benchmark.benchmark_noDelaySwitch":
  1568909.330 ±(99.9%) 29185.994 ops/s [Average]
  (min, avg, max) = (1478905.184, 1568909.330, 1641755.146), stdev = 43684.224
  CI (99.9%): [1539723.336, 1598095.323] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
MaybeSwitchOnNextTest._Benchmark.benchmark_noDelaySwitch  thrpt   30  1568909.330 ± 29185.994  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybeTest._Benchmark.benchmark_cancel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybeTest._Benchmark.benchmark_cancel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 303988.361 ops/s
# Warmup Iteration   2: 1415729.175 ops/s
# Warmup Iteration   3: 1784962.516 ops/s
# Warmup Iteration   4: 2121567.181 ops/s
# Warmup Iteration   5: 2378890.997 ops/s
# Warmup Iteration   6: 2229629.666 ops/s
# Warmup Iteration   7: 2265606.873 ops/s
# Warmup Iteration   8: 2289687.755 ops/s
# Warmup Iteration   9: 2207004.260 ops/s
# Warmup Iteration  10: 2281534.953 ops/s
# Warmup Iteration  11: 2328693.589 ops/s
# Warmup Iteration  12: 2190925.168 ops/s
# Warmup Iteration  13: 2344365.290 ops/s
# Warmup Iteration  14: 2212736.084 ops/s
# Warmup Iteration  15: 2332583.306 ops/s
# Warmup Iteration  16: 2330617.062 ops/s
# Warmup Iteration  17: 2241724.787 ops/s
# Warmup Iteration  18: 2305678.567 ops/s
# Warmup Iteration  19: 2292913.013 ops/s
# Warmup Iteration  20: 2254770.387 ops/s
# Warmup Iteration  21: 2188761.461 ops/s
# Warmup Iteration  22: 2155904.824 ops/s
# Warmup Iteration  23: 2414108.286 ops/s
# Warmup Iteration  24: 2192163.250 ops/s
# Warmup Iteration  25: 2193642.749 ops/s
# Warmup Iteration  26: 2331011.408 ops/s
# Warmup Iteration  27: 2247579.876 ops/s
# Warmup Iteration  28: 2287896.285 ops/s
# Warmup Iteration  29: 2308347.598 ops/s
# Warmup Iteration  30: 2204982.188 ops/s
Iteration   1: 2320835.382 ops/s
Iteration   2: 2219185.395 ops/s
Iteration   3: 2308716.500 ops/s
Iteration   4: 2206943.682 ops/s
Iteration   5: 2295207.561 ops/s
Iteration   6: 2299931.605 ops/s
Iteration   7: 2206271.529 ops/s
Iteration   8: 2318087.912 ops/s
Iteration   9: 2261724.021 ops/s
Iteration  10: 2315047.167 ops/s
Iteration  11: 2242840.649 ops/s
Iteration  12: 2324838.744 ops/s
Iteration  13: 2256334.755 ops/s
Iteration  14: 2261039.098 ops/s
Iteration  15: 2240294.399 ops/s
Iteration  16: 2196020.486 ops/s
Iteration  17: 2337311.223 ops/s
Iteration  18: 2284518.823 ops/s
Iteration  19: 2263525.453 ops/s
Iteration  20: 2283683.045 ops/s
Iteration  21: 2232366.215 ops/s
Iteration  22: 2310970.259 ops/s
Iteration  23: 2248087.831 ops/s
Iteration  24: 2291175.356 ops/s
Iteration  25: 2241808.235 ops/s
Iteration  26: 2271494.201 ops/s
Iteration  27: 2321206.785 ops/s
Iteration  28: 2245384.072 ops/s
Iteration  29: 2253000.941 ops/s
Iteration  30: 2198211.426 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybeTest._Benchmark.benchmark_cancel":
  2268535.425 ±(99.9%) 27577.450 ops/s [Average]
  (min, avg, max) = (2196020.486, 2268535.425, 2337311.223), stdev = 41276.632
  CI (99.9%): [2240957.975, 2296112.875] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
FlowableSwitchMapMaybeTest._Benchmark.benchmark_cancel  thrpt   30  2268535.425 ± 27577.450  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybeTest._Benchmark.benchmark_mainErrorAfterTermination$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybeTest._Benchmark.benchmark_mainErrorAfterTermination

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 19515.750 ops/s
# Warmup Iteration   2: 107550.474 ops/s
# Warmup Iteration   3: 143384.032 ops/s
# Warmup Iteration   4: 148465.757 ops/s
# Warmup Iteration   5: 162832.743 ops/s
# Warmup Iteration   6: 146163.282 ops/s
# Warmup Iteration   7: 167618.124 ops/s
# Warmup Iteration   8: 157442.267 ops/s
# Warmup Iteration   9: 169142.837 ops/s
# Warmup Iteration  10: 159312.240 ops/s
# Warmup Iteration  11: 162527.478 ops/s
# Warmup Iteration  12: 162872.152 ops/s
# Warmup Iteration  13: 166180.563 ops/s
# Warmup Iteration  14: 163030.162 ops/s
# Warmup Iteration  15: 161826.066 ops/s
# Warmup Iteration  16: 165120.419 ops/s
# Warmup Iteration  17: 168883.438 ops/s
# Warmup Iteration  18: 164837.451 ops/s
# Warmup Iteration  19: 167328.798 ops/s
# Warmup Iteration  20: 171289.394 ops/s
# Warmup Iteration  21: 167869.565 ops/s
# Warmup Iteration  22: 168716.852 ops/s
# Warmup Iteration  23: 173293.168 ops/s
# Warmup Iteration  24: 134546.054 ops/s
# Warmup Iteration  25: 168449.203 ops/s
# Warmup Iteration  26: 168999.615 ops/s
# Warmup Iteration  27: 171860.504 ops/s
# Warmup Iteration  28: 165822.022 ops/s
# Warmup Iteration  29: 170791.082 ops/s
# Warmup Iteration  30: 174903.959 ops/s
Iteration   1: 167733.949 ops/s
Iteration   2: 171807.156 ops/s
Iteration   3: 171672.406 ops/s
Iteration   4: 167411.557 ops/s
Iteration   5: 170346.484 ops/s
Iteration   6: 166204.036 ops/s
Iteration   7: 171985.682 ops/s
Iteration   8: 170565.614 ops/s
Iteration   9: 161263.326 ops/s
Iteration  10: 166069.578 ops/s
Iteration  11: 173837.412 ops/s
Iteration  12: 166894.672 ops/s
Iteration  13: 168763.181 ops/s
Iteration  14: 173743.977 ops/s
Iteration  15: 161453.924 ops/s
Iteration  16: 172847.211 ops/s
Iteration  17: 169356.875 ops/s
Iteration  18: 169572.502 ops/s
Iteration  19: 176524.292 ops/s
Iteration  20: 166963.849 ops/s
Iteration  21: 176046.261 ops/s
Iteration  22: 166123.449 ops/s
Iteration  23: 169913.243 ops/s
Iteration  24: 173040.785 ops/s
Iteration  25: 171449.640 ops/s
Iteration  26: 173051.394 ops/s
Iteration  27: 162642.938 ops/s
Iteration  28: 173402.598 ops/s
Iteration  29: 172064.709 ops/s
Iteration  30: 167762.595 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybeTest._Benchmark.benchmark_mainErrorAfterTermination":
  169683.843 ±(99.9%) 2620.491 ops/s [Average]
  (min, avg, max) = (161263.326, 169683.843, 176524.292), stdev = 3922.228
  CI (99.9%): [167063.352, 172304.334] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score      Error  Units
FlowableSwitchMapMaybeTest._Benchmark.benchmark_mainErrorAfterTermination  thrpt   30  169683.843 ± 2620.491  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybeTest._Benchmark.benchmark_switchOver$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybeTest._Benchmark.benchmark_switchOver

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 69840.520 ops/s
# Warmup Iteration   2: 291077.415 ops/s
# Warmup Iteration   3: 491106.079 ops/s
# Warmup Iteration   4: 531176.952 ops/s
# Warmup Iteration   5: 533280.883 ops/s
# Warmup Iteration   6: 518372.847 ops/s
# Warmup Iteration   7: 522787.582 ops/s
# Warmup Iteration   8: 532814.961 ops/s
# Warmup Iteration   9: 499285.028 ops/s
# Warmup Iteration  10: 522666.169 ops/s
# Warmup Iteration  11: 531470.303 ops/s
# Warmup Iteration  12: 501214.022 ops/s
# Warmup Iteration  13: 521902.685 ops/s
# Warmup Iteration  14: 518935.895 ops/s
# Warmup Iteration  15: 542903.751 ops/s
# Warmup Iteration  16: 540352.061 ops/s
# Warmup Iteration  17: 538295.495 ops/s
# Warmup Iteration  18: 577200.388 ops/s
# Warmup Iteration  19: 569936.300 ops/s
# Warmup Iteration  20: 535327.214 ops/s
# Warmup Iteration  21: 535915.096 ops/s
# Warmup Iteration  22: 535901.858 ops/s
# Warmup Iteration  23: 560412.112 ops/s
# Warmup Iteration  24: 530102.722 ops/s
# Warmup Iteration  25: 577066.262 ops/s
# Warmup Iteration  26: 558738.187 ops/s
# Warmup Iteration  27: 555629.858 ops/s
# Warmup Iteration  28: 557656.839 ops/s
# Warmup Iteration  29: 562014.908 ops/s
# Warmup Iteration  30: 540546.055 ops/s
Iteration   1: 555776.233 ops/s
Iteration   2: 558596.074 ops/s
Iteration   3: 551941.836 ops/s
Iteration   4: 564358.461 ops/s
Iteration   5: 539616.851 ops/s
Iteration   6: 562722.880 ops/s
Iteration   7: 545413.473 ops/s
Iteration   8: 546618.519 ops/s
Iteration   9: 571601.855 ops/s
Iteration  10: 519345.380 ops/s
Iteration  11: 567441.699 ops/s
Iteration  12: 538001.700 ops/s
Iteration  13: 559310.502 ops/s
Iteration  14: 548382.877 ops/s
Iteration  15: 561692.219 ops/s
Iteration  16: 544400.729 ops/s
Iteration  17: 569748.001 ops/s
Iteration  18: 540133.592 ops/s
Iteration  19: 556338.465 ops/s
Iteration  20: 533781.499 ops/s
Iteration  21: 537605.187 ops/s
Iteration  22: 570349.079 ops/s
Iteration  23: 546764.635 ops/s
Iteration  24: 562616.270 ops/s
Iteration  25: 546118.704 ops/s
Iteration  26: 549023.455 ops/s
Iteration  27: 571127.610 ops/s
Iteration  28: 528617.912 ops/s
Iteration  29: 575942.972 ops/s
Iteration  30: 573421.540 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybeTest._Benchmark.benchmark_switchOver":
  553227.007 ±(99.9%) 9680.214 ops/s [Average]
  (min, avg, max) = (519345.380, 553227.007, 575942.972), stdev = 14488.890
  CI (99.9%): [543546.793, 562907.221] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score      Error  Units
FlowableSwitchMapMaybeTest._Benchmark.benchmark_switchOver  thrpt   30  553227.007 ± 9680.214  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybeTest._Benchmark.benchmark_undeliverableUponCancel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybeTest._Benchmark.benchmark_undeliverableUponCancel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 39557.759 ops/s
# Warmup Iteration   2: 143591.228 ops/s
# Warmup Iteration   3: 141662.960 ops/s
# Warmup Iteration   4: 179388.930 ops/s
# Warmup Iteration   5: 188823.555 ops/s
# Warmup Iteration   6: 180160.409 ops/s
# Warmup Iteration   7: 178114.890 ops/s
# Warmup Iteration   8: 175877.332 ops/s
# Warmup Iteration   9: 181304.774 ops/s
# Warmup Iteration  10: 174224.529 ops/s
# Warmup Iteration  11: 178849.365 ops/s
# Warmup Iteration  12: 176121.529 ops/s
# Warmup Iteration  13: 178902.963 ops/s
# Warmup Iteration  14: 184850.702 ops/s
# Warmup Iteration  15: 177935.707 ops/s
# Warmup Iteration  16: 186520.130 ops/s
# Warmup Iteration  17: 197718.253 ops/s
# Warmup Iteration  18: 183899.638 ops/s
# Warmup Iteration  19: 138265.326 ops/s
# Warmup Iteration  20: 202364.759 ops/s
# Warmup Iteration  21: 187921.578 ops/s
# Warmup Iteration  22: 184277.314 ops/s
# Warmup Iteration  23: 192642.096 ops/s
# Warmup Iteration  24: 191412.237 ops/s
# Warmup Iteration  25: 197326.527 ops/s
# Warmup Iteration  26: 186382.239 ops/s
# Warmup Iteration  27: 198316.034 ops/s
# Warmup Iteration  28: 189946.229 ops/s
# Warmup Iteration  29: 191225.194 ops/s
# Warmup Iteration  30: 199201.037 ops/s
Iteration   1: 188721.038 ops/s
Iteration   2: 193600.499 ops/s
Iteration   3: 190766.737 ops/s
Iteration   4: 192532.496 ops/s
Iteration   5: 198007.699 ops/s
Iteration   6: 191144.364 ops/s
Iteration   7: 188546.102 ops/s
Iteration   8: 200576.035 ops/s
Iteration   9: 189714.260 ops/s
Iteration  10: 190384.614 ops/s
Iteration  11: 200252.643 ops/s
Iteration  12: 188944.277 ops/s
Iteration  13: 187669.296 ops/s
Iteration  14: 195954.576 ops/s
Iteration  15: 198830.647 ops/s
Iteration  16: 186869.496 ops/s
Iteration  17: 195972.333 ops/s
Iteration  18: 184794.759 ops/s
Iteration  19: 194977.287 ops/s
Iteration  20: 187374.905 ops/s
Iteration  21: 192221.133 ops/s
Iteration  22: 187274.885 ops/s
Iteration  23: 199389.660 ops/s
Iteration  24: 200746.046 ops/s
Iteration  25: 186199.188 ops/s
Iteration  26: 199107.293 ops/s
Iteration  27: 189821.075 ops/s
Iteration  28: 195891.853 ops/s
Iteration  29: 187039.146 ops/s
Iteration  30: 190040.517 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybeTest._Benchmark.benchmark_undeliverableUponCancel":
  192445.495 ±(99.9%) 3301.285 ops/s [Average]
  (min, avg, max) = (184794.759, 192445.495, 200746.046), stdev = 4941.209
  CI (99.9%): [189144.210, 195746.781] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score      Error  Units
FlowableSwitchMapMaybeTest._Benchmark.benchmark_undeliverableUponCancel  thrpt   30  192445.495 ± 3301.285  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybeTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybeTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 95942.121 ops/s
# Warmup Iteration   2: 435555.652 ops/s
# Warmup Iteration   3: 499635.178 ops/s
# Warmup Iteration   4: 493649.656 ops/s
# Warmup Iteration   5: 519659.960 ops/s
# Warmup Iteration   6: 513006.715 ops/s
# Warmup Iteration   7: 506569.979 ops/s
# Warmup Iteration   8: 510473.505 ops/s
# Warmup Iteration   9: 487503.459 ops/s
# Warmup Iteration  10: 496685.331 ops/s
# Warmup Iteration  11: 502147.595 ops/s
# Warmup Iteration  12: 502104.926 ops/s
# Warmup Iteration  13: 511562.177 ops/s
# Warmup Iteration  14: 516300.385 ops/s
# Warmup Iteration  15: 508383.953 ops/s
# Warmup Iteration  16: 519853.438 ops/s
# Warmup Iteration  17: 528687.226 ops/s
# Warmup Iteration  18: 541349.110 ops/s
# Warmup Iteration  19: 517691.196 ops/s
# Warmup Iteration  20: 538382.909 ops/s
# Warmup Iteration  21: 532523.344 ops/s
# Warmup Iteration  22: 516562.729 ops/s
# Warmup Iteration  23: 537946.876 ops/s
# Warmup Iteration  24: 514676.342 ops/s
# Warmup Iteration  25: 533400.375 ops/s
# Warmup Iteration  26: 537225.571 ops/s
# Warmup Iteration  27: 530895.213 ops/s
# Warmup Iteration  28: 539909.328 ops/s
# Warmup Iteration  29: 522003.509 ops/s
# Warmup Iteration  30: 545635.125 ops/s
Iteration   1: 521656.492 ops/s
Iteration   2: 550545.938 ops/s
Iteration   3: 540803.712 ops/s
Iteration   4: 507429.790 ops/s
Iteration   5: 549355.038 ops/s
Iteration   6: 515685.673 ops/s
Iteration   7: 542424.570 ops/s
Iteration   8: 545393.679 ops/s
Iteration   9: 517447.403 ops/s
Iteration  10: 542070.140 ops/s
Iteration  11: 542657.514 ops/s
Iteration  12: 525111.625 ops/s
Iteration  13: 547408.888 ops/s
Iteration  14: 534278.095 ops/s
Iteration  15: 532682.740 ops/s
Iteration  16: 537572.876 ops/s
Iteration  17: 531466.143 ops/s
Iteration  18: 530338.019 ops/s
Iteration  19: 538738.070 ops/s
Iteration  20: 537091.700 ops/s
Iteration  21: 527170.314 ops/s
Iteration  22: 519516.420 ops/s
Iteration  23: 536511.299 ops/s
Iteration  24: 526411.762 ops/s
Iteration  25: 562412.716 ops/s
Iteration  26: 516865.236 ops/s
Iteration  27: 530012.221 ops/s
Iteration  28: 529043.747 ops/s
Iteration  29: 536401.274 ops/s
Iteration  30: 566787.670 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybeTest._Benchmark.benchmark_doubleOnSubscribe":
  534709.692 ±(99.9%) 8961.105 ops/s [Average]
  (min, avg, max) = (507429.790, 534709.692, 566787.670), stdev = 13412.562
  CI (99.9%): [525748.587, 543670.798] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score      Error  Units
FlowableSwitchMapMaybeTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  534709.692 ± 8961.105  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingleTest._Benchmark.benchmark_undeliverableUponCancelDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingleTest._Benchmark.benchmark_undeliverableUponCancelDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 33844.917 ops/s
# Warmup Iteration   2: 139891.809 ops/s
# Warmup Iteration   3: 172390.388 ops/s
# Warmup Iteration   4: 169842.868 ops/s
# Warmup Iteration   5: 184052.183 ops/s
# Warmup Iteration   6: 173143.607 ops/s
# Warmup Iteration   7: 167867.651 ops/s
# Warmup Iteration   8: 183388.755 ops/s
# Warmup Iteration   9: 171360.610 ops/s
# Warmup Iteration  10: 169316.767 ops/s
# Warmup Iteration  11: 171412.356 ops/s
# Warmup Iteration  12: 170082.743 ops/s
# Warmup Iteration  13: 177429.168 ops/s
# Warmup Iteration  14: 144290.628 ops/s
# Warmup Iteration  15: 183082.589 ops/s
# Warmup Iteration  16: 170384.932 ops/s
# Warmup Iteration  17: 191889.547 ops/s
# Warmup Iteration  18: 193358.317 ops/s
# Warmup Iteration  19: 189469.230 ops/s
# Warmup Iteration  20: 187552.858 ops/s
# Warmup Iteration  21: 196022.311 ops/s
# Warmup Iteration  22: 194966.244 ops/s
# Warmup Iteration  23: 183958.542 ops/s
# Warmup Iteration  24: 191168.492 ops/s
# Warmup Iteration  25: 187699.865 ops/s
# Warmup Iteration  26: 189712.206 ops/s
# Warmup Iteration  27: 191228.961 ops/s
# Warmup Iteration  28: 187149.300 ops/s
# Warmup Iteration  29: 192621.939 ops/s
# Warmup Iteration  30: 175601.457 ops/s
Iteration   1: 193422.755 ops/s
Iteration   2: 188213.394 ops/s
Iteration   3: 191814.445 ops/s
Iteration   4: 193008.139 ops/s
Iteration   5: 190020.402 ops/s
Iteration   6: 192728.532 ops/s
Iteration   7: 185390.229 ops/s
Iteration   8: 196350.580 ops/s
Iteration   9: 187830.437 ops/s
Iteration  10: 191939.438 ops/s
Iteration  11: 192950.657 ops/s
Iteration  12: 185585.843 ops/s
Iteration  13: 187271.375 ops/s
Iteration  14: 190669.165 ops/s
Iteration  15: 190920.320 ops/s
Iteration  16: 195275.171 ops/s
Iteration  17: 191094.674 ops/s
Iteration  18: 193599.081 ops/s
Iteration  19: 188970.915 ops/s
Iteration  20: 201080.520 ops/s
Iteration  21: 191985.946 ops/s
Iteration  22: 183584.529 ops/s
Iteration  23: 196900.327 ops/s
Iteration  24: 186339.882 ops/s
Iteration  25: 193514.735 ops/s
Iteration  26: 189275.477 ops/s
Iteration  27: 191454.089 ops/s
Iteration  28: 198170.933 ops/s
Iteration  29: 189017.842 ops/s
Iteration  30: 192732.063 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingleTest._Benchmark.benchmark_undeliverableUponCancelDelayError":
  191370.397 ±(99.9%) 2624.354 ops/s [Average]
  (min, avg, max) = (183584.529, 191370.397, 201080.520), stdev = 3928.010
  CI (99.9%): [188746.043, 193994.750] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            Mode  Cnt       Score      Error  Units
FlowableSwitchMapSingleTest._Benchmark.benchmark_undeliverableUponCancelDelayError  thrpt   30  191370.397 ± 2624.354  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybeTest._Benchmark.benchmark_onNextSlowPath$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybeTest._Benchmark.benchmark_onNextSlowPath

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 129004.682 ops/s
# Warmup Iteration   2: 563225.439 ops/s
# Warmup Iteration   3: 1062989.665 ops/s
# Warmup Iteration   4: 1416314.494 ops/s
# Warmup Iteration   5: 1497507.029 ops/s
# Warmup Iteration   6: 1368479.681 ops/s
# Warmup Iteration   7: 1443253.554 ops/s
# Warmup Iteration   8: 1394932.201 ops/s
# Warmup Iteration   9: 1396028.822 ops/s
# Warmup Iteration  10: 1390420.410 ops/s
# Warmup Iteration  11: 1388446.981 ops/s
# Warmup Iteration  12: 1439382.157 ops/s
# Warmup Iteration  13: 1384891.138 ops/s
# Warmup Iteration  14: 1430147.666 ops/s
# Warmup Iteration  15: 1418588.887 ops/s
# Warmup Iteration  16: 1425541.968 ops/s
# Warmup Iteration  17: 1439202.214 ops/s
# Warmup Iteration  18: 1400686.778 ops/s
# Warmup Iteration  19: 1441470.499 ops/s
# Warmup Iteration  20: 1384736.298 ops/s
# Warmup Iteration  21: 1444028.087 ops/s
# Warmup Iteration  22: 1402295.737 ops/s
# Warmup Iteration  23: 1416804.898 ops/s
# Warmup Iteration  24: 1428880.942 ops/s
# Warmup Iteration  25: 1385712.130 ops/s
# Warmup Iteration  26: 1454689.590 ops/s
# Warmup Iteration  27: 1482999.131 ops/s
# Warmup Iteration  28: 1406111.106 ops/s
# Warmup Iteration  29: 1390099.980 ops/s
# Warmup Iteration  30: 1476984.142 ops/s
Iteration   1: 1399911.748 ops/s
Iteration   2: 1418055.559 ops/s
Iteration   3: 1412041.567 ops/s
Iteration   4: 1459173.686 ops/s
Iteration   5: 1410041.740 ops/s
Iteration   6: 1386313.506 ops/s
Iteration   7: 1476362.837 ops/s
Iteration   8: 1423483.489 ops/s
Iteration   9: 1451047.412 ops/s
Iteration  10: 1402380.120 ops/s
Iteration  11: 1432130.480 ops/s
Iteration  12: 1418497.309 ops/s
Iteration  13: 1415522.420 ops/s
Iteration  14: 1488996.283 ops/s
Iteration  15: 1372824.237 ops/s
Iteration  16: 1421637.351 ops/s
Iteration  17: 1496593.180 ops/s
Iteration  18: 1398394.547 ops/s
Iteration  19: 1458434.509 ops/s
Iteration  20: 1478411.813 ops/s
Iteration  21: 1350018.183 ops/s
Iteration  22: 1459530.485 ops/s
Iteration  23: 1361579.634 ops/s
Iteration  24: 1480217.476 ops/s
Iteration  25: 1400355.198 ops/s
Iteration  26: 1490353.432 ops/s
Iteration  27: 1469144.615 ops/s
Iteration  28: 1400544.395 ops/s
Iteration  29: 1398295.885 ops/s
Iteration  30: 1429555.479 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybeTest._Benchmark.benchmark_onNextSlowPath":
  1428661.619 ±(99.9%) 26615.791 ops/s [Average]
  (min, avg, max) = (1350018.183, 1428661.619, 1496593.180), stdev = 39837.266
  CI (99.9%): [1402045.828, 1455277.410] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
FlowableMergeWithMaybeTest._Benchmark.benchmark_onNextSlowPath  thrpt   30  1428661.619 ± 26615.791  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithFlowableTest._Benchmark.benchmark_boundaryDirectSecondMissingBackpressure$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithFlowableTest._Benchmark.benchmark_boundaryDirectSecondMissingBackpressure

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 45339.179 ops/s
# Warmup Iteration   2: 109677.040 ops/s
# Warmup Iteration   3: 303862.141 ops/s
# Warmup Iteration   4: 332148.147 ops/s
# Warmup Iteration   5: 351989.263 ops/s
# Warmup Iteration   6: 345157.212 ops/s
# Warmup Iteration   7: 341172.485 ops/s
# Warmup Iteration   8: 348844.639 ops/s
# Warmup Iteration   9: 256425.260 ops/s
# Warmup Iteration  10: 328343.525 ops/s
# Warmup Iteration  11: 365772.947 ops/s
# Warmup Iteration  12: 338581.795 ops/s
# Warmup Iteration  13: 366136.579 ops/s
# Warmup Iteration  14: 345402.041 ops/s
# Warmup Iteration  15: 350280.411 ops/s
# Warmup Iteration  16: 348069.769 ops/s
# Warmup Iteration  17: 355536.425 ops/s
# Warmup Iteration  18: 352072.056 ops/s
# Warmup Iteration  19: 373112.247 ops/s
# Warmup Iteration  20: 354935.469 ops/s
# Warmup Iteration  21: 370461.835 ops/s
# Warmup Iteration  22: 365724.692 ops/s
# Warmup Iteration  23: 348952.274 ops/s
# Warmup Iteration  24: 365137.701 ops/s
# Warmup Iteration  25: 346517.492 ops/s
# Warmup Iteration  26: 368650.713 ops/s
# Warmup Iteration  27: 368615.195 ops/s
# Warmup Iteration  28: 349915.285 ops/s
# Warmup Iteration  29: 354865.534 ops/s
# Warmup Iteration  30: 352184.404 ops/s
Iteration   1: 356146.740 ops/s
Iteration   2: 370564.583 ops/s
Iteration   3: 366803.225 ops/s
Iteration   4: 349412.320 ops/s
Iteration   5: 376525.999 ops/s
Iteration   6: 351235.518 ops/s
Iteration   7: 363277.986 ops/s
Iteration   8: 348854.920 ops/s
Iteration   9: 359636.782 ops/s
Iteration  10: 363154.998 ops/s
Iteration  11: 349563.438 ops/s
Iteration  12: 363858.744 ops/s
Iteration  13: 350137.223 ops/s
Iteration  14: 362549.633 ops/s
Iteration  15: 359177.421 ops/s
Iteration  16: 343704.047 ops/s
Iteration  17: 372830.722 ops/s
Iteration  18: 363639.175 ops/s
Iteration  19: 371804.147 ops/s
Iteration  20: 376314.304 ops/s
Iteration  21: 354452.399 ops/s
Iteration  22: 370973.646 ops/s
Iteration  23: 360367.816 ops/s
Iteration  24: 372824.020 ops/s
Iteration  25: 363704.200 ops/s
Iteration  26: 360072.271 ops/s
Iteration  27: 360723.694 ops/s
Iteration  28: 361867.737 ops/s
Iteration  29: 348380.575 ops/s
Iteration  30: 370597.547 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithFlowableTest._Benchmark.benchmark_boundaryDirectSecondMissingBackpressure":
  361438.528 ±(99.9%) 6047.170 ops/s [Average]
  (min, avg, max) = (343704.047, 361438.528, 376525.999), stdev = 9051.121
  CI (99.9%): [355391.357, 367485.698] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                     Mode  Cnt       Score      Error  Units
FlowableWindowWithFlowableTest._Benchmark.benchmark_boundaryDirectSecondMissingBackpressure  thrpt   30  361438.528 ± 6047.170  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycleTest._Benchmark.benchmark_cancelCrashed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycleTest._Benchmark.benchmark_cancelCrashed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 31655.497 ops/s
# Warmup Iteration   2: 151172.348 ops/s
# Warmup Iteration   3: 164297.812 ops/s
# Warmup Iteration   4: 164737.527 ops/s
# Warmup Iteration   5: 180299.519 ops/s
# Warmup Iteration   6: 189228.421 ops/s
# Warmup Iteration   7: 182912.856 ops/s
# Warmup Iteration   8: 193859.681 ops/s
# Warmup Iteration   9: 190708.339 ops/s
# Warmup Iteration  10: 180082.218 ops/s
# Warmup Iteration  11: 186129.056 ops/s
# Warmup Iteration  12: 185738.304 ops/s
# Warmup Iteration  13: 189718.779 ops/s
# Warmup Iteration  14: 187089.917 ops/s
# Warmup Iteration  15: 185801.299 ops/s
# Warmup Iteration  16: 188578.019 ops/s
# Warmup Iteration  17: 187053.858 ops/s
# Warmup Iteration  18: 197891.337 ops/s
# Warmup Iteration  19: 187270.683 ops/s
# Warmup Iteration  20: 192429.040 ops/s
# Warmup Iteration  21: 189435.675 ops/s
# Warmup Iteration  22: 194432.061 ops/s
# Warmup Iteration  23: 198814.961 ops/s
# Warmup Iteration  24: 197349.051 ops/s
# Warmup Iteration  25: 185977.070 ops/s
# Warmup Iteration  26: 196951.087 ops/s
# Warmup Iteration  27: 185898.229 ops/s
# Warmup Iteration  28: 196816.463 ops/s
# Warmup Iteration  29: 191938.337 ops/s
# Warmup Iteration  30: 185712.211 ops/s
Iteration   1: 195233.196 ops/s
Iteration   2: 188853.552 ops/s
Iteration   3: 187002.180 ops/s
Iteration   4: 197947.401 ops/s
Iteration   5: 196366.394 ops/s
Iteration   6: 185215.404 ops/s
Iteration   7: 198285.101 ops/s
Iteration   8: 193027.033 ops/s
Iteration   9: 197347.035 ops/s
Iteration  10: 183606.462 ops/s
Iteration  11: 198433.955 ops/s
Iteration  12: 189301.801 ops/s
Iteration  13: 195265.243 ops/s
Iteration  14: 198558.640 ops/s
Iteration  15: 184803.043 ops/s
Iteration  16: 195817.760 ops/s
Iteration  17: 192154.566 ops/s
Iteration  18: 188001.356 ops/s
Iteration  19: 195044.914 ops/s
Iteration  20: 188004.875 ops/s
Iteration  21: 197230.433 ops/s
Iteration  22: 190217.300 ops/s
Iteration  23: 190197.725 ops/s
Iteration  24: 189782.759 ops/s
Iteration  25: 195126.101 ops/s
Iteration  26: 192387.213 ops/s
Iteration  27: 190963.683 ops/s
Iteration  28: 190421.875 ops/s
Iteration  29: 190158.228 ops/s
Iteration  30: 197383.272 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycleTest._Benchmark.benchmark_cancelCrashed":
  192404.617 ±(99.9%) 2975.029 ops/s [Average]
  (min, avg, max) = (183606.462, 192404.617, 198558.640), stdev = 4452.883
  CI (99.9%): [189429.588, 195379.645] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
FlowableDoOnLifecycleTest._Benchmark.benchmark_cancelCrashed  thrpt   30  192404.617 ± 2975.029  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_combineLatestDelayErrorArrayOfSourcesWithError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_combineLatestDelayErrorArrayOfSourcesWithError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 33012.676 ops/s
# Warmup Iteration   2: 119373.539 ops/s
# Warmup Iteration   3: 171568.316 ops/s
# Warmup Iteration   4: 335889.472 ops/s
# Warmup Iteration   5: 393501.751 ops/s
# Warmup Iteration   6: 387344.022 ops/s
# Warmup Iteration   7: 408455.260 ops/s
# Warmup Iteration   8: 408867.549 ops/s
# Warmup Iteration   9: 415947.409 ops/s
# Warmup Iteration  10: 404303.441 ops/s
# Warmup Iteration  11: 413749.290 ops/s
# Warmup Iteration  12: 429972.244 ops/s
# Warmup Iteration  13: 400327.543 ops/s
# Warmup Iteration  14: 437047.662 ops/s
# Warmup Iteration  15: 400918.279 ops/s
# Warmup Iteration  16: 413400.252 ops/s
# Warmup Iteration  17: 429187.930 ops/s
# Warmup Iteration  18: 432278.152 ops/s
# Warmup Iteration  19: 431166.763 ops/s
# Warmup Iteration  20: 413874.981 ops/s
# Warmup Iteration  21: 436781.691 ops/s
# Warmup Iteration  22: 422825.132 ops/s
# Warmup Iteration  23: 427183.389 ops/s
# Warmup Iteration  24: 439033.764 ops/s
# Warmup Iteration  25: 409472.036 ops/s
# Warmup Iteration  26: 431841.089 ops/s
# Warmup Iteration  27: 428932.532 ops/s
# Warmup Iteration  28: 424642.740 ops/s
# Warmup Iteration  29: 442628.795 ops/s
# Warmup Iteration  30: 419569.540 ops/s
Iteration   1: 439354.557 ops/s
Iteration   2: 426050.267 ops/s
Iteration   3: 442336.399 ops/s
Iteration   4: 412400.251 ops/s
Iteration   5: 419418.606 ops/s
Iteration   6: 450733.994 ops/s
Iteration   7: 418661.104 ops/s
Iteration   8: 434698.068 ops/s
Iteration   9: 435161.805 ops/s
Iteration  10: 425620.839 ops/s
Iteration  11: 438247.527 ops/s
Iteration  12: 410708.459 ops/s
Iteration  13: 425080.887 ops/s
Iteration  14: 430232.008 ops/s
Iteration  15: 413929.869 ops/s
Iteration  16: 443207.599 ops/s
Iteration  17: 414776.840 ops/s
Iteration  18: 441613.041 ops/s
Iteration  19: 429506.461 ops/s
Iteration  20: 416264.012 ops/s
Iteration  21: 441541.613 ops/s
Iteration  22: 423125.451 ops/s
Iteration  23: 438446.490 ops/s
Iteration  24: 415262.068 ops/s
Iteration  25: 423658.420 ops/s
Iteration  26: 431744.661 ops/s
Iteration  27: 416147.618 ops/s
Iteration  28: 431444.233 ops/s
Iteration  29: 417162.546 ops/s
Iteration  30: 416709.289 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_combineLatestDelayErrorArrayOfSourcesWithError":
  427441.499 ±(99.9%) 7451.518 ops/s [Average]
  (min, avg, max) = (410708.459, 427441.499, 450733.994), stdev = 11153.083
  CI (99.9%): [419989.981, 434893.018] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                       Mode  Cnt       Score      Error  Units
FlowableCombineLatestTest._Benchmark.benchmark_combineLatestDelayErrorArrayOfSourcesWithError  thrpt   30  427441.499 ± 7451.518  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableAnyTest._Benchmark.benchmark_backpressureIfNoneRequestedNoneShouldBeDeliveredFlowable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableAnyTest._Benchmark.benchmark_backpressureIfNoneRequestedNoneShouldBeDeliveredFlowable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1434473.330 ops/s
# Warmup Iteration   2: 4545697.068 ops/s
# Warmup Iteration   3: 6671184.546 ops/s
# Warmup Iteration   4: 6566852.199 ops/s
# Warmup Iteration   5: 6420506.724 ops/s
# Warmup Iteration   6: 6593461.189 ops/s
# Warmup Iteration   7: 6546930.066 ops/s
# Warmup Iteration   8: 6706246.330 ops/s
# Warmup Iteration   9: 6692257.378 ops/s
# Warmup Iteration  10: 6571436.352 ops/s
# Warmup Iteration  11: 6636183.893 ops/s
# Warmup Iteration  12: 6440298.747 ops/s
# Warmup Iteration  13: 6640845.131 ops/s
# Warmup Iteration  14: 6640964.036 ops/s
# Warmup Iteration  15: 6547463.573 ops/s
# Warmup Iteration  16: 6539206.974 ops/s
# Warmup Iteration  17: 6338673.340 ops/s
# Warmup Iteration  18: 6713184.847 ops/s
# Warmup Iteration  19: 6457763.959 ops/s
# Warmup Iteration  20: 6577415.142 ops/s
# Warmup Iteration  21: 6496552.399 ops/s
# Warmup Iteration  22: 6734022.599 ops/s
# Warmup Iteration  23: 6607415.779 ops/s
# Warmup Iteration  24: 6378531.527 ops/s
# Warmup Iteration  25: 6596700.607 ops/s
# Warmup Iteration  26: 6441073.717 ops/s
# Warmup Iteration  27: 6607485.630 ops/s
# Warmup Iteration  28: 6508533.665 ops/s
# Warmup Iteration  29: 6382099.657 ops/s
# Warmup Iteration  30: 6558897.669 ops/s
Iteration   1: 6751538.282 ops/s
Iteration   2: 6171003.469 ops/s
Iteration   3: 6716765.312 ops/s
Iteration   4: 6219665.518 ops/s
Iteration   5: 6580081.179 ops/s
Iteration   6: 6211780.284 ops/s
Iteration   7: 6580905.093 ops/s
Iteration   8: 6531767.226 ops/s
Iteration   9: 6574259.171 ops/s
Iteration  10: 6588849.928 ops/s
Iteration  11: 6444380.361 ops/s
Iteration  12: 6603790.696 ops/s
Iteration  13: 6329158.543 ops/s
Iteration  14: 6278059.080 ops/s
Iteration  15: 6573306.775 ops/s
Iteration  16: 6065791.574 ops/s
Iteration  17: 6575833.093 ops/s
Iteration  18: 6867754.282 ops/s
Iteration  19: 6352999.086 ops/s
Iteration  20: 6593755.282 ops/s
Iteration  21: 6453471.395 ops/s
Iteration  22: 6856294.343 ops/s
Iteration  23: 6539275.001 ops/s
Iteration  24: 6567896.838 ops/s
Iteration  25: 6747861.478 ops/s
Iteration  26: 6413253.477 ops/s
Iteration  27: 6656809.502 ops/s
Iteration  28: 6480226.482 ops/s
Iteration  29: 6353172.151 ops/s
Iteration  30: 5562612.571 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableAnyTest._Benchmark.benchmark_backpressureIfNoneRequestedNoneShouldBeDeliveredFlowable":
  6474743.916 ±(99.9%) 174375.642 ops/s [Average]
  (min, avg, max) = (5562612.571, 6474743.916, 6867754.282), stdev = 260997.272
  CI (99.9%): [6300368.273, 6649119.558] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                       Mode  Cnt        Score        Error  Units
FlowableAnyTest._Benchmark.benchmark_backpressureIfNoneRequestedNoneShouldBeDeliveredFlowable  thrpt   30  6474743.916 ± 174375.642  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipLastTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipLastTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1506238.321 ops/s
# Warmup Iteration   2: 5166332.144 ops/s
# Warmup Iteration   3: 7110515.871 ops/s
# Warmup Iteration   4: 6563633.132 ops/s
# Warmup Iteration   5: 6900782.777 ops/s
# Warmup Iteration   6: 6600548.038 ops/s
# Warmup Iteration   7: 7199499.361 ops/s
# Warmup Iteration   8: 6984771.084 ops/s
# Warmup Iteration   9: 6608907.361 ops/s
# Warmup Iteration  10: 7015445.501 ops/s
# Warmup Iteration  11: 6546032.463 ops/s
# Warmup Iteration  12: 6979179.510 ops/s
# Warmup Iteration  13: 6971243.177 ops/s
# Warmup Iteration  14: 6673289.488 ops/s
# Warmup Iteration  15: 7054781.796 ops/s
# Warmup Iteration  16: 6771277.698 ops/s
# Warmup Iteration  17: 6643710.297 ops/s
# Warmup Iteration  18: 7087351.981 ops/s
# Warmup Iteration  19: 6805178.086 ops/s
# Warmup Iteration  20: 6993019.539 ops/s
# Warmup Iteration  21: 6775100.821 ops/s
# Warmup Iteration  22: 6723601.939 ops/s
# Warmup Iteration  23: 6957763.284 ops/s
# Warmup Iteration  24: 6744681.386 ops/s
# Warmup Iteration  25: 7000311.416 ops/s
# Warmup Iteration  26: 6743250.084 ops/s
# Warmup Iteration  27: 6743380.019 ops/s
# Warmup Iteration  28: 6989407.567 ops/s
# Warmup Iteration  29: 6837605.670 ops/s
# Warmup Iteration  30: 6968983.833 ops/s
Iteration   1: 6735729.716 ops/s
Iteration   2: 6849169.833 ops/s
Iteration   3: 7029643.992 ops/s
Iteration   4: 6593185.597 ops/s
Iteration   5: 6979128.282 ops/s
Iteration   6: 6688805.108 ops/s
Iteration   7: 6831060.670 ops/s
Iteration   8: 7097756.455 ops/s
Iteration   9: 6682446.432 ops/s
Iteration  10: 7112850.440 ops/s
Iteration  11: 6862368.575 ops/s
Iteration  12: 6703350.203 ops/s
Iteration  13: 7159381.421 ops/s
Iteration  14: 6621727.546 ops/s
Iteration  15: 6647092.124 ops/s
Iteration  16: 6929469.475 ops/s
Iteration  17: 6699217.298 ops/s
Iteration  18: 6710839.073 ops/s
Iteration  19: 7083446.193 ops/s
Iteration  20: 6782147.172 ops/s
Iteration  21: 6992865.464 ops/s
Iteration  22: 6790422.455 ops/s
Iteration  23: 6790073.304 ops/s
Iteration  24: 6997900.723 ops/s
Iteration  25: 6746535.120 ops/s
Iteration  26: 6881174.836 ops/s
Iteration  27: 6810200.725 ops/s
Iteration  28: 6732652.364 ops/s
Iteration  29: 7000825.479 ops/s
Iteration  30: 6796406.353 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipLastTest._Benchmark.benchmark_dispose":
  6844595.748 ±(99.9%) 106162.888 ops/s [Average]
  (min, avg, max) = (6593185.597, 6844595.748, 7159381.421), stdev = 158899.625
  CI (99.9%): [6738432.860, 6950758.636] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score        Error  Units
FlowableSkipLastTest._Benchmark.benchmark_dispose  thrpt   30  6844595.748 ± 106162.888  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMaterializeTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMaterializeTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2072808.724 ops/s
# Warmup Iteration   2: 5277848.748 ops/s
# Warmup Iteration   3: 7090652.629 ops/s
# Warmup Iteration   4: 6979788.480 ops/s
# Warmup Iteration   5: 7183898.077 ops/s
# Warmup Iteration   6: 6794077.773 ops/s
# Warmup Iteration   7: 6938160.654 ops/s
# Warmup Iteration   8: 7015759.413 ops/s
# Warmup Iteration   9: 7289739.720 ops/s
# Warmup Iteration  10: 7106399.962 ops/s
# Warmup Iteration  11: 6915691.755 ops/s
# Warmup Iteration  12: 7142646.879 ops/s
# Warmup Iteration  13: 6903942.281 ops/s
# Warmup Iteration  14: 7123596.369 ops/s
# Warmup Iteration  15: 7164342.854 ops/s
# Warmup Iteration  16: 7066233.230 ops/s
# Warmup Iteration  17: 7185754.843 ops/s
# Warmup Iteration  18: 6860726.855 ops/s
# Warmup Iteration  19: 7404702.728 ops/s
# Warmup Iteration  20: 6823134.089 ops/s
# Warmup Iteration  21: 7153462.347 ops/s
# Warmup Iteration  22: 6962472.093 ops/s
# Warmup Iteration  23: 6921172.969 ops/s
# Warmup Iteration  24: 7226986.788 ops/s
# Warmup Iteration  25: 7080518.448 ops/s
# Warmup Iteration  26: 7168751.532 ops/s
# Warmup Iteration  27: 7157401.133 ops/s
# Warmup Iteration  28: 7112364.796 ops/s
# Warmup Iteration  29: 7260906.612 ops/s
# Warmup Iteration  30: 6909900.867 ops/s
Iteration   1: 7217502.977 ops/s
Iteration   2: 6954871.235 ops/s
Iteration   3: 7019923.252 ops/s
Iteration   4: 7287150.105 ops/s
Iteration   5: 6918549.516 ops/s
Iteration   6: 7183194.129 ops/s
Iteration   7: 7192249.798 ops/s
Iteration   8: 6937726.579 ops/s
Iteration   9: 7277142.847 ops/s
Iteration  10: 6936897.512 ops/s
Iteration  11: 7242039.961 ops/s
Iteration  12: 6890811.482 ops/s
Iteration  13: 7038079.122 ops/s
Iteration  14: 7186536.794 ops/s
Iteration  15: 6988408.788 ops/s
Iteration  16: 6895743.745 ops/s
Iteration  17: 7223840.362 ops/s
Iteration  18: 6994703.336 ops/s
Iteration  19: 7269793.818 ops/s
Iteration  20: 7329471.571 ops/s
Iteration  21: 6876763.574 ops/s
Iteration  22: 7236327.316 ops/s
Iteration  23: 7046090.257 ops/s
Iteration  24: 7249661.799 ops/s
Iteration  25: 6519974.387 ops/s
Iteration  26: 6140994.781 ops/s
Iteration  27: 7327718.246 ops/s
Iteration  28: 6845560.126 ops/s
Iteration  29: 7286221.966 ops/s
Iteration  30: 6829166.960 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableMaterializeTest._Benchmark.benchmark_dispose":
  7044770.545 ±(99.9%) 172325.081 ops/s [Average]
  (min, avg, max) = (6140994.781, 7044770.545, 7329471.571), stdev = 257928.089
  CI (99.9%): [6872445.463, 7217095.626] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score        Error  Units
FlowableMaterializeTest._Benchmark.benchmark_dispose  thrpt   30  7044770.545 ± 172325.081  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.subscribers.BlockingSubscriberTest._Benchmark.benchmark_cancelOnRequest$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.subscribers.BlockingSubscriberTest._Benchmark.benchmark_cancelOnRequest

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 8050836.099 ops/s
# Warmup Iteration   2: 10082624.937 ops/s
# Warmup Iteration   3: 14124330.598 ops/s
# Warmup Iteration   4: 14246546.673 ops/s
# Warmup Iteration   5: 14580797.942 ops/s
# Warmup Iteration   6: 14870799.130 ops/s
# Warmup Iteration   7: 13860522.768 ops/s
# Warmup Iteration   8: 14422332.325 ops/s
# Warmup Iteration   9: 14469774.340 ops/s
# Warmup Iteration  10: 13848532.243 ops/s
# Warmup Iteration  11: 14263898.973 ops/s
# Warmup Iteration  12: 14359313.217 ops/s
# Warmup Iteration  13: 13814025.530 ops/s
# Warmup Iteration  14: 14527722.595 ops/s
# Warmup Iteration  15: 14221307.788 ops/s
# Warmup Iteration  16: 14524852.750 ops/s
# Warmup Iteration  17: 14954336.939 ops/s
# Warmup Iteration  18: 14514920.978 ops/s
# Warmup Iteration  19: 13957401.146 ops/s
# Warmup Iteration  20: 14732076.787 ops/s
# Warmup Iteration  21: 14592438.325 ops/s
# Warmup Iteration  22: 13613769.257 ops/s
# Warmup Iteration  23: 14323775.106 ops/s
# Warmup Iteration  24: 14407589.356 ops/s
# Warmup Iteration  25: 13871061.520 ops/s
# Warmup Iteration  26: 14328616.577 ops/s
# Warmup Iteration  27: 13979480.505 ops/s
# Warmup Iteration  28: 14883030.799 ops/s
# Warmup Iteration  29: 13936836.079 ops/s
# Warmup Iteration  30: 14053565.545 ops/s
Iteration   1: 14514329.209 ops/s
Iteration   2: 14233219.022 ops/s
Iteration   3: 14505108.470 ops/s
Iteration   4: 14180468.426 ops/s
Iteration   5: 14326969.469 ops/s
Iteration   6: 14202448.045 ops/s
Iteration   7: 14589131.278 ops/s
Iteration   8: 14248399.401 ops/s
Iteration   9: 14286137.047 ops/s
Iteration  10: 14634162.813 ops/s
Iteration  11: 14025506.509 ops/s
Iteration  12: 15178283.859 ops/s
Iteration  13: 13983714.826 ops/s
Iteration  14: 14521261.662 ops/s
Iteration  15: 14069844.842 ops/s
Iteration  16: 14358549.623 ops/s
Iteration  17: 14668184.795 ops/s
Iteration  18: 14033853.963 ops/s
Iteration  19: 14238075.862 ops/s
Iteration  20: 14658473.735 ops/s
Iteration  21: 14363194.676 ops/s
Iteration  22: 14433987.913 ops/s
Iteration  23: 14536168.275 ops/s
Iteration  24: 14492030.486 ops/s
Iteration  25: 14326703.767 ops/s
Iteration  26: 14393469.312 ops/s
Iteration  27: 14641214.084 ops/s
Iteration  28: 14051752.482 ops/s
Iteration  29: 14501816.960 ops/s
Iteration  30: 14338612.203 ops/s


Result "io.reactivex.rxjava3.internal.subscribers.BlockingSubscriberTest._Benchmark.benchmark_cancelOnRequest":
  14384502.434 ±(99.9%) 168110.735 ops/s [Average]
  (min, avg, max) = (13983714.826, 14384502.434, 15178283.859), stdev = 251620.254
  CI (99.9%): [14216391.698, 14552613.169] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score        Error  Units
BlockingSubscriberTest._Benchmark.benchmark_cancelOnRequest  thrpt   30  14384502.434 ± 168110.735  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableToCompletableTest._Benchmark.benchmark_shouldUseUnsafeSubscribeInternallyNotSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableToCompletableTest._Benchmark.benchmark_shouldUseUnsafeSubscribeInternallyNotSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 535501.734 ops/s
# Warmup Iteration   2: 3077044.822 ops/s
# Warmup Iteration   3: 5506780.752 ops/s
# Warmup Iteration   4: 5140788.119 ops/s
# Warmup Iteration   5: 4900713.298 ops/s
# Warmup Iteration   6: 5510402.067 ops/s
# Warmup Iteration   7: 5527035.624 ops/s
# Warmup Iteration   8: 5372973.666 ops/s
# Warmup Iteration   9: 5600517.500 ops/s
# Warmup Iteration  10: 5297850.377 ops/s
# Warmup Iteration  11: 5332292.089 ops/s
# Warmup Iteration  12: 5544189.959 ops/s
# Warmup Iteration  13: 5439019.053 ops/s
# Warmup Iteration  14: 5487730.862 ops/s
# Warmup Iteration  15: 5353016.266 ops/s
# Warmup Iteration  16: 5467519.477 ops/s
# Warmup Iteration  17: 5544080.012 ops/s
# Warmup Iteration  18: 5418430.462 ops/s
# Warmup Iteration  19: 5689549.778 ops/s
# Warmup Iteration  20: 5468627.267 ops/s
# Warmup Iteration  21: 5399143.470 ops/s
# Warmup Iteration  22: 5628567.730 ops/s
# Warmup Iteration  23: 5387115.907 ops/s
# Warmup Iteration  24: 5598112.081 ops/s
# Warmup Iteration  25: 5475932.958 ops/s
# Warmup Iteration  26: 5377964.527 ops/s
# Warmup Iteration  27: 5545876.039 ops/s
# Warmup Iteration  28: 5387220.260 ops/s
# Warmup Iteration  29: 5586972.109 ops/s
# Warmup Iteration  30: 5559154.373 ops/s
Iteration   1: 5458468.752 ops/s
Iteration   2: 5642826.141 ops/s
Iteration   3: 5376701.878 ops/s
Iteration   4: 5626334.976 ops/s
Iteration   5: 5464753.446 ops/s
Iteration   6: 5498097.171 ops/s
Iteration   7: 5576853.429 ops/s
Iteration   8: 5469311.901 ops/s
Iteration   9: 5624923.253 ops/s
Iteration  10: 5320385.072 ops/s
Iteration  11: 5672472.162 ops/s
Iteration  12: 5518075.119 ops/s
Iteration  13: 5402783.538 ops/s
Iteration  14: 5696730.552 ops/s
Iteration  15: 5567101.099 ops/s
Iteration  16: 5318815.582 ops/s
Iteration  17: 5580373.437 ops/s
Iteration  18: 5446287.033 ops/s
Iteration  19: 5331564.948 ops/s
Iteration  20: 4468255.360 ops/s
Iteration  21: 5570092.371 ops/s
Iteration  22: 5348060.596 ops/s
Iteration  23: 5529463.448 ops/s
Iteration  24: 5337902.841 ops/s
Iteration  25: 5547806.782 ops/s
Iteration  26: 5440393.227 ops/s
Iteration  27: 5437366.918 ops/s
Iteration  28: 5552285.531 ops/s
Iteration  29: 5378441.713 ops/s
Iteration  30: 5549673.780 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableToCompletableTest._Benchmark.benchmark_shouldUseUnsafeSubscribeInternallyNotSubscribe":
  5458420.069 ±(99.9%) 144685.690 ops/s [Average]
  (min, avg, max) = (4468255.360, 5458420.069, 5696730.552), stdev = 216558.745
  CI (99.9%): [5313734.379, 5603105.758] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                       Mode  Cnt        Score        Error  Units
FlowableToCompletableTest._Benchmark.benchmark_shouldUseUnsafeSubscribeInternallyNotSubscribe  thrpt   30  5458420.069 ± 144685.690  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableToSingleTest._Benchmark.benchmark_justSingleItemObservable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableToSingleTest._Benchmark.benchmark_justSingleItemObservable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 900299.891 ops/s
# Warmup Iteration   2: 3687035.616 ops/s
# Warmup Iteration   3: 4027132.355 ops/s
# Warmup Iteration   4: 4588026.785 ops/s
# Warmup Iteration   5: 4766719.453 ops/s
# Warmup Iteration   6: 4562754.867 ops/s
# Warmup Iteration   7: 4520598.433 ops/s
# Warmup Iteration   8: 4720519.394 ops/s
# Warmup Iteration   9: 4502830.371 ops/s
# Warmup Iteration  10: 4706344.077 ops/s
# Warmup Iteration  11: 4688616.556 ops/s
# Warmup Iteration  12: 4585397.734 ops/s
# Warmup Iteration  13: 4628503.232 ops/s
# Warmup Iteration  14: 4667302.575 ops/s
# Warmup Iteration  15: 4570215.282 ops/s
# Warmup Iteration  16: 4748110.076 ops/s
# Warmup Iteration  17: 4616918.747 ops/s
# Warmup Iteration  18: 4518193.632 ops/s
# Warmup Iteration  19: 4924335.668 ops/s
# Warmup Iteration  20: 4442823.326 ops/s
# Warmup Iteration  21: 4593382.224 ops/s
# Warmup Iteration  22: 4646400.575 ops/s
# Warmup Iteration  23: 4587395.757 ops/s
# Warmup Iteration  24: 4733223.132 ops/s
# Warmup Iteration  25: 4647523.497 ops/s
# Warmup Iteration  26: 4673675.490 ops/s
# Warmup Iteration  27: 4665277.761 ops/s
# Warmup Iteration  28: 4621377.302 ops/s
# Warmup Iteration  29: 4718357.185 ops/s
# Warmup Iteration  30: 4680961.941 ops/s
Iteration   1: 4695076.710 ops/s
Iteration   2: 4784209.960 ops/s
Iteration   3: 4659557.652 ops/s
Iteration   4: 4709857.037 ops/s
Iteration   5: 4514881.436 ops/s
Iteration   6: 4614564.978 ops/s
Iteration   7: 4769776.843 ops/s
Iteration   8: 4532155.995 ops/s
Iteration   9: 4924949.543 ops/s
Iteration  10: 4724811.864 ops/s
Iteration  11: 4533771.299 ops/s
Iteration  12: 4769913.882 ops/s
Iteration  13: 4605162.567 ops/s
Iteration  14: 4597929.344 ops/s
Iteration  15: 4650380.952 ops/s
Iteration  16: 4704626.936 ops/s
Iteration  17: 4549512.184 ops/s
Iteration  18: 4872089.556 ops/s
Iteration  19: 4492104.762 ops/s
Iteration  20: 4717353.891 ops/s
Iteration  21: 4555994.867 ops/s
Iteration  22: 4582372.939 ops/s
Iteration  23: 4669921.754 ops/s
Iteration  24: 4617749.666 ops/s
Iteration  25: 4856525.511 ops/s
Iteration  26: 4580544.473 ops/s
Iteration  27: 4857245.753 ops/s
Iteration  28: 4688782.105 ops/s
Iteration  29: 4523937.074 ops/s
Iteration  30: 4775224.137 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableToSingleTest._Benchmark.benchmark_justSingleItemObservable":
  4671032.856 ±(99.9%) 78683.606 ops/s [Average]
  (min, avg, max) = (4492104.762, 4671032.856, 4924949.543), stdev = 117769.927
  CI (99.9%): [4592349.249, 4749716.462] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
FlowableToSingleTest._Benchmark.benchmark_justSingleItemObservable  thrpt   30  4671032.856 ± 78683.606  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 524650.933 ops/s
# Warmup Iteration   2: 3494309.975 ops/s
# Warmup Iteration   3: 4199813.424 ops/s
# Warmup Iteration   4: 4850169.215 ops/s
# Warmup Iteration   5: 5128060.195 ops/s
# Warmup Iteration   6: 4827397.265 ops/s
# Warmup Iteration   7: 4705229.371 ops/s
# Warmup Iteration   8: 4987160.008 ops/s
# Warmup Iteration   9: 4817688.410 ops/s
# Warmup Iteration  10: 4906052.648 ops/s
# Warmup Iteration  11: 4815397.934 ops/s
# Warmup Iteration  12: 4675427.075 ops/s
# Warmup Iteration  13: 5018531.529 ops/s
# Warmup Iteration  14: 4755832.769 ops/s
# Warmup Iteration  15: 4853118.231 ops/s
# Warmup Iteration  16: 5007148.966 ops/s
# Warmup Iteration  17: 4686428.372 ops/s
# Warmup Iteration  18: 5035788.220 ops/s
# Warmup Iteration  19: 5028380.020 ops/s
# Warmup Iteration  20: 4707322.652 ops/s
# Warmup Iteration  21: 5003005.506 ops/s
# Warmup Iteration  22: 4895824.542 ops/s
# Warmup Iteration  23: 5032063.586 ops/s
# Warmup Iteration  24: 4774296.948 ops/s
# Warmup Iteration  25: 4665704.836 ops/s
# Warmup Iteration  26: 4944244.660 ops/s
# Warmup Iteration  27: 4857759.918 ops/s
# Warmup Iteration  28: 4922500.205 ops/s
# Warmup Iteration  29: 4784186.292 ops/s
# Warmup Iteration  30: 4860056.731 ops/s
Iteration   1: 4998864.255 ops/s
Iteration   2: 4803995.173 ops/s
Iteration   3: 5060527.758 ops/s
Iteration   4: 4833016.531 ops/s
Iteration   5: 4943268.495 ops/s
Iteration   6: 4936369.165 ops/s
Iteration   7: 4786112.410 ops/s
Iteration   8: 4985931.902 ops/s
Iteration   9: 4690823.106 ops/s
Iteration  10: 4823199.942 ops/s
Iteration  11: 4897468.045 ops/s
Iteration  12: 4893407.653 ops/s
Iteration  13: 4956105.118 ops/s
Iteration  14: 4908527.093 ops/s
Iteration  15: 3457748.373 ops/s
Iteration  16: 4902302.104 ops/s
Iteration  17: 4720664.170 ops/s
Iteration  18: 4859098.468 ops/s
Iteration  19: 5066022.351 ops/s
Iteration  20: 4934337.756 ops/s
Iteration  21: 5054163.873 ops/s
Iteration  22: 4718011.488 ops/s
Iteration  23: 5109079.288 ops/s
Iteration  24: 4914296.099 ops/s
Iteration  25: 5036076.481 ops/s
Iteration  26: 4746465.276 ops/s
Iteration  27: 4940384.202 ops/s
Iteration  28: 5100537.898 ops/s
Iteration  29: 4683221.011 ops/s
Iteration  30: 5056063.850 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsTest._Benchmark.benchmark_dispose":
  4860536.311 ±(99.9%) 195290.228 ops/s [Average]
  (min, avg, max) = (3457748.373, 4860536.311, 5109079.288), stdev = 292301.242
  CI (99.9%): [4665246.083, 5055826.539] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score        Error  Units
FlowableIgnoreElementsTest._Benchmark.benchmark_dispose  thrpt   30  4860536.311 ± 195290.228  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.subscribers.BlockingSubscriberTest._Benchmark.benchmark_blockingFirstTimeout2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.subscribers.BlockingSubscriberTest._Benchmark.benchmark_blockingFirstTimeout2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 208067.053 ops/s
# Warmup Iteration   2: 290494.322 ops/s
# Warmup Iteration   3: 323064.816 ops/s
# Warmup Iteration   4: 307402.302 ops/s
# Warmup Iteration   5: 356654.710 ops/s
# Warmup Iteration   6: 313143.504 ops/s
# Warmup Iteration   7: 317957.857 ops/s
# Warmup Iteration   8: 346612.469 ops/s
# Warmup Iteration   9: 337308.989 ops/s
# Warmup Iteration  10: 349580.227 ops/s
# Warmup Iteration  11: 339558.300 ops/s
# Warmup Iteration  12: 330056.535 ops/s
# Warmup Iteration  13: 353737.957 ops/s
# Warmup Iteration  14: 335421.230 ops/s
# Warmup Iteration  15: 347569.609 ops/s
# Warmup Iteration  16: 345862.208 ops/s
# Warmup Iteration  17: 356096.645 ops/s
# Warmup Iteration  18: 363844.680 ops/s
# Warmup Iteration  19: 359585.922 ops/s
# Warmup Iteration  20: 362516.370 ops/s
# Warmup Iteration  21: 359571.588 ops/s
# Warmup Iteration  22: 353034.698 ops/s
# Warmup Iteration  23: 373747.579 ops/s
# Warmup Iteration  24: 354197.582 ops/s
# Warmup Iteration  25: 371012.308 ops/s
# Warmup Iteration  26: 358994.164 ops/s
# Warmup Iteration  27: 361160.505 ops/s
# Warmup Iteration  28: 352620.702 ops/s
# Warmup Iteration  29: 362362.585 ops/s
# Warmup Iteration  30: 346533.235 ops/s
Iteration   1: 368321.912 ops/s
Iteration   2: 350999.454 ops/s
Iteration   3: 354456.131 ops/s
Iteration   4: 368914.441 ops/s
Iteration   5: 347821.312 ops/s
Iteration   6: 349624.360 ops/s
Iteration   7: 365889.706 ops/s
Iteration   8: 347019.275 ops/s
Iteration   9: 362008.447 ops/s
Iteration  10: 361652.673 ops/s
Iteration  11: 365193.684 ops/s
Iteration  12: 355897.347 ops/s
Iteration  13: 355533.739 ops/s
Iteration  14: 365969.586 ops/s
Iteration  15: 351227.575 ops/s
Iteration  16: 354355.002 ops/s
Iteration  17: 372037.610 ops/s
Iteration  18: 350881.841 ops/s
Iteration  19: 362749.049 ops/s
Iteration  20: 359617.567 ops/s
Iteration  21: 357445.175 ops/s
Iteration  22: 350501.104 ops/s
Iteration  23: 358411.928 ops/s
Iteration  24: 370357.240 ops/s
Iteration  25: 350253.974 ops/s
Iteration  26: 356087.493 ops/s
Iteration  27: 357075.153 ops/s
Iteration  28: 370307.288 ops/s
Iteration  29: 350414.428 ops/s
Iteration  30: 355032.583 ops/s


Result "io.reactivex.rxjava3.internal.subscribers.BlockingSubscriberTest._Benchmark.benchmark_blockingFirstTimeout2":
  358201.903 ±(99.9%) 4995.933 ops/s [Average]
  (min, avg, max) = (347019.275, 358201.903, 372037.610), stdev = 7477.678
  CI (99.9%): [353205.969, 363197.836] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score      Error  Units
BlockingSubscriberTest._Benchmark.benchmark_blockingFirstTimeout2  thrpt   30  358201.903 ± 4995.933  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.subscribers.BlockingSubscriberTest._Benchmark.benchmark_cancelUpfront$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.subscribers.BlockingSubscriberTest._Benchmark.benchmark_cancelUpfront

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 13998482.221 ops/s
# Warmup Iteration   2: 19660789.960 ops/s
# Warmup Iteration   3: 25341078.602 ops/s
# Warmup Iteration   4: 23764045.168 ops/s
# Warmup Iteration   5: 25391919.712 ops/s
# Warmup Iteration   6: 23699426.025 ops/s
# Warmup Iteration   7: 23273796.484 ops/s
# Warmup Iteration   8: 24746332.053 ops/s
# Warmup Iteration   9: 23908764.777 ops/s
# Warmup Iteration  10: 24751237.812 ops/s
# Warmup Iteration  11: 25459855.812 ops/s
# Warmup Iteration  12: 23847232.304 ops/s
# Warmup Iteration  13: 25045368.282 ops/s
# Warmup Iteration  14: 23844522.789 ops/s
# Warmup Iteration  15: 25073447.335 ops/s
# Warmup Iteration  16: 24413198.424 ops/s
# Warmup Iteration  17: 24462661.637 ops/s
# Warmup Iteration  18: 24179974.301 ops/s
# Warmup Iteration  19: 23738180.748 ops/s
# Warmup Iteration  20: 24789919.492 ops/s
# Warmup Iteration  21: 24219537.642 ops/s
# Warmup Iteration  22: 24387902.493 ops/s
# Warmup Iteration  23: 24305341.602 ops/s
# Warmup Iteration  24: 24201623.188 ops/s
# Warmup Iteration  25: 24223771.463 ops/s
# Warmup Iteration  26: 24537037.392 ops/s
# Warmup Iteration  27: 23996751.351 ops/s
# Warmup Iteration  28: 24539785.994 ops/s
# Warmup Iteration  29: 24738916.538 ops/s
# Warmup Iteration  30: 24339155.135 ops/s
Iteration   1: 24149341.731 ops/s
Iteration   2: 24633400.349 ops/s
Iteration   3: 24557455.744 ops/s
Iteration   4: 24001437.135 ops/s
Iteration   5: 24694009.383 ops/s
Iteration   6: 24455651.815 ops/s
Iteration   7: 23862113.485 ops/s
Iteration   8: 25244716.144 ops/s
Iteration   9: 24596969.539 ops/s
Iteration  10: 19424979.231 ops/s
Iteration  11: 24551179.180 ops/s
Iteration  12: 23666637.998 ops/s
Iteration  13: 24040973.765 ops/s
Iteration  14: 25280639.662 ops/s
Iteration  15: 25032411.742 ops/s
Iteration  16: 24331909.287 ops/s
Iteration  17: 23821809.952 ops/s
Iteration  18: 25196128.191 ops/s
Iteration  19: 23874469.248 ops/s
Iteration  20: 24997876.573 ops/s
Iteration  21: 24129538.356 ops/s
Iteration  22: 24370792.553 ops/s
Iteration  23: 24190171.589 ops/s
Iteration  24: 25334465.147 ops/s
Iteration  25: 24294363.428 ops/s
Iteration  26: 23990505.932 ops/s
Iteration  27: 24669929.233 ops/s
Iteration  28: 24093580.323 ops/s
Iteration  29: 25178617.565 ops/s
Iteration  30: 24860541.153 ops/s


Result "io.reactivex.rxjava3.internal.subscribers.BlockingSubscriberTest._Benchmark.benchmark_cancelUpfront":
  24317553.848 ±(99.9%) 697482.966 ops/s [Average]
  (min, avg, max) = (19424979.231, 24317553.848, 25334465.147), stdev = 1043959.747
  CI (99.9%): [23620070.882, 25015036.814] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score        Error  Units
BlockingSubscriberTest._Benchmark.benchmark_cancelUpfront  thrpt   30  24317553.848 ± 697482.966  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLongTest._Benchmark.benchmark_countOne$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLongTest._Benchmark.benchmark_countOne

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1584543.182 ops/s
# Warmup Iteration   2: 4370610.351 ops/s
# Warmup Iteration   3: 5887471.816 ops/s
# Warmup Iteration   4: 5610457.317 ops/s
# Warmup Iteration   5: 5916079.932 ops/s
# Warmup Iteration   6: 5755797.824 ops/s
# Warmup Iteration   7: 5707919.908 ops/s
# Warmup Iteration   8: 5950895.502 ops/s
# Warmup Iteration   9: 5713630.597 ops/s
# Warmup Iteration  10: 5836073.781 ops/s
# Warmup Iteration  11: 5744284.430 ops/s
# Warmup Iteration  12: 5782040.664 ops/s
# Warmup Iteration  13: 5871248.395 ops/s
# Warmup Iteration  14: 5734528.318 ops/s
# Warmup Iteration  15: 6025562.017 ops/s
# Warmup Iteration  16: 5783916.099 ops/s
# Warmup Iteration  17: 5970994.115 ops/s
# Warmup Iteration  18: 5906881.540 ops/s
# Warmup Iteration  19: 5737626.972 ops/s
# Warmup Iteration  20: 5989747.475 ops/s
# Warmup Iteration  21: 5783342.933 ops/s
# Warmup Iteration  22: 6004062.040 ops/s
# Warmup Iteration  23: 6124117.638 ops/s
# Warmup Iteration  24: 6023296.082 ops/s
# Warmup Iteration  25: 5725144.347 ops/s
# Warmup Iteration  26: 5850689.301 ops/s
# Warmup Iteration  27: 5917015.159 ops/s
# Warmup Iteration  28: 5711844.153 ops/s
# Warmup Iteration  29: 5836575.936 ops/s
# Warmup Iteration  30: 5762611.393 ops/s
Iteration   1: 5953352.714 ops/s
Iteration   2: 5686347.303 ops/s
Iteration   3: 6141531.473 ops/s
Iteration   4: 5851889.933 ops/s
Iteration   5: 5717717.081 ops/s
Iteration   6: 5862916.472 ops/s
Iteration   7: 5668243.382 ops/s
Iteration   8: 5978678.278 ops/s
Iteration   9: 5660214.388 ops/s
Iteration  10: 5925286.579 ops/s
Iteration  11: 6143349.073 ops/s
Iteration  12: 5835847.714 ops/s
Iteration  13: 6048706.361 ops/s
Iteration  14: 5655081.511 ops/s
Iteration  15: 5869308.872 ops/s
Iteration  16: 5851363.750 ops/s
Iteration  17: 5879326.462 ops/s
Iteration  18: 5938622.104 ops/s
Iteration  19: 5768711.381 ops/s
Iteration  20: 6039525.914 ops/s
Iteration  21: 5678383.038 ops/s
Iteration  22: 5866105.772 ops/s
Iteration  23: 5885827.905 ops/s
Iteration  24: 6014595.070 ops/s
Iteration  25: 5790679.315 ops/s
Iteration  26: 5848030.273 ops/s
Iteration  27: 6029364.702 ops/s
Iteration  28: 5993829.983 ops/s
Iteration  29: 5631099.352 ops/s
Iteration  30: 5941488.221 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLongTest._Benchmark.benchmark_countOne":
  5871847.479 ±(99.9%) 96355.706 ops/s [Average]
  (min, avg, max) = (5631099.352, 5871847.479, 6143349.073), stdev = 144220.695
  CI (99.9%): [5775491.773, 5968203.185] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score       Error  Units
FlowableRangeLongTest._Benchmark.benchmark_countOne  thrpt   30  5871847.479 ± 96355.706  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinallyTest._Benchmark.benchmark_normalJust$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinallyTest._Benchmark.benchmark_normalJust

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 966764.161 ops/s
# Warmup Iteration   2: 3386745.980 ops/s
# Warmup Iteration   3: 4443997.111 ops/s
# Warmup Iteration   4: 4438115.746 ops/s
# Warmup Iteration   5: 4329679.247 ops/s
# Warmup Iteration   6: 4450869.507 ops/s
# Warmup Iteration   7: 4587086.153 ops/s
# Warmup Iteration   8: 4265337.149 ops/s
# Warmup Iteration   9: 4372069.671 ops/s
# Warmup Iteration  10: 4193023.929 ops/s
# Warmup Iteration  11: 4405406.426 ops/s
# Warmup Iteration  12: 4416706.220 ops/s
# Warmup Iteration  13: 4554129.673 ops/s
# Warmup Iteration  14: 4433349.300 ops/s
# Warmup Iteration  15: 4469584.694 ops/s
# Warmup Iteration  16: 4288818.752 ops/s
# Warmup Iteration  17: 4551181.402 ops/s
# Warmup Iteration  18: 4511058.666 ops/s
# Warmup Iteration  19: 4552015.784 ops/s
# Warmup Iteration  20: 4438226.378 ops/s
# Warmup Iteration  21: 4524705.086 ops/s
# Warmup Iteration  22: 4446500.209 ops/s
# Warmup Iteration  23: 4470134.249 ops/s
# Warmup Iteration  24: 4559223.968 ops/s
# Warmup Iteration  25: 4543471.488 ops/s
# Warmup Iteration  26: 4389542.869 ops/s
# Warmup Iteration  27: 4534133.116 ops/s
# Warmup Iteration  28: 4503432.480 ops/s
# Warmup Iteration  29: 4608291.319 ops/s
# Warmup Iteration  30: 4395846.646 ops/s
Iteration   1: 4515135.651 ops/s
Iteration   2: 4547445.739 ops/s
Iteration   3: 4339524.331 ops/s
Iteration   4: 4273573.738 ops/s
Iteration   5: 4130660.791 ops/s
Iteration   6: 4515821.822 ops/s
Iteration   7: 4418563.765 ops/s
Iteration   8: 4792501.650 ops/s
Iteration   9: 4388411.627 ops/s
Iteration  10: 4569017.514 ops/s
Iteration  11: 4560867.058 ops/s
Iteration  12: 4510265.315 ops/s
Iteration  13: 4592504.054 ops/s
Iteration  14: 4389297.940 ops/s
Iteration  15: 4573903.730 ops/s
Iteration  16: 4491620.543 ops/s
Iteration  17: 4426943.958 ops/s
Iteration  18: 4542045.851 ops/s
Iteration  19: 4437799.345 ops/s
Iteration  20: 4642429.282 ops/s
Iteration  21: 4419361.409 ops/s
Iteration  22: 4500031.713 ops/s
Iteration  23: 4627103.823 ops/s
Iteration  24: 4440114.162 ops/s
Iteration  25: 4565339.247 ops/s
Iteration  26: 4508259.212 ops/s
Iteration  27: 4500267.425 ops/s
Iteration  28: 4427523.119 ops/s
Iteration  29: 4586800.148 ops/s
Iteration  30: 4487347.986 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinallyTest._Benchmark.benchmark_normalJust":
  4490682.732 ±(99.9%) 81156.876 ops/s [Average]
  (min, avg, max) = (4130660.791, 4490682.732, 4792501.650), stdev = 121471.800
  CI (99.9%): [4409525.856, 4571839.607] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
FlowableDoFinallyTest._Benchmark.benchmark_normalJust  thrpt   30  4490682.732 ± 81156.876  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableAllTest._Benchmark.benchmark_predicateThrowsExceptionAndValueInCauseMessage$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableAllTest._Benchmark.benchmark_predicateThrowsExceptionAndValueInCauseMessage

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 150017.101 ops/s
# Warmup Iteration   2: 583007.053 ops/s
# Warmup Iteration   3: 691508.814 ops/s
# Warmup Iteration   4: 648813.744 ops/s
# Warmup Iteration   5: 690078.088 ops/s
# Warmup Iteration   6: 668641.035 ops/s
# Warmup Iteration   7: 668897.584 ops/s
# Warmup Iteration   8: 684049.785 ops/s
# Warmup Iteration   9: 683271.992 ops/s
# Warmup Iteration  10: 669133.208 ops/s
# Warmup Iteration  11: 666595.505 ops/s
# Warmup Iteration  12: 676921.326 ops/s
# Warmup Iteration  13: 680431.009 ops/s
# Warmup Iteration  14: 675964.832 ops/s
# Warmup Iteration  15: 695545.283 ops/s
# Warmup Iteration  16: 664459.760 ops/s
# Warmup Iteration  17: 723707.293 ops/s
# Warmup Iteration  18: 724722.928 ops/s
# Warmup Iteration  19: 710097.170 ops/s
# Warmup Iteration  20: 754051.602 ops/s
# Warmup Iteration  21: 699133.813 ops/s
# Warmup Iteration  22: 718701.101 ops/s
# Warmup Iteration  23: 766573.745 ops/s
# Warmup Iteration  24: 700973.237 ops/s
# Warmup Iteration  25: 688066.417 ops/s
# Warmup Iteration  26: 735709.578 ops/s
# Warmup Iteration  27: 726204.915 ops/s
# Warmup Iteration  28: 714255.480 ops/s
# Warmup Iteration  29: 740309.876 ops/s
# Warmup Iteration  30: 707428.056 ops/s
Iteration   1: 738167.736 ops/s
Iteration   2: 752326.786 ops/s
Iteration   3: 688056.586 ops/s
Iteration   4: 728161.105 ops/s
Iteration   5: 700994.772 ops/s
Iteration   6: 750381.505 ops/s
Iteration   7: 708266.349 ops/s
Iteration   8: 725665.875 ops/s
Iteration   9: 735157.308 ops/s
Iteration  10: 710268.485 ops/s
Iteration  11: 750363.698 ops/s
Iteration  12: 702589.292 ops/s
Iteration  13: 745346.922 ops/s
Iteration  14: 713980.599 ops/s
Iteration  15: 737832.241 ops/s
Iteration  16: 731427.301 ops/s
Iteration  17: 712087.734 ops/s
Iteration  18: 754357.439 ops/s
Iteration  19: 717637.797 ops/s
Iteration  20: 724832.969 ops/s
Iteration  21: 741305.030 ops/s
Iteration  22: 722834.072 ops/s
Iteration  23: 753274.269 ops/s
Iteration  24: 718043.737 ops/s
Iteration  25: 731946.212 ops/s
Iteration  26: 677180.110 ops/s
Iteration  27: 734112.511 ops/s
Iteration  28: 707523.681 ops/s
Iteration  29: 746752.025 ops/s
Iteration  30: 736031.281 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableAllTest._Benchmark.benchmark_predicateThrowsExceptionAndValueInCauseMessage":
  726563.514 ±(99.9%) 13275.099 ops/s [Average]
  (min, avg, max) = (677180.110, 726563.514, 754357.439), stdev = 19869.545
  CI (99.9%): [713288.415, 739838.614] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             Mode  Cnt       Score       Error  Units
FlowableAllTest._Benchmark.benchmark_predicateThrowsExceptionAndValueInCauseMessage  thrpt   30  726563.514 ± 13275.099  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableAnyTest._Benchmark.benchmark_backpressureIfOneRequestedOneShouldBeDeliveredFlowable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableAnyTest._Benchmark.benchmark_backpressureIfOneRequestedOneShouldBeDeliveredFlowable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 664732.605 ops/s
# Warmup Iteration   2: 3801839.932 ops/s
# Warmup Iteration   3: 4371718.362 ops/s
# Warmup Iteration   4: 5044723.156 ops/s
# Warmup Iteration   5: 5195901.452 ops/s
# Warmup Iteration   6: 5026431.587 ops/s
# Warmup Iteration   7: 4922138.626 ops/s
# Warmup Iteration   8: 5167891.996 ops/s
# Warmup Iteration   9: 4904165.948 ops/s
# Warmup Iteration  10: 5137497.309 ops/s
# Warmup Iteration  11: 4934134.279 ops/s
# Warmup Iteration  12: 5208208.733 ops/s
# Warmup Iteration  13: 4929071.363 ops/s
# Warmup Iteration  14: 5291687.156 ops/s
# Warmup Iteration  15: 5040363.823 ops/s
# Warmup Iteration  16: 5059746.687 ops/s
# Warmup Iteration  17: 5188892.158 ops/s
# Warmup Iteration  18: 4928617.359 ops/s
# Warmup Iteration  19: 5237975.199 ops/s
# Warmup Iteration  20: 5065274.363 ops/s
# Warmup Iteration  21: 5122925.907 ops/s
# Warmup Iteration  22: 5118704.263 ops/s
# Warmup Iteration  23: 5099696.085 ops/s
# Warmup Iteration  24: 5109975.927 ops/s
# Warmup Iteration  25: 5026579.000 ops/s
# Warmup Iteration  26: 5068379.983 ops/s
# Warmup Iteration  27: 4924568.682 ops/s
# Warmup Iteration  28: 5216724.163 ops/s
# Warmup Iteration  29: 4481269.813 ops/s
# Warmup Iteration  30: 4351457.015 ops/s
Iteration   1: 5167967.033 ops/s
Iteration   2: 5055803.565 ops/s
Iteration   3: 5170051.553 ops/s
Iteration   4: 5099677.031 ops/s
Iteration   5: 5005255.634 ops/s
Iteration   6: 5001051.768 ops/s
Iteration   7: 5143395.187 ops/s
Iteration   8: 4893042.767 ops/s
Iteration   9: 5302205.132 ops/s
Iteration  10: 4906322.816 ops/s
Iteration  11: 5242698.545 ops/s
Iteration  12: 5109699.863 ops/s
Iteration  13: 5097035.184 ops/s
Iteration  14: 5191873.709 ops/s
Iteration  15: 4977381.618 ops/s
Iteration  16: 5113590.252 ops/s
Iteration  17: 4955590.670 ops/s
Iteration  18: 5159870.801 ops/s
Iteration  19: 5190040.191 ops/s
Iteration  20: 5104368.613 ops/s
Iteration  21: 5342207.651 ops/s
Iteration  22: 5002735.896 ops/s
Iteration  23: 5298118.464 ops/s
Iteration  24: 4969388.587 ops/s
Iteration  25: 5193871.124 ops/s
Iteration  26: 5024185.539 ops/s
Iteration  27: 5187402.132 ops/s
Iteration  28: 5209537.559 ops/s
Iteration  29: 4925105.673 ops/s
Iteration  30: 5228475.893 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableAnyTest._Benchmark.benchmark_backpressureIfOneRequestedOneShouldBeDeliveredFlowable":
  5108931.682 ±(99.9%) 81674.669 ops/s [Average]
  (min, avg, max) = (4893042.767, 5108931.682, 5342207.651), stdev = 122246.808
  CI (99.9%): [5027257.013, 5190606.350] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                     Mode  Cnt        Score       Error  Units
FlowableAnyTest._Benchmark.benchmark_backpressureIfOneRequestedOneShouldBeDeliveredFlowable  thrpt   30  5108931.682 ± 81674.669  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeTest._Benchmark.benchmark_countOne$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeTest._Benchmark.benchmark_countOne

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 648579.810 ops/s
# Warmup Iteration   2: 3329622.343 ops/s
# Warmup Iteration   3: 5149641.148 ops/s
# Warmup Iteration   4: 5405730.578 ops/s
# Warmup Iteration   5: 6039119.029 ops/s
# Warmup Iteration   6: 5497803.306 ops/s
# Warmup Iteration   7: 5544222.928 ops/s
# Warmup Iteration   8: 5791788.972 ops/s
# Warmup Iteration   9: 5595634.573 ops/s
# Warmup Iteration  10: 5586883.531 ops/s
# Warmup Iteration  11: 5746896.846 ops/s
# Warmup Iteration  12: 5562705.160 ops/s
# Warmup Iteration  13: 5842767.118 ops/s
# Warmup Iteration  14: 5567188.919 ops/s
# Warmup Iteration  15: 5871179.739 ops/s
# Warmup Iteration  16: 5847300.735 ops/s
# Warmup Iteration  17: 5569622.849 ops/s
# Warmup Iteration  18: 5546875.286 ops/s
# Warmup Iteration  19: 5879006.836 ops/s
# Warmup Iteration  20: 5410942.889 ops/s
# Warmup Iteration  21: 5871751.656 ops/s
# Warmup Iteration  22: 5575951.789 ops/s
# Warmup Iteration  23: 5638107.361 ops/s
# Warmup Iteration  24: 5672680.295 ops/s
# Warmup Iteration  25: 5782247.949 ops/s
# Warmup Iteration  26: 5619774.262 ops/s
# Warmup Iteration  27: 5697920.831 ops/s
# Warmup Iteration  28: 5589247.174 ops/s
# Warmup Iteration  29: 5841530.020 ops/s
# Warmup Iteration  30: 5689944.649 ops/s
Iteration   1: 5756412.676 ops/s
Iteration   2: 5485447.736 ops/s
Iteration   3: 5671024.942 ops/s
Iteration   4: 5637232.405 ops/s
Iteration   5: 5658410.799 ops/s
Iteration   6: 5763819.181 ops/s
Iteration   7: 5631046.411 ops/s
Iteration   8: 5804410.577 ops/s
Iteration   9: 5572430.563 ops/s
Iteration  10: 5915243.521 ops/s
Iteration  11: 5637773.993 ops/s
Iteration  12: 5469768.458 ops/s
Iteration  13: 5857414.699 ops/s
Iteration  14: 5619895.882 ops/s
Iteration  15: 5694385.201 ops/s
Iteration  16: 5631513.483 ops/s
Iteration  17: 5685136.727 ops/s
Iteration  18: 5577292.387 ops/s
Iteration  19: 5851093.129 ops/s
Iteration  20: 5517133.852 ops/s
Iteration  21: 5768639.886 ops/s
Iteration  22: 5818891.474 ops/s
Iteration  23: 5492230.073 ops/s
Iteration  24: 5937148.079 ops/s
Iteration  25: 5531529.126 ops/s
Iteration  26: 5643261.400 ops/s
Iteration  27: 5903011.604 ops/s
Iteration  28: 5460110.040 ops/s
Iteration  29: 5959701.346 ops/s
Iteration  30: 5455704.870 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeTest._Benchmark.benchmark_countOne":
  5680237.151 ±(99.9%) 101280.674 ops/s [Average]
  (min, avg, max) = (5455704.870, 5680237.151, 5959701.346), stdev = 151592.156
  CI (99.9%): [5578956.477, 5781517.825] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score        Error  Units
FlowableRangeTest._Benchmark.benchmark_countOne  thrpt   30  5680237.151 ± 101280.674  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnSubscribeTest._Benchmark.benchmark_doOnSubscribe2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnSubscribeTest._Benchmark.benchmark_doOnSubscribe2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1428297.849 ops/s
# Warmup Iteration   2: 5004539.500 ops/s
# Warmup Iteration   3: 6113052.786 ops/s
# Warmup Iteration   4: 6968565.474 ops/s
# Warmup Iteration   5: 6729276.556 ops/s
# Warmup Iteration   6: 6788539.419 ops/s
# Warmup Iteration   7: 6806482.022 ops/s
# Warmup Iteration   8: 6822767.068 ops/s
# Warmup Iteration   9: 6716445.258 ops/s
# Warmup Iteration  10: 6506255.424 ops/s
# Warmup Iteration  11: 6808180.396 ops/s
# Warmup Iteration  12: 6727524.376 ops/s
# Warmup Iteration  13: 6945156.062 ops/s
# Warmup Iteration  14: 6665203.584 ops/s
# Warmup Iteration  15: 7076103.177 ops/s
# Warmup Iteration  16: 7155231.038 ops/s
# Warmup Iteration  17: 6460417.387 ops/s
# Warmup Iteration  18: 6826647.045 ops/s
# Warmup Iteration  19: 6785941.410 ops/s
# Warmup Iteration  20: 6980938.834 ops/s
# Warmup Iteration  21: 6591846.391 ops/s
# Warmup Iteration  22: 6582007.925 ops/s
# Warmup Iteration  23: 6989751.786 ops/s
# Warmup Iteration  24: 5247453.933 ops/s
# Warmup Iteration  25: 6811579.540 ops/s
# Warmup Iteration  26: 6541870.495 ops/s
# Warmup Iteration  27: 6818169.841 ops/s
# Warmup Iteration  28: 6803062.996 ops/s
# Warmup Iteration  29: 6832442.552 ops/s
# Warmup Iteration  30: 6779106.290 ops/s
Iteration   1: 6847178.219 ops/s
Iteration   2: 6719184.544 ops/s
Iteration   3: 6864568.020 ops/s
Iteration   4: 6606010.646 ops/s
Iteration   5: 6629271.304 ops/s
Iteration   6: 6860110.135 ops/s
Iteration   7: 6651607.086 ops/s
Iteration   8: 6808470.279 ops/s
Iteration   9: 6640940.523 ops/s
Iteration  10: 6954609.585 ops/s
Iteration  11: 6955398.775 ops/s
Iteration  12: 6484342.071 ops/s
Iteration  13: 6933233.957 ops/s
Iteration  14: 6786633.056 ops/s
Iteration  15: 6910508.555 ops/s
Iteration  16: 6958627.226 ops/s
Iteration  17: 6552768.882 ops/s
Iteration  18: 7005525.548 ops/s
Iteration  19: 6535673.764 ops/s
Iteration  20: 6777035.831 ops/s
Iteration  21: 6843824.190 ops/s
Iteration  22: 6738566.730 ops/s
Iteration  23: 6917396.792 ops/s
Iteration  24: 6613850.657 ops/s
Iteration  25: 6887909.930 ops/s
Iteration  26: 6676608.381 ops/s
Iteration  27: 6835700.513 ops/s
Iteration  28: 6802626.636 ops/s
Iteration  29: 6743329.854 ops/s
Iteration  30: 6872011.433 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnSubscribeTest._Benchmark.benchmark_doOnSubscribe2":
  6780450.771 ±(99.9%) 94710.293 ops/s [Average]
  (min, avg, max) = (6484342.071, 6780450.771, 7005525.548), stdev = 141757.919
  CI (99.9%): [6685740.477, 6875161.064] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
FlowableDoOnSubscribeTest._Benchmark.benchmark_doOnSubscribe2  thrpt   30  6780450.771 ± 94710.293  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeWhileTest._Benchmark.benchmark_errorCauseIncludesLastValue$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeWhileTest._Benchmark.benchmark_errorCauseIncludesLastValue

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 263459.519 ops/s
# Warmup Iteration   2: 457358.853 ops/s
# Warmup Iteration   3: 588971.021 ops/s
# Warmup Iteration   4: 565351.733 ops/s
# Warmup Iteration   5: 590612.328 ops/s
# Warmup Iteration   6: 566482.481 ops/s
# Warmup Iteration   7: 560090.444 ops/s
# Warmup Iteration   8: 595531.106 ops/s
# Warmup Iteration   9: 542221.273 ops/s
# Warmup Iteration  10: 586833.630 ops/s
# Warmup Iteration  11: 584092.532 ops/s
# Warmup Iteration  12: 560344.241 ops/s
# Warmup Iteration  13: 568123.591 ops/s
# Warmup Iteration  14: 558456.993 ops/s
# Warmup Iteration  15: 545433.309 ops/s
# Warmup Iteration  16: 607789.750 ops/s
# Warmup Iteration  17: 587193.490 ops/s
# Warmup Iteration  18: 599833.794 ops/s
# Warmup Iteration  19: 608175.161 ops/s
# Warmup Iteration  20: 594498.587 ops/s
# Warmup Iteration  21: 615368.143 ops/s
# Warmup Iteration  22: 609329.343 ops/s
# Warmup Iteration  23: 595540.164 ops/s
# Warmup Iteration  24: 613159.642 ops/s
# Warmup Iteration  25: 572207.549 ops/s
# Warmup Iteration  26: 610134.143 ops/s
# Warmup Iteration  27: 598696.308 ops/s
# Warmup Iteration  28: 607189.778 ops/s
# Warmup Iteration  29: 600460.386 ops/s
# Warmup Iteration  30: 595892.286 ops/s
Iteration   1: 592945.642 ops/s
Iteration   2: 590529.650 ops/s
Iteration   3: 603395.496 ops/s
Iteration   4: 594304.025 ops/s
Iteration   5: 599922.972 ops/s
Iteration   6: 605664.078 ops/s
Iteration   7: 627434.525 ops/s
Iteration   8: 572143.064 ops/s
Iteration   9: 629630.379 ops/s
Iteration  10: 584057.654 ops/s
Iteration  11: 616157.189 ops/s
Iteration  12: 595721.664 ops/s
Iteration  13: 616317.807 ops/s
Iteration  14: 595305.739 ops/s
Iteration  15: 583143.924 ops/s
Iteration  16: 617751.911 ops/s
Iteration  17: 594447.975 ops/s
Iteration  18: 611914.113 ops/s
Iteration  19: 592452.012 ops/s
Iteration  20: 607481.721 ops/s
Iteration  21: 609964.678 ops/s
Iteration  22: 596130.866 ops/s
Iteration  23: 607293.154 ops/s
Iteration  24: 598229.339 ops/s
Iteration  25: 596043.139 ops/s
Iteration  26: 585773.010 ops/s
Iteration  27: 604753.739 ops/s
Iteration  28: 597930.450 ops/s
Iteration  29: 580537.963 ops/s
Iteration  30: 630172.751 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeWhileTest._Benchmark.benchmark_errorCauseIncludesLastValue":
  601251.688 ±(99.9%) 9599.359 ops/s [Average]
  (min, avg, max) = (572143.064, 601251.688, 630172.751), stdev = 14367.870
  CI (99.9%): [591652.328, 610851.047] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score      Error  Units
FlowableTakeWhileTest._Benchmark.benchmark_errorCauseIncludesLastValue  thrpt   30  601251.688 ± 9599.359  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeTest._Benchmark.benchmark_takeZero$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeTest._Benchmark.benchmark_takeZero

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2639031.760 ops/s
# Warmup Iteration   2: 4539257.758 ops/s
# Warmup Iteration   3: 7034324.720 ops/s
# Warmup Iteration   4: 6743661.545 ops/s
# Warmup Iteration   5: 6919717.834 ops/s
# Warmup Iteration   6: 7203386.343 ops/s
# Warmup Iteration   7: 6734546.279 ops/s
# Warmup Iteration   8: 6789171.135 ops/s
# Warmup Iteration   9: 6916686.741 ops/s
# Warmup Iteration  10: 6931741.514 ops/s
# Warmup Iteration  11: 6653800.974 ops/s
# Warmup Iteration  12: 7005067.427 ops/s
# Warmup Iteration  13: 6929143.288 ops/s
# Warmup Iteration  14: 7009314.339 ops/s
# Warmup Iteration  15: 6603102.622 ops/s
# Warmup Iteration  16: 7122368.704 ops/s
# Warmup Iteration  17: 6793192.926 ops/s
# Warmup Iteration  18: 6790050.152 ops/s
# Warmup Iteration  19: 5286139.718 ops/s
# Warmup Iteration  20: 6873658.505 ops/s
# Warmup Iteration  21: 6630972.207 ops/s
# Warmup Iteration  22: 7079801.423 ops/s
# Warmup Iteration  23: 6869351.644 ops/s
# Warmup Iteration  24: 6718379.796 ops/s
# Warmup Iteration  25: 6999283.658 ops/s
# Warmup Iteration  26: 6996427.287 ops/s
# Warmup Iteration  27: 6761455.920 ops/s
# Warmup Iteration  28: 6916781.364 ops/s
# Warmup Iteration  29: 6993319.541 ops/s
# Warmup Iteration  30: 7082304.928 ops/s
Iteration   1: 6749617.575 ops/s
Iteration   2: 7081687.732 ops/s
Iteration   3: 6461242.904 ops/s
Iteration   4: 6910038.209 ops/s
Iteration   5: 6920245.760 ops/s
Iteration   6: 7193159.760 ops/s
Iteration   7: 6795657.591 ops/s
Iteration   8: 6626728.880 ops/s
Iteration   9: 7130927.178 ops/s
Iteration  10: 6859318.729 ops/s
Iteration  11: 6817308.706 ops/s
Iteration  12: 7038631.566 ops/s
Iteration  13: 6803186.895 ops/s
Iteration  14: 7166537.087 ops/s
Iteration  15: 6997239.808 ops/s
Iteration  16: 6754058.361 ops/s
Iteration  17: 6775845.429 ops/s
Iteration  18: 6982116.530 ops/s
Iteration  19: 6975762.624 ops/s
Iteration  20: 7054120.626 ops/s
Iteration  21: 6898547.247 ops/s
Iteration  22: 7004027.163 ops/s
Iteration  23: 6743181.735 ops/s
Iteration  24: 7072577.924 ops/s
Iteration  25: 6824853.506 ops/s
Iteration  26: 6773460.109 ops/s
Iteration  27: 7173233.290 ops/s
Iteration  28: 6687051.821 ops/s
Iteration  29: 6862445.056 ops/s
Iteration  30: 7049920.575 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeTest._Benchmark.benchmark_takeZero":
  6906091.013 ±(99.9%) 117282.528 ops/s [Average]
  (min, avg, max) = (6461242.904, 6906091.013, 7193159.760), stdev = 175542.980
  CI (99.9%): [6788808.484, 7023373.541] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt        Score        Error  Units
FlowableTakeTest._Benchmark.benchmark_takeZero  thrpt   30  6906091.013 ± 117282.528  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableToCompletableTest._Benchmark.benchmark_neverObservable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableToCompletableTest._Benchmark.benchmark_neverObservable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1762878.221 ops/s
# Warmup Iteration   2: 5226842.886 ops/s
# Warmup Iteration   3: 7953786.654 ops/s
# Warmup Iteration   4: 8124022.201 ops/s
# Warmup Iteration   5: 7638459.670 ops/s
# Warmup Iteration   6: 7980030.963 ops/s
# Warmup Iteration   7: 7925155.212 ops/s
# Warmup Iteration   8: 7905796.089 ops/s
# Warmup Iteration   9: 7751092.366 ops/s
# Warmup Iteration  10: 7715965.058 ops/s
# Warmup Iteration  11: 8299661.991 ops/s
# Warmup Iteration  12: 7786824.333 ops/s
# Warmup Iteration  13: 7992443.282 ops/s
# Warmup Iteration  14: 7820220.282 ops/s
# Warmup Iteration  15: 8067654.861 ops/s
# Warmup Iteration  16: 7593506.496 ops/s
# Warmup Iteration  17: 7703875.394 ops/s
# Warmup Iteration  18: 8164153.985 ops/s
# Warmup Iteration  19: 7970494.948 ops/s
# Warmup Iteration  20: 8164064.395 ops/s
# Warmup Iteration  21: 7871915.818 ops/s
# Warmup Iteration  22: 7982580.223 ops/s
# Warmup Iteration  23: 8119620.154 ops/s
# Warmup Iteration  24: 7800631.145 ops/s
# Warmup Iteration  25: 8118413.229 ops/s
# Warmup Iteration  26: 8188415.155 ops/s
# Warmup Iteration  27: 7830379.478 ops/s
# Warmup Iteration  28: 8023678.112 ops/s
# Warmup Iteration  29: 7931207.591 ops/s
# Warmup Iteration  30: 8332405.667 ops/s
Iteration   1: 8072676.296 ops/s
Iteration   2: 7897304.156 ops/s
Iteration   3: 7996130.037 ops/s
Iteration   4: 7845658.686 ops/s
Iteration   5: 7933562.529 ops/s
Iteration   6: 8397483.869 ops/s
Iteration   7: 7884420.941 ops/s
Iteration   8: 7834313.362 ops/s
Iteration   9: 7852052.634 ops/s
Iteration  10: 8180533.943 ops/s
Iteration  11: 7887735.895 ops/s
Iteration  12: 7999970.051 ops/s
Iteration  13: 8158592.946 ops/s
Iteration  14: 7667020.693 ops/s
Iteration  15: 8104413.403 ops/s
Iteration  16: 7860138.590 ops/s
Iteration  17: 7856041.214 ops/s
Iteration  18: 8236260.190 ops/s
Iteration  19: 7704709.562 ops/s
Iteration  20: 8275871.018 ops/s
Iteration  21: 7696387.582 ops/s
Iteration  22: 8014856.415 ops/s
Iteration  23: 7970598.002 ops/s
Iteration  24: 7861919.376 ops/s
Iteration  25: 8227541.588 ops/s
Iteration  26: 7873690.909 ops/s
Iteration  27: 8144957.081 ops/s
Iteration  28: 7867567.768 ops/s
Iteration  29: 8153724.127 ops/s
Iteration  30: 7949091.593 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableToCompletableTest._Benchmark.benchmark_neverObservable":
  7980174.148 ±(99.9%) 120882.284 ops/s [Average]
  (min, avg, max) = (7667020.693, 7980174.148, 8397483.869), stdev = 180930.925
  CI (99.9%): [7859291.865, 8101056.432] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score        Error  Units
FlowableToCompletableTest._Benchmark.benchmark_neverObservable  thrpt   30  7980174.148 ± 120882.284  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNextTest._Benchmark.benchmark_just$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNextTest._Benchmark.benchmark_just

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 500670.712 ops/s
# Warmup Iteration   2: 1992040.597 ops/s
# Warmup Iteration   3: 2947460.964 ops/s
# Warmup Iteration   4: 3360580.928 ops/s
# Warmup Iteration   5: 3348517.737 ops/s
# Warmup Iteration   6: 3303705.796 ops/s
# Warmup Iteration   7: 3323514.800 ops/s
# Warmup Iteration   8: 3469354.751 ops/s
# Warmup Iteration   9: 3289493.536 ops/s
# Warmup Iteration  10: 3370384.404 ops/s
# Warmup Iteration  11: 3375140.421 ops/s
# Warmup Iteration  12: 3266366.335 ops/s
# Warmup Iteration  13: 2631760.940 ops/s
# Warmup Iteration  14: 3468833.061 ops/s
# Warmup Iteration  15: 3250254.690 ops/s
# Warmup Iteration  16: 3541580.512 ops/s
# Warmup Iteration  17: 3277944.576 ops/s
# Warmup Iteration  18: 3407332.039 ops/s
# Warmup Iteration  19: 3496568.766 ops/s
# Warmup Iteration  20: 3263798.781 ops/s
# Warmup Iteration  21: 3391213.040 ops/s
# Warmup Iteration  22: 3356952.306 ops/s
# Warmup Iteration  23: 3419036.986 ops/s
# Warmup Iteration  24: 3325810.686 ops/s
# Warmup Iteration  25: 3350374.703 ops/s
# Warmup Iteration  26: 3376337.743 ops/s
# Warmup Iteration  27: 3281583.102 ops/s
# Warmup Iteration  28: 3365781.185 ops/s
# Warmup Iteration  29: 3383440.794 ops/s
# Warmup Iteration  30: 3393531.886 ops/s
Iteration   1: 3456995.960 ops/s
Iteration   2: 3285440.063 ops/s
Iteration   3: 3447620.692 ops/s
Iteration   4: 3333498.182 ops/s
Iteration   5: 3371903.889 ops/s
Iteration   6: 3318181.721 ops/s
Iteration   7: 3339466.272 ops/s
Iteration   8: 3527257.455 ops/s
Iteration   9: 3302051.669 ops/s
Iteration  10: 3457805.866 ops/s
Iteration  11: 3276146.319 ops/s
Iteration  12: 3395717.770 ops/s
Iteration  13: 3400057.194 ops/s
Iteration  14: 3391317.439 ops/s
Iteration  15: 3241232.844 ops/s
Iteration  16: 3469116.441 ops/s
Iteration  17: 3256756.928 ops/s
Iteration  18: 3395950.930 ops/s
Iteration  19: 3259381.024 ops/s
Iteration  20: 3446492.273 ops/s
Iteration  21: 3369655.821 ops/s
Iteration  22: 3390926.220 ops/s
Iteration  23: 3350534.389 ops/s
Iteration  24: 3387389.465 ops/s
Iteration  25: 3518019.637 ops/s
Iteration  26: 3341232.010 ops/s
Iteration  27: 3436902.088 ops/s
Iteration  28: 3514810.818 ops/s
Iteration  29: 3270486.255 ops/s
Iteration  30: 3401465.018 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNextTest._Benchmark.benchmark_just":
  3378460.422 ±(99.9%) 54024.803 ops/s [Average]
  (min, avg, max) = (3241232.844, 3378460.422, 3527257.455), stdev = 80861.787
  CI (99.9%): [3324435.619, 3432485.224] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score       Error  Units
FlowableDoAfterNextTest._Benchmark.benchmark_just  thrpt   30  3378460.422 ± 54024.803  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.subscribers.DeferredScalarSubscriberTest._Benchmark.benchmark_justSource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.subscribers.DeferredScalarSubscriberTest._Benchmark.benchmark_justSource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1018279.285 ops/s
# Warmup Iteration   2: 3111393.761 ops/s
# Warmup Iteration   3: 4134231.303 ops/s
# Warmup Iteration   4: 4713784.468 ops/s
# Warmup Iteration   5: 4803218.834 ops/s
# Warmup Iteration   6: 4599678.054 ops/s
# Warmup Iteration   7: 4739586.413 ops/s
# Warmup Iteration   8: 4760441.752 ops/s
# Warmup Iteration   9: 4751823.547 ops/s
# Warmup Iteration  10: 4569489.985 ops/s
# Warmup Iteration  11: 4700430.722 ops/s
# Warmup Iteration  12: 4604464.792 ops/s
# Warmup Iteration  13: 4768490.099 ops/s
# Warmup Iteration  14: 4832747.371 ops/s
# Warmup Iteration  15: 4478498.130 ops/s
# Warmup Iteration  16: 4761894.584 ops/s
# Warmup Iteration  17: 4748339.368 ops/s
# Warmup Iteration  18: 4729327.254 ops/s
# Warmup Iteration  19: 4831954.617 ops/s
# Warmup Iteration  20: 4715551.929 ops/s
# Warmup Iteration  21: 4854345.443 ops/s
# Warmup Iteration  22: 4741577.536 ops/s
# Warmup Iteration  23: 4662623.816 ops/s
# Warmup Iteration  24: 4894825.543 ops/s
# Warmup Iteration  25: 4721500.765 ops/s
# Warmup Iteration  26: 4855191.154 ops/s
# Warmup Iteration  27: 4760930.818 ops/s
# Warmup Iteration  28: 4759024.135 ops/s
# Warmup Iteration  29: 4890082.561 ops/s
# Warmup Iteration  30: 4867443.828 ops/s
Iteration   1: 4641330.795 ops/s
Iteration   2: 4933256.984 ops/s
Iteration   3: 4720834.677 ops/s
Iteration   4: 4889830.714 ops/s
Iteration   5: 4860182.880 ops/s
Iteration   6: 4752211.081 ops/s
Iteration   7: 4838651.337 ops/s
Iteration   8: 4718837.247 ops/s
Iteration   9: 4639722.958 ops/s
Iteration  10: 4746538.027 ops/s
Iteration  11: 4629693.589 ops/s
Iteration  12: 4937542.263 ops/s
Iteration  13: 4725922.984 ops/s
Iteration  14: 4566890.393 ops/s
Iteration  15: 4749482.548 ops/s
Iteration  16: 4717743.294 ops/s
Iteration  17: 4737075.458 ops/s
Iteration  18: 4793085.997 ops/s
Iteration  19: 4826954.324 ops/s
Iteration  20: 4750474.261 ops/s
Iteration  21: 4876010.452 ops/s
Iteration  22: 4627615.910 ops/s
Iteration  23: 4842797.857 ops/s
Iteration  24: 4724930.724 ops/s
Iteration  25: 4902658.359 ops/s
Iteration  26: 4741274.424 ops/s
Iteration  27: 4681353.765 ops/s
Iteration  28: 4836426.654 ops/s
Iteration  29: 4633003.927 ops/s
Iteration  30: 4722603.446 ops/s


Result "io.reactivex.rxjava3.internal.subscribers.DeferredScalarSubscriberTest._Benchmark.benchmark_justSource":
  4758831.244 ±(99.9%) 65583.887 ops/s [Average]
  (min, avg, max) = (4566890.393, 4758831.244, 4937542.263), stdev = 98162.882
  CI (99.9%): [4693247.357, 4824415.131] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
DeferredScalarSubscriberTest._Benchmark.benchmark_justSource  thrpt   30  4758831.244 ± 65583.887  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorReturnTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorReturnTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1438384.211 ops/s
# Warmup Iteration   2: 4623255.022 ops/s
# Warmup Iteration   3: 6825850.899 ops/s
# Warmup Iteration   4: 6483253.588 ops/s
# Warmup Iteration   5: 6914909.729 ops/s
# Warmup Iteration   6: 6596177.357 ops/s
# Warmup Iteration   7: 6724851.378 ops/s
# Warmup Iteration   8: 5456747.929 ops/s
# Warmup Iteration   9: 6618183.869 ops/s
# Warmup Iteration  10: 6725864.876 ops/s
# Warmup Iteration  11: 6678899.060 ops/s
# Warmup Iteration  12: 6639888.109 ops/s
# Warmup Iteration  13: 7026573.377 ops/s
# Warmup Iteration  14: 6808664.679 ops/s
# Warmup Iteration  15: 6656310.440 ops/s
# Warmup Iteration  16: 7058117.075 ops/s
# Warmup Iteration  17: 6668123.324 ops/s
# Warmup Iteration  18: 6624066.046 ops/s
# Warmup Iteration  19: 6981584.474 ops/s
# Warmup Iteration  20: 6508869.082 ops/s
# Warmup Iteration  21: 6817871.045 ops/s
# Warmup Iteration  22: 7094609.442 ops/s
# Warmup Iteration  23: 6579091.024 ops/s
# Warmup Iteration  24: 6822079.339 ops/s
# Warmup Iteration  25: 6622130.391 ops/s
# Warmup Iteration  26: 6921762.915 ops/s
# Warmup Iteration  27: 6843989.337 ops/s
# Warmup Iteration  28: 6685162.104 ops/s
# Warmup Iteration  29: 7015455.084 ops/s
# Warmup Iteration  30: 6520901.673 ops/s
Iteration   1: 6967920.537 ops/s
Iteration   2: 6921214.484 ops/s
Iteration   3: 6621184.732 ops/s
Iteration   4: 6981945.520 ops/s
Iteration   5: 6617192.669 ops/s
Iteration   6: 6968723.821 ops/s
Iteration   7: 6969100.197 ops/s
Iteration   8: 6565037.677 ops/s
Iteration   9: 7213157.812 ops/s
Iteration  10: 6532014.893 ops/s
Iteration  11: 7040829.264 ops/s
Iteration  12: 6791112.716 ops/s
Iteration  13: 6905608.774 ops/s
Iteration  14: 7016122.688 ops/s
Iteration  15: 6891112.309 ops/s
Iteration  16: 6657416.058 ops/s
Iteration  17: 6883181.449 ops/s
Iteration  18: 6805498.654 ops/s
Iteration  19: 7057480.733 ops/s
Iteration  20: 6793164.757 ops/s
Iteration  21: 6826718.481 ops/s
Iteration  22: 6613914.878 ops/s
Iteration  23: 7072278.330 ops/s
Iteration  24: 6623640.810 ops/s
Iteration  25: 6718938.706 ops/s
Iteration  26: 7004149.645 ops/s
Iteration  27: 6727214.473 ops/s
Iteration  28: 6820651.359 ops/s
Iteration  29: 6738861.577 ops/s
Iteration  30: 6847938.936 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorReturnTest._Benchmark.benchmark_dispose":
  6839777.565 ±(99.9%) 115531.342 ops/s [Average]
  (min, avg, max) = (6532014.893, 6839777.565, 7213157.812), stdev = 172921.887
  CI (99.9%): [6724246.222, 6955308.907] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score        Error  Units
FlowableOnErrorReturnTest._Benchmark.benchmark_dispose  thrpt   30  6839777.565 ± 115531.342  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableBlockingTest._Benchmark.benchmark_firstIgnoredCancelAndOnError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableBlockingTest._Benchmark.benchmark_firstIgnoredCancelAndOnError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 80131.853 ops/s
# Warmup Iteration   2: 210671.438 ops/s
# Warmup Iteration   3: 243817.657 ops/s
# Warmup Iteration   4: 247108.533 ops/s
# Warmup Iteration   5: 257006.493 ops/s
# Warmup Iteration   6: 241830.280 ops/s
# Warmup Iteration   7: 247753.028 ops/s
# Warmup Iteration   8: 234253.352 ops/s
# Warmup Iteration   9: 253548.060 ops/s
# Warmup Iteration  10: 257291.611 ops/s
# Warmup Iteration  11: 249780.360 ops/s
# Warmup Iteration  12: 261503.541 ops/s
# Warmup Iteration  13: 260065.545 ops/s
# Warmup Iteration  14: 245165.963 ops/s
# Warmup Iteration  15: 260382.026 ops/s
# Warmup Iteration  16: 258660.660 ops/s
# Warmup Iteration  17: 255953.200 ops/s
# Warmup Iteration  18: 261504.566 ops/s
# Warmup Iteration  19: 269000.791 ops/s
# Warmup Iteration  20: 261560.412 ops/s
# Warmup Iteration  21: 272547.807 ops/s
# Warmup Iteration  22: 252853.546 ops/s
# Warmup Iteration  23: 266034.525 ops/s
# Warmup Iteration  24: 273481.783 ops/s
# Warmup Iteration  25: 254336.258 ops/s
# Warmup Iteration  26: 270896.950 ops/s
# Warmup Iteration  27: 255483.469 ops/s
# Warmup Iteration  28: 270388.230 ops/s
# Warmup Iteration  29: 264791.500 ops/s
# Warmup Iteration  30: 255923.477 ops/s
Iteration   1: 246335.965 ops/s
Iteration   2: 258849.605 ops/s
Iteration   3: 262926.320 ops/s
Iteration   4: 263666.517 ops/s
Iteration   5: 275163.230 ops/s
Iteration   6: 258141.386 ops/s
Iteration   7: 270245.374 ops/s
Iteration   8: 258673.447 ops/s
Iteration   9: 264233.048 ops/s
Iteration  10: 281776.716 ops/s
Iteration  11: 261947.531 ops/s
Iteration  12: 256693.113 ops/s
Iteration  13: 273438.309 ops/s
Iteration  14: 255531.175 ops/s
Iteration  15: 258635.177 ops/s
Iteration  16: 259331.351 ops/s
Iteration  17: 266480.305 ops/s
Iteration  18: 262532.477 ops/s
Iteration  19: 266121.517 ops/s
Iteration  20: 268358.395 ops/s
Iteration  21: 258614.459 ops/s
Iteration  22: 270293.970 ops/s
Iteration  23: 261890.105 ops/s
Iteration  24: 277117.820 ops/s
Iteration  25: 258260.910 ops/s
Iteration  26: 268492.808 ops/s
Iteration  27: 272401.765 ops/s
Iteration  28: 259897.908 ops/s
Iteration  29: 253996.573 ops/s
Iteration  30: 267869.945 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableBlockingTest._Benchmark.benchmark_firstIgnoredCancelAndOnError":
  263930.574 ±(99.9%) 5090.562 ops/s [Average]
  (min, avg, max) = (246335.965, 263930.574, 281776.716), stdev = 7619.315
  CI (99.9%): [258840.012, 269021.136] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score      Error  Units
FlowableBlockingTest._Benchmark.benchmark_firstIgnoredCancelAndOnError  thrpt   30  263930.574 ± 5090.562  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycleTest._Benchmark.benchmark_onSubscribeCrashed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycleTest._Benchmark.benchmark_onSubscribeCrashed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 201972.285 ops/s
# Warmup Iteration   2: 508711.820 ops/s
# Warmup Iteration   3: 469626.970 ops/s
# Warmup Iteration   4: 632225.792 ops/s
# Warmup Iteration   5: 593186.359 ops/s
# Warmup Iteration   6: 617349.293 ops/s
# Warmup Iteration   7: 596114.383 ops/s
# Warmup Iteration   8: 587326.749 ops/s
# Warmup Iteration   9: 604478.677 ops/s
# Warmup Iteration  10: 582196.722 ops/s
# Warmup Iteration  11: 613883.865 ops/s
# Warmup Iteration  12: 603288.791 ops/s
# Warmup Iteration  13: 619384.228 ops/s
# Warmup Iteration  14: 628321.782 ops/s
# Warmup Iteration  15: 622946.798 ops/s
# Warmup Iteration  16: 631722.871 ops/s
# Warmup Iteration  17: 630828.923 ops/s
# Warmup Iteration  18: 663141.982 ops/s
# Warmup Iteration  19: 665820.927 ops/s
# Warmup Iteration  20: 603989.080 ops/s
# Warmup Iteration  21: 658733.635 ops/s
# Warmup Iteration  22: 640797.276 ops/s
# Warmup Iteration  23: 621016.989 ops/s
# Warmup Iteration  24: 661860.182 ops/s
# Warmup Iteration  25: 626997.758 ops/s
# Warmup Iteration  26: 661706.337 ops/s
# Warmup Iteration  27: 662675.781 ops/s
# Warmup Iteration  28: 627348.710 ops/s
# Warmup Iteration  29: 669477.632 ops/s
# Warmup Iteration  30: 633640.585 ops/s
Iteration   1: 681539.360 ops/s
Iteration   2: 646971.248 ops/s
Iteration   3: 644746.031 ops/s
Iteration   4: 662769.654 ops/s
Iteration   5: 621516.016 ops/s
Iteration   6: 649850.684 ops/s
Iteration   7: 628213.870 ops/s
Iteration   8: 675324.043 ops/s
Iteration   9: 606687.472 ops/s
Iteration  10: 654908.247 ops/s
Iteration  11: 621509.837 ops/s
Iteration  12: 647818.214 ops/s
Iteration  13: 651947.775 ops/s
Iteration  14: 620060.153 ops/s
Iteration  15: 648980.023 ops/s
Iteration  16: 663515.291 ops/s
Iteration  17: 650653.148 ops/s
Iteration  18: 645153.740 ops/s
Iteration  19: 638064.978 ops/s
Iteration  20: 657273.781 ops/s
Iteration  21: 659559.819 ops/s
Iteration  22: 631604.958 ops/s
Iteration  23: 648297.342 ops/s
Iteration  24: 653359.914 ops/s
Iteration  25: 636190.590 ops/s
Iteration  26: 661965.637 ops/s
Iteration  27: 628308.577 ops/s
Iteration  28: 650944.262 ops/s
Iteration  29: 641964.927 ops/s
Iteration  30: 649766.543 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycleTest._Benchmark.benchmark_onSubscribeCrashed":
  645982.205 ±(99.9%) 11076.707 ops/s [Average]
  (min, avg, max) = (606687.472, 645982.205, 681539.360), stdev = 16579.095
  CI (99.9%): [634905.497, 657058.912] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score       Error  Units
FlowableDoOnLifecycleTest._Benchmark.benchmark_onSubscribeCrashed  thrpt   30  645982.205 ± 11076.707  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeTest._Benchmark.benchmark_takeFinalValueThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeTest._Benchmark.benchmark_takeFinalValueThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 91478.103 ops/s
# Warmup Iteration   2: 373360.131 ops/s
# Warmup Iteration   3: 416859.676 ops/s
# Warmup Iteration   4: 444365.364 ops/s
# Warmup Iteration   5: 368563.313 ops/s
# Warmup Iteration   6: 449124.644 ops/s
# Warmup Iteration   7: 473196.378 ops/s
# Warmup Iteration   8: 457385.415 ops/s
# Warmup Iteration   9: 463920.103 ops/s
# Warmup Iteration  10: 454362.955 ops/s
# Warmup Iteration  11: 440017.013 ops/s
# Warmup Iteration  12: 455035.260 ops/s
# Warmup Iteration  13: 456521.376 ops/s
# Warmup Iteration  14: 459515.161 ops/s
# Warmup Iteration  15: 466505.952 ops/s
# Warmup Iteration  16: 444203.743 ops/s
# Warmup Iteration  17: 552795.954 ops/s
# Warmup Iteration  18: 518361.433 ops/s
# Warmup Iteration  19: 564820.321 ops/s
# Warmup Iteration  20: 557234.750 ops/s
# Warmup Iteration  21: 526054.770 ops/s
# Warmup Iteration  22: 542762.061 ops/s
# Warmup Iteration  23: 548416.414 ops/s
# Warmup Iteration  24: 529573.434 ops/s
# Warmup Iteration  25: 543806.255 ops/s
# Warmup Iteration  26: 548498.064 ops/s
# Warmup Iteration  27: 527517.683 ops/s
# Warmup Iteration  28: 546184.438 ops/s
# Warmup Iteration  29: 539593.673 ops/s
# Warmup Iteration  30: 550370.331 ops/s
Iteration   1: 536857.405 ops/s
Iteration   2: 535895.986 ops/s
Iteration   3: 554766.144 ops/s
Iteration   4: 526952.934 ops/s
Iteration   5: 548046.831 ops/s
Iteration   6: 537847.547 ops/s
Iteration   7: 552791.290 ops/s
Iteration   8: 534778.861 ops/s
Iteration   9: 548110.573 ops/s
Iteration  10: 552258.268 ops/s
Iteration  11: 535894.915 ops/s
Iteration  12: 556297.294 ops/s
Iteration  13: 527369.688 ops/s
Iteration  14: 539150.205 ops/s
Iteration  15: 549922.722 ops/s
Iteration  16: 530950.650 ops/s
Iteration  17: 549201.719 ops/s
Iteration  18: 535109.526 ops/s
Iteration  19: 548019.868 ops/s
Iteration  20: 524556.020 ops/s
Iteration  21: 540906.046 ops/s
Iteration  22: 557713.406 ops/s
Iteration  23: 532389.416 ops/s
Iteration  24: 551811.132 ops/s
Iteration  25: 549591.477 ops/s
Iteration  26: 528116.966 ops/s
Iteration  27: 526127.227 ops/s
Iteration  28: 543327.899 ops/s
Iteration  29: 535403.453 ops/s
Iteration  30: 440660.492 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeTest._Benchmark.benchmark_takeFinalValueThrows":
  537694.199 ±(99.9%) 13928.784 ops/s [Average]
  (min, avg, max) = (440660.492, 537694.199, 557713.406), stdev = 20847.949
  CI (99.9%): [523765.415, 551622.982] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score       Error  Units
FlowableTakeTest._Benchmark.benchmark_takeFinalValueThrows  thrpt   30  537694.199 ± 13928.784  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinallyTest._Benchmark.benchmark_normalJustConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinallyTest._Benchmark.benchmark_normalJustConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 634686.871 ops/s
# Warmup Iteration   2: 2903520.269 ops/s
# Warmup Iteration   3: 4533600.224 ops/s
# Warmup Iteration   4: 4173252.217 ops/s
# Warmup Iteration   5: 4439116.631 ops/s
# Warmup Iteration   6: 4241737.307 ops/s
# Warmup Iteration   7: 4206041.775 ops/s
# Warmup Iteration   8: 4493653.089 ops/s
# Warmup Iteration   9: 4203480.500 ops/s
# Warmup Iteration  10: 4408457.565 ops/s
# Warmup Iteration  11: 3859514.846 ops/s
# Warmup Iteration  12: 4002679.027 ops/s
# Warmup Iteration  13: 4538418.953 ops/s
# Warmup Iteration  14: 4327358.636 ops/s
# Warmup Iteration  15: 4526260.559 ops/s
# Warmup Iteration  16: 4218066.020 ops/s
# Warmup Iteration  17: 4463908.004 ops/s
# Warmup Iteration  18: 4437489.283 ops/s
# Warmup Iteration  19: 4294662.999 ops/s
# Warmup Iteration  20: 4413702.492 ops/s
# Warmup Iteration  21: 4306004.507 ops/s
# Warmup Iteration  22: 4566708.997 ops/s
# Warmup Iteration  23: 4326825.938 ops/s
# Warmup Iteration  24: 4312961.185 ops/s
# Warmup Iteration  25: 4355126.743 ops/s
# Warmup Iteration  26: 4347533.128 ops/s
# Warmup Iteration  27: 4509297.861 ops/s
# Warmup Iteration  28: 4308306.056 ops/s
# Warmup Iteration  29: 4612571.353 ops/s
# Warmup Iteration  30: 4512107.810 ops/s
Iteration   1: 4398482.096 ops/s
Iteration   2: 4225688.169 ops/s
Iteration   3: 4433538.306 ops/s
Iteration   4: 4409141.547 ops/s
Iteration   5: 4320898.892 ops/s
Iteration   6: 4387761.410 ops/s
Iteration   7: 4509223.196 ops/s
Iteration   8: 4289172.254 ops/s
Iteration   9: 4548659.948 ops/s
Iteration  10: 4314497.787 ops/s
Iteration  11: 4497580.220 ops/s
Iteration  12: 4315824.525 ops/s
Iteration  13: 4358700.891 ops/s
Iteration  14: 4438629.038 ops/s
Iteration  15: 4324979.862 ops/s
Iteration  16: 4581732.582 ops/s
Iteration  17: 4445193.235 ops/s
Iteration  18: 4217218.187 ops/s
Iteration  19: 4351302.881 ops/s
Iteration  20: 4530848.863 ops/s
Iteration  21: 4344647.529 ops/s
Iteration  22: 4433331.395 ops/s
Iteration  23: 4292600.521 ops/s
Iteration  24: 4386168.312 ops/s
Iteration  25: 4553769.312 ops/s
Iteration  26: 4284873.910 ops/s
Iteration  27: 4483423.617 ops/s
Iteration  28: 4336137.686 ops/s
Iteration  29: 4266533.512 ops/s
Iteration  30: 4352609.437 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinallyTest._Benchmark.benchmark_normalJustConditional":
  4387772.304 ±(99.9%) 66167.820 ops/s [Average]
  (min, avg, max) = (4217218.187, 4387772.304, 4581732.582), stdev = 99036.886
  CI (99.9%): [4321604.484, 4453940.124] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
FlowableDoFinallyTest._Benchmark.benchmark_normalJustConditional  thrpt   30  4387772.304 ± 66167.820  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatTest._Benchmark.benchmark_repeatUntil$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatTest._Benchmark.benchmark_repeatUntil

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 176752.568 ops/s
# Warmup Iteration   2: 873472.990 ops/s
# Warmup Iteration   3: 1251090.284 ops/s
# Warmup Iteration   4: 1112990.538 ops/s
# Warmup Iteration   5: 1388010.696 ops/s
# Warmup Iteration   6: 1339117.111 ops/s
# Warmup Iteration   7: 1318628.037 ops/s
# Warmup Iteration   8: 1397421.016 ops/s
# Warmup Iteration   9: 1325853.819 ops/s
# Warmup Iteration  10: 1340731.703 ops/s
# Warmup Iteration  11: 1354004.151 ops/s
# Warmup Iteration  12: 1347675.676 ops/s
# Warmup Iteration  13: 1324045.010 ops/s
# Warmup Iteration  14: 1367226.747 ops/s
# Warmup Iteration  15: 1323055.419 ops/s
# Warmup Iteration  16: 1381261.816 ops/s
# Warmup Iteration  17: 1309327.637 ops/s
# Warmup Iteration  18: 1380589.660 ops/s
# Warmup Iteration  19: 1386162.356 ops/s
# Warmup Iteration  20: 1311498.808 ops/s
# Warmup Iteration  21: 1313606.105 ops/s
# Warmup Iteration  22: 1359024.611 ops/s
# Warmup Iteration  23: 1313894.349 ops/s
# Warmup Iteration  24: 1335193.478 ops/s
# Warmup Iteration  25: 1354040.646 ops/s
# Warmup Iteration  26: 1323029.621 ops/s
# Warmup Iteration  27: 1386818.784 ops/s
# Warmup Iteration  28: 1323017.171 ops/s
# Warmup Iteration  29: 1387857.873 ops/s
# Warmup Iteration  30: 1294698.447 ops/s
Iteration   1: 1354224.555 ops/s
Iteration   2: 1355720.320 ops/s
Iteration   3: 1327466.157 ops/s
Iteration   4: 1379171.584 ops/s
Iteration   5: 1357569.641 ops/s
Iteration   6: 1327681.324 ops/s
Iteration   7: 1361623.745 ops/s
Iteration   8: 1316777.133 ops/s
Iteration   9: 1409580.590 ops/s
Iteration  10: 1386982.174 ops/s
Iteration  11: 1320609.212 ops/s
Iteration  12: 1358380.665 ops/s
Iteration  13: 1355897.399 ops/s
Iteration  14: 1337436.211 ops/s
Iteration  15: 1399277.305 ops/s
Iteration  16: 1299025.288 ops/s
Iteration  17: 1372835.235 ops/s
Iteration  18: 1324140.920 ops/s
Iteration  19: 1381474.030 ops/s
Iteration  20: 1337527.479 ops/s
Iteration  21: 1320207.719 ops/s
Iteration  22: 1367465.511 ops/s
Iteration  23: 1318671.582 ops/s
Iteration  24: 1373786.172 ops/s
Iteration  25: 1121683.108 ops/s
Iteration  26: 1306610.734 ops/s
Iteration  27: 1371574.725 ops/s
Iteration  28: 1328105.856 ops/s
Iteration  29: 1400361.770 ops/s
Iteration  30: 1296198.909 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatTest._Benchmark.benchmark_repeatUntil":
  1342268.902 ±(99.9%) 34637.269 ops/s [Average]
  (min, avg, max) = (1121683.108, 1342268.902, 1409580.590), stdev = 51843.438
  CI (99.9%): [1307631.633, 1376906.171] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score       Error  Units
FlowableRepeatTest._Benchmark.benchmark_repeatUntil  thrpt   30  1342268.902 ± 34637.269  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeTest._Benchmark.benchmark_producerRequestThroughTakeIsModified$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeTest._Benchmark.benchmark_producerRequestThroughTakeIsModified

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1700359.030 ops/s
# Warmup Iteration   2: 4808507.289 ops/s
# Warmup Iteration   3: 6757933.003 ops/s
# Warmup Iteration   4: 6356140.733 ops/s
# Warmup Iteration   5: 6636425.168 ops/s
# Warmup Iteration   6: 6464682.912 ops/s
# Warmup Iteration   7: 6716864.781 ops/s
# Warmup Iteration   8: 6860948.749 ops/s
# Warmup Iteration   9: 6318592.259 ops/s
# Warmup Iteration  10: 6708912.590 ops/s
# Warmup Iteration  11: 6303189.045 ops/s
# Warmup Iteration  12: 6562020.435 ops/s
# Warmup Iteration  13: 6530492.138 ops/s
# Warmup Iteration  14: 6522872.262 ops/s
# Warmup Iteration  15: 6735879.676 ops/s
# Warmup Iteration  16: 6465905.424 ops/s
# Warmup Iteration  17: 6767990.026 ops/s
# Warmup Iteration  18: 6458837.015 ops/s
# Warmup Iteration  19: 6504622.440 ops/s
# Warmup Iteration  20: 6720248.544 ops/s
# Warmup Iteration  21: 6602761.669 ops/s
# Warmup Iteration  22: 6477736.759 ops/s
# Warmup Iteration  23: 6887627.442 ops/s
# Warmup Iteration  24: 6340362.093 ops/s
# Warmup Iteration  25: 6380588.369 ops/s
# Warmup Iteration  26: 6579241.820 ops/s
# Warmup Iteration  27: 6597337.191 ops/s
# Warmup Iteration  28: 6625081.922 ops/s
# Warmup Iteration  29: 6476681.750 ops/s
# Warmup Iteration  30: 6621882.389 ops/s
Iteration   1: 6289193.004 ops/s
Iteration   2: 6479061.655 ops/s
Iteration   3: 6836747.126 ops/s
Iteration   4: 6402516.284 ops/s
Iteration   5: 6648254.704 ops/s
Iteration   6: 6503606.434 ops/s
Iteration   7: 6608871.692 ops/s
Iteration   8: 6452985.073 ops/s
Iteration   9: 6695682.119 ops/s
Iteration  10: 6655135.900 ops/s
Iteration  11: 6484888.774 ops/s
Iteration  12: 6785575.775 ops/s
Iteration  13: 6449478.437 ops/s
Iteration  14: 6443769.186 ops/s
Iteration  15: 6453707.477 ops/s
Iteration  16: 6429520.286 ops/s
Iteration  17: 6548723.335 ops/s
Iteration  18: 6700470.586 ops/s
Iteration  19: 6473253.541 ops/s
Iteration  20: 6650066.334 ops/s
Iteration  21: 6602508.742 ops/s
Iteration  22: 6642723.577 ops/s
Iteration  23: 6663742.084 ops/s
Iteration  24: 6425581.748 ops/s
Iteration  25: 6934241.213 ops/s
Iteration  26: 6425271.423 ops/s
Iteration  27: 6539216.323 ops/s
Iteration  28: 6619286.085 ops/s
Iteration  29: 6658685.126 ops/s
Iteration  30: 6424994.421 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeTest._Benchmark.benchmark_producerRequestThroughTakeIsModified":
  6564258.615 ±(99.9%) 96633.746 ops/s [Average]
  (min, avg, max) = (6289193.004, 6564258.615, 6934241.213), stdev = 144636.852
  CI (99.9%): [6467624.870, 6660892.361] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score       Error  Units
FlowableTakeTest._Benchmark.benchmark_producerRequestThroughTakeIsModified  thrpt   30  6564258.615 ± 96633.746  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeTest._Benchmark.benchmark_producerRequestThroughTake$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeTest._Benchmark.benchmark_producerRequestThroughTake

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2564589.230 ops/s
# Warmup Iteration   2: 4675274.865 ops/s
# Warmup Iteration   3: 6208214.219 ops/s
# Warmup Iteration   4: 6767252.127 ops/s
# Warmup Iteration   5: 6211515.568 ops/s
# Warmup Iteration   6: 6698543.876 ops/s
# Warmup Iteration   7: 6439719.429 ops/s
# Warmup Iteration   8: 6868724.237 ops/s
# Warmup Iteration   9: 6504765.971 ops/s
# Warmup Iteration  10: 6720759.876 ops/s
# Warmup Iteration  11: 6650851.013 ops/s
# Warmup Iteration  12: 6426625.993 ops/s
# Warmup Iteration  13: 6593344.913 ops/s
# Warmup Iteration  14: 6618579.147 ops/s
# Warmup Iteration  15: 6451030.575 ops/s
# Warmup Iteration  16: 6811426.378 ops/s
# Warmup Iteration  17: 6479361.822 ops/s
# Warmup Iteration  18: 6700152.795 ops/s
# Warmup Iteration  19: 6289650.317 ops/s
# Warmup Iteration  20: 6588804.470 ops/s
# Warmup Iteration  21: 6775702.497 ops/s
# Warmup Iteration  22: 6433782.124 ops/s
# Warmup Iteration  23: 6505197.884 ops/s
# Warmup Iteration  24: 6518539.974 ops/s
# Warmup Iteration  25: 6594703.114 ops/s
# Warmup Iteration  26: 6461744.890 ops/s
# Warmup Iteration  27: 6406242.429 ops/s
# Warmup Iteration  28: 6615575.285 ops/s
# Warmup Iteration  29: 6356392.183 ops/s
# Warmup Iteration  30: 6784144.574 ops/s
Iteration   1: 6392337.354 ops/s
Iteration   2: 6816299.001 ops/s
Iteration   3: 6567684.107 ops/s
Iteration   4: 6369329.809 ops/s
Iteration   5: 6651242.031 ops/s
Iteration   6: 6559813.768 ops/s
Iteration   7: 6261712.392 ops/s
Iteration   8: 6643615.248 ops/s
Iteration   9: 6537346.840 ops/s
Iteration  10: 6761011.057 ops/s
Iteration  11: 6503291.972 ops/s
Iteration  12: 6546941.073 ops/s
Iteration  13: 6429125.520 ops/s
Iteration  14: 6666050.638 ops/s
Iteration  15: 6465013.760 ops/s
Iteration  16: 6671279.435 ops/s
Iteration  17: 6683845.900 ops/s
Iteration  18: 6583048.662 ops/s
Iteration  19: 5318990.786 ops/s
Iteration  20: 6870882.424 ops/s
Iteration  21: 6271597.268 ops/s
Iteration  22: 6748717.349 ops/s
Iteration  23: 6480172.054 ops/s
Iteration  24: 6574799.724 ops/s
Iteration  25: 6344500.142 ops/s
Iteration  26: 6668784.447 ops/s
Iteration  27: 6747277.817 ops/s
Iteration  28: 6335603.742 ops/s
Iteration  29: 6526442.723 ops/s
Iteration  30: 6488646.193 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeTest._Benchmark.benchmark_producerRequestThroughTake":
  6516180.108 ±(99.9%) 183973.088 ops/s [Average]
  (min, avg, max) = (5318990.786, 6516180.108, 6870882.424), stdev = 275362.279
  CI (99.9%): [6332207.020, 6700153.196] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score        Error  Units
FlowableTakeTest._Benchmark.benchmark_producerRequestThroughTake  thrpt   30  6516180.108 ± 183973.088  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisherTest._Benchmark.benchmark_otherSignalsAndCompletes$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisherTest._Benchmark.benchmark_otherSignalsAndCompletes

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 252907.572 ops/s
# Warmup Iteration   2: 1057139.013 ops/s
# Warmup Iteration   3: 1434621.472 ops/s
# Warmup Iteration   4: 1682813.937 ops/s
# Warmup Iteration   5: 1805718.683 ops/s
# Warmup Iteration   6: 1556252.119 ops/s
# Warmup Iteration   7: 1847806.664 ops/s
# Warmup Iteration   8: 1785345.951 ops/s
# Warmup Iteration   9: 1766363.535 ops/s
# Warmup Iteration  10: 1771704.734 ops/s
# Warmup Iteration  11: 1730500.241 ops/s
# Warmup Iteration  12: 1859754.022 ops/s
# Warmup Iteration  13: 1763651.019 ops/s
# Warmup Iteration  14: 1732298.723 ops/s
# Warmup Iteration  15: 1830704.002 ops/s
# Warmup Iteration  16: 1743669.252 ops/s
# Warmup Iteration  17: 1829364.464 ops/s
# Warmup Iteration  18: 1807267.089 ops/s
# Warmup Iteration  19: 1700749.477 ops/s
# Warmup Iteration  20: 1783277.058 ops/s
# Warmup Iteration  21: 1728137.930 ops/s
# Warmup Iteration  22: 1737602.567 ops/s
# Warmup Iteration  23: 1800500.320 ops/s
# Warmup Iteration  24: 1737289.643 ops/s
# Warmup Iteration  25: 1687740.079 ops/s
# Warmup Iteration  26: 1836655.167 ops/s
# Warmup Iteration  27: 1708310.688 ops/s
# Warmup Iteration  28: 1784520.682 ops/s
# Warmup Iteration  29: 1793393.768 ops/s
# Warmup Iteration  30: 1795401.985 ops/s
Iteration   1: 1803227.067 ops/s
Iteration   2: 1740528.176 ops/s
Iteration   3: 1825212.312 ops/s
Iteration   4: 1717414.230 ops/s
Iteration   5: 1790617.457 ops/s
Iteration   6: 1755000.869 ops/s
Iteration   7: 1774062.639 ops/s
Iteration   8: 1772220.565 ops/s
Iteration   9: 1752288.873 ops/s
Iteration  10: 1849493.483 ops/s
Iteration  11: 1716971.874 ops/s
Iteration  12: 1793266.398 ops/s
Iteration  13: 1754230.173 ops/s
Iteration  14: 1777820.744 ops/s
Iteration  15: 1724980.773 ops/s
Iteration  16: 1799871.093 ops/s
Iteration  17: 1837059.356 ops/s
Iteration  18: 1708369.744 ops/s
Iteration  19: 1800841.133 ops/s
Iteration  20: 1744282.687 ops/s
Iteration  21: 1807065.353 ops/s
Iteration  22: 1729040.107 ops/s
Iteration  23: 1797276.263 ops/s
Iteration  24: 1783746.606 ops/s
Iteration  25: 1806872.710 ops/s
Iteration  26: 1737862.825 ops/s
Iteration  27: 1767074.145 ops/s
Iteration  28: 1810499.792 ops/s
Iteration  29: 1697998.316 ops/s
Iteration  30: 1769368.142 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisherTest._Benchmark.benchmark_otherSignalsAndCompletes":
  1771485.464 ±(99.9%) 26237.657 ops/s [Average]
  (min, avg, max) = (1697998.316, 1771485.464, 1849493.483), stdev = 39271.293
  CI (99.9%): [1745247.807, 1797723.121] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score       Error  Units
MaybeTakeUntilPublisherTest._Benchmark.benchmark_otherSignalsAndCompletes  thrpt   30  1771485.464 ± 26237.657  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArrayTest._Benchmark.benchmark_badRequest$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArrayTest._Benchmark.benchmark_badRequest

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 80913.770 ops/s
# Warmup Iteration   2: 197787.722 ops/s
# Warmup Iteration   3: 409144.323 ops/s
# Warmup Iteration   4: 444838.693 ops/s
# Warmup Iteration   5: 458194.276 ops/s
# Warmup Iteration   6: 435918.841 ops/s
# Warmup Iteration   7: 487103.231 ops/s
# Warmup Iteration   8: 471574.613 ops/s
# Warmup Iteration   9: 472139.043 ops/s
# Warmup Iteration  10: 501761.966 ops/s
# Warmup Iteration  11: 467186.102 ops/s
# Warmup Iteration  12: 485286.757 ops/s
# Warmup Iteration  13: 466732.296 ops/s
# Warmup Iteration  14: 489998.516 ops/s
# Warmup Iteration  15: 469705.818 ops/s
# Warmup Iteration  16: 479474.137 ops/s
# Warmup Iteration  17: 502575.359 ops/s
# Warmup Iteration  18: 489280.730 ops/s
# Warmup Iteration  19: 514002.758 ops/s
# Warmup Iteration  20: 503051.796 ops/s
# Warmup Iteration  21: 518180.234 ops/s
# Warmup Iteration  22: 493725.787 ops/s
# Warmup Iteration  23: 497086.457 ops/s
# Warmup Iteration  24: 510600.696 ops/s
# Warmup Iteration  25: 501358.327 ops/s
# Warmup Iteration  26: 476922.788 ops/s
# Warmup Iteration  27: 510537.149 ops/s
# Warmup Iteration  28: 486379.247 ops/s
# Warmup Iteration  29: 484819.103 ops/s
# Warmup Iteration  30: 517346.362 ops/s
Iteration   1: 489390.109 ops/s
Iteration   2: 507270.508 ops/s
Iteration   3: 496607.955 ops/s
Iteration   4: 465975.558 ops/s
Iteration   5: 511792.152 ops/s
Iteration   6: 487813.515 ops/s
Iteration   7: 503823.091 ops/s
Iteration   8: 492483.622 ops/s
Iteration   9: 519464.352 ops/s
Iteration  10: 497142.232 ops/s
Iteration  11: 490143.177 ops/s
Iteration  12: 512449.190 ops/s
Iteration  13: 495782.813 ops/s
Iteration  14: 413695.098 ops/s
Iteration  15: 494732.180 ops/s
Iteration  16: 495409.109 ops/s
Iteration  17: 485525.373 ops/s
Iteration  18: 519324.213 ops/s
Iteration  19: 489274.798 ops/s
Iteration  20: 507945.104 ops/s
Iteration  21: 485728.854 ops/s
Iteration  22: 493851.476 ops/s
Iteration  23: 500337.308 ops/s
Iteration  24: 510962.944 ops/s
Iteration  25: 503815.856 ops/s
Iteration  26: 496154.418 ops/s
Iteration  27: 514303.738 ops/s
Iteration  28: 491840.395 ops/s
Iteration  29: 517627.279 ops/s
Iteration  30: 483745.647 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArrayTest._Benchmark.benchmark_badRequest":
  495813.735 ±(99.9%) 13200.098 ops/s [Average]
  (min, avg, max) = (413695.098, 495813.735, 519464.352), stdev = 19757.286
  CI (99.9%): [482613.638, 509013.833] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score       Error  Units
MaybeConcatArrayTest._Benchmark.benchmark_badRequest  thrpt   30  495813.735 ± 13200.098  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinallyTest._Benchmark.benchmark_actionThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinallyTest._Benchmark.benchmark_actionThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 27456.658 ops/s
# Warmup Iteration   2: 142150.920 ops/s
# Warmup Iteration   3: 199884.572 ops/s
# Warmup Iteration   4: 215367.985 ops/s
# Warmup Iteration   5: 224999.199 ops/s
# Warmup Iteration   6: 214799.734 ops/s
# Warmup Iteration   7: 212932.209 ops/s
# Warmup Iteration   8: 216870.543 ops/s
# Warmup Iteration   9: 214045.575 ops/s
# Warmup Iteration  10: 218977.555 ops/s
# Warmup Iteration  11: 215436.914 ops/s
# Warmup Iteration  12: 221607.980 ops/s
# Warmup Iteration  13: 216442.124 ops/s
# Warmup Iteration  14: 215541.028 ops/s
# Warmup Iteration  15: 210510.383 ops/s
# Warmup Iteration  16: 215287.066 ops/s
# Warmup Iteration  17: 233493.701 ops/s
# Warmup Iteration  18: 212022.062 ops/s
# Warmup Iteration  19: 224504.267 ops/s
# Warmup Iteration  20: 209624.863 ops/s
# Warmup Iteration  21: 229435.655 ops/s
# Warmup Iteration  22: 231304.128 ops/s
# Warmup Iteration  23: 217894.985 ops/s
# Warmup Iteration  24: 232199.122 ops/s
# Warmup Iteration  25: 224472.094 ops/s
# Warmup Iteration  26: 225809.792 ops/s
# Warmup Iteration  27: 227139.091 ops/s
# Warmup Iteration  28: 219872.413 ops/s
# Warmup Iteration  29: 225387.215 ops/s
# Warmup Iteration  30: 221880.477 ops/s
Iteration   1: 234959.649 ops/s
Iteration   2: 220439.083 ops/s
Iteration   3: 230240.603 ops/s
Iteration   4: 227631.224 ops/s
Iteration   5: 219922.239 ops/s
Iteration   6: 228799.476 ops/s
Iteration   7: 212162.800 ops/s
Iteration   8: 225466.949 ops/s
Iteration   9: 234142.399 ops/s
Iteration  10: 224097.082 ops/s
Iteration  11: 227294.169 ops/s
Iteration  12: 224101.988 ops/s
Iteration  13: 237487.135 ops/s
Iteration  14: 222569.473 ops/s
Iteration  15: 223340.960 ops/s
Iteration  16: 228386.009 ops/s
Iteration  17: 222845.304 ops/s
Iteration  18: 225928.136 ops/s
Iteration  19: 232212.590 ops/s
Iteration  20: 218430.899 ops/s
Iteration  21: 221248.146 ops/s
Iteration  22: 227305.850 ops/s
Iteration  23: 225301.700 ops/s
Iteration  24: 226444.673 ops/s
Iteration  25: 232981.674 ops/s
Iteration  26: 228556.148 ops/s
Iteration  27: 221598.260 ops/s
Iteration  28: 227035.832 ops/s
Iteration  29: 228325.993 ops/s
Iteration  30: 229581.188 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinallyTest._Benchmark.benchmark_actionThrows":
  226294.588 ±(99.9%) 3557.517 ops/s [Average]
  (min, avg, max) = (212162.800, 226294.588, 237487.135), stdev = 5324.724
  CI (99.9%): [222737.071, 229852.104] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score      Error  Units
FlowableDoFinallyTest._Benchmark.benchmark_actionThrows  thrpt   30  226294.588 ± 3557.517  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleMiscTest._Benchmark.benchmark_repeatTimes$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleMiscTest._Benchmark.benchmark_repeatTimes

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 282960.565 ops/s
# Warmup Iteration   2: 1150991.579 ops/s
# Warmup Iteration   3: 1318264.314 ops/s
# Warmup Iteration   4: 1465884.952 ops/s
# Warmup Iteration   5: 1491078.463 ops/s
# Warmup Iteration   6: 1437523.779 ops/s
# Warmup Iteration   7: 1429315.728 ops/s
# Warmup Iteration   8: 1504536.050 ops/s
# Warmup Iteration   9: 1341241.602 ops/s
# Warmup Iteration  10: 1368773.856 ops/s
# Warmup Iteration  11: 1441574.983 ops/s
# Warmup Iteration  12: 1423184.029 ops/s
# Warmup Iteration  13: 1498277.204 ops/s
# Warmup Iteration  14: 1440735.639 ops/s
# Warmup Iteration  15: 1493941.452 ops/s
# Warmup Iteration  16: 1450339.299 ops/s
# Warmup Iteration  17: 1445724.079 ops/s
# Warmup Iteration  18: 1505888.523 ops/s
# Warmup Iteration  19: 1445681.881 ops/s
# Warmup Iteration  20: 1485206.078 ops/s
# Warmup Iteration  21: 1428786.798 ops/s
# Warmup Iteration  22: 1437692.731 ops/s
# Warmup Iteration  23: 1467030.099 ops/s
# Warmup Iteration  24: 1422510.822 ops/s
# Warmup Iteration  25: 1497825.934 ops/s
# Warmup Iteration  26: 1428776.069 ops/s
# Warmup Iteration  27: 1513428.715 ops/s
# Warmup Iteration  28: 1439746.114 ops/s
# Warmup Iteration  29: 1459156.337 ops/s
# Warmup Iteration  30: 1501329.803 ops/s
Iteration   1: 1423040.824 ops/s
Iteration   2: 1503199.459 ops/s
Iteration   3: 1441272.424 ops/s
Iteration   4: 1465886.088 ops/s
Iteration   5: 1471479.692 ops/s
Iteration   6: 1433232.673 ops/s
Iteration   7: 1482587.467 ops/s
Iteration   8: 1487160.222 ops/s
Iteration   9: 1223651.251 ops/s
Iteration  10: 1456301.079 ops/s
Iteration  11: 1427826.586 ops/s
Iteration  12: 1476979.610 ops/s
Iteration  13: 1456055.407 ops/s
Iteration  14: 1403169.124 ops/s
Iteration  15: 1530631.457 ops/s
Iteration  16: 1448066.867 ops/s
Iteration  17: 1484015.181 ops/s
Iteration  18: 1520560.191 ops/s
Iteration  19: 1403670.160 ops/s
Iteration  20: 1497656.420 ops/s
Iteration  21: 1445858.036 ops/s
Iteration  22: 1517448.772 ops/s
Iteration  23: 1440526.749 ops/s
Iteration  24: 1445544.856 ops/s
Iteration  25: 1457730.329 ops/s
Iteration  26: 1413527.586 ops/s
Iteration  27: 1449445.942 ops/s
Iteration  28: 1468346.057 ops/s
Iteration  29: 1411742.778 ops/s
Iteration  30: 1502345.796 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleMiscTest._Benchmark.benchmark_repeatTimes":
  1452965.303 ±(99.9%) 37052.824 ops/s [Average]
  (min, avg, max) = (1223651.251, 1452965.303, 1530631.457), stdev = 55458.926
  CI (99.9%): [1415912.479, 1490018.126] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score       Error  Units
SingleMiscTest._Benchmark.benchmark_repeatTimes  thrpt   30  1452965.303 ± 37052.824  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleMiscTest._Benchmark.benchmark_repeatUntil$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleMiscTest._Benchmark.benchmark_repeatUntil

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 181180.058 ops/s
# Warmup Iteration   2: 883611.328 ops/s
# Warmup Iteration   3: 1520009.223 ops/s
# Warmup Iteration   4: 1454896.021 ops/s
# Warmup Iteration   5: 1501313.072 ops/s
# Warmup Iteration   6: 1371261.746 ops/s
# Warmup Iteration   7: 1396332.426 ops/s
# Warmup Iteration   8: 1391036.191 ops/s
# Warmup Iteration   9: 1479263.260 ops/s
# Warmup Iteration  10: 1523108.304 ops/s
# Warmup Iteration  11: 1520121.343 ops/s
# Warmup Iteration  12: 1459214.495 ops/s
# Warmup Iteration  13: 1500269.605 ops/s
# Warmup Iteration  14: 1508186.332 ops/s
# Warmup Iteration  15: 1524187.542 ops/s
# Warmup Iteration  16: 1472058.959 ops/s
# Warmup Iteration  17: 1510403.560 ops/s
# Warmup Iteration  18: 1552901.715 ops/s
# Warmup Iteration  19: 1445169.495 ops/s
# Warmup Iteration  20: 1511893.696 ops/s
# Warmup Iteration  21: 1525532.879 ops/s
# Warmup Iteration  22: 1436156.632 ops/s
# Warmup Iteration  23: 1518368.164 ops/s
# Warmup Iteration  24: 1456785.979 ops/s
# Warmup Iteration  25: 1459274.442 ops/s
# Warmup Iteration  26: 1504987.294 ops/s
# Warmup Iteration  27: 1501167.011 ops/s
# Warmup Iteration  28: 1523460.518 ops/s
# Warmup Iteration  29: 1452053.586 ops/s
# Warmup Iteration  30: 1547257.630 ops/s
Iteration   1: 1503918.588 ops/s
Iteration   2: 1413250.818 ops/s
Iteration   3: 1515351.509 ops/s
Iteration   4: 1500423.354 ops/s
Iteration   5: 1517949.441 ops/s
Iteration   6: 1512479.626 ops/s
Iteration   7: 1476004.960 ops/s
Iteration   8: 1533025.602 ops/s
Iteration   9: 1456880.521 ops/s
Iteration  10: 1528837.467 ops/s
Iteration  11: 1482678.063 ops/s
Iteration  12: 1490950.158 ops/s
Iteration  13: 1524484.917 ops/s
Iteration  14: 1458988.850 ops/s
Iteration  15: 1467914.383 ops/s
Iteration  16: 1527433.968 ops/s
Iteration  17: 1486271.814 ops/s
Iteration  18: 1550793.731 ops/s
Iteration  19: 1440447.201 ops/s
Iteration  20: 1515877.423 ops/s
Iteration  21: 1491119.056 ops/s
Iteration  22: 1493000.115 ops/s
Iteration  23: 1503618.326 ops/s
Iteration  24: 1491218.886 ops/s
Iteration  25: 1519047.372 ops/s
Iteration  26: 1536268.305 ops/s
Iteration  27: 1455216.263 ops/s
Iteration  28: 1549699.510 ops/s
Iteration  29: 1486497.110 ops/s
Iteration  30: 1480278.795 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleMiscTest._Benchmark.benchmark_repeatUntil":
  1496997.538 ±(99.9%) 21594.932 ops/s [Average]
  (min, avg, max) = (1413250.818, 1496997.538, 1550793.731), stdev = 32322.280
  CI (99.9%): [1475402.605, 1518592.470] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score       Error  Units
SingleMiscTest._Benchmark.benchmark_repeatUntil  thrpt   30  1496997.538 ± 21594.932  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSingleTest._Benchmark.benchmark_cancelComposes$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSingleTest._Benchmark.benchmark_cancelComposes

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 698686.966 ops/s
# Warmup Iteration   2: 2969257.705 ops/s
# Warmup Iteration   3: 3215464.395 ops/s
# Warmup Iteration   4: 3889588.027 ops/s
# Warmup Iteration   5: 4040637.710 ops/s
# Warmup Iteration   6: 3976998.357 ops/s
# Warmup Iteration   7: 3851078.404 ops/s
# Warmup Iteration   8: 3962205.150 ops/s
# Warmup Iteration   9: 3878478.036 ops/s
# Warmup Iteration  10: 3876633.423 ops/s
# Warmup Iteration  11: 3811542.362 ops/s
# Warmup Iteration  12: 3859270.507 ops/s
# Warmup Iteration  13: 3979070.806 ops/s
# Warmup Iteration  14: 3801540.445 ops/s
# Warmup Iteration  15: 3939260.131 ops/s
# Warmup Iteration  16: 3818354.882 ops/s
# Warmup Iteration  17: 3734254.272 ops/s
# Warmup Iteration  18: 3952051.100 ops/s
# Warmup Iteration  19: 3680188.753 ops/s
# Warmup Iteration  20: 3958657.114 ops/s
# Warmup Iteration  21: 3792402.681 ops/s
# Warmup Iteration  22: 3965950.201 ops/s
# Warmup Iteration  23: 4037561.257 ops/s
# Warmup Iteration  24: 3875858.555 ops/s
# Warmup Iteration  25: 3800223.410 ops/s
# Warmup Iteration  26: 3906437.191 ops/s
# Warmup Iteration  27: 3771052.500 ops/s
# Warmup Iteration  28: 3846785.755 ops/s
# Warmup Iteration  29: 4009557.082 ops/s
# Warmup Iteration  30: 3820784.765 ops/s
Iteration   1: 3785535.822 ops/s
Iteration   2: 4017819.879 ops/s
Iteration   3: 3036620.584 ops/s
Iteration   4: 3935317.353 ops/s
Iteration   5: 3817315.502 ops/s
Iteration   6: 3874135.218 ops/s
Iteration   7: 4024345.210 ops/s
Iteration   8: 3733775.693 ops/s
Iteration   9: 3921094.287 ops/s
Iteration  10: 3858530.432 ops/s
Iteration  11: 3882203.755 ops/s
Iteration  12: 3899434.286 ops/s
Iteration  13: 3795702.938 ops/s
Iteration  14: 3829992.246 ops/s
Iteration  15: 3856417.216 ops/s
Iteration  16: 3795445.325 ops/s
Iteration  17: 4097838.688 ops/s
Iteration  18: 3799084.643 ops/s
Iteration  19: 3923078.670 ops/s
Iteration  20: 4001130.300 ops/s
Iteration  21: 3785384.732 ops/s
Iteration  22: 3961851.876 ops/s
Iteration  23: 3750747.771 ops/s
Iteration  24: 3846327.229 ops/s
Iteration  25: 4034376.979 ops/s
Iteration  26: 3860742.972 ops/s
Iteration  27: 3966298.650 ops/s
Iteration  28: 3747381.246 ops/s
Iteration  29: 4067725.555 ops/s
Iteration  30: 3817891.868 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSingleTest._Benchmark.benchmark_cancelComposes":
  3857451.564 ±(99.9%) 123156.243 ops/s [Average]
  (min, avg, max) = (3036620.584, 3857451.564, 4097838.688), stdev = 184334.481
  CI (99.9%): [3734295.321, 3980607.807] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score        Error  Units
FlowableFromSingleTest._Benchmark.benchmark_cancelComposes  thrpt   30  3857451.564 ± 123156.243  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleConcatEagerTest._Benchmark.benchmark_publisherError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleConcatEagerTest._Benchmark.benchmark_publisherError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 32208.262 ops/s
# Warmup Iteration   2: 249442.737 ops/s
# Warmup Iteration   3: 419267.921 ops/s
# Warmup Iteration   4: 448441.344 ops/s
# Warmup Iteration   5: 392652.073 ops/s
# Warmup Iteration   6: 484344.803 ops/s
# Warmup Iteration   7: 476817.295 ops/s
# Warmup Iteration   8: 470937.486 ops/s
# Warmup Iteration   9: 466774.299 ops/s
# Warmup Iteration  10: 469710.119 ops/s
# Warmup Iteration  11: 469277.395 ops/s
# Warmup Iteration  12: 465920.018 ops/s
# Warmup Iteration  13: 478024.972 ops/s
# Warmup Iteration  14: 463302.142 ops/s
# Warmup Iteration  15: 474024.268 ops/s
# Warmup Iteration  16: 470634.034 ops/s
# Warmup Iteration  17: 478011.994 ops/s
# Warmup Iteration  18: 499606.219 ops/s
# Warmup Iteration  19: 474587.291 ops/s
# Warmup Iteration  20: 479359.063 ops/s
# Warmup Iteration  21: 475214.871 ops/s
# Warmup Iteration  22: 475385.046 ops/s
# Warmup Iteration  23: 476777.181 ops/s
# Warmup Iteration  24: 473206.168 ops/s
# Warmup Iteration  25: 485311.530 ops/s
# Warmup Iteration  26: 481455.582 ops/s
# Warmup Iteration  27: 492096.331 ops/s
# Warmup Iteration  28: 476340.658 ops/s
# Warmup Iteration  29: 496832.043 ops/s
# Warmup Iteration  30: 482267.985 ops/s
Iteration   1: 493475.193 ops/s
Iteration   2: 477612.332 ops/s
Iteration   3: 498534.557 ops/s
Iteration   4: 500688.619 ops/s
Iteration   5: 463612.454 ops/s
Iteration   6: 505513.562 ops/s
Iteration   7: 475403.973 ops/s
Iteration   8: 506316.675 ops/s
Iteration   9: 462623.431 ops/s
Iteration  10: 510827.507 ops/s
Iteration  11: 461598.585 ops/s
Iteration  12: 496640.143 ops/s
Iteration  13: 493823.343 ops/s
Iteration  14: 474649.636 ops/s
Iteration  15: 476650.400 ops/s
Iteration  16: 519064.948 ops/s
Iteration  17: 466617.611 ops/s
Iteration  18: 501932.015 ops/s
Iteration  19: 494321.295 ops/s
Iteration  20: 494331.086 ops/s
Iteration  21: 488476.150 ops/s
Iteration  22: 478990.895 ops/s
Iteration  23: 490695.372 ops/s
Iteration  24: 491230.575 ops/s
Iteration  25: 489808.322 ops/s
Iteration  26: 491417.342 ops/s
Iteration  27: 487879.468 ops/s
Iteration  28: 501949.103 ops/s
Iteration  29: 487002.308 ops/s
Iteration  30: 479423.508 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleConcatEagerTest._Benchmark.benchmark_publisherError":
  488703.680 ±(99.9%) 9727.804 ops/s [Average]
  (min, avg, max) = (461598.585, 488703.680, 519064.948), stdev = 14560.120
  CI (99.9%): [478975.877, 498431.484] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
SingleConcatEagerTest._Benchmark.benchmark_publisherError  thrpt   30  488703.680 ± 9727.804  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleConcatEagerTest._Benchmark.benchmark_iterableNormal$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleConcatEagerTest._Benchmark.benchmark_iterableNormal

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 119104.140 ops/s
# Warmup Iteration   2: 785691.705 ops/s
# Warmup Iteration   3: 1204124.628 ops/s
# Warmup Iteration   4: 1230978.588 ops/s
# Warmup Iteration   5: 1238784.714 ops/s
# Warmup Iteration   6: 1148121.463 ops/s
# Warmup Iteration   7: 1210281.901 ops/s
# Warmup Iteration   8: 1307070.396 ops/s
# Warmup Iteration   9: 1260619.574 ops/s
# Warmup Iteration  10: 1228188.709 ops/s
# Warmup Iteration  11: 1345210.922 ops/s
# Warmup Iteration  12: 1250685.795 ops/s
# Warmup Iteration  13: 1289278.770 ops/s
# Warmup Iteration  14: 1313470.756 ops/s
# Warmup Iteration  15: 1269038.523 ops/s
# Warmup Iteration  16: 1310205.256 ops/s
# Warmup Iteration  17: 1257696.055 ops/s
# Warmup Iteration  18: 1275928.262 ops/s
# Warmup Iteration  19: 1241174.128 ops/s
# Warmup Iteration  20: 1248761.875 ops/s
# Warmup Iteration  21: 1266733.875 ops/s
# Warmup Iteration  22: 1216074.607 ops/s
# Warmup Iteration  23: 1307498.318 ops/s
# Warmup Iteration  24: 1225440.839 ops/s
# Warmup Iteration  25: 1254917.562 ops/s
# Warmup Iteration  26: 1195931.680 ops/s
# Warmup Iteration  27: 1247919.120 ops/s
# Warmup Iteration  28: 998813.566 ops/s
# Warmup Iteration  29: 1274770.664 ops/s
# Warmup Iteration  30: 1260410.475 ops/s
Iteration   1: 1223587.232 ops/s
Iteration   2: 1312330.003 ops/s
Iteration   3: 1249828.335 ops/s
Iteration   4: 1276156.984 ops/s
Iteration   5: 1260588.428 ops/s
Iteration   6: 1262307.634 ops/s
Iteration   7: 1302688.254 ops/s
Iteration   8: 1258973.493 ops/s
Iteration   9: 1251308.146 ops/s
Iteration  10: 1268299.657 ops/s
Iteration  11: 1298584.089 ops/s
Iteration  12: 1298596.356 ops/s
Iteration  13: 1190318.497 ops/s
Iteration  14: 1316930.898 ops/s
Iteration  15: 1319073.871 ops/s
Iteration  16: 1254857.204 ops/s
Iteration  17: 1273988.658 ops/s
Iteration  18: 1254308.420 ops/s
Iteration  19: 1289239.069 ops/s
Iteration  20: 1292074.510 ops/s
Iteration  21: 1277965.054 ops/s
Iteration  22: 1272409.037 ops/s
Iteration  23: 1277821.448 ops/s
Iteration  24: 1270065.445 ops/s
Iteration  25: 1291093.098 ops/s
Iteration  26: 1260270.593 ops/s
Iteration  27: 1230457.161 ops/s
Iteration  28: 1324441.804 ops/s
Iteration  29: 1238578.179 ops/s
Iteration  30: 1281991.879 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleConcatEagerTest._Benchmark.benchmark_iterableNormal":
  1272637.781 ±(99.9%) 20060.437 ops/s [Average]
  (min, avg, max) = (1190318.497, 1272637.781, 1324441.804), stdev = 30025.520
  CI (99.9%): [1252577.344, 1292698.219] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
SingleConcatEagerTest._Benchmark.benchmark_iterableNormal  thrpt   30  1272637.781 ± 20060.437  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleMiscTest._Benchmark.benchmark_repeat$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleMiscTest._Benchmark.benchmark_repeat

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 225422.328 ops/s
# Warmup Iteration   2: 666158.839 ops/s
# Warmup Iteration   3: 1145310.993 ops/s
# Warmup Iteration   4: 1016709.188 ops/s
# Warmup Iteration   5: 1284327.082 ops/s
# Warmup Iteration   6: 1179041.105 ops/s
# Warmup Iteration   7: 1275686.518 ops/s
# Warmup Iteration   8: 1280029.343 ops/s
# Warmup Iteration   9: 1204690.099 ops/s
# Warmup Iteration  10: 1255517.667 ops/s
# Warmup Iteration  11: 1228472.456 ops/s
# Warmup Iteration  12: 1232679.695 ops/s
# Warmup Iteration  13: 1276701.159 ops/s
# Warmup Iteration  14: 1227016.916 ops/s
# Warmup Iteration  15: 1241901.991 ops/s
# Warmup Iteration  16: 1200737.614 ops/s
# Warmup Iteration  17: 1241846.557 ops/s
# Warmup Iteration  18: 1278916.751 ops/s
# Warmup Iteration  19: 1172579.847 ops/s
# Warmup Iteration  20: 1252778.800 ops/s
# Warmup Iteration  21: 1245487.277 ops/s
# Warmup Iteration  22: 1257008.403 ops/s
# Warmup Iteration  23: 1237400.320 ops/s
# Warmup Iteration  24: 1215293.524 ops/s
# Warmup Iteration  25: 1261481.292 ops/s
# Warmup Iteration  26: 1217567.320 ops/s
# Warmup Iteration  27: 1238949.808 ops/s
# Warmup Iteration  28: 1220541.699 ops/s
# Warmup Iteration  29: 1240211.902 ops/s
# Warmup Iteration  30: 1259598.715 ops/s
Iteration   1: 1202084.256 ops/s
Iteration   2: 1248923.219 ops/s
Iteration   3: 1277144.592 ops/s
Iteration   4: 1222085.923 ops/s
Iteration   5: 1244927.162 ops/s
Iteration   6: 1216959.398 ops/s
Iteration   7: 1264615.835 ops/s
Iteration   8: 1233510.164 ops/s
Iteration   9: 1233698.920 ops/s
Iteration  10: 1275978.738 ops/s
Iteration  11: 1255434.539 ops/s
Iteration  12: 1210159.121 ops/s
Iteration  13: 1314733.216 ops/s
Iteration  14: 1257318.784 ops/s
Iteration  15: 1206652.875 ops/s
Iteration  16: 1296239.932 ops/s
Iteration  17: 1197893.280 ops/s
Iteration  18: 1236159.654 ops/s
Iteration  19: 1281123.107 ops/s
Iteration  20: 1203647.491 ops/s
Iteration  21: 1257204.553 ops/s
Iteration  22: 1210927.344 ops/s
Iteration  23: 1221639.604 ops/s
Iteration  24: 1237573.741 ops/s
Iteration  25: 1253755.401 ops/s
Iteration  26: 1270983.135 ops/s
Iteration  27: 1264676.917 ops/s
Iteration  28: 1219968.980 ops/s
Iteration  29: 1224790.711 ops/s
Iteration  30: 1255249.927 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleMiscTest._Benchmark.benchmark_repeat":
  1243202.017 ±(99.9%) 19867.561 ops/s [Average]
  (min, avg, max) = (1197893.280, 1243202.017, 1314733.216), stdev = 29736.832
  CI (99.9%): [1223334.457, 1263069.578] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                    Mode  Cnt        Score       Error  Units
SingleMiscTest._Benchmark.benchmark_repeat  thrpt   30  1243202.017 ± 19867.561  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleConcatEagerTest._Benchmark.benchmark_iterableNormalMaxConcurrency$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleConcatEagerTest._Benchmark.benchmark_iterableNormalMaxConcurrency

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 100674.528 ops/s
# Warmup Iteration   2: 857076.633 ops/s
# Warmup Iteration   3: 1480996.373 ops/s
# Warmup Iteration   4: 1599560.411 ops/s
# Warmup Iteration   5: 1690775.011 ops/s
# Warmup Iteration   6: 1493524.660 ops/s
# Warmup Iteration   7: 1512467.045 ops/s
# Warmup Iteration   8: 1677979.422 ops/s
# Warmup Iteration   9: 1590831.209 ops/s
# Warmup Iteration  10: 1662243.406 ops/s
# Warmup Iteration  11: 1610078.032 ops/s
# Warmup Iteration  12: 1615004.045 ops/s
# Warmup Iteration  13: 1752899.461 ops/s
# Warmup Iteration  14: 1578523.635 ops/s
# Warmup Iteration  15: 1701569.478 ops/s
# Warmup Iteration  16: 1606159.102 ops/s
# Warmup Iteration  17: 1659873.750 ops/s
# Warmup Iteration  18: 1593881.573 ops/s
# Warmup Iteration  19: 1660998.736 ops/s
# Warmup Iteration  20: 1704240.404 ops/s
# Warmup Iteration  21: 1701098.876 ops/s
# Warmup Iteration  22: 1615923.219 ops/s
# Warmup Iteration  23: 1151327.599 ops/s
# Warmup Iteration  24: 1601837.648 ops/s
# Warmup Iteration  25: 1613146.959 ops/s
# Warmup Iteration  26: 1703992.289 ops/s
# Warmup Iteration  27: 1674771.282 ops/s
# Warmup Iteration  28: 1605836.204 ops/s
# Warmup Iteration  29: 1668961.198 ops/s
# Warmup Iteration  30: 1607770.080 ops/s
Iteration   1: 1626632.486 ops/s
Iteration   2: 1600288.733 ops/s
Iteration   3: 1620379.399 ops/s
Iteration   4: 1628330.482 ops/s
Iteration   5: 1662573.158 ops/s
Iteration   6: 1656732.160 ops/s
Iteration   7: 1664439.488 ops/s
Iteration   8: 1630957.047 ops/s
Iteration   9: 1685838.316 ops/s
Iteration  10: 1610363.924 ops/s
Iteration  11: 1677065.692 ops/s
Iteration  12: 1566068.725 ops/s
Iteration  13: 1634121.990 ops/s
Iteration  14: 1653211.115 ops/s
Iteration  15: 1621562.782 ops/s
Iteration  16: 1730452.286 ops/s
Iteration  17: 1600740.170 ops/s
Iteration  18: 1704463.099 ops/s
Iteration  19: 1587400.348 ops/s
Iteration  20: 1709009.066 ops/s
Iteration  21: 1635803.865 ops/s
Iteration  22: 1635281.079 ops/s
Iteration  23: 1663075.754 ops/s
Iteration  24: 1597177.031 ops/s
Iteration  25: 1685405.506 ops/s
Iteration  26: 1655958.816 ops/s
Iteration  27: 1595564.437 ops/s
Iteration  28: 1580863.078 ops/s
Iteration  29: 1736792.581 ops/s
Iteration  30: 1579477.263 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleConcatEagerTest._Benchmark.benchmark_iterableNormalMaxConcurrency":
  1641200.996 ±(99.9%) 30059.633 ops/s [Average]
  (min, avg, max) = (1566068.725, 1641200.996, 1736792.581), stdev = 44991.846
  CI (99.9%): [1611141.363, 1671260.628] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score       Error  Units
SingleConcatEagerTest._Benchmark.benchmark_iterableNormalMaxConcurrency  thrpt   30  1641200.996 ± 30059.633  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeIsEmptyTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeIsEmptyTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 408712.319 ops/s
# Warmup Iteration   2: 2395623.017 ops/s
# Warmup Iteration   3: 2770019.437 ops/s
# Warmup Iteration   4: 3601812.523 ops/s
# Warmup Iteration   5: 3354243.621 ops/s
# Warmup Iteration   6: 3398685.658 ops/s
# Warmup Iteration   7: 3429610.232 ops/s
# Warmup Iteration   8: 3439387.946 ops/s
# Warmup Iteration   9: 3554312.056 ops/s
# Warmup Iteration  10: 3361034.676 ops/s
# Warmup Iteration  11: 3429267.563 ops/s
# Warmup Iteration  12: 3562324.546 ops/s
# Warmup Iteration  13: 3349570.928 ops/s
# Warmup Iteration  14: 3437765.540 ops/s
# Warmup Iteration  15: 3364270.627 ops/s
# Warmup Iteration  16: 3402820.571 ops/s
# Warmup Iteration  17: 3534644.058 ops/s
# Warmup Iteration  18: 3361283.675 ops/s
# Warmup Iteration  19: 3536130.567 ops/s
# Warmup Iteration  20: 3442146.659 ops/s
# Warmup Iteration  21: 3441794.729 ops/s
# Warmup Iteration  22: 3442837.237 ops/s
# Warmup Iteration  23: 3366263.275 ops/s
# Warmup Iteration  24: 3378963.545 ops/s
# Warmup Iteration  25: 3475430.791 ops/s
# Warmup Iteration  26: 3393101.425 ops/s
# Warmup Iteration  27: 3538017.149 ops/s
# Warmup Iteration  28: 3486898.933 ops/s
# Warmup Iteration  29: 3458083.017 ops/s
# Warmup Iteration  30: 3459535.248 ops/s
Iteration   1: 3427711.041 ops/s
Iteration   2: 3433494.435 ops/s
Iteration   3: 3369852.674 ops/s
Iteration   4: 3488025.542 ops/s
Iteration   5: 3318636.466 ops/s
Iteration   6: 3532118.613 ops/s
Iteration   7: 3370962.192 ops/s
Iteration   8: 3393287.048 ops/s
Iteration   9: 3568197.373 ops/s
Iteration  10: 3363287.349 ops/s
Iteration  11: 3493876.305 ops/s
Iteration  12: 3424839.478 ops/s
Iteration  13: 3488264.640 ops/s
Iteration  14: 3480872.873 ops/s
Iteration  15: 3397056.458 ops/s
Iteration  16: 3597392.656 ops/s
Iteration  17: 3289005.597 ops/s
Iteration  18: 3614489.990 ops/s
Iteration  19: 3428570.709 ops/s
Iteration  20: 3501405.891 ops/s
Iteration  21: 3446631.581 ops/s
Iteration  22: 3532115.924 ops/s
Iteration  23: 3447093.616 ops/s
Iteration  24: 3352377.093 ops/s
Iteration  25: 3558453.642 ops/s
Iteration  26: 3312444.687 ops/s
Iteration  27: 3492484.117 ops/s
Iteration  28: 3366884.202 ops/s
Iteration  29: 3517228.910 ops/s
Iteration  30: 3537120.886 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeIsEmptyTest._Benchmark.benchmark_dispose":
  3451472.733 ±(99.9%) 57781.376 ops/s [Average]
  (min, avg, max) = (3289005.597, 3451472.733, 3614489.990), stdev = 86484.451
  CI (99.9%): [3393691.357, 3509254.109] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt        Score       Error  Units
MaybeIsEmptyTest._Benchmark.benchmark_dispose  thrpt   30  3451472.733 ± 57781.376  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableLastTest._Benchmark.benchmark_emptyLastOrErrorFlowable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableLastTest._Benchmark.benchmark_emptyLastOrErrorFlowable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 85644.434 ops/s
# Warmup Iteration   2: 478723.114 ops/s
# Warmup Iteration   3: 533701.132 ops/s
# Warmup Iteration   4: 563811.171 ops/s
# Warmup Iteration   5: 556097.200 ops/s
# Warmup Iteration   6: 540584.178 ops/s
# Warmup Iteration   7: 567315.739 ops/s
# Warmup Iteration   8: 534692.198 ops/s
# Warmup Iteration   9: 559242.233 ops/s
# Warmup Iteration  10: 556081.841 ops/s
# Warmup Iteration  11: 562272.014 ops/s
# Warmup Iteration  12: 579616.056 ops/s
# Warmup Iteration  13: 517368.718 ops/s
# Warmup Iteration  14: 553378.753 ops/s
# Warmup Iteration  15: 548371.059 ops/s
# Warmup Iteration  16: 561851.983 ops/s
# Warmup Iteration  17: 595467.385 ops/s
# Warmup Iteration  18: 492503.663 ops/s
# Warmup Iteration  19: 574108.067 ops/s
# Warmup Iteration  20: 590873.349 ops/s
# Warmup Iteration  21: 578602.543 ops/s
# Warmup Iteration  22: 597095.260 ops/s
# Warmup Iteration  23: 580288.120 ops/s
# Warmup Iteration  24: 558582.549 ops/s
# Warmup Iteration  25: 591996.714 ops/s
# Warmup Iteration  26: 614957.574 ops/s
# Warmup Iteration  27: 569518.579 ops/s
# Warmup Iteration  28: 601021.973 ops/s
# Warmup Iteration  29: 578265.181 ops/s
# Warmup Iteration  30: 577793.995 ops/s
Iteration   1: 604546.243 ops/s
Iteration   2: 576726.472 ops/s
Iteration   3: 584932.279 ops/s
Iteration   4: 598589.225 ops/s
Iteration   5: 579941.120 ops/s
Iteration   6: 598910.902 ops/s
Iteration   7: 583437.797 ops/s
Iteration   8: 596728.098 ops/s
Iteration   9: 576234.806 ops/s
Iteration  10: 586321.472 ops/s
Iteration  11: 586638.654 ops/s
Iteration  12: 582491.713 ops/s
Iteration  13: 595537.257 ops/s
Iteration  14: 578711.831 ops/s
Iteration  15: 573201.811 ops/s
Iteration  16: 583202.173 ops/s
Iteration  17: 596406.050 ops/s
Iteration  18: 561095.494 ops/s
Iteration  19: 582713.394 ops/s
Iteration  20: 582424.155 ops/s
Iteration  21: 600610.573 ops/s
Iteration  22: 590177.667 ops/s
Iteration  23: 594444.094 ops/s
Iteration  24: 577835.030 ops/s
Iteration  25: 603243.313 ops/s
Iteration  26: 572160.636 ops/s
Iteration  27: 588989.420 ops/s
Iteration  28: 596907.508 ops/s
Iteration  29: 577797.904 ops/s
Iteration  30: 594236.571 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableLastTest._Benchmark.benchmark_emptyLastOrErrorFlowable":
  586839.789 ±(99.9%) 7007.505 ops/s [Average]
  (min, avg, max) = (561095.494, 586839.789, 604546.243), stdev = 10488.505
  CI (99.9%): [579832.284, 593847.294] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
FlowableLastTest._Benchmark.benchmark_emptyLastOrErrorFlowable  thrpt   30  586839.789 ± 7007.505  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableToSingleTest._Benchmark.benchmark_emptyObservable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableToSingleTest._Benchmark.benchmark_emptyObservable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 762677.541 ops/s
# Warmup Iteration   2: 3086684.902 ops/s
# Warmup Iteration   3: 4700073.001 ops/s
# Warmup Iteration   4: 4860503.121 ops/s
# Warmup Iteration   5: 5171056.772 ops/s
# Warmup Iteration   6: 4970172.887 ops/s
# Warmup Iteration   7: 5173460.115 ops/s
# Warmup Iteration   8: 5163031.043 ops/s
# Warmup Iteration   9: 4904832.997 ops/s
# Warmup Iteration  10: 5160962.346 ops/s
# Warmup Iteration  11: 4886208.187 ops/s
# Warmup Iteration  12: 4977918.782 ops/s
# Warmup Iteration  13: 4979527.876 ops/s
# Warmup Iteration  14: 5115898.505 ops/s
# Warmup Iteration  15: 5153620.672 ops/s
# Warmup Iteration  16: 4991457.782 ops/s
# Warmup Iteration  17: 5150095.971 ops/s
# Warmup Iteration  18: 4975748.452 ops/s
# Warmup Iteration  19: 5104057.022 ops/s
# Warmup Iteration  20: 4840208.814 ops/s
# Warmup Iteration  21: 5079877.410 ops/s
# Warmup Iteration  22: 5193991.707 ops/s
# Warmup Iteration  23: 4873395.746 ops/s
# Warmup Iteration  24: 4951754.586 ops/s
# Warmup Iteration  25: 5143339.856 ops/s
# Warmup Iteration  26: 4967226.673 ops/s
# Warmup Iteration  27: 5013423.931 ops/s
# Warmup Iteration  28: 5100999.102 ops/s
# Warmup Iteration  29: 4853708.533 ops/s
# Warmup Iteration  30: 4952343.636 ops/s
Iteration   1: 5119104.101 ops/s
Iteration   2: 5169839.422 ops/s
Iteration   3: 4875033.334 ops/s
Iteration   4: 5180293.931 ops/s
Iteration   5: 4779305.004 ops/s
Iteration   6: 5222908.675 ops/s
Iteration   7: 4959573.934 ops/s
Iteration   8: 5039604.111 ops/s
Iteration   9: 5149845.809 ops/s
Iteration  10: 4967959.231 ops/s
Iteration  11: 5094741.357 ops/s
Iteration  12: 5029336.284 ops/s
Iteration  13: 5108294.816 ops/s
Iteration  14: 4909360.640 ops/s
Iteration  15: 4840224.416 ops/s
Iteration  16: 5114943.117 ops/s
Iteration  17: 4799488.206 ops/s
Iteration  18: 5026413.672 ops/s
Iteration  19: 4910877.243 ops/s
Iteration  20: 4916055.749 ops/s
Iteration  21: 5121669.914 ops/s
Iteration  22: 4852081.937 ops/s
Iteration  23: 5002266.892 ops/s
Iteration  24: 5142455.032 ops/s
Iteration  25: 5067595.076 ops/s
Iteration  26: 5006705.854 ops/s
Iteration  27: 5039586.406 ops/s
Iteration  28: 5014449.291 ops/s
Iteration  29: 4846229.675 ops/s
Iteration  30: 5122224.185 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableToSingleTest._Benchmark.benchmark_emptyObservable":
  5014282.244 ±(99.9%) 81965.866 ops/s [Average]
  (min, avg, max) = (4779305.004, 5014282.244, 5222908.675), stdev = 122682.659
  CI (99.9%): [4932316.377, 5096248.110] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
FlowableToSingleTest._Benchmark.benchmark_emptyObservable  thrpt   30  5014282.244 ± 81965.866  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleTakeUntilTest._Benchmark.benchmark_untilSingleDispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleTakeUntilTest._Benchmark.benchmark_untilSingleDispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 388370.271 ops/s
# Warmup Iteration   2: 1777520.130 ops/s
# Warmup Iteration   3: 2581529.478 ops/s
# Warmup Iteration   4: 2618049.957 ops/s
# Warmup Iteration   5: 2723829.076 ops/s
# Warmup Iteration   6: 2682391.170 ops/s
# Warmup Iteration   7: 2661068.615 ops/s
# Warmup Iteration   8: 2643351.595 ops/s
# Warmup Iteration   9: 2673043.714 ops/s
# Warmup Iteration  10: 2568205.598 ops/s
# Warmup Iteration  11: 2571124.556 ops/s
# Warmup Iteration  12: 2732629.012 ops/s
# Warmup Iteration  13: 2178860.245 ops/s
# Warmup Iteration  14: 2739462.571 ops/s
# Warmup Iteration  15: 2694068.886 ops/s
# Warmup Iteration  16: 2648385.308 ops/s
# Warmup Iteration  17: 2757518.128 ops/s
# Warmup Iteration  18: 2576433.027 ops/s
# Warmup Iteration  19: 2786008.109 ops/s
# Warmup Iteration  20: 2626387.807 ops/s
# Warmup Iteration  21: 2653795.007 ops/s
# Warmup Iteration  22: 2672357.818 ops/s
# Warmup Iteration  23: 2716957.307 ops/s
# Warmup Iteration  24: 2644211.484 ops/s
# Warmup Iteration  25: 2662404.871 ops/s
# Warmup Iteration  26: 2653063.458 ops/s
# Warmup Iteration  27: 2794280.608 ops/s
# Warmup Iteration  28: 2609217.494 ops/s
# Warmup Iteration  29: 2805456.917 ops/s
# Warmup Iteration  30: 2604118.581 ops/s
Iteration   1: 2741705.690 ops/s
Iteration   2: 2662642.793 ops/s
Iteration   3: 2623748.697 ops/s
Iteration   4: 2663807.064 ops/s
Iteration   5: 2676611.411 ops/s
Iteration   6: 2741015.440 ops/s
Iteration   7: 2655800.759 ops/s
Iteration   8: 2673959.194 ops/s
Iteration   9: 2765202.521 ops/s
Iteration  10: 2641711.079 ops/s
Iteration  11: 2736366.863 ops/s
Iteration  12: 2765756.093 ops/s
Iteration  13: 2578257.306 ops/s
Iteration  14: 2749243.776 ops/s
Iteration  15: 2658727.066 ops/s
Iteration  16: 2578518.588 ops/s
Iteration  17: 2655585.413 ops/s
Iteration  18: 2744664.584 ops/s
Iteration  19: 2618640.258 ops/s
Iteration  20: 2666571.246 ops/s
Iteration  21: 2662570.326 ops/s
Iteration  22: 2663671.168 ops/s
Iteration  23: 2743262.567 ops/s
Iteration  24: 2659775.908 ops/s
Iteration  25: 2760720.347 ops/s
Iteration  26: 2593690.660 ops/s
Iteration  27: 2704074.223 ops/s
Iteration  28: 2749254.391 ops/s
Iteration  29: 2627769.777 ops/s
Iteration  30: 2712583.053 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntilTest._Benchmark.benchmark_untilSingleDispose":
  2682530.275 ±(99.9%) 37974.729 ops/s [Average]
  (min, avg, max) = (2578257.306, 2682530.275, 2765756.093), stdev = 56838.791
  CI (99.9%): [2644555.546, 2720505.004] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
SingleTakeUntilTest._Benchmark.benchmark_untilSingleDispose  thrpt   30  2682530.275 ± 37974.729  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleMiscTest._Benchmark.benchmark_retryBiPredicate$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleMiscTest._Benchmark.benchmark_retryBiPredicate

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 28655.414 ops/s
# Warmup Iteration   2: 108723.699 ops/s
# Warmup Iteration   3: 137408.986 ops/s
# Warmup Iteration   4: 133841.688 ops/s
# Warmup Iteration   5: 138265.680 ops/s
# Warmup Iteration   6: 135949.496 ops/s
# Warmup Iteration   7: 141715.554 ops/s
# Warmup Iteration   8: 137036.623 ops/s
# Warmup Iteration   9: 125488.499 ops/s
# Warmup Iteration  10: 138981.579 ops/s
# Warmup Iteration  11: 136687.056 ops/s
# Warmup Iteration  12: 133407.454 ops/s
# Warmup Iteration  13: 141531.846 ops/s
# Warmup Iteration  14: 133696.738 ops/s
# Warmup Iteration  15: 138440.365 ops/s
# Warmup Iteration  16: 139896.612 ops/s
# Warmup Iteration  17: 142412.490 ops/s
# Warmup Iteration  18: 143656.391 ops/s
# Warmup Iteration  19: 139916.196 ops/s
# Warmup Iteration  20: 150547.399 ops/s
# Warmup Iteration  21: 140293.845 ops/s
# Warmup Iteration  22: 143519.311 ops/s
# Warmup Iteration  23: 148030.992 ops/s
# Warmup Iteration  24: 140859.927 ops/s
# Warmup Iteration  25: 144024.450 ops/s
# Warmup Iteration  26: 139905.782 ops/s
# Warmup Iteration  27: 142769.071 ops/s
# Warmup Iteration  28: 145530.823 ops/s
# Warmup Iteration  29: 145545.080 ops/s
# Warmup Iteration  30: 139176.553 ops/s
Iteration   1: 145564.178 ops/s
Iteration   2: 140629.822 ops/s
Iteration   3: 137402.890 ops/s
Iteration   4: 144128.687 ops/s
Iteration   5: 139212.637 ops/s
Iteration   6: 141851.840 ops/s
Iteration   7: 145778.894 ops/s
Iteration   8: 144727.786 ops/s
Iteration   9: 142790.064 ops/s
Iteration  10: 143999.589 ops/s
Iteration  11: 145034.727 ops/s
Iteration  12: 140825.702 ops/s
Iteration  13: 145913.048 ops/s
Iteration  14: 140472.489 ops/s
Iteration  15: 143845.562 ops/s
Iteration  16: 145904.312 ops/s
Iteration  17: 138074.470 ops/s
Iteration  18: 147282.961 ops/s
Iteration  19: 145250.651 ops/s
Iteration  20: 144596.755 ops/s
Iteration  21: 141620.750 ops/s
Iteration  22: 147513.362 ops/s
Iteration  23: 148286.782 ops/s
Iteration  24: 149492.445 ops/s
Iteration  25: 138862.328 ops/s
Iteration  26: 148162.373 ops/s
Iteration  27: 143129.935 ops/s
Iteration  28: 147437.489 ops/s
Iteration  29: 139159.261 ops/s
Iteration  30: 138216.970 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleMiscTest._Benchmark.benchmark_retryBiPredicate":
  143505.625 ±(99.9%) 2291.456 ops/s [Average]
  (min, avg, max) = (137402.890, 143505.625, 149492.445), stdev = 3429.744
  CI (99.9%): [141214.169, 145797.082] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score      Error  Units
SingleMiscTest._Benchmark.benchmark_retryBiPredicate  thrpt   30  143505.625 ± 2291.456  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableAllTest._Benchmark.benchmark_backpressureIfOneRequestedOneShouldBeDeliveredFlowable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableAllTest._Benchmark.benchmark_backpressureIfOneRequestedOneShouldBeDeliveredFlowable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1342586.787 ops/s
# Warmup Iteration   2: 3442723.343 ops/s
# Warmup Iteration   3: 4982318.145 ops/s
# Warmup Iteration   4: 4981782.065 ops/s
# Warmup Iteration   5: 5258134.921 ops/s
# Warmup Iteration   6: 4852027.179 ops/s
# Warmup Iteration   7: 4908271.204 ops/s
# Warmup Iteration   8: 4517822.450 ops/s
# Warmup Iteration   9: 5140454.344 ops/s
# Warmup Iteration  10: 4930361.188 ops/s
# Warmup Iteration  11: 5116255.111 ops/s
# Warmup Iteration  12: 5179604.441 ops/s
# Warmup Iteration  13: 4967677.888 ops/s
# Warmup Iteration  14: 5334019.592 ops/s
# Warmup Iteration  15: 5007978.663 ops/s
# Warmup Iteration  16: 5170338.065 ops/s
# Warmup Iteration  17: 4912494.802 ops/s
# Warmup Iteration  18: 5297446.037 ops/s
# Warmup Iteration  19: 4926290.328 ops/s
# Warmup Iteration  20: 5301786.261 ops/s
# Warmup Iteration  21: 5241546.151 ops/s
# Warmup Iteration  22: 5057553.454 ops/s
# Warmup Iteration  23: 5133527.352 ops/s
# Warmup Iteration  24: 5054743.839 ops/s
# Warmup Iteration  25: 4876276.841 ops/s
# Warmup Iteration  26: 5130399.619 ops/s
# Warmup Iteration  27: 5002096.020 ops/s
# Warmup Iteration  28: 5259950.873 ops/s
# Warmup Iteration  29: 5035748.368 ops/s
# Warmup Iteration  30: 5040516.034 ops/s
Iteration   1: 5086712.912 ops/s
Iteration   2: 5013001.510 ops/s
Iteration   3: 5096650.922 ops/s
Iteration   4: 5148315.671 ops/s
Iteration   5: 5038603.023 ops/s
Iteration   6: 5153114.836 ops/s
Iteration   7: 4930035.275 ops/s
Iteration   8: 5227121.491 ops/s
Iteration   9: 5029049.183 ops/s
Iteration  10: 4964832.786 ops/s
Iteration  11: 5325935.422 ops/s
Iteration  12: 4951139.022 ops/s
Iteration  13: 5214605.230 ops/s
Iteration  14: 5166290.758 ops/s
Iteration  15: 4961389.490 ops/s
Iteration  16: 4850584.018 ops/s
Iteration  17: 5203899.303 ops/s
Iteration  18: 5247578.208 ops/s
Iteration  19: 4997062.423 ops/s
Iteration  20: 5211078.053 ops/s
Iteration  21: 5277166.095 ops/s
Iteration  22: 5024928.568 ops/s
Iteration  23: 5298184.733 ops/s
Iteration  24: 5052582.000 ops/s
Iteration  25: 5056652.362 ops/s
Iteration  26: 5341483.781 ops/s
Iteration  27: 4985454.864 ops/s
Iteration  28: 5135879.479 ops/s
Iteration  29: 5210524.449 ops/s
Iteration  30: 4949191.384 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableAllTest._Benchmark.benchmark_backpressureIfOneRequestedOneShouldBeDeliveredFlowable":
  5104968.242 ±(99.9%) 87733.487 ops/s [Average]
  (min, avg, max) = (4850584.018, 5104968.242, 5341483.781), stdev = 131315.363
  CI (99.9%): [5017234.755, 5192701.728] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                     Mode  Cnt        Score       Error  Units
FlowableAllTest._Benchmark.benchmark_backpressureIfOneRequestedOneShouldBeDeliveredFlowable  thrpt   30  5104968.242 ± 87733.487  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleMiscTest._Benchmark.benchmark_retryPredicate$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleMiscTest._Benchmark.benchmark_retryPredicate

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 32092.157 ops/s
# Warmup Iteration   2: 122874.990 ops/s
# Warmup Iteration   3: 132983.627 ops/s
# Warmup Iteration   4: 130869.979 ops/s
# Warmup Iteration   5: 141283.655 ops/s
# Warmup Iteration   6: 133885.150 ops/s
# Warmup Iteration   7: 131478.163 ops/s
# Warmup Iteration   8: 136730.031 ops/s
# Warmup Iteration   9: 135206.618 ops/s
# Warmup Iteration  10: 124012.681 ops/s
# Warmup Iteration  11: 134219.805 ops/s
# Warmup Iteration  12: 137439.622 ops/s
# Warmup Iteration  13: 138037.021 ops/s
# Warmup Iteration  14: 134617.349 ops/s
# Warmup Iteration  15: 139496.484 ops/s
# Warmup Iteration  16: 132928.693 ops/s
# Warmup Iteration  17: 137824.880 ops/s
# Warmup Iteration  18: 146956.331 ops/s
# Warmup Iteration  19: 141195.811 ops/s
# Warmup Iteration  20: 145142.611 ops/s
# Warmup Iteration  21: 146763.688 ops/s
# Warmup Iteration  22: 140139.967 ops/s
# Warmup Iteration  23: 139233.873 ops/s
# Warmup Iteration  24: 144153.602 ops/s
# Warmup Iteration  25: 138924.997 ops/s
# Warmup Iteration  26: 144493.650 ops/s
# Warmup Iteration  27: 143740.222 ops/s
# Warmup Iteration  28: 142691.818 ops/s
# Warmup Iteration  29: 144522.748 ops/s
# Warmup Iteration  30: 140596.133 ops/s
Iteration   1: 138478.624 ops/s
Iteration   2: 147977.973 ops/s
Iteration   3: 136880.953 ops/s
Iteration   4: 144503.530 ops/s
Iteration   5: 146942.512 ops/s
Iteration   6: 141294.769 ops/s
Iteration   7: 138915.642 ops/s
Iteration   8: 147290.726 ops/s
Iteration   9: 141591.749 ops/s
Iteration  10: 139323.771 ops/s
Iteration  11: 145598.369 ops/s
Iteration  12: 136581.010 ops/s
Iteration  13: 148476.146 ops/s
Iteration  14: 144848.782 ops/s
Iteration  15: 140704.827 ops/s
Iteration  16: 149773.914 ops/s
Iteration  17: 138792.409 ops/s
Iteration  18: 142751.949 ops/s
Iteration  19: 138503.500 ops/s
Iteration  20: 142177.948 ops/s
Iteration  21: 145491.748 ops/s
Iteration  22: 138294.869 ops/s
Iteration  23: 142789.733 ops/s
Iteration  24: 146734.863 ops/s
Iteration  25: 138481.768 ops/s
Iteration  26: 145534.337 ops/s
Iteration  27: 143625.806 ops/s
Iteration  28: 142549.210 ops/s
Iteration  29: 141893.461 ops/s
Iteration  30: 142037.984 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleMiscTest._Benchmark.benchmark_retryPredicate":
  142628.096 ±(99.9%) 2459.237 ops/s [Average]
  (min, avg, max) = (136581.010, 142628.096, 149773.914), stdev = 3680.870
  CI (99.9%): [140168.859, 145087.333] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score      Error  Units
SingleMiscTest._Benchmark.benchmark_retryPredicate  thrpt   30  142628.096 ± 2459.237  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleTakeUntilTest._Benchmark.benchmark_untilSingleMainSuccess$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleTakeUntilTest._Benchmark.benchmark_untilSingleMainSuccess

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 337410.296 ops/s
# Warmup Iteration   2: 1376336.397 ops/s
# Warmup Iteration   3: 1990580.217 ops/s
# Warmup Iteration   4: 2583853.676 ops/s
# Warmup Iteration   5: 2535195.063 ops/s
# Warmup Iteration   6: 2514526.758 ops/s
# Warmup Iteration   7: 2555677.898 ops/s
# Warmup Iteration   8: 2679343.666 ops/s
# Warmup Iteration   9: 2572279.803 ops/s
# Warmup Iteration  10: 2574136.551 ops/s
# Warmup Iteration  11: 2551553.122 ops/s
# Warmup Iteration  12: 2656443.635 ops/s
# Warmup Iteration  13: 2637938.522 ops/s
# Warmup Iteration  14: 2547140.835 ops/s
# Warmup Iteration  15: 2604566.136 ops/s
# Warmup Iteration  16: 2726362.212 ops/s
# Warmup Iteration  17: 2567047.662 ops/s
# Warmup Iteration  18: 2631364.382 ops/s
# Warmup Iteration  19: 2501228.094 ops/s
# Warmup Iteration  20: 2599161.478 ops/s
# Warmup Iteration  21: 2682050.457 ops/s
# Warmup Iteration  22: 2560476.443 ops/s
# Warmup Iteration  23: 2632469.993 ops/s
# Warmup Iteration  24: 2590334.152 ops/s
# Warmup Iteration  25: 2553264.288 ops/s
# Warmup Iteration  26: 2667800.763 ops/s
# Warmup Iteration  27: 2528052.330 ops/s
# Warmup Iteration  28: 2593461.322 ops/s
# Warmup Iteration  29: 2502581.964 ops/s
# Warmup Iteration  30: 2691926.609 ops/s
Iteration   1: 2586023.579 ops/s
Iteration   2: 2586643.201 ops/s
Iteration   3: 2603428.747 ops/s
Iteration   4: 2616472.720 ops/s
Iteration   5: 2595406.739 ops/s
Iteration   6: 2705922.192 ops/s
Iteration   7: 2488891.496 ops/s
Iteration   8: 2678808.119 ops/s
Iteration   9: 2564439.837 ops/s
Iteration  10: 2642661.065 ops/s
Iteration  11: 2575838.695 ops/s
Iteration  12: 2628305.068 ops/s
Iteration  13: 2576742.842 ops/s
Iteration  14: 2567770.583 ops/s
Iteration  15: 2639001.233 ops/s
Iteration  16: 2541574.160 ops/s
Iteration  17: 2570572.962 ops/s
Iteration  18: 2647024.094 ops/s
Iteration  19: 2563541.630 ops/s
Iteration  20: 2683278.074 ops/s
Iteration  21: 2556689.986 ops/s
Iteration  22: 2627783.002 ops/s
Iteration  23: 2570620.917 ops/s
Iteration  24: 2507283.414 ops/s
Iteration  25: 2657575.161 ops/s
Iteration  26: 2491523.141 ops/s
Iteration  27: 2672685.091 ops/s
Iteration  28: 2465395.030 ops/s
Iteration  29: 2686693.526 ops/s
Iteration  30: 2575376.062 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntilTest._Benchmark.benchmark_untilSingleMainSuccess":
  2595799.079 ±(99.9%) 41327.439 ops/s [Average]
  (min, avg, max) = (2465395.030, 2595799.079, 2705922.192), stdev = 61856.970
  CI (99.9%): [2554471.639, 2637126.518] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
SingleTakeUntilTest._Benchmark.benchmark_untilSingleMainSuccess  thrpt   30  2595799.079 ± 41327.439  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableAllTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableAllTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 29453.433 ops/s
# Warmup Iteration   2: 165334.097 ops/s
# Warmup Iteration   3: 234155.746 ops/s
# Warmup Iteration   4: 244762.215 ops/s
# Warmup Iteration   5: 231818.903 ops/s
# Warmup Iteration   6: 251014.717 ops/s
# Warmup Iteration   7: 260550.676 ops/s
# Warmup Iteration   8: 263779.558 ops/s
# Warmup Iteration   9: 258313.641 ops/s
# Warmup Iteration  10: 260380.571 ops/s
# Warmup Iteration  11: 256188.443 ops/s
# Warmup Iteration  12: 255704.332 ops/s
# Warmup Iteration  13: 268167.261 ops/s
# Warmup Iteration  14: 263080.592 ops/s
# Warmup Iteration  15: 254406.880 ops/s
# Warmup Iteration  16: 266034.673 ops/s
# Warmup Iteration  17: 262969.385 ops/s
# Warmup Iteration  18: 265215.381 ops/s
# Warmup Iteration  19: 280475.838 ops/s
# Warmup Iteration  20: 259621.249 ops/s
# Warmup Iteration  21: 274019.413 ops/s
# Warmup Iteration  22: 266857.103 ops/s
# Warmup Iteration  23: 256868.917 ops/s
# Warmup Iteration  24: 267940.477 ops/s
# Warmup Iteration  25: 265928.804 ops/s
# Warmup Iteration  26: 281542.367 ops/s
# Warmup Iteration  27: 262957.565 ops/s
# Warmup Iteration  28: 280170.760 ops/s
# Warmup Iteration  29: 278010.655 ops/s
# Warmup Iteration  30: 269070.209 ops/s
Iteration   1: 257562.782 ops/s
Iteration   2: 273351.162 ops/s
Iteration   3: 266327.666 ops/s
Iteration   4: 276501.059 ops/s
Iteration   5: 268927.759 ops/s
Iteration   6: 263730.829 ops/s
Iteration   7: 283724.178 ops/s
Iteration   8: 264657.009 ops/s
Iteration   9: 277176.777 ops/s
Iteration  10: 266324.325 ops/s
Iteration  11: 276297.434 ops/s
Iteration  12: 265330.443 ops/s
Iteration  13: 272440.323 ops/s
Iteration  14: 277273.809 ops/s
Iteration  15: 277475.773 ops/s
Iteration  16: 277787.411 ops/s
Iteration  17: 263633.509 ops/s
Iteration  18: 281228.459 ops/s
Iteration  19: 269131.992 ops/s
Iteration  20: 275713.262 ops/s
Iteration  21: 265717.723 ops/s
Iteration  22: 276336.404 ops/s
Iteration  23: 272114.552 ops/s
Iteration  24: 271257.741 ops/s
Iteration  25: 273707.048 ops/s
Iteration  26: 271165.516 ops/s
Iteration  27: 270841.495 ops/s
Iteration  28: 264019.927 ops/s
Iteration  29: 233184.537 ops/s
Iteration  30: 266882.325 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableAllTest._Benchmark.benchmark_doubleOnSubscribe":
  269994.108 ±(99.9%) 6156.078 ops/s [Average]
  (min, avg, max) = (233184.537, 269994.108, 283724.178), stdev = 9214.128
  CI (99.9%): [263838.030, 276150.185] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
FlowableAllTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  269994.108 ± 6156.078  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableCollectTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableCollectTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 25703.937 ops/s
# Warmup Iteration   2: 149261.696 ops/s
# Warmup Iteration   3: 230358.454 ops/s
# Warmup Iteration   4: 239799.169 ops/s
# Warmup Iteration   5: 258737.617 ops/s
# Warmup Iteration   6: 240615.301 ops/s
# Warmup Iteration   7: 247648.042 ops/s
# Warmup Iteration   8: 247900.189 ops/s
# Warmup Iteration   9: 248473.192 ops/s
# Warmup Iteration  10: 251940.594 ops/s
# Warmup Iteration  11: 249240.860 ops/s
# Warmup Iteration  12: 249210.879 ops/s
# Warmup Iteration  13: 250486.665 ops/s
# Warmup Iteration  14: 239499.320 ops/s
# Warmup Iteration  15: 247868.280 ops/s
# Warmup Iteration  16: 248997.049 ops/s
# Warmup Iteration  17: 254111.997 ops/s
# Warmup Iteration  18: 262466.263 ops/s
# Warmup Iteration  19: 253355.269 ops/s
# Warmup Iteration  20: 260626.681 ops/s
# Warmup Iteration  21: 258533.072 ops/s
# Warmup Iteration  22: 263023.259 ops/s
# Warmup Iteration  23: 269154.695 ops/s
# Warmup Iteration  24: 255834.729 ops/s
# Warmup Iteration  25: 246076.848 ops/s
# Warmup Iteration  26: 254321.060 ops/s
# Warmup Iteration  27: 260834.890 ops/s
# Warmup Iteration  28: 257739.226 ops/s
# Warmup Iteration  29: 258706.676 ops/s
# Warmup Iteration  30: 268153.966 ops/s
Iteration   1: 254224.568 ops/s
Iteration   2: 255031.460 ops/s
Iteration   3: 262985.926 ops/s
Iteration   4: 253518.125 ops/s
Iteration   5: 255921.570 ops/s
Iteration   6: 262091.015 ops/s
Iteration   7: 253175.083 ops/s
Iteration   8: 269071.828 ops/s
Iteration   9: 262459.054 ops/s
Iteration  10: 258050.795 ops/s
Iteration  11: 257652.267 ops/s
Iteration  12: 252539.962 ops/s
Iteration  13: 264364.677 ops/s
Iteration  14: 263967.748 ops/s
Iteration  15: 246661.118 ops/s
Iteration  16: 268220.106 ops/s
Iteration  17: 269439.159 ops/s
Iteration  18: 252479.097 ops/s
Iteration  19: 264636.567 ops/s
Iteration  20: 263743.562 ops/s
Iteration  21: 259250.691 ops/s
Iteration  22: 256280.789 ops/s
Iteration  23: 249412.939 ops/s
Iteration  24: 264457.373 ops/s
Iteration  25: 259674.656 ops/s
Iteration  26: 257495.617 ops/s
Iteration  27: 273755.955 ops/s
Iteration  28: 253155.362 ops/s
Iteration  29: 254857.297 ops/s
Iteration  30: 249821.051 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableCollectTest._Benchmark.benchmark_doubleOnSubscribe":
  258946.514 ±(99.9%) 4433.312 ops/s [Average]
  (min, avg, max) = (246661.118, 258946.514, 273755.955), stdev = 6635.573
  CI (99.9%): [254513.202, 263379.826] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score      Error  Units
FlowableCollectTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  258946.514 ± 4433.312  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithFlowableTest._Benchmark.benchmark_takeOneAnotherBoundary$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithFlowableTest._Benchmark.benchmark_takeOneAnotherBoundary

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 152940.795 ops/s
# Warmup Iteration   2: 813567.892 ops/s
# Warmup Iteration   3: 1354524.441 ops/s
# Warmup Iteration   4: 1188788.383 ops/s
# Warmup Iteration   5: 1329371.164 ops/s
# Warmup Iteration   6: 1316220.361 ops/s
# Warmup Iteration   7: 1356748.833 ops/s
# Warmup Iteration   8: 1356060.691 ops/s
# Warmup Iteration   9: 1392862.284 ops/s
# Warmup Iteration  10: 1339370.711 ops/s
# Warmup Iteration  11: 1382396.986 ops/s
# Warmup Iteration  12: 1337696.394 ops/s
# Warmup Iteration  13: 1399289.987 ops/s
# Warmup Iteration  14: 1392194.601 ops/s
# Warmup Iteration  15: 1333561.651 ops/s
# Warmup Iteration  16: 1412751.335 ops/s
# Warmup Iteration  17: 1304571.071 ops/s
# Warmup Iteration  18: 1365953.877 ops/s
# Warmup Iteration  19: 1393118.059 ops/s
# Warmup Iteration  20: 1348798.038 ops/s
# Warmup Iteration  21: 1400206.624 ops/s
# Warmup Iteration  22: 1355182.713 ops/s
# Warmup Iteration  23: 1375299.319 ops/s
# Warmup Iteration  24: 1316816.772 ops/s
# Warmup Iteration  25: 1391082.575 ops/s
# Warmup Iteration  26: 1384707.538 ops/s
# Warmup Iteration  27: 1366366.121 ops/s
# Warmup Iteration  28: 1364899.964 ops/s
# Warmup Iteration  29: 1358462.517 ops/s
# Warmup Iteration  30: 1353930.844 ops/s
Iteration   1: 1354858.025 ops/s
Iteration   2: 1331599.017 ops/s
Iteration   3: 1375998.005 ops/s
Iteration   4: 1438521.418 ops/s
Iteration   5: 1394452.056 ops/s
Iteration   6: 1344413.905 ops/s
Iteration   7: 1379916.396 ops/s
Iteration   8: 1348034.820 ops/s
Iteration   9: 1372577.310 ops/s
Iteration  10: 1366686.714 ops/s
Iteration  11: 1351804.523 ops/s
Iteration  12: 1395015.761 ops/s
Iteration  13: 1352840.423 ops/s
Iteration  14: 1350154.845 ops/s
Iteration  15: 1416976.733 ops/s
Iteration  16: 1343817.931 ops/s
Iteration  17: 1354785.555 ops/s
Iteration  18: 1394612.679 ops/s
Iteration  19: 1361450.221 ops/s
Iteration  20: 1420711.892 ops/s
Iteration  21: 1315633.578 ops/s
Iteration  22: 1371065.844 ops/s
Iteration  23: 1296730.156 ops/s
Iteration  24: 1139042.892 ops/s
Iteration  25: 1375223.929 ops/s
Iteration  26: 1352986.501 ops/s
Iteration  27: 1364925.673 ops/s
Iteration  28: 1368048.156 ops/s
Iteration  29: 1359389.363 ops/s
Iteration  30: 1388023.803 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithFlowableTest._Benchmark.benchmark_takeOneAnotherBoundary":
  1359343.271 ±(99.9%) 34055.648 ops/s [Average]
  (min, avg, max) = (1139042.892, 1359343.271, 1438521.418), stdev = 50972.894
  CI (99.9%): [1325287.623, 1393398.918] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score       Error  Units
FlowableWindowWithFlowableTest._Benchmark.benchmark_takeOneAnotherBoundary  thrpt   30  1359343.271 ± 34055.648  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableCollectWithCollectorTest._Benchmark.benchmark_onSubscribeToFlowable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableCollectWithCollectorTest._Benchmark.benchmark_onSubscribeToFlowable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 78420.494 ops/s
# Warmup Iteration   2: 407877.507 ops/s
# Warmup Iteration   3: 516760.692 ops/s
# Warmup Iteration   4: 505896.305 ops/s
# Warmup Iteration   5: 473076.140 ops/s
# Warmup Iteration   6: 504325.537 ops/s
# Warmup Iteration   7: 490629.282 ops/s
# Warmup Iteration   8: 503769.383 ops/s
# Warmup Iteration   9: 518090.195 ops/s
# Warmup Iteration  10: 523566.263 ops/s
# Warmup Iteration  11: 500402.445 ops/s
# Warmup Iteration  12: 519876.011 ops/s
# Warmup Iteration  13: 494078.793 ops/s
# Warmup Iteration  14: 518275.333 ops/s
# Warmup Iteration  15: 525127.731 ops/s
# Warmup Iteration  16: 504977.893 ops/s
# Warmup Iteration  17: 544369.552 ops/s
# Warmup Iteration  18: 525621.114 ops/s
# Warmup Iteration  19: 545794.527 ops/s
# Warmup Iteration  20: 528874.277 ops/s
# Warmup Iteration  21: 533225.564 ops/s
# Warmup Iteration  22: 550468.052 ops/s
# Warmup Iteration  23: 520484.326 ops/s
# Warmup Iteration  24: 535245.176 ops/s
# Warmup Iteration  25: 537923.044 ops/s
# Warmup Iteration  26: 546227.109 ops/s
# Warmup Iteration  27: 521399.401 ops/s
# Warmup Iteration  28: 531294.202 ops/s
# Warmup Iteration  29: 547279.797 ops/s
# Warmup Iteration  30: 523704.102 ops/s
Iteration   1: 535853.675 ops/s
Iteration   2: 550893.714 ops/s
Iteration   3: 518141.483 ops/s
Iteration   4: 548059.596 ops/s
Iteration   5: 528886.544 ops/s
Iteration   6: 530648.935 ops/s
Iteration   7: 551612.925 ops/s
Iteration   8: 537760.347 ops/s
Iteration   9: 545031.568 ops/s
Iteration  10: 528363.546 ops/s
Iteration  11: 536786.873 ops/s
Iteration  12: 557690.346 ops/s
Iteration  13: 530837.515 ops/s
Iteration  14: 549765.534 ops/s
Iteration  15: 527163.787 ops/s
Iteration  16: 550412.727 ops/s
Iteration  17: 553904.071 ops/s
Iteration  18: 529095.395 ops/s
Iteration  19: 553504.474 ops/s
Iteration  20: 517763.166 ops/s
Iteration  21: 534279.011 ops/s
Iteration  22: 533250.425 ops/s
Iteration  23: 545055.373 ops/s
Iteration  24: 527429.267 ops/s
Iteration  25: 521364.540 ops/s
Iteration  26: 542807.734 ops/s
Iteration  27: 555211.059 ops/s
Iteration  28: 513103.242 ops/s
Iteration  29: 536877.869 ops/s
Iteration  30: 535619.580 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableCollectWithCollectorTest._Benchmark.benchmark_onSubscribeToFlowable":
  537572.477 ±(99.9%) 8209.931 ops/s [Average]
  (min, avg, max) = (513103.242, 537572.477, 557690.346), stdev = 12288.239
  CI (99.9%): [529362.546, 545782.408] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt       Score      Error  Units
FlowableCollectWithCollectorTest._Benchmark.benchmark_onSubscribeToFlowable  thrpt   30  537572.477 ± 8209.931  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.SingleFlattenStreamAsFlowableTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.SingleFlattenStreamAsFlowableTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 89689.810 ops/s
# Warmup Iteration   2: 354666.963 ops/s
# Warmup Iteration   3: 495341.288 ops/s
# Warmup Iteration   4: 497613.592 ops/s
# Warmup Iteration   5: 525498.284 ops/s
# Warmup Iteration   6: 493330.028 ops/s
# Warmup Iteration   7: 493648.338 ops/s
# Warmup Iteration   8: 517346.905 ops/s
# Warmup Iteration   9: 504466.696 ops/s
# Warmup Iteration  10: 499559.632 ops/s
# Warmup Iteration  11: 496359.393 ops/s
# Warmup Iteration  12: 514213.976 ops/s
# Warmup Iteration  13: 510610.961 ops/s
# Warmup Iteration  14: 516108.712 ops/s
# Warmup Iteration  15: 480497.704 ops/s
# Warmup Iteration  16: 529915.060 ops/s
# Warmup Iteration  17: 521424.795 ops/s
# Warmup Iteration  18: 545974.963 ops/s
# Warmup Iteration  19: 533824.341 ops/s
# Warmup Iteration  20: 540870.659 ops/s
# Warmup Iteration  21: 523343.616 ops/s
# Warmup Iteration  22: 526640.302 ops/s
# Warmup Iteration  23: 565350.732 ops/s
# Warmup Iteration  24: 521969.124 ops/s
# Warmup Iteration  25: 510621.811 ops/s
# Warmup Iteration  26: 539707.897 ops/s
# Warmup Iteration  27: 504647.664 ops/s
# Warmup Iteration  28: 559489.296 ops/s
# Warmup Iteration  29: 552170.648 ops/s
# Warmup Iteration  30: 525458.738 ops/s
Iteration   1: 530973.271 ops/s
Iteration   2: 526901.358 ops/s
Iteration   3: 555021.640 ops/s
Iteration   4: 536186.245 ops/s
Iteration   5: 527191.367 ops/s
Iteration   6: 564920.385 ops/s
Iteration   7: 509851.974 ops/s
Iteration   8: 536736.855 ops/s
Iteration   9: 535762.353 ops/s
Iteration  10: 540788.263 ops/s
Iteration  11: 540145.362 ops/s
Iteration  12: 532424.326 ops/s
Iteration  13: 547746.290 ops/s
Iteration  14: 530931.871 ops/s
Iteration  15: 540550.600 ops/s
Iteration  16: 521620.274 ops/s
Iteration  17: 546069.981 ops/s
Iteration  18: 513834.191 ops/s
Iteration  19: 434294.186 ops/s
Iteration  20: 525015.216 ops/s
Iteration  21: 546741.496 ops/s
Iteration  22: 536073.398 ops/s
Iteration  23: 527029.941 ops/s
Iteration  24: 535396.503 ops/s
Iteration  25: 512591.044 ops/s
Iteration  26: 536207.889 ops/s
Iteration  27: 517181.766 ops/s
Iteration  28: 538034.371 ops/s
Iteration  29: 539442.247 ops/s
Iteration  30: 500098.571 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.SingleFlattenStreamAsFlowableTest._Benchmark.benchmark_doubleOnSubscribe":
  529525.441 ±(99.9%) 15050.004 ops/s [Average]
  (min, avg, max) = (434294.186, 529525.441, 564920.385), stdev = 22526.139
  CI (99.9%): [514475.437, 544575.445] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score       Error  Units
SingleFlattenStreamAsFlowableTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  529525.441 ± 15050.004  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableCollectTest._Benchmark.benchmark_collectorFailureDoesNotResultInTwoErrorEmissions$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableCollectTest._Benchmark.benchmark_collectorFailureDoesNotResultInTwoErrorEmissions

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 26831.737 ops/s
# Warmup Iteration   2: 104041.024 ops/s
# Warmup Iteration   3: 174304.145 ops/s
# Warmup Iteration   4: 167292.314 ops/s
# Warmup Iteration   5: 171614.567 ops/s
# Warmup Iteration   6: 161788.191 ops/s
# Warmup Iteration   7: 176317.844 ops/s
# Warmup Iteration   8: 181842.865 ops/s
# Warmup Iteration   9: 182734.058 ops/s
# Warmup Iteration  10: 174213.288 ops/s
# Warmup Iteration  11: 183448.251 ops/s
# Warmup Iteration  12: 188873.156 ops/s
# Warmup Iteration  13: 172599.561 ops/s
# Warmup Iteration  14: 186773.739 ops/s
# Warmup Iteration  15: 178395.839 ops/s
# Warmup Iteration  16: 183159.304 ops/s
# Warmup Iteration  17: 189967.383 ops/s
# Warmup Iteration  18: 184977.605 ops/s
# Warmup Iteration  19: 194268.941 ops/s
# Warmup Iteration  20: 187492.076 ops/s
# Warmup Iteration  21: 191559.157 ops/s
# Warmup Iteration  22: 188200.239 ops/s
# Warmup Iteration  23: 190962.646 ops/s
# Warmup Iteration  24: 188905.008 ops/s
# Warmup Iteration  25: 190639.519 ops/s
# Warmup Iteration  26: 183135.793 ops/s
# Warmup Iteration  27: 196348.218 ops/s
# Warmup Iteration  28: 191320.606 ops/s
# Warmup Iteration  29: 194544.292 ops/s
# Warmup Iteration  30: 185787.042 ops/s
Iteration   1: 197343.246 ops/s
Iteration   2: 194252.325 ops/s
Iteration   3: 195691.993 ops/s
Iteration   4: 196957.721 ops/s
Iteration   5: 193100.507 ops/s
Iteration   6: 185594.058 ops/s
Iteration   7: 199142.035 ops/s
Iteration   8: 192329.864 ops/s
Iteration   9: 186779.202 ops/s
Iteration  10: 197506.087 ops/s
Iteration  11: 191100.444 ops/s
Iteration  12: 193527.560 ops/s
Iteration  13: 196514.287 ops/s
Iteration  14: 187269.157 ops/s
Iteration  15: 185735.148 ops/s
Iteration  16: 197677.026 ops/s
Iteration  17: 190224.063 ops/s
Iteration  18: 188335.085 ops/s
Iteration  19: 196827.062 ops/s
Iteration  20: 184969.764 ops/s
Iteration  21: 197985.105 ops/s
Iteration  22: 197747.781 ops/s
Iteration  23: 187102.951 ops/s
Iteration  24: 196789.148 ops/s
Iteration  25: 183775.279 ops/s
Iteration  26: 198965.374 ops/s
Iteration  27: 188835.173 ops/s
Iteration  28: 192636.033 ops/s
Iteration  29: 194178.270 ops/s
Iteration  30: 183805.445 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableCollectTest._Benchmark.benchmark_collectorFailureDoesNotResultInTwoErrorEmissions":
  192423.240 ±(99.9%) 3371.161 ops/s [Average]
  (min, avg, max) = (183775.279, 192423.240, 199142.035), stdev = 5045.795
  CI (99.9%): [189052.079, 195794.400] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                   Mode  Cnt       Score      Error  Units
FlowableCollectTest._Benchmark.benchmark_collectorFailureDoesNotResultInTwoErrorEmissions  thrpt   30  192423.240 ± 3371.161  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRangeTest._Benchmark.benchmark_emptyRangeSendsOnCompleteEagerlyWithRequestZero$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRangeTest._Benchmark.benchmark_emptyRangeSendsOnCompleteEagerlyWithRequestZero

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 9087226.933 ops/s
# Warmup Iteration   2: 16458227.296 ops/s
# Warmup Iteration   3: 18003944.311 ops/s
# Warmup Iteration   4: 20383400.631 ops/s
# Warmup Iteration   5: 21366403.526 ops/s
# Warmup Iteration   6: 20693284.590 ops/s
# Warmup Iteration   7: 20054554.182 ops/s
# Warmup Iteration   8: 20932345.763 ops/s
# Warmup Iteration   9: 21548345.452 ops/s
# Warmup Iteration  10: 20650335.789 ops/s
# Warmup Iteration  11: 20560217.519 ops/s
# Warmup Iteration  12: 20376768.799 ops/s
# Warmup Iteration  13: 21136133.183 ops/s
# Warmup Iteration  14: 20641655.553 ops/s
# Warmup Iteration  15: 20132735.366 ops/s
# Warmup Iteration  16: 20647303.660 ops/s
# Warmup Iteration  17: 20789853.670 ops/s
# Warmup Iteration  18: 20642083.935 ops/s
# Warmup Iteration  19: 20733241.872 ops/s
# Warmup Iteration  20: 21811220.112 ops/s
# Warmup Iteration  21: 20137945.693 ops/s
# Warmup Iteration  22: 21038628.975 ops/s
# Warmup Iteration  23: 20626165.597 ops/s
# Warmup Iteration  24: 20575470.635 ops/s
# Warmup Iteration  25: 21217454.474 ops/s
# Warmup Iteration  26: 20693289.942 ops/s
# Warmup Iteration  27: 19931406.165 ops/s
# Warmup Iteration  28: 20686749.322 ops/s
# Warmup Iteration  29: 20447501.793 ops/s
# Warmup Iteration  30: 21062881.002 ops/s
Iteration   1: 20362483.844 ops/s
Iteration   2: 21620270.334 ops/s
Iteration   3: 20335833.727 ops/s
Iteration   4: 21186013.178 ops/s
Iteration   5: 20174686.162 ops/s
Iteration   6: 21239005.307 ops/s
Iteration   7: 21008234.851 ops/s
Iteration   8: 20500280.176 ops/s
Iteration   9: 21564632.797 ops/s
Iteration  10: 19999544.936 ops/s
Iteration  11: 21291898.679 ops/s
Iteration  12: 20208196.239 ops/s
Iteration  13: 15658549.077 ops/s
Iteration  14: 21121734.792 ops/s
Iteration  15: 20276594.943 ops/s
Iteration  16: 21341062.264 ops/s
Iteration  17: 21520102.473 ops/s
Iteration  18: 19984676.234 ops/s
Iteration  19: 21535269.528 ops/s
Iteration  20: 20560877.816 ops/s
Iteration  21: 20730481.978 ops/s
Iteration  22: 21158297.102 ops/s
Iteration  23: 20093236.407 ops/s
Iteration  24: 21003586.939 ops/s
Iteration  25: 20262681.793 ops/s
Iteration  26: 21575350.867 ops/s
Iteration  27: 20381545.536 ops/s
Iteration  28: 20868150.682 ops/s
Iteration  29: 20951095.308 ops/s
Iteration  30: 20374364.951 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableRangeTest._Benchmark.benchmark_emptyRangeSendsOnCompleteEagerlyWithRequestZero":
  20629624.631 ±(99.9%) 720499.246 ops/s [Average]
  (min, avg, max) = (15658549.077, 20629624.631, 21620270.334), stdev = 1078409.435
  CI (99.9%): [19909125.384, 21350123.877] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                  Mode  Cnt         Score        Error  Units
ObservableRangeTest._Benchmark.benchmark_emptyRangeSendsOnCompleteEagerlyWithRequestZero  thrpt   30  20629624.631 ± 720499.246  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRangeLongTest._Benchmark.benchmark_emptyRangeSendsOnCompleteEagerlyWithRequestZero$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRangeLongTest._Benchmark.benchmark_emptyRangeSendsOnCompleteEagerlyWithRequestZero

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 9901153.463 ops/s
# Warmup Iteration   2: 16111554.016 ops/s
# Warmup Iteration   3: 19138276.785 ops/s
# Warmup Iteration   4: 20184807.862 ops/s
# Warmup Iteration   5: 20905353.448 ops/s
# Warmup Iteration   6: 20276975.877 ops/s
# Warmup Iteration   7: 21104764.853 ops/s
# Warmup Iteration   8: 20775329.492 ops/s
# Warmup Iteration   9: 19216696.847 ops/s
# Warmup Iteration  10: 20852821.477 ops/s
# Warmup Iteration  11: 19842656.338 ops/s
# Warmup Iteration  12: 19552383.213 ops/s
# Warmup Iteration  13: 20846583.274 ops/s
# Warmup Iteration  14: 19824499.970 ops/s
# Warmup Iteration  15: 20518848.146 ops/s
# Warmup Iteration  16: 20237995.547 ops/s
# Warmup Iteration  17: 19872413.445 ops/s
# Warmup Iteration  18: 20257620.934 ops/s
# Warmup Iteration  19: 19584813.165 ops/s
# Warmup Iteration  20: 20706170.821 ops/s
# Warmup Iteration  21: 19945417.012 ops/s
# Warmup Iteration  22: 20201453.526 ops/s
# Warmup Iteration  23: 20996028.113 ops/s
# Warmup Iteration  24: 19749260.726 ops/s
# Warmup Iteration  25: 20889630.970 ops/s
# Warmup Iteration  26: 19843032.747 ops/s
# Warmup Iteration  27: 19789876.212 ops/s
# Warmup Iteration  28: 20471645.084 ops/s
# Warmup Iteration  29: 20008420.929 ops/s
# Warmup Iteration  30: 19891257.254 ops/s
Iteration   1: 21394358.197 ops/s
Iteration   2: 19150615.075 ops/s
Iteration   3: 19790277.580 ops/s
Iteration   4: 21021594.664 ops/s
Iteration   5: 19924936.785 ops/s
Iteration   6: 20422468.541 ops/s
Iteration   7: 20607265.498 ops/s
Iteration   8: 19941617.780 ops/s
Iteration   9: 20854442.458 ops/s
Iteration  10: 20386645.764 ops/s
Iteration  11: 21519209.381 ops/s
Iteration  12: 21245774.701 ops/s
Iteration  13: 20000825.666 ops/s
Iteration  14: 16822435.044 ops/s
Iteration  15: 20841379.485 ops/s
Iteration  16: 20703393.270 ops/s
Iteration  17: 20273311.197 ops/s
Iteration  18: 20973186.961 ops/s
Iteration  19: 20481784.931 ops/s
Iteration  20: 21513660.209 ops/s
Iteration  21: 20048087.253 ops/s
Iteration  22: 20984475.602 ops/s
Iteration  23: 20919199.467 ops/s
Iteration  24: 19583614.115 ops/s
Iteration  25: 21367776.403 ops/s
Iteration  26: 19808700.776 ops/s
Iteration  27: 21095501.280 ops/s
Iteration  28: 20521910.497 ops/s
Iteration  29: 20358611.992 ops/s
Iteration  30: 20013748.387 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableRangeLongTest._Benchmark.benchmark_emptyRangeSendsOnCompleteEagerlyWithRequestZero":
  20419026.965 ±(99.9%) 609372.722 ops/s [Average]
  (min, avg, max) = (16822435.044, 20419026.965, 21519209.381), stdev = 912080.472
  CI (99.9%): [19809654.244, 21028399.687] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                      Mode  Cnt         Score        Error  Units
ObservableRangeLongTest._Benchmark.benchmark_emptyRangeSendsOnCompleteEagerlyWithRequestZero  thrpt   30  20419026.965 ± 609372.722  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrDefaultTest._Benchmark.benchmark_firstEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrDefaultTest._Benchmark.benchmark_firstEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 6786603.726 ops/s
# Warmup Iteration   2: 11794842.259 ops/s
# Warmup Iteration   3: 14845892.976 ops/s
# Warmup Iteration   4: 16547154.310 ops/s
# Warmup Iteration   5: 16917048.480 ops/s
# Warmup Iteration   6: 16005023.456 ops/s
# Warmup Iteration   7: 16542930.163 ops/s
# Warmup Iteration   8: 16770087.187 ops/s
# Warmup Iteration   9: 16659317.786 ops/s
# Warmup Iteration  10: 16141199.406 ops/s
# Warmup Iteration  11: 16976483.113 ops/s
# Warmup Iteration  12: 16099318.998 ops/s
# Warmup Iteration  13: 16491208.875 ops/s
# Warmup Iteration  14: 16297815.935 ops/s
# Warmup Iteration  15: 16731655.981 ops/s
# Warmup Iteration  16: 16222854.221 ops/s
# Warmup Iteration  17: 16093672.109 ops/s
# Warmup Iteration  18: 16273296.629 ops/s
# Warmup Iteration  19: 16454123.631 ops/s
# Warmup Iteration  20: 16555344.292 ops/s
# Warmup Iteration  21: 17079771.480 ops/s
# Warmup Iteration  22: 16155645.728 ops/s
# Warmup Iteration  23: 16824253.612 ops/s
# Warmup Iteration  24: 16162767.722 ops/s
# Warmup Iteration  25: 16716795.609 ops/s
# Warmup Iteration  26: 16449300.764 ops/s
# Warmup Iteration  27: 16209362.339 ops/s
# Warmup Iteration  28: 16429029.545 ops/s
# Warmup Iteration  29: 17242948.102 ops/s
# Warmup Iteration  30: 16167556.367 ops/s
Iteration   1: 17231086.829 ops/s
Iteration   2: 15992216.184 ops/s
Iteration   3: 16712255.360 ops/s
Iteration   4: 17063974.611 ops/s
Iteration   5: 16122226.425 ops/s
Iteration   6: 16891197.454 ops/s
Iteration   7: 16541732.651 ops/s
Iteration   8: 16394755.413 ops/s
Iteration   9: 16285668.855 ops/s
Iteration  10: 16256839.167 ops/s
Iteration  11: 16591009.356 ops/s
Iteration  12: 16457989.015 ops/s
Iteration  13: 17178973.964 ops/s
Iteration  14: 16197682.290 ops/s
Iteration  15: 16275916.621 ops/s
Iteration  16: 13135836.213 ops/s
Iteration  17: 15984698.170 ops/s
Iteration  18: 16766306.484 ops/s
Iteration  19: 15961409.839 ops/s
Iteration  20: 16437123.590 ops/s
Iteration  21: 16885680.228 ops/s
Iteration  22: 16002837.477 ops/s
Iteration  23: 16663532.645 ops/s
Iteration  24: 16135712.938 ops/s
Iteration  25: 16739766.655 ops/s
Iteration  26: 16410279.094 ops/s
Iteration  27: 16835123.836 ops/s
Iteration  28: 16457746.788 ops/s
Iteration  29: 16156611.220 ops/s
Iteration  30: 16463489.205 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrDefaultTest._Benchmark.benchmark_firstEmpty":
  16374322.619 ±(99.9%) 472593.874 ops/s [Average]
  (min, avg, max) = (13135836.213, 16374322.619, 17231086.829), stdev = 707356.316
  CI (99.9%): [15901728.745, 16846916.493] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt         Score        Error  Units
ObservableStageSubscriberOrDefaultTest._Benchmark.benchmark_firstEmpty  thrpt   30  16374322.619 ± 472593.874  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorCompleteTest._Benchmark.benchmark_empty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorCompleteTest._Benchmark.benchmark_empty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 4088211.503 ops/s
# Warmup Iteration   2: 6544795.841 ops/s
# Warmup Iteration   3: 10092470.303 ops/s
# Warmup Iteration   4: 9849591.188 ops/s
# Warmup Iteration   5: 9437934.523 ops/s
# Warmup Iteration   6: 10121810.839 ops/s
# Warmup Iteration   7: 9480054.712 ops/s
# Warmup Iteration   8: 9697894.562 ops/s
# Warmup Iteration   9: 9819157.839 ops/s
# Warmup Iteration  10: 9586486.765 ops/s
# Warmup Iteration  11: 9660333.955 ops/s
# Warmup Iteration  12: 9837077.816 ops/s
# Warmup Iteration  13: 9596687.496 ops/s
# Warmup Iteration  14: 9947382.872 ops/s
# Warmup Iteration  15: 9839922.569 ops/s
# Warmup Iteration  16: 9701093.950 ops/s
# Warmup Iteration  17: 9718790.569 ops/s
# Warmup Iteration  18: 9773398.145 ops/s
# Warmup Iteration  19: 9660123.101 ops/s
# Warmup Iteration  20: 9896200.891 ops/s
# Warmup Iteration  21: 9494365.359 ops/s
# Warmup Iteration  22: 9605784.315 ops/s
# Warmup Iteration  23: 10320101.770 ops/s
# Warmup Iteration  24: 9274057.469 ops/s
# Warmup Iteration  25: 9525664.129 ops/s
# Warmup Iteration  26: 10215649.651 ops/s
# Warmup Iteration  27: 9388126.557 ops/s
# Warmup Iteration  28: 9635830.918 ops/s
# Warmup Iteration  29: 9943247.415 ops/s
# Warmup Iteration  30: 9509313.999 ops/s
Iteration   1: 10069708.309 ops/s
Iteration   2: 10114408.997 ops/s
Iteration   3: 9697705.740 ops/s
Iteration   4: 9634298.382 ops/s
Iteration   5: 9873166.964 ops/s
Iteration   6: 9559000.530 ops/s
Iteration   7: 9364187.460 ops/s
Iteration   8: 9737503.530 ops/s
Iteration   9: 10352540.318 ops/s
Iteration  10: 9886096.808 ops/s
Iteration  11: 10007312.331 ops/s
Iteration  12: 9189053.300 ops/s
Iteration  13: 9635988.585 ops/s
Iteration  14: 9913539.391 ops/s
Iteration  15: 9602826.127 ops/s
Iteration  16: 7419418.199 ops/s
Iteration  17: 10297294.232 ops/s
Iteration  18: 9496840.276 ops/s
Iteration  19: 9685978.208 ops/s
Iteration  20: 9598224.621 ops/s
Iteration  21: 9744592.250 ops/s
Iteration  22: 9935163.930 ops/s
Iteration  23: 9670778.356 ops/s
Iteration  24: 10023055.261 ops/s
Iteration  25: 9997348.565 ops/s
Iteration  26: 9467953.299 ops/s
Iteration  27: 10070270.236 ops/s
Iteration  28: 9712544.986 ops/s
Iteration  29: 9730650.099 ops/s
Iteration  30: 9417161.785 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorCompleteTest._Benchmark.benchmark_empty":
  9696820.369 ±(99.9%) 339408.634 ops/s [Average]
  (min, avg, max) = (7419418.199, 9696820.369, 10352540.318), stdev = 508010.904
  CI (99.9%): [9357411.735, 10036229.003] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score        Error  Units
ObservableOnErrorCompleteTest._Benchmark.benchmark_empty  thrpt   30  9696820.369 ± 339408.634  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrDefaultTest._Benchmark.benchmark_singleEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrDefaultTest._Benchmark.benchmark_singleEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 5418695.806 ops/s
# Warmup Iteration   2: 12641258.400 ops/s
# Warmup Iteration   3: 14953011.460 ops/s
# Warmup Iteration   4: 16864263.731 ops/s
# Warmup Iteration   5: 16199811.333 ops/s
# Warmup Iteration   6: 16530820.219 ops/s
# Warmup Iteration   7: 15884396.741 ops/s
# Warmup Iteration   8: 16440896.059 ops/s
# Warmup Iteration   9: 16346376.304 ops/s
# Warmup Iteration  10: 16913419.244 ops/s
# Warmup Iteration  11: 16463858.573 ops/s
# Warmup Iteration  12: 15882622.567 ops/s
# Warmup Iteration  13: 16804295.767 ops/s
# Warmup Iteration  14: 16481124.938 ops/s
# Warmup Iteration  15: 16177612.598 ops/s
# Warmup Iteration  16: 16347983.213 ops/s
# Warmup Iteration  17: 16465208.499 ops/s
# Warmup Iteration  18: 17113140.835 ops/s
# Warmup Iteration  19: 16091612.341 ops/s
# Warmup Iteration  20: 16799437.471 ops/s
# Warmup Iteration  21: 16645450.351 ops/s
# Warmup Iteration  22: 16554059.111 ops/s
# Warmup Iteration  23: 16808817.682 ops/s
# Warmup Iteration  24: 16655589.532 ops/s
# Warmup Iteration  25: 16060778.426 ops/s
# Warmup Iteration  26: 16487763.651 ops/s
# Warmup Iteration  27: 16982802.633 ops/s
# Warmup Iteration  28: 16068669.239 ops/s
# Warmup Iteration  29: 16393144.683 ops/s
# Warmup Iteration  30: 17054787.671 ops/s
Iteration   1: 16941061.073 ops/s
Iteration   2: 16149707.742 ops/s
Iteration   3: 17321772.641 ops/s
Iteration   4: 16737290.094 ops/s
Iteration   5: 16070099.710 ops/s
Iteration   6: 17733940.087 ops/s
Iteration   7: 16323347.199 ops/s
Iteration   8: 16611855.708 ops/s
Iteration   9: 17185975.980 ops/s
Iteration  10: 16093846.298 ops/s
Iteration  11: 16717435.867 ops/s
Iteration  12: 16220084.352 ops/s
Iteration  13: 16625276.178 ops/s
Iteration  14: 16447675.957 ops/s
Iteration  15: 13481504.292 ops/s
Iteration  16: 15584804.587 ops/s
Iteration  17: 16794975.844 ops/s
Iteration  18: 16456559.944 ops/s
Iteration  19: 16093285.857 ops/s
Iteration  20: 17186309.624 ops/s
Iteration  21: 16144383.641 ops/s
Iteration  22: 16707907.099 ops/s
Iteration  23: 16657047.525 ops/s
Iteration  24: 16796089.092 ops/s
Iteration  25: 17054736.215 ops/s
Iteration  26: 16382431.520 ops/s
Iteration  27: 16182494.142 ops/s
Iteration  28: 17038300.575 ops/s
Iteration  29: 15976473.374 ops/s
Iteration  30: 17182815.907 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrDefaultTest._Benchmark.benchmark_singleEmpty":
  16496649.604 ±(99.9%) 496074.916 ops/s [Average]
  (min, avg, max) = (13481504.292, 16496649.604, 17733940.087), stdev = 742501.637
  CI (99.9%): [16000574.688, 16992724.520] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt         Score        Error  Units
ObservableStageSubscriberOrDefaultTest._Benchmark.benchmark_singleEmpty  thrpt   30  16496649.604 ± 496074.916  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrDefaultTest._Benchmark.benchmark_lastEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrDefaultTest._Benchmark.benchmark_lastEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 6285811.860 ops/s
# Warmup Iteration   2: 12217497.477 ops/s
# Warmup Iteration   3: 15203536.244 ops/s
# Warmup Iteration   4: 16533955.966 ops/s
# Warmup Iteration   5: 16762936.808 ops/s
# Warmup Iteration   6: 16097647.548 ops/s
# Warmup Iteration   7: 16510148.463 ops/s
# Warmup Iteration   8: 16124084.106 ops/s
# Warmup Iteration   9: 16492903.171 ops/s
# Warmup Iteration  10: 16697319.877 ops/s
# Warmup Iteration  11: 16413711.907 ops/s
# Warmup Iteration  12: 16048095.253 ops/s
# Warmup Iteration  13: 17271939.189 ops/s
# Warmup Iteration  14: 16868381.636 ops/s
# Warmup Iteration  15: 16399019.887 ops/s
# Warmup Iteration  16: 16188547.586 ops/s
# Warmup Iteration  17: 16311740.352 ops/s
# Warmup Iteration  18: 16380265.470 ops/s
# Warmup Iteration  19: 16795538.995 ops/s
# Warmup Iteration  20: 16403467.203 ops/s
# Warmup Iteration  21: 16892866.644 ops/s
# Warmup Iteration  22: 16078353.562 ops/s
# Warmup Iteration  23: 16228143.774 ops/s
# Warmup Iteration  24: 17206869.749 ops/s
# Warmup Iteration  25: 16159277.100 ops/s
# Warmup Iteration  26: 17395307.674 ops/s
# Warmup Iteration  27: 16052002.772 ops/s
# Warmup Iteration  28: 16525692.807 ops/s
# Warmup Iteration  29: 16881181.227 ops/s
# Warmup Iteration  30: 16996557.597 ops/s
Iteration   1: 16252832.753 ops/s
Iteration   2: 16645676.513 ops/s
Iteration   3: 17137074.349 ops/s
Iteration   4: 16642652.058 ops/s
Iteration   5: 17289214.059 ops/s
Iteration   6: 15820851.422 ops/s
Iteration   7: 16737149.549 ops/s
Iteration   8: 15940981.742 ops/s
Iteration   9: 17295935.816 ops/s
Iteration  10: 16068850.524 ops/s
Iteration  11: 16758416.511 ops/s
Iteration  12: 16002834.132 ops/s
Iteration  13: 17264801.647 ops/s
Iteration  14: 16482654.102 ops/s
Iteration  15: 16009384.501 ops/s
Iteration  16: 16832527.157 ops/s
Iteration  17: 14454449.734 ops/s
Iteration  18: 14127192.518 ops/s
Iteration  19: 16182533.863 ops/s
Iteration  20: 15887536.463 ops/s
Iteration  21: 17050865.528 ops/s
Iteration  22: 16297799.287 ops/s
Iteration  23: 16515175.881 ops/s
Iteration  24: 16560928.344 ops/s
Iteration  25: 16394418.528 ops/s
Iteration  26: 15907140.709 ops/s
Iteration  27: 16199506.934 ops/s
Iteration  28: 16319333.253 ops/s
Iteration  29: 16856786.313 ops/s
Iteration  30: 15888957.514 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrDefaultTest._Benchmark.benchmark_lastEmpty":
  16327482.057 ±(99.9%) 476696.478 ops/s [Average]
  (min, avg, max) = (14127192.518, 16327482.057, 17295935.816), stdev = 713496.901
  CI (99.9%): [15850785.579, 16804178.535] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt         Score        Error  Units
ObservableStageSubscriberOrDefaultTest._Benchmark.benchmark_lastEmpty  thrpt   30  16327482.057 ± 476696.478  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDelayTest._Benchmark.benchmark_onCompleteFinal$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDelayTest._Benchmark.benchmark_onCompleteFinal

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.697 ops/s
# Warmup Iteration   2: 19579.902 ops/s
# Warmup Iteration   3: 36582.664 ops/s
# Warmup Iteration   4: 64605.842 ops/s
# Warmup Iteration   5: 60055.743 ops/s
# Warmup Iteration   6: 109966.196 ops/s
# Warmup Iteration   7: 243200.749 ops/s
# Warmup Iteration   8: 249797.470 ops/s
# Warmup Iteration   9: 233171.456 ops/s
# Warmup Iteration  10: 252047.050 ops/s
# Warmup Iteration  11: 235198.639 ops/s
# Warmup Iteration  12: 256265.214 ops/s
# Warmup Iteration  13: 266523.553 ops/s
# Warmup Iteration  14: 260065.184 ops/s
# Warmup Iteration  15: 262483.951 ops/s
# Warmup Iteration  16: 263755.399 ops/s
# Warmup Iteration  17: 263291.592 ops/s
# Warmup Iteration  18: 271962.457 ops/s
# Warmup Iteration  19: 253123.432 ops/s
# Warmup Iteration  20: 248234.859 ops/s
# Warmup Iteration  21: 276573.306 ops/s
# Warmup Iteration  22: 256767.406 ops/s
# Warmup Iteration  23: 267972.327 ops/s
# Warmup Iteration  24: 255009.043 ops/s
# Warmup Iteration  25: 271315.827 ops/s
# Warmup Iteration  26: 275993.939 ops/s
# Warmup Iteration  27: 255430.361 ops/s
# Warmup Iteration  28: 272196.355 ops/s
# Warmup Iteration  29: 256527.676 ops/s
# Warmup Iteration  30: 269947.624 ops/s
Iteration   1: 270951.160 ops/s
Iteration   2: 263887.985 ops/s
Iteration   3: 265225.747 ops/s
Iteration   4: 259100.243 ops/s
Iteration   5: 269428.442 ops/s
Iteration   6: 265922.691 ops/s
Iteration   7: 257560.332 ops/s
Iteration   8: 271908.280 ops/s
Iteration   9: 274419.051 ops/s
Iteration  10: 256111.652 ops/s
Iteration  11: 259535.753 ops/s
Iteration  12: 269599.669 ops/s
Iteration  13: 262709.188 ops/s
Iteration  14: 263157.710 ops/s
Iteration  15: 258606.837 ops/s
Iteration  16: 274284.539 ops/s
Iteration  17: 263254.935 ops/s
Iteration  18: 248081.711 ops/s
Iteration  19: 240823.844 ops/s
Iteration  20: 252566.624 ops/s
Iteration  21: 271751.238 ops/s
Iteration  22: 262337.303 ops/s
Iteration  23: 271576.108 ops/s
Iteration  24: 256793.885 ops/s
Iteration  25: 263033.156 ops/s
Iteration  26: 263156.840 ops/s
Iteration  27: 259247.300 ops/s
Iteration  28: 273142.490 ops/s
Iteration  29: 263596.540 ops/s
Iteration  30: 265260.132 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableDelayTest._Benchmark.benchmark_onCompleteFinal":
  263234.379 ±(99.9%) 5199.331 ops/s [Average]
  (min, avg, max) = (240823.844, 263234.379, 274419.051), stdev = 7782.114
  CI (99.9%): [258035.049, 268433.710] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score      Error  Units
ObservableDelayTest._Benchmark.benchmark_onCompleteFinal  thrpt   30  263234.379 ± 5199.331  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrErrorTest._Benchmark.benchmark_firstEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrErrorTest._Benchmark.benchmark_firstEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 205501.300 ops/s
# Warmup Iteration   2: 305783.536 ops/s
# Warmup Iteration   3: 293043.579 ops/s
# Warmup Iteration   4: 348795.796 ops/s
# Warmup Iteration   5: 332210.057 ops/s
# Warmup Iteration   6: 337019.242 ops/s
# Warmup Iteration   7: 338484.344 ops/s
# Warmup Iteration   8: 335073.524 ops/s
# Warmup Iteration   9: 333474.870 ops/s
# Warmup Iteration  10: 345807.434 ops/s
# Warmup Iteration  11: 335656.990 ops/s
# Warmup Iteration  12: 336549.891 ops/s
# Warmup Iteration  13: 345502.651 ops/s
# Warmup Iteration  14: 343760.424 ops/s
# Warmup Iteration  15: 339968.334 ops/s
# Warmup Iteration  16: 344788.665 ops/s
# Warmup Iteration  17: 362647.840 ops/s
# Warmup Iteration  18: 379874.790 ops/s
# Warmup Iteration  19: 357164.327 ops/s
# Warmup Iteration  20: 356546.387 ops/s
# Warmup Iteration  21: 362740.638 ops/s
# Warmup Iteration  22: 350576.938 ops/s
# Warmup Iteration  23: 354660.882 ops/s
# Warmup Iteration  24: 349755.893 ops/s
# Warmup Iteration  25: 370454.491 ops/s
# Warmup Iteration  26: 361836.238 ops/s
# Warmup Iteration  27: 369557.792 ops/s
# Warmup Iteration  28: 359288.151 ops/s
# Warmup Iteration  29: 361422.977 ops/s
# Warmup Iteration  30: 366233.318 ops/s
Iteration   1: 355579.685 ops/s
Iteration   2: 366575.947 ops/s
Iteration   3: 340324.306 ops/s
Iteration   4: 351346.059 ops/s
Iteration   5: 372617.935 ops/s
Iteration   6: 349154.784 ops/s
Iteration   7: 359057.943 ops/s
Iteration   8: 357205.875 ops/s
Iteration   9: 344613.636 ops/s
Iteration  10: 342222.726 ops/s
Iteration  11: 360208.445 ops/s
Iteration  12: 332821.316 ops/s
Iteration  13: 367655.711 ops/s
Iteration  14: 347749.106 ops/s
Iteration  15: 334973.961 ops/s
Iteration  16: 361234.828 ops/s
Iteration  17: 354276.297 ops/s
Iteration  18: 362880.356 ops/s
Iteration  19: 370286.261 ops/s
Iteration  20: 282517.365 ops/s
Iteration  21: 372268.985 ops/s
Iteration  22: 371351.842 ops/s
Iteration  23: 376560.481 ops/s
Iteration  24: 365491.964 ops/s
Iteration  25: 363971.818 ops/s
Iteration  26: 365590.116 ops/s
Iteration  27: 353317.698 ops/s
Iteration  28: 368300.084 ops/s
Iteration  29: 363233.159 ops/s
Iteration  30: 355004.890 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrErrorTest._Benchmark.benchmark_firstEmpty":
  355613.119 ±(99.9%) 11958.782 ops/s [Average]
  (min, avg, max) = (282517.365, 355613.119, 376560.481), stdev = 17899.343
  CI (99.9%): [343654.337, 367571.901] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score       Error  Units
ObservableStageSubscriberOrErrorTest._Benchmark.benchmark_firstEmpty  thrpt   30  355613.119 ± 11958.782  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDetachTest._Benchmark.benchmark_empty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDetachTest._Benchmark.benchmark_empty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2770882.850 ops/s
# Warmup Iteration   2: 5916348.309 ops/s
# Warmup Iteration   3: 7456454.793 ops/s
# Warmup Iteration   4: 7825800.107 ops/s
# Warmup Iteration   5: 7965085.591 ops/s
# Warmup Iteration   6: 7623621.880 ops/s
# Warmup Iteration   7: 7844847.633 ops/s
# Warmup Iteration   8: 7768298.260 ops/s
# Warmup Iteration   9: 7604853.771 ops/s
# Warmup Iteration  10: 8092188.040 ops/s
# Warmup Iteration  11: 7986039.543 ops/s
# Warmup Iteration  12: 7451328.775 ops/s
# Warmup Iteration  13: 8082854.787 ops/s
# Warmup Iteration  14: 7511737.528 ops/s
# Warmup Iteration  15: 7990060.329 ops/s
# Warmup Iteration  16: 7574582.343 ops/s
# Warmup Iteration  17: 7799668.176 ops/s
# Warmup Iteration  18: 8070620.328 ops/s
# Warmup Iteration  19: 7503725.400 ops/s
# Warmup Iteration  20: 7759123.674 ops/s
# Warmup Iteration  21: 7727594.363 ops/s
# Warmup Iteration  22: 7831271.276 ops/s
# Warmup Iteration  23: 7775814.847 ops/s
# Warmup Iteration  24: 7651104.099 ops/s
# Warmup Iteration  25: 8184062.796 ops/s
# Warmup Iteration  26: 7840320.350 ops/s
# Warmup Iteration  27: 7807646.400 ops/s
# Warmup Iteration  28: 7883723.506 ops/s
# Warmup Iteration  29: 7636731.395 ops/s
# Warmup Iteration  30: 7923127.523 ops/s
Iteration   1: 7906808.732 ops/s
Iteration   2: 7720956.790 ops/s
Iteration   3: 7772040.219 ops/s
Iteration   4: 7841734.429 ops/s
Iteration   5: 7616199.277 ops/s
Iteration   6: 8043990.466 ops/s
Iteration   7: 7659277.165 ops/s
Iteration   8: 7603727.004 ops/s
Iteration   9: 8119337.801 ops/s
Iteration  10: 7556646.867 ops/s
Iteration  11: 8287505.875 ops/s
Iteration  12: 7518369.089 ops/s
Iteration  13: 8141426.799 ops/s
Iteration  14: 7787353.899 ops/s
Iteration  15: 7857850.059 ops/s
Iteration  16: 8104055.134 ops/s
Iteration  17: 7826323.176 ops/s
Iteration  18: 8046526.261 ops/s
Iteration  19: 7926096.791 ops/s
Iteration  20: 7530189.696 ops/s
Iteration  21: 8095006.791 ops/s
Iteration  22: 7518048.746 ops/s
Iteration  23: 6264502.854 ops/s
Iteration  24: 8028880.233 ops/s
Iteration  25: 7717730.996 ops/s
Iteration  26: 7875586.044 ops/s
Iteration  27: 7592390.908 ops/s
Iteration  28: 7550705.760 ops/s
Iteration  29: 8005553.300 ops/s
Iteration  30: 7590332.984 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableDetachTest._Benchmark.benchmark_empty":
  7770171.805 ±(99.9%) 240783.002 ops/s [Average]
  (min, avg, max) = (6264502.854, 7770171.805, 8287505.875), stdev = 360392.689
  CI (99.9%): [7529388.803, 8010954.806] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score        Error  Units
ObservableDetachTest._Benchmark.benchmark_empty  thrpt   30  7770171.805 ± 240783.002  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservablePublishTest._Benchmark.benchmark_empty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservablePublishTest._Benchmark.benchmark_empty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 4711225.667 ops/s
# Warmup Iteration   2: 10630074.871 ops/s
# Warmup Iteration   3: 11136536.777 ops/s
# Warmup Iteration   4: 13164335.996 ops/s
# Warmup Iteration   5: 13252985.033 ops/s
# Warmup Iteration   6: 13066349.035 ops/s
# Warmup Iteration   7: 12588122.235 ops/s
# Warmup Iteration   8: 13436419.146 ops/s
# Warmup Iteration   9: 12862829.626 ops/s
# Warmup Iteration  10: 12968143.699 ops/s
# Warmup Iteration  11: 13317343.949 ops/s
# Warmup Iteration  12: 13086985.111 ops/s
# Warmup Iteration  13: 13679990.282 ops/s
# Warmup Iteration  14: 12588897.529 ops/s
# Warmup Iteration  15: 13289513.973 ops/s
# Warmup Iteration  16: 12612150.606 ops/s
# Warmup Iteration  17: 13616830.753 ops/s
# Warmup Iteration  18: 12984045.942 ops/s
# Warmup Iteration  19: 13357986.014 ops/s
# Warmup Iteration  20: 13604350.944 ops/s
# Warmup Iteration  21: 13438571.878 ops/s
# Warmup Iteration  22: 13413264.720 ops/s
# Warmup Iteration  23: 13297686.961 ops/s
# Warmup Iteration  24: 13533307.907 ops/s
# Warmup Iteration  25: 12743737.340 ops/s
# Warmup Iteration  26: 13235418.802 ops/s
# Warmup Iteration  27: 13141605.534 ops/s
# Warmup Iteration  28: 13217485.113 ops/s
# Warmup Iteration  29: 13677844.323 ops/s
# Warmup Iteration  30: 12887666.803 ops/s
Iteration   1: 12872721.488 ops/s
Iteration   2: 13403276.557 ops/s
Iteration   3: 12871534.072 ops/s
Iteration   4: 13068863.231 ops/s
Iteration   5: 13166236.266 ops/s
Iteration   6: 12446558.478 ops/s
Iteration   7: 13263144.726 ops/s
Iteration   8: 12946774.021 ops/s
Iteration   9: 12716456.383 ops/s
Iteration  10: 13258764.407 ops/s
Iteration  11: 12840491.471 ops/s
Iteration  12: 13436078.272 ops/s
Iteration  13: 13145973.159 ops/s
Iteration  14: 13408629.692 ops/s
Iteration  15: 12591521.999 ops/s
Iteration  16: 13592915.645 ops/s
Iteration  17: 12878684.947 ops/s
Iteration  18: 13309444.853 ops/s
Iteration  19: 13403491.327 ops/s
Iteration  20: 12939863.192 ops/s
Iteration  21: 13517038.477 ops/s
Iteration  22: 12599281.486 ops/s
Iteration  23: 13449312.023 ops/s
Iteration  24: 12731914.593 ops/s
Iteration  25: 13229910.668 ops/s
Iteration  26: 11303299.581 ops/s
Iteration  27: 12807168.975 ops/s
Iteration  28: 13440696.709 ops/s
Iteration  29: 13006856.926 ops/s
Iteration  30: 13333868.282 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservablePublishTest._Benchmark.benchmark_empty":
  13032692.397 ±(99.9%) 301271.958 ops/s [Average]
  (min, avg, max) = (11303299.581, 13032692.397, 13592915.645), stdev = 450929.717
  CI (99.9%): [12731420.439, 13333964.354] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt         Score        Error  Units
ObservablePublishTest._Benchmark.benchmark_empty  thrpt   30  13032692.397 ± 301271.958  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDoAfterNextTest._Benchmark.benchmark_emptyConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDoAfterNextTest._Benchmark.benchmark_emptyConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1513660.890 ops/s
# Warmup Iteration   2: 5468063.971 ops/s
# Warmup Iteration   3: 7836585.167 ops/s
# Warmup Iteration   4: 7243152.769 ops/s
# Warmup Iteration   5: 7588813.471 ops/s
# Warmup Iteration   6: 7393954.308 ops/s
# Warmup Iteration   7: 7375429.569 ops/s
# Warmup Iteration   8: 7512777.927 ops/s
# Warmup Iteration   9: 7437917.342 ops/s
# Warmup Iteration  10: 7656788.059 ops/s
# Warmup Iteration  11: 7335773.308 ops/s
# Warmup Iteration  12: 7124825.628 ops/s
# Warmup Iteration  13: 7611337.548 ops/s
# Warmup Iteration  14: 7403842.525 ops/s
# Warmup Iteration  15: 7480472.781 ops/s
# Warmup Iteration  16: 7548733.760 ops/s
# Warmup Iteration  17: 7245516.539 ops/s
# Warmup Iteration  18: 7106876.100 ops/s
# Warmup Iteration  19: 7606243.986 ops/s
# Warmup Iteration  20: 7687046.720 ops/s
# Warmup Iteration  21: 7957532.282 ops/s
# Warmup Iteration  22: 7812767.323 ops/s
# Warmup Iteration  23: 7409355.642 ops/s
# Warmup Iteration  24: 7264629.225 ops/s
# Warmup Iteration  25: 7429029.170 ops/s
# Warmup Iteration  26: 7368862.231 ops/s
# Warmup Iteration  27: 7187973.295 ops/s
# Warmup Iteration  28: 7810582.487 ops/s
# Warmup Iteration  29: 7113130.190 ops/s
# Warmup Iteration  30: 7860020.542 ops/s
Iteration   1: 7237942.774 ops/s
Iteration   2: 7285533.163 ops/s
Iteration   3: 7573003.169 ops/s
Iteration   4: 7206800.213 ops/s
Iteration   5: 7888406.916 ops/s
Iteration   6: 7229452.239 ops/s
Iteration   7: 7362299.155 ops/s
Iteration   8: 7887611.521 ops/s
Iteration   9: 7225457.288 ops/s
Iteration  10: 7707265.494 ops/s
Iteration  11: 7338313.383 ops/s
Iteration  12: 7461823.170 ops/s
Iteration  13: 7671515.149 ops/s
Iteration  14: 7567901.462 ops/s
Iteration  15: 7198329.214 ops/s
Iteration  16: 7605166.058 ops/s
Iteration  17: 7464376.040 ops/s
Iteration  18: 7256375.379 ops/s
Iteration  19: 7822690.290 ops/s
Iteration  20: 7608607.040 ops/s
Iteration  21: 7160785.296 ops/s
Iteration  22: 7641082.553 ops/s
Iteration  23: 7459590.587 ops/s
Iteration  24: 6189888.551 ops/s
Iteration  25: 7502824.438 ops/s
Iteration  26: 7759237.909 ops/s
Iteration  27: 7067475.781 ops/s
Iteration  28: 7511860.133 ops/s
Iteration  29: 7524217.689 ops/s
Iteration  30: 6964164.848 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableDoAfterNextTest._Benchmark.benchmark_emptyConditional":
  7412666.563 ±(99.9%) 222769.739 ops/s [Average]
  (min, avg, max) = (6189888.551, 7412666.563, 7888406.916), stdev = 333431.283
  CI (99.9%): [7189896.824, 7635436.302] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score        Error  Units
ObservableDoAfterNextTest._Benchmark.benchmark_emptyConditional  thrpt   30  7412666.563 ± 222769.739  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableCacheTest._Benchmark.benchmark_valuesAndThenError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableCacheTest._Benchmark.benchmark_valuesAndThenError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 37170.086 ops/s
# Warmup Iteration   2: 248940.423 ops/s
# Warmup Iteration   3: 292420.301 ops/s
# Warmup Iteration   4: 287496.195 ops/s
# Warmup Iteration   5: 335372.465 ops/s
# Warmup Iteration   6: 309488.128 ops/s
# Warmup Iteration   7: 336491.821 ops/s
# Warmup Iteration   8: 327225.743 ops/s
# Warmup Iteration   9: 345879.786 ops/s
# Warmup Iteration  10: 332620.665 ops/s
# Warmup Iteration  11: 328282.196 ops/s
# Warmup Iteration  12: 336298.208 ops/s
# Warmup Iteration  13: 347472.316 ops/s
# Warmup Iteration  14: 334395.163 ops/s
# Warmup Iteration  15: 333864.932 ops/s
# Warmup Iteration  16: 357025.154 ops/s
# Warmup Iteration  17: 348451.074 ops/s
# Warmup Iteration  18: 362796.867 ops/s
# Warmup Iteration  19: 347676.366 ops/s
# Warmup Iteration  20: 339147.957 ops/s
# Warmup Iteration  21: 350021.306 ops/s
# Warmup Iteration  22: 355969.854 ops/s
# Warmup Iteration  23: 336849.720 ops/s
# Warmup Iteration  24: 345988.345 ops/s
# Warmup Iteration  25: 350831.669 ops/s
# Warmup Iteration  26: 338949.835 ops/s
# Warmup Iteration  27: 345703.138 ops/s
# Warmup Iteration  28: 339942.908 ops/s
# Warmup Iteration  29: 350987.648 ops/s
# Warmup Iteration  30: 344760.310 ops/s
Iteration   1: 350569.295 ops/s
Iteration   2: 353761.291 ops/s
Iteration   3: 361966.466 ops/s
Iteration   4: 336914.635 ops/s
Iteration   5: 342313.206 ops/s
Iteration   6: 360829.370 ops/s
Iteration   7: 344274.833 ops/s
Iteration   8: 354103.578 ops/s
Iteration   9: 339491.809 ops/s
Iteration  10: 348969.685 ops/s
Iteration  11: 361160.303 ops/s
Iteration  12: 335831.229 ops/s
Iteration  13: 361266.056 ops/s
Iteration  14: 344240.271 ops/s
Iteration  15: 340698.465 ops/s
Iteration  16: 354764.089 ops/s
Iteration  17: 356147.262 ops/s
Iteration  18: 336852.913 ops/s
Iteration  19: 353401.343 ops/s
Iteration  20: 344661.386 ops/s
Iteration  21: 342530.830 ops/s
Iteration  22: 356018.639 ops/s
Iteration  23: 339745.902 ops/s
Iteration  24: 347707.477 ops/s
Iteration  25: 332931.971 ops/s
Iteration  26: 266807.809 ops/s
Iteration  27: 336402.860 ops/s
Iteration  28: 338226.846 ops/s
Iteration  29: 357316.119 ops/s
Iteration  30: 349625.715 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableCacheTest._Benchmark.benchmark_valuesAndThenError":
  344984.388 ±(99.9%) 11471.070 ops/s [Average]
  (min, avg, max) = (266807.809, 344984.388, 361966.466), stdev = 17169.358
  CI (99.9%): [333513.319, 356455.458] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score       Error  Units
ObservableCacheTest._Benchmark.benchmark_valuesAndThenError  thrpt   30  344984.388 ± 11471.070  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatTest._Benchmark.benchmark_concatMapErrorEmptySource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatTest._Benchmark.benchmark_concatMapErrorEmptySource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 19465922.308 ops/s
# Warmup Iteration   2: 43508884.293 ops/s
# Warmup Iteration   3: 56973165.006 ops/s
# Warmup Iteration   4: 55850271.642 ops/s
# Warmup Iteration   5: 57202087.464 ops/s
# Warmup Iteration   6: 54396542.613 ops/s
# Warmup Iteration   7: 54377132.803 ops/s
# Warmup Iteration   8: 58464774.987 ops/s
# Warmup Iteration   9: 55588964.141 ops/s
# Warmup Iteration  10: 54501796.669 ops/s
# Warmup Iteration  11: 57770992.598 ops/s
# Warmup Iteration  12: 56104077.661 ops/s
# Warmup Iteration  13: 59697735.170 ops/s
# Warmup Iteration  14: 56194372.715 ops/s
# Warmup Iteration  15: 56228661.048 ops/s
# Warmup Iteration  16: 57837568.487 ops/s
# Warmup Iteration  17: 56812925.063 ops/s
# Warmup Iteration  18: 58358333.498 ops/s
# Warmup Iteration  19: 56489087.465 ops/s
# Warmup Iteration  20: 58860147.040 ops/s
# Warmup Iteration  21: 56650363.432 ops/s
# Warmup Iteration  22: 55334687.938 ops/s
# Warmup Iteration  23: 59504522.492 ops/s
# Warmup Iteration  24: 58088982.914 ops/s
# Warmup Iteration  25: 56816411.537 ops/s
# Warmup Iteration  26: 58162078.668 ops/s
# Warmup Iteration  27: 56687816.061 ops/s
# Warmup Iteration  28: 59454056.972 ops/s
# Warmup Iteration  29: 55683963.991 ops/s
# Warmup Iteration  30: 57350269.967 ops/s
Iteration   1: 58584821.414 ops/s
Iteration   2: 56617381.257 ops/s
Iteration   3: 56584698.891 ops/s
Iteration   4: 58393219.927 ops/s
Iteration   5: 57438211.367 ops/s
Iteration   6: 58298426.355 ops/s
Iteration   7: 57517994.629 ops/s
Iteration   8: 57064297.189 ops/s
Iteration   9: 60048506.109 ops/s
Iteration  10: 56220886.772 ops/s
Iteration  11: 55881838.972 ops/s
Iteration  12: 59242761.286 ops/s
Iteration  13: 57060705.650 ops/s
Iteration  14: 57753644.120 ops/s
Iteration  15: 58421958.951 ops/s
Iteration  16: 55966402.418 ops/s
Iteration  17: 58716798.185 ops/s
Iteration  18: 57931765.332 ops/s
Iteration  19: 58222356.613 ops/s
Iteration  20: 59336136.847 ops/s
Iteration  21: 55694603.256 ops/s
Iteration  22: 60056921.223 ops/s
Iteration  23: 55788799.360 ops/s
Iteration  24: 58990081.909 ops/s
Iteration  25: 55875350.923 ops/s
Iteration  26: 57274805.598 ops/s
Iteration  27: 58394175.798 ops/s
Iteration  28: 58473331.249 ops/s
Iteration  29: 56647803.461 ops/s
Iteration  30: 57054810.651 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatTest._Benchmark.benchmark_concatMapErrorEmptySource":
  57651783.190 ±(99.9%) 849149.262 ops/s [Average]
  (min, avg, max) = (55694603.256, 57651783.190, 60056921.223), stdev = 1270966.736
  CI (99.9%): [56802633.928, 58500932.452] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt         Score        Error  Units
ObservableConcatTest._Benchmark.benchmark_concatMapErrorEmptySource  thrpt   30  57651783.190 ± 849149.262  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtTest._Benchmark.benchmark_elementAtIndex1WithDefaultOnEmptySourceObservable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtTest._Benchmark.benchmark_elementAtIndex1WithDefaultOnEmptySourceObservable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1056495.822 ops/s
# Warmup Iteration   2: 4725277.544 ops/s
# Warmup Iteration   3: 6549165.136 ops/s
# Warmup Iteration   4: 7026330.778 ops/s
# Warmup Iteration   5: 7041235.971 ops/s
# Warmup Iteration   6: 6798252.263 ops/s
# Warmup Iteration   7: 5771423.155 ops/s
# Warmup Iteration   8: 6393503.024 ops/s
# Warmup Iteration   9: 7078599.782 ops/s
# Warmup Iteration  10: 6551104.904 ops/s
# Warmup Iteration  11: 6955658.529 ops/s
# Warmup Iteration  12: 7151063.297 ops/s
# Warmup Iteration  13: 6868811.173 ops/s
# Warmup Iteration  14: 6948044.847 ops/s
# Warmup Iteration  15: 6669889.369 ops/s
# Warmup Iteration  16: 7083407.298 ops/s
# Warmup Iteration  17: 6886324.954 ops/s
# Warmup Iteration  18: 7151955.285 ops/s
# Warmup Iteration  19: 6944092.201 ops/s
# Warmup Iteration  20: 6920137.019 ops/s
# Warmup Iteration  21: 7091044.399 ops/s
# Warmup Iteration  22: 6760523.353 ops/s
# Warmup Iteration  23: 6937918.668 ops/s
# Warmup Iteration  24: 7063119.613 ops/s
# Warmup Iteration  25: 6878009.771 ops/s
# Warmup Iteration  26: 7121695.720 ops/s
# Warmup Iteration  27: 6817381.794 ops/s
# Warmup Iteration  28: 6989539.673 ops/s
# Warmup Iteration  29: 7180994.366 ops/s
# Warmup Iteration  30: 6640362.917 ops/s
Iteration   1: 7059842.355 ops/s
Iteration   2: 6867525.394 ops/s
Iteration   3: 7085600.287 ops/s
Iteration   4: 7045864.108 ops/s
Iteration   5: 6840154.524 ops/s
Iteration   6: 7216934.312 ops/s
Iteration   7: 6912286.016 ops/s
Iteration   8: 7015976.706 ops/s
Iteration   9: 7150955.296 ops/s
Iteration  10: 6836717.500 ops/s
Iteration  11: 7174693.985 ops/s
Iteration  12: 6885214.382 ops/s
Iteration  13: 7069399.277 ops/s
Iteration  14: 7117794.788 ops/s
Iteration  15: 6887200.902 ops/s
Iteration  16: 6785202.953 ops/s
Iteration  17: 7005646.033 ops/s
Iteration  18: 6857511.056 ops/s
Iteration  19: 7042567.167 ops/s
Iteration  20: 6825048.149 ops/s
Iteration  21: 6772362.176 ops/s
Iteration  22: 7169112.596 ops/s
Iteration  23: 6748758.918 ops/s
Iteration  24: 7081238.403 ops/s
Iteration  25: 6741851.729 ops/s
Iteration  26: 7291219.260 ops/s
Iteration  27: 7135289.293 ops/s
Iteration  28: 6771424.661 ops/s
Iteration  29: 7127038.158 ops/s
Iteration  30: 6922950.722 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtTest._Benchmark.benchmark_elementAtIndex1WithDefaultOnEmptySourceObservable":
  6981446.037 ±(99.9%) 105160.313 ops/s [Average]
  (min, avg, max) = (6741851.729, 6981446.037, 7291219.260), stdev = 157399.017
  CI (99.9%): [6876285.724, 7086606.350] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                        Mode  Cnt        Score        Error  Units
ObservableElementAtTest._Benchmark.benchmark_elementAtIndex1WithDefaultOnEmptySourceObservable  thrpt   30  6981446.037 ± 105160.313  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservablePublishTest._Benchmark.benchmark_onErrorAvailableUntilReset$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservablePublishTest._Benchmark.benchmark_onErrorAvailableUntilReset

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 42786.960 ops/s
# Warmup Iteration   2: 120516.161 ops/s
# Warmup Iteration   3: 338221.432 ops/s
# Warmup Iteration   4: 317818.393 ops/s
# Warmup Iteration   5: 329880.735 ops/s
# Warmup Iteration   6: 355735.106 ops/s
# Warmup Iteration   7: 361185.268 ops/s
# Warmup Iteration   8: 378385.122 ops/s
# Warmup Iteration   9: 363596.461 ops/s
# Warmup Iteration  10: 364524.189 ops/s
# Warmup Iteration  11: 353318.585 ops/s
# Warmup Iteration  12: 366469.771 ops/s
# Warmup Iteration  13: 371566.257 ops/s
# Warmup Iteration  14: 368616.406 ops/s
# Warmup Iteration  15: 377710.773 ops/s
# Warmup Iteration  16: 356267.066 ops/s
# Warmup Iteration  17: 378268.977 ops/s
# Warmup Iteration  18: 394681.251 ops/s
# Warmup Iteration  19: 371520.073 ops/s
# Warmup Iteration  20: 390296.739 ops/s
# Warmup Iteration  21: 363230.474 ops/s
# Warmup Iteration  22: 381319.724 ops/s
# Warmup Iteration  23: 362009.462 ops/s
# Warmup Iteration  24: 385174.901 ops/s
# Warmup Iteration  25: 377288.041 ops/s
# Warmup Iteration  26: 372558.630 ops/s
# Warmup Iteration  27: 385589.104 ops/s
# Warmup Iteration  28: 376314.590 ops/s
# Warmup Iteration  29: 369940.910 ops/s
# Warmup Iteration  30: 386300.609 ops/s
Iteration   1: 373803.977 ops/s
Iteration   2: 377016.932 ops/s
Iteration   3: 379401.606 ops/s
Iteration   4: 385781.285 ops/s
Iteration   5: 358685.279 ops/s
Iteration   6: 381128.750 ops/s
Iteration   7: 385749.660 ops/s
Iteration   8: 369865.664 ops/s
Iteration   9: 376934.293 ops/s
Iteration  10: 386252.388 ops/s
Iteration  11: 389873.452 ops/s
Iteration  12: 371968.406 ops/s
Iteration  13: 374794.369 ops/s
Iteration  14: 387791.895 ops/s
Iteration  15: 372231.065 ops/s
Iteration  16: 358837.188 ops/s
Iteration  17: 386653.897 ops/s
Iteration  18: 367141.480 ops/s
Iteration  19: 388202.323 ops/s
Iteration  20: 391274.278 ops/s
Iteration  21: 366539.657 ops/s
Iteration  22: 389361.118 ops/s
Iteration  23: 376555.731 ops/s
Iteration  24: 387777.205 ops/s
Iteration  25: 381608.017 ops/s
Iteration  26: 371409.044 ops/s
Iteration  27: 387903.378 ops/s
Iteration  28: 372204.362 ops/s
Iteration  29: 377882.333 ops/s
Iteration  30: 370075.430 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservablePublishTest._Benchmark.benchmark_onErrorAvailableUntilReset":
  378156.815 ±(99.9%) 6109.252 ops/s [Average]
  (min, avg, max) = (358685.279, 378156.815, 391274.278), stdev = 9144.041
  CI (99.9%): [372047.564, 384266.067] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score      Error  Units
ObservablePublishTest._Benchmark.benchmark_onErrorAvailableUntilReset  thrpt   30  378156.815 ± 6109.252  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableCombineLatestTest._Benchmark.benchmark_errorDelayed2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableCombineLatestTest._Benchmark.benchmark_errorDelayed2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 21348.984 ops/s
# Warmup Iteration   2: 111576.301 ops/s
# Warmup Iteration   3: 306621.261 ops/s
# Warmup Iteration   4: 401971.787 ops/s
# Warmup Iteration   5: 359160.812 ops/s
# Warmup Iteration   6: 430761.145 ops/s
# Warmup Iteration   7: 418578.757 ops/s
# Warmup Iteration   8: 446829.514 ops/s
# Warmup Iteration   9: 447608.220 ops/s
# Warmup Iteration  10: 417871.448 ops/s
# Warmup Iteration  11: 426455.999 ops/s
# Warmup Iteration  12: 428104.344 ops/s
# Warmup Iteration  13: 414068.864 ops/s
# Warmup Iteration  14: 441777.307 ops/s
# Warmup Iteration  15: 412296.794 ops/s
# Warmup Iteration  16: 437362.169 ops/s
# Warmup Iteration  17: 437715.921 ops/s
# Warmup Iteration  18: 432414.812 ops/s
# Warmup Iteration  19: 444180.964 ops/s
# Warmup Iteration  20: 423515.591 ops/s
# Warmup Iteration  21: 446522.956 ops/s
# Warmup Iteration  22: 425094.023 ops/s
# Warmup Iteration  23: 440963.765 ops/s
# Warmup Iteration  24: 422990.353 ops/s
# Warmup Iteration  25: 450099.124 ops/s
# Warmup Iteration  26: 429810.152 ops/s
# Warmup Iteration  27: 435199.321 ops/s
# Warmup Iteration  28: 428996.394 ops/s
# Warmup Iteration  29: 464589.549 ops/s
# Warmup Iteration  30: 458662.948 ops/s
Iteration   1: 431856.535 ops/s
Iteration   2: 452607.870 ops/s
Iteration   3: 432693.903 ops/s
Iteration   4: 463757.116 ops/s
Iteration   5: 454513.794 ops/s
Iteration   6: 455596.118 ops/s
Iteration   7: 431963.886 ops/s
Iteration   8: 460396.549 ops/s
Iteration   9: 432305.891 ops/s
Iteration  10: 459197.718 ops/s
Iteration  11: 427435.384 ops/s
Iteration  12: 448915.340 ops/s
Iteration  13: 435931.691 ops/s
Iteration  14: 436356.934 ops/s
Iteration  15: 447336.564 ops/s
Iteration  16: 448540.473 ops/s
Iteration  17: 446932.741 ops/s
Iteration  18: 439389.075 ops/s
Iteration  19: 426500.913 ops/s
Iteration  20: 453637.573 ops/s
Iteration  21: 420393.810 ops/s
Iteration  22: 455542.151 ops/s
Iteration  23: 422416.926 ops/s
Iteration  24: 449788.576 ops/s
Iteration  25: 429816.220 ops/s
Iteration  26: 436899.872 ops/s
Iteration  27: 439145.848 ops/s
Iteration  28: 439607.101 ops/s
Iteration  29: 443473.866 ops/s
Iteration  30: 434764.417 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableCombineLatestTest._Benchmark.benchmark_errorDelayed2":
  441923.828 ±(99.9%) 7933.857 ops/s [Average]
  (min, avg, max) = (420393.810, 441923.828, 463757.116), stdev = 11875.025
  CI (99.9%): [433989.971, 449857.686] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
ObservableCombineLatestTest._Benchmark.benchmark_errorDelayed2  thrpt   30  441923.828 ± 7933.857  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromTest._Benchmark.benchmark_emptySource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromTest._Benchmark.benchmark_emptySource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 493279.813 ops/s
# Warmup Iteration   2: 1822289.762 ops/s
# Warmup Iteration   3: 2679936.388 ops/s
# Warmup Iteration   4: 2995343.506 ops/s
# Warmup Iteration   5: 3154458.155 ops/s
# Warmup Iteration   6: 3080384.238 ops/s
# Warmup Iteration   7: 3070779.715 ops/s
# Warmup Iteration   8: 3067574.640 ops/s
# Warmup Iteration   9: 2973892.907 ops/s
# Warmup Iteration  10: 3004843.107 ops/s
# Warmup Iteration  11: 3122737.458 ops/s
# Warmup Iteration  12: 3051820.164 ops/s
# Warmup Iteration  13: 3156723.484 ops/s
# Warmup Iteration  14: 2987021.578 ops/s
# Warmup Iteration  15: 3061425.378 ops/s
# Warmup Iteration  16: 3146517.810 ops/s
# Warmup Iteration  17: 2970589.541 ops/s
# Warmup Iteration  18: 3245332.304 ops/s
# Warmup Iteration  19: 3100731.859 ops/s
# Warmup Iteration  20: 2945462.135 ops/s
# Warmup Iteration  21: 3220806.159 ops/s
# Warmup Iteration  22: 3073350.656 ops/s
# Warmup Iteration  23: 3157207.310 ops/s
# Warmup Iteration  24: 3043586.062 ops/s
# Warmup Iteration  25: 3012180.521 ops/s
# Warmup Iteration  26: 3082930.558 ops/s
# Warmup Iteration  27: 3148457.863 ops/s
# Warmup Iteration  28: 2983272.934 ops/s
# Warmup Iteration  29: 3162423.091 ops/s
# Warmup Iteration  30: 3034995.731 ops/s
Iteration   1: 3121673.850 ops/s
Iteration   2: 3116139.931 ops/s
Iteration   3: 3069653.629 ops/s
Iteration   4: 3010915.706 ops/s
Iteration   5: 3174873.645 ops/s
Iteration   6: 2937143.203 ops/s
Iteration   7: 3153506.642 ops/s
Iteration   8: 3170045.236 ops/s
Iteration   9: 3090473.996 ops/s
Iteration  10: 3137900.714 ops/s
Iteration  11: 3018219.272 ops/s
Iteration  12: 3150224.687 ops/s
Iteration  13: 3086506.761 ops/s
Iteration  14: 3034302.249 ops/s
Iteration  15: 3164918.758 ops/s
Iteration  16: 3010813.588 ops/s
Iteration  17: 3156489.285 ops/s
Iteration  18: 3030055.453 ops/s
Iteration  19: 3143572.528 ops/s
Iteration  20: 2967344.879 ops/s
Iteration  21: 3085023.135 ops/s
Iteration  22: 3137589.876 ops/s
Iteration  23: 3034839.155 ops/s
Iteration  24: 3125341.003 ops/s
Iteration  25: 3003320.901 ops/s
Iteration  26: 3169074.879 ops/s
Iteration  27: 2996073.528 ops/s
Iteration  28: 3122210.933 ops/s
Iteration  29: 2639107.578 ops/s
Iteration  30: 2762155.726 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromTest._Benchmark.benchmark_emptySource":
  3060650.357 ±(99.9%) 80069.346 ops/s [Average]
  (min, avg, max) = (2639107.578, 3060650.357, 3174873.645), stdev = 119844.037
  CI (99.9%): [2980581.011, 3140719.704] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
ObservableWithLatestFromTest._Benchmark.benchmark_emptySource  thrpt   30  3060650.357 ± 80069.346  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromTest._Benchmark.benchmark_emptyOther$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromTest._Benchmark.benchmark_emptyOther

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 507512.350 ops/s
# Warmup Iteration   2: 2052697.247 ops/s
# Warmup Iteration   3: 2367661.809 ops/s
# Warmup Iteration   4: 3068317.523 ops/s
# Warmup Iteration   5: 2989245.114 ops/s
# Warmup Iteration   6: 3138849.610 ops/s
# Warmup Iteration   7: 2903460.743 ops/s
# Warmup Iteration   8: 2927395.769 ops/s
# Warmup Iteration   9: 2983941.048 ops/s
# Warmup Iteration  10: 2929884.976 ops/s
# Warmup Iteration  11: 2960028.062 ops/s
# Warmup Iteration  12: 3088981.721 ops/s
# Warmup Iteration  13: 3009822.341 ops/s
# Warmup Iteration  14: 3047442.003 ops/s
# Warmup Iteration  15: 2961792.985 ops/s
# Warmup Iteration  16: 3178202.189 ops/s
# Warmup Iteration  17: 3002439.507 ops/s
# Warmup Iteration  18: 3012449.376 ops/s
# Warmup Iteration  19: 3115964.830 ops/s
# Warmup Iteration  20: 3013671.870 ops/s
# Warmup Iteration  21: 3119138.849 ops/s
# Warmup Iteration  22: 3013154.585 ops/s
# Warmup Iteration  23: 3039162.631 ops/s
# Warmup Iteration  24: 3159868.387 ops/s
# Warmup Iteration  25: 2940465.737 ops/s
# Warmup Iteration  26: 3159608.094 ops/s
# Warmup Iteration  27: 2946661.102 ops/s
# Warmup Iteration  28: 3070625.179 ops/s
# Warmup Iteration  29: 3101398.581 ops/s
# Warmup Iteration  30: 2990828.968 ops/s
Iteration   1: 3106948.731 ops/s
Iteration   2: 3053112.046 ops/s
Iteration   3: 3056798.287 ops/s
Iteration   4: 3106821.846 ops/s
Iteration   5: 2977379.523 ops/s
Iteration   6: 3130082.339 ops/s
Iteration   7: 3026996.817 ops/s
Iteration   8: 2933242.533 ops/s
Iteration   9: 3161073.744 ops/s
Iteration  10: 3014645.339 ops/s
Iteration  11: 3157292.968 ops/s
Iteration  12: 3097115.374 ops/s
Iteration  13: 2963383.909 ops/s
Iteration  14: 3002380.759 ops/s
Iteration  15: 3059850.740 ops/s
Iteration  16: 3034461.175 ops/s
Iteration  17: 3010117.361 ops/s
Iteration  18: 3081484.758 ops/s
Iteration  19: 3011867.610 ops/s
Iteration  20: 3081610.673 ops/s
Iteration  21: 3082946.861 ops/s
Iteration  22: 2996293.735 ops/s
Iteration  23: 3050432.680 ops/s
Iteration  24: 2966953.498 ops/s
Iteration  25: 3096974.491 ops/s
Iteration  26: 3114323.155 ops/s
Iteration  27: 2956744.518 ops/s
Iteration  28: 3042502.319 ops/s
Iteration  29: 3181159.956 ops/s
Iteration  30: 2887932.455 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromTest._Benchmark.benchmark_emptyOther":
  3048097.673 ±(99.9%) 47106.113 ops/s [Average]
  (min, avg, max) = (2887932.455, 3048097.673, 3181159.956), stdev = 70506.217
  CI (99.9%): [3000991.561, 3095203.786] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
ObservableWithLatestFromTest._Benchmark.benchmark_emptyOther  thrpt   30  3048097.673 ± 47106.113  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableFromStreamTest._Benchmark.benchmark_emptyConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableFromStreamTest._Benchmark.benchmark_emptyConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1197737.318 ops/s
# Warmup Iteration   2: 4196727.028 ops/s
# Warmup Iteration   3: 6824268.594 ops/s
# Warmup Iteration   4: 6338464.570 ops/s
# Warmup Iteration   5: 6750072.236 ops/s
# Warmup Iteration   6: 6335200.389 ops/s
# Warmup Iteration   7: 6609904.485 ops/s
# Warmup Iteration   8: 6625842.785 ops/s
# Warmup Iteration   9: 6234245.207 ops/s
# Warmup Iteration  10: 6847416.811 ops/s
# Warmup Iteration  11: 6678591.567 ops/s
# Warmup Iteration  12: 6434904.990 ops/s
# Warmup Iteration  13: 6598023.769 ops/s
# Warmup Iteration  14: 6766053.443 ops/s
# Warmup Iteration  15: 6636496.712 ops/s
# Warmup Iteration  16: 6696237.556 ops/s
# Warmup Iteration  17: 6765198.235 ops/s
# Warmup Iteration  18: 6456397.155 ops/s
# Warmup Iteration  19: 6833288.062 ops/s
# Warmup Iteration  20: 6382693.958 ops/s
# Warmup Iteration  21: 6820755.575 ops/s
# Warmup Iteration  22: 6526396.648 ops/s
# Warmup Iteration  23: 6330907.984 ops/s
# Warmup Iteration  24: 6790473.792 ops/s
# Warmup Iteration  25: 6523807.143 ops/s
# Warmup Iteration  26: 6355069.303 ops/s
# Warmup Iteration  27: 6675840.268 ops/s
# Warmup Iteration  28: 6322601.816 ops/s
# Warmup Iteration  29: 6377248.672 ops/s
# Warmup Iteration  30: 6815069.850 ops/s
Iteration   1: 6496477.110 ops/s
Iteration   2: 6617534.313 ops/s
Iteration   3: 6309648.853 ops/s
Iteration   4: 6715517.462 ops/s
Iteration   5: 6556498.035 ops/s
Iteration   6: 6509997.373 ops/s
Iteration   7: 6555064.383 ops/s
Iteration   8: 6471252.123 ops/s
Iteration   9: 6857117.274 ops/s
Iteration  10: 6793555.228 ops/s
Iteration  11: 6411622.837 ops/s
Iteration  12: 6919555.287 ops/s
Iteration  13: 6352898.284 ops/s
Iteration  14: 6477123.553 ops/s
Iteration  15: 6657024.153 ops/s
Iteration  16: 6353020.192 ops/s
Iteration  17: 6522803.783 ops/s
Iteration  18: 6639322.975 ops/s
Iteration  19: 6578979.109 ops/s
Iteration  20: 6765978.385 ops/s
Iteration  21: 6545184.665 ops/s
Iteration  22: 6495388.212 ops/s
Iteration  23: 6657977.760 ops/s
Iteration  24: 5186591.670 ops/s
Iteration  25: 6474451.692 ops/s
Iteration  26: 6570001.260 ops/s
Iteration  27: 6831623.502 ops/s
Iteration  28: 6305176.199 ops/s
Iteration  29: 6704039.825 ops/s
Iteration  30: 6444070.526 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableFromStreamTest._Benchmark.benchmark_emptyConditional":
  6525849.867 ±(99.9%) 199926.255 ops/s [Average]
  (min, avg, max) = (5186591.670, 6525849.867, 6919555.287), stdev = 299240.229
  CI (99.9%): [6325923.613, 6725776.122] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score        Error  Units
ObservableFromStreamTest._Benchmark.benchmark_emptyConditional  thrpt   30  6525849.867 ± 199926.255  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableFlatMapStreamTest._Benchmark.benchmark_empty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableFlatMapStreamTest._Benchmark.benchmark_empty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2890140.214 ops/s
# Warmup Iteration   2: 7610301.827 ops/s
# Warmup Iteration   3: 10514586.682 ops/s
# Warmup Iteration   4: 10775968.896 ops/s
# Warmup Iteration   5: 10892637.423 ops/s
# Warmup Iteration   6: 10877491.735 ops/s
# Warmup Iteration   7: 10989899.688 ops/s
# Warmup Iteration   8: 10596002.597 ops/s
# Warmup Iteration   9: 11398024.621 ops/s
# Warmup Iteration  10: 10763026.793 ops/s
# Warmup Iteration  11: 10891330.034 ops/s
# Warmup Iteration  12: 10936477.072 ops/s
# Warmup Iteration  13: 10677645.702 ops/s
# Warmup Iteration  14: 11110103.799 ops/s
# Warmup Iteration  15: 11099116.120 ops/s
# Warmup Iteration  16: 10977550.716 ops/s
# Warmup Iteration  17: 10862455.364 ops/s
# Warmup Iteration  18: 11049375.781 ops/s
# Warmup Iteration  19: 10856562.757 ops/s
# Warmup Iteration  20: 11291843.350 ops/s
# Warmup Iteration  21: 10506545.209 ops/s
# Warmup Iteration  22: 11302368.383 ops/s
# Warmup Iteration  23: 10620151.171 ops/s
# Warmup Iteration  24: 10779700.208 ops/s
# Warmup Iteration  25: 10986764.463 ops/s
# Warmup Iteration  26: 10962796.319 ops/s
# Warmup Iteration  27: 10255111.206 ops/s
# Warmup Iteration  28: 10711358.032 ops/s
# Warmup Iteration  29: 11271653.637 ops/s
# Warmup Iteration  30: 10755089.057 ops/s
Iteration   1: 11195185.927 ops/s
Iteration   2: 11060230.782 ops/s
Iteration   3: 10627715.972 ops/s
Iteration   4: 11153612.002 ops/s
Iteration   5: 11204104.933 ops/s
Iteration   6: 10640371.132 ops/s
Iteration   7: 11213693.411 ops/s
Iteration   8: 10767785.307 ops/s
Iteration   9: 11094187.455 ops/s
Iteration  10: 10824458.569 ops/s
Iteration  11: 10856904.235 ops/s
Iteration  12: 11124671.775 ops/s
Iteration  13: 10535194.506 ops/s
Iteration  14: 10792434.109 ops/s
Iteration  15: 10827535.535 ops/s
Iteration  16: 10749723.516 ops/s
Iteration  17: 10797048.768 ops/s
Iteration  18: 11461268.124 ops/s
Iteration  19: 10616008.691 ops/s
Iteration  20: 11274298.754 ops/s
Iteration  21: 10740958.348 ops/s
Iteration  22: 10794836.083 ops/s
Iteration  23: 11276488.386 ops/s
Iteration  24: 10603152.813 ops/s
Iteration  25: 11161654.444 ops/s
Iteration  26: 10738724.187 ops/s
Iteration  27: 10961195.895 ops/s
Iteration  28: 11151277.044 ops/s
Iteration  29: 10995074.583 ops/s
Iteration  30: 10725988.085 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableFlatMapStreamTest._Benchmark.benchmark_empty":
  10932192.779 ±(99.9%) 165405.259 ops/s [Average]
  (min, avg, max) = (10535194.506, 10932192.779, 11461268.124), stdev = 247570.824
  CI (99.9%): [10766787.520, 11097598.038] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt         Score        Error  Units
ObservableFlatMapStreamTest._Benchmark.benchmark_empty  thrpt   30  10932192.779 ± 165405.259  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromTest._Benchmark.benchmark_fromArrayEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromTest._Benchmark.benchmark_fromArrayEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 24933626.257 ops/s
# Warmup Iteration   2: 40707046.430 ops/s
# Warmup Iteration   3: 57586663.828 ops/s
# Warmup Iteration   4: 59384094.379 ops/s
# Warmup Iteration   5: 57472832.087 ops/s
# Warmup Iteration   6: 58836785.238 ops/s
# Warmup Iteration   7: 56876107.795 ops/s
# Warmup Iteration   8: 58689365.341 ops/s
# Warmup Iteration   9: 57295957.184 ops/s
# Warmup Iteration  10: 56643251.106 ops/s
# Warmup Iteration  11: 57181870.033 ops/s
# Warmup Iteration  12: 58090557.782 ops/s
# Warmup Iteration  13: 58831713.230 ops/s
# Warmup Iteration  14: 57491773.410 ops/s
# Warmup Iteration  15: 60681382.521 ops/s
# Warmup Iteration  16: 58736099.847 ops/s
# Warmup Iteration  17: 57987921.732 ops/s
# Warmup Iteration  18: 60410266.075 ops/s
# Warmup Iteration  19: 56798909.170 ops/s
# Warmup Iteration  20: 57210513.261 ops/s
# Warmup Iteration  21: 60108098.731 ops/s
# Warmup Iteration  22: 56792678.188 ops/s
# Warmup Iteration  23: 59084864.455 ops/s
# Warmup Iteration  24: 56603911.960 ops/s
# Warmup Iteration  25: 58738864.471 ops/s
# Warmup Iteration  26: 57066745.875 ops/s
# Warmup Iteration  27: 57031397.167 ops/s
# Warmup Iteration  28: 59538046.672 ops/s
# Warmup Iteration  29: 56613520.981 ops/s
# Warmup Iteration  30: 58866949.495 ops/s
Iteration   1: 57056433.473 ops/s
Iteration   2: 56543422.028 ops/s
Iteration   3: 59816731.644 ops/s
Iteration   4: 57135805.524 ops/s
Iteration   5: 58582433.309 ops/s
Iteration   6: 59809070.530 ops/s
Iteration   7: 55936705.590 ops/s
Iteration   8: 59246466.387 ops/s
Iteration   9: 58412094.142 ops/s
Iteration  10: 57434103.490 ops/s
Iteration  11: 57235891.944 ops/s
Iteration  12: 59610002.937 ops/s
Iteration  13: 57218126.557 ops/s
Iteration  14: 57343613.376 ops/s
Iteration  15: 59518959.814 ops/s
Iteration  16: 57257824.390 ops/s
Iteration  17: 59664665.778 ops/s
Iteration  18: 58421810.896 ops/s
Iteration  19: 56740279.189 ops/s
Iteration  20: 58530430.146 ops/s
Iteration  21: 57355818.957 ops/s
Iteration  22: 59503943.230 ops/s
Iteration  23: 59078671.632 ops/s
Iteration  24: 55999565.784 ops/s
Iteration  25: 59851058.773 ops/s
Iteration  26: 56782437.594 ops/s
Iteration  27: 58802055.950 ops/s
Iteration  28: 57008467.868 ops/s
Iteration  29: 59645319.416 ops/s
Iteration  30: 56453751.981 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFromTest._Benchmark.benchmark_fromArrayEmpty":
  58066532.078 ±(99.9%) 861412.936 ops/s [Average]
  (min, avg, max) = (55936705.590, 58066532.078, 59851058.773), stdev = 1289322.428
  CI (99.9%): [57205119.142, 58927945.014] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt         Score        Error  Units
ObservableFromTest._Benchmark.benchmark_fromArrayEmpty  thrpt   30  58066532.078 ± 861412.936  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDoFinallyTest._Benchmark.benchmark_normalEmptyConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDoFinallyTest._Benchmark.benchmark_normalEmptyConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1163106.093 ops/s
# Warmup Iteration   2: 5159135.017 ops/s
# Warmup Iteration   3: 7066712.526 ops/s
# Warmup Iteration   4: 7361159.701 ops/s
# Warmup Iteration   5: 7396947.018 ops/s
# Warmup Iteration   6: 7361425.830 ops/s
# Warmup Iteration   7: 7211200.609 ops/s
# Warmup Iteration   8: 7292395.049 ops/s
# Warmup Iteration   9: 7411546.025 ops/s
# Warmup Iteration  10: 7175254.657 ops/s
# Warmup Iteration  11: 7222795.069 ops/s
# Warmup Iteration  12: 7455627.133 ops/s
# Warmup Iteration  13: 7318706.082 ops/s
# Warmup Iteration  14: 7475987.746 ops/s
# Warmup Iteration  15: 7334286.115 ops/s
# Warmup Iteration  16: 7545121.849 ops/s
# Warmup Iteration  17: 7331131.006 ops/s
# Warmup Iteration  18: 7223268.030 ops/s
# Warmup Iteration  19: 7687502.475 ops/s
# Warmup Iteration  20: 7104733.025 ops/s
# Warmup Iteration  21: 7309586.594 ops/s
# Warmup Iteration  22: 7067045.694 ops/s
# Warmup Iteration  23: 7412019.457 ops/s
# Warmup Iteration  24: 7211395.230 ops/s
# Warmup Iteration  25: 7524191.679 ops/s
# Warmup Iteration  26: 7146364.647 ops/s
# Warmup Iteration  27: 7636562.575 ops/s
# Warmup Iteration  28: 7324099.265 ops/s
# Warmup Iteration  29: 7529853.720 ops/s
# Warmup Iteration  30: 7457732.208 ops/s
Iteration   1: 7295763.286 ops/s
Iteration   2: 7652653.988 ops/s
Iteration   3: 7107386.944 ops/s
Iteration   4: 7557278.447 ops/s
Iteration   5: 7173866.675 ops/s
Iteration   6: 7406001.172 ops/s
Iteration   7: 7483543.249 ops/s
Iteration   8: 7405978.621 ops/s
Iteration   9: 7595496.552 ops/s
Iteration  10: 7167434.034 ops/s
Iteration  11: 7478704.327 ops/s
Iteration  12: 7234478.063 ops/s
Iteration  13: 7293304.943 ops/s
Iteration  14: 7350942.833 ops/s
Iteration  15: 7279415.258 ops/s
Iteration  16: 6878039.909 ops/s
Iteration  17: 6678038.590 ops/s
Iteration  18: 7329718.457 ops/s
Iteration  19: 7302669.726 ops/s
Iteration  20: 7338933.351 ops/s
Iteration  21: 7458936.712 ops/s
Iteration  22: 7278559.822 ops/s
Iteration  23: 7413598.078 ops/s
Iteration  24: 7386435.626 ops/s
Iteration  25: 7465986.048 ops/s
Iteration  26: 7229586.787 ops/s
Iteration  27: 7371436.831 ops/s
Iteration  28: 7416080.286 ops/s
Iteration  29: 7288448.603 ops/s
Iteration  30: 7551217.058 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableDoFinallyTest._Benchmark.benchmark_normalEmptyConditional":
  7328997.809 ±(99.9%) 132837.972 ops/s [Average]
  (min, avg, max) = (6678038.590, 7328997.809, 7652653.988), stdev = 198825.638
  CI (99.9%): [7196159.837, 7461835.781] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score        Error  Units
ObservableDoFinallyTest._Benchmark.benchmark_normalEmptyConditional  thrpt   30  7328997.809 ± 132837.972  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOnTest._Benchmark.benchmark_workerNotDisposedPrematurelyAsyncInNormalOut$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOnTest._Benchmark.benchmark_workerNotDisposedPrematurelyAsyncInNormalOut

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 111083.567 ops/s
# Warmup Iteration   2: 330879.295 ops/s
# Warmup Iteration   3: 975847.750 ops/s
# Warmup Iteration   4: 999890.277 ops/s
# Warmup Iteration   5: 1167885.232 ops/s
# Warmup Iteration   6: 1191397.985 ops/s
# Warmup Iteration   7: 1158809.367 ops/s
# Warmup Iteration   8: 1152655.857 ops/s
# Warmup Iteration   9: 1135895.592 ops/s
# Warmup Iteration  10: 1172299.545 ops/s
# Warmup Iteration  11: 1149280.702 ops/s
# Warmup Iteration  12: 1156792.642 ops/s
# Warmup Iteration  13: 1147022.901 ops/s
# Warmup Iteration  14: 1191219.860 ops/s
# Warmup Iteration  15: 1200348.841 ops/s
# Warmup Iteration  16: 1150714.305 ops/s
# Warmup Iteration  17: 1143675.148 ops/s
# Warmup Iteration  18: 1205922.779 ops/s
# Warmup Iteration  19: 1134599.359 ops/s
# Warmup Iteration  20: 1197474.931 ops/s
# Warmup Iteration  21: 1137344.645 ops/s
# Warmup Iteration  22: 1235975.207 ops/s
# Warmup Iteration  23: 1153633.905 ops/s
# Warmup Iteration  24: 1167127.071 ops/s
# Warmup Iteration  25: 1200506.935 ops/s
# Warmup Iteration  26: 1175954.209 ops/s
# Warmup Iteration  27: 1198057.118 ops/s
# Warmup Iteration  28: 1140954.996 ops/s
# Warmup Iteration  29: 1166496.715 ops/s
# Warmup Iteration  30: 1119568.236 ops/s
Iteration   1: 1173125.208 ops/s
Iteration   2: 1176356.511 ops/s
Iteration   3: 1177892.904 ops/s
Iteration   4: 1204074.486 ops/s
Iteration   5: 1209579.219 ops/s
Iteration   6: 1135910.529 ops/s
Iteration   7: 1194219.806 ops/s
Iteration   8: 1133572.682 ops/s
Iteration   9: 1194152.957 ops/s
Iteration  10: 1142576.172 ops/s
Iteration  11: 1165632.606 ops/s
Iteration  12: 1195754.900 ops/s
Iteration  13: 1152911.756 ops/s
Iteration  14: 1202122.098 ops/s
Iteration  15: 1162587.358 ops/s
Iteration  16: 1134081.553 ops/s
Iteration  17: 1180927.542 ops/s
Iteration  18: 1185973.733 ops/s
Iteration  19: 1126980.295 ops/s
Iteration  20: 1219880.465 ops/s
Iteration  21: 1179976.224 ops/s
Iteration  22: 1164840.370 ops/s
Iteration  23: 1178213.562 ops/s
Iteration  24: 1215265.141 ops/s
Iteration  25: 1158044.551 ops/s
Iteration  26: 1206016.147 ops/s
Iteration  27: 1207842.849 ops/s
Iteration  28: 1118931.422 ops/s
Iteration  29: 1212205.936 ops/s
Iteration  30: 1118757.252 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOnTest._Benchmark.benchmark_workerNotDisposedPrematurelyAsyncInNormalOut":
  1174280.208 ±(99.9%) 20346.748 ops/s [Average]
  (min, avg, max) = (1118757.252, 1174280.208, 1219880.465), stdev = 30454.056
  CI (99.9%): [1153933.460, 1194626.955] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                   Mode  Cnt        Score       Error  Units
ObservableObserveOnTest._Benchmark.benchmark_workerNotDisposedPrematurelyAsyncInNormalOut  thrpt   30  1174280.208 ± 20346.748  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchIfEmptyTest._Benchmark.benchmark_switchTriggerUnsubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchIfEmptyTest._Benchmark.benchmark_switchTriggerUnsubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 345264.108 ops/s
# Warmup Iteration   2: 1078120.396 ops/s
# Warmup Iteration   3: 1434619.074 ops/s
# Warmup Iteration   4: 1364169.691 ops/s
# Warmup Iteration   5: 1459014.245 ops/s
# Warmup Iteration   6: 1363708.611 ops/s
# Warmup Iteration   7: 1421488.604 ops/s
# Warmup Iteration   8: 1362104.909 ops/s
# Warmup Iteration   9: 1452219.510 ops/s
# Warmup Iteration  10: 1429353.336 ops/s
# Warmup Iteration  11: 1442129.371 ops/s
# Warmup Iteration  12: 1384584.718 ops/s
# Warmup Iteration  13: 1414643.864 ops/s
# Warmup Iteration  14: 1481452.516 ops/s
# Warmup Iteration  15: 1345670.593 ops/s
# Warmup Iteration  16: 1417345.650 ops/s
# Warmup Iteration  17: 1422636.030 ops/s
# Warmup Iteration  18: 1393482.863 ops/s
# Warmup Iteration  19: 1398866.669 ops/s
# Warmup Iteration  20: 1378678.968 ops/s
# Warmup Iteration  21: 1389288.008 ops/s
# Warmup Iteration  22: 1461626.929 ops/s
# Warmup Iteration  23: 1361564.227 ops/s
# Warmup Iteration  24: 1418930.152 ops/s
# Warmup Iteration  25: 1456326.491 ops/s
# Warmup Iteration  26: 1350548.773 ops/s
# Warmup Iteration  27: 1477532.472 ops/s
# Warmup Iteration  28: 1366306.978 ops/s
# Warmup Iteration  29: 1428412.265 ops/s
# Warmup Iteration  30: 1352369.514 ops/s
Iteration   1: 1390725.948 ops/s
Iteration   2: 1372899.211 ops/s
Iteration   3: 1436593.427 ops/s
Iteration   4: 1348569.685 ops/s
Iteration   5: 1473820.828 ops/s
Iteration   6: 1407754.522 ops/s
Iteration   7: 1349807.765 ops/s
Iteration   8: 1401011.105 ops/s
Iteration   9: 1397897.601 ops/s
Iteration  10: 1397707.119 ops/s
Iteration  11: 1322795.043 ops/s
Iteration  12: 1119581.850 ops/s
Iteration  13: 1405890.694 ops/s
Iteration  14: 1357250.855 ops/s
Iteration  15: 1348481.622 ops/s
Iteration  16: 1457007.741 ops/s
Iteration  17: 1352789.633 ops/s
Iteration  18: 1416102.598 ops/s
Iteration  19: 1386704.504 ops/s
Iteration  20: 1450388.355 ops/s
Iteration  21: 1400742.101 ops/s
Iteration  22: 1418045.980 ops/s
Iteration  23: 1425686.516 ops/s
Iteration  24: 1398419.521 ops/s
Iteration  25: 1457170.354 ops/s
Iteration  26: 1356673.477 ops/s
Iteration  27: 1412620.236 ops/s
Iteration  28: 1435406.273 ops/s
Iteration  29: 1403725.803 ops/s
Iteration  30: 1429817.539 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchIfEmptyTest._Benchmark.benchmark_switchTriggerUnsubscribe":
  1391069.597 ±(99.9%) 42340.081 ops/s [Average]
  (min, avg, max) = (1119581.850, 1391069.597, 1473820.828), stdev = 63372.645
  CI (99.9%): [1348729.516, 1433409.678] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score       Error  Units
ObservableSwitchIfEmptyTest._Benchmark.benchmark_switchTriggerUnsubscribe  thrpt   30  1391069.597 ± 42340.081  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_innerErrors$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_innerErrors

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 14630.935 ops/s
# Warmup Iteration   2: 43543.302 ops/s
# Warmup Iteration   3: 119933.142 ops/s
# Warmup Iteration   4: 122688.312 ops/s
# Warmup Iteration   5: 132517.563 ops/s
# Warmup Iteration   6: 131663.493 ops/s
# Warmup Iteration   7: 123945.173 ops/s
# Warmup Iteration   8: 130892.771 ops/s
# Warmup Iteration   9: 123725.021 ops/s
# Warmup Iteration  10: 131318.765 ops/s
# Warmup Iteration  11: 128215.867 ops/s
# Warmup Iteration  12: 125118.563 ops/s
# Warmup Iteration  13: 133438.588 ops/s
# Warmup Iteration  14: 130503.235 ops/s
# Warmup Iteration  15: 130584.684 ops/s
# Warmup Iteration  16: 129080.850 ops/s
# Warmup Iteration  17: 136026.291 ops/s
# Warmup Iteration  18: 132327.200 ops/s
# Warmup Iteration  19: 134062.395 ops/s
# Warmup Iteration  20: 134985.131 ops/s
# Warmup Iteration  21: 136796.025 ops/s
# Warmup Iteration  22: 136427.968 ops/s
# Warmup Iteration  23: 134606.949 ops/s
# Warmup Iteration  24: 130091.896 ops/s
# Warmup Iteration  25: 139647.144 ops/s
# Warmup Iteration  26: 131911.785 ops/s
# Warmup Iteration  27: 139087.837 ops/s
# Warmup Iteration  28: 130941.413 ops/s
# Warmup Iteration  29: 133459.670 ops/s
# Warmup Iteration  30: 135333.616 ops/s
Iteration   1: 135977.632 ops/s
Iteration   2: 137129.694 ops/s
Iteration   3: 132467.443 ops/s
Iteration   4: 135589.392 ops/s
Iteration   5: 138512.059 ops/s
Iteration   6: 134796.086 ops/s
Iteration   7: 133775.732 ops/s
Iteration   8: 135244.550 ops/s
Iteration   9: 136081.026 ops/s
Iteration  10: 133911.615 ops/s
Iteration  11: 137387.434 ops/s
Iteration  12: 137766.269 ops/s
Iteration  13: 133513.674 ops/s
Iteration  14: 133215.602 ops/s
Iteration  15: 138393.516 ops/s
Iteration  16: 136005.864 ops/s
Iteration  17: 134450.464 ops/s
Iteration  18: 136424.564 ops/s
Iteration  19: 132689.881 ops/s
Iteration  20: 139583.424 ops/s
Iteration  21: 134817.653 ops/s
Iteration  22: 138263.530 ops/s
Iteration  23: 132005.013 ops/s
Iteration  24: 139599.715 ops/s
Iteration  25: 135173.508 ops/s
Iteration  26: 132736.308 ops/s
Iteration  27: 137255.642 ops/s
Iteration  28: 135527.527 ops/s
Iteration  29: 134507.343 ops/s
Iteration  30: 135443.962 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_innerErrors":
  135608.204 ±(99.9%) 1410.006 ops/s [Average]
  (min, avg, max) = (132005.013, 135608.204, 139599.715), stdev = 2110.431
  CI (99.9%): [134198.198, 137018.210] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score      Error  Units
ObservableConcatMapSchedulerTest._Benchmark.benchmark_innerErrors  thrpt   30  135608.204 ± 1410.006  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_empty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_empty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 218564.818 ops/s
# Warmup Iteration   2: 1672844.328 ops/s
# Warmup Iteration   3: 2657419.073 ops/s
# Warmup Iteration   4: 2532510.657 ops/s
# Warmup Iteration   5: 2680784.619 ops/s
# Warmup Iteration   6: 2540493.313 ops/s
# Warmup Iteration   7: 2692781.759 ops/s
# Warmup Iteration   8: 2674156.188 ops/s
# Warmup Iteration   9: 2567383.286 ops/s
# Warmup Iteration  10: 2720607.233 ops/s
# Warmup Iteration  11: 2626858.291 ops/s
# Warmup Iteration  12: 2636657.269 ops/s
# Warmup Iteration  13: 2673179.686 ops/s
# Warmup Iteration  14: 2602264.116 ops/s
# Warmup Iteration  15: 2625565.102 ops/s
# Warmup Iteration  16: 2554600.768 ops/s
# Warmup Iteration  17: 2640495.797 ops/s
# Warmup Iteration  18: 2719040.968 ops/s
# Warmup Iteration  19: 2629553.332 ops/s
# Warmup Iteration  20: 2671249.688 ops/s
# Warmup Iteration  21: 2573410.500 ops/s
# Warmup Iteration  22: 2655154.582 ops/s
# Warmup Iteration  23: 2573028.943 ops/s
# Warmup Iteration  24: 2646916.175 ops/s
# Warmup Iteration  25: 2637792.260 ops/s
# Warmup Iteration  26: 2620640.665 ops/s
# Warmup Iteration  27: 2643842.248 ops/s
# Warmup Iteration  28: 2655351.779 ops/s
# Warmup Iteration  29: 2543246.591 ops/s
# Warmup Iteration  30: 2634706.607 ops/s
Iteration   1: 2536198.512 ops/s
Iteration   2: 2716257.711 ops/s
Iteration   3: 2612586.319 ops/s
Iteration   4: 2561974.915 ops/s
Iteration   5: 2655807.515 ops/s
Iteration   6: 2184100.028 ops/s
Iteration   7: 2596887.203 ops/s
Iteration   8: 2590442.715 ops/s
Iteration   9: 2697464.731 ops/s
Iteration  10: 2585921.189 ops/s
Iteration  11: 2648051.764 ops/s
Iteration  12: 2673732.336 ops/s
Iteration  13: 2529223.758 ops/s
Iteration  14: 2646796.491 ops/s
Iteration  15: 2673888.227 ops/s
Iteration  16: 2586063.177 ops/s
Iteration  17: 2671600.925 ops/s
Iteration  18: 2646599.841 ops/s
Iteration  19: 2611834.568 ops/s
Iteration  20: 2647510.312 ops/s
Iteration  21: 2669653.271 ops/s
Iteration  22: 2615985.603 ops/s
Iteration  23: 2678419.949 ops/s
Iteration  24: 2662614.435 ops/s
Iteration  25: 2620219.549 ops/s
Iteration  26: 2750762.319 ops/s
Iteration  27: 2537083.331 ops/s
Iteration  28: 2695797.447 ops/s
Iteration  29: 2590544.511 ops/s
Iteration  30: 2706685.112 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_empty":
  2620023.592 ±(99.9%) 66379.592 ops/s [Average]
  (min, avg, max) = (2184100.028, 2620023.592, 2750762.319), stdev = 99353.855
  CI (99.9%): [2553644.000, 2686403.184] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
ObservableConcatMapEagerTest._Benchmark.benchmark_empty  thrpt   30  2620023.592 ± 66379.592  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapPublisherTest._Benchmark.benchmark_cancelMain$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapPublisherTest._Benchmark.benchmark_cancelMain

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 575624.152 ops/s
# Warmup Iteration   2: 1926171.211 ops/s
# Warmup Iteration   3: 3034109.367 ops/s
# Warmup Iteration   4: 3555664.470 ops/s
# Warmup Iteration   5: 3815435.730 ops/s
# Warmup Iteration   6: 3717788.607 ops/s
# Warmup Iteration   7: 3737859.719 ops/s
# Warmup Iteration   8: 3769724.548 ops/s
# Warmup Iteration   9: 3573923.505 ops/s
# Warmup Iteration  10: 3771721.777 ops/s
# Warmup Iteration  11: 3487309.252 ops/s
# Warmup Iteration  12: 3605913.119 ops/s
# Warmup Iteration  13: 3756473.189 ops/s
# Warmup Iteration  14: 3601979.180 ops/s
# Warmup Iteration  15: 3938660.341 ops/s
# Warmup Iteration  16: 3591839.407 ops/s
# Warmup Iteration  17: 3645246.814 ops/s
# Warmup Iteration  18: 3673764.376 ops/s
# Warmup Iteration  19: 3654819.000 ops/s
# Warmup Iteration  20: 3646299.188 ops/s
# Warmup Iteration  21: 3613516.499 ops/s
# Warmup Iteration  22: 3775228.122 ops/s
# Warmup Iteration  23: 3699996.709 ops/s
# Warmup Iteration  24: 3577658.865 ops/s
# Warmup Iteration  25: 3769887.330 ops/s
# Warmup Iteration  26: 3578390.344 ops/s
# Warmup Iteration  27: 3565675.009 ops/s
# Warmup Iteration  28: 3709571.101 ops/s
# Warmup Iteration  29: 3658072.230 ops/s
# Warmup Iteration  30: 3739093.097 ops/s
Iteration   1: 3635447.430 ops/s
Iteration   2: 3636267.967 ops/s
Iteration   3: 3816764.510 ops/s
Iteration   4: 3487958.010 ops/s
Iteration   5: 3684207.098 ops/s
Iteration   6: 3647297.936 ops/s
Iteration   7: 3748399.429 ops/s
Iteration   8: 3559204.104 ops/s
Iteration   9: 3643356.034 ops/s
Iteration  10: 3812448.527 ops/s
Iteration  11: 3633214.730 ops/s
Iteration  12: 3646322.787 ops/s
Iteration  13: 3485067.311 ops/s
Iteration  14: 3776925.104 ops/s
Iteration  15: 3800314.033 ops/s
Iteration  16: 3570777.846 ops/s
Iteration  17: 3829832.304 ops/s
Iteration  18: 3648975.626 ops/s
Iteration  19: 3624315.235 ops/s
Iteration  20: 3761446.097 ops/s
Iteration  21: 3664533.709 ops/s
Iteration  22: 3757147.356 ops/s
Iteration  23: 3733326.905 ops/s
Iteration  24: 3657686.846 ops/s
Iteration  25: 3653916.828 ops/s
Iteration  26: 3669367.948 ops/s
Iteration  27: 3756041.897 ops/s
Iteration  28: 3637671.617 ops/s
Iteration  29: 3759133.370 ops/s
Iteration  30: 3616404.716 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapPublisherTest._Benchmark.benchmark_cancelMain":
  3678459.110 ±(99.9%) 60414.603 ops/s [Average]
  (min, avg, max) = (3485067.311, 3678459.110, 3829832.304), stdev = 90425.740
  CI (99.9%): [3618044.508, 3738873.713] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
MaybeFlatMapPublisherTest._Benchmark.benchmark_cancelMain  thrpt   30  3678459.110 ± 60414.603  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapPublisherTest._Benchmark.benchmark_cancelOther$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapPublisherTest._Benchmark.benchmark_cancelOther

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 472951.958 ops/s
# Warmup Iteration   2: 1718423.435 ops/s
# Warmup Iteration   3: 2438776.102 ops/s
# Warmup Iteration   4: 2477814.351 ops/s
# Warmup Iteration   5: 2560862.240 ops/s
# Warmup Iteration   6: 2470344.495 ops/s
# Warmup Iteration   7: 2503446.379 ops/s
# Warmup Iteration   8: 2619901.499 ops/s
# Warmup Iteration   9: 2434517.575 ops/s
# Warmup Iteration  10: 2555320.188 ops/s
# Warmup Iteration  11: 2470367.860 ops/s
# Warmup Iteration  12: 2232574.404 ops/s
# Warmup Iteration  13: 2595346.060 ops/s
# Warmup Iteration  14: 2465487.602 ops/s
# Warmup Iteration  15: 2573855.294 ops/s
# Warmup Iteration  16: 2506234.047 ops/s
# Warmup Iteration  17: 2582077.932 ops/s
# Warmup Iteration  18: 2464575.771 ops/s
# Warmup Iteration  19: 2500970.133 ops/s
# Warmup Iteration  20: 2646617.017 ops/s
# Warmup Iteration  21: 2535137.255 ops/s
# Warmup Iteration  22: 2560265.372 ops/s
# Warmup Iteration  23: 2531570.003 ops/s
# Warmup Iteration  24: 2498231.744 ops/s
# Warmup Iteration  25: 2664258.925 ops/s
# Warmup Iteration  26: 2434863.603 ops/s
# Warmup Iteration  27: 2579306.890 ops/s
# Warmup Iteration  28: 2572224.686 ops/s
# Warmup Iteration  29: 2542212.565 ops/s
# Warmup Iteration  30: 2692114.120 ops/s
Iteration   1: 2040012.220 ops/s
Iteration   2: 2580651.705 ops/s
Iteration   3: 2484312.554 ops/s
Iteration   4: 2641557.104 ops/s
Iteration   5: 2461978.387 ops/s
Iteration   6: 2435984.409 ops/s
Iteration   7: 2617272.091 ops/s
Iteration   8: 2467864.034 ops/s
Iteration   9: 2547935.764 ops/s
Iteration  10: 2596140.781 ops/s
Iteration  11: 2522256.765 ops/s
Iteration  12: 2514975.242 ops/s
Iteration  13: 2556499.894 ops/s
Iteration  14: 2599642.037 ops/s
Iteration  15: 2519387.180 ops/s
Iteration  16: 2487939.323 ops/s
Iteration  17: 2634768.914 ops/s
Iteration  18: 2534269.614 ops/s
Iteration  19: 2637623.606 ops/s
Iteration  20: 2544102.200 ops/s
Iteration  21: 2590991.525 ops/s
Iteration  22: 2507370.174 ops/s
Iteration  23: 2588594.561 ops/s
Iteration  24: 2534826.831 ops/s
Iteration  25: 2427507.303 ops/s
Iteration  26: 2599755.868 ops/s
Iteration  27: 2557479.222 ops/s
Iteration  28: 2531479.835 ops/s
Iteration  29: 2589742.204 ops/s
Iteration  30: 2564721.771 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapPublisherTest._Benchmark.benchmark_cancelOther":
  2530588.104 ±(99.9%) 72967.210 ops/s [Average]
  (min, avg, max) = (2040012.220, 2530588.104, 2641557.104), stdev = 109213.892
  CI (99.9%): [2457620.894, 2603555.313] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
MaybeFlatMapPublisherTest._Benchmark.benchmark_cancelOther  thrpt   30  2530588.104 ± 72967.210  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowableTest._Benchmark.benchmark_successEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowableTest._Benchmark.benchmark_successEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 519018.960 ops/s
# Warmup Iteration   2: 2599749.299 ops/s
# Warmup Iteration   3: 4402493.644 ops/s
# Warmup Iteration   4: 4798680.994 ops/s
# Warmup Iteration   5: 4858509.355 ops/s
# Warmup Iteration   6: 4857274.247 ops/s
# Warmup Iteration   7: 4920900.642 ops/s
# Warmup Iteration   8: 4957443.237 ops/s
# Warmup Iteration   9: 4804212.337 ops/s
# Warmup Iteration  10: 5027653.435 ops/s
# Warmup Iteration  11: 4674077.522 ops/s
# Warmup Iteration  12: 4765698.812 ops/s
# Warmup Iteration  13: 4975765.996 ops/s
# Warmup Iteration  14: 4673120.337 ops/s
# Warmup Iteration  15: 5132285.776 ops/s
# Warmup Iteration  16: 4730341.955 ops/s
# Warmup Iteration  17: 5078734.887 ops/s
# Warmup Iteration  18: 4909707.642 ops/s
# Warmup Iteration  19: 5140575.497 ops/s
# Warmup Iteration  20: 4845811.808 ops/s
# Warmup Iteration  21: 5002379.900 ops/s
# Warmup Iteration  22: 5006821.665 ops/s
# Warmup Iteration  23: 4939836.978 ops/s
# Warmup Iteration  24: 4908452.461 ops/s
# Warmup Iteration  25: 5043927.515 ops/s
# Warmup Iteration  26: 4935868.323 ops/s
# Warmup Iteration  27: 5166122.517 ops/s
# Warmup Iteration  28: 4848010.798 ops/s
# Warmup Iteration  29: 5006191.408 ops/s
# Warmup Iteration  30: 4970307.054 ops/s
Iteration   1: 5007654.359 ops/s
Iteration   2: 4981518.796 ops/s
Iteration   3: 4840583.198 ops/s
Iteration   4: 5045068.734 ops/s
Iteration   5: 4937940.808 ops/s
Iteration   6: 4846631.310 ops/s
Iteration   7: 4864794.535 ops/s
Iteration   8: 4904405.299 ops/s
Iteration   9: 5042210.177 ops/s
Iteration  10: 4816198.987 ops/s
Iteration  11: 5091473.394 ops/s
Iteration  12: 4972059.145 ops/s
Iteration  13: 5013670.476 ops/s
Iteration  14: 5018244.329 ops/s
Iteration  15: 4996537.696 ops/s
Iteration  16: 4889237.998 ops/s
Iteration  17: 5138546.787 ops/s
Iteration  18: 4778383.823 ops/s
Iteration  19: 4877464.429 ops/s
Iteration  20: 4978711.650 ops/s
Iteration  21: 5010140.984 ops/s
Iteration  22: 4835726.903 ops/s
Iteration  23: 5006483.739 ops/s
Iteration  24: 5100974.366 ops/s
Iteration  25: 4870167.628 ops/s
Iteration  26: 5054371.513 ops/s
Iteration  27: 4828413.290 ops/s
Iteration  28: 4915866.206 ops/s
Iteration  29: 4972789.136 ops/s
Iteration  30: 4909059.928 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowableTest._Benchmark.benchmark_successEmpty":
  4951510.987 ±(99.9%) 62780.231 ops/s [Average]
  (min, avg, max) = (4778383.823, 4951510.987, 5138546.787), stdev = 93966.501
  CI (99.9%): [4888730.757, 5014291.218] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
MaybeFlattenStreamAsFlowableTest._Benchmark.benchmark_successEmpty  thrpt   30  4951510.987 ± 62780.231  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowableTest._Benchmark.benchmark_fusedEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowableTest._Benchmark.benchmark_fusedEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 397149.242 ops/s
# Warmup Iteration   2: 1630929.924 ops/s
# Warmup Iteration   3: 3734071.429 ops/s
# Warmup Iteration   4: 4743758.644 ops/s
# Warmup Iteration   5: 5014792.452 ops/s
# Warmup Iteration   6: 4729949.493 ops/s
# Warmup Iteration   7: 5062446.159 ops/s
# Warmup Iteration   8: 4764215.449 ops/s
# Warmup Iteration   9: 4852666.622 ops/s
# Warmup Iteration  10: 4792640.705 ops/s
# Warmup Iteration  11: 4824045.328 ops/s
# Warmup Iteration  12: 5080894.752 ops/s
# Warmup Iteration  13: 5028798.978 ops/s
# Warmup Iteration  14: 4786976.020 ops/s
# Warmup Iteration  15: 4950697.116 ops/s
# Warmup Iteration  16: 4826246.140 ops/s
# Warmup Iteration  17: 4826337.640 ops/s
# Warmup Iteration  18: 4935028.779 ops/s
# Warmup Iteration  19: 4840204.989 ops/s
# Warmup Iteration  20: 4962028.723 ops/s
# Warmup Iteration  21: 4830923.586 ops/s
# Warmup Iteration  22: 5057300.417 ops/s
# Warmup Iteration  23: 4907916.389 ops/s
# Warmup Iteration  24: 4736649.032 ops/s
# Warmup Iteration  25: 4982634.523 ops/s
# Warmup Iteration  26: 3452039.380 ops/s
# Warmup Iteration  27: 4817124.761 ops/s
# Warmup Iteration  28: 4817715.440 ops/s
# Warmup Iteration  29: 4897823.760 ops/s
# Warmup Iteration  30: 4798242.710 ops/s
Iteration   1: 4905352.942 ops/s
Iteration   2: 4942559.316 ops/s
Iteration   3: 4876744.076 ops/s
Iteration   4: 4875047.185 ops/s
Iteration   5: 4901895.994 ops/s
Iteration   6: 4858598.443 ops/s
Iteration   7: 4773977.412 ops/s
Iteration   8: 4958046.447 ops/s
Iteration   9: 5042168.073 ops/s
Iteration  10: 4829153.959 ops/s
Iteration  11: 5019984.124 ops/s
Iteration  12: 4710288.047 ops/s
Iteration  13: 4979739.456 ops/s
Iteration  14: 4963192.606 ops/s
Iteration  15: 4867999.378 ops/s
Iteration  16: 5016187.918 ops/s
Iteration  17: 4774107.846 ops/s
Iteration  18: 4824828.578 ops/s
Iteration  19: 5009794.932 ops/s
Iteration  20: 4928680.281 ops/s
Iteration  21: 4963929.102 ops/s
Iteration  22: 4756742.552 ops/s
Iteration  23: 4880269.647 ops/s
Iteration  24: 4926571.379 ops/s
Iteration  25: 4790348.868 ops/s
Iteration  26: 4877744.135 ops/s
Iteration  27: 4908097.982 ops/s
Iteration  28: 4836816.513 ops/s
Iteration  29: 4772287.612 ops/s
Iteration  30: 5031547.798 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowableTest._Benchmark.benchmark_fusedEmpty":
  4893423.420 ±(99.9%) 59943.191 ops/s [Average]
  (min, avg, max) = (4710288.047, 4893423.420, 5042168.073), stdev = 89720.152
  CI (99.9%): [4833480.230, 4953366.611] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
MaybeFlattenStreamAsFlowableTest._Benchmark.benchmark_fusedEmpty  thrpt   30  4893423.420 ± 59943.191  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisherTest._Benchmark.benchmark_mainSuccess$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisherTest._Benchmark.benchmark_mainSuccess

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1087508.664 ops/s
# Warmup Iteration   2: 4128658.085 ops/s
# Warmup Iteration   3: 5084857.662 ops/s
# Warmup Iteration   4: 5455196.296 ops/s
# Warmup Iteration   5: 5695385.748 ops/s
# Warmup Iteration   6: 5581635.754 ops/s
# Warmup Iteration   7: 5651488.973 ops/s
# Warmup Iteration   8: 5401267.874 ops/s
# Warmup Iteration   9: 5667912.203 ops/s
# Warmup Iteration  10: 5763437.971 ops/s
# Warmup Iteration  11: 5317549.430 ops/s
# Warmup Iteration  12: 5717716.351 ops/s
# Warmup Iteration  13: 5528454.656 ops/s
# Warmup Iteration  14: 5662350.062 ops/s
# Warmup Iteration  15: 5605743.925 ops/s
# Warmup Iteration  16: 5676772.072 ops/s
# Warmup Iteration  17: 5436888.407 ops/s
# Warmup Iteration  18: 5546369.346 ops/s
# Warmup Iteration  19: 5723551.336 ops/s
# Warmup Iteration  20: 5462500.126 ops/s
# Warmup Iteration  21: 5702374.998 ops/s
# Warmup Iteration  22: 5640554.850 ops/s
# Warmup Iteration  23: 5507683.763 ops/s
# Warmup Iteration  24: 5568686.168 ops/s
# Warmup Iteration  25: 5431691.156 ops/s
# Warmup Iteration  26: 5788064.568 ops/s
# Warmup Iteration  27: 5618368.660 ops/s
# Warmup Iteration  28: 5574642.944 ops/s
# Warmup Iteration  29: 5691787.297 ops/s
# Warmup Iteration  30: 5493724.991 ops/s
Iteration   1: 5661063.874 ops/s
Iteration   2: 5758631.927 ops/s
Iteration   3: 5527495.806 ops/s
Iteration   4: 5644984.760 ops/s
Iteration   5: 5486488.517 ops/s
Iteration   6: 5740367.590 ops/s
Iteration   7: 5592532.649 ops/s
Iteration   8: 5487867.500 ops/s
Iteration   9: 5694243.941 ops/s
Iteration  10: 5445996.991 ops/s
Iteration  11: 5473899.232 ops/s
Iteration  12: 5594846.082 ops/s
Iteration  13: 5485447.807 ops/s
Iteration  14: 5701314.467 ops/s
Iteration  15: 5665875.749 ops/s
Iteration  16: 5503038.598 ops/s
Iteration  17: 5732816.271 ops/s
Iteration  18: 5491402.621 ops/s
Iteration  19: 5767226.238 ops/s
Iteration  20: 5736625.864 ops/s
Iteration  21: 5375100.508 ops/s
Iteration  22: 5784651.792 ops/s
Iteration  23: 5441607.598 ops/s
Iteration  24: 5625811.909 ops/s
Iteration  25: 5488272.407 ops/s
Iteration  26: 5711367.369 ops/s
Iteration  27: 5398979.966 ops/s
Iteration  28: 5610766.318 ops/s
Iteration  29: 5544683.983 ops/s
Iteration  30: 5594202.068 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisherTest._Benchmark.benchmark_mainSuccess":
  5592253.680 ±(99.9%) 80427.030 ops/s [Average]
  (min, avg, max) = (5375100.508, 5592253.680, 5784651.792), stdev = 120379.402
  CI (99.9%): [5511826.650, 5672680.710] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
MaybeTimeoutPublisherTest._Benchmark.benchmark_mainSuccess  thrpt   30  5592253.680 ± 80427.030  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherTest._Benchmark.benchmark_otherPublisherNextSlipsThrough$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherTest._Benchmark.benchmark_otherPublisherNextSlipsThrough

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 649401.627 ops/s
# Warmup Iteration   2: 4034891.154 ops/s
# Warmup Iteration   3: 4534052.176 ops/s
# Warmup Iteration   4: 5670199.394 ops/s
# Warmup Iteration   5: 5519235.063 ops/s
# Warmup Iteration   6: 5526175.219 ops/s
# Warmup Iteration   7: 5853247.498 ops/s
# Warmup Iteration   8: 5333337.858 ops/s
# Warmup Iteration   9: 5796688.975 ops/s
# Warmup Iteration  10: 5530511.851 ops/s
# Warmup Iteration  11: 5671217.934 ops/s
# Warmup Iteration  12: 5741613.914 ops/s
# Warmup Iteration  13: 5502695.090 ops/s
# Warmup Iteration  14: 5744323.367 ops/s
# Warmup Iteration  15: 5478539.619 ops/s
# Warmup Iteration  16: 5733105.255 ops/s
# Warmup Iteration  17: 5551006.981 ops/s
# Warmup Iteration  18: 5581707.718 ops/s
# Warmup Iteration  19: 5769273.927 ops/s
# Warmup Iteration  20: 5670121.113 ops/s
# Warmup Iteration  21: 4621840.418 ops/s
# Warmup Iteration  22: 5578622.257 ops/s
# Warmup Iteration  23: 5561846.599 ops/s
# Warmup Iteration  24: 5476190.089 ops/s
# Warmup Iteration  25: 5788066.222 ops/s
# Warmup Iteration  26: 5625920.652 ops/s
# Warmup Iteration  27: 5472168.306 ops/s
# Warmup Iteration  28: 5757386.494 ops/s
# Warmup Iteration  29: 5675712.213 ops/s
# Warmup Iteration  30: 5754213.827 ops/s
Iteration   1: 5554429.359 ops/s
Iteration   2: 5497998.876 ops/s
Iteration   3: 5746658.881 ops/s
Iteration   4: 5531402.653 ops/s
Iteration   5: 5742596.177 ops/s
Iteration   6: 5678457.128 ops/s
Iteration   7: 5498741.951 ops/s
Iteration   8: 5812467.510 ops/s
Iteration   9: 5513975.939 ops/s
Iteration  10: 5816855.054 ops/s
Iteration  11: 5794924.194 ops/s
Iteration  12: 5589670.934 ops/s
Iteration  13: 5739095.260 ops/s
Iteration  14: 5570803.468 ops/s
Iteration  15: 5672864.968 ops/s
Iteration  16: 5752297.961 ops/s
Iteration  17: 5437648.541 ops/s
Iteration  18: 5711301.538 ops/s
Iteration  19: 5606041.556 ops/s
Iteration  20: 5636097.333 ops/s
Iteration  21: 5654181.621 ops/s
Iteration  22: 5716084.518 ops/s
Iteration  23: 5572275.913 ops/s
Iteration  24: 5490193.180 ops/s
Iteration  25: 5880567.220 ops/s
Iteration  26: 5471155.216 ops/s
Iteration  27: 5845477.137 ops/s
Iteration  28: 5474266.908 ops/s
Iteration  29: 5830703.539 ops/s
Iteration  30: 5695299.472 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherTest._Benchmark.benchmark_otherPublisherNextSlipsThrough":
  5651151.133 ±(99.9%) 86520.433 ops/s [Average]
  (min, avg, max) = (5437648.541, 5651151.133, 5880567.220), stdev = 129499.721
  CI (99.9%): [5564630.700, 5737671.567] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score       Error  Units
MaybeDelayOtherTest._Benchmark.benchmark_otherPublisherNextSlipsThrough  thrpt   30  5651151.133 ± 86520.433  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowableTest._Benchmark.benchmark_iteratorCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowableTest._Benchmark.benchmark_iteratorCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 81224.148 ops/s
# Warmup Iteration   2: 513692.342 ops/s
# Warmup Iteration   3: 507315.833 ops/s
# Warmup Iteration   4: 564656.805 ops/s
# Warmup Iteration   5: 574544.675 ops/s
# Warmup Iteration   6: 554007.587 ops/s
# Warmup Iteration   7: 526291.088 ops/s
# Warmup Iteration   8: 562848.912 ops/s
# Warmup Iteration   9: 501885.422 ops/s
# Warmup Iteration  10: 572791.544 ops/s
# Warmup Iteration  11: 565409.886 ops/s
# Warmup Iteration  12: 549710.716 ops/s
# Warmup Iteration  13: 582372.506 ops/s
# Warmup Iteration  14: 551617.829 ops/s
# Warmup Iteration  15: 576148.894 ops/s
# Warmup Iteration  16: 563192.611 ops/s
# Warmup Iteration  17: 578151.114 ops/s
# Warmup Iteration  18: 588862.672 ops/s
# Warmup Iteration  19: 575301.253 ops/s
# Warmup Iteration  20: 604894.904 ops/s
# Warmup Iteration  21: 574192.826 ops/s
# Warmup Iteration  22: 602507.164 ops/s
# Warmup Iteration  23: 570189.745 ops/s
# Warmup Iteration  24: 579117.735 ops/s
# Warmup Iteration  25: 575755.406 ops/s
# Warmup Iteration  26: 568263.892 ops/s
# Warmup Iteration  27: 591209.070 ops/s
# Warmup Iteration  28: 575051.751 ops/s
# Warmup Iteration  29: 608722.811 ops/s
# Warmup Iteration  30: 592696.411 ops/s
Iteration   1: 577465.155 ops/s
Iteration   2: 584533.038 ops/s
Iteration   3: 570743.546 ops/s
Iteration   4: 582161.273 ops/s
Iteration   5: 605706.628 ops/s
Iteration   6: 550573.946 ops/s
Iteration   7: 591302.463 ops/s
Iteration   8: 605667.138 ops/s
Iteration   9: 583492.803 ops/s
Iteration  10: 603829.319 ops/s
Iteration  11: 564726.988 ops/s
Iteration  12: 602723.057 ops/s
Iteration  13: 577998.310 ops/s
Iteration  14: 582731.819 ops/s
Iteration  15: 594211.605 ops/s
Iteration  16: 561597.228 ops/s
Iteration  17: 595036.314 ops/s
Iteration  18: 592645.870 ops/s
Iteration  19: 561365.755 ops/s
Iteration  20: 587535.190 ops/s
Iteration  21: 572271.778 ops/s
Iteration  22: 599288.267 ops/s
Iteration  23: 595281.211 ops/s
Iteration  24: 556348.515 ops/s
Iteration  25: 614285.421 ops/s
Iteration  26: 573076.221 ops/s
Iteration  27: 581470.588 ops/s
Iteration  28: 569493.531 ops/s
Iteration  29: 599675.416 ops/s
Iteration  30: 612883.862 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowableTest._Benchmark.benchmark_iteratorCrash":
  585004.075 ±(99.9%) 11357.415 ops/s [Average]
  (min, avg, max) = (550573.946, 585004.075, 614285.421), stdev = 16999.245
  CI (99.9%): [573646.660, 596361.490] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score       Error  Units
MaybeFlatMapIterableFlowableTest._Benchmark.benchmark_iteratorCrash  thrpt   30  585004.075 ± 11357.415  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilTest._Benchmark.benchmark_normalPublisher$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilTest._Benchmark.benchmark_normalPublisher

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1015764.945 ops/s
# Warmup Iteration   2: 4283116.778 ops/s
# Warmup Iteration   3: 5023418.342 ops/s
# Warmup Iteration   4: 5567035.266 ops/s
# Warmup Iteration   5: 5763408.361 ops/s
# Warmup Iteration   6: 5553763.735 ops/s
# Warmup Iteration   7: 5557541.423 ops/s
# Warmup Iteration   8: 5674961.151 ops/s
# Warmup Iteration   9: 5438436.448 ops/s
# Warmup Iteration  10: 5818966.352 ops/s
# Warmup Iteration  11: 5690077.156 ops/s
# Warmup Iteration  12: 5561732.641 ops/s
# Warmup Iteration  13: 5648783.903 ops/s
# Warmup Iteration  14: 5555921.547 ops/s
# Warmup Iteration  15: 5578044.808 ops/s
# Warmup Iteration  16: 4641112.207 ops/s
# Warmup Iteration  17: 5503655.777 ops/s
# Warmup Iteration  18: 5594507.261 ops/s
# Warmup Iteration  19: 5576110.255 ops/s
# Warmup Iteration  20: 5681534.426 ops/s
# Warmup Iteration  21: 5593700.595 ops/s
# Warmup Iteration  22: 5533602.327 ops/s
# Warmup Iteration  23: 5702839.546 ops/s
# Warmup Iteration  24: 5716045.864 ops/s
# Warmup Iteration  25: 5449668.413 ops/s
# Warmup Iteration  26: 5674830.745 ops/s
# Warmup Iteration  27: 5584397.927 ops/s
# Warmup Iteration  28: 5507960.028 ops/s
# Warmup Iteration  29: 5808127.047 ops/s
# Warmup Iteration  30: 5466875.091 ops/s
Iteration   1: 5794764.601 ops/s
Iteration   2: 5696995.461 ops/s
Iteration   3: 5499963.269 ops/s
Iteration   4: 5722650.029 ops/s
Iteration   5: 5480540.664 ops/s
Iteration   6: 5810182.692 ops/s
Iteration   7: 5523037.474 ops/s
Iteration   8: 5692943.589 ops/s
Iteration   9: 5826537.030 ops/s
Iteration  10: 5696832.810 ops/s
Iteration  11: 5718967.119 ops/s
Iteration  12: 5648963.805 ops/s
Iteration  13: 5735517.842 ops/s
Iteration  14: 5813242.184 ops/s
Iteration  15: 5525504.447 ops/s
Iteration  16: 5583276.670 ops/s
Iteration  17: 5785197.351 ops/s
Iteration  18: 5613669.180 ops/s
Iteration  19: 5880561.606 ops/s
Iteration  20: 5832734.103 ops/s
Iteration  21: 5549168.138 ops/s
Iteration  22: 5878405.002 ops/s
Iteration  23: 5379203.103 ops/s
Iteration  24: 5798039.233 ops/s
Iteration  25: 5519928.121 ops/s
Iteration  26: 5807234.611 ops/s
Iteration  27: 5851322.423 ops/s
Iteration  28: 5471881.864 ops/s
Iteration  29: 5797595.222 ops/s
Iteration  30: 5580311.167 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilTest._Benchmark.benchmark_normalPublisher":
  5683839.027 ±(99.9%) 94911.242 ops/s [Average]
  (min, avg, max) = (5379203.103, 5683839.027, 5880561.606), stdev = 142058.690
  CI (99.9%): [5588927.785, 5778750.269] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
MaybeTakeUntilTest._Benchmark.benchmark_normalPublisher  thrpt   30  5683839.027 ± 94911.242  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowableTest._Benchmark.benchmark_successJust$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowableTest._Benchmark.benchmark_successJust

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 342367.906 ops/s
# Warmup Iteration   2: 2735260.105 ops/s
# Warmup Iteration   3: 3173603.246 ops/s
# Warmup Iteration   4: 3554595.622 ops/s
# Warmup Iteration   5: 3675037.998 ops/s
# Warmup Iteration   6: 3672746.948 ops/s
# Warmup Iteration   7: 3605773.927 ops/s
# Warmup Iteration   8: 3637461.314 ops/s
# Warmup Iteration   9: 3761173.272 ops/s
# Warmup Iteration  10: 3592270.709 ops/s
# Warmup Iteration  11: 3627567.227 ops/s
# Warmup Iteration  12: 3660717.804 ops/s
# Warmup Iteration  13: 3667615.450 ops/s
# Warmup Iteration  14: 3726270.445 ops/s
# Warmup Iteration  15: 3597809.778 ops/s
# Warmup Iteration  16: 3652838.459 ops/s
# Warmup Iteration  17: 3740025.919 ops/s
# Warmup Iteration  18: 3567214.079 ops/s
# Warmup Iteration  19: 3691168.489 ops/s
# Warmup Iteration  20: 3606329.133 ops/s
# Warmup Iteration  21: 3702759.400 ops/s
# Warmup Iteration  22: 3542868.062 ops/s
# Warmup Iteration  23: 3802071.145 ops/s
# Warmup Iteration  24: 3633485.291 ops/s
# Warmup Iteration  25: 3683874.223 ops/s
# Warmup Iteration  26: 3587058.877 ops/s
# Warmup Iteration  27: 3817470.142 ops/s
# Warmup Iteration  28: 3752175.812 ops/s
# Warmup Iteration  29: 3600030.453 ops/s
# Warmup Iteration  30: 3775318.853 ops/s
Iteration   1: 3687314.953 ops/s
Iteration   2: 3545433.743 ops/s
Iteration   3: 3732321.740 ops/s
Iteration   4: 3630474.131 ops/s
Iteration   5: 3724286.242 ops/s
Iteration   6: 3556659.412 ops/s
Iteration   7: 3667179.802 ops/s
Iteration   8: 3753676.391 ops/s
Iteration   9: 3643404.931 ops/s
Iteration  10: 3710600.596 ops/s
Iteration  11: 3572578.330 ops/s
Iteration  12: 3854315.320 ops/s
Iteration  13: 3711877.499 ops/s
Iteration  14: 3667563.032 ops/s
Iteration  15: 3603663.441 ops/s
Iteration  16: 3638287.308 ops/s
Iteration  17: 3778618.398 ops/s
Iteration  18: 3615283.424 ops/s
Iteration  19: 3696684.272 ops/s
Iteration  20: 3619197.221 ops/s
Iteration  21: 3745887.608 ops/s
Iteration  22: 3656318.075 ops/s
Iteration  23: 3577794.499 ops/s
Iteration  24: 3758308.268 ops/s
Iteration  25: 3597686.407 ops/s
Iteration  26: 3686287.077 ops/s
Iteration  27: 3586011.078 ops/s
Iteration  28: 3597712.700 ops/s
Iteration  29: 3631860.831 ops/s
Iteration  30: 3619374.391 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowableTest._Benchmark.benchmark_successJust":
  3662222.037 ±(99.9%) 49214.792 ops/s [Average]
  (min, avg, max) = (3545433.743, 3662222.037, 3854315.320), stdev = 73662.389
  CI (99.9%): [3613007.245, 3711436.829] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
MaybeFlattenStreamAsFlowableTest._Benchmark.benchmark_successJust  thrpt   30  3662222.037 ± 49214.792  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowableTest._Benchmark.benchmark_successMany$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowableTest._Benchmark.benchmark_successMany

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 380761.647 ops/s
# Warmup Iteration   2: 1618558.091 ops/s
# Warmup Iteration   3: 2457847.989 ops/s
# Warmup Iteration   4: 2641008.436 ops/s
# Warmup Iteration   5: 2569478.518 ops/s
# Warmup Iteration   6: 2539805.476 ops/s
# Warmup Iteration   7: 2606046.030 ops/s
# Warmup Iteration   8: 2613294.346 ops/s
# Warmup Iteration   9: 2515503.905 ops/s
# Warmup Iteration  10: 2383838.431 ops/s
# Warmup Iteration  11: 2222690.009 ops/s
# Warmup Iteration  12: 2519173.745 ops/s
# Warmup Iteration  13: 2445848.934 ops/s
# Warmup Iteration  14: 2497104.138 ops/s
# Warmup Iteration  15: 2600145.099 ops/s
# Warmup Iteration  16: 2677523.244 ops/s
# Warmup Iteration  17: 2505213.226 ops/s
# Warmup Iteration  18: 2587955.192 ops/s
# Warmup Iteration  19: 2583585.843 ops/s
# Warmup Iteration  20: 2591176.154 ops/s
# Warmup Iteration  21: 2577928.518 ops/s
# Warmup Iteration  22: 2596408.181 ops/s
# Warmup Iteration  23: 2630002.733 ops/s
# Warmup Iteration  24: 2594501.718 ops/s
# Warmup Iteration  25: 2480544.375 ops/s
# Warmup Iteration  26: 2653855.859 ops/s
# Warmup Iteration  27: 2551634.077 ops/s
# Warmup Iteration  28: 2619716.283 ops/s
# Warmup Iteration  29: 2544885.268 ops/s
# Warmup Iteration  30: 2684924.678 ops/s
Iteration   1: 2672537.242 ops/s
Iteration   2: 2616779.103 ops/s
Iteration   3: 2515539.578 ops/s
Iteration   4: 2685913.771 ops/s
Iteration   5: 2493937.840 ops/s
Iteration   6: 2590399.474 ops/s
Iteration   7: 2539860.880 ops/s
Iteration   8: 2629481.807 ops/s
Iteration   9: 2609016.082 ops/s
Iteration  10: 2610373.523 ops/s
Iteration  11: 2633578.676 ops/s
Iteration  12: 2557319.524 ops/s
Iteration  13: 2596754.816 ops/s
Iteration  14: 2579454.458 ops/s
Iteration  15: 2523042.959 ops/s
Iteration  16: 2629299.748 ops/s
Iteration  17: 2557720.773 ops/s
Iteration  18: 2631891.954 ops/s
Iteration  19: 2479020.114 ops/s
Iteration  20: 2611030.787 ops/s
Iteration  21: 2534728.125 ops/s
Iteration  22: 2577602.006 ops/s
Iteration  23: 2613922.096 ops/s
Iteration  24: 2556118.440 ops/s
Iteration  25: 2587857.151 ops/s
Iteration  26: 2608185.916 ops/s
Iteration  27: 2706917.711 ops/s
Iteration  28: 2527709.189 ops/s
Iteration  29: 2679942.809 ops/s
Iteration  30: 2606225.344 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowableTest._Benchmark.benchmark_successMany":
  2592072.063 ±(99.9%) 37650.652 ops/s [Average]
  (min, avg, max) = (2479020.114, 2592072.063, 2706917.711), stdev = 56353.728
  CI (99.9%): [2554421.411, 2629722.715] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
MaybeFlattenStreamAsFlowableTest._Benchmark.benchmark_successMany  thrpt   30  2592072.063 ± 37650.652  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowableTest._Benchmark.benchmark_hasNextCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowableTest._Benchmark.benchmark_hasNextCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 61991.372 ops/s
# Warmup Iteration   2: 452632.426 ops/s
# Warmup Iteration   3: 507955.258 ops/s
# Warmup Iteration   4: 565962.355 ops/s
# Warmup Iteration   5: 553528.754 ops/s
# Warmup Iteration   6: 563127.722 ops/s
# Warmup Iteration   7: 567503.207 ops/s
# Warmup Iteration   8: 570591.524 ops/s
# Warmup Iteration   9: 569934.944 ops/s
# Warmup Iteration  10: 540345.226 ops/s
# Warmup Iteration  11: 576937.116 ops/s
# Warmup Iteration  12: 541609.392 ops/s
# Warmup Iteration  13: 557254.989 ops/s
# Warmup Iteration  14: 560418.912 ops/s
# Warmup Iteration  15: 559116.764 ops/s
# Warmup Iteration  16: 570456.867 ops/s
# Warmup Iteration  17: 594261.354 ops/s
# Warmup Iteration  18: 593605.433 ops/s
# Warmup Iteration  19: 576647.387 ops/s
# Warmup Iteration  20: 589838.790 ops/s
# Warmup Iteration  21: 595285.459 ops/s
# Warmup Iteration  22: 569959.237 ops/s
# Warmup Iteration  23: 604778.756 ops/s
# Warmup Iteration  24: 570693.710 ops/s
# Warmup Iteration  25: 592479.363 ops/s
# Warmup Iteration  26: 586505.295 ops/s
# Warmup Iteration  27: 575341.283 ops/s
# Warmup Iteration  28: 609870.565 ops/s
# Warmup Iteration  29: 578085.045 ops/s
# Warmup Iteration  30: 586222.012 ops/s
Iteration   1: 573904.344 ops/s
Iteration   2: 574235.284 ops/s
Iteration   3: 584846.047 ops/s
Iteration   4: 580376.131 ops/s
Iteration   5: 588740.877 ops/s
Iteration   6: 587393.441 ops/s
Iteration   7: 585311.825 ops/s
Iteration   8: 585340.352 ops/s
Iteration   9: 592215.451 ops/s
Iteration  10: 613317.553 ops/s
Iteration  11: 583728.250 ops/s
Iteration  12: 597167.368 ops/s
Iteration  13: 568287.123 ops/s
Iteration  14: 606802.976 ops/s
Iteration  15: 604120.633 ops/s
Iteration  16: 565087.060 ops/s
Iteration  17: 598108.059 ops/s
Iteration  18: 602546.604 ops/s
Iteration  19: 576191.852 ops/s
Iteration  20: 598662.772 ops/s
Iteration  21: 595494.740 ops/s
Iteration  22: 601287.255 ops/s
Iteration  23: 564289.363 ops/s
Iteration  24: 579555.312 ops/s
Iteration  25: 594556.274 ops/s
Iteration  26: 587469.753 ops/s
Iteration  27: 600777.120 ops/s
Iteration  28: 589665.207 ops/s
Iteration  29: 588169.014 ops/s
Iteration  30: 619572.944 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowableTest._Benchmark.benchmark_hasNextCrash":
  589574.033 ±(99.9%) 9052.940 ops/s [Average]
  (min, avg, max) = (564289.363, 589574.033, 619572.944), stdev = 13550.016
  CI (99.9%): [580521.092, 598626.973] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score      Error  Units
MaybeFlatMapIterableFlowableTest._Benchmark.benchmark_hasNextCrash  thrpt   30  589574.033 ± 9052.940  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.CompletableAndThenPublisherTest._Benchmark.benchmark_cancelMain$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.CompletableAndThenPublisherTest._Benchmark.benchmark_cancelMain

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 582709.130 ops/s
# Warmup Iteration   2: 2109995.499 ops/s
# Warmup Iteration   3: 3168812.955 ops/s
# Warmup Iteration   4: 3864179.156 ops/s
# Warmup Iteration   5: 2735222.693 ops/s
# Warmup Iteration   6: 3733368.639 ops/s
# Warmup Iteration   7: 3676076.733 ops/s
# Warmup Iteration   8: 3776454.820 ops/s
# Warmup Iteration   9: 3771109.954 ops/s
# Warmup Iteration  10: 3558656.251 ops/s
# Warmup Iteration  11: 3602550.173 ops/s
# Warmup Iteration  12: 3834606.942 ops/s
# Warmup Iteration  13: 3528646.832 ops/s
# Warmup Iteration  14: 3857483.741 ops/s
# Warmup Iteration  15: 3743738.827 ops/s
# Warmup Iteration  16: 3668270.376 ops/s
# Warmup Iteration  17: 3885883.672 ops/s
# Warmup Iteration  18: 3570243.522 ops/s
# Warmup Iteration  19: 3873229.016 ops/s
# Warmup Iteration  20: 3654604.205 ops/s
# Warmup Iteration  21: 3727515.070 ops/s
# Warmup Iteration  22: 3639196.791 ops/s
# Warmup Iteration  23: 3684086.042 ops/s
# Warmup Iteration  24: 3740863.214 ops/s
# Warmup Iteration  25: 3832137.629 ops/s
# Warmup Iteration  26: 3672172.980 ops/s
# Warmup Iteration  27: 3749273.936 ops/s
# Warmup Iteration  28: 3756469.972 ops/s
# Warmup Iteration  29: 3793562.348 ops/s
# Warmup Iteration  30: 3781038.407 ops/s
Iteration   1: 3418505.354 ops/s
Iteration   2: 3850117.238 ops/s
Iteration   3: 3700509.541 ops/s
Iteration   4: 3786212.843 ops/s
Iteration   5: 3722618.062 ops/s
Iteration   6: 3754898.846 ops/s
Iteration   7: 3651751.681 ops/s
Iteration   8: 3707546.340 ops/s
Iteration   9: 3809442.076 ops/s
Iteration  10: 3664583.653 ops/s
Iteration  11: 3670472.159 ops/s
Iteration  12: 3681957.916 ops/s
Iteration  13: 3671532.549 ops/s
Iteration  14: 3850382.927 ops/s
Iteration  15: 3838472.427 ops/s
Iteration  16: 3625737.777 ops/s
Iteration  17: 3845361.464 ops/s
Iteration  18: 3641231.926 ops/s
Iteration  19: 3729540.837 ops/s
Iteration  20: 3634786.038 ops/s
Iteration  21: 3876471.845 ops/s
Iteration  22: 3618799.677 ops/s
Iteration  23: 3858735.929 ops/s
Iteration  24: 3604877.083 ops/s
Iteration  25: 3690616.554 ops/s
Iteration  26: 3819860.529 ops/s
Iteration  27: 3520644.194 ops/s
Iteration  28: 3802063.405 ops/s
Iteration  29: 3691719.288 ops/s
Iteration  30: 3555212.662 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.CompletableAndThenPublisherTest._Benchmark.benchmark_cancelMain":
  3709822.094 ±(99.9%) 73871.579 ops/s [Average]
  (min, avg, max) = (3418505.354, 3709822.094, 3876471.845), stdev = 110567.511
  CI (99.9%): [3635950.515, 3783693.673] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
CompletableAndThenPublisherTest._Benchmark.benchmark_cancelMain  thrpt   30  3709822.094 ± 73871.579  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowableTest._Benchmark.benchmark_mapperCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowableTest._Benchmark.benchmark_mapperCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 220085.285 ops/s
# Warmup Iteration   2: 496695.556 ops/s
# Warmup Iteration   3: 613530.642 ops/s
# Warmup Iteration   4: 606740.339 ops/s
# Warmup Iteration   5: 632668.009 ops/s
# Warmup Iteration   6: 580291.045 ops/s
# Warmup Iteration   7: 601895.589 ops/s
# Warmup Iteration   8: 617828.262 ops/s
# Warmup Iteration   9: 607516.151 ops/s
# Warmup Iteration  10: 593086.071 ops/s
# Warmup Iteration  11: 594161.369 ops/s
# Warmup Iteration  12: 625422.005 ops/s
# Warmup Iteration  13: 556771.954 ops/s
# Warmup Iteration  14: 596717.936 ops/s
# Warmup Iteration  15: 595668.728 ops/s
# Warmup Iteration  16: 603654.321 ops/s
# Warmup Iteration  17: 655233.394 ops/s
# Warmup Iteration  18: 630049.264 ops/s
# Warmup Iteration  19: 635279.499 ops/s
# Warmup Iteration  20: 656067.908 ops/s
# Warmup Iteration  21: 620143.265 ops/s
# Warmup Iteration  22: 652433.175 ops/s
# Warmup Iteration  23: 631759.419 ops/s
# Warmup Iteration  24: 617574.184 ops/s
# Warmup Iteration  25: 653669.186 ops/s
# Warmup Iteration  26: 629181.660 ops/s
# Warmup Iteration  27: 627017.022 ops/s
# Warmup Iteration  28: 631281.255 ops/s
# Warmup Iteration  29: 614221.928 ops/s
# Warmup Iteration  30: 636115.241 ops/s
Iteration   1: 616746.049 ops/s
Iteration   2: 615874.066 ops/s
Iteration   3: 634554.484 ops/s
Iteration   4: 617693.273 ops/s
Iteration   5: 642723.191 ops/s
Iteration   6: 617079.043 ops/s
Iteration   7: 657929.807 ops/s
Iteration   8: 631123.785 ops/s
Iteration   9: 645475.764 ops/s
Iteration  10: 631356.285 ops/s
Iteration  11: 623468.758 ops/s
Iteration  12: 643713.840 ops/s
Iteration  13: 631916.703 ops/s
Iteration  14: 633762.750 ops/s
Iteration  15: 651951.124 ops/s
Iteration  16: 617236.505 ops/s
Iteration  17: 635698.608 ops/s
Iteration  18: 623674.549 ops/s
Iteration  19: 630457.500 ops/s
Iteration  20: 640846.602 ops/s
Iteration  21: 647434.650 ops/s
Iteration  22: 638484.982 ops/s
Iteration  23: 618260.018 ops/s
Iteration  24: 630320.118 ops/s
Iteration  25: 644806.196 ops/s
Iteration  26: 639264.328 ops/s
Iteration  27: 635131.799 ops/s
Iteration  28: 630596.168 ops/s
Iteration  29: 657362.685 ops/s
Iteration  30: 649345.572 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowableTest._Benchmark.benchmark_mapperCrash":
  634476.307 ±(99.9%) 8182.732 ops/s [Average]
  (min, avg, max) = (615874.066, 634476.307, 657929.807), stdev = 12247.529
  CI (99.9%): [626293.575, 642659.039] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score      Error  Units
MaybeFlattenStreamAsFlowableTest._Benchmark.benchmark_mapperCrash  thrpt   30  634476.307 ± 8182.732  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowableTest._Benchmark.benchmark_manyBackpressured$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowableTest._Benchmark.benchmark_manyBackpressured

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 171203.765 ops/s
# Warmup Iteration   2: 505528.501 ops/s
# Warmup Iteration   3: 1314297.485 ops/s
# Warmup Iteration   4: 1568572.568 ops/s
# Warmup Iteration   5: 1819220.256 ops/s
# Warmup Iteration   6: 1813043.129 ops/s
# Warmup Iteration   7: 1748174.865 ops/s
# Warmup Iteration   8: 1819914.556 ops/s
# Warmup Iteration   9: 1853677.062 ops/s
# Warmup Iteration  10: 1778485.039 ops/s
# Warmup Iteration  11: 1832099.593 ops/s
# Warmup Iteration  12: 1815088.139 ops/s
# Warmup Iteration  13: 1783775.752 ops/s
# Warmup Iteration  14: 1864019.186 ops/s
# Warmup Iteration  15: 1827208.534 ops/s
# Warmup Iteration  16: 1870898.708 ops/s
# Warmup Iteration  17: 1780503.862 ops/s
# Warmup Iteration  18: 1864366.241 ops/s
# Warmup Iteration  19: 1903258.071 ops/s
# Warmup Iteration  20: 1757729.842 ops/s
# Warmup Iteration  21: 1885026.342 ops/s
# Warmup Iteration  22: 1793803.782 ops/s
# Warmup Iteration  23: 1885773.056 ops/s
# Warmup Iteration  24: 1817947.358 ops/s
# Warmup Iteration  25: 1802130.321 ops/s
# Warmup Iteration  26: 1861179.849 ops/s
# Warmup Iteration  27: 1783403.548 ops/s
# Warmup Iteration  28: 1893574.522 ops/s
# Warmup Iteration  29: 1866455.990 ops/s
# Warmup Iteration  30: 1790777.487 ops/s
Iteration   1: 1833033.520 ops/s
Iteration   2: 1825410.029 ops/s
Iteration   3: 1874224.156 ops/s
Iteration   4: 1844057.214 ops/s
Iteration   5: 1769527.329 ops/s
Iteration   6: 1861081.567 ops/s
Iteration   7: 1840531.850 ops/s
Iteration   8: 1887273.727 ops/s
Iteration   9: 1807861.976 ops/s
Iteration  10: 1866462.985 ops/s
Iteration  11: 1918229.246 ops/s
Iteration  12: 1778016.344 ops/s
Iteration  13: 1865035.147 ops/s
Iteration  14: 1830065.669 ops/s
Iteration  15: 1808655.664 ops/s
Iteration  16: 1855083.304 ops/s
Iteration  17: 1818984.704 ops/s
Iteration  18: 1847617.524 ops/s
Iteration  19: 1844226.898 ops/s
Iteration  20: 1866653.775 ops/s
Iteration  21: 1821857.788 ops/s
Iteration  22: 1824780.749 ops/s
Iteration  23: 1815361.934 ops/s
Iteration  24: 1800379.705 ops/s
Iteration  25: 1812914.292 ops/s
Iteration  26: 1803031.411 ops/s
Iteration  27: 1879148.445 ops/s
Iteration  28: 1796115.354 ops/s
Iteration  29: 1876705.376 ops/s
Iteration  30: 1831052.725 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowableTest._Benchmark.benchmark_manyBackpressured":
  1836779.347 ±(99.9%) 22662.206 ops/s [Average]
  (min, avg, max) = (1769527.329, 1836779.347, 1918229.246), stdev = 33919.726
  CI (99.9%): [1814117.141, 1859441.553] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score       Error  Units
MaybeFlattenStreamAsFlowableTest._Benchmark.benchmark_manyBackpressured  thrpt   30  1836779.347 ± 22662.206  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArrayTest._Benchmark.benchmark_mixed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArrayTest._Benchmark.benchmark_mixed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 347389.400 ops/s
# Warmup Iteration   2: 1589952.482 ops/s
# Warmup Iteration   3: 2512054.027 ops/s
# Warmup Iteration   4: 2410678.261 ops/s
# Warmup Iteration   5: 2439589.103 ops/s
# Warmup Iteration   6: 2374446.626 ops/s
# Warmup Iteration   7: 2290547.519 ops/s
# Warmup Iteration   8: 2515569.196 ops/s
# Warmup Iteration   9: 2335161.830 ops/s
# Warmup Iteration  10: 2359802.365 ops/s
# Warmup Iteration  11: 2281218.915 ops/s
# Warmup Iteration  12: 2592778.131 ops/s
# Warmup Iteration  13: 2422694.121 ops/s
# Warmup Iteration  14: 2511423.232 ops/s
# Warmup Iteration  15: 2431018.367 ops/s
# Warmup Iteration  16: 2580557.394 ops/s
# Warmup Iteration  17: 2418740.098 ops/s
# Warmup Iteration  18: 2423960.802 ops/s
# Warmup Iteration  19: 2538469.828 ops/s
# Warmup Iteration  20: 2504948.165 ops/s
# Warmup Iteration  21: 2489151.933 ops/s
# Warmup Iteration  22: 2512009.187 ops/s
# Warmup Iteration  23: 2488229.073 ops/s
# Warmup Iteration  24: 2491588.804 ops/s
# Warmup Iteration  25: 2495453.237 ops/s
# Warmup Iteration  26: 2411604.824 ops/s
# Warmup Iteration  27: 2588416.911 ops/s
# Warmup Iteration  28: 2481526.613 ops/s
# Warmup Iteration  29: 2459556.117 ops/s
# Warmup Iteration  30: 2529739.473 ops/s
Iteration   1: 2426913.795 ops/s
Iteration   2: 2468504.294 ops/s
Iteration   3: 2575274.663 ops/s
Iteration   4: 2362613.867 ops/s
Iteration   5: 2556683.947 ops/s
Iteration   6: 2477369.855 ops/s
Iteration   7: 2559033.239 ops/s
Iteration   8: 2545791.404 ops/s
Iteration   9: 2511905.937 ops/s
Iteration  10: 2466805.520 ops/s
Iteration  11: 2527829.105 ops/s
Iteration  12: 2473051.640 ops/s
Iteration  13: 2536316.237 ops/s
Iteration  14: 2422587.452 ops/s
Iteration  15: 2447358.855 ops/s
Iteration  16: 2473871.056 ops/s
Iteration  17: 2476265.900 ops/s
Iteration  18: 2504583.316 ops/s
Iteration  19: 2472196.124 ops/s
Iteration  20: 2568571.946 ops/s
Iteration  21: 2560451.204 ops/s
Iteration  22: 2418829.487 ops/s
Iteration  23: 2589243.597 ops/s
Iteration  24: 2411443.452 ops/s
Iteration  25: 2506990.434 ops/s
Iteration  26: 2452604.782 ops/s
Iteration  27: 1932620.981 ops/s
Iteration  28: 2560742.370 ops/s
Iteration  29: 2539316.577 ops/s
Iteration  30: 2485296.304 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArrayTest._Benchmark.benchmark_mixed":
  2477035.578 ±(99.9%) 78431.094 ops/s [Average]
  (min, avg, max) = (1932620.981, 2477035.578, 2589243.597), stdev = 117391.979
  CI (99.9%): [2398604.484, 2555466.672] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score       Error  Units
MaybeConcatArrayTest._Benchmark.benchmark_mixed  thrpt   30  2477035.578 ± 78431.094  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowableTest._Benchmark.benchmark_requestOneByOne$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowableTest._Benchmark.benchmark_requestOneByOne

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 276796.529 ops/s
# Warmup Iteration   2: 885830.503 ops/s
# Warmup Iteration   3: 1757389.217 ops/s
# Warmup Iteration   4: 1676108.412 ops/s
# Warmup Iteration   5: 1714538.491 ops/s
# Warmup Iteration   6: 1866078.186 ops/s
# Warmup Iteration   7: 1887811.721 ops/s
# Warmup Iteration   8: 1885769.787 ops/s
# Warmup Iteration   9: 1878078.396 ops/s
# Warmup Iteration  10: 1940486.791 ops/s
# Warmup Iteration  11: 1931387.700 ops/s
# Warmup Iteration  12: 1822226.810 ops/s
# Warmup Iteration  13: 1908899.213 ops/s
# Warmup Iteration  14: 1880239.278 ops/s
# Warmup Iteration  15: 1924165.828 ops/s
# Warmup Iteration  16: 1912809.342 ops/s
# Warmup Iteration  17: 1928250.025 ops/s
# Warmup Iteration  18: 1916039.377 ops/s
# Warmup Iteration  19: 1907276.348 ops/s
# Warmup Iteration  20: 1891591.733 ops/s
# Warmup Iteration  21: 1916507.346 ops/s
# Warmup Iteration  22: 1874234.212 ops/s
# Warmup Iteration  23: 1991905.710 ops/s
# Warmup Iteration  24: 1862534.089 ops/s
# Warmup Iteration  25: 1838174.323 ops/s
# Warmup Iteration  26: 1960520.150 ops/s
# Warmup Iteration  27: 1870875.655 ops/s
# Warmup Iteration  28: 1848668.162 ops/s
# Warmup Iteration  29: 1887140.120 ops/s
# Warmup Iteration  30: 1860012.253 ops/s
Iteration   1: 1920243.856 ops/s
Iteration   2: 1802527.508 ops/s
Iteration   3: 1947508.076 ops/s
Iteration   4: 1925207.809 ops/s
Iteration   5: 1855644.688 ops/s
Iteration   6: 1888450.763 ops/s
Iteration   7: 1947201.598 ops/s
Iteration   8: 1875946.257 ops/s
Iteration   9: 1904917.633 ops/s
Iteration  10: 1866982.925 ops/s
Iteration  11: 1999408.188 ops/s
Iteration  12: 1822679.616 ops/s
Iteration  13: 1889685.305 ops/s
Iteration  14: 1942618.506 ops/s
Iteration  15: 1854792.030 ops/s
Iteration  16: 1909537.916 ops/s
Iteration  17: 1969992.979 ops/s
Iteration  18: 1910352.513 ops/s
Iteration  19: 1949836.816 ops/s
Iteration  20: 1896617.914 ops/s
Iteration  21: 1859739.187 ops/s
Iteration  22: 1925102.382 ops/s
Iteration  23: 1885245.604 ops/s
Iteration  24: 1941557.423 ops/s
Iteration  25: 1838862.674 ops/s
Iteration  26: 1931424.028 ops/s
Iteration  27: 1979350.285 ops/s
Iteration  28: 1832847.409 ops/s
Iteration  29: 1955020.997 ops/s
Iteration  30: 1875533.222 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowableTest._Benchmark.benchmark_requestOneByOne":
  1903494.537 ±(99.9%) 32643.734 ops/s [Average]
  (min, avg, max) = (1802527.508, 1903494.537, 1999408.188), stdev = 48859.608
  CI (99.9%): [1870850.803, 1936138.271] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
MaybeFlattenStreamAsFlowableTest._Benchmark.benchmark_requestOneByOne  thrpt   30  1903494.537 ± 32643.734  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowableTest._Benchmark.benchmark_fusedJust$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowableTest._Benchmark.benchmark_fusedJust

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 493786.683 ops/s
# Warmup Iteration   2: 2621608.564 ops/s
# Warmup Iteration   3: 3380914.269 ops/s
# Warmup Iteration   4: 3912541.859 ops/s
# Warmup Iteration   5: 3917609.846 ops/s
# Warmup Iteration   6: 3927721.408 ops/s
# Warmup Iteration   7: 3957693.278 ops/s
# Warmup Iteration   8: 3762885.726 ops/s
# Warmup Iteration   9: 3850896.468 ops/s
# Warmup Iteration  10: 3992863.655 ops/s
# Warmup Iteration  11: 3892562.615 ops/s
# Warmup Iteration  12: 3817927.625 ops/s
# Warmup Iteration  13: 4029380.503 ops/s
# Warmup Iteration  14: 3880994.020 ops/s
# Warmup Iteration  15: 4139869.827 ops/s
# Warmup Iteration  16: 3739929.496 ops/s
# Warmup Iteration  17: 4047137.091 ops/s
# Warmup Iteration  18: 4012789.730 ops/s
# Warmup Iteration  19: 3876722.911 ops/s
# Warmup Iteration  20: 3991919.081 ops/s
# Warmup Iteration  21: 3902673.607 ops/s
# Warmup Iteration  22: 4072561.640 ops/s
# Warmup Iteration  23: 3968184.431 ops/s
# Warmup Iteration  24: 4038320.805 ops/s
# Warmup Iteration  25: 3906773.616 ops/s
# Warmup Iteration  26: 3992500.995 ops/s
# Warmup Iteration  27: 3970589.102 ops/s
# Warmup Iteration  28: 4088092.361 ops/s
# Warmup Iteration  29: 3852352.081 ops/s
# Warmup Iteration  30: 4115364.438 ops/s
Iteration   1: 3818376.925 ops/s
Iteration   2: 3926462.460 ops/s
Iteration   3: 3882592.016 ops/s
Iteration   4: 3869934.171 ops/s
Iteration   5: 4018211.072 ops/s
Iteration   6: 3865713.388 ops/s
Iteration   7: 3916114.981 ops/s
Iteration   8: 3813420.536 ops/s
Iteration   9: 3911517.202 ops/s
Iteration  10: 3940135.778 ops/s
Iteration  11: 3894059.219 ops/s
Iteration  12: 3915148.871 ops/s
Iteration  13: 3889612.995 ops/s
Iteration  14: 4055390.804 ops/s
Iteration  15: 4030873.447 ops/s
Iteration  16: 3915443.711 ops/s
Iteration  17: 3840508.495 ops/s
Iteration  18: 4059180.845 ops/s
Iteration  19: 3939888.001 ops/s
Iteration  20: 4081315.723 ops/s
Iteration  21: 3570381.634 ops/s
Iteration  22: 3361573.979 ops/s
Iteration  23: 3987301.843 ops/s
Iteration  24: 3886490.126 ops/s
Iteration  25: 3991928.743 ops/s
Iteration  26: 3939169.104 ops/s
Iteration  27: 4013089.408 ops/s
Iteration  28: 3844353.689 ops/s
Iteration  29: 3918569.580 ops/s
Iteration  30: 4064282.730 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowableTest._Benchmark.benchmark_fusedJust":
  3905368.049 ±(99.9%) 95871.593 ops/s [Average]
  (min, avg, max) = (3361573.979, 3905368.049, 4081315.723), stdev = 143496.098
  CI (99.9%): [3809496.456, 4001239.643] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
MaybeFlattenStreamAsFlowableTest._Benchmark.benchmark_fusedJust  thrpt   30  3905368.049 ± 95871.593  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowableTest._Benchmark.benchmark_fusedMany$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowableTest._Benchmark.benchmark_fusedMany

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 388405.847 ops/s
# Warmup Iteration   2: 860753.427 ops/s
# Warmup Iteration   3: 2470057.876 ops/s
# Warmup Iteration   4: 3249803.480 ops/s
# Warmup Iteration   5: 3174384.708 ops/s
# Warmup Iteration   6: 3420976.249 ops/s
# Warmup Iteration   7: 3399515.769 ops/s
# Warmup Iteration   8: 3073224.613 ops/s
# Warmup Iteration   9: 3308276.741 ops/s
# Warmup Iteration  10: 3175351.414 ops/s
# Warmup Iteration  11: 3387227.210 ops/s
# Warmup Iteration  12: 3189778.891 ops/s
# Warmup Iteration  13: 3214672.091 ops/s
# Warmup Iteration  14: 3285397.036 ops/s
# Warmup Iteration  15: 3192508.733 ops/s
# Warmup Iteration  16: 3302341.311 ops/s
# Warmup Iteration  17: 3194957.710 ops/s
# Warmup Iteration  18: 3261388.353 ops/s
# Warmup Iteration  19: 3180570.164 ops/s
# Warmup Iteration  20: 3298030.241 ops/s
# Warmup Iteration  21: 3263316.002 ops/s
# Warmup Iteration  22: 3149573.445 ops/s
# Warmup Iteration  23: 3332445.761 ops/s
# Warmup Iteration  24: 3195229.965 ops/s
# Warmup Iteration  25: 3300115.399 ops/s
# Warmup Iteration  26: 3386584.160 ops/s
# Warmup Iteration  27: 3264077.213 ops/s
# Warmup Iteration  28: 3211249.189 ops/s
# Warmup Iteration  29: 3341941.761 ops/s
# Warmup Iteration  30: 3184917.657 ops/s
Iteration   1: 3385301.295 ops/s
Iteration   2: 3326849.044 ops/s
Iteration   3: 3243614.342 ops/s
Iteration   4: 3317843.882 ops/s
Iteration   5: 3098998.740 ops/s
Iteration   6: 3280766.479 ops/s
Iteration   7: 3195759.505 ops/s
Iteration   8: 3358380.466 ops/s
Iteration   9: 3256544.592 ops/s
Iteration  10: 3288650.395 ops/s
Iteration  11: 3263804.607 ops/s
Iteration  12: 3258748.036 ops/s
Iteration  13: 3327544.373 ops/s
Iteration  14: 3154430.199 ops/s
Iteration  15: 3349788.921 ops/s
Iteration  16: 3317825.387 ops/s
Iteration  17: 3207415.910 ops/s
Iteration  18: 3358697.859 ops/s
Iteration  19: 3206735.267 ops/s
Iteration  20: 3235679.999 ops/s
Iteration  21: 3181831.669 ops/s
Iteration  22: 3345531.849 ops/s
Iteration  23: 3175656.312 ops/s
Iteration  24: 3115544.590 ops/s
Iteration  25: 3366783.896 ops/s
Iteration  26: 3169438.676 ops/s
Iteration  27: 3372044.996 ops/s
Iteration  28: 3115729.591 ops/s
Iteration  29: 3252689.366 ops/s
Iteration  30: 3202423.575 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowableTest._Benchmark.benchmark_fusedMany":
  3257701.794 ±(99.9%) 56231.641 ops/s [Average]
  (min, avg, max) = (3098998.740, 3257701.794, 3385301.295), stdev = 84164.880
  CI (99.9%): [3201470.153, 3313933.435] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
MaybeFlattenStreamAsFlowableTest._Benchmark.benchmark_fusedMany  thrpt   30  3257701.794 ± 56231.641  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArrayTest._Benchmark.benchmark_backpressure$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArrayTest._Benchmark.benchmark_backpressure

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 401974.510 ops/s
# Warmup Iteration   2: 1957859.683 ops/s
# Warmup Iteration   3: 2294556.436 ops/s
# Warmup Iteration   4: 2920431.203 ops/s
# Warmup Iteration   5: 3026766.555 ops/s
# Warmup Iteration   6: 2847564.895 ops/s
# Warmup Iteration   7: 3064654.601 ops/s
# Warmup Iteration   8: 2949397.772 ops/s
# Warmup Iteration   9: 2987023.827 ops/s
# Warmup Iteration  10: 2947835.659 ops/s
# Warmup Iteration  11: 3037256.694 ops/s
# Warmup Iteration  12: 2911112.485 ops/s
# Warmup Iteration  13: 3042432.206 ops/s
# Warmup Iteration  14: 2824391.713 ops/s
# Warmup Iteration  15: 3075269.206 ops/s
# Warmup Iteration  16: 3007944.998 ops/s
# Warmup Iteration  17: 2881174.972 ops/s
# Warmup Iteration  18: 2975957.778 ops/s
# Warmup Iteration  19: 2929817.516 ops/s
# Warmup Iteration  20: 2988824.984 ops/s
# Warmup Iteration  21: 3077031.167 ops/s
# Warmup Iteration  22: 2913482.067 ops/s
# Warmup Iteration  23: 2915044.248 ops/s
# Warmup Iteration  24: 2927149.968 ops/s
# Warmup Iteration  25: 3160340.365 ops/s
# Warmup Iteration  26: 2833222.307 ops/s
# Warmup Iteration  27: 2963804.508 ops/s
# Warmup Iteration  28: 2987708.251 ops/s
# Warmup Iteration  29: 3039068.353 ops/s
# Warmup Iteration  30: 2956641.310 ops/s
Iteration   1: 2927728.789 ops/s
Iteration   2: 3051811.591 ops/s
Iteration   3: 2796459.905 ops/s
Iteration   4: 2997706.744 ops/s
Iteration   5: 2979496.956 ops/s
Iteration   6: 2831425.129 ops/s
Iteration   7: 3059793.114 ops/s
Iteration   8: 2835346.755 ops/s
Iteration   9: 3021238.797 ops/s
Iteration  10: 2926278.127 ops/s
Iteration  11: 3106181.256 ops/s
Iteration  12: 2941490.289 ops/s
Iteration  13: 2970448.432 ops/s
Iteration  14: 2969505.363 ops/s
Iteration  15: 2893280.789 ops/s
Iteration  16: 2503939.335 ops/s
Iteration  17: 2989817.350 ops/s
Iteration  18: 2770470.295 ops/s
Iteration  19: 2948967.997 ops/s
Iteration  20: 2986571.784 ops/s
Iteration  21: 2975535.874 ops/s
Iteration  22: 2840209.888 ops/s
Iteration  23: 3161325.595 ops/s
Iteration  24: 2983115.993 ops/s
Iteration  25: 2880372.212 ops/s
Iteration  26: 2976355.532 ops/s
Iteration  27: 2939426.939 ops/s
Iteration  28: 3130411.666 ops/s
Iteration  29: 2818605.831 ops/s
Iteration  30: 3066452.981 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArrayTest._Benchmark.benchmark_backpressure":
  2942659.044 ±(99.9%) 85141.663 ops/s [Average]
  (min, avg, max) = (2503939.335, 2942659.044, 3161325.595), stdev = 127436.042
  CI (99.9%): [2857517.381, 3027800.706] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
MaybeConcatArrayTest._Benchmark.benchmark_backpressure  thrpt   30  2942659.044 ± 85141.663  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowableTest._Benchmark.benchmark_fusedManyRejected$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowableTest._Benchmark.benchmark_fusedManyRejected

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 257446.405 ops/s
# Warmup Iteration   2: 1387837.060 ops/s
# Warmup Iteration   3: 2232258.014 ops/s
# Warmup Iteration   4: 3036510.052 ops/s
# Warmup Iteration   5: 3178856.690 ops/s
# Warmup Iteration   6: 3219366.033 ops/s
# Warmup Iteration   7: 2933822.551 ops/s
# Warmup Iteration   8: 3097432.695 ops/s
# Warmup Iteration   9: 2955336.320 ops/s
# Warmup Iteration  10: 3177514.018 ops/s
# Warmup Iteration  11: 2940272.234 ops/s
# Warmup Iteration  12: 3020381.233 ops/s
# Warmup Iteration  13: 3116208.726 ops/s
# Warmup Iteration  14: 2976205.551 ops/s
# Warmup Iteration  15: 3138650.174 ops/s
# Warmup Iteration  16: 3015788.813 ops/s
# Warmup Iteration  17: 3037650.857 ops/s
# Warmup Iteration  18: 3042817.744 ops/s
# Warmup Iteration  19: 3081704.385 ops/s
# Warmup Iteration  20: 3166884.343 ops/s
# Warmup Iteration  21: 2946089.244 ops/s
# Warmup Iteration  22: 3110594.893 ops/s
# Warmup Iteration  23: 2971498.712 ops/s
# Warmup Iteration  24: 3021949.950 ops/s
# Warmup Iteration  25: 3150200.502 ops/s
# Warmup Iteration  26: 2984749.188 ops/s
# Warmup Iteration  27: 3100422.294 ops/s
# Warmup Iteration  28: 3032666.610 ops/s
# Warmup Iteration  29: 3066943.299 ops/s
# Warmup Iteration  30: 3077983.276 ops/s
Iteration   1: 3057140.806 ops/s
Iteration   2: 3100361.986 ops/s
Iteration   3: 3036976.722 ops/s
Iteration   4: 3162216.014 ops/s
Iteration   5: 3133426.494 ops/s
Iteration   6: 3009367.660 ops/s
Iteration   7: 3060714.432 ops/s
Iteration   8: 3032165.469 ops/s
Iteration   9: 3180069.672 ops/s
Iteration  10: 3003935.589 ops/s
Iteration  11: 3060475.800 ops/s
Iteration  12: 3107686.146 ops/s
Iteration  13: 3081082.733 ops/s
Iteration  14: 3158982.377 ops/s
Iteration  15: 2982557.845 ops/s
Iteration  16: 3070158.449 ops/s
Iteration  17: 3081908.650 ops/s
Iteration  18: 3063147.927 ops/s
Iteration  19: 3046533.646 ops/s
Iteration  20: 3199609.621 ops/s
Iteration  21: 2950031.169 ops/s
Iteration  22: 3137467.115 ops/s
Iteration  23: 2936768.980 ops/s
Iteration  24: 3133569.080 ops/s
Iteration  25: 3097112.461 ops/s
Iteration  26: 2993064.687 ops/s
Iteration  27: 3041737.972 ops/s
Iteration  28: 3036601.315 ops/s
Iteration  29: 3168343.060 ops/s
Iteration  30: 3099749.863 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowableTest._Benchmark.benchmark_fusedManyRejected":
  3074098.791 ±(99.9%) 44813.354 ops/s [Average]
  (min, avg, max) = (2936768.980, 3074098.791, 3199609.621), stdev = 67074.524
  CI (99.9%): [3029285.437, 3118912.146] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score       Error  Units
MaybeFlattenStreamAsFlowableTest._Benchmark.benchmark_fusedManyRejected  thrpt   30  3074098.791 ± 44813.354  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherTest._Benchmark.benchmark_justWithOnComplete$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherTest._Benchmark.benchmark_justWithOnComplete

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 427110.225 ops/s
# Warmup Iteration   2: 2172182.680 ops/s
# Warmup Iteration   3: 3233663.906 ops/s
# Warmup Iteration   4: 3854173.670 ops/s
# Warmup Iteration   5: 3801450.931 ops/s
# Warmup Iteration   6: 3887363.648 ops/s
# Warmup Iteration   7: 3958212.748 ops/s
# Warmup Iteration   8: 3678350.980 ops/s
# Warmup Iteration   9: 3823597.489 ops/s
# Warmup Iteration  10: 3896673.040 ops/s
# Warmup Iteration  11: 3688200.478 ops/s
# Warmup Iteration  12: 3831395.935 ops/s
# Warmup Iteration  13: 3746449.750 ops/s
# Warmup Iteration  14: 3887802.023 ops/s
# Warmup Iteration  15: 3778483.559 ops/s
# Warmup Iteration  16: 3933752.355 ops/s
# Warmup Iteration  17: 3709102.296 ops/s
# Warmup Iteration  18: 3667594.328 ops/s
# Warmup Iteration  19: 3789255.046 ops/s
# Warmup Iteration  20: 3773527.238 ops/s
# Warmup Iteration  21: 3878458.993 ops/s
# Warmup Iteration  22: 3605823.899 ops/s
# Warmup Iteration  23: 3951726.048 ops/s
# Warmup Iteration  24: 3792838.182 ops/s
# Warmup Iteration  25: 3751942.203 ops/s
# Warmup Iteration  26: 3861128.314 ops/s
# Warmup Iteration  27: 3658949.690 ops/s
# Warmup Iteration  28: 3858055.216 ops/s
# Warmup Iteration  29: 3789913.318 ops/s
# Warmup Iteration  30: 3698325.486 ops/s
Iteration   1: 3867081.279 ops/s
Iteration   2: 3792010.994 ops/s
Iteration   3: 3819898.987 ops/s
Iteration   4: 3701566.160 ops/s
Iteration   5: 3712085.517 ops/s
Iteration   6: 3852872.460 ops/s
Iteration   7: 3652588.916 ops/s
Iteration   8: 3876238.814 ops/s
Iteration   9: 3737009.880 ops/s
Iteration  10: 3797511.950 ops/s
Iteration  11: 2850687.743 ops/s
Iteration  12: 3854823.460 ops/s
Iteration  13: 3674820.452 ops/s
Iteration  14: 3771158.232 ops/s
Iteration  15: 3778560.947 ops/s
Iteration  16: 3760978.969 ops/s
Iteration  17: 3725076.939 ops/s
Iteration  18: 3776530.806 ops/s
Iteration  19: 3817914.466 ops/s
Iteration  20: 3824187.737 ops/s
Iteration  21: 3664913.321 ops/s
Iteration  22: 3819658.637 ops/s
Iteration  23: 3665577.704 ops/s
Iteration  24: 3850249.090 ops/s
Iteration  25: 3816772.653 ops/s
Iteration  26: 3732487.079 ops/s
Iteration  27: 3884720.012 ops/s
Iteration  28: 3601018.593 ops/s
Iteration  29: 3876755.535 ops/s
Iteration  30: 3793107.515 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherTest._Benchmark.benchmark_justWithOnComplete":
  3744962.162 ±(99.9%) 123589.799 ops/s [Average]
  (min, avg, max) = (2850687.743, 3744962.162, 3884720.012), stdev = 184983.406
  CI (99.9%): [3621372.363, 3868551.960] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score        Error  Units
MaybeDelayOtherTest._Benchmark.benchmark_justWithOnComplete  thrpt   30  3744962.162 ± 123589.799  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowableTest._Benchmark.benchmark_badRequest$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowableTest._Benchmark.benchmark_badRequest

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 72811.562 ops/s
# Warmup Iteration   2: 285514.506 ops/s
# Warmup Iteration   3: 402834.005 ops/s
# Warmup Iteration   4: 397918.610 ops/s
# Warmup Iteration   5: 426175.395 ops/s
# Warmup Iteration   6: 465496.826 ops/s
# Warmup Iteration   7: 447172.297 ops/s
# Warmup Iteration   8: 462039.521 ops/s
# Warmup Iteration   9: 450318.692 ops/s
# Warmup Iteration  10: 450735.563 ops/s
# Warmup Iteration  11: 462028.892 ops/s
# Warmup Iteration  12: 451977.706 ops/s
# Warmup Iteration  13: 456384.032 ops/s
# Warmup Iteration  14: 468435.239 ops/s
# Warmup Iteration  15: 443516.717 ops/s
# Warmup Iteration  16: 467350.131 ops/s
# Warmup Iteration  17: 472883.961 ops/s
# Warmup Iteration  18: 463312.004 ops/s
# Warmup Iteration  19: 479649.154 ops/s
# Warmup Iteration  20: 467598.048 ops/s
# Warmup Iteration  21: 483415.156 ops/s
# Warmup Iteration  22: 472985.951 ops/s
# Warmup Iteration  23: 449861.166 ops/s
# Warmup Iteration  24: 488335.014 ops/s
# Warmup Iteration  25: 479332.899 ops/s
# Warmup Iteration  26: 459348.873 ops/s
# Warmup Iteration  27: 478887.136 ops/s
# Warmup Iteration  28: 464318.471 ops/s
# Warmup Iteration  29: 471770.670 ops/s
# Warmup Iteration  30: 490523.997 ops/s
Iteration   1: 462225.489 ops/s
Iteration   2: 461721.494 ops/s
Iteration   3: 472243.111 ops/s
Iteration   4: 472671.881 ops/s
Iteration   5: 471839.446 ops/s
Iteration   6: 476763.778 ops/s
Iteration   7: 487127.361 ops/s
Iteration   8: 462816.056 ops/s
Iteration   9: 472741.984 ops/s
Iteration  10: 456858.613 ops/s
Iteration  11: 497440.688 ops/s
Iteration  12: 454137.612 ops/s
Iteration  13: 474854.750 ops/s
Iteration  14: 485081.389 ops/s
Iteration  15: 459030.133 ops/s
Iteration  16: 489514.877 ops/s
Iteration  17: 490352.252 ops/s
Iteration  18: 456601.548 ops/s
Iteration  19: 471097.402 ops/s
Iteration  20: 473848.480 ops/s
Iteration  21: 481551.128 ops/s
Iteration  22: 467099.635 ops/s
Iteration  23: 484138.200 ops/s
Iteration  24: 455889.083 ops/s
Iteration  25: 479242.666 ops/s
Iteration  26: 470884.640 ops/s
Iteration  27: 470849.140 ops/s
Iteration  28: 494095.400 ops/s
Iteration  29: 460645.173 ops/s
Iteration  30: 490222.142 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowableTest._Benchmark.benchmark_badRequest":
  473452.852 ±(99.9%) 8256.775 ops/s [Average]
  (min, avg, max) = (454137.612, 473452.852, 497440.688), stdev = 12358.353
  CI (99.9%): [465196.077, 481709.627] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
MaybeFlatMapIterableFlowableTest._Benchmark.benchmark_badRequest  thrpt   30  473452.852 ± 8256.775  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowableTest._Benchmark.benchmark_hasNextThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowableTest._Benchmark.benchmark_hasNextThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 65022.639 ops/s
# Warmup Iteration   2: 450800.866 ops/s
# Warmup Iteration   3: 515745.952 ops/s
# Warmup Iteration   4: 522730.117 ops/s
# Warmup Iteration   5: 508796.777 ops/s
# Warmup Iteration   6: 495520.823 ops/s
# Warmup Iteration   7: 491846.171 ops/s
# Warmup Iteration   8: 524160.897 ops/s
# Warmup Iteration   9: 528178.180 ops/s
# Warmup Iteration  10: 523268.949 ops/s
# Warmup Iteration  11: 521796.305 ops/s
# Warmup Iteration  12: 526825.928 ops/s
# Warmup Iteration  13: 523043.050 ops/s
# Warmup Iteration  14: 531497.024 ops/s
# Warmup Iteration  15: 528676.958 ops/s
# Warmup Iteration  16: 506488.304 ops/s
# Warmup Iteration  17: 545530.896 ops/s
# Warmup Iteration  18: 555454.234 ops/s
# Warmup Iteration  19: 537644.154 ops/s
# Warmup Iteration  20: 562567.147 ops/s
# Warmup Iteration  21: 524908.553 ops/s
# Warmup Iteration  22: 530378.023 ops/s
# Warmup Iteration  23: 545633.748 ops/s
# Warmup Iteration  24: 511681.228 ops/s
# Warmup Iteration  25: 555344.620 ops/s
# Warmup Iteration  26: 541267.575 ops/s
# Warmup Iteration  27: 552698.692 ops/s
# Warmup Iteration  28: 566385.840 ops/s
# Warmup Iteration  29: 561365.559 ops/s
# Warmup Iteration  30: 542925.094 ops/s
Iteration   1: 547428.249 ops/s
Iteration   2: 548864.848 ops/s
Iteration   3: 547678.602 ops/s
Iteration   4: 546976.884 ops/s
Iteration   5: 568809.195 ops/s
Iteration   6: 441194.537 ops/s
Iteration   7: 561947.914 ops/s
Iteration   8: 561453.441 ops/s
Iteration   9: 547755.340 ops/s
Iteration  10: 554595.679 ops/s
Iteration  11: 539427.324 ops/s
Iteration  12: 557777.834 ops/s
Iteration  13: 554347.759 ops/s
Iteration  14: 544781.951 ops/s
Iteration  15: 550649.756 ops/s
Iteration  16: 545037.495 ops/s
Iteration  17: 552068.058 ops/s
Iteration  18: 549895.416 ops/s
Iteration  19: 553518.395 ops/s
Iteration  20: 556985.611 ops/s
Iteration  21: 538717.152 ops/s
Iteration  22: 554211.790 ops/s
Iteration  23: 543548.652 ops/s
Iteration  24: 560746.124 ops/s
Iteration  25: 549238.260 ops/s
Iteration  26: 542338.284 ops/s
Iteration  27: 567036.129 ops/s
Iteration  28: 541399.480 ops/s
Iteration  29: 546757.482 ops/s
Iteration  30: 564460.847 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowableTest._Benchmark.benchmark_hasNextThrows":
  547988.283 ±(99.9%) 14493.745 ops/s [Average]
  (min, avg, max) = (441194.537, 547988.283, 568809.195), stdev = 21693.556
  CI (99.9%): [533494.538, 562482.027] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score       Error  Units
MaybeFlatMapIterableFlowableTest._Benchmark.benchmark_hasNextThrows  thrpt   30  547988.283 ± 14493.745  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArrayTest._Benchmark.benchmark_backpressureDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArrayTest._Benchmark.benchmark_backpressureDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 384844.384 ops/s
# Warmup Iteration   2: 1673813.040 ops/s
# Warmup Iteration   3: 2159050.909 ops/s
# Warmup Iteration   4: 2813043.408 ops/s
# Warmup Iteration   5: 2928238.766 ops/s
# Warmup Iteration   6: 2765422.687 ops/s
# Warmup Iteration   7: 2997245.499 ops/s
# Warmup Iteration   8: 2837979.575 ops/s
# Warmup Iteration   9: 2963283.703 ops/s
# Warmup Iteration  10: 2765587.033 ops/s
# Warmup Iteration  11: 2883287.907 ops/s
# Warmup Iteration  12: 2884218.314 ops/s
# Warmup Iteration  13: 2808546.644 ops/s
# Warmup Iteration  14: 2867675.587 ops/s
# Warmup Iteration  15: 2861302.831 ops/s
# Warmup Iteration  16: 2775538.019 ops/s
# Warmup Iteration  17: 2931806.686 ops/s
# Warmup Iteration  18: 2826455.904 ops/s
# Warmup Iteration  19: 2870508.654 ops/s
# Warmup Iteration  20: 2917209.362 ops/s
# Warmup Iteration  21: 2810006.334 ops/s
# Warmup Iteration  22: 2899557.598 ops/s
# Warmup Iteration  23: 2855861.562 ops/s
# Warmup Iteration  24: 2784413.935 ops/s
# Warmup Iteration  25: 2875523.855 ops/s
# Warmup Iteration  26: 2771461.615 ops/s
# Warmup Iteration  27: 2820449.797 ops/s
# Warmup Iteration  28: 2818927.667 ops/s
# Warmup Iteration  29: 2884552.348 ops/s
# Warmup Iteration  30: 2764044.038 ops/s
Iteration   1: 2860464.792 ops/s
Iteration   2: 2940946.928 ops/s
Iteration   3: 2799218.423 ops/s
Iteration   4: 2814267.854 ops/s
Iteration   5: 2874136.994 ops/s
Iteration   6: 2837497.573 ops/s
Iteration   7: 2899055.496 ops/s
Iteration   8: 2813279.210 ops/s
Iteration   9: 2933536.454 ops/s
Iteration  10: 2985389.713 ops/s
Iteration  11: 2728095.272 ops/s
Iteration  12: 3010359.491 ops/s
Iteration  13: 2709502.577 ops/s
Iteration  14: 2909185.824 ops/s
Iteration  15: 2818123.387 ops/s
Iteration  16: 2860860.556 ops/s
Iteration  17: 2864478.433 ops/s
Iteration  18: 2732859.342 ops/s
Iteration  19: 2808865.777 ops/s
Iteration  20: 2804902.694 ops/s
Iteration  21: 2847942.525 ops/s
Iteration  22: 2752829.857 ops/s
Iteration  23: 2786852.343 ops/s
Iteration  24: 3008452.304 ops/s
Iteration  25: 2784254.630 ops/s
Iteration  26: 2967281.301 ops/s
Iteration  27: 2954892.016 ops/s
Iteration  28: 2771115.434 ops/s
Iteration  29: 2854335.143 ops/s
Iteration  30: 2763464.939 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArrayTest._Benchmark.benchmark_backpressureDelayError":
  2849881.576 ±(99.9%) 56309.713 ops/s [Average]
  (min, avg, max) = (2709502.577, 2849881.576, 3010359.491), stdev = 84281.734
  CI (99.9%): [2793571.863, 2906191.289] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
MaybeConcatArrayTest._Benchmark.benchmark_backpressureDelayError  thrpt   30  2849881.576 ± 56309.713  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowableTest._Benchmark.benchmark_successManyTake$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowableTest._Benchmark.benchmark_successManyTake

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 248762.039 ops/s
# Warmup Iteration   2: 1482655.516 ops/s
# Warmup Iteration   3: 1987103.494 ops/s
# Warmup Iteration   4: 2601125.533 ops/s
# Warmup Iteration   5: 2582102.479 ops/s
# Warmup Iteration   6: 2730307.424 ops/s
# Warmup Iteration   7: 2576913.449 ops/s
# Warmup Iteration   8: 2590566.188 ops/s
# Warmup Iteration   9: 2734222.440 ops/s
# Warmup Iteration  10: 2607589.961 ops/s
# Warmup Iteration  11: 2606219.012 ops/s
# Warmup Iteration  12: 2707462.752 ops/s
# Warmup Iteration  13: 2605104.310 ops/s
# Warmup Iteration  14: 2713145.857 ops/s
# Warmup Iteration  15: 2539828.353 ops/s
# Warmup Iteration  16: 2657735.569 ops/s
# Warmup Iteration  17: 2593194.637 ops/s
# Warmup Iteration  18: 2532642.066 ops/s
# Warmup Iteration  19: 2637233.153 ops/s
# Warmup Iteration  20: 2562746.123 ops/s
# Warmup Iteration  21: 2703974.842 ops/s
# Warmup Iteration  22: 2704290.213 ops/s
# Warmup Iteration  23: 2564275.917 ops/s
# Warmup Iteration  24: 2638033.607 ops/s
# Warmup Iteration  25: 2629884.497 ops/s
# Warmup Iteration  26: 2614802.208 ops/s
# Warmup Iteration  27: 2613653.023 ops/s
# Warmup Iteration  28: 2552411.101 ops/s
# Warmup Iteration  29: 2729789.251 ops/s
# Warmup Iteration  30: 2254995.244 ops/s
Iteration   1: 2368122.147 ops/s
Iteration   2: 2679544.056 ops/s
Iteration   3: 2586491.981 ops/s
Iteration   4: 2728858.609 ops/s
Iteration   5: 2646246.273 ops/s
Iteration   6: 2621753.422 ops/s
Iteration   7: 2674891.366 ops/s
Iteration   8: 2660376.885 ops/s
Iteration   9: 2643365.385 ops/s
Iteration  10: 2685038.540 ops/s
Iteration  11: 2581085.724 ops/s
Iteration  12: 2669497.352 ops/s
Iteration  13: 2720353.044 ops/s
Iteration  14: 2519299.769 ops/s
Iteration  15: 2517772.884 ops/s
Iteration  16: 2652181.981 ops/s
Iteration  17: 2613273.595 ops/s
Iteration  18: 2704878.352 ops/s
Iteration  19: 2566045.665 ops/s
Iteration  20: 2577284.154 ops/s
Iteration  21: 2776607.811 ops/s
Iteration  22: 2586692.575 ops/s
Iteration  23: 2678417.364 ops/s
Iteration  24: 2648351.996 ops/s
Iteration  25: 2654877.004 ops/s
Iteration  26: 2666835.256 ops/s
Iteration  27: 2618007.971 ops/s
Iteration  28: 2606973.601 ops/s
Iteration  29: 2718960.752 ops/s
Iteration  30: 2551690.374 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowableTest._Benchmark.benchmark_successManyTake":
  2630792.530 ±(99.9%) 52945.518 ops/s [Average]
  (min, avg, max) = (2368122.147, 2630792.530, 2776607.811), stdev = 79246.366
  CI (99.9%): [2577847.011, 2683738.048] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
MaybeFlattenStreamAsFlowableTest._Benchmark.benchmark_successManyTake  thrpt   30  2630792.530 ± 52945.518  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterableTest._Benchmark.benchmark_take$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterableTest._Benchmark.benchmark_take

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 398935.711 ops/s
# Warmup Iteration   2: 1820656.123 ops/s
# Warmup Iteration   3: 3094841.117 ops/s
# Warmup Iteration   4: 3028687.057 ops/s
# Warmup Iteration   5: 3016510.590 ops/s
# Warmup Iteration   6: 2863794.129 ops/s
# Warmup Iteration   7: 2834526.630 ops/s
# Warmup Iteration   8: 2957379.072 ops/s
# Warmup Iteration   9: 3042209.728 ops/s
# Warmup Iteration  10: 3140912.573 ops/s
# Warmup Iteration  11: 3025302.388 ops/s
# Warmup Iteration  12: 3162724.828 ops/s
# Warmup Iteration  13: 3013897.914 ops/s
# Warmup Iteration  14: 3060022.093 ops/s
# Warmup Iteration  15: 3189343.659 ops/s
# Warmup Iteration  16: 3072024.984 ops/s
# Warmup Iteration  17: 3063819.963 ops/s
# Warmup Iteration  18: 3159598.313 ops/s
# Warmup Iteration  19: 3046024.635 ops/s
# Warmup Iteration  20: 3105199.590 ops/s
# Warmup Iteration  21: 3176833.170 ops/s
# Warmup Iteration  22: 2956677.346 ops/s
# Warmup Iteration  23: 3228369.770 ops/s
# Warmup Iteration  24: 3061406.841 ops/s
# Warmup Iteration  25: 3030545.101 ops/s
# Warmup Iteration  26: 3147012.107 ops/s
# Warmup Iteration  27: 3072264.707 ops/s
# Warmup Iteration  28: 3025984.854 ops/s
# Warmup Iteration  29: 3209785.739 ops/s
# Warmup Iteration  30: 3052259.890 ops/s
Iteration   1: 3115427.539 ops/s
Iteration   2: 3134477.184 ops/s
Iteration   3: 2975557.582 ops/s
Iteration   4: 3141495.342 ops/s
Iteration   5: 2983928.833 ops/s
Iteration   6: 3104435.086 ops/s
Iteration   7: 3049393.078 ops/s
Iteration   8: 3023425.301 ops/s
Iteration   9: 3233749.752 ops/s
Iteration  10: 3074815.218 ops/s
Iteration  11: 3100328.714 ops/s
Iteration  12: 2988228.663 ops/s
Iteration  13: 3107381.526 ops/s
Iteration  14: 3063220.217 ops/s
Iteration  15: 2991668.281 ops/s
Iteration  16: 3205074.154 ops/s
Iteration  17: 3073565.830 ops/s
Iteration  18: 3168550.244 ops/s
Iteration  19: 3048261.828 ops/s
Iteration  20: 3132720.367 ops/s
Iteration  21: 3066579.526 ops/s
Iteration  22: 3087789.530 ops/s
Iteration  23: 3168095.251 ops/s
Iteration  24: 2947398.153 ops/s
Iteration  25: 3099139.711 ops/s
Iteration  26: 3023617.926 ops/s
Iteration  27: 3104057.501 ops/s
Iteration  28: 3134200.291 ops/s
Iteration  29: 3048775.827 ops/s
Iteration  30: 3266908.659 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterableTest._Benchmark.benchmark_take":
  3088742.237 ±(99.9%) 50819.643 ops/s [Average]
  (min, avg, max) = (2947398.153, 3088742.237, 3266908.659), stdev = 76064.455
  CI (99.9%): [3037922.594, 3139561.880] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score       Error  Units
MaybeConcatIterableTest._Benchmark.benchmark_take  thrpt   30  3088742.237 ± 50819.643  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArrayTest._Benchmark.benchmark_cancel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArrayTest._Benchmark.benchmark_cancel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 498265.064 ops/s
# Warmup Iteration   2: 2396990.496 ops/s
# Warmup Iteration   3: 2631279.866 ops/s
# Warmup Iteration   4: 3215646.280 ops/s
# Warmup Iteration   5: 3254856.403 ops/s
# Warmup Iteration   6: 3132816.692 ops/s
# Warmup Iteration   7: 3244569.905 ops/s
# Warmup Iteration   8: 3119597.152 ops/s
# Warmup Iteration   9: 3166095.057 ops/s
# Warmup Iteration  10: 3251741.954 ops/s
# Warmup Iteration  11: 2996751.295 ops/s
# Warmup Iteration  12: 3220655.351 ops/s
# Warmup Iteration  13: 3250311.681 ops/s
# Warmup Iteration  14: 3062347.383 ops/s
# Warmup Iteration  15: 3238732.301 ops/s
# Warmup Iteration  16: 3131845.026 ops/s
# Warmup Iteration  17: 3228307.600 ops/s
# Warmup Iteration  18: 3164849.238 ops/s
# Warmup Iteration  19: 3129478.535 ops/s
# Warmup Iteration  20: 3362520.313 ops/s
# Warmup Iteration  21: 3095173.224 ops/s
# Warmup Iteration  22: 3202713.876 ops/s
# Warmup Iteration  23: 3280052.067 ops/s
# Warmup Iteration  24: 3158796.241 ops/s
# Warmup Iteration  25: 2383099.329 ops/s
# Warmup Iteration  26: 3279402.373 ops/s
# Warmup Iteration  27: 3162073.564 ops/s
# Warmup Iteration  28: 3118037.033 ops/s
# Warmup Iteration  29: 3267763.682 ops/s
# Warmup Iteration  30: 3214717.677 ops/s
Iteration   1: 3083892.595 ops/s
Iteration   2: 3375107.611 ops/s
Iteration   3: 3151511.972 ops/s
Iteration   4: 3200562.879 ops/s
Iteration   5: 3182353.577 ops/s
Iteration   6: 3298910.783 ops/s
Iteration   7: 3230658.303 ops/s
Iteration   8: 3147086.808 ops/s
Iteration   9: 3232700.725 ops/s
Iteration  10: 3091754.333 ops/s
Iteration  11: 3288294.384 ops/s
Iteration  12: 3238113.652 ops/s
Iteration  13: 3093911.823 ops/s
Iteration  14: 3212723.895 ops/s
Iteration  15: 3118635.627 ops/s
Iteration  16: 3315168.636 ops/s
Iteration  17: 3114573.593 ops/s
Iteration  18: 3241463.972 ops/s
Iteration  19: 3198413.699 ops/s
Iteration  20: 3136948.096 ops/s
Iteration  21: 3244832.898 ops/s
Iteration  22: 3044038.380 ops/s
Iteration  23: 3265459.545 ops/s
Iteration  24: 3100333.614 ops/s
Iteration  25: 3090842.809 ops/s
Iteration  26: 3318052.497 ops/s
Iteration  27: 3077163.774 ops/s
Iteration  28: 3209909.953 ops/s
Iteration  29: 3255737.804 ops/s
Iteration  30: 3162995.284 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArrayTest._Benchmark.benchmark_cancel":
  3190738.451 ±(99.9%) 56874.749 ops/s [Average]
  (min, avg, max) = (3044038.380, 3190738.451, 3375107.611), stdev = 85127.453
  CI (99.9%): [3133863.702, 3247613.199] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score       Error  Units
MaybeConcatArrayTest._Benchmark.benchmark_cancel  thrpt   30  3190738.451 ± 56874.749  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowableTest._Benchmark.benchmark_take2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowableTest._Benchmark.benchmark_take2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 379813.368 ops/s
# Warmup Iteration   2: 1646977.320 ops/s
# Warmup Iteration   3: 2851344.101 ops/s
# Warmup Iteration   4: 3164825.175 ops/s
# Warmup Iteration   5: 3359154.095 ops/s
# Warmup Iteration   6: 3331222.128 ops/s
# Warmup Iteration   7: 3227715.474 ops/s
# Warmup Iteration   8: 3412833.222 ops/s
# Warmup Iteration   9: 3192137.878 ops/s
# Warmup Iteration  10: 3393029.700 ops/s
# Warmup Iteration  11: 3274958.739 ops/s
# Warmup Iteration  12: 3189516.955 ops/s
# Warmup Iteration  13: 3458987.692 ops/s
# Warmup Iteration  14: 3160827.708 ops/s
# Warmup Iteration  15: 3262287.894 ops/s
# Warmup Iteration  16: 3189497.223 ops/s
# Warmup Iteration  17: 3336828.703 ops/s
# Warmup Iteration  18: 3360442.815 ops/s
# Warmup Iteration  19: 3295876.014 ops/s
# Warmup Iteration  20: 3413434.368 ops/s
# Warmup Iteration  21: 3281122.012 ops/s
# Warmup Iteration  22: 3398814.423 ops/s
# Warmup Iteration  23: 3372108.855 ops/s
# Warmup Iteration  24: 3380736.431 ops/s
# Warmup Iteration  25: 3312733.870 ops/s
# Warmup Iteration  26: 3421807.091 ops/s
# Warmup Iteration  27: 3240898.629 ops/s
# Warmup Iteration  28: 3331139.112 ops/s
# Warmup Iteration  29: 3464579.731 ops/s
# Warmup Iteration  30: 3323307.128 ops/s
Iteration   1: 3310856.667 ops/s
Iteration   2: 3384405.125 ops/s
Iteration   3: 3356357.360 ops/s
Iteration   4: 3390105.430 ops/s
Iteration   5: 3401248.905 ops/s
Iteration   6: 3290467.492 ops/s
Iteration   7: 3456136.934 ops/s
Iteration   8: 3313596.318 ops/s
Iteration   9: 3475319.235 ops/s
Iteration  10: 3221317.045 ops/s
Iteration  11: 3432087.081 ops/s
Iteration  12: 3275591.728 ops/s
Iteration  13: 3378197.987 ops/s
Iteration  14: 3368636.912 ops/s
Iteration  15: 3241587.703 ops/s
Iteration  16: 3360514.675 ops/s
Iteration  17: 3491344.763 ops/s
Iteration  18: 3271789.535 ops/s
Iteration  19: 3472904.317 ops/s
Iteration  20: 3296936.277 ops/s
Iteration  21: 3480032.401 ops/s
Iteration  22: 3270098.204 ops/s
Iteration  23: 3406477.279 ops/s
Iteration  24: 3305204.727 ops/s
Iteration  25: 3340393.583 ops/s
Iteration  26: 3329464.604 ops/s
Iteration  27: 3325950.443 ops/s
Iteration  28: 3429375.875 ops/s
Iteration  29: 3293823.543 ops/s
Iteration  30: 3404004.042 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowableTest._Benchmark.benchmark_take2":
  3359140.873 ±(99.9%) 50263.336 ops/s [Average]
  (min, avg, max) = (3221317.045, 3359140.873, 3491344.763), stdev = 75231.801
  CI (99.9%): [3308877.537, 3409404.209] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
MaybeFlatMapIterableFlowableTest._Benchmark.benchmark_take2  thrpt   30  3359140.873 ± 50263.336  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterableTest._Benchmark.benchmark_error$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterableTest._Benchmark.benchmark_error

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 101209.216 ops/s
# Warmup Iteration   2: 300798.436 ops/s
# Warmup Iteration   3: 605105.561 ops/s
# Warmup Iteration   4: 612036.710 ops/s
# Warmup Iteration   5: 633036.616 ops/s
# Warmup Iteration   6: 629764.706 ops/s
# Warmup Iteration   7: 622468.898 ops/s
# Warmup Iteration   8: 631954.942 ops/s
# Warmup Iteration   9: 613399.982 ops/s
# Warmup Iteration  10: 626215.039 ops/s
# Warmup Iteration  11: 617388.710 ops/s
# Warmup Iteration  12: 616908.293 ops/s
# Warmup Iteration  13: 637647.559 ops/s
# Warmup Iteration  14: 607890.299 ops/s
# Warmup Iteration  15: 650677.460 ops/s
# Warmup Iteration  16: 647635.164 ops/s
# Warmup Iteration  17: 631700.407 ops/s
# Warmup Iteration  18: 639361.143 ops/s
# Warmup Iteration  19: 680692.266 ops/s
# Warmup Iteration  20: 471424.133 ops/s
# Warmup Iteration  21: 657271.606 ops/s
# Warmup Iteration  22: 677411.839 ops/s
# Warmup Iteration  23: 661011.664 ops/s
# Warmup Iteration  24: 663015.317 ops/s
# Warmup Iteration  25: 670565.432 ops/s
# Warmup Iteration  26: 644913.983 ops/s
# Warmup Iteration  27: 684094.843 ops/s
# Warmup Iteration  28: 652176.210 ops/s
# Warmup Iteration  29: 659743.500 ops/s
# Warmup Iteration  30: 631313.433 ops/s
Iteration   1: 670553.665 ops/s
Iteration   2: 652416.018 ops/s
Iteration   3: 659658.859 ops/s
Iteration   4: 653034.091 ops/s
Iteration   5: 657411.165 ops/s
Iteration   6: 676937.562 ops/s
Iteration   7: 666423.988 ops/s
Iteration   8: 673440.062 ops/s
Iteration   9: 653891.928 ops/s
Iteration  10: 655210.102 ops/s
Iteration  11: 665188.816 ops/s
Iteration  12: 650498.065 ops/s
Iteration  13: 660954.846 ops/s
Iteration  14: 657697.834 ops/s
Iteration  15: 666685.789 ops/s
Iteration  16: 647679.422 ops/s
Iteration  17: 684871.317 ops/s
Iteration  18: 644315.951 ops/s
Iteration  19: 653356.391 ops/s
Iteration  20: 674754.473 ops/s
Iteration  21: 650209.190 ops/s
Iteration  22: 654808.882 ops/s
Iteration  23: 656933.061 ops/s
Iteration  24: 668943.567 ops/s
Iteration  25: 660983.025 ops/s
Iteration  26: 675443.248 ops/s
Iteration  27: 629620.546 ops/s
Iteration  28: 670677.001 ops/s
Iteration  29: 667480.206 ops/s
Iteration  30: 667773.623 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterableTest._Benchmark.benchmark_error":
  660928.423 ±(99.9%) 7666.694 ops/s [Average]
  (min, avg, max) = (629620.546, 660928.423, 684871.317), stdev = 11475.148
  CI (99.9%): [653261.729, 668595.118] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score      Error  Units
MaybeConcatIterableTest._Benchmark.benchmark_error  thrpt   30  660928.423 ± 7666.694  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutWithSelectorTest._Benchmark.benchmark_empty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutWithSelectorTest._Benchmark.benchmark_empty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1388156.511 ops/s
# Warmup Iteration   2: 3545312.846 ops/s
# Warmup Iteration   3: 4638573.639 ops/s
# Warmup Iteration   4: 4743991.373 ops/s
# Warmup Iteration   5: 4797680.627 ops/s
# Warmup Iteration   6: 5067733.984 ops/s
# Warmup Iteration   7: 4716631.211 ops/s
# Warmup Iteration   8: 4825879.784 ops/s
# Warmup Iteration   9: 4944847.164 ops/s
# Warmup Iteration  10: 4711673.785 ops/s
# Warmup Iteration  11: 4897769.295 ops/s
# Warmup Iteration  12: 4850481.418 ops/s
# Warmup Iteration  13: 4838398.089 ops/s
# Warmup Iteration  14: 4922816.058 ops/s
# Warmup Iteration  15: 4913803.998 ops/s
# Warmup Iteration  16: 4965210.664 ops/s
# Warmup Iteration  17: 4748606.399 ops/s
# Warmup Iteration  18: 4935058.232 ops/s
# Warmup Iteration  19: 4922731.698 ops/s
# Warmup Iteration  20: 4899155.850 ops/s
# Warmup Iteration  21: 4833093.992 ops/s
# Warmup Iteration  22: 4936373.441 ops/s
# Warmup Iteration  23: 5177022.316 ops/s
# Warmup Iteration  24: 4782290.320 ops/s
# Warmup Iteration  25: 4853152.816 ops/s
# Warmup Iteration  26: 5140852.182 ops/s
# Warmup Iteration  27: 4642565.510 ops/s
# Warmup Iteration  28: 4856335.366 ops/s
# Warmup Iteration  29: 4816865.266 ops/s
# Warmup Iteration  30: 5054625.548 ops/s
Iteration   1: 5077397.437 ops/s
Iteration   2: 4673537.034 ops/s
Iteration   3: 4826674.405 ops/s
Iteration   4: 5181164.182 ops/s
Iteration   5: 4730969.065 ops/s
Iteration   6: 5032732.048 ops/s
Iteration   7: 4919850.675 ops/s
Iteration   8: 5025431.847 ops/s
Iteration   9: 4897669.096 ops/s
Iteration  10: 4965899.990 ops/s
Iteration  11: 4786464.474 ops/s
Iteration  12: 5014593.855 ops/s
Iteration  13: 4951084.274 ops/s
Iteration  14: 4779998.549 ops/s
Iteration  15: 4947087.600 ops/s
Iteration  16: 5049590.274 ops/s
Iteration  17: 4706667.443 ops/s
Iteration  18: 5125966.791 ops/s
Iteration  19: 4826692.675 ops/s
Iteration  20: 5103122.180 ops/s
Iteration  21: 4877261.876 ops/s
Iteration  22: 4960668.440 ops/s
Iteration  23: 4907693.482 ops/s
Iteration  24: 4814106.616 ops/s
Iteration  25: 4879427.964 ops/s
Iteration  26: 4891379.463 ops/s
Iteration  27: 5041771.043 ops/s
Iteration  28: 4701090.488 ops/s
Iteration  29: 4887155.780 ops/s
Iteration  30: 4845246.488 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutWithSelectorTest._Benchmark.benchmark_empty":
  4914279.851 ±(99.9%) 88199.027 ops/s [Average]
  (min, avg, max) = (4673537.034, 4914279.851, 5181164.182), stdev = 132012.161
  CI (99.9%): [4826080.825, 5002478.878] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
FlowableTimeoutWithSelectorTest._Benchmark.benchmark_empty  thrpt   30  4914279.851 ± 88199.027  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArrayTest._Benchmark.benchmark_cancelDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArrayTest._Benchmark.benchmark_cancelDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 483861.717 ops/s
# Warmup Iteration   2: 2051588.947 ops/s
# Warmup Iteration   3: 3024179.337 ops/s
# Warmup Iteration   4: 2939238.350 ops/s
# Warmup Iteration   5: 2988670.010 ops/s
# Warmup Iteration   6: 2923643.705 ops/s
# Warmup Iteration   7: 3017337.798 ops/s
# Warmup Iteration   8: 2936623.814 ops/s
# Warmup Iteration   9: 2589632.824 ops/s
# Warmup Iteration  10: 2896557.958 ops/s
# Warmup Iteration  11: 2937366.160 ops/s
# Warmup Iteration  12: 2989002.227 ops/s
# Warmup Iteration  13: 3039767.611 ops/s
# Warmup Iteration  14: 3050808.657 ops/s
# Warmup Iteration  15: 2148870.318 ops/s
# Warmup Iteration  16: 3070138.602 ops/s
# Warmup Iteration  17: 3017153.709 ops/s
# Warmup Iteration  18: 2979643.680 ops/s
# Warmup Iteration  19: 3009021.612 ops/s
# Warmup Iteration  20: 2992190.054 ops/s
# Warmup Iteration  21: 3041236.597 ops/s
# Warmup Iteration  22: 2990676.845 ops/s
# Warmup Iteration  23: 2995145.585 ops/s
# Warmup Iteration  24: 3053990.576 ops/s
# Warmup Iteration  25: 2964101.728 ops/s
# Warmup Iteration  26: 3034883.864 ops/s
# Warmup Iteration  27: 3044895.039 ops/s
# Warmup Iteration  28: 2976702.991 ops/s
# Warmup Iteration  29: 3011790.517 ops/s
# Warmup Iteration  30: 2949032.811 ops/s
Iteration   1: 3016647.910 ops/s
Iteration   2: 2899762.064 ops/s
Iteration   3: 2959725.952 ops/s
Iteration   4: 3031518.773 ops/s
Iteration   5: 2919881.346 ops/s
Iteration   6: 3021708.142 ops/s
Iteration   7: 2995248.754 ops/s
Iteration   8: 3022664.658 ops/s
Iteration   9: 3006465.909 ops/s
Iteration  10: 2984397.256 ops/s
Iteration  11: 3125926.597 ops/s
Iteration  12: 3100542.260 ops/s
Iteration  13: 2910238.600 ops/s
Iteration  14: 3035080.102 ops/s
Iteration  15: 2945530.542 ops/s
Iteration  16: 2873048.267 ops/s
Iteration  17: 3092943.570 ops/s
Iteration  18: 2932801.505 ops/s
Iteration  19: 3145073.498 ops/s
Iteration  20: 2878070.670 ops/s
Iteration  21: 2986985.166 ops/s
Iteration  22: 3012786.715 ops/s
Iteration  23: 3013118.779 ops/s
Iteration  24: 3131133.503 ops/s
Iteration  25: 2943590.943 ops/s
Iteration  26: 3133398.605 ops/s
Iteration  27: 3130803.884 ops/s
Iteration  28: 2914791.236 ops/s
Iteration  29: 3092277.225 ops/s
Iteration  30: 2876948.123 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArrayTest._Benchmark.benchmark_cancelDelayError":
  3004437.019 ±(99.9%) 56877.133 ops/s [Average]
  (min, avg, max) = (2873048.267, 3004437.019, 3145073.498), stdev = 85131.021
  CI (99.9%): [2947559.886, 3061314.151] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
MaybeConcatArrayTest._Benchmark.benchmark_cancelDelayError  thrpt   30  3004437.019 ± 56877.133  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowableTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowableTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1253375.484 ops/s
# Warmup Iteration   2: 3384705.396 ops/s
# Warmup Iteration   3: 4026871.375 ops/s
# Warmup Iteration   4: 4420508.059 ops/s
# Warmup Iteration   5: 4491846.527 ops/s
# Warmup Iteration   6: 4390479.013 ops/s
# Warmup Iteration   7: 4506122.887 ops/s
# Warmup Iteration   8: 4353812.488 ops/s
# Warmup Iteration   9: 4467378.202 ops/s
# Warmup Iteration  10: 4572032.089 ops/s
# Warmup Iteration  11: 4565333.968 ops/s
# Warmup Iteration  12: 4431839.166 ops/s
# Warmup Iteration  13: 4633261.203 ops/s
# Warmup Iteration  14: 4305805.624 ops/s
# Warmup Iteration  15: 4582854.830 ops/s
# Warmup Iteration  16: 4372621.008 ops/s
# Warmup Iteration  17: 4433264.880 ops/s
# Warmup Iteration  18: 4340481.172 ops/s
# Warmup Iteration  19: 4439417.105 ops/s
# Warmup Iteration  20: 4493336.608 ops/s
# Warmup Iteration  21: 4333596.301 ops/s
# Warmup Iteration  22: 4556738.255 ops/s
# Warmup Iteration  23: 4343490.299 ops/s
# Warmup Iteration  24: 4409249.798 ops/s
# Warmup Iteration  25: 4533591.385 ops/s
# Warmup Iteration  26: 4185541.236 ops/s
# Warmup Iteration  27: 4436063.720 ops/s
# Warmup Iteration  28: 4228222.720 ops/s
# Warmup Iteration  29: 4455758.431 ops/s
# Warmup Iteration  30: 4373164.743 ops/s
Iteration   1: 4556710.025 ops/s
Iteration   2: 4393973.822 ops/s
Iteration   3: 4371367.479 ops/s
Iteration   4: 4567556.800 ops/s
Iteration   5: 4307136.958 ops/s
Iteration   6: 4381922.671 ops/s
Iteration   7: 4507469.213 ops/s
Iteration   8: 4219357.779 ops/s
Iteration   9: 4498068.739 ops/s
Iteration  10: 4296954.354 ops/s
Iteration  11: 4534938.488 ops/s
Iteration  12: 4419827.418 ops/s
Iteration  13: 4400311.568 ops/s
Iteration  14: 4500281.276 ops/s
Iteration  15: 4306037.999 ops/s
Iteration  16: 4314772.040 ops/s
Iteration  17: 4514357.978 ops/s
Iteration  18: 4374246.802 ops/s
Iteration  19: 4410428.421 ops/s
Iteration  20: 4452944.519 ops/s
Iteration  21: 4349501.738 ops/s
Iteration  22: 4522933.080 ops/s
Iteration  23: 4391848.840 ops/s
Iteration  24: 4542867.863 ops/s
Iteration  25: 4265854.053 ops/s
Iteration  26: 4444705.839 ops/s
Iteration  27: 4432762.572 ops/s
Iteration  28: 4482245.317 ops/s
Iteration  29: 4429516.279 ops/s
Iteration  30: 4413173.607 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowableTest._Benchmark.benchmark_dispose":
  4420135.785 ±(99.9%) 61172.362 ops/s [Average]
  (min, avg, max) = (4219357.779, 4420135.785, 4567556.800), stdev = 91559.919
  CI (99.9%): [4358963.422, 4481308.147] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
MaybeFlattenStreamAsFlowableTest._Benchmark.benchmark_dispose  thrpt   30  4420135.785 ± 61172.362  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapPublisherTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapPublisherTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 93633.132 ops/s
# Warmup Iteration   2: 436404.082 ops/s
# Warmup Iteration   3: 463642.164 ops/s
# Warmup Iteration   4: 519171.251 ops/s
# Warmup Iteration   5: 505977.286 ops/s
# Warmup Iteration   6: 504967.587 ops/s
# Warmup Iteration   7: 514960.993 ops/s
# Warmup Iteration   8: 517583.447 ops/s
# Warmup Iteration   9: 515631.237 ops/s
# Warmup Iteration  10: 427940.077 ops/s
# Warmup Iteration  11: 518824.647 ops/s
# Warmup Iteration  12: 509147.994 ops/s
# Warmup Iteration  13: 523239.607 ops/s
# Warmup Iteration  14: 489742.913 ops/s
# Warmup Iteration  15: 524076.042 ops/s
# Warmup Iteration  16: 518973.187 ops/s
# Warmup Iteration  17: 538825.953 ops/s
# Warmup Iteration  18: 499741.672 ops/s
# Warmup Iteration  19: 524838.219 ops/s
# Warmup Iteration  20: 546601.559 ops/s
# Warmup Iteration  21: 523904.117 ops/s
# Warmup Iteration  22: 544210.870 ops/s
# Warmup Iteration  23: 524240.543 ops/s
# Warmup Iteration  24: 523804.515 ops/s
# Warmup Iteration  25: 555736.294 ops/s
# Warmup Iteration  26: 514726.873 ops/s
# Warmup Iteration  27: 532852.515 ops/s
# Warmup Iteration  28: 528895.150 ops/s
# Warmup Iteration  29: 558286.252 ops/s
# Warmup Iteration  30: 514790.102 ops/s
Iteration   1: 527787.171 ops/s
Iteration   2: 539948.488 ops/s
Iteration   3: 516479.780 ops/s
Iteration   4: 545957.232 ops/s
Iteration   5: 537041.946 ops/s
Iteration   6: 535418.099 ops/s
Iteration   7: 530157.523 ops/s
Iteration   8: 545497.080 ops/s
Iteration   9: 541460.917 ops/s
Iteration  10: 531799.414 ops/s
Iteration  11: 541613.793 ops/s
Iteration  12: 553651.991 ops/s
Iteration  13: 514579.593 ops/s
Iteration  14: 535537.194 ops/s
Iteration  15: 529767.309 ops/s
Iteration  16: 527626.667 ops/s
Iteration  17: 545358.874 ops/s
Iteration  18: 531640.114 ops/s
Iteration  19: 520414.442 ops/s
Iteration  20: 535899.599 ops/s
Iteration  21: 530463.207 ops/s
Iteration  22: 553441.247 ops/s
Iteration  23: 526472.754 ops/s
Iteration  24: 531578.929 ops/s
Iteration  25: 532711.572 ops/s
Iteration  26: 528121.951 ops/s
Iteration  27: 544875.782 ops/s
Iteration  28: 523981.887 ops/s
Iteration  29: 532237.850 ops/s
Iteration  30: 533281.037 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapPublisherTest._Benchmark.benchmark_doubleOnSubscribe":
  534160.115 ±(99.9%) 6396.688 ops/s [Average]
  (min, avg, max) = (514579.593, 534160.115, 553651.991), stdev = 9574.262
  CI (99.9%): [527763.427, 540556.803] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
MaybeFlatMapPublisherTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  534160.115 ± 6396.688  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_flatMapContinuation$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_flatMapContinuation

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 7353.861 ops/s
# Warmup Iteration   2: 44276.153 ops/s
# Warmup Iteration   3: 46057.786 ops/s
# Warmup Iteration   4: 43964.001 ops/s
# Warmup Iteration   5: 64542.998 ops/s
# Warmup Iteration   6: 75686.658 ops/s
# Warmup Iteration   7: 81511.707 ops/s
# Warmup Iteration   8: 70188.406 ops/s
# Warmup Iteration   9: 91090.088 ops/s
# Warmup Iteration  10: 167189.083 ops/s
# Warmup Iteration  11: 160083.109 ops/s
# Warmup Iteration  12: 166436.018 ops/s
# Warmup Iteration  13: 177223.061 ops/s
# Warmup Iteration  14: 158842.297 ops/s
# Warmup Iteration  15: 167982.516 ops/s
# Warmup Iteration  16: 166793.117 ops/s
# Warmup Iteration  17: 171570.498 ops/s
# Warmup Iteration  18: 174807.165 ops/s
# Warmup Iteration  19: 176940.645 ops/s
# Warmup Iteration  20: 172809.795 ops/s
# Warmup Iteration  21: 175339.919 ops/s
# Warmup Iteration  22: 179571.130 ops/s
# Warmup Iteration  23: 172714.957 ops/s
# Warmup Iteration  24: 169809.955 ops/s
# Warmup Iteration  25: 182228.933 ops/s
# Warmup Iteration  26: 171533.102 ops/s
# Warmup Iteration  27: 178377.481 ops/s
# Warmup Iteration  28: 172389.873 ops/s
# Warmup Iteration  29: 169169.765 ops/s
# Warmup Iteration  30: 179534.496 ops/s
Iteration   1: 171207.565 ops/s
Iteration   2: 170235.906 ops/s
Iteration   3: 176947.411 ops/s
Iteration   4: 165074.723 ops/s
Iteration   5: 176706.061 ops/s
Iteration   6: 175085.745 ops/s
Iteration   7: 171187.447 ops/s
Iteration   8: 173255.423 ops/s
Iteration   9: 175777.747 ops/s
Iteration  10: 177399.339 ops/s
Iteration  11: 175640.767 ops/s
Iteration  12: 177014.834 ops/s
Iteration  13: 169610.155 ops/s
Iteration  14: 178225.154 ops/s
Iteration  15: 172603.227 ops/s
Iteration  16: 174283.845 ops/s
Iteration  17: 182066.755 ops/s
Iteration  18: 170945.950 ops/s
Iteration  19: 178883.681 ops/s
Iteration  20: 169985.986 ops/s
Iteration  21: 175880.320 ops/s
Iteration  22: 181629.616 ops/s
Iteration  23: 169555.637 ops/s
Iteration  24: 178308.898 ops/s
Iteration  25: 172724.501 ops/s
Iteration  26: 175879.201 ops/s
Iteration  27: 166420.651 ops/s
Iteration  28: 175953.007 ops/s
Iteration  29: 172566.060 ops/s
Iteration  30: 177450.432 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_flatMapContinuation":
  174283.535 ±(99.9%) 2733.184 ops/s [Average]
  (min, avg, max) = (165074.723, 174283.535, 182066.755), stdev = 4090.901
  CI (99.9%): [171550.351, 177016.719] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score      Error  Units
MaybeTest._Benchmark.benchmark_flatMapContinuation  thrpt   30  174283.535 ± 2733.184  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisherTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisherTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 76565.554 ops/s
# Warmup Iteration   2: 437817.438 ops/s
# Warmup Iteration   3: 499140.053 ops/s
# Warmup Iteration   4: 416384.136 ops/s
# Warmup Iteration   5: 505453.740 ops/s
# Warmup Iteration   6: 501725.258 ops/s
# Warmup Iteration   7: 485257.538 ops/s
# Warmup Iteration   8: 515489.349 ops/s
# Warmup Iteration   9: 485455.655 ops/s
# Warmup Iteration  10: 503492.144 ops/s
# Warmup Iteration  11: 502762.596 ops/s
# Warmup Iteration  12: 506187.814 ops/s
# Warmup Iteration  13: 519896.739 ops/s
# Warmup Iteration  14: 494705.041 ops/s
# Warmup Iteration  15: 499343.779 ops/s
# Warmup Iteration  16: 504164.801 ops/s
# Warmup Iteration  17: 523249.462 ops/s
# Warmup Iteration  18: 505945.000 ops/s
# Warmup Iteration  19: 524667.246 ops/s
# Warmup Iteration  20: 542758.034 ops/s
# Warmup Iteration  21: 523366.688 ops/s
# Warmup Iteration  22: 538280.128 ops/s
# Warmup Iteration  23: 511271.414 ops/s
# Warmup Iteration  24: 534341.753 ops/s
# Warmup Iteration  25: 536467.538 ops/s
# Warmup Iteration  26: 513623.176 ops/s
# Warmup Iteration  27: 547647.623 ops/s
# Warmup Iteration  28: 511861.815 ops/s
# Warmup Iteration  29: 526215.012 ops/s
# Warmup Iteration  30: 514654.095 ops/s
Iteration   1: 538073.344 ops/s
Iteration   2: 521299.539 ops/s
Iteration   3: 527345.739 ops/s
Iteration   4: 536108.351 ops/s
Iteration   5: 520987.379 ops/s
Iteration   6: 528818.668 ops/s
Iteration   7: 541847.655 ops/s
Iteration   8: 514656.264 ops/s
Iteration   9: 543545.853 ops/s
Iteration  10: 524289.873 ops/s
Iteration  11: 522268.179 ops/s
Iteration  12: 551652.688 ops/s
Iteration  13: 526023.832 ops/s
Iteration  14: 525002.622 ops/s
Iteration  15: 525966.338 ops/s
Iteration  16: 517529.259 ops/s
Iteration  17: 539667.213 ops/s
Iteration  18: 519863.673 ops/s
Iteration  19: 534774.882 ops/s
Iteration  20: 529757.765 ops/s
Iteration  21: 544462.209 ops/s
Iteration  22: 527488.759 ops/s
Iteration  23: 518943.486 ops/s
Iteration  24: 522884.991 ops/s
Iteration  25: 531512.715 ops/s
Iteration  26: 538171.298 ops/s
Iteration  27: 509971.434 ops/s
Iteration  28: 535293.272 ops/s
Iteration  29: 523277.833 ops/s
Iteration  30: 539682.128 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisherTest._Benchmark.benchmark_doubleOnSubscribe":
  529372.241 ±(99.9%) 6604.271 ops/s [Average]
  (min, avg, max) = (509971.434, 529372.241, 551652.688), stdev = 9884.963
  CI (99.9%): [522767.970, 535976.513] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score      Error  Units
MaybeTakeUntilPublisherTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  529372.241 ± 6604.271  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterableTest._Benchmark.benchmark_hasNextThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterableTest._Benchmark.benchmark_hasNextThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 142362.595 ops/s
# Warmup Iteration   2: 458462.093 ops/s
# Warmup Iteration   3: 542077.763 ops/s
# Warmup Iteration   4: 536409.105 ops/s
# Warmup Iteration   5: 556591.060 ops/s
# Warmup Iteration   6: 542937.449 ops/s
# Warmup Iteration   7: 546319.452 ops/s
# Warmup Iteration   8: 534194.385 ops/s
# Warmup Iteration   9: 520828.115 ops/s
# Warmup Iteration  10: 510088.571 ops/s
# Warmup Iteration  11: 564819.257 ops/s
# Warmup Iteration  12: 542752.118 ops/s
# Warmup Iteration  13: 575842.765 ops/s
# Warmup Iteration  14: 534577.107 ops/s
# Warmup Iteration  15: 560759.989 ops/s
# Warmup Iteration  16: 574119.947 ops/s
# Warmup Iteration  17: 536538.797 ops/s
# Warmup Iteration  18: 595018.442 ops/s
# Warmup Iteration  19: 576744.220 ops/s
# Warmup Iteration  20: 558686.779 ops/s
# Warmup Iteration  21: 598933.039 ops/s
# Warmup Iteration  22: 557932.065 ops/s
# Warmup Iteration  23: 569336.854 ops/s
# Warmup Iteration  24: 581764.779 ops/s
# Warmup Iteration  25: 562506.258 ops/s
# Warmup Iteration  26: 579979.977 ops/s
# Warmup Iteration  27: 570858.408 ops/s
# Warmup Iteration  28: 547509.578 ops/s
# Warmup Iteration  29: 584277.728 ops/s
# Warmup Iteration  30: 573528.057 ops/s
Iteration   1: 588376.040 ops/s
Iteration   2: 571138.160 ops/s
Iteration   3: 506255.551 ops/s
Iteration   4: 584344.443 ops/s
Iteration   5: 571223.625 ops/s
Iteration   6: 571366.233 ops/s
Iteration   7: 582190.181 ops/s
Iteration   8: 579678.367 ops/s
Iteration   9: 587573.892 ops/s
Iteration  10: 563685.893 ops/s
Iteration  11: 580580.134 ops/s
Iteration  12: 559792.234 ops/s
Iteration  13: 569011.145 ops/s
Iteration  14: 577935.743 ops/s
Iteration  15: 569748.582 ops/s
Iteration  16: 555781.510 ops/s
Iteration  17: 576901.765 ops/s
Iteration  18: 566474.603 ops/s
Iteration  19: 579747.414 ops/s
Iteration  20: 592921.107 ops/s
Iteration  21: 571266.259 ops/s
Iteration  22: 561131.991 ops/s
Iteration  23: 587122.634 ops/s
Iteration  24: 569354.426 ops/s
Iteration  25: 585933.375 ops/s
Iteration  26: 567317.318 ops/s
Iteration  27: 577971.024 ops/s
Iteration  28: 564837.777 ops/s
Iteration  29: 578597.588 ops/s
Iteration  30: 551552.275 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterableTest._Benchmark.benchmark_hasNextThrows":
  571660.376 ±(99.9%) 10688.253 ops/s [Average]
  (min, avg, max) = (506255.551, 571660.376, 592921.107), stdev = 15997.674
  CI (99.9%): [560972.124, 582348.629] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score       Error  Units
MaybeConcatIterableTest._Benchmark.benchmark_hasNextThrows  thrpt   30  571660.376 ± 10688.253  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisherTest._Benchmark.benchmark_badSourceOther$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisherTest._Benchmark.benchmark_badSourceOther

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 24890.262 ops/s
# Warmup Iteration   2: 106953.466 ops/s
# Warmup Iteration   3: 197377.672 ops/s
# Warmup Iteration   4: 214496.393 ops/s
# Warmup Iteration   5: 197539.062 ops/s
# Warmup Iteration   6: 226450.612 ops/s
# Warmup Iteration   7: 236345.931 ops/s
# Warmup Iteration   8: 236562.698 ops/s
# Warmup Iteration   9: 221932.534 ops/s
# Warmup Iteration  10: 239448.193 ops/s
# Warmup Iteration  11: 225645.837 ops/s
# Warmup Iteration  12: 224975.897 ops/s
# Warmup Iteration  13: 231861.326 ops/s
# Warmup Iteration  14: 225998.389 ops/s
# Warmup Iteration  15: 242870.771 ops/s
# Warmup Iteration  16: 226305.999 ops/s
# Warmup Iteration  17: 243636.972 ops/s
# Warmup Iteration  18: 237041.190 ops/s
# Warmup Iteration  19: 236615.395 ops/s
# Warmup Iteration  20: 236574.340 ops/s
# Warmup Iteration  21: 236023.272 ops/s
# Warmup Iteration  22: 240586.171 ops/s
# Warmup Iteration  23: 234623.819 ops/s
# Warmup Iteration  24: 242983.455 ops/s
# Warmup Iteration  25: 238947.053 ops/s
# Warmup Iteration  26: 235334.027 ops/s
# Warmup Iteration  27: 240365.980 ops/s
# Warmup Iteration  28: 230616.650 ops/s
# Warmup Iteration  29: 240948.167 ops/s
# Warmup Iteration  30: 233857.417 ops/s
Iteration   1: 234722.717 ops/s
Iteration   2: 235163.235 ops/s
Iteration   3: 242043.938 ops/s
Iteration   4: 233531.813 ops/s
Iteration   5: 235891.824 ops/s
Iteration   6: 238491.980 ops/s
Iteration   7: 235394.335 ops/s
Iteration   8: 237813.871 ops/s
Iteration   9: 245073.621 ops/s
Iteration  10: 232855.117 ops/s
Iteration  11: 234821.939 ops/s
Iteration  12: 235732.393 ops/s
Iteration  13: 229994.078 ops/s
Iteration  14: 240822.404 ops/s
Iteration  15: 237527.954 ops/s
Iteration  16: 228205.210 ops/s
Iteration  17: 236490.055 ops/s
Iteration  18: 230728.564 ops/s
Iteration  19: 234458.285 ops/s
Iteration  20: 238459.777 ops/s
Iteration  21: 227690.164 ops/s
Iteration  22: 241191.442 ops/s
Iteration  23: 230913.348 ops/s
Iteration  24: 250097.221 ops/s
Iteration  25: 228481.779 ops/s
Iteration  26: 242065.400 ops/s
Iteration  27: 240311.001 ops/s
Iteration  28: 233110.811 ops/s
Iteration  29: 241352.560 ops/s
Iteration  30: 232562.779 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisherTest._Benchmark.benchmark_badSourceOther":
  236199.987 ±(99.9%) 3481.593 ops/s [Average]
  (min, avg, max) = (227690.164, 236199.987, 250097.221), stdev = 5211.085
  CI (99.9%): [232718.394, 239681.580] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
MaybeTimeoutPublisherTest._Benchmark.benchmark_badSourceOther  thrpt   30  236199.987 ± 3481.593  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapTest._Benchmark.benchmark_fusedInnerCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapTest._Benchmark.benchmark_fusedInnerCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 12952.441 ops/s
# Warmup Iteration   2: 40524.444 ops/s
# Warmup Iteration   3: 94993.511 ops/s
# Warmup Iteration   4: 188923.499 ops/s
# Warmup Iteration   5: 284949.473 ops/s
# Warmup Iteration   6: 278252.834 ops/s
# Warmup Iteration   7: 313238.511 ops/s
# Warmup Iteration   8: 319606.935 ops/s
# Warmup Iteration   9: 322874.590 ops/s
# Warmup Iteration  10: 315547.785 ops/s
# Warmup Iteration  11: 315478.679 ops/s
# Warmup Iteration  12: 309861.389 ops/s
# Warmup Iteration  13: 324690.237 ops/s
# Warmup Iteration  14: 319904.036 ops/s
# Warmup Iteration  15: 313549.684 ops/s
# Warmup Iteration  16: 318056.908 ops/s
# Warmup Iteration  17: 327933.929 ops/s
# Warmup Iteration  18: 340611.894 ops/s
# Warmup Iteration  19: 328441.421 ops/s
# Warmup Iteration  20: 320050.664 ops/s
# Warmup Iteration  21: 330312.085 ops/s
# Warmup Iteration  22: 324149.827 ops/s
# Warmup Iteration  23: 329805.785 ops/s
# Warmup Iteration  24: 327364.321 ops/s
# Warmup Iteration  25: 325681.800 ops/s
# Warmup Iteration  26: 328291.938 ops/s
# Warmup Iteration  27: 320054.209 ops/s
# Warmup Iteration  28: 334949.262 ops/s
# Warmup Iteration  29: 321530.942 ops/s
# Warmup Iteration  30: 323956.134 ops/s
Iteration   1: 336222.425 ops/s
Iteration   2: 321571.839 ops/s
Iteration   3: 337003.125 ops/s
Iteration   4: 325991.921 ops/s
Iteration   5: 314594.983 ops/s
Iteration   6: 334954.150 ops/s
Iteration   7: 319486.579 ops/s
Iteration   8: 329800.096 ops/s
Iteration   9: 327719.687 ops/s
Iteration  10: 322017.099 ops/s
Iteration  11: 326277.733 ops/s
Iteration  12: 321996.884 ops/s
Iteration  13: 329191.856 ops/s
Iteration  14: 315492.065 ops/s
Iteration  15: 325869.336 ops/s
Iteration  16: 334624.434 ops/s
Iteration  17: 320937.286 ops/s
Iteration  18: 333963.064 ops/s
Iteration  19: 321334.362 ops/s
Iteration  20: 332074.011 ops/s
Iteration  21: 335116.194 ops/s
Iteration  22: 316246.594 ops/s
Iteration  23: 322158.895 ops/s
Iteration  24: 318797.736 ops/s
Iteration  25: 303898.391 ops/s
Iteration  26: 290004.209 ops/s
Iteration  27: 316258.850 ops/s
Iteration  28: 330686.748 ops/s
Iteration  29: 312000.795 ops/s
Iteration  30: 317860.740 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapTest._Benchmark.benchmark_fusedInnerCrash":
  323138.403 ±(99.9%) 6854.409 ops/s [Average]
  (min, avg, max) = (290004.209, 323138.403, 337003.125), stdev = 10259.358
  CI (99.9%): [316283.994, 329992.812] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score      Error  Units
ObservableFlatMapTest._Benchmark.benchmark_fusedInnerCrash  thrpt   30  323138.403 ± 6854.409  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableGroupByTest._Benchmark.benchmark_delayErrorCompleteMoreWorkInGroup$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableGroupByTest._Benchmark.benchmark_delayErrorCompleteMoreWorkInGroup

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 15549.461 ops/s
# Warmup Iteration   2: 159388.819 ops/s
# Warmup Iteration   3: 307887.655 ops/s
# Warmup Iteration   4: 646609.809 ops/s
# Warmup Iteration   5: 719901.883 ops/s
# Warmup Iteration   6: 724707.199 ops/s
# Warmup Iteration   7: 767424.890 ops/s
# Warmup Iteration   8: 679671.488 ops/s
# Warmup Iteration   9: 701380.224 ops/s
# Warmup Iteration  10: 731038.071 ops/s
# Warmup Iteration  11: 685701.755 ops/s
# Warmup Iteration  12: 730546.614 ops/s
# Warmup Iteration  13: 730332.711 ops/s
# Warmup Iteration  14: 763700.302 ops/s
# Warmup Iteration  15: 751130.839 ops/s
# Warmup Iteration  16: 771423.049 ops/s
# Warmup Iteration  17: 719009.651 ops/s
# Warmup Iteration  18: 766523.988 ops/s
# Warmup Iteration  19: 750322.539 ops/s
# Warmup Iteration  20: 753600.859 ops/s
# Warmup Iteration  21: 763524.516 ops/s
# Warmup Iteration  22: 747250.378 ops/s
# Warmup Iteration  23: 776571.572 ops/s
# Warmup Iteration  24: 734996.117 ops/s
# Warmup Iteration  25: 725401.254 ops/s
# Warmup Iteration  26: 783220.025 ops/s
# Warmup Iteration  27: 734544.248 ops/s
# Warmup Iteration  28: 746398.016 ops/s
# Warmup Iteration  29: 751356.968 ops/s
# Warmup Iteration  30: 758434.729 ops/s
Iteration   1: 771946.007 ops/s
Iteration   2: 732864.506 ops/s
Iteration   3: 767683.773 ops/s
Iteration   4: 723148.536 ops/s
Iteration   5: 772209.681 ops/s
Iteration   6: 774203.816 ops/s
Iteration   7: 718200.388 ops/s
Iteration   8: 765576.077 ops/s
Iteration   9: 735921.504 ops/s
Iteration  10: 760422.226 ops/s
Iteration  11: 719722.560 ops/s
Iteration  12: 742826.562 ops/s
Iteration  13: 731243.845 ops/s
Iteration  14: 733404.289 ops/s
Iteration  15: 745454.176 ops/s
Iteration  16: 738904.940 ops/s
Iteration  17: 762467.708 ops/s
Iteration  18: 743786.656 ops/s
Iteration  19: 756741.456 ops/s
Iteration  20: 766029.661 ops/s
Iteration  21: 712701.200 ops/s
Iteration  22: 765540.646 ops/s
Iteration  23: 749615.799 ops/s
Iteration  24: 741707.165 ops/s
Iteration  25: 722005.253 ops/s
Iteration  26: 758571.296 ops/s
Iteration  27: 751325.676 ops/s
Iteration  28: 754081.020 ops/s
Iteration  29: 738484.787 ops/s
Iteration  30: 750435.814 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableGroupByTest._Benchmark.benchmark_delayErrorCompleteMoreWorkInGroup":
  746907.567 ±(99.9%) 11839.924 ops/s [Average]
  (min, avg, max) = (712701.200, 746907.567, 774203.816), stdev = 17721.443
  CI (99.9%): [735067.643, 758747.492] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt       Score       Error  Units
ObservableGroupByTest._Benchmark.benchmark_delayErrorCompleteMoreWorkInGroup  thrpt   30  746907.567 ± 11839.924  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableGroupByTest._Benchmark.benchmark_unsubscribeViaTakeOnGroupThenTakeOnInner$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableGroupByTest._Benchmark.benchmark_unsubscribeViaTakeOnGroupThenTakeOnInner

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 6762.103 ops/s
# Warmup Iteration   2: 93307.682 ops/s
# Warmup Iteration   3: 218491.992 ops/s
# Warmup Iteration   4: 229809.561 ops/s
# Warmup Iteration   5: 227577.349 ops/s
# Warmup Iteration   6: 214245.356 ops/s
# Warmup Iteration   7: 212780.573 ops/s
# Warmup Iteration   8: 237524.950 ops/s
# Warmup Iteration   9: 232453.796 ops/s
# Warmup Iteration  10: 235972.953 ops/s
# Warmup Iteration  11: 229309.003 ops/s
# Warmup Iteration  12: 237964.344 ops/s
# Warmup Iteration  13: 227000.872 ops/s
# Warmup Iteration  14: 236294.162 ops/s
# Warmup Iteration  15: 239937.860 ops/s
# Warmup Iteration  16: 236952.379 ops/s
# Warmup Iteration  17: 236420.608 ops/s
# Warmup Iteration  18: 231944.778 ops/s
# Warmup Iteration  19: 237039.094 ops/s
# Warmup Iteration  20: 235103.253 ops/s
# Warmup Iteration  21: 235555.525 ops/s
# Warmup Iteration  22: 235901.610 ops/s
# Warmup Iteration  23: 232253.213 ops/s
# Warmup Iteration  24: 227019.216 ops/s
# Warmup Iteration  25: 242135.857 ops/s
# Warmup Iteration  26: 229028.294 ops/s
# Warmup Iteration  27: 240423.879 ops/s
# Warmup Iteration  28: 230693.517 ops/s
# Warmup Iteration  29: 235893.017 ops/s
# Warmup Iteration  30: 231505.721 ops/s
Iteration   1: 230971.280 ops/s
Iteration   2: 233597.933 ops/s
Iteration   3: 237222.309 ops/s
Iteration   4: 239765.070 ops/s
Iteration   5: 226191.272 ops/s
Iteration   6: 248302.230 ops/s
Iteration   7: 228883.322 ops/s
Iteration   8: 236095.099 ops/s
Iteration   9: 233922.011 ops/s
Iteration  10: 238973.326 ops/s
Iteration  11: 233124.445 ops/s
Iteration  12: 231214.628 ops/s
Iteration  13: 234759.083 ops/s
Iteration  14: 232672.823 ops/s
Iteration  15: 238389.116 ops/s
Iteration  16: 234516.255 ops/s
Iteration  17: 232610.558 ops/s
Iteration  18: 243712.191 ops/s
Iteration  19: 230260.619 ops/s
Iteration  20: 188269.257 ops/s
Iteration  21: 233432.270 ops/s
Iteration  22: 242701.425 ops/s
Iteration  23: 232828.670 ops/s
Iteration  24: 238489.781 ops/s
Iteration  25: 233805.377 ops/s
Iteration  26: 237038.573 ops/s
Iteration  27: 241107.210 ops/s
Iteration  28: 229264.521 ops/s
Iteration  29: 242918.783 ops/s
Iteration  30: 238914.125 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableGroupByTest._Benchmark.benchmark_unsubscribeViaTakeOnGroupThenTakeOnInner":
  234131.786 ±(99.9%) 6668.072 ops/s [Average]
  (min, avg, max) = (188269.257, 234131.786, 248302.230), stdev = 9980.457
  CI (99.9%): [227463.714, 240799.857] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             Mode  Cnt       Score      Error  Units
ObservableGroupByTest._Benchmark.benchmark_unsubscribeViaTakeOnGroupThenTakeOnInner  thrpt   30  234131.786 ± 6668.072  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableGroupByTest._Benchmark.benchmark_reentrantCompleteCancel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableGroupByTest._Benchmark.benchmark_reentrantCompleteCancel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 55922.661 ops/s
# Warmup Iteration   2: 245006.160 ops/s
# Warmup Iteration   3: 577215.376 ops/s
# Warmup Iteration   4: 752428.299 ops/s
# Warmup Iteration   5: 891704.152 ops/s
# Warmup Iteration   6: 866137.064 ops/s
# Warmup Iteration   7: 896637.784 ops/s
# Warmup Iteration   8: 863593.448 ops/s
# Warmup Iteration   9: 888940.995 ops/s
# Warmup Iteration  10: 900773.715 ops/s
# Warmup Iteration  11: 860247.344 ops/s
# Warmup Iteration  12: 898773.643 ops/s
# Warmup Iteration  13: 884324.071 ops/s
# Warmup Iteration  14: 856855.612 ops/s
# Warmup Iteration  15: 887003.593 ops/s
# Warmup Iteration  16: 901806.626 ops/s
# Warmup Iteration  17: 879597.890 ops/s
# Warmup Iteration  18: 893633.684 ops/s
# Warmup Iteration  19: 875557.056 ops/s
# Warmup Iteration  20: 896316.931 ops/s
# Warmup Iteration  21: 886989.237 ops/s
# Warmup Iteration  22: 859252.093 ops/s
# Warmup Iteration  23: 904275.041 ops/s
# Warmup Iteration  24: 860467.073 ops/s
# Warmup Iteration  25: 880808.128 ops/s
# Warmup Iteration  26: 898393.531 ops/s
# Warmup Iteration  27: 883839.291 ops/s
# Warmup Iteration  28: 901976.790 ops/s
# Warmup Iteration  29: 848676.524 ops/s
# Warmup Iteration  30: 901189.760 ops/s
Iteration   1: 899673.608 ops/s
Iteration   2: 848409.065 ops/s
Iteration   3: 883239.137 ops/s
Iteration   4: 862572.395 ops/s
Iteration   5: 909739.718 ops/s
Iteration   6: 918279.011 ops/s
Iteration   7: 854716.782 ops/s
Iteration   8: 898605.478 ops/s
Iteration   9: 861632.623 ops/s
Iteration  10: 913263.482 ops/s
Iteration  11: 886546.703 ops/s
Iteration  12: 870684.135 ops/s
Iteration  13: 894871.086 ops/s
Iteration  14: 867795.705 ops/s
Iteration  15: 905548.840 ops/s
Iteration  16: 859261.144 ops/s
Iteration  17: 880132.927 ops/s
Iteration  18: 889668.469 ops/s
Iteration  19: 869511.320 ops/s
Iteration  20: 902329.348 ops/s
Iteration  21: 857936.035 ops/s
Iteration  22: 905376.605 ops/s
Iteration  23: 872920.257 ops/s
Iteration  24: 905568.645 ops/s
Iteration  25: 879411.727 ops/s
Iteration  26: 872920.845 ops/s
Iteration  27: 891241.235 ops/s
Iteration  28: 859272.491 ops/s
Iteration  29: 874316.899 ops/s
Iteration  30: 905782.327 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableGroupByTest._Benchmark.benchmark_reentrantCompleteCancel":
  883374.268 ±(99.9%) 13338.900 ops/s [Average]
  (min, avg, max) = (848409.065, 883374.268, 918279.011), stdev = 19965.039
  CI (99.9%): [870035.368, 896713.168] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score       Error  Units
ObservableGroupByTest._Benchmark.benchmark_reentrantCompleteCancel  thrpt   30  883374.268 ± 13338.900  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithTimeTest._Benchmark.benchmark_timespanTimeskipCustomScheduler$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithTimeTest._Benchmark.benchmark_timespanTimeskipCustomScheduler

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3196.443 ops/s
# Warmup Iteration   2: 26692.333 ops/s
# Warmup Iteration   3: 62753.144 ops/s
# Warmup Iteration   4: 95950.498 ops/s
# Warmup Iteration   5: 118690.102 ops/s
# Warmup Iteration   6: 111345.868 ops/s
# Warmup Iteration   7: 107676.392 ops/s
# Warmup Iteration   8: 119600.344 ops/s
# Warmup Iteration   9: 107902.577 ops/s
# Warmup Iteration  10: 114445.222 ops/s
# Warmup Iteration  11: 111091.809 ops/s
# Warmup Iteration  12: 120912.251 ops/s
# Warmup Iteration  13: 119013.191 ops/s
# Warmup Iteration  14: 115976.337 ops/s
# Warmup Iteration  15: 107977.980 ops/s
# Warmup Iteration  16: 113764.700 ops/s
# Warmup Iteration  17: 115804.136 ops/s
# Warmup Iteration  18: 123545.543 ops/s
# Warmup Iteration  19: 121110.429 ops/s
# Warmup Iteration  20: 110677.920 ops/s
# Warmup Iteration  21: 120011.586 ops/s
# Warmup Iteration  22: 108708.506 ops/s
# Warmup Iteration  23: 123120.517 ops/s
# Warmup Iteration  24: 120364.705 ops/s
# Warmup Iteration  25: 120337.045 ops/s
# Warmup Iteration  26: 116362.279 ops/s
# Warmup Iteration  27: 121462.189 ops/s
# Warmup Iteration  28: 119478.123 ops/s
# Warmup Iteration  29: 115209.910 ops/s
# Warmup Iteration  30: 111605.445 ops/s
Iteration   1: 115146.605 ops/s
Iteration   2: 119444.137 ops/s
Iteration   3: 114422.398 ops/s
Iteration   4: 117723.386 ops/s
Iteration   5: 110512.142 ops/s
Iteration   6: 112773.843 ops/s
Iteration   7: 104845.316 ops/s
Iteration   8: 110264.378 ops/s
Iteration   9: 111869.456 ops/s
Iteration  10: 119780.456 ops/s
Iteration  11: 112390.052 ops/s
Iteration  12: 114054.187 ops/s
Iteration  13: 107281.364 ops/s
Iteration  14: 99436.360 ops/s
Iteration  15: 116297.207 ops/s
Iteration  16: 112494.089 ops/s
Iteration  17: 116624.759 ops/s
Iteration  18: 113758.187 ops/s
Iteration  19: 107934.501 ops/s
Iteration  20: 112715.333 ops/s
Iteration  21: 114751.731 ops/s
Iteration  22: 116427.620 ops/s
Iteration  23: 118718.799 ops/s
Iteration  24: 116297.201 ops/s
Iteration  25: 112139.059 ops/s
Iteration  26: 122167.446 ops/s
Iteration  27: 120356.081 ops/s
Iteration  28: 109903.044 ops/s
Iteration  29: 119892.301 ops/s
Iteration  30: 123959.346 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithTimeTest._Benchmark.benchmark_timespanTimeskipCustomScheduler":
  114146.026 ±(99.9%) 3512.989 ops/s [Average]
  (min, avg, max) = (99436.360, 114146.026, 123959.346), stdev = 5258.077
  CI (99.9%): [110633.037, 117659.015] (assumes normal distribution)


# Run complete. Total time: 00:01:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           Mode  Cnt       Score      Error  Units
ObservableWindowWithTimeTest._Benchmark.benchmark_timespanTimeskipCustomScheduler  thrpt   30  114146.026 ± 3512.989  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithTimeTest._Benchmark.benchmark_cancellingWindowCancelsUpstreamExactTime$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithTimeTest._Benchmark.benchmark_cancellingWindowCancelsUpstreamExactTime

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 4807.717 ops/s
# Warmup Iteration   2: 36961.732 ops/s
# Warmup Iteration   3: 42674.656 ops/s
# Warmup Iteration   4: 55874.539 ops/s
# Warmup Iteration   5: 114134.202 ops/s
# Warmup Iteration   6: 103240.342 ops/s
# Warmup Iteration   7: 104004.675 ops/s
# Warmup Iteration   8: 111781.083 ops/s
# Warmup Iteration   9: 132737.933 ops/s
# Warmup Iteration  10: 124697.509 ops/s
# Warmup Iteration  11: 110346.591 ops/s
# Warmup Iteration  12: 135442.509 ops/s
# Warmup Iteration  13: 138698.337 ops/s
# Warmup Iteration  14: 104116.322 ops/s
# Warmup Iteration  15: 115923.412 ops/s
# Warmup Iteration  16: 123337.451 ops/s
# Warmup Iteration  17: 132977.797 ops/s
# Warmup Iteration  18: 106906.667 ops/s
# Warmup Iteration  19: 121169.338 ops/s
# Warmup Iteration  20: 119058.604 ops/s
# Warmup Iteration  21: 119576.536 ops/s
# Warmup Iteration  22: 129335.952 ops/s
# Warmup Iteration  23: 124173.806 ops/s
# Warmup Iteration  24: 105314.182 ops/s
# Warmup Iteration  25: 129960.318 ops/s
# Warmup Iteration  26: 119985.872 ops/s
# Warmup Iteration  27: 115950.746 ops/s
# Warmup Iteration  28: 128392.752 ops/s
# Warmup Iteration  29: 120439.472 ops/s
# Warmup Iteration  30: 142543.875 ops/s
Iteration   1: 127983.730 ops/s
Iteration   2: 123903.015 ops/s
Iteration   3: 125101.032 ops/s
Iteration   4: 137959.804 ops/s
Iteration   5: 137167.801 ops/s
Iteration   6: 110311.787 ops/s
Iteration   7: 134359.846 ops/s
Iteration   8: 105976.732 ops/s
Iteration   9: 148872.890 ops/s
Iteration  10: 123968.786 ops/s
Iteration  11: 118191.847 ops/s
Iteration  12: 122196.270 ops/s
Iteration  13: 123434.454 ops/s
Iteration  14: 140082.761 ops/s
Iteration  15: 118847.679 ops/s
Iteration  16: 130304.241 ops/s
Iteration  17: 131446.756 ops/s
Iteration  18: 139997.118 ops/s
Iteration  19: 132684.121 ops/s
Iteration  20: 138927.620 ops/s
Iteration  21: 129221.240 ops/s
Iteration  22: 109062.236 ops/s
Iteration  23: 123233.542 ops/s
Iteration  24: 108700.552 ops/s
Iteration  25: 114066.321 ops/s
Iteration  26: 112332.295 ops/s
Iteration  27: 134547.809 ops/s
Iteration  28: 107286.624 ops/s
Iteration  29: 124644.724 ops/s
Iteration  30: 129511.706 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithTimeTest._Benchmark.benchmark_cancellingWindowCancelsUpstreamExactTime":
  125477.511 ±(99.9%) 7517.162 ops/s [Average]
  (min, avg, max) = (105976.732, 125477.511, 148872.890), stdev = 11251.335
  CI (99.9%): [117960.349, 132994.673] (assumes normal distribution)


# Run complete. Total time: 00:01:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                    Mode  Cnt       Score      Error  Units
ObservableWindowWithTimeTest._Benchmark.benchmark_cancellingWindowCancelsUpstreamExactTime  thrpt   30  125477.511 ± 7517.162  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_cancelActive$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_cancelActive

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 105592.826 ops/s
# Warmup Iteration   2: 638571.433 ops/s
# Warmup Iteration   3: 864789.292 ops/s
# Warmup Iteration   4: 1028081.433 ops/s
# Warmup Iteration   5: 1044968.110 ops/s
# Warmup Iteration   6: 1005473.939 ops/s
# Warmup Iteration   7: 1051038.798 ops/s
# Warmup Iteration   8: 1068642.522 ops/s
# Warmup Iteration   9: 1044680.097 ops/s
# Warmup Iteration  10: 1034977.003 ops/s
# Warmup Iteration  11: 977096.317 ops/s
# Warmup Iteration  12: 1044159.071 ops/s
# Warmup Iteration  13: 1023929.535 ops/s
# Warmup Iteration  14: 1023329.495 ops/s
# Warmup Iteration  15: 1008524.847 ops/s
# Warmup Iteration  16: 1028158.084 ops/s
# Warmup Iteration  17: 1040413.236 ops/s
# Warmup Iteration  18: 1012778.698 ops/s
# Warmup Iteration  19: 1042472.017 ops/s
# Warmup Iteration  20: 1035679.318 ops/s
# Warmup Iteration  21: 1048912.545 ops/s
# Warmup Iteration  22: 994065.197 ops/s
# Warmup Iteration  23: 1022388.692 ops/s
# Warmup Iteration  24: 1024972.877 ops/s
# Warmup Iteration  25: 988344.755 ops/s
# Warmup Iteration  26: 1030455.274 ops/s
# Warmup Iteration  27: 1006725.017 ops/s
# Warmup Iteration  28: 1047857.910 ops/s
# Warmup Iteration  29: 1024922.040 ops/s
# Warmup Iteration  30: 1054076.346 ops/s
Iteration   1: 1045790.001 ops/s
Iteration   2: 997318.880 ops/s
Iteration   3: 1020121.213 ops/s
Iteration   4: 1064127.390 ops/s
Iteration   5: 1010719.970 ops/s
Iteration   6: 871019.011 ops/s
Iteration   7: 924548.405 ops/s
Iteration   8: 1030933.986 ops/s
Iteration   9: 1033008.404 ops/s
Iteration  10: 999292.488 ops/s
Iteration  11: 1039929.183 ops/s
Iteration  12: 1023867.874 ops/s
Iteration  13: 1029569.701 ops/s
Iteration  14: 1026484.805 ops/s
Iteration  15: 996745.507 ops/s
Iteration  16: 1019936.525 ops/s
Iteration  17: 1079050.236 ops/s
Iteration  18: 1018972.392 ops/s
Iteration  19: 1070148.966 ops/s
Iteration  20: 1016342.134 ops/s
Iteration  21: 1067265.926 ops/s
Iteration  22: 983583.249 ops/s
Iteration  23: 1054491.659 ops/s
Iteration  24: 1042400.661 ops/s
Iteration  25: 1057718.708 ops/s
Iteration  26: 1023410.482 ops/s
Iteration  27: 1011876.662 ops/s
Iteration  28: 1069461.632 ops/s
Iteration  29: 1004862.994 ops/s
Iteration  30: 1063049.896 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_cancelActive":
  1023201.631 ±(99.9%) 28646.240 ops/s [Average]
  (min, avg, max) = (871019.011, 1023201.631, 1079050.236), stdev = 42876.346
  CI (99.9%): [994555.392, 1051847.871] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
ObservableConcatMapEagerTest._Benchmark.benchmark_cancelActive  thrpt   30  1023201.631 ± 28646.240  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_arrayDelayErrorDefault$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_arrayDelayErrorDefault

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 60695.526 ops/s
# Warmup Iteration   2: 216326.502 ops/s
# Warmup Iteration   3: 654244.187 ops/s
# Warmup Iteration   4: 687718.465 ops/s
# Warmup Iteration   5: 728939.495 ops/s
# Warmup Iteration   6: 667958.843 ops/s
# Warmup Iteration   7: 635389.591 ops/s
# Warmup Iteration   8: 670031.649 ops/s
# Warmup Iteration   9: 701654.149 ops/s
# Warmup Iteration  10: 734738.110 ops/s
# Warmup Iteration  11: 724513.205 ops/s
# Warmup Iteration  12: 687581.420 ops/s
# Warmup Iteration  13: 703175.263 ops/s
# Warmup Iteration  14: 703948.750 ops/s
# Warmup Iteration  15: 700399.820 ops/s
# Warmup Iteration  16: 741543.901 ops/s
# Warmup Iteration  17: 710808.026 ops/s
# Warmup Iteration  18: 737813.477 ops/s
# Warmup Iteration  19: 705440.797 ops/s
# Warmup Iteration  20: 720128.795 ops/s
# Warmup Iteration  21: 742460.875 ops/s
# Warmup Iteration  22: 725471.034 ops/s
# Warmup Iteration  23: 700793.845 ops/s
# Warmup Iteration  24: 721947.978 ops/s
# Warmup Iteration  25: 705232.429 ops/s
# Warmup Iteration  26: 741808.977 ops/s
# Warmup Iteration  27: 721537.302 ops/s
# Warmup Iteration  28: 689537.010 ops/s
# Warmup Iteration  29: 716774.977 ops/s
# Warmup Iteration  30: 717733.071 ops/s
Iteration   1: 720192.994 ops/s
Iteration   2: 741407.174 ops/s
Iteration   3: 691290.558 ops/s
Iteration   4: 746725.722 ops/s
Iteration   5: 723560.347 ops/s
Iteration   6: 701397.154 ops/s
Iteration   7: 710231.280 ops/s
Iteration   8: 703052.368 ops/s
Iteration   9: 721968.967 ops/s
Iteration  10: 691276.533 ops/s
Iteration  11: 730565.177 ops/s
Iteration  12: 737039.446 ops/s
Iteration  13: 696282.581 ops/s
Iteration  14: 704473.095 ops/s
Iteration  15: 729548.918 ops/s
Iteration  16: 716747.307 ops/s
Iteration  17: 690686.091 ops/s
Iteration  18: 720374.658 ops/s
Iteration  19: 733019.844 ops/s
Iteration  20: 681485.573 ops/s
Iteration  21: 730969.083 ops/s
Iteration  22: 697244.683 ops/s
Iteration  23: 703689.607 ops/s
Iteration  24: 714743.874 ops/s
Iteration  25: 732644.717 ops/s
Iteration  26: 697450.367 ops/s
Iteration  27: 734758.060 ops/s
Iteration  28: 725094.239 ops/s
Iteration  29: 708813.826 ops/s
Iteration  30: 736157.572 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_arrayDelayErrorDefault":
  715763.061 ±(99.9%) 11820.979 ops/s [Average]
  (min, avg, max) = (681485.573, 715763.061, 746725.722), stdev = 17693.086
  CI (99.9%): [703942.082, 727584.040] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score       Error  Units
ObservableConcatMapEagerTest._Benchmark.benchmark_arrayDelayErrorDefault  thrpt   30  715763.061 ± 11820.979  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_onErrorReturnFunctionReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_onErrorReturnFunctionReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 143873.142 ops/s
# Warmup Iteration   2: 283372.956 ops/s
# Warmup Iteration   3: 308291.749 ops/s
# Warmup Iteration   4: 314086.180 ops/s
# Warmup Iteration   5: 334703.965 ops/s
# Warmup Iteration   6: 329134.978 ops/s
# Warmup Iteration   7: 340790.520 ops/s
# Warmup Iteration   8: 332588.530 ops/s
# Warmup Iteration   9: 346697.337 ops/s
# Warmup Iteration  10: 339519.609 ops/s
# Warmup Iteration  11: 339086.096 ops/s
# Warmup Iteration  12: 332516.866 ops/s
# Warmup Iteration  13: 328594.061 ops/s
# Warmup Iteration  14: 340008.742 ops/s
# Warmup Iteration  15: 318029.476 ops/s
# Warmup Iteration  16: 348136.846 ops/s
# Warmup Iteration  17: 357637.215 ops/s
# Warmup Iteration  18: 363472.981 ops/s
# Warmup Iteration  19: 354540.911 ops/s
# Warmup Iteration  20: 343671.030 ops/s
# Warmup Iteration  21: 371520.583 ops/s
# Warmup Iteration  22: 352310.133 ops/s
# Warmup Iteration  23: 362272.804 ops/s
# Warmup Iteration  24: 349654.347 ops/s
# Warmup Iteration  25: 365420.651 ops/s
# Warmup Iteration  26: 353132.175 ops/s
# Warmup Iteration  27: 367216.261 ops/s
# Warmup Iteration  28: 352052.439 ops/s
# Warmup Iteration  29: 362830.569 ops/s
# Warmup Iteration  30: 364200.631 ops/s
Iteration   1: 294249.818 ops/s
Iteration   2: 364284.963 ops/s
Iteration   3: 358865.885 ops/s
Iteration   4: 361471.725 ops/s
Iteration   5: 347964.696 ops/s
Iteration   6: 360626.892 ops/s
Iteration   7: 366756.727 ops/s
Iteration   8: 347064.122 ops/s
Iteration   9: 369716.906 ops/s
Iteration  10: 352638.660 ops/s
Iteration  11: 367262.397 ops/s
Iteration  12: 351654.510 ops/s
Iteration  13: 364263.847 ops/s
Iteration  14: 351163.994 ops/s
Iteration  15: 363636.444 ops/s
Iteration  16: 367953.486 ops/s
Iteration  17: 352210.771 ops/s
Iteration  18: 360646.788 ops/s
Iteration  19: 355573.214 ops/s
Iteration  20: 346680.154 ops/s
Iteration  21: 369467.223 ops/s
Iteration  22: 352523.637 ops/s
Iteration  23: 366078.246 ops/s
Iteration  24: 343472.608 ops/s
Iteration  25: 362504.534 ops/s
Iteration  26: 369717.829 ops/s
Iteration  27: 349595.414 ops/s
Iteration  28: 365936.239 ops/s
Iteration  29: 348121.681 ops/s
Iteration  30: 376590.508 ops/s


Result "io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_onErrorReturnFunctionReturnsNull":
  356956.464 ±(99.9%) 9802.932 ops/s [Average]
  (min, avg, max) = (294249.818, 356956.464, 376590.508), stdev = 14672.569
  CI (99.9%): [347153.531, 366759.396] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score      Error  Units
ObservableNullTests._Benchmark.benchmark_onErrorReturnFunctionReturnsNull  thrpt   30  356956.464 ± 9802.932  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_distinctSupplierReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_distinctSupplierReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 251064.116 ops/s
# Warmup Iteration   2: 514748.948 ops/s
# Warmup Iteration   3: 596593.913 ops/s
# Warmup Iteration   4: 643038.098 ops/s
# Warmup Iteration   5: 560674.582 ops/s
# Warmup Iteration   6: 644716.105 ops/s
# Warmup Iteration   7: 665818.218 ops/s
# Warmup Iteration   8: 649532.069 ops/s
# Warmup Iteration   9: 677555.763 ops/s
# Warmup Iteration  10: 639795.841 ops/s
# Warmup Iteration  11: 666784.748 ops/s
# Warmup Iteration  12: 679376.791 ops/s
# Warmup Iteration  13: 637514.636 ops/s
# Warmup Iteration  14: 671389.404 ops/s
# Warmup Iteration  15: 653894.542 ops/s
# Warmup Iteration  16: 654996.430 ops/s
# Warmup Iteration  17: 699272.933 ops/s
# Warmup Iteration  18: 683379.567 ops/s
# Warmup Iteration  19: 703196.155 ops/s
# Warmup Iteration  20: 674621.024 ops/s
# Warmup Iteration  21: 697761.346 ops/s
# Warmup Iteration  22: 676396.254 ops/s
# Warmup Iteration  23: 711332.596 ops/s
# Warmup Iteration  24: 678286.183 ops/s
# Warmup Iteration  25: 694260.959 ops/s
# Warmup Iteration  26: 697350.749 ops/s
# Warmup Iteration  27: 672766.380 ops/s
# Warmup Iteration  28: 700001.351 ops/s
# Warmup Iteration  29: 686339.320 ops/s
# Warmup Iteration  30: 687776.363 ops/s
Iteration   1: 708017.962 ops/s
Iteration   2: 671863.940 ops/s
Iteration   3: 714881.260 ops/s
Iteration   4: 685158.842 ops/s
Iteration   5: 674073.261 ops/s
Iteration   6: 695379.837 ops/s
Iteration   7: 670560.401 ops/s
Iteration   8: 719008.080 ops/s
Iteration   9: 680999.960 ops/s
Iteration  10: 690605.369 ops/s
Iteration  11: 678275.116 ops/s
Iteration  12: 716611.776 ops/s
Iteration  13: 692649.063 ops/s
Iteration  14: 664800.953 ops/s
Iteration  15: 690405.290 ops/s
Iteration  16: 662998.967 ops/s
Iteration  17: 689204.341 ops/s
Iteration  18: 695444.686 ops/s
Iteration  19: 673529.165 ops/s
Iteration  20: 723729.793 ops/s
Iteration  21: 670097.515 ops/s
Iteration  22: 699401.106 ops/s
Iteration  23: 668195.777 ops/s
Iteration  24: 701172.668 ops/s
Iteration  25: 689287.806 ops/s
Iteration  26: 672812.601 ops/s
Iteration  27: 703929.545 ops/s
Iteration  28: 673032.610 ops/s
Iteration  29: 716123.768 ops/s
Iteration  30: 700830.853 ops/s


Result "io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_distinctSupplierReturnsNull":
  689769.410 ±(99.9%) 11897.555 ops/s [Average]
  (min, avg, max) = (662998.967, 689769.410, 723729.793), stdev = 17807.702
  CI (99.9%): [677871.855, 701666.966] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score       Error  Units
ObservableNullTests._Benchmark.benchmark_distinctSupplierReturnsNull  thrpt   30  689769.410 ± 11897.555  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTakeTest._Benchmark.benchmark_unsubscribeFromSynchronousInfiniteObservable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTakeTest._Benchmark.benchmark_unsubscribeFromSynchronousInfiniteObservable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1795427.565 ops/s
# Warmup Iteration   2: 3986411.221 ops/s
# Warmup Iteration   3: 4368039.699 ops/s
# Warmup Iteration   4: 3995554.384 ops/s
# Warmup Iteration   5: 4802196.975 ops/s
# Warmup Iteration   6: 4650846.012 ops/s
# Warmup Iteration   7: 4611131.344 ops/s
# Warmup Iteration   8: 4879144.767 ops/s
# Warmup Iteration   9: 4575243.308 ops/s
# Warmup Iteration  10: 4774904.553 ops/s
# Warmup Iteration  11: 4667344.737 ops/s
# Warmup Iteration  12: 4783225.848 ops/s
# Warmup Iteration  13: 4715297.067 ops/s
# Warmup Iteration  14: 4700645.717 ops/s
# Warmup Iteration  15: 4773089.692 ops/s
# Warmup Iteration  16: 4637147.415 ops/s
# Warmup Iteration  17: 4749229.797 ops/s
# Warmup Iteration  18: 4577508.779 ops/s
# Warmup Iteration  19: 4925115.104 ops/s
# Warmup Iteration  20: 4552419.761 ops/s
# Warmup Iteration  21: 4752511.835 ops/s
# Warmup Iteration  22: 4791819.359 ops/s
# Warmup Iteration  23: 4765784.621 ops/s
# Warmup Iteration  24: 4583505.215 ops/s
# Warmup Iteration  25: 4671765.844 ops/s
# Warmup Iteration  26: 4256241.150 ops/s
# Warmup Iteration  27: 4468976.346 ops/s
# Warmup Iteration  28: 4670386.245 ops/s
# Warmup Iteration  29: 4796791.492 ops/s
# Warmup Iteration  30: 4609549.979 ops/s
Iteration   1: 4758619.871 ops/s
Iteration   2: 4628272.530 ops/s
Iteration   3: 4583873.865 ops/s
Iteration   4: 4817625.674 ops/s
Iteration   5: 4638119.179 ops/s
Iteration   6: 4846252.316 ops/s
Iteration   7: 4677712.279 ops/s
Iteration   8: 4726165.789 ops/s
Iteration   9: 4692443.538 ops/s
Iteration  10: 4733652.012 ops/s
Iteration  11: 4621109.530 ops/s
Iteration  12: 4628096.816 ops/s
Iteration  13: 4846470.264 ops/s
Iteration  14: 4482228.965 ops/s
Iteration  15: 4667912.740 ops/s
Iteration  16: 4736795.694 ops/s
Iteration  17: 4607713.811 ops/s
Iteration  18: 4803759.505 ops/s
Iteration  19: 4605863.397 ops/s
Iteration  20: 4882357.169 ops/s
Iteration  21: 4761570.411 ops/s
Iteration  22: 4651819.037 ops/s
Iteration  23: 4769364.917 ops/s
Iteration  24: 4757246.602 ops/s
Iteration  25: 4878252.308 ops/s
Iteration  26: 4706645.491 ops/s
Iteration  27: 4763450.057 ops/s
Iteration  28: 4834547.036 ops/s
Iteration  29: 4537310.015 ops/s
Iteration  30: 4867636.470 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeTest._Benchmark.benchmark_unsubscribeFromSynchronousInfiniteObservable":
  4717096.243 ±(99.9%) 70345.789 ops/s [Average]
  (min, avg, max) = (4482228.965, 4717096.243, 4882357.169), stdev = 105290.273
  CI (99.9%): [4646750.454, 4787442.032] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              Mode  Cnt        Score       Error  Units
ObservableTakeTest._Benchmark.benchmark_unsubscribeFromSynchronousInfiniteObservable  thrpt   30  4717096.243 ± 70345.789  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_publishFunctionReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_publishFunctionReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 324405.056 ops/s
# Warmup Iteration   2: 518428.134 ops/s
# Warmup Iteration   3: 622385.958 ops/s
# Warmup Iteration   4: 620425.698 ops/s
# Warmup Iteration   5: 594579.403 ops/s
# Warmup Iteration   6: 599921.101 ops/s
# Warmup Iteration   7: 600708.295 ops/s
# Warmup Iteration   8: 592704.906 ops/s
# Warmup Iteration   9: 653195.122 ops/s
# Warmup Iteration  10: 600879.670 ops/s
# Warmup Iteration  11: 616433.904 ops/s
# Warmup Iteration  12: 637328.288 ops/s
# Warmup Iteration  13: 606762.986 ops/s
# Warmup Iteration  14: 641040.813 ops/s
# Warmup Iteration  15: 605334.669 ops/s
# Warmup Iteration  16: 632298.400 ops/s
# Warmup Iteration  17: 642327.362 ops/s
# Warmup Iteration  18: 636424.955 ops/s
# Warmup Iteration  19: 656290.844 ops/s
# Warmup Iteration  20: 629068.616 ops/s
# Warmup Iteration  21: 638343.072 ops/s
# Warmup Iteration  22: 651045.665 ops/s
# Warmup Iteration  23: 668111.186 ops/s
# Warmup Iteration  24: 655118.748 ops/s
# Warmup Iteration  25: 623697.694 ops/s
# Warmup Iteration  26: 661776.791 ops/s
# Warmup Iteration  27: 647311.328 ops/s
# Warmup Iteration  28: 651873.939 ops/s
# Warmup Iteration  29: 651365.063 ops/s
# Warmup Iteration  30: 638293.797 ops/s
Iteration   1: 671332.682 ops/s
Iteration   2: 630258.483 ops/s
Iteration   3: 664145.620 ops/s
Iteration   4: 621770.706 ops/s
Iteration   5: 653223.934 ops/s
Iteration   6: 642580.982 ops/s
Iteration   7: 642978.745 ops/s
Iteration   8: 677740.732 ops/s
Iteration   9: 634481.714 ops/s
Iteration  10: 666426.721 ops/s
Iteration  11: 623856.665 ops/s
Iteration  12: 658604.560 ops/s
Iteration  13: 615708.096 ops/s
Iteration  14: 641040.757 ops/s
Iteration  15: 662846.590 ops/s
Iteration  16: 662670.859 ops/s
Iteration  17: 639686.927 ops/s
Iteration  18: 660776.710 ops/s
Iteration  19: 634484.979 ops/s
Iteration  20: 657258.196 ops/s
Iteration  21: 641635.894 ops/s
Iteration  22: 650513.141 ops/s
Iteration  23: 649572.457 ops/s
Iteration  24: 635701.588 ops/s
Iteration  25: 653263.398 ops/s
Iteration  26: 649571.688 ops/s
Iteration  27: 668913.664 ops/s
Iteration  28: 635761.611 ops/s
Iteration  29: 658683.309 ops/s
Iteration  30: 624551.295 ops/s


Result "io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_publishFunctionReturnsNull":
  647668.090 ±(99.9%) 10742.934 ops/s [Average]
  (min, avg, max) = (615708.096, 647668.090, 677740.732), stdev = 16079.518
  CI (99.9%): [636925.157, 658411.024] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score       Error  Units
ObservableNullTests._Benchmark.benchmark_publishFunctionReturnsNull  thrpt   30  647668.090 ± 10742.934  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFromPubisherTest._Benchmark.benchmark_error$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFromPubisherTest._Benchmark.benchmark_error

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 123348.515 ops/s
# Warmup Iteration   2: 572703.474 ops/s
# Warmup Iteration   3: 643283.084 ops/s
# Warmup Iteration   4: 640857.551 ops/s
# Warmup Iteration   5: 732332.241 ops/s
# Warmup Iteration   6: 681241.630 ops/s
# Warmup Iteration   7: 699369.959 ops/s
# Warmup Iteration   8: 692029.193 ops/s
# Warmup Iteration   9: 715067.620 ops/s
# Warmup Iteration  10: 698530.865 ops/s
# Warmup Iteration  11: 696159.616 ops/s
# Warmup Iteration  12: 684293.561 ops/s
# Warmup Iteration  13: 691084.156 ops/s
# Warmup Iteration  14: 748611.969 ops/s
# Warmup Iteration  15: 671700.478 ops/s
# Warmup Iteration  16: 718138.501 ops/s
# Warmup Iteration  17: 743826.239 ops/s
# Warmup Iteration  18: 751772.430 ops/s
# Warmup Iteration  19: 764354.435 ops/s
# Warmup Iteration  20: 734225.787 ops/s
# Warmup Iteration  21: 610969.019 ops/s
# Warmup Iteration  22: 727415.047 ops/s
# Warmup Iteration  23: 759203.271 ops/s
# Warmup Iteration  24: 764205.232 ops/s
# Warmup Iteration  25: 741469.677 ops/s
# Warmup Iteration  26: 768447.744 ops/s
# Warmup Iteration  27: 726968.138 ops/s
# Warmup Iteration  28: 760102.268 ops/s
# Warmup Iteration  29: 734248.543 ops/s
# Warmup Iteration  30: 729035.654 ops/s
Iteration   1: 773782.673 ops/s
Iteration   2: 750613.981 ops/s
Iteration   3: 744799.348 ops/s
Iteration   4: 744448.323 ops/s
Iteration   5: 718135.884 ops/s
Iteration   6: 749600.022 ops/s
Iteration   7: 777670.739 ops/s
Iteration   8: 726020.393 ops/s
Iteration   9: 772411.063 ops/s
Iteration  10: 772147.225 ops/s
Iteration  11: 729251.387 ops/s
Iteration  12: 762051.416 ops/s
Iteration  13: 741701.669 ops/s
Iteration  14: 748355.778 ops/s
Iteration  15: 749978.685 ops/s
Iteration  16: 744706.085 ops/s
Iteration  17: 754625.381 ops/s
Iteration  18: 759002.186 ops/s
Iteration  19: 748312.412 ops/s
Iteration  20: 766403.051 ops/s
Iteration  21: 719731.836 ops/s
Iteration  22: 748334.332 ops/s
Iteration  23: 735088.356 ops/s
Iteration  24: 746123.987 ops/s
Iteration  25: 736332.762 ops/s
Iteration  26: 726909.851 ops/s
Iteration  27: 774506.313 ops/s
Iteration  28: 726301.785 ops/s
Iteration  29: 772355.995 ops/s
Iteration  30: 733843.074 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFromPubisherTest._Benchmark.benchmark_error":
  748451.533 ±(99.9%) 11605.126 ops/s [Average]
  (min, avg, max) = (718135.884, 748451.533, 777670.739), stdev = 17370.008
  CI (99.9%): [736846.407, 760056.659] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt       Score       Error  Units
MaybeFromPubisherTest._Benchmark.benchmark_error  thrpt   30  748451.533 ± 11605.126  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWithPredicateTest._Benchmark.benchmark_issue3008RetryWithPredicate$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWithPredicateTest._Benchmark.benchmark_issue3008RetryWithPredicate

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 50161.721 ops/s
# Warmup Iteration   2: 291004.947 ops/s
# Warmup Iteration   3: 295170.777 ops/s
# Warmup Iteration   4: 294087.223 ops/s
# Warmup Iteration   5: 351287.229 ops/s
# Warmup Iteration   6: 329450.425 ops/s
# Warmup Iteration   7: 341171.045 ops/s
# Warmup Iteration   8: 321405.013 ops/s
# Warmup Iteration   9: 300648.524 ops/s
# Warmup Iteration  10: 337452.634 ops/s
# Warmup Iteration  11: 323025.019 ops/s
# Warmup Iteration  12: 354102.192 ops/s
# Warmup Iteration  13: 345654.522 ops/s
# Warmup Iteration  14: 334022.537 ops/s
# Warmup Iteration  15: 347369.359 ops/s
# Warmup Iteration  16: 333374.907 ops/s
# Warmup Iteration  17: 348515.216 ops/s
# Warmup Iteration  18: 344037.681 ops/s
# Warmup Iteration  19: 353313.265 ops/s
# Warmup Iteration  20: 356997.592 ops/s
# Warmup Iteration  21: 331236.097 ops/s
# Warmup Iteration  22: 363003.226 ops/s
# Warmup Iteration  23: 348213.764 ops/s
# Warmup Iteration  24: 347383.799 ops/s
# Warmup Iteration  25: 341932.642 ops/s
# Warmup Iteration  26: 344714.508 ops/s
# Warmup Iteration  27: 337966.033 ops/s
# Warmup Iteration  28: 353534.400 ops/s
# Warmup Iteration  29: 342728.935 ops/s
# Warmup Iteration  30: 355985.766 ops/s
Iteration   1: 355174.688 ops/s
Iteration   2: 335548.321 ops/s
Iteration   3: 347145.771 ops/s
Iteration   4: 358624.742 ops/s
Iteration   5: 340256.693 ops/s
Iteration   6: 350106.933 ops/s
Iteration   7: 356848.490 ops/s
Iteration   8: 336935.438 ops/s
Iteration   9: 353557.730 ops/s
Iteration  10: 346443.051 ops/s
Iteration  11: 348156.965 ops/s
Iteration  12: 350039.510 ops/s
Iteration  13: 344622.385 ops/s
Iteration  14: 348832.570 ops/s
Iteration  15: 338279.584 ops/s
Iteration  16: 353785.972 ops/s
Iteration  17: 341565.032 ops/s
Iteration  18: 342610.342 ops/s
Iteration  19: 353738.756 ops/s
Iteration  20: 345262.003 ops/s
Iteration  21: 357240.666 ops/s
Iteration  22: 330518.535 ops/s
Iteration  23: 362444.414 ops/s
Iteration  24: 336916.357 ops/s
Iteration  25: 350432.162 ops/s
Iteration  26: 342337.572 ops/s
Iteration  27: 340069.732 ops/s
Iteration  28: 360320.736 ops/s
Iteration  29: 345868.381 ops/s
Iteration  30: 348198.455 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWithPredicateTest._Benchmark.benchmark_issue3008RetryWithPredicate":
  347396.066 ±(99.9%) 5325.417 ops/s [Average]
  (min, avg, max) = (330518.535, 347396.066, 362444.414), stdev = 7970.835
  CI (99.9%): [342070.649, 352721.484] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt       Score      Error  Units
FlowableRetryWithPredicateTest._Benchmark.benchmark_issue3008RetryWithPredicate  thrpt   30  347396.066 ± 5325.417  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_scanFunctionReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_scanFunctionReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 214383.374 ops/s
# Warmup Iteration   2: 389326.764 ops/s
# Warmup Iteration   3: 430151.152 ops/s
# Warmup Iteration   4: 430945.157 ops/s
# Warmup Iteration   5: 401893.485 ops/s
# Warmup Iteration   6: 449263.115 ops/s
# Warmup Iteration   7: 454811.447 ops/s
# Warmup Iteration   8: 472183.929 ops/s
# Warmup Iteration   9: 445925.767 ops/s
# Warmup Iteration  10: 443588.084 ops/s
# Warmup Iteration  11: 465823.398 ops/s
# Warmup Iteration  12: 443710.817 ops/s
# Warmup Iteration  13: 464557.554 ops/s
# Warmup Iteration  14: 445397.076 ops/s
# Warmup Iteration  15: 459516.239 ops/s
# Warmup Iteration  16: 380233.654 ops/s
# Warmup Iteration  17: 457712.277 ops/s
# Warmup Iteration  18: 482832.420 ops/s
# Warmup Iteration  19: 481950.844 ops/s
# Warmup Iteration  20: 461205.276 ops/s
# Warmup Iteration  21: 487345.592 ops/s
# Warmup Iteration  22: 463603.791 ops/s
# Warmup Iteration  23: 487644.824 ops/s
# Warmup Iteration  24: 486286.140 ops/s
# Warmup Iteration  25: 456078.429 ops/s
# Warmup Iteration  26: 486356.994 ops/s
# Warmup Iteration  27: 464274.240 ops/s
# Warmup Iteration  28: 482531.296 ops/s
# Warmup Iteration  29: 467816.131 ops/s
# Warmup Iteration  30: 468725.979 ops/s
Iteration   1: 484755.635 ops/s
Iteration   2: 456689.045 ops/s
Iteration   3: 489682.417 ops/s
Iteration   4: 451084.006 ops/s
Iteration   5: 474461.500 ops/s
Iteration   6: 483144.310 ops/s
Iteration   7: 471723.511 ops/s
Iteration   8: 490100.900 ops/s
Iteration   9: 469905.946 ops/s
Iteration  10: 495830.611 ops/s
Iteration  11: 469528.744 ops/s
Iteration  12: 473227.554 ops/s
Iteration  13: 495053.665 ops/s
Iteration  14: 464862.304 ops/s
Iteration  15: 460659.568 ops/s
Iteration  16: 481022.587 ops/s
Iteration  17: 471499.614 ops/s
Iteration  18: 478368.672 ops/s
Iteration  19: 470712.137 ops/s
Iteration  20: 481306.608 ops/s
Iteration  21: 462794.724 ops/s
Iteration  22: 479505.779 ops/s
Iteration  23: 477636.435 ops/s
Iteration  24: 468604.972 ops/s
Iteration  25: 485191.685 ops/s
Iteration  26: 473926.178 ops/s
Iteration  27: 469989.777 ops/s
Iteration  28: 497765.866 ops/s
Iteration  29: 452301.894 ops/s
Iteration  30: 489441.100 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_scanFunctionReturnsNull":
  475692.592 ±(99.9%) 8248.097 ops/s [Average]
  (min, avg, max) = (451084.006, 475692.592, 497765.866), stdev = 12345.365
  CI (99.9%): [467444.494, 483940.689] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
FlowableNullTests._Benchmark.benchmark_scanFunctionReturnsNull  thrpt   30  475692.592 ± 8248.097  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWithPredicateTest._Benchmark.benchmark_issue3008RetryInfinite$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWithPredicateTest._Benchmark.benchmark_issue3008RetryInfinite

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 71281.481 ops/s
# Warmup Iteration   2: 268940.449 ops/s
# Warmup Iteration   3: 320001.919 ops/s
# Warmup Iteration   4: 278176.030 ops/s
# Warmup Iteration   5: 334511.612 ops/s
# Warmup Iteration   6: 320395.944 ops/s
# Warmup Iteration   7: 329469.798 ops/s
# Warmup Iteration   8: 342866.212 ops/s
# Warmup Iteration   9: 324800.761 ops/s
# Warmup Iteration  10: 320110.711 ops/s
# Warmup Iteration  11: 336086.967 ops/s
# Warmup Iteration  12: 327451.815 ops/s
# Warmup Iteration  13: 330441.764 ops/s
# Warmup Iteration  14: 336770.408 ops/s
# Warmup Iteration  15: 319465.951 ops/s
# Warmup Iteration  16: 335222.852 ops/s
# Warmup Iteration  17: 330301.257 ops/s
# Warmup Iteration  18: 338573.677 ops/s
# Warmup Iteration  19: 342095.753 ops/s
# Warmup Iteration  20: 334414.183 ops/s
# Warmup Iteration  21: 341387.373 ops/s
# Warmup Iteration  22: 331205.340 ops/s
# Warmup Iteration  23: 344793.318 ops/s
# Warmup Iteration  24: 335947.608 ops/s
# Warmup Iteration  25: 341536.981 ops/s
# Warmup Iteration  26: 336828.224 ops/s
# Warmup Iteration  27: 344534.320 ops/s
# Warmup Iteration  28: 332841.191 ops/s
# Warmup Iteration  29: 341008.491 ops/s
# Warmup Iteration  30: 331014.683 ops/s
Iteration   1: 337698.343 ops/s
Iteration   2: 340204.917 ops/s
Iteration   3: 328211.567 ops/s
Iteration   4: 342118.757 ops/s
Iteration   5: 327572.468 ops/s
Iteration   6: 346701.134 ops/s
Iteration   7: 338145.895 ops/s
Iteration   8: 335309.798 ops/s
Iteration   9: 344938.034 ops/s
Iteration  10: 335438.713 ops/s
Iteration  11: 343771.029 ops/s
Iteration  12: 333750.480 ops/s
Iteration  13: 329476.188 ops/s
Iteration  14: 342913.405 ops/s
Iteration  15: 330224.636 ops/s
Iteration  16: 344686.710 ops/s
Iteration  17: 335694.251 ops/s
Iteration  18: 328026.117 ops/s
Iteration  19: 345111.037 ops/s
Iteration  20: 346959.443 ops/s
Iteration  21: 339904.315 ops/s
Iteration  22: 344316.637 ops/s
Iteration  23: 330518.039 ops/s
Iteration  24: 333288.510 ops/s
Iteration  25: 348286.689 ops/s
Iteration  26: 330653.095 ops/s
Iteration  27: 349923.046 ops/s
Iteration  28: 335032.815 ops/s
Iteration  29: 348833.849 ops/s
Iteration  30: 325912.897 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWithPredicateTest._Benchmark.benchmark_issue3008RetryInfinite":
  338120.761 ±(99.9%) 4882.229 ops/s [Average]
  (min, avg, max) = (325912.897, 338120.761, 349923.046), stdev = 7307.491
  CI (99.9%): [333238.531, 343002.990] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score      Error  Units
FlowableRetryWithPredicateTest._Benchmark.benchmark_issue3008RetryInfinite  thrpt   30  338120.761 ± 4882.229  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferTest._Benchmark.benchmark_noBackpressureSupport$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferTest._Benchmark.benchmark_noBackpressureSupport

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 35285.021 ops/s
# Warmup Iteration   2: 79049.449 ops/s
# Warmup Iteration   3: 96274.925 ops/s
# Warmup Iteration   4: 104557.223 ops/s
# Warmup Iteration   5: 109649.929 ops/s
# Warmup Iteration   6: 107867.013 ops/s
# Warmup Iteration   7: 104026.306 ops/s
# Warmup Iteration   8: 109685.165 ops/s
# Warmup Iteration   9: 105771.865 ops/s
# Warmup Iteration  10: 102471.046 ops/s
# Warmup Iteration  11: 91018.344 ops/s
# Warmup Iteration  12: 105502.167 ops/s
# Warmup Iteration  13: 102510.176 ops/s
# Warmup Iteration  14: 109327.083 ops/s
# Warmup Iteration  15: 103470.581 ops/s
# Warmup Iteration  16: 107500.171 ops/s
# Warmup Iteration  17: 111815.376 ops/s
# Warmup Iteration  18: 101523.180 ops/s
# Warmup Iteration  19: 108014.799 ops/s
# Warmup Iteration  20: 105252.584 ops/s
# Warmup Iteration  21: 105238.428 ops/s
# Warmup Iteration  22: 109303.451 ops/s
# Warmup Iteration  23: 102082.482 ops/s
# Warmup Iteration  24: 108587.498 ops/s
# Warmup Iteration  25: 104387.603 ops/s
# Warmup Iteration  26: 108130.500 ops/s
# Warmup Iteration  27: 106876.630 ops/s
# Warmup Iteration  28: 102335.429 ops/s
# Warmup Iteration  29: 109029.360 ops/s
# Warmup Iteration  30: 104468.583 ops/s
Iteration   1: 107143.028 ops/s
Iteration   2: 105149.395 ops/s
Iteration   3: 105575.484 ops/s
Iteration   4: 108317.523 ops/s
Iteration   5: 106251.645 ops/s
Iteration   6: 109171.948 ops/s
Iteration   7: 109725.761 ops/s
Iteration   8: 104172.922 ops/s
Iteration   9: 108398.918 ops/s
Iteration  10: 105530.306 ops/s
Iteration  11: 106822.713 ops/s
Iteration  12: 102857.922 ops/s
Iteration  13: 110150.794 ops/s
Iteration  14: 107657.046 ops/s
Iteration  15: 103547.829 ops/s
Iteration  16: 108973.151 ops/s
Iteration  17: 106160.608 ops/s
Iteration  18: 105874.403 ops/s
Iteration  19: 106944.892 ops/s
Iteration  20: 104643.424 ops/s
Iteration  21: 108908.465 ops/s
Iteration  22: 106291.608 ops/s
Iteration  23: 103484.779 ops/s
Iteration  24: 108348.671 ops/s
Iteration  25: 108013.033 ops/s
Iteration  26: 105294.708 ops/s
Iteration  27: 106046.039 ops/s
Iteration  28: 108361.448 ops/s
Iteration  29: 105870.929 ops/s
Iteration  30: 108105.068 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferTest._Benchmark.benchmark_noBackpressureSupport":
  106726.482 ±(99.9%) 1290.414 ops/s [Average]
  (min, avg, max) = (102857.922, 106726.482, 110150.794), stdev = 1931.431
  CI (99.9%): [105436.068, 108016.896] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt       Score      Error  Units
FlowableOnBackpressureBufferTest._Benchmark.benchmark_noBackpressureSupport  thrpt   30  106726.482 ± 1290.414  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupByTest._Benchmark.benchmark_badRequest$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupByTest._Benchmark.benchmark_badRequest

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 66720.197 ops/s
# Warmup Iteration   2: 106790.209 ops/s
# Warmup Iteration   3: 384576.062 ops/s
# Warmup Iteration   4: 401292.425 ops/s
# Warmup Iteration   5: 382344.890 ops/s
# Warmup Iteration   6: 440869.002 ops/s
# Warmup Iteration   7: 449346.583 ops/s
# Warmup Iteration   8: 461657.928 ops/s
# Warmup Iteration   9: 454662.902 ops/s
# Warmup Iteration  10: 438982.767 ops/s
# Warmup Iteration  11: 470362.174 ops/s
# Warmup Iteration  12: 435774.091 ops/s
# Warmup Iteration  13: 451528.378 ops/s
# Warmup Iteration  14: 442848.826 ops/s
# Warmup Iteration  15: 449149.156 ops/s
# Warmup Iteration  16: 448925.637 ops/s
# Warmup Iteration  17: 471235.126 ops/s
# Warmup Iteration  18: 457509.681 ops/s
# Warmup Iteration  19: 482956.286 ops/s
# Warmup Iteration  20: 480015.421 ops/s
# Warmup Iteration  21: 464151.018 ops/s
# Warmup Iteration  22: 462877.601 ops/s
# Warmup Iteration  23: 476217.794 ops/s
# Warmup Iteration  24: 452954.494 ops/s
# Warmup Iteration  25: 480093.961 ops/s
# Warmup Iteration  26: 461911.756 ops/s
# Warmup Iteration  27: 469004.643 ops/s
# Warmup Iteration  28: 468176.616 ops/s
# Warmup Iteration  29: 450324.294 ops/s
# Warmup Iteration  30: 482260.707 ops/s
Iteration   1: 457521.880 ops/s
Iteration   2: 451989.250 ops/s
Iteration   3: 488479.817 ops/s
Iteration   4: 463686.377 ops/s
Iteration   5: 461244.501 ops/s
Iteration   6: 467258.855 ops/s
Iteration   7: 471701.095 ops/s
Iteration   8: 491263.293 ops/s
Iteration   9: 464559.431 ops/s
Iteration  10: 455855.819 ops/s
Iteration  11: 458755.033 ops/s
Iteration  12: 468324.029 ops/s
Iteration  13: 463741.879 ops/s
Iteration  14: 470994.049 ops/s
Iteration  15: 448369.147 ops/s
Iteration  16: 476313.832 ops/s
Iteration  17: 465174.727 ops/s
Iteration  18: 472373.644 ops/s
Iteration  19: 476409.388 ops/s
Iteration  20: 458657.243 ops/s
Iteration  21: 463602.414 ops/s
Iteration  22: 462819.276 ops/s
Iteration  23: 474626.621 ops/s
Iteration  24: 463422.273 ops/s
Iteration  25: 473423.926 ops/s
Iteration  26: 466515.703 ops/s
Iteration  27: 467221.355 ops/s
Iteration  28: 478420.881 ops/s
Iteration  29: 464956.882 ops/s
Iteration  30: 462272.657 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupByTest._Benchmark.benchmark_badRequest":
  466998.509 ±(99.9%) 6302.559 ops/s [Average]
  (min, avg, max) = (448369.147, 466998.509, 491263.293), stdev = 9433.375
  CI (99.9%): [460695.950, 473301.069] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score      Error  Units
FlowableGroupByTest._Benchmark.benchmark_badRequest  thrpt   30  466998.509 ± 6302.559  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDelaySubscriptionTest._Benchmark.benchmark_timedTestScheduler$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDelaySubscriptionTest._Benchmark.benchmark_timedTestScheduler

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 332434.296 ops/s
# Warmup Iteration   2: 1388808.063 ops/s
# Warmup Iteration   3: 2097160.217 ops/s
# Warmup Iteration   4: 2079716.900 ops/s
# Warmup Iteration   5: 1942304.549 ops/s
# Warmup Iteration   6: 1906430.952 ops/s
# Warmup Iteration   7: 1972703.994 ops/s
# Warmup Iteration   8: 2085583.198 ops/s
# Warmup Iteration   9: 2062590.825 ops/s
# Warmup Iteration  10: 2060578.457 ops/s
# Warmup Iteration  11: 2031629.176 ops/s
# Warmup Iteration  12: 2093753.383 ops/s
# Warmup Iteration  13: 2165255.875 ops/s
# Warmup Iteration  14: 1982057.464 ops/s
# Warmup Iteration  15: 2115087.438 ops/s
# Warmup Iteration  16: 2030819.751 ops/s
# Warmup Iteration  17: 2068954.867 ops/s
# Warmup Iteration  18: 2127944.567 ops/s
# Warmup Iteration  19: 1792101.457 ops/s
# Warmup Iteration  20: 2043653.849 ops/s
# Warmup Iteration  21: 2138423.205 ops/s
# Warmup Iteration  22: 2014342.341 ops/s
# Warmup Iteration  23: 2015660.787 ops/s
# Warmup Iteration  24: 2147226.184 ops/s
# Warmup Iteration  25: 1995345.630 ops/s
# Warmup Iteration  26: 2039011.420 ops/s
# Warmup Iteration  27: 2057782.821 ops/s
# Warmup Iteration  28: 2071278.324 ops/s
# Warmup Iteration  29: 2106247.690 ops/s
# Warmup Iteration  30: 2030228.968 ops/s
Iteration   1: 2046138.632 ops/s
Iteration   2: 2118305.196 ops/s
Iteration   3: 2023198.742 ops/s
Iteration   4: 2080016.112 ops/s
Iteration   5: 2022455.507 ops/s
Iteration   6: 2006146.624 ops/s
Iteration   7: 2127582.103 ops/s
Iteration   8: 2048192.456 ops/s
Iteration   9: 2158612.183 ops/s
Iteration  10: 2042197.841 ops/s
Iteration  11: 2056386.469 ops/s
Iteration  12: 2136171.281 ops/s
Iteration  13: 2041799.235 ops/s
Iteration  14: 2092014.842 ops/s
Iteration  15: 2032361.956 ops/s
Iteration  16: 2022755.566 ops/s
Iteration  17: 2112463.452 ops/s
Iteration  18: 2027888.816 ops/s
Iteration  19: 2040774.228 ops/s
Iteration  20: 2098940.187 ops/s
Iteration  21: 2033736.156 ops/s
Iteration  22: 2031540.860 ops/s
Iteration  23: 2120251.703 ops/s
Iteration  24: 2057740.880 ops/s
Iteration  25: 2129252.353 ops/s
Iteration  26: 2029971.497 ops/s
Iteration  27: 2044187.014 ops/s
Iteration  28: 2079704.968 ops/s
Iteration  29: 2025465.120 ops/s
Iteration  30: 2122424.994 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelaySubscriptionTest._Benchmark.benchmark_timedTestScheduler":
  2066955.899 ±(99.9%) 28964.780 ops/s [Average]
  (min, avg, max) = (2006146.624, 2066955.899, 2158612.183), stdev = 43353.123
  CI (99.9%): [2037991.119, 2095920.679] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
MaybeDelaySubscriptionTest._Benchmark.benchmark_timedTestScheduler  thrpt   30  2066955.899 ± 28964.780  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybeTest._Benchmark.benchmark_undeliverableUponCancel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybeTest._Benchmark.benchmark_undeliverableUponCancel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 15766.064 ops/s
# Warmup Iteration   2: 109994.022 ops/s
# Warmup Iteration   3: 144376.774 ops/s
# Warmup Iteration   4: 165918.181 ops/s
# Warmup Iteration   5: 151000.043 ops/s
# Warmup Iteration   6: 170591.724 ops/s
# Warmup Iteration   7: 173419.603 ops/s
# Warmup Iteration   8: 172651.913 ops/s
# Warmup Iteration   9: 172898.935 ops/s
# Warmup Iteration  10: 179807.024 ops/s
# Warmup Iteration  11: 178537.836 ops/s
# Warmup Iteration  12: 172875.319 ops/s
# Warmup Iteration  13: 179131.572 ops/s
# Warmup Iteration  14: 172284.478 ops/s
# Warmup Iteration  15: 178861.405 ops/s
# Warmup Iteration  16: 173084.807 ops/s
# Warmup Iteration  17: 177728.350 ops/s
# Warmup Iteration  18: 184935.270 ops/s
# Warmup Iteration  19: 178125.454 ops/s
# Warmup Iteration  20: 175847.053 ops/s
# Warmup Iteration  21: 179542.392 ops/s
# Warmup Iteration  22: 184182.193 ops/s
# Warmup Iteration  23: 184091.556 ops/s
# Warmup Iteration  24: 181046.925 ops/s
# Warmup Iteration  25: 173064.736 ops/s
# Warmup Iteration  26: 181529.414 ops/s
# Warmup Iteration  27: 180711.017 ops/s
# Warmup Iteration  28: 181470.247 ops/s
# Warmup Iteration  29: 178148.793 ops/s
# Warmup Iteration  30: 179801.400 ops/s
Iteration   1: 184592.898 ops/s
Iteration   2: 174329.082 ops/s
Iteration   3: 175834.930 ops/s
Iteration   4: 181314.835 ops/s
Iteration   5: 176534.420 ops/s
Iteration   6: 182981.195 ops/s
Iteration   7: 178214.689 ops/s
Iteration   8: 179583.660 ops/s
Iteration   9: 178196.894 ops/s
Iteration  10: 186260.161 ops/s
Iteration  11: 182885.609 ops/s
Iteration  12: 179060.234 ops/s
Iteration  13: 185930.509 ops/s
Iteration  14: 175655.386 ops/s
Iteration  15: 175851.111 ops/s
Iteration  16: 176861.449 ops/s
Iteration  17: 175568.269 ops/s
Iteration  18: 180831.514 ops/s
Iteration  19: 186240.641 ops/s
Iteration  20: 174106.053 ops/s
Iteration  21: 184922.921 ops/s
Iteration  22: 173958.762 ops/s
Iteration  23: 182967.875 ops/s
Iteration  24: 174707.640 ops/s
Iteration  25: 183035.005 ops/s
Iteration  26: 176737.795 ops/s
Iteration  27: 173108.094 ops/s
Iteration  28: 177697.045 ops/s
Iteration  29: 176055.337 ops/s
Iteration  30: 178731.131 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybeTest._Benchmark.benchmark_undeliverableUponCancel":
  179091.838 ±(99.9%) 2735.068 ops/s [Average]
  (min, avg, max) = (173108.094, 179091.838, 186260.161), stdev = 4093.721
  CI (99.9%): [176356.770, 181826.906] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score      Error  Units
FlowableMergeWithMaybeTest._Benchmark.benchmark_undeliverableUponCancel  thrpt   30  179091.838 ± 2735.068  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherTest._Benchmark.benchmark_errorWithOnComplete$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherTest._Benchmark.benchmark_errorWithOnComplete

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 63551.077 ops/s
# Warmup Iteration   2: 420925.924 ops/s
# Warmup Iteration   3: 565864.902 ops/s
# Warmup Iteration   4: 576404.054 ops/s
# Warmup Iteration   5: 585849.113 ops/s
# Warmup Iteration   6: 564097.063 ops/s
# Warmup Iteration   7: 643181.861 ops/s
# Warmup Iteration   8: 609541.158 ops/s
# Warmup Iteration   9: 646207.240 ops/s
# Warmup Iteration  10: 653017.426 ops/s
# Warmup Iteration  11: 646103.909 ops/s
# Warmup Iteration  12: 617577.837 ops/s
# Warmup Iteration  13: 652883.906 ops/s
# Warmup Iteration  14: 622072.495 ops/s
# Warmup Iteration  15: 635204.288 ops/s
# Warmup Iteration  16: 614996.548 ops/s
# Warmup Iteration  17: 665793.985 ops/s
# Warmup Iteration  18: 684171.226 ops/s
# Warmup Iteration  19: 666318.110 ops/s
# Warmup Iteration  20: 690740.725 ops/s
# Warmup Iteration  21: 649970.269 ops/s
# Warmup Iteration  22: 677416.777 ops/s
# Warmup Iteration  23: 677542.514 ops/s
# Warmup Iteration  24: 657416.622 ops/s
# Warmup Iteration  25: 668927.916 ops/s
# Warmup Iteration  26: 650660.759 ops/s
# Warmup Iteration  27: 655077.345 ops/s
# Warmup Iteration  28: 660046.041 ops/s
# Warmup Iteration  29: 647980.028 ops/s
# Warmup Iteration  30: 677781.880 ops/s
Iteration   1: 669032.996 ops/s
Iteration   2: 678454.476 ops/s
Iteration   3: 665715.740 ops/s
Iteration   4: 650140.952 ops/s
Iteration   5: 678297.683 ops/s
Iteration   6: 659973.225 ops/s
Iteration   7: 677078.783 ops/s
Iteration   8: 664854.684 ops/s
Iteration   9: 682451.886 ops/s
Iteration  10: 654129.830 ops/s
Iteration  11: 659846.333 ops/s
Iteration  12: 696835.786 ops/s
Iteration  13: 643576.805 ops/s
Iteration  14: 681594.320 ops/s
Iteration  15: 652222.077 ops/s
Iteration  16: 665214.452 ops/s
Iteration  17: 678942.929 ops/s
Iteration  18: 662618.437 ops/s
Iteration  19: 672952.635 ops/s
Iteration  20: 668112.006 ops/s
Iteration  21: 659606.807 ops/s
Iteration  22: 662892.750 ops/s
Iteration  23: 655327.117 ops/s
Iteration  24: 686555.914 ops/s
Iteration  25: 686541.006 ops/s
Iteration  26: 647064.472 ops/s
Iteration  27: 694307.232 ops/s
Iteration  28: 648930.125 ops/s
Iteration  29: 667218.584 ops/s
Iteration  30: 651762.486 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherTest._Benchmark.benchmark_errorWithOnComplete":
  667408.418 ±(99.9%) 9530.300 ops/s [Average]
  (min, avg, max) = (643576.805, 667408.418, 696835.786), stdev = 14264.505
  CI (99.9%): [657878.118, 676938.717] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
MaybeDelayOtherTest._Benchmark.benchmark_errorWithOnComplete  thrpt   30  667408.418 ± 9530.300  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowableTest._Benchmark.benchmark_manyBackpressured2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowableTest._Benchmark.benchmark_manyBackpressured2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 14199.385 ops/s
# Warmup Iteration   2: 296883.390 ops/s
# Warmup Iteration   3: 630886.541 ops/s
# Warmup Iteration   4: 956916.718 ops/s
# Warmup Iteration   5: 925125.323 ops/s
# Warmup Iteration   6: 1065554.748 ops/s
# Warmup Iteration   7: 1076498.549 ops/s
# Warmup Iteration   8: 1078819.863 ops/s
# Warmup Iteration   9: 1067954.973 ops/s
# Warmup Iteration  10: 1054263.849 ops/s
# Warmup Iteration  11: 1059955.112 ops/s
# Warmup Iteration  12: 1108323.110 ops/s
# Warmup Iteration  13: 1044484.328 ops/s
# Warmup Iteration  14: 1100091.631 ops/s
# Warmup Iteration  15: 1068635.086 ops/s
# Warmup Iteration  16: 1081234.328 ops/s
# Warmup Iteration  17: 1089517.037 ops/s
# Warmup Iteration  18: 1071665.735 ops/s
# Warmup Iteration  19: 1075432.099 ops/s
# Warmup Iteration  20: 1123446.569 ops/s
# Warmup Iteration  21: 1102145.444 ops/s
# Warmup Iteration  22: 1066536.959 ops/s
# Warmup Iteration  23: 1114473.029 ops/s
# Warmup Iteration  24: 1065461.675 ops/s
# Warmup Iteration  25: 1096075.993 ops/s
# Warmup Iteration  26: 1067457.199 ops/s
# Warmup Iteration  27: 1114514.433 ops/s
# Warmup Iteration  28: 1075391.885 ops/s
# Warmup Iteration  29: 1062847.780 ops/s
# Warmup Iteration  30: 1142020.093 ops/s
Iteration   1: 1051630.815 ops/s
Iteration   2: 1091032.467 ops/s
Iteration   3: 1057321.449 ops/s
Iteration   4: 1107985.740 ops/s
Iteration   5: 1082759.926 ops/s
Iteration   6: 1058535.577 ops/s
Iteration   7: 1092900.784 ops/s
Iteration   8: 1066628.971 ops/s
Iteration   9: 1123445.043 ops/s
Iteration  10: 1063514.913 ops/s
Iteration  11: 1084064.797 ops/s
Iteration  12: 1094049.740 ops/s
Iteration  13: 1057451.529 ops/s
Iteration  14: 1089947.918 ops/s
Iteration  15: 1077320.309 ops/s
Iteration  16: 1086250.524 ops/s
Iteration  17: 1100110.033 ops/s
Iteration  18: 1081574.472 ops/s
Iteration  19: 1090472.105 ops/s
Iteration  20: 1118578.756 ops/s
Iteration  21: 1049058.838 ops/s
Iteration  22: 1110581.727 ops/s
Iteration  23: 1065843.210 ops/s
Iteration  24: 1123564.566 ops/s
Iteration  25: 1044489.374 ops/s
Iteration  26: 1090190.648 ops/s
Iteration  27: 871997.891 ops/s
Iteration  28: 1067965.600 ops/s
Iteration  29: 1050099.262 ops/s
Iteration  30: 1102312.944 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowableTest._Benchmark.benchmark_manyBackpressured2":
  1075055.998 ±(99.9%) 29748.126 ops/s [Average]
  (min, avg, max) = (871997.891, 1075055.998, 1123564.566), stdev = 44525.597
  CI (99.9%): [1045307.872, 1104804.123] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score       Error  Units
MaybeFlattenStreamAsFlowableTest._Benchmark.benchmark_manyBackpressured2  thrpt   30  1075055.998 ± 29748.126  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromTest._Benchmark.benchmark_otherErrors$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromTest._Benchmark.benchmark_otherErrors

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 24225.543 ops/s
# Warmup Iteration   2: 103369.872 ops/s
# Warmup Iteration   3: 147280.711 ops/s
# Warmup Iteration   4: 158387.827 ops/s
# Warmup Iteration   5: 163871.379 ops/s
# Warmup Iteration   6: 155032.935 ops/s
# Warmup Iteration   7: 163870.014 ops/s
# Warmup Iteration   8: 160490.622 ops/s
# Warmup Iteration   9: 151658.585 ops/s
# Warmup Iteration  10: 158639.427 ops/s
# Warmup Iteration  11: 160081.175 ops/s
# Warmup Iteration  12: 160623.270 ops/s
# Warmup Iteration  13: 162745.562 ops/s
# Warmup Iteration  14: 155507.888 ops/s
# Warmup Iteration  15: 162353.944 ops/s
# Warmup Iteration  16: 156166.430 ops/s
# Warmup Iteration  17: 174515.575 ops/s
# Warmup Iteration  18: 160117.230 ops/s
# Warmup Iteration  19: 165946.766 ops/s
# Warmup Iteration  20: 172135.960 ops/s
# Warmup Iteration  21: 161429.018 ops/s
# Warmup Iteration  22: 167354.602 ops/s
# Warmup Iteration  23: 166335.852 ops/s
# Warmup Iteration  24: 165960.018 ops/s
# Warmup Iteration  25: 170583.590 ops/s
# Warmup Iteration  26: 159349.631 ops/s
# Warmup Iteration  27: 167209.113 ops/s
# Warmup Iteration  28: 163852.036 ops/s
# Warmup Iteration  29: 172914.433 ops/s
# Warmup Iteration  30: 159844.219 ops/s
Iteration   1: 169087.292 ops/s
Iteration   2: 166226.139 ops/s
Iteration   3: 170513.677 ops/s
Iteration   4: 165987.447 ops/s
Iteration   5: 161742.710 ops/s
Iteration   6: 166329.184 ops/s
Iteration   7: 166361.015 ops/s
Iteration   8: 169579.821 ops/s
Iteration   9: 165642.807 ops/s
Iteration  10: 162991.851 ops/s
Iteration  11: 169616.756 ops/s
Iteration  12: 161752.210 ops/s
Iteration  13: 162274.414 ops/s
Iteration  14: 165170.427 ops/s
Iteration  15: 160851.936 ops/s
Iteration  16: 160241.901 ops/s
Iteration  17: 165417.943 ops/s
Iteration  18: 160906.115 ops/s
Iteration  19: 152405.043 ops/s
Iteration  20: 169418.038 ops/s
Iteration  21: 162312.552 ops/s
Iteration  22: 168533.295 ops/s
Iteration  23: 166273.177 ops/s
Iteration  24: 164162.410 ops/s
Iteration  25: 173331.082 ops/s
Iteration  26: 164605.345 ops/s
Iteration  27: 168825.788 ops/s
Iteration  28: 167353.922 ops/s
Iteration  29: 168862.061 ops/s
Iteration  30: 167724.722 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromTest._Benchmark.benchmark_otherErrors":
  165483.369 ±(99.9%) 2747.951 ops/s [Average]
  (min, avg, max) = (152405.043, 165483.369, 173331.082), stdev = 4113.004
  CI (99.9%): [162735.418, 168231.320] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
FlowableWithLatestFromTest._Benchmark.benchmark_otherErrors  thrpt   30  165483.369 ± 2747.951  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_emptyHidden$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_emptyHidden

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 277066.780 ops/s
# Warmup Iteration   2: 1069999.712 ops/s
# Warmup Iteration   3: 1529716.262 ops/s
# Warmup Iteration   4: 1717351.305 ops/s
# Warmup Iteration   5: 2038880.054 ops/s
# Warmup Iteration   6: 1938231.328 ops/s
# Warmup Iteration   7: 1956451.079 ops/s
# Warmup Iteration   8: 1985999.047 ops/s
# Warmup Iteration   9: 1983383.814 ops/s
# Warmup Iteration  10: 1972143.594 ops/s
# Warmup Iteration  11: 1892947.146 ops/s
# Warmup Iteration  12: 2037501.395 ops/s
# Warmup Iteration  13: 1952505.265 ops/s
# Warmup Iteration  14: 2035239.743 ops/s
# Warmup Iteration  15: 1967996.734 ops/s
# Warmup Iteration  16: 1967678.988 ops/s
# Warmup Iteration  17: 1972301.219 ops/s
# Warmup Iteration  18: 1901160.749 ops/s
# Warmup Iteration  19: 2005306.618 ops/s
# Warmup Iteration  20: 2075278.677 ops/s
# Warmup Iteration  21: 1907095.672 ops/s
# Warmup Iteration  22: 2037614.743 ops/s
# Warmup Iteration  23: 1938120.811 ops/s
# Warmup Iteration  24: 2002019.302 ops/s
# Warmup Iteration  25: 1919805.990 ops/s
# Warmup Iteration  26: 1994616.645 ops/s
# Warmup Iteration  27: 2002646.306 ops/s
# Warmup Iteration  28: 1970952.702 ops/s
# Warmup Iteration  29: 2015711.116 ops/s
# Warmup Iteration  30: 1904251.510 ops/s
Iteration   1: 2024107.326 ops/s
Iteration   2: 2061351.303 ops/s
Iteration   3: 1926824.488 ops/s
Iteration   4: 1989175.869 ops/s
Iteration   5: 1912484.802 ops/s
Iteration   6: 1971215.095 ops/s
Iteration   7: 1949948.050 ops/s
Iteration   8: 1941032.416 ops/s
Iteration   9: 2003460.292 ops/s
Iteration  10: 1890655.611 ops/s
Iteration  11: 1928716.459 ops/s
Iteration  12: 2057904.954 ops/s
Iteration  13: 1956589.021 ops/s
Iteration  14: 1935844.581 ops/s
Iteration  15: 2004376.788 ops/s
Iteration  16: 1967319.543 ops/s
Iteration  17: 2025954.816 ops/s
Iteration  18: 1889738.298 ops/s
Iteration  19: 1991811.252 ops/s
Iteration  20: 2026516.688 ops/s
Iteration  21: 1892898.774 ops/s
Iteration  22: 1661254.792 ops/s
Iteration  23: 1910633.860 ops/s
Iteration  24: 2003147.100 ops/s
Iteration  25: 1881349.115 ops/s
Iteration  26: 1979583.872 ops/s
Iteration  27: 1940403.325 ops/s
Iteration  28: 1965496.569 ops/s
Iteration  29: 2021980.430 ops/s
Iteration  30: 1932283.994 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_emptyHidden":
  1954801.983 ±(99.9%) 50029.840 ops/s [Average]
  (min, avg, max) = (1661254.792, 1954801.983, 2061351.303), stdev = 74882.315
  CI (99.9%): [1904772.142, 2004831.823] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
FlowablePublishTest._Benchmark.benchmark_emptyHidden  thrpt   30  1954801.983 ± 50029.840  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_bufferBoundarySupplierReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_bufferBoundarySupplierReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 180923.631 ops/s
# Warmup Iteration   2: 475751.630 ops/s
# Warmup Iteration   3: 495999.984 ops/s
# Warmup Iteration   4: 538858.337 ops/s
# Warmup Iteration   5: 571200.315 ops/s
# Warmup Iteration   6: 570823.010 ops/s
# Warmup Iteration   7: 540015.952 ops/s
# Warmup Iteration   8: 542770.749 ops/s
# Warmup Iteration   9: 543609.226 ops/s
# Warmup Iteration  10: 557820.323 ops/s
# Warmup Iteration  11: 543246.551 ops/s
# Warmup Iteration  12: 535229.135 ops/s
# Warmup Iteration  13: 548993.935 ops/s
# Warmup Iteration  14: 533369.311 ops/s
# Warmup Iteration  15: 543374.967 ops/s
# Warmup Iteration  16: 536464.812 ops/s
# Warmup Iteration  17: 569459.761 ops/s
# Warmup Iteration  18: 582361.305 ops/s
# Warmup Iteration  19: 564465.542 ops/s
# Warmup Iteration  20: 570735.085 ops/s
# Warmup Iteration  21: 601696.867 ops/s
# Warmup Iteration  22: 572839.557 ops/s
# Warmup Iteration  23: 599321.746 ops/s
# Warmup Iteration  24: 552165.331 ops/s
# Warmup Iteration  25: 591968.742 ops/s
# Warmup Iteration  26: 559255.090 ops/s
# Warmup Iteration  27: 586302.432 ops/s
# Warmup Iteration  28: 577501.301 ops/s
# Warmup Iteration  29: 539247.586 ops/s
# Warmup Iteration  30: 580175.916 ops/s
Iteration   1: 572374.638 ops/s
Iteration   2: 584745.473 ops/s
Iteration   3: 562606.570 ops/s
Iteration   4: 572059.295 ops/s
Iteration   5: 593792.899 ops/s
Iteration   6: 561414.929 ops/s
Iteration   7: 587197.363 ops/s
Iteration   8: 561715.519 ops/s
Iteration   9: 573653.605 ops/s
Iteration  10: 564450.226 ops/s
Iteration  11: 558983.787 ops/s
Iteration  12: 564904.732 ops/s
Iteration  13: 564656.084 ops/s
Iteration  14: 570350.048 ops/s
Iteration  15: 569917.912 ops/s
Iteration  16: 555860.651 ops/s
Iteration  17: 591697.977 ops/s
Iteration  18: 567707.705 ops/s
Iteration  19: 596675.452 ops/s
Iteration  20: 554348.537 ops/s
Iteration  21: 583757.636 ops/s
Iteration  22: 549811.164 ops/s
Iteration  23: 581251.978 ops/s
Iteration  24: 575955.601 ops/s
Iteration  25: 575909.268 ops/s
Iteration  26: 554996.937 ops/s
Iteration  27: 568044.776 ops/s
Iteration  28: 595678.787 ops/s
Iteration  29: 560647.035 ops/s
Iteration  30: 584239.173 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_bufferBoundarySupplierReturnsNull":
  571980.192 ±(99.9%) 8767.143 ops/s [Average]
  (min, avg, max) = (549811.164, 571980.192, 596675.452), stdev = 13122.248
  CI (99.9%): [563213.049, 580747.335] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score      Error  Units
FlowableNullTests._Benchmark.benchmark_bufferBoundarySupplierReturnsNull  thrpt   30  571980.192 ± 8767.143  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.CompletableAndThenPublisherTest._Benchmark.benchmark_cancelOther$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.CompletableAndThenPublisherTest._Benchmark.benchmark_cancelOther

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 279737.757 ops/s
# Warmup Iteration   2: 1720467.529 ops/s
# Warmup Iteration   3: 2118561.989 ops/s
# Warmup Iteration   4: 2461815.167 ops/s
# Warmup Iteration   5: 2566719.337 ops/s
# Warmup Iteration   6: 2509096.449 ops/s
# Warmup Iteration   7: 2600852.256 ops/s
# Warmup Iteration   8: 2548656.700 ops/s
# Warmup Iteration   9: 2613109.066 ops/s
# Warmup Iteration  10: 2583720.764 ops/s
# Warmup Iteration  11: 2525881.597 ops/s
# Warmup Iteration  12: 2627255.474 ops/s
# Warmup Iteration  13: 2519415.312 ops/s
# Warmup Iteration  14: 2594174.164 ops/s
# Warmup Iteration  15: 2532620.525 ops/s
# Warmup Iteration  16: 2568046.239 ops/s
# Warmup Iteration  17: 2614460.109 ops/s
# Warmup Iteration  18: 2530544.538 ops/s
# Warmup Iteration  19: 2698334.415 ops/s
# Warmup Iteration  20: 2595808.536 ops/s
# Warmup Iteration  21: 2660359.578 ops/s
# Warmup Iteration  22: 2490487.165 ops/s
# Warmup Iteration  23: 2589110.963 ops/s
# Warmup Iteration  24: 2611391.997 ops/s
# Warmup Iteration  25: 2509472.079 ops/s
# Warmup Iteration  26: 2538876.183 ops/s
# Warmup Iteration  27: 2545742.739 ops/s
# Warmup Iteration  28: 2600136.404 ops/s
# Warmup Iteration  29: 2480751.399 ops/s
# Warmup Iteration  30: 2518183.610 ops/s
Iteration   1: 2647980.492 ops/s
Iteration   2: 2540301.162 ops/s
Iteration   3: 2597365.693 ops/s
Iteration   4: 2558669.479 ops/s
Iteration   5: 2644149.142 ops/s
Iteration   6: 2538374.981 ops/s
Iteration   7: 2611592.882 ops/s
Iteration   8: 2628915.246 ops/s
Iteration   9: 2563981.472 ops/s
Iteration  10: 2618631.527 ops/s
Iteration  11: 2538274.342 ops/s
Iteration  12: 2617805.201 ops/s
Iteration  13: 2638336.468 ops/s
Iteration  14: 2566423.903 ops/s
Iteration  15: 2549959.711 ops/s
Iteration  16: 1904628.244 ops/s
Iteration  17: 2619771.828 ops/s
Iteration  18: 2596717.352 ops/s
Iteration  19: 2540408.798 ops/s
Iteration  20: 2584431.642 ops/s
Iteration  21: 2584349.971 ops/s
Iteration  22: 2613552.123 ops/s
Iteration  23: 2552441.937 ops/s
Iteration  24: 2610644.575 ops/s
Iteration  25: 2652769.948 ops/s
Iteration  26: 2503832.905 ops/s
Iteration  27: 2611781.759 ops/s
Iteration  28: 2608370.434 ops/s
Iteration  29: 2584123.137 ops/s
Iteration  30: 2677325.197 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.CompletableAndThenPublisherTest._Benchmark.benchmark_cancelOther":
  2570197.052 ±(99.9%) 88386.362 ops/s [Average]
  (min, avg, max) = (1904628.244, 2570197.052, 2677325.197), stdev = 132292.556
  CI (99.9%): [2481810.689, 2658583.414] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
CompletableAndThenPublisherTest._Benchmark.benchmark_cancelOther  thrpt   30  2570197.052 ± 88386.362  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterableTest._Benchmark.benchmark_noBackpressure$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterableTest._Benchmark.benchmark_noBackpressure

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 617338.665 ops/s
# Warmup Iteration   2: 2322349.026 ops/s
# Warmup Iteration   3: 3180602.486 ops/s
# Warmup Iteration   4: 3533033.759 ops/s
# Warmup Iteration   5: 3766277.711 ops/s
# Warmup Iteration   6: 3549556.410 ops/s
# Warmup Iteration   7: 3708623.041 ops/s
# Warmup Iteration   8: 3578616.248 ops/s
# Warmup Iteration   9: 3580082.507 ops/s
# Warmup Iteration  10: 3648785.380 ops/s
# Warmup Iteration  11: 3683591.902 ops/s
# Warmup Iteration  12: 3766195.506 ops/s
# Warmup Iteration  13: 3765965.433 ops/s
# Warmup Iteration  14: 3508625.348 ops/s
# Warmup Iteration  15: 3718479.114 ops/s
# Warmup Iteration  16: 3626142.553 ops/s
# Warmup Iteration  17: 3645544.866 ops/s
# Warmup Iteration  18: 3629352.739 ops/s
# Warmup Iteration  19: 3686547.073 ops/s
# Warmup Iteration  20: 3724971.260 ops/s
# Warmup Iteration  21: 3582415.385 ops/s
# Warmup Iteration  22: 3737743.883 ops/s
# Warmup Iteration  23: 3669064.626 ops/s
# Warmup Iteration  24: 3604664.871 ops/s
# Warmup Iteration  25: 3741827.446 ops/s
# Warmup Iteration  26: 3564849.054 ops/s
# Warmup Iteration  27: 3678672.268 ops/s
# Warmup Iteration  28: 3718114.133 ops/s
# Warmup Iteration  29: 3640168.046 ops/s
# Warmup Iteration  30: 3718355.224 ops/s
Iteration   1: 3699892.485 ops/s
Iteration   2: 3670970.378 ops/s
Iteration   3: 3707147.267 ops/s
Iteration   4: 3632972.920 ops/s
Iteration   5: 3711462.739 ops/s
Iteration   6: 3608902.879 ops/s
Iteration   7: 3822999.047 ops/s
Iteration   8: 3567936.596 ops/s
Iteration   9: 3823944.388 ops/s
Iteration  10: 3623015.730 ops/s
Iteration  11: 3701113.399 ops/s
Iteration  12: 3662872.529 ops/s
Iteration  13: 3560937.540 ops/s
Iteration  14: 3764069.304 ops/s
Iteration  15: 3596987.466 ops/s
Iteration  16: 3696634.345 ops/s
Iteration  17: 3704592.616 ops/s
Iteration  18: 3595690.352 ops/s
Iteration  19: 3693146.012 ops/s
Iteration  20: 3618036.614 ops/s
Iteration  21: 3798366.327 ops/s
Iteration  22: 3748756.656 ops/s
Iteration  23: 3584934.109 ops/s
Iteration  24: 3778805.910 ops/s
Iteration  25: 3624853.223 ops/s
Iteration  26: 3771691.517 ops/s
Iteration  27: 3634260.489 ops/s
Iteration  28: 3633762.179 ops/s
Iteration  29: 3746100.823 ops/s
Iteration  30: 3577280.914 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterableTest._Benchmark.benchmark_noBackpressure":
  3678737.892 ±(99.9%) 51961.018 ops/s [Average]
  (min, avg, max) = (3560937.540, 3678737.892, 3823944.388), stdev = 77772.811
  CI (99.9%): [3626776.874, 3730698.910] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
FlowableFromIterableTest._Benchmark.benchmark_noBackpressure  thrpt   30  3678737.892 ± 51961.018  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterableTest._Benchmark.benchmark_hasNextCancels$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterableTest._Benchmark.benchmark_hasNextCancels

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 803712.220 ops/s
# Warmup Iteration   2: 2751695.667 ops/s
# Warmup Iteration   3: 4611648.451 ops/s
# Warmup Iteration   4: 4363235.873 ops/s
# Warmup Iteration   5: 4391365.569 ops/s
# Warmup Iteration   6: 4374008.269 ops/s
# Warmup Iteration   7: 4399470.545 ops/s
# Warmup Iteration   8: 4524246.374 ops/s
# Warmup Iteration   9: 4213849.513 ops/s
# Warmup Iteration  10: 4551994.055 ops/s
# Warmup Iteration  11: 4465552.622 ops/s
# Warmup Iteration  12: 3846564.277 ops/s
# Warmup Iteration  13: 4605781.119 ops/s
# Warmup Iteration  14: 4314834.682 ops/s
# Warmup Iteration  15: 4428296.919 ops/s
# Warmup Iteration  16: 4474265.704 ops/s
# Warmup Iteration  17: 4484187.161 ops/s
# Warmup Iteration  18: 4279180.061 ops/s
# Warmup Iteration  19: 4660900.878 ops/s
# Warmup Iteration  20: 4316147.602 ops/s
# Warmup Iteration  21: 4485733.246 ops/s
# Warmup Iteration  22: 4416572.986 ops/s
# Warmup Iteration  23: 4400027.017 ops/s
# Warmup Iteration  24: 4402568.381 ops/s
# Warmup Iteration  25: 4569992.938 ops/s
# Warmup Iteration  26: 4269262.276 ops/s
# Warmup Iteration  27: 4614843.441 ops/s
# Warmup Iteration  28: 4336835.829 ops/s
# Warmup Iteration  29: 4591539.799 ops/s
# Warmup Iteration  30: 4350967.936 ops/s
Iteration   1: 4486408.364 ops/s
Iteration   2: 4395451.172 ops/s
Iteration   3: 4606927.514 ops/s
Iteration   4: 4216392.769 ops/s
Iteration   5: 4625913.933 ops/s
Iteration   6: 4401332.756 ops/s
Iteration   7: 4435680.268 ops/s
Iteration   8: 4398933.822 ops/s
Iteration   9: 4365707.018 ops/s
Iteration  10: 4063482.166 ops/s
Iteration  11: 3951581.113 ops/s
Iteration  12: 4439025.154 ops/s
Iteration  13: 4513848.936 ops/s
Iteration  14: 4391358.336 ops/s
Iteration  15: 4398985.435 ops/s
Iteration  16: 4503561.607 ops/s
Iteration  17: 4417506.161 ops/s
Iteration  18: 4481151.445 ops/s
Iteration  19: 4363557.817 ops/s
Iteration  20: 4381786.836 ops/s
Iteration  21: 4517956.830 ops/s
Iteration  22: 4507301.938 ops/s
Iteration  23: 4513184.087 ops/s
Iteration  24: 4359409.675 ops/s
Iteration  25: 4519793.654 ops/s
Iteration  26: 4483190.393 ops/s
Iteration  27: 4415667.925 ops/s
Iteration  28: 4354652.628 ops/s
Iteration  29: 4482924.679 ops/s
Iteration  30: 4572177.348 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterableTest._Benchmark.benchmark_hasNextCancels":
  4418828.393 ±(99.9%) 94078.320 ops/s [Average]
  (min, avg, max) = (3951581.113, 4418828.393, 4625913.933), stdev = 140812.011
  CI (99.9%): [4324750.073, 4512906.713] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
FlowableFromIterableTest._Benchmark.benchmark_hasNextCancels  thrpt   30  4418828.393 ± 94078.320  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterableTest._Benchmark.benchmark_fusionRejected$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterableTest._Benchmark.benchmark_fusionRejected

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 582503.235 ops/s
# Warmup Iteration   2: 2524433.877 ops/s
# Warmup Iteration   3: 3469044.749 ops/s
# Warmup Iteration   4: 4280346.806 ops/s
# Warmup Iteration   5: 4060212.458 ops/s
# Warmup Iteration   6: 4173201.612 ops/s
# Warmup Iteration   7: 4039512.292 ops/s
# Warmup Iteration   8: 4039689.134 ops/s
# Warmup Iteration   9: 4219173.212 ops/s
# Warmup Iteration  10: 4041999.247 ops/s
# Warmup Iteration  11: 4067216.826 ops/s
# Warmup Iteration  12: 4181675.969 ops/s
# Warmup Iteration  13: 4082668.675 ops/s
# Warmup Iteration  14: 4297561.184 ops/s
# Warmup Iteration  15: 3954220.134 ops/s
# Warmup Iteration  16: 4164993.972 ops/s
# Warmup Iteration  17: 4332104.186 ops/s
# Warmup Iteration  18: 4051754.909 ops/s
# Warmup Iteration  19: 4206765.130 ops/s
# Warmup Iteration  20: 4132139.157 ops/s
# Warmup Iteration  21: 4278926.927 ops/s
# Warmup Iteration  22: 4108039.375 ops/s
# Warmup Iteration  23: 4233807.148 ops/s
# Warmup Iteration  24: 4149762.467 ops/s
# Warmup Iteration  25: 3958620.290 ops/s
# Warmup Iteration  26: 4205640.747 ops/s
# Warmup Iteration  27: 3957347.972 ops/s
# Warmup Iteration  28: 4144496.307 ops/s
# Warmup Iteration  29: 4246055.995 ops/s
# Warmup Iteration  30: 4138343.485 ops/s
Iteration   1: 4112547.634 ops/s
Iteration   2: 4071527.053 ops/s
Iteration   3: 4304194.433 ops/s
Iteration   4: 4257356.945 ops/s
Iteration   5: 4080110.420 ops/s
Iteration   6: 4225719.648 ops/s
Iteration   7: 4120208.677 ops/s
Iteration   8: 4036293.916 ops/s
Iteration   9: 4195298.608 ops/s
Iteration  10: 3982516.644 ops/s
Iteration  11: 4350686.136 ops/s
Iteration  12: 4119174.886 ops/s
Iteration  13: 4259930.580 ops/s
Iteration  14: 4108918.093 ops/s
Iteration  15: 4109652.282 ops/s
Iteration  16: 4309968.755 ops/s
Iteration  17: 4064939.907 ops/s
Iteration  18: 4278422.161 ops/s
Iteration  19: 4158213.454 ops/s
Iteration  20: 4188152.887 ops/s
Iteration  21: 4181657.422 ops/s
Iteration  22: 4149284.688 ops/s
Iteration  23: 4325705.732 ops/s
Iteration  24: 3985012.026 ops/s
Iteration  25: 4246999.483 ops/s
Iteration  26: 4080403.704 ops/s
Iteration  27: 4169876.663 ops/s
Iteration  28: 4226348.602 ops/s
Iteration  29: 4070242.693 ops/s
Iteration  30: 4263365.371 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterableTest._Benchmark.benchmark_fusionRejected":
  4167757.650 ±(99.9%) 67292.366 ops/s [Average]
  (min, avg, max) = (3982516.644, 4167757.650, 4350686.136), stdev = 100720.053
  CI (99.9%): [4100465.284, 4235050.016] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
FlowableFromIterableTest._Benchmark.benchmark_fusionRejected  thrpt   30  4167757.650 ± 67292.366  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_fromIterableValueNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_fromIterableValueNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 267557.734 ops/s
# Warmup Iteration   2: 522599.664 ops/s
# Warmup Iteration   3: 557560.624 ops/s
# Warmup Iteration   4: 614501.835 ops/s
# Warmup Iteration   5: 602770.409 ops/s
# Warmup Iteration   6: 629188.482 ops/s
# Warmup Iteration   7: 625286.565 ops/s
# Warmup Iteration   8: 595572.955 ops/s
# Warmup Iteration   9: 630858.945 ops/s
# Warmup Iteration  10: 602607.660 ops/s
# Warmup Iteration  11: 599940.672 ops/s
# Warmup Iteration  12: 612348.902 ops/s
# Warmup Iteration  13: 599441.532 ops/s
# Warmup Iteration  14: 616170.776 ops/s
# Warmup Iteration  15: 612259.497 ops/s
# Warmup Iteration  16: 611169.172 ops/s
# Warmup Iteration  17: 619274.281 ops/s
# Warmup Iteration  18: 659838.675 ops/s
# Warmup Iteration  19: 609289.191 ops/s
# Warmup Iteration  20: 648102.329 ops/s
# Warmup Iteration  21: 648017.612 ops/s
# Warmup Iteration  22: 638205.920 ops/s
# Warmup Iteration  23: 631676.595 ops/s
# Warmup Iteration  24: 631815.546 ops/s
# Warmup Iteration  25: 646798.362 ops/s
# Warmup Iteration  26: 636472.717 ops/s
# Warmup Iteration  27: 644562.203 ops/s
# Warmup Iteration  28: 620928.127 ops/s
# Warmup Iteration  29: 654606.408 ops/s
# Warmup Iteration  30: 619118.386 ops/s
Iteration   1: 667268.304 ops/s
Iteration   2: 653713.319 ops/s
Iteration   3: 635228.915 ops/s
Iteration   4: 666013.908 ops/s
Iteration   5: 542509.028 ops/s
Iteration   6: 649396.015 ops/s
Iteration   7: 606380.134 ops/s
Iteration   8: 643578.202 ops/s
Iteration   9: 635524.618 ops/s
Iteration  10: 639984.490 ops/s
Iteration  11: 642881.572 ops/s
Iteration  12: 639193.985 ops/s
Iteration  13: 651187.310 ops/s
Iteration  14: 626962.692 ops/s
Iteration  15: 625064.696 ops/s
Iteration  16: 647399.421 ops/s
Iteration  17: 647707.555 ops/s
Iteration  18: 662222.970 ops/s
Iteration  19: 615552.267 ops/s
Iteration  20: 651627.763 ops/s
Iteration  21: 646487.764 ops/s
Iteration  22: 659639.449 ops/s
Iteration  23: 640243.264 ops/s
Iteration  24: 611326.819 ops/s
Iteration  25: 655812.663 ops/s
Iteration  26: 632978.875 ops/s
Iteration  27: 628204.709 ops/s
Iteration  28: 615195.335 ops/s
Iteration  29: 644388.113 ops/s
Iteration  30: 672168.204 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_fromIterableValueNull":
  638528.079 ±(99.9%) 16434.745 ops/s [Average]
  (min, avg, max) = (542509.028, 638528.079, 672168.204), stdev = 24598.754
  CI (99.9%): [622093.334, 654962.823] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score       Error  Units
FlowableNullTests._Benchmark.benchmark_fromIterableValueNull  thrpt   30  638528.079 ± 16434.745  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableFuseableTest._Benchmark.benchmark_syncIterable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableFuseableTest._Benchmark.benchmark_syncIterable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 403699.272 ops/s
# Warmup Iteration   2: 1833351.446 ops/s
# Warmup Iteration   3: 3104264.918 ops/s
# Warmup Iteration   4: 3055297.854 ops/s
# Warmup Iteration   5: 2866739.277 ops/s
# Warmup Iteration   6: 2676963.499 ops/s
# Warmup Iteration   7: 2932230.733 ops/s
# Warmup Iteration   8: 3130689.170 ops/s
# Warmup Iteration   9: 3055175.968 ops/s
# Warmup Iteration  10: 3100087.180 ops/s
# Warmup Iteration  11: 3018695.810 ops/s
# Warmup Iteration  12: 3105675.215 ops/s
# Warmup Iteration  13: 3006104.200 ops/s
# Warmup Iteration  14: 3093456.802 ops/s
# Warmup Iteration  15: 2962012.867 ops/s
# Warmup Iteration  16: 3188819.922 ops/s
# Warmup Iteration  17: 3101755.411 ops/s
# Warmup Iteration  18: 2968468.158 ops/s
# Warmup Iteration  19: 3154763.782 ops/s
# Warmup Iteration  20: 3002765.407 ops/s
# Warmup Iteration  21: 2978227.953 ops/s
# Warmup Iteration  22: 3115091.125 ops/s
# Warmup Iteration  23: 2986342.957 ops/s
# Warmup Iteration  24: 3016806.453 ops/s
# Warmup Iteration  25: 3099170.193 ops/s
# Warmup Iteration  26: 2987029.319 ops/s
# Warmup Iteration  27: 3062375.626 ops/s
# Warmup Iteration  28: 3058819.828 ops/s
# Warmup Iteration  29: 3105719.334 ops/s
# Warmup Iteration  30: 3005367.980 ops/s
Iteration   1: 3019393.088 ops/s
Iteration   2: 3036784.026 ops/s
Iteration   3: 3002068.894 ops/s
Iteration   4: 2983578.979 ops/s
Iteration   5: 3071085.982 ops/s
Iteration   6: 2879559.986 ops/s
Iteration   7: 3098321.037 ops/s
Iteration   8: 2938425.884 ops/s
Iteration   9: 3048849.456 ops/s
Iteration  10: 2927886.742 ops/s
Iteration  11: 3086443.458 ops/s
Iteration  12: 3036804.896 ops/s
Iteration  13: 3048935.327 ops/s
Iteration  14: 3060221.890 ops/s
Iteration  15: 3103336.313 ops/s
Iteration  16: 3055908.573 ops/s
Iteration  17: 3014819.396 ops/s
Iteration  18: 3044661.331 ops/s
Iteration  19: 3060808.658 ops/s
Iteration  20: 3087030.383 ops/s
Iteration  21: 3020706.999 ops/s
Iteration  22: 3025386.512 ops/s
Iteration  23: 3169853.786 ops/s
Iteration  24: 2940767.694 ops/s
Iteration  25: 3149509.264 ops/s
Iteration  26: 2949881.878 ops/s
Iteration  27: 3198070.569 ops/s
Iteration  28: 2957953.365 ops/s
Iteration  29: 3044597.815 ops/s
Iteration  30: 3076380.849 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableFuseableTest._Benchmark.benchmark_syncIterable":
  3037934.434 ±(99.9%) 47840.866 ops/s [Average]
  (min, avg, max) = (2879559.986, 3037934.434, 3198070.569), stdev = 71605.962
  CI (99.9%): [2990093.568, 3085775.301] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
FlowableFuseableTest._Benchmark.benchmark_syncIterable  thrpt   30  3037934.434 ± 47840.866  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterableTest._Benchmark.benchmark_disposeWhileIteratorNext$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterableTest._Benchmark.benchmark_disposeWhileIteratorNext

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1569675.473 ops/s
# Warmup Iteration   2: 4088002.903 ops/s
# Warmup Iteration   3: 4333955.983 ops/s
# Warmup Iteration   4: 5079315.744 ops/s
# Warmup Iteration   5: 5292561.255 ops/s
# Warmup Iteration   6: 5006592.420 ops/s
# Warmup Iteration   7: 4932428.504 ops/s
# Warmup Iteration   8: 5338245.589 ops/s
# Warmup Iteration   9: 4940720.321 ops/s
# Warmup Iteration  10: 5036761.411 ops/s
# Warmup Iteration  11: 5110427.016 ops/s
# Warmup Iteration  12: 5005352.514 ops/s
# Warmup Iteration  13: 5232744.300 ops/s
# Warmup Iteration  14: 4907736.507 ops/s
# Warmup Iteration  15: 5090827.775 ops/s
# Warmup Iteration  16: 5107320.835 ops/s
# Warmup Iteration  17: 5097771.809 ops/s
# Warmup Iteration  18: 5244242.360 ops/s
# Warmup Iteration  19: 4957135.097 ops/s
# Warmup Iteration  20: 5117431.621 ops/s
# Warmup Iteration  21: 5100253.224 ops/s
# Warmup Iteration  22: 5090411.697 ops/s
# Warmup Iteration  23: 5138520.481 ops/s
# Warmup Iteration  24: 5000001.985 ops/s
# Warmup Iteration  25: 5147762.267 ops/s
# Warmup Iteration  26: 5059644.647 ops/s
# Warmup Iteration  27: 5251306.113 ops/s
# Warmup Iteration  28: 4883698.488 ops/s
# Warmup Iteration  29: 5135649.829 ops/s
# Warmup Iteration  30: 4068821.024 ops/s
Iteration   1: 5085331.777 ops/s
Iteration   2: 4945441.504 ops/s
Iteration   3: 5209679.262 ops/s
Iteration   4: 5079022.220 ops/s
Iteration   5: 5027873.117 ops/s
Iteration   6: 5282165.102 ops/s
Iteration   7: 5013305.080 ops/s
Iteration   8: 5139536.961 ops/s
Iteration   9: 4957250.842 ops/s
Iteration  10: 5120867.278 ops/s
Iteration  11: 5157261.598 ops/s
Iteration  12: 5208279.477 ops/s
Iteration  13: 5045175.594 ops/s
Iteration  14: 5080167.409 ops/s
Iteration  15: 5220546.533 ops/s
Iteration  16: 4948352.361 ops/s
Iteration  17: 5178988.368 ops/s
Iteration  18: 4968387.870 ops/s
Iteration  19: 5162811.010 ops/s
Iteration  20: 5111229.549 ops/s
Iteration  21: 4932975.443 ops/s
Iteration  22: 5113194.773 ops/s
Iteration  23: 5068506.700 ops/s
Iteration  24: 5067067.943 ops/s
Iteration  25: 5043424.958 ops/s
Iteration  26: 5103879.122 ops/s
Iteration  27: 5340175.310 ops/s
Iteration  28: 5158497.661 ops/s
Iteration  29: 4800013.585 ops/s
Iteration  30: 5169077.631 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterableTest._Benchmark.benchmark_disposeWhileIteratorNext":
  5091282.868 ±(99.9%) 76011.536 ops/s [Average]
  (min, avg, max) = (4800013.585, 5091282.868, 5340175.310), stdev = 113770.497
  CI (99.9%): [5015271.332, 5167294.404] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score       Error  Units
FlowableFromIterableTest._Benchmark.benchmark_disposeWhileIteratorNext  thrpt   30  5091282.868 ± 76011.536  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterableTest._Benchmark.benchmark_hasNextThrowsSecondTimeFastpath$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterableTest._Benchmark.benchmark_hasNextThrowsSecondTimeFastpath

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 199757.036 ops/s
# Warmup Iteration   2: 485200.418 ops/s
# Warmup Iteration   3: 613608.614 ops/s
# Warmup Iteration   4: 570119.448 ops/s
# Warmup Iteration   5: 575667.867 ops/s
# Warmup Iteration   6: 516895.902 ops/s
# Warmup Iteration   7: 603987.863 ops/s
# Warmup Iteration   8: 578394.822 ops/s
# Warmup Iteration   9: 583622.477 ops/s
# Warmup Iteration  10: 615603.490 ops/s
# Warmup Iteration  11: 586068.015 ops/s
# Warmup Iteration  12: 578988.588 ops/s
# Warmup Iteration  13: 604564.983 ops/s
# Warmup Iteration  14: 570668.270 ops/s
# Warmup Iteration  15: 598590.638 ops/s
# Warmup Iteration  16: 571720.549 ops/s
# Warmup Iteration  17: 634202.070 ops/s
# Warmup Iteration  18: 639341.027 ops/s
# Warmup Iteration  19: 618599.968 ops/s
# Warmup Iteration  20: 623370.438 ops/s
# Warmup Iteration  21: 606878.910 ops/s
# Warmup Iteration  22: 627530.853 ops/s
# Warmup Iteration  23: 616750.657 ops/s
# Warmup Iteration  24: 609255.555 ops/s
# Warmup Iteration  25: 630092.269 ops/s
# Warmup Iteration  26: 614632.781 ops/s
# Warmup Iteration  27: 652639.300 ops/s
# Warmup Iteration  28: 569537.544 ops/s
# Warmup Iteration  29: 610287.846 ops/s
# Warmup Iteration  30: 651453.953 ops/s
Iteration   1: 612887.071 ops/s
Iteration   2: 636038.077 ops/s
Iteration   3: 632464.252 ops/s
Iteration   4: 611158.008 ops/s
Iteration   5: 628334.559 ops/s
Iteration   6: 621432.720 ops/s
Iteration   7: 643425.230 ops/s
Iteration   8: 650289.087 ops/s
Iteration   9: 611685.242 ops/s
Iteration  10: 637408.123 ops/s
Iteration  11: 643509.230 ops/s
Iteration  12: 617826.171 ops/s
Iteration  13: 614906.863 ops/s
Iteration  14: 623864.720 ops/s
Iteration  15: 615023.983 ops/s
Iteration  16: 646719.609 ops/s
Iteration  17: 600386.704 ops/s
Iteration  18: 649639.846 ops/s
Iteration  19: 605086.595 ops/s
Iteration  20: 622859.152 ops/s
Iteration  21: 627957.193 ops/s
Iteration  22: 624236.324 ops/s
Iteration  23: 645146.729 ops/s
Iteration  24: 600328.147 ops/s
Iteration  25: 631639.292 ops/s
Iteration  26: 611415.323 ops/s
Iteration  27: 623061.162 ops/s
Iteration  28: 633507.462 ops/s
Iteration  29: 592743.550 ops/s
Iteration  30: 649402.766 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterableTest._Benchmark.benchmark_hasNextThrowsSecondTimeFastpath":
  625479.440 ±(99.9%) 10737.427 ops/s [Average]
  (min, avg, max) = (592743.550, 625479.440, 650289.087), stdev = 16071.277
  CI (99.9%): [614742.013, 636216.867] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt       Score       Error  Units
FlowableFromIterableTest._Benchmark.benchmark_hasNextThrowsSecondTimeFastpath  thrpt   30  625479.440 ± 10737.427  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterableTest._Benchmark.benchmark_hasNextCancelsAndCompletesSlowPath$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterableTest._Benchmark.benchmark_hasNextCancelsAndCompletesSlowPath

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1208917.020 ops/s
# Warmup Iteration   2: 3510172.036 ops/s
# Warmup Iteration   3: 4149052.201 ops/s
# Warmup Iteration   4: 4389655.707 ops/s
# Warmup Iteration   5: 4625150.215 ops/s
# Warmup Iteration   6: 4476566.391 ops/s
# Warmup Iteration   7: 4606223.582 ops/s
# Warmup Iteration   8: 4448156.847 ops/s
# Warmup Iteration   9: 4548271.153 ops/s
# Warmup Iteration  10: 4706576.340 ops/s
# Warmup Iteration  11: 4386127.549 ops/s
# Warmup Iteration  12: 4624460.299 ops/s
# Warmup Iteration  13: 4505290.599 ops/s
# Warmup Iteration  14: 4515553.386 ops/s
# Warmup Iteration  15: 4416649.036 ops/s
# Warmup Iteration  16: 4455271.754 ops/s
# Warmup Iteration  17: 4595223.455 ops/s
# Warmup Iteration  18: 4286741.765 ops/s
# Warmup Iteration  19: 4632025.946 ops/s
# Warmup Iteration  20: 4383603.418 ops/s
# Warmup Iteration  21: 4630142.829 ops/s
# Warmup Iteration  22: 4431718.963 ops/s
# Warmup Iteration  23: 4484458.360 ops/s
# Warmup Iteration  24: 4484836.913 ops/s
# Warmup Iteration  25: 3543364.292 ops/s
# Warmup Iteration  26: 4333208.779 ops/s
# Warmup Iteration  27: 4584435.139 ops/s
# Warmup Iteration  28: 4624240.442 ops/s
# Warmup Iteration  29: 4496602.576 ops/s
# Warmup Iteration  30: 4666500.502 ops/s
Iteration   1: 4429368.877 ops/s
Iteration   2: 4588124.086 ops/s
Iteration   3: 4328996.663 ops/s
Iteration   4: 4540195.107 ops/s
Iteration   5: 4256249.911 ops/s
Iteration   6: 4467898.231 ops/s
Iteration   7: 4550976.704 ops/s
Iteration   8: 4428316.984 ops/s
Iteration   9: 4499378.219 ops/s
Iteration  10: 4482645.637 ops/s
Iteration  11: 4517331.790 ops/s
Iteration  12: 4633622.801 ops/s
Iteration  13: 4408003.297 ops/s
Iteration  14: 4620720.251 ops/s
Iteration  15: 4476516.668 ops/s
Iteration  16: 4639806.007 ops/s
Iteration  17: 4452615.423 ops/s
Iteration  18: 4345093.136 ops/s
Iteration  19: 4563114.486 ops/s
Iteration  20: 4397588.925 ops/s
Iteration  21: 4695614.493 ops/s
Iteration  22: 4388995.472 ops/s
Iteration  23: 4624238.020 ops/s
Iteration  24: 4628265.077 ops/s
Iteration  25: 4461701.246 ops/s
Iteration  26: 4705554.080 ops/s
Iteration  27: 4689146.363 ops/s
Iteration  28: 4522938.299 ops/s
Iteration  29: 4385152.832 ops/s
Iteration  30: 4450294.963 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterableTest._Benchmark.benchmark_hasNextCancelsAndCompletesSlowPath":
  4505948.802 ±(99.9%) 77597.223 ops/s [Average]
  (min, avg, max) = (4256249.911, 4505948.802, 4705554.080), stdev = 116143.880
  CI (99.9%): [4428351.578, 4583546.025] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt        Score       Error  Units
FlowableFromIterableTest._Benchmark.benchmark_hasNextCancelsAndCompletesSlowPath  thrpt   30  4505948.802 ± 77597.223  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterableTest._Benchmark.benchmark_nextThrowsFastpath$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterableTest._Benchmark.benchmark_nextThrowsFastpath

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 170900.745 ops/s
# Warmup Iteration   2: 507534.026 ops/s
# Warmup Iteration   3: 583349.281 ops/s
# Warmup Iteration   4: 602016.691 ops/s
# Warmup Iteration   5: 610561.181 ops/s
# Warmup Iteration   6: 592305.648 ops/s
# Warmup Iteration   7: 619131.896 ops/s
# Warmup Iteration   8: 604790.162 ops/s
# Warmup Iteration   9: 613683.012 ops/s
# Warmup Iteration  10: 605604.265 ops/s
# Warmup Iteration  11: 592695.409 ops/s
# Warmup Iteration  12: 586645.701 ops/s
# Warmup Iteration  13: 596726.607 ops/s
# Warmup Iteration  14: 627376.267 ops/s
# Warmup Iteration  15: 571741.825 ops/s
# Warmup Iteration  16: 604922.104 ops/s
# Warmup Iteration  17: 616806.285 ops/s
# Warmup Iteration  18: 639323.137 ops/s
# Warmup Iteration  19: 598506.188 ops/s
# Warmup Iteration  20: 627136.361 ops/s
# Warmup Iteration  21: 655281.623 ops/s
# Warmup Iteration  22: 635844.694 ops/s
# Warmup Iteration  23: 640096.171 ops/s
# Warmup Iteration  24: 622690.158 ops/s
# Warmup Iteration  25: 637627.536 ops/s
# Warmup Iteration  26: 630839.999 ops/s
# Warmup Iteration  27: 643880.407 ops/s
# Warmup Iteration  28: 643682.059 ops/s
# Warmup Iteration  29: 610556.760 ops/s
# Warmup Iteration  30: 645530.387 ops/s
Iteration   1: 632880.278 ops/s
Iteration   2: 633413.082 ops/s
Iteration   3: 642897.826 ops/s
Iteration   4: 612152.499 ops/s
Iteration   5: 658171.936 ops/s
Iteration   6: 612226.133 ops/s
Iteration   7: 642419.686 ops/s
Iteration   8: 617042.578 ops/s
Iteration   9: 637279.706 ops/s
Iteration  10: 628543.491 ops/s
Iteration  11: 628860.955 ops/s
Iteration  12: 612974.510 ops/s
Iteration  13: 648638.700 ops/s
Iteration  14: 656360.389 ops/s
Iteration  15: 626349.450 ops/s
Iteration  16: 612821.213 ops/s
Iteration  17: 457259.600 ops/s
Iteration  18: 604971.841 ops/s
Iteration  19: 656073.738 ops/s
Iteration  20: 610771.087 ops/s
Iteration  21: 649673.198 ops/s
Iteration  22: 629261.201 ops/s
Iteration  23: 629057.288 ops/s
Iteration  24: 652715.729 ops/s
Iteration  25: 617551.378 ops/s
Iteration  26: 649730.273 ops/s
Iteration  27: 622671.165 ops/s
Iteration  28: 637172.019 ops/s
Iteration  29: 596635.470 ops/s
Iteration  30: 641837.280 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterableTest._Benchmark.benchmark_nextThrowsFastpath":
  625280.457 ±(99.9%) 23957.081 ops/s [Average]
  (min, avg, max) = (457259.600, 625280.457, 658171.936), stdev = 35857.834
  CI (99.9%): [601323.375, 649237.538] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score       Error  Units
FlowableFromIterableTest._Benchmark.benchmark_nextThrowsFastpath  thrpt   30  625280.457 ± 23957.081  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterableTest._Benchmark.benchmark_backpressureViaRequest$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterableTest._Benchmark.benchmark_backpressureViaRequest

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 31052.807 ops/s
# Warmup Iteration   2: 228727.856 ops/s
# Warmup Iteration   3: 243531.492 ops/s
# Warmup Iteration   4: 275629.727 ops/s
# Warmup Iteration   5: 283844.733 ops/s
# Warmup Iteration   6: 283231.967 ops/s
# Warmup Iteration   7: 286945.437 ops/s
# Warmup Iteration   8: 289495.068 ops/s
# Warmup Iteration   9: 276546.778 ops/s
# Warmup Iteration  10: 285666.665 ops/s
# Warmup Iteration  11: 274332.899 ops/s
# Warmup Iteration  12: 287007.729 ops/s
# Warmup Iteration  13: 293310.693 ops/s
# Warmup Iteration  14: 275905.270 ops/s
# Warmup Iteration  15: 289498.893 ops/s
# Warmup Iteration  16: 282673.293 ops/s
# Warmup Iteration  17: 281532.176 ops/s
# Warmup Iteration  18: 289527.029 ops/s
# Warmup Iteration  19: 284189.804 ops/s
# Warmup Iteration  20: 275919.771 ops/s
# Warmup Iteration  21: 285232.137 ops/s
# Warmup Iteration  22: 282997.540 ops/s
# Warmup Iteration  23: 283754.290 ops/s
# Warmup Iteration  24: 277105.849 ops/s
# Warmup Iteration  25: 272821.254 ops/s
# Warmup Iteration  26: 293998.438 ops/s
# Warmup Iteration  27: 286544.112 ops/s
# Warmup Iteration  28: 276866.099 ops/s
# Warmup Iteration  29: 272070.103 ops/s
# Warmup Iteration  30: 277405.108 ops/s
Iteration   1: 280092.306 ops/s
Iteration   2: 283874.816 ops/s
Iteration   3: 285867.634 ops/s
Iteration   4: 290577.547 ops/s
Iteration   5: 273240.717 ops/s
Iteration   6: 289370.642 ops/s
Iteration   7: 276673.537 ops/s
Iteration   8: 276745.760 ops/s
Iteration   9: 285449.923 ops/s
Iteration  10: 284364.767 ops/s
Iteration  11: 289144.032 ops/s
Iteration  12: 277135.409 ops/s
Iteration  13: 289833.846 ops/s
Iteration  14: 293381.948 ops/s
Iteration  15: 275452.986 ops/s
Iteration  16: 280439.101 ops/s
Iteration  17: 286259.690 ops/s
Iteration  18: 283243.702 ops/s
Iteration  19: 290156.426 ops/s
Iteration  20: 275892.648 ops/s
Iteration  21: 284887.121 ops/s
Iteration  22: 291445.281 ops/s
Iteration  23: 272958.185 ops/s
Iteration  24: 289569.914 ops/s
Iteration  25: 280594.517 ops/s
Iteration  26: 289269.744 ops/s
Iteration  27: 277500.257 ops/s
Iteration  28: 276448.811 ops/s
Iteration  29: 282504.066 ops/s
Iteration  30: 271594.879 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterableTest._Benchmark.benchmark_backpressureViaRequest":
  282799.007 ±(99.9%) 4237.361 ops/s [Average]
  (min, avg, max) = (271594.879, 282799.007, 293381.948), stdev = 6342.282
  CI (99.9%): [278561.647, 287036.368] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score      Error  Units
FlowableFromIterableTest._Benchmark.benchmark_backpressureViaRequest  thrpt   30  282799.007 ± 4237.361  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithCompletableTest._Benchmark.benchmark_cancel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithCompletableTest._Benchmark.benchmark_cancel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 534019.603 ops/s
# Warmup Iteration   2: 1921397.909 ops/s
# Warmup Iteration   3: 2449014.958 ops/s
# Warmup Iteration   4: 2588024.809 ops/s
# Warmup Iteration   5: 2088283.045 ops/s
# Warmup Iteration   6: 2458406.103 ops/s
# Warmup Iteration   7: 2445560.340 ops/s
# Warmup Iteration   8: 2556928.334 ops/s
# Warmup Iteration   9: 2420895.029 ops/s
# Warmup Iteration  10: 2517333.004 ops/s
# Warmup Iteration  11: 2543114.125 ops/s
# Warmup Iteration  12: 2468692.138 ops/s
# Warmup Iteration  13: 2473776.787 ops/s
# Warmup Iteration  14: 2508766.100 ops/s
# Warmup Iteration  15: 2447873.844 ops/s
# Warmup Iteration  16: 2581770.903 ops/s
# Warmup Iteration  17: 1860619.417 ops/s
# Warmup Iteration  18: 2483540.773 ops/s
# Warmup Iteration  19: 2583085.585 ops/s
# Warmup Iteration  20: 2422128.182 ops/s
# Warmup Iteration  21: 2597879.686 ops/s
# Warmup Iteration  22: 2441183.596 ops/s
# Warmup Iteration  23: 2448005.204 ops/s
# Warmup Iteration  24: 2476404.088 ops/s
# Warmup Iteration  25: 2600149.586 ops/s
# Warmup Iteration  26: 2493319.950 ops/s
# Warmup Iteration  27: 2522259.915 ops/s
# Warmup Iteration  28: 2487771.862 ops/s
# Warmup Iteration  29: 2580552.291 ops/s
# Warmup Iteration  30: 2464358.665 ops/s
Iteration   1: 2468942.459 ops/s
Iteration   2: 2596335.236 ops/s
Iteration   3: 2444736.675 ops/s
Iteration   4: 2592466.472 ops/s
Iteration   5: 2465644.768 ops/s
Iteration   6: 2486864.796 ops/s
Iteration   7: 2559476.201 ops/s
Iteration   8: 2456248.733 ops/s
Iteration   9: 2556592.810 ops/s
Iteration  10: 2427172.395 ops/s
Iteration  11: 2529876.721 ops/s
Iteration  12: 2504257.085 ops/s
Iteration  13: 2583786.240 ops/s
Iteration  14: 2503501.061 ops/s
Iteration  15: 2471933.162 ops/s
Iteration  16: 2568076.139 ops/s
Iteration  17: 2451339.017 ops/s
Iteration  18: 2532914.332 ops/s
Iteration  19: 2550745.536 ops/s
Iteration  20: 2448307.979 ops/s
Iteration  21: 2579981.192 ops/s
Iteration  22: 2467717.190 ops/s
Iteration  23: 2597039.389 ops/s
Iteration  24: 2406118.209 ops/s
Iteration  25: 2574025.304 ops/s
Iteration  26: 2505643.941 ops/s
Iteration  27: 2502290.844 ops/s
Iteration  28: 2494774.151 ops/s
Iteration  29: 2509057.028 ops/s
Iteration  30: 2632200.049 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithCompletableTest._Benchmark.benchmark_cancel":
  2515602.171 ±(99.9%) 39368.768 ops/s [Average]
  (min, avg, max) = (2406118.209, 2515602.171, 2632200.049), stdev = 58925.323
  CI (99.9%): [2476233.402, 2554970.939] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
FlowableMergeWithCompletableTest._Benchmark.benchmark_cancel  thrpt   30  2515602.171 ± 39368.768  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.CompletableAndThenPublisherTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.CompletableAndThenPublisherTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 117633.420 ops/s
# Warmup Iteration   2: 447874.322 ops/s
# Warmup Iteration   3: 493660.217 ops/s
# Warmup Iteration   4: 525157.855 ops/s
# Warmup Iteration   5: 523246.711 ops/s
# Warmup Iteration   6: 499153.205 ops/s
# Warmup Iteration   7: 515181.449 ops/s
# Warmup Iteration   8: 486670.228 ops/s
# Warmup Iteration   9: 498125.010 ops/s
# Warmup Iteration  10: 528567.173 ops/s
# Warmup Iteration  11: 497844.506 ops/s
# Warmup Iteration  12: 530216.128 ops/s
# Warmup Iteration  13: 497074.712 ops/s
# Warmup Iteration  14: 514772.425 ops/s
# Warmup Iteration  15: 534880.149 ops/s
# Warmup Iteration  16: 506468.277 ops/s
# Warmup Iteration  17: 536770.630 ops/s
# Warmup Iteration  18: 532064.853 ops/s
# Warmup Iteration  19: 530462.457 ops/s
# Warmup Iteration  20: 532242.723 ops/s
# Warmup Iteration  21: 529073.670 ops/s
# Warmup Iteration  22: 547662.921 ops/s
# Warmup Iteration  23: 532848.267 ops/s
# Warmup Iteration  24: 523292.763 ops/s
# Warmup Iteration  25: 543925.193 ops/s
# Warmup Iteration  26: 533515.172 ops/s
# Warmup Iteration  27: 553862.253 ops/s
# Warmup Iteration  28: 512889.872 ops/s
# Warmup Iteration  29: 551471.257 ops/s
# Warmup Iteration  30: 538984.704 ops/s
Iteration   1: 535482.785 ops/s
Iteration   2: 538277.265 ops/s
Iteration   3: 533710.623 ops/s
Iteration   4: 535861.912 ops/s
Iteration   5: 528903.446 ops/s
Iteration   6: 541472.708 ops/s
Iteration   7: 528479.967 ops/s
Iteration   8: 541641.010 ops/s
Iteration   9: 539791.874 ops/s
Iteration  10: 530456.098 ops/s
Iteration  11: 552464.611 ops/s
Iteration  12: 526837.330 ops/s
Iteration  13: 547438.387 ops/s
Iteration  14: 537729.377 ops/s
Iteration  15: 521814.416 ops/s
Iteration  16: 531952.466 ops/s
Iteration  17: 542255.703 ops/s
Iteration  18: 526028.262 ops/s
Iteration  19: 540108.789 ops/s
Iteration  20: 526286.706 ops/s
Iteration  21: 547585.058 ops/s
Iteration  22: 526766.773 ops/s
Iteration  23: 539411.498 ops/s
Iteration  24: 535511.940 ops/s
Iteration  25: 538452.540 ops/s
Iteration  26: 535653.165 ops/s
Iteration  27: 531906.885 ops/s
Iteration  28: 545296.306 ops/s
Iteration  29: 534223.293 ops/s
Iteration  30: 531212.191 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.CompletableAndThenPublisherTest._Benchmark.benchmark_doubleOnSubscribe":
  535767.113 ±(99.9%) 4877.988 ops/s [Average]
  (min, avg, max) = (521814.416, 535767.113, 552464.611), stdev = 7301.143
  CI (99.9%): [530889.125, 540645.101] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score      Error  Units
CompletableAndThenPublisherTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  535767.113 ± 4877.988  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterableTest._Benchmark.benchmark_nullConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterableTest._Benchmark.benchmark_nullConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 109786.129 ops/s
# Warmup Iteration   2: 437634.551 ops/s
# Warmup Iteration   3: 473645.686 ops/s
# Warmup Iteration   4: 511698.733 ops/s
# Warmup Iteration   5: 457794.392 ops/s
# Warmup Iteration   6: 524762.422 ops/s
# Warmup Iteration   7: 514602.619 ops/s
# Warmup Iteration   8: 533636.628 ops/s
# Warmup Iteration   9: 522492.422 ops/s
# Warmup Iteration  10: 529921.213 ops/s
# Warmup Iteration  11: 524878.452 ops/s
# Warmup Iteration  12: 415373.614 ops/s
# Warmup Iteration  13: 531910.772 ops/s
# Warmup Iteration  14: 517619.978 ops/s
# Warmup Iteration  15: 525792.724 ops/s
# Warmup Iteration  16: 543531.346 ops/s
# Warmup Iteration  17: 547567.828 ops/s
# Warmup Iteration  18: 555120.607 ops/s
# Warmup Iteration  19: 548459.810 ops/s
# Warmup Iteration  20: 553992.516 ops/s
# Warmup Iteration  21: 557600.879 ops/s
# Warmup Iteration  22: 546864.018 ops/s
# Warmup Iteration  23: 548626.897 ops/s
# Warmup Iteration  24: 564951.854 ops/s
# Warmup Iteration  25: 536968.446 ops/s
# Warmup Iteration  26: 556171.788 ops/s
# Warmup Iteration  27: 533905.294 ops/s
# Warmup Iteration  28: 539913.868 ops/s
# Warmup Iteration  29: 565272.006 ops/s
# Warmup Iteration  30: 546604.817 ops/s
Iteration   1: 552130.952 ops/s
Iteration   2: 526806.917 ops/s
Iteration   3: 556876.991 ops/s
Iteration   4: 548378.593 ops/s
Iteration   5: 558637.643 ops/s
Iteration   6: 535858.568 ops/s
Iteration   7: 555461.943 ops/s
Iteration   8: 557023.494 ops/s
Iteration   9: 549924.675 ops/s
Iteration  10: 565939.281 ops/s
Iteration  11: 545410.151 ops/s
Iteration  12: 542251.860 ops/s
Iteration  13: 558244.698 ops/s
Iteration  14: 545109.613 ops/s
Iteration  15: 572328.518 ops/s
Iteration  16: 529129.044 ops/s
Iteration  17: 560541.550 ops/s
Iteration  18: 537732.792 ops/s
Iteration  19: 556853.810 ops/s
Iteration  20: 538995.723 ops/s
Iteration  21: 538343.942 ops/s
Iteration  22: 565622.012 ops/s
Iteration  23: 540516.432 ops/s
Iteration  24: 544595.407 ops/s
Iteration  25: 557478.410 ops/s
Iteration  26: 554218.004 ops/s
Iteration  27: 558349.158 ops/s
Iteration  28: 550049.824 ops/s
Iteration  29: 531754.947 ops/s
Iteration  30: 567301.299 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterableTest._Benchmark.benchmark_nullConditional":
  550062.208 ±(99.9%) 7857.974 ops/s [Average]
  (min, avg, max) = (526806.917, 550062.208, 572328.518), stdev = 11761.446
  CI (99.9%): [542204.235, 557920.182] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
FlowableFromIterableTest._Benchmark.benchmark_nullConditional  thrpt   30  550062.208 ± 7857.974  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromTest._Benchmark.benchmark_noDownstreamUnsubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromTest._Benchmark.benchmark_noDownstreamUnsubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 451532.138 ops/s
# Warmup Iteration   2: 1662889.778 ops/s
# Warmup Iteration   3: 1997864.809 ops/s
# Warmup Iteration   4: 2546474.905 ops/s
# Warmup Iteration   5: 2421929.144 ops/s
# Warmup Iteration   6: 2541371.793 ops/s
# Warmup Iteration   7: 2457333.140 ops/s
# Warmup Iteration   8: 2574864.313 ops/s
# Warmup Iteration   9: 2446670.904 ops/s
# Warmup Iteration  10: 2482970.257 ops/s
# Warmup Iteration  11: 2566386.604 ops/s
# Warmup Iteration  12: 2430176.470 ops/s
# Warmup Iteration  13: 2563338.210 ops/s
# Warmup Iteration  14: 2545090.396 ops/s
# Warmup Iteration  15: 2504894.853 ops/s
# Warmup Iteration  16: 2495752.681 ops/s
# Warmup Iteration  17: 2501957.861 ops/s
# Warmup Iteration  18: 2530858.664 ops/s
# Warmup Iteration  19: 2480646.574 ops/s
# Warmup Iteration  20: 2572904.976 ops/s
# Warmup Iteration  21: 2465186.253 ops/s
# Warmup Iteration  22: 2486244.773 ops/s
# Warmup Iteration  23: 2559353.857 ops/s
# Warmup Iteration  24: 2460717.407 ops/s
# Warmup Iteration  25: 2512450.806 ops/s
# Warmup Iteration  26: 2594001.397 ops/s
# Warmup Iteration  27: 2484728.996 ops/s
# Warmup Iteration  28: 2448283.676 ops/s
# Warmup Iteration  29: 2626178.894 ops/s
# Warmup Iteration  30: 2426026.421 ops/s
Iteration   1: 2542113.206 ops/s
Iteration   2: 2430553.462 ops/s
Iteration   3: 2514802.409 ops/s
Iteration   4: 2456016.611 ops/s
Iteration   5: 2559183.066 ops/s
Iteration   6: 2392269.410 ops/s
Iteration   7: 2498580.733 ops/s
Iteration   8: 2602476.400 ops/s
Iteration   9: 2464514.489 ops/s
Iteration  10: 2583907.834 ops/s
Iteration  11: 2415217.903 ops/s
Iteration  12: 2588762.650 ops/s
Iteration  13: 2549016.144 ops/s
Iteration  14: 2454173.728 ops/s
Iteration  15: 2619873.386 ops/s
Iteration  16: 2407489.404 ops/s
Iteration  17: 2569698.585 ops/s
Iteration  18: 2494343.933 ops/s
Iteration  19: 2452329.752 ops/s
Iteration  20: 2589935.981 ops/s
Iteration  21: 2499487.997 ops/s
Iteration  22: 2572793.837 ops/s
Iteration  23: 2411047.865 ops/s
Iteration  24: 2562565.383 ops/s
Iteration  25: 2524089.510 ops/s
Iteration  26: 2414555.673 ops/s
Iteration  27: 2583406.835 ops/s
Iteration  28: 2535247.384 ops/s
Iteration  29: 2472380.123 ops/s
Iteration  30: 2501671.567 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromTest._Benchmark.benchmark_noDownstreamUnsubscribe":
  2508750.175 ±(99.9%) 45089.675 ops/s [Average]
  (min, avg, max) = (2392269.410, 2508750.175, 2619873.386), stdev = 67488.107
  CI (99.9%): [2463660.501, 2553839.850] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score       Error  Units
FlowableWithLatestFromTest._Benchmark.benchmark_noDownstreamUnsubscribe  thrpt   30  2508750.175 ± 45089.675  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromTest._Benchmark.benchmark_coldSourceConsumedWithoutOther$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromTest._Benchmark.benchmark_coldSourceConsumedWithoutOther

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 603330.689 ops/s
# Warmup Iteration   2: 2588559.350 ops/s
# Warmup Iteration   3: 3179681.374 ops/s
# Warmup Iteration   4: 3421208.587 ops/s
# Warmup Iteration   5: 3781559.488 ops/s
# Warmup Iteration   6: 3612607.298 ops/s
# Warmup Iteration   7: 2881117.827 ops/s
# Warmup Iteration   8: 3606404.883 ops/s
# Warmup Iteration   9: 3781953.742 ops/s
# Warmup Iteration  10: 3574861.041 ops/s
# Warmup Iteration  11: 3523180.420 ops/s
# Warmup Iteration  12: 3807420.315 ops/s
# Warmup Iteration  13: 3527194.701 ops/s
# Warmup Iteration  14: 3794443.106 ops/s
# Warmup Iteration  15: 3661147.719 ops/s
# Warmup Iteration  16: 3581189.391 ops/s
# Warmup Iteration  17: 3674582.070 ops/s
# Warmup Iteration  18: 3655498.533 ops/s
# Warmup Iteration  19: 3634718.727 ops/s
# Warmup Iteration  20: 3584550.408 ops/s
# Warmup Iteration  21: 3725986.844 ops/s
# Warmup Iteration  22: 3628887.181 ops/s
# Warmup Iteration  23: 3541542.205 ops/s
# Warmup Iteration  24: 3635604.784 ops/s
# Warmup Iteration  25: 3623154.231 ops/s
# Warmup Iteration  26: 3569221.579 ops/s
# Warmup Iteration  27: 3619527.491 ops/s
# Warmup Iteration  28: 3712556.091 ops/s
# Warmup Iteration  29: 3677660.388 ops/s
# Warmup Iteration  30: 3602121.836 ops/s
Iteration   1: 3710806.808 ops/s
Iteration   2: 3531274.296 ops/s
Iteration   3: 3710392.855 ops/s
Iteration   4: 3740590.698 ops/s
Iteration   5: 3575077.720 ops/s
Iteration   6: 3676743.259 ops/s
Iteration   7: 3623657.219 ops/s
Iteration   8: 3695187.824 ops/s
Iteration   9: 3596330.901 ops/s
Iteration  10: 3657557.467 ops/s
Iteration  11: 3750268.047 ops/s
Iteration  12: 3628903.882 ops/s
Iteration  13: 3736285.112 ops/s
Iteration  14: 3511358.657 ops/s
Iteration  15: 3606712.257 ops/s
Iteration  16: 3650298.309 ops/s
Iteration  17: 3532279.657 ops/s
Iteration  18: 3729421.227 ops/s
Iteration  19: 3540260.557 ops/s
Iteration  20: 3788578.511 ops/s
Iteration  21: 3536011.768 ops/s
Iteration  22: 3647610.504 ops/s
Iteration  23: 3553255.717 ops/s
Iteration  24: 3740402.588 ops/s
Iteration  25: 3632965.053 ops/s
Iteration  26: 3684540.684 ops/s
Iteration  27: 3754203.724 ops/s
Iteration  28: 3546891.841 ops/s
Iteration  29: 3760114.097 ops/s
Iteration  30: 3550511.894 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromTest._Benchmark.benchmark_coldSourceConsumedWithoutOther":
  3646616.438 ±(99.9%) 56485.149 ops/s [Average]
  (min, avg, max) = (3511358.657, 3646616.438, 3788578.511), stdev = 84544.318
  CI (99.9%): [3590131.289, 3703101.587] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt        Score       Error  Units
FlowableWithLatestFromTest._Benchmark.benchmark_coldSourceConsumedWithoutOther  thrpt   30  3646616.438 ± 56485.149  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterableTest._Benchmark.benchmark_nullConditionalBackpressured$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterableTest._Benchmark.benchmark_nullConditionalBackpressured

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 146972.560 ops/s
# Warmup Iteration   2: 432548.692 ops/s
# Warmup Iteration   3: 507033.241 ops/s
# Warmup Iteration   4: 462505.960 ops/s
# Warmup Iteration   5: 500735.036 ops/s
# Warmup Iteration   6: 479842.827 ops/s
# Warmup Iteration   7: 509671.501 ops/s
# Warmup Iteration   8: 549098.434 ops/s
# Warmup Iteration   9: 498709.627 ops/s
# Warmup Iteration  10: 516552.017 ops/s
# Warmup Iteration  11: 522550.357 ops/s
# Warmup Iteration  12: 528603.782 ops/s
# Warmup Iteration  13: 532760.264 ops/s
# Warmup Iteration  14: 527777.207 ops/s
# Warmup Iteration  15: 534246.554 ops/s
# Warmup Iteration  16: 544440.392 ops/s
# Warmup Iteration  17: 528056.967 ops/s
# Warmup Iteration  18: 537257.790 ops/s
# Warmup Iteration  19: 566864.067 ops/s
# Warmup Iteration  20: 530281.906 ops/s
# Warmup Iteration  21: 560250.502 ops/s
# Warmup Iteration  22: 543603.456 ops/s
# Warmup Iteration  23: 536881.091 ops/s
# Warmup Iteration  24: 545977.481 ops/s
# Warmup Iteration  25: 525164.073 ops/s
# Warmup Iteration  26: 542501.893 ops/s
# Warmup Iteration  27: 523736.747 ops/s
# Warmup Iteration  28: 559283.763 ops/s
# Warmup Iteration  29: 523305.155 ops/s
# Warmup Iteration  30: 547695.964 ops/s
Iteration   1: 547937.830 ops/s
Iteration   2: 535489.005 ops/s
Iteration   3: 556497.399 ops/s
Iteration   4: 544364.783 ops/s
Iteration   5: 554567.784 ops/s
Iteration   6: 546550.503 ops/s
Iteration   7: 561443.395 ops/s
Iteration   8: 554888.586 ops/s
Iteration   9: 528555.942 ops/s
Iteration  10: 549802.892 ops/s
Iteration  11: 537539.850 ops/s
Iteration  12: 551063.796 ops/s
Iteration  13: 535966.599 ops/s
Iteration  14: 544196.842 ops/s
Iteration  15: 548100.152 ops/s
Iteration  16: 571624.903 ops/s
Iteration  17: 529524.158 ops/s
Iteration  18: 559060.180 ops/s
Iteration  19: 542115.618 ops/s
Iteration  20: 566472.551 ops/s
Iteration  21: 556641.521 ops/s
Iteration  22: 539931.230 ops/s
Iteration  23: 561768.739 ops/s
Iteration  24: 562521.065 ops/s
Iteration  25: 536259.854 ops/s
Iteration  26: 554993.820 ops/s
Iteration  27: 536162.996 ops/s
Iteration  28: 561307.915 ops/s
Iteration  29: 569336.848 ops/s
Iteration  30: 553623.680 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterableTest._Benchmark.benchmark_nullConditionalBackpressured":
  549943.681 ±(99.9%) 7836.946 ops/s [Average]
  (min, avg, max) = (528555.942, 549943.681, 571624.903), stdev = 11729.973
  CI (99.9%): [542106.735, 557780.627] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score      Error  Units
FlowableFromIterableTest._Benchmark.benchmark_nullConditionalBackpressured  thrpt   30  549943.681 ± 7836.946  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutWithSelectorTest._Benchmark.benchmark_error$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutWithSelectorTest._Benchmark.benchmark_error

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 174448.117 ops/s
# Warmup Iteration   2: 488912.498 ops/s
# Warmup Iteration   3: 616347.329 ops/s
# Warmup Iteration   4: 643664.866 ops/s
# Warmup Iteration   5: 565846.756 ops/s
# Warmup Iteration   6: 686000.169 ops/s
# Warmup Iteration   7: 640207.623 ops/s
# Warmup Iteration   8: 662005.103 ops/s
# Warmup Iteration   9: 658618.174 ops/s
# Warmup Iteration  10: 665729.762 ops/s
# Warmup Iteration  11: 662320.306 ops/s
# Warmup Iteration  12: 674134.973 ops/s
# Warmup Iteration  13: 654101.612 ops/s
# Warmup Iteration  14: 682735.695 ops/s
# Warmup Iteration  15: 680986.864 ops/s
# Warmup Iteration  16: 660521.360 ops/s
# Warmup Iteration  17: 702667.894 ops/s
# Warmup Iteration  18: 696361.044 ops/s
# Warmup Iteration  19: 705151.822 ops/s
# Warmup Iteration  20: 709142.132 ops/s
# Warmup Iteration  21: 708610.824 ops/s
# Warmup Iteration  22: 696902.457 ops/s
# Warmup Iteration  23: 679772.337 ops/s
# Warmup Iteration  24: 722753.996 ops/s
# Warmup Iteration  25: 683126.527 ops/s
# Warmup Iteration  26: 699745.533 ops/s
# Warmup Iteration  27: 691948.394 ops/s
# Warmup Iteration  28: 711319.482 ops/s
# Warmup Iteration  29: 714779.556 ops/s
# Warmup Iteration  30: 661514.133 ops/s
Iteration   1: 734564.667 ops/s
Iteration   2: 701458.456 ops/s
Iteration   3: 696851.435 ops/s
Iteration   4: 690961.254 ops/s
Iteration   5: 700218.610 ops/s
Iteration   6: 711273.868 ops/s
Iteration   7: 703380.240 ops/s
Iteration   8: 718749.505 ops/s
Iteration   9: 712542.839 ops/s
Iteration  10: 685694.782 ops/s
Iteration  11: 719800.530 ops/s
Iteration  12: 689036.883 ops/s
Iteration  13: 716820.500 ops/s
Iteration  14: 685220.890 ops/s
Iteration  15: 705906.425 ops/s
Iteration  16: 712101.935 ops/s
Iteration  17: 690903.463 ops/s
Iteration  18: 691158.847 ops/s
Iteration  19: 706995.752 ops/s
Iteration  20: 696286.788 ops/s
Iteration  21: 710615.653 ops/s
Iteration  22: 691612.530 ops/s
Iteration  23: 736264.638 ops/s
Iteration  24: 682703.805 ops/s
Iteration  25: 709636.861 ops/s
Iteration  26: 701655.638 ops/s
Iteration  27: 676082.042 ops/s
Iteration  28: 702516.388 ops/s
Iteration  29: 729274.300 ops/s
Iteration  30: 702433.580 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutWithSelectorTest._Benchmark.benchmark_error":
  703757.437 ±(99.9%) 9979.224 ops/s [Average]
  (min, avg, max) = (676082.042, 703757.437, 736264.638), stdev = 14936.433
  CI (99.9%): [693778.213, 713736.661] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score      Error  Units
FlowableTimeoutWithSelectorTest._Benchmark.benchmark_error  thrpt   30  703757.437 ± 9979.224  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableConcatTest._Benchmark.benchmark_asyncFusedUnboundedIn$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableConcatTest._Benchmark.benchmark_asyncFusedUnboundedIn

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 272363.133 ops/s
# Warmup Iteration   2: 1343084.821 ops/s
# Warmup Iteration   3: 1685966.153 ops/s
# Warmup Iteration   4: 2116580.590 ops/s
# Warmup Iteration   5: 1999911.040 ops/s
# Warmup Iteration   6: 2052463.990 ops/s
# Warmup Iteration   7: 2069754.720 ops/s
# Warmup Iteration   8: 1740028.325 ops/s
# Warmup Iteration   9: 1830769.899 ops/s
# Warmup Iteration  10: 2026398.293 ops/s
# Warmup Iteration  11: 2060824.146 ops/s
# Warmup Iteration  12: 2083950.412 ops/s
# Warmup Iteration  13: 2023384.170 ops/s
# Warmup Iteration  14: 1997583.861 ops/s
# Warmup Iteration  15: 2083562.490 ops/s
# Warmup Iteration  16: 2054585.796 ops/s
# Warmup Iteration  17: 2029832.520 ops/s
# Warmup Iteration  18: 2115403.751 ops/s
# Warmup Iteration  19: 2053338.670 ops/s
# Warmup Iteration  20: 2106833.358 ops/s
# Warmup Iteration  21: 2028831.480 ops/s
# Warmup Iteration  22: 2131252.365 ops/s
# Warmup Iteration  23: 1997437.984 ops/s
# Warmup Iteration  24: 2030214.330 ops/s
# Warmup Iteration  25: 2106864.289 ops/s
# Warmup Iteration  26: 1987650.279 ops/s
# Warmup Iteration  27: 2135276.778 ops/s
# Warmup Iteration  28: 2035088.253 ops/s
# Warmup Iteration  29: 2103085.974 ops/s
# Warmup Iteration  30: 2055791.399 ops/s
Iteration   1: 2049236.574 ops/s
Iteration   2: 2120748.692 ops/s
Iteration   3: 2076907.512 ops/s
Iteration   4: 2084487.444 ops/s
Iteration   5: 2042252.476 ops/s
Iteration   6: 2038633.530 ops/s
Iteration   7: 2020607.930 ops/s
Iteration   8: 2008125.192 ops/s
Iteration   9: 2058680.918 ops/s
Iteration  10: 2038374.041 ops/s
Iteration  11: 2078488.096 ops/s
Iteration  12: 2023252.695 ops/s
Iteration  13: 2047571.172 ops/s
Iteration  14: 2105160.279 ops/s
Iteration  15: 2072936.412 ops/s
Iteration  16: 2032663.026 ops/s
Iteration  17: 2133441.381 ops/s
Iteration  18: 2028550.328 ops/s
Iteration  19: 2045388.051 ops/s
Iteration  20: 1989236.215 ops/s
Iteration  21: 2131844.628 ops/s
Iteration  22: 2069905.281 ops/s
Iteration  23: 1965010.843 ops/s
Iteration  24: 2055263.629 ops/s
Iteration  25: 2054087.945 ops/s
Iteration  26: 2112697.965 ops/s
Iteration  27: 2064128.059 ops/s
Iteration  28: 2040709.388 ops/s
Iteration  29: 2110505.704 ops/s
Iteration  30: 2043377.660 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatTest._Benchmark.benchmark_asyncFusedUnboundedIn":
  2058075.769 ±(99.9%) 26840.118 ops/s [Average]
  (min, avg, max) = (1965010.843, 2058075.769, 2133441.381), stdev = 40173.028
  CI (99.9%): [2031235.651, 2084915.887] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
CompletableConcatTest._Benchmark.benchmark_asyncFusedUnboundedIn  thrpt   30  2058075.769 ± 26840.118  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithCompletableTest._Benchmark.benchmark_badSource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithCompletableTest._Benchmark.benchmark_badSource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 85864.397 ops/s
# Warmup Iteration   2: 353544.173 ops/s
# Warmup Iteration   3: 471683.594 ops/s
# Warmup Iteration   4: 454156.693 ops/s
# Warmup Iteration   5: 511409.770 ops/s
# Warmup Iteration   6: 498385.007 ops/s
# Warmup Iteration   7: 491218.081 ops/s
# Warmup Iteration   8: 534817.454 ops/s
# Warmup Iteration   9: 478926.742 ops/s
# Warmup Iteration  10: 513629.865 ops/s
# Warmup Iteration  11: 495071.556 ops/s
# Warmup Iteration  12: 507851.148 ops/s
# Warmup Iteration  13: 487925.532 ops/s
# Warmup Iteration  14: 518739.239 ops/s
# Warmup Iteration  15: 529816.462 ops/s
# Warmup Iteration  16: 482299.510 ops/s
# Warmup Iteration  17: 521418.364 ops/s
# Warmup Iteration  18: 552638.413 ops/s
# Warmup Iteration  19: 520737.002 ops/s
# Warmup Iteration  20: 517459.543 ops/s
# Warmup Iteration  21: 527572.701 ops/s
# Warmup Iteration  22: 516325.422 ops/s
# Warmup Iteration  23: 540168.383 ops/s
# Warmup Iteration  24: 508886.380 ops/s
# Warmup Iteration  25: 527934.822 ops/s
# Warmup Iteration  26: 529669.948 ops/s
# Warmup Iteration  27: 540511.895 ops/s
# Warmup Iteration  28: 532639.911 ops/s
# Warmup Iteration  29: 509528.449 ops/s
# Warmup Iteration  30: 540061.191 ops/s
Iteration   1: 520831.738 ops/s
Iteration   2: 526888.214 ops/s
Iteration   3: 520707.248 ops/s
Iteration   4: 499569.060 ops/s
Iteration   5: 525467.710 ops/s
Iteration   6: 514084.600 ops/s
Iteration   7: 547454.338 ops/s
Iteration   8: 520699.584 ops/s
Iteration   9: 527087.460 ops/s
Iteration  10: 531328.623 ops/s
Iteration  11: 516627.030 ops/s
Iteration  12: 541243.059 ops/s
Iteration  13: 532372.662 ops/s
Iteration  14: 519037.177 ops/s
Iteration  15: 525704.951 ops/s
Iteration  16: 532342.443 ops/s
Iteration  17: 516633.112 ops/s
Iteration  18: 534272.220 ops/s
Iteration  19: 527976.929 ops/s
Iteration  20: 537901.819 ops/s
Iteration  21: 513461.524 ops/s
Iteration  22: 518120.412 ops/s
Iteration  23: 548743.143 ops/s
Iteration  24: 503655.463 ops/s
Iteration  25: 547495.367 ops/s
Iteration  26: 425657.281 ops/s
Iteration  27: 512022.665 ops/s
Iteration  28: 546408.031 ops/s
Iteration  29: 512592.114 ops/s
Iteration  30: 530674.249 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithCompletableTest._Benchmark.benchmark_badSource":
  522568.674 ±(99.9%) 14883.957 ops/s [Average]
  (min, avg, max) = (425657.281, 522568.674, 548743.143), stdev = 22277.608
  CI (99.9%): [507684.718, 537452.631] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score       Error  Units
FlowableConcatWithCompletableTest._Benchmark.benchmark_badSource  thrpt   30  522568.674 ± 14883.957  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLongTest._Benchmark.benchmark_backpressureViaRequest$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLongTest._Benchmark.benchmark_backpressureViaRequest

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 76201.246 ops/s
# Warmup Iteration   2: 224449.917 ops/s
# Warmup Iteration   3: 479682.844 ops/s
# Warmup Iteration   4: 451125.189 ops/s
# Warmup Iteration   5: 440654.362 ops/s
# Warmup Iteration   6: 445206.494 ops/s
# Warmup Iteration   7: 430972.065 ops/s
# Warmup Iteration   8: 435861.151 ops/s
# Warmup Iteration   9: 469704.559 ops/s
# Warmup Iteration  10: 453969.066 ops/s
# Warmup Iteration  11: 469113.845 ops/s
# Warmup Iteration  12: 471283.555 ops/s
# Warmup Iteration  13: 443965.307 ops/s
# Warmup Iteration  14: 471422.102 ops/s
# Warmup Iteration  15: 448829.783 ops/s
# Warmup Iteration  16: 459897.101 ops/s
# Warmup Iteration  17: 452708.069 ops/s
# Warmup Iteration  18: 458246.673 ops/s
# Warmup Iteration  19: 456956.612 ops/s
# Warmup Iteration  20: 464819.987 ops/s
# Warmup Iteration  21: 458852.306 ops/s
# Warmup Iteration  22: 445151.200 ops/s
# Warmup Iteration  23: 471543.916 ops/s
# Warmup Iteration  24: 449294.713 ops/s
# Warmup Iteration  25: 438473.516 ops/s
# Warmup Iteration  26: 475804.763 ops/s
# Warmup Iteration  27: 437918.850 ops/s
# Warmup Iteration  28: 452218.604 ops/s
# Warmup Iteration  29: 421945.147 ops/s
# Warmup Iteration  30: 451369.708 ops/s
Iteration   1: 472022.084 ops/s
Iteration   2: 447929.006 ops/s
Iteration   3: 473733.656 ops/s
Iteration   4: 462182.746 ops/s
Iteration   5: 450183.533 ops/s
Iteration   6: 455913.028 ops/s
Iteration   7: 463396.902 ops/s
Iteration   8: 457171.080 ops/s
Iteration   9: 468711.802 ops/s
Iteration  10: 460402.638 ops/s
Iteration  11: 465285.210 ops/s
Iteration  12: 458980.324 ops/s
Iteration  13: 452802.395 ops/s
Iteration  14: 447685.786 ops/s
Iteration  15: 463454.224 ops/s
Iteration  16: 464859.874 ops/s
Iteration  17: 463032.406 ops/s
Iteration  18: 439000.110 ops/s
Iteration  19: 474832.878 ops/s
Iteration  20: 452745.944 ops/s
Iteration  21: 460233.296 ops/s
Iteration  22: 454077.068 ops/s
Iteration  23: 474353.050 ops/s
Iteration  24: 444339.190 ops/s
Iteration  25: 456770.557 ops/s
Iteration  26: 442502.674 ops/s
Iteration  27: 465448.818 ops/s
Iteration  28: 442702.400 ops/s
Iteration  29: 450244.031 ops/s
Iteration  30: 467732.710 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLongTest._Benchmark.benchmark_backpressureViaRequest":
  458424.314 ±(99.9%) 6675.894 ops/s [Average]
  (min, avg, max) = (439000.110, 458424.314, 474832.878), stdev = 9992.164
  CI (99.9%): [451748.420, 465100.208] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score      Error  Units
FlowableRangeLongTest._Benchmark.benchmark_backpressureViaRequest  thrpt   30  458424.314 ± 6675.894  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsTest._Benchmark.benchmark_errorReceived$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsTest._Benchmark.benchmark_errorReceived

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 212412.772 ops/s
# Warmup Iteration   2: 615580.487 ops/s
# Warmup Iteration   3: 690464.885 ops/s
# Warmup Iteration   4: 647050.000 ops/s
# Warmup Iteration   5: 679310.374 ops/s
# Warmup Iteration   6: 638284.854 ops/s
# Warmup Iteration   7: 669419.234 ops/s
# Warmup Iteration   8: 690129.778 ops/s
# Warmup Iteration   9: 670388.634 ops/s
# Warmup Iteration  10: 659657.386 ops/s
# Warmup Iteration  11: 690144.707 ops/s
# Warmup Iteration  12: 643929.516 ops/s
# Warmup Iteration  13: 702391.543 ops/s
# Warmup Iteration  14: 655742.170 ops/s
# Warmup Iteration  15: 697118.188 ops/s
# Warmup Iteration  16: 682829.624 ops/s
# Warmup Iteration  17: 703085.794 ops/s
# Warmup Iteration  18: 734781.071 ops/s
# Warmup Iteration  19: 692934.337 ops/s
# Warmup Iteration  20: 724279.743 ops/s
# Warmup Iteration  21: 741791.204 ops/s
# Warmup Iteration  22: 702933.060 ops/s
# Warmup Iteration  23: 719691.473 ops/s
# Warmup Iteration  24: 715158.564 ops/s
# Warmup Iteration  25: 754666.764 ops/s
# Warmup Iteration  26: 697745.770 ops/s
# Warmup Iteration  27: 716247.103 ops/s
# Warmup Iteration  28: 668984.343 ops/s
# Warmup Iteration  29: 716087.137 ops/s
# Warmup Iteration  30: 717440.941 ops/s
Iteration   1: 705038.308 ops/s
Iteration   2: 712895.633 ops/s
Iteration   3: 699290.642 ops/s
Iteration   4: 721156.250 ops/s
Iteration   5: 696024.183 ops/s
Iteration   6: 711241.282 ops/s
Iteration   7: 736787.615 ops/s
Iteration   8: 715738.228 ops/s
Iteration   9: 736925.851 ops/s
Iteration  10: 699526.901 ops/s
Iteration  11: 746549.589 ops/s
Iteration  12: 689087.047 ops/s
Iteration  13: 737513.765 ops/s
Iteration  14: 757352.736 ops/s
Iteration  15: 683199.541 ops/s
Iteration  16: 720011.018 ops/s
Iteration  17: 725508.089 ops/s
Iteration  18: 735474.043 ops/s
Iteration  19: 728209.690 ops/s
Iteration  20: 688681.016 ops/s
Iteration  21: 595180.640 ops/s
Iteration  22: 727685.033 ops/s
Iteration  23: 731668.671 ops/s
Iteration  24: 715349.358 ops/s
Iteration  25: 726380.493 ops/s
Iteration  26: 696972.516 ops/s
Iteration  27: 722538.572 ops/s
Iteration  28: 749650.855 ops/s
Iteration  29: 690892.860 ops/s
Iteration  30: 750107.678 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsTest._Benchmark.benchmark_errorReceived":
  715087.937 ±(99.9%) 20264.738 ops/s [Average]
  (min, avg, max) = (595180.640, 715087.937, 757352.736), stdev = 30331.308
  CI (99.9%): [694823.199, 735352.674] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score       Error  Units
FlowableIgnoreElementsTest._Benchmark.benchmark_errorReceived  thrpt   30  715087.937 ± 20264.738  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableMaterializeTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableMaterializeTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1357425.668 ops/s
# Warmup Iteration   2: 4766122.165 ops/s
# Warmup Iteration   3: 5639102.020 ops/s
# Warmup Iteration   4: 6295268.087 ops/s
# Warmup Iteration   5: 6571187.340 ops/s
# Warmup Iteration   6: 6326153.424 ops/s
# Warmup Iteration   7: 6333096.728 ops/s
# Warmup Iteration   8: 6464283.958 ops/s
# Warmup Iteration   9: 6384993.450 ops/s
# Warmup Iteration  10: 6302535.655 ops/s
# Warmup Iteration  11: 6396325.984 ops/s
# Warmup Iteration  12: 6214154.602 ops/s
# Warmup Iteration  13: 6644211.696 ops/s
# Warmup Iteration  14: 6311495.168 ops/s
# Warmup Iteration  15: 6222640.897 ops/s
# Warmup Iteration  16: 6593024.589 ops/s
# Warmup Iteration  17: 6394589.282 ops/s
# Warmup Iteration  18: 6173500.530 ops/s
# Warmup Iteration  19: 6396761.889 ops/s
# Warmup Iteration  20: 6121718.178 ops/s
# Warmup Iteration  21: 6484756.585 ops/s
# Warmup Iteration  22: 6323110.850 ops/s
# Warmup Iteration  23: 6459624.116 ops/s
# Warmup Iteration  24: 6297428.322 ops/s
# Warmup Iteration  25: 6295410.963 ops/s
# Warmup Iteration  26: 6658011.654 ops/s
# Warmup Iteration  27: 6518613.871 ops/s
# Warmup Iteration  28: 6258867.248 ops/s
# Warmup Iteration  29: 6645785.359 ops/s
# Warmup Iteration  30: 6305548.277 ops/s
Iteration   1: 6375439.530 ops/s
Iteration   2: 6216541.684 ops/s
Iteration   3: 6369943.899 ops/s
Iteration   4: 6238000.288 ops/s
Iteration   5: 6238807.152 ops/s
Iteration   6: 6436052.241 ops/s
Iteration   7: 6168603.939 ops/s
Iteration   8: 6661730.322 ops/s
Iteration   9: 6313149.099 ops/s
Iteration  10: 6642432.705 ops/s
Iteration  11: 6283546.499 ops/s
Iteration  12: 6428462.588 ops/s
Iteration  13: 6556602.301 ops/s
Iteration  14: 6181826.729 ops/s
Iteration  15: 6416117.456 ops/s
Iteration  16: 6244794.691 ops/s
Iteration  17: 6578704.079 ops/s
Iteration  18: 6445050.083 ops/s
Iteration  19: 6348289.326 ops/s
Iteration  20: 6504237.511 ops/s
Iteration  21: 6325169.325 ops/s
Iteration  22: 6542006.061 ops/s
Iteration  23: 6435932.244 ops/s
Iteration  24: 6314547.872 ops/s
Iteration  25: 6202499.939 ops/s
Iteration  26: 6515445.520 ops/s
Iteration  27: 6398235.302 ops/s
Iteration  28: 6398399.042 ops/s
Iteration  29: 6557637.051 ops/s
Iteration  30: 6242424.342 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableMaterializeTest._Benchmark.benchmark_dispose":
  6386020.961 ±(99.9%) 93331.296 ops/s [Average]
  (min, avg, max) = (6168603.939, 6386020.961, 6661730.322), stdev = 139693.900
  CI (99.9%): [6292689.665, 6479352.256] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
CompletableMaterializeTest._Benchmark.benchmark_dispose  thrpt   30  6386020.961 ± 93331.296  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableFromMaybeTest._Benchmark.benchmark_fromMaybeError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableFromMaybeTest._Benchmark.benchmark_fromMaybeError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 182217.536 ops/s
# Warmup Iteration   2: 603490.691 ops/s
# Warmup Iteration   3: 693698.032 ops/s
# Warmup Iteration   4: 725761.530 ops/s
# Warmup Iteration   5: 749702.862 ops/s
# Warmup Iteration   6: 681900.096 ops/s
# Warmup Iteration   7: 724217.502 ops/s
# Warmup Iteration   8: 655261.497 ops/s
# Warmup Iteration   9: 729344.661 ops/s
# Warmup Iteration  10: 740332.673 ops/s
# Warmup Iteration  11: 714499.874 ops/s
# Warmup Iteration  12: 749115.639 ops/s
# Warmup Iteration  13: 704709.272 ops/s
# Warmup Iteration  14: 727477.716 ops/s
# Warmup Iteration  15: 753624.501 ops/s
# Warmup Iteration  16: 719678.968 ops/s
# Warmup Iteration  17: 736873.518 ops/s
# Warmup Iteration  18: 767391.385 ops/s
# Warmup Iteration  19: 761333.090 ops/s
# Warmup Iteration  20: 755670.328 ops/s
# Warmup Iteration  21: 758577.255 ops/s
# Warmup Iteration  22: 764324.030 ops/s
# Warmup Iteration  23: 768270.275 ops/s
# Warmup Iteration  24: 760906.789 ops/s
# Warmup Iteration  25: 753595.180 ops/s
# Warmup Iteration  26: 781356.640 ops/s
# Warmup Iteration  27: 751994.816 ops/s
# Warmup Iteration  28: 772761.399 ops/s
# Warmup Iteration  29: 804101.587 ops/s
# Warmup Iteration  30: 730799.577 ops/s
Iteration   1: 779401.166 ops/s
Iteration   2: 742344.734 ops/s
Iteration   3: 767407.935 ops/s
Iteration   4: 772313.313 ops/s
Iteration   5: 756133.152 ops/s
Iteration   6: 799457.365 ops/s
Iteration   7: 746275.456 ops/s
Iteration   8: 766271.779 ops/s
Iteration   9: 764598.167 ops/s
Iteration  10: 787185.923 ops/s
Iteration  11: 794390.413 ops/s
Iteration  12: 753093.449 ops/s
Iteration  13: 806053.451 ops/s
Iteration  14: 766237.450 ops/s
Iteration  15: 695470.543 ops/s
Iteration  16: 599634.299 ops/s
Iteration  17: 761085.583 ops/s
Iteration  18: 799728.430 ops/s
Iteration  19: 780383.107 ops/s
Iteration  20: 748351.074 ops/s
Iteration  21: 800950.764 ops/s
Iteration  22: 773113.842 ops/s
Iteration  23: 773476.362 ops/s
Iteration  24: 768126.461 ops/s
Iteration  25: 771534.437 ops/s
Iteration  26: 754833.194 ops/s
Iteration  27: 756836.668 ops/s
Iteration  28: 805671.683 ops/s
Iteration  29: 729672.240 ops/s
Iteration  30: 775454.078 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableFromMaybeTest._Benchmark.benchmark_fromMaybeError":
  763182.884 ±(99.9%) 26042.933 ops/s [Average]
  (min, avg, max) = (599634.299, 763182.884, 806053.451), stdev = 38979.840
  CI (99.9%): [737139.951, 789225.817] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score       Error  Units
CompletableFromMaybeTest._Benchmark.benchmark_fromMaybeError  thrpt   30  763182.884 ± 26042.933  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleConcatTest._Benchmark.benchmark_concatEagerIterableTest$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleConcatTest._Benchmark.benchmark_concatEagerIterableTest

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 88727.757 ops/s
# Warmup Iteration   2: 385772.207 ops/s
# Warmup Iteration   3: 860658.942 ops/s
# Warmup Iteration   4: 868602.822 ops/s
# Warmup Iteration   5: 1001694.919 ops/s
# Warmup Iteration   6: 954441.102 ops/s
# Warmup Iteration   7: 944027.033 ops/s
# Warmup Iteration   8: 1001511.855 ops/s
# Warmup Iteration   9: 932893.432 ops/s
# Warmup Iteration  10: 979782.756 ops/s
# Warmup Iteration  11: 932789.815 ops/s
# Warmup Iteration  12: 995726.604 ops/s
# Warmup Iteration  13: 996172.404 ops/s
# Warmup Iteration  14: 951334.502 ops/s
# Warmup Iteration  15: 1017899.527 ops/s
# Warmup Iteration  16: 1005912.078 ops/s
# Warmup Iteration  17: 939143.829 ops/s
# Warmup Iteration  18: 988940.139 ops/s
# Warmup Iteration  19: 969359.919 ops/s
# Warmup Iteration  20: 966857.605 ops/s
# Warmup Iteration  21: 1001720.503 ops/s
# Warmup Iteration  22: 964266.077 ops/s
# Warmup Iteration  23: 995815.132 ops/s
# Warmup Iteration  24: 973196.181 ops/s
# Warmup Iteration  25: 917215.044 ops/s
# Warmup Iteration  26: 1023726.414 ops/s
# Warmup Iteration  27: 993732.117 ops/s
# Warmup Iteration  28: 942237.366 ops/s
# Warmup Iteration  29: 962773.534 ops/s
# Warmup Iteration  30: 961401.085 ops/s
Iteration   1: 982414.290 ops/s
Iteration   2: 985709.010 ops/s
Iteration   3: 956144.454 ops/s
Iteration   4: 977724.392 ops/s
Iteration   5: 968796.726 ops/s
Iteration   6: 966497.563 ops/s
Iteration   7: 979833.239 ops/s
Iteration   8: 961273.079 ops/s
Iteration   9: 1006434.811 ops/s
Iteration  10: 930738.172 ops/s
Iteration  11: 977684.356 ops/s
Iteration  12: 968697.749 ops/s
Iteration  13: 960107.192 ops/s
Iteration  14: 976015.929 ops/s
Iteration  15: 947206.712 ops/s
Iteration  16: 959419.397 ops/s
Iteration  17: 976071.716 ops/s
Iteration  18: 986037.115 ops/s
Iteration  19: 918135.258 ops/s
Iteration  20: 964878.902 ops/s
Iteration  21: 1002107.578 ops/s
Iteration  22: 956732.915 ops/s
Iteration  23: 979447.623 ops/s
Iteration  24: 974251.818 ops/s
Iteration  25: 972414.789 ops/s
Iteration  26: 959195.560 ops/s
Iteration  27: 920658.792 ops/s
Iteration  28: 984140.716 ops/s
Iteration  29: 969769.143 ops/s
Iteration  30: 944045.365 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleConcatTest._Benchmark.benchmark_concatEagerIterableTest":
  967086.145 ±(99.9%) 13610.445 ops/s [Average]
  (min, avg, max) = (918135.258, 967086.145, 1006434.811), stdev = 20371.474
  CI (99.9%): [953475.701, 980696.590] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score       Error  Units
SingleConcatTest._Benchmark.benchmark_concatEagerIterableTest  thrpt   30  967086.145 ± 13610.445  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFromCompletableTest._Benchmark.benchmark_fromCompletableError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFromCompletableTest._Benchmark.benchmark_fromCompletableError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 229012.965 ops/s
# Warmup Iteration   2: 569496.089 ops/s
# Warmup Iteration   3: 655551.404 ops/s
# Warmup Iteration   4: 663129.535 ops/s
# Warmup Iteration   5: 690754.527 ops/s
# Warmup Iteration   6: 694594.247 ops/s
# Warmup Iteration   7: 734075.554 ops/s
# Warmup Iteration   8: 701824.380 ops/s
# Warmup Iteration   9: 724085.805 ops/s
# Warmup Iteration  10: 698786.067 ops/s
# Warmup Iteration  11: 708532.647 ops/s
# Warmup Iteration  12: 744047.478 ops/s
# Warmup Iteration  13: 683041.097 ops/s
# Warmup Iteration  14: 725594.514 ops/s
# Warmup Iteration  15: 683249.505 ops/s
# Warmup Iteration  16: 729746.795 ops/s
# Warmup Iteration  17: 733628.322 ops/s
# Warmup Iteration  18: 762999.303 ops/s
# Warmup Iteration  19: 749491.278 ops/s
# Warmup Iteration  20: 776757.154 ops/s
# Warmup Iteration  21: 769542.854 ops/s
# Warmup Iteration  22: 745127.497 ops/s
# Warmup Iteration  23: 783119.133 ops/s
# Warmup Iteration  24: 753871.917 ops/s
# Warmup Iteration  25: 749866.917 ops/s
# Warmup Iteration  26: 749744.739 ops/s
# Warmup Iteration  27: 752459.473 ops/s
# Warmup Iteration  28: 764921.875 ops/s
# Warmup Iteration  29: 771708.853 ops/s
# Warmup Iteration  30: 740467.614 ops/s
Iteration   1: 765258.727 ops/s
Iteration   2: 739539.504 ops/s
Iteration   3: 746808.850 ops/s
Iteration   4: 751849.678 ops/s
Iteration   5: 744722.327 ops/s
Iteration   6: 790680.913 ops/s
Iteration   7: 731403.909 ops/s
Iteration   8: 783916.339 ops/s
Iteration   9: 731492.553 ops/s
Iteration  10: 595461.728 ops/s
Iteration  11: 771032.114 ops/s
Iteration  12: 727086.873 ops/s
Iteration  13: 793573.525 ops/s
Iteration  14: 735944.052 ops/s
Iteration  15: 759831.107 ops/s
Iteration  16: 778978.043 ops/s
Iteration  17: 730499.457 ops/s
Iteration  18: 777173.780 ops/s
Iteration  19: 752988.644 ops/s
Iteration  20: 754152.529 ops/s
Iteration  21: 749016.003 ops/s
Iteration  22: 769359.558 ops/s
Iteration  23: 721304.283 ops/s
Iteration  24: 741683.938 ops/s
Iteration  25: 789111.168 ops/s
Iteration  26: 748852.230 ops/s
Iteration  27: 727697.870 ops/s
Iteration  28: 788173.709 ops/s
Iteration  29: 742998.892 ops/s
Iteration  30: 757403.427 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFromCompletableTest._Benchmark.benchmark_fromCompletableError":
  749933.191 ±(99.9%) 24108.913 ops/s [Average]
  (min, avg, max) = (595461.728, 749933.191, 793573.525), stdev = 36085.089
  CI (99.9%): [725824.278, 774042.104] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score       Error  Units
MaybeFromCompletableTest._Benchmark.benchmark_fromCompletableError  thrpt   30  749933.191 ± 24108.913  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterableTest._Benchmark.benchmark_nextThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterableTest._Benchmark.benchmark_nextThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 124059.360 ops/s
# Warmup Iteration   2: 467332.866 ops/s
# Warmup Iteration   3: 515793.070 ops/s
# Warmup Iteration   4: 542665.058 ops/s
# Warmup Iteration   5: 559522.538 ops/s
# Warmup Iteration   6: 557434.324 ops/s
# Warmup Iteration   7: 534285.155 ops/s
# Warmup Iteration   8: 546441.411 ops/s
# Warmup Iteration   9: 570499.476 ops/s
# Warmup Iteration  10: 534399.382 ops/s
# Warmup Iteration  11: 525448.528 ops/s
# Warmup Iteration  12: 559614.735 ops/s
# Warmup Iteration  13: 540798.206 ops/s
# Warmup Iteration  14: 551210.701 ops/s
# Warmup Iteration  15: 549389.268 ops/s
# Warmup Iteration  16: 553596.878 ops/s
# Warmup Iteration  17: 571820.997 ops/s
# Warmup Iteration  18: 573454.846 ops/s
# Warmup Iteration  19: 585460.642 ops/s
# Warmup Iteration  20: 550780.938 ops/s
# Warmup Iteration  21: 593620.933 ops/s
# Warmup Iteration  22: 570300.458 ops/s
# Warmup Iteration  23: 577676.599 ops/s
# Warmup Iteration  24: 559398.519 ops/s
# Warmup Iteration  25: 567652.806 ops/s
# Warmup Iteration  26: 588331.942 ops/s
# Warmup Iteration  27: 567377.345 ops/s
# Warmup Iteration  28: 596053.705 ops/s
# Warmup Iteration  29: 592344.105 ops/s
# Warmup Iteration  30: 567664.392 ops/s
Iteration   1: 602507.445 ops/s
Iteration   2: 571342.073 ops/s
Iteration   3: 592196.926 ops/s
Iteration   4: 576085.277 ops/s
Iteration   5: 572112.977 ops/s
Iteration   6: 593674.625 ops/s
Iteration   7: 553702.623 ops/s
Iteration   8: 588402.970 ops/s
Iteration   9: 588846.147 ops/s
Iteration  10: 584990.292 ops/s
Iteration  11: 577943.739 ops/s
Iteration  12: 565822.519 ops/s
Iteration  13: 600025.353 ops/s
Iteration  14: 568831.191 ops/s
Iteration  15: 577560.646 ops/s
Iteration  16: 608596.358 ops/s
Iteration  17: 571048.962 ops/s
Iteration  18: 602372.259 ops/s
Iteration  19: 586629.328 ops/s
Iteration  20: 582586.131 ops/s
Iteration  21: 604399.198 ops/s
Iteration  22: 569952.566 ops/s
Iteration  23: 594922.431 ops/s
Iteration  24: 565923.745 ops/s
Iteration  25: 581097.970 ops/s
Iteration  26: 589447.374 ops/s
Iteration  27: 571185.342 ops/s
Iteration  28: 576474.031 ops/s
Iteration  29: 591754.198 ops/s
Iteration  30: 594854.489 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterableTest._Benchmark.benchmark_nextThrows":
  583509.639 ±(99.9%) 9060.252 ops/s [Average]
  (min, avg, max) = (553702.623, 583509.639, 608596.358), stdev = 13560.959
  CI (99.9%): [574449.388, 592569.891] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score      Error  Units
MaybeConcatIterableTest._Benchmark.benchmark_nextThrows  thrpt   30  583509.639 ± 9060.252  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 101125.512 ops/s
# Warmup Iteration   2: 424721.219 ops/s
# Warmup Iteration   3: 482631.898 ops/s
# Warmup Iteration   4: 475761.308 ops/s
# Warmup Iteration   5: 481419.515 ops/s
# Warmup Iteration   6: 471037.947 ops/s
# Warmup Iteration   7: 464561.686 ops/s
# Warmup Iteration   8: 500426.446 ops/s
# Warmup Iteration   9: 485287.373 ops/s
# Warmup Iteration  10: 482971.321 ops/s
# Warmup Iteration  11: 482451.624 ops/s
# Warmup Iteration  12: 489493.104 ops/s
# Warmup Iteration  13: 483920.208 ops/s
# Warmup Iteration  14: 473226.545 ops/s
# Warmup Iteration  15: 497547.700 ops/s
# Warmup Iteration  16: 487246.931 ops/s
# Warmup Iteration  17: 510621.445 ops/s
# Warmup Iteration  18: 519717.094 ops/s
# Warmup Iteration  19: 505270.573 ops/s
# Warmup Iteration  20: 529722.498 ops/s
# Warmup Iteration  21: 491206.375 ops/s
# Warmup Iteration  22: 511595.655 ops/s
# Warmup Iteration  23: 501400.605 ops/s
# Warmup Iteration  24: 482054.817 ops/s
# Warmup Iteration  25: 506449.356 ops/s
# Warmup Iteration  26: 495054.297 ops/s
# Warmup Iteration  27: 504954.532 ops/s
# Warmup Iteration  28: 500056.901 ops/s
# Warmup Iteration  29: 509890.432 ops/s
# Warmup Iteration  30: 496627.331 ops/s
Iteration   1: 514045.064 ops/s
Iteration   2: 499410.653 ops/s
Iteration   3: 507913.385 ops/s
Iteration   4: 522637.058 ops/s
Iteration   5: 349417.799 ops/s
Iteration   6: 510110.700 ops/s
Iteration   7: 494321.482 ops/s
Iteration   8: 527808.292 ops/s
Iteration   9: 484570.029 ops/s
Iteration  10: 518668.383 ops/s
Iteration  11: 502848.017 ops/s
Iteration  12: 494300.698 ops/s
Iteration  13: 499518.357 ops/s
Iteration  14: 485235.009 ops/s
Iteration  15: 501691.770 ops/s
Iteration  16: 481130.812 ops/s
Iteration  17: 516330.745 ops/s
Iteration  18: 494989.909 ops/s
Iteration  19: 512916.352 ops/s
Iteration  20: 508727.430 ops/s
Iteration  21: 503775.532 ops/s
Iteration  22: 499230.413 ops/s
Iteration  23: 500963.849 ops/s
Iteration  24: 520592.064 ops/s
Iteration  25: 500780.556 ops/s
Iteration  26: 502401.814 ops/s
Iteration  27: 505401.934 ops/s
Iteration  28: 517001.826 ops/s
Iteration  29: 506391.037 ops/s
Iteration  30: 506895.863 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilTest._Benchmark.benchmark_doubleOnSubscribe":
  499667.561 ±(99.9%) 20364.912 ops/s [Average]
  (min, avg, max) = (349417.799, 499667.561, 527808.292), stdev = 30481.243
  CI (99.9%): [479302.649, 520032.473] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score       Error  Units
FlowableTakeUntilTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  499667.561 ± 20364.912  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalTest._Benchmark.benchmark_cancelledOnRun$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalTest._Benchmark.benchmark_cancelledOnRun

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2743020.019 ops/s
# Warmup Iteration   2: 4756759.503 ops/s
# Warmup Iteration   3: 6417662.546 ops/s
# Warmup Iteration   4: 6918883.044 ops/s
# Warmup Iteration   5: 6571503.130 ops/s
# Warmup Iteration   6: 6479353.809 ops/s
# Warmup Iteration   7: 6782043.846 ops/s
# Warmup Iteration   8: 6457398.881 ops/s
# Warmup Iteration   9: 6674345.616 ops/s
# Warmup Iteration  10: 6655459.218 ops/s
# Warmup Iteration  11: 6498372.546 ops/s
# Warmup Iteration  12: 6762179.587 ops/s
# Warmup Iteration  13: 6492256.611 ops/s
# Warmup Iteration  14: 6837190.259 ops/s
# Warmup Iteration  15: 6593518.738 ops/s
# Warmup Iteration  16: 6737781.204 ops/s
# Warmup Iteration  17: 6572602.996 ops/s
# Warmup Iteration  18: 6585052.146 ops/s
# Warmup Iteration  19: 6640136.689 ops/s
# Warmup Iteration  20: 6496930.165 ops/s
# Warmup Iteration  21: 6803645.102 ops/s
# Warmup Iteration  22: 6586682.329 ops/s
# Warmup Iteration  23: 6733127.530 ops/s
# Warmup Iteration  24: 6524250.941 ops/s
# Warmup Iteration  25: 6420252.497 ops/s
# Warmup Iteration  26: 6656942.080 ops/s
# Warmup Iteration  27: 6593807.075 ops/s
# Warmup Iteration  28: 6640250.338 ops/s
# Warmup Iteration  29: 6571957.159 ops/s
# Warmup Iteration  30: 6642696.651 ops/s
Iteration   1: 6635824.468 ops/s
Iteration   2: 6488909.514 ops/s
Iteration   3: 6694829.828 ops/s
Iteration   4: 6629901.333 ops/s
Iteration   5: 6694279.356 ops/s
Iteration   6: 6489327.261 ops/s
Iteration   7: 6742204.536 ops/s
Iteration   8: 6520395.486 ops/s
Iteration   9: 6604068.674 ops/s
Iteration  10: 6721003.987 ops/s
Iteration  11: 6602210.982 ops/s
Iteration  12: 6681751.099 ops/s
Iteration  13: 6516322.975 ops/s
Iteration  14: 6840908.204 ops/s
Iteration  15: 6777102.973 ops/s
Iteration  16: 6561230.287 ops/s
Iteration  17: 6753647.130 ops/s
Iteration  18: 6516487.082 ops/s
Iteration  19: 6880210.977 ops/s
Iteration  20: 6435914.566 ops/s
Iteration  21: 6898954.879 ops/s
Iteration  22: 6551077.485 ops/s
Iteration  23: 6784835.871 ops/s
Iteration  24: 6449861.282 ops/s
Iteration  25: 6876701.003 ops/s
Iteration  26: 6777170.669 ops/s
Iteration  27: 6368903.028 ops/s
Iteration  28: 6681492.772 ops/s
Iteration  29: 6627154.269 ops/s
Iteration  30: 6819118.242 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalTest._Benchmark.benchmark_cancelledOnRun":
  6654060.007 ±(99.9%) 96423.200 ops/s [Average]
  (min, avg, max) = (6368903.028, 6654060.007, 6898954.879), stdev = 144321.717
  CI (99.9%): [6557636.808, 6750483.207] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
FlowableIntervalTest._Benchmark.benchmark_cancelledOnRun  thrpt   30  6654060.007 ± 96423.200  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCreateTest._Benchmark.benchmark_tryOnErrorNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCreateTest._Benchmark.benchmark_tryOnErrorNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 203221.564 ops/s
# Warmup Iteration   2: 488092.455 ops/s
# Warmup Iteration   3: 569404.948 ops/s
# Warmup Iteration   4: 570773.188 ops/s
# Warmup Iteration   5: 598020.928 ops/s
# Warmup Iteration   6: 567793.510 ops/s
# Warmup Iteration   7: 595845.848 ops/s
# Warmup Iteration   8: 584774.553 ops/s
# Warmup Iteration   9: 579028.684 ops/s
# Warmup Iteration  10: 591430.618 ops/s
# Warmup Iteration  11: 570939.112 ops/s
# Warmup Iteration  12: 589057.424 ops/s
# Warmup Iteration  13: 571781.115 ops/s
# Warmup Iteration  14: 595298.081 ops/s
# Warmup Iteration  15: 576084.720 ops/s
# Warmup Iteration  16: 603142.355 ops/s
# Warmup Iteration  17: 595827.974 ops/s
# Warmup Iteration  18: 606318.910 ops/s
# Warmup Iteration  19: 593762.028 ops/s
# Warmup Iteration  20: 607729.981 ops/s
# Warmup Iteration  21: 632127.804 ops/s
# Warmup Iteration  22: 572604.934 ops/s
# Warmup Iteration  23: 644176.963 ops/s
# Warmup Iteration  24: 623216.302 ops/s
# Warmup Iteration  25: 587179.770 ops/s
# Warmup Iteration  26: 631898.351 ops/s
# Warmup Iteration  27: 581343.503 ops/s
# Warmup Iteration  28: 603691.519 ops/s
# Warmup Iteration  29: 635267.881 ops/s
# Warmup Iteration  30: 476995.704 ops/s
Iteration   1: 632805.223 ops/s
Iteration   2: 601117.435 ops/s
Iteration   3: 617772.418 ops/s
Iteration   4: 606482.323 ops/s
Iteration   5: 609724.715 ops/s
Iteration   6: 605043.711 ops/s
Iteration   7: 605639.219 ops/s
Iteration   8: 632004.696 ops/s
Iteration   9: 602253.377 ops/s
Iteration  10: 623036.623 ops/s
Iteration  11: 597964.731 ops/s
Iteration  12: 627767.027 ops/s
Iteration  13: 618002.267 ops/s
Iteration  14: 592680.652 ops/s
Iteration  15: 596330.664 ops/s
Iteration  16: 598642.269 ops/s
Iteration  17: 626621.242 ops/s
Iteration  18: 586056.264 ops/s
Iteration  19: 587805.521 ops/s
Iteration  20: 617809.700 ops/s
Iteration  21: 596589.465 ops/s
Iteration  22: 621539.822 ops/s
Iteration  23: 615825.748 ops/s
Iteration  24: 618153.612 ops/s
Iteration  25: 634570.718 ops/s
Iteration  26: 601778.107 ops/s
Iteration  27: 617669.912 ops/s
Iteration  28: 600085.609 ops/s
Iteration  29: 630963.129 ops/s
Iteration  30: 612787.916 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableCreateTest._Benchmark.benchmark_tryOnErrorNull":
  611184.137 ±(99.9%) 9300.886 ops/s [Average]
  (min, avg, max) = (586056.264, 611184.137, 634570.718), stdev = 13921.129
  CI (99.9%): [601883.251, 620485.023] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
FlowableCreateTest._Benchmark.benchmark_tryOnErrorNull  thrpt   30  611184.137 ± 9300.886  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTests._Benchmark.benchmark_shouldTimeoutIfSecondOnNextNotWithinTimeout$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTests._Benchmark.benchmark_shouldTimeoutIfSecondOnNextNotWithinTimeout

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 43255.215 ops/s
# Warmup Iteration   2: 98294.285 ops/s
# Warmup Iteration   3: 276308.693 ops/s
# Warmup Iteration   4: 344445.116 ops/s
# Warmup Iteration   5: 349998.115 ops/s
# Warmup Iteration   6: 351199.996 ops/s
# Warmup Iteration   7: 363123.009 ops/s
# Warmup Iteration   8: 362657.307 ops/s
# Warmup Iteration   9: 351343.491 ops/s
# Warmup Iteration  10: 360517.145 ops/s
# Warmup Iteration  11: 356744.778 ops/s
# Warmup Iteration  12: 363635.168 ops/s
# Warmup Iteration  13: 349682.769 ops/s
# Warmup Iteration  14: 353455.401 ops/s
# Warmup Iteration  15: 359486.621 ops/s
# Warmup Iteration  16: 357183.574 ops/s
# Warmup Iteration  17: 384667.200 ops/s
# Warmup Iteration  18: 357201.372 ops/s
# Warmup Iteration  19: 384548.829 ops/s
# Warmup Iteration  20: 352756.897 ops/s
# Warmup Iteration  21: 379154.889 ops/s
# Warmup Iteration  22: 371299.712 ops/s
# Warmup Iteration  23: 349818.148 ops/s
# Warmup Iteration  24: 383295.429 ops/s
# Warmup Iteration  25: 385175.073 ops/s
# Warmup Iteration  26: 357225.729 ops/s
# Warmup Iteration  27: 380344.290 ops/s
# Warmup Iteration  28: 367782.244 ops/s
# Warmup Iteration  29: 361428.302 ops/s
# Warmup Iteration  30: 376469.266 ops/s
Iteration   1: 376588.932 ops/s
Iteration   2: 359344.549 ops/s
Iteration   3: 375698.129 ops/s
Iteration   4: 364764.240 ops/s
Iteration   5: 366831.989 ops/s
Iteration   6: 367831.204 ops/s
Iteration   7: 383661.501 ops/s
Iteration   8: 370157.883 ops/s
Iteration   9: 364749.601 ops/s
Iteration  10: 371741.849 ops/s
Iteration  11: 364609.056 ops/s
Iteration  12: 383524.028 ops/s
Iteration  13: 359171.602 ops/s
Iteration  14: 339980.668 ops/s
Iteration  15: 379880.692 ops/s
Iteration  16: 379855.903 ops/s
Iteration  17: 363336.691 ops/s
Iteration  18: 387087.327 ops/s
Iteration  19: 369294.203 ops/s
Iteration  20: 374206.080 ops/s
Iteration  21: 366912.668 ops/s
Iteration  22: 377480.145 ops/s
Iteration  23: 373627.846 ops/s
Iteration  24: 354417.567 ops/s
Iteration  25: 367571.760 ops/s
Iteration  26: 385659.434 ops/s
Iteration  27: 356096.072 ops/s
Iteration  28: 375232.927 ops/s
Iteration  29: 381566.134 ops/s
Iteration  30: 355789.773 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTests._Benchmark.benchmark_shouldTimeoutIfSecondOnNextNotWithinTimeout":
  369889.015 ±(99.9%) 7188.473 ops/s [Average]
  (min, avg, max) = (339980.668, 369889.015, 387087.327), stdev = 10759.369
  CI (99.9%): [362700.542, 377077.488] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               Mode  Cnt       Score      Error  Units
FlowableTimeoutTests._Benchmark.benchmark_shouldTimeoutIfSecondOnNextNotWithinTimeout  thrpt   30  369889.015 ± 7188.473  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_fusedInnerCrash2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_fusedInnerCrash2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 11379.084 ops/s
# Warmup Iteration   2: 64764.090 ops/s
# Warmup Iteration   3: 98781.160 ops/s
# Warmup Iteration   4: 131129.961 ops/s
# Warmup Iteration   5: 244938.197 ops/s
# Warmup Iteration   6: 245100.602 ops/s
# Warmup Iteration   7: 280458.632 ops/s
# Warmup Iteration   8: 267276.742 ops/s
# Warmup Iteration   9: 269271.307 ops/s
# Warmup Iteration  10: 282354.783 ops/s
# Warmup Iteration  11: 267463.076 ops/s
# Warmup Iteration  12: 275299.303 ops/s
# Warmup Iteration  13: 271062.892 ops/s
# Warmup Iteration  14: 276300.818 ops/s
# Warmup Iteration  15: 281903.669 ops/s
# Warmup Iteration  16: 270284.530 ops/s
# Warmup Iteration  17: 285495.226 ops/s
# Warmup Iteration  18: 258261.516 ops/s
# Warmup Iteration  19: 274461.789 ops/s
# Warmup Iteration  20: 282531.331 ops/s
# Warmup Iteration  21: 278805.612 ops/s
# Warmup Iteration  22: 288389.845 ops/s
# Warmup Iteration  23: 288516.328 ops/s
# Warmup Iteration  24: 263984.674 ops/s
# Warmup Iteration  25: 242188.379 ops/s
# Warmup Iteration  26: 274375.111 ops/s
# Warmup Iteration  27: 285346.892 ops/s
# Warmup Iteration  28: 273226.703 ops/s
# Warmup Iteration  29: 278004.512 ops/s
# Warmup Iteration  30: 277553.056 ops/s
Iteration   1: 277174.147 ops/s
Iteration   2: 279102.865 ops/s
Iteration   3: 276005.978 ops/s
Iteration   4: 275100.451 ops/s
Iteration   5: 283400.843 ops/s
Iteration   6: 269516.110 ops/s
Iteration   7: 286104.725 ops/s
Iteration   8: 275446.216 ops/s
Iteration   9: 284288.526 ops/s
Iteration  10: 279562.872 ops/s
Iteration  11: 275540.110 ops/s
Iteration  12: 271365.523 ops/s
Iteration  13: 277352.276 ops/s
Iteration  14: 291086.829 ops/s
Iteration  15: 284061.656 ops/s
Iteration  16: 265078.834 ops/s
Iteration  17: 290093.582 ops/s
Iteration  18: 283210.806 ops/s
Iteration  19: 269833.517 ops/s
Iteration  20: 285375.500 ops/s
Iteration  21: 278821.966 ops/s
Iteration  22: 279776.773 ops/s
Iteration  23: 270584.126 ops/s
Iteration  24: 280746.446 ops/s
Iteration  25: 277785.761 ops/s
Iteration  26: 286467.863 ops/s
Iteration  27: 271973.090 ops/s
Iteration  28: 286130.977 ops/s
Iteration  29: 271914.710 ops/s
Iteration  30: 287534.067 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_fusedInnerCrash2":
  279014.572 ±(99.9%) 4451.130 ops/s [Average]
  (min, avg, max) = (265078.834, 279014.572, 291086.829), stdev = 6662.243
  CI (99.9%): [274563.441, 283465.702] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
FlowableFlatMapTest._Benchmark.benchmark_fusedInnerCrash2  thrpt   30  279014.572 ± 4451.130  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_fusedInnerCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_fusedInnerCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 12505.267 ops/s
# Warmup Iteration   2: 48780.943 ops/s
# Warmup Iteration   3: 84658.678 ops/s
# Warmup Iteration   4: 110184.106 ops/s
# Warmup Iteration   5: 262075.968 ops/s
# Warmup Iteration   6: 267090.137 ops/s
# Warmup Iteration   7: 262399.958 ops/s
# Warmup Iteration   8: 272137.874 ops/s
# Warmup Iteration   9: 270274.470 ops/s
# Warmup Iteration  10: 273204.194 ops/s
# Warmup Iteration  11: 267822.184 ops/s
# Warmup Iteration  12: 277500.514 ops/s
# Warmup Iteration  13: 278461.210 ops/s
# Warmup Iteration  14: 274923.042 ops/s
# Warmup Iteration  15: 272492.319 ops/s
# Warmup Iteration  16: 273753.109 ops/s
# Warmup Iteration  17: 292855.663 ops/s
# Warmup Iteration  18: 268383.969 ops/s
# Warmup Iteration  19: 283731.585 ops/s
# Warmup Iteration  20: 277321.261 ops/s
# Warmup Iteration  21: 279224.714 ops/s
# Warmup Iteration  22: 270385.384 ops/s
# Warmup Iteration  23: 268128.875 ops/s
# Warmup Iteration  24: 282399.010 ops/s
# Warmup Iteration  25: 269122.811 ops/s
# Warmup Iteration  26: 265012.396 ops/s
# Warmup Iteration  27: 276718.102 ops/s
# Warmup Iteration  28: 286900.385 ops/s
# Warmup Iteration  29: 277087.085 ops/s
# Warmup Iteration  30: 280969.270 ops/s
Iteration   1: 280386.359 ops/s
Iteration   2: 279894.605 ops/s
Iteration   3: 285351.442 ops/s
Iteration   4: 280283.451 ops/s
Iteration   5: 282056.098 ops/s
Iteration   6: 278472.758 ops/s
Iteration   7: 282754.899 ops/s
Iteration   8: 283272.424 ops/s
Iteration   9: 280040.631 ops/s
Iteration  10: 282094.479 ops/s
Iteration  11: 279423.007 ops/s
Iteration  12: 291059.858 ops/s
Iteration  13: 276504.627 ops/s
Iteration  14: 282575.372 ops/s
Iteration  15: 286806.150 ops/s
Iteration  16: 274235.284 ops/s
Iteration  17: 278466.976 ops/s
Iteration  18: 284896.706 ops/s
Iteration  19: 282671.353 ops/s
Iteration  20: 284749.125 ops/s
Iteration  21: 279764.468 ops/s
Iteration  22: 287666.599 ops/s
Iteration  23: 279260.749 ops/s
Iteration  24: 287855.869 ops/s
Iteration  25: 284014.455 ops/s
Iteration  26: 287524.394 ops/s
Iteration  27: 283047.457 ops/s
Iteration  28: 267216.749 ops/s
Iteration  29: 296305.811 ops/s
Iteration  30: 280068.879 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_fusedInnerCrash":
  282290.701 ±(99.9%) 3531.383 ops/s [Average]
  (min, avg, max) = (267216.749, 282290.701, 296305.811), stdev = 5285.608
  CI (99.9%): [278759.318, 285822.084] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score      Error  Units
FlowableFlatMapTest._Benchmark.benchmark_fusedInnerCrash  thrpt   30  282290.701 ± 3531.383  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithFlowableTest._Benchmark.benchmark_reentrant$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithFlowableTest._Benchmark.benchmark_reentrant

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 8430.838 ops/s
# Warmup Iteration   2: 128540.543 ops/s
# Warmup Iteration   3: 173377.690 ops/s
# Warmup Iteration   4: 376190.496 ops/s
# Warmup Iteration   5: 367935.476 ops/s
# Warmup Iteration   6: 412439.546 ops/s
# Warmup Iteration   7: 433678.750 ops/s
# Warmup Iteration   8: 412623.684 ops/s
# Warmup Iteration   9: 431715.346 ops/s
# Warmup Iteration  10: 432183.755 ops/s
# Warmup Iteration  11: 426677.186 ops/s
# Warmup Iteration  12: 408665.465 ops/s
# Warmup Iteration  13: 438107.225 ops/s
# Warmup Iteration  14: 407885.071 ops/s
# Warmup Iteration  15: 404922.721 ops/s
# Warmup Iteration  16: 423491.074 ops/s
# Warmup Iteration  17: 422940.610 ops/s
# Warmup Iteration  18: 432231.931 ops/s
# Warmup Iteration  19: 348232.889 ops/s
# Warmup Iteration  20: 407531.919 ops/s
# Warmup Iteration  21: 415026.707 ops/s
# Warmup Iteration  22: 425218.036 ops/s
# Warmup Iteration  23: 432347.564 ops/s
# Warmup Iteration  24: 410102.079 ops/s
# Warmup Iteration  25: 427508.300 ops/s
# Warmup Iteration  26: 429780.205 ops/s
# Warmup Iteration  27: 442996.105 ops/s
# Warmup Iteration  28: 404230.874 ops/s
# Warmup Iteration  29: 443440.940 ops/s
# Warmup Iteration  30: 406283.427 ops/s
Iteration   1: 438523.231 ops/s
Iteration   2: 416783.030 ops/s
Iteration   3: 415357.842 ops/s
Iteration   4: 434990.463 ops/s
Iteration   5: 415922.785 ops/s
Iteration   6: 428786.558 ops/s
Iteration   7: 428082.696 ops/s
Iteration   8: 419691.401 ops/s
Iteration   9: 446835.588 ops/s
Iteration  10: 419234.990 ops/s
Iteration  11: 415351.697 ops/s
Iteration  12: 440147.912 ops/s
Iteration  13: 414080.859 ops/s
Iteration  14: 426918.379 ops/s
Iteration  15: 415722.081 ops/s
Iteration  16: 419144.787 ops/s
Iteration  17: 433504.857 ops/s
Iteration  18: 420197.470 ops/s
Iteration  19: 422363.279 ops/s
Iteration  20: 426455.763 ops/s
Iteration  21: 426090.476 ops/s
Iteration  22: 410182.803 ops/s
Iteration  23: 439377.467 ops/s
Iteration  24: 439321.817 ops/s
Iteration  25: 415202.761 ops/s
Iteration  26: 428211.627 ops/s
Iteration  27: 426613.312 ops/s
Iteration  28: 431392.617 ops/s
Iteration  29: 419068.159 ops/s
Iteration  30: 434630.184 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithFlowableTest._Benchmark.benchmark_reentrant":
  425606.230 ±(99.9%) 6395.266 ops/s [Average]
  (min, avg, max) = (410182.803, 425606.230, 446835.588), stdev = 9572.134
  CI (99.9%): [419210.963, 432001.496] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
FlowableWindowWithFlowableTest._Benchmark.benchmark_reentrant  thrpt   30  425606.230 ± 6395.266  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupByTest._Benchmark.benchmark_nullKeyTakeInner$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupByTest._Benchmark.benchmark_nullKeyTakeInner

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 35171.914 ops/s
# Warmup Iteration   2: 158506.641 ops/s
# Warmup Iteration   3: 447747.185 ops/s
# Warmup Iteration   4: 787871.819 ops/s
# Warmup Iteration   5: 798712.658 ops/s
# Warmup Iteration   6: 739039.982 ops/s
# Warmup Iteration   7: 888736.857 ops/s
# Warmup Iteration   8: 854833.701 ops/s
# Warmup Iteration   9: 915034.403 ops/s
# Warmup Iteration  10: 875415.366 ops/s
# Warmup Iteration  11: 844917.219 ops/s
# Warmup Iteration  12: 888993.126 ops/s
# Warmup Iteration  13: 829263.545 ops/s
# Warmup Iteration  14: 864887.641 ops/s
# Warmup Iteration  15: 881979.116 ops/s
# Warmup Iteration  16: 873573.138 ops/s
# Warmup Iteration  17: 872375.351 ops/s
# Warmup Iteration  18: 854202.270 ops/s
# Warmup Iteration  19: 888143.997 ops/s
# Warmup Iteration  20: 890453.190 ops/s
# Warmup Iteration  21: 876067.322 ops/s
# Warmup Iteration  22: 849001.232 ops/s
# Warmup Iteration  23: 880788.651 ops/s
# Warmup Iteration  24: 879606.903 ops/s
# Warmup Iteration  25: 869322.304 ops/s
# Warmup Iteration  26: 866776.555 ops/s
# Warmup Iteration  27: 861021.059 ops/s
# Warmup Iteration  28: 864506.389 ops/s
# Warmup Iteration  29: 872963.093 ops/s
# Warmup Iteration  30: 847585.575 ops/s
Iteration   1: 901257.586 ops/s
Iteration   2: 854930.457 ops/s
Iteration   3: 863900.398 ops/s
Iteration   4: 874923.513 ops/s
Iteration   5: 883179.214 ops/s
Iteration   6: 860530.781 ops/s
Iteration   7: 862833.472 ops/s
Iteration   8: 878298.643 ops/s
Iteration   9: 853603.437 ops/s
Iteration  10: 876378.996 ops/s
Iteration  11: 859863.100 ops/s
Iteration  12: 881592.223 ops/s
Iteration  13: 866560.491 ops/s
Iteration  14: 830278.286 ops/s
Iteration  15: 885155.545 ops/s
Iteration  16: 887361.407 ops/s
Iteration  17: 863319.454 ops/s
Iteration  18: 881492.669 ops/s
Iteration  19: 868369.410 ops/s
Iteration  20: 913358.966 ops/s
Iteration  21: 887026.144 ops/s
Iteration  22: 848089.728 ops/s
Iteration  23: 887072.501 ops/s
Iteration  24: 844235.181 ops/s
Iteration  25: 920209.747 ops/s
Iteration  26: 841104.777 ops/s
Iteration  27: 873631.596 ops/s
Iteration  28: 911079.716 ops/s
Iteration  29: 834135.868 ops/s
Iteration  30: 860870.473 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupByTest._Benchmark.benchmark_nullKeyTakeInner":
  871821.459 ±(99.9%) 14902.290 ops/s [Average]
  (min, avg, max) = (830278.286, 871821.459, 920209.747), stdev = 22305.048
  CI (99.9%): [856919.169, 886723.749] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score       Error  Units
FlowableGroupByTest._Benchmark.benchmark_nullKeyTakeInner  thrpt   30  871821.459 ± 14902.290  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupByTest._Benchmark.benchmark_unsubscribeViaTakeOnGroupThenMergeAndTake$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupByTest._Benchmark.benchmark_unsubscribeViaTakeOnGroupThenMergeAndTake

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 5382.472 ops/s
# Warmup Iteration   2: 41294.689 ops/s
# Warmup Iteration   3: 99701.336 ops/s
# Warmup Iteration   4: 110055.046 ops/s
# Warmup Iteration   5: 125727.231 ops/s
# Warmup Iteration   6: 130934.774 ops/s
# Warmup Iteration   7: 127958.099 ops/s
# Warmup Iteration   8: 131962.064 ops/s
# Warmup Iteration   9: 131223.304 ops/s
# Warmup Iteration  10: 129126.752 ops/s
# Warmup Iteration  11: 134362.552 ops/s
# Warmup Iteration  12: 125246.591 ops/s
# Warmup Iteration  13: 126746.169 ops/s
# Warmup Iteration  14: 112296.845 ops/s
# Warmup Iteration  15: 127097.924 ops/s
# Warmup Iteration  16: 133791.104 ops/s
# Warmup Iteration  17: 127269.502 ops/s
# Warmup Iteration  18: 130536.402 ops/s
# Warmup Iteration  19: 129012.803 ops/s
# Warmup Iteration  20: 126607.741 ops/s
# Warmup Iteration  21: 131816.007 ops/s
# Warmup Iteration  22: 125853.693 ops/s
# Warmup Iteration  23: 130874.061 ops/s
# Warmup Iteration  24: 127464.308 ops/s
# Warmup Iteration  25: 132274.898 ops/s
# Warmup Iteration  26: 128088.281 ops/s
# Warmup Iteration  27: 128956.195 ops/s
# Warmup Iteration  28: 130515.804 ops/s
# Warmup Iteration  29: 130589.286 ops/s
# Warmup Iteration  30: 132793.713 ops/s
Iteration   1: 127046.791 ops/s
Iteration   2: 130507.245 ops/s
Iteration   3: 129119.099 ops/s
Iteration   4: 128723.728 ops/s
Iteration   5: 134817.874 ops/s
Iteration   6: 128553.456 ops/s
Iteration   7: 137770.616 ops/s
Iteration   8: 133823.956 ops/s
Iteration   9: 125226.457 ops/s
Iteration  10: 135633.847 ops/s
Iteration  11: 127109.003 ops/s
Iteration  12: 130956.689 ops/s
Iteration  13: 127557.679 ops/s
Iteration  14: 126908.419 ops/s
Iteration  15: 133724.182 ops/s
Iteration  16: 127109.752 ops/s
Iteration  17: 126909.560 ops/s
Iteration  18: 132760.208 ops/s
Iteration  19: 127359.089 ops/s
Iteration  20: 134025.820 ops/s
Iteration  21: 126197.728 ops/s
Iteration  22: 136703.450 ops/s
Iteration  23: 128686.148 ops/s
Iteration  24: 133620.166 ops/s
Iteration  25: 130154.863 ops/s
Iteration  26: 130128.081 ops/s
Iteration  27: 133084.907 ops/s
Iteration  28: 126282.994 ops/s
Iteration  29: 129363.175 ops/s
Iteration  30: 128022.134 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupByTest._Benchmark.benchmark_unsubscribeViaTakeOnGroupThenMergeAndTake":
  130262.904 ±(99.9%) 2332.406 ops/s [Average]
  (min, avg, max) = (125226.457, 130262.904, 137770.616), stdev = 3491.036
  CI (99.9%): [127930.498, 132595.310] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            Mode  Cnt       Score      Error  Units
FlowableGroupByTest._Benchmark.benchmark_unsubscribeViaTakeOnGroupThenMergeAndTake  thrpt   30  130262.904 ± 2332.406  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupByTest._Benchmark.benchmark_reentrantCompleteCancel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupByTest._Benchmark.benchmark_reentrantCompleteCancel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 15100.558 ops/s
# Warmup Iteration   2: 180156.067 ops/s
# Warmup Iteration   3: 428020.397 ops/s
# Warmup Iteration   4: 685446.434 ops/s
# Warmup Iteration   5: 719419.107 ops/s
# Warmup Iteration   6: 711542.718 ops/s
# Warmup Iteration   7: 680353.607 ops/s
# Warmup Iteration   8: 734939.287 ops/s
# Warmup Iteration   9: 681971.721 ops/s
# Warmup Iteration  10: 677494.602 ops/s
# Warmup Iteration  11: 704431.510 ops/s
# Warmup Iteration  12: 719171.581 ops/s
# Warmup Iteration  13: 711817.144 ops/s
# Warmup Iteration  14: 660291.874 ops/s
# Warmup Iteration  15: 728017.079 ops/s
# Warmup Iteration  16: 710261.640 ops/s
# Warmup Iteration  17: 736683.264 ops/s
# Warmup Iteration  18: 725210.674 ops/s
# Warmup Iteration  19: 714650.794 ops/s
# Warmup Iteration  20: 740503.450 ops/s
# Warmup Iteration  21: 717443.286 ops/s
# Warmup Iteration  22: 719958.157 ops/s
# Warmup Iteration  23: 727875.845 ops/s
# Warmup Iteration  24: 712480.716 ops/s
# Warmup Iteration  25: 745878.724 ops/s
# Warmup Iteration  26: 734322.953 ops/s
# Warmup Iteration  27: 723168.542 ops/s
# Warmup Iteration  28: 707179.706 ops/s
# Warmup Iteration  29: 720158.398 ops/s
# Warmup Iteration  30: 699265.498 ops/s
Iteration   1: 732567.465 ops/s
Iteration   2: 705421.148 ops/s
Iteration   3: 764855.953 ops/s
Iteration   4: 733427.676 ops/s
Iteration   5: 702782.153 ops/s
Iteration   6: 736035.474 ops/s
Iteration   7: 711261.903 ops/s
Iteration   8: 719871.144 ops/s
Iteration   9: 742011.933 ops/s
Iteration  10: 721728.496 ops/s
Iteration  11: 735109.724 ops/s
Iteration  12: 717300.332 ops/s
Iteration  13: 720251.066 ops/s
Iteration  14: 741093.063 ops/s
Iteration  15: 731109.754 ops/s
Iteration  16: 718032.087 ops/s
Iteration  17: 737623.994 ops/s
Iteration  18: 713200.019 ops/s
Iteration  19: 758639.023 ops/s
Iteration  20: 717588.908 ops/s
Iteration  21: 714348.667 ops/s
Iteration  22: 754398.500 ops/s
Iteration  23: 697732.289 ops/s
Iteration  24: 749089.324 ops/s
Iteration  25: 722252.968 ops/s
Iteration  26: 768595.573 ops/s
Iteration  27: 717663.256 ops/s
Iteration  28: 706676.703 ops/s
Iteration  29: 735779.460 ops/s
Iteration  30: 705650.551 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupByTest._Benchmark.benchmark_reentrantCompleteCancel":
  727736.620 ±(99.9%) 12474.515 ops/s [Average]
  (min, avg, max) = (697732.289, 727736.620, 768595.573), stdev = 18671.268
  CI (99.9%): [715262.105, 740211.135] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score       Error  Units
FlowableGroupByTest._Benchmark.benchmark_reentrantCompleteCancel  thrpt   30  727736.620 ± 12474.515  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleTakeUntilTest._Benchmark.benchmark_untilSingleOtherSuccess$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleTakeUntilTest._Benchmark.benchmark_untilSingleOtherSuccess

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 79219.350 ops/s
# Warmup Iteration   2: 325653.956 ops/s
# Warmup Iteration   3: 531668.131 ops/s
# Warmup Iteration   4: 540476.216 ops/s
# Warmup Iteration   5: 529591.271 ops/s
# Warmup Iteration   6: 529007.724 ops/s
# Warmup Iteration   7: 547949.645 ops/s
# Warmup Iteration   8: 428841.275 ops/s
# Warmup Iteration   9: 546093.972 ops/s
# Warmup Iteration  10: 544559.730 ops/s
# Warmup Iteration  11: 550306.502 ops/s
# Warmup Iteration  12: 568211.649 ops/s
# Warmup Iteration  13: 540416.721 ops/s
# Warmup Iteration  14: 547159.063 ops/s
# Warmup Iteration  15: 539824.314 ops/s
# Warmup Iteration  16: 554218.952 ops/s
# Warmup Iteration  17: 570408.317 ops/s
# Warmup Iteration  18: 557333.495 ops/s
# Warmup Iteration  19: 559569.821 ops/s
# Warmup Iteration  20: 585089.315 ops/s
# Warmup Iteration  21: 570498.242 ops/s
# Warmup Iteration  22: 582905.687 ops/s
# Warmup Iteration  23: 546186.366 ops/s
# Warmup Iteration  24: 570567.347 ops/s
# Warmup Iteration  25: 580195.041 ops/s
# Warmup Iteration  26: 548443.772 ops/s
# Warmup Iteration  27: 558401.763 ops/s
# Warmup Iteration  28: 573088.227 ops/s
# Warmup Iteration  29: 572021.809 ops/s
# Warmup Iteration  30: 601193.297 ops/s
Iteration   1: 531885.765 ops/s
Iteration   2: 556257.084 ops/s
Iteration   3: 539590.668 ops/s
Iteration   4: 569641.164 ops/s
Iteration   5: 592112.609 ops/s
Iteration   6: 568718.670 ops/s
Iteration   7: 584854.441 ops/s
Iteration   8: 577540.504 ops/s
Iteration   9: 568187.163 ops/s
Iteration  10: 587450.061 ops/s
Iteration  11: 557290.369 ops/s
Iteration  12: 586505.380 ops/s
Iteration  13: 564059.358 ops/s
Iteration  14: 551165.203 ops/s
Iteration  15: 554345.213 ops/s
Iteration  16: 575010.961 ops/s
Iteration  17: 552724.845 ops/s
Iteration  18: 582374.375 ops/s
Iteration  19: 564833.345 ops/s
Iteration  20: 582806.828 ops/s
Iteration  21: 575444.642 ops/s
Iteration  22: 554711.853 ops/s
Iteration  23: 585312.611 ops/s
Iteration  24: 562308.147 ops/s
Iteration  25: 577175.122 ops/s
Iteration  26: 576018.526 ops/s
Iteration  27: 553951.111 ops/s
Iteration  28: 583970.827 ops/s
Iteration  29: 561804.831 ops/s
Iteration  30: 578645.673 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntilTest._Benchmark.benchmark_untilSingleOtherSuccess":
  568556.578 ±(99.9%) 10045.208 ops/s [Average]
  (min, avg, max) = (531885.765, 568556.578, 592112.609), stdev = 15035.195
  CI (99.9%): [558511.370, 578601.786] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score       Error  Units
SingleTakeUntilTest._Benchmark.benchmark_untilSingleOtherSuccess  thrpt   30  568556.578 ± 10045.208  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleTakeUntilTest._Benchmark.benchmark_otherOnNextSingle$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleTakeUntilTest._Benchmark.benchmark_otherOnNextSingle

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 70060.873 ops/s
# Warmup Iteration   2: 249911.067 ops/s
# Warmup Iteration   3: 472364.250 ops/s
# Warmup Iteration   4: 470797.231 ops/s
# Warmup Iteration   5: 532830.550 ops/s
# Warmup Iteration   6: 517707.714 ops/s
# Warmup Iteration   7: 535719.394 ops/s
# Warmup Iteration   8: 500343.808 ops/s
# Warmup Iteration   9: 536664.843 ops/s
# Warmup Iteration  10: 530055.602 ops/s
# Warmup Iteration  11: 499548.786 ops/s
# Warmup Iteration  12: 511862.746 ops/s
# Warmup Iteration  13: 504462.515 ops/s
# Warmup Iteration  14: 528522.326 ops/s
# Warmup Iteration  15: 509946.422 ops/s
# Warmup Iteration  16: 523769.556 ops/s
# Warmup Iteration  17: 529131.044 ops/s
# Warmup Iteration  18: 536042.295 ops/s
# Warmup Iteration  19: 533456.386 ops/s
# Warmup Iteration  20: 559285.160 ops/s
# Warmup Iteration  21: 554170.897 ops/s
# Warmup Iteration  22: 536991.014 ops/s
# Warmup Iteration  23: 541401.490 ops/s
# Warmup Iteration  24: 535880.185 ops/s
# Warmup Iteration  25: 553462.623 ops/s
# Warmup Iteration  26: 552376.785 ops/s
# Warmup Iteration  27: 540006.548 ops/s
# Warmup Iteration  28: 531671.858 ops/s
# Warmup Iteration  29: 553562.454 ops/s
# Warmup Iteration  30: 566559.128 ops/s
Iteration   1: 533800.142 ops/s
Iteration   2: 541678.209 ops/s
Iteration   3: 507915.956 ops/s
Iteration   4: 556172.103 ops/s
Iteration   5: 536741.146 ops/s
Iteration   6: 542387.208 ops/s
Iteration   7: 567704.070 ops/s
Iteration   8: 539631.119 ops/s
Iteration   9: 550518.276 ops/s
Iteration  10: 538589.643 ops/s
Iteration  11: 549836.163 ops/s
Iteration  12: 536536.753 ops/s
Iteration  13: 538142.947 ops/s
Iteration  14: 547310.902 ops/s
Iteration  15: 535278.470 ops/s
Iteration  16: 543958.674 ops/s
Iteration  17: 542206.109 ops/s
Iteration  18: 536873.446 ops/s
Iteration  19: 551028.442 ops/s
Iteration  20: 524534.796 ops/s
Iteration  21: 549991.868 ops/s
Iteration  22: 526511.887 ops/s
Iteration  23: 561802.585 ops/s
Iteration  24: 539848.607 ops/s
Iteration  25: 544553.477 ops/s
Iteration  26: 564747.970 ops/s
Iteration  27: 530843.763 ops/s
Iteration  28: 544394.666 ops/s
Iteration  29: 546972.878 ops/s
Iteration  30: 548129.556 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntilTest._Benchmark.benchmark_otherOnNextSingle":
  542621.394 ±(99.9%) 8049.798 ops/s [Average]
  (min, avg, max) = (507915.956, 542621.394, 567704.070), stdev = 12048.560
  CI (99.9%): [534571.596, 550671.193] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score      Error  Units
SingleTakeUntilTest._Benchmark.benchmark_otherOnNextSingle  thrpt   30  542621.394 ± 8049.798  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleTakeUntilTest._Benchmark.benchmark_untilSingleOtherError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleTakeUntilTest._Benchmark.benchmark_untilSingleOtherError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 97289.881 ops/s
# Warmup Iteration   2: 491144.125 ops/s
# Warmup Iteration   3: 496166.799 ops/s
# Warmup Iteration   4: 539216.380 ops/s
# Warmup Iteration   5: 521095.742 ops/s
# Warmup Iteration   6: 589686.074 ops/s
# Warmup Iteration   7: 624021.882 ops/s
# Warmup Iteration   8: 630681.204 ops/s
# Warmup Iteration   9: 597410.273 ops/s
# Warmup Iteration  10: 607484.569 ops/s
# Warmup Iteration  11: 612364.209 ops/s
# Warmup Iteration  12: 626987.943 ops/s
# Warmup Iteration  13: 605058.630 ops/s
# Warmup Iteration  14: 610112.245 ops/s
# Warmup Iteration  15: 623026.396 ops/s
# Warmup Iteration  16: 612043.926 ops/s
# Warmup Iteration  17: 643970.528 ops/s
# Warmup Iteration  18: 624773.295 ops/s
# Warmup Iteration  19: 648028.677 ops/s
# Warmup Iteration  20: 666425.074 ops/s
# Warmup Iteration  21: 622532.450 ops/s
# Warmup Iteration  22: 642294.509 ops/s
# Warmup Iteration  23: 635579.871 ops/s
# Warmup Iteration  24: 624688.456 ops/s
# Warmup Iteration  25: 667215.203 ops/s
# Warmup Iteration  26: 624725.539 ops/s
# Warmup Iteration  27: 636619.041 ops/s
# Warmup Iteration  28: 667499.943 ops/s
# Warmup Iteration  29: 625249.134 ops/s
# Warmup Iteration  30: 653516.686 ops/s
Iteration   1: 625875.386 ops/s
Iteration   2: 650058.197 ops/s
Iteration   3: 651624.781 ops/s
Iteration   4: 641110.453 ops/s
Iteration   5: 637807.435 ops/s
Iteration   6: 636667.865 ops/s
Iteration   7: 647761.453 ops/s
Iteration   8: 652982.817 ops/s
Iteration   9: 650959.828 ops/s
Iteration  10: 666087.901 ops/s
Iteration  11: 642255.935 ops/s
Iteration  12: 651235.693 ops/s
Iteration  13: 629432.258 ops/s
Iteration  14: 647163.118 ops/s
Iteration  15: 648622.670 ops/s
Iteration  16: 636106.891 ops/s
Iteration  17: 662576.696 ops/s
Iteration  18: 628859.241 ops/s
Iteration  19: 656598.111 ops/s
Iteration  20: 666801.577 ops/s
Iteration  21: 613228.654 ops/s
Iteration  22: 644846.653 ops/s
Iteration  23: 632911.687 ops/s
Iteration  24: 650431.623 ops/s
Iteration  25: 677899.688 ops/s
Iteration  26: 633195.661 ops/s
Iteration  27: 649439.156 ops/s
Iteration  28: 614412.175 ops/s
Iteration  29: 652211.340 ops/s
Iteration  30: 634731.495 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntilTest._Benchmark.benchmark_untilSingleOtherError":
  644463.215 ±(99.9%) 9768.099 ops/s [Average]
  (min, avg, max) = (613228.654, 644463.215, 677899.688), stdev = 14620.432
  CI (99.9%): [634695.115, 654231.314] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
SingleTakeUntilTest._Benchmark.benchmark_untilSingleOtherError  thrpt   30  644463.215 ± 9768.099  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleTakeUntilTest._Benchmark.benchmark_otherErrorSingle$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleTakeUntilTest._Benchmark.benchmark_otherErrorSingle

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 97022.027 ops/s
# Warmup Iteration   2: 400561.076 ops/s
# Warmup Iteration   3: 535992.879 ops/s
# Warmup Iteration   4: 572539.619 ops/s
# Warmup Iteration   5: 603692.724 ops/s
# Warmup Iteration   6: 580142.508 ops/s
# Warmup Iteration   7: 634193.101 ops/s
# Warmup Iteration   8: 618888.918 ops/s
# Warmup Iteration   9: 578939.651 ops/s
# Warmup Iteration  10: 601649.089 ops/s
# Warmup Iteration  11: 590978.694 ops/s
# Warmup Iteration  12: 603562.060 ops/s
# Warmup Iteration  13: 584822.759 ops/s
# Warmup Iteration  14: 596874.985 ops/s
# Warmup Iteration  15: 587488.218 ops/s
# Warmup Iteration  16: 585133.884 ops/s
# Warmup Iteration  17: 636715.401 ops/s
# Warmup Iteration  18: 601534.869 ops/s
# Warmup Iteration  19: 644842.155 ops/s
# Warmup Iteration  20: 619668.023 ops/s
# Warmup Iteration  21: 631850.111 ops/s
# Warmup Iteration  22: 623074.507 ops/s
# Warmup Iteration  23: 632051.964 ops/s
# Warmup Iteration  24: 628981.316 ops/s
# Warmup Iteration  25: 639805.950 ops/s
# Warmup Iteration  26: 610679.007 ops/s
# Warmup Iteration  27: 629968.776 ops/s
# Warmup Iteration  28: 622452.283 ops/s
# Warmup Iteration  29: 640852.429 ops/s
# Warmup Iteration  30: 620303.582 ops/s
Iteration   1: 606598.915 ops/s
Iteration   2: 650724.195 ops/s
Iteration   3: 627172.102 ops/s
Iteration   4: 583124.351 ops/s
Iteration   5: 621117.064 ops/s
Iteration   6: 640343.535 ops/s
Iteration   7: 634360.454 ops/s
Iteration   8: 631340.227 ops/s
Iteration   9: 638903.457 ops/s
Iteration  10: 620573.181 ops/s
Iteration  11: 649647.631 ops/s
Iteration  12: 643996.706 ops/s
Iteration  13: 612304.013 ops/s
Iteration  14: 644223.751 ops/s
Iteration  15: 632788.604 ops/s
Iteration  16: 621551.685 ops/s
Iteration  17: 636814.022 ops/s
Iteration  18: 603100.555 ops/s
Iteration  19: 625793.301 ops/s
Iteration  20: 643471.213 ops/s
Iteration  21: 612393.281 ops/s
Iteration  22: 659455.546 ops/s
Iteration  23: 616290.652 ops/s
Iteration  24: 628997.510 ops/s
Iteration  25: 610529.137 ops/s
Iteration  26: 637035.069 ops/s
Iteration  27: 658806.180 ops/s
Iteration  28: 616468.066 ops/s
Iteration  29: 631567.829 ops/s
Iteration  30: 513489.702 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntilTest._Benchmark.benchmark_otherErrorSingle":
  625099.398 ±(99.9%) 18135.518 ops/s [Average]
  (min, avg, max) = (513489.702, 625099.398, 659455.546), stdev = 27144.392
  CI (99.9%): [606963.879, 643234.916] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score       Error  Units
SingleTakeUntilTest._Benchmark.benchmark_otherErrorSingle  thrpt   30  625099.398 ± 18135.518  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleTakeUntilTest._Benchmark.benchmark_untilSingleMainError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleTakeUntilTest._Benchmark.benchmark_untilSingleMainError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 139564.537 ops/s
# Warmup Iteration   2: 490857.293 ops/s
# Warmup Iteration   3: 543938.975 ops/s
# Warmup Iteration   4: 607720.732 ops/s
# Warmup Iteration   5: 493058.605 ops/s
# Warmup Iteration   6: 625955.578 ops/s
# Warmup Iteration   7: 577999.728 ops/s
# Warmup Iteration   8: 608868.103 ops/s
# Warmup Iteration   9: 609559.754 ops/s
# Warmup Iteration  10: 630427.431 ops/s
# Warmup Iteration  11: 588960.074 ops/s
# Warmup Iteration  12: 607011.492 ops/s
# Warmup Iteration  13: 623746.152 ops/s
# Warmup Iteration  14: 636583.342 ops/s
# Warmup Iteration  15: 594504.134 ops/s
# Warmup Iteration  16: 618732.943 ops/s
# Warmup Iteration  17: 618853.055 ops/s
# Warmup Iteration  18: 649791.486 ops/s
# Warmup Iteration  19: 643702.430 ops/s
# Warmup Iteration  20: 655969.896 ops/s
# Warmup Iteration  21: 624267.575 ops/s
# Warmup Iteration  22: 645690.069 ops/s
# Warmup Iteration  23: 607665.833 ops/s
# Warmup Iteration  24: 634880.593 ops/s
# Warmup Iteration  25: 658294.272 ops/s
# Warmup Iteration  26: 616914.997 ops/s
# Warmup Iteration  27: 647439.579 ops/s
# Warmup Iteration  28: 629905.471 ops/s
# Warmup Iteration  29: 640504.001 ops/s
# Warmup Iteration  30: 623403.400 ops/s
Iteration   1: 660388.508 ops/s
Iteration   2: 625293.937 ops/s
Iteration   3: 654979.419 ops/s
Iteration   4: 630764.414 ops/s
Iteration   5: 638545.912 ops/s
Iteration   6: 641623.622 ops/s
Iteration   7: 632083.267 ops/s
Iteration   8: 658905.983 ops/s
Iteration   9: 627352.175 ops/s
Iteration  10: 637493.865 ops/s
Iteration  11: 627017.105 ops/s
Iteration  12: 652472.222 ops/s
Iteration  13: 638688.185 ops/s
Iteration  14: 615763.492 ops/s
Iteration  15: 632748.015 ops/s
Iteration  16: 638737.806 ops/s
Iteration  17: 625989.337 ops/s
Iteration  18: 652603.526 ops/s
Iteration  19: 620402.662 ops/s
Iteration  20: 635894.233 ops/s
Iteration  21: 629834.133 ops/s
Iteration  22: 646601.709 ops/s
Iteration  23: 616795.471 ops/s
Iteration  24: 639743.778 ops/s
Iteration  25: 657387.080 ops/s
Iteration  26: 613746.692 ops/s
Iteration  27: 642279.597 ops/s
Iteration  28: 630016.995 ops/s
Iteration  29: 648093.092 ops/s
Iteration  30: 618882.230 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntilTest._Benchmark.benchmark_untilSingleMainError":
  636370.949 ±(99.9%) 8907.207 ops/s [Average]
  (min, avg, max) = (613746.692, 636370.949, 660388.508), stdev = 13331.889
  CI (99.9%): [627463.742, 645278.156] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
SingleTakeUntilTest._Benchmark.benchmark_untilSingleMainError  thrpt   30  636370.949 ± 8907.207  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingleTest._Benchmark.benchmark_onErrorMainOverflow$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingleTest._Benchmark.benchmark_onErrorMainOverflow

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 20768.419 ops/s
# Warmup Iteration   2: 122697.050 ops/s
# Warmup Iteration   3: 160028.688 ops/s
# Warmup Iteration   4: 177198.443 ops/s
# Warmup Iteration   5: 188167.781 ops/s
# Warmup Iteration   6: 164505.549 ops/s
# Warmup Iteration   7: 199422.377 ops/s
# Warmup Iteration   8: 189448.483 ops/s
# Warmup Iteration   9: 198279.670 ops/s
# Warmup Iteration  10: 188106.040 ops/s
# Warmup Iteration  11: 191657.271 ops/s
# Warmup Iteration  12: 198141.135 ops/s
# Warmup Iteration  13: 186512.412 ops/s
# Warmup Iteration  14: 196587.687 ops/s
# Warmup Iteration  15: 189944.363 ops/s
# Warmup Iteration  16: 192983.457 ops/s
# Warmup Iteration  17: 200533.683 ops/s
# Warmup Iteration  18: 199251.640 ops/s
# Warmup Iteration  19: 209905.318 ops/s
# Warmup Iteration  20: 198609.579 ops/s
# Warmup Iteration  21: 198682.835 ops/s
# Warmup Iteration  22: 210873.638 ops/s
# Warmup Iteration  23: 198999.753 ops/s
# Warmup Iteration  24: 201612.093 ops/s
# Warmup Iteration  25: 201737.915 ops/s
# Warmup Iteration  26: 197543.225 ops/s
# Warmup Iteration  27: 204038.553 ops/s
# Warmup Iteration  28: 198720.678 ops/s
# Warmup Iteration  29: 203681.575 ops/s
# Warmup Iteration  30: 200892.658 ops/s
Iteration   1: 199840.659 ops/s
Iteration   2: 199716.978 ops/s
Iteration   3: 202395.014 ops/s
Iteration   4: 204557.782 ops/s
Iteration   5: 202664.080 ops/s
Iteration   6: 199400.685 ops/s
Iteration   7: 200681.017 ops/s
Iteration   8: 210293.770 ops/s
Iteration   9: 201395.942 ops/s
Iteration  10: 206549.811 ops/s
Iteration  11: 194027.537 ops/s
Iteration  12: 202445.981 ops/s
Iteration  13: 209068.815 ops/s
Iteration  14: 196003.633 ops/s
Iteration  15: 199018.019 ops/s
Iteration  16: 204975.420 ops/s
Iteration  17: 202736.672 ops/s
Iteration  18: 201378.761 ops/s
Iteration  19: 199735.305 ops/s
Iteration  20: 209087.260 ops/s
Iteration  21: 200757.028 ops/s
Iteration  22: 205598.657 ops/s
Iteration  23: 199597.144 ops/s
Iteration  24: 208202.273 ops/s
Iteration  25: 155550.517 ops/s
Iteration  26: 202503.361 ops/s
Iteration  27: 208202.847 ops/s
Iteration  28: 197828.132 ops/s
Iteration  29: 197398.670 ops/s
Iteration  30: 202096.270 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingleTest._Benchmark.benchmark_onErrorMainOverflow":
  200790.268 ±(99.9%) 6312.458 ops/s [Average]
  (min, avg, max) = (155550.517, 200790.268, 210293.770), stdev = 9448.191
  CI (99.9%): [194477.810, 207102.726] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score      Error  Units
FlowableMergeWithSingleTest._Benchmark.benchmark_onErrorMainOverflow  thrpt   30  200790.268 ± 6312.458  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleMiscTest._Benchmark.benchmark_ignoreElement$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleMiscTest._Benchmark.benchmark_ignoreElement

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 74696.246 ops/s
# Warmup Iteration   2: 465368.740 ops/s
# Warmup Iteration   3: 582900.146 ops/s
# Warmup Iteration   4: 689202.894 ops/s
# Warmup Iteration   5: 583981.880 ops/s
# Warmup Iteration   6: 695074.991 ops/s
# Warmup Iteration   7: 609391.499 ops/s
# Warmup Iteration   8: 666545.225 ops/s
# Warmup Iteration   9: 692551.903 ops/s
# Warmup Iteration  10: 671913.619 ops/s
# Warmup Iteration  11: 667908.942 ops/s
# Warmup Iteration  12: 695522.513 ops/s
# Warmup Iteration  13: 674242.482 ops/s
# Warmup Iteration  14: 708705.878 ops/s
# Warmup Iteration  15: 663445.047 ops/s
# Warmup Iteration  16: 699459.606 ops/s
# Warmup Iteration  17: 726550.617 ops/s
# Warmup Iteration  18: 712171.085 ops/s
# Warmup Iteration  19: 735995.520 ops/s
# Warmup Iteration  20: 710957.443 ops/s
# Warmup Iteration  21: 743084.020 ops/s
# Warmup Iteration  22: 739045.341 ops/s
# Warmup Iteration  23: 698899.450 ops/s
# Warmup Iteration  24: 712982.206 ops/s
# Warmup Iteration  25: 716500.048 ops/s
# Warmup Iteration  26: 680721.136 ops/s
# Warmup Iteration  27: 705699.333 ops/s
# Warmup Iteration  28: 701793.974 ops/s
# Warmup Iteration  29: 717116.648 ops/s
# Warmup Iteration  30: 725136.292 ops/s
Iteration   1: 717315.134 ops/s
Iteration   2: 717578.822 ops/s
Iteration   3: 711718.524 ops/s
Iteration   4: 729628.856 ops/s
Iteration   5: 702061.191 ops/s
Iteration   6: 728929.423 ops/s
Iteration   7: 719483.838 ops/s
Iteration   8: 735009.855 ops/s
Iteration   9: 727018.842 ops/s
Iteration  10: 696383.704 ops/s
Iteration  11: 741750.101 ops/s
Iteration  12: 711595.176 ops/s
Iteration  13: 730750.673 ops/s
Iteration  14: 701392.755 ops/s
Iteration  15: 711416.423 ops/s
Iteration  16: 739853.542 ops/s
Iteration  17: 727538.077 ops/s
Iteration  18: 710680.877 ops/s
Iteration  19: 730752.497 ops/s
Iteration  20: 714510.288 ops/s
Iteration  21: 737248.210 ops/s
Iteration  22: 705924.301 ops/s
Iteration  23: 742622.726 ops/s
Iteration  24: 710485.185 ops/s
Iteration  25: 724896.802 ops/s
Iteration  26: 729359.892 ops/s
Iteration  27: 708964.728 ops/s
Iteration  28: 718240.685 ops/s
Iteration  29: 720505.813 ops/s
Iteration  30: 706703.009 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleMiscTest._Benchmark.benchmark_ignoreElement":
  720343.998 ±(99.9%) 8486.618 ops/s [Average]
  (min, avg, max) = (696383.704, 720343.998, 742622.726), stdev = 12702.371
  CI (99.9%): [711857.380, 728830.616] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt       Score      Error  Units
SingleMiscTest._Benchmark.benchmark_ignoreElement  thrpt   30  720343.998 ± 8486.618  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualTest._Benchmark.benchmark_doubleErrorFlowable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualTest._Benchmark.benchmark_doubleErrorFlowable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 14665.366 ops/s
# Warmup Iteration   2: 83238.687 ops/s
# Warmup Iteration   3: 143692.714 ops/s
# Warmup Iteration   4: 151394.057 ops/s
# Warmup Iteration   5: 143134.019 ops/s
# Warmup Iteration   6: 144628.095 ops/s
# Warmup Iteration   7: 140333.950 ops/s
# Warmup Iteration   8: 154372.401 ops/s
# Warmup Iteration   9: 152648.849 ops/s
# Warmup Iteration  10: 146230.717 ops/s
# Warmup Iteration  11: 151680.781 ops/s
# Warmup Iteration  12: 146335.404 ops/s
# Warmup Iteration  13: 159399.636 ops/s
# Warmup Iteration  14: 148883.184 ops/s
# Warmup Iteration  15: 147315.454 ops/s
# Warmup Iteration  16: 150068.463 ops/s
# Warmup Iteration  17: 165050.207 ops/s
# Warmup Iteration  18: 158836.589 ops/s
# Warmup Iteration  19: 161908.040 ops/s
# Warmup Iteration  20: 166912.484 ops/s
# Warmup Iteration  21: 155154.424 ops/s
# Warmup Iteration  22: 162945.560 ops/s
# Warmup Iteration  23: 156408.882 ops/s
# Warmup Iteration  24: 163890.875 ops/s
# Warmup Iteration  25: 165573.551 ops/s
# Warmup Iteration  26: 159358.429 ops/s
# Warmup Iteration  27: 168022.473 ops/s
# Warmup Iteration  28: 161707.387 ops/s
# Warmup Iteration  29: 167514.793 ops/s
# Warmup Iteration  30: 160805.860 ops/s
Iteration   1: 161524.978 ops/s
Iteration   2: 168934.626 ops/s
Iteration   3: 162512.076 ops/s
Iteration   4: 167279.420 ops/s
Iteration   5: 166036.000 ops/s
Iteration   6: 159098.645 ops/s
Iteration   7: 166259.414 ops/s
Iteration   8: 161105.925 ops/s
Iteration   9: 167889.087 ops/s
Iteration  10: 162527.104 ops/s
Iteration  11: 165299.053 ops/s
Iteration  12: 171036.020 ops/s
Iteration  13: 156582.846 ops/s
Iteration  14: 160726.142 ops/s
Iteration  15: 164433.473 ops/s
Iteration  16: 163617.211 ops/s
Iteration  17: 168946.115 ops/s
Iteration  18: 160897.793 ops/s
Iteration  19: 166171.731 ops/s
Iteration  20: 124726.352 ops/s
Iteration  21: 163560.273 ops/s
Iteration  22: 163050.477 ops/s
Iteration  23: 164410.298 ops/s
Iteration  24: 167218.739 ops/s
Iteration  25: 159072.256 ops/s
Iteration  26: 168144.090 ops/s
Iteration  27: 156525.806 ops/s
Iteration  28: 163357.738 ops/s
Iteration  29: 166674.340 ops/s
Iteration  30: 160882.772 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualTest._Benchmark.benchmark_doubleErrorFlowable":
  162616.693 ±(99.9%) 5364.580 ops/s [Average]
  (min, avg, max) = (124726.352, 162616.693, 171036.020), stdev = 8029.452
  CI (99.9%): [157252.113, 167981.273] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score      Error  Units
FlowableSequenceEqualTest._Benchmark.benchmark_doubleErrorFlowable  thrpt   30  162616.693 ± 5364.580  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithFlowableTest._Benchmark.benchmark_boundaryDirectDoubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithFlowableTest._Benchmark.benchmark_boundaryDirectDoubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 53180.035 ops/s
# Warmup Iteration   2: 118244.587 ops/s
# Warmup Iteration   3: 331470.895 ops/s
# Warmup Iteration   4: 319321.864 ops/s
# Warmup Iteration   5: 342326.668 ops/s
# Warmup Iteration   6: 346955.293 ops/s
# Warmup Iteration   7: 368054.245 ops/s
# Warmup Iteration   8: 382786.073 ops/s
# Warmup Iteration   9: 352436.711 ops/s
# Warmup Iteration  10: 384319.721 ops/s
# Warmup Iteration  11: 360259.187 ops/s
# Warmup Iteration  12: 367311.503 ops/s
# Warmup Iteration  13: 370228.254 ops/s
# Warmup Iteration  14: 359031.293 ops/s
# Warmup Iteration  15: 392940.793 ops/s
# Warmup Iteration  16: 357646.767 ops/s
# Warmup Iteration  17: 381825.090 ops/s
# Warmup Iteration  18: 388267.032 ops/s
# Warmup Iteration  19: 377140.113 ops/s
# Warmup Iteration  20: 392973.207 ops/s
# Warmup Iteration  21: 367930.680 ops/s
# Warmup Iteration  22: 373499.069 ops/s
# Warmup Iteration  23: 382279.822 ops/s
# Warmup Iteration  24: 364220.771 ops/s
# Warmup Iteration  25: 385509.957 ops/s
# Warmup Iteration  26: 377079.740 ops/s
# Warmup Iteration  27: 385670.185 ops/s
# Warmup Iteration  28: 372995.522 ops/s
# Warmup Iteration  29: 386513.260 ops/s
# Warmup Iteration  30: 369922.461 ops/s
Iteration   1: 365520.247 ops/s
Iteration   2: 394400.838 ops/s
Iteration   3: 378181.543 ops/s
Iteration   4: 381986.526 ops/s
Iteration   5: 382822.369 ops/s
Iteration   6: 372008.255 ops/s
Iteration   7: 393481.519 ops/s
Iteration   8: 379173.485 ops/s
Iteration   9: 387114.884 ops/s
Iteration  10: 372115.731 ops/s
Iteration  11: 380887.659 ops/s
Iteration  12: 378743.674 ops/s
Iteration  13: 387066.714 ops/s
Iteration  14: 372158.721 ops/s
Iteration  15: 374410.300 ops/s
Iteration  16: 399425.710 ops/s
Iteration  17: 373231.491 ops/s
Iteration  18: 374142.526 ops/s
Iteration  19: 371297.851 ops/s
Iteration  20: 391554.886 ops/s
Iteration  21: 393293.897 ops/s
Iteration  22: 366454.066 ops/s
Iteration  23: 390463.442 ops/s
Iteration  24: 375319.194 ops/s
Iteration  25: 384104.265 ops/s
Iteration  26: 377733.049 ops/s
Iteration  27: 378732.330 ops/s
Iteration  28: 385866.708 ops/s
Iteration  29: 371915.054 ops/s
Iteration  30: 381869.308 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithFlowableTest._Benchmark.benchmark_boundaryDirectDoubleOnSubscribe":
  380515.875 ±(99.9%) 5837.158 ops/s [Average]
  (min, avg, max) = (365520.247, 380515.875, 399425.710), stdev = 8736.784
  CI (99.9%): [374678.716, 386353.033] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             Mode  Cnt       Score      Error  Units
FlowableWindowWithFlowableTest._Benchmark.benchmark_boundaryDirectDoubleOnSubscribe  thrpt   30  380515.875 ± 5837.158  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.subscribers.DeferredScalarSubscriberTest._Benchmark.benchmark_doubleComplete2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.subscribers.DeferredScalarSubscriberTest._Benchmark.benchmark_doubleComplete2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2642152.840 ops/s
# Warmup Iteration   2: 4138323.953 ops/s
# Warmup Iteration   3: 5861725.195 ops/s
# Warmup Iteration   4: 5851520.321 ops/s
# Warmup Iteration   5: 6042802.372 ops/s
# Warmup Iteration   6: 5866535.606 ops/s
# Warmup Iteration   7: 5754119.859 ops/s
# Warmup Iteration   8: 5929676.637 ops/s
# Warmup Iteration   9: 5765964.378 ops/s
# Warmup Iteration  10: 6106271.885 ops/s
# Warmup Iteration  11: 5879900.154 ops/s
# Warmup Iteration  12: 5685014.859 ops/s
# Warmup Iteration  13: 6172800.050 ops/s
# Warmup Iteration  14: 5696376.120 ops/s
# Warmup Iteration  15: 6076960.957 ops/s
# Warmup Iteration  16: 5687820.509 ops/s
# Warmup Iteration  17: 5852482.762 ops/s
# Warmup Iteration  18: 6038324.419 ops/s
# Warmup Iteration  19: 5830903.790 ops/s
# Warmup Iteration  20: 6021545.792 ops/s
# Warmup Iteration  21: 6048998.805 ops/s
# Warmup Iteration  22: 5815832.097 ops/s
# Warmup Iteration  23: 6096633.530 ops/s
# Warmup Iteration  24: 5878907.473 ops/s
# Warmup Iteration  25: 5808825.718 ops/s
# Warmup Iteration  26: 5859488.506 ops/s
# Warmup Iteration  27: 5834392.017 ops/s
# Warmup Iteration  28: 5827812.081 ops/s
# Warmup Iteration  29: 5940424.374 ops/s
# Warmup Iteration  30: 5816893.548 ops/s
Iteration   1: 5782213.418 ops/s
Iteration   2: 5953537.761 ops/s
Iteration   3: 5604796.453 ops/s
Iteration   4: 5953194.070 ops/s
Iteration   5: 5809310.080 ops/s
Iteration   6: 6028558.838 ops/s
Iteration   7: 5842189.268 ops/s
Iteration   8: 5725916.739 ops/s
Iteration   9: 6114953.422 ops/s
Iteration  10: 5786644.413 ops/s
Iteration  11: 5791206.793 ops/s
Iteration  12: 6030995.672 ops/s
Iteration  13: 5814980.839 ops/s
Iteration  14: 5361413.081 ops/s
Iteration  15: 4926383.693 ops/s
Iteration  16: 5868020.653 ops/s
Iteration  17: 5801941.820 ops/s
Iteration  18: 5926611.940 ops/s
Iteration  19: 6014085.150 ops/s
Iteration  20: 5937476.057 ops/s
Iteration  21: 5812962.297 ops/s
Iteration  22: 5981138.297 ops/s
Iteration  23: 6186433.189 ops/s
Iteration  24: 5588753.201 ops/s
Iteration  25: 5963632.378 ops/s
Iteration  26: 5859448.523 ops/s
Iteration  27: 5949700.203 ops/s
Iteration  28: 6080424.242 ops/s
Iteration  29: 5672902.309 ops/s
Iteration  30: 5914169.085 ops/s


Result "io.reactivex.rxjava3.internal.subscribers.DeferredScalarSubscriberTest._Benchmark.benchmark_doubleComplete2":
  5836133.129 ±(99.9%) 161159.154 ops/s [Average]
  (min, avg, max) = (4926383.693, 5836133.129, 6186433.189), stdev = 241215.453
  CI (99.9%): [5674973.975, 5997292.284] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score        Error  Units
DeferredScalarSubscriberTest._Benchmark.benchmark_doubleComplete2  thrpt   30  5836133.129 ± 161159.154  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableTest._Benchmark.benchmark_innerObserver$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableTest._Benchmark.benchmark_innerObserver

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 252849.532 ops/s
# Warmup Iteration   2: 1353614.857 ops/s
# Warmup Iteration   3: 1496912.325 ops/s
# Warmup Iteration   4: 1598597.306 ops/s
# Warmup Iteration   5: 1604331.029 ops/s
# Warmup Iteration   6: 1553128.489 ops/s
# Warmup Iteration   7: 1586920.521 ops/s
# Warmup Iteration   8: 1530743.632 ops/s
# Warmup Iteration   9: 1521396.650 ops/s
# Warmup Iteration  10: 1615578.386 ops/s
# Warmup Iteration  11: 1538641.335 ops/s
# Warmup Iteration  12: 1556308.919 ops/s
# Warmup Iteration  13: 1612778.021 ops/s
# Warmup Iteration  14: 1556982.346 ops/s
# Warmup Iteration  15: 1564260.180 ops/s
# Warmup Iteration  16: 1584098.767 ops/s
# Warmup Iteration  17: 1512143.605 ops/s
# Warmup Iteration  18: 1561547.299 ops/s
# Warmup Iteration  19: 1593101.872 ops/s
# Warmup Iteration  20: 1633188.873 ops/s
# Warmup Iteration  21: 1550857.767 ops/s
# Warmup Iteration  22: 1558585.588 ops/s
# Warmup Iteration  23: 1611335.790 ops/s
# Warmup Iteration  24: 1508311.063 ops/s
# Warmup Iteration  25: 1629876.488 ops/s
# Warmup Iteration  26: 1572920.803 ops/s
# Warmup Iteration  27: 1561400.498 ops/s
# Warmup Iteration  28: 1656108.223 ops/s
# Warmup Iteration  29: 1503569.097 ops/s
# Warmup Iteration  30: 1610548.445 ops/s
Iteration   1: 1580202.293 ops/s
Iteration   2: 1576132.277 ops/s
Iteration   3: 1515581.039 ops/s
Iteration   4: 1586739.515 ops/s
Iteration   5: 1592721.017 ops/s
Iteration   6: 1585086.318 ops/s
Iteration   7: 1533501.305 ops/s
Iteration   8: 1482503.652 ops/s
Iteration   9: 1586957.399 ops/s
Iteration  10: 1571008.677 ops/s
Iteration  11: 1644644.780 ops/s
Iteration  12: 1560734.115 ops/s
Iteration  13: 1590845.004 ops/s
Iteration  14: 1573357.409 ops/s
Iteration  15: 1568508.238 ops/s
Iteration  16: 1598456.771 ops/s
Iteration  17: 1583253.661 ops/s
Iteration  18: 1565526.981 ops/s
Iteration  19: 1632679.081 ops/s
Iteration  20: 1531918.696 ops/s
Iteration  21: 1624887.449 ops/s
Iteration  22: 1562966.240 ops/s
Iteration  23: 1610480.843 ops/s
Iteration  24: 1592144.738 ops/s
Iteration  25: 1569591.193 ops/s
Iteration  26: 1604454.467 ops/s
Iteration  27: 1654617.726 ops/s
Iteration  28: 1615660.189 ops/s
Iteration  29: 1540927.084 ops/s
Iteration  30: 1539047.024 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableTest._Benchmark.benchmark_innerObserver":
  1579171.173 ±(99.9%) 25059.076 ops/s [Average]
  (min, avg, max) = (1482503.652, 1579171.173, 1654617.726), stdev = 37507.248
  CI (99.9%): [1554112.097, 1604230.249] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
FlowableFlatMapCompletableTest._Benchmark.benchmark_innerObserver  thrpt   30  1579171.173 ± 25059.076  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.schedulers.ScheduledRunnableTest._Benchmark.benchmark_withParentIsDisposed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.schedulers.ScheduledRunnableTest._Benchmark.benchmark_withParentIsDisposed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2714947.209 ops/s
# Warmup Iteration   2: 5055787.685 ops/s
# Warmup Iteration   3: 5015091.202 ops/s
# Warmup Iteration   4: 7015328.868 ops/s
# Warmup Iteration   5: 7447863.522 ops/s
# Warmup Iteration   6: 7538091.716 ops/s
# Warmup Iteration   7: 7575669.522 ops/s
# Warmup Iteration   8: 7429411.408 ops/s
# Warmup Iteration   9: 7735672.330 ops/s
# Warmup Iteration  10: 7346088.790 ops/s
# Warmup Iteration  11: 7340610.492 ops/s
# Warmup Iteration  12: 7574511.421 ops/s
# Warmup Iteration  13: 7334880.125 ops/s
# Warmup Iteration  14: 7905551.390 ops/s
# Warmup Iteration  15: 7508459.388 ops/s
# Warmup Iteration  16: 7201218.823 ops/s
# Warmup Iteration  17: 7578267.235 ops/s
# Warmup Iteration  18: 7430418.220 ops/s
# Warmup Iteration  19: 7726646.019 ops/s
# Warmup Iteration  20: 7643409.315 ops/s
# Warmup Iteration  21: 7686853.563 ops/s
# Warmup Iteration  22: 7435700.459 ops/s
# Warmup Iteration  23: 7750743.751 ops/s
# Warmup Iteration  24: 7609433.873 ops/s
# Warmup Iteration  25: 7458837.489 ops/s
# Warmup Iteration  26: 7735695.617 ops/s
# Warmup Iteration  27: 7487924.266 ops/s
# Warmup Iteration  28: 7721424.959 ops/s
# Warmup Iteration  29: 7456367.029 ops/s
# Warmup Iteration  30: 7524494.280 ops/s
Iteration   1: 7452103.354 ops/s
Iteration   2: 7576517.772 ops/s
Iteration   3: 7415447.812 ops/s
Iteration   4: 7514661.821 ops/s
Iteration   5: 7234126.910 ops/s
Iteration   6: 7758929.325 ops/s
Iteration   7: 7270961.663 ops/s
Iteration   8: 7634449.320 ops/s
Iteration   9: 6449034.032 ops/s
Iteration  10: 7003114.493 ops/s
Iteration  11: 7858349.654 ops/s
Iteration  12: 7323960.968 ops/s
Iteration  13: 7764269.115 ops/s
Iteration  14: 7783769.601 ops/s
Iteration  15: 7146552.385 ops/s
Iteration  16: 7778389.083 ops/s
Iteration  17: 7384433.420 ops/s
Iteration  18: 7513127.449 ops/s
Iteration  19: 7878807.445 ops/s
Iteration  20: 7443052.866 ops/s
Iteration  21: 7686176.092 ops/s
Iteration  22: 7435159.379 ops/s
Iteration  23: 7468491.828 ops/s
Iteration  24: 7681378.888 ops/s
Iteration  25: 7365953.649 ops/s
Iteration  26: 7998862.738 ops/s
Iteration  27: 7383601.107 ops/s
Iteration  28: 7534716.002 ops/s
Iteration  29: 7605024.341 ops/s
Iteration  30: 7543071.194 ops/s


Result "io.reactivex.rxjava3.internal.schedulers.ScheduledRunnableTest._Benchmark.benchmark_withParentIsDisposed":
  7496216.457 ±(99.9%) 200605.207 ops/s [Average]
  (min, avg, max) = (6449034.032, 7496216.457, 7998862.738), stdev = 300256.453
  CI (99.9%): [7295611.250, 7696821.664] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score        Error  Units
ScheduledRunnableTest._Benchmark.benchmark_withParentIsDisposed  thrpt   30  7496216.457 ± 200605.207  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.disposables.CompositeDisposableTest._Benchmark.benchmark_removeUnsubscribes$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.disposables.CompositeDisposableTest._Benchmark.benchmark_removeUnsubscribes

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3479379.039 ops/s
# Warmup Iteration   2: 5564566.080 ops/s
# Warmup Iteration   3: 5766660.567 ops/s
# Warmup Iteration   4: 5182775.369 ops/s
# Warmup Iteration   5: 5242997.389 ops/s
# Warmup Iteration   6: 5180456.710 ops/s
# Warmup Iteration   7: 5296459.731 ops/s
# Warmup Iteration   8: 5207959.886 ops/s
# Warmup Iteration   9: 5113227.809 ops/s
# Warmup Iteration  10: 5466597.096 ops/s
# Warmup Iteration  11: 4865829.624 ops/s
# Warmup Iteration  12: 5346832.555 ops/s
# Warmup Iteration  13: 5083665.690 ops/s
# Warmup Iteration  14: 5291908.055 ops/s
# Warmup Iteration  15: 5034004.045 ops/s
# Warmup Iteration  16: 5009703.962 ops/s
# Warmup Iteration  17: 5139285.522 ops/s
# Warmup Iteration  18: 4925722.839 ops/s
# Warmup Iteration  19: 5135242.972 ops/s
# Warmup Iteration  20: 5041584.137 ops/s
# Warmup Iteration  21: 5194010.552 ops/s
# Warmup Iteration  22: 5152563.007 ops/s
# Warmup Iteration  23: 4985536.666 ops/s
# Warmup Iteration  24: 5077545.491 ops/s
# Warmup Iteration  25: 4918497.329 ops/s
# Warmup Iteration  26: 5063440.007 ops/s
# Warmup Iteration  27: 5108154.345 ops/s
# Warmup Iteration  28: 5047128.680 ops/s
# Warmup Iteration  29: 5069695.115 ops/s
# Warmup Iteration  30: 4969970.257 ops/s
Iteration   1: 5182160.217 ops/s
Iteration   2: 5186004.541 ops/s
Iteration   3: 5075736.629 ops/s
Iteration   4: 5226958.128 ops/s
Iteration   5: 5088876.994 ops/s
Iteration   6: 5239555.144 ops/s
Iteration   7: 5001718.140 ops/s
Iteration   8: 5181155.207 ops/s
Iteration   9: 5158134.359 ops/s
Iteration  10: 5092493.563 ops/s
Iteration  11: 5313289.297 ops/s
Iteration  12: 4984823.985 ops/s
Iteration  13: 5300221.961 ops/s
Iteration  14: 5081090.682 ops/s
Iteration  15: 5206619.593 ops/s
Iteration  16: 5082242.554 ops/s
Iteration  17: 5189162.072 ops/s
Iteration  18: 5155202.886 ops/s
Iteration  19: 5076533.724 ops/s
Iteration  20: 5312928.048 ops/s
Iteration  21: 5168820.473 ops/s
Iteration  22: 5248823.496 ops/s
Iteration  23: 5076595.211 ops/s
Iteration  24: 5223990.491 ops/s
Iteration  25: 5097826.360 ops/s
Iteration  26: 5179200.419 ops/s
Iteration  27: 5274633.251 ops/s
Iteration  28: 5021920.625 ops/s
Iteration  29: 5231987.614 ops/s
Iteration  30: 5125756.005 ops/s


Result "io.reactivex.rxjava3.disposables.CompositeDisposableTest._Benchmark.benchmark_removeUnsubscribes":
  5159482.056 ±(99.9%) 60210.214 ops/s [Average]
  (min, avg, max) = (4984823.985, 5159482.056, 5313289.297), stdev = 90119.820
  CI (99.9%): [5099271.842, 5219692.269] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
CompositeDisposableTest._Benchmark.benchmark_removeUnsubscribes  thrpt   30  5159482.056 ± 60210.214  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableMergeTest._Benchmark.benchmark_maxConcurrencyOne$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableMergeTest._Benchmark.benchmark_maxConcurrencyOne

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 209688.120 ops/s
# Warmup Iteration   2: 890168.015 ops/s
# Warmup Iteration   3: 1326060.687 ops/s
# Warmup Iteration   4: 1630030.677 ops/s
# Warmup Iteration   5: 1559150.507 ops/s
# Warmup Iteration   6: 1565523.569 ops/s
# Warmup Iteration   7: 1496411.743 ops/s
# Warmup Iteration   8: 1593583.213 ops/s
# Warmup Iteration   9: 1657458.418 ops/s
# Warmup Iteration  10: 1544423.306 ops/s
# Warmup Iteration  11: 1589360.094 ops/s
# Warmup Iteration  12: 1659805.529 ops/s
# Warmup Iteration  13: 1578789.357 ops/s
# Warmup Iteration  14: 1607950.046 ops/s
# Warmup Iteration  15: 1618383.148 ops/s
# Warmup Iteration  16: 1620277.811 ops/s
# Warmup Iteration  17: 1645389.377 ops/s
# Warmup Iteration  18: 1551707.933 ops/s
# Warmup Iteration  19: 1660472.618 ops/s
# Warmup Iteration  20: 1548607.467 ops/s
# Warmup Iteration  21: 1655276.604 ops/s
# Warmup Iteration  22: 1608399.882 ops/s
# Warmup Iteration  23: 1593085.345 ops/s
# Warmup Iteration  24: 1598398.584 ops/s
# Warmup Iteration  25: 1555059.371 ops/s
# Warmup Iteration  26: 1609620.329 ops/s
# Warmup Iteration  27: 1608669.695 ops/s
# Warmup Iteration  28: 1563168.657 ops/s
# Warmup Iteration  29: 1617875.701 ops/s
# Warmup Iteration  30: 1546258.528 ops/s
Iteration   1: 1649658.869 ops/s
Iteration   2: 1577754.707 ops/s
Iteration   3: 1627329.551 ops/s
Iteration   4: 1362605.837 ops/s
Iteration   5: 1605490.453 ops/s
Iteration   6: 1582800.061 ops/s
Iteration   7: 1616409.070 ops/s
Iteration   8: 1602580.986 ops/s
Iteration   9: 1658902.999 ops/s
Iteration  10: 1551304.303 ops/s
Iteration  11: 1663748.203 ops/s
Iteration  12: 1618872.780 ops/s
Iteration  13: 1551378.193 ops/s
Iteration  14: 1610287.135 ops/s
Iteration  15: 1568631.005 ops/s
Iteration  16: 1601977.632 ops/s
Iteration  17: 1582903.472 ops/s
Iteration  18: 1623962.833 ops/s
Iteration  19: 1577465.194 ops/s
Iteration  20: 1683107.133 ops/s
Iteration  21: 1542732.098 ops/s
Iteration  22: 1672658.992 ops/s
Iteration  23: 1544306.087 ops/s
Iteration  24: 1595703.971 ops/s
Iteration  25: 1641892.774 ops/s
Iteration  26: 1596558.338 ops/s
Iteration  27: 1576503.054 ops/s
Iteration  28: 1647190.817 ops/s
Iteration  29: 1525707.891 ops/s
Iteration  30: 1649876.675 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableMergeTest._Benchmark.benchmark_maxConcurrencyOne":
  1597010.037 ±(99.9%) 40512.526 ops/s [Average]
  (min, avg, max) = (1362605.837, 1597010.037, 1683107.133), stdev = 60637.247
  CI (99.9%): [1556497.511, 1637522.563] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
CompletableMergeTest._Benchmark.benchmark_maxConcurrencyOne  thrpt   30  1597010.037 ± 40512.526  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableMergeTest._Benchmark.benchmark_maxConcurrencyOneDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableMergeTest._Benchmark.benchmark_maxConcurrencyOneDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 140559.338 ops/s
# Warmup Iteration   2: 649356.360 ops/s
# Warmup Iteration   3: 1454231.927 ops/s
# Warmup Iteration   4: 1302670.267 ops/s
# Warmup Iteration   5: 1622837.676 ops/s
# Warmup Iteration   6: 1552593.342 ops/s
# Warmup Iteration   7: 1655549.291 ops/s
# Warmup Iteration   8: 1510749.926 ops/s
# Warmup Iteration   9: 1643496.264 ops/s
# Warmup Iteration  10: 1599729.728 ops/s
# Warmup Iteration  11: 1574430.280 ops/s
# Warmup Iteration  12: 1601873.123 ops/s
# Warmup Iteration  13: 1571286.557 ops/s
# Warmup Iteration  14: 1570169.436 ops/s
# Warmup Iteration  15: 1619703.924 ops/s
# Warmup Iteration  16: 1547143.587 ops/s
# Warmup Iteration  17: 1659389.205 ops/s
# Warmup Iteration  18: 1622440.793 ops/s
# Warmup Iteration  19: 1590508.129 ops/s
# Warmup Iteration  20: 1647895.930 ops/s
# Warmup Iteration  21: 1586040.937 ops/s
# Warmup Iteration  22: 1639005.077 ops/s
# Warmup Iteration  23: 1559266.772 ops/s
# Warmup Iteration  24: 1569690.980 ops/s
# Warmup Iteration  25: 1709628.483 ops/s
# Warmup Iteration  26: 1554937.756 ops/s
# Warmup Iteration  27: 1639304.829 ops/s
# Warmup Iteration  28: 1585185.706 ops/s
# Warmup Iteration  29: 1619946.385 ops/s
# Warmup Iteration  30: 1604548.361 ops/s
Iteration   1: 1611157.108 ops/s
Iteration   2: 1631508.429 ops/s
Iteration   3: 1541162.840 ops/s
Iteration   4: 1621928.497 ops/s
Iteration   5: 1568764.228 ops/s
Iteration   6: 1627957.477 ops/s
Iteration   7: 1575078.417 ops/s
Iteration   8: 1624552.867 ops/s
Iteration   9: 1646458.023 ops/s
Iteration  10: 1567608.126 ops/s
Iteration  11: 1651866.036 ops/s
Iteration  12: 1587944.666 ops/s
Iteration  13: 1656610.889 ops/s
Iteration  14: 1604744.903 ops/s
Iteration  15: 1552281.466 ops/s
Iteration  16: 1649639.822 ops/s
Iteration  17: 1611253.741 ops/s
Iteration  18: 1584910.503 ops/s
Iteration  19: 1665485.378 ops/s
Iteration  20: 1563830.911 ops/s
Iteration  21: 1664611.486 ops/s
Iteration  22: 1556627.879 ops/s
Iteration  23: 1604100.307 ops/s
Iteration  24: 1663488.934 ops/s
Iteration  25: 1609205.211 ops/s
Iteration  26: 1659278.818 ops/s
Iteration  27: 1543965.971 ops/s
Iteration  28: 1646787.445 ops/s
Iteration  29: 1682350.046 ops/s
Iteration  30: 1576475.116 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableMergeTest._Benchmark.benchmark_maxConcurrencyOneDelayError":
  1611721.185 ±(99.9%) 27810.567 ops/s [Average]
  (min, avg, max) = (1541162.840, 1611721.185, 1682350.046), stdev = 41625.550
  CI (99.9%): [1583910.618, 1639531.752] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
CompletableMergeTest._Benchmark.benchmark_maxConcurrencyOneDelayError  thrpt   30  1611721.185 ± 27810.567  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableTest._Benchmark.benchmark_normalDelayErrorFlowable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableTest._Benchmark.benchmark_normalDelayErrorFlowable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 123139.123 ops/s
# Warmup Iteration   2: 556660.199 ops/s
# Warmup Iteration   3: 625418.932 ops/s
# Warmup Iteration   4: 671757.330 ops/s
# Warmup Iteration   5: 796270.241 ops/s
# Warmup Iteration   6: 713722.030 ops/s
# Warmup Iteration   7: 795579.133 ops/s
# Warmup Iteration   8: 830693.379 ops/s
# Warmup Iteration   9: 803766.528 ops/s
# Warmup Iteration  10: 793363.440 ops/s
# Warmup Iteration  11: 809765.255 ops/s
# Warmup Iteration  12: 795422.730 ops/s
# Warmup Iteration  13: 824227.935 ops/s
# Warmup Iteration  14: 802297.156 ops/s
# Warmup Iteration  15: 790716.625 ops/s
# Warmup Iteration  16: 838884.883 ops/s
# Warmup Iteration  17: 774893.361 ops/s
# Warmup Iteration  18: 819666.997 ops/s
# Warmup Iteration  19: 799423.299 ops/s
# Warmup Iteration  20: 818578.949 ops/s
# Warmup Iteration  21: 791291.000 ops/s
# Warmup Iteration  22: 806169.322 ops/s
# Warmup Iteration  23: 815548.339 ops/s
# Warmup Iteration  24: 770547.751 ops/s
# Warmup Iteration  25: 822546.707 ops/s
# Warmup Iteration  26: 774743.474 ops/s
# Warmup Iteration  27: 836719.008 ops/s
# Warmup Iteration  28: 788734.895 ops/s
# Warmup Iteration  29: 730400.760 ops/s
# Warmup Iteration  30: 751971.878 ops/s
Iteration   1: 787058.999 ops/s
Iteration   2: 801720.307 ops/s
Iteration   3: 843090.051 ops/s
Iteration   4: 776926.878 ops/s
Iteration   5: 778744.873 ops/s
Iteration   6: 843122.017 ops/s
Iteration   7: 789988.070 ops/s
Iteration   8: 807556.328 ops/s
Iteration   9: 806582.960 ops/s
Iteration  10: 808475.319 ops/s
Iteration  11: 785900.786 ops/s
Iteration  12: 804670.889 ops/s
Iteration  13: 800472.668 ops/s
Iteration  14: 783957.656 ops/s
Iteration  15: 830780.168 ops/s
Iteration  16: 796165.367 ops/s
Iteration  17: 823247.398 ops/s
Iteration  18: 800511.980 ops/s
Iteration  19: 793391.477 ops/s
Iteration  20: 818682.937 ops/s
Iteration  21: 833061.197 ops/s
Iteration  22: 787207.788 ops/s
Iteration  23: 821465.077 ops/s
Iteration  24: 800320.359 ops/s
Iteration  25: 836772.627 ops/s
Iteration  26: 820769.762 ops/s
Iteration  27: 766879.593 ops/s
Iteration  28: 800803.137 ops/s
Iteration  29: 791138.073 ops/s
Iteration  30: 793640.711 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableTest._Benchmark.benchmark_normalDelayErrorFlowable":
  804436.848 ±(99.9%) 13387.712 ops/s [Average]
  (min, avg, max) = (766879.593, 804436.848, 843122.017), stdev = 20038.098
  CI (99.9%): [791049.137, 817824.560] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt       Score       Error  Units
FlowableFlatMapCompletableTest._Benchmark.benchmark_normalDelayErrorFlowable  thrpt   30  804436.848 ± 13387.712  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableTest._Benchmark.benchmark_normalFlowable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableTest._Benchmark.benchmark_normalFlowable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 172180.736 ops/s
# Warmup Iteration   2: 602573.575 ops/s
# Warmup Iteration   3: 666169.917 ops/s
# Warmup Iteration   4: 717024.880 ops/s
# Warmup Iteration   5: 703898.066 ops/s
# Warmup Iteration   6: 861398.885 ops/s
# Warmup Iteration   7: 787203.137 ops/s
# Warmup Iteration   8: 838452.976 ops/s
# Warmup Iteration   9: 816615.243 ops/s
# Warmup Iteration  10: 801357.308 ops/s
# Warmup Iteration  11: 837838.548 ops/s
# Warmup Iteration  12: 789969.569 ops/s
# Warmup Iteration  13: 844282.844 ops/s
# Warmup Iteration  14: 809452.030 ops/s
# Warmup Iteration  15: 829080.951 ops/s
# Warmup Iteration  16: 847938.986 ops/s
# Warmup Iteration  17: 834848.763 ops/s
# Warmup Iteration  18: 844176.606 ops/s
# Warmup Iteration  19: 841816.578 ops/s
# Warmup Iteration  20: 807457.058 ops/s
# Warmup Iteration  21: 825924.052 ops/s
# Warmup Iteration  22: 799334.949 ops/s
# Warmup Iteration  23: 829901.957 ops/s
# Warmup Iteration  24: 845090.338 ops/s
# Warmup Iteration  25: 799622.952 ops/s
# Warmup Iteration  26: 849469.307 ops/s
# Warmup Iteration  27: 802765.528 ops/s
# Warmup Iteration  28: 817426.610 ops/s
# Warmup Iteration  29: 845364.425 ops/s
# Warmup Iteration  30: 795988.930 ops/s
Iteration   1: 807925.026 ops/s
Iteration   2: 828346.522 ops/s
Iteration   3: 809867.956 ops/s
Iteration   4: 829367.979 ops/s
Iteration   5: 808376.114 ops/s
Iteration   6: 856860.664 ops/s
Iteration   7: 821324.892 ops/s
Iteration   8: 814205.725 ops/s
Iteration   9: 850195.591 ops/s
Iteration  10: 839571.935 ops/s
Iteration  11: 818511.536 ops/s
Iteration  12: 818772.935 ops/s
Iteration  13: 816865.566 ops/s
Iteration  14: 825518.038 ops/s
Iteration  15: 807711.939 ops/s
Iteration  16: 805340.407 ops/s
Iteration  17: 856910.769 ops/s
Iteration  18: 808224.677 ops/s
Iteration  19: 832602.694 ops/s
Iteration  20: 818102.887 ops/s
Iteration  21: 812889.276 ops/s
Iteration  22: 820857.975 ops/s
Iteration  23: 821381.496 ops/s
Iteration  24: 844333.808 ops/s
Iteration  25: 813704.974 ops/s
Iteration  26: 809306.309 ops/s
Iteration  27: 839344.891 ops/s
Iteration  28: 819061.878 ops/s
Iteration  29: 828999.558 ops/s
Iteration  30: 840867.314 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableTest._Benchmark.benchmark_normalFlowable":
  824178.378 ±(99.9%) 9979.643 ops/s [Average]
  (min, avg, max) = (805340.407, 824178.378, 856910.769), stdev = 14937.061
  CI (99.9%): [814198.734, 834158.021] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score      Error  Units
FlowableFlatMapCompletableTest._Benchmark.benchmark_normalFlowable  thrpt   30  824178.378 ± 9979.643  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableMergeTest._Benchmark.benchmark_innerIsDisposed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableMergeTest._Benchmark.benchmark_innerIsDisposed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 351431.966 ops/s
# Warmup Iteration   2: 2247626.999 ops/s
# Warmup Iteration   3: 2987534.303 ops/s
# Warmup Iteration   4: 2826327.782 ops/s
# Warmup Iteration   5: 2763796.975 ops/s
# Warmup Iteration   6: 2491167.941 ops/s
# Warmup Iteration   7: 2810026.331 ops/s
# Warmup Iteration   8: 2866239.785 ops/s
# Warmup Iteration   9: 2856655.764 ops/s
# Warmup Iteration  10: 2795799.745 ops/s
# Warmup Iteration  11: 2913436.270 ops/s
# Warmup Iteration  12: 2785894.334 ops/s
# Warmup Iteration  13: 2788181.235 ops/s
# Warmup Iteration  14: 2908379.219 ops/s
# Warmup Iteration  15: 2782361.698 ops/s
# Warmup Iteration  16: 2820099.127 ops/s
# Warmup Iteration  17: 2779153.497 ops/s
# Warmup Iteration  18: 2862865.816 ops/s
# Warmup Iteration  19: 2862514.175 ops/s
# Warmup Iteration  20: 2799284.988 ops/s
# Warmup Iteration  21: 2906315.750 ops/s
# Warmup Iteration  22: 2737113.225 ops/s
# Warmup Iteration  23: 2809509.570 ops/s
# Warmup Iteration  24: 2207195.044 ops/s
# Warmup Iteration  25: 2856057.902 ops/s
# Warmup Iteration  26: 2854204.083 ops/s
# Warmup Iteration  27: 2829858.676 ops/s
# Warmup Iteration  28: 2946096.383 ops/s
# Warmup Iteration  29: 2809407.358 ops/s
# Warmup Iteration  30: 2820970.898 ops/s
Iteration   1: 2891372.799 ops/s
Iteration   2: 2819803.261 ops/s
Iteration   3: 2950070.580 ops/s
Iteration   4: 2764419.254 ops/s
Iteration   5: 2910997.527 ops/s
Iteration   6: 2753131.523 ops/s
Iteration   7: 2924106.893 ops/s
Iteration   8: 2720266.788 ops/s
Iteration   9: 2944863.444 ops/s
Iteration  10: 2861485.281 ops/s
Iteration  11: 2830966.507 ops/s
Iteration  12: 2968080.852 ops/s
Iteration  13: 2790897.238 ops/s
Iteration  14: 2857477.846 ops/s
Iteration  15: 2900931.431 ops/s
Iteration  16: 2774251.012 ops/s
Iteration  17: 2832340.275 ops/s
Iteration  18: 2802144.048 ops/s
Iteration  19: 2785298.853 ops/s
Iteration  20: 2917680.574 ops/s
Iteration  21: 2852260.703 ops/s
Iteration  22: 2858885.069 ops/s
Iteration  23: 2976131.264 ops/s
Iteration  24: 2804012.085 ops/s
Iteration  25: 2861081.964 ops/s
Iteration  26: 2795617.014 ops/s
Iteration  27: 2977842.529 ops/s
Iteration  28: 2781534.242 ops/s
Iteration  29: 2845833.184 ops/s
Iteration  30: 2926954.019 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableMergeTest._Benchmark.benchmark_innerIsDisposed":
  2856024.602 ±(99.9%) 47913.169 ops/s [Average]
  (min, avg, max) = (2720266.788, 2856024.602, 2977842.529), stdev = 71714.181
  CI (99.9%): [2808111.433, 2903937.771] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
CompletableMergeTest._Benchmark.benchmark_innerIsDisposed  thrpt   30  2856024.602 ± 47913.169  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableMergeTest._Benchmark.benchmark_innerError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableMergeTest._Benchmark.benchmark_innerError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 90930.576 ops/s
# Warmup Iteration   2: 412019.780 ops/s
# Warmup Iteration   3: 530747.203 ops/s
# Warmup Iteration   4: 502797.637 ops/s
# Warmup Iteration   5: 496571.610 ops/s
# Warmup Iteration   6: 548645.390 ops/s
# Warmup Iteration   7: 579721.682 ops/s
# Warmup Iteration   8: 589165.657 ops/s
# Warmup Iteration   9: 566595.642 ops/s
# Warmup Iteration  10: 570854.266 ops/s
# Warmup Iteration  11: 571246.727 ops/s
# Warmup Iteration  12: 594906.641 ops/s
# Warmup Iteration  13: 570123.899 ops/s
# Warmup Iteration  14: 577435.939 ops/s
# Warmup Iteration  15: 565710.278 ops/s
# Warmup Iteration  16: 593149.801 ops/s
# Warmup Iteration  17: 597799.624 ops/s
# Warmup Iteration  18: 603696.047 ops/s
# Warmup Iteration  19: 608384.031 ops/s
# Warmup Iteration  20: 595331.551 ops/s
# Warmup Iteration  21: 602286.292 ops/s
# Warmup Iteration  22: 581996.850 ops/s
# Warmup Iteration  23: 601272.511 ops/s
# Warmup Iteration  24: 609386.012 ops/s
# Warmup Iteration  25: 590338.314 ops/s
# Warmup Iteration  26: 590705.702 ops/s
# Warmup Iteration  27: 613684.438 ops/s
# Warmup Iteration  28: 587964.501 ops/s
# Warmup Iteration  29: 602900.249 ops/s
# Warmup Iteration  30: 575130.701 ops/s
Iteration   1: 612239.341 ops/s
Iteration   2: 597775.716 ops/s
Iteration   3: 594250.256 ops/s
Iteration   4: 598851.953 ops/s
Iteration   5: 598699.012 ops/s
Iteration   6: 620035.674 ops/s
Iteration   7: 614784.516 ops/s
Iteration   8: 578499.652 ops/s
Iteration   9: 626624.140 ops/s
Iteration  10: 599104.380 ops/s
Iteration  11: 611889.020 ops/s
Iteration  12: 594544.353 ops/s
Iteration  13: 616846.098 ops/s
Iteration  14: 604782.380 ops/s
Iteration  15: 585029.771 ops/s
Iteration  16: 617205.451 ops/s
Iteration  17: 586733.127 ops/s
Iteration  18: 615823.762 ops/s
Iteration  19: 583102.442 ops/s
Iteration  20: 602504.374 ops/s
Iteration  21: 628220.315 ops/s
Iteration  22: 588737.301 ops/s
Iteration  23: 603500.539 ops/s
Iteration  24: 614418.571 ops/s
Iteration  25: 590401.355 ops/s
Iteration  26: 607146.246 ops/s
Iteration  27: 603355.350 ops/s
Iteration  28: 613245.464 ops/s
Iteration  29: 590962.438 ops/s
Iteration  30: 596984.385 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableMergeTest._Benchmark.benchmark_innerError":
  603209.913 ±(99.9%) 8732.132 ops/s [Average]
  (min, avg, max) = (578499.652, 603209.913, 628220.315), stdev = 13069.845
  CI (99.9%): [594477.781, 611942.045] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score      Error  Units
CompletableMergeTest._Benchmark.benchmark_innerError  thrpt   30  603209.913 ± 8732.132  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.disposables.CompositeDisposableTest._Benchmark.benchmark_disposeThrowsCheckedExceptionSneaky$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.disposables.CompositeDisposableTest._Benchmark.benchmark_disposeThrowsCheckedExceptionSneaky

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 162779.665 ops/s
# Warmup Iteration   2: 276680.622 ops/s
# Warmup Iteration   3: 279262.390 ops/s
# Warmup Iteration   4: 290328.291 ops/s
# Warmup Iteration   5: 308798.517 ops/s
# Warmup Iteration   6: 297768.741 ops/s
# Warmup Iteration   7: 308432.474 ops/s
# Warmup Iteration   8: 305193.336 ops/s
# Warmup Iteration   9: 314467.789 ops/s
# Warmup Iteration  10: 294471.480 ops/s
# Warmup Iteration  11: 310246.790 ops/s
# Warmup Iteration  12: 310251.182 ops/s
# Warmup Iteration  13: 307658.039 ops/s
# Warmup Iteration  14: 315358.695 ops/s
# Warmup Iteration  15: 307830.371 ops/s
# Warmup Iteration  16: 308589.562 ops/s
# Warmup Iteration  17: 315278.340 ops/s
# Warmup Iteration  18: 322570.227 ops/s
# Warmup Iteration  19: 253813.192 ops/s
# Warmup Iteration  20: 317334.176 ops/s
# Warmup Iteration  21: 322549.650 ops/s
# Warmup Iteration  22: 317726.488 ops/s
# Warmup Iteration  23: 314809.106 ops/s
# Warmup Iteration  24: 324919.920 ops/s
# Warmup Iteration  25: 319477.496 ops/s
# Warmup Iteration  26: 331003.784 ops/s
# Warmup Iteration  27: 316259.255 ops/s
# Warmup Iteration  28: 314862.840 ops/s
# Warmup Iteration  29: 319058.651 ops/s
# Warmup Iteration  30: 324854.269 ops/s
Iteration   1: 331333.002 ops/s
Iteration   2: 318126.565 ops/s
Iteration   3: 321369.812 ops/s
Iteration   4: 315022.026 ops/s
Iteration   5: 329685.633 ops/s
Iteration   6: 321257.013 ops/s
Iteration   7: 325114.460 ops/s
Iteration   8: 317811.890 ops/s
Iteration   9: 326642.044 ops/s
Iteration  10: 332038.095 ops/s
Iteration  11: 308146.746 ops/s
Iteration  12: 322753.607 ops/s
Iteration  13: 317442.501 ops/s
Iteration  14: 312882.593 ops/s
Iteration  15: 323729.663 ops/s
Iteration  16: 318044.731 ops/s
Iteration  17: 323655.598 ops/s
Iteration  18: 324509.003 ops/s
Iteration  19: 319145.703 ops/s
Iteration  20: 338844.918 ops/s
Iteration  21: 314180.750 ops/s
Iteration  22: 317141.508 ops/s
Iteration  23: 333104.430 ops/s
Iteration  24: 312625.858 ops/s
Iteration  25: 337956.737 ops/s
Iteration  26: 311078.005 ops/s
Iteration  27: 323451.700 ops/s
Iteration  28: 316500.454 ops/s
Iteration  29: 330406.805 ops/s
Iteration  30: 322217.626 ops/s


Result "io.reactivex.rxjava3.disposables.CompositeDisposableTest._Benchmark.benchmark_disposeThrowsCheckedExceptionSneaky":
  322207.316 ±(99.9%) 5186.975 ops/s [Average]
  (min, avg, max) = (308146.746, 322207.316, 338844.918), stdev = 7763.620
  CI (99.9%): [317020.341, 327394.291] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt       Score      Error  Units
CompositeDisposableTest._Benchmark.benchmark_disposeThrowsCheckedExceptionSneaky  thrpt   30  322207.316 ± 5186.975  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingleTest._Benchmark.benchmark_backpressure$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingleTest._Benchmark.benchmark_backpressure

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 122551.133 ops/s
# Warmup Iteration   2: 1140288.072 ops/s
# Warmup Iteration   3: 1411316.705 ops/s
# Warmup Iteration   4: 1749821.625 ops/s
# Warmup Iteration   5: 1659226.877 ops/s
# Warmup Iteration   6: 1719785.071 ops/s
# Warmup Iteration   7: 1707407.187 ops/s
# Warmup Iteration   8: 1678449.290 ops/s
# Warmup Iteration   9: 1750090.944 ops/s
# Warmup Iteration  10: 1712447.582 ops/s
# Warmup Iteration  11: 1694970.628 ops/s
# Warmup Iteration  12: 1764952.349 ops/s
# Warmup Iteration  13: 1651045.877 ops/s
# Warmup Iteration  14: 1780492.827 ops/s
# Warmup Iteration  15: 1702576.163 ops/s
# Warmup Iteration  16: 1721378.229 ops/s
# Warmup Iteration  17: 1700301.183 ops/s
# Warmup Iteration  18: 1693064.417 ops/s
# Warmup Iteration  19: 1804754.303 ops/s
# Warmup Iteration  20: 1674084.021 ops/s
# Warmup Iteration  21: 1712316.859 ops/s
# Warmup Iteration  22: 1713127.029 ops/s
# Warmup Iteration  23: 1690321.931 ops/s
# Warmup Iteration  24: 1728262.969 ops/s
# Warmup Iteration  25: 1670113.110 ops/s
# Warmup Iteration  26: 1772716.956 ops/s
# Warmup Iteration  27: 1658134.037 ops/s
# Warmup Iteration  28: 1748517.530 ops/s
# Warmup Iteration  29: 1697809.093 ops/s
# Warmup Iteration  30: 1713951.638 ops/s
Iteration   1: 1759499.057 ops/s
Iteration   2: 1533587.162 ops/s
Iteration   3: 1757868.360 ops/s
Iteration   4: 1669632.735 ops/s
Iteration   5: 1700930.624 ops/s
Iteration   6: 1699896.447 ops/s
Iteration   7: 1705858.353 ops/s
Iteration   8: 1732172.388 ops/s
Iteration   9: 1685118.713 ops/s
Iteration  10: 1770354.514 ops/s
Iteration  11: 1719588.832 ops/s
Iteration  12: 1748432.387 ops/s
Iteration  13: 1723978.738 ops/s
Iteration  14: 1698225.204 ops/s
Iteration  15: 1682296.288 ops/s
Iteration  16: 1747912.552 ops/s
Iteration  17: 1649710.570 ops/s
Iteration  18: 1719918.923 ops/s
Iteration  19: 1733470.596 ops/s
Iteration  20: 1769410.093 ops/s
Iteration  21: 1647301.024 ops/s
Iteration  22: 1787667.179 ops/s
Iteration  23: 1747599.670 ops/s
Iteration  24: 1667657.105 ops/s
Iteration  25: 1780626.665 ops/s
Iteration  26: 1699650.963 ops/s
Iteration  27: 1737160.940 ops/s
Iteration  28: 1667370.624 ops/s
Iteration  29: 1731142.074 ops/s
Iteration  30: 1779733.212 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingleTest._Benchmark.benchmark_backpressure":
  1715125.733 ±(99.9%) 35027.491 ops/s [Average]
  (min, avg, max) = (1533587.162, 1715125.733, 1787667.179), stdev = 52427.504
  CI (99.9%): [1680098.242, 1750153.225] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
FlowableFlatMapSingleTest._Benchmark.benchmark_backpressure  thrpt   30  1715125.733 ± 35027.491  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingleTest._Benchmark.benchmark_innerSuccessCompletesAfterMain$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingleTest._Benchmark.benchmark_innerSuccessCompletesAfterMain

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 205281.929 ops/s
# Warmup Iteration   2: 601775.923 ops/s
# Warmup Iteration   3: 1747433.816 ops/s
# Warmup Iteration   4: 1782342.501 ops/s
# Warmup Iteration   5: 1997861.315 ops/s
# Warmup Iteration   6: 2041279.668 ops/s
# Warmup Iteration   7: 2059786.848 ops/s
# Warmup Iteration   8: 1940589.571 ops/s
# Warmup Iteration   9: 2074328.646 ops/s
# Warmup Iteration  10: 1970917.277 ops/s
# Warmup Iteration  11: 2009962.299 ops/s
# Warmup Iteration  12: 1940480.893 ops/s
# Warmup Iteration  13: 2097206.414 ops/s
# Warmup Iteration  14: 1720443.973 ops/s
# Warmup Iteration  15: 1969383.309 ops/s
# Warmup Iteration  16: 2080609.000 ops/s
# Warmup Iteration  17: 2070845.921 ops/s
# Warmup Iteration  18: 1964313.140 ops/s
# Warmup Iteration  19: 2044909.803 ops/s
# Warmup Iteration  20: 2012143.682 ops/s
# Warmup Iteration  21: 2053019.010 ops/s
# Warmup Iteration  22: 2028703.141 ops/s
# Warmup Iteration  23: 1954360.175 ops/s
# Warmup Iteration  24: 1989871.876 ops/s
# Warmup Iteration  25: 2024929.049 ops/s
# Warmup Iteration  26: 2080000.260 ops/s
# Warmup Iteration  27: 2025431.155 ops/s
# Warmup Iteration  28: 1993414.438 ops/s
# Warmup Iteration  29: 2083361.592 ops/s
# Warmup Iteration  30: 1981170.490 ops/s
Iteration   1: 2032011.330 ops/s
Iteration   2: 2030002.381 ops/s
Iteration   3: 2056777.174 ops/s
Iteration   4: 2096308.150 ops/s
Iteration   5: 2065739.142 ops/s
Iteration   6: 2003466.108 ops/s
Iteration   7: 2074126.528 ops/s
Iteration   8: 1999548.207 ops/s
Iteration   9: 2118755.666 ops/s
Iteration  10: 1957492.843 ops/s
Iteration  11: 2116042.466 ops/s
Iteration  12: 2009546.292 ops/s
Iteration  13: 1972372.884 ops/s
Iteration  14: 2004223.149 ops/s
Iteration  15: 1981779.625 ops/s
Iteration  16: 2075155.589 ops/s
Iteration  17: 1984653.753 ops/s
Iteration  18: 1970449.976 ops/s
Iteration  19: 2093802.026 ops/s
Iteration  20: 1983233.563 ops/s
Iteration  21: 2113884.451 ops/s
Iteration  22: 1956419.748 ops/s
Iteration  23: 2112948.482 ops/s
Iteration  24: 1990969.962 ops/s
Iteration  25: 2048643.824 ops/s
Iteration  26: 2008489.695 ops/s
Iteration  27: 2050502.012 ops/s
Iteration  28: 2105173.781 ops/s
Iteration  29: 1949771.895 ops/s
Iteration  30: 2025517.332 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingleTest._Benchmark.benchmark_innerSuccessCompletesAfterMain":
  2032926.934 ±(99.9%) 36187.106 ops/s [Average]
  (min, avg, max) = (1949771.895, 2032926.934, 2118755.666), stdev = 54163.161
  CI (99.9%): [1996739.828, 2069114.041] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt        Score       Error  Units
FlowableFlatMapSingleTest._Benchmark.benchmark_innerSuccessCompletesAfterMain  thrpt   30  2032926.934 ± 36187.106  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingleTest._Benchmark.benchmark_disposeInner$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingleTest._Benchmark.benchmark_disposeInner

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 236948.977 ops/s
# Warmup Iteration   2: 1671807.464 ops/s
# Warmup Iteration   3: 1747060.199 ops/s
# Warmup Iteration   4: 2232212.226 ops/s
# Warmup Iteration   5: 2253785.719 ops/s
# Warmup Iteration   6: 2201307.512 ops/s
# Warmup Iteration   7: 2243844.375 ops/s
# Warmup Iteration   8: 2159877.897 ops/s
# Warmup Iteration   9: 2307056.037 ops/s
# Warmup Iteration  10: 2246281.578 ops/s
# Warmup Iteration  11: 2115188.251 ops/s
# Warmup Iteration  12: 2275635.239 ops/s
# Warmup Iteration  13: 2166030.643 ops/s
# Warmup Iteration  14: 2307774.928 ops/s
# Warmup Iteration  15: 2229280.592 ops/s
# Warmup Iteration  16: 2140982.397 ops/s
# Warmup Iteration  17: 2292125.335 ops/s
# Warmup Iteration  18: 2187370.825 ops/s
# Warmup Iteration  19: 2215999.079 ops/s
# Warmup Iteration  20: 2258129.187 ops/s
# Warmup Iteration  21: 2176458.598 ops/s
# Warmup Iteration  22: 2248608.700 ops/s
# Warmup Iteration  23: 2157139.131 ops/s
# Warmup Iteration  24: 2202905.175 ops/s
# Warmup Iteration  25: 2276531.508 ops/s
# Warmup Iteration  26: 2158119.614 ops/s
# Warmup Iteration  27: 2320319.961 ops/s
# Warmup Iteration  28: 2135965.126 ops/s
# Warmup Iteration  29: 2216205.422 ops/s
# Warmup Iteration  30: 2319764.269 ops/s
Iteration   1: 2185100.770 ops/s
Iteration   2: 2274303.406 ops/s
Iteration   3: 2170914.887 ops/s
Iteration   4: 2240000.227 ops/s
Iteration   5: 2225554.652 ops/s
Iteration   6: 2172847.310 ops/s
Iteration   7: 2258900.165 ops/s
Iteration   8: 2161606.596 ops/s
Iteration   9: 2247200.161 ops/s
Iteration  10: 2167128.529 ops/s
Iteration  11: 2283736.765 ops/s
Iteration  12: 2194351.653 ops/s
Iteration  13: 2257406.370 ops/s
Iteration  14: 2197299.248 ops/s
Iteration  15: 2152983.736 ops/s
Iteration  16: 2259797.179 ops/s
Iteration  17: 2213026.599 ops/s
Iteration  18: 2225048.329 ops/s
Iteration  19: 2308449.416 ops/s
Iteration  20: 2153661.114 ops/s
Iteration  21: 2301402.409 ops/s
Iteration  22: 2184915.990 ops/s
Iteration  23: 2193302.255 ops/s
Iteration  24: 2237480.276 ops/s
Iteration  25: 2178674.741 ops/s
Iteration  26: 2272525.599 ops/s
Iteration  27: 2227181.053 ops/s
Iteration  28: 2255577.921 ops/s
Iteration  29: 2198408.157 ops/s
Iteration  30: 2198411.214 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingleTest._Benchmark.benchmark_disposeInner":
  2219906.558 ±(99.9%) 29953.097 ops/s [Average]
  (min, avg, max) = (2152983.736, 2219906.558, 2308449.416), stdev = 44832.389
  CI (99.9%): [2189953.461, 2249859.655] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
FlowableFlatMapSingleTest._Benchmark.benchmark_disposeInner  thrpt   30  2219906.558 ± 29953.097  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableMergeTest._Benchmark.benchmark_innerDoubleOnError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableMergeTest._Benchmark.benchmark_innerDoubleOnError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 23006.094 ops/s
# Warmup Iteration   2: 94648.895 ops/s
# Warmup Iteration   3: 143503.075 ops/s
# Warmup Iteration   4: 155112.170 ops/s
# Warmup Iteration   5: 143258.667 ops/s
# Warmup Iteration   6: 159965.646 ops/s
# Warmup Iteration   7: 159232.204 ops/s
# Warmup Iteration   8: 151647.191 ops/s
# Warmup Iteration   9: 140054.071 ops/s
# Warmup Iteration  10: 156384.801 ops/s
# Warmup Iteration  11: 161841.165 ops/s
# Warmup Iteration  12: 161036.649 ops/s
# Warmup Iteration  13: 159440.822 ops/s
# Warmup Iteration  14: 159645.046 ops/s
# Warmup Iteration  15: 167071.637 ops/s
# Warmup Iteration  16: 154077.433 ops/s
# Warmup Iteration  17: 180844.868 ops/s
# Warmup Iteration  18: 177019.120 ops/s
# Warmup Iteration  19: 181292.366 ops/s
# Warmup Iteration  20: 178484.904 ops/s
# Warmup Iteration  21: 178606.397 ops/s
# Warmup Iteration  22: 179751.658 ops/s
# Warmup Iteration  23: 172182.504 ops/s
# Warmup Iteration  24: 174497.887 ops/s
# Warmup Iteration  25: 179478.848 ops/s
# Warmup Iteration  26: 177688.161 ops/s
# Warmup Iteration  27: 180714.195 ops/s
# Warmup Iteration  28: 182878.730 ops/s
# Warmup Iteration  29: 171165.582 ops/s
# Warmup Iteration  30: 180824.133 ops/s
Iteration   1: 172689.403 ops/s
Iteration   2: 173708.118 ops/s
Iteration   3: 173841.117 ops/s
Iteration   4: 173499.951 ops/s
Iteration   5: 177104.752 ops/s
Iteration   6: 169957.124 ops/s
Iteration   7: 182428.561 ops/s
Iteration   8: 169871.642 ops/s
Iteration   9: 185743.178 ops/s
Iteration  10: 174031.252 ops/s
Iteration  11: 179450.039 ops/s
Iteration  12: 175953.180 ops/s
Iteration  13: 183027.323 ops/s
Iteration  14: 178033.394 ops/s
Iteration  15: 176475.940 ops/s
Iteration  16: 179993.363 ops/s
Iteration  17: 181990.418 ops/s
Iteration  18: 175473.265 ops/s
Iteration  19: 187814.298 ops/s
Iteration  20: 183294.218 ops/s
Iteration  21: 173525.938 ops/s
Iteration  22: 178132.978 ops/s
Iteration  23: 179543.716 ops/s
Iteration  24: 181991.564 ops/s
Iteration  25: 178882.007 ops/s
Iteration  26: 181916.032 ops/s
Iteration  27: 176165.106 ops/s
Iteration  28: 177848.063 ops/s
Iteration  29: 181514.446 ops/s
Iteration  30: 175350.413 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableMergeTest._Benchmark.benchmark_innerDoubleOnError":
  177975.027 ±(99.9%) 2969.226 ops/s [Average]
  (min, avg, max) = (169871.642, 177975.027, 187814.298), stdev = 4444.198
  CI (99.9%): [175005.801, 180944.253] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
CompletableMergeTest._Benchmark.benchmark_innerDoubleOnError  thrpt   30  177975.027 ± 2969.226  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.disposables.CompositeDisposableTest._Benchmark.benchmark_clear$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.disposables.CompositeDisposableTest._Benchmark.benchmark_clear

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1565852.526 ops/s
# Warmup Iteration   2: 3422087.608 ops/s
# Warmup Iteration   3: 3678194.138 ops/s
# Warmup Iteration   4: 3560336.220 ops/s
# Warmup Iteration   5: 3482903.590 ops/s
# Warmup Iteration   6: 3281168.148 ops/s
# Warmup Iteration   7: 3255970.549 ops/s
# Warmup Iteration   8: 3389969.060 ops/s
# Warmup Iteration   9: 3301422.554 ops/s
# Warmup Iteration  10: 3515172.933 ops/s
# Warmup Iteration  11: 3241281.762 ops/s
# Warmup Iteration  12: 3356171.156 ops/s
# Warmup Iteration  13: 3416289.203 ops/s
# Warmup Iteration  14: 3283872.925 ops/s
# Warmup Iteration  15: 3476374.172 ops/s
# Warmup Iteration  16: 3337004.413 ops/s
# Warmup Iteration  17: 3355129.131 ops/s
# Warmup Iteration  18: 3331808.920 ops/s
# Warmup Iteration  19: 3346340.642 ops/s
# Warmup Iteration  20: 3426201.309 ops/s
# Warmup Iteration  21: 3331226.339 ops/s
# Warmup Iteration  22: 3325210.891 ops/s
# Warmup Iteration  23: 3409845.945 ops/s
# Warmup Iteration  24: 3331723.877 ops/s
# Warmup Iteration  25: 3366343.525 ops/s
# Warmup Iteration  26: 3376195.990 ops/s
# Warmup Iteration  27: 3221033.694 ops/s
# Warmup Iteration  28: 3437518.819 ops/s
# Warmup Iteration  29: 3323906.426 ops/s
# Warmup Iteration  30: 3417688.237 ops/s
Iteration   1: 3463557.988 ops/s
Iteration   2: 3311103.375 ops/s
Iteration   3: 3283660.650 ops/s
Iteration   4: 3408531.604 ops/s
Iteration   5: 3334815.421 ops/s
Iteration   6: 3350798.763 ops/s
Iteration   7: 3305909.529 ops/s
Iteration   8: 3480884.287 ops/s
Iteration   9: 3484585.559 ops/s
Iteration  10: 3217908.693 ops/s
Iteration  11: 3451535.980 ops/s
Iteration  12: 3263510.499 ops/s
Iteration  13: 3334045.661 ops/s
Iteration  14: 3334847.792 ops/s
Iteration  15: 3330467.733 ops/s
Iteration  16: 3273124.751 ops/s
Iteration  17: 3329890.497 ops/s
Iteration  18: 3458219.937 ops/s
Iteration  19: 3298136.105 ops/s
Iteration  20: 3416903.258 ops/s
Iteration  21: 3382706.982 ops/s
Iteration  22: 3358005.142 ops/s
Iteration  23: 3430930.589 ops/s
Iteration  24: 3331039.284 ops/s
Iteration  25: 3397701.214 ops/s
Iteration  26: 3297302.927 ops/s
Iteration  27: 3468922.749 ops/s
Iteration  28: 3442040.732 ops/s
Iteration  29: 3345902.172 ops/s
Iteration  30: 3392334.043 ops/s


Result "io.reactivex.rxjava3.disposables.CompositeDisposableTest._Benchmark.benchmark_clear":
  3365977.464 ±(99.9%) 48179.896 ops/s [Average]
  (min, avg, max) = (3217908.693, 3365977.464, 3484585.559), stdev = 72113.406
  CI (99.9%): [3317797.567, 3414157.360] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score       Error  Units
CompositeDisposableTest._Benchmark.benchmark_clear  thrpt   30  3365977.464 ± 48179.896  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableMergeTest._Benchmark.benchmark_cancelAfterFirst$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableMergeTest._Benchmark.benchmark_cancelAfterFirst

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1072475.097 ops/s
# Warmup Iteration   2: 2833662.590 ops/s
# Warmup Iteration   3: 2690605.573 ops/s
# Warmup Iteration   4: 3148480.534 ops/s
# Warmup Iteration   5: 3256421.745 ops/s
# Warmup Iteration   6: 3261572.209 ops/s
# Warmup Iteration   7: 3341311.761 ops/s
# Warmup Iteration   8: 3214259.029 ops/s
# Warmup Iteration   9: 3431797.344 ops/s
# Warmup Iteration  10: 3412592.342 ops/s
# Warmup Iteration  11: 3358141.265 ops/s
# Warmup Iteration  12: 3258614.494 ops/s
# Warmup Iteration  13: 3320757.865 ops/s
# Warmup Iteration  14: 3198622.703 ops/s
# Warmup Iteration  15: 3400351.467 ops/s
# Warmup Iteration  16: 3291618.264 ops/s
# Warmup Iteration  17: 3204173.867 ops/s
# Warmup Iteration  18: 3340572.268 ops/s
# Warmup Iteration  19: 3255817.663 ops/s
# Warmup Iteration  20: 3360933.777 ops/s
# Warmup Iteration  21: 3271724.053 ops/s
# Warmup Iteration  22: 3282896.191 ops/s
# Warmup Iteration  23: 3443846.001 ops/s
# Warmup Iteration  24: 3232471.576 ops/s
# Warmup Iteration  25: 3230862.772 ops/s
# Warmup Iteration  26: 3281980.057 ops/s
# Warmup Iteration  27: 3261280.669 ops/s
# Warmup Iteration  28: 3296675.933 ops/s
# Warmup Iteration  29: 3257987.888 ops/s
# Warmup Iteration  30: 3280973.738 ops/s
Iteration   1: 3381353.703 ops/s
Iteration   2: 3337134.745 ops/s
Iteration   3: 3333468.580 ops/s
Iteration   4: 3302863.456 ops/s
Iteration   5: 3236222.065 ops/s
Iteration   6: 3407250.331 ops/s
Iteration   7: 3330362.299 ops/s
Iteration   8: 3275498.390 ops/s
Iteration   9: 3380760.477 ops/s
Iteration  10: 3309600.599 ops/s
Iteration  11: 3334308.859 ops/s
Iteration  12: 3225362.459 ops/s
Iteration  13: 3390384.625 ops/s
Iteration  14: 3365052.431 ops/s
Iteration  15: 3230089.357 ops/s
Iteration  16: 3255154.309 ops/s
Iteration  17: 3384764.368 ops/s
Iteration  18: 3231157.091 ops/s
Iteration  19: 3370639.231 ops/s
Iteration  20: 3325203.464 ops/s
Iteration  21: 3310481.521 ops/s
Iteration  22: 3249236.592 ops/s
Iteration  23: 3315219.510 ops/s
Iteration  24: 3310317.435 ops/s
Iteration  25: 3279742.166 ops/s
Iteration  26: 3433111.763 ops/s
Iteration  27: 3298078.319 ops/s
Iteration  28: 3375553.058 ops/s
Iteration  29: 3209851.435 ops/s
Iteration  30: 3293761.772 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableMergeTest._Benchmark.benchmark_cancelAfterFirst":
  3316066.147 ±(99.9%) 39955.584 ops/s [Average]
  (min, avg, max) = (3209851.435, 3316066.147, 3433111.763), stdev = 59803.641
  CI (99.9%): [3276110.563, 3356021.731] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
CompletableMergeTest._Benchmark.benchmark_cancelAfterFirst  thrpt   30  3316066.147 ± 39955.584  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.util.AtomicThrowableTest._Benchmark.benchmark_tryTerminateConsumerCompletableObserverError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.util.AtomicThrowableTest._Benchmark.benchmark_tryTerminateConsumerCompletableObserverError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 343670.658 ops/s
# Warmup Iteration   2: 621562.724 ops/s
# Warmup Iteration   3: 656368.006 ops/s
# Warmup Iteration   4: 676463.338 ops/s
# Warmup Iteration   5: 712996.071 ops/s
# Warmup Iteration   6: 720806.796 ops/s
# Warmup Iteration   7: 766930.462 ops/s
# Warmup Iteration   8: 724654.835 ops/s
# Warmup Iteration   9: 725021.302 ops/s
# Warmup Iteration  10: 717913.631 ops/s
# Warmup Iteration  11: 726577.389 ops/s
# Warmup Iteration  12: 720534.406 ops/s
# Warmup Iteration  13: 715299.552 ops/s
# Warmup Iteration  14: 739356.593 ops/s
# Warmup Iteration  15: 726528.828 ops/s
# Warmup Iteration  16: 740788.035 ops/s
# Warmup Iteration  17: 791873.313 ops/s
# Warmup Iteration  18: 763301.445 ops/s
# Warmup Iteration  19: 781441.441 ops/s
# Warmup Iteration  20: 740142.864 ops/s
# Warmup Iteration  21: 801139.872 ops/s
# Warmup Iteration  22: 776867.742 ops/s
# Warmup Iteration  23: 761080.281 ops/s
# Warmup Iteration  24: 777488.297 ops/s
# Warmup Iteration  25: 757963.092 ops/s
# Warmup Iteration  26: 765460.506 ops/s
# Warmup Iteration  27: 766135.458 ops/s
# Warmup Iteration  28: 764810.225 ops/s
# Warmup Iteration  29: 762773.373 ops/s
# Warmup Iteration  30: 794761.787 ops/s
Iteration   1: 752783.971 ops/s
Iteration   2: 775618.731 ops/s
Iteration   3: 772994.640 ops/s
Iteration   4: 761733.145 ops/s
Iteration   5: 798318.930 ops/s
Iteration   6: 736467.520 ops/s
Iteration   7: 778835.578 ops/s
Iteration   8: 762474.405 ops/s
Iteration   9: 776487.505 ops/s
Iteration  10: 763561.743 ops/s
Iteration  11: 747635.901 ops/s
Iteration  12: 784503.351 ops/s
Iteration  13: 743409.777 ops/s
Iteration  14: 762922.411 ops/s
Iteration  15: 746922.835 ops/s
Iteration  16: 782818.691 ops/s
Iteration  17: 795590.555 ops/s
Iteration  18: 755351.319 ops/s
Iteration  19: 776550.023 ops/s
Iteration  20: 771297.706 ops/s
Iteration  21: 791994.452 ops/s
Iteration  22: 787808.842 ops/s
Iteration  23: 756616.955 ops/s
Iteration  24: 784457.997 ops/s
Iteration  25: 764798.614 ops/s
Iteration  26: 781750.619 ops/s
Iteration  27: 757364.972 ops/s
Iteration  28: 784642.123 ops/s
Iteration  29: 770002.100 ops/s
Iteration  30: 758485.306 ops/s


Result "io.reactivex.rxjava3.internal.util.AtomicThrowableTest._Benchmark.benchmark_tryTerminateConsumerCompletableObserverError":
  769473.357 ±(99.9%) 10730.722 ops/s [Average]
  (min, avg, max) = (736467.520, 769473.357, 798318.930), stdev = 16061.240
  CI (99.9%): [758742.636, 780204.079] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               Mode  Cnt       Score       Error  Units
AtomicThrowableTest._Benchmark.benchmark_tryTerminateConsumerCompletableObserverError  thrpt   30  769473.357 ± 10730.722  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableUsingTest._Benchmark.benchmark_factoryThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableUsingTest._Benchmark.benchmark_factoryThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 167469.092 ops/s
# Warmup Iteration   2: 565359.597 ops/s
# Warmup Iteration   3: 646695.734 ops/s
# Warmup Iteration   4: 628178.312 ops/s
# Warmup Iteration   5: 666980.509 ops/s
# Warmup Iteration   6: 653552.795 ops/s
# Warmup Iteration   7: 646082.312 ops/s
# Warmup Iteration   8: 652484.227 ops/s
# Warmup Iteration   9: 640351.815 ops/s
# Warmup Iteration  10: 678592.438 ops/s
# Warmup Iteration  11: 647049.324 ops/s
# Warmup Iteration  12: 651652.915 ops/s
# Warmup Iteration  13: 652719.240 ops/s
# Warmup Iteration  14: 635123.499 ops/s
# Warmup Iteration  15: 658269.825 ops/s
# Warmup Iteration  16: 663752.852 ops/s
# Warmup Iteration  17: 708125.684 ops/s
# Warmup Iteration  18: 669514.316 ops/s
# Warmup Iteration  19: 703332.094 ops/s
# Warmup Iteration  20: 677971.793 ops/s
# Warmup Iteration  21: 715768.876 ops/s
# Warmup Iteration  22: 678340.080 ops/s
# Warmup Iteration  23: 673837.485 ops/s
# Warmup Iteration  24: 709886.197 ops/s
# Warmup Iteration  25: 646737.441 ops/s
# Warmup Iteration  26: 654564.686 ops/s
# Warmup Iteration  27: 692098.202 ops/s
# Warmup Iteration  28: 652609.325 ops/s
# Warmup Iteration  29: 696492.537 ops/s
# Warmup Iteration  30: 657676.928 ops/s
Iteration   1: 694021.197 ops/s
Iteration   2: 695783.375 ops/s
Iteration   3: 676789.181 ops/s
Iteration   4: 718759.453 ops/s
Iteration   5: 710073.358 ops/s
Iteration   6: 675800.064 ops/s
Iteration   7: 723683.541 ops/s
Iteration   8: 697516.658 ops/s
Iteration   9: 697209.965 ops/s
Iteration  10: 688881.148 ops/s
Iteration  11: 711459.358 ops/s
Iteration  12: 680609.591 ops/s
Iteration  13: 710921.399 ops/s
Iteration  14: 662561.911 ops/s
Iteration  15: 709205.454 ops/s
Iteration  16: 681306.431 ops/s
Iteration  17: 675828.921 ops/s
Iteration  18: 706455.619 ops/s
Iteration  19: 676241.948 ops/s
Iteration  20: 721634.536 ops/s
Iteration  21: 672556.223 ops/s
Iteration  22: 696668.735 ops/s
Iteration  23: 696268.330 ops/s
Iteration  24: 688693.055 ops/s
Iteration  25: 735521.584 ops/s
Iteration  26: 671657.245 ops/s
Iteration  27: 695968.324 ops/s
Iteration  28: 679779.309 ops/s
Iteration  29: 716579.819 ops/s
Iteration  30: 708401.097 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableUsingTest._Benchmark.benchmark_factoryThrows":
  695894.561 ±(99.9%) 12210.629 ops/s [Average]
  (min, avg, max) = (662561.911, 695894.561, 735521.584), stdev = 18276.296
  CI (99.9%): [683683.932, 708105.190] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score       Error  Units
FlowableUsingTest._Benchmark.benchmark_factoryThrows  thrpt   30  695894.561 ± 12210.629  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableUsingTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableUsingTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1852036.015 ops/s
# Warmup Iteration   2: 4441743.854 ops/s
# Warmup Iteration   3: 5821099.703 ops/s
# Warmup Iteration   4: 5984913.602 ops/s
# Warmup Iteration   5: 6066802.608 ops/s
# Warmup Iteration   6: 5817193.034 ops/s
# Warmup Iteration   7: 6007459.115 ops/s
# Warmup Iteration   8: 5823546.920 ops/s
# Warmup Iteration   9: 5904905.648 ops/s
# Warmup Iteration  10: 6098069.451 ops/s
# Warmup Iteration  11: 5819302.851 ops/s
# Warmup Iteration  12: 6166041.988 ops/s
# Warmup Iteration  13: 5884861.935 ops/s
# Warmup Iteration  14: 6158076.520 ops/s
# Warmup Iteration  15: 6186374.965 ops/s
# Warmup Iteration  16: 5894134.944 ops/s
# Warmup Iteration  17: 5926236.082 ops/s
# Warmup Iteration  18: 5936984.092 ops/s
# Warmup Iteration  19: 6039376.130 ops/s
# Warmup Iteration  20: 5941584.241 ops/s
# Warmup Iteration  21: 5972381.827 ops/s
# Warmup Iteration  22: 5898614.455 ops/s
# Warmup Iteration  23: 6031651.411 ops/s
# Warmup Iteration  24: 6003255.112 ops/s
# Warmup Iteration  25: 6108165.169 ops/s
# Warmup Iteration  26: 6001081.892 ops/s
# Warmup Iteration  27: 5976554.859 ops/s
# Warmup Iteration  28: 6044425.193 ops/s
# Warmup Iteration  29: 6116468.520 ops/s
# Warmup Iteration  30: 6056157.752 ops/s
Iteration   1: 6218193.436 ops/s
Iteration   2: 5920108.332 ops/s
Iteration   3: 5879708.583 ops/s
Iteration   4: 6187750.146 ops/s
Iteration   5: 6029294.547 ops/s
Iteration   6: 5985490.621 ops/s
Iteration   7: 6211130.139 ops/s
Iteration   8: 5929071.093 ops/s
Iteration   9: 5982162.374 ops/s
Iteration  10: 6215023.956 ops/s
Iteration  11: 5769482.475 ops/s
Iteration  12: 6150870.424 ops/s
Iteration  13: 5724081.689 ops/s
Iteration  14: 6198338.280 ops/s
Iteration  15: 6049594.108 ops/s
Iteration  16: 5758978.862 ops/s
Iteration  17: 5972599.714 ops/s
Iteration  18: 6030082.628 ops/s
Iteration  19: 6111312.169 ops/s
Iteration  20: 6189196.004 ops/s
Iteration  21: 5827491.100 ops/s
Iteration  22: 6287968.971 ops/s
Iteration  23: 5865953.765 ops/s
Iteration  24: 6164454.823 ops/s
Iteration  25: 4780583.469 ops/s
Iteration  26: 6094535.103 ops/s
Iteration  27: 6134355.023 ops/s
Iteration  28: 5994032.769 ops/s
Iteration  29: 5972109.984 ops/s
Iteration  30: 5980608.817 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableUsingTest._Benchmark.benchmark_dispose":
  5987152.114 ±(99.9%) 182785.208 ops/s [Average]
  (min, avg, max) = (4780583.469, 5987152.114, 6287968.971), stdev = 273584.315
  CI (99.9%): [5804366.905, 6169937.322] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt        Score        Error  Units
FlowableUsingTest._Benchmark.benchmark_dispose  thrpt   30  5987152.114 ± 182785.208  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableUsingTest._Benchmark.benchmark_supplierCrashNonEager$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableUsingTest._Benchmark.benchmark_supplierCrashNonEager

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 248455.230 ops/s
# Warmup Iteration   2: 531090.905 ops/s
# Warmup Iteration   3: 617733.409 ops/s
# Warmup Iteration   4: 585810.172 ops/s
# Warmup Iteration   5: 607148.854 ops/s
# Warmup Iteration   6: 637717.804 ops/s
# Warmup Iteration   7: 651048.502 ops/s
# Warmup Iteration   8: 681856.685 ops/s
# Warmup Iteration   9: 655450.681 ops/s
# Warmup Iteration  10: 650733.353 ops/s
# Warmup Iteration  11: 672916.173 ops/s
# Warmup Iteration  12: 655017.866 ops/s
# Warmup Iteration  13: 691905.739 ops/s
# Warmup Iteration  14: 650864.050 ops/s
# Warmup Iteration  15: 667111.701 ops/s
# Warmup Iteration  16: 677071.033 ops/s
# Warmup Iteration  17: 683239.261 ops/s
# Warmup Iteration  18: 696730.990 ops/s
# Warmup Iteration  19: 713800.007 ops/s
# Warmup Iteration  20: 679902.973 ops/s
# Warmup Iteration  21: 724515.082 ops/s
# Warmup Iteration  22: 692803.867 ops/s
# Warmup Iteration  23: 701386.119 ops/s
# Warmup Iteration  24: 713784.634 ops/s
# Warmup Iteration  25: 683380.409 ops/s
# Warmup Iteration  26: 692734.158 ops/s
# Warmup Iteration  27: 694072.797 ops/s
# Warmup Iteration  28: 692364.486 ops/s
# Warmup Iteration  29: 739038.441 ops/s
# Warmup Iteration  30: 662345.411 ops/s
Iteration   1: 713865.494 ops/s
Iteration   2: 683985.806 ops/s
Iteration   3: 721417.945 ops/s
Iteration   4: 683640.505 ops/s
Iteration   5: 698116.639 ops/s
Iteration   6: 677232.726 ops/s
Iteration   7: 705828.412 ops/s
Iteration   8: 693972.857 ops/s
Iteration   9: 686747.027 ops/s
Iteration  10: 722282.196 ops/s
Iteration  11: 681758.536 ops/s
Iteration  12: 709757.572 ops/s
Iteration  13: 671813.645 ops/s
Iteration  14: 699044.681 ops/s
Iteration  15: 713866.851 ops/s
Iteration  16: 689050.592 ops/s
Iteration  17: 699682.433 ops/s
Iteration  18: 711928.749 ops/s
Iteration  19: 687513.891 ops/s
Iteration  20: 721134.388 ops/s
Iteration  21: 678410.753 ops/s
Iteration  22: 696920.461 ops/s
Iteration  23: 702823.257 ops/s
Iteration  24: 678446.217 ops/s
Iteration  25: 698156.163 ops/s
Iteration  26: 702526.233 ops/s
Iteration  27: 721621.724 ops/s
Iteration  28: 688258.315 ops/s
Iteration  29: 696350.654 ops/s
Iteration  30: 697634.125 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableUsingTest._Benchmark.benchmark_supplierCrashNonEager":
  697792.962 ±(99.9%) 9734.143 ops/s [Average]
  (min, avg, max) = (671813.645, 697792.962, 722282.196), stdev = 14569.607
  CI (99.9%): [688058.819, 707527.104] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score      Error  Units
CompletableUsingTest._Benchmark.benchmark_supplierCrashNonEager  thrpt   30  697792.962 ± 9734.143  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableUsingTest._Benchmark.benchmark_supplierCrashEager$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableUsingTest._Benchmark.benchmark_supplierCrashEager

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 239708.275 ops/s
# Warmup Iteration   2: 572619.101 ops/s
# Warmup Iteration   3: 656450.881 ops/s
# Warmup Iteration   4: 584653.067 ops/s
# Warmup Iteration   5: 623375.875 ops/s
# Warmup Iteration   6: 628270.408 ops/s
# Warmup Iteration   7: 651627.765 ops/s
# Warmup Iteration   8: 669654.296 ops/s
# Warmup Iteration   9: 652638.418 ops/s
# Warmup Iteration  10: 667067.858 ops/s
# Warmup Iteration  11: 674963.166 ops/s
# Warmup Iteration  12: 658984.016 ops/s
# Warmup Iteration  13: 665780.802 ops/s
# Warmup Iteration  14: 660690.560 ops/s
# Warmup Iteration  15: 674850.487 ops/s
# Warmup Iteration  16: 689067.740 ops/s
# Warmup Iteration  17: 677204.461 ops/s
# Warmup Iteration  18: 721860.417 ops/s
# Warmup Iteration  19: 679465.488 ops/s
# Warmup Iteration  20: 688627.746 ops/s
# Warmup Iteration  21: 701768.833 ops/s
# Warmup Iteration  22: 694939.482 ops/s
# Warmup Iteration  23: 698682.553 ops/s
# Warmup Iteration  24: 684368.581 ops/s
# Warmup Iteration  25: 715396.796 ops/s
# Warmup Iteration  26: 688932.984 ops/s
# Warmup Iteration  27: 708212.302 ops/s
# Warmup Iteration  28: 703881.456 ops/s
# Warmup Iteration  29: 707260.000 ops/s
# Warmup Iteration  30: 700657.123 ops/s
Iteration   1: 697188.105 ops/s
Iteration   2: 689798.425 ops/s
Iteration   3: 718834.876 ops/s
Iteration   4: 671918.570 ops/s
Iteration   5: 694357.966 ops/s
Iteration   6: 700121.495 ops/s
Iteration   7: 700962.205 ops/s
Iteration   8: 698102.543 ops/s
Iteration   9: 725349.315 ops/s
Iteration  10: 675997.679 ops/s
Iteration  11: 719689.910 ops/s
Iteration  12: 670111.608 ops/s
Iteration  13: 704057.769 ops/s
Iteration  14: 683455.654 ops/s
Iteration  15: 651698.154 ops/s
Iteration  16: 732058.281 ops/s
Iteration  17: 680153.043 ops/s
Iteration  18: 714842.168 ops/s
Iteration  19: 697782.754 ops/s
Iteration  20: 542350.532 ops/s
Iteration  21: 708153.238 ops/s
Iteration  22: 700877.301 ops/s
Iteration  23: 716177.523 ops/s
Iteration  24: 686021.007 ops/s
Iteration  25: 714371.659 ops/s
Iteration  26: 702138.955 ops/s
Iteration  27: 699839.774 ops/s
Iteration  28: 700879.336 ops/s
Iteration  29: 691691.428 ops/s
Iteration  30: 738333.682 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableUsingTest._Benchmark.benchmark_supplierCrashEager":
  694243.832 ±(99.9%) 22942.252 ops/s [Average]
  (min, avg, max) = (542350.532, 694243.832, 738333.682), stdev = 34338.885
  CI (99.9%): [671301.580, 717186.084] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score       Error  Units
CompletableUsingTest._Benchmark.benchmark_supplierCrashEager  thrpt   30  694243.832 ± 22942.252  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorCompleteTest._Benchmark.benchmark_onSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorCompleteTest._Benchmark.benchmark_onSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 188940.615 ops/s
# Warmup Iteration   2: 461041.048 ops/s
# Warmup Iteration   3: 522673.730 ops/s
# Warmup Iteration   4: 544778.606 ops/s
# Warmup Iteration   5: 522860.941 ops/s
# Warmup Iteration   6: 533872.167 ops/s
# Warmup Iteration   7: 537718.153 ops/s
# Warmup Iteration   8: 521146.388 ops/s
# Warmup Iteration   9: 529776.657 ops/s
# Warmup Iteration  10: 520226.667 ops/s
# Warmup Iteration  11: 532082.409 ops/s
# Warmup Iteration  12: 529419.644 ops/s
# Warmup Iteration  13: 533598.368 ops/s
# Warmup Iteration  14: 525381.360 ops/s
# Warmup Iteration  15: 536139.323 ops/s
# Warmup Iteration  16: 540036.308 ops/s
# Warmup Iteration  17: 530966.864 ops/s
# Warmup Iteration  18: 570377.975 ops/s
# Warmup Iteration  19: 551275.262 ops/s
# Warmup Iteration  20: 569162.453 ops/s
# Warmup Iteration  21: 536046.924 ops/s
# Warmup Iteration  22: 542877.314 ops/s
# Warmup Iteration  23: 578030.575 ops/s
# Warmup Iteration  24: 545871.315 ops/s
# Warmup Iteration  25: 554966.550 ops/s
# Warmup Iteration  26: 590222.811 ops/s
# Warmup Iteration  27: 548382.253 ops/s
# Warmup Iteration  28: 553199.125 ops/s
# Warmup Iteration  29: 575343.019 ops/s
# Warmup Iteration  30: 546985.681 ops/s
Iteration   1: 572433.475 ops/s
Iteration   2: 548317.441 ops/s
Iteration   3: 569521.172 ops/s
Iteration   4: 563419.224 ops/s
Iteration   5: 561211.701 ops/s
Iteration   6: 576854.161 ops/s
Iteration   7: 558000.543 ops/s
Iteration   8: 539299.229 ops/s
Iteration   9: 562222.786 ops/s
Iteration  10: 554598.521 ops/s
Iteration  11: 567990.530 ops/s
Iteration  12: 553597.364 ops/s
Iteration  13: 568381.526 ops/s
Iteration  14: 542173.870 ops/s
Iteration  15: 566101.401 ops/s
Iteration  16: 571552.254 ops/s
Iteration  17: 539333.108 ops/s
Iteration  18: 551793.071 ops/s
Iteration  19: 554150.273 ops/s
Iteration  20: 571176.060 ops/s
Iteration  21: 552755.476 ops/s
Iteration  22: 562295.221 ops/s
Iteration  23: 561476.196 ops/s
Iteration  24: 571306.243 ops/s
Iteration  25: 558430.780 ops/s
Iteration  26: 558233.314 ops/s
Iteration  27: 562717.188 ops/s
Iteration  28: 532725.344 ops/s
Iteration  29: 580336.841 ops/s
Iteration  30: 564992.972 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorCompleteTest._Benchmark.benchmark_onSubscribe":
  559913.243 ±(99.9%) 7693.712 ops/s [Average]
  (min, avg, max) = (532725.344, 559913.243, 580336.841), stdev = 11515.587
  CI (99.9%): [552219.531, 567606.955] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
FlowableOnErrorCompleteTest._Benchmark.benchmark_onSubscribe  thrpt   30  559913.243 ± 7693.712  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriberTest._Benchmark.benchmark_unorderedFastPathRequest1$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriberTest._Benchmark.benchmark_unorderedFastPathRequest1

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 658884.902 ops/s
# Warmup Iteration   2: 2195776.159 ops/s
# Warmup Iteration   3: 3057249.572 ops/s
# Warmup Iteration   4: 3062659.564 ops/s
# Warmup Iteration   5: 3137656.843 ops/s
# Warmup Iteration   6: 3005601.641 ops/s
# Warmup Iteration   7: 3176521.124 ops/s
# Warmup Iteration   8: 3117053.955 ops/s
# Warmup Iteration   9: 2970622.900 ops/s
# Warmup Iteration  10: 3106488.142 ops/s
# Warmup Iteration  11: 2988298.924 ops/s
# Warmup Iteration  12: 3037543.121 ops/s
# Warmup Iteration  13: 3160606.863 ops/s
# Warmup Iteration  14: 3091030.030 ops/s
# Warmup Iteration  15: 3202254.787 ops/s
# Warmup Iteration  16: 2967939.267 ops/s
# Warmup Iteration  17: 3049903.632 ops/s
# Warmup Iteration  18: 3145067.314 ops/s
# Warmup Iteration  19: 2979621.615 ops/s
# Warmup Iteration  20: 3047461.616 ops/s
# Warmup Iteration  21: 2953122.653 ops/s
# Warmup Iteration  22: 3063713.149 ops/s
# Warmup Iteration  23: 3141303.856 ops/s
# Warmup Iteration  24: 3147952.245 ops/s
# Warmup Iteration  25: 2999039.072 ops/s
# Warmup Iteration  26: 3204964.366 ops/s
# Warmup Iteration  27: 2895411.550 ops/s
# Warmup Iteration  28: 3080312.992 ops/s
# Warmup Iteration  29: 3041310.291 ops/s
# Warmup Iteration  30: 3002018.963 ops/s
Iteration   1: 3175623.393 ops/s
Iteration   2: 3252721.177 ops/s
Iteration   3: 3005980.439 ops/s
Iteration   4: 3081334.221 ops/s
Iteration   5: 2998748.248 ops/s
Iteration   6: 3200603.410 ops/s
Iteration   7: 3194033.677 ops/s
Iteration   8: 2999174.942 ops/s
Iteration   9: 3140099.868 ops/s
Iteration  10: 3013489.301 ops/s
Iteration  11: 3121620.475 ops/s
Iteration  12: 3150346.624 ops/s
Iteration  13: 3013441.069 ops/s
Iteration  14: 3012957.526 ops/s
Iteration  15: 2332072.809 ops/s
Iteration  16: 3188096.035 ops/s
Iteration  17: 2922834.473 ops/s
Iteration  18: 3109371.315 ops/s
Iteration  19: 3117502.435 ops/s
Iteration  20: 3034180.837 ops/s
Iteration  21: 3255057.330 ops/s
Iteration  22: 3089833.622 ops/s
Iteration  23: 2964958.147 ops/s
Iteration  24: 3161830.336 ops/s
Iteration  25: 3052834.379 ops/s
Iteration  26: 3223373.632 ops/s
Iteration  27: 2965424.585 ops/s
Iteration  28: 3215326.675 ops/s
Iteration  29: 3133869.069 ops/s
Iteration  30: 3019526.265 ops/s


Result "io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriberTest._Benchmark.benchmark_unorderedFastPathRequest1":
  3071542.210 ±(99.9%) 112123.291 ops/s [Average]
  (min, avg, max) = (2332072.809, 3071542.210, 3255057.330), stdev = 167820.876
  CI (99.9%): [2959418.920, 3183665.501] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score        Error  Units
QueueDrainSubscriberTest._Benchmark.benchmark_unorderedFastPathRequest1  thrpt   30  3071542.210 ± 112123.291  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriberTest._Benchmark.benchmark_orderedFastPathReject$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriberTest._Benchmark.benchmark_orderedFastPathReject

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 706737.491 ops/s
# Warmup Iteration   2: 2296720.710 ops/s
# Warmup Iteration   3: 3170435.279 ops/s
# Warmup Iteration   4: 3337757.469 ops/s
# Warmup Iteration   5: 3208599.572 ops/s
# Warmup Iteration   6: 3125558.109 ops/s
# Warmup Iteration   7: 3215280.506 ops/s
# Warmup Iteration   8: 3262666.865 ops/s
# Warmup Iteration   9: 3125407.516 ops/s
# Warmup Iteration  10: 3179931.614 ops/s
# Warmup Iteration  11: 3215968.440 ops/s
# Warmup Iteration  12: 3195568.001 ops/s
# Warmup Iteration  13: 3331647.323 ops/s
# Warmup Iteration  14: 3129066.532 ops/s
# Warmup Iteration  15: 3347594.254 ops/s
# Warmup Iteration  16: 3080988.595 ops/s
# Warmup Iteration  17: 3219382.120 ops/s
# Warmup Iteration  18: 3175412.518 ops/s
# Warmup Iteration  19: 3192460.912 ops/s
# Warmup Iteration  20: 3299784.964 ops/s
# Warmup Iteration  21: 3175746.801 ops/s
# Warmup Iteration  22: 3389010.271 ops/s
# Warmup Iteration  23: 3353852.059 ops/s
# Warmup Iteration  24: 3176062.387 ops/s
# Warmup Iteration  25: 3085722.711 ops/s
# Warmup Iteration  26: 3261401.029 ops/s
# Warmup Iteration  27: 3158911.774 ops/s
# Warmup Iteration  28: 3298349.885 ops/s
# Warmup Iteration  29: 3242786.386 ops/s
# Warmup Iteration  30: 3249478.126 ops/s
Iteration   1: 3248039.247 ops/s
Iteration   2: 3151571.986 ops/s
Iteration   3: 3296786.033 ops/s
Iteration   4: 3294912.144 ops/s
Iteration   5: 3237751.696 ops/s
Iteration   6: 3278959.025 ops/s
Iteration   7: 3110942.227 ops/s
Iteration   8: 3284603.576 ops/s
Iteration   9: 3189827.409 ops/s
Iteration  10: 3239029.805 ops/s
Iteration  11: 3145542.511 ops/s
Iteration  12: 3240436.377 ops/s
Iteration  13: 3221946.819 ops/s
Iteration  14: 3159538.978 ops/s
Iteration  15: 3248762.614 ops/s
Iteration  16: 3327896.802 ops/s
Iteration  17: 3173669.517 ops/s
Iteration  18: 3213080.592 ops/s
Iteration  19: 3164477.280 ops/s
Iteration  20: 3293384.515 ops/s
Iteration  21: 3390072.194 ops/s
Iteration  22: 3196022.636 ops/s
Iteration  23: 3237822.754 ops/s
Iteration  24: 3144815.952 ops/s
Iteration  25: 3316751.806 ops/s
Iteration  26: 3278921.050 ops/s
Iteration  27: 3154272.824 ops/s
Iteration  28: 3252187.532 ops/s
Iteration  29: 3309946.563 ops/s
Iteration  30: 3304993.939 ops/s


Result "io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriberTest._Benchmark.benchmark_orderedFastPathReject":
  3236898.880 ±(99.9%) 44949.640 ops/s [Average]
  (min, avg, max) = (3110942.227, 3236898.880, 3390072.194), stdev = 67278.510
  CI (99.9%): [3191949.240, 3281848.520] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
QueueDrainSubscriberTest._Benchmark.benchmark_orderedFastPathReject  thrpt   30  3236898.880 ± 44949.640  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriberTest._Benchmark.benchmark_orderedFastPathRequest1$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriberTest._Benchmark.benchmark_orderedFastPathRequest1

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 692872.641 ops/s
# Warmup Iteration   2: 2188412.883 ops/s
# Warmup Iteration   3: 3118980.324 ops/s
# Warmup Iteration   4: 3077428.123 ops/s
# Warmup Iteration   5: 3258666.113 ops/s
# Warmup Iteration   6: 3044874.372 ops/s
# Warmup Iteration   7: 3176344.490 ops/s
# Warmup Iteration   8: 3064982.582 ops/s
# Warmup Iteration   9: 3030762.872 ops/s
# Warmup Iteration  10: 3126964.427 ops/s
# Warmup Iteration  11: 3007935.814 ops/s
# Warmup Iteration  12: 3085653.207 ops/s
# Warmup Iteration  13: 3036888.076 ops/s
# Warmup Iteration  14: 3137454.420 ops/s
# Warmup Iteration  15: 3053714.792 ops/s
# Warmup Iteration  16: 3144465.837 ops/s
# Warmup Iteration  17: 3082835.383 ops/s
# Warmup Iteration  18: 3122536.579 ops/s
# Warmup Iteration  19: 3149272.595 ops/s
# Warmup Iteration  20: 3125153.428 ops/s
# Warmup Iteration  21: 3167180.462 ops/s
# Warmup Iteration  22: 3141893.355 ops/s
# Warmup Iteration  23: 3098199.275 ops/s
# Warmup Iteration  24: 3150046.559 ops/s
# Warmup Iteration  25: 3048214.727 ops/s
# Warmup Iteration  26: 3124363.509 ops/s
# Warmup Iteration  27: 3238064.594 ops/s
# Warmup Iteration  28: 3198277.108 ops/s
# Warmup Iteration  29: 2987655.284 ops/s
# Warmup Iteration  30: 3118905.812 ops/s
Iteration   1: 3159377.515 ops/s
Iteration   2: 3044883.326 ops/s
Iteration   3: 3217436.438 ops/s
Iteration   4: 3067521.800 ops/s
Iteration   5: 3202191.993 ops/s
Iteration   6: 3169700.974 ops/s
Iteration   7: 3093906.389 ops/s
Iteration   8: 3326445.285 ops/s
Iteration   9: 2982600.410 ops/s
Iteration  10: 2617992.761 ops/s
Iteration  11: 3035729.078 ops/s
Iteration  12: 3169820.676 ops/s
Iteration  13: 3181603.459 ops/s
Iteration  14: 3154223.648 ops/s
Iteration  15: 3209880.150 ops/s
Iteration  16: 3241721.609 ops/s
Iteration  17: 3003741.275 ops/s
Iteration  18: 3179949.341 ops/s
Iteration  19: 3055038.347 ops/s
Iteration  20: 3191845.452 ops/s
Iteration  21: 3160097.114 ops/s
Iteration  22: 3114765.529 ops/s
Iteration  23: 3231397.175 ops/s
Iteration  24: 3123968.403 ops/s
Iteration  25: 3228571.344 ops/s
Iteration  26: 3064656.313 ops/s
Iteration  27: 3155641.136 ops/s
Iteration  28: 3156113.259 ops/s
Iteration  29: 3106979.995 ops/s
Iteration  30: 3140059.848 ops/s


Result "io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriberTest._Benchmark.benchmark_orderedFastPathRequest1":
  3126262.001 ±(99.9%) 82077.928 ops/s [Average]
  (min, avg, max) = (2617992.761, 3126262.001, 3326445.285), stdev = 122850.388
  CI (99.9%): [3044184.073, 3208339.930] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
QueueDrainSubscriberTest._Benchmark.benchmark_orderedFastPathRequest1  thrpt   30  3126262.001 ± 82077.928  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.exceptions.OnErrorNotImplementedExceptionTest._Benchmark.benchmark_flowableForEachWhile$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.exceptions.OnErrorNotImplementedExceptionTest._Benchmark.benchmark_flowableForEachWhile

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 38561.609 ops/s
# Warmup Iteration   2: 145670.334 ops/s
# Warmup Iteration   3: 171427.324 ops/s
# Warmup Iteration   4: 209071.978 ops/s
# Warmup Iteration   5: 206392.803 ops/s
# Warmup Iteration   6: 218793.235 ops/s
# Warmup Iteration   7: 214958.949 ops/s
# Warmup Iteration   8: 205399.486 ops/s
# Warmup Iteration   9: 217546.656 ops/s
# Warmup Iteration  10: 209473.380 ops/s
# Warmup Iteration  11: 217000.212 ops/s
# Warmup Iteration  12: 203652.057 ops/s
# Warmup Iteration  13: 214476.802 ops/s
# Warmup Iteration  14: 216486.815 ops/s
# Warmup Iteration  15: 206823.065 ops/s
# Warmup Iteration  16: 220406.436 ops/s
# Warmup Iteration  17: 209180.029 ops/s
# Warmup Iteration  18: 220069.587 ops/s
# Warmup Iteration  19: 221459.568 ops/s
# Warmup Iteration  20: 219408.585 ops/s
# Warmup Iteration  21: 216995.169 ops/s
# Warmup Iteration  22: 222094.372 ops/s
# Warmup Iteration  23: 223760.536 ops/s
# Warmup Iteration  24: 217686.415 ops/s
# Warmup Iteration  25: 211956.048 ops/s
# Warmup Iteration  26: 228785.308 ops/s
# Warmup Iteration  27: 220351.970 ops/s
# Warmup Iteration  28: 212230.358 ops/s
# Warmup Iteration  29: 226154.439 ops/s
# Warmup Iteration  30: 215802.103 ops/s
Iteration   1: 224396.465 ops/s
Iteration   2: 216741.932 ops/s
Iteration   3: 216090.837 ops/s
Iteration   4: 224380.438 ops/s
Iteration   5: 226215.702 ops/s
Iteration   6: 203927.548 ops/s
Iteration   7: 221804.697 ops/s
Iteration   8: 212303.233 ops/s
Iteration   9: 222279.074 ops/s
Iteration  10: 217935.410 ops/s
Iteration  11: 218076.438 ops/s
Iteration  12: 219034.029 ops/s
Iteration  13: 218673.060 ops/s
Iteration  14: 224683.252 ops/s
Iteration  15: 212604.730 ops/s
Iteration  16: 216093.651 ops/s
Iteration  17: 218283.908 ops/s
Iteration  18: 214450.368 ops/s
Iteration  19: 217224.519 ops/s
Iteration  20: 217387.766 ops/s
Iteration  21: 220604.059 ops/s
Iteration  22: 212887.468 ops/s
Iteration  23: 224668.960 ops/s
Iteration  24: 215949.775 ops/s
Iteration  25: 223948.750 ops/s
Iteration  26: 222364.213 ops/s
Iteration  27: 214888.639 ops/s
Iteration  28: 225433.270 ops/s
Iteration  29: 212188.557 ops/s
Iteration  30: 227215.450 ops/s


Result "io.reactivex.rxjava3.exceptions.OnErrorNotImplementedExceptionTest._Benchmark.benchmark_flowableForEachWhile":
  218757.873 ±(99.9%) 3536.743 ops/s [Average]
  (min, avg, max) = (203927.548, 218757.873, 227215.450), stdev = 5293.630
  CI (99.9%): [215221.131, 222294.616] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt       Score      Error  Units
OnErrorNotImplementedExceptionTest._Benchmark.benchmark_flowableForEachWhile  thrpt   30  218757.873 ± 3536.743  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayEagerTruncateTest._Benchmark.benchmark_createBufferFactoryCrashOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayEagerTruncateTest._Benchmark.benchmark_createBufferFactoryCrashOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 201517.564 ops/s
# Warmup Iteration   2: 546561.488 ops/s
# Warmup Iteration   3: 646350.937 ops/s
# Warmup Iteration   4: 568488.168 ops/s
# Warmup Iteration   5: 593188.053 ops/s
# Warmup Iteration   6: 580092.456 ops/s
# Warmup Iteration   7: 657656.218 ops/s
# Warmup Iteration   8: 630569.531 ops/s
# Warmup Iteration   9: 634816.018 ops/s
# Warmup Iteration  10: 658705.612 ops/s
# Warmup Iteration  11: 625571.891 ops/s
# Warmup Iteration  12: 668109.654 ops/s
# Warmup Iteration  13: 624035.616 ops/s
# Warmup Iteration  14: 643567.498 ops/s
# Warmup Iteration  15: 665748.728 ops/s
# Warmup Iteration  16: 642895.086 ops/s
# Warmup Iteration  17: 677128.188 ops/s
# Warmup Iteration  18: 672414.146 ops/s
# Warmup Iteration  19: 685874.259 ops/s
# Warmup Iteration  20: 666808.617 ops/s
# Warmup Iteration  21: 676916.248 ops/s
# Warmup Iteration  22: 686677.665 ops/s
# Warmup Iteration  23: 699524.687 ops/s
# Warmup Iteration  24: 657482.940 ops/s
# Warmup Iteration  25: 679962.082 ops/s
# Warmup Iteration  26: 696023.531 ops/s
# Warmup Iteration  27: 692761.649 ops/s
# Warmup Iteration  28: 669112.571 ops/s
# Warmup Iteration  29: 691404.654 ops/s
# Warmup Iteration  30: 654999.734 ops/s
Iteration   1: 679365.306 ops/s
Iteration   2: 657678.138 ops/s
Iteration   3: 690771.391 ops/s
Iteration   4: 661796.626 ops/s
Iteration   5: 502168.112 ops/s
Iteration   6: 700674.870 ops/s
Iteration   7: 669186.851 ops/s
Iteration   8: 692540.635 ops/s
Iteration   9: 650527.683 ops/s
Iteration  10: 688834.945 ops/s
Iteration  11: 662512.580 ops/s
Iteration  12: 680875.775 ops/s
Iteration  13: 681329.025 ops/s
Iteration  14: 675567.103 ops/s
Iteration  15: 663398.355 ops/s
Iteration  16: 671518.488 ops/s
Iteration  17: 680338.550 ops/s
Iteration  18: 678709.038 ops/s
Iteration  19: 660042.794 ops/s
Iteration  20: 682305.878 ops/s
Iteration  21: 652839.534 ops/s
Iteration  22: 692450.379 ops/s
Iteration  23: 685975.112 ops/s
Iteration  24: 687360.684 ops/s
Iteration  25: 642923.968 ops/s
Iteration  26: 681341.936 ops/s
Iteration  27: 687739.890 ops/s
Iteration  28: 661313.267 ops/s
Iteration  29: 693305.705 ops/s
Iteration  30: 651972.639 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayEagerTruncateTest._Benchmark.benchmark_createBufferFactoryCrashOnSubscribe":
  668912.175 ±(99.9%) 23323.638 ops/s [Average]
  (min, avg, max) = (502168.112, 668912.175, 700674.870), stdev = 34909.726
  CI (99.9%): [645588.537, 692235.813] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                  Mode  Cnt       Score       Error  Units
FlowableReplayEagerTruncateTest._Benchmark.benchmark_createBufferFactoryCrashOnSubscribe  thrpt   30  668912.175 ± 23323.638  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicateTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicateTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 152809.720 ops/s
# Warmup Iteration   2: 461137.380 ops/s
# Warmup Iteration   3: 505595.465 ops/s
# Warmup Iteration   4: 496954.802 ops/s
# Warmup Iteration   5: 503715.500 ops/s
# Warmup Iteration   6: 521993.939 ops/s
# Warmup Iteration   7: 521631.597 ops/s
# Warmup Iteration   8: 522840.111 ops/s
# Warmup Iteration   9: 520317.626 ops/s
# Warmup Iteration  10: 543533.440 ops/s
# Warmup Iteration  11: 528152.233 ops/s
# Warmup Iteration  12: 486789.218 ops/s
# Warmup Iteration  13: 552298.591 ops/s
# Warmup Iteration  14: 531861.561 ops/s
# Warmup Iteration  15: 512851.634 ops/s
# Warmup Iteration  16: 531069.584 ops/s
# Warmup Iteration  17: 535892.327 ops/s
# Warmup Iteration  18: 552789.428 ops/s
# Warmup Iteration  19: 521003.098 ops/s
# Warmup Iteration  20: 560564.865 ops/s
# Warmup Iteration  21: 533890.323 ops/s
# Warmup Iteration  22: 525736.737 ops/s
# Warmup Iteration  23: 553109.771 ops/s
# Warmup Iteration  24: 544371.288 ops/s
# Warmup Iteration  25: 535773.285 ops/s
# Warmup Iteration  26: 558421.459 ops/s
# Warmup Iteration  27: 537057.182 ops/s
# Warmup Iteration  28: 532267.679 ops/s
# Warmup Iteration  29: 544944.785 ops/s
# Warmup Iteration  30: 543662.334 ops/s
Iteration   1: 549332.806 ops/s
Iteration   2: 561716.792 ops/s
Iteration   3: 534574.022 ops/s
Iteration   4: 553354.013 ops/s
Iteration   5: 531432.181 ops/s
Iteration   6: 551539.028 ops/s
Iteration   7: 533341.991 ops/s
Iteration   8: 541157.167 ops/s
Iteration   9: 549883.301 ops/s
Iteration  10: 530245.672 ops/s
Iteration  11: 541737.149 ops/s
Iteration  12: 551534.039 ops/s
Iteration  13: 523238.409 ops/s
Iteration  14: 552536.371 ops/s
Iteration  15: 554323.699 ops/s
Iteration  16: 533542.200 ops/s
Iteration  17: 536969.713 ops/s
Iteration  18: 536623.365 ops/s
Iteration  19: 549317.522 ops/s
Iteration  20: 528937.225 ops/s
Iteration  21: 558758.640 ops/s
Iteration  22: 528065.583 ops/s
Iteration  23: 546679.256 ops/s
Iteration  24: 552797.558 ops/s
Iteration  25: 527289.825 ops/s
Iteration  26: 549901.247 ops/s
Iteration  27: 540614.730 ops/s
Iteration  28: 561251.470 ops/s
Iteration  29: 537817.335 ops/s
Iteration  30: 547443.836 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicateTest._Benchmark.benchmark_doubleOnSubscribe":
  543198.538 ±(99.9%) 7265.948 ops/s [Average]
  (min, avg, max) = (523238.409, 543198.538, 561716.792), stdev = 10875.330
  CI (99.9%): [535932.590, 550464.486] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score      Error  Units
FlowableTakeUntilPredicateTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  543198.538 ± 7265.948  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutWithSelectorTest._Benchmark.benchmark_disposedUpfront$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutWithSelectorTest._Benchmark.benchmark_disposedUpfront

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1096490.067 ops/s
# Warmup Iteration   2: 2674482.740 ops/s
# Warmup Iteration   3: 3672839.214 ops/s
# Warmup Iteration   4: 3611822.766 ops/s
# Warmup Iteration   5: 3771213.869 ops/s
# Warmup Iteration   6: 3712649.699 ops/s
# Warmup Iteration   7: 3798136.309 ops/s
# Warmup Iteration   8: 3713136.669 ops/s
# Warmup Iteration   9: 3681237.939 ops/s
# Warmup Iteration  10: 3847407.738 ops/s
# Warmup Iteration  11: 3609463.972 ops/s
# Warmup Iteration  12: 3620109.908 ops/s
# Warmup Iteration  13: 3825919.782 ops/s
# Warmup Iteration  14: 3814963.725 ops/s
# Warmup Iteration  15: 3785523.006 ops/s
# Warmup Iteration  16: 3616190.584 ops/s
# Warmup Iteration  17: 3811638.095 ops/s
# Warmup Iteration  18: 3743693.184 ops/s
# Warmup Iteration  19: 3578914.731 ops/s
# Warmup Iteration  20: 3779310.357 ops/s
# Warmup Iteration  21: 3588651.365 ops/s
# Warmup Iteration  22: 3756211.863 ops/s
# Warmup Iteration  23: 3775443.561 ops/s
# Warmup Iteration  24: 3696267.171 ops/s
# Warmup Iteration  25: 3764368.281 ops/s
# Warmup Iteration  26: 3724286.456 ops/s
# Warmup Iteration  27: 3626409.563 ops/s
# Warmup Iteration  28: 3738754.614 ops/s
# Warmup Iteration  29: 2990646.350 ops/s
# Warmup Iteration  30: 3775585.303 ops/s
Iteration   1: 3748847.718 ops/s
Iteration   2: 3644948.608 ops/s
Iteration   3: 3737813.847 ops/s
Iteration   4: 3815046.698 ops/s
Iteration   5: 3690413.323 ops/s
Iteration   6: 3672456.481 ops/s
Iteration   7: 3639194.124 ops/s
Iteration   8: 3770824.212 ops/s
Iteration   9: 3610195.297 ops/s
Iteration  10: 3780233.095 ops/s
Iteration  11: 3705949.532 ops/s
Iteration  12: 3630523.042 ops/s
Iteration  13: 3706901.912 ops/s
Iteration  14: 3637800.709 ops/s
Iteration  15: 3702812.096 ops/s
Iteration  16: 3800082.787 ops/s
Iteration  17: 3731416.458 ops/s
Iteration  18: 3728554.260 ops/s
Iteration  19: 3678981.424 ops/s
Iteration  20: 3779800.085 ops/s
Iteration  21: 3761791.105 ops/s
Iteration  22: 3666451.163 ops/s
Iteration  23: 3867994.084 ops/s
Iteration  24: 3764335.894 ops/s
Iteration  25: 3681260.981 ops/s
Iteration  26: 3676837.409 ops/s
Iteration  27: 3610577.754 ops/s
Iteration  28: 3790611.226 ops/s
Iteration  29: 3557582.703 ops/s
Iteration  30: 3813051.230 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutWithSelectorTest._Benchmark.benchmark_disposedUpfront":
  3713442.975 ±(99.9%) 48624.335 ops/s [Average]
  (min, avg, max) = (3557582.703, 3713442.975, 3867994.084), stdev = 72778.621
  CI (99.9%): [3664818.640, 3762067.311] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
FlowableTimeoutWithSelectorTest._Benchmark.benchmark_disposedUpfront  thrpt   30  3713442.975 ± 48624.335  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorCompleteTest._Benchmark.benchmark_errorPredicateCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorCompleteTest._Benchmark.benchmark_errorPredicateCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 31298.591 ops/s
# Warmup Iteration   2: 92618.115 ops/s
# Warmup Iteration   3: 182722.169 ops/s
# Warmup Iteration   4: 165505.593 ops/s
# Warmup Iteration   5: 173093.309 ops/s
# Warmup Iteration   6: 177068.771 ops/s
# Warmup Iteration   7: 181356.507 ops/s
# Warmup Iteration   8: 181625.928 ops/s
# Warmup Iteration   9: 175516.993 ops/s
# Warmup Iteration  10: 186619.716 ops/s
# Warmup Iteration  11: 180251.479 ops/s
# Warmup Iteration  12: 178735.457 ops/s
# Warmup Iteration  13: 178211.252 ops/s
# Warmup Iteration  14: 174534.866 ops/s
# Warmup Iteration  15: 181434.925 ops/s
# Warmup Iteration  16: 184464.936 ops/s
# Warmup Iteration  17: 179908.281 ops/s
# Warmup Iteration  18: 181661.207 ops/s
# Warmup Iteration  19: 187588.539 ops/s
# Warmup Iteration  20: 188249.360 ops/s
# Warmup Iteration  21: 194660.422 ops/s
# Warmup Iteration  22: 179566.896 ops/s
# Warmup Iteration  23: 179348.037 ops/s
# Warmup Iteration  24: 179961.450 ops/s
# Warmup Iteration  25: 192530.293 ops/s
# Warmup Iteration  26: 173962.135 ops/s
# Warmup Iteration  27: 194700.573 ops/s
# Warmup Iteration  28: 195880.568 ops/s
# Warmup Iteration  29: 181092.435 ops/s
# Warmup Iteration  30: 196460.409 ops/s
Iteration   1: 182497.543 ops/s
Iteration   2: 190696.491 ops/s
Iteration   3: 180757.976 ops/s
Iteration   4: 189347.990 ops/s
Iteration   5: 190516.274 ops/s
Iteration   6: 189169.686 ops/s
Iteration   7: 184176.593 ops/s
Iteration   8: 183391.088 ops/s
Iteration   9: 192721.014 ops/s
Iteration  10: 183988.513 ops/s
Iteration  11: 190939.904 ops/s
Iteration  12: 182828.975 ops/s
Iteration  13: 193401.204 ops/s
Iteration  14: 185711.762 ops/s
Iteration  15: 183494.565 ops/s
Iteration  16: 191582.762 ops/s
Iteration  17: 179609.934 ops/s
Iteration  18: 194215.554 ops/s
Iteration  19: 183097.193 ops/s
Iteration  20: 187154.683 ops/s
Iteration  21: 190581.195 ops/s
Iteration  22: 185191.955 ops/s
Iteration  23: 190012.654 ops/s
Iteration  24: 181483.266 ops/s
Iteration  25: 189011.333 ops/s
Iteration  26: 181345.752 ops/s
Iteration  27: 189525.858 ops/s
Iteration  28: 186162.698 ops/s
Iteration  29: 178229.387 ops/s
Iteration  30: 191770.278 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorCompleteTest._Benchmark.benchmark_errorPredicateCrash":
  186753.803 ±(99.9%) 3002.330 ops/s [Average]
  (min, avg, max) = (178229.387, 186753.803, 194215.554), stdev = 4493.747
  CI (99.9%): [183751.472, 189756.133] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score      Error  Units
FlowableOnErrorCompleteTest._Benchmark.benchmark_errorPredicateCrash  thrpt   30  186753.803 ± 3002.330  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableUsingTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableUsingTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 100192.555 ops/s
# Warmup Iteration   2: 441627.367 ops/s
# Warmup Iteration   3: 490310.405 ops/s
# Warmup Iteration   4: 510388.187 ops/s
# Warmup Iteration   5: 539973.733 ops/s
# Warmup Iteration   6: 491464.968 ops/s
# Warmup Iteration   7: 531703.783 ops/s
# Warmup Iteration   8: 490478.887 ops/s
# Warmup Iteration   9: 496389.060 ops/s
# Warmup Iteration  10: 518988.323 ops/s
# Warmup Iteration  11: 507919.870 ops/s
# Warmup Iteration  12: 492012.498 ops/s
# Warmup Iteration  13: 535219.769 ops/s
# Warmup Iteration  14: 525791.150 ops/s
# Warmup Iteration  15: 532155.605 ops/s
# Warmup Iteration  16: 507390.312 ops/s
# Warmup Iteration  17: 550182.995 ops/s
# Warmup Iteration  18: 543879.230 ops/s
# Warmup Iteration  19: 556141.953 ops/s
# Warmup Iteration  20: 527284.173 ops/s
# Warmup Iteration  21: 559470.695 ops/s
# Warmup Iteration  22: 532194.182 ops/s
# Warmup Iteration  23: 565465.426 ops/s
# Warmup Iteration  24: 440413.522 ops/s
# Warmup Iteration  25: 536573.142 ops/s
# Warmup Iteration  26: 528825.214 ops/s
# Warmup Iteration  27: 551414.663 ops/s
# Warmup Iteration  28: 516638.961 ops/s
# Warmup Iteration  29: 554165.868 ops/s
# Warmup Iteration  30: 519718.392 ops/s
Iteration   1: 550621.549 ops/s
Iteration   2: 531128.078 ops/s
Iteration   3: 541189.725 ops/s
Iteration   4: 546888.362 ops/s
Iteration   5: 544553.873 ops/s
Iteration   6: 556562.343 ops/s
Iteration   7: 515317.090 ops/s
Iteration   8: 552576.448 ops/s
Iteration   9: 532749.508 ops/s
Iteration  10: 555776.962 ops/s
Iteration  11: 526844.794 ops/s
Iteration  12: 536315.098 ops/s
Iteration  13: 554329.837 ops/s
Iteration  14: 540838.029 ops/s
Iteration  15: 551546.185 ops/s
Iteration  16: 545218.516 ops/s
Iteration  17: 538978.024 ops/s
Iteration  18: 552221.604 ops/s
Iteration  19: 529363.664 ops/s
Iteration  20: 539958.079 ops/s
Iteration  21: 535919.778 ops/s
Iteration  22: 530434.653 ops/s
Iteration  23: 537903.437 ops/s
Iteration  24: 523223.427 ops/s
Iteration  25: 544753.926 ops/s
Iteration  26: 519950.125 ops/s
Iteration  27: 530978.209 ops/s
Iteration  28: 536025.772 ops/s
Iteration  29: 558890.368 ops/s
Iteration  30: 542771.840 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableUsingTest._Benchmark.benchmark_doubleOnSubscribe":
  540127.643 ±(99.9%) 7547.558 ops/s [Average]
  (min, avg, max) = (515317.090, 540127.643, 558890.368), stdev = 11296.830
  CI (99.9%): [532580.086, 547675.201] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score      Error  Units
FlowableUsingTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  540127.643 ± 7547.558  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleZipArrayTest._Benchmark.benchmark_zipArrayOneIsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleZipArrayTest._Benchmark.benchmark_zipArrayOneIsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 351097.301 ops/s
# Warmup Iteration   2: 544065.698 ops/s
# Warmup Iteration   3: 629870.632 ops/s
# Warmup Iteration   4: 635066.676 ops/s
# Warmup Iteration   5: 655697.110 ops/s
# Warmup Iteration   6: 630301.124 ops/s
# Warmup Iteration   7: 586467.414 ops/s
# Warmup Iteration   8: 645575.868 ops/s
# Warmup Iteration   9: 640349.856 ops/s
# Warmup Iteration  10: 642660.882 ops/s
# Warmup Iteration  11: 627592.323 ops/s
# Warmup Iteration  12: 658082.088 ops/s
# Warmup Iteration  13: 622890.304 ops/s
# Warmup Iteration  14: 644220.547 ops/s
# Warmup Iteration  15: 656170.748 ops/s
# Warmup Iteration  16: 640619.173 ops/s
# Warmup Iteration  17: 652524.673 ops/s
# Warmup Iteration  18: 660712.259 ops/s
# Warmup Iteration  19: 677426.227 ops/s
# Warmup Iteration  20: 691923.123 ops/s
# Warmup Iteration  21: 645472.918 ops/s
# Warmup Iteration  22: 663210.297 ops/s
# Warmup Iteration  23: 688794.467 ops/s
# Warmup Iteration  24: 630817.860 ops/s
# Warmup Iteration  25: 663001.986 ops/s
# Warmup Iteration  26: 664870.166 ops/s
# Warmup Iteration  27: 669681.460 ops/s
# Warmup Iteration  28: 665374.774 ops/s
# Warmup Iteration  29: 684418.654 ops/s
# Warmup Iteration  30: 672256.914 ops/s
Iteration   1: 675730.538 ops/s
Iteration   2: 701235.365 ops/s
Iteration   3: 660696.252 ops/s
Iteration   4: 668815.749 ops/s
Iteration   5: 683661.628 ops/s
Iteration   6: 664575.010 ops/s
Iteration   7: 686746.673 ops/s
Iteration   8: 658764.047 ops/s
Iteration   9: 679477.472 ops/s
Iteration  10: 663885.564 ops/s
Iteration  11: 673392.725 ops/s
Iteration  12: 689641.044 ops/s
Iteration  13: 652683.515 ops/s
Iteration  14: 673001.868 ops/s
Iteration  15: 655303.353 ops/s
Iteration  16: 680718.980 ops/s
Iteration  17: 665095.972 ops/s
Iteration  18: 668863.728 ops/s
Iteration  19: 675094.088 ops/s
Iteration  20: 679953.632 ops/s
Iteration  21: 680499.003 ops/s
Iteration  22: 653164.900 ops/s
Iteration  23: 712512.508 ops/s
Iteration  24: 677959.936 ops/s
Iteration  25: 658099.429 ops/s
Iteration  26: 672080.966 ops/s
Iteration  27: 685341.702 ops/s
Iteration  28: 657037.502 ops/s
Iteration  29: 688784.162 ops/s
Iteration  30: 654341.413 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleZipArrayTest._Benchmark.benchmark_zipArrayOneIsNull":
  673238.624 ±(99.9%) 9714.317 ops/s [Average]
  (min, avg, max) = (652683.515, 673238.624, 712512.508), stdev = 14539.933
  CI (99.9%): [663524.308, 682952.941] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
SingleZipArrayTest._Benchmark.benchmark_zipArrayOneIsNull  thrpt   30  673238.624 ± 9714.317  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.SingleMapOptionalTest._Benchmark.benchmark_successEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.SingleMapOptionalTest._Benchmark.benchmark_successEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1888612.200 ops/s
# Warmup Iteration   2: 5650714.778 ops/s
# Warmup Iteration   3: 8362185.206 ops/s
# Warmup Iteration   4: 8643703.799 ops/s
# Warmup Iteration   5: 8808604.005 ops/s
# Warmup Iteration   6: 8338502.610 ops/s
# Warmup Iteration   7: 8887969.330 ops/s
# Warmup Iteration   8: 8122100.977 ops/s
# Warmup Iteration   9: 8639642.106 ops/s
# Warmup Iteration  10: 8964563.191 ops/s
# Warmup Iteration  11: 8202402.165 ops/s
# Warmup Iteration  12: 8620914.520 ops/s
# Warmup Iteration  13: 8582285.629 ops/s
# Warmup Iteration  14: 8675756.359 ops/s
# Warmup Iteration  15: 8849866.300 ops/s
# Warmup Iteration  16: 8373592.002 ops/s
# Warmup Iteration  17: 8498118.546 ops/s
# Warmup Iteration  18: 8431570.422 ops/s
# Warmup Iteration  19: 7027322.556 ops/s
# Warmup Iteration  20: 8660668.430 ops/s
# Warmup Iteration  21: 8492542.272 ops/s
# Warmup Iteration  22: 8767704.130 ops/s
# Warmup Iteration  23: 8497885.018 ops/s
# Warmup Iteration  24: 8504555.817 ops/s
# Warmup Iteration  25: 8607107.586 ops/s
# Warmup Iteration  26: 8387165.123 ops/s
# Warmup Iteration  27: 8581260.422 ops/s
# Warmup Iteration  28: 8260170.654 ops/s
# Warmup Iteration  29: 8677984.713 ops/s
# Warmup Iteration  30: 8607733.594 ops/s
Iteration   1: 8431728.137 ops/s
Iteration   2: 8524496.167 ops/s
Iteration   3: 8678245.916 ops/s
Iteration   4: 8649260.944 ops/s
Iteration   5: 8909224.990 ops/s
Iteration   6: 8433749.263 ops/s
Iteration   7: 8399390.537 ops/s
Iteration   8: 8923784.635 ops/s
Iteration   9: 8474573.518 ops/s
Iteration  10: 8857528.455 ops/s
Iteration  11: 8507313.106 ops/s
Iteration  12: 8605710.403 ops/s
Iteration  13: 8798605.201 ops/s
Iteration  14: 8711517.587 ops/s
Iteration  15: 8503316.441 ops/s
Iteration  16: 8628879.090 ops/s
Iteration  17: 8730153.377 ops/s
Iteration  18: 8632381.305 ops/s
Iteration  19: 8533497.261 ops/s
Iteration  20: 8775690.214 ops/s
Iteration  21: 8538668.554 ops/s
Iteration  22: 8913444.785 ops/s
Iteration  23: 8374743.689 ops/s
Iteration  24: 8570808.248 ops/s
Iteration  25: 8966212.508 ops/s
Iteration  26: 8577408.397 ops/s
Iteration  27: 8917939.280 ops/s
Iteration  28: 8355046.150 ops/s
Iteration  29: 8895083.150 ops/s
Iteration  30: 8576935.082 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.SingleMapOptionalTest._Benchmark.benchmark_successEmpty":
  8646511.213 ±(99.9%) 123377.481 ops/s [Average]
  (min, avg, max) = (8355046.150, 8646511.213, 8966212.508), stdev = 184665.619
  CI (99.9%): [8523133.732, 8769888.694] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score        Error  Units
SingleMapOptionalTest._Benchmark.benchmark_successEmpty  thrpt   30  8646511.213 ± 123377.481  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_reduceWithSeedReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_reduceWithSeedReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 371937.969 ops/s
# Warmup Iteration   2: 633664.690 ops/s
# Warmup Iteration   3: 660096.775 ops/s
# Warmup Iteration   4: 674661.036 ops/s
# Warmup Iteration   5: 717740.389 ops/s
# Warmup Iteration   6: 691315.151 ops/s
# Warmup Iteration   7: 684913.593 ops/s
# Warmup Iteration   8: 738810.524 ops/s
# Warmup Iteration   9: 661513.213 ops/s
# Warmup Iteration  10: 675869.708 ops/s
# Warmup Iteration  11: 711621.038 ops/s
# Warmup Iteration  12: 682544.339 ops/s
# Warmup Iteration  13: 735936.654 ops/s
# Warmup Iteration  14: 679431.840 ops/s
# Warmup Iteration  15: 672810.058 ops/s
# Warmup Iteration  16: 718330.540 ops/s
# Warmup Iteration  17: 733056.636 ops/s
# Warmup Iteration  18: 702970.357 ops/s
# Warmup Iteration  19: 753822.705 ops/s
# Warmup Iteration  20: 711093.351 ops/s
# Warmup Iteration  21: 745526.288 ops/s
# Warmup Iteration  22: 746772.456 ops/s
# Warmup Iteration  23: 689818.138 ops/s
# Warmup Iteration  24: 721075.853 ops/s
# Warmup Iteration  25: 702735.084 ops/s
# Warmup Iteration  26: 733148.611 ops/s
# Warmup Iteration  27: 729966.523 ops/s
# Warmup Iteration  28: 720823.936 ops/s
# Warmup Iteration  29: 729292.186 ops/s
# Warmup Iteration  30: 751662.139 ops/s
Iteration   1: 725954.617 ops/s
Iteration   2: 731429.165 ops/s
Iteration   3: 712598.311 ops/s
Iteration   4: 757311.502 ops/s
Iteration   5: 742680.079 ops/s
Iteration   6: 723363.576 ops/s
Iteration   7: 731678.332 ops/s
Iteration   8: 735745.660 ops/s
Iteration   9: 703416.348 ops/s
Iteration  10: 762382.094 ops/s
Iteration  11: 710298.989 ops/s
Iteration  12: 770858.355 ops/s
Iteration  13: 701186.310 ops/s
Iteration  14: 715703.376 ops/s
Iteration  15: 748225.107 ops/s
Iteration  16: 728305.781 ops/s
Iteration  17: 736109.895 ops/s
Iteration  18: 730771.027 ops/s
Iteration  19: 721689.446 ops/s
Iteration  20: 755651.220 ops/s
Iteration  21: 723681.416 ops/s
Iteration  22: 749725.641 ops/s
Iteration  23: 706798.486 ops/s
Iteration  24: 752001.005 ops/s
Iteration  25: 711284.634 ops/s
Iteration  26: 742803.674 ops/s
Iteration  27: 733789.884 ops/s
Iteration  28: 731340.815 ops/s
Iteration  29: 752679.451 ops/s
Iteration  30: 723045.025 ops/s


Result "io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_reduceWithSeedReturnsNull":
  732416.974 ±(99.9%) 12171.361 ops/s [Average]
  (min, avg, max) = (701186.310, 732416.974, 770858.355), stdev = 18217.522
  CI (99.9%): [720245.613, 744588.335] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score       Error  Units
ObservableNullTests._Benchmark.benchmark_reduceWithSeedReturnsNull  thrpt   30  732416.974 ± 12171.361  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_collectInitialSupplierReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_collectInitialSupplierReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 276426.816 ops/s
# Warmup Iteration   2: 661929.742 ops/s
# Warmup Iteration   3: 602906.818 ops/s
# Warmup Iteration   4: 613745.821 ops/s
# Warmup Iteration   5: 706667.510 ops/s
# Warmup Iteration   6: 678857.272 ops/s
# Warmup Iteration   7: 703068.874 ops/s
# Warmup Iteration   8: 687308.345 ops/s
# Warmup Iteration   9: 661284.631 ops/s
# Warmup Iteration  10: 714671.115 ops/s
# Warmup Iteration  11: 695991.530 ops/s
# Warmup Iteration  12: 687881.047 ops/s
# Warmup Iteration  13: 654361.833 ops/s
# Warmup Iteration  14: 540560.787 ops/s
# Warmup Iteration  15: 695758.414 ops/s
# Warmup Iteration  16: 684176.799 ops/s
# Warmup Iteration  17: 737932.891 ops/s
# Warmup Iteration  18: 733978.569 ops/s
# Warmup Iteration  19: 735090.535 ops/s
# Warmup Iteration  20: 729902.156 ops/s
# Warmup Iteration  21: 712619.218 ops/s
# Warmup Iteration  22: 746790.982 ops/s
# Warmup Iteration  23: 729205.025 ops/s
# Warmup Iteration  24: 717658.200 ops/s
# Warmup Iteration  25: 740587.015 ops/s
# Warmup Iteration  26: 732389.062 ops/s
# Warmup Iteration  27: 736120.272 ops/s
# Warmup Iteration  28: 724497.369 ops/s
# Warmup Iteration  29: 736059.569 ops/s
# Warmup Iteration  30: 716557.986 ops/s
Iteration   1: 747033.749 ops/s
Iteration   2: 753492.875 ops/s
Iteration   3: 696771.210 ops/s
Iteration   4: 742385.167 ops/s
Iteration   5: 728964.373 ops/s
Iteration   6: 740251.530 ops/s
Iteration   7: 703421.994 ops/s
Iteration   8: 730621.674 ops/s
Iteration   9: 753587.749 ops/s
Iteration  10: 715947.954 ops/s
Iteration  11: 734894.793 ops/s
Iteration  12: 726972.464 ops/s
Iteration  13: 715245.488 ops/s
Iteration  14: 750836.407 ops/s
Iteration  15: 715016.197 ops/s
Iteration  16: 708803.962 ops/s
Iteration  17: 752849.900 ops/s
Iteration  18: 726243.106 ops/s
Iteration  19: 752697.621 ops/s
Iteration  20: 706977.597 ops/s
Iteration  21: 735231.210 ops/s
Iteration  22: 729709.263 ops/s
Iteration  23: 729363.480 ops/s
Iteration  24: 744989.480 ops/s
Iteration  25: 721805.595 ops/s
Iteration  26: 750199.027 ops/s
Iteration  27: 745842.557 ops/s
Iteration  28: 725596.439 ops/s
Iteration  29: 733735.686 ops/s
Iteration  30: 722346.615 ops/s


Result "io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_collectInitialSupplierReturnsNull":
  731394.505 ±(99.9%) 10829.186 ops/s [Average]
  (min, avg, max) = (696771.210, 731394.505, 753587.749), stdev = 16208.617
  CI (99.9%): [720565.319, 742223.691] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score       Error  Units
ObservableNullTests._Benchmark.benchmark_collectInitialSupplierReturnsNull  thrpt   30  731394.505 ± 10829.186  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_toListSupplierReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_toListSupplierReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 305486.723 ops/s
# Warmup Iteration   2: 556232.277 ops/s
# Warmup Iteration   3: 632805.360 ops/s
# Warmup Iteration   4: 632323.658 ops/s
# Warmup Iteration   5: 634896.945 ops/s
# Warmup Iteration   6: 565934.087 ops/s
# Warmup Iteration   7: 666647.739 ops/s
# Warmup Iteration   8: 655868.382 ops/s
# Warmup Iteration   9: 656423.551 ops/s
# Warmup Iteration  10: 649125.987 ops/s
# Warmup Iteration  11: 644714.730 ops/s
# Warmup Iteration  12: 646884.887 ops/s
# Warmup Iteration  13: 679571.852 ops/s
# Warmup Iteration  14: 646036.745 ops/s
# Warmup Iteration  15: 669775.408 ops/s
# Warmup Iteration  16: 653783.971 ops/s
# Warmup Iteration  17: 683679.811 ops/s
# Warmup Iteration  18: 689546.064 ops/s
# Warmup Iteration  19: 674096.865 ops/s
# Warmup Iteration  20: 684847.857 ops/s
# Warmup Iteration  21: 682740.326 ops/s
# Warmup Iteration  22: 700013.728 ops/s
# Warmup Iteration  23: 657534.495 ops/s
# Warmup Iteration  24: 714669.563 ops/s
# Warmup Iteration  25: 680602.554 ops/s
# Warmup Iteration  26: 666042.263 ops/s
# Warmup Iteration  27: 686667.082 ops/s
# Warmup Iteration  28: 688438.827 ops/s
# Warmup Iteration  29: 687064.630 ops/s
# Warmup Iteration  30: 668003.863 ops/s
Iteration   1: 692320.518 ops/s
Iteration   2: 682561.708 ops/s
Iteration   3: 660499.877 ops/s
Iteration   4: 698023.932 ops/s
Iteration   5: 654710.685 ops/s
Iteration   6: 702258.550 ops/s
Iteration   7: 685335.691 ops/s
Iteration   8: 677270.207 ops/s
Iteration   9: 706517.189 ops/s
Iteration  10: 666482.681 ops/s
Iteration  11: 716926.425 ops/s
Iteration  12: 675805.689 ops/s
Iteration  13: 689671.439 ops/s
Iteration  14: 665409.417 ops/s
Iteration  15: 681749.181 ops/s
Iteration  16: 704595.305 ops/s
Iteration  17: 658821.818 ops/s
Iteration  18: 679924.750 ops/s
Iteration  19: 713080.048 ops/s
Iteration  20: 684748.668 ops/s
Iteration  21: 673409.548 ops/s
Iteration  22: 692575.325 ops/s
Iteration  23: 687555.266 ops/s
Iteration  24: 692554.648 ops/s
Iteration  25: 678828.874 ops/s
Iteration  26: 710583.803 ops/s
Iteration  27: 665047.028 ops/s
Iteration  28: 680531.905 ops/s
Iteration  29: 671866.532 ops/s
Iteration  30: 695252.359 ops/s


Result "io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_toListSupplierReturnsNull":
  684830.636 ±(99.9%) 11066.761 ops/s [Average]
  (min, avg, max) = (654710.685, 684830.636, 716926.425), stdev = 16564.208
  CI (99.9%): [673763.874, 695897.397] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score       Error  Units
ObservableNullTests._Benchmark.benchmark_toListSupplierReturnsNull  thrpt   30  684830.636 ± 11066.761  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleOnErrorCompleteTest._Benchmark.benchmark_normal$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleOnErrorCompleteTest._Benchmark.benchmark_normal

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2091953.294 ops/s
# Warmup Iteration   2: 5379108.064 ops/s
# Warmup Iteration   3: 8077999.399 ops/s
# Warmup Iteration   4: 7535154.330 ops/s
# Warmup Iteration   5: 8175212.564 ops/s
# Warmup Iteration   6: 7795089.045 ops/s
# Warmup Iteration   7: 7985256.518 ops/s
# Warmup Iteration   8: 7813057.122 ops/s
# Warmup Iteration   9: 6555378.490 ops/s
# Warmup Iteration  10: 8177233.698 ops/s
# Warmup Iteration  11: 7780477.795 ops/s
# Warmup Iteration  12: 7852625.528 ops/s
# Warmup Iteration  13: 7972631.581 ops/s
# Warmup Iteration  14: 7999499.908 ops/s
# Warmup Iteration  15: 8119577.844 ops/s
# Warmup Iteration  16: 7754650.072 ops/s
# Warmup Iteration  17: 8055630.838 ops/s
# Warmup Iteration  18: 8022437.972 ops/s
# Warmup Iteration  19: 7937035.727 ops/s
# Warmup Iteration  20: 8086760.151 ops/s
# Warmup Iteration  21: 7652057.449 ops/s
# Warmup Iteration  22: 8252820.364 ops/s
# Warmup Iteration  23: 7665461.111 ops/s
# Warmup Iteration  24: 7759706.808 ops/s
# Warmup Iteration  25: 7886751.765 ops/s
# Warmup Iteration  26: 8069735.533 ops/s
# Warmup Iteration  27: 7895487.524 ops/s
# Warmup Iteration  28: 7987723.070 ops/s
# Warmup Iteration  29: 8021770.334 ops/s
# Warmup Iteration  30: 7830752.689 ops/s
Iteration   1: 8056989.120 ops/s
Iteration   2: 8086663.824 ops/s
Iteration   3: 8290967.487 ops/s
Iteration   4: 7987291.573 ops/s
Iteration   5: 7791430.865 ops/s
Iteration   6: 8214685.917 ops/s
Iteration   7: 7566388.840 ops/s
Iteration   8: 8259026.677 ops/s
Iteration   9: 7867685.130 ops/s
Iteration  10: 8138551.968 ops/s
Iteration  11: 7832085.671 ops/s
Iteration  12: 7936661.575 ops/s
Iteration  13: 8345137.178 ops/s
Iteration  14: 7869212.036 ops/s
Iteration  15: 7842418.434 ops/s
Iteration  16: 7897762.359 ops/s
Iteration  17: 8170641.585 ops/s
Iteration  18: 7842183.833 ops/s
Iteration  19: 7856184.338 ops/s
Iteration  20: 7811742.339 ops/s
Iteration  21: 8310988.768 ops/s
Iteration  22: 7802722.623 ops/s
Iteration  23: 8091552.433 ops/s
Iteration  24: 7776225.853 ops/s
Iteration  25: 7969268.069 ops/s
Iteration  26: 8100358.571 ops/s
Iteration  27: 7876223.386 ops/s
Iteration  28: 7992579.929 ops/s
Iteration  29: 7838821.889 ops/s
Iteration  30: 7944238.281 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleOnErrorCompleteTest._Benchmark.benchmark_normal":
  7978889.685 ±(99.9%) 125732.539 ops/s [Average]
  (min, avg, max) = (7566388.840, 7978889.685, 8345137.178), stdev = 188190.560
  CI (99.9%): [7853157.146, 8104622.224] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score        Error  Units
SingleOnErrorCompleteTest._Benchmark.benchmark_normal  thrpt   30  7978889.685 ± 125732.539  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.SingleMapOptionalTest._Benchmark.benchmark_successSuccess$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.SingleMapOptionalTest._Benchmark.benchmark_successSuccess

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1104864.202 ops/s
# Warmup Iteration   2: 4712276.338 ops/s
# Warmup Iteration   3: 6690479.970 ops/s
# Warmup Iteration   4: 6763350.184 ops/s
# Warmup Iteration   5: 7306518.556 ops/s
# Warmup Iteration   6: 6845106.422 ops/s
# Warmup Iteration   7: 7088378.891 ops/s
# Warmup Iteration   8: 7182337.896 ops/s
# Warmup Iteration   9: 7006866.770 ops/s
# Warmup Iteration  10: 7057860.582 ops/s
# Warmup Iteration  11: 6852747.238 ops/s
# Warmup Iteration  12: 7016556.167 ops/s
# Warmup Iteration  13: 7478995.601 ops/s
# Warmup Iteration  14: 6841782.063 ops/s
# Warmup Iteration  15: 7158156.407 ops/s
# Warmup Iteration  16: 7009624.978 ops/s
# Warmup Iteration  17: 7381307.269 ops/s
# Warmup Iteration  18: 7146653.632 ops/s
# Warmup Iteration  19: 7026849.370 ops/s
# Warmup Iteration  20: 7511641.763 ops/s
# Warmup Iteration  21: 6933747.246 ops/s
# Warmup Iteration  22: 7093201.521 ops/s
# Warmup Iteration  23: 6934287.972 ops/s
# Warmup Iteration  24: 7169158.572 ops/s
# Warmup Iteration  25: 7202558.994 ops/s
# Warmup Iteration  26: 6970720.638 ops/s
# Warmup Iteration  27: 7301653.072 ops/s
# Warmup Iteration  28: 7204176.253 ops/s
# Warmup Iteration  29: 7076201.608 ops/s
# Warmup Iteration  30: 7014524.618 ops/s
Iteration   1: 6889070.241 ops/s
Iteration   2: 7294087.040 ops/s
Iteration   3: 6913685.622 ops/s
Iteration   4: 7055556.153 ops/s
Iteration   5: 7170432.923 ops/s
Iteration   6: 7079952.129 ops/s
Iteration   7: 7140892.092 ops/s
Iteration   8: 7221743.982 ops/s
Iteration   9: 6951444.105 ops/s
Iteration  10: 7347693.036 ops/s
Iteration  11: 7136736.319 ops/s
Iteration  12: 6999573.703 ops/s
Iteration  13: 7073884.003 ops/s
Iteration  14: 6917027.162 ops/s
Iteration  15: 7310555.850 ops/s
Iteration  16: 6904531.837 ops/s
Iteration  17: 7005083.213 ops/s
Iteration  18: 7137291.903 ops/s
Iteration  19: 7061443.066 ops/s
Iteration  20: 7350959.729 ops/s
Iteration  21: 7191309.178 ops/s
Iteration  22: 7253707.722 ops/s
Iteration  23: 7209629.686 ops/s
Iteration  24: 7028485.378 ops/s
Iteration  25: 6999482.342 ops/s
Iteration  26: 7206310.811 ops/s
Iteration  27: 7127196.068 ops/s
Iteration  28: 7026807.691 ops/s
Iteration  29: 7015587.296 ops/s
Iteration  30: 7078283.847 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.SingleMapOptionalTest._Benchmark.benchmark_successSuccess":
  7103281.471 ±(99.9%) 88687.674 ops/s [Average]
  (min, avg, max) = (6889070.241, 7103281.471, 7350959.729), stdev = 132743.545
  CI (99.9%): [7014593.797, 7191969.145] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
SingleMapOptionalTest._Benchmark.benchmark_successSuccess  thrpt   30  7103281.471 ± 88687.674  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipLastTest._Benchmark.benchmark_skipLastWithNegativeCount$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipLastTest._Benchmark.benchmark_skipLastWithNegativeCount

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 426891.074 ops/s
# Warmup Iteration   2: 603757.973 ops/s
# Warmup Iteration   3: 725040.947 ops/s
# Warmup Iteration   4: 494138.327 ops/s
# Warmup Iteration   5: 739757.040 ops/s
# Warmup Iteration   6: 651403.229 ops/s
# Warmup Iteration   7: 755159.394 ops/s
# Warmup Iteration   8: 737956.963 ops/s
# Warmup Iteration   9: 774166.591 ops/s
# Warmup Iteration  10: 779568.456 ops/s
# Warmup Iteration  11: 709323.759 ops/s
# Warmup Iteration  12: 770766.696 ops/s
# Warmup Iteration  13: 740343.745 ops/s
# Warmup Iteration  14: 765061.338 ops/s
# Warmup Iteration  15: 721353.713 ops/s
# Warmup Iteration  16: 739594.009 ops/s
# Warmup Iteration  17: 819969.704 ops/s
# Warmup Iteration  18: 767022.142 ops/s
# Warmup Iteration  19: 822138.920 ops/s
# Warmup Iteration  20: 783270.752 ops/s
# Warmup Iteration  21: 823616.160 ops/s
# Warmup Iteration  22: 798311.091 ops/s
# Warmup Iteration  23: 796216.268 ops/s
# Warmup Iteration  24: 789104.448 ops/s
# Warmup Iteration  25: 812526.074 ops/s
# Warmup Iteration  26: 770513.022 ops/s
# Warmup Iteration  27: 801173.835 ops/s
# Warmup Iteration  28: 799596.840 ops/s
# Warmup Iteration  29: 796517.852 ops/s
# Warmup Iteration  30: 805328.622 ops/s
Iteration   1: 799057.146 ops/s
Iteration   2: 806883.116 ops/s
Iteration   3: 826684.068 ops/s
Iteration   4: 761212.199 ops/s
Iteration   5: 814180.906 ops/s
Iteration   6: 771970.379 ops/s
Iteration   7: 813683.437 ops/s
Iteration   8: 781072.888 ops/s
Iteration   9: 776013.284 ops/s
Iteration  10: 821651.265 ops/s
Iteration  11: 772492.560 ops/s
Iteration  12: 801108.372 ops/s
Iteration  13: 787016.837 ops/s
Iteration  14: 806611.159 ops/s
Iteration  15: 789988.903 ops/s
Iteration  16: 776872.359 ops/s
Iteration  17: 831781.425 ops/s
Iteration  18: 777555.685 ops/s
Iteration  19: 788761.191 ops/s
Iteration  20: 786487.118 ops/s
Iteration  21: 809595.940 ops/s
Iteration  22: 818974.687 ops/s
Iteration  23: 778563.321 ops/s
Iteration  24: 818592.128 ops/s
Iteration  25: 775508.521 ops/s
Iteration  26: 834998.304 ops/s
Iteration  27: 815523.943 ops/s
Iteration  28: 782162.500 ops/s
Iteration  29: 806995.327 ops/s
Iteration  30: 796545.242 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipLastTest._Benchmark.benchmark_skipLastWithNegativeCount":
  797618.140 ±(99.9%) 13477.543 ops/s [Average]
  (min, avg, max) = (761212.199, 797618.140, 834998.304), stdev = 20172.554
  CI (99.9%): [784140.597, 811095.684] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score       Error  Units
FlowableSkipLastTest._Benchmark.benchmark_skipLastWithNegativeCount  thrpt   30  797618.140 ± 13477.543  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_reduceWithSeedReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_reduceWithSeedReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 357774.183 ops/s
# Warmup Iteration   2: 616697.706 ops/s
# Warmup Iteration   3: 688006.573 ops/s
# Warmup Iteration   4: 672253.033 ops/s
# Warmup Iteration   5: 701933.750 ops/s
# Warmup Iteration   6: 683020.724 ops/s
# Warmup Iteration   7: 700718.487 ops/s
# Warmup Iteration   8: 676417.939 ops/s
# Warmup Iteration   9: 678529.432 ops/s
# Warmup Iteration  10: 701956.678 ops/s
# Warmup Iteration  11: 696707.661 ops/s
# Warmup Iteration  12: 684747.917 ops/s
# Warmup Iteration  13: 714461.022 ops/s
# Warmup Iteration  14: 699807.246 ops/s
# Warmup Iteration  15: 685426.409 ops/s
# Warmup Iteration  16: 718029.971 ops/s
# Warmup Iteration  17: 687734.493 ops/s
# Warmup Iteration  18: 752751.926 ops/s
# Warmup Iteration  19: 780231.923 ops/s
# Warmup Iteration  20: 725680.953 ops/s
# Warmup Iteration  21: 741984.505 ops/s
# Warmup Iteration  22: 742999.646 ops/s
# Warmup Iteration  23: 739681.306 ops/s
# Warmup Iteration  24: 723014.222 ops/s
# Warmup Iteration  25: 746471.342 ops/s
# Warmup Iteration  26: 768044.577 ops/s
# Warmup Iteration  27: 721248.023 ops/s
# Warmup Iteration  28: 735812.626 ops/s
# Warmup Iteration  29: 767934.290 ops/s
# Warmup Iteration  30: 710137.696 ops/s
Iteration   1: 745862.805 ops/s
Iteration   2: 733775.841 ops/s
Iteration   3: 736004.019 ops/s
Iteration   4: 758523.296 ops/s
Iteration   5: 728931.837 ops/s
Iteration   6: 758988.073 ops/s
Iteration   7: 728663.154 ops/s
Iteration   8: 742713.351 ops/s
Iteration   9: 765200.059 ops/s
Iteration  10: 716051.657 ops/s
Iteration  11: 762345.323 ops/s
Iteration  12: 732057.959 ops/s
Iteration  13: 753686.863 ops/s
Iteration  14: 770174.328 ops/s
Iteration  15: 716524.390 ops/s
Iteration  16: 758474.842 ops/s
Iteration  17: 725579.281 ops/s
Iteration  18: 745101.981 ops/s
Iteration  19: 756541.424 ops/s
Iteration  20: 738618.922 ops/s
Iteration  21: 760700.460 ops/s
Iteration  22: 750051.506 ops/s
Iteration  23: 745997.905 ops/s
Iteration  24: 765831.410 ops/s
Iteration  25: 708159.636 ops/s
Iteration  26: 745468.601 ops/s
Iteration  27: 748947.656 ops/s
Iteration  28: 722700.132 ops/s
Iteration  29: 748649.439 ops/s
Iteration  30: 741572.984 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_reduceWithSeedReturnsNull":
  743729.971 ±(99.9%) 10842.489 ops/s [Average]
  (min, avg, max) = (708159.636, 743729.971, 770174.328), stdev = 16228.529
  CI (99.9%): [732887.482, 754572.460] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score       Error  Units
FlowableNullTests._Benchmark.benchmark_reduceWithSeedReturnsNull  thrpt   30  743729.971 ± 10842.489  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_collectInitialSupplierReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_collectInitialSupplierReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 341842.565 ops/s
# Warmup Iteration   2: 630201.319 ops/s
# Warmup Iteration   3: 631359.537 ops/s
# Warmup Iteration   4: 653848.736 ops/s
# Warmup Iteration   5: 695989.795 ops/s
# Warmup Iteration   6: 639158.984 ops/s
# Warmup Iteration   7: 639622.389 ops/s
# Warmup Iteration   8: 704384.888 ops/s
# Warmup Iteration   9: 710644.993 ops/s
# Warmup Iteration  10: 688216.524 ops/s
# Warmup Iteration  11: 712853.163 ops/s
# Warmup Iteration  12: 686826.321 ops/s
# Warmup Iteration  13: 708461.887 ops/s
# Warmup Iteration  14: 715605.338 ops/s
# Warmup Iteration  15: 683106.274 ops/s
# Warmup Iteration  16: 701051.162 ops/s
# Warmup Iteration  17: 727221.225 ops/s
# Warmup Iteration  18: 729001.635 ops/s
# Warmup Iteration  19: 750566.547 ops/s
# Warmup Iteration  20: 740839.733 ops/s
# Warmup Iteration  21: 775304.568 ops/s
# Warmup Iteration  22: 735730.054 ops/s
# Warmup Iteration  23: 731760.040 ops/s
# Warmup Iteration  24: 762404.158 ops/s
# Warmup Iteration  25: 721716.228 ops/s
# Warmup Iteration  26: 764247.861 ops/s
# Warmup Iteration  27: 710082.837 ops/s
# Warmup Iteration  28: 743210.128 ops/s
# Warmup Iteration  29: 760924.108 ops/s
# Warmup Iteration  30: 724716.093 ops/s
Iteration   1: 751240.492 ops/s
Iteration   2: 751611.704 ops/s
Iteration   3: 735652.340 ops/s
Iteration   4: 730411.129 ops/s
Iteration   5: 761831.467 ops/s
Iteration   6: 731426.163 ops/s
Iteration   7: 755321.239 ops/s
Iteration   8: 742014.981 ops/s
Iteration   9: 733809.855 ops/s
Iteration  10: 774807.182 ops/s
Iteration  11: 711644.923 ops/s
Iteration  12: 757050.685 ops/s
Iteration  13: 729782.882 ops/s
Iteration  14: 749840.907 ops/s
Iteration  15: 727931.383 ops/s
Iteration  16: 740039.266 ops/s
Iteration  17: 752634.368 ops/s
Iteration  18: 726930.950 ops/s
Iteration  19: 761456.847 ops/s
Iteration  20: 724627.621 ops/s
Iteration  21: 731978.972 ops/s
Iteration  22: 741513.410 ops/s
Iteration  23: 755404.684 ops/s
Iteration  24: 743583.868 ops/s
Iteration  25: 719202.787 ops/s
Iteration  26: 763095.653 ops/s
Iteration  27: 725551.681 ops/s
Iteration  28: 757335.414 ops/s
Iteration  29: 735680.131 ops/s
Iteration  30: 712586.498 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_collectInitialSupplierReturnsNull":
  741199.983 ±(99.9%) 10671.438 ops/s [Average]
  (min, avg, max) = (711644.923, 741199.983, 774807.182), stdev = 15972.507
  CI (99.9%): [730528.545, 751871.421] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score       Error  Units
FlowableNullTests._Benchmark.benchmark_collectInitialSupplierReturnsNull  thrpt   30  741199.983 ± 10671.438  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_toListSupplierReturnsNullSingle$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_toListSupplierReturnsNullSingle

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 202662.498 ops/s
# Warmup Iteration   2: 555541.787 ops/s
# Warmup Iteration   3: 672386.142 ops/s
# Warmup Iteration   4: 625995.107 ops/s
# Warmup Iteration   5: 687050.398 ops/s
# Warmup Iteration   6: 633953.313 ops/s
# Warmup Iteration   7: 644039.812 ops/s
# Warmup Iteration   8: 657394.576 ops/s
# Warmup Iteration   9: 650449.290 ops/s
# Warmup Iteration  10: 656061.336 ops/s
# Warmup Iteration  11: 608186.092 ops/s
# Warmup Iteration  12: 636681.147 ops/s
# Warmup Iteration  13: 656779.289 ops/s
# Warmup Iteration  14: 656860.668 ops/s
# Warmup Iteration  15: 683580.865 ops/s
# Warmup Iteration  16: 644715.891 ops/s
# Warmup Iteration  17: 703999.454 ops/s
# Warmup Iteration  18: 702860.696 ops/s
# Warmup Iteration  19: 697661.911 ops/s
# Warmup Iteration  20: 697399.528 ops/s
# Warmup Iteration  21: 703513.404 ops/s
# Warmup Iteration  22: 692352.968 ops/s
# Warmup Iteration  23: 691874.775 ops/s
# Warmup Iteration  24: 693695.857 ops/s
# Warmup Iteration  25: 723419.735 ops/s
# Warmup Iteration  26: 670231.844 ops/s
# Warmup Iteration  27: 711839.707 ops/s
# Warmup Iteration  28: 713246.704 ops/s
# Warmup Iteration  29: 692924.365 ops/s
# Warmup Iteration  30: 714279.933 ops/s
Iteration   1: 682825.417 ops/s
Iteration   2: 683130.551 ops/s
Iteration   3: 713739.873 ops/s
Iteration   4: 685258.948 ops/s
Iteration   5: 714240.722 ops/s
Iteration   6: 680450.352 ops/s
Iteration   7: 713582.820 ops/s
Iteration   8: 701301.536 ops/s
Iteration   9: 711179.074 ops/s
Iteration  10: 674679.063 ops/s
Iteration  11: 715835.619 ops/s
Iteration  12: 709944.665 ops/s
Iteration  13: 684888.494 ops/s
Iteration  14: 683426.035 ops/s
Iteration  15: 725829.381 ops/s
Iteration  16: 678874.362 ops/s
Iteration  17: 698322.552 ops/s
Iteration  18: 707017.435 ops/s
Iteration  19: 699939.850 ops/s
Iteration  20: 720119.157 ops/s
Iteration  21: 689750.460 ops/s
Iteration  22: 700001.623 ops/s
Iteration  23: 711447.277 ops/s
Iteration  24: 697830.754 ops/s
Iteration  25: 527355.596 ops/s
Iteration  26: 694219.013 ops/s
Iteration  27: 704152.173 ops/s
Iteration  28: 690480.616 ops/s
Iteration  29: 726630.728 ops/s
Iteration  30: 694348.733 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_toListSupplierReturnsNullSingle":
  694026.763 ±(99.9%) 23145.721 ops/s [Average]
  (min, avg, max) = (527355.596, 694026.763, 726630.728), stdev = 34643.428
  CI (99.9%): [670881.042, 717172.483] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score       Error  Units
FlowableNullTests._Benchmark.benchmark_toListSupplierReturnsNullSingle  thrpt   30  694026.763 ± 23145.721  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_toMapMapSupplierReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_toMapMapSupplierReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 235364.300 ops/s
# Warmup Iteration   2: 620112.103 ops/s
# Warmup Iteration   3: 658764.671 ops/s
# Warmup Iteration   4: 607650.466 ops/s
# Warmup Iteration   5: 717928.025 ops/s
# Warmup Iteration   6: 602446.011 ops/s
# Warmup Iteration   7: 675352.678 ops/s
# Warmup Iteration   8: 698529.574 ops/s
# Warmup Iteration   9: 689520.106 ops/s
# Warmup Iteration  10: 705613.161 ops/s
# Warmup Iteration  11: 683036.262 ops/s
# Warmup Iteration  12: 708777.549 ops/s
# Warmup Iteration  13: 693552.365 ops/s
# Warmup Iteration  14: 695243.874 ops/s
# Warmup Iteration  15: 687109.875 ops/s
# Warmup Iteration  16: 694511.831 ops/s
# Warmup Iteration  17: 748842.122 ops/s
# Warmup Iteration  18: 727936.667 ops/s
# Warmup Iteration  19: 758676.338 ops/s
# Warmup Iteration  20: 705783.978 ops/s
# Warmup Iteration  21: 757143.410 ops/s
# Warmup Iteration  22: 727481.448 ops/s
# Warmup Iteration  23: 723755.374 ops/s
# Warmup Iteration  24: 722570.057 ops/s
# Warmup Iteration  25: 706527.602 ops/s
# Warmup Iteration  26: 747302.921 ops/s
# Warmup Iteration  27: 748791.302 ops/s
# Warmup Iteration  28: 717780.031 ops/s
# Warmup Iteration  29: 724900.601 ops/s
# Warmup Iteration  30: 724011.013 ops/s
Iteration   1: 743563.094 ops/s
Iteration   2: 756532.466 ops/s
Iteration   3: 706435.866 ops/s
Iteration   4: 751515.134 ops/s
Iteration   5: 704361.579 ops/s
Iteration   6: 704966.218 ops/s
Iteration   7: 749904.164 ops/s
Iteration   8: 721790.361 ops/s
Iteration   9: 711676.856 ops/s
Iteration  10: 742060.157 ops/s
Iteration  11: 717681.621 ops/s
Iteration  12: 763603.432 ops/s
Iteration  13: 694564.731 ops/s
Iteration  14: 735148.709 ops/s
Iteration  15: 738654.597 ops/s
Iteration  16: 716599.502 ops/s
Iteration  17: 762225.313 ops/s
Iteration  18: 689501.324 ops/s
Iteration  19: 750223.153 ops/s
Iteration  20: 753822.080 ops/s
Iteration  21: 703650.502 ops/s
Iteration  22: 724199.092 ops/s
Iteration  23: 721060.080 ops/s
Iteration  24: 721714.424 ops/s
Iteration  25: 725489.874 ops/s
Iteration  26: 746911.891 ops/s
Iteration  27: 714699.748 ops/s
Iteration  28: 738871.898 ops/s
Iteration  29: 705718.966 ops/s
Iteration  30: 722448.214 ops/s


Result "io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_toMapMapSupplierReturnsNull":
  727986.502 ±(99.9%) 13941.881 ops/s [Average]
  (min, avg, max) = (689501.324, 727986.502, 763603.432), stdev = 20867.552
  CI (99.9%): [714044.621, 741928.382] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score       Error  Units
ObservableNullTests._Benchmark.benchmark_toMapMapSupplierReturnsNull  thrpt   30  727986.502 ± 13941.881  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_toMultimapMapSupplierReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_toMultimapMapSupplierReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 306760.995 ops/s
# Warmup Iteration   2: 599480.831 ops/s
# Warmup Iteration   3: 611207.228 ops/s
# Warmup Iteration   4: 618049.866 ops/s
# Warmup Iteration   5: 690063.366 ops/s
# Warmup Iteration   6: 571268.059 ops/s
# Warmup Iteration   7: 671200.801 ops/s
# Warmup Iteration   8: 669080.665 ops/s
# Warmup Iteration   9: 671100.513 ops/s
# Warmup Iteration  10: 688996.746 ops/s
# Warmup Iteration  11: 671707.847 ops/s
# Warmup Iteration  12: 696785.282 ops/s
# Warmup Iteration  13: 660372.778 ops/s
# Warmup Iteration  14: 699156.306 ops/s
# Warmup Iteration  15: 664723.033 ops/s
# Warmup Iteration  16: 703753.177 ops/s
# Warmup Iteration  17: 735150.643 ops/s
# Warmup Iteration  18: 710786.892 ops/s
# Warmup Iteration  19: 735271.576 ops/s
# Warmup Iteration  20: 707266.574 ops/s
# Warmup Iteration  21: 740762.053 ops/s
# Warmup Iteration  22: 707097.217 ops/s
# Warmup Iteration  23: 740536.039 ops/s
# Warmup Iteration  24: 709824.420 ops/s
# Warmup Iteration  25: 705122.652 ops/s
# Warmup Iteration  26: 742677.407 ops/s
# Warmup Iteration  27: 718633.511 ops/s
# Warmup Iteration  28: 724144.309 ops/s
# Warmup Iteration  29: 697617.582 ops/s
# Warmup Iteration  30: 737045.625 ops/s
Iteration   1: 696503.506 ops/s
Iteration   2: 723334.306 ops/s
Iteration   3: 719362.822 ops/s
Iteration   4: 713297.304 ops/s
Iteration   5: 695130.319 ops/s
Iteration   6: 700765.593 ops/s
Iteration   7: 720518.207 ops/s
Iteration   8: 709804.039 ops/s
Iteration   9: 727037.058 ops/s
Iteration  10: 699955.265 ops/s
Iteration  11: 737876.555 ops/s
Iteration  12: 710646.463 ops/s
Iteration  13: 746575.346 ops/s
Iteration  14: 707592.893 ops/s
Iteration  15: 738776.795 ops/s
Iteration  16: 735350.623 ops/s
Iteration  17: 688285.672 ops/s
Iteration  18: 727785.124 ops/s
Iteration  19: 721167.824 ops/s
Iteration  20: 513085.528 ops/s
Iteration  21: 728961.574 ops/s
Iteration  22: 695017.980 ops/s
Iteration  23: 760064.885 ops/s
Iteration  24: 705625.051 ops/s
Iteration  25: 713741.724 ops/s
Iteration  26: 715148.659 ops/s
Iteration  27: 718983.869 ops/s
Iteration  28: 742206.483 ops/s
Iteration  29: 715594.119 ops/s
Iteration  30: 721807.767 ops/s


Result "io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_toMultimapMapSupplierReturnsNull":
  711666.778 ±(99.9%) 27435.545 ops/s [Average]
  (min, avg, max) = (513085.528, 711666.778, 760064.885), stdev = 41064.235
  CI (99.9%): [684231.234, 739102.323] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score       Error  Units
ObservableNullTests._Benchmark.benchmark_toMultimapMapSupplierReturnsNull  thrpt   30  711666.778 ± 27435.545  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_toMapMapSupplierReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_toMapMapSupplierReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 332202.226 ops/s
# Warmup Iteration   2: 598478.953 ops/s
# Warmup Iteration   3: 670185.969 ops/s
# Warmup Iteration   4: 641355.745 ops/s
# Warmup Iteration   5: 728679.406 ops/s
# Warmup Iteration   6: 587605.455 ops/s
# Warmup Iteration   7: 736493.733 ops/s
# Warmup Iteration   8: 695756.793 ops/s
# Warmup Iteration   9: 716852.412 ops/s
# Warmup Iteration  10: 728649.719 ops/s
# Warmup Iteration  11: 730035.500 ops/s
# Warmup Iteration  12: 678818.704 ops/s
# Warmup Iteration  13: 748487.925 ops/s
# Warmup Iteration  14: 687605.327 ops/s
# Warmup Iteration  15: 737868.555 ops/s
# Warmup Iteration  16: 708853.721 ops/s
# Warmup Iteration  17: 757720.569 ops/s
# Warmup Iteration  18: 767199.693 ops/s
# Warmup Iteration  19: 755006.401 ops/s
# Warmup Iteration  20: 771048.014 ops/s
# Warmup Iteration  21: 735303.010 ops/s
# Warmup Iteration  22: 746364.404 ops/s
# Warmup Iteration  23: 749451.770 ops/s
# Warmup Iteration  24: 759228.629 ops/s
# Warmup Iteration  25: 751099.458 ops/s
# Warmup Iteration  26: 742324.292 ops/s
# Warmup Iteration  27: 746508.869 ops/s
# Warmup Iteration  28: 765006.335 ops/s
# Warmup Iteration  29: 750833.948 ops/s
# Warmup Iteration  30: 746326.448 ops/s
Iteration   1: 776315.758 ops/s
Iteration   2: 784315.200 ops/s
Iteration   3: 715405.280 ops/s
Iteration   4: 770760.354 ops/s
Iteration   5: 736820.683 ops/s
Iteration   6: 769715.365 ops/s
Iteration   7: 764727.598 ops/s
Iteration   8: 746439.706 ops/s
Iteration   9: 775711.729 ops/s
Iteration  10: 742520.547 ops/s
Iteration  11: 774595.976 ops/s
Iteration  12: 729858.612 ops/s
Iteration  13: 759709.099 ops/s
Iteration  14: 739627.520 ops/s
Iteration  15: 762828.663 ops/s
Iteration  16: 738688.320 ops/s
Iteration  17: 739917.694 ops/s
Iteration  18: 770262.712 ops/s
Iteration  19: 725276.098 ops/s
Iteration  20: 764552.705 ops/s
Iteration  21: 749973.022 ops/s
Iteration  22: 776694.574 ops/s
Iteration  23: 762012.485 ops/s
Iteration  24: 758229.144 ops/s
Iteration  25: 758679.626 ops/s
Iteration  26: 733591.749 ops/s
Iteration  27: 763998.693 ops/s
Iteration  28: 735701.188 ops/s
Iteration  29: 752049.341 ops/s
Iteration  30: 774171.190 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_toMapMapSupplierReturnsNull":
  755105.021 ±(99.9%) 11979.456 ops/s [Average]
  (min, avg, max) = (715405.280, 755105.021, 784315.200), stdev = 17930.287
  CI (99.9%): [743125.565, 767084.477] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score       Error  Units
FlowableNullTests._Benchmark.benchmark_toMapMapSupplierReturnsNull  thrpt   30  755105.021 ± 11979.456  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_toMultimapMapSupplierReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_toMultimapMapSupplierReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 231657.700 ops/s
# Warmup Iteration   2: 610712.729 ops/s
# Warmup Iteration   3: 655207.914 ops/s
# Warmup Iteration   4: 619181.174 ops/s
# Warmup Iteration   5: 730027.510 ops/s
# Warmup Iteration   6: 586454.409 ops/s
# Warmup Iteration   7: 698663.025 ops/s
# Warmup Iteration   8: 732924.394 ops/s
# Warmup Iteration   9: 696465.425 ops/s
# Warmup Iteration  10: 723223.202 ops/s
# Warmup Iteration  11: 711346.838 ops/s
# Warmup Iteration  12: 692528.827 ops/s
# Warmup Iteration  13: 720378.430 ops/s
# Warmup Iteration  14: 710377.249 ops/s
# Warmup Iteration  15: 694766.686 ops/s
# Warmup Iteration  16: 728471.230 ops/s
# Warmup Iteration  17: 743302.886 ops/s
# Warmup Iteration  18: 751905.712 ops/s
# Warmup Iteration  19: 743399.629 ops/s
# Warmup Iteration  20: 746581.318 ops/s
# Warmup Iteration  21: 774097.299 ops/s
# Warmup Iteration  22: 718423.252 ops/s
# Warmup Iteration  23: 763557.308 ops/s
# Warmup Iteration  24: 725841.805 ops/s
# Warmup Iteration  25: 743793.125 ops/s
# Warmup Iteration  26: 760739.865 ops/s
# Warmup Iteration  27: 746708.697 ops/s
# Warmup Iteration  28: 750070.920 ops/s
# Warmup Iteration  29: 738059.654 ops/s
# Warmup Iteration  30: 764388.558 ops/s
Iteration   1: 727879.200 ops/s
Iteration   2: 744849.766 ops/s
Iteration   3: 779138.055 ops/s
Iteration   4: 725507.402 ops/s
Iteration   5: 755316.035 ops/s
Iteration   6: 731061.226 ops/s
Iteration   7: 756809.609 ops/s
Iteration   8: 713546.688 ops/s
Iteration   9: 765794.271 ops/s
Iteration  10: 732641.743 ops/s
Iteration  11: 733933.086 ops/s
Iteration  12: 736608.423 ops/s
Iteration  13: 732685.816 ops/s
Iteration  14: 632107.504 ops/s
Iteration  15: 700827.458 ops/s
Iteration  16: 741607.983 ops/s
Iteration  17: 761467.057 ops/s
Iteration  18: 741331.093 ops/s
Iteration  19: 749765.735 ops/s
Iteration  20: 751653.427 ops/s
Iteration  21: 743410.977 ops/s
Iteration  22: 775696.409 ops/s
Iteration  23: 768133.601 ops/s
Iteration  24: 705113.085 ops/s
Iteration  25: 762658.963 ops/s
Iteration  26: 736696.490 ops/s
Iteration  27: 783241.011 ops/s
Iteration  28: 705041.850 ops/s
Iteration  29: 743440.562 ops/s
Iteration  30: 780993.052 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_toMultimapMapSupplierReturnsNull":
  740631.919 ±(99.9%) 20193.713 ops/s [Average]
  (min, avg, max) = (632107.504, 740631.919, 783241.011), stdev = 30225.001
  CI (99.9%): [720438.206, 760825.632] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score       Error  Units
FlowableNullTests._Benchmark.benchmark_toMultimapMapSupplierReturnsNull  thrpt   30  740631.919 ± 20193.713  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleConcatMapMaybeTest._Benchmark.benchmark_concatMapMaybeValueNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleConcatMapMaybeTest._Benchmark.benchmark_concatMapMaybeValueNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 183011.314 ops/s
# Warmup Iteration   2: 525510.319 ops/s
# Warmup Iteration   3: 562295.325 ops/s
# Warmup Iteration   4: 567772.492 ops/s
# Warmup Iteration   5: 594400.550 ops/s
# Warmup Iteration   6: 581211.170 ops/s
# Warmup Iteration   7: 554296.829 ops/s
# Warmup Iteration   8: 586127.357 ops/s
# Warmup Iteration   9: 577968.073 ops/s
# Warmup Iteration  10: 600842.746 ops/s
# Warmup Iteration  11: 591241.050 ops/s
# Warmup Iteration  12: 558668.354 ops/s
# Warmup Iteration  13: 595703.876 ops/s
# Warmup Iteration  14: 568942.418 ops/s
# Warmup Iteration  15: 589183.148 ops/s
# Warmup Iteration  16: 603543.093 ops/s
# Warmup Iteration  17: 594354.817 ops/s
# Warmup Iteration  18: 601267.747 ops/s
# Warmup Iteration  19: 620025.616 ops/s
# Warmup Iteration  20: 593961.884 ops/s
# Warmup Iteration  21: 619870.953 ops/s
# Warmup Iteration  22: 607985.989 ops/s
# Warmup Iteration  23: 607545.577 ops/s
# Warmup Iteration  24: 577656.581 ops/s
# Warmup Iteration  25: 597378.192 ops/s
# Warmup Iteration  26: 633612.806 ops/s
# Warmup Iteration  27: 597679.980 ops/s
# Warmup Iteration  28: 619762.034 ops/s
# Warmup Iteration  29: 613135.045 ops/s
# Warmup Iteration  30: 611989.001 ops/s
Iteration   1: 582867.066 ops/s
Iteration   2: 609382.938 ops/s
Iteration   3: 626309.567 ops/s
Iteration   4: 605497.587 ops/s
Iteration   5: 613087.348 ops/s
Iteration   6: 612029.409 ops/s
Iteration   7: 606945.264 ops/s
Iteration   8: 609950.587 ops/s
Iteration   9: 610005.015 ops/s
Iteration  10: 640357.289 ops/s
Iteration  11: 611132.969 ops/s
Iteration  12: 564290.623 ops/s
Iteration  13: 623635.890 ops/s
Iteration  14: 616058.488 ops/s
Iteration  15: 600891.472 ops/s
Iteration  16: 626889.459 ops/s
Iteration  17: 601570.218 ops/s
Iteration  18: 619120.804 ops/s
Iteration  19: 603823.360 ops/s
Iteration  20: 624198.778 ops/s
Iteration  21: 641499.319 ops/s
Iteration  22: 601098.999 ops/s
Iteration  23: 619762.789 ops/s
Iteration  24: 601774.401 ops/s
Iteration  25: 635484.680 ops/s
Iteration  26: 588133.625 ops/s
Iteration  27: 631534.317 ops/s
Iteration  28: 601248.830 ops/s
Iteration  29: 615211.418 ops/s
Iteration  30: 611575.513 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleConcatMapMaybeTest._Benchmark.benchmark_concatMapMaybeValueNull":
  611845.601 ±(99.9%) 11008.093 ops/s [Average]
  (min, avg, max) = (564290.623, 611845.601, 641499.319), stdev = 16476.396
  CI (99.9%): [600837.508, 622853.693] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score       Error  Units
SingleConcatMapMaybeTest._Benchmark.benchmark_concatMapMaybeValueNull  thrpt   30  611845.601 ± 11008.093  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleConcatMapMaybeTest._Benchmark.benchmark_concatMapMaybeValueErrorThrown$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleConcatMapMaybeTest._Benchmark.benchmark_concatMapMaybeValueErrorThrown

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 255664.619 ops/s
# Warmup Iteration   2: 504439.009 ops/s
# Warmup Iteration   3: 607857.676 ops/s
# Warmup Iteration   4: 577296.152 ops/s
# Warmup Iteration   5: 595495.660 ops/s
# Warmup Iteration   6: 560628.830 ops/s
# Warmup Iteration   7: 618505.637 ops/s
# Warmup Iteration   8: 575952.223 ops/s
# Warmup Iteration   9: 587490.228 ops/s
# Warmup Iteration  10: 598052.761 ops/s
# Warmup Iteration  11: 554542.584 ops/s
# Warmup Iteration  12: 601047.591 ops/s
# Warmup Iteration  13: 619436.114 ops/s
# Warmup Iteration  14: 575497.915 ops/s
# Warmup Iteration  15: 593531.593 ops/s
# Warmup Iteration  16: 595903.762 ops/s
# Warmup Iteration  17: 631701.521 ops/s
# Warmup Iteration  18: 597206.034 ops/s
# Warmup Iteration  19: 628059.459 ops/s
# Warmup Iteration  20: 607815.699 ops/s
# Warmup Iteration  21: 604160.940 ops/s
# Warmup Iteration  22: 628415.005 ops/s
# Warmup Iteration  23: 606793.211 ops/s
# Warmup Iteration  24: 603942.264 ops/s
# Warmup Iteration  25: 621051.946 ops/s
# Warmup Iteration  26: 617278.130 ops/s
# Warmup Iteration  27: 629249.144 ops/s
# Warmup Iteration  28: 600554.435 ops/s
# Warmup Iteration  29: 633166.132 ops/s
# Warmup Iteration  30: 619083.054 ops/s
Iteration   1: 610245.932 ops/s
Iteration   2: 642402.266 ops/s
Iteration   3: 598337.445 ops/s
Iteration   4: 623551.056 ops/s
Iteration   5: 604070.765 ops/s
Iteration   6: 617357.474 ops/s
Iteration   7: 636579.526 ops/s
Iteration   8: 595095.721 ops/s
Iteration   9: 579679.371 ops/s
Iteration  10: 543182.961 ops/s
Iteration  11: 634749.261 ops/s
Iteration  12: 611553.545 ops/s
Iteration  13: 632683.307 ops/s
Iteration  14: 601891.858 ops/s
Iteration  15: 619696.864 ops/s
Iteration  16: 631037.644 ops/s
Iteration  17: 595138.742 ops/s
Iteration  18: 628716.871 ops/s
Iteration  19: 599262.701 ops/s
Iteration  20: 615583.892 ops/s
Iteration  21: 614458.968 ops/s
Iteration  22: 620996.747 ops/s
Iteration  23: 625347.737 ops/s
Iteration  24: 622757.702 ops/s
Iteration  25: 638149.183 ops/s
Iteration  26: 627815.867 ops/s
Iteration  27: 578768.764 ops/s
Iteration  28: 623276.993 ops/s
Iteration  29: 622733.189 ops/s
Iteration  30: 625491.433 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleConcatMapMaybeTest._Benchmark.benchmark_concatMapMaybeValueErrorThrown":
  614020.460 ±(99.9%) 14112.198 ops/s [Average]
  (min, avg, max) = (543182.961, 614020.460, 642402.266), stdev = 21122.475
  CI (99.9%): [599908.261, 628132.658] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt       Score       Error  Units
SingleConcatMapMaybeTest._Benchmark.benchmark_concatMapMaybeValueErrorThrown  thrpt   30  614020.460 ± 14112.198  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableToListTest._Benchmark.benchmark_singleCollectionSupplierThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableToListTest._Benchmark.benchmark_singleCollectionSupplierThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 281913.074 ops/s
# Warmup Iteration   2: 543022.551 ops/s
# Warmup Iteration   3: 674826.119 ops/s
# Warmup Iteration   4: 645543.817 ops/s
# Warmup Iteration   5: 670358.759 ops/s
# Warmup Iteration   6: 596597.968 ops/s
# Warmup Iteration   7: 658589.159 ops/s
# Warmup Iteration   8: 654896.912 ops/s
# Warmup Iteration   9: 658146.416 ops/s
# Warmup Iteration  10: 674582.704 ops/s
# Warmup Iteration  11: 638369.840 ops/s
# Warmup Iteration  12: 677587.419 ops/s
# Warmup Iteration  13: 634294.820 ops/s
# Warmup Iteration  14: 693563.831 ops/s
# Warmup Iteration  15: 650688.672 ops/s
# Warmup Iteration  16: 645557.538 ops/s
# Warmup Iteration  17: 689741.622 ops/s
# Warmup Iteration  18: 680487.965 ops/s
# Warmup Iteration  19: 691928.936 ops/s
# Warmup Iteration  20: 693540.456 ops/s
# Warmup Iteration  21: 694199.374 ops/s
# Warmup Iteration  22: 690289.616 ops/s
# Warmup Iteration  23: 670721.578 ops/s
# Warmup Iteration  24: 692878.530 ops/s
# Warmup Iteration  25: 723445.599 ops/s
# Warmup Iteration  26: 668898.032 ops/s
# Warmup Iteration  27: 708336.178 ops/s
# Warmup Iteration  28: 722825.641 ops/s
# Warmup Iteration  29: 664646.823 ops/s
# Warmup Iteration  30: 705443.355 ops/s
Iteration   1: 720486.806 ops/s
Iteration   2: 670742.364 ops/s
Iteration   3: 725998.316 ops/s
Iteration   4: 671612.835 ops/s
Iteration   5: 696089.772 ops/s
Iteration   6: 710168.969 ops/s
Iteration   7: 683062.711 ops/s
Iteration   8: 733899.650 ops/s
Iteration   9: 658882.143 ops/s
Iteration  10: 729147.057 ops/s
Iteration  11: 689663.943 ops/s
Iteration  12: 699483.777 ops/s
Iteration  13: 672842.567 ops/s
Iteration  14: 699869.212 ops/s
Iteration  15: 704135.143 ops/s
Iteration  16: 700073.943 ops/s
Iteration  17: 703356.100 ops/s
Iteration  18: 686088.067 ops/s
Iteration  19: 656580.105 ops/s
Iteration  20: 689800.553 ops/s
Iteration  21: 714836.835 ops/s
Iteration  22: 683027.676 ops/s
Iteration  23: 697671.666 ops/s
Iteration  24: 688059.595 ops/s
Iteration  25: 696722.316 ops/s
Iteration  26: 694291.162 ops/s
Iteration  27: 686138.865 ops/s
Iteration  28: 698714.909 ops/s
Iteration  29: 695044.108 ops/s
Iteration  30: 696675.655 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableToListTest._Benchmark.benchmark_singleCollectionSupplierThrows":
  695105.561 ±(99.9%) 12479.878 ops/s [Average]
  (min, avg, max) = (656580.105, 695105.561, 733899.650), stdev = 18679.295
  CI (99.9%): [682625.683, 707585.438] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score       Error  Units
ObservableToListTest._Benchmark.benchmark_singleCollectionSupplierThrows  thrpt   30  695105.561 ± 12479.878  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDoOnTest._Benchmark.benchmark_doOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDoOnTest._Benchmark.benchmark_doOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 4564928.305 ops/s
# Warmup Iteration   2: 8820392.059 ops/s
# Warmup Iteration   3: 11585479.376 ops/s
# Warmup Iteration   4: 10985044.906 ops/s
# Warmup Iteration   5: 11304490.258 ops/s
# Warmup Iteration   6: 11380718.447 ops/s
# Warmup Iteration   7: 11057593.330 ops/s
# Warmup Iteration   8: 10966400.512 ops/s
# Warmup Iteration   9: 11201213.329 ops/s
# Warmup Iteration  10: 11539811.656 ops/s
# Warmup Iteration  11: 10818520.499 ops/s
# Warmup Iteration  12: 11523880.602 ops/s
# Warmup Iteration  13: 11107331.658 ops/s
# Warmup Iteration  14: 11372647.009 ops/s
# Warmup Iteration  15: 10986070.894 ops/s
# Warmup Iteration  16: 11517035.473 ops/s
# Warmup Iteration  17: 11195302.393 ops/s
# Warmup Iteration  18: 11065979.681 ops/s
# Warmup Iteration  19: 11741278.139 ops/s
# Warmup Iteration  20: 10938833.146 ops/s
# Warmup Iteration  21: 11494100.863 ops/s
# Warmup Iteration  22: 11091189.758 ops/s
# Warmup Iteration  23: 11482306.142 ops/s
# Warmup Iteration  24: 11108377.277 ops/s
# Warmup Iteration  25: 11089856.195 ops/s
# Warmup Iteration  26: 11610609.839 ops/s
# Warmup Iteration  27: 11100672.154 ops/s
# Warmup Iteration  28: 11245806.271 ops/s
# Warmup Iteration  29: 11459956.919 ops/s
# Warmup Iteration  30: 11241619.306 ops/s
Iteration   1: 11461718.285 ops/s
Iteration   2: 11398215.259 ops/s
Iteration   3: 11297988.521 ops/s
Iteration   4: 9420653.836 ops/s
Iteration   5: 11454610.795 ops/s
Iteration   6: 11140240.317 ops/s
Iteration   7: 11482090.788 ops/s
Iteration   8: 10859569.143 ops/s
Iteration   9: 11444779.873 ops/s
Iteration  10: 11024284.784 ops/s
Iteration  11: 11381597.626 ops/s
Iteration  12: 10942165.949 ops/s
Iteration  13: 11186608.607 ops/s
Iteration  14: 11162101.349 ops/s
Iteration  15: 11180235.888 ops/s
Iteration  16: 11086479.367 ops/s
Iteration  17: 11264811.856 ops/s
Iteration  18: 10977125.864 ops/s
Iteration  19: 11268272.496 ops/s
Iteration  20: 11213695.613 ops/s
Iteration  21: 11514363.277 ops/s
Iteration  22: 11370256.969 ops/s
Iteration  23: 10806142.192 ops/s
Iteration  24: 11424576.410 ops/s
Iteration  25: 11132108.181 ops/s
Iteration  26: 11413093.993 ops/s
Iteration  27: 10863718.888 ops/s
Iteration  28: 11120040.743 ops/s
Iteration  29: 11665111.675 ops/s
Iteration  30: 10985914.127 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleDoOnTest._Benchmark.benchmark_doOnSubscribe":
  11164752.422 ±(99.9%) 264319.043 ops/s [Average]
  (min, avg, max) = (9420653.836, 11164752.422, 11665111.675), stdev = 395620.331
  CI (99.9%): [10900433.379, 11429071.466] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt         Score        Error  Units
SingleDoOnTest._Benchmark.benchmark_doOnSubscribe  thrpt   30  11164752.422 ± 264319.043  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybeTest._Benchmark.benchmark_successError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybeTest._Benchmark.benchmark_successError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 68382.849 ops/s
# Warmup Iteration   2: 165515.075 ops/s
# Warmup Iteration   3: 392139.780 ops/s
# Warmup Iteration   4: 394788.694 ops/s
# Warmup Iteration   5: 449778.837 ops/s
# Warmup Iteration   6: 380900.642 ops/s
# Warmup Iteration   7: 447422.743 ops/s
# Warmup Iteration   8: 450585.081 ops/s
# Warmup Iteration   9: 452295.452 ops/s
# Warmup Iteration  10: 475285.511 ops/s
# Warmup Iteration  11: 415415.146 ops/s
# Warmup Iteration  12: 458206.206 ops/s
# Warmup Iteration  13: 448510.663 ops/s
# Warmup Iteration  14: 459300.373 ops/s
# Warmup Iteration  15: 463299.986 ops/s
# Warmup Iteration  16: 451933.876 ops/s
# Warmup Iteration  17: 472812.524 ops/s
# Warmup Iteration  18: 453516.212 ops/s
# Warmup Iteration  19: 472411.861 ops/s
# Warmup Iteration  20: 460179.916 ops/s
# Warmup Iteration  21: 476121.544 ops/s
# Warmup Iteration  22: 463066.598 ops/s
# Warmup Iteration  23: 457183.353 ops/s
# Warmup Iteration  24: 457048.389 ops/s
# Warmup Iteration  25: 465171.425 ops/s
# Warmup Iteration  26: 469126.607 ops/s
# Warmup Iteration  27: 464079.756 ops/s
# Warmup Iteration  28: 455430.963 ops/s
# Warmup Iteration  29: 476338.679 ops/s
# Warmup Iteration  30: 463511.860 ops/s
Iteration   1: 463505.987 ops/s
Iteration   2: 484104.402 ops/s
Iteration   3: 457671.625 ops/s
Iteration   4: 480831.418 ops/s
Iteration   5: 450505.969 ops/s
Iteration   6: 469372.781 ops/s
Iteration   7: 488152.806 ops/s
Iteration   8: 454135.013 ops/s
Iteration   9: 472116.893 ops/s
Iteration  10: 457956.786 ops/s
Iteration  11: 486793.672 ops/s
Iteration  12: 458987.312 ops/s
Iteration  13: 474090.927 ops/s
Iteration  14: 463015.133 ops/s
Iteration  15: 457862.946 ops/s
Iteration  16: 479939.734 ops/s
Iteration  17: 458486.538 ops/s
Iteration  18: 482079.654 ops/s
Iteration  19: 462934.099 ops/s
Iteration  20: 472820.466 ops/s
Iteration  21: 472020.746 ops/s
Iteration  22: 475499.964 ops/s
Iteration  23: 470363.744 ops/s
Iteration  24: 460852.227 ops/s
Iteration  25: 469864.843 ops/s
Iteration  26: 472610.054 ops/s
Iteration  27: 463518.265 ops/s
Iteration  28: 480742.438 ops/s
Iteration  29: 451145.553 ops/s
Iteration  30: 470951.891 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybeTest._Benchmark.benchmark_successError":
  468764.463 ±(99.9%) 7090.050 ops/s [Average]
  (min, avg, max) = (450505.969, 468764.463, 488152.806), stdev = 10612.054
  CI (99.9%): [461674.413, 475854.513] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
ObservableFlatMapMaybeTest._Benchmark.benchmark_successError  thrpt   30  468764.463 ± 7090.050  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeAmbTest._Benchmark.benchmark_ambFirstDone$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeAmbTest._Benchmark.benchmark_ambFirstDone

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 637031.707 ops/s
# Warmup Iteration   2: 2313908.984 ops/s
# Warmup Iteration   3: 2985935.121 ops/s
# Warmup Iteration   4: 4087137.381 ops/s
# Warmup Iteration   5: 4380102.514 ops/s
# Warmup Iteration   6: 4382578.471 ops/s
# Warmup Iteration   7: 4353699.744 ops/s
# Warmup Iteration   8: 4602895.519 ops/s
# Warmup Iteration   9: 4392456.799 ops/s
# Warmup Iteration  10: 4310008.241 ops/s
# Warmup Iteration  11: 4346209.264 ops/s
# Warmup Iteration  12: 4532693.978 ops/s
# Warmup Iteration  13: 4285874.388 ops/s
# Warmup Iteration  14: 4563973.900 ops/s
# Warmup Iteration  15: 4263854.607 ops/s
# Warmup Iteration  16: 4562601.273 ops/s
# Warmup Iteration  17: 4471123.930 ops/s
# Warmup Iteration  18: 4209149.982 ops/s
# Warmup Iteration  19: 4409400.201 ops/s
# Warmup Iteration  20: 4431371.673 ops/s
# Warmup Iteration  21: 4549183.211 ops/s
# Warmup Iteration  22: 4368655.873 ops/s
# Warmup Iteration  23: 4235271.888 ops/s
# Warmup Iteration  24: 4456411.186 ops/s
# Warmup Iteration  25: 4287031.076 ops/s
# Warmup Iteration  26: 4350281.130 ops/s
# Warmup Iteration  27: 4423240.729 ops/s
# Warmup Iteration  28: 4323898.762 ops/s
# Warmup Iteration  29: 3158309.052 ops/s
# Warmup Iteration  30: 4359075.545 ops/s
Iteration   1: 4318517.901 ops/s
Iteration   2: 4475695.633 ops/s
Iteration   3: 4287473.183 ops/s
Iteration   4: 4358516.418 ops/s
Iteration   5: 4358597.777 ops/s
Iteration   6: 4411434.198 ops/s
Iteration   7: 4515065.020 ops/s
Iteration   8: 4291246.088 ops/s
Iteration   9: 4512517.088 ops/s
Iteration  10: 4301877.799 ops/s
Iteration  11: 4434012.276 ops/s
Iteration  12: 4491964.178 ops/s
Iteration  13: 4303710.598 ops/s
Iteration  14: 4431259.246 ops/s
Iteration  15: 4398826.407 ops/s
Iteration  16: 4382055.150 ops/s
Iteration  17: 4327933.822 ops/s
Iteration  18: 4345279.222 ops/s
Iteration  19: 4388472.289 ops/s
Iteration  20: 4254712.738 ops/s
Iteration  21: 4518815.498 ops/s
Iteration  22: 4228659.934 ops/s
Iteration  23: 4544102.990 ops/s
Iteration  24: 4233388.931 ops/s
Iteration  25: 4379219.415 ops/s
Iteration  26: 4393754.048 ops/s
Iteration  27: 4182278.245 ops/s
Iteration  28: 4432974.474 ops/s
Iteration  29: 4344522.522 ops/s
Iteration  30: 4284133.006 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeAmbTest._Benchmark.benchmark_ambFirstDone":
  4371033.870 ±(99.9%) 63000.387 ops/s [Average]
  (min, avg, max) = (4182278.245, 4371033.870, 4544102.990), stdev = 94296.021
  CI (99.9%): [4308033.482, 4434034.257] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt        Score       Error  Units
MaybeAmbTest._Benchmark.benchmark_ambFirstDone  thrpt   30  4371033.870 ± 63000.387  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeAmbTest._Benchmark.benchmark_maybeSourcesInIterable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeAmbTest._Benchmark.benchmark_maybeSourcesInIterable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 499847.297 ops/s
# Warmup Iteration   2: 2536658.978 ops/s
# Warmup Iteration   3: 2920568.819 ops/s
# Warmup Iteration   4: 4304530.068 ops/s
# Warmup Iteration   5: 4547093.784 ops/s
# Warmup Iteration   6: 4304256.712 ops/s
# Warmup Iteration   7: 4494239.994 ops/s
# Warmup Iteration   8: 4443848.367 ops/s
# Warmup Iteration   9: 4375970.166 ops/s
# Warmup Iteration  10: 4519193.743 ops/s
# Warmup Iteration  11: 4317998.052 ops/s
# Warmup Iteration  12: 4392361.027 ops/s
# Warmup Iteration  13: 4554650.632 ops/s
# Warmup Iteration  14: 4341577.336 ops/s
# Warmup Iteration  15: 4509029.431 ops/s
# Warmup Iteration  16: 4573214.654 ops/s
# Warmup Iteration  17: 4577800.857 ops/s
# Warmup Iteration  18: 4359979.402 ops/s
# Warmup Iteration  19: 4439918.396 ops/s
# Warmup Iteration  20: 4372746.523 ops/s
# Warmup Iteration  21: 4432846.682 ops/s
# Warmup Iteration  22: 4467417.031 ops/s
# Warmup Iteration  23: 4431876.296 ops/s
# Warmup Iteration  24: 4316714.959 ops/s
# Warmup Iteration  25: 4538147.794 ops/s
# Warmup Iteration  26: 4289869.352 ops/s
# Warmup Iteration  27: 4323072.732 ops/s
# Warmup Iteration  28: 4464436.894 ops/s
# Warmup Iteration  29: 4356625.008 ops/s
# Warmup Iteration  30: 4528948.600 ops/s
Iteration   1: 4425888.257 ops/s
Iteration   2: 4406509.900 ops/s
Iteration   3: 4432639.323 ops/s
Iteration   4: 4368851.114 ops/s
Iteration   5: 4395499.641 ops/s
Iteration   6: 4256119.940 ops/s
Iteration   7: 4363988.913 ops/s
Iteration   8: 4654131.186 ops/s
Iteration   9: 4287640.917 ops/s
Iteration  10: 4430479.589 ops/s
Iteration  11: 4325375.576 ops/s
Iteration  12: 4467731.911 ops/s
Iteration  13: 4432229.715 ops/s
Iteration  14: 4440528.855 ops/s
Iteration  15: 4556154.167 ops/s
Iteration  16: 4391951.211 ops/s
Iteration  17: 4324766.162 ops/s
Iteration  18: 4488178.358 ops/s
Iteration  19: 4428733.575 ops/s
Iteration  20: 4602301.365 ops/s
Iteration  21: 4307658.979 ops/s
Iteration  22: 4507959.045 ops/s
Iteration  23: 4633835.119 ops/s
Iteration  24: 4313401.150 ops/s
Iteration  25: 4595351.091 ops/s
Iteration  26: 4346369.240 ops/s
Iteration  27: 4541409.994 ops/s
Iteration  28: 4336437.728 ops/s
Iteration  29: 4325646.826 ops/s
Iteration  30: 4380717.242 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeAmbTest._Benchmark.benchmark_maybeSourcesInIterable":
  4425616.203 ±(99.9%) 71164.986 ops/s [Average]
  (min, avg, max) = (4256119.940, 4425616.203, 4654131.186), stdev = 106516.409
  CI (99.9%): [4354451.217, 4496781.189] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
MaybeAmbTest._Benchmark.benchmark_maybeSourcesInIterable  thrpt   30  4425616.203 ± 71164.986  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.disposables.CompositeDisposableTest._Benchmark.benchmark_success$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.disposables.CompositeDisposableTest._Benchmark.benchmark_success

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2401065.955 ops/s
# Warmup Iteration   2: 4040083.433 ops/s
# Warmup Iteration   3: 4257283.476 ops/s
# Warmup Iteration   4: 4172220.846 ops/s
# Warmup Iteration   5: 4060811.512 ops/s
# Warmup Iteration   6: 3855240.535 ops/s
# Warmup Iteration   7: 4113947.252 ops/s
# Warmup Iteration   8: 4013348.893 ops/s
# Warmup Iteration   9: 4100314.319 ops/s
# Warmup Iteration  10: 3964524.840 ops/s
# Warmup Iteration  11: 3940456.428 ops/s
# Warmup Iteration  12: 4059211.510 ops/s
# Warmup Iteration  13: 4062010.786 ops/s
# Warmup Iteration  14: 3868362.915 ops/s
# Warmup Iteration  15: 4098500.598 ops/s
# Warmup Iteration  16: 3928188.788 ops/s
# Warmup Iteration  17: 4067979.897 ops/s
# Warmup Iteration  18: 4067928.231 ops/s
# Warmup Iteration  19: 3942930.418 ops/s
# Warmup Iteration  20: 4125377.818 ops/s
# Warmup Iteration  21: 3966881.275 ops/s
# Warmup Iteration  22: 3922959.621 ops/s
# Warmup Iteration  23: 4005041.208 ops/s
# Warmup Iteration  24: 3134298.748 ops/s
# Warmup Iteration  25: 3843969.468 ops/s
# Warmup Iteration  26: 4071503.313 ops/s
# Warmup Iteration  27: 3902866.888 ops/s
# Warmup Iteration  28: 4000227.051 ops/s
# Warmup Iteration  29: 3879736.362 ops/s
# Warmup Iteration  30: 3989353.906 ops/s
Iteration   1: 4093142.660 ops/s
Iteration   2: 3817588.179 ops/s
Iteration   3: 4056154.474 ops/s
Iteration   4: 3975628.466 ops/s
Iteration   5: 4043815.226 ops/s
Iteration   6: 4007679.822 ops/s
Iteration   7: 3977321.960 ops/s
Iteration   8: 4146738.396 ops/s
Iteration   9: 3863819.491 ops/s
Iteration  10: 4135297.801 ops/s
Iteration  11: 3875773.206 ops/s
Iteration  12: 4068142.288 ops/s
Iteration  13: 3953425.205 ops/s
Iteration  14: 4011170.552 ops/s
Iteration  15: 4003391.008 ops/s
Iteration  16: 3960510.314 ops/s
Iteration  17: 4151120.387 ops/s
Iteration  18: 3946031.946 ops/s
Iteration  19: 4210259.254 ops/s
Iteration  20: 3903813.349 ops/s
Iteration  21: 3916733.879 ops/s
Iteration  22: 4095931.057 ops/s
Iteration  23: 3971193.585 ops/s
Iteration  24: 4064554.451 ops/s
Iteration  25: 3911290.604 ops/s
Iteration  26: 4006590.299 ops/s
Iteration  27: 3855789.449 ops/s
Iteration  28: 3950524.743 ops/s
Iteration  29: 4104258.090 ops/s
Iteration  30: 3931875.660 ops/s


Result "io.reactivex.rxjava3.disposables.CompositeDisposableTest._Benchmark.benchmark_success":
  4000318.860 ±(99.9%) 65358.133 ops/s [Average]
  (min, avg, max) = (3817588.179, 4000318.860, 4210259.254), stdev = 97824.984
  CI (99.9%): [3934960.727, 4065676.993] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
CompositeDisposableTest._Benchmark.benchmark_success  thrpt   30  4000318.860 ± 65358.133  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.disposables.CompositeDisposableTest._Benchmark.benchmark_unsubscribeIdempotence$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.disposables.CompositeDisposableTest._Benchmark.benchmark_unsubscribeIdempotence

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3504875.033 ops/s
# Warmup Iteration   2: 6183017.332 ops/s
# Warmup Iteration   3: 7173046.460 ops/s
# Warmup Iteration   4: 6146456.271 ops/s
# Warmup Iteration   5: 6351534.473 ops/s
# Warmup Iteration   6: 6076099.450 ops/s
# Warmup Iteration   7: 5991592.837 ops/s
# Warmup Iteration   8: 6097526.023 ops/s
# Warmup Iteration   9: 6032101.509 ops/s
# Warmup Iteration  10: 6186376.215 ops/s
# Warmup Iteration  11: 5904999.016 ops/s
# Warmup Iteration  12: 6195045.870 ops/s
# Warmup Iteration  13: 6247375.205 ops/s
# Warmup Iteration  14: 6170764.661 ops/s
# Warmup Iteration  15: 6306622.131 ops/s
# Warmup Iteration  16: 5982288.715 ops/s
# Warmup Iteration  17: 6105970.482 ops/s
# Warmup Iteration  18: 5964987.414 ops/s
# Warmup Iteration  19: 6256945.365 ops/s
# Warmup Iteration  20: 6228311.970 ops/s
# Warmup Iteration  21: 6001877.697 ops/s
# Warmup Iteration  22: 6173607.626 ops/s
# Warmup Iteration  23: 6136896.158 ops/s
# Warmup Iteration  24: 6317868.279 ops/s
# Warmup Iteration  25: 6049934.599 ops/s
# Warmup Iteration  26: 5865390.731 ops/s
# Warmup Iteration  27: 5967089.796 ops/s
# Warmup Iteration  28: 6329620.355 ops/s
# Warmup Iteration  29: 6337634.852 ops/s
# Warmup Iteration  30: 6005923.420 ops/s
Iteration   1: 6430678.350 ops/s
Iteration   2: 6053598.508 ops/s
Iteration   3: 6445647.039 ops/s
Iteration   4: 5973926.608 ops/s
Iteration   5: 6039429.736 ops/s
Iteration   6: 6153944.989 ops/s
Iteration   7: 6150471.525 ops/s
Iteration   8: 6495142.384 ops/s
Iteration   9: 6320075.866 ops/s
Iteration  10: 5971162.179 ops/s
Iteration  11: 6173061.407 ops/s
Iteration  12: 6244275.590 ops/s
Iteration  13: 6360100.490 ops/s
Iteration  14: 6030346.132 ops/s
Iteration  15: 6051753.591 ops/s
Iteration  16: 6216514.999 ops/s
Iteration  17: 6201490.637 ops/s
Iteration  18: 6282897.712 ops/s
Iteration  19: 5928022.723 ops/s
Iteration  20: 6259917.345 ops/s
Iteration  21: 6131713.365 ops/s
Iteration  22: 6067897.684 ops/s
Iteration  23: 6296811.144 ops/s
Iteration  24: 6043683.951 ops/s
Iteration  25: 6321892.377 ops/s
Iteration  26: 6098877.164 ops/s
Iteration  27: 6340194.970 ops/s
Iteration  28: 6150983.159 ops/s
Iteration  29: 6052621.717 ops/s
Iteration  30: 6176683.464 ops/s


Result "io.reactivex.rxjava3.disposables.CompositeDisposableTest._Benchmark.benchmark_unsubscribeIdempotence":
  6182127.227 ±(99.9%) 100015.361 ops/s [Average]
  (min, avg, max) = (5928022.723, 6182127.227, 6495142.384), stdev = 149698.295
  CI (99.9%): [6082111.866, 6282142.588] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score        Error  Units
CompositeDisposableTest._Benchmark.benchmark_unsubscribeIdempotence  thrpt   30  6182127.227 ± 100015.361  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybeTest._Benchmark.benchmark_mapperReturnsNullObservable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybeTest._Benchmark.benchmark_mapperReturnsNullObservable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 106680.503 ops/s
# Warmup Iteration   2: 447119.249 ops/s
# Warmup Iteration   3: 564160.449 ops/s
# Warmup Iteration   4: 579178.970 ops/s
# Warmup Iteration   5: 535566.165 ops/s
# Warmup Iteration   6: 545504.259 ops/s
# Warmup Iteration   7: 592755.378 ops/s
# Warmup Iteration   8: 574480.822 ops/s
# Warmup Iteration   9: 623334.941 ops/s
# Warmup Iteration  10: 580184.934 ops/s
# Warmup Iteration  11: 576468.844 ops/s
# Warmup Iteration  12: 593193.734 ops/s
# Warmup Iteration  13: 589634.014 ops/s
# Warmup Iteration  14: 585706.261 ops/s
# Warmup Iteration  15: 579173.485 ops/s
# Warmup Iteration  16: 595396.218 ops/s
# Warmup Iteration  17: 633803.227 ops/s
# Warmup Iteration  18: 598369.808 ops/s
# Warmup Iteration  19: 497320.082 ops/s
# Warmup Iteration  20: 595330.161 ops/s
# Warmup Iteration  21: 636887.764 ops/s
# Warmup Iteration  22: 600842.754 ops/s
# Warmup Iteration  23: 611061.474 ops/s
# Warmup Iteration  24: 599959.946 ops/s
# Warmup Iteration  25: 615466.821 ops/s
# Warmup Iteration  26: 628797.913 ops/s
# Warmup Iteration  27: 624734.018 ops/s
# Warmup Iteration  28: 597080.997 ops/s
# Warmup Iteration  29: 630974.703 ops/s
# Warmup Iteration  30: 628922.692 ops/s
Iteration   1: 586237.142 ops/s
Iteration   2: 608987.097 ops/s
Iteration   3: 584686.062 ops/s
Iteration   4: 631567.118 ops/s
Iteration   5: 563596.790 ops/s
Iteration   6: 634555.241 ops/s
Iteration   7: 613944.075 ops/s
Iteration   8: 623924.664 ops/s
Iteration   9: 634836.600 ops/s
Iteration  10: 610466.087 ops/s
Iteration  11: 636680.743 ops/s
Iteration  12: 595657.621 ops/s
Iteration  13: 647764.876 ops/s
Iteration  14: 636355.921 ops/s
Iteration  15: 605362.331 ops/s
Iteration  16: 617106.912 ops/s
Iteration  17: 606174.961 ops/s
Iteration  18: 630095.003 ops/s
Iteration  19: 627695.868 ops/s
Iteration  20: 601384.422 ops/s
Iteration  21: 642993.101 ops/s
Iteration  22: 599512.103 ops/s
Iteration  23: 626032.251 ops/s
Iteration  24: 604942.599 ops/s
Iteration  25: 640286.890 ops/s
Iteration  26: 610363.207 ops/s
Iteration  27: 609854.805 ops/s
Iteration  28: 631370.007 ops/s
Iteration  29: 618056.386 ops/s
Iteration  30: 636046.713 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybeTest._Benchmark.benchmark_mapperReturnsNullObservable":
  617217.920 ±(99.9%) 13133.520 ops/s [Average]
  (min, avg, max) = (563596.790, 617217.920, 647764.876), stdev = 19657.635
  CI (99.9%): [604084.400, 630351.440] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt       Score       Error  Units
ObservableFlatMapMaybeTest._Benchmark.benchmark_mapperReturnsNullObservable  thrpt   30  617217.920 ± 13133.520  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybeTest._Benchmark.benchmark_mapperThrowsObservable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybeTest._Benchmark.benchmark_mapperThrowsObservable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 84616.215 ops/s
# Warmup Iteration   2: 465248.374 ops/s
# Warmup Iteration   3: 577123.550 ops/s
# Warmup Iteration   4: 576404.364 ops/s
# Warmup Iteration   5: 608291.509 ops/s
# Warmup Iteration   6: 580586.301 ops/s
# Warmup Iteration   7: 596120.785 ops/s
# Warmup Iteration   8: 608343.973 ops/s
# Warmup Iteration   9: 585969.218 ops/s
# Warmup Iteration  10: 588460.133 ops/s
# Warmup Iteration  11: 583069.974 ops/s
# Warmup Iteration  12: 590914.201 ops/s
# Warmup Iteration  13: 606279.569 ops/s
# Warmup Iteration  14: 582137.026 ops/s
# Warmup Iteration  15: 600640.257 ops/s
# Warmup Iteration  16: 572686.058 ops/s
# Warmup Iteration  17: 615731.607 ops/s
# Warmup Iteration  18: 620318.386 ops/s
# Warmup Iteration  19: 621253.942 ops/s
# Warmup Iteration  20: 613699.448 ops/s
# Warmup Iteration  21: 612188.482 ops/s
# Warmup Iteration  22: 638351.269 ops/s
# Warmup Iteration  23: 608093.523 ops/s
# Warmup Iteration  24: 603954.869 ops/s
# Warmup Iteration  25: 627954.277 ops/s
# Warmup Iteration  26: 604736.537 ops/s
# Warmup Iteration  27: 632090.585 ops/s
# Warmup Iteration  28: 605123.784 ops/s
# Warmup Iteration  29: 628524.516 ops/s
# Warmup Iteration  30: 645832.539 ops/s
Iteration   1: 598521.333 ops/s
Iteration   2: 646337.395 ops/s
Iteration   3: 609355.172 ops/s
Iteration   4: 632147.000 ops/s
Iteration   5: 609113.552 ops/s
Iteration   6: 616654.811 ops/s
Iteration   7: 623764.266 ops/s
Iteration   8: 602046.448 ops/s
Iteration   9: 622617.652 ops/s
Iteration  10: 611411.369 ops/s
Iteration  11: 622708.695 ops/s
Iteration  12: 602324.849 ops/s
Iteration  13: 622519.536 ops/s
Iteration  14: 629763.744 ops/s
Iteration  15: 588824.115 ops/s
Iteration  16: 612315.303 ops/s
Iteration  17: 611796.573 ops/s
Iteration  18: 642675.742 ops/s
Iteration  19: 655565.541 ops/s
Iteration  20: 597604.342 ops/s
Iteration  21: 636157.258 ops/s
Iteration  22: 618686.164 ops/s
Iteration  23: 619870.235 ops/s
Iteration  24: 652269.251 ops/s
Iteration  25: 600320.560 ops/s
Iteration  26: 636742.089 ops/s
Iteration  27: 625274.904 ops/s
Iteration  28: 642040.024 ops/s
Iteration  29: 645922.664 ops/s
Iteration  30: 599865.446 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybeTest._Benchmark.benchmark_mapperThrowsObservable":
  621173.868 ±(99.9%) 11954.378 ops/s [Average]
  (min, avg, max) = (588824.115, 621173.868, 655565.541), stdev = 17892.752
  CI (99.9%): [609219.490, 633128.246] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score       Error  Units
ObservableFlatMapMaybeTest._Benchmark.benchmark_mapperThrowsObservable  thrpt   30  621173.868 ± 11954.378  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_bufferOpenCloseCloseReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_bufferOpenCloseCloseReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 26042.881 ops/s
# Warmup Iteration   2: 287635.878 ops/s
# Warmup Iteration   3: 412128.995 ops/s
# Warmup Iteration   4: 386557.326 ops/s
# Warmup Iteration   5: 393915.026 ops/s
# Warmup Iteration   6: 435415.038 ops/s
# Warmup Iteration   7: 442685.547 ops/s
# Warmup Iteration   8: 463706.863 ops/s
# Warmup Iteration   9: 435800.169 ops/s
# Warmup Iteration  10: 459989.971 ops/s
# Warmup Iteration  11: 456102.006 ops/s
# Warmup Iteration  12: 435926.337 ops/s
# Warmup Iteration  13: 449999.923 ops/s
# Warmup Iteration  14: 359858.996 ops/s
# Warmup Iteration  15: 445445.704 ops/s
# Warmup Iteration  16: 441207.945 ops/s
# Warmup Iteration  17: 461533.511 ops/s
# Warmup Iteration  18: 457896.794 ops/s
# Warmup Iteration  19: 450508.954 ops/s
# Warmup Iteration  20: 484770.344 ops/s
# Warmup Iteration  21: 441452.797 ops/s
# Warmup Iteration  22: 459576.430 ops/s
# Warmup Iteration  23: 462046.022 ops/s
# Warmup Iteration  24: 438440.580 ops/s
# Warmup Iteration  25: 473554.821 ops/s
# Warmup Iteration  26: 465037.860 ops/s
# Warmup Iteration  27: 442395.810 ops/s
# Warmup Iteration  28: 471004.741 ops/s
# Warmup Iteration  29: 441471.654 ops/s
# Warmup Iteration  30: 467348.223 ops/s
Iteration   1: 455083.234 ops/s
Iteration   2: 464109.181 ops/s
Iteration   3: 476019.034 ops/s
Iteration   4: 461401.831 ops/s
Iteration   5: 446702.798 ops/s
Iteration   6: 463337.015 ops/s
Iteration   7: 453595.656 ops/s
Iteration   8: 474991.180 ops/s
Iteration   9: 448963.020 ops/s
Iteration  10: 471959.153 ops/s
Iteration  11: 465467.651 ops/s
Iteration  12: 453905.654 ops/s
Iteration  13: 476689.195 ops/s
Iteration  14: 439964.698 ops/s
Iteration  15: 450958.564 ops/s
Iteration  16: 457093.500 ops/s
Iteration  17: 462286.122 ops/s
Iteration  18: 459246.535 ops/s
Iteration  19: 457650.303 ops/s
Iteration  20: 472046.454 ops/s
Iteration  21: 457015.081 ops/s
Iteration  22: 477143.628 ops/s
Iteration  23: 445669.840 ops/s
Iteration  24: 469545.666 ops/s
Iteration  25: 458098.072 ops/s
Iteration  26: 471301.426 ops/s
Iteration  27: 472563.636 ops/s
Iteration  28: 453774.121 ops/s
Iteration  29: 452039.145 ops/s
Iteration  30: 468984.254 ops/s


Result "io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_bufferOpenCloseCloseReturnsNull":
  461253.522 ±(99.9%) 6835.956 ops/s [Average]
  (min, avg, max) = (439964.698, 461253.522, 477143.628), stdev = 10231.737
  CI (99.9%): [454417.566, 468089.477] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score      Error  Units
ObservableNullTests._Benchmark.benchmark_bufferOpenCloseCloseReturnsNull  thrpt   30  461253.522 ± 6835.956  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybeTest._Benchmark.benchmark_mainError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybeTest._Benchmark.benchmark_mainError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 135587.787 ops/s
# Warmup Iteration   2: 502735.251 ops/s
# Warmup Iteration   3: 629730.070 ops/s
# Warmup Iteration   4: 659361.578 ops/s
# Warmup Iteration   5: 616811.811 ops/s
# Warmup Iteration   6: 625093.653 ops/s
# Warmup Iteration   7: 673257.365 ops/s
# Warmup Iteration   8: 642789.535 ops/s
# Warmup Iteration   9: 660858.209 ops/s
# Warmup Iteration  10: 566553.599 ops/s
# Warmup Iteration  11: 647670.306 ops/s
# Warmup Iteration  12: 606703.952 ops/s
# Warmup Iteration  13: 635136.652 ops/s
# Warmup Iteration  14: 657964.204 ops/s
# Warmup Iteration  15: 633769.881 ops/s
# Warmup Iteration  16: 666427.088 ops/s
# Warmup Iteration  17: 675278.777 ops/s
# Warmup Iteration  18: 675502.338 ops/s
# Warmup Iteration  19: 692019.447 ops/s
# Warmup Iteration  20: 676558.188 ops/s
# Warmup Iteration  21: 691098.749 ops/s
# Warmup Iteration  22: 685468.983 ops/s
# Warmup Iteration  23: 709681.020 ops/s
# Warmup Iteration  24: 676229.895 ops/s
# Warmup Iteration  25: 671068.725 ops/s
# Warmup Iteration  26: 684806.168 ops/s
# Warmup Iteration  27: 677495.893 ops/s
# Warmup Iteration  28: 678190.212 ops/s
# Warmup Iteration  29: 682763.982 ops/s
# Warmup Iteration  30: 682465.849 ops/s
Iteration   1: 687590.127 ops/s
Iteration   2: 679306.758 ops/s
Iteration   3: 680407.640 ops/s
Iteration   4: 689804.405 ops/s
Iteration   5: 679804.761 ops/s
Iteration   6: 703490.461 ops/s
Iteration   7: 674944.270 ops/s
Iteration   8: 690854.552 ops/s
Iteration   9: 672670.185 ops/s
Iteration  10: 673760.564 ops/s
Iteration  11: 699915.296 ops/s
Iteration  12: 664777.741 ops/s
Iteration  13: 687164.305 ops/s
Iteration  14: 668880.873 ops/s
Iteration  15: 706117.965 ops/s
Iteration  16: 657385.743 ops/s
Iteration  17: 678244.825 ops/s
Iteration  18: 696349.790 ops/s
Iteration  19: 682757.006 ops/s
Iteration  20: 694711.005 ops/s
Iteration  21: 678943.415 ops/s
Iteration  22: 706906.666 ops/s
Iteration  23: 667328.871 ops/s
Iteration  24: 687915.919 ops/s
Iteration  25: 664801.051 ops/s
Iteration  26: 674990.550 ops/s
Iteration  27: 683461.801 ops/s
Iteration  28: 674746.836 ops/s
Iteration  29: 708538.242 ops/s
Iteration  30: 708344.530 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybeTest._Benchmark.benchmark_mainError":
  684163.872 ±(99.9%) 9428.337 ops/s [Average]
  (min, avg, max) = (657385.743, 684163.872, 708538.242), stdev = 14111.892
  CI (99.9%): [674735.535, 693592.209] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
ObservableMergeWithMaybeTest._Benchmark.benchmark_mainError  thrpt   30  684163.872 ± 9428.337  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArrayTest._Benchmark.benchmark_cancel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArrayTest._Benchmark.benchmark_cancel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 210444.933 ops/s
# Warmup Iteration   2: 1180657.532 ops/s
# Warmup Iteration   3: 2076418.013 ops/s
# Warmup Iteration   4: 2279800.756 ops/s
# Warmup Iteration   5: 2486197.944 ops/s
# Warmup Iteration   6: 2329341.667 ops/s
# Warmup Iteration   7: 2446086.638 ops/s
# Warmup Iteration   8: 1901365.044 ops/s
# Warmup Iteration   9: 2390015.204 ops/s
# Warmup Iteration  10: 2409964.128 ops/s
# Warmup Iteration  11: 2358258.609 ops/s
# Warmup Iteration  12: 2440030.866 ops/s
# Warmup Iteration  13: 2465746.178 ops/s
# Warmup Iteration  14: 2290292.272 ops/s
# Warmup Iteration  15: 2224935.805 ops/s
# Warmup Iteration  16: 2474865.352 ops/s
# Warmup Iteration  17: 2457771.224 ops/s
# Warmup Iteration  18: 2400042.915 ops/s
# Warmup Iteration  19: 2404598.718 ops/s
# Warmup Iteration  20: 2414382.292 ops/s
# Warmup Iteration  21: 2599959.815 ops/s
# Warmup Iteration  22: 2342038.160 ops/s
# Warmup Iteration  23: 2451882.854 ops/s
# Warmup Iteration  24: 2507808.222 ops/s
# Warmup Iteration  25: 2378222.645 ops/s
# Warmup Iteration  26: 2384348.997 ops/s
# Warmup Iteration  27: 2538256.003 ops/s
# Warmup Iteration  28: 2383931.641 ops/s
# Warmup Iteration  29: 2493733.007 ops/s
# Warmup Iteration  30: 2368540.383 ops/s
Iteration   1: 2510801.203 ops/s
Iteration   2: 2414192.630 ops/s
Iteration   3: 2418005.881 ops/s
Iteration   4: 2462842.199 ops/s
Iteration   5: 2428970.381 ops/s
Iteration   6: 2498382.128 ops/s
Iteration   7: 2433353.042 ops/s
Iteration   8: 2392613.532 ops/s
Iteration   9: 2543514.664 ops/s
Iteration  10: 2467489.387 ops/s
Iteration  11: 2433781.162 ops/s
Iteration  12: 2483748.291 ops/s
Iteration  13: 2406965.239 ops/s
Iteration  14: 2502977.179 ops/s
Iteration  15: 2388241.225 ops/s
Iteration  16: 2383436.690 ops/s
Iteration  17: 2479735.011 ops/s
Iteration  18: 2467095.682 ops/s
Iteration  19: 2494527.491 ops/s
Iteration  20: 2421317.928 ops/s
Iteration  21: 2491763.525 ops/s
Iteration  22: 2469532.422 ops/s
Iteration  23: 2474677.301 ops/s
Iteration  24: 2488226.565 ops/s
Iteration  25: 2400284.898 ops/s
Iteration  26: 2522979.302 ops/s
Iteration  27: 2396086.112 ops/s
Iteration  28: 2460878.523 ops/s
Iteration  29: 2414018.487 ops/s
Iteration  30: 2430408.517 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArrayTest._Benchmark.benchmark_cancel":
  2452694.887 ±(99.9%) 29447.751 ops/s [Average]
  (min, avg, max) = (2383436.690, 2452694.887, 2543514.664), stdev = 44076.010
  CI (99.9%): [2423247.136, 2482142.637] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score       Error  Units
MaybeMergeArrayTest._Benchmark.benchmark_cancel  thrpt   30  2452694.887 ± 29447.751  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.disposables.CompositeDisposableTest._Benchmark.benchmark_compositeException$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.disposables.CompositeDisposableTest._Benchmark.benchmark_compositeException

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 72737.371 ops/s
# Warmup Iteration   2: 159208.966 ops/s
# Warmup Iteration   3: 173822.379 ops/s
# Warmup Iteration   4: 165705.885 ops/s
# Warmup Iteration   5: 165861.245 ops/s
# Warmup Iteration   6: 175860.070 ops/s
# Warmup Iteration   7: 172100.139 ops/s
# Warmup Iteration   8: 179994.577 ops/s
# Warmup Iteration   9: 170880.608 ops/s
# Warmup Iteration  10: 174156.940 ops/s
# Warmup Iteration  11: 168231.213 ops/s
# Warmup Iteration  12: 175660.486 ops/s
# Warmup Iteration  13: 177576.523 ops/s
# Warmup Iteration  14: 171008.107 ops/s
# Warmup Iteration  15: 175232.223 ops/s
# Warmup Iteration  16: 166938.972 ops/s
# Warmup Iteration  17: 183100.691 ops/s
# Warmup Iteration  18: 178950.479 ops/s
# Warmup Iteration  19: 179792.411 ops/s
# Warmup Iteration  20: 185323.990 ops/s
# Warmup Iteration  21: 177392.967 ops/s
# Warmup Iteration  22: 187874.977 ops/s
# Warmup Iteration  23: 176079.320 ops/s
# Warmup Iteration  24: 178041.407 ops/s
# Warmup Iteration  25: 178668.428 ops/s
# Warmup Iteration  26: 180595.897 ops/s
# Warmup Iteration  27: 183294.831 ops/s
# Warmup Iteration  28: 178439.020 ops/s
# Warmup Iteration  29: 183450.450 ops/s
# Warmup Iteration  30: 179188.573 ops/s
Iteration   1: 185907.010 ops/s
Iteration   2: 178064.482 ops/s
Iteration   3: 182874.195 ops/s
Iteration   4: 179413.542 ops/s
Iteration   5: 185914.956 ops/s
Iteration   6: 183043.607 ops/s
Iteration   7: 173178.179 ops/s
Iteration   8: 184839.763 ops/s
Iteration   9: 177785.089 ops/s
Iteration  10: 184057.438 ops/s
Iteration  11: 177317.907 ops/s
Iteration  12: 176020.321 ops/s
Iteration  13: 179572.559 ops/s
Iteration  14: 176205.196 ops/s
Iteration  15: 180905.764 ops/s
Iteration  16: 182875.793 ops/s
Iteration  17: 182425.117 ops/s
Iteration  18: 182121.481 ops/s
Iteration  19: 179617.345 ops/s
Iteration  20: 176836.765 ops/s
Iteration  21: 185539.430 ops/s
Iteration  22: 174497.658 ops/s
Iteration  23: 186628.722 ops/s
Iteration  24: 180455.720 ops/s
Iteration  25: 183257.719 ops/s
Iteration  26: 181603.903 ops/s
Iteration  27: 184360.041 ops/s
Iteration  28: 178575.113 ops/s
Iteration  29: 180270.306 ops/s
Iteration  30: 183133.011 ops/s


Result "io.reactivex.rxjava3.disposables.CompositeDisposableTest._Benchmark.benchmark_compositeException":
  180909.938 ±(99.9%) 2400.743 ops/s [Average]
  (min, avg, max) = (173178.179, 180909.938, 186628.722), stdev = 3593.320
  CI (99.9%): [178509.195, 183310.681] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score      Error  Units
CompositeDisposableTest._Benchmark.benchmark_compositeException  thrpt   30  180909.938 ± 2400.743  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_ambArrayOrder$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_ambArrayOrder

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 270707.172 ops/s
# Warmup Iteration   2: 504838.917 ops/s
# Warmup Iteration   3: 483631.873 ops/s
# Warmup Iteration   4: 660260.037 ops/s
# Warmup Iteration   5: 701401.235 ops/s
# Warmup Iteration   6: 642280.479 ops/s
# Warmup Iteration   7: 608456.435 ops/s
# Warmup Iteration   8: 678132.242 ops/s
# Warmup Iteration   9: 691951.003 ops/s
# Warmup Iteration  10: 652219.157 ops/s
# Warmup Iteration  11: 685187.982 ops/s
# Warmup Iteration  12: 657844.645 ops/s
# Warmup Iteration  13: 685150.996 ops/s
# Warmup Iteration  14: 680933.142 ops/s
# Warmup Iteration  15: 651563.079 ops/s
# Warmup Iteration  16: 672158.692 ops/s
# Warmup Iteration  17: 698836.142 ops/s
# Warmup Iteration  18: 727714.938 ops/s
# Warmup Iteration  19: 712851.149 ops/s
# Warmup Iteration  20: 684256.259 ops/s
# Warmup Iteration  21: 725723.698 ops/s
# Warmup Iteration  22: 713276.511 ops/s
# Warmup Iteration  23: 697513.462 ops/s
# Warmup Iteration  24: 689467.397 ops/s
# Warmup Iteration  25: 716860.922 ops/s
# Warmup Iteration  26: 698859.594 ops/s
# Warmup Iteration  27: 725765.999 ops/s
# Warmup Iteration  28: 688429.923 ops/s
# Warmup Iteration  29: 704491.560 ops/s
# Warmup Iteration  30: 700740.990 ops/s
Iteration   1: 749540.554 ops/s
Iteration   2: 730120.600 ops/s
Iteration   3: 697809.966 ops/s
Iteration   4: 738330.945 ops/s
Iteration   5: 694755.383 ops/s
Iteration   6: 716464.728 ops/s
Iteration   7: 691310.622 ops/s
Iteration   8: 734866.228 ops/s
Iteration   9: 702772.892 ops/s
Iteration  10: 713360.143 ops/s
Iteration  11: 711711.493 ops/s
Iteration  12: 701709.498 ops/s
Iteration  13: 735934.308 ops/s
Iteration  14: 691256.609 ops/s
Iteration  15: 672470.594 ops/s
Iteration  16: 708113.032 ops/s
Iteration  17: 697571.369 ops/s
Iteration  18: 718738.249 ops/s
Iteration  19: 702750.580 ops/s
Iteration  20: 750177.247 ops/s
Iteration  21: 682527.361 ops/s
Iteration  22: 740581.252 ops/s
Iteration  23: 725949.173 ops/s
Iteration  24: 700709.325 ops/s
Iteration  25: 731329.052 ops/s
Iteration  26: 699467.293 ops/s
Iteration  27: 708780.966 ops/s
Iteration  28: 756647.241 ops/s
Iteration  29: 694517.474 ops/s
Iteration  30: 739824.631 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_ambArrayOrder":
  714669.960 ±(99.9%) 14616.033 ops/s [Average]
  (min, avg, max) = (672470.594, 714669.960, 756647.241), stdev = 21876.592
  CI (99.9%): [700053.927, 729285.994] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt       Score       Error  Units
MaybeTest._Benchmark.benchmark_ambArrayOrder  thrpt   30  714669.960 ± 14616.033  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithStartEndObservableTest._Benchmark.benchmark_windowOpenIgnoresDispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithStartEndObservableTest._Benchmark.benchmark_windowOpenIgnoresDispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 43253.320 ops/s
# Warmup Iteration   2: 221860.104 ops/s
# Warmup Iteration   3: 860991.049 ops/s
# Warmup Iteration   4: 843637.949 ops/s
# Warmup Iteration   5: 1072554.589 ops/s
# Warmup Iteration   6: 1093030.034 ops/s
# Warmup Iteration   7: 1035412.592 ops/s
# Warmup Iteration   8: 1066632.091 ops/s
# Warmup Iteration   9: 1053519.937 ops/s
# Warmup Iteration  10: 1075629.103 ops/s
# Warmup Iteration  11: 1044650.313 ops/s
# Warmup Iteration  12: 1105589.356 ops/s
# Warmup Iteration  13: 1029617.368 ops/s
# Warmup Iteration  14: 1100183.699 ops/s
# Warmup Iteration  15: 1054046.783 ops/s
# Warmup Iteration  16: 1076605.902 ops/s
# Warmup Iteration  17: 1080305.639 ops/s
# Warmup Iteration  18: 1059311.152 ops/s
# Warmup Iteration  19: 1092666.082 ops/s
# Warmup Iteration  20: 1052201.976 ops/s
# Warmup Iteration  21: 1078174.645 ops/s
# Warmup Iteration  22: 1079013.587 ops/s
# Warmup Iteration  23: 1135966.927 ops/s
# Warmup Iteration  24: 1056144.319 ops/s
# Warmup Iteration  25: 1090123.873 ops/s
# Warmup Iteration  26: 1017844.315 ops/s
# Warmup Iteration  27: 1129681.413 ops/s
# Warmup Iteration  28: 1054040.557 ops/s
# Warmup Iteration  29: 1053019.480 ops/s
# Warmup Iteration  30: 1129281.526 ops/s
Iteration   1: 1032863.773 ops/s
Iteration   2: 1079818.862 ops/s
Iteration   3: 1096315.065 ops/s
Iteration   4: 1067444.208 ops/s
Iteration   5: 1072961.029 ops/s
Iteration   6: 1025284.014 ops/s
Iteration   7: 1067024.851 ops/s
Iteration   8: 1078789.540 ops/s
Iteration   9: 1066671.724 ops/s
Iteration  10: 1060368.195 ops/s
Iteration  11: 1089717.193 ops/s
Iteration  12: 1059268.500 ops/s
Iteration  13: 1064048.763 ops/s
Iteration  14: 1078700.127 ops/s
Iteration  15: 1056522.493 ops/s
Iteration  16: 1076619.909 ops/s
Iteration  17: 1096949.259 ops/s
Iteration  18: 1053811.465 ops/s
Iteration  19: 1125649.794 ops/s
Iteration  20: 1062361.220 ops/s
Iteration  21: 1089412.211 ops/s
Iteration  22: 1030415.028 ops/s
Iteration  23: 1081849.842 ops/s
Iteration  24: 1096599.153 ops/s
Iteration  25: 1011336.629 ops/s
Iteration  26: 1096653.659 ops/s
Iteration  27: 1047854.170 ops/s
Iteration  28: 1067449.572 ops/s
Iteration  29: 1007022.291 ops/s
Iteration  30: 976831.619 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithStartEndObservableTest._Benchmark.benchmark_windowOpenIgnoresDispose":
  1063887.139 ±(99.9%) 20879.472 ops/s [Average]
  (min, avg, max) = (976831.619, 1063887.139, 1125649.794), stdev = 31251.413
  CI (99.9%): [1043007.667, 1084766.610] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                  Mode  Cnt        Score       Error  Units
ObservableWindowWithStartEndObservableTest._Benchmark.benchmark_windowOpenIgnoresDispose  thrpt   30  1063887.139 ± 20879.472  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_ambArray1SignalsError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_ambArray1SignalsError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 86754.407 ops/s
# Warmup Iteration   2: 205907.986 ops/s
# Warmup Iteration   3: 469285.550 ops/s
# Warmup Iteration   4: 505588.729 ops/s
# Warmup Iteration   5: 517327.752 ops/s
# Warmup Iteration   6: 494777.621 ops/s
# Warmup Iteration   7: 508973.981 ops/s
# Warmup Iteration   8: 504659.139 ops/s
# Warmup Iteration   9: 505903.295 ops/s
# Warmup Iteration  10: 499515.015 ops/s
# Warmup Iteration  11: 492709.260 ops/s
# Warmup Iteration  12: 513375.083 ops/s
# Warmup Iteration  13: 485738.808 ops/s
# Warmup Iteration  14: 497934.882 ops/s
# Warmup Iteration  15: 541116.631 ops/s
# Warmup Iteration  16: 487449.211 ops/s
# Warmup Iteration  17: 544098.034 ops/s
# Warmup Iteration  18: 546874.615 ops/s
# Warmup Iteration  19: 521610.742 ops/s
# Warmup Iteration  20: 542473.801 ops/s
# Warmup Iteration  21: 509854.151 ops/s
# Warmup Iteration  22: 545679.879 ops/s
# Warmup Iteration  23: 513602.560 ops/s
# Warmup Iteration  24: 532077.978 ops/s
# Warmup Iteration  25: 535863.199 ops/s
# Warmup Iteration  26: 524945.762 ops/s
# Warmup Iteration  27: 546928.193 ops/s
# Warmup Iteration  28: 532848.870 ops/s
# Warmup Iteration  29: 547034.205 ops/s
# Warmup Iteration  30: 543340.158 ops/s
Iteration   1: 517901.648 ops/s
Iteration   2: 541964.458 ops/s
Iteration   3: 522540.624 ops/s
Iteration   4: 538396.535 ops/s
Iteration   5: 550083.716 ops/s
Iteration   6: 524251.795 ops/s
Iteration   7: 542564.403 ops/s
Iteration   8: 527942.379 ops/s
Iteration   9: 547081.306 ops/s
Iteration  10: 537307.808 ops/s
Iteration  11: 511853.843 ops/s
Iteration  12: 521021.553 ops/s
Iteration  13: 555167.335 ops/s
Iteration  14: 499245.796 ops/s
Iteration  15: 533024.854 ops/s
Iteration  16: 513824.797 ops/s
Iteration  17: 543510.632 ops/s
Iteration  18: 535372.178 ops/s
Iteration  19: 532067.739 ops/s
Iteration  20: 544612.149 ops/s
Iteration  21: 520637.643 ops/s
Iteration  22: 551540.560 ops/s
Iteration  23: 522979.272 ops/s
Iteration  24: 549267.215 ops/s
Iteration  25: 520751.819 ops/s
Iteration  26: 546342.462 ops/s
Iteration  27: 536054.654 ops/s
Iteration  28: 505666.223 ops/s
Iteration  29: 550014.573 ops/s
Iteration  30: 515115.332 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_ambArray1SignalsError":
  531936.843 ±(99.9%) 10011.380 ops/s [Average]
  (min, avg, max) = (499245.796, 531936.843, 555167.335), stdev = 14984.563
  CI (99.9%): [521925.463, 541948.223] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score       Error  Units
MaybeTest._Benchmark.benchmark_ambArray1SignalsError  thrpt   30  531936.843 ± 10011.380  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_ambIterable1SignalsSuccess$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_ambIterable1SignalsSuccess

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 87501.710 ops/s
# Warmup Iteration   2: 410364.020 ops/s
# Warmup Iteration   3: 1479638.784 ops/s
# Warmup Iteration   4: 1561727.962 ops/s
# Warmup Iteration   5: 1609098.925 ops/s
# Warmup Iteration   6: 1529493.330 ops/s
# Warmup Iteration   7: 1602440.418 ops/s
# Warmup Iteration   8: 1443474.372 ops/s
# Warmup Iteration   9: 1557330.747 ops/s
# Warmup Iteration  10: 1532156.169 ops/s
# Warmup Iteration  11: 1491564.838 ops/s
# Warmup Iteration  12: 1645105.842 ops/s
# Warmup Iteration  13: 1600478.793 ops/s
# Warmup Iteration  14: 1632723.993 ops/s
# Warmup Iteration  15: 1651325.546 ops/s
# Warmup Iteration  16: 1571369.928 ops/s
# Warmup Iteration  17: 1668290.111 ops/s
# Warmup Iteration  18: 1548349.111 ops/s
# Warmup Iteration  19: 1639545.969 ops/s
# Warmup Iteration  20: 1613028.605 ops/s
# Warmup Iteration  21: 1624211.285 ops/s
# Warmup Iteration  22: 1679716.989 ops/s
# Warmup Iteration  23: 1547707.146 ops/s
# Warmup Iteration  24: 1637002.973 ops/s
# Warmup Iteration  25: 1551616.655 ops/s
# Warmup Iteration  26: 1604552.934 ops/s
# Warmup Iteration  27: 1593798.434 ops/s
# Warmup Iteration  28: 1577863.463 ops/s
# Warmup Iteration  29: 1634164.850 ops/s
# Warmup Iteration  30: 1552104.198 ops/s
Iteration   1: 1635517.542 ops/s
Iteration   2: 1575231.002 ops/s
Iteration   3: 1599235.486 ops/s
Iteration   4: 1609902.222 ops/s
Iteration   5: 1631364.241 ops/s
Iteration   6: 1588376.129 ops/s
Iteration   7: 1687678.401 ops/s
Iteration   8: 1553489.754 ops/s
Iteration   9: 1624517.796 ops/s
Iteration  10: 1568647.304 ops/s
Iteration  11: 1633520.760 ops/s
Iteration  12: 1634503.972 ops/s
Iteration  13: 1565095.031 ops/s
Iteration  14: 1674945.284 ops/s
Iteration  15: 1601740.776 ops/s
Iteration  16: 1632729.708 ops/s
Iteration  17: 1625837.124 ops/s
Iteration  18: 1554677.970 ops/s
Iteration  19: 1621986.810 ops/s
Iteration  20: 1613352.308 ops/s
Iteration  21: 1626225.152 ops/s
Iteration  22: 1655843.602 ops/s
Iteration  23: 1597311.861 ops/s
Iteration  24: 1347887.875 ops/s
Iteration  25: 1649346.023 ops/s
Iteration  26: 1565664.274 ops/s
Iteration  27: 1671225.056 ops/s
Iteration  28: 1526116.843 ops/s
Iteration  29: 1591258.792 ops/s
Iteration  30: 1591133.565 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_ambIterable1SignalsSuccess":
  1601812.089 ±(99.9%) 41093.662 ops/s [Average]
  (min, avg, max) = (1347887.875, 1601812.089, 1687678.401), stdev = 61507.063
  CI (99.9%): [1560718.427, 1642905.751] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
MaybeTest._Benchmark.benchmark_ambIterable1SignalsSuccess  thrpt   30  1601812.089 ± 41093.662  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_ambIterable2SignalsSuccess$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_ambIterable2SignalsSuccess

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 137885.483 ops/s
# Warmup Iteration   2: 374440.718 ops/s
# Warmup Iteration   3: 1102582.037 ops/s
# Warmup Iteration   4: 1307879.728 ops/s
# Warmup Iteration   5: 1601418.616 ops/s
# Warmup Iteration   6: 1591692.382 ops/s
# Warmup Iteration   7: 1555146.783 ops/s
# Warmup Iteration   8: 1631647.090 ops/s
# Warmup Iteration   9: 1617361.135 ops/s
# Warmup Iteration  10: 1577865.704 ops/s
# Warmup Iteration  11: 1598944.704 ops/s
# Warmup Iteration  12: 1592559.217 ops/s
# Warmup Iteration  13: 1584736.337 ops/s
# Warmup Iteration  14: 1605842.487 ops/s
# Warmup Iteration  15: 1577159.932 ops/s
# Warmup Iteration  16: 1644866.390 ops/s
# Warmup Iteration  17: 1609145.347 ops/s
# Warmup Iteration  18: 1575031.338 ops/s
# Warmup Iteration  19: 1606562.373 ops/s
# Warmup Iteration  20: 1588126.483 ops/s
# Warmup Iteration  21: 1622162.216 ops/s
# Warmup Iteration  22: 1597375.599 ops/s
# Warmup Iteration  23: 1639329.073 ops/s
# Warmup Iteration  24: 1584199.041 ops/s
# Warmup Iteration  25: 1562297.927 ops/s
# Warmup Iteration  26: 1643287.495 ops/s
# Warmup Iteration  27: 1569414.489 ops/s
# Warmup Iteration  28: 1594453.532 ops/s
# Warmup Iteration  29: 1647062.147 ops/s
# Warmup Iteration  30: 1595524.282 ops/s
Iteration   1: 1601509.599 ops/s
Iteration   2: 1577674.269 ops/s
Iteration   3: 1653054.234 ops/s
Iteration   4: 1544343.910 ops/s
Iteration   5: 1585534.631 ops/s
Iteration   6: 1677951.980 ops/s
Iteration   7: 1553416.857 ops/s
Iteration   8: 1649122.636 ops/s
Iteration   9: 1571022.405 ops/s
Iteration  10: 1637185.359 ops/s
Iteration  11: 1578460.274 ops/s
Iteration  12: 1591826.208 ops/s
Iteration  13: 1603143.772 ops/s
Iteration  14: 1572858.817 ops/s
Iteration  15: 1596815.333 ops/s
Iteration  16: 1616376.801 ops/s
Iteration  17: 1596534.624 ops/s
Iteration  18: 1625034.684 ops/s
Iteration  19: 1572277.994 ops/s
Iteration  20: 1615424.362 ops/s
Iteration  21: 1670083.746 ops/s
Iteration  22: 1533643.061 ops/s
Iteration  23: 1660772.102 ops/s
Iteration  24: 1515113.137 ops/s
Iteration  25: 1626736.171 ops/s
Iteration  26: 1679553.145 ops/s
Iteration  27: 1524179.619 ops/s
Iteration  28: 1675330.651 ops/s
Iteration  29: 1586617.958 ops/s
Iteration  30: 1610808.010 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_ambIterable2SignalsSuccess":
  1603413.545 ±(99.9%) 30725.278 ops/s [Average]
  (min, avg, max) = (1515113.137, 1603413.545, 1679553.145), stdev = 45988.153
  CI (99.9%): [1572688.267, 1634138.823] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
MaybeTest._Benchmark.benchmark_ambIterable2SignalsSuccess  thrpt   30  1603413.545 ± 30725.278  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_ambArray2SignalsError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_ambArray2SignalsError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 65896.079 ops/s
# Warmup Iteration   2: 157404.908 ops/s
# Warmup Iteration   3: 497057.638 ops/s
# Warmup Iteration   4: 500277.647 ops/s
# Warmup Iteration   5: 521768.479 ops/s
# Warmup Iteration   6: 502510.910 ops/s
# Warmup Iteration   7: 494981.724 ops/s
# Warmup Iteration   8: 506934.625 ops/s
# Warmup Iteration   9: 493745.020 ops/s
# Warmup Iteration  10: 497440.900 ops/s
# Warmup Iteration  11: 493090.974 ops/s
# Warmup Iteration  12: 505556.547 ops/s
# Warmup Iteration  13: 526870.695 ops/s
# Warmup Iteration  14: 499034.187 ops/s
# Warmup Iteration  15: 512732.852 ops/s
# Warmup Iteration  16: 507737.430 ops/s
# Warmup Iteration  17: 538021.466 ops/s
# Warmup Iteration  18: 521474.399 ops/s
# Warmup Iteration  19: 508844.109 ops/s
# Warmup Iteration  20: 537584.047 ops/s
# Warmup Iteration  21: 524811.546 ops/s
# Warmup Iteration  22: 530289.456 ops/s
# Warmup Iteration  23: 548048.472 ops/s
# Warmup Iteration  24: 505442.933 ops/s
# Warmup Iteration  25: 532310.938 ops/s
# Warmup Iteration  26: 532868.722 ops/s
# Warmup Iteration  27: 533807.754 ops/s
# Warmup Iteration  28: 521522.134 ops/s
# Warmup Iteration  29: 534779.610 ops/s
# Warmup Iteration  30: 529963.685 ops/s
Iteration   1: 516651.201 ops/s
Iteration   2: 517763.243 ops/s
Iteration   3: 530726.096 ops/s
Iteration   4: 549771.253 ops/s
Iteration   5: 515612.110 ops/s
Iteration   6: 545708.476 ops/s
Iteration   7: 541911.723 ops/s
Iteration   8: 531839.962 ops/s
Iteration   9: 535995.304 ops/s
Iteration  10: 489507.939 ops/s
Iteration  11: 549702.104 ops/s
Iteration  12: 518063.929 ops/s
Iteration  13: 543344.313 ops/s
Iteration  14: 521879.587 ops/s
Iteration  15: 519623.390 ops/s
Iteration  16: 560527.453 ops/s
Iteration  17: 522560.908 ops/s
Iteration  18: 552199.143 ops/s
Iteration  19: 429001.682 ops/s
Iteration  20: 540591.801 ops/s
Iteration  21: 516933.522 ops/s
Iteration  22: 552658.766 ops/s
Iteration  23: 533119.250 ops/s
Iteration  24: 531427.724 ops/s
Iteration  25: 534290.586 ops/s
Iteration  26: 530960.695 ops/s
Iteration  27: 539592.316 ops/s
Iteration  28: 526893.344 ops/s
Iteration  29: 540797.698 ops/s
Iteration  30: 517387.533 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_ambArray2SignalsError":
  528568.102 ±(99.9%) 16032.917 ops/s [Average]
  (min, avg, max) = (429001.682, 528568.102, 560527.453), stdev = 23997.317
  CI (99.9%): [512535.185, 544601.018] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score       Error  Units
MaybeTest._Benchmark.benchmark_ambArray2SignalsError  thrpt   30  528568.102 ± 16032.917  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_ambIterable2SignalsSuccessWithOverlap$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_ambIterable2SignalsSuccessWithOverlap

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 109036.079 ops/s
# Warmup Iteration   2: 508275.200 ops/s
# Warmup Iteration   3: 1023216.597 ops/s
# Warmup Iteration   4: 1393948.775 ops/s
# Warmup Iteration   5: 1656648.195 ops/s
# Warmup Iteration   6: 1546502.193 ops/s
# Warmup Iteration   7: 1562051.693 ops/s
# Warmup Iteration   8: 1612720.621 ops/s
# Warmup Iteration   9: 1601648.087 ops/s
# Warmup Iteration  10: 1574071.920 ops/s
# Warmup Iteration  11: 1557546.190 ops/s
# Warmup Iteration  12: 1598556.677 ops/s
# Warmup Iteration  13: 1580544.052 ops/s
# Warmup Iteration  14: 1637254.506 ops/s
# Warmup Iteration  15: 1522715.875 ops/s
# Warmup Iteration  16: 1581112.254 ops/s
# Warmup Iteration  17: 1613499.297 ops/s
# Warmup Iteration  18: 1534288.417 ops/s
# Warmup Iteration  19: 1594991.586 ops/s
# Warmup Iteration  20: 1660880.798 ops/s
# Warmup Iteration  21: 1533637.259 ops/s
# Warmup Iteration  22: 1605017.289 ops/s
# Warmup Iteration  23: 1575784.457 ops/s
# Warmup Iteration  24: 1612002.822 ops/s
# Warmup Iteration  25: 1554035.970 ops/s
# Warmup Iteration  26: 1580853.078 ops/s
# Warmup Iteration  27: 1605149.893 ops/s
# Warmup Iteration  28: 1574016.743 ops/s
# Warmup Iteration  29: 1580939.293 ops/s
# Warmup Iteration  30: 1601175.038 ops/s
Iteration   1: 1664768.602 ops/s
Iteration   2: 1594904.871 ops/s
Iteration   3: 1568154.575 ops/s
Iteration   4: 1542716.868 ops/s
Iteration   5: 1658441.416 ops/s
Iteration   6: 1567695.537 ops/s
Iteration   7: 1551279.227 ops/s
Iteration   8: 1629347.312 ops/s
Iteration   9: 1564346.840 ops/s
Iteration  10: 1643310.914 ops/s
Iteration  11: 1522022.430 ops/s
Iteration  12: 1622038.101 ops/s
Iteration  13: 1528799.475 ops/s
Iteration  14: 1565058.922 ops/s
Iteration  15: 1580092.092 ops/s
Iteration  16: 1510974.884 ops/s
Iteration  17: 1547611.251 ops/s
Iteration  18: 1569456.329 ops/s
Iteration  19: 1552916.435 ops/s
Iteration  20: 1681860.041 ops/s
Iteration  21: 1558294.792 ops/s
Iteration  22: 1630552.164 ops/s
Iteration  23: 1558059.676 ops/s
Iteration  24: 1620711.939 ops/s
Iteration  25: 1596482.918 ops/s
Iteration  26: 1577010.497 ops/s
Iteration  27: 1622457.509 ops/s
Iteration  28: 1568718.209 ops/s
Iteration  29: 1588644.408 ops/s
Iteration  30: 1631892.204 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_ambIterable2SignalsSuccessWithOverlap":
  1587287.348 ±(99.9%) 29441.278 ops/s [Average]
  (min, avg, max) = (1510974.884, 1587287.348, 1681860.041), stdev = 44066.322
  CI (99.9%): [1557846.070, 1616728.626] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
MaybeTest._Benchmark.benchmark_ambIterable2SignalsSuccessWithOverlap  thrpt   30  1587287.348 ± 29441.278  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithFlowableTest._Benchmark.benchmark_boundaryOnError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithFlowableTest._Benchmark.benchmark_boundaryOnError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 15649.149 ops/s
# Warmup Iteration   2: 55067.697 ops/s
# Warmup Iteration   3: 99114.625 ops/s
# Warmup Iteration   4: 181395.735 ops/s
# Warmup Iteration   5: 189657.477 ops/s
# Warmup Iteration   6: 177957.444 ops/s
# Warmup Iteration   7: 175832.796 ops/s
# Warmup Iteration   8: 185000.474 ops/s
# Warmup Iteration   9: 179906.027 ops/s
# Warmup Iteration  10: 180133.392 ops/s
# Warmup Iteration  11: 179788.062 ops/s
# Warmup Iteration  12: 184311.873 ops/s
# Warmup Iteration  13: 176938.288 ops/s
# Warmup Iteration  14: 185156.237 ops/s
# Warmup Iteration  15: 183252.796 ops/s
# Warmup Iteration  16: 183940.148 ops/s
# Warmup Iteration  17: 185444.798 ops/s
# Warmup Iteration  18: 193839.589 ops/s
# Warmup Iteration  19: 182642.502 ops/s
# Warmup Iteration  20: 188496.497 ops/s
# Warmup Iteration  21: 193093.455 ops/s
# Warmup Iteration  22: 193368.250 ops/s
# Warmup Iteration  23: 182259.470 ops/s
# Warmup Iteration  24: 177275.953 ops/s
# Warmup Iteration  25: 193452.824 ops/s
# Warmup Iteration  26: 191939.522 ops/s
# Warmup Iteration  27: 190329.663 ops/s
# Warmup Iteration  28: 182473.539 ops/s
# Warmup Iteration  29: 189976.000 ops/s
# Warmup Iteration  30: 193696.507 ops/s
Iteration   1: 185931.733 ops/s
Iteration   2: 193759.141 ops/s
Iteration   3: 188542.506 ops/s
Iteration   4: 183201.653 ops/s
Iteration   5: 193650.502 ops/s
Iteration   6: 190629.459 ops/s
Iteration   7: 185968.239 ops/s
Iteration   8: 184278.018 ops/s
Iteration   9: 189669.147 ops/s
Iteration  10: 195604.829 ops/s
Iteration  11: 187868.647 ops/s
Iteration  12: 190403.345 ops/s
Iteration  13: 149814.995 ops/s
Iteration  14: 181196.919 ops/s
Iteration  15: 199674.708 ops/s
Iteration  16: 195088.584 ops/s
Iteration  17: 187744.269 ops/s
Iteration  18: 192107.059 ops/s
Iteration  19: 190556.060 ops/s
Iteration  20: 188994.316 ops/s
Iteration  21: 198387.502 ops/s
Iteration  22: 184166.196 ops/s
Iteration  23: 196688.575 ops/s
Iteration  24: 187867.474 ops/s
Iteration  25: 188066.509 ops/s
Iteration  26: 190361.870 ops/s
Iteration  27: 194213.379 ops/s
Iteration  28: 190881.872 ops/s
Iteration  29: 189360.767 ops/s
Iteration  30: 195092.826 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithFlowableTest._Benchmark.benchmark_boundaryOnError":
  188992.370 ±(99.9%) 5782.829 ops/s [Average]
  (min, avg, max) = (149814.995, 188992.370, 199674.708), stdev = 8655.467
  CI (99.9%): [183209.541, 194775.199] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score      Error  Units
FlowableWindowWithFlowableTest._Benchmark.benchmark_boundaryOnError  thrpt   30  188992.370 ± 5782.829  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_cancellingWindowCancelsUpstreamOverlap$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_cancellingWindowCancelsUpstreamOverlap

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 33175.250 ops/s
# Warmup Iteration   2: 126342.477 ops/s
# Warmup Iteration   3: 192618.738 ops/s
# Warmup Iteration   4: 457966.730 ops/s
# Warmup Iteration   5: 583150.081 ops/s
# Warmup Iteration   6: 705219.810 ops/s
# Warmup Iteration   7: 735136.674 ops/s
# Warmup Iteration   8: 691310.826 ops/s
# Warmup Iteration   9: 722524.885 ops/s
# Warmup Iteration  10: 701527.299 ops/s
# Warmup Iteration  11: 698571.013 ops/s
# Warmup Iteration  12: 718469.648 ops/s
# Warmup Iteration  13: 688222.547 ops/s
# Warmup Iteration  14: 737814.127 ops/s
# Warmup Iteration  15: 693354.901 ops/s
# Warmup Iteration  16: 714594.736 ops/s
# Warmup Iteration  17: 719344.837 ops/s
# Warmup Iteration  18: 687455.535 ops/s
# Warmup Iteration  19: 739695.537 ops/s
# Warmup Iteration  20: 681881.539 ops/s
# Warmup Iteration  21: 743845.192 ops/s
# Warmup Iteration  22: 700249.962 ops/s
# Warmup Iteration  23: 731348.749 ops/s
# Warmup Iteration  24: 691410.686 ops/s
# Warmup Iteration  25: 706346.936 ops/s
# Warmup Iteration  26: 694449.404 ops/s
# Warmup Iteration  27: 691704.839 ops/s
# Warmup Iteration  28: 704569.885 ops/s
# Warmup Iteration  29: 722498.335 ops/s
# Warmup Iteration  30: 711901.560 ops/s
Iteration   1: 720441.235 ops/s
Iteration   2: 711370.405 ops/s
Iteration   3: 724780.338 ops/s
Iteration   4: 722214.258 ops/s
Iteration   5: 706290.275 ops/s
Iteration   6: 735690.914 ops/s
Iteration   7: 688093.832 ops/s
Iteration   8: 725159.385 ops/s
Iteration   9: 674546.260 ops/s
Iteration  10: 724196.186 ops/s
Iteration  11: 692592.843 ops/s
Iteration  12: 696390.070 ops/s
Iteration  13: 726727.935 ops/s
Iteration  14: 683243.235 ops/s
Iteration  15: 690173.232 ops/s
Iteration  16: 707138.938 ops/s
Iteration  17: 709702.819 ops/s
Iteration  18: 732380.005 ops/s
Iteration  19: 737629.343 ops/s
Iteration  20: 693061.952 ops/s
Iteration  21: 733164.817 ops/s
Iteration  22: 688416.550 ops/s
Iteration  23: 731230.894 ops/s
Iteration  24: 702821.774 ops/s
Iteration  25: 685266.701 ops/s
Iteration  26: 730662.240 ops/s
Iteration  27: 711029.029 ops/s
Iteration  28: 724501.096 ops/s
Iteration  29: 708032.038 ops/s
Iteration  30: 716237.571 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_cancellingWindowCancelsUpstreamOverlap":
  711106.206 ±(99.9%) 12103.745 ops/s [Average]
  (min, avg, max) = (674546.260, 711106.206, 737629.343), stdev = 18116.317
  CI (99.9%): [699002.461, 723209.950] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                Mode  Cnt       Score       Error  Units
FlowableWindowWithSizeTest._Benchmark.benchmark_cancellingWindowCancelsUpstreamOverlap  thrpt   30  711106.206 ± 12103.745  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupByTest._Benchmark.benchmark_reentrantComplete$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupByTest._Benchmark.benchmark_reentrantComplete

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 45188.065 ops/s
# Warmup Iteration   2: 235419.024 ops/s
# Warmup Iteration   3: 556524.047 ops/s
# Warmup Iteration   4: 674019.576 ops/s
# Warmup Iteration   5: 805619.710 ops/s
# Warmup Iteration   6: 818461.352 ops/s
# Warmup Iteration   7: 816438.366 ops/s
# Warmup Iteration   8: 816010.107 ops/s
# Warmup Iteration   9: 805637.324 ops/s
# Warmup Iteration  10: 808033.558 ops/s
# Warmup Iteration  11: 790245.730 ops/s
# Warmup Iteration  12: 824523.098 ops/s
# Warmup Iteration  13: 790322.163 ops/s
# Warmup Iteration  14: 809403.020 ops/s
# Warmup Iteration  15: 836648.832 ops/s
# Warmup Iteration  16: 764790.320 ops/s
# Warmup Iteration  17: 785065.264 ops/s
# Warmup Iteration  18: 825620.993 ops/s
# Warmup Iteration  19: 779304.332 ops/s
# Warmup Iteration  20: 830542.547 ops/s
# Warmup Iteration  21: 789363.800 ops/s
# Warmup Iteration  22: 798847.729 ops/s
# Warmup Iteration  23: 852242.182 ops/s
# Warmup Iteration  24: 791140.973 ops/s
# Warmup Iteration  25: 802200.948 ops/s
# Warmup Iteration  26: 792743.924 ops/s
# Warmup Iteration  27: 806952.316 ops/s
# Warmup Iteration  28: 809920.331 ops/s
# Warmup Iteration  29: 780756.003 ops/s
# Warmup Iteration  30: 791087.794 ops/s
Iteration   1: 837998.520 ops/s
Iteration   2: 781296.009 ops/s
Iteration   3: 784847.252 ops/s
Iteration   4: 832668.986 ops/s
Iteration   5: 798274.460 ops/s
Iteration   6: 816822.139 ops/s
Iteration   7: 819691.230 ops/s
Iteration   8: 648095.446 ops/s
Iteration   9: 825352.137 ops/s
Iteration  10: 814466.830 ops/s
Iteration  11: 823358.107 ops/s
Iteration  12: 774015.800 ops/s
Iteration  13: 825506.081 ops/s
Iteration  14: 751854.416 ops/s
Iteration  15: 802018.677 ops/s
Iteration  16: 814542.396 ops/s
Iteration  17: 808850.643 ops/s
Iteration  18: 797924.539 ops/s
Iteration  19: 829866.741 ops/s
Iteration  20: 813352.889 ops/s
Iteration  21: 784929.170 ops/s
Iteration  22: 802226.266 ops/s
Iteration  23: 837887.246 ops/s
Iteration  24: 769313.191 ops/s
Iteration  25: 840066.080 ops/s
Iteration  26: 799865.299 ops/s
Iteration  27: 799422.246 ops/s
Iteration  28: 822378.059 ops/s
Iteration  29: 764319.891 ops/s
Iteration  30: 822941.774 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupByTest._Benchmark.benchmark_reentrantComplete":
  801471.751 ±(99.9%) 24719.621 ops/s [Average]
  (min, avg, max) = (648095.446, 801471.751, 840066.080), stdev = 36999.168
  CI (99.9%): [776752.129, 826191.372] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score       Error  Units
FlowableGroupByTest._Benchmark.benchmark_reentrantComplete  thrpt   30  801471.751 ± 24719.621  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.schedulers.SchedulerWhenTest._Benchmark.benchmark_asyncMaxConcurrent$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.schedulers.SchedulerWhenTest._Benchmark.benchmark_asyncMaxConcurrent

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 4726.968 ops/s
# Warmup Iteration   2: 18981.481 ops/s
# Warmup Iteration   3: 38695.227 ops/s
# Warmup Iteration   4: 58891.530 ops/s
# Warmup Iteration   5: 114113.933 ops/s
# Warmup Iteration   6: 117679.422 ops/s
# Warmup Iteration   7: 123489.925 ops/s
# Warmup Iteration   8: 117324.049 ops/s
# Warmup Iteration   9: 125875.466 ops/s
# Warmup Iteration  10: 125899.885 ops/s
# Warmup Iteration  11: 131534.991 ops/s
# Warmup Iteration  12: 129047.834 ops/s
# Warmup Iteration  13: 125841.297 ops/s
# Warmup Iteration  14: 133249.525 ops/s
# Warmup Iteration  15: 126959.717 ops/s
# Warmup Iteration  16: 133168.954 ops/s
# Warmup Iteration  17: 130250.257 ops/s
# Warmup Iteration  18: 125384.231 ops/s
# Warmup Iteration  19: 130125.649 ops/s
# Warmup Iteration  20: 126561.017 ops/s
# Warmup Iteration  21: 130500.778 ops/s
# Warmup Iteration  22: 132962.004 ops/s
# Warmup Iteration  23: 123223.349 ops/s
# Warmup Iteration  24: 129522.255 ops/s
# Warmup Iteration  25: 129545.112 ops/s
# Warmup Iteration  26: 128941.688 ops/s
# Warmup Iteration  27: 130993.209 ops/s
# Warmup Iteration  28: 125005.147 ops/s
# Warmup Iteration  29: 134038.729 ops/s
# Warmup Iteration  30: 129888.263 ops/s
Iteration   1: 124316.498 ops/s
Iteration   2: 133219.407 ops/s
Iteration   3: 127065.241 ops/s
Iteration   4: 123366.154 ops/s
Iteration   5: 133995.954 ops/s
Iteration   6: 124703.529 ops/s
Iteration   7: 130056.451 ops/s
Iteration   8: 124025.060 ops/s
Iteration   9: 131714.578 ops/s
Iteration  10: 129273.868 ops/s
Iteration  11: 108959.519 ops/s
Iteration  12: 122056.720 ops/s
Iteration  13: 127120.003 ops/s
Iteration  14: 126208.524 ops/s
Iteration  15: 128915.315 ops/s
Iteration  16: 126726.166 ops/s
Iteration  17: 129304.703 ops/s
Iteration  18: 124547.489 ops/s
Iteration  19: 133078.834 ops/s
Iteration  20: 128060.423 ops/s
Iteration  21: 128141.026 ops/s
Iteration  22: 124053.616 ops/s
Iteration  23: 133943.945 ops/s
Iteration  24: 125386.428 ops/s
Iteration  25: 127182.591 ops/s
Iteration  26: 127825.156 ops/s
Iteration  27: 127834.792 ops/s
Iteration  28: 131800.030 ops/s
Iteration  29: 131238.100 ops/s
Iteration  30: 125941.293 ops/s


Result "io.reactivex.rxjava3.internal.schedulers.SchedulerWhenTest._Benchmark.benchmark_asyncMaxConcurrent":
  127335.380 ±(99.9%) 3195.848 ops/s [Average]
  (min, avg, max) = (108959.519, 127335.380, 133995.954), stdev = 4783.395
  CI (99.9%): [124139.532, 130531.228] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
SchedulerWhenTest._Benchmark.benchmark_asyncMaxConcurrent  thrpt   30  127335.380 ± 3195.848  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupByTest._Benchmark.benchmark_mapFactoryExpiryCompletesGroupedFlowable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupByTest._Benchmark.benchmark_mapFactoryExpiryCompletesGroupedFlowable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2066.567 ops/s
# Warmup Iteration   2: 48067.273 ops/s
# Warmup Iteration   3: 80444.399 ops/s
# Warmup Iteration   4: 123959.182 ops/s
# Warmup Iteration   5: 213309.586 ops/s
# Warmup Iteration   6: 266294.185 ops/s
# Warmup Iteration   7: 323584.624 ops/s
# Warmup Iteration   8: 327220.879 ops/s
# Warmup Iteration   9: 322950.555 ops/s
# Warmup Iteration  10: 306030.004 ops/s
# Warmup Iteration  11: 327641.851 ops/s
# Warmup Iteration  12: 307401.855 ops/s
# Warmup Iteration  13: 329130.137 ops/s
# Warmup Iteration  14: 297496.062 ops/s
# Warmup Iteration  15: 314989.762 ops/s
# Warmup Iteration  16: 323420.272 ops/s
# Warmup Iteration  17: 317310.091 ops/s
# Warmup Iteration  18: 325214.042 ops/s
# Warmup Iteration  19: 309365.866 ops/s
# Warmup Iteration  20: 320458.298 ops/s
# Warmup Iteration  21: 331090.613 ops/s
# Warmup Iteration  22: 312975.117 ops/s
# Warmup Iteration  23: 323535.421 ops/s
# Warmup Iteration  24: 332431.388 ops/s
# Warmup Iteration  25: 320842.727 ops/s
# Warmup Iteration  26: 326313.983 ops/s
# Warmup Iteration  27: 327560.631 ops/s
# Warmup Iteration  28: 316981.819 ops/s
# Warmup Iteration  29: 330864.507 ops/s
# Warmup Iteration  30: 311710.198 ops/s
Iteration   1: 331638.057 ops/s
Iteration   2: 325808.684 ops/s
Iteration   3: 307318.370 ops/s
Iteration   4: 330720.189 ops/s
Iteration   5: 327742.581 ops/s
Iteration   6: 307914.996 ops/s
Iteration   7: 326657.995 ops/s
Iteration   8: 315173.378 ops/s
Iteration   9: 317406.516 ops/s
Iteration  10: 309025.206 ops/s
Iteration  11: 329130.555 ops/s
Iteration  12: 313422.642 ops/s
Iteration  13: 325228.759 ops/s
Iteration  14: 333191.264 ops/s
Iteration  15: 331927.194 ops/s
Iteration  16: 323360.419 ops/s
Iteration  17: 321615.156 ops/s
Iteration  18: 323006.680 ops/s
Iteration  19: 313052.105 ops/s
Iteration  20: 331527.226 ops/s
Iteration  21: 315659.115 ops/s
Iteration  22: 308740.336 ops/s
Iteration  23: 327278.890 ops/s
Iteration  24: 322917.552 ops/s
Iteration  25: 313684.580 ops/s
Iteration  26: 326502.664 ops/s
Iteration  27: 320221.825 ops/s
Iteration  28: 329058.985 ops/s
Iteration  29: 326179.011 ops/s
Iteration  30: 319823.964 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupByTest._Benchmark.benchmark_mapFactoryExpiryCompletesGroupedFlowable":
  321831.163 ±(99.9%) 5305.983 ops/s [Average]
  (min, avg, max) = (307318.370, 321831.163, 333191.264), stdev = 7941.746
  CI (99.9%): [316525.180, 327137.146] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           Mode  Cnt       Score      Error  Units
FlowableGroupByTest._Benchmark.benchmark_mapFactoryExpiryCompletesGroupedFlowable  thrpt   30  321831.163 ± 5305.983  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableToFlowableTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableToFlowableTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 133997.805 ops/s
# Warmup Iteration   2: 447212.151 ops/s
# Warmup Iteration   3: 512232.604 ops/s
# Warmup Iteration   4: 483489.838 ops/s
# Warmup Iteration   5: 506342.357 ops/s
# Warmup Iteration   6: 484011.700 ops/s
# Warmup Iteration   7: 517474.248 ops/s
# Warmup Iteration   8: 509832.997 ops/s
# Warmup Iteration   9: 480712.424 ops/s
# Warmup Iteration  10: 513021.569 ops/s
# Warmup Iteration  11: 478932.311 ops/s
# Warmup Iteration  12: 515361.800 ops/s
# Warmup Iteration  13: 525361.895 ops/s
# Warmup Iteration  14: 498721.906 ops/s
# Warmup Iteration  15: 524884.834 ops/s
# Warmup Iteration  16: 490947.961 ops/s
# Warmup Iteration  17: 540498.329 ops/s
# Warmup Iteration  18: 545364.657 ops/s
# Warmup Iteration  19: 519939.854 ops/s
# Warmup Iteration  20: 532329.210 ops/s
# Warmup Iteration  21: 514430.008 ops/s
# Warmup Iteration  22: 530166.544 ops/s
# Warmup Iteration  23: 547495.605 ops/s
# Warmup Iteration  24: 515261.596 ops/s
# Warmup Iteration  25: 522224.170 ops/s
# Warmup Iteration  26: 539725.875 ops/s
# Warmup Iteration  27: 517047.151 ops/s
# Warmup Iteration  28: 533855.419 ops/s
# Warmup Iteration  29: 407133.131 ops/s
# Warmup Iteration  30: 514873.716 ops/s
Iteration   1: 545756.493 ops/s
Iteration   2: 527139.034 ops/s
Iteration   3: 534149.829 ops/s
Iteration   4: 528331.544 ops/s
Iteration   5: 530046.727 ops/s
Iteration   6: 533717.651 ops/s
Iteration   7: 518569.193 ops/s
Iteration   8: 543290.459 ops/s
Iteration   9: 516967.425 ops/s
Iteration  10: 552487.008 ops/s
Iteration  11: 489477.238 ops/s
Iteration  12: 548639.948 ops/s
Iteration  13: 526125.517 ops/s
Iteration  14: 540238.569 ops/s
Iteration  15: 525811.778 ops/s
Iteration  16: 521559.838 ops/s
Iteration  17: 522650.426 ops/s
Iteration  18: 516666.859 ops/s
Iteration  19: 560053.173 ops/s
Iteration  20: 525158.891 ops/s
Iteration  21: 526548.126 ops/s
Iteration  22: 544176.820 ops/s
Iteration  23: 527467.231 ops/s
Iteration  24: 543709.323 ops/s
Iteration  25: 516665.852 ops/s
Iteration  26: 546690.626 ops/s
Iteration  27: 520934.302 ops/s
Iteration  28: 527815.616 ops/s
Iteration  29: 546944.142 ops/s
Iteration  30: 509531.501 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableToFlowableTest._Benchmark.benchmark_doubleOnSubscribe":
  530577.371 ±(99.9%) 9828.871 ops/s [Average]
  (min, avg, max) = (489477.238, 530577.371, 560053.173), stdev = 14711.392
  CI (99.9%): [520748.500, 540406.242] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
CompletableToFlowableTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  530577.371 ± 9828.871  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleTakeUntilTest._Benchmark.benchmark_otherOnCompleteCompletable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleTakeUntilTest._Benchmark.benchmark_otherOnCompleteCompletable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 46527.752 ops/s
# Warmup Iteration   2: 460274.483 ops/s
# Warmup Iteration   3: 491171.966 ops/s
# Warmup Iteration   4: 542655.475 ops/s
# Warmup Iteration   5: 573768.901 ops/s
# Warmup Iteration   6: 570966.285 ops/s
# Warmup Iteration   7: 551529.055 ops/s
# Warmup Iteration   8: 565946.722 ops/s
# Warmup Iteration   9: 560164.266 ops/s
# Warmup Iteration  10: 537189.203 ops/s
# Warmup Iteration  11: 569845.933 ops/s
# Warmup Iteration  12: 556867.527 ops/s
# Warmup Iteration  13: 559753.578 ops/s
# Warmup Iteration  14: 543914.894 ops/s
# Warmup Iteration  15: 555557.212 ops/s
# Warmup Iteration  16: 562263.434 ops/s
# Warmup Iteration  17: 577957.482 ops/s
# Warmup Iteration  18: 591352.552 ops/s
# Warmup Iteration  19: 567434.736 ops/s
# Warmup Iteration  20: 594137.164 ops/s
# Warmup Iteration  21: 598921.405 ops/s
# Warmup Iteration  22: 561885.122 ops/s
# Warmup Iteration  23: 594708.060 ops/s
# Warmup Iteration  24: 576397.259 ops/s
# Warmup Iteration  25: 599904.497 ops/s
# Warmup Iteration  26: 567764.646 ops/s
# Warmup Iteration  27: 581143.252 ops/s
# Warmup Iteration  28: 596028.434 ops/s
# Warmup Iteration  29: 579508.897 ops/s
# Warmup Iteration  30: 582149.703 ops/s
Iteration   1: 559581.924 ops/s
Iteration   2: 606987.815 ops/s
Iteration   3: 578241.711 ops/s
Iteration   4: 586297.788 ops/s
Iteration   5: 584992.173 ops/s
Iteration   6: 561250.488 ops/s
Iteration   7: 602163.228 ops/s
Iteration   8: 569309.603 ops/s
Iteration   9: 595921.156 ops/s
Iteration  10: 579484.492 ops/s
Iteration  11: 573293.275 ops/s
Iteration  12: 577861.112 ops/s
Iteration  13: 589633.154 ops/s
Iteration  14: 571630.120 ops/s
Iteration  15: 601839.644 ops/s
Iteration  16: 574375.267 ops/s
Iteration  17: 582871.650 ops/s
Iteration  18: 582681.314 ops/s
Iteration  19: 586436.043 ops/s
Iteration  20: 612196.289 ops/s
Iteration  21: 593776.884 ops/s
Iteration  22: 560893.149 ops/s
Iteration  23: 614016.480 ops/s
Iteration  24: 561313.246 ops/s
Iteration  25: 604475.982 ops/s
Iteration  26: 604195.827 ops/s
Iteration  27: 561582.924 ops/s
Iteration  28: 615723.447 ops/s
Iteration  29: 574184.682 ops/s
Iteration  30: 595273.109 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntilTest._Benchmark.benchmark_otherOnCompleteCompletable":
  585416.132 ±(99.9%) 11429.036 ops/s [Average]
  (min, avg, max) = (559581.924, 585416.132, 615723.447), stdev = 17106.444
  CI (99.9%): [573987.096, 596845.169] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score       Error  Units
SingleTakeUntilTest._Benchmark.benchmark_otherOnCompleteCompletable  thrpt   30  585416.132 ± 11429.036  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleTakeUntilTest._Benchmark.benchmark_otherErrorCompletable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleTakeUntilTest._Benchmark.benchmark_otherErrorCompletable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 76554.635 ops/s
# Warmup Iteration   2: 277548.703 ops/s
# Warmup Iteration   3: 531397.890 ops/s
# Warmup Iteration   4: 501824.026 ops/s
# Warmup Iteration   5: 613790.624 ops/s
# Warmup Iteration   6: 559755.123 ops/s
# Warmup Iteration   7: 606191.596 ops/s
# Warmup Iteration   8: 613766.234 ops/s
# Warmup Iteration   9: 604994.985 ops/s
# Warmup Iteration  10: 621708.867 ops/s
# Warmup Iteration  11: 600012.321 ops/s
# Warmup Iteration  12: 596886.559 ops/s
# Warmup Iteration  13: 614890.687 ops/s
# Warmup Iteration  14: 626697.596 ops/s
# Warmup Iteration  15: 594355.773 ops/s
# Warmup Iteration  16: 626009.576 ops/s
# Warmup Iteration  17: 636016.445 ops/s
# Warmup Iteration  18: 655932.718 ops/s
# Warmup Iteration  19: 620377.368 ops/s
# Warmup Iteration  20: 654239.321 ops/s
# Warmup Iteration  21: 661128.694 ops/s
# Warmup Iteration  22: 621432.373 ops/s
# Warmup Iteration  23: 657173.229 ops/s
# Warmup Iteration  24: 527447.913 ops/s
# Warmup Iteration  25: 597098.780 ops/s
# Warmup Iteration  26: 661152.257 ops/s
# Warmup Iteration  27: 645359.712 ops/s
# Warmup Iteration  28: 637077.430 ops/s
# Warmup Iteration  29: 665194.474 ops/s
# Warmup Iteration  30: 624014.985 ops/s
Iteration   1: 668468.604 ops/s
Iteration   2: 623946.975 ops/s
Iteration   3: 649331.156 ops/s
Iteration   4: 652267.887 ops/s
Iteration   5: 625254.103 ops/s
Iteration   6: 670751.744 ops/s
Iteration   7: 656390.226 ops/s
Iteration   8: 638398.939 ops/s
Iteration   9: 656790.318 ops/s
Iteration  10: 642765.916 ops/s
Iteration  11: 662444.571 ops/s
Iteration  12: 630068.804 ops/s
Iteration  13: 643860.458 ops/s
Iteration  14: 668846.333 ops/s
Iteration  15: 645849.814 ops/s
Iteration  16: 642626.007 ops/s
Iteration  17: 657622.340 ops/s
Iteration  18: 633239.998 ops/s
Iteration  19: 661721.189 ops/s
Iteration  20: 662608.487 ops/s
Iteration  21: 625569.473 ops/s
Iteration  22: 642632.169 ops/s
Iteration  23: 635199.722 ops/s
Iteration  24: 625802.142 ops/s
Iteration  25: 631804.081 ops/s
Iteration  26: 655077.437 ops/s
Iteration  27: 620509.621 ops/s
Iteration  28: 645888.497 ops/s
Iteration  29: 627107.904 ops/s
Iteration  30: 628433.273 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntilTest._Benchmark.benchmark_otherErrorCompletable":
  644375.940 ±(99.9%) 10180.702 ops/s [Average]
  (min, avg, max) = (620509.621, 644375.940, 670751.744), stdev = 15237.996
  CI (99.9%): [634195.238, 654556.641] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score       Error  Units
SingleTakeUntilTest._Benchmark.benchmark_otherErrorCompletable  thrpt   30  644375.940 ± 10180.702  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleTakeUntilTest._Benchmark.benchmark_mainErrorCompletable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleTakeUntilTest._Benchmark.benchmark_mainErrorCompletable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 42456.826 ops/s
# Warmup Iteration   2: 460077.997 ops/s
# Warmup Iteration   3: 552910.552 ops/s
# Warmup Iteration   4: 629999.378 ops/s
# Warmup Iteration   5: 618649.471 ops/s
# Warmup Iteration   6: 602691.512 ops/s
# Warmup Iteration   7: 633378.535 ops/s
# Warmup Iteration   8: 594212.782 ops/s
# Warmup Iteration   9: 647275.939 ops/s
# Warmup Iteration  10: 567462.589 ops/s
# Warmup Iteration  11: 623733.588 ops/s
# Warmup Iteration  12: 637116.686 ops/s
# Warmup Iteration  13: 599622.099 ops/s
# Warmup Iteration  14: 616339.973 ops/s
# Warmup Iteration  15: 637465.243 ops/s
# Warmup Iteration  16: 598044.705 ops/s
# Warmup Iteration  17: 654390.952 ops/s
# Warmup Iteration  18: 664044.085 ops/s
# Warmup Iteration  19: 635556.081 ops/s
# Warmup Iteration  20: 666715.924 ops/s
# Warmup Iteration  21: 647583.996 ops/s
# Warmup Iteration  22: 657917.531 ops/s
# Warmup Iteration  23: 637536.321 ops/s
# Warmup Iteration  24: 646118.846 ops/s
# Warmup Iteration  25: 636552.646 ops/s
# Warmup Iteration  26: 643701.510 ops/s
# Warmup Iteration  27: 670784.496 ops/s
# Warmup Iteration  28: 653326.860 ops/s
# Warmup Iteration  29: 628155.271 ops/s
# Warmup Iteration  30: 675737.315 ops/s
Iteration   1: 485154.081 ops/s
Iteration   2: 618109.847 ops/s
Iteration   3: 683927.026 ops/s
Iteration   4: 631044.989 ops/s
Iteration   5: 650588.331 ops/s
Iteration   6: 670232.627 ops/s
Iteration   7: 619676.884 ops/s
Iteration   8: 683675.169 ops/s
Iteration   9: 598891.316 ops/s
Iteration  10: 668314.287 ops/s
Iteration  11: 657210.642 ops/s
Iteration  12: 649720.174 ops/s
Iteration  13: 650406.524 ops/s
Iteration  14: 653209.995 ops/s
Iteration  15: 639492.672 ops/s
Iteration  16: 594341.127 ops/s
Iteration  17: 667510.562 ops/s
Iteration  18: 665531.843 ops/s
Iteration  19: 664738.884 ops/s
Iteration  20: 680572.605 ops/s
Iteration  21: 636908.511 ops/s
Iteration  22: 670010.449 ops/s
Iteration  23: 644353.555 ops/s
Iteration  24: 673532.891 ops/s
Iteration  25: 642278.891 ops/s
Iteration  26: 654953.064 ops/s
Iteration  27: 649015.600 ops/s
Iteration  28: 642748.356 ops/s
Iteration  29: 645984.916 ops/s
Iteration  30: 640470.628 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntilTest._Benchmark.benchmark_mainErrorCompletable":
  644420.215 ±(99.9%) 24983.390 ops/s [Average]
  (min, avg, max) = (485154.081, 644420.215, 683927.026), stdev = 37393.964
  CI (99.9%): [619436.825, 669403.605] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score       Error  Units
SingleTakeUntilTest._Benchmark.benchmark_mainErrorCompletable  thrpt   30  644420.215 ± 24983.390  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleTakeUntilTest._Benchmark.benchmark_untilCompletableMainSuccess$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleTakeUntilTest._Benchmark.benchmark_untilCompletableMainSuccess

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 244751.906 ops/s
# Warmup Iteration   2: 1671020.060 ops/s
# Warmup Iteration   3: 2662826.986 ops/s
# Warmup Iteration   4: 2824560.021 ops/s
# Warmup Iteration   5: 2854617.683 ops/s
# Warmup Iteration   6: 2679882.513 ops/s
# Warmup Iteration   7: 2783127.684 ops/s
# Warmup Iteration   8: 2673277.805 ops/s
# Warmup Iteration   9: 2582772.982 ops/s
# Warmup Iteration  10: 2813157.363 ops/s
# Warmup Iteration  11: 2834833.669 ops/s
# Warmup Iteration  12: 2889933.610 ops/s
# Warmup Iteration  13: 2946196.983 ops/s
# Warmup Iteration  14: 2708524.283 ops/s
# Warmup Iteration  15: 2898656.152 ops/s
# Warmup Iteration  16: 2849887.327 ops/s
# Warmup Iteration  17: 2900011.474 ops/s
# Warmup Iteration  18: 2802538.714 ops/s
# Warmup Iteration  19: 2854556.908 ops/s
# Warmup Iteration  20: 2834573.279 ops/s
# Warmup Iteration  21: 2839682.894 ops/s
# Warmup Iteration  22: 2783012.826 ops/s
# Warmup Iteration  23: 2780131.104 ops/s
# Warmup Iteration  24: 2819397.726 ops/s
# Warmup Iteration  25: 2811204.578 ops/s
# Warmup Iteration  26: 2768513.447 ops/s
# Warmup Iteration  27: 2825968.355 ops/s
# Warmup Iteration  28: 2827934.103 ops/s
# Warmup Iteration  29: 2828561.530 ops/s
# Warmup Iteration  30: 2908052.382 ops/s
Iteration   1: 2773157.507 ops/s
Iteration   2: 2896191.016 ops/s
Iteration   3: 2871767.753 ops/s
Iteration   4: 2840170.163 ops/s
Iteration   5: 2855079.983 ops/s
Iteration   6: 2847766.527 ops/s
Iteration   7: 3023786.138 ops/s
Iteration   8: 2794511.791 ops/s
Iteration   9: 2853193.774 ops/s
Iteration  10: 2808889.144 ops/s
Iteration  11: 2884728.620 ops/s
Iteration  12: 2917943.709 ops/s
Iteration  13: 2791199.403 ops/s
Iteration  14: 2888206.806 ops/s
Iteration  15: 2705928.715 ops/s
Iteration  16: 2865495.689 ops/s
Iteration  17: 2911056.385 ops/s
Iteration  18: 2780449.537 ops/s
Iteration  19: 2839676.776 ops/s
Iteration  20: 2860127.638 ops/s
Iteration  21: 2927108.278 ops/s
Iteration  22: 2737622.391 ops/s
Iteration  23: 2895975.888 ops/s
Iteration  24: 2796608.142 ops/s
Iteration  25: 2839395.783 ops/s
Iteration  26: 2899317.220 ops/s
Iteration  27: 2770813.369 ops/s
Iteration  28: 2879129.932 ops/s
Iteration  29: 2810407.680 ops/s
Iteration  30: 2777551.538 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntilTest._Benchmark.benchmark_untilCompletableMainSuccess":
  2844775.243 ±(99.9%) 43569.963 ops/s [Average]
  (min, avg, max) = (2705928.715, 2844775.243, 3023786.138), stdev = 65213.475
  CI (99.9%): [2801205.280, 2888345.206] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
SingleTakeUntilTest._Benchmark.benchmark_untilCompletableMainSuccess  thrpt   30  2844775.243 ± 43569.963  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingleTest._Benchmark.benchmark_undeliverableUponCancelDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingleTest._Benchmark.benchmark_undeliverableUponCancelDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 16758.184 ops/s
# Warmup Iteration   2: 96941.224 ops/s
# Warmup Iteration   3: 143332.644 ops/s
# Warmup Iteration   4: 164603.740 ops/s
# Warmup Iteration   5: 175650.755 ops/s
# Warmup Iteration   6: 178828.694 ops/s
# Warmup Iteration   7: 178858.660 ops/s
# Warmup Iteration   8: 178326.629 ops/s
# Warmup Iteration   9: 182274.027 ops/s
# Warmup Iteration  10: 175566.664 ops/s
# Warmup Iteration  11: 164053.036 ops/s
# Warmup Iteration  12: 183183.914 ops/s
# Warmup Iteration  13: 175386.615 ops/s
# Warmup Iteration  14: 179592.037 ops/s
# Warmup Iteration  15: 178501.695 ops/s
# Warmup Iteration  16: 145322.828 ops/s
# Warmup Iteration  17: 189927.660 ops/s
# Warmup Iteration  18: 185980.574 ops/s
# Warmup Iteration  19: 188291.421 ops/s
# Warmup Iteration  20: 195662.515 ops/s
# Warmup Iteration  21: 194869.445 ops/s
# Warmup Iteration  22: 192652.735 ops/s
# Warmup Iteration  23: 185977.676 ops/s
# Warmup Iteration  24: 188849.558 ops/s
# Warmup Iteration  25: 195772.837 ops/s
# Warmup Iteration  26: 184520.926 ops/s
# Warmup Iteration  27: 188993.028 ops/s
# Warmup Iteration  28: 185472.885 ops/s
# Warmup Iteration  29: 191439.506 ops/s
# Warmup Iteration  30: 192100.198 ops/s
Iteration   1: 184257.837 ops/s
Iteration   2: 196847.487 ops/s
Iteration   3: 193923.131 ops/s
Iteration   4: 181032.054 ops/s
Iteration   5: 189263.299 ops/s
Iteration   6: 195258.471 ops/s
Iteration   7: 196797.155 ops/s
Iteration   8: 196856.531 ops/s
Iteration   9: 186562.776 ops/s
Iteration  10: 200932.497 ops/s
Iteration  11: 184960.976 ops/s
Iteration  12: 199101.965 ops/s
Iteration  13: 183000.477 ops/s
Iteration  14: 199873.786 ops/s
Iteration  15: 193805.816 ops/s
Iteration  16: 188313.265 ops/s
Iteration  17: 197100.376 ops/s
Iteration  18: 198951.262 ops/s
Iteration  19: 188247.503 ops/s
Iteration  20: 194527.021 ops/s
Iteration  21: 189392.338 ops/s
Iteration  22: 198909.226 ops/s
Iteration  23: 188267.291 ops/s
Iteration  24: 190802.522 ops/s
Iteration  25: 194184.175 ops/s
Iteration  26: 192212.858 ops/s
Iteration  27: 194731.653 ops/s
Iteration  28: 190015.363 ops/s
Iteration  29: 189582.464 ops/s
Iteration  30: 193361.923 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingleTest._Benchmark.benchmark_undeliverableUponCancelDelayError":
  192369.117 ±(99.9%) 3565.350 ops/s [Average]
  (min, avg, max) = (181032.054, 192369.117, 200932.497), stdev = 5336.448
  CI (99.9%): [188803.767, 195934.466] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt       Score      Error  Units
FlowableFlatMapSingleTest._Benchmark.benchmark_undeliverableUponCancelDelayError  thrpt   30  192369.117 ± 3565.350  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_retryWhenFunctionReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_retryWhenFunctionReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 106103.747 ops/s
# Warmup Iteration   2: 301923.756 ops/s
# Warmup Iteration   3: 320374.011 ops/s
# Warmup Iteration   4: 288136.447 ops/s
# Warmup Iteration   5: 345536.749 ops/s
# Warmup Iteration   6: 276653.168 ops/s
# Warmup Iteration   7: 326933.159 ops/s
# Warmup Iteration   8: 345753.685 ops/s
# Warmup Iteration   9: 323141.281 ops/s
# Warmup Iteration  10: 335729.199 ops/s
# Warmup Iteration  11: 332341.569 ops/s
# Warmup Iteration  12: 327790.026 ops/s
# Warmup Iteration  13: 340075.607 ops/s
# Warmup Iteration  14: 335194.523 ops/s
# Warmup Iteration  15: 324161.775 ops/s
# Warmup Iteration  16: 348505.389 ops/s
# Warmup Iteration  17: 345275.253 ops/s
# Warmup Iteration  18: 344224.606 ops/s
# Warmup Iteration  19: 370292.485 ops/s
# Warmup Iteration  20: 334778.170 ops/s
# Warmup Iteration  21: 357892.193 ops/s
# Warmup Iteration  22: 348391.928 ops/s
# Warmup Iteration  23: 357670.943 ops/s
# Warmup Iteration  24: 346546.349 ops/s
# Warmup Iteration  25: 343004.391 ops/s
# Warmup Iteration  26: 351897.033 ops/s
# Warmup Iteration  27: 354464.924 ops/s
# Warmup Iteration  28: 352671.480 ops/s
# Warmup Iteration  29: 353089.018 ops/s
# Warmup Iteration  30: 334702.190 ops/s
Iteration   1: 365431.390 ops/s
Iteration   2: 343392.238 ops/s
Iteration   3: 351344.104 ops/s
Iteration   4: 351355.276 ops/s
Iteration   5: 336690.773 ops/s
Iteration   6: 351089.178 ops/s
Iteration   7: 349893.243 ops/s
Iteration   8: 358593.939 ops/s
Iteration   9: 349744.699 ops/s
Iteration  10: 348069.968 ops/s
Iteration  11: 361876.604 ops/s
Iteration  12: 341767.725 ops/s
Iteration  13: 351602.761 ops/s
Iteration  14: 349300.221 ops/s
Iteration  15: 338948.874 ops/s
Iteration  16: 363032.749 ops/s
Iteration  17: 343771.847 ops/s
Iteration  18: 352285.329 ops/s
Iteration  19: 346216.723 ops/s
Iteration  20: 346859.266 ops/s
Iteration  21: 365145.181 ops/s
Iteration  22: 344351.505 ops/s
Iteration  23: 345289.648 ops/s
Iteration  24: 351584.970 ops/s
Iteration  25: 351705.021 ops/s
Iteration  26: 356872.476 ops/s
Iteration  27: 342780.943 ops/s
Iteration  28: 347344.056 ops/s
Iteration  29: 354036.372 ops/s
Iteration  30: 349529.352 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_retryWhenFunctionReturnsNull":
  350330.214 ±(99.9%) 4840.137 ops/s [Average]
  (min, avg, max) = (336690.773, 350330.214, 365431.390), stdev = 7244.490
  CI (99.9%): [345490.077, 355170.351] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score      Error  Units
FlowableNullTests._Benchmark.benchmark_retryWhenFunctionReturnsNull  thrpt   30  350330.214 ± 4840.137  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservableTest._Benchmark.benchmark_normal$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservableTest._Benchmark.benchmark_normal

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 551102.411 ops/s
# Warmup Iteration   2: 3013318.208 ops/s
# Warmup Iteration   3: 4054752.317 ops/s
# Warmup Iteration   4: 4779646.870 ops/s
# Warmup Iteration   5: 4994874.347 ops/s
# Warmup Iteration   6: 4699404.706 ops/s
# Warmup Iteration   7: 4798572.564 ops/s
# Warmup Iteration   8: 4840139.829 ops/s
# Warmup Iteration   9: 4630628.627 ops/s
# Warmup Iteration  10: 4905100.748 ops/s
# Warmup Iteration  11: 4017534.876 ops/s
# Warmup Iteration  12: 4744116.981 ops/s
# Warmup Iteration  13: 5020726.040 ops/s
# Warmup Iteration  14: 4801760.996 ops/s
# Warmup Iteration  15: 4896919.211 ops/s
# Warmup Iteration  16: 4864452.044 ops/s
# Warmup Iteration  17: 4769856.567 ops/s
# Warmup Iteration  18: 4913170.626 ops/s
# Warmup Iteration  19: 4858381.739 ops/s
# Warmup Iteration  20: 4925982.179 ops/s
# Warmup Iteration  21: 4778369.443 ops/s
# Warmup Iteration  22: 4907559.068 ops/s
# Warmup Iteration  23: 4990800.727 ops/s
# Warmup Iteration  24: 4693390.950 ops/s
# Warmup Iteration  25: 4693107.329 ops/s
# Warmup Iteration  26: 4865218.605 ops/s
# Warmup Iteration  27: 4897778.112 ops/s
# Warmup Iteration  28: 4820213.010 ops/s
# Warmup Iteration  29: 5017154.032 ops/s
# Warmup Iteration  30: 4796330.677 ops/s
Iteration   1: 4699984.564 ops/s
Iteration   2: 4905353.269 ops/s
Iteration   3: 4733290.321 ops/s
Iteration   4: 4899953.574 ops/s
Iteration   5: 4825197.869 ops/s
Iteration   6: 4823325.386 ops/s
Iteration   7: 5145389.371 ops/s
Iteration   8: 4763658.433 ops/s
Iteration   9: 5000503.866 ops/s
Iteration  10: 4873502.612 ops/s
Iteration  11: 4911929.785 ops/s
Iteration  12: 5030463.206 ops/s
Iteration  13: 4765434.732 ops/s
Iteration  14: 5118396.194 ops/s
Iteration  15: 4862923.796 ops/s
Iteration  16: 4866400.883 ops/s
Iteration  17: 5090284.909 ops/s
Iteration  18: 4744085.366 ops/s
Iteration  19: 4991929.925 ops/s
Iteration  20: 5113454.890 ops/s
Iteration  21: 4770683.033 ops/s
Iteration  22: 5102692.861 ops/s
Iteration  23: 4780305.161 ops/s
Iteration  24: 5007738.518 ops/s
Iteration  25: 5096733.792 ops/s
Iteration  26: 4797194.663 ops/s
Iteration  27: 5068229.081 ops/s
Iteration  28: 4850154.734 ops/s
Iteration  29: 4782093.943 ops/s
Iteration  30: 4852301.885 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservableTest._Benchmark.benchmark_normal":
  4909119.687 ±(99.9%) 91707.344 ops/s [Average]
  (min, avg, max) = (4699984.564, 4909119.687, 5145389.371), stdev = 137263.245
  CI (99.9%): [4817412.344, 5000827.031] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
MaybeFlatMapIterableObservableTest._Benchmark.benchmark_normal  thrpt   30  4909119.687 ± 91707.344  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservableTest._Benchmark.benchmark_take$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservableTest._Benchmark.benchmark_take

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 863616.256 ops/s
# Warmup Iteration   2: 3121024.766 ops/s
# Warmup Iteration   3: 4515321.383 ops/s
# Warmup Iteration   4: 5145937.381 ops/s
# Warmup Iteration   5: 4902595.350 ops/s
# Warmup Iteration   6: 4964604.965 ops/s
# Warmup Iteration   7: 5015734.232 ops/s
# Warmup Iteration   8: 4972266.395 ops/s
# Warmup Iteration   9: 4966549.537 ops/s
# Warmup Iteration  10: 5067163.248 ops/s
# Warmup Iteration  11: 5034007.821 ops/s
# Warmup Iteration  12: 5044143.489 ops/s
# Warmup Iteration  13: 4962561.085 ops/s
# Warmup Iteration  14: 4979645.183 ops/s
# Warmup Iteration  15: 4914292.897 ops/s
# Warmup Iteration  16: 5182535.307 ops/s
# Warmup Iteration  17: 5146652.672 ops/s
# Warmup Iteration  18: 4911739.992 ops/s
# Warmup Iteration  19: 5169299.946 ops/s
# Warmup Iteration  20: 4999635.161 ops/s
# Warmup Iteration  21: 5187089.562 ops/s
# Warmup Iteration  22: 5125406.784 ops/s
# Warmup Iteration  23: 4985605.012 ops/s
# Warmup Iteration  24: 5093861.473 ops/s
# Warmup Iteration  25: 5040516.511 ops/s
# Warmup Iteration  26: 5115211.337 ops/s
# Warmup Iteration  27: 5092736.516 ops/s
# Warmup Iteration  28: 4984526.528 ops/s
# Warmup Iteration  29: 5016651.252 ops/s
# Warmup Iteration  30: 5171751.837 ops/s
Iteration   1: 5011068.582 ops/s
Iteration   2: 5079806.029 ops/s
Iteration   3: 4962403.495 ops/s
Iteration   4: 5067781.597 ops/s
Iteration   5: 5091239.073 ops/s
Iteration   6: 4950135.160 ops/s
Iteration   7: 5047975.441 ops/s
Iteration   8: 5031504.618 ops/s
Iteration   9: 4962459.487 ops/s
Iteration  10: 5103178.121 ops/s
Iteration  11: 4942582.578 ops/s
Iteration  12: 5294886.153 ops/s
Iteration  13: 4941243.711 ops/s
Iteration  14: 5049664.346 ops/s
Iteration  15: 5116191.677 ops/s
Iteration  16: 5135282.645 ops/s
Iteration  17: 5143643.135 ops/s
Iteration  18: 4955193.141 ops/s
Iteration  19: 5154151.402 ops/s
Iteration  20: 5122343.535 ops/s
Iteration  21: 5189629.136 ops/s
Iteration  22: 4972603.694 ops/s
Iteration  23: 5100373.781 ops/s
Iteration  24: 5041590.769 ops/s
Iteration  25: 5027114.583 ops/s
Iteration  26: 5193354.311 ops/s
Iteration  27: 4843693.076 ops/s
Iteration  28: 5119781.074 ops/s
Iteration  29: 4933590.094 ops/s
Iteration  30: 5045449.875 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservableTest._Benchmark.benchmark_take":
  5054330.477 ±(99.9%) 64626.481 ops/s [Average]
  (min, avg, max) = (4843693.076, 5054330.477, 5294886.153), stdev = 96729.881
  CI (99.9%): [4989703.996, 5118956.958] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
MaybeFlatMapIterableObservableTest._Benchmark.benchmark_take  thrpt   30  5054330.477 ± 64626.481  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservableTest._Benchmark.benchmark_fused$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservableTest._Benchmark.benchmark_fused

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1293024.910 ops/s
# Warmup Iteration   2: 3918571.505 ops/s
# Warmup Iteration   3: 5564293.957 ops/s
# Warmup Iteration   4: 5737653.397 ops/s
# Warmup Iteration   5: 5776181.348 ops/s
# Warmup Iteration   6: 4510842.143 ops/s
# Warmup Iteration   7: 5615294.193 ops/s
# Warmup Iteration   8: 5664392.409 ops/s
# Warmup Iteration   9: 5900940.437 ops/s
# Warmup Iteration  10: 5520185.048 ops/s
# Warmup Iteration  11: 5698516.414 ops/s
# Warmup Iteration  12: 5613926.895 ops/s
# Warmup Iteration  13: 5688531.488 ops/s
# Warmup Iteration  14: 5822374.582 ops/s
# Warmup Iteration  15: 5636681.000 ops/s
# Warmup Iteration  16: 5724839.578 ops/s
# Warmup Iteration  17: 5758649.137 ops/s
# Warmup Iteration  18: 5582978.718 ops/s
# Warmup Iteration  19: 6005519.034 ops/s
# Warmup Iteration  20: 5534755.291 ops/s
# Warmup Iteration  21: 5614438.311 ops/s
# Warmup Iteration  22: 5892016.397 ops/s
# Warmup Iteration  23: 5480773.858 ops/s
# Warmup Iteration  24: 5669670.149 ops/s
# Warmup Iteration  25: 5883157.402 ops/s
# Warmup Iteration  26: 5683026.881 ops/s
# Warmup Iteration  27: 5720714.141 ops/s
# Warmup Iteration  28: 5660165.769 ops/s
# Warmup Iteration  29: 5694802.565 ops/s
# Warmup Iteration  30: 5864115.330 ops/s
Iteration   1: 5666151.308 ops/s
Iteration   2: 5814388.168 ops/s
Iteration   3: 5697194.521 ops/s
Iteration   4: 5762208.719 ops/s
Iteration   5: 5845502.021 ops/s
Iteration   6: 5541355.240 ops/s
Iteration   7: 5715802.916 ops/s
Iteration   8: 5763495.059 ops/s
Iteration   9: 5512589.344 ops/s
Iteration  10: 5964826.992 ops/s
Iteration  11: 5862043.372 ops/s
Iteration  12: 5602924.460 ops/s
Iteration  13: 5852145.131 ops/s
Iteration  14: 5633138.036 ops/s
Iteration  15: 5507809.990 ops/s
Iteration  16: 5818728.838 ops/s
Iteration  17: 5519154.032 ops/s
Iteration  18: 5937418.059 ops/s
Iteration  19: 5552289.472 ops/s
Iteration  20: 5658303.816 ops/s
Iteration  21: 5697504.844 ops/s
Iteration  22: 5562326.896 ops/s
Iteration  23: 5914076.624 ops/s
Iteration  24: 5659813.644 ops/s
Iteration  25: 5602474.393 ops/s
Iteration  26: 5907661.789 ops/s
Iteration  27: 5509045.265 ops/s
Iteration  28: 5783563.276 ops/s
Iteration  29: 5493923.488 ops/s
Iteration  30: 5799897.501 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservableTest._Benchmark.benchmark_fused":
  5705258.574 ±(99.9%) 97298.531 ops/s [Average]
  (min, avg, max) = (5493923.488, 5705258.574, 5964826.992), stdev = 145631.872
  CI (99.9%): [5607960.043, 5802557.105] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
MaybeFlatMapIterableObservableTest._Benchmark.benchmark_fused  thrpt   30  5705258.574 ± 97298.531  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservableTest._Benchmark.benchmark_fusedNoSync$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservableTest._Benchmark.benchmark_fusedNoSync

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 753557.689 ops/s
# Warmup Iteration   2: 3784195.934 ops/s
# Warmup Iteration   3: 5667695.043 ops/s
# Warmup Iteration   4: 5667978.520 ops/s
# Warmup Iteration   5: 5782038.031 ops/s
# Warmup Iteration   6: 5813457.615 ops/s
# Warmup Iteration   7: 5727774.378 ops/s
# Warmup Iteration   8: 5778020.343 ops/s
# Warmup Iteration   9: 5847650.225 ops/s
# Warmup Iteration  10: 5802823.901 ops/s
# Warmup Iteration  11: 5840724.144 ops/s
# Warmup Iteration  12: 5843906.748 ops/s
# Warmup Iteration  13: 5650620.808 ops/s
# Warmup Iteration  14: 6048769.499 ops/s
# Warmup Iteration  15: 5735697.549 ops/s
# Warmup Iteration  16: 5923627.361 ops/s
# Warmup Iteration  17: 5739614.840 ops/s
# Warmup Iteration  18: 5904494.350 ops/s
# Warmup Iteration  19: 5825852.331 ops/s
# Warmup Iteration  20: 5546087.130 ops/s
# Warmup Iteration  21: 6008586.150 ops/s
# Warmup Iteration  22: 5646614.310 ops/s
# Warmup Iteration  23: 5762942.146 ops/s
# Warmup Iteration  24: 6104435.278 ops/s
# Warmup Iteration  25: 5602220.839 ops/s
# Warmup Iteration  26: 6017895.965 ops/s
# Warmup Iteration  27: 5570209.304 ops/s
# Warmup Iteration  28: 5812102.405 ops/s
# Warmup Iteration  29: 5783674.658 ops/s
# Warmup Iteration  30: 5781657.247 ops/s
Iteration   1: 5985925.897 ops/s
Iteration   2: 5785815.539 ops/s
Iteration   3: 5633373.087 ops/s
Iteration   4: 5825037.008 ops/s
Iteration   5: 5595383.446 ops/s
Iteration   6: 6045839.075 ops/s
Iteration   7: 5890132.594 ops/s
Iteration   8: 5660957.039 ops/s
Iteration   9: 5977598.038 ops/s
Iteration  10: 5818760.901 ops/s
Iteration  11: 5884076.389 ops/s
Iteration  12: 5665883.918 ops/s
Iteration  13: 5913644.476 ops/s
Iteration  14: 5987291.219 ops/s
Iteration  15: 5501631.437 ops/s
Iteration  16: 5816355.259 ops/s
Iteration  17: 5816774.417 ops/s
Iteration  18: 5714939.385 ops/s
Iteration  19: 5854440.728 ops/s
Iteration  20: 5632749.037 ops/s
Iteration  21: 5939861.810 ops/s
Iteration  22: 5656293.909 ops/s
Iteration  23: 5889829.715 ops/s
Iteration  24: 5684917.787 ops/s
Iteration  25: 5913827.953 ops/s
Iteration  26: 5755933.619 ops/s
Iteration  27: 5685548.648 ops/s
Iteration  28: 5854732.455 ops/s
Iteration  29: 5709691.744 ops/s
Iteration  30: 5855671.016 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservableTest._Benchmark.benchmark_fusedNoSync":
  5798430.585 ±(99.9%) 90262.178 ops/s [Average]
  (min, avg, max) = (5501631.437, 5798430.585, 6045839.075), stdev = 135100.189
  CI (99.9%): [5708168.407, 5888692.763] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
MaybeFlatMapIterableObservableTest._Benchmark.benchmark_fusedNoSync  thrpt   30  5798430.585 ± 90262.178  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservableTest._Benchmark.benchmark_fusedEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservableTest._Benchmark.benchmark_fusedEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 243587.284 ops/s
# Warmup Iteration   2: 3127722.092 ops/s
# Warmup Iteration   3: 6102276.011 ops/s
# Warmup Iteration   4: 6834030.304 ops/s
# Warmup Iteration   5: 6666498.081 ops/s
# Warmup Iteration   6: 6807381.207 ops/s
# Warmup Iteration   7: 6890054.578 ops/s
# Warmup Iteration   8: 6606693.006 ops/s
# Warmup Iteration   9: 6884402.435 ops/s
# Warmup Iteration  10: 6657284.080 ops/s
# Warmup Iteration  11: 6806366.114 ops/s
# Warmup Iteration  12: 6541411.496 ops/s
# Warmup Iteration  13: 6931865.209 ops/s
# Warmup Iteration  14: 6913937.751 ops/s
# Warmup Iteration  15: 6600174.466 ops/s
# Warmup Iteration  16: 6942593.235 ops/s
# Warmup Iteration  17: 6629005.109 ops/s
# Warmup Iteration  18: 6659093.175 ops/s
# Warmup Iteration  19: 6704415.169 ops/s
# Warmup Iteration  20: 6889807.048 ops/s
# Warmup Iteration  21: 6890285.194 ops/s
# Warmup Iteration  22: 6741267.500 ops/s
# Warmup Iteration  23: 6835722.117 ops/s
# Warmup Iteration  24: 6718227.806 ops/s
# Warmup Iteration  25: 6524801.911 ops/s
# Warmup Iteration  26: 6805731.655 ops/s
# Warmup Iteration  27: 6528086.636 ops/s
# Warmup Iteration  28: 6703229.301 ops/s
# Warmup Iteration  29: 6902824.889 ops/s
# Warmup Iteration  30: 6703193.375 ops/s
Iteration   1: 6420071.078 ops/s
Iteration   2: 7031625.944 ops/s
Iteration   3: 6917432.552 ops/s
Iteration   4: 6575393.091 ops/s
Iteration   5: 6762623.077 ops/s
Iteration   6: 6868207.588 ops/s
Iteration   7: 6607966.115 ops/s
Iteration   8: 6753395.331 ops/s
Iteration   9: 6651343.028 ops/s
Iteration  10: 6670756.085 ops/s
Iteration  11: 6999375.141 ops/s
Iteration  12: 6403762.045 ops/s
Iteration  13: 6681965.463 ops/s
Iteration  14: 6802090.115 ops/s
Iteration  15: 7028804.482 ops/s
Iteration  16: 6593923.664 ops/s
Iteration  17: 6908392.784 ops/s
Iteration  18: 6916634.260 ops/s
Iteration  19: 6605221.812 ops/s
Iteration  20: 6874613.222 ops/s
Iteration  21: 6571433.952 ops/s
Iteration  22: 6799399.933 ops/s
Iteration  23: 6700313.705 ops/s
Iteration  24: 6857115.492 ops/s
Iteration  25: 6942091.321 ops/s
Iteration  26: 6665576.016 ops/s
Iteration  27: 6903854.709 ops/s
Iteration  28: 6622147.208 ops/s
Iteration  29: 6551643.426 ops/s
Iteration  30: 6982665.157 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservableTest._Benchmark.benchmark_fusedEmpty":
  6755661.260 ±(99.9%) 117874.872 ops/s [Average]
  (min, avg, max) = (6403762.045, 6755661.260, 7031625.944), stdev = 176429.572
  CI (99.9%): [6637786.388, 6873536.131] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score        Error  Units
MaybeFlattenStreamAsObservableTest._Benchmark.benchmark_fusedEmpty  thrpt   30  6755661.260 ± 117874.872  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableFlatMapStreamTest._Benchmark.benchmark_mapperNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableFlatMapStreamTest._Benchmark.benchmark_mapperNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 180711.900 ops/s
# Warmup Iteration   2: 489344.762 ops/s
# Warmup Iteration   3: 527317.159 ops/s
# Warmup Iteration   4: 476695.430 ops/s
# Warmup Iteration   5: 561654.185 ops/s
# Warmup Iteration   6: 503854.106 ops/s
# Warmup Iteration   7: 574932.319 ops/s
# Warmup Iteration   8: 554350.797 ops/s
# Warmup Iteration   9: 555829.529 ops/s
# Warmup Iteration  10: 560747.149 ops/s
# Warmup Iteration  11: 550747.043 ops/s
# Warmup Iteration  12: 565177.589 ops/s
# Warmup Iteration  13: 556997.347 ops/s
# Warmup Iteration  14: 583820.519 ops/s
# Warmup Iteration  15: 542563.151 ops/s
# Warmup Iteration  16: 580439.120 ops/s
# Warmup Iteration  17: 587168.738 ops/s
# Warmup Iteration  18: 584284.084 ops/s
# Warmup Iteration  19: 603950.466 ops/s
# Warmup Iteration  20: 569178.901 ops/s
# Warmup Iteration  21: 619514.574 ops/s
# Warmup Iteration  22: 592956.011 ops/s
# Warmup Iteration  23: 571988.171 ops/s
# Warmup Iteration  24: 604779.530 ops/s
# Warmup Iteration  25: 596288.275 ops/s
# Warmup Iteration  26: 576192.856 ops/s
# Warmup Iteration  27: 596217.649 ops/s
# Warmup Iteration  28: 577383.387 ops/s
# Warmup Iteration  29: 579822.260 ops/s
# Warmup Iteration  30: 606309.200 ops/s
Iteration   1: 580876.884 ops/s
Iteration   2: 597200.052 ops/s
Iteration   3: 585510.026 ops/s
Iteration   4: 594062.748 ops/s
Iteration   5: 576644.488 ops/s
Iteration   6: 583227.513 ops/s
Iteration   7: 587295.632 ops/s
Iteration   8: 593376.970 ops/s
Iteration   9: 607582.757 ops/s
Iteration  10: 597130.973 ops/s
Iteration  11: 572687.890 ops/s
Iteration  12: 598877.909 ops/s
Iteration  13: 570616.960 ops/s
Iteration  14: 582930.699 ops/s
Iteration  15: 582548.136 ops/s
Iteration  16: 585648.085 ops/s
Iteration  17: 610293.217 ops/s
Iteration  18: 583107.073 ops/s
Iteration  19: 585856.859 ops/s
Iteration  20: 595525.367 ops/s
Iteration  21: 580384.115 ops/s
Iteration  22: 598369.970 ops/s
Iteration  23: 583068.238 ops/s
Iteration  24: 598830.587 ops/s
Iteration  25: 588847.511 ops/s
Iteration  26: 579469.232 ops/s
Iteration  27: 651077.399 ops/s
Iteration  28: 486399.168 ops/s
Iteration  29: 610009.898 ops/s
Iteration  30: 568836.129 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableFlatMapStreamTest._Benchmark.benchmark_mapperNull":
  587209.749 ±(99.9%) 16477.596 ops/s [Average]
  (min, avg, max) = (486399.168, 587209.749, 651077.399), stdev = 24662.892
  CI (99.9%): [570732.154, 603687.345] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score       Error  Units
ObservableFlatMapStreamTest._Benchmark.benchmark_mapperNull  thrpt   30  587209.749 ± 16477.596  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDoAfterNextTest._Benchmark.benchmark_consumerThrowsConditional2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDoAfterNextTest._Benchmark.benchmark_consumerThrowsConditional2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 81681.292 ops/s
# Warmup Iteration   2: 282327.254 ops/s
# Warmup Iteration   3: 484313.244 ops/s
# Warmup Iteration   4: 464882.826 ops/s
# Warmup Iteration   5: 465831.925 ops/s
# Warmup Iteration   6: 488806.583 ops/s
# Warmup Iteration   7: 474941.216 ops/s
# Warmup Iteration   8: 470977.010 ops/s
# Warmup Iteration   9: 484153.875 ops/s
# Warmup Iteration  10: 464035.423 ops/s
# Warmup Iteration  11: 469194.396 ops/s
# Warmup Iteration  12: 494162.651 ops/s
# Warmup Iteration  13: 457927.066 ops/s
# Warmup Iteration  14: 475780.075 ops/s
# Warmup Iteration  15: 464227.739 ops/s
# Warmup Iteration  16: 465142.334 ops/s
# Warmup Iteration  17: 482883.431 ops/s
# Warmup Iteration  18: 506205.808 ops/s
# Warmup Iteration  19: 499826.856 ops/s
# Warmup Iteration  20: 486953.555 ops/s
# Warmup Iteration  21: 514207.758 ops/s
# Warmup Iteration  22: 483908.156 ops/s
# Warmup Iteration  23: 521270.019 ops/s
# Warmup Iteration  24: 486576.821 ops/s
# Warmup Iteration  25: 460293.860 ops/s
# Warmup Iteration  26: 517830.320 ops/s
# Warmup Iteration  27: 476594.308 ops/s
# Warmup Iteration  28: 518031.253 ops/s
# Warmup Iteration  29: 488194.371 ops/s
# Warmup Iteration  30: 501212.362 ops/s
Iteration   1: 521872.890 ops/s
Iteration   2: 486761.065 ops/s
Iteration   3: 512511.088 ops/s
Iteration   4: 492845.148 ops/s
Iteration   5: 515819.490 ops/s
Iteration   6: 504241.634 ops/s
Iteration   7: 503193.683 ops/s
Iteration   8: 491329.518 ops/s
Iteration   9: 510112.355 ops/s
Iteration  10: 511067.402 ops/s
Iteration  11: 472753.297 ops/s
Iteration  12: 502803.936 ops/s
Iteration  13: 503635.617 ops/s
Iteration  14: 502051.169 ops/s
Iteration  15: 506285.053 ops/s
Iteration  16: 502293.342 ops/s
Iteration  17: 473948.309 ops/s
Iteration  18: 521604.112 ops/s
Iteration  19: 478015.027 ops/s
Iteration  20: 524720.652 ops/s
Iteration  21: 489068.567 ops/s
Iteration  22: 467645.243 ops/s
Iteration  23: 515814.351 ops/s
Iteration  24: 498918.826 ops/s
Iteration  25: 506293.176 ops/s
Iteration  26: 497021.549 ops/s
Iteration  27: 507587.004 ops/s
Iteration  28: 518728.243 ops/s
Iteration  29: 488793.361 ops/s
Iteration  30: 502881.029 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableDoAfterNextTest._Benchmark.benchmark_consumerThrowsConditional2":
  501020.538 ±(99.9%) 9978.681 ops/s [Average]
  (min, avg, max) = (467645.243, 501020.538, 524720.652), stdev = 14935.622
  CI (99.9%): [491041.857, 510999.219] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score      Error  Units
ObservableDoAfterNextTest._Benchmark.benchmark_consumerThrowsConditional2  thrpt   30  501020.538 ± 9978.681  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableFlatMapStreamTest._Benchmark.benchmark_mapperThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableFlatMapStreamTest._Benchmark.benchmark_mapperThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 163863.505 ops/s
# Warmup Iteration   2: 505634.556 ops/s
# Warmup Iteration   3: 506964.254 ops/s
# Warmup Iteration   4: 566830.060 ops/s
# Warmup Iteration   5: 544947.233 ops/s
# Warmup Iteration   6: 542291.255 ops/s
# Warmup Iteration   7: 561217.450 ops/s
# Warmup Iteration   8: 525092.277 ops/s
# Warmup Iteration   9: 561608.195 ops/s
# Warmup Iteration  10: 546175.340 ops/s
# Warmup Iteration  11: 549829.331 ops/s
# Warmup Iteration  12: 562437.072 ops/s
# Warmup Iteration  13: 555442.027 ops/s
# Warmup Iteration  14: 561446.076 ops/s
# Warmup Iteration  15: 545055.387 ops/s
# Warmup Iteration  16: 566353.760 ops/s
# Warmup Iteration  17: 568391.827 ops/s
# Warmup Iteration  18: 571465.012 ops/s
# Warmup Iteration  19: 581881.598 ops/s
# Warmup Iteration  20: 577335.387 ops/s
# Warmup Iteration  21: 572869.635 ops/s
# Warmup Iteration  22: 576081.752 ops/s
# Warmup Iteration  23: 586382.261 ops/s
# Warmup Iteration  24: 583724.949 ops/s
# Warmup Iteration  25: 567470.692 ops/s
# Warmup Iteration  26: 604882.735 ops/s
# Warmup Iteration  27: 558350.878 ops/s
# Warmup Iteration  28: 577747.262 ops/s
# Warmup Iteration  29: 595611.522 ops/s
# Warmup Iteration  30: 575969.662 ops/s
Iteration   1: 597311.783 ops/s
Iteration   2: 572779.238 ops/s
Iteration   3: 582758.680 ops/s
Iteration   4: 574565.599 ops/s
Iteration   5: 576224.276 ops/s
Iteration   6: 581299.163 ops/s
Iteration   7: 563210.171 ops/s
Iteration   8: 612737.374 ops/s
Iteration   9: 560806.614 ops/s
Iteration  10: 597268.116 ops/s
Iteration  11: 577805.559 ops/s
Iteration  12: 565869.542 ops/s
Iteration  13: 599972.725 ops/s
Iteration  14: 564194.321 ops/s
Iteration  15: 588076.706 ops/s
Iteration  16: 564217.045 ops/s
Iteration  17: 575554.524 ops/s
Iteration  18: 594700.732 ops/s
Iteration  19: 587792.903 ops/s
Iteration  20: 591718.674 ops/s
Iteration  21: 564772.084 ops/s
Iteration  22: 593594.532 ops/s
Iteration  23: 460140.847 ops/s
Iteration  24: 573808.150 ops/s
Iteration  25: 604468.023 ops/s
Iteration  26: 563323.471 ops/s
Iteration  27: 584636.036 ops/s
Iteration  28: 588836.878 ops/s
Iteration  29: 585013.276 ops/s
Iteration  30: 565334.631 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableFlatMapStreamTest._Benchmark.benchmark_mapperThrows":
  577093.056 ±(99.9%) 17462.378 ops/s [Average]
  (min, avg, max) = (460140.847, 577093.056, 612737.374), stdev = 26136.867
  CI (99.9%): [559630.678, 594555.433] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score       Error  Units
ObservableFlatMapStreamTest._Benchmark.benchmark_mapperThrows  thrpt   30  577093.056 ± 17462.378  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableFlatMapStreamTest._Benchmark.benchmark_hasNextThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableFlatMapStreamTest._Benchmark.benchmark_hasNextThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 93261.976 ops/s
# Warmup Iteration   2: 454640.541 ops/s
# Warmup Iteration   3: 488845.166 ops/s
# Warmup Iteration   4: 538607.709 ops/s
# Warmup Iteration   5: 543147.116 ops/s
# Warmup Iteration   6: 527744.326 ops/s
# Warmup Iteration   7: 550092.635 ops/s
# Warmup Iteration   8: 528168.107 ops/s
# Warmup Iteration   9: 532128.202 ops/s
# Warmup Iteration  10: 487417.686 ops/s
# Warmup Iteration  11: 541484.677 ops/s
# Warmup Iteration  12: 553767.522 ops/s
# Warmup Iteration  13: 530140.057 ops/s
# Warmup Iteration  14: 541384.866 ops/s
# Warmup Iteration  15: 539160.093 ops/s
# Warmup Iteration  16: 537653.211 ops/s
# Warmup Iteration  17: 584403.471 ops/s
# Warmup Iteration  18: 547616.603 ops/s
# Warmup Iteration  19: 578479.453 ops/s
# Warmup Iteration  20: 554232.351 ops/s
# Warmup Iteration  21: 574445.581 ops/s
# Warmup Iteration  22: 573875.618 ops/s
# Warmup Iteration  23: 555564.235 ops/s
# Warmup Iteration  24: 568951.682 ops/s
# Warmup Iteration  25: 545865.185 ops/s
# Warmup Iteration  26: 575371.259 ops/s
# Warmup Iteration  27: 566754.907 ops/s
# Warmup Iteration  28: 550838.190 ops/s
# Warmup Iteration  29: 579114.835 ops/s
# Warmup Iteration  30: 562743.463 ops/s
Iteration   1: 571763.205 ops/s
Iteration   2: 564403.346 ops/s
Iteration   3: 574427.026 ops/s
Iteration   4: 557673.429 ops/s
Iteration   5: 558887.554 ops/s
Iteration   6: 581589.128 ops/s
Iteration   7: 551644.022 ops/s
Iteration   8: 580355.834 ops/s
Iteration   9: 551067.805 ops/s
Iteration  10: 584267.087 ops/s
Iteration  11: 558809.037 ops/s
Iteration  12: 581563.447 ops/s
Iteration  13: 570366.724 ops/s
Iteration  14: 541559.343 ops/s
Iteration  15: 566045.314 ops/s
Iteration  16: 541741.356 ops/s
Iteration  17: 559929.653 ops/s
Iteration  18: 582619.698 ops/s
Iteration  19: 549354.494 ops/s
Iteration  20: 597114.188 ops/s
Iteration  21: 561408.943 ops/s
Iteration  22: 560105.065 ops/s
Iteration  23: 577234.987 ops/s
Iteration  24: 540976.832 ops/s
Iteration  25: 586024.444 ops/s
Iteration  26: 582605.560 ops/s
Iteration  27: 558730.701 ops/s
Iteration  28: 569608.839 ops/s
Iteration  29: 548346.936 ops/s
Iteration  30: 587661.605 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableFlatMapStreamTest._Benchmark.benchmark_hasNextThrows":
  566596.187 ±(99.9%) 10243.187 ops/s [Average]
  (min, avg, max) = (540976.832, 566596.187, 597114.188), stdev = 15331.521
  CI (99.9%): [556353.000, 576839.374] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score       Error  Units
ObservableFlatMapStreamTest._Benchmark.benchmark_hasNextThrows  thrpt   30  566596.187 ± 10243.187  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapBiSelectorTest._Benchmark.benchmark_normal$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapBiSelectorTest._Benchmark.benchmark_normal

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 331814.628 ops/s
# Warmup Iteration   2: 1419154.168 ops/s
# Warmup Iteration   3: 4483047.827 ops/s
# Warmup Iteration   4: 3758502.091 ops/s
# Warmup Iteration   5: 3899152.400 ops/s
# Warmup Iteration   6: 4192491.703 ops/s
# Warmup Iteration   7: 4287534.736 ops/s
# Warmup Iteration   8: 4611415.887 ops/s
# Warmup Iteration   9: 4276840.085 ops/s
# Warmup Iteration  10: 4625186.370 ops/s
# Warmup Iteration  11: 4296225.433 ops/s
# Warmup Iteration  12: 4413405.608 ops/s
# Warmup Iteration  13: 4403532.367 ops/s
# Warmup Iteration  14: 4541088.858 ops/s
# Warmup Iteration  15: 4314839.187 ops/s
# Warmup Iteration  16: 4418280.725 ops/s
# Warmup Iteration  17: 4458677.115 ops/s
# Warmup Iteration  18: 4245447.250 ops/s
# Warmup Iteration  19: 4443880.609 ops/s
# Warmup Iteration  20: 4630254.453 ops/s
# Warmup Iteration  21: 4242821.226 ops/s
# Warmup Iteration  22: 4331016.666 ops/s
# Warmup Iteration  23: 4430559.074 ops/s
# Warmup Iteration  24: 4290457.460 ops/s
# Warmup Iteration  25: 4591902.792 ops/s
# Warmup Iteration  26: 4359239.259 ops/s
# Warmup Iteration  27: 4445915.189 ops/s
# Warmup Iteration  28: 4356771.340 ops/s
# Warmup Iteration  29: 4443169.882 ops/s
# Warmup Iteration  30: 4540245.466 ops/s
Iteration   1: 4365179.947 ops/s
Iteration   2: 4223891.212 ops/s
Iteration   3: 4484827.553 ops/s
Iteration   4: 4290658.539 ops/s
Iteration   5: 4422839.999 ops/s
Iteration   6: 4222131.034 ops/s
Iteration   7: 4427490.631 ops/s
Iteration   8: 4470405.977 ops/s
Iteration   9: 4520389.333 ops/s
Iteration  10: 4361793.129 ops/s
Iteration  11: 4419818.603 ops/s
Iteration  12: 4447006.308 ops/s
Iteration  13: 4435136.365 ops/s
Iteration  14: 4357661.044 ops/s
Iteration  15: 4348780.385 ops/s
Iteration  16: 4559475.625 ops/s
Iteration  17: 4463877.380 ops/s
Iteration  18: 3678547.775 ops/s
Iteration  19: 4279251.866 ops/s
Iteration  20: 4453448.034 ops/s
Iteration  21: 4356372.305 ops/s
Iteration  22: 4414342.173 ops/s
Iteration  23: 4358540.570 ops/s
Iteration  24: 4509401.415 ops/s
Iteration  25: 4471796.862 ops/s
Iteration  26: 4355589.461 ops/s
Iteration  27: 4366095.620 ops/s
Iteration  28: 4521520.428 ops/s
Iteration  29: 4337133.766 ops/s
Iteration  30: 4626152.192 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapBiSelectorTest._Benchmark.benchmark_normal":
  4384985.184 ±(99.9%) 108730.686 ops/s [Average]
  (min, avg, max) = (3678547.775, 4384985.184, 4626152.192), stdev = 162742.985
  CI (99.9%): [4276254.498, 4493715.870] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score        Error  Units
MaybeFlatMapBiSelectorTest._Benchmark.benchmark_normal  thrpt   30  4384985.184 ± 108730.686  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapTest._Benchmark.benchmark_innerErrorDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapTest._Benchmark.benchmark_innerErrorDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 32650.361 ops/s
# Warmup Iteration   2: 334900.791 ops/s
# Warmup Iteration   3: 376915.503 ops/s
# Warmup Iteration   4: 395491.128 ops/s
# Warmup Iteration   5: 350208.044 ops/s
# Warmup Iteration   6: 436341.509 ops/s
# Warmup Iteration   7: 426313.801 ops/s
# Warmup Iteration   8: 429567.034 ops/s
# Warmup Iteration   9: 429164.323 ops/s
# Warmup Iteration  10: 423328.661 ops/s
# Warmup Iteration  11: 425639.411 ops/s
# Warmup Iteration  12: 428554.898 ops/s
# Warmup Iteration  13: 410756.181 ops/s
# Warmup Iteration  14: 439700.134 ops/s
# Warmup Iteration  15: 424685.618 ops/s
# Warmup Iteration  16: 428197.581 ops/s
# Warmup Iteration  17: 439131.912 ops/s
# Warmup Iteration  18: 451729.447 ops/s
# Warmup Iteration  19: 435810.838 ops/s
# Warmup Iteration  20: 436848.487 ops/s
# Warmup Iteration  21: 443144.445 ops/s
# Warmup Iteration  22: 429365.441 ops/s
# Warmup Iteration  23: 456073.317 ops/s
# Warmup Iteration  24: 460082.282 ops/s
# Warmup Iteration  25: 428724.920 ops/s
# Warmup Iteration  26: 448603.816 ops/s
# Warmup Iteration  27: 429891.489 ops/s
# Warmup Iteration  28: 453524.292 ops/s
# Warmup Iteration  29: 435255.110 ops/s
# Warmup Iteration  30: 436628.216 ops/s
Iteration   1: 454682.700 ops/s
Iteration   2: 431996.006 ops/s
Iteration   3: 442114.801 ops/s
Iteration   4: 440551.341 ops/s
Iteration   5: 441272.257 ops/s
Iteration   6: 427479.807 ops/s
Iteration   7: 441949.944 ops/s
Iteration   8: 450752.946 ops/s
Iteration   9: 426952.822 ops/s
Iteration  10: 456966.353 ops/s
Iteration  11: 435634.943 ops/s
Iteration  12: 443123.523 ops/s
Iteration  13: 458884.215 ops/s
Iteration  14: 436037.159 ops/s
Iteration  15: 427523.422 ops/s
Iteration  16: 457025.150 ops/s
Iteration  17: 439702.293 ops/s
Iteration  18: 435165.570 ops/s
Iteration  19: 444632.132 ops/s
Iteration  20: 425097.319 ops/s
Iteration  21: 450516.712 ops/s
Iteration  22: 437238.490 ops/s
Iteration  23: 452856.272 ops/s
Iteration  24: 427171.801 ops/s
Iteration  25: 436176.669 ops/s
Iteration  26: 443755.668 ops/s
Iteration  27: 451055.035 ops/s
Iteration  28: 447263.631 ops/s
Iteration  29: 435237.175 ops/s
Iteration  30: 441575.369 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapTest._Benchmark.benchmark_innerErrorDelayError":
  441346.384 ±(99.9%) 6513.755 ops/s [Average]
  (min, avg, max) = (425097.319, 441346.384, 458884.215), stdev = 9749.482
  CI (99.9%): [434832.629, 447860.139] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score      Error  Units
ObservableConcatMapTest._Benchmark.benchmark_innerErrorDelayError  thrpt   30  441346.384 ± 6513.755  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDoFinallyTest._Benchmark.benchmark_disposed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDoFinallyTest._Benchmark.benchmark_disposed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 653809.385 ops/s
# Warmup Iteration   2: 3715630.940 ops/s
# Warmup Iteration   3: 4796596.734 ops/s
# Warmup Iteration   4: 5024184.660 ops/s
# Warmup Iteration   5: 4748907.865 ops/s
# Warmup Iteration   6: 4912664.818 ops/s
# Warmup Iteration   7: 4767662.192 ops/s
# Warmup Iteration   8: 4897204.760 ops/s
# Warmup Iteration   9: 4928194.214 ops/s
# Warmup Iteration  10: 4858409.345 ops/s
# Warmup Iteration  11: 4354142.556 ops/s
# Warmup Iteration  12: 5072207.318 ops/s
# Warmup Iteration  13: 4791494.855 ops/s
# Warmup Iteration  14: 5101273.125 ops/s
# Warmup Iteration  15: 4726358.681 ops/s
# Warmup Iteration  16: 5107837.742 ops/s
# Warmup Iteration  17: 4768024.379 ops/s
# Warmup Iteration  18: 4785050.989 ops/s
# Warmup Iteration  19: 5008946.982 ops/s
# Warmup Iteration  20: 4753266.114 ops/s
# Warmup Iteration  21: 4957640.756 ops/s
# Warmup Iteration  22: 4662718.206 ops/s
# Warmup Iteration  23: 5050560.387 ops/s
# Warmup Iteration  24: 4842738.131 ops/s
# Warmup Iteration  25: 4827073.821 ops/s
# Warmup Iteration  26: 4861411.792 ops/s
# Warmup Iteration  27: 4865308.111 ops/s
# Warmup Iteration  28: 4814208.470 ops/s
# Warmup Iteration  29: 5123977.089 ops/s
# Warmup Iteration  30: 4734807.112 ops/s
Iteration   1: 5139089.068 ops/s
Iteration   2: 4713733.518 ops/s
Iteration   3: 5060936.101 ops/s
Iteration   4: 4952260.919 ops/s
Iteration   5: 4961864.339 ops/s
Iteration   6: 4979831.670 ops/s
Iteration   7: 4833949.570 ops/s
Iteration   8: 5078635.424 ops/s
Iteration   9: 4935259.829 ops/s
Iteration  10: 4960094.041 ops/s
Iteration  11: 5002807.652 ops/s
Iteration  12: 4924941.522 ops/s
Iteration  13: 3942147.886 ops/s
Iteration  14: 4977547.087 ops/s
Iteration  15: 4806089.742 ops/s
Iteration  16: 4963856.035 ops/s
Iteration  17: 4682088.848 ops/s
Iteration  18: 4896042.167 ops/s
Iteration  19: 4811001.906 ops/s
Iteration  20: 4989228.895 ops/s
Iteration  21: 4846029.079 ops/s
Iteration  22: 4979088.495 ops/s
Iteration  23: 4940019.518 ops/s
Iteration  24: 4828169.219 ops/s
Iteration  25: 4886459.696 ops/s
Iteration  26: 4889569.784 ops/s
Iteration  27: 5188440.823 ops/s
Iteration  28: 4843647.644 ops/s
Iteration  29: 5072396.564 ops/s
Iteration  30: 4809095.083 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeDoFinallyTest._Benchmark.benchmark_disposed":
  4896477.404 ±(99.9%) 142701.765 ops/s [Average]
  (min, avg, max) = (3942147.886, 4896477.404, 5188440.823), stdev = 213589.300
  CI (99.9%): [4753775.639, 5039179.169] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score        Error  Units
MaybeDoFinallyTest._Benchmark.benchmark_disposed  thrpt   30  4896477.404 ± 142701.765  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlattenTest._Benchmark.benchmark_mapperReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlattenTest._Benchmark.benchmark_mapperReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 285233.391 ops/s
# Warmup Iteration   2: 498557.087 ops/s
# Warmup Iteration   3: 619055.682 ops/s
# Warmup Iteration   4: 583358.797 ops/s
# Warmup Iteration   5: 615450.650 ops/s
# Warmup Iteration   6: 592786.202 ops/s
# Warmup Iteration   7: 619812.264 ops/s
# Warmup Iteration   8: 604223.135 ops/s
# Warmup Iteration   9: 595446.149 ops/s
# Warmup Iteration  10: 594189.188 ops/s
# Warmup Iteration  11: 593342.950 ops/s
# Warmup Iteration  12: 622245.309 ops/s
# Warmup Iteration  13: 588077.836 ops/s
# Warmup Iteration  14: 626103.867 ops/s
# Warmup Iteration  15: 585658.646 ops/s
# Warmup Iteration  16: 602323.935 ops/s
# Warmup Iteration  17: 635755.360 ops/s
# Warmup Iteration  18: 635133.720 ops/s
# Warmup Iteration  19: 629500.097 ops/s
# Warmup Iteration  20: 634083.651 ops/s
# Warmup Iteration  21: 637676.290 ops/s
# Warmup Iteration  22: 646761.720 ops/s
# Warmup Iteration  23: 622293.208 ops/s
# Warmup Iteration  24: 640485.827 ops/s
# Warmup Iteration  25: 644802.232 ops/s
# Warmup Iteration  26: 601617.686 ops/s
# Warmup Iteration  27: 655955.672 ops/s
# Warmup Iteration  28: 618221.049 ops/s
# Warmup Iteration  29: 657266.818 ops/s
# Warmup Iteration  30: 638913.686 ops/s
Iteration   1: 645296.986 ops/s
Iteration   2: 659887.064 ops/s
Iteration   3: 646299.140 ops/s
Iteration   4: 628949.860 ops/s
Iteration   5: 649218.312 ops/s
Iteration   6: 626297.505 ops/s
Iteration   7: 630681.738 ops/s
Iteration   8: 633412.361 ops/s
Iteration   9: 642474.197 ops/s
Iteration  10: 606241.052 ops/s
Iteration  11: 639975.283 ops/s
Iteration  12: 659558.065 ops/s
Iteration  13: 624784.027 ops/s
Iteration  14: 640528.341 ops/s
Iteration  15: 641049.489 ops/s
Iteration  16: 635808.584 ops/s
Iteration  17: 653985.513 ops/s
Iteration  18: 638286.934 ops/s
Iteration  19: 643977.233 ops/s
Iteration  20: 635086.800 ops/s
Iteration  21: 633734.910 ops/s
Iteration  22: 635307.683 ops/s
Iteration  23: 630186.201 ops/s
Iteration  24: 647947.031 ops/s
Iteration  25: 614976.691 ops/s
Iteration  26: 659768.974 ops/s
Iteration  27: 618206.930 ops/s
Iteration  28: 652847.901 ops/s
Iteration  29: 630181.555 ops/s
Iteration  30: 629236.367 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlattenTest._Benchmark.benchmark_mapperReturnsNull":
  637806.424 ±(99.9%) 8729.830 ops/s [Average]
  (min, avg, max) = (606241.052, 637806.424, 659887.064), stdev = 13066.400
  CI (99.9%): [629076.594, 646536.254] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score      Error  Units
MaybeFlattenTest._Benchmark.benchmark_mapperReturnsNull  thrpt   30  637806.424 ± 8729.830  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatMapTest._Benchmark.benchmark_mapperReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatMapTest._Benchmark.benchmark_mapperReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 231116.550 ops/s
# Warmup Iteration   2: 572846.548 ops/s
# Warmup Iteration   3: 626061.192 ops/s
# Warmup Iteration   4: 571914.610 ops/s
# Warmup Iteration   5: 616544.433 ops/s
# Warmup Iteration   6: 599010.090 ops/s
# Warmup Iteration   7: 602453.662 ops/s
# Warmup Iteration   8: 618739.418 ops/s
# Warmup Iteration   9: 609124.610 ops/s
# Warmup Iteration  10: 583150.791 ops/s
# Warmup Iteration  11: 602228.111 ops/s
# Warmup Iteration  12: 576802.522 ops/s
# Warmup Iteration  13: 637650.463 ops/s
# Warmup Iteration  14: 601374.733 ops/s
# Warmup Iteration  15: 625967.694 ops/s
# Warmup Iteration  16: 601278.425 ops/s
# Warmup Iteration  17: 647007.917 ops/s
# Warmup Iteration  18: 637676.085 ops/s
# Warmup Iteration  19: 642701.498 ops/s
# Warmup Iteration  20: 630734.532 ops/s
# Warmup Iteration  21: 614743.422 ops/s
# Warmup Iteration  22: 635577.714 ops/s
# Warmup Iteration  23: 627737.938 ops/s
# Warmup Iteration  24: 644376.317 ops/s
# Warmup Iteration  25: 634492.492 ops/s
# Warmup Iteration  26: 625305.704 ops/s
# Warmup Iteration  27: 638602.197 ops/s
# Warmup Iteration  28: 617068.677 ops/s
# Warmup Iteration  29: 622451.614 ops/s
# Warmup Iteration  30: 645547.278 ops/s
Iteration   1: 626365.988 ops/s
Iteration   2: 627259.436 ops/s
Iteration   3: 610488.511 ops/s
Iteration   4: 654819.035 ops/s
Iteration   5: 625961.611 ops/s
Iteration   6: 663367.157 ops/s
Iteration   7: 617730.724 ops/s
Iteration   8: 570230.968 ops/s
Iteration   9: 565234.490 ops/s
Iteration  10: 625239.576 ops/s
Iteration  11: 658860.244 ops/s
Iteration  12: 635493.856 ops/s
Iteration  13: 633946.213 ops/s
Iteration  14: 648482.441 ops/s
Iteration  15: 620086.991 ops/s
Iteration  16: 650628.336 ops/s
Iteration  17: 640233.929 ops/s
Iteration  18: 675937.557 ops/s
Iteration  19: 628007.168 ops/s
Iteration  20: 658437.018 ops/s
Iteration  21: 624156.927 ops/s
Iteration  22: 640342.154 ops/s
Iteration  23: 676197.244 ops/s
Iteration  24: 623346.107 ops/s
Iteration  25: 663089.294 ops/s
Iteration  26: 628265.890 ops/s
Iteration  27: 649537.576 ops/s
Iteration  28: 647472.636 ops/s
Iteration  29: 619227.802 ops/s
Iteration  30: 651947.301 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatMapTest._Benchmark.benchmark_mapperReturnsNull":
  635346.473 ±(99.9%) 16967.298 ops/s [Average]
  (min, avg, max) = (565234.490, 635346.473, 676197.244), stdev = 25395.855
  CI (99.9%): [618379.174, 652313.771] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score       Error  Units
MaybeConcatMapTest._Benchmark.benchmark_mapperReturnsNull  thrpt   30  635346.473 ± 16967.298  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.MaybeMapOptionalTest._Benchmark.benchmark_mapperCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.MaybeMapOptionalTest._Benchmark.benchmark_mapperCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 276470.265 ops/s
# Warmup Iteration   2: 510686.301 ops/s
# Warmup Iteration   3: 617719.595 ops/s
# Warmup Iteration   4: 597206.774 ops/s
# Warmup Iteration   5: 616072.254 ops/s
# Warmup Iteration   6: 614399.826 ops/s
# Warmup Iteration   7: 547945.962 ops/s
# Warmup Iteration   8: 633595.697 ops/s
# Warmup Iteration   9: 600535.327 ops/s
# Warmup Iteration  10: 611100.914 ops/s
# Warmup Iteration  11: 606491.857 ops/s
# Warmup Iteration  12: 599694.972 ops/s
# Warmup Iteration  13: 616753.556 ops/s
# Warmup Iteration  14: 539980.842 ops/s
# Warmup Iteration  15: 624944.831 ops/s
# Warmup Iteration  16: 608574.954 ops/s
# Warmup Iteration  17: 639118.013 ops/s
# Warmup Iteration  18: 674393.896 ops/s
# Warmup Iteration  19: 638058.649 ops/s
# Warmup Iteration  20: 654444.423 ops/s
# Warmup Iteration  21: 624790.008 ops/s
# Warmup Iteration  22: 630465.247 ops/s
# Warmup Iteration  23: 665672.350 ops/s
# Warmup Iteration  24: 639541.393 ops/s
# Warmup Iteration  25: 631279.460 ops/s
# Warmup Iteration  26: 659810.050 ops/s
# Warmup Iteration  27: 627132.767 ops/s
# Warmup Iteration  28: 650552.569 ops/s
# Warmup Iteration  29: 634370.094 ops/s
# Warmup Iteration  30: 639683.211 ops/s
Iteration   1: 666675.286 ops/s
Iteration   2: 630493.604 ops/s
Iteration   3: 655725.794 ops/s
Iteration   4: 629277.880 ops/s
Iteration   5: 642135.531 ops/s
Iteration   6: 657401.698 ops/s
Iteration   7: 624982.246 ops/s
Iteration   8: 663638.697 ops/s
Iteration   9: 615948.040 ops/s
Iteration  10: 659107.989 ops/s
Iteration  11: 661298.268 ops/s
Iteration  12: 628406.047 ops/s
Iteration  13: 662243.936 ops/s
Iteration  14: 631791.536 ops/s
Iteration  15: 626553.862 ops/s
Iteration  16: 635215.508 ops/s
Iteration  17: 639467.148 ops/s
Iteration  18: 649819.733 ops/s
Iteration  19: 665464.373 ops/s
Iteration  20: 634760.217 ops/s
Iteration  21: 662991.620 ops/s
Iteration  22: 642597.094 ops/s
Iteration  23: 630038.233 ops/s
Iteration  24: 656829.107 ops/s
Iteration  25: 637894.560 ops/s
Iteration  26: 665027.122 ops/s
Iteration  27: 630313.323 ops/s
Iteration  28: 666468.522 ops/s
Iteration  29: 635108.127 ops/s
Iteration  30: 627990.969 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.MaybeMapOptionalTest._Benchmark.benchmark_mapperCrash":
  644522.202 ±(99.9%) 10544.596 ops/s [Average]
  (min, avg, max) = (615948.040, 644522.202, 666675.286), stdev = 15782.656
  CI (99.9%): [633977.606, 655066.798] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score       Error  Units
MaybeMapOptionalTest._Benchmark.benchmark_mapperCrash  thrpt   30  644522.202 ± 10544.596  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotificationTest._Benchmark.benchmark_onSuccessEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotificationTest._Benchmark.benchmark_onSuccessEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1332091.482 ops/s
# Warmup Iteration   2: 4378970.721 ops/s
# Warmup Iteration   3: 6786572.266 ops/s
# Warmup Iteration   4: 6634419.877 ops/s
# Warmup Iteration   5: 6907479.923 ops/s
# Warmup Iteration   6: 6505197.176 ops/s
# Warmup Iteration   7: 6772437.468 ops/s
# Warmup Iteration   8: 6512650.513 ops/s
# Warmup Iteration   9: 6808756.698 ops/s
# Warmup Iteration  10: 7013297.746 ops/s
# Warmup Iteration  11: 6655329.622 ops/s
# Warmup Iteration  12: 6522633.457 ops/s
# Warmup Iteration  13: 6961251.170 ops/s
# Warmup Iteration  14: 6653810.183 ops/s
# Warmup Iteration  15: 7022738.036 ops/s
# Warmup Iteration  16: 6599883.213 ops/s
# Warmup Iteration  17: 6910963.918 ops/s
# Warmup Iteration  18: 6677646.043 ops/s
# Warmup Iteration  19: 6908529.610 ops/s
# Warmup Iteration  20: 6629926.571 ops/s
# Warmup Iteration  21: 6615895.750 ops/s
# Warmup Iteration  22: 6932534.841 ops/s
# Warmup Iteration  23: 7125018.510 ops/s
# Warmup Iteration  24: 6963472.553 ops/s
# Warmup Iteration  25: 6646955.402 ops/s
# Warmup Iteration  26: 6614088.247 ops/s
# Warmup Iteration  27: 6767438.487 ops/s
# Warmup Iteration  28: 6951049.947 ops/s
# Warmup Iteration  29: 6674719.099 ops/s
# Warmup Iteration  30: 6800185.702 ops/s
Iteration   1: 6781532.244 ops/s
Iteration   2: 6184035.738 ops/s
Iteration   3: 5833910.754 ops/s
Iteration   4: 6414244.220 ops/s
Iteration   5: 6666551.580 ops/s
Iteration   6: 6611457.879 ops/s
Iteration   7: 6634391.363 ops/s
Iteration   8: 7131201.578 ops/s
Iteration   9: 6540753.745 ops/s
Iteration  10: 6931174.832 ops/s
Iteration  11: 6630830.979 ops/s
Iteration  12: 6736150.710 ops/s
Iteration  13: 6928821.877 ops/s
Iteration  14: 6511248.646 ops/s
Iteration  15: 6733678.037 ops/s
Iteration  16: 6699743.997 ops/s
Iteration  17: 6850554.659 ops/s
Iteration  18: 6817860.975 ops/s
Iteration  19: 6510939.638 ops/s
Iteration  20: 6811850.015 ops/s
Iteration  21: 6477494.597 ops/s
Iteration  22: 6721388.328 ops/s
Iteration  23: 6746520.095 ops/s
Iteration  24: 6812875.165 ops/s
Iteration  25: 6794265.210 ops/s
Iteration  26: 6702522.569 ops/s
Iteration  27: 6774427.225 ops/s
Iteration  28: 6487446.674 ops/s
Iteration  29: 6858834.303 ops/s
Iteration  30: 6659603.704 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotificationTest._Benchmark.benchmark_onSuccessEmpty":
  6666543.711 ±(99.9%) 160827.248 ops/s [Average]
  (min, avg, max) = (5833910.754, 6666543.711, 7131201.578), stdev = 240718.672
  CI (99.9%): [6505716.463, 6827370.959] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score        Error  Units
MaybeFlatMapNotificationTest._Benchmark.benchmark_onSuccessEmpty  thrpt   30  6666543.711 ± 160827.248  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_innerFusionRejected$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_innerFusionRejected

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 126399.654 ops/s
# Warmup Iteration   2: 873107.294 ops/s
# Warmup Iteration   3: 1245647.194 ops/s
# Warmup Iteration   4: 1417152.269 ops/s
# Warmup Iteration   5: 1421710.526 ops/s
# Warmup Iteration   6: 1375232.538 ops/s
# Warmup Iteration   7: 1464364.019 ops/s
# Warmup Iteration   8: 1370630.775 ops/s
# Warmup Iteration   9: 1305894.035 ops/s
# Warmup Iteration  10: 1423523.506 ops/s
# Warmup Iteration  11: 1349028.887 ops/s
# Warmup Iteration  12: 1355050.164 ops/s
# Warmup Iteration  13: 1413499.432 ops/s
# Warmup Iteration  14: 1362981.631 ops/s
# Warmup Iteration  15: 1405945.885 ops/s
# Warmup Iteration  16: 1400258.847 ops/s
# Warmup Iteration  17: 1425752.983 ops/s
# Warmup Iteration  18: 1391190.311 ops/s
# Warmup Iteration  19: 1462080.970 ops/s
# Warmup Iteration  20: 1426657.890 ops/s
# Warmup Iteration  21: 1406639.719 ops/s
# Warmup Iteration  22: 1433149.422 ops/s
# Warmup Iteration  23: 1420768.559 ops/s
# Warmup Iteration  24: 1399479.564 ops/s
# Warmup Iteration  25: 1427930.026 ops/s
# Warmup Iteration  26: 1380156.658 ops/s
# Warmup Iteration  27: 1415961.368 ops/s
# Warmup Iteration  28: 1369286.219 ops/s
# Warmup Iteration  29: 1389930.370 ops/s
# Warmup Iteration  30: 1421297.790 ops/s
Iteration   1: 1355857.082 ops/s
Iteration   2: 1368613.335 ops/s
Iteration   3: 1388154.387 ops/s
Iteration   4: 1399332.287 ops/s
Iteration   5: 1392431.586 ops/s
Iteration   6: 1369051.236 ops/s
Iteration   7: 1421967.169 ops/s
Iteration   8: 1357332.056 ops/s
Iteration   9: 1464561.375 ops/s
Iteration  10: 1373221.825 ops/s
Iteration  11: 1380830.624 ops/s
Iteration  12: 1379211.963 ops/s
Iteration  13: 1408801.755 ops/s
Iteration  14: 1429319.303 ops/s
Iteration  15: 1399940.060 ops/s
Iteration  16: 1412187.412 ops/s
Iteration  17: 1387448.706 ops/s
Iteration  18: 1414336.219 ops/s
Iteration  19: 1456480.209 ops/s
Iteration  20: 1380511.831 ops/s
Iteration  21: 1442769.606 ops/s
Iteration  22: 1393499.856 ops/s
Iteration  23: 1415001.059 ops/s
Iteration  24: 1410112.462 ops/s
Iteration  25: 1446105.035 ops/s
Iteration  26: 1379121.269 ops/s
Iteration  27: 1410081.575 ops/s
Iteration  28: 1419741.769 ops/s
Iteration  29: 1423776.300 ops/s
Iteration  30: 1417259.767 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_innerFusionRejected":
  1403235.304 ±(99.9%) 18773.278 ops/s [Average]
  (min, avg, max) = (1355857.082, 1403235.304, 1464561.375), stdev = 28098.961
  CI (99.9%): [1384462.026, 1422008.582] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
ObservableConcatMapEagerTest._Benchmark.benchmark_innerFusionRejected  thrpt   30  1403235.304 ± 18773.278  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingleTest._Benchmark.benchmark_singleErrors$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingleTest._Benchmark.benchmark_singleErrors

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 148810.498 ops/s
# Warmup Iteration   2: 493158.787 ops/s
# Warmup Iteration   3: 508330.185 ops/s
# Warmup Iteration   4: 524638.450 ops/s
# Warmup Iteration   5: 550914.221 ops/s
# Warmup Iteration   6: 476613.963 ops/s
# Warmup Iteration   7: 559372.023 ops/s
# Warmup Iteration   8: 558607.940 ops/s
# Warmup Iteration   9: 571094.343 ops/s
# Warmup Iteration  10: 554022.784 ops/s
# Warmup Iteration  11: 570394.479 ops/s
# Warmup Iteration  12: 539174.479 ops/s
# Warmup Iteration  13: 585387.853 ops/s
# Warmup Iteration  14: 556465.219 ops/s
# Warmup Iteration  15: 565056.774 ops/s
# Warmup Iteration  16: 552010.389 ops/s
# Warmup Iteration  17: 594790.426 ops/s
# Warmup Iteration  18: 620887.529 ops/s
# Warmup Iteration  19: 575512.562 ops/s
# Warmup Iteration  20: 601096.636 ops/s
# Warmup Iteration  21: 579592.014 ops/s
# Warmup Iteration  22: 612326.778 ops/s
# Warmup Iteration  23: 577470.977 ops/s
# Warmup Iteration  24: 587294.400 ops/s
# Warmup Iteration  25: 598630.265 ops/s
# Warmup Iteration  26: 579199.217 ops/s
# Warmup Iteration  27: 586861.877 ops/s
# Warmup Iteration  28: 480171.673 ops/s
# Warmup Iteration  29: 588879.646 ops/s
# Warmup Iteration  30: 585842.752 ops/s
Iteration   1: 597182.932 ops/s
Iteration   2: 593665.642 ops/s
Iteration   3: 566418.781 ops/s
Iteration   4: 602007.804 ops/s
Iteration   5: 584050.277 ops/s
Iteration   6: 601499.608 ops/s
Iteration   7: 588886.476 ops/s
Iteration   8: 592135.164 ops/s
Iteration   9: 603894.841 ops/s
Iteration  10: 578971.514 ops/s
Iteration  11: 596642.137 ops/s
Iteration  12: 586838.831 ops/s
Iteration  13: 591467.988 ops/s
Iteration  14: 592975.302 ops/s
Iteration  15: 582854.056 ops/s
Iteration  16: 611793.093 ops/s
Iteration  17: 589281.069 ops/s
Iteration  18: 575350.161 ops/s
Iteration  19: 606240.873 ops/s
Iteration  20: 579419.007 ops/s
Iteration  21: 592922.763 ops/s
Iteration  22: 587385.972 ops/s
Iteration  23: 606151.946 ops/s
Iteration  24: 592048.362 ops/s
Iteration  25: 594661.408 ops/s
Iteration  26: 586504.671 ops/s
Iteration  27: 598222.660 ops/s
Iteration  28: 575082.355 ops/s
Iteration  29: 581716.172 ops/s
Iteration  30: 596923.638 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingleTest._Benchmark.benchmark_singleErrors":
  591106.517 ±(99.9%) 6929.679 ops/s [Average]
  (min, avg, max) = (566418.781, 591106.517, 611793.093), stdev = 10372.018
  CI (99.9%): [584176.838, 598036.196] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score      Error  Units
MaybeFlatMapSingleTest._Benchmark.benchmark_singleErrors  thrpt   30  591106.517 ± 6929.679  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_concatMapInnerErrorDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_concatMapInnerErrorDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 94398.436 ops/s
# Warmup Iteration   2: 522663.694 ops/s
# Warmup Iteration   3: 544217.050 ops/s
# Warmup Iteration   4: 600379.326 ops/s
# Warmup Iteration   5: 534171.005 ops/s
# Warmup Iteration   6: 608723.380 ops/s
# Warmup Iteration   7: 633172.866 ops/s
# Warmup Iteration   8: 620745.896 ops/s
# Warmup Iteration   9: 616871.119 ops/s
# Warmup Iteration  10: 638778.204 ops/s
# Warmup Iteration  11: 621684.525 ops/s
# Warmup Iteration  12: 625277.268 ops/s
# Warmup Iteration  13: 613037.344 ops/s
# Warmup Iteration  14: 633495.699 ops/s
# Warmup Iteration  15: 632984.327 ops/s
# Warmup Iteration  16: 620663.450 ops/s
# Warmup Iteration  17: 641746.889 ops/s
# Warmup Iteration  18: 643677.403 ops/s
# Warmup Iteration  19: 653500.344 ops/s
# Warmup Iteration  20: 679014.794 ops/s
# Warmup Iteration  21: 646994.925 ops/s
# Warmup Iteration  22: 659502.361 ops/s
# Warmup Iteration  23: 655132.446 ops/s
# Warmup Iteration  24: 657459.971 ops/s
# Warmup Iteration  25: 655720.169 ops/s
# Warmup Iteration  26: 647674.814 ops/s
# Warmup Iteration  27: 674525.617 ops/s
# Warmup Iteration  28: 659672.980 ops/s
# Warmup Iteration  29: 645293.843 ops/s
# Warmup Iteration  30: 642489.678 ops/s
Iteration   1: 660258.107 ops/s
Iteration   2: 660568.461 ops/s
Iteration   3: 644672.702 ops/s
Iteration   4: 646580.167 ops/s
Iteration   5: 668631.904 ops/s
Iteration   6: 644606.654 ops/s
Iteration   7: 685869.893 ops/s
Iteration   8: 646472.471 ops/s
Iteration   9: 654990.224 ops/s
Iteration  10: 658924.435 ops/s
Iteration  11: 650069.681 ops/s
Iteration  12: 634264.513 ops/s
Iteration  13: 655522.534 ops/s
Iteration  14: 669004.503 ops/s
Iteration  15: 642561.485 ops/s
Iteration  16: 666856.685 ops/s
Iteration  17: 633995.113 ops/s
Iteration  18: 655275.454 ops/s
Iteration  19: 646275.469 ops/s
Iteration  20: 653877.526 ops/s
Iteration  21: 662943.975 ops/s
Iteration  22: 654862.857 ops/s
Iteration  23: 660720.774 ops/s
Iteration  24: 645066.158 ops/s
Iteration  25: 653320.475 ops/s
Iteration  26: 648035.246 ops/s
Iteration  27: 671919.894 ops/s
Iteration  28: 671822.933 ops/s
Iteration  29: 638469.893 ops/s
Iteration  30: 678108.413 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_concatMapInnerErrorDelayError":
  655484.953 ±(99.9%) 8461.128 ops/s [Average]
  (min, avg, max) = (633995.113, 655484.953, 685869.893), stdev = 12664.219
  CI (99.9%): [647023.825, 663946.081] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             Mode  Cnt       Score      Error  Units
ObservableConcatMapSchedulerTest._Benchmark.benchmark_concatMapInnerErrorDelayError  thrpt   30  655484.953 ± 8461.128  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeMaterializeTest._Benchmark.benchmark_error$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeMaterializeTest._Benchmark.benchmark_error

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 139561.938 ops/s
# Warmup Iteration   2: 583569.446 ops/s
# Warmup Iteration   3: 717412.305 ops/s
# Warmup Iteration   4: 623845.845 ops/s
# Warmup Iteration   5: 712825.198 ops/s
# Warmup Iteration   6: 657705.841 ops/s
# Warmup Iteration   7: 699577.024 ops/s
# Warmup Iteration   8: 705269.793 ops/s
# Warmup Iteration   9: 678017.226 ops/s
# Warmup Iteration  10: 708781.432 ops/s
# Warmup Iteration  11: 739221.000 ops/s
# Warmup Iteration  12: 696840.761 ops/s
# Warmup Iteration  13: 745221.943 ops/s
# Warmup Iteration  14: 711963.865 ops/s
# Warmup Iteration  15: 710349.776 ops/s
# Warmup Iteration  16: 722541.306 ops/s
# Warmup Iteration  17: 756492.600 ops/s
# Warmup Iteration  18: 764212.156 ops/s
# Warmup Iteration  19: 769324.002 ops/s
# Warmup Iteration  20: 772672.347 ops/s
# Warmup Iteration  21: 750742.150 ops/s
# Warmup Iteration  22: 703121.237 ops/s
# Warmup Iteration  23: 668570.646 ops/s
# Warmup Iteration  24: 731982.897 ops/s
# Warmup Iteration  25: 771718.495 ops/s
# Warmup Iteration  26: 768075.768 ops/s
# Warmup Iteration  27: 745307.476 ops/s
# Warmup Iteration  28: 788490.294 ops/s
# Warmup Iteration  29: 748730.709 ops/s
# Warmup Iteration  30: 804262.872 ops/s
Iteration   1: 727357.988 ops/s
Iteration   2: 780060.259 ops/s
Iteration   3: 747780.850 ops/s
Iteration   4: 770312.793 ops/s
Iteration   5: 786720.600 ops/s
Iteration   6: 744385.495 ops/s
Iteration   7: 770834.327 ops/s
Iteration   8: 757312.873 ops/s
Iteration   9: 773264.267 ops/s
Iteration  10: 783675.940 ops/s
Iteration  11: 744713.142 ops/s
Iteration  12: 790179.867 ops/s
Iteration  13: 764127.705 ops/s
Iteration  14: 733756.508 ops/s
Iteration  15: 780085.030 ops/s
Iteration  16: 740980.311 ops/s
Iteration  17: 785944.816 ops/s
Iteration  18: 751240.705 ops/s
Iteration  19: 744519.674 ops/s
Iteration  20: 789236.755 ops/s
Iteration  21: 735590.383 ops/s
Iteration  22: 760436.780 ops/s
Iteration  23: 782825.774 ops/s
Iteration  24: 762280.464 ops/s
Iteration  25: 781765.220 ops/s
Iteration  26: 806005.551 ops/s
Iteration  27: 734607.018 ops/s
Iteration  28: 771122.946 ops/s
Iteration  29: 729675.897 ops/s
Iteration  30: 780929.688 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeMaterializeTest._Benchmark.benchmark_error":
  763724.321 ±(99.9%) 14374.829 ops/s [Average]
  (min, avg, max) = (727357.988, 763724.321, 806005.551), stdev = 21515.568
  CI (99.9%): [749349.492, 778099.149] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt       Score       Error  Units
MaybeMaterializeTest._Benchmark.benchmark_error  thrpt   30  763724.321 ± 14374.829  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotificationTest._Benchmark.benchmark_onErrorNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotificationTest._Benchmark.benchmark_onErrorNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 36281.676 ops/s
# Warmup Iteration   2: 141916.821 ops/s
# Warmup Iteration   3: 175894.171 ops/s
# Warmup Iteration   4: 195419.464 ops/s
# Warmup Iteration   5: 201805.864 ops/s
# Warmup Iteration   6: 190169.671 ops/s
# Warmup Iteration   7: 201156.588 ops/s
# Warmup Iteration   8: 195343.791 ops/s
# Warmup Iteration   9: 191324.081 ops/s
# Warmup Iteration  10: 195339.281 ops/s
# Warmup Iteration  11: 191152.278 ops/s
# Warmup Iteration  12: 191332.108 ops/s
# Warmup Iteration  13: 200225.458 ops/s
# Warmup Iteration  14: 193100.119 ops/s
# Warmup Iteration  15: 197637.958 ops/s
# Warmup Iteration  16: 200310.677 ops/s
# Warmup Iteration  17: 199927.073 ops/s
# Warmup Iteration  18: 209257.739 ops/s
# Warmup Iteration  19: 210450.687 ops/s
# Warmup Iteration  20: 199682.223 ops/s
# Warmup Iteration  21: 207654.458 ops/s
# Warmup Iteration  22: 201142.396 ops/s
# Warmup Iteration  23: 206858.303 ops/s
# Warmup Iteration  24: 209740.590 ops/s
# Warmup Iteration  25: 208439.196 ops/s
# Warmup Iteration  26: 198287.695 ops/s
# Warmup Iteration  27: 206053.418 ops/s
# Warmup Iteration  28: 202338.878 ops/s
# Warmup Iteration  29: 202829.795 ops/s
# Warmup Iteration  30: 201973.788 ops/s
Iteration   1: 209965.107 ops/s
Iteration   2: 201413.856 ops/s
Iteration   3: 197565.352 ops/s
Iteration   4: 209141.904 ops/s
Iteration   5: 203863.618 ops/s
Iteration   6: 210554.347 ops/s
Iteration   7: 201723.140 ops/s
Iteration   8: 211487.255 ops/s
Iteration   9: 201952.590 ops/s
Iteration  10: 210185.695 ops/s
Iteration  11: 203723.777 ops/s
Iteration  12: 205060.044 ops/s
Iteration  13: 207632.241 ops/s
Iteration  14: 201525.334 ops/s
Iteration  15: 204931.183 ops/s
Iteration  16: 203300.050 ops/s
Iteration  17: 199666.966 ops/s
Iteration  18: 203081.837 ops/s
Iteration  19: 210889.706 ops/s
Iteration  20: 202182.987 ops/s
Iteration  21: 207141.076 ops/s
Iteration  22: 213351.988 ops/s
Iteration  23: 211755.076 ops/s
Iteration  24: 196590.887 ops/s
Iteration  25: 207935.182 ops/s
Iteration  26: 204501.514 ops/s
Iteration  27: 203516.664 ops/s
Iteration  28: 203167.143 ops/s
Iteration  29: 204361.928 ops/s
Iteration  30: 209412.370 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotificationTest._Benchmark.benchmark_onErrorNull":
  205386.027 ±(99.9%) 2909.253 ops/s [Average]
  (min, avg, max) = (196590.887, 205386.027, 213351.988), stdev = 4354.433
  CI (99.9%): [202476.774, 208295.280] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
MaybeFlatMapNotificationTest._Benchmark.benchmark_onErrorNull  thrpt   30  205386.027 ± 2909.253  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorXTest._Benchmark.benchmark_onErrorCompleteFalse$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorXTest._Benchmark.benchmark_onErrorCompleteFalse

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 360355.354 ops/s
# Warmup Iteration   2: 592126.317 ops/s
# Warmup Iteration   3: 687839.894 ops/s
# Warmup Iteration   4: 737302.474 ops/s
# Warmup Iteration   5: 628697.464 ops/s
# Warmup Iteration   6: 717098.797 ops/s
# Warmup Iteration   7: 741657.112 ops/s
# Warmup Iteration   8: 691317.265 ops/s
# Warmup Iteration   9: 727059.996 ops/s
# Warmup Iteration  10: 691342.481 ops/s
# Warmup Iteration  11: 742258.698 ops/s
# Warmup Iteration  12: 717490.150 ops/s
# Warmup Iteration  13: 693775.296 ops/s
# Warmup Iteration  14: 731657.362 ops/s
# Warmup Iteration  15: 699616.941 ops/s
# Warmup Iteration  16: 712015.855 ops/s
# Warmup Iteration  17: 636784.689 ops/s
# Warmup Iteration  18: 667500.426 ops/s
# Warmup Iteration  19: 741353.832 ops/s
# Warmup Iteration  20: 735118.659 ops/s
# Warmup Iteration  21: 756659.313 ops/s
# Warmup Iteration  22: 747632.955 ops/s
# Warmup Iteration  23: 754537.132 ops/s
# Warmup Iteration  24: 687183.216 ops/s
# Warmup Iteration  25: 698132.627 ops/s
# Warmup Iteration  26: 775583.688 ops/s
# Warmup Iteration  27: 766858.690 ops/s
# Warmup Iteration  28: 743652.820 ops/s
# Warmup Iteration  29: 783277.552 ops/s
# Warmup Iteration  30: 750663.593 ops/s
Iteration   1: 781702.748 ops/s
Iteration   2: 774430.357 ops/s
Iteration   3: 756191.048 ops/s
Iteration   4: 751631.082 ops/s
Iteration   5: 750934.648 ops/s
Iteration   6: 773499.627 ops/s
Iteration   7: 753494.985 ops/s
Iteration   8: 764018.843 ops/s
Iteration   9: 763014.135 ops/s
Iteration  10: 737650.195 ops/s
Iteration  11: 774627.742 ops/s
Iteration  12: 726235.669 ops/s
Iteration  13: 757729.920 ops/s
Iteration  14: 766090.435 ops/s
Iteration  15: 737925.131 ops/s
Iteration  16: 789604.030 ops/s
Iteration  17: 777624.892 ops/s
Iteration  18: 755659.757 ops/s
Iteration  19: 728280.706 ops/s
Iteration  20: 778635.541 ops/s
Iteration  21: 721414.076 ops/s
Iteration  22: 768911.203 ops/s
Iteration  23: 740324.811 ops/s
Iteration  24: 763728.567 ops/s
Iteration  25: 739587.661 ops/s
Iteration  26: 780103.934 ops/s
Iteration  27: 744981.130 ops/s
Iteration  28: 757941.623 ops/s
Iteration  29: 747130.064 ops/s
Iteration  30: 758900.875 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorXTest._Benchmark.benchmark_onErrorCompleteFalse":
  757400.181 ±(99.9%) 11784.324 ops/s [Average]
  (min, avg, max) = (721414.076, 757400.181, 789604.030), stdev = 17638.222
  CI (99.9%): [745615.857, 769184.505] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score       Error  Units
MaybeOnErrorXTest._Benchmark.benchmark_onErrorCompleteFalse  thrpt   30  757400.181 ± 11784.324  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorXTest._Benchmark.benchmark_onErrorReturn$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorXTest._Benchmark.benchmark_onErrorReturn

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 318730.176 ops/s
# Warmup Iteration   2: 597814.203 ops/s
# Warmup Iteration   3: 649414.349 ops/s
# Warmup Iteration   4: 710035.237 ops/s
# Warmup Iteration   5: 620997.146 ops/s
# Warmup Iteration   6: 708222.761 ops/s
# Warmup Iteration   7: 701826.514 ops/s
# Warmup Iteration   8: 727664.802 ops/s
# Warmup Iteration   9: 707141.840 ops/s
# Warmup Iteration  10: 730015.926 ops/s
# Warmup Iteration  11: 718662.296 ops/s
# Warmup Iteration  12: 691282.338 ops/s
# Warmup Iteration  13: 754428.513 ops/s
# Warmup Iteration  14: 704335.510 ops/s
# Warmup Iteration  15: 738646.429 ops/s
# Warmup Iteration  16: 692189.483 ops/s
# Warmup Iteration  17: 798450.816 ops/s
# Warmup Iteration  18: 760047.421 ops/s
# Warmup Iteration  19: 749144.434 ops/s
# Warmup Iteration  20: 802264.457 ops/s
# Warmup Iteration  21: 731253.973 ops/s
# Warmup Iteration  22: 769028.759 ops/s
# Warmup Iteration  23: 750091.143 ops/s
# Warmup Iteration  24: 746555.704 ops/s
# Warmup Iteration  25: 791991.813 ops/s
# Warmup Iteration  26: 736427.686 ops/s
# Warmup Iteration  27: 782562.014 ops/s
# Warmup Iteration  28: 794774.481 ops/s
# Warmup Iteration  29: 725449.809 ops/s
# Warmup Iteration  30: 772740.127 ops/s
Iteration   1: 741249.180 ops/s
Iteration   2: 801962.471 ops/s
Iteration   3: 752530.104 ops/s
Iteration   4: 737100.691 ops/s
Iteration   5: 780779.416 ops/s
Iteration   6: 761269.531 ops/s
Iteration   7: 773633.090 ops/s
Iteration   8: 729026.423 ops/s
Iteration   9: 769085.086 ops/s
Iteration  10: 743164.748 ops/s
Iteration  11: 771402.721 ops/s
Iteration  12: 779889.701 ops/s
Iteration  13: 767870.783 ops/s
Iteration  14: 757854.716 ops/s
Iteration  15: 735558.292 ops/s
Iteration  16: 771886.197 ops/s
Iteration  17: 731593.425 ops/s
Iteration  18: 774827.006 ops/s
Iteration  19: 744198.789 ops/s
Iteration  20: 779027.588 ops/s
Iteration  21: 756214.475 ops/s
Iteration  22: 771644.390 ops/s
Iteration  23: 726398.373 ops/s
Iteration  24: 781576.321 ops/s
Iteration  25: 769184.126 ops/s
Iteration  26: 746406.245 ops/s
Iteration  27: 766793.337 ops/s
Iteration  28: 755709.665 ops/s
Iteration  29: 789642.984 ops/s
Iteration  30: 733481.539 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorXTest._Benchmark.benchmark_onErrorReturn":
  760032.047 ±(99.9%) 13168.883 ops/s [Average]
  (min, avg, max) = (726398.373, 760032.047, 801962.471), stdev = 19710.566
  CI (99.9%): [746863.164, 773200.930] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score       Error  Units
MaybeOnErrorXTest._Benchmark.benchmark_onErrorReturn  thrpt   30  760032.047 ± 13168.883  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOnTest._Benchmark.benchmark_outputFusedCancelReentrant$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOnTest._Benchmark.benchmark_outputFusedCancelReentrant

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 12760.650 ops/s
# Warmup Iteration   2: 26396.605 ops/s
# Warmup Iteration   3: 20285.636 ops/s
# Warmup Iteration   4: 20779.706 ops/s
# Warmup Iteration   5: 20641.329 ops/s
# Warmup Iteration   6: 21486.802 ops/s
# Warmup Iteration   7: 20743.876 ops/s
# Warmup Iteration   8: 21134.321 ops/s
# Warmup Iteration   9: 21063.847 ops/s
# Warmup Iteration  10: 21245.110 ops/s
# Warmup Iteration  11: 21233.654 ops/s
# Warmup Iteration  12: 28024.661 ops/s
# Warmup Iteration  13: 20544.181 ops/s
# Warmup Iteration  14: 20605.585 ops/s
# Warmup Iteration  15: 21604.792 ops/s
# Warmup Iteration  16: 21321.877 ops/s
# Warmup Iteration  17: 22701.975 ops/s
# Warmup Iteration  18: 21161.133 ops/s
# Warmup Iteration  19: 20871.538 ops/s
# Warmup Iteration  20: 21084.372 ops/s
# Warmup Iteration  21: 21277.861 ops/s
# Warmup Iteration  22: 21386.303 ops/s
# Warmup Iteration  23: 20741.149 ops/s
# Warmup Iteration  24: 21427.590 ops/s
# Warmup Iteration  25: 20697.898 ops/s
# Warmup Iteration  26: 21188.781 ops/s
# Warmup Iteration  27: 20895.550 ops/s
# Warmup Iteration  28: 20649.101 ops/s
# Warmup Iteration  29: 20987.187 ops/s
# Warmup Iteration  30: 21416.429 ops/s
Iteration   1: 21020.730 ops/s
Iteration   2: 21466.192 ops/s
Iteration   3: 20680.260 ops/s
Iteration   4: 20604.903 ops/s
Iteration   5: 20524.830 ops/s
Iteration   6: 21349.272 ops/s
Iteration   7: 21239.884 ops/s
Iteration   8: 21086.109 ops/s
Iteration   9: 21063.072 ops/s
Iteration  10: 21148.085 ops/s
Iteration  11: 20514.268 ops/s
Iteration  12: 21047.381 ops/s
Iteration  13: 21391.627 ops/s
Iteration  14: 20844.847 ops/s
Iteration  15: 21238.836 ops/s
Iteration  16: 20806.528 ops/s
Iteration  17: 21142.256 ops/s
Iteration  18: 21424.009 ops/s
Iteration  19: 21186.546 ops/s
Iteration  20: 21048.451 ops/s
Iteration  21: 21758.046 ops/s
Iteration  22: 20635.865 ops/s
Iteration  23: 21454.977 ops/s
Iteration  24: 20493.995 ops/s
Iteration  25: 21077.434 ops/s
Iteration  26: 21021.332 ops/s
Iteration  27: 21163.728 ops/s
Iteration  28: 20861.632 ops/s
Iteration  29: 21538.118 ops/s
Iteration  30: 24056.023 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOnTest._Benchmark.benchmark_outputFusedCancelReentrant":
  21162.974 ±(99.9%) 424.672 ops/s [Average]
  (min, avg, max) = (20493.995, 21162.974, 24056.023), stdev = 635.629
  CI (99.9%): [20738.302, 21587.647] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt      Score     Error  Units
FlowableObserveOnTest._Benchmark.benchmark_outputFusedCancelReentrant  thrpt   30  21162.974 ± 424.672  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOnTest._Benchmark.benchmark_trampolineScheduler$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOnTest._Benchmark.benchmark_trampolineScheduler

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 96290.756 ops/s
# Warmup Iteration   2: 676171.876 ops/s
# Warmup Iteration   3: 762401.424 ops/s
# Warmup Iteration   4: 754733.949 ops/s
# Warmup Iteration   5: 840111.205 ops/s
# Warmup Iteration   6: 829846.990 ops/s
# Warmup Iteration   7: 869921.161 ops/s
# Warmup Iteration   8: 833617.493 ops/s
# Warmup Iteration   9: 869038.636 ops/s
# Warmup Iteration  10: 840547.427 ops/s
# Warmup Iteration  11: 842232.371 ops/s
# Warmup Iteration  12: 859516.568 ops/s
# Warmup Iteration  13: 863709.694 ops/s
# Warmup Iteration  14: 849619.518 ops/s
# Warmup Iteration  15: 845625.067 ops/s
# Warmup Iteration  16: 882316.154 ops/s
# Warmup Iteration  17: 762370.727 ops/s
# Warmup Iteration  18: 869224.966 ops/s
# Warmup Iteration  19: 843215.939 ops/s
# Warmup Iteration  20: 844943.328 ops/s
# Warmup Iteration  21: 869561.439 ops/s
# Warmup Iteration  22: 846402.033 ops/s
# Warmup Iteration  23: 859317.548 ops/s
# Warmup Iteration  24: 848828.500 ops/s
# Warmup Iteration  25: 821548.961 ops/s
# Warmup Iteration  26: 870724.523 ops/s
# Warmup Iteration  27: 851246.805 ops/s
# Warmup Iteration  28: 826302.526 ops/s
# Warmup Iteration  29: 869768.849 ops/s
# Warmup Iteration  30: 837825.950 ops/s
Iteration   1: 881672.487 ops/s
Iteration   2: 839250.697 ops/s
Iteration   3: 864763.999 ops/s
Iteration   4: 841970.763 ops/s
Iteration   5: 865914.246 ops/s
Iteration   6: 844171.852 ops/s
Iteration   7: 861724.831 ops/s
Iteration   8: 824853.403 ops/s
Iteration   9: 863843.988 ops/s
Iteration  10: 844978.282 ops/s
Iteration  11: 854366.219 ops/s
Iteration  12: 876200.322 ops/s
Iteration  13: 791719.193 ops/s
Iteration  14: 844436.281 ops/s
Iteration  15: 859883.248 ops/s
Iteration  16: 810036.646 ops/s
Iteration  17: 880043.991 ops/s
Iteration  18: 834456.284 ops/s
Iteration  19: 825299.048 ops/s
Iteration  20: 874519.460 ops/s
Iteration  21: 808983.933 ops/s
Iteration  22: 872458.340 ops/s
Iteration  23: 842863.987 ops/s
Iteration  24: 870808.580 ops/s
Iteration  25: 832542.394 ops/s
Iteration  26: 856795.340 ops/s
Iteration  27: 851283.263 ops/s
Iteration  28: 863509.417 ops/s
Iteration  29: 887663.200 ops/s
Iteration  30: 800982.744 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOnTest._Benchmark.benchmark_trampolineScheduler":
  849066.548 ±(99.9%) 16579.949 ops/s [Average]
  (min, avg, max) = (791719.193, 849066.548, 887663.200), stdev = 24816.089
  CI (99.9%): [832486.599, 865646.497] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score       Error  Units
FlowableObserveOnTest._Benchmark.benchmark_trampolineScheduler  thrpt   30  849066.548 ± 16579.949  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTests._Benchmark.benchmark_timedErrorOther$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTests._Benchmark.benchmark_timedErrorOther

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 8719.285 ops/s
# Warmup Iteration   2: 24829.531 ops/s
# Warmup Iteration   3: 52816.343 ops/s
# Warmup Iteration   4: 60381.445 ops/s
# Warmup Iteration   5: 111952.719 ops/s
# Warmup Iteration   6: 106619.568 ops/s
# Warmup Iteration   7: 105984.278 ops/s
# Warmup Iteration   8: 89476.233 ops/s
# Warmup Iteration   9: 107376.266 ops/s
# Warmup Iteration  10: 117663.540 ops/s
# Warmup Iteration  11: 120680.862 ops/s
# Warmup Iteration  12: 106951.900 ops/s
# Warmup Iteration  13: 120249.560 ops/s
# Warmup Iteration  14: 125623.241 ops/s
# Warmup Iteration  15: 123977.419 ops/s
# Warmup Iteration  16: 117770.331 ops/s
# Warmup Iteration  17: 117336.367 ops/s
# Warmup Iteration  18: 131614.060 ops/s
# Warmup Iteration  19: 110210.326 ops/s
# Warmup Iteration  20: 115346.232 ops/s
# Warmup Iteration  21: 123352.924 ops/s
# Warmup Iteration  22: 119899.680 ops/s
# Warmup Iteration  23: 122962.438 ops/s
# Warmup Iteration  24: 115657.762 ops/s
# Warmup Iteration  25: 116332.747 ops/s
# Warmup Iteration  26: 110183.799 ops/s
# Warmup Iteration  27: 133734.091 ops/s
# Warmup Iteration  28: 108710.653 ops/s
# Warmup Iteration  29: 106636.360 ops/s
# Warmup Iteration  30: 121714.986 ops/s
Iteration   1: 123679.433 ops/s
Iteration   2: 119079.095 ops/s
Iteration   3: 105785.550 ops/s
Iteration   4: 125451.394 ops/s
Iteration   5: 117079.395 ops/s
Iteration   6: 107418.685 ops/s
Iteration   7: 118346.014 ops/s
Iteration   8: 125096.898 ops/s
Iteration   9: 120636.123 ops/s
Iteration  10: 119520.402 ops/s
Iteration  11: 124481.590 ops/s
Iteration  12: 123216.081 ops/s
Iteration  13: 118470.788 ops/s
Iteration  14: 117008.883 ops/s
Iteration  15: 120462.166 ops/s
Iteration  16: 111494.373 ops/s
Iteration  17: 119579.319 ops/s
Iteration  18: 131114.943 ops/s
Iteration  19: 128204.883 ops/s
Iteration  20: 120494.835 ops/s
Iteration  21: 123952.343 ops/s
Iteration  22: 115747.295 ops/s
Iteration  23: 130402.748 ops/s
Iteration  24: 125190.377 ops/s
Iteration  25: 109634.269 ops/s
Iteration  26: 122109.653 ops/s
Iteration  27: 130280.922 ops/s
Iteration  28: 96588.121 ops/s
Iteration  29: 129728.158 ops/s
Iteration  30: 132331.275 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTests._Benchmark.benchmark_timedErrorOther":
  120419.534 ±(99.9%) 5441.755 ops/s [Average]
  (min, avg, max) = (96588.121, 120419.534, 132331.275), stdev = 8144.963
  CI (99.9%): [114977.779, 125861.289] (assumes normal distribution)


# Run complete. Total time: 00:01:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
FlowableTimeoutTests._Benchmark.benchmark_timedErrorOther  thrpt   30  120419.534 ± 5441.755  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReplayEagerTruncateTest._Benchmark.benchmark_noHeadRetentionErrorTime$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReplayEagerTruncateTest._Benchmark.benchmark_noHeadRetentionErrorTime

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 47165.773 ops/s
# Warmup Iteration   2: 155489.547 ops/s
# Warmup Iteration   3: 168870.091 ops/s
# Warmup Iteration   4: 142061.476 ops/s
# Warmup Iteration   5: 143754.616 ops/s
# Warmup Iteration   6: 164798.464 ops/s
# Warmup Iteration   7: 168204.757 ops/s
# Warmup Iteration   8: 162397.933 ops/s
# Warmup Iteration   9: 162715.990 ops/s
# Warmup Iteration  10: 177971.141 ops/s
# Warmup Iteration  11: 170301.601 ops/s
# Warmup Iteration  12: 166129.290 ops/s
# Warmup Iteration  13: 172093.038 ops/s
# Warmup Iteration  14: 163739.958 ops/s
# Warmup Iteration  15: 167196.852 ops/s
# Warmup Iteration  16: 171127.123 ops/s
# Warmup Iteration  17: 170535.583 ops/s
# Warmup Iteration  18: 168055.692 ops/s
# Warmup Iteration  19: 172611.808 ops/s
# Warmup Iteration  20: 165903.391 ops/s
# Warmup Iteration  21: 167895.891 ops/s
# Warmup Iteration  22: 183997.656 ops/s
# Warmup Iteration  23: 172159.764 ops/s
# Warmup Iteration  24: 164573.606 ops/s
# Warmup Iteration  25: 170886.209 ops/s
# Warmup Iteration  26: 165883.880 ops/s
# Warmup Iteration  27: 169788.244 ops/s
# Warmup Iteration  28: 183495.348 ops/s
# Warmup Iteration  29: 164949.238 ops/s
# Warmup Iteration  30: 169493.677 ops/s
Iteration   1: 173514.759 ops/s
Iteration   2: 168964.600 ops/s
Iteration   3: 165670.604 ops/s
Iteration   4: 168580.913 ops/s
Iteration   5: 172955.494 ops/s
Iteration   6: 168037.706 ops/s
Iteration   7: 169803.930 ops/s
Iteration   8: 165385.461 ops/s
Iteration   9: 174412.844 ops/s
Iteration  10: 172483.274 ops/s
Iteration  11: 164014.318 ops/s
Iteration  12: 172254.582 ops/s
Iteration  13: 166366.124 ops/s
Iteration  14: 164775.753 ops/s
Iteration  15: 171062.634 ops/s
Iteration  16: 168192.993 ops/s
Iteration  17: 170494.761 ops/s
Iteration  18: 174324.743 ops/s
Iteration  19: 163826.728 ops/s
Iteration  20: 169090.169 ops/s
Iteration  21: 170713.109 ops/s
Iteration  22: 170408.044 ops/s
Iteration  23: 164971.988 ops/s
Iteration  24: 172677.984 ops/s
Iteration  25: 168800.371 ops/s
Iteration  26: 174877.620 ops/s
Iteration  27: 171434.799 ops/s
Iteration  28: 172105.062 ops/s
Iteration  29: 160759.804 ops/s
Iteration  30: 174870.135 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableReplayEagerTruncateTest._Benchmark.benchmark_noHeadRetentionErrorTime":
  169527.710 ±(99.9%) 2495.799 ops/s [Average]
  (min, avg, max) = (160759.804, 169527.710, 174877.620), stdev = 3735.595
  CI (99.9%): [167031.911, 172023.509] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt       Score      Error  Units
ObservableReplayEagerTruncateTest._Benchmark.benchmark_noHeadRetentionErrorTime  thrpt   30  169527.710 ± 2495.799  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipLastTimedTest._Benchmark.benchmark_delayErrorMoreWork$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipLastTimedTest._Benchmark.benchmark_delayErrorMoreWork

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 13015.248 ops/s
# Warmup Iteration   2: 82273.757 ops/s
# Warmup Iteration   3: 167759.791 ops/s
# Warmup Iteration   4: 182633.631 ops/s
# Warmup Iteration   5: 191671.356 ops/s
# Warmup Iteration   6: 171038.509 ops/s
# Warmup Iteration   7: 196860.600 ops/s
# Warmup Iteration   8: 187121.930 ops/s
# Warmup Iteration   9: 187407.473 ops/s
# Warmup Iteration  10: 188250.891 ops/s
# Warmup Iteration  11: 186518.829 ops/s
# Warmup Iteration  12: 187425.000 ops/s
# Warmup Iteration  13: 190637.401 ops/s
# Warmup Iteration  14: 186153.047 ops/s
# Warmup Iteration  15: 192271.367 ops/s
# Warmup Iteration  16: 186694.701 ops/s
# Warmup Iteration  17: 188539.493 ops/s
# Warmup Iteration  18: 189531.470 ops/s
# Warmup Iteration  19: 191173.284 ops/s
# Warmup Iteration  20: 189107.550 ops/s
# Warmup Iteration  21: 181148.795 ops/s
# Warmup Iteration  22: 188796.179 ops/s
# Warmup Iteration  23: 194160.165 ops/s
# Warmup Iteration  24: 193829.048 ops/s
# Warmup Iteration  25: 184090.078 ops/s
# Warmup Iteration  26: 194330.326 ops/s
# Warmup Iteration  27: 184002.019 ops/s
# Warmup Iteration  28: 191987.247 ops/s
# Warmup Iteration  29: 189385.001 ops/s
# Warmup Iteration  30: 194992.835 ops/s
Iteration   1: 185039.742 ops/s
Iteration   2: 185510.373 ops/s
Iteration   3: 195860.485 ops/s
Iteration   4: 186018.900 ops/s
Iteration   5: 191100.830 ops/s
Iteration   6: 184659.883 ops/s
Iteration   7: 190111.585 ops/s
Iteration   8: 190023.784 ops/s
Iteration   9: 188642.395 ops/s
Iteration  10: 191639.417 ops/s
Iteration  11: 187864.643 ops/s
Iteration  12: 190170.745 ops/s
Iteration  13: 187428.991 ops/s
Iteration  14: 189514.711 ops/s
Iteration  15: 193750.955 ops/s
Iteration  16: 183018.540 ops/s
Iteration  17: 192479.526 ops/s
Iteration  18: 200329.497 ops/s
Iteration  19: 182509.955 ops/s
Iteration  20: 191186.039 ops/s
Iteration  21: 185589.895 ops/s
Iteration  22: 190985.031 ops/s
Iteration  23: 182219.298 ops/s
Iteration  24: 189475.381 ops/s
Iteration  25: 190961.610 ops/s
Iteration  26: 183261.557 ops/s
Iteration  27: 197761.636 ops/s
Iteration  28: 189763.589 ops/s
Iteration  29: 186330.343 ops/s
Iteration  30: 189597.213 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipLastTimedTest._Benchmark.benchmark_delayErrorMoreWork":
  189093.552 ±(99.9%) 2911.364 ops/s [Average]
  (min, avg, max) = (182219.298, 189093.552, 200329.497), stdev = 4357.593
  CI (99.9%): [186182.187, 192004.916] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score      Error  Units
FlowableSkipLastTimedTest._Benchmark.benchmark_delayErrorMoreWork  thrpt   30  189093.552 ± 2911.364  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLongTest._Benchmark.benchmark_slowPathRebatch$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLongTest._Benchmark.benchmark_slowPathRebatch

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 478003.808 ops/s
# Warmup Iteration   2: 2123450.370 ops/s
# Warmup Iteration   3: 3072866.975 ops/s
# Warmup Iteration   4: 2955130.616 ops/s
# Warmup Iteration   5: 3056854.007 ops/s
# Warmup Iteration   6: 3002919.305 ops/s
# Warmup Iteration   7: 2776839.812 ops/s
# Warmup Iteration   8: 2822260.416 ops/s
# Warmup Iteration   9: 2896491.620 ops/s
# Warmup Iteration  10: 3011026.841 ops/s
# Warmup Iteration  11: 3088516.043 ops/s
# Warmup Iteration  12: 3024810.978 ops/s
# Warmup Iteration  13: 3021322.875 ops/s
# Warmup Iteration  14: 3084283.266 ops/s
# Warmup Iteration  15: 2988439.058 ops/s
# Warmup Iteration  16: 3076225.560 ops/s
# Warmup Iteration  17: 2952707.279 ops/s
# Warmup Iteration  18: 3019937.168 ops/s
# Warmup Iteration  19: 3113371.508 ops/s
# Warmup Iteration  20: 2958165.287 ops/s
# Warmup Iteration  21: 3032311.402 ops/s
# Warmup Iteration  22: 2930800.702 ops/s
# Warmup Iteration  23: 3092506.033 ops/s
# Warmup Iteration  24: 2998307.077 ops/s
# Warmup Iteration  25: 3088091.386 ops/s
# Warmup Iteration  26: 2978695.473 ops/s
# Warmup Iteration  27: 3022757.820 ops/s
# Warmup Iteration  28: 3187686.590 ops/s
# Warmup Iteration  29: 2951205.631 ops/s
# Warmup Iteration  30: 3103620.270 ops/s
Iteration   1: 2945006.297 ops/s
Iteration   2: 3025692.385 ops/s
Iteration   3: 2960230.755 ops/s
Iteration   4: 3017266.649 ops/s
Iteration   5: 3026570.262 ops/s
Iteration   6: 3008530.166 ops/s
Iteration   7: 3001741.056 ops/s
Iteration   8: 3103397.571 ops/s
Iteration   9: 2990912.353 ops/s
Iteration  10: 3081586.470 ops/s
Iteration  11: 3016451.064 ops/s
Iteration  12: 3092075.317 ops/s
Iteration  13: 2982463.322 ops/s
Iteration  14: 3055861.272 ops/s
Iteration  15: 3133146.408 ops/s
Iteration  16: 2961005.135 ops/s
Iteration  17: 3023894.773 ops/s
Iteration  18: 3094854.166 ops/s
Iteration  19: 2948330.957 ops/s
Iteration  20: 3138720.476 ops/s
Iteration  21: 3019845.098 ops/s
Iteration  22: 3141743.359 ops/s
Iteration  23: 2951322.448 ops/s
Iteration  24: 3075266.498 ops/s
Iteration  25: 3018111.384 ops/s
Iteration  26: 3052896.261 ops/s
Iteration  27: 3047670.895 ops/s
Iteration  28: 2335583.131 ops/s
Iteration  29: 3132996.253 ops/s
Iteration  30: 2968648.367 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLongTest._Benchmark.benchmark_slowPathRebatch":
  3011727.352 ±(99.9%) 94207.693 ops/s [Average]
  (min, avg, max) = (2335583.131, 3011727.352, 3141743.359), stdev = 141005.651
  CI (99.9%): [2917519.659, 3105935.045] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
FlowableRangeLongTest._Benchmark.benchmark_slowPathRebatch  thrpt   30  3011727.352 ± 94207.693  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOnTest._Benchmark.benchmark_workerNotDisposedPrematurelySyncInNormalOut$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOnTest._Benchmark.benchmark_workerNotDisposedPrematurelySyncInNormalOut

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 337826.348 ops/s
# Warmup Iteration   2: 1139380.209 ops/s
# Warmup Iteration   3: 1609481.794 ops/s
# Warmup Iteration   4: 2089537.224 ops/s
# Warmup Iteration   5: 2099810.590 ops/s
# Warmup Iteration   6: 2113429.395 ops/s
# Warmup Iteration   7: 2052352.803 ops/s
# Warmup Iteration   8: 2138925.054 ops/s
# Warmup Iteration   9: 2036891.334 ops/s
# Warmup Iteration  10: 2185895.247 ops/s
# Warmup Iteration  11: 2110661.586 ops/s
# Warmup Iteration  12: 2048680.466 ops/s
# Warmup Iteration  13: 2203166.052 ops/s
# Warmup Iteration  14: 2038895.304 ops/s
# Warmup Iteration  15: 2108951.471 ops/s
# Warmup Iteration  16: 2105069.779 ops/s
# Warmup Iteration  17: 2063023.101 ops/s
# Warmup Iteration  18: 2103075.958 ops/s
# Warmup Iteration  19: 2022267.316 ops/s
# Warmup Iteration  20: 2048821.577 ops/s
# Warmup Iteration  21: 2059596.513 ops/s
# Warmup Iteration  22: 2185764.049 ops/s
# Warmup Iteration  23: 2052465.696 ops/s
# Warmup Iteration  24: 2053582.561 ops/s
# Warmup Iteration  25: 2150481.635 ops/s
# Warmup Iteration  26: 2014507.699 ops/s
# Warmup Iteration  27: 2127214.815 ops/s
# Warmup Iteration  28: 2057728.625 ops/s
# Warmup Iteration  29: 2069951.250 ops/s
# Warmup Iteration  30: 2074172.928 ops/s
Iteration   1: 2050239.058 ops/s
Iteration   2: 2147123.757 ops/s
Iteration   3: 2050069.503 ops/s
Iteration   4: 2134250.741 ops/s
Iteration   5: 2075368.892 ops/s
Iteration   6: 2086474.564 ops/s
Iteration   7: 2117513.298 ops/s
Iteration   8: 2054369.165 ops/s
Iteration   9: 2120179.172 ops/s
Iteration  10: 2087695.796 ops/s
Iteration  11: 2166208.156 ops/s
Iteration  12: 1984259.202 ops/s
Iteration  13: 2131787.957 ops/s
Iteration  14: 2071863.838 ops/s
Iteration  15: 2056085.255 ops/s
Iteration  16: 2170270.935 ops/s
Iteration  17: 2020716.482 ops/s
Iteration  18: 2161335.423 ops/s
Iteration  19: 2062471.970 ops/s
Iteration  20: 2159029.981 ops/s
Iteration  21: 2149413.642 ops/s
Iteration  22: 2069110.703 ops/s
Iteration  23: 2144385.871 ops/s
Iteration  24: 2053255.587 ops/s
Iteration  25: 2099474.531 ops/s
Iteration  26: 2033348.230 ops/s
Iteration  27: 2073345.505 ops/s
Iteration  28: 2128703.385 ops/s
Iteration  29: 1952339.693 ops/s
Iteration  30: 2111392.117 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOnTest._Benchmark.benchmark_workerNotDisposedPrematurelySyncInNormalOut":
  2090736.080 ±(99.9%) 36462.534 ops/s [Average]
  (min, avg, max) = (1952339.693, 2090736.080, 2170270.935), stdev = 54575.409
  CI (99.9%): [2054273.546, 2127198.615] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                Mode  Cnt        Score       Error  Units
FlowableObserveOnTest._Benchmark.benchmark_workerNotDisposedPrematurelySyncInNormalOut  thrpt   30  2090736.080 ± 36462.534  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOnTest._Benchmark.benchmark_syncFusedCancelAfterPoll$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOnTest._Benchmark.benchmark_syncFusedCancelAfterPoll

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 439590.998 ops/s
# Warmup Iteration   2: 2096359.666 ops/s
# Warmup Iteration   3: 2879847.344 ops/s
# Warmup Iteration   4: 3461079.113 ops/s
# Warmup Iteration   5: 3249191.112 ops/s
# Warmup Iteration   6: 3273570.122 ops/s
# Warmup Iteration   7: 3420841.732 ops/s
# Warmup Iteration   8: 3264359.212 ops/s
# Warmup Iteration   9: 3420137.664 ops/s
# Warmup Iteration  10: 3399933.268 ops/s
# Warmup Iteration  11: 3209072.191 ops/s
# Warmup Iteration  12: 3319180.058 ops/s
# Warmup Iteration  13: 3167509.915 ops/s
# Warmup Iteration  14: 3457786.656 ops/s
# Warmup Iteration  15: 3265988.756 ops/s
# Warmup Iteration  16: 3427320.996 ops/s
# Warmup Iteration  17: 3295396.031 ops/s
# Warmup Iteration  18: 3253505.389 ops/s
# Warmup Iteration  19: 3385344.338 ops/s
# Warmup Iteration  20: 3081814.468 ops/s
# Warmup Iteration  21: 3381110.024 ops/s
# Warmup Iteration  22: 3215107.809 ops/s
# Warmup Iteration  23: 3200429.059 ops/s
# Warmup Iteration  24: 3399262.667 ops/s
# Warmup Iteration  25: 3276743.286 ops/s
# Warmup Iteration  26: 3384949.283 ops/s
# Warmup Iteration  27: 3169471.742 ops/s
# Warmup Iteration  28: 3274383.966 ops/s
# Warmup Iteration  29: 3285154.176 ops/s
# Warmup Iteration  30: 3234251.272 ops/s
Iteration   1: 3309027.739 ops/s
Iteration   2: 3221322.681 ops/s
Iteration   3: 3377884.534 ops/s
Iteration   4: 3370733.156 ops/s
Iteration   5: 3239320.087 ops/s
Iteration   6: 3369073.901 ops/s
Iteration   7: 3281528.529 ops/s
Iteration   8: 3310954.953 ops/s
Iteration   9: 3353349.171 ops/s
Iteration  10: 3302895.640 ops/s
Iteration  11: 3469445.418 ops/s
Iteration  12: 3187985.714 ops/s
Iteration  13: 3476344.300 ops/s
Iteration  14: 3135343.633 ops/s
Iteration  15: 3397004.732 ops/s
Iteration  16: 3352901.042 ops/s
Iteration  17: 3256740.956 ops/s
Iteration  18: 3378705.189 ops/s
Iteration  19: 3219853.729 ops/s
Iteration  20: 3360932.613 ops/s
Iteration  21: 3345739.515 ops/s
Iteration  22: 3133134.752 ops/s
Iteration  23: 2920889.539 ops/s
Iteration  24: 3219696.281 ops/s
Iteration  25: 3309251.500 ops/s
Iteration  26: 3383022.287 ops/s
Iteration  27: 3176546.334 ops/s
Iteration  28: 3307062.700 ops/s
Iteration  29: 3408695.279 ops/s
Iteration  30: 3210528.676 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOnTest._Benchmark.benchmark_syncFusedCancelAfterPoll":
  3292863.819 ±(99.9%) 76444.738 ops/s [Average]
  (min, avg, max) = (2920889.539, 3292863.819, 3476344.300), stdev = 114418.893
  CI (99.9%): [3216419.082, 3369308.557] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
FlowableObserveOnTest._Benchmark.benchmark_syncFusedCancelAfterPoll  thrpt   30  3292863.819 ± 76444.738  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOnTest._Benchmark.benchmark_badRequest$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOnTest._Benchmark.benchmark_badRequest

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 53432.554 ops/s
# Warmup Iteration   2: 95479.935 ops/s
# Warmup Iteration   3: 425435.042 ops/s
# Warmup Iteration   4: 459328.666 ops/s
# Warmup Iteration   5: 446261.937 ops/s
# Warmup Iteration   6: 418993.130 ops/s
# Warmup Iteration   7: 478958.183 ops/s
# Warmup Iteration   8: 447334.855 ops/s
# Warmup Iteration   9: 474161.012 ops/s
# Warmup Iteration  10: 495661.943 ops/s
# Warmup Iteration  11: 481533.646 ops/s
# Warmup Iteration  12: 469695.394 ops/s
# Warmup Iteration  13: 493742.220 ops/s
# Warmup Iteration  14: 508347.314 ops/s
# Warmup Iteration  15: 479157.077 ops/s
# Warmup Iteration  16: 480504.338 ops/s
# Warmup Iteration  17: 485509.396 ops/s
# Warmup Iteration  18: 514093.435 ops/s
# Warmup Iteration  19: 490915.112 ops/s
# Warmup Iteration  20: 491636.151 ops/s
# Warmup Iteration  21: 499271.742 ops/s
# Warmup Iteration  22: 491290.289 ops/s
# Warmup Iteration  23: 517095.511 ops/s
# Warmup Iteration  24: 500242.319 ops/s
# Warmup Iteration  25: 475473.491 ops/s
# Warmup Iteration  26: 509779.983 ops/s
# Warmup Iteration  27: 490483.041 ops/s
# Warmup Iteration  28: 521789.734 ops/s
# Warmup Iteration  29: 490529.816 ops/s
# Warmup Iteration  30: 499153.977 ops/s
Iteration   1: 515973.501 ops/s
Iteration   2: 491507.594 ops/s
Iteration   3: 518746.662 ops/s
Iteration   4: 503344.150 ops/s
Iteration   5: 490323.734 ops/s
Iteration   6: 487222.219 ops/s
Iteration   7: 509564.924 ops/s
Iteration   8: 480247.382 ops/s
Iteration   9: 520626.330 ops/s
Iteration  10: 522292.582 ops/s
Iteration  11: 487526.913 ops/s
Iteration  12: 507968.661 ops/s
Iteration  13: 502243.676 ops/s
Iteration  14: 501203.181 ops/s
Iteration  15: 488923.650 ops/s
Iteration  16: 517434.295 ops/s
Iteration  17: 485095.835 ops/s
Iteration  18: 515837.192 ops/s
Iteration  19: 498137.847 ops/s
Iteration  20: 493847.906 ops/s
Iteration  21: 491593.760 ops/s
Iteration  22: 493813.046 ops/s
Iteration  23: 513486.249 ops/s
Iteration  24: 482234.686 ops/s
Iteration  25: 525629.526 ops/s
Iteration  26: 493502.141 ops/s
Iteration  27: 507620.317 ops/s
Iteration  28: 502646.671 ops/s
Iteration  29: 484902.336 ops/s
Iteration  30: 504200.067 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOnTest._Benchmark.benchmark_badRequest":
  501256.568 ±(99.9%) 8847.988 ops/s [Average]
  (min, avg, max) = (480247.382, 501256.568, 525629.526), stdev = 13243.254
  CI (99.9%): [492408.579, 510104.556] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score      Error  Units
FlowableObserveOnTest._Benchmark.benchmark_badRequest  thrpt   30  501256.568 ± 8847.988  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableTimeoutTest._Benchmark.benchmark_shouldUnsubscribeFromUnderlyingSubscriptionOnDispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableTimeoutTest._Benchmark.benchmark_shouldUnsubscribeFromUnderlyingSubscriptionOnDispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 289322.079 ops/s
# Warmup Iteration   2: 1510738.911 ops/s
# Warmup Iteration   3: 1829790.771 ops/s
# Warmup Iteration   4: 1989488.694 ops/s
# Warmup Iteration   5: 2104834.759 ops/s
# Warmup Iteration   6: 2002780.960 ops/s
# Warmup Iteration   7: 1980852.264 ops/s
# Warmup Iteration   8: 2064949.672 ops/s
# Warmup Iteration   9: 1976638.915 ops/s
# Warmup Iteration  10: 2100439.358 ops/s
# Warmup Iteration  11: 2102722.341 ops/s
# Warmup Iteration  12: 1942944.340 ops/s
# Warmup Iteration  13: 2025625.487 ops/s
# Warmup Iteration  14: 2039166.001 ops/s
# Warmup Iteration  15: 2026440.686 ops/s
# Warmup Iteration  16: 2061989.363 ops/s
# Warmup Iteration  17: 2035830.936 ops/s
# Warmup Iteration  18: 2107925.540 ops/s
# Warmup Iteration  19: 2117427.100 ops/s
# Warmup Iteration  20: 2025685.620 ops/s
# Warmup Iteration  21: 2034499.594 ops/s
# Warmup Iteration  22: 2045066.774 ops/s
# Warmup Iteration  23: 2010379.722 ops/s
# Warmup Iteration  24: 1997715.389 ops/s
# Warmup Iteration  25: 2100368.149 ops/s
# Warmup Iteration  26: 1979393.942 ops/s
# Warmup Iteration  27: 2061253.590 ops/s
# Warmup Iteration  28: 2098278.319 ops/s
# Warmup Iteration  29: 1971877.266 ops/s
# Warmup Iteration  30: 2044042.450 ops/s
Iteration   1: 1993277.393 ops/s
Iteration   2: 2095063.922 ops/s
Iteration   3: 2032083.203 ops/s
Iteration   4: 2102815.423 ops/s
Iteration   5: 2044134.222 ops/s
Iteration   6: 2075722.606 ops/s
Iteration   7: 2105278.698 ops/s
Iteration   8: 1958631.101 ops/s
Iteration   9: 2071560.648 ops/s
Iteration  10: 2092570.029 ops/s
Iteration  11: 2028353.870 ops/s
Iteration  12: 2042178.981 ops/s
Iteration  13: 2031802.482 ops/s
Iteration  14: 2080822.164 ops/s
Iteration  15: 2032367.062 ops/s
Iteration  16: 2008701.936 ops/s
Iteration  17: 1782377.897 ops/s
Iteration  18: 1958216.493 ops/s
Iteration  19: 2041559.278 ops/s
Iteration  20: 2046778.479 ops/s
Iteration  21: 2065742.196 ops/s
Iteration  22: 1957083.132 ops/s
Iteration  23: 2068268.439 ops/s
Iteration  24: 2131088.547 ops/s
Iteration  25: 2029510.071 ops/s
Iteration  26: 2047032.941 ops/s
Iteration  27: 2113785.156 ops/s
Iteration  28: 2003735.625 ops/s
Iteration  29: 2099329.907 ops/s
Iteration  30: 2069615.470 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableTimeoutTest._Benchmark.benchmark_shouldUnsubscribeFromUnderlyingSubscriptionOnDispose":
  2040316.246 ±(99.9%) 44581.391 ops/s [Average]
  (min, avg, max) = (1782377.897, 2040316.246, 2131088.547), stdev = 66727.332
  CI (99.9%): [1995734.855, 2084897.636] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                          Mode  Cnt        Score       Error  Units
CompletableTimeoutTest._Benchmark.benchmark_shouldUnsubscribeFromUnderlyingSubscriptionOnDispose  thrpt   30  2040316.246 ± 44581.391  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOnTest._Benchmark.benchmark_syncFusedCancelAfterPollConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOnTest._Benchmark.benchmark_syncFusedCancelAfterPollConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 440176.859 ops/s
# Warmup Iteration   2: 1689720.585 ops/s
# Warmup Iteration   3: 2852494.672 ops/s
# Warmup Iteration   4: 3113202.538 ops/s
# Warmup Iteration   5: 3328173.560 ops/s
# Warmup Iteration   6: 3185159.159 ops/s
# Warmup Iteration   7: 3207410.652 ops/s
# Warmup Iteration   8: 3284610.228 ops/s
# Warmup Iteration   9: 3057308.248 ops/s
# Warmup Iteration  10: 3164167.148 ops/s
# Warmup Iteration  11: 3282421.846 ops/s
# Warmup Iteration  12: 3179201.869 ops/s
# Warmup Iteration  13: 3282106.200 ops/s
# Warmup Iteration  14: 3324432.784 ops/s
# Warmup Iteration  15: 3092627.408 ops/s
# Warmup Iteration  16: 3259597.104 ops/s
# Warmup Iteration  17: 3080487.048 ops/s
# Warmup Iteration  18: 3222308.514 ops/s
# Warmup Iteration  19: 3208287.186 ops/s
# Warmup Iteration  20: 3154230.769 ops/s
# Warmup Iteration  21: 3243441.606 ops/s
# Warmup Iteration  22: 3138555.360 ops/s
# Warmup Iteration  23: 3261764.112 ops/s
# Warmup Iteration  24: 3083512.383 ops/s
# Warmup Iteration  25: 3205850.960 ops/s
# Warmup Iteration  26: 3133652.105 ops/s
# Warmup Iteration  27: 3173425.978 ops/s
# Warmup Iteration  28: 3347315.817 ops/s
# Warmup Iteration  29: 3097430.130 ops/s
# Warmup Iteration  30: 3253396.975 ops/s
Iteration   1: 3097861.189 ops/s
Iteration   2: 3290972.596 ops/s
Iteration   3: 3232741.798 ops/s
Iteration   4: 3084661.922 ops/s
Iteration   5: 3242438.874 ops/s
Iteration   6: 3129656.200 ops/s
Iteration   7: 3207169.769 ops/s
Iteration   8: 3192314.194 ops/s
Iteration   9: 3296230.159 ops/s
Iteration  10: 3185404.656 ops/s
Iteration  11: 3225607.884 ops/s
Iteration  12: 3246221.787 ops/s
Iteration  13: 3244937.457 ops/s
Iteration  14: 3113465.914 ops/s
Iteration  15: 3135487.436 ops/s
Iteration  16: 3188818.274 ops/s
Iteration  17: 3256634.803 ops/s
Iteration  18: 3247080.533 ops/s
Iteration  19: 3187472.827 ops/s
Iteration  20: 3215642.158 ops/s
Iteration  21: 3200996.919 ops/s
Iteration  22: 3268600.015 ops/s
Iteration  23: 3109544.812 ops/s
Iteration  24: 3234070.041 ops/s
Iteration  25: 3296788.363 ops/s
Iteration  26: 3147921.038 ops/s
Iteration  27: 3259847.049 ops/s
Iteration  28: 3099963.175 ops/s
Iteration  29: 3305545.840 ops/s
Iteration  30: 3190343.176 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOnTest._Benchmark.benchmark_syncFusedCancelAfterPollConditional":
  3204481.362 ±(99.9%) 43365.877 ops/s [Average]
  (min, avg, max) = (3084661.922, 3204481.362, 3305545.840), stdev = 64908.008
  CI (99.9%): [3161115.485, 3247847.238] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt        Score       Error  Units
FlowableObserveOnTest._Benchmark.benchmark_syncFusedCancelAfterPollConditional  thrpt   30  3204481.362 ± 43365.877  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.SingleFlattenStreamAsFlowableTest._Benchmark.benchmark_manyBackpressured2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.SingleFlattenStreamAsFlowableTest._Benchmark.benchmark_manyBackpressured2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 21014.661 ops/s
# Warmup Iteration   2: 263356.334 ops/s
# Warmup Iteration   3: 722262.326 ops/s
# Warmup Iteration   4: 1061741.597 ops/s
# Warmup Iteration   5: 1129458.973 ops/s
# Warmup Iteration   6: 1067977.870 ops/s
# Warmup Iteration   7: 977561.419 ops/s
# Warmup Iteration   8: 1096629.817 ops/s
# Warmup Iteration   9: 1115058.841 ops/s
# Warmup Iteration  10: 1037106.617 ops/s
# Warmup Iteration  11: 1117846.687 ops/s
# Warmup Iteration  12: 1083988.300 ops/s
# Warmup Iteration  13: 1100648.532 ops/s
# Warmup Iteration  14: 1096286.192 ops/s
# Warmup Iteration  15: 1073398.806 ops/s
# Warmup Iteration  16: 1110088.899 ops/s
# Warmup Iteration  17: 1078303.899 ops/s
# Warmup Iteration  18: 1146892.952 ops/s
# Warmup Iteration  19: 1098372.106 ops/s
# Warmup Iteration  20: 1054534.741 ops/s
# Warmup Iteration  21: 1110757.895 ops/s
# Warmup Iteration  22: 1056781.645 ops/s
# Warmup Iteration  23: 1110891.663 ops/s
# Warmup Iteration  24: 1060894.776 ops/s
# Warmup Iteration  25: 1113163.343 ops/s
# Warmup Iteration  26: 1113075.055 ops/s
# Warmup Iteration  27: 1063782.730 ops/s
# Warmup Iteration  28: 1087192.805 ops/s
# Warmup Iteration  29: 1088385.110 ops/s
# Warmup Iteration  30: 1013975.113 ops/s
Iteration   1: 1116967.109 ops/s
Iteration   2: 1055981.696 ops/s
Iteration   3: 1138962.696 ops/s
Iteration   4: 1105832.117 ops/s
Iteration   5: 1070697.090 ops/s
Iteration   6: 1146793.858 ops/s
Iteration   7: 1050875.710 ops/s
Iteration   8: 1109700.194 ops/s
Iteration   9: 1093777.533 ops/s
Iteration  10: 1152003.232 ops/s
Iteration  11: 1053495.767 ops/s
Iteration  12: 892447.070 ops/s
Iteration  13: 1145362.870 ops/s
Iteration  14: 1071568.111 ops/s
Iteration  15: 1080795.665 ops/s
Iteration  16: 1137001.994 ops/s
Iteration  17: 1070679.732 ops/s
Iteration  18: 1125879.821 ops/s
Iteration  19: 1111871.894 ops/s
Iteration  20: 1099432.927 ops/s
Iteration  21: 1045340.929 ops/s
Iteration  22: 1103137.945 ops/s
Iteration  23: 1094970.919 ops/s
Iteration  24: 1142319.887 ops/s
Iteration  25: 1108554.285 ops/s
Iteration  26: 1117998.759 ops/s
Iteration  27: 1126662.843 ops/s
Iteration  28: 1078093.558 ops/s
Iteration  29: 1088065.726 ops/s
Iteration  30: 1135233.454 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.SingleFlattenStreamAsFlowableTest._Benchmark.benchmark_manyBackpressured2":
  1095683.513 ±(99.9%) 33015.975 ops/s [Average]
  (min, avg, max) = (892447.070, 1095683.513, 1152003.232), stdev = 49416.761
  CI (99.9%): [1062667.538, 1128699.488] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score       Error  Units
SingleFlattenStreamAsFlowableTest._Benchmark.benchmark_manyBackpressured2  thrpt   30  1095683.513 ± 33015.975  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArrayTest._Benchmark.benchmark_badRequest$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArrayTest._Benchmark.benchmark_badRequest

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 68190.330 ops/s
# Warmup Iteration   2: 214927.561 ops/s
# Warmup Iteration   3: 409548.417 ops/s
# Warmup Iteration   4: 475427.178 ops/s
# Warmup Iteration   5: 516753.674 ops/s
# Warmup Iteration   6: 485759.965 ops/s
# Warmup Iteration   7: 495912.826 ops/s
# Warmup Iteration   8: 476773.543 ops/s
# Warmup Iteration   9: 504781.858 ops/s
# Warmup Iteration  10: 493576.386 ops/s
# Warmup Iteration  11: 487468.755 ops/s
# Warmup Iteration  12: 488949.815 ops/s
# Warmup Iteration  13: 462855.912 ops/s
# Warmup Iteration  14: 483342.343 ops/s
# Warmup Iteration  15: 505812.768 ops/s
# Warmup Iteration  16: 463555.915 ops/s
# Warmup Iteration  17: 515295.431 ops/s
# Warmup Iteration  18: 513845.629 ops/s
# Warmup Iteration  19: 518448.967 ops/s
# Warmup Iteration  20: 520120.191 ops/s
# Warmup Iteration  21: 496616.058 ops/s
# Warmup Iteration  22: 523446.653 ops/s
# Warmup Iteration  23: 501554.577 ops/s
# Warmup Iteration  24: 518290.388 ops/s
# Warmup Iteration  25: 527774.033 ops/s
# Warmup Iteration  26: 514465.093 ops/s
# Warmup Iteration  27: 521626.422 ops/s
# Warmup Iteration  28: 502250.909 ops/s
# Warmup Iteration  29: 514985.249 ops/s
# Warmup Iteration  30: 516514.175 ops/s
Iteration   1: 518044.397 ops/s
Iteration   2: 517040.592 ops/s
Iteration   3: 517046.139 ops/s
Iteration   4: 524280.950 ops/s
Iteration   5: 518006.831 ops/s
Iteration   6: 522633.909 ops/s
Iteration   7: 534302.683 ops/s
Iteration   8: 529623.313 ops/s
Iteration   9: 529089.871 ops/s
Iteration  10: 503871.326 ops/s
Iteration  11: 515550.952 ops/s
Iteration  12: 511406.371 ops/s
Iteration  13: 510486.113 ops/s
Iteration  14: 503258.408 ops/s
Iteration  15: 508268.447 ops/s
Iteration  16: 523554.866 ops/s
Iteration  17: 514874.136 ops/s
Iteration  18: 514515.071 ops/s
Iteration  19: 504115.591 ops/s
Iteration  20: 533376.243 ops/s
Iteration  21: 497575.220 ops/s
Iteration  22: 506665.835 ops/s
Iteration  23: 533352.204 ops/s
Iteration  24: 505327.378 ops/s
Iteration  25: 524289.067 ops/s
Iteration  26: 497506.791 ops/s
Iteration  27: 521201.737 ops/s
Iteration  28: 516225.114 ops/s
Iteration  29: 521309.852 ops/s
Iteration  30: 521074.913 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArrayTest._Benchmark.benchmark_badRequest":
  516595.811 ±(99.9%) 6865.508 ops/s [Average]
  (min, avg, max) = (497506.791, 516595.811, 534302.683), stdev = 10275.969
  CI (99.9%): [509730.303, 523461.318] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score      Error  Units
MaybeMergeArrayTest._Benchmark.benchmark_badRequest  thrpt   30  516595.811 ± 6865.508  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.disposables.CompositeDisposableTest._Benchmark.benchmark_initializeIterable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.disposables.CompositeDisposableTest._Benchmark.benchmark_initializeIterable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 831789.286 ops/s
# Warmup Iteration   2: 2226833.804 ops/s
# Warmup Iteration   3: 2667089.281 ops/s
# Warmup Iteration   4: 2233912.395 ops/s
# Warmup Iteration   5: 2177076.088 ops/s
# Warmup Iteration   6: 2208760.297 ops/s
# Warmup Iteration   7: 2062639.191 ops/s
# Warmup Iteration   8: 2114975.221 ops/s
# Warmup Iteration   9: 2121265.895 ops/s
# Warmup Iteration  10: 2194412.578 ops/s
# Warmup Iteration  11: 2177309.391 ops/s
# Warmup Iteration  12: 2185329.058 ops/s
# Warmup Iteration  13: 2121464.125 ops/s
# Warmup Iteration  14: 2140598.691 ops/s
# Warmup Iteration  15: 2220265.798 ops/s
# Warmup Iteration  16: 2056123.575 ops/s
# Warmup Iteration  17: 2144079.223 ops/s
# Warmup Iteration  18: 2299127.301 ops/s
# Warmup Iteration  19: 2129948.233 ops/s
# Warmup Iteration  20: 2245937.559 ops/s
# Warmup Iteration  21: 2177410.000 ops/s
# Warmup Iteration  22: 2235877.402 ops/s
# Warmup Iteration  23: 2160602.681 ops/s
# Warmup Iteration  24: 2098407.815 ops/s
# Warmup Iteration  25: 2269269.104 ops/s
# Warmup Iteration  26: 2143592.421 ops/s
# Warmup Iteration  27: 2242153.038 ops/s
# Warmup Iteration  28: 2146634.008 ops/s
# Warmup Iteration  29: 2135821.329 ops/s
# Warmup Iteration  30: 2233228.627 ops/s
Iteration   1: 2137875.900 ops/s
Iteration   2: 2215841.253 ops/s
Iteration   3: 2062417.938 ops/s
Iteration   4: 2245317.929 ops/s
Iteration   5: 2212619.009 ops/s
Iteration   6: 2158890.008 ops/s
Iteration   7: 1760235.979 ops/s
Iteration   8: 2133760.363 ops/s
Iteration   9: 2241523.597 ops/s
Iteration  10: 2183858.017 ops/s
Iteration  11: 2263707.150 ops/s
Iteration  12: 2126901.836 ops/s
Iteration  13: 2242316.461 ops/s
Iteration  14: 2268520.209 ops/s
Iteration  15: 2113779.730 ops/s
Iteration  16: 2255000.098 ops/s
Iteration  17: 2185540.589 ops/s
Iteration  18: 2255991.278 ops/s
Iteration  19: 2172093.315 ops/s
Iteration  20: 2183990.294 ops/s
Iteration  21: 2257074.151 ops/s
Iteration  22: 2088754.562 ops/s
Iteration  23: 2246404.105 ops/s
Iteration  24: 2089603.444 ops/s
Iteration  25: 2308700.842 ops/s
Iteration  26: 2103208.142 ops/s
Iteration  27: 2294576.727 ops/s
Iteration  28: 2262747.788 ops/s
Iteration  29: 2196097.633 ops/s
Iteration  30: 2258649.606 ops/s


Result "io.reactivex.rxjava3.disposables.CompositeDisposableTest._Benchmark.benchmark_initializeIterable":
  2184199.932 ±(99.9%) 69900.599 ops/s [Average]
  (min, avg, max) = (1760235.979, 2184199.932, 2308700.842), stdev = 104623.934
  CI (99.9%): [2114299.332, 2254100.531] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
CompositeDisposableTest._Benchmark.benchmark_initializeIterable  thrpt   30  2184199.932 ± 69900.599  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOnTest._Benchmark.benchmark_workerNotDisposedPrematurelySyncInNormalOutConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOnTest._Benchmark.benchmark_workerNotDisposedPrematurelySyncInNormalOutConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 143482.154 ops/s
# Warmup Iteration   2: 1113544.517 ops/s
# Warmup Iteration   3: 1497562.539 ops/s
# Warmup Iteration   4: 2114571.614 ops/s
# Warmup Iteration   5: 2019045.743 ops/s
# Warmup Iteration   6: 2092697.148 ops/s
# Warmup Iteration   7: 2051677.831 ops/s
# Warmup Iteration   8: 2059867.258 ops/s
# Warmup Iteration   9: 2031716.109 ops/s
# Warmup Iteration  10: 2025938.052 ops/s
# Warmup Iteration  11: 2113249.009 ops/s
# Warmup Iteration  12: 1950688.553 ops/s
# Warmup Iteration  13: 2136716.678 ops/s
# Warmup Iteration  14: 2069715.471 ops/s
# Warmup Iteration  15: 2048653.252 ops/s
# Warmup Iteration  16: 2090481.146 ops/s
# Warmup Iteration  17: 2037648.031 ops/s
# Warmup Iteration  18: 2114433.989 ops/s
# Warmup Iteration  19: 1997406.663 ops/s
# Warmup Iteration  20: 2084638.134 ops/s
# Warmup Iteration  21: 2030601.782 ops/s
# Warmup Iteration  22: 2047480.263 ops/s
# Warmup Iteration  23: 2065754.296 ops/s
# Warmup Iteration  24: 2004906.706 ops/s
# Warmup Iteration  25: 2051202.143 ops/s
# Warmup Iteration  26: 2055777.509 ops/s
# Warmup Iteration  27: 2099676.141 ops/s
# Warmup Iteration  28: 2093469.051 ops/s
# Warmup Iteration  29: 2050254.479 ops/s
# Warmup Iteration  30: 2134370.444 ops/s
Iteration   1: 2096249.259 ops/s
Iteration   2: 2068457.589 ops/s
Iteration   3: 2117777.115 ops/s
Iteration   4: 2056980.750 ops/s
Iteration   5: 2092488.555 ops/s
Iteration   6: 2122150.085 ops/s
Iteration   7: 2015078.897 ops/s
Iteration   8: 2114442.402 ops/s
Iteration   9: 2033629.916 ops/s
Iteration  10: 2132548.634 ops/s
Iteration  11: 2030088.147 ops/s
Iteration  12: 2118982.553 ops/s
Iteration  13: 2046537.920 ops/s
Iteration  14: 2088988.859 ops/s
Iteration  15: 2023376.312 ops/s
Iteration  16: 2100171.927 ops/s
Iteration  17: 2063447.316 ops/s
Iteration  18: 2160265.542 ops/s
Iteration  19: 2034400.675 ops/s
Iteration  20: 2109065.382 ops/s
Iteration  21: 2030237.037 ops/s
Iteration  22: 2098500.161 ops/s
Iteration  23: 2043741.434 ops/s
Iteration  24: 2081383.972 ops/s
Iteration  25: 2074595.012 ops/s
Iteration  26: 2058776.458 ops/s
Iteration  27: 2143735.870 ops/s
Iteration  28: 2043286.671 ops/s
Iteration  29: 2102813.510 ops/s
Iteration  30: 2046884.505 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOnTest._Benchmark.benchmark_workerNotDisposedPrematurelySyncInNormalOutConditional":
  2078302.749 ±(99.9%) 26206.965 ops/s [Average]
  (min, avg, max) = (2015078.897, 2078302.749, 2160265.542), stdev = 39225.355
  CI (99.9%): [2052095.784, 2104509.714] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                           Mode  Cnt        Score       Error  Units
FlowableObserveOnTest._Benchmark.benchmark_workerNotDisposedPrematurelySyncInNormalOutConditional  thrpt   30  2078302.749 ± 26206.965  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOnTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOnTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 311014.862 ops/s
# Warmup Iteration   2: 1243703.010 ops/s
# Warmup Iteration   3: 1772279.953 ops/s
# Warmup Iteration   4: 2004415.156 ops/s
# Warmup Iteration   5: 1865176.839 ops/s
# Warmup Iteration   6: 1978298.128 ops/s
# Warmup Iteration   7: 1898539.709 ops/s
# Warmup Iteration   8: 1924840.349 ops/s
# Warmup Iteration   9: 1936855.085 ops/s
# Warmup Iteration  10: 1874945.992 ops/s
# Warmup Iteration  11: 1988959.917 ops/s
# Warmup Iteration  12: 1909519.720 ops/s
# Warmup Iteration  13: 1913218.506 ops/s
# Warmup Iteration  14: 1966375.052 ops/s
# Warmup Iteration  15: 1982851.432 ops/s
# Warmup Iteration  16: 1988261.435 ops/s
# Warmup Iteration  17: 2025184.956 ops/s
# Warmup Iteration  18: 1932572.379 ops/s
# Warmup Iteration  19: 1957092.559 ops/s
# Warmup Iteration  20: 1908688.686 ops/s
# Warmup Iteration  21: 1923967.844 ops/s
# Warmup Iteration  22: 1928542.659 ops/s
# Warmup Iteration  23: 1957957.056 ops/s
# Warmup Iteration  24: 1951176.626 ops/s
# Warmup Iteration  25: 1961376.888 ops/s
# Warmup Iteration  26: 1925412.033 ops/s
# Warmup Iteration  27: 1979817.679 ops/s
# Warmup Iteration  28: 1953424.075 ops/s
# Warmup Iteration  29: 1967502.609 ops/s
# Warmup Iteration  30: 1942415.133 ops/s
Iteration   1: 1823550.049 ops/s
Iteration   2: 1784043.036 ops/s
Iteration   3: 1933696.340 ops/s
Iteration   4: 2013299.239 ops/s
Iteration   5: 1995832.051 ops/s
Iteration   6: 1894375.989 ops/s
Iteration   7: 1973527.858 ops/s
Iteration   8: 1926911.865 ops/s
Iteration   9: 1984347.475 ops/s
Iteration  10: 1908170.467 ops/s
Iteration  11: 1961271.119 ops/s
Iteration  12: 2036003.728 ops/s
Iteration  13: 1858417.496 ops/s
Iteration  14: 1902298.335 ops/s
Iteration  15: 1928561.133 ops/s
Iteration  16: 1850761.923 ops/s
Iteration  17: 1993867.990 ops/s
Iteration  18: 1853306.260 ops/s
Iteration  19: 2064295.384 ops/s
Iteration  20: 1892314.243 ops/s
Iteration  21: 1982435.782 ops/s
Iteration  22: 1883467.678 ops/s
Iteration  23: 1965844.573 ops/s
Iteration  24: 1959062.080 ops/s
Iteration  25: 1906384.615 ops/s
Iteration  26: 1988226.700 ops/s
Iteration  27: 1951526.248 ops/s
Iteration  28: 1999914.030 ops/s
Iteration  29: 1911649.751 ops/s
Iteration  30: 2023080.462 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOnTest._Benchmark.benchmark_dispose":
  1938348.130 ±(99.9%) 44314.417 ops/s [Average]
  (min, avg, max) = (1784043.036, 1938348.130, 2064295.384), stdev = 66327.738
  CI (99.9%): [1894033.713, 1982662.547] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score       Error  Units
FlowableObserveOnTest._Benchmark.benchmark_dispose  thrpt   30  1938348.130 ± 44314.417  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOnTest._Benchmark.benchmark_backFusedErrorConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOnTest._Benchmark.benchmark_backFusedErrorConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 70602.591 ops/s
# Warmup Iteration   2: 417093.850 ops/s
# Warmup Iteration   3: 597355.472 ops/s
# Warmup Iteration   4: 606017.335 ops/s
# Warmup Iteration   5: 626481.748 ops/s
# Warmup Iteration   6: 627905.292 ops/s
# Warmup Iteration   7: 611930.939 ops/s
# Warmup Iteration   8: 632724.251 ops/s
# Warmup Iteration   9: 621581.545 ops/s
# Warmup Iteration  10: 618074.315 ops/s
# Warmup Iteration  11: 575026.171 ops/s
# Warmup Iteration  12: 644976.970 ops/s
# Warmup Iteration  13: 621852.499 ops/s
# Warmup Iteration  14: 623167.525 ops/s
# Warmup Iteration  15: 639956.876 ops/s
# Warmup Iteration  16: 623969.890 ops/s
# Warmup Iteration  17: 678503.232 ops/s
# Warmup Iteration  18: 636276.270 ops/s
# Warmup Iteration  19: 667064.387 ops/s
# Warmup Iteration  20: 639832.692 ops/s
# Warmup Iteration  21: 664438.426 ops/s
# Warmup Iteration  22: 646705.643 ops/s
# Warmup Iteration  23: 662352.416 ops/s
# Warmup Iteration  24: 671730.445 ops/s
# Warmup Iteration  25: 662633.960 ops/s
# Warmup Iteration  26: 632004.148 ops/s
# Warmup Iteration  27: 676301.632 ops/s
# Warmup Iteration  28: 651384.104 ops/s
# Warmup Iteration  29: 689272.076 ops/s
# Warmup Iteration  30: 642198.395 ops/s
Iteration   1: 659840.103 ops/s
Iteration   2: 662741.198 ops/s
Iteration   3: 646618.025 ops/s
Iteration   4: 671683.870 ops/s
Iteration   5: 651769.697 ops/s
Iteration   6: 659603.419 ops/s
Iteration   7: 657679.844 ops/s
Iteration   8: 638477.153 ops/s
Iteration   9: 670089.968 ops/s
Iteration  10: 649657.156 ops/s
Iteration  11: 663064.235 ops/s
Iteration  12: 644631.173 ops/s
Iteration  13: 670146.362 ops/s
Iteration  14: 620401.891 ops/s
Iteration  15: 675696.992 ops/s
Iteration  16: 664551.732 ops/s
Iteration  17: 676137.594 ops/s
Iteration  18: 662743.235 ops/s
Iteration  19: 666091.034 ops/s
Iteration  20: 686985.714 ops/s
Iteration  21: 654577.539 ops/s
Iteration  22: 678956.932 ops/s
Iteration  23: 650083.477 ops/s
Iteration  24: 680779.984 ops/s
Iteration  25: 658440.436 ops/s
Iteration  26: 674626.642 ops/s
Iteration  27: 640041.840 ops/s
Iteration  28: 667461.081 ops/s
Iteration  29: 660040.142 ops/s
Iteration  30: 638114.142 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOnTest._Benchmark.benchmark_backFusedErrorConditional":
  660057.754 ±(99.9%) 9889.141 ops/s [Average]
  (min, avg, max) = (620401.891, 660057.754, 686985.714), stdev = 14801.602
  CI (99.9%): [650168.612, 669946.895] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score      Error  Units
FlowableObserveOnTest._Benchmark.benchmark_backFusedErrorConditional  thrpt   30  660057.754 ± 9889.141  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOnTest._Benchmark.benchmark_doubleOnSubscribeConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOnTest._Benchmark.benchmark_doubleOnSubscribeConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 84653.623 ops/s
# Warmup Iteration   2: 315322.706 ops/s
# Warmup Iteration   3: 370676.317 ops/s
# Warmup Iteration   4: 411021.512 ops/s
# Warmup Iteration   5: 370131.209 ops/s
# Warmup Iteration   6: 408995.736 ops/s
# Warmup Iteration   7: 413167.195 ops/s
# Warmup Iteration   8: 419757.784 ops/s
# Warmup Iteration   9: 424245.725 ops/s
# Warmup Iteration  10: 403392.435 ops/s
# Warmup Iteration  11: 420413.786 ops/s
# Warmup Iteration  12: 428671.611 ops/s
# Warmup Iteration  13: 402440.543 ops/s
# Warmup Iteration  14: 414268.173 ops/s
# Warmup Iteration  15: 417952.587 ops/s
# Warmup Iteration  16: 431550.767 ops/s
# Warmup Iteration  17: 433140.968 ops/s
# Warmup Iteration  18: 421880.502 ops/s
# Warmup Iteration  19: 438319.879 ops/s
# Warmup Iteration  20: 428485.309 ops/s
# Warmup Iteration  21: 432816.096 ops/s
# Warmup Iteration  22: 423304.700 ops/s
# Warmup Iteration  23: 430260.913 ops/s
# Warmup Iteration  24: 434910.308 ops/s
# Warmup Iteration  25: 430898.377 ops/s
# Warmup Iteration  26: 377976.146 ops/s
# Warmup Iteration  27: 411743.516 ops/s
# Warmup Iteration  28: 448140.896 ops/s
# Warmup Iteration  29: 417721.039 ops/s
# Warmup Iteration  30: 432571.708 ops/s
Iteration   1: 421552.992 ops/s
Iteration   2: 450329.878 ops/s
Iteration   3: 431492.277 ops/s
Iteration   4: 434980.888 ops/s
Iteration   5: 435419.890 ops/s
Iteration   6: 429463.039 ops/s
Iteration   7: 428060.753 ops/s
Iteration   8: 428143.496 ops/s
Iteration   9: 437778.198 ops/s
Iteration  10: 430304.419 ops/s
Iteration  11: 429162.510 ops/s
Iteration  12: 428324.708 ops/s
Iteration  13: 434543.324 ops/s
Iteration  14: 428298.504 ops/s
Iteration  15: 441117.805 ops/s
Iteration  16: 415421.540 ops/s
Iteration  17: 430505.498 ops/s
Iteration  18: 434184.369 ops/s
Iteration  19: 426927.213 ops/s
Iteration  20: 451015.598 ops/s
Iteration  21: 411027.569 ops/s
Iteration  22: 449018.031 ops/s
Iteration  23: 427672.826 ops/s
Iteration  24: 426963.024 ops/s
Iteration  25: 440781.150 ops/s
Iteration  26: 428085.377 ops/s
Iteration  27: 442495.038 ops/s
Iteration  28: 422673.615 ops/s
Iteration  29: 425364.957 ops/s
Iteration  30: 444719.919 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOnTest._Benchmark.benchmark_doubleOnSubscribeConditional":
  432194.280 ±(99.9%) 6327.206 ops/s [Average]
  (min, avg, max) = (411027.569, 432194.280, 451015.598), stdev = 9470.265
  CI (99.9%): [425867.074, 438521.487] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score      Error  Units
FlowableObserveOnTest._Benchmark.benchmark_doubleOnSubscribeConditional  thrpt   30  432194.280 ± 6327.206  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOnTest._Benchmark.benchmark_workerNotDisposedPrematurelyAsyncInNormalOutConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOnTest._Benchmark.benchmark_workerNotDisposedPrematurelyAsyncInNormalOutConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 44089.989 ops/s
# Warmup Iteration   2: 322199.990 ops/s
# Warmup Iteration   3: 720218.652 ops/s
# Warmup Iteration   4: 959737.541 ops/s
# Warmup Iteration   5: 1166782.836 ops/s
# Warmup Iteration   6: 1215022.512 ops/s
# Warmup Iteration   7: 1118889.097 ops/s
# Warmup Iteration   8: 1159909.792 ops/s
# Warmup Iteration   9: 1107172.849 ops/s
# Warmup Iteration  10: 1181631.146 ops/s
# Warmup Iteration  11: 1104272.229 ops/s
# Warmup Iteration  12: 1190175.833 ops/s
# Warmup Iteration  13: 1127595.714 ops/s
# Warmup Iteration  14: 1168034.678 ops/s
# Warmup Iteration  15: 1158756.135 ops/s
# Warmup Iteration  16: 1153155.860 ops/s
# Warmup Iteration  17: 1131348.972 ops/s
# Warmup Iteration  18: 1188955.826 ops/s
# Warmup Iteration  19: 1115573.198 ops/s
# Warmup Iteration  20: 1155038.660 ops/s
# Warmup Iteration  21: 1123677.740 ops/s
# Warmup Iteration  22: 1110423.300 ops/s
# Warmup Iteration  23: 1184596.552 ops/s
# Warmup Iteration  24: 1122927.894 ops/s
# Warmup Iteration  25: 1117287.547 ops/s
# Warmup Iteration  26: 1138611.306 ops/s
# Warmup Iteration  27: 1159460.826 ops/s
# Warmup Iteration  28: 1189485.148 ops/s
# Warmup Iteration  29: 1109245.707 ops/s
# Warmup Iteration  30: 1196713.533 ops/s
Iteration   1: 1125139.524 ops/s
Iteration   2: 1170345.700 ops/s
Iteration   3: 1100946.959 ops/s
Iteration   4: 1181480.321 ops/s
Iteration   5: 1152687.759 ops/s
Iteration   6: 1170777.425 ops/s
Iteration   7: 1136913.839 ops/s
Iteration   8: 1122505.035 ops/s
Iteration   9: 1119332.664 ops/s
Iteration  10: 1195261.990 ops/s
Iteration  11: 1137599.222 ops/s
Iteration  12: 1130687.591 ops/s
Iteration  13: 1181710.671 ops/s
Iteration  14: 1125193.641 ops/s
Iteration  15: 1109494.580 ops/s
Iteration  16: 1152984.572 ops/s
Iteration  17: 1108366.351 ops/s
Iteration  18: 1149593.751 ops/s
Iteration  19: 1191773.848 ops/s
Iteration  20: 1127726.818 ops/s
Iteration  21: 1187007.876 ops/s
Iteration  22: 1153280.477 ops/s
Iteration  23: 1175351.088 ops/s
Iteration  24: 1118616.996 ops/s
Iteration  25: 1129485.914 ops/s
Iteration  26: 1187601.719 ops/s
Iteration  27: 1129968.813 ops/s
Iteration  28: 1139011.303 ops/s
Iteration  29: 1185983.708 ops/s
Iteration  30: 1115752.466 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOnTest._Benchmark.benchmark_workerNotDisposedPrematurelyAsyncInNormalOutConditional":
  1147086.087 ±(99.9%) 19273.738 ops/s [Average]
  (min, avg, max) = (1100946.959, 1147086.087, 1195261.990), stdev = 28848.026
  CI (99.9%): [1127812.349, 1166359.825] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                            Mode  Cnt        Score       Error  Units
FlowableObserveOnTest._Benchmark.benchmark_workerNotDisposedPrematurelyAsyncInNormalOutConditional  thrpt   30  1147086.087 ± 19273.738  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableMostRecentTest._Benchmark.benchmark_singleSourceManyIterators$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableMostRecentTest._Benchmark.benchmark_singleSourceManyIterators

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 25985.603 ops/s
# Warmup Iteration   2: 121131.488 ops/s
# Warmup Iteration   3: 131214.004 ops/s
# Warmup Iteration   4: 144349.977 ops/s
# Warmup Iteration   5: 156373.784 ops/s
# Warmup Iteration   6: 146797.692 ops/s
# Warmup Iteration   7: 143590.309 ops/s
# Warmup Iteration   8: 154407.690 ops/s
# Warmup Iteration   9: 141728.835 ops/s
# Warmup Iteration  10: 151826.482 ops/s
# Warmup Iteration  11: 144351.143 ops/s
# Warmup Iteration  12: 148148.256 ops/s
# Warmup Iteration  13: 151464.053 ops/s
# Warmup Iteration  14: 142189.158 ops/s
# Warmup Iteration  15: 147166.381 ops/s
# Warmup Iteration  16: 149064.672 ops/s
# Warmup Iteration  17: 150560.059 ops/s
# Warmup Iteration  18: 145109.421 ops/s
# Warmup Iteration  19: 151107.665 ops/s
# Warmup Iteration  20: 149459.332 ops/s
# Warmup Iteration  21: 111307.911 ops/s
# Warmup Iteration  22: 152201.905 ops/s
# Warmup Iteration  23: 148074.345 ops/s
# Warmup Iteration  24: 135799.592 ops/s
# Warmup Iteration  25: 144235.850 ops/s
# Warmup Iteration  26: 152939.933 ops/s
# Warmup Iteration  27: 139913.240 ops/s
# Warmup Iteration  28: 152544.619 ops/s
# Warmup Iteration  29: 141276.560 ops/s
# Warmup Iteration  30: 146786.265 ops/s
Iteration   1: 146969.850 ops/s
Iteration   2: 143191.205 ops/s
Iteration   3: 147117.037 ops/s
Iteration   4: 141835.056 ops/s
Iteration   5: 149050.143 ops/s
Iteration   6: 146927.244 ops/s
Iteration   7: 142719.950 ops/s
Iteration   8: 147583.030 ops/s
Iteration   9: 144649.914 ops/s
Iteration  10: 145596.322 ops/s
Iteration  11: 150518.323 ops/s
Iteration  12: 140596.149 ops/s
Iteration  13: 148009.211 ops/s
Iteration  14: 144989.757 ops/s
Iteration  15: 144709.167 ops/s
Iteration  16: 140744.936 ops/s
Iteration  17: 150469.063 ops/s
Iteration  18: 142127.068 ops/s
Iteration  19: 142799.455 ops/s
Iteration  20: 141281.451 ops/s
Iteration  21: 144355.722 ops/s
Iteration  22: 143484.205 ops/s
Iteration  23: 148414.270 ops/s
Iteration  24: 145321.601 ops/s
Iteration  25: 150513.934 ops/s
Iteration  26: 142879.444 ops/s
Iteration  27: 144912.634 ops/s
Iteration  28: 144492.648 ops/s
Iteration  29: 143144.589 ops/s
Iteration  30: 146939.795 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableMostRecentTest._Benchmark.benchmark_singleSourceManyIterators":
  145211.439 ±(99.9%) 1936.161 ops/s [Average]
  (min, avg, max) = (140596.149, 145211.439, 150518.323), stdev = 2897.955
  CI (99.9%): [143275.278, 147147.600] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt       Score      Error  Units
BlockingFlowableMostRecentTest._Benchmark.benchmark_singleSourceManyIterators  thrpt   30  145211.439 ± 1936.161  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableLatestTest._Benchmark.benchmark_sameSourceMultipleIterators$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableLatestTest._Benchmark.benchmark_sameSourceMultipleIterators

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 18780.588 ops/s
# Warmup Iteration   2: 76352.659 ops/s
# Warmup Iteration   3: 114653.092 ops/s
# Warmup Iteration   4: 125691.602 ops/s
# Warmup Iteration   5: 122188.613 ops/s
# Warmup Iteration   6: 124769.446 ops/s
# Warmup Iteration   7: 126500.994 ops/s
# Warmup Iteration   8: 123132.758 ops/s
# Warmup Iteration   9: 124711.246 ops/s
# Warmup Iteration  10: 125069.610 ops/s
# Warmup Iteration  11: 117097.218 ops/s
# Warmup Iteration  12: 124272.409 ops/s
# Warmup Iteration  13: 130189.931 ops/s
# Warmup Iteration  14: 122435.320 ops/s
# Warmup Iteration  15: 129661.081 ops/s
# Warmup Iteration  16: 121925.790 ops/s
# Warmup Iteration  17: 123530.611 ops/s
# Warmup Iteration  18: 130703.033 ops/s
# Warmup Iteration  19: 121917.260 ops/s
# Warmup Iteration  20: 130337.906 ops/s
# Warmup Iteration  21: 126806.412 ops/s
# Warmup Iteration  22: 123137.645 ops/s
# Warmup Iteration  23: 128007.598 ops/s
# Warmup Iteration  24: 125046.106 ops/s
# Warmup Iteration  25: 127535.779 ops/s
# Warmup Iteration  26: 123588.157 ops/s
# Warmup Iteration  27: 123165.562 ops/s
# Warmup Iteration  28: 127833.421 ops/s
# Warmup Iteration  29: 119889.998 ops/s
# Warmup Iteration  30: 122904.539 ops/s
Iteration   1: 125305.627 ops/s
Iteration   2: 127176.141 ops/s
Iteration   3: 122884.958 ops/s
Iteration   4: 127757.001 ops/s
Iteration   5: 122297.479 ops/s
Iteration   6: 128024.963 ops/s
Iteration   7: 124143.355 ops/s
Iteration   8: 125198.059 ops/s
Iteration   9: 129509.488 ops/s
Iteration  10: 121053.017 ops/s
Iteration  11: 127128.853 ops/s
Iteration  12: 126875.416 ops/s
Iteration  13: 126594.371 ops/s
Iteration  14: 130728.696 ops/s
Iteration  15: 126248.679 ops/s
Iteration  16: 118041.107 ops/s
Iteration  17: 128662.405 ops/s
Iteration  18: 124107.013 ops/s
Iteration  19: 128485.257 ops/s
Iteration  20: 124123.253 ops/s
Iteration  21: 127464.501 ops/s
Iteration  22: 123567.889 ops/s
Iteration  23: 128120.157 ops/s
Iteration  24: 127475.811 ops/s
Iteration  25: 127037.760 ops/s
Iteration  26: 128005.783 ops/s
Iteration  27: 124903.491 ops/s
Iteration  28: 129327.483 ops/s
Iteration  29: 122524.784 ops/s
Iteration  30: 130352.520 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableLatestTest._Benchmark.benchmark_sameSourceMultipleIterators":
  126104.177 ±(99.9%) 1940.658 ops/s [Average]
  (min, avg, max) = (118041.107, 126104.177, 130728.696), stdev = 2904.686
  CI (99.9%): [124163.519, 128044.836] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt       Score      Error  Units
BlockingFlowableLatestTest._Benchmark.benchmark_sameSourceMultipleIterators  thrpt   30  126104.177 ± 1940.658  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimedTest._Benchmark.benchmark_continuousDelivery$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimedTest._Benchmark.benchmark_continuousDelivery

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 85934.032 ops/s
# Warmup Iteration   2: 284080.010 ops/s
# Warmup Iteration   3: 588604.972 ops/s
# Warmup Iteration   4: 970661.589 ops/s
# Warmup Iteration   5: 918509.170 ops/s
# Warmup Iteration   6: 960618.469 ops/s
# Warmup Iteration   7: 987575.134 ops/s
# Warmup Iteration   8: 1018376.129 ops/s
# Warmup Iteration   9: 975733.979 ops/s
# Warmup Iteration  10: 1016077.674 ops/s
# Warmup Iteration  11: 936183.176 ops/s
# Warmup Iteration  12: 982189.192 ops/s
# Warmup Iteration  13: 997200.603 ops/s
# Warmup Iteration  14: 981869.594 ops/s
# Warmup Iteration  15: 945341.136 ops/s
# Warmup Iteration  16: 817048.118 ops/s
# Warmup Iteration  17: 961066.646 ops/s
# Warmup Iteration  18: 947674.941 ops/s
# Warmup Iteration  19: 983003.308 ops/s
# Warmup Iteration  20: 947946.013 ops/s
# Warmup Iteration  21: 971584.329 ops/s
# Warmup Iteration  22: 951786.962 ops/s
# Warmup Iteration  23: 972342.391 ops/s
# Warmup Iteration  24: 938772.082 ops/s
# Warmup Iteration  25: 931409.433 ops/s
# Warmup Iteration  26: 985902.020 ops/s
# Warmup Iteration  27: 959282.582 ops/s
# Warmup Iteration  28: 991534.302 ops/s
# Warmup Iteration  29: 995397.421 ops/s
# Warmup Iteration  30: 964044.193 ops/s
Iteration   1: 960639.484 ops/s
Iteration   2: 982695.750 ops/s
Iteration   3: 950931.083 ops/s
Iteration   4: 975296.377 ops/s
Iteration   5: 1001283.546 ops/s
Iteration   6: 942536.613 ops/s
Iteration   7: 1002392.564 ops/s
Iteration   8: 933366.056 ops/s
Iteration   9: 1027595.609 ops/s
Iteration  10: 961474.179 ops/s
Iteration  11: 962923.185 ops/s
Iteration  12: 972879.128 ops/s
Iteration  13: 963292.079 ops/s
Iteration  14: 973503.723 ops/s
Iteration  15: 974722.718 ops/s
Iteration  16: 970398.709 ops/s
Iteration  17: 944857.756 ops/s
Iteration  18: 1015019.506 ops/s
Iteration  19: 910090.826 ops/s
Iteration  20: 1006972.954 ops/s
Iteration  21: 1008381.092 ops/s
Iteration  22: 969958.743 ops/s
Iteration  23: 982809.290 ops/s
Iteration  24: 964350.909 ops/s
Iteration  25: 981273.611 ops/s
Iteration  26: 971728.518 ops/s
Iteration  27: 956760.071 ops/s
Iteration  28: 971191.540 ops/s
Iteration  29: 964859.570 ops/s
Iteration  30: 973765.313 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimedTest._Benchmark.benchmark_continuousDelivery":
  972598.350 ±(99.9%) 16515.950 ops/s [Average]
  (min, avg, max) = (910090.826, 972598.350, 1027595.609), stdev = 24720.299
  CI (99.9%): [956082.400, 989114.300] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score       Error  Units
FlowableTakeLastTimedTest._Benchmark.benchmark_continuousDelivery  thrpt   30  972598.350 ± 16515.950  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_periodicWindowCompletionRestartTimer$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_periodicWindowCompletionRestartTimer

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 14696.951 ops/s
# Warmup Iteration   2: 65025.892 ops/s
# Warmup Iteration   3: 86403.715 ops/s
# Warmup Iteration   4: 110071.519 ops/s
# Warmup Iteration   5: 110316.456 ops/s
# Warmup Iteration   6: 109065.292 ops/s
# Warmup Iteration   7: 111527.679 ops/s
# Warmup Iteration   8: 108367.695 ops/s
# Warmup Iteration   9: 109268.574 ops/s
# Warmup Iteration  10: 112209.508 ops/s
# Warmup Iteration  11: 104748.041 ops/s
# Warmup Iteration  12: 113895.174 ops/s
# Warmup Iteration  13: 109904.987 ops/s
# Warmup Iteration  14: 105379.740 ops/s
# Warmup Iteration  15: 113056.594 ops/s
# Warmup Iteration  16: 105330.332 ops/s
# Warmup Iteration  17: 107993.398 ops/s
# Warmup Iteration  18: 112310.055 ops/s
# Warmup Iteration  19: 114097.250 ops/s
# Warmup Iteration  20: 106538.080 ops/s
# Warmup Iteration  21: 113968.176 ops/s
# Warmup Iteration  22: 107509.018 ops/s
# Warmup Iteration  23: 107637.457 ops/s
# Warmup Iteration  24: 108682.896 ops/s
# Warmup Iteration  25: 106088.972 ops/s
# Warmup Iteration  26: 106697.706 ops/s
# Warmup Iteration  27: 108464.129 ops/s
# Warmup Iteration  28: 113372.689 ops/s
# Warmup Iteration  29: 107600.366 ops/s
# Warmup Iteration  30: 111086.260 ops/s
Iteration   1: 108541.082 ops/s
Iteration   2: 108449.789 ops/s
Iteration   3: 108444.719 ops/s
Iteration   4: 110738.243 ops/s
Iteration   5: 109595.792 ops/s
Iteration   6: 107664.210 ops/s
Iteration   7: 109017.613 ops/s
Iteration   8: 106926.210 ops/s
Iteration   9: 108277.690 ops/s
Iteration  10: 106570.608 ops/s
Iteration  11: 108070.018 ops/s
Iteration  12: 113569.501 ops/s
Iteration  13: 107337.203 ops/s
Iteration  14: 111681.661 ops/s
Iteration  15: 112749.467 ops/s
Iteration  16: 107543.561 ops/s
Iteration  17: 110433.786 ops/s
Iteration  18: 112255.700 ops/s
Iteration  19: 109774.264 ops/s
Iteration  20: 110767.179 ops/s
Iteration  21: 107906.598 ops/s
Iteration  22: 108147.549 ops/s
Iteration  23: 109704.334 ops/s
Iteration  24: 106832.693 ops/s
Iteration  25: 111972.673 ops/s
Iteration  26: 107662.781 ops/s
Iteration  27: 111690.207 ops/s
Iteration  28: 105607.906 ops/s
Iteration  29: 112221.548 ops/s
Iteration  30: 106148.639 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_periodicWindowCompletionRestartTimer":
  109210.107 ±(99.9%) 1439.556 ops/s [Average]
  (min, avg, max) = (105607.906, 109210.107, 113569.501), stdev = 2154.659
  CI (99.9%): [107770.552, 110649.663] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              Mode  Cnt       Score      Error  Units
FlowableWindowWithTimeTest._Benchmark.benchmark_periodicWindowCompletionRestartTimer  thrpt   30  109210.107 ± 1439.556  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableUnsafeTest._Benchmark.benchmark_wrapAlreadyCompletable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableUnsafeTest._Benchmark.benchmark_wrapAlreadyCompletable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 28955212.298 ops/s
# Warmup Iteration   2: 42893924.871 ops/s
# Warmup Iteration   3: 57241400.266 ops/s
# Warmup Iteration   4: 57883163.184 ops/s
# Warmup Iteration   5: 56289291.412 ops/s
# Warmup Iteration   6: 56964029.764 ops/s
# Warmup Iteration   7: 58163920.243 ops/s
# Warmup Iteration   8: 57047943.740 ops/s
# Warmup Iteration   9: 58866946.724 ops/s
# Warmup Iteration  10: 49196404.864 ops/s
# Warmup Iteration  11: 52256197.574 ops/s
# Warmup Iteration  12: 56628181.874 ops/s
# Warmup Iteration  13: 59894784.693 ops/s
# Warmup Iteration  14: 55977689.056 ops/s
# Warmup Iteration  15: 57094972.400 ops/s
# Warmup Iteration  16: 57227364.909 ops/s
# Warmup Iteration  17: 59305077.302 ops/s
# Warmup Iteration  18: 56407880.434 ops/s
# Warmup Iteration  19: 58170840.072 ops/s
# Warmup Iteration  20: 57173809.062 ops/s
# Warmup Iteration  21: 58537970.834 ops/s
# Warmup Iteration  22: 58765705.723 ops/s
# Warmup Iteration  23: 56573532.392 ops/s
# Warmup Iteration  24: 56736736.568 ops/s
# Warmup Iteration  25: 59128224.540 ops/s
# Warmup Iteration  26: 56031998.753 ops/s
# Warmup Iteration  27: 57926247.815 ops/s
# Warmup Iteration  28: 56107375.798 ops/s
# Warmup Iteration  29: 58306383.163 ops/s
# Warmup Iteration  30: 56768706.909 ops/s
Iteration   1: 58251121.909 ops/s
Iteration   2: 57254226.702 ops/s
Iteration   3: 56194868.790 ops/s
Iteration   4: 58618321.013 ops/s
Iteration   5: 57346322.321 ops/s
Iteration   6: 58777637.095 ops/s
Iteration   7: 56704740.996 ops/s
Iteration   8: 58254125.025 ops/s
Iteration   9: 59041295.072 ops/s
Iteration  10: 57580726.813 ops/s
Iteration  11: 57863500.797 ops/s
Iteration  12: 56163231.703 ops/s
Iteration  13: 60329346.852 ops/s
Iteration  14: 56686732.733 ops/s
Iteration  15: 56628955.748 ops/s
Iteration  16: 59776247.796 ops/s
Iteration  17: 60310157.880 ops/s
Iteration  18: 55823878.837 ops/s
Iteration  19: 58127500.459 ops/s
Iteration  20: 55891708.322 ops/s
Iteration  21: 59510743.424 ops/s
Iteration  22: 56210745.618 ops/s
Iteration  23: 58416864.820 ops/s
Iteration  24: 59129499.951 ops/s
Iteration  25: 55535445.966 ops/s
Iteration  26: 57266142.219 ops/s
Iteration  27: 59393457.876 ops/s
Iteration  28: 55444460.570 ops/s
Iteration  29: 56526456.270 ops/s
Iteration  30: 58706974.036 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableUnsafeTest._Benchmark.benchmark_wrapAlreadyCompletable":
  57725514.587 ±(99.9%) 967669.892 ops/s [Average]
  (min, avg, max) = (55444460.570, 57725514.587, 60329346.852), stdev = 1448362.849
  CI (99.9%): [56757844.695, 58693184.479] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt         Score        Error  Units
CompletableUnsafeTest._Benchmark.benchmark_wrapAlreadyCompletable  thrpt   30  57725514.587 ± 967669.892  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingTest._Benchmark.benchmark_blockingSubscribeConsumerConsumerAction$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingTest._Benchmark.benchmark_blockingSubscribeConsumerConsumerAction

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 9596.364 ops/s
# Warmup Iteration   2: 18951.949 ops/s
# Warmup Iteration   3: 22675.624 ops/s
# Warmup Iteration   4: 19138.590 ops/s
# Warmup Iteration   5: 20454.130 ops/s
# Warmup Iteration   6: 22263.749 ops/s
# Warmup Iteration   7: 25939.501 ops/s
# Warmup Iteration   8: 20992.174 ops/s
# Warmup Iteration   9: 20505.286 ops/s
# Warmup Iteration  10: 20677.419 ops/s
# Warmup Iteration  11: 20604.729 ops/s
# Warmup Iteration  12: 20855.544 ops/s
# Warmup Iteration  13: 20431.744 ops/s
# Warmup Iteration  14: 20848.827 ops/s
# Warmup Iteration  15: 21117.635 ops/s
# Warmup Iteration  16: 20730.065 ops/s
# Warmup Iteration  17: 20381.828 ops/s
# Warmup Iteration  18: 20907.791 ops/s
# Warmup Iteration  19: 20491.412 ops/s
# Warmup Iteration  20: 20280.087 ops/s
# Warmup Iteration  21: 20766.715 ops/s
# Warmup Iteration  22: 21171.255 ops/s
# Warmup Iteration  23: 21174.999 ops/s
# Warmup Iteration  24: 20346.676 ops/s
# Warmup Iteration  25: 21044.380 ops/s
# Warmup Iteration  26: 21275.819 ops/s
# Warmup Iteration  27: 20902.547 ops/s
# Warmup Iteration  28: 21040.646 ops/s
# Warmup Iteration  29: 20930.944 ops/s
# Warmup Iteration  30: 20414.415 ops/s
Iteration   1: 21536.320 ops/s
Iteration   2: 20746.555 ops/s
Iteration   3: 21271.180 ops/s
Iteration   4: 21127.647 ops/s
Iteration   5: 21027.603 ops/s
Iteration   6: 20925.604 ops/s
Iteration   7: 21016.634 ops/s
Iteration   8: 21111.353 ops/s
Iteration   9: 21146.012 ops/s
Iteration  10: 20878.137 ops/s
Iteration  11: 20388.197 ops/s
Iteration  12: 21259.115 ops/s
Iteration  13: 20794.012 ops/s
Iteration  14: 21128.617 ops/s
Iteration  15: 20973.721 ops/s
Iteration  16: 20130.848 ops/s
Iteration  17: 20512.680 ops/s
Iteration  18: 20763.502 ops/s
Iteration  19: 20724.565 ops/s
Iteration  20: 20701.788 ops/s
Iteration  21: 21211.851 ops/s
Iteration  22: 20262.768 ops/s
Iteration  23: 20989.477 ops/s
Iteration  24: 20425.958 ops/s
Iteration  25: 21163.446 ops/s
Iteration  26: 20688.677 ops/s
Iteration  27: 20465.319 ops/s
Iteration  28: 21035.998 ops/s
Iteration  29: 20531.803 ops/s
Iteration  30: 20361.090 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingTest._Benchmark.benchmark_blockingSubscribeConsumerConsumerAction":
  20843.349 ±(99.9%) 229.828 ops/s [Average]
  (min, avg, max) = (20130.848, 20843.349, 21536.320), stdev = 343.996
  CI (99.9%): [20613.521, 21073.177] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             Mode  Cnt      Score     Error  Units
ObservableBlockingTest._Benchmark.benchmark_blockingSubscribeConsumerConsumerAction  thrpt   30  20843.349 ± 229.828  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_cancelUpfront$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_cancelUpfront

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 365335.524 ops/s
# Warmup Iteration   2: 1995966.923 ops/s
# Warmup Iteration   3: 3030973.050 ops/s
# Warmup Iteration   4: 3308071.710 ops/s
# Warmup Iteration   5: 2881594.958 ops/s
# Warmup Iteration   6: 3152265.964 ops/s
# Warmup Iteration   7: 3290145.490 ops/s
# Warmup Iteration   8: 3201192.720 ops/s
# Warmup Iteration   9: 3276453.859 ops/s
# Warmup Iteration  10: 3272220.890 ops/s
# Warmup Iteration  11: 3379565.692 ops/s
# Warmup Iteration  12: 3323602.907 ops/s
# Warmup Iteration  13: 3386516.049 ops/s
# Warmup Iteration  14: 3270574.412 ops/s
# Warmup Iteration  15: 3443255.647 ops/s
# Warmup Iteration  16: 3356541.856 ops/s
# Warmup Iteration  17: 3257766.658 ops/s
# Warmup Iteration  18: 3381923.740 ops/s
# Warmup Iteration  19: 3327169.077 ops/s
# Warmup Iteration  20: 3517356.084 ops/s
# Warmup Iteration  21: 3215315.931 ops/s
# Warmup Iteration  22: 3372275.841 ops/s
# Warmup Iteration  23: 3271665.274 ops/s
# Warmup Iteration  24: 3317390.849 ops/s
# Warmup Iteration  25: 3439635.653 ops/s
# Warmup Iteration  26: 3189904.655 ops/s
# Warmup Iteration  27: 3398393.436 ops/s
# Warmup Iteration  28: 3402801.933 ops/s
# Warmup Iteration  29: 3295472.009 ops/s
# Warmup Iteration  30: 3423831.847 ops/s
Iteration   1: 3342559.421 ops/s
Iteration   2: 3405086.578 ops/s
Iteration   3: 3412506.166 ops/s
Iteration   4: 3330747.157 ops/s
Iteration   5: 3219271.352 ops/s
Iteration   6: 3322449.040 ops/s
Iteration   7: 3273645.834 ops/s
Iteration   8: 3377997.974 ops/s
Iteration   9: 3241077.674 ops/s
Iteration  10: 3433977.313 ops/s
Iteration  11: 3432053.585 ops/s
Iteration  12: 3223310.573 ops/s
Iteration  13: 3399496.481 ops/s
Iteration  14: 3241100.912 ops/s
Iteration  15: 3438103.217 ops/s
Iteration  16: 3304343.847 ops/s
Iteration  17: 3382729.660 ops/s
Iteration  18: 3451454.993 ops/s
Iteration  19: 3243431.228 ops/s
Iteration  20: 3407283.172 ops/s
Iteration  21: 3262120.852 ops/s
Iteration  22: 3340990.318 ops/s
Iteration  23: 3480173.760 ops/s
Iteration  24: 3218875.435 ops/s
Iteration  25: 3368886.662 ops/s
Iteration  26: 3266754.194 ops/s
Iteration  27: 3450195.981 ops/s
Iteration  28: 3295978.788 ops/s
Iteration  29: 3387775.791 ops/s
Iteration  30: 3382128.732 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_cancelUpfront":
  3344550.223 ±(99.9%) 53713.757 ops/s [Average]
  (min, avg, max) = (3218875.435, 3344550.223, 3480173.760), stdev = 80396.229
  CI (99.9%): [3290836.466, 3398263.980] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
FlowableWindowWithTimeTest._Benchmark.benchmark_cancelUpfront  thrpt   30  3344550.223 ± 53713.757  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_observeOnCompleteThread$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_observeOnCompleteThread

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 17565.277 ops/s
# Warmup Iteration   2: 24273.164 ops/s
# Warmup Iteration   3: 19582.270 ops/s
# Warmup Iteration   4: 19364.299 ops/s
# Warmup Iteration   5: 25141.493 ops/s
# Warmup Iteration   6: 20275.872 ops/s
# Warmup Iteration   7: 20801.932 ops/s
# Warmup Iteration   8: 20352.671 ops/s
# Warmup Iteration   9: 20234.199 ops/s
# Warmup Iteration  10: 20228.136 ops/s
# Warmup Iteration  11: 20895.989 ops/s
# Warmup Iteration  12: 20196.878 ops/s
# Warmup Iteration  13: 20641.583 ops/s
# Warmup Iteration  14: 20212.893 ops/s
# Warmup Iteration  15: 20531.039 ops/s
# Warmup Iteration  16: 21032.782 ops/s
# Warmup Iteration  17: 20723.326 ops/s
# Warmup Iteration  18: 20696.967 ops/s
# Warmup Iteration  19: 20293.917 ops/s
# Warmup Iteration  20: 20526.132 ops/s
# Warmup Iteration  21: 19644.795 ops/s
# Warmup Iteration  22: 20077.090 ops/s
# Warmup Iteration  23: 20634.872 ops/s
# Warmup Iteration  24: 20060.707 ops/s
# Warmup Iteration  25: 19843.062 ops/s
# Warmup Iteration  26: 20202.168 ops/s
# Warmup Iteration  27: 20419.482 ops/s
# Warmup Iteration  28: 19793.424 ops/s
# Warmup Iteration  29: 20356.463 ops/s
# Warmup Iteration  30: 19991.676 ops/s
Iteration   1: 20464.185 ops/s
Iteration   2: 19593.970 ops/s
Iteration   3: 20122.628 ops/s
Iteration   4: 19948.180 ops/s
Iteration   5: 20112.905 ops/s
Iteration   6: 19835.175 ops/s
Iteration   7: 19935.947 ops/s
Iteration   8: 20103.755 ops/s
Iteration   9: 20042.794 ops/s
Iteration  10: 20561.620 ops/s
Iteration  11: 29363.099 ops/s
Iteration  12: 19159.305 ops/s
Iteration  13: 20626.689 ops/s
Iteration  14: 20534.815 ops/s
Iteration  15: 20428.139 ops/s
Iteration  16: 20624.660 ops/s
Iteration  17: 19908.378 ops/s
Iteration  18: 20131.135 ops/s
Iteration  19: 20498.775 ops/s
Iteration  20: 20200.332 ops/s
Iteration  21: 20892.005 ops/s
Iteration  22: 19976.735 ops/s
Iteration  23: 20730.048 ops/s
Iteration  24: 20225.971 ops/s
Iteration  25: 20408.760 ops/s
Iteration  26: 19564.488 ops/s
Iteration  27: 20284.015 ops/s
Iteration  28: 19896.412 ops/s
Iteration  29: 20564.059 ops/s
Iteration  30: 19853.356 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_observeOnCompleteThread":
  20486.411 ±(99.9%) 1149.073 ops/s [Average]
  (min, avg, max) = (19159.305, 20486.411, 29363.099), stdev = 1719.878
  CI (99.9%): [19337.339, 21635.484] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt      Score      Error  Units
MaybeTest._Benchmark.benchmark_observeOnCompleteThread  thrpt   30  20486.411 ± 1149.073  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReplayTest._Benchmark.benchmark_replaySizeAndTime$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReplayTest._Benchmark.benchmark_replaySizeAndTime

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 76047.270 ops/s
# Warmup Iteration   2: 223586.326 ops/s
# Warmup Iteration   3: 236754.786 ops/s
# Warmup Iteration   4: 245036.402 ops/s
# Warmup Iteration   5: 239900.157 ops/s
# Warmup Iteration   6: 239896.832 ops/s
# Warmup Iteration   7: 242246.322 ops/s
# Warmup Iteration   8: 238811.557 ops/s
# Warmup Iteration   9: 237937.442 ops/s
# Warmup Iteration  10: 247952.520 ops/s
# Warmup Iteration  11: 237203.702 ops/s
# Warmup Iteration  12: 244757.115 ops/s
# Warmup Iteration  13: 248434.257 ops/s
# Warmup Iteration  14: 242438.261 ops/s
# Warmup Iteration  15: 243329.547 ops/s
# Warmup Iteration  16: 234888.537 ops/s
# Warmup Iteration  17: 242951.352 ops/s
# Warmup Iteration  18: 244655.512 ops/s
# Warmup Iteration  19: 234548.149 ops/s
# Warmup Iteration  20: 248439.393 ops/s
# Warmup Iteration  21: 239722.457 ops/s
# Warmup Iteration  22: 250453.274 ops/s
# Warmup Iteration  23: 251341.112 ops/s
# Warmup Iteration  24: 234794.644 ops/s
# Warmup Iteration  25: 241944.875 ops/s
# Warmup Iteration  26: 248751.775 ops/s
# Warmup Iteration  27: 239426.743 ops/s
# Warmup Iteration  28: 244072.832 ops/s
# Warmup Iteration  29: 248838.274 ops/s
# Warmup Iteration  30: 237419.772 ops/s
Iteration   1: 257980.263 ops/s
Iteration   2: 237284.545 ops/s
Iteration   3: 251052.545 ops/s
Iteration   4: 238714.012 ops/s
Iteration   5: 246355.892 ops/s
Iteration   6: 242340.885 ops/s
Iteration   7: 242293.677 ops/s
Iteration   8: 248771.031 ops/s
Iteration   9: 240706.056 ops/s
Iteration  10: 247631.515 ops/s
Iteration  11: 241833.928 ops/s
Iteration  12: 251521.032 ops/s
Iteration  13: 239975.098 ops/s
Iteration  14: 242002.379 ops/s
Iteration  15: 247797.563 ops/s
Iteration  16: 237999.719 ops/s
Iteration  17: 252510.720 ops/s
Iteration  18: 235126.094 ops/s
Iteration  19: 242888.785 ops/s
Iteration  20: 244026.972 ops/s
Iteration  21: 248257.090 ops/s
Iteration  22: 241739.123 ops/s
Iteration  23: 246225.791 ops/s
Iteration  24: 249022.716 ops/s
Iteration  25: 245794.151 ops/s
Iteration  26: 248075.257 ops/s
Iteration  27: 235553.986 ops/s
Iteration  28: 251064.967 ops/s
Iteration  29: 248927.924 ops/s
Iteration  30: 241912.227 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableReplayTest._Benchmark.benchmark_replaySizeAndTime":
  244846.198 ±(99.9%) 3642.923 ops/s [Average]
  (min, avg, max) = (235126.094, 244846.198, 257980.263), stdev = 5452.557
  CI (99.9%): [241203.275, 248489.122] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
ObservableReplayTest._Benchmark.benchmark_replaySizeAndTime  thrpt   30  244846.198 ± 3642.923  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableFromCallableTest._Benchmark.benchmark_fromCallableThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableFromCallableTest._Benchmark.benchmark_fromCallableThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 271347.802 ops/s
# Warmup Iteration   2: 589663.346 ops/s
# Warmup Iteration   3: 610755.204 ops/s
# Warmup Iteration   4: 637729.631 ops/s
# Warmup Iteration   5: 616413.169 ops/s
# Warmup Iteration   6: 644111.460 ops/s
# Warmup Iteration   7: 615583.925 ops/s
# Warmup Iteration   8: 624022.924 ops/s
# Warmup Iteration   9: 650805.839 ops/s
# Warmup Iteration  10: 617090.958 ops/s
# Warmup Iteration  11: 619507.892 ops/s
# Warmup Iteration  12: 612056.193 ops/s
# Warmup Iteration  13: 636966.272 ops/s
# Warmup Iteration  14: 627709.426 ops/s
# Warmup Iteration  15: 626898.380 ops/s
# Warmup Iteration  16: 628601.019 ops/s
# Warmup Iteration  17: 697238.424 ops/s
# Warmup Iteration  18: 726382.391 ops/s
# Warmup Iteration  19: 684141.442 ops/s
# Warmup Iteration  20: 723506.248 ops/s
# Warmup Iteration  21: 691420.284 ops/s
# Warmup Iteration  22: 700254.196 ops/s
# Warmup Iteration  23: 725416.671 ops/s
# Warmup Iteration  24: 691719.385 ops/s
# Warmup Iteration  25: 688565.753 ops/s
# Warmup Iteration  26: 718524.721 ops/s
# Warmup Iteration  27: 673424.509 ops/s
# Warmup Iteration  28: 724564.940 ops/s
# Warmup Iteration  29: 705639.444 ops/s
# Warmup Iteration  30: 697324.421 ops/s
Iteration   1: 718786.494 ops/s
Iteration   2: 701882.275 ops/s
Iteration   3: 722891.394 ops/s
Iteration   4: 681251.446 ops/s
Iteration   5: 721230.964 ops/s
Iteration   6: 697198.798 ops/s
Iteration   7: 696600.838 ops/s
Iteration   8: 695684.415 ops/s
Iteration   9: 704920.831 ops/s
Iteration  10: 732330.039 ops/s
Iteration  11: 691512.247 ops/s
Iteration  12: 703536.928 ops/s
Iteration  13: 727795.230 ops/s
Iteration  14: 668311.715 ops/s
Iteration  15: 708432.186 ops/s
Iteration  16: 712773.759 ops/s
Iteration  17: 703164.368 ops/s
Iteration  18: 710169.600 ops/s
Iteration  19: 733833.587 ops/s
Iteration  20: 682093.029 ops/s
Iteration  21: 734686.237 ops/s
Iteration  22: 691482.624 ops/s
Iteration  23: 720162.943 ops/s
Iteration  24: 730401.192 ops/s
Iteration  25: 699803.065 ops/s
Iteration  26: 715666.402 ops/s
Iteration  27: 479427.508 ops/s
Iteration  28: 718886.638 ops/s
Iteration  29: 699513.862 ops/s
Iteration  30: 714815.262 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableFromCallableTest._Benchmark.benchmark_fromCallableThrows":
  700641.529 ±(99.9%) 30015.845 ops/s [Average]
  (min, avg, max) = (479427.508, 700641.529, 734686.237), stdev = 44926.307
  CI (99.9%): [670625.684, 730657.374] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score       Error  Units
CompletableFromCallableTest._Benchmark.benchmark_fromCallableThrows  thrpt   30  700641.529 ± 30015.845  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.disposables.DisposableHelperTest._Benchmark.benchmark_trySet$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.disposables.DisposableHelperTest._Benchmark.benchmark_trySet

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 5044526.867 ops/s
# Warmup Iteration   2: 7849090.449 ops/s
# Warmup Iteration   3: 8078051.023 ops/s
# Warmup Iteration   4: 8339772.888 ops/s
# Warmup Iteration   5: 7763820.349 ops/s
# Warmup Iteration   6: 8381484.559 ops/s
# Warmup Iteration   7: 8908926.954 ops/s
# Warmup Iteration   8: 8683180.425 ops/s
# Warmup Iteration   9: 8812970.046 ops/s
# Warmup Iteration  10: 8560999.214 ops/s
# Warmup Iteration  11: 8776118.634 ops/s
# Warmup Iteration  12: 8760654.817 ops/s
# Warmup Iteration  13: 8498634.619 ops/s
# Warmup Iteration  14: 8733409.651 ops/s
# Warmup Iteration  15: 8565840.898 ops/s
# Warmup Iteration  16: 9014364.385 ops/s
# Warmup Iteration  17: 8630523.107 ops/s
# Warmup Iteration  18: 8632490.703 ops/s
# Warmup Iteration  19: 8548013.846 ops/s
# Warmup Iteration  20: 8753402.405 ops/s
# Warmup Iteration  21: 8917186.591 ops/s
# Warmup Iteration  22: 8628862.244 ops/s
# Warmup Iteration  23: 8746109.690 ops/s
# Warmup Iteration  24: 8813969.547 ops/s
# Warmup Iteration  25: 8722047.058 ops/s
# Warmup Iteration  26: 8803143.524 ops/s
# Warmup Iteration  27: 8954947.712 ops/s
# Warmup Iteration  28: 8536557.558 ops/s
# Warmup Iteration  29: 8951215.749 ops/s
# Warmup Iteration  30: 8466071.582 ops/s
Iteration   1: 8778944.093 ops/s
Iteration   2: 8597040.967 ops/s
Iteration   3: 8706408.119 ops/s
Iteration   4: 8933230.204 ops/s
Iteration   5: 8568068.388 ops/s
Iteration   6: 8813590.363 ops/s
Iteration   7: 8654783.706 ops/s
Iteration   8: 8928412.986 ops/s
Iteration   9: 8652448.247 ops/s
Iteration  10: 8943939.405 ops/s
Iteration  11: 8809264.665 ops/s
Iteration  12: 8690390.327 ops/s
Iteration  13: 8731264.235 ops/s
Iteration  14: 8547620.429 ops/s
Iteration  15: 8695397.270 ops/s
Iteration  16: 8964599.310 ops/s
Iteration  17: 8484844.330 ops/s
Iteration  18: 8673626.203 ops/s
Iteration  19: 8737475.909 ops/s
Iteration  20: 8802447.687 ops/s
Iteration  21: 8721231.368 ops/s
Iteration  22: 8714467.784 ops/s
Iteration  23: 8916107.534 ops/s
Iteration  24: 8783511.727 ops/s
Iteration  25: 8550434.974 ops/s
Iteration  26: 8757320.744 ops/s
Iteration  27: 8762033.936 ops/s
Iteration  28: 8785279.006 ops/s
Iteration  29: 8540509.554 ops/s
Iteration  30: 8634330.237 ops/s


Result "io.reactivex.rxjava3.internal.disposables.DisposableHelperTest._Benchmark.benchmark_trySet":
  8729300.790 ±(99.9%) 85759.610 ops/s [Average]
  (min, avg, max) = (8484844.330, 8729300.790, 8964599.310), stdev = 128360.957
  CI (99.9%): [8643541.180, 8815060.400] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score       Error  Units
DisposableHelperTest._Benchmark.benchmark_trySet  thrpt   30  8729300.790 ± 85759.610  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableFromActionTest._Benchmark.benchmark_disposeWhileRunningComplete$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableFromActionTest._Benchmark.benchmark_disposeWhileRunningComplete

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2657876.355 ops/s
# Warmup Iteration   2: 5211169.360 ops/s
# Warmup Iteration   3: 7611158.938 ops/s
# Warmup Iteration   4: 7466041.205 ops/s
# Warmup Iteration   5: 7230111.834 ops/s
# Warmup Iteration   6: 7594951.430 ops/s
# Warmup Iteration   7: 7143242.131 ops/s
# Warmup Iteration   8: 7391531.410 ops/s
# Warmup Iteration   9: 7283539.421 ops/s
# Warmup Iteration  10: 7365479.935 ops/s
# Warmup Iteration  11: 7255361.854 ops/s
# Warmup Iteration  12: 7176161.878 ops/s
# Warmup Iteration  13: 7649513.990 ops/s
# Warmup Iteration  14: 7311138.484 ops/s
# Warmup Iteration  15: 7381328.666 ops/s
# Warmup Iteration  16: 7405329.346 ops/s
# Warmup Iteration  17: 7302836.383 ops/s
# Warmup Iteration  18: 7602921.216 ops/s
# Warmup Iteration  19: 7220843.436 ops/s
# Warmup Iteration  20: 7646811.681 ops/s
# Warmup Iteration  21: 7232914.167 ops/s
# Warmup Iteration  22: 7371637.868 ops/s
# Warmup Iteration  23: 7684057.053 ops/s
# Warmup Iteration  24: 7205768.898 ops/s
# Warmup Iteration  25: 7613574.036 ops/s
# Warmup Iteration  26: 7355444.921 ops/s
# Warmup Iteration  27: 7059866.040 ops/s
# Warmup Iteration  28: 7473452.108 ops/s
# Warmup Iteration  29: 7500412.491 ops/s
# Warmup Iteration  30: 7348485.540 ops/s
Iteration   1: 7417604.363 ops/s
Iteration   2: 7209033.241 ops/s
Iteration   3: 7639184.108 ops/s
Iteration   4: 7217558.776 ops/s
Iteration   5: 7290510.128 ops/s
Iteration   6: 7517762.833 ops/s
Iteration   7: 7233727.420 ops/s
Iteration   8: 7445467.326 ops/s
Iteration   9: 7285345.579 ops/s
Iteration  10: 7755316.562 ops/s
Iteration  11: 7165347.215 ops/s
Iteration  12: 7486233.103 ops/s
Iteration  13: 7268638.149 ops/s
Iteration  14: 7432958.411 ops/s
Iteration  15: 7547516.121 ops/s
Iteration  16: 7153449.882 ops/s
Iteration  17: 7228562.727 ops/s
Iteration  18: 7746245.501 ops/s
Iteration  19: 7247537.988 ops/s
Iteration  20: 7360071.114 ops/s
Iteration  21: 7343322.181 ops/s
Iteration  22: 6016293.596 ops/s
Iteration  23: 7677045.727 ops/s
Iteration  24: 6972242.452 ops/s
Iteration  25: 7679078.122 ops/s
Iteration  26: 7076957.514 ops/s
Iteration  27: 7658167.168 ops/s
Iteration  28: 7583520.508 ops/s
Iteration  29: 7304447.642 ops/s
Iteration  30: 7579970.740 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableFromActionTest._Benchmark.benchmark_disposeWhileRunningComplete":
  7351303.873 ±(99.9%) 218097.021 ops/s [Average]
  (min, avg, max) = (6016293.596, 7351303.873, 7755316.562), stdev = 326437.379
  CI (99.9%): [7133206.852, 7569400.895] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score        Error  Units
CompletableFromActionTest._Benchmark.benchmark_disposeWhileRunningComplete  thrpt   30  7351303.873 ± 218097.021  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableFromRunnableTest._Benchmark.benchmark_disposeWhileRunningComplete$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableFromRunnableTest._Benchmark.benchmark_disposeWhileRunningComplete

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2153002.903 ops/s
# Warmup Iteration   2: 5151263.138 ops/s
# Warmup Iteration   3: 6145720.355 ops/s
# Warmup Iteration   4: 6525038.096 ops/s
# Warmup Iteration   5: 6604745.697 ops/s
# Warmup Iteration   6: 6327334.565 ops/s
# Warmup Iteration   7: 6664302.304 ops/s
# Warmup Iteration   8: 6882883.479 ops/s
# Warmup Iteration   9: 6321682.707 ops/s
# Warmup Iteration  10: 6765035.610 ops/s
# Warmup Iteration  11: 6826731.381 ops/s
# Warmup Iteration  12: 6452637.855 ops/s
# Warmup Iteration  13: 6716035.817 ops/s
# Warmup Iteration  14: 6396357.377 ops/s
# Warmup Iteration  15: 6610641.855 ops/s
# Warmup Iteration  16: 6503071.907 ops/s
# Warmup Iteration  17: 6490734.984 ops/s
# Warmup Iteration  18: 6518504.586 ops/s
# Warmup Iteration  19: 7017714.489 ops/s
# Warmup Iteration  20: 6386223.517 ops/s
# Warmup Iteration  21: 6772600.352 ops/s
# Warmup Iteration  22: 6683930.550 ops/s
# Warmup Iteration  23: 6346238.781 ops/s
# Warmup Iteration  24: 6824010.504 ops/s
# Warmup Iteration  25: 6471820.979 ops/s
# Warmup Iteration  26: 6577828.702 ops/s
# Warmup Iteration  27: 6561245.858 ops/s
# Warmup Iteration  28: 6531684.250 ops/s
# Warmup Iteration  29: 6745602.970 ops/s
# Warmup Iteration  30: 6305313.486 ops/s
Iteration   1: 6574438.382 ops/s
Iteration   2: 6420370.143 ops/s
Iteration   3: 6600918.795 ops/s
Iteration   4: 6480268.405 ops/s
Iteration   5: 6503732.039 ops/s
Iteration   6: 6371139.958 ops/s
Iteration   7: 6748756.565 ops/s
Iteration   8: 6302071.382 ops/s
Iteration   9: 6781699.805 ops/s
Iteration  10: 6404321.042 ops/s
Iteration  11: 6892577.368 ops/s
Iteration  12: 6505754.127 ops/s
Iteration  13: 6589728.355 ops/s
Iteration  14: 6463966.462 ops/s
Iteration  15: 6490583.683 ops/s
Iteration  16: 6660128.439 ops/s
Iteration  17: 6438804.876 ops/s
Iteration  18: 6608760.179 ops/s
Iteration  19: 6730561.561 ops/s
Iteration  20: 6567438.659 ops/s
Iteration  21: 6726210.815 ops/s
Iteration  22: 6371908.302 ops/s
Iteration  23: 6875959.908 ops/s
Iteration  24: 6487194.618 ops/s
Iteration  25: 6445125.958 ops/s
Iteration  26: 6693550.089 ops/s
Iteration  27: 6447103.923 ops/s
Iteration  28: 6540319.491 ops/s
Iteration  29: 6407127.567 ops/s
Iteration  30: 6454493.767 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableFromRunnableTest._Benchmark.benchmark_disposeWhileRunningComplete":
  6552833.822 ±(99.9%) 101710.071 ops/s [Average]
  (min, avg, max) = (6302071.382, 6552833.822, 6892577.368), stdev = 152234.857
  CI (99.9%): [6451123.751, 6654543.893] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score        Error  Units
CompletableFromRunnableTest._Benchmark.benchmark_disposeWhileRunningComplete  thrpt   30  6552833.822 ± 101710.071  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.observers.BlockingFirstObserverTest._Benchmark.benchmark_firstValueOnly$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.observers.BlockingFirstObserverTest._Benchmark.benchmark_firstValueOnly

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 503057.776 ops/s
# Warmup Iteration   2: 524513.139 ops/s
# Warmup Iteration   3: 769158.691 ops/s
# Warmup Iteration   4: 750813.963 ops/s
# Warmup Iteration   5: 786779.477 ops/s
# Warmup Iteration   6: 769072.694 ops/s
# Warmup Iteration   7: 763317.453 ops/s
# Warmup Iteration   8: 782873.448 ops/s
# Warmup Iteration   9: 737720.192 ops/s
# Warmup Iteration  10: 735291.432 ops/s
# Warmup Iteration  11: 783539.364 ops/s
# Warmup Iteration  12: 701859.732 ops/s
# Warmup Iteration  13: 804883.492 ops/s
# Warmup Iteration  14: 766289.236 ops/s
# Warmup Iteration  15: 799305.902 ops/s
# Warmup Iteration  16: 809182.041 ops/s
# Warmup Iteration  17: 797311.123 ops/s
# Warmup Iteration  18: 867682.518 ops/s
# Warmup Iteration  19: 814457.614 ops/s
# Warmup Iteration  20: 816122.332 ops/s
# Warmup Iteration  21: 857867.138 ops/s
# Warmup Iteration  22: 808448.611 ops/s
# Warmup Iteration  23: 839966.687 ops/s
# Warmup Iteration  24: 785688.735 ops/s
# Warmup Iteration  25: 853557.414 ops/s
# Warmup Iteration  26: 798325.186 ops/s
# Warmup Iteration  27: 840195.997 ops/s
# Warmup Iteration  28: 838188.020 ops/s
# Warmup Iteration  29: 824265.111 ops/s
# Warmup Iteration  30: 849174.528 ops/s
Iteration   1: 804444.984 ops/s
Iteration   2: 797420.236 ops/s
Iteration   3: 861537.294 ops/s
Iteration   4: 802324.930 ops/s
Iteration   5: 850756.716 ops/s
Iteration   6: 829748.634 ops/s
Iteration   7: 827016.235 ops/s
Iteration   8: 854440.693 ops/s
Iteration   9: 833524.917 ops/s
Iteration  10: 807886.815 ops/s
Iteration  11: 845324.091 ops/s
Iteration  12: 785791.096 ops/s
Iteration  13: 861715.594 ops/s
Iteration  14: 847269.295 ops/s
Iteration  15: 781703.547 ops/s
Iteration  16: 828102.567 ops/s
Iteration  17: 654073.488 ops/s
Iteration  18: 832323.604 ops/s
Iteration  19: 831013.966 ops/s
Iteration  20: 816113.220 ops/s
Iteration  21: 838497.426 ops/s
Iteration  22: 806142.090 ops/s
Iteration  23: 816654.617 ops/s
Iteration  24: 846832.608 ops/s
Iteration  25: 800387.101 ops/s
Iteration  26: 852376.396 ops/s
Iteration  27: 792097.826 ops/s
Iteration  28: 831803.064 ops/s
Iteration  29: 804462.608 ops/s
Iteration  30: 818862.812 ops/s


Result "io.reactivex.rxjava3.internal.observers.BlockingFirstObserverTest._Benchmark.benchmark_firstValueOnly":
  818688.282 ±(99.9%) 25681.950 ops/s [Average]
  (min, avg, max) = (654073.488, 818688.282, 861715.594), stdev = 38439.537
  CI (99.9%): [793006.332, 844370.233] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score       Error  Units
BlockingFirstObserverTest._Benchmark.benchmark_firstValueOnly  thrpt   30  818688.282 ± 25681.950  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableFromSupplierTest._Benchmark.benchmark_fromSupplier$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableFromSupplierTest._Benchmark.benchmark_fromSupplier

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2120900.557 ops/s
# Warmup Iteration   2: 6081479.243 ops/s
# Warmup Iteration   3: 8849026.041 ops/s
# Warmup Iteration   4: 8260522.702 ops/s
# Warmup Iteration   5: 8913818.769 ops/s
# Warmup Iteration   6: 8580721.365 ops/s
# Warmup Iteration   7: 8483032.351 ops/s
# Warmup Iteration   8: 8824551.244 ops/s
# Warmup Iteration   9: 8415763.167 ops/s
# Warmup Iteration  10: 8912448.679 ops/s
# Warmup Iteration  11: 8668747.345 ops/s
# Warmup Iteration  12: 8657817.934 ops/s
# Warmup Iteration  13: 8894792.028 ops/s
# Warmup Iteration  14: 8729719.521 ops/s
# Warmup Iteration  15: 8696190.912 ops/s
# Warmup Iteration  16: 8481106.672 ops/s
# Warmup Iteration  17: 8932319.281 ops/s
# Warmup Iteration  18: 8693101.402 ops/s
# Warmup Iteration  19: 8244241.201 ops/s
# Warmup Iteration  20: 8955947.260 ops/s
# Warmup Iteration  21: 8474372.386 ops/s
# Warmup Iteration  22: 8734417.622 ops/s
# Warmup Iteration  23: 8714969.987 ops/s
# Warmup Iteration  24: 8462213.433 ops/s
# Warmup Iteration  25: 8748178.083 ops/s
# Warmup Iteration  26: 8409905.139 ops/s
# Warmup Iteration  27: 8863491.425 ops/s
# Warmup Iteration  28: 8371092.447 ops/s
# Warmup Iteration  29: 8765566.386 ops/s
# Warmup Iteration  30: 8732262.802 ops/s
Iteration   1: 8450309.666 ops/s
Iteration   2: 9039664.722 ops/s
Iteration   3: 8998089.099 ops/s
Iteration   4: 8280108.364 ops/s
Iteration   5: 9028957.500 ops/s
Iteration   6: 8649733.168 ops/s
Iteration   7: 8519470.434 ops/s
Iteration   8: 8607088.300 ops/s
Iteration   9: 8589455.924 ops/s
Iteration  10: 8962239.129 ops/s
Iteration  11: 8470689.400 ops/s
Iteration  12: 8543012.625 ops/s
Iteration  13: 8924387.787 ops/s
Iteration  14: 8498878.381 ops/s
Iteration  15: 8219322.224 ops/s
Iteration  16: 8744809.671 ops/s
Iteration  17: 9112164.231 ops/s
Iteration  18: 8962510.480 ops/s
Iteration  19: 8601230.903 ops/s
Iteration  20: 8702382.141 ops/s
Iteration  21: 8377814.088 ops/s
Iteration  22: 8928854.923 ops/s
Iteration  23: 8383916.166 ops/s
Iteration  24: 8762950.539 ops/s
Iteration  25: 8539062.221 ops/s
Iteration  26: 8937520.979 ops/s
Iteration  27: 8720569.362 ops/s
Iteration  28: 8546547.058 ops/s
Iteration  29: 8820803.428 ops/s
Iteration  30: 8436349.330 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableFromSupplierTest._Benchmark.benchmark_fromSupplier":
  8678629.741 ±(99.9%) 164695.103 ops/s [Average]
  (min, avg, max) = (8219322.224, 8678629.741, 9112164.231), stdev = 246507.896
  CI (99.9%): [8513934.638, 8843324.845] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score        Error  Units
CompletableFromSupplierTest._Benchmark.benchmark_fromSupplier  thrpt   30  8678629.741 ± 164695.103  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableUnsafeTest._Benchmark.benchmark_wrapCustomCompletable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableUnsafeTest._Benchmark.benchmark_wrapCustomCompletable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3592157.429 ops/s
# Warmup Iteration   2: 6330481.257 ops/s
# Warmup Iteration   3: 9541486.506 ops/s
# Warmup Iteration   4: 9379737.304 ops/s
# Warmup Iteration   5: 9641278.169 ops/s
# Warmup Iteration   6: 9358708.476 ops/s
# Warmup Iteration   7: 9311028.162 ops/s
# Warmup Iteration   8: 9376768.731 ops/s
# Warmup Iteration   9: 9105277.856 ops/s
# Warmup Iteration  10: 9760414.084 ops/s
# Warmup Iteration  11: 9624651.947 ops/s
# Warmup Iteration  12: 9148965.876 ops/s
# Warmup Iteration  13: 9453085.809 ops/s
# Warmup Iteration  14: 9143979.479 ops/s
# Warmup Iteration  15: 9395200.745 ops/s
# Warmup Iteration  16: 9325327.192 ops/s
# Warmup Iteration  17: 9424090.693 ops/s
# Warmup Iteration  18: 9237046.395 ops/s
# Warmup Iteration  19: 9115841.545 ops/s
# Warmup Iteration  20: 9364542.979 ops/s
# Warmup Iteration  21: 8923222.448 ops/s
# Warmup Iteration  22: 9382355.506 ops/s
# Warmup Iteration  23: 9339296.480 ops/s
# Warmup Iteration  24: 9169107.386 ops/s
# Warmup Iteration  25: 9030368.529 ops/s
# Warmup Iteration  26: 9742121.724 ops/s
# Warmup Iteration  27: 9515508.460 ops/s
# Warmup Iteration  28: 9056122.601 ops/s
# Warmup Iteration  29: 9667045.559 ops/s
# Warmup Iteration  30: 9017222.935 ops/s
Iteration   1: 9079795.649 ops/s
Iteration   2: 9482057.481 ops/s
Iteration   3: 9172225.050 ops/s
Iteration   4: 9404980.653 ops/s
Iteration   5: 9650817.062 ops/s
Iteration   6: 9141347.780 ops/s
Iteration   7: 9352951.090 ops/s
Iteration   8: 9510969.766 ops/s
Iteration   9: 9047855.559 ops/s
Iteration  10: 9643900.725 ops/s
Iteration  11: 9021737.203 ops/s
Iteration  12: 7589303.250 ops/s
Iteration  13: 9130912.651 ops/s
Iteration  14: 9337804.969 ops/s
Iteration  15: 9462869.488 ops/s
Iteration  16: 9317631.073 ops/s
Iteration  17: 9112234.822 ops/s
Iteration  18: 9579378.456 ops/s
Iteration  19: 9288401.580 ops/s
Iteration  20: 9272554.557 ops/s
Iteration  21: 9499523.373 ops/s
Iteration  22: 9001553.148 ops/s
Iteration  23: 9564824.731 ops/s
Iteration  24: 9165302.203 ops/s
Iteration  25: 9293409.444 ops/s
Iteration  26: 9116667.282 ops/s
Iteration  27: 9454622.689 ops/s
Iteration  28: 9268914.155 ops/s
Iteration  29: 9330723.847 ops/s
Iteration  30: 9193338.962 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableUnsafeTest._Benchmark.benchmark_wrapCustomCompletable":
  9249620.290 ±(99.9%) 244166.671 ops/s [Average]
  (min, avg, max) = (7589303.250, 9249620.290, 9650817.062), stdev = 365457.206
  CI (99.9%): [9005453.619, 9493786.961] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score        Error  Units
CompletableUnsafeTest._Benchmark.benchmark_wrapCustomCompletable  thrpt   30  9249620.290 ± 244166.671  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableFromSupplierTest._Benchmark.benchmark_fromSupplierInvokesLazy$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableFromSupplierTest._Benchmark.benchmark_fromSupplierInvokesLazy

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2726539.951 ops/s
# Warmup Iteration   2: 7270909.868 ops/s
# Warmup Iteration   3: 8608011.769 ops/s
# Warmup Iteration   4: 8264534.899 ops/s
# Warmup Iteration   5: 8283082.266 ops/s
# Warmup Iteration   6: 7324615.635 ops/s
# Warmup Iteration   7: 8107765.459 ops/s
# Warmup Iteration   8: 8839665.270 ops/s
# Warmup Iteration   9: 8293582.497 ops/s
# Warmup Iteration  10: 8625495.369 ops/s
# Warmup Iteration  11: 8668214.456 ops/s
# Warmup Iteration  12: 8229565.095 ops/s
# Warmup Iteration  13: 8686486.895 ops/s
# Warmup Iteration  14: 8731030.160 ops/s
# Warmup Iteration  15: 8351996.578 ops/s
# Warmup Iteration  16: 8619756.408 ops/s
# Warmup Iteration  17: 8408063.234 ops/s
# Warmup Iteration  18: 8776859.727 ops/s
# Warmup Iteration  19: 8358946.979 ops/s
# Warmup Iteration  20: 8587584.867 ops/s
# Warmup Iteration  21: 8502079.655 ops/s
# Warmup Iteration  22: 8296243.761 ops/s
# Warmup Iteration  23: 8822746.742 ops/s
# Warmup Iteration  24: 8406593.021 ops/s
# Warmup Iteration  25: 8602084.299 ops/s
# Warmup Iteration  26: 8514609.996 ops/s
# Warmup Iteration  27: 8686277.201 ops/s
# Warmup Iteration  28: 8262794.810 ops/s
# Warmup Iteration  29: 8543319.565 ops/s
# Warmup Iteration  30: 8572951.061 ops/s
Iteration   1: 8447313.260 ops/s
Iteration   2: 8222186.971 ops/s
Iteration   3: 8501161.906 ops/s
Iteration   4: 8522462.499 ops/s
Iteration   5: 8094795.302 ops/s
Iteration   6: 8540176.788 ops/s
Iteration   7: 8129481.820 ops/s
Iteration   8: 8740285.447 ops/s
Iteration   9: 8709766.462 ops/s
Iteration  10: 8113314.875 ops/s
Iteration  11: 8872754.410 ops/s
Iteration  12: 8331668.831 ops/s
Iteration  13: 8680303.702 ops/s
Iteration  14: 8382687.594 ops/s
Iteration  15: 8342875.543 ops/s
Iteration  16: 8680259.396 ops/s
Iteration  17: 8139358.216 ops/s
Iteration  18: 8774138.105 ops/s
Iteration  19: 8254178.307 ops/s
Iteration  20: 8648102.221 ops/s
Iteration  21: 8290786.912 ops/s
Iteration  22: 8707559.423 ops/s
Iteration  23: 8402608.159 ops/s
Iteration  24: 8818178.018 ops/s
Iteration  25: 8323791.032 ops/s
Iteration  26: 8595154.246 ops/s
Iteration  27: 8749461.468 ops/s
Iteration  28: 8417304.425 ops/s
Iteration  29: 8477083.971 ops/s
Iteration  30: 8624559.616 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableFromSupplierTest._Benchmark.benchmark_fromSupplierInvokesLazy":
  8484458.631 ±(99.9%) 152386.892 ops/s [Average]
  (min, avg, max) = (8094795.302, 8484458.631, 8872754.410), stdev = 228085.543
  CI (99.9%): [8332071.739, 8636845.523] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score        Error  Units
CompletableFromSupplierTest._Benchmark.benchmark_fromSupplierInvokesLazy  thrpt   30  8484458.631 ± 152386.892  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableFromSupplierTest._Benchmark.benchmark_fromSupplierTwice$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableFromSupplierTest._Benchmark.benchmark_fromSupplierTwice

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1111884.164 ops/s
# Warmup Iteration   2: 3107661.170 ops/s
# Warmup Iteration   3: 4510551.277 ops/s
# Warmup Iteration   4: 4591700.718 ops/s
# Warmup Iteration   5: 4564355.777 ops/s
# Warmup Iteration   6: 4466872.382 ops/s
# Warmup Iteration   7: 4576594.485 ops/s
# Warmup Iteration   8: 4510004.925 ops/s
# Warmup Iteration   9: 4606558.710 ops/s
# Warmup Iteration  10: 4476689.543 ops/s
# Warmup Iteration  11: 4501365.391 ops/s
# Warmup Iteration  12: 4649094.682 ops/s
# Warmup Iteration  13: 4434163.192 ops/s
# Warmup Iteration  14: 4665925.831 ops/s
# Warmup Iteration  15: 4376872.909 ops/s
# Warmup Iteration  16: 4598690.473 ops/s
# Warmup Iteration  17: 4608250.792 ops/s
# Warmup Iteration  18: 4628222.316 ops/s
# Warmup Iteration  19: 4573170.883 ops/s
# Warmup Iteration  20: 4523129.220 ops/s
# Warmup Iteration  21: 4658784.044 ops/s
# Warmup Iteration  22: 4334336.870 ops/s
# Warmup Iteration  23: 4719093.071 ops/s
# Warmup Iteration  24: 4529145.747 ops/s
# Warmup Iteration  25: 4426257.023 ops/s
# Warmup Iteration  26: 4572051.997 ops/s
# Warmup Iteration  27: 4524012.421 ops/s
# Warmup Iteration  28: 4756413.561 ops/s
# Warmup Iteration  29: 4629613.934 ops/s
# Warmup Iteration  30: 4700430.068 ops/s
Iteration   1: 4327597.567 ops/s
Iteration   2: 4633772.671 ops/s
Iteration   3: 4551275.602 ops/s
Iteration   4: 4558501.241 ops/s
Iteration   5: 4432336.971 ops/s
Iteration   6: 3621775.704 ops/s
Iteration   7: 4495583.432 ops/s
Iteration   8: 4564130.484 ops/s
Iteration   9: 4627447.882 ops/s
Iteration  10: 4374205.352 ops/s
Iteration  11: 4601749.527 ops/s
Iteration  12: 4377027.382 ops/s
Iteration  13: 4540044.609 ops/s
Iteration  14: 4711378.117 ops/s
Iteration  15: 4288890.716 ops/s
Iteration  16: 4565044.819 ops/s
Iteration  17: 4554382.764 ops/s
Iteration  18: 4598921.370 ops/s
Iteration  19: 4612464.249 ops/s
Iteration  20: 4465503.294 ops/s
Iteration  21: 4651936.540 ops/s
Iteration  22: 4438594.946 ops/s
Iteration  23: 4574146.938 ops/s
Iteration  24: 4411885.307 ops/s
Iteration  25: 4619340.707 ops/s
Iteration  26: 4642822.175 ops/s
Iteration  27: 4305941.261 ops/s
Iteration  28: 4721660.043 ops/s
Iteration  29: 4553312.279 ops/s
Iteration  30: 4384603.736 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableFromSupplierTest._Benchmark.benchmark_fromSupplierTwice":
  4493542.589 ±(99.9%) 135300.797 ops/s [Average]
  (min, avg, max) = (3621775.704, 4493542.589, 4721660.043), stdev = 202511.879
  CI (99.9%): [4358241.792, 4628843.387] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score        Error  Units
CompletableFromSupplierTest._Benchmark.benchmark_fromSupplierTwice  thrpt   30  4493542.589 ± 135300.797  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableFromRunnableTest._Benchmark.benchmark_fromRunnableDisposed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableFromRunnableTest._Benchmark.benchmark_fromRunnableDisposed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2646454.346 ops/s
# Warmup Iteration   2: 6288232.573 ops/s
# Warmup Iteration   3: 8276204.342 ops/s
# Warmup Iteration   4: 8697777.858 ops/s
# Warmup Iteration   5: 8669122.039 ops/s
# Warmup Iteration   6: 8613253.659 ops/s
# Warmup Iteration   7: 7990849.631 ops/s
# Warmup Iteration   8: 8896373.619 ops/s
# Warmup Iteration   9: 8181064.042 ops/s
# Warmup Iteration  10: 8723749.556 ops/s
# Warmup Iteration  11: 8672482.222 ops/s
# Warmup Iteration  12: 8728216.925 ops/s
# Warmup Iteration  13: 8313325.554 ops/s
# Warmup Iteration  14: 8836217.406 ops/s
# Warmup Iteration  15: 8316500.493 ops/s
# Warmup Iteration  16: 8439127.758 ops/s
# Warmup Iteration  17: 8560157.652 ops/s
# Warmup Iteration  18: 8393582.290 ops/s
# Warmup Iteration  19: 8664781.750 ops/s
# Warmup Iteration  20: 8021420.839 ops/s
# Warmup Iteration  21: 8362841.234 ops/s
# Warmup Iteration  22: 8337560.422 ops/s
# Warmup Iteration  23: 8746766.393 ops/s
# Warmup Iteration  24: 8335223.419 ops/s
# Warmup Iteration  25: 8223355.820 ops/s
# Warmup Iteration  26: 8798507.424 ops/s
# Warmup Iteration  27: 8352758.379 ops/s
# Warmup Iteration  28: 8641024.528 ops/s
# Warmup Iteration  29: 8454000.722 ops/s
# Warmup Iteration  30: 8468765.729 ops/s
Iteration   1: 8465772.230 ops/s
Iteration   2: 8309378.689 ops/s
Iteration   3: 8622162.317 ops/s
Iteration   4: 8245819.527 ops/s
Iteration   5: 8785047.269 ops/s
Iteration   6: 8565339.090 ops/s
Iteration   7: 8446577.505 ops/s
Iteration   8: 8237962.714 ops/s
Iteration   9: 8757106.687 ops/s
Iteration  10: 8250943.139 ops/s
Iteration  11: 8469403.689 ops/s
Iteration  12: 8378193.310 ops/s
Iteration  13: 8295845.869 ops/s
Iteration  14: 8803131.406 ops/s
Iteration  15: 8093884.447 ops/s
Iteration  16: 8494572.294 ops/s
Iteration  17: 8389020.016 ops/s
Iteration  18: 8467191.964 ops/s
Iteration  19: 8369172.589 ops/s
Iteration  20: 8163828.886 ops/s
Iteration  21: 8733908.149 ops/s
Iteration  22: 8107431.309 ops/s
Iteration  23: 8523574.369 ops/s
Iteration  24: 8533543.377 ops/s
Iteration  25: 8432660.172 ops/s
Iteration  26: 8690742.023 ops/s
Iteration  27: 8476355.528 ops/s
Iteration  28: 8614310.805 ops/s
Iteration  29: 8688564.530 ops/s
Iteration  30: 8302979.623 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableFromRunnableTest._Benchmark.benchmark_fromRunnableDisposed":
  8457147.451 ±(99.9%) 132718.807 ops/s [Average]
  (min, avg, max) = (8093884.447, 8457147.451, 8803131.406), stdev = 198647.277
  CI (99.9%): [8324428.644, 8589866.258] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score        Error  Units
CompletableFromRunnableTest._Benchmark.benchmark_fromRunnableDisposed  thrpt   30  8457147.451 ± 132718.807  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableFromActionTest._Benchmark.benchmark_fromActionErrorsDisposed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableFromActionTest._Benchmark.benchmark_fromActionErrorsDisposed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2540349.374 ops/s
# Warmup Iteration   2: 5932051.660 ops/s
# Warmup Iteration   3: 8451076.600 ops/s
# Warmup Iteration   4: 8385008.471 ops/s
# Warmup Iteration   5: 8386728.307 ops/s
# Warmup Iteration   6: 8271707.499 ops/s
# Warmup Iteration   7: 8400065.867 ops/s
# Warmup Iteration   8: 8373067.167 ops/s
# Warmup Iteration   9: 8393417.685 ops/s
# Warmup Iteration  10: 8432163.959 ops/s
# Warmup Iteration  11: 8223649.107 ops/s
# Warmup Iteration  12: 8345603.706 ops/s
# Warmup Iteration  13: 8414675.402 ops/s
# Warmup Iteration  14: 8310118.511 ops/s
# Warmup Iteration  15: 8387753.600 ops/s
# Warmup Iteration  16: 8758960.205 ops/s
# Warmup Iteration  17: 8595911.316 ops/s
# Warmup Iteration  18: 8243662.588 ops/s
# Warmup Iteration  19: 8482276.914 ops/s
# Warmup Iteration  20: 8088194.923 ops/s
# Warmup Iteration  21: 8320837.310 ops/s
# Warmup Iteration  22: 8445599.606 ops/s
# Warmup Iteration  23: 8272740.701 ops/s
# Warmup Iteration  24: 8355511.056 ops/s
# Warmup Iteration  25: 8761185.447 ops/s
# Warmup Iteration  26: 8170935.516 ops/s
# Warmup Iteration  27: 8434102.842 ops/s
# Warmup Iteration  28: 8275557.726 ops/s
# Warmup Iteration  29: 8022718.390 ops/s
# Warmup Iteration  30: 8529386.634 ops/s
Iteration   1: 6431151.525 ops/s
Iteration   2: 8433418.105 ops/s
Iteration   3: 8076059.304 ops/s
Iteration   4: 8254810.758 ops/s
Iteration   5: 8164530.144 ops/s
Iteration   6: 8459881.570 ops/s
Iteration   7: 7953542.707 ops/s
Iteration   8: 8366615.161 ops/s
Iteration   9: 8508693.492 ops/s
Iteration  10: 8230865.027 ops/s
Iteration  11: 8539418.813 ops/s
Iteration  12: 8517322.034 ops/s
Iteration  13: 8235313.762 ops/s
Iteration  14: 8507708.306 ops/s
Iteration  15: 8100338.951 ops/s
Iteration  16: 8369992.041 ops/s
Iteration  17: 8414291.833 ops/s
Iteration  18: 7990521.929 ops/s
Iteration  19: 8358581.569 ops/s
Iteration  20: 8384108.885 ops/s
Iteration  21: 8363705.170 ops/s
Iteration  22: 8634714.628 ops/s
Iteration  23: 8125489.169 ops/s
Iteration  24: 8587704.438 ops/s
Iteration  25: 8122628.969 ops/s
Iteration  26: 8535059.045 ops/s
Iteration  27: 8217782.738 ops/s
Iteration  28: 8099626.971 ops/s
Iteration  29: 8527649.240 ops/s
Iteration  30: 8174508.643 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableFromActionTest._Benchmark.benchmark_fromActionErrorsDisposed":
  8256201.164 ±(99.9%) 262252.591 ops/s [Average]
  (min, avg, max) = (6431151.525, 8256201.164, 8634714.628), stdev = 392527.362
  CI (99.9%): [7993948.573, 8518453.755] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score        Error  Units
CompletableFromActionTest._Benchmark.benchmark_fromActionErrorsDisposed  thrpt   30  8256201.164 ± 262252.591  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableFromRunnableTest._Benchmark.benchmark_fromRunnableErrorsDisposed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableFromRunnableTest._Benchmark.benchmark_fromRunnableErrorsDisposed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3763201.522 ops/s
# Warmup Iteration   2: 5925962.562 ops/s
# Warmup Iteration   3: 8934108.745 ops/s
# Warmup Iteration   4: 8420831.099 ops/s
# Warmup Iteration   5: 8485663.101 ops/s
# Warmup Iteration   6: 8781204.421 ops/s
# Warmup Iteration   7: 8552470.494 ops/s
# Warmup Iteration   8: 8643999.707 ops/s
# Warmup Iteration   9: 8715720.836 ops/s
# Warmup Iteration  10: 8557028.384 ops/s
# Warmup Iteration  11: 8560360.526 ops/s
# Warmup Iteration  12: 8877579.773 ops/s
# Warmup Iteration  13: 8366596.616 ops/s
# Warmup Iteration  14: 8634483.242 ops/s
# Warmup Iteration  15: 8456374.720 ops/s
# Warmup Iteration  16: 8700115.234 ops/s
# Warmup Iteration  17: 8637352.113 ops/s
# Warmup Iteration  18: 8385285.268 ops/s
# Warmup Iteration  19: 8953251.762 ops/s
# Warmup Iteration  20: 8360765.112 ops/s
# Warmup Iteration  21: 8844511.955 ops/s
# Warmup Iteration  22: 8645185.998 ops/s
# Warmup Iteration  23: 8584741.325 ops/s
# Warmup Iteration  24: 8706664.406 ops/s
# Warmup Iteration  25: 8876976.084 ops/s
# Warmup Iteration  26: 8315040.919 ops/s
# Warmup Iteration  27: 8859318.809 ops/s
# Warmup Iteration  28: 8486272.442 ops/s
# Warmup Iteration  29: 8783514.565 ops/s
# Warmup Iteration  30: 8850575.396 ops/s
Iteration   1: 8588147.893 ops/s
Iteration   2: 8703060.469 ops/s
Iteration   3: 8616437.950 ops/s
Iteration   4: 8754908.293 ops/s
Iteration   5: 8732446.725 ops/s
Iteration   6: 8530964.828 ops/s
Iteration   7: 8809124.739 ops/s
Iteration   8: 8526209.421 ops/s
Iteration   9: 8888066.792 ops/s
Iteration  10: 8690390.635 ops/s
Iteration  11: 8392408.631 ops/s
Iteration  12: 8643862.523 ops/s
Iteration  13: 8528095.576 ops/s
Iteration  14: 8866379.715 ops/s
Iteration  15: 8898659.730 ops/s
Iteration  16: 8484640.088 ops/s
Iteration  17: 8839371.128 ops/s
Iteration  18: 8898514.324 ops/s
Iteration  19: 8250790.803 ops/s
Iteration  20: 8941427.488 ops/s
Iteration  21: 6619623.028 ops/s
Iteration  22: 8963026.558 ops/s
Iteration  23: 8417668.593 ops/s
Iteration  24: 8917022.651 ops/s
Iteration  25: 8587952.943 ops/s
Iteration  26: 8662367.535 ops/s
Iteration  27: 8950530.771 ops/s
Iteration  28: 8500559.616 ops/s
Iteration  29: 8662010.697 ops/s
Iteration  30: 8765694.811 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableFromRunnableTest._Benchmark.benchmark_fromRunnableErrorsDisposed":
  8621012.165 ±(99.9%) 281509.075 ops/s [Average]
  (min, avg, max) = (6619623.028, 8621012.165, 8963026.558), stdev = 421349.563
  CI (99.9%): [8339503.090, 8902521.240] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score        Error  Units
CompletableFromRunnableTest._Benchmark.benchmark_fromRunnableErrorsDisposed  thrpt   30  8621012.165 ± 281509.075  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableFromActionTest._Benchmark.benchmark_fromActionDisposed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableFromActionTest._Benchmark.benchmark_fromActionDisposed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2890525.572 ops/s
# Warmup Iteration   2: 6108067.450 ops/s
# Warmup Iteration   3: 8398926.351 ops/s
# Warmup Iteration   4: 8403255.727 ops/s
# Warmup Iteration   5: 8418398.887 ops/s
# Warmup Iteration   6: 8256926.759 ops/s
# Warmup Iteration   7: 8482167.851 ops/s
# Warmup Iteration   8: 8715619.855 ops/s
# Warmup Iteration   9: 8380488.460 ops/s
# Warmup Iteration  10: 8406447.469 ops/s
# Warmup Iteration  11: 8326197.406 ops/s
# Warmup Iteration  12: 8299052.259 ops/s
# Warmup Iteration  13: 8654153.688 ops/s
# Warmup Iteration  14: 8510338.938 ops/s
# Warmup Iteration  15: 8355554.499 ops/s
# Warmup Iteration  16: 8233785.955 ops/s
# Warmup Iteration  17: 8414315.393 ops/s
# Warmup Iteration  18: 8463987.623 ops/s
# Warmup Iteration  19: 8345524.067 ops/s
# Warmup Iteration  20: 8093057.037 ops/s
# Warmup Iteration  21: 8463320.057 ops/s
# Warmup Iteration  22: 8237903.012 ops/s
# Warmup Iteration  23: 8504636.420 ops/s
# Warmup Iteration  24: 8326814.979 ops/s
# Warmup Iteration  25: 8598980.357 ops/s
# Warmup Iteration  26: 8037237.496 ops/s
# Warmup Iteration  27: 8662811.311 ops/s
# Warmup Iteration  28: 8197248.483 ops/s
# Warmup Iteration  29: 8345818.657 ops/s
# Warmup Iteration  30: 8709303.645 ops/s
Iteration   1: 8277784.612 ops/s
Iteration   2: 8719038.250 ops/s
Iteration   3: 8621074.150 ops/s
Iteration   4: 8253806.286 ops/s
Iteration   5: 8726895.286 ops/s
Iteration   6: 8211678.206 ops/s
Iteration   7: 8514289.654 ops/s
Iteration   8: 8512158.482 ops/s
Iteration   9: 8253623.009 ops/s
Iteration  10: 8630420.034 ops/s
Iteration  11: 8119717.615 ops/s
Iteration  12: 8391839.965 ops/s
Iteration  13: 8602876.531 ops/s
Iteration  14: 8071973.462 ops/s
Iteration  15: 8474832.584 ops/s
Iteration  16: 8480286.299 ops/s
Iteration  17: 7981389.077 ops/s
Iteration  18: 8444754.497 ops/s
Iteration  19: 8478020.195 ops/s
Iteration  20: 8500612.825 ops/s
Iteration  21: 8000279.310 ops/s
Iteration  22: 8300091.178 ops/s
Iteration  23: 8809557.867 ops/s
Iteration  24: 8221031.459 ops/s
Iteration  25: 8666464.616 ops/s
Iteration  26: 8107557.598 ops/s
Iteration  27: 8361826.013 ops/s
Iteration  28: 8328488.126 ops/s
Iteration  29: 8286544.808 ops/s
Iteration  30: 8507579.356 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableFromActionTest._Benchmark.benchmark_fromActionDisposed":
  8395216.378 ±(99.9%) 147774.200 ops/s [Average]
  (min, avg, max) = (7981389.077, 8395216.378, 8809557.867), stdev = 221181.482
  CI (99.9%): [8247442.179, 8542990.578] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score        Error  Units
CompletableFromActionTest._Benchmark.benchmark_fromActionDisposed  thrpt   30  8395216.378 ± 147774.200  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableFromActionTest._Benchmark.benchmark_fromAction$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableFromActionTest._Benchmark.benchmark_fromAction

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2512009.605 ops/s
# Warmup Iteration   2: 6517454.117 ops/s
# Warmup Iteration   3: 8605127.303 ops/s
# Warmup Iteration   4: 8596939.350 ops/s
# Warmup Iteration   5: 8603804.189 ops/s
# Warmup Iteration   6: 8703812.867 ops/s
# Warmup Iteration   7: 8619909.957 ops/s
# Warmup Iteration   8: 8746423.980 ops/s
# Warmup Iteration   9: 8522848.331 ops/s
# Warmup Iteration  10: 8853900.036 ops/s
# Warmup Iteration  11: 8777507.347 ops/s
# Warmup Iteration  12: 8417250.150 ops/s
# Warmup Iteration  13: 8860671.387 ops/s
# Warmup Iteration  14: 8767487.431 ops/s
# Warmup Iteration  15: 8961670.232 ops/s
# Warmup Iteration  16: 8880708.270 ops/s
# Warmup Iteration  17: 8570791.737 ops/s
# Warmup Iteration  18: 8697642.603 ops/s
# Warmup Iteration  19: 8379265.614 ops/s
# Warmup Iteration  20: 8572293.372 ops/s
# Warmup Iteration  21: 8713445.573 ops/s
# Warmup Iteration  22: 8421283.499 ops/s
# Warmup Iteration  23: 8825557.790 ops/s
# Warmup Iteration  24: 6717072.862 ops/s
# Warmup Iteration  25: 8512082.453 ops/s
# Warmup Iteration  26: 8855561.304 ops/s
# Warmup Iteration  27: 8616249.929 ops/s
# Warmup Iteration  28: 8731668.402 ops/s
# Warmup Iteration  29: 8377725.470 ops/s
# Warmup Iteration  30: 8750499.582 ops/s
Iteration   1: 8303674.924 ops/s
Iteration   2: 8759345.051 ops/s
Iteration   3: 8425184.038 ops/s
Iteration   4: 8819467.995 ops/s
Iteration   5: 8830732.198 ops/s
Iteration   6: 8379181.987 ops/s
Iteration   7: 8731933.343 ops/s
Iteration   8: 8525474.690 ops/s
Iteration   9: 8584789.136 ops/s
Iteration  10: 8877077.129 ops/s
Iteration  11: 8492910.913 ops/s
Iteration  12: 8679536.919 ops/s
Iteration  13: 8588490.007 ops/s
Iteration  14: 8759540.668 ops/s
Iteration  15: 8622425.813 ops/s
Iteration  16: 8416021.613 ops/s
Iteration  17: 8657978.241 ops/s
Iteration  18: 8641490.215 ops/s
Iteration  19: 8514289.797 ops/s
Iteration  20: 8752354.933 ops/s
Iteration  21: 8676340.575 ops/s
Iteration  22: 8931757.156 ops/s
Iteration  23: 8393362.984 ops/s
Iteration  24: 8501316.172 ops/s
Iteration  25: 8800038.676 ops/s
Iteration  26: 8488737.403 ops/s
Iteration  27: 8771800.294 ops/s
Iteration  28: 8464407.334 ops/s
Iteration  29: 8639352.177 ops/s
Iteration  30: 8930218.839 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableFromActionTest._Benchmark.benchmark_fromAction":
  8631974.374 ±(99.9%) 114772.651 ops/s [Average]
  (min, avg, max) = (8303674.924, 8631974.374, 8931757.156), stdev = 171786.314
  CI (99.9%): [8517201.723, 8746747.025] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score        Error  Units
CompletableFromActionTest._Benchmark.benchmark_fromAction  thrpt   30  8631974.374 ± 114772.651  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableFromRunnableTest._Benchmark.benchmark_fromRunnable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableFromRunnableTest._Benchmark.benchmark_fromRunnable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 4704990.059 ops/s
# Warmup Iteration   2: 8042586.985 ops/s
# Warmup Iteration   3: 11203872.363 ops/s
# Warmup Iteration   4: 10554352.114 ops/s
# Warmup Iteration   5: 10958382.263 ops/s
# Warmup Iteration   6: 10763764.983 ops/s
# Warmup Iteration   7: 10551319.779 ops/s
# Warmup Iteration   8: 11188235.022 ops/s
# Warmup Iteration   9: 10553999.131 ops/s
# Warmup Iteration  10: 11134410.918 ops/s
# Warmup Iteration  11: 11002984.268 ops/s
# Warmup Iteration  12: 10614800.457 ops/s
# Warmup Iteration  13: 10985347.321 ops/s
# Warmup Iteration  14: 10658666.384 ops/s
# Warmup Iteration  15: 10892493.904 ops/s
# Warmup Iteration  16: 10676826.400 ops/s
# Warmup Iteration  17: 10740942.181 ops/s
# Warmup Iteration  18: 11169072.699 ops/s
# Warmup Iteration  19: 11156751.992 ops/s
# Warmup Iteration  20: 10489724.114 ops/s
# Warmup Iteration  21: 11116876.694 ops/s
# Warmup Iteration  22: 10268217.965 ops/s
# Warmup Iteration  23: 10596628.441 ops/s
# Warmup Iteration  24: 10816219.454 ops/s
# Warmup Iteration  25: 10417955.606 ops/s
# Warmup Iteration  26: 10979906.520 ops/s
# Warmup Iteration  27: 10599523.206 ops/s
# Warmup Iteration  28: 10771184.038 ops/s
# Warmup Iteration  29: 11175317.623 ops/s
# Warmup Iteration  30: 10681684.944 ops/s
Iteration   1: 10734592.599 ops/s
Iteration   2: 10922274.831 ops/s
Iteration   3: 10718425.469 ops/s
Iteration   4: 10768477.465 ops/s
Iteration   5: 10807842.736 ops/s
Iteration   6: 10833679.204 ops/s
Iteration   7: 11044985.471 ops/s
Iteration   8: 11366749.714 ops/s
Iteration   9: 10233535.598 ops/s
Iteration  10: 11013695.494 ops/s
Iteration  11: 10519795.661 ops/s
Iteration  12: 11219586.767 ops/s
Iteration  13: 10981714.270 ops/s
Iteration  14: 10846734.137 ops/s
Iteration  15: 10769237.709 ops/s
Iteration  16: 10718337.795 ops/s
Iteration  17: 10900829.456 ops/s
Iteration  18: 10885007.015 ops/s
Iteration  19: 10797688.906 ops/s
Iteration  20: 11235423.982 ops/s
Iteration  21: 10746990.276 ops/s
Iteration  22: 10777064.997 ops/s
Iteration  23: 10500203.699 ops/s
Iteration  24: 11134147.664 ops/s
Iteration  25: 10477682.438 ops/s
Iteration  26: 10835170.017 ops/s
Iteration  27: 10992503.836 ops/s
Iteration  28: 10737303.718 ops/s
Iteration  29: 10797139.883 ops/s
Iteration  30: 11217346.246 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableFromRunnableTest._Benchmark.benchmark_fromRunnable":
  10851138.902 ±(99.9%) 163038.045 ops/s [Average]
  (min, avg, max) = (10233535.598, 10851138.902, 11366749.714), stdev = 244027.689
  CI (99.9%): [10688100.856, 11014176.947] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt         Score        Error  Units
CompletableFromRunnableTest._Benchmark.benchmark_fromRunnable  thrpt   30  10851138.902 ± 163038.045  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableFromRunnableTest._Benchmark.benchmark_fromRunnableInvokesLazy$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableFromRunnableTest._Benchmark.benchmark_fromRunnableInvokesLazy

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2463029.264 ops/s
# Warmup Iteration   2: 6110016.760 ops/s
# Warmup Iteration   3: 8217526.958 ops/s
# Warmup Iteration   4: 8711571.230 ops/s
# Warmup Iteration   5: 8574036.814 ops/s
# Warmup Iteration   6: 8180700.917 ops/s
# Warmup Iteration   7: 8646021.806 ops/s
# Warmup Iteration   8: 8236671.692 ops/s
# Warmup Iteration   9: 8657854.754 ops/s
# Warmup Iteration  10: 8277256.207 ops/s
# Warmup Iteration  11: 8259601.675 ops/s
# Warmup Iteration  12: 8525730.953 ops/s
# Warmup Iteration  13: 8378628.733 ops/s
# Warmup Iteration  14: 8694872.576 ops/s
# Warmup Iteration  15: 8320130.015 ops/s
# Warmup Iteration  16: 8606858.699 ops/s
# Warmup Iteration  17: 8411896.721 ops/s
# Warmup Iteration  18: 8321778.013 ops/s
# Warmup Iteration  19: 6664579.029 ops/s
# Warmup Iteration  20: 8044603.725 ops/s
# Warmup Iteration  21: 8629637.012 ops/s
# Warmup Iteration  22: 8318027.951 ops/s
# Warmup Iteration  23: 8155839.798 ops/s
# Warmup Iteration  24: 8515345.034 ops/s
# Warmup Iteration  25: 8776565.909 ops/s
# Warmup Iteration  26: 8264428.054 ops/s
# Warmup Iteration  27: 8640569.168 ops/s
# Warmup Iteration  28: 8724957.698 ops/s
# Warmup Iteration  29: 8221988.750 ops/s
# Warmup Iteration  30: 8559484.769 ops/s
Iteration   1: 8307204.678 ops/s
Iteration   2: 8461283.654 ops/s
Iteration   3: 8249353.745 ops/s
Iteration   4: 8470198.869 ops/s
Iteration   5: 8108637.887 ops/s
Iteration   6: 8291077.217 ops/s
Iteration   7: 8920567.203 ops/s
Iteration   8: 8528031.740 ops/s
Iteration   9: 8187534.510 ops/s
Iteration  10: 8596534.160 ops/s
Iteration  11: 8447008.390 ops/s
Iteration  12: 8838844.778 ops/s
Iteration  13: 8365450.192 ops/s
Iteration  14: 8400220.355 ops/s
Iteration  15: 8693904.892 ops/s
Iteration  16: 8255947.899 ops/s
Iteration  17: 8692880.629 ops/s
Iteration  18: 8455780.103 ops/s
Iteration  19: 8314137.594 ops/s
Iteration  20: 8771112.827 ops/s
Iteration  21: 8299840.810 ops/s
Iteration  22: 8727754.162 ops/s
Iteration  23: 8139492.621 ops/s
Iteration  24: 8886770.910 ops/s
Iteration  25: 8394223.772 ops/s
Iteration  26: 8376968.619 ops/s
Iteration  27: 8405766.270 ops/s
Iteration  28: 8742807.271 ops/s
Iteration  29: 8324791.914 ops/s
Iteration  30: 8391597.213 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableFromRunnableTest._Benchmark.benchmark_fromRunnableInvokesLazy":
  8468190.829 ±(99.9%) 149477.354 ops/s [Average]
  (min, avg, max) = (8108637.887, 8468190.829, 8920567.203), stdev = 223730.684
  CI (99.9%): [8318713.475, 8617668.184] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score        Error  Units
CompletableFromRunnableTest._Benchmark.benchmark_fromRunnableInvokesLazy  thrpt   30  8468190.829 ± 149477.354  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableFromActionTest._Benchmark.benchmark_fromActionInvokesLazy$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableFromActionTest._Benchmark.benchmark_fromActionInvokesLazy

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2860786.907 ops/s
# Warmup Iteration   2: 6184401.527 ops/s
# Warmup Iteration   3: 8588901.286 ops/s
# Warmup Iteration   4: 8363523.901 ops/s
# Warmup Iteration   5: 8653882.066 ops/s
# Warmup Iteration   6: 8417861.226 ops/s
# Warmup Iteration   7: 8317283.989 ops/s
# Warmup Iteration   8: 8494588.561 ops/s
# Warmup Iteration   9: 8216792.403 ops/s
# Warmup Iteration  10: 8693738.034 ops/s
# Warmup Iteration  11: 8149564.358 ops/s
# Warmup Iteration  12: 8431989.463 ops/s
# Warmup Iteration  13: 8570912.712 ops/s
# Warmup Iteration  14: 8714936.849 ops/s
# Warmup Iteration  15: 8367352.104 ops/s
# Warmup Iteration  16: 8652290.336 ops/s
# Warmup Iteration  17: 8446366.218 ops/s
# Warmup Iteration  18: 8293673.656 ops/s
# Warmup Iteration  19: 8522098.927 ops/s
# Warmup Iteration  20: 8757034.126 ops/s
# Warmup Iteration  21: 8248542.756 ops/s
# Warmup Iteration  22: 8748070.823 ops/s
# Warmup Iteration  23: 8456452.841 ops/s
# Warmup Iteration  24: 8208884.707 ops/s
# Warmup Iteration  25: 8852875.382 ops/s
# Warmup Iteration  26: 8641823.158 ops/s
# Warmup Iteration  27: 8469171.064 ops/s
# Warmup Iteration  28: 8931663.296 ops/s
# Warmup Iteration  29: 8599151.676 ops/s
# Warmup Iteration  30: 8241986.963 ops/s
Iteration   1: 8698532.410 ops/s
Iteration   2: 8380013.851 ops/s
Iteration   3: 8299850.083 ops/s
Iteration   4: 8845524.590 ops/s
Iteration   5: 8464436.607 ops/s
Iteration   6: 8461365.198 ops/s
Iteration   7: 8347675.432 ops/s
Iteration   8: 8684876.658 ops/s
Iteration   9: 8682793.932 ops/s
Iteration  10: 8518239.200 ops/s
Iteration  11: 8516242.661 ops/s
Iteration  12: 8496834.056 ops/s
Iteration  13: 8423454.636 ops/s
Iteration  14: 8608854.986 ops/s
Iteration  15: 8727333.731 ops/s
Iteration  16: 8429856.419 ops/s
Iteration  17: 8607374.610 ops/s
Iteration  18: 8497469.105 ops/s
Iteration  19: 8727247.594 ops/s
Iteration  20: 8397104.933 ops/s
Iteration  21: 8883229.914 ops/s
Iteration  22: 8486635.935 ops/s
Iteration  23: 8248398.009 ops/s
Iteration  24: 8692244.274 ops/s
Iteration  25: 8294055.331 ops/s
Iteration  26: 8671488.274 ops/s
Iteration  27: 8216282.677 ops/s
Iteration  28: 8687390.549 ops/s
Iteration  29: 8500184.918 ops/s
Iteration  30: 8339902.657 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableFromActionTest._Benchmark.benchmark_fromActionInvokesLazy":
  8527829.774 ±(99.9%) 117215.675 ops/s [Average]
  (min, avg, max) = (8216282.677, 8527829.774, 8883229.914), stdev = 175442.918
  CI (99.9%): [8410614.099, 8645045.450] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score        Error  Units
CompletableFromActionTest._Benchmark.benchmark_fromActionInvokesLazy  thrpt   30  8527829.774 ± 117215.675  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableFromActionTest._Benchmark.benchmark_fromActionTwice$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableFromActionTest._Benchmark.benchmark_fromActionTwice

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1461831.671 ops/s
# Warmup Iteration   2: 3153608.493 ops/s
# Warmup Iteration   3: 4583142.491 ops/s
# Warmup Iteration   4: 4296839.158 ops/s
# Warmup Iteration   5: 4592696.706 ops/s
# Warmup Iteration   6: 4355787.330 ops/s
# Warmup Iteration   7: 4401828.010 ops/s
# Warmup Iteration   8: 4551194.578 ops/s
# Warmup Iteration   9: 4316673.858 ops/s
# Warmup Iteration  10: 4468125.382 ops/s
# Warmup Iteration  11: 4257800.062 ops/s
# Warmup Iteration  12: 4417456.491 ops/s
# Warmup Iteration  13: 4438379.994 ops/s
# Warmup Iteration  14: 3743989.563 ops/s
# Warmup Iteration  15: 4510268.613 ops/s
# Warmup Iteration  16: 4641672.344 ops/s
# Warmup Iteration  17: 4496784.470 ops/s
# Warmup Iteration  18: 4418546.062 ops/s
# Warmup Iteration  19: 4490275.508 ops/s
# Warmup Iteration  20: 4496207.747 ops/s
# Warmup Iteration  21: 4530914.370 ops/s
# Warmup Iteration  22: 4479914.675 ops/s
# Warmup Iteration  23: 4602699.608 ops/s
# Warmup Iteration  24: 4341427.612 ops/s
# Warmup Iteration  25: 4391580.730 ops/s
# Warmup Iteration  26: 4634706.681 ops/s
# Warmup Iteration  27: 4287848.250 ops/s
# Warmup Iteration  28: 4710611.351 ops/s
# Warmup Iteration  29: 4367146.032 ops/s
# Warmup Iteration  30: 4526321.440 ops/s
Iteration   1: 4399012.799 ops/s
Iteration   2: 4490568.004 ops/s
Iteration   3: 4577853.998 ops/s
Iteration   4: 4471310.575 ops/s
Iteration   5: 4506862.038 ops/s
Iteration   6: 4290931.058 ops/s
Iteration   7: 4644192.067 ops/s
Iteration   8: 4595878.408 ops/s
Iteration   9: 4445578.080 ops/s
Iteration  10: 4633752.633 ops/s
Iteration  11: 4411488.997 ops/s
Iteration  12: 4589241.523 ops/s
Iteration  13: 4435976.368 ops/s
Iteration  14: 4373310.211 ops/s
Iteration  15: 4507775.847 ops/s
Iteration  16: 4398867.372 ops/s
Iteration  17: 4493990.062 ops/s
Iteration  18: 4360060.447 ops/s
Iteration  19: 4372594.934 ops/s
Iteration  20: 4641654.506 ops/s
Iteration  21: 4345563.087 ops/s
Iteration  22: 4532219.180 ops/s
Iteration  23: 4481488.116 ops/s
Iteration  24: 4526614.482 ops/s
Iteration  25: 4410889.414 ops/s
Iteration  26: 4586374.279 ops/s
Iteration  27: 4476662.453 ops/s
Iteration  28: 4406351.201 ops/s
Iteration  29: 4549334.914 ops/s
Iteration  30: 4437988.144 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableFromActionTest._Benchmark.benchmark_fromActionTwice":
  4479812.840 ±(99.9%) 63093.937 ops/s [Average]
  (min, avg, max) = (4290931.058, 4479812.840, 4644192.067), stdev = 94436.042
  CI (99.9%): [4416718.903, 4542906.777] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
CompletableFromActionTest._Benchmark.benchmark_fromActionTwice  thrpt   30  4479812.840 ± 63093.937  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableFromRunnableTest._Benchmark.benchmark_fromRunnableTwice$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableFromRunnableTest._Benchmark.benchmark_fromRunnableTwice

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 877664.235 ops/s
# Warmup Iteration   2: 2436205.164 ops/s
# Warmup Iteration   3: 3945495.816 ops/s
# Warmup Iteration   4: 5004219.748 ops/s
# Warmup Iteration   5: 4733396.936 ops/s
# Warmup Iteration   6: 4894485.515 ops/s
# Warmup Iteration   7: 4744107.603 ops/s
# Warmup Iteration   8: 4791342.572 ops/s
# Warmup Iteration   9: 4835492.800 ops/s
# Warmup Iteration  10: 4832972.407 ops/s
# Warmup Iteration  11: 4781837.531 ops/s
# Warmup Iteration  12: 4668276.434 ops/s
# Warmup Iteration  13: 5008903.227 ops/s
# Warmup Iteration  14: 4629058.330 ops/s
# Warmup Iteration  15: 4970719.626 ops/s
# Warmup Iteration  16: 4775811.639 ops/s
# Warmup Iteration  17: 4944356.152 ops/s
# Warmup Iteration  18: 4968748.653 ops/s
# Warmup Iteration  19: 4764662.047 ops/s
# Warmup Iteration  20: 4979479.227 ops/s
# Warmup Iteration  21: 4757125.169 ops/s
# Warmup Iteration  22: 4830937.409 ops/s
# Warmup Iteration  23: 5009724.410 ops/s
# Warmup Iteration  24: 4768038.883 ops/s
# Warmup Iteration  25: 4875049.018 ops/s
# Warmup Iteration  26: 4955166.625 ops/s
# Warmup Iteration  27: 4902513.914 ops/s
# Warmup Iteration  28: 4760183.947 ops/s
# Warmup Iteration  29: 4931470.249 ops/s
# Warmup Iteration  30: 4888447.220 ops/s
Iteration   1: 5049833.651 ops/s
Iteration   2: 5040284.545 ops/s
Iteration   3: 4698213.994 ops/s
Iteration   4: 4915082.594 ops/s
Iteration   5: 4751394.996 ops/s
Iteration   6: 4887548.478 ops/s
Iteration   7: 5049314.955 ops/s
Iteration   8: 4796956.025 ops/s
Iteration   9: 4974351.103 ops/s
Iteration  10: 4825254.518 ops/s
Iteration  11: 5046154.794 ops/s
Iteration  12: 4752697.983 ops/s
Iteration  13: 4823314.109 ops/s
Iteration  14: 4872056.993 ops/s
Iteration  15: 4786340.617 ops/s
Iteration  16: 4781560.631 ops/s
Iteration  17: 4923050.870 ops/s
Iteration  18: 4766912.486 ops/s
Iteration  19: 5073346.643 ops/s
Iteration  20: 4858044.160 ops/s
Iteration  21: 5014571.506 ops/s
Iteration  22: 4930252.125 ops/s
Iteration  23: 4679960.520 ops/s
Iteration  24: 5074881.405 ops/s
Iteration  25: 4746576.320 ops/s
Iteration  26: 5100553.861 ops/s
Iteration  27: 4777703.963 ops/s
Iteration  28: 4848560.406 ops/s
Iteration  29: 4920095.584 ops/s
Iteration  30: 4931435.292 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableFromRunnableTest._Benchmark.benchmark_fromRunnableTwice":
  4889876.838 ±(99.9%) 83113.183 ops/s [Average]
  (min, avg, max) = (4679960.520, 4889876.838, 5100553.861), stdev = 124399.909
  CI (99.9%): [4806763.655, 4972990.020] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
CompletableFromRunnableTest._Benchmark.benchmark_fromRunnableTwice  thrpt   30  4889876.838 ± 83113.183  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableAndThenCompletableTest._Benchmark.benchmark_andThenFirstCancels$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableAndThenCompletableTest._Benchmark.benchmark_andThenFirstCancels

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1666783.096 ops/s
# Warmup Iteration   2: 4222997.551 ops/s
# Warmup Iteration   3: 5067591.455 ops/s
# Warmup Iteration   4: 5757586.377 ops/s
# Warmup Iteration   5: 5678446.132 ops/s
# Warmup Iteration   6: 5693359.189 ops/s
# Warmup Iteration   7: 5602180.209 ops/s
# Warmup Iteration   8: 5155285.728 ops/s
# Warmup Iteration   9: 5112217.321 ops/s
# Warmup Iteration  10: 5666440.583 ops/s
# Warmup Iteration  11: 5655005.464 ops/s
# Warmup Iteration  12: 5581942.336 ops/s
# Warmup Iteration  13: 5512870.671 ops/s
# Warmup Iteration  14: 5891796.978 ops/s
# Warmup Iteration  15: 5459828.284 ops/s
# Warmup Iteration  16: 6052005.477 ops/s
# Warmup Iteration  17: 5479121.665 ops/s
# Warmup Iteration  18: 5497862.650 ops/s
# Warmup Iteration  19: 5689898.432 ops/s
# Warmup Iteration  20: 5662413.860 ops/s
# Warmup Iteration  21: 5646351.049 ops/s
# Warmup Iteration  22: 5633599.057 ops/s
# Warmup Iteration  23: 5840829.036 ops/s
# Warmup Iteration  24: 5761473.902 ops/s
# Warmup Iteration  25: 5378966.309 ops/s
# Warmup Iteration  26: 5805721.765 ops/s
# Warmup Iteration  27: 5514111.420 ops/s
# Warmup Iteration  28: 5650797.855 ops/s
# Warmup Iteration  29: 5798191.425 ops/s
# Warmup Iteration  30: 5703356.191 ops/s
Iteration   1: 5801869.709 ops/s
Iteration   2: 5553831.893 ops/s
Iteration   3: 5756948.813 ops/s
Iteration   4: 5860131.992 ops/s
Iteration   5: 5716117.033 ops/s
Iteration   6: 5512285.922 ops/s
Iteration   7: 5654279.895 ops/s
Iteration   8: 5668503.039 ops/s
Iteration   9: 5420847.594 ops/s
Iteration  10: 5893201.974 ops/s
Iteration  11: 5751984.266 ops/s
Iteration  12: 5515617.481 ops/s
Iteration  13: 5832409.909 ops/s
Iteration  14: 5623429.251 ops/s
Iteration  15: 5595651.526 ops/s
Iteration  16: 5598695.533 ops/s
Iteration  17: 5731893.599 ops/s
Iteration  18: 5665062.025 ops/s
Iteration  19: 5726779.410 ops/s
Iteration  20: 5546648.419 ops/s
Iteration  21: 5736546.466 ops/s
Iteration  22: 5764582.911 ops/s
Iteration  23: 5619436.929 ops/s
Iteration  24: 5864879.769 ops/s
Iteration  25: 5561030.927 ops/s
Iteration  26: 5898768.918 ops/s
Iteration  27: 5816784.325 ops/s
Iteration  28: 5494128.704 ops/s
Iteration  29: 5667085.568 ops/s
Iteration  30: 5649039.965 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableAndThenCompletableTest._Benchmark.benchmark_andThenFirstCancels":
  5683282.459 ±(99.9%) 85190.497 ops/s [Average]
  (min, avg, max) = (5420847.594, 5683282.459, 5898768.918), stdev = 127509.136
  CI (99.9%): [5598091.962, 5768472.956] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score       Error  Units
CompletableAndThenCompletableTest._Benchmark.benchmark_andThenFirstCancels  thrpt   30  5683282.459 ± 85190.497  ops/s
----------------------------------------
