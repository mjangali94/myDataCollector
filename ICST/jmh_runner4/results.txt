=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnTest._Benchmark.benchmark_onSubscribeCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnTest._Benchmark.benchmark_onSubscribeCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 150804.203 ops/s
# Warmup Iteration   2: 205043.333 ops/s
# Warmup Iteration   3: 203319.375 ops/s
# Warmup Iteration   4: 227735.277 ops/s
# Warmup Iteration   5: 229424.767 ops/s
# Warmup Iteration   6: 230985.591 ops/s
# Warmup Iteration   7: 230806.923 ops/s
# Warmup Iteration   8: 229692.031 ops/s
# Warmup Iteration   9: 230127.579 ops/s
# Warmup Iteration  10: 229118.115 ops/s
# Warmup Iteration  11: 229604.425 ops/s
# Warmup Iteration  12: 229537.145 ops/s
# Warmup Iteration  13: 228768.689 ops/s
# Warmup Iteration  14: 229278.371 ops/s
# Warmup Iteration  15: 227811.947 ops/s
# Warmup Iteration  16: 227826.680 ops/s
# Warmup Iteration  17: 238382.410 ops/s
# Warmup Iteration  18: 237216.274 ops/s
# Warmup Iteration  19: 236148.900 ops/s
# Warmup Iteration  20: 235448.854 ops/s
# Warmup Iteration  21: 238253.282 ops/s
# Warmup Iteration  22: 238423.927 ops/s
# Warmup Iteration  23: 238620.895 ops/s
# Warmup Iteration  24: 235600.831 ops/s
# Warmup Iteration  25: 238206.157 ops/s
# Warmup Iteration  26: 237873.379 ops/s
# Warmup Iteration  27: 236471.814 ops/s
# Warmup Iteration  28: 237777.098 ops/s
# Warmup Iteration  29: 236965.471 ops/s
# Warmup Iteration  30: 237822.836 ops/s
Iteration   1: 236577.890 ops/s
Iteration   2: 236370.879 ops/s
Iteration   3: 236935.342 ops/s
Iteration   4: 236922.706 ops/s
Iteration   5: 236695.975 ops/s
Iteration   6: 236583.373 ops/s
Iteration   7: 238072.180 ops/s
Iteration   8: 237771.088 ops/s
Iteration   9: 237597.620 ops/s
Iteration  10: 237589.605 ops/s
Iteration  11: 236481.750 ops/s
Iteration  12: 235057.977 ops/s
Iteration  13: 236663.205 ops/s
Iteration  14: 235964.555 ops/s
Iteration  15: 236997.487 ops/s
Iteration  16: 235785.811 ops/s
Iteration  17: 235838.192 ops/s
Iteration  18: 236186.227 ops/s
Iteration  19: 235788.923 ops/s
Iteration  20: 235838.237 ops/s
Iteration  21: 237271.160 ops/s
Iteration  22: 237493.165 ops/s
Iteration  23: 236312.673 ops/s
Iteration  24: 237280.007 ops/s
Iteration  25: 237231.159 ops/s
Iteration  26: 236944.141 ops/s
Iteration  27: 235912.009 ops/s
Iteration  28: 236085.622 ops/s
Iteration  29: 235546.594 ops/s
Iteration  30: 237333.156 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnTest._Benchmark.benchmark_onSubscribeCrash":
  236637.624 ±(99.9%) 497.117 ops/s [Average]
  (min, avg, max) = (235057.977, 236637.624, 238072.180), stdev = 744.061
  CI (99.9%): [236140.507, 237134.740] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score     Error  Units
CompletableDoOnTest._Benchmark.benchmark_onSubscribeCrash  thrpt   30  236637.624 ± 497.117  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableFromStreamTest._Benchmark.benchmark_noReuse$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableFromStreamTest._Benchmark.benchmark_noReuse

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 497325.396 ops/s
# Warmup Iteration   2: 641725.951 ops/s
# Warmup Iteration   3: 659970.897 ops/s
# Warmup Iteration   4: 707519.258 ops/s
# Warmup Iteration   5: 733080.963 ops/s
# Warmup Iteration   6: 730746.334 ops/s
# Warmup Iteration   7: 730798.186 ops/s
# Warmup Iteration   8: 731160.789 ops/s
# Warmup Iteration   9: 732209.608 ops/s
# Warmup Iteration  10: 733105.462 ops/s
# Warmup Iteration  11: 731273.806 ops/s
# Warmup Iteration  12: 731051.065 ops/s
# Warmup Iteration  13: 731581.046 ops/s
# Warmup Iteration  14: 728902.609 ops/s
# Warmup Iteration  15: 728320.058 ops/s
# Warmup Iteration  16: 725224.194 ops/s
# Warmup Iteration  17: 759331.298 ops/s
# Warmup Iteration  18: 756420.965 ops/s
# Warmup Iteration  19: 756108.034 ops/s
# Warmup Iteration  20: 755536.925 ops/s
# Warmup Iteration  21: 758500.944 ops/s
# Warmup Iteration  22: 757756.489 ops/s
# Warmup Iteration  23: 752726.421 ops/s
# Warmup Iteration  24: 758965.506 ops/s
# Warmup Iteration  25: 758107.070 ops/s
# Warmup Iteration  26: 754447.738 ops/s
# Warmup Iteration  27: 755435.788 ops/s
# Warmup Iteration  28: 758327.906 ops/s
# Warmup Iteration  29: 757071.101 ops/s
# Warmup Iteration  30: 757290.667 ops/s
Iteration   1: 756943.297 ops/s
Iteration   2: 756384.288 ops/s
Iteration   3: 756590.167 ops/s
Iteration   4: 759601.870 ops/s
Iteration   5: 755979.603 ops/s
Iteration   6: 757510.066 ops/s
Iteration   7: 755757.333 ops/s
Iteration   8: 758264.239 ops/s
Iteration   9: 757100.021 ops/s
Iteration  10: 757284.291 ops/s
Iteration  11: 754204.121 ops/s
Iteration  12: 760768.849 ops/s
Iteration  13: 753333.883 ops/s
Iteration  14: 755242.766 ops/s
Iteration  15: 761135.154 ops/s
Iteration  16: 757457.532 ops/s
Iteration  17: 757124.890 ops/s
Iteration  18: 756792.495 ops/s
Iteration  19: 756767.542 ops/s
Iteration  20: 754613.225 ops/s
Iteration  21: 757507.703 ops/s
Iteration  22: 756987.875 ops/s
Iteration  23: 752829.137 ops/s
Iteration  24: 754738.972 ops/s
Iteration  25: 753322.866 ops/s
Iteration  26: 756322.659 ops/s
Iteration  27: 759463.828 ops/s
Iteration  28: 754572.138 ops/s
Iteration  29: 755512.471 ops/s
Iteration  30: 753714.776 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableFromStreamTest._Benchmark.benchmark_noReuse":
  756460.935 ±(99.9%) 1395.510 ops/s [Average]
  (min, avg, max) = (752829.137, 756460.935, 761135.154), stdev = 2088.734
  CI (99.9%): [755065.425, 757856.445] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score      Error  Units
ObservableFromStreamTest._Benchmark.benchmark_noReuse  thrpt   30  756460.935 ± 1395.510  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeTest._Benchmark.benchmark_scalar$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeTest._Benchmark.benchmark_scalar

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1741830.378 ops/s
# Warmup Iteration   2: 2598099.991 ops/s
# Warmup Iteration   3: 3147608.355 ops/s
# Warmup Iteration   4: 3197170.063 ops/s
# Warmup Iteration   5: 3231579.157 ops/s
# Warmup Iteration   6: 3219545.302 ops/s
# Warmup Iteration   7: 3232200.775 ops/s
# Warmup Iteration   8: 3234113.957 ops/s
# Warmup Iteration   9: 3205685.958 ops/s
# Warmup Iteration  10: 3207651.562 ops/s
# Warmup Iteration  11: 3207465.419 ops/s
# Warmup Iteration  12: 3237661.441 ops/s
# Warmup Iteration  13: 3240938.289 ops/s
# Warmup Iteration  14: 3242729.312 ops/s
# Warmup Iteration  15: 3222486.878 ops/s
# Warmup Iteration  16: 3233126.452 ops/s
# Warmup Iteration  17: 3254140.794 ops/s
# Warmup Iteration  18: 3222814.448 ops/s
# Warmup Iteration  19: 3266664.806 ops/s
# Warmup Iteration  20: 3262398.545 ops/s
# Warmup Iteration  21: 3239952.958 ops/s
# Warmup Iteration  22: 3247562.580 ops/s
# Warmup Iteration  23: 3249037.771 ops/s
# Warmup Iteration  24: 3230423.418 ops/s
# Warmup Iteration  25: 3257412.148 ops/s
# Warmup Iteration  26: 3228489.853 ops/s
# Warmup Iteration  27: 3217128.448 ops/s
# Warmup Iteration  28: 3291532.848 ops/s
# Warmup Iteration  29: 3261545.444 ops/s
# Warmup Iteration  30: 3211581.513 ops/s
Iteration   1: 3207144.236 ops/s
Iteration   2: 3259412.217 ops/s
Iteration   3: 3243522.652 ops/s
Iteration   4: 3291720.069 ops/s
Iteration   5: 3235018.579 ops/s
Iteration   6: 3238969.348 ops/s
Iteration   7: 3249143.758 ops/s
Iteration   8: 3232442.513 ops/s
Iteration   9: 3254367.114 ops/s
Iteration  10: 3199366.352 ops/s
Iteration  11: 3252986.079 ops/s
Iteration  12: 3260802.857 ops/s
Iteration  13: 3217343.082 ops/s
Iteration  14: 3237895.846 ops/s
Iteration  15: 3220337.160 ops/s
Iteration  16: 3241753.087 ops/s
Iteration  17: 3232138.503 ops/s
Iteration  18: 3244476.467 ops/s
Iteration  19: 3260483.580 ops/s
Iteration  20: 3230572.903 ops/s
Iteration  21: 3232761.861 ops/s
Iteration  22: 3289043.834 ops/s
Iteration  23: 3231037.097 ops/s
Iteration  24: 3278625.986 ops/s
Iteration  25: 3260312.164 ops/s
Iteration  26: 3222659.759 ops/s
Iteration  27: 3251824.035 ops/s
Iteration  28: 3252186.811 ops/s
Iteration  29: 3267944.927 ops/s
Iteration  30: 3252217.013 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeTest._Benchmark.benchmark_scalar":
  3244950.330 ±(99.9%) 14411.660 ops/s [Average]
  (min, avg, max) = (3199366.352, 3244950.330, 3291720.069), stdev = 21570.696
  CI (99.9%): [3230538.670, 3259361.990] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                    Mode  Cnt        Score       Error  Units
MaybeMergeTest._Benchmark.benchmark_scalar  thrpt   30  3244950.330 ± 14411.660  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeTest._Benchmark.benchmark_delayErrorWithMaxConcurrency$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeTest._Benchmark.benchmark_delayErrorWithMaxConcurrency

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1064933.640 ops/s
# Warmup Iteration   2: 1477998.073 ops/s
# Warmup Iteration   3: 1546246.188 ops/s
# Warmup Iteration   4: 1709766.238 ops/s
# Warmup Iteration   5: 1814586.404 ops/s
# Warmup Iteration   6: 1809639.369 ops/s
# Warmup Iteration   7: 1798320.075 ops/s
# Warmup Iteration   8: 1787803.030 ops/s
# Warmup Iteration   9: 1785818.823 ops/s
# Warmup Iteration  10: 1775338.140 ops/s
# Warmup Iteration  11: 1783210.896 ops/s
# Warmup Iteration  12: 1818773.320 ops/s
# Warmup Iteration  13: 1794380.812 ops/s
# Warmup Iteration  14: 1768023.996 ops/s
# Warmup Iteration  15: 1773718.508 ops/s
# Warmup Iteration  16: 1797884.609 ops/s
# Warmup Iteration  17: 1784967.658 ops/s
# Warmup Iteration  18: 1769335.491 ops/s
# Warmup Iteration  19: 1781268.517 ops/s
# Warmup Iteration  20: 1791356.032 ops/s
# Warmup Iteration  21: 1788698.305 ops/s
# Warmup Iteration  22: 1789337.780 ops/s
# Warmup Iteration  23: 1802694.201 ops/s
# Warmup Iteration  24: 1807796.327 ops/s
# Warmup Iteration  25: 1786850.210 ops/s
# Warmup Iteration  26: 1796807.830 ops/s
# Warmup Iteration  27: 1786861.758 ops/s
# Warmup Iteration  28: 1804348.729 ops/s
# Warmup Iteration  29: 1792570.530 ops/s
# Warmup Iteration  30: 1783466.168 ops/s
Iteration   1: 1772263.378 ops/s
Iteration   2: 1804558.378 ops/s
Iteration   3: 1794701.182 ops/s
Iteration   4: 1804103.623 ops/s
Iteration   5: 1795645.171 ops/s
Iteration   6: 1801278.172 ops/s
Iteration   7: 1810006.879 ops/s
Iteration   8: 1781763.653 ops/s
Iteration   9: 1764991.175 ops/s
Iteration  10: 1762000.922 ops/s
Iteration  11: 1796022.102 ops/s
Iteration  12: 1779673.673 ops/s
Iteration  13: 1819125.635 ops/s
Iteration  14: 1806106.018 ops/s
Iteration  15: 1792723.913 ops/s
Iteration  16: 1782071.602 ops/s
Iteration  17: 1812357.349 ops/s
Iteration  18: 1802696.174 ops/s
Iteration  19: 1800622.846 ops/s
Iteration  20: 1785766.626 ops/s
Iteration  21: 1791203.383 ops/s
Iteration  22: 1794497.402 ops/s
Iteration  23: 1816449.143 ops/s
Iteration  24: 1811964.369 ops/s
Iteration  25: 1794531.133 ops/s
Iteration  26: 1786271.878 ops/s
Iteration  27: 1782478.153 ops/s
Iteration  28: 1781511.214 ops/s
Iteration  29: 1783433.759 ops/s
Iteration  30: 1805445.572 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeTest._Benchmark.benchmark_delayErrorWithMaxConcurrency":
  1793875.483 ±(99.9%) 9685.566 ops/s [Average]
  (min, avg, max) = (1762000.922, 1793875.483, 1819125.635), stdev = 14496.900
  CI (99.9%): [1784189.917, 1803561.048] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
MaybeMergeTest._Benchmark.benchmark_delayErrorWithMaxConcurrency  thrpt   30  1793875.483 ± 9685.566  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybeTest._Benchmark.benchmark_normal$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybeTest._Benchmark.benchmark_normal

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 538619.981 ops/s
# Warmup Iteration   2: 697827.916 ops/s
# Warmup Iteration   3: 702757.462 ops/s
# Warmup Iteration   4: 790248.559 ops/s
# Warmup Iteration   5: 841979.684 ops/s
# Warmup Iteration   6: 857818.803 ops/s
# Warmup Iteration   7: 847519.168 ops/s
# Warmup Iteration   8: 849570.193 ops/s
# Warmup Iteration   9: 846806.756 ops/s
# Warmup Iteration  10: 855954.041 ops/s
# Warmup Iteration  11: 844857.103 ops/s
# Warmup Iteration  12: 848110.828 ops/s
# Warmup Iteration  13: 845663.442 ops/s
# Warmup Iteration  14: 841063.459 ops/s
# Warmup Iteration  15: 854190.978 ops/s
# Warmup Iteration  16: 839024.373 ops/s
# Warmup Iteration  17: 834341.360 ops/s
# Warmup Iteration  18: 839031.860 ops/s
# Warmup Iteration  19: 859293.807 ops/s
# Warmup Iteration  20: 844025.438 ops/s
# Warmup Iteration  21: 834703.990 ops/s
# Warmup Iteration  22: 847361.299 ops/s
# Warmup Iteration  23: 848705.762 ops/s
# Warmup Iteration  24: 844443.877 ops/s
# Warmup Iteration  25: 841527.238 ops/s
# Warmup Iteration  26: 850388.290 ops/s
# Warmup Iteration  27: 837127.992 ops/s
# Warmup Iteration  28: 845735.259 ops/s
# Warmup Iteration  29: 836729.280 ops/s
# Warmup Iteration  30: 836374.282 ops/s
Iteration   1: 848491.383 ops/s
Iteration   2: 841701.651 ops/s
Iteration   3: 851157.540 ops/s
Iteration   4: 830707.592 ops/s
Iteration   5: 853338.535 ops/s
Iteration   6: 834733.308 ops/s
Iteration   7: 845313.663 ops/s
Iteration   8: 831175.373 ops/s
Iteration   9: 844571.329 ops/s
Iteration  10: 842042.623 ops/s
Iteration  11: 834015.183 ops/s
Iteration  12: 850448.844 ops/s
Iteration  13: 848684.827 ops/s
Iteration  14: 847019.605 ops/s
Iteration  15: 845260.653 ops/s
Iteration  16: 836815.078 ops/s
Iteration  17: 838948.520 ops/s
Iteration  18: 838412.384 ops/s
Iteration  19: 850422.702 ops/s
Iteration  20: 853265.887 ops/s
Iteration  21: 836745.446 ops/s
Iteration  22: 850406.752 ops/s
Iteration  23: 850062.574 ops/s
Iteration  24: 853871.377 ops/s
Iteration  25: 845494.297 ops/s
Iteration  26: 845666.127 ops/s
Iteration  27: 842966.102 ops/s
Iteration  28: 848356.058 ops/s
Iteration  29: 842467.364 ops/s
Iteration  30: 845214.633 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybeTest._Benchmark.benchmark_normal":
  844259.247 ±(99.9%) 4405.549 ops/s [Average]
  (min, avg, max) = (830707.592, 844259.247, 853871.377), stdev = 6594.019
  CI (99.9%): [839853.698, 848664.796] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score      Error  Units
FlowableFlatMapMaybeTest._Benchmark.benchmark_normal  thrpt   30  844259.247 ± 4405.549  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybeTest._Benchmark.benchmark_normalDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybeTest._Benchmark.benchmark_normalDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 535628.678 ops/s
# Warmup Iteration   2: 711997.869 ops/s
# Warmup Iteration   3: 704796.308 ops/s
# Warmup Iteration   4: 794311.337 ops/s
# Warmup Iteration   5: 848637.210 ops/s
# Warmup Iteration   6: 867236.476 ops/s
# Warmup Iteration   7: 862851.556 ops/s
# Warmup Iteration   8: 852505.523 ops/s
# Warmup Iteration   9: 850197.847 ops/s
# Warmup Iteration  10: 854771.649 ops/s
# Warmup Iteration  11: 857062.577 ops/s
# Warmup Iteration  12: 852422.427 ops/s
# Warmup Iteration  13: 863413.655 ops/s
# Warmup Iteration  14: 867813.123 ops/s
# Warmup Iteration  15: 854429.931 ops/s
# Warmup Iteration  16: 863293.231 ops/s
# Warmup Iteration  17: 867320.756 ops/s
# Warmup Iteration  18: 853333.007 ops/s
# Warmup Iteration  19: 855676.704 ops/s
# Warmup Iteration  20: 867997.496 ops/s
# Warmup Iteration  21: 848038.208 ops/s
# Warmup Iteration  22: 864140.803 ops/s
# Warmup Iteration  23: 846707.507 ops/s
# Warmup Iteration  24: 854631.064 ops/s
# Warmup Iteration  25: 848821.981 ops/s
# Warmup Iteration  26: 848550.537 ops/s
# Warmup Iteration  27: 862729.260 ops/s
# Warmup Iteration  28: 856248.562 ops/s
# Warmup Iteration  29: 850927.704 ops/s
# Warmup Iteration  30: 845836.792 ops/s
Iteration   1: 856615.083 ops/s
Iteration   2: 855699.002 ops/s
Iteration   3: 861437.194 ops/s
Iteration   4: 850074.675 ops/s
Iteration   5: 873797.667 ops/s
Iteration   6: 860674.146 ops/s
Iteration   7: 848505.473 ops/s
Iteration   8: 856428.890 ops/s
Iteration   9: 848727.356 ops/s
Iteration  10: 856941.420 ops/s
Iteration  11: 846451.023 ops/s
Iteration  12: 850099.633 ops/s
Iteration  13: 858863.737 ops/s
Iteration  14: 850074.072 ops/s
Iteration  15: 839072.942 ops/s
Iteration  16: 848949.924 ops/s
Iteration  17: 864418.179 ops/s
Iteration  18: 851255.496 ops/s
Iteration  19: 850036.853 ops/s
Iteration  20: 850103.870 ops/s
Iteration  21: 857060.848 ops/s
Iteration  22: 860863.059 ops/s
Iteration  23: 864647.739 ops/s
Iteration  24: 850166.872 ops/s
Iteration  25: 851860.579 ops/s
Iteration  26: 857321.232 ops/s
Iteration  27: 859689.119 ops/s
Iteration  28: 843958.116 ops/s
Iteration  29: 848409.453 ops/s
Iteration  30: 845288.978 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybeTest._Benchmark.benchmark_normalDelayError":
  853916.421 ±(99.9%) 4862.832 ops/s [Average]
  (min, avg, max) = (839072.942, 853916.421, 873797.667), stdev = 7278.458
  CI (99.9%): [849053.589, 858779.253] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
FlowableFlatMapMaybeTest._Benchmark.benchmark_normalDelayError  thrpt   30  853916.421 ± 4862.832  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybeTest._Benchmark.benchmark_normalEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybeTest._Benchmark.benchmark_normalEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 578788.344 ops/s
# Warmup Iteration   2: 733057.854 ops/s
# Warmup Iteration   3: 721913.124 ops/s
# Warmup Iteration   4: 736714.629 ops/s
# Warmup Iteration   5: 900617.739 ops/s
# Warmup Iteration   6: 911399.625 ops/s
# Warmup Iteration   7: 897131.709 ops/s
# Warmup Iteration   8: 880008.594 ops/s
# Warmup Iteration   9: 887964.504 ops/s
# Warmup Iteration  10: 893829.908 ops/s
# Warmup Iteration  11: 883405.634 ops/s
# Warmup Iteration  12: 892905.448 ops/s
# Warmup Iteration  13: 903674.879 ops/s
# Warmup Iteration  14: 886664.305 ops/s
# Warmup Iteration  15: 894782.240 ops/s
# Warmup Iteration  16: 891622.374 ops/s
# Warmup Iteration  17: 883808.092 ops/s
# Warmup Iteration  18: 900056.398 ops/s
# Warmup Iteration  19: 885722.611 ops/s
# Warmup Iteration  20: 884468.258 ops/s
# Warmup Iteration  21: 887895.460 ops/s
# Warmup Iteration  22: 887497.102 ops/s
# Warmup Iteration  23: 885898.914 ops/s
# Warmup Iteration  24: 879379.783 ops/s
# Warmup Iteration  25: 884373.442 ops/s
# Warmup Iteration  26: 882042.473 ops/s
# Warmup Iteration  27: 893161.962 ops/s
# Warmup Iteration  28: 878319.694 ops/s
# Warmup Iteration  29: 883492.118 ops/s
# Warmup Iteration  30: 883991.037 ops/s
Iteration   1: 904344.607 ops/s
Iteration   2: 889981.065 ops/s
Iteration   3: 878283.966 ops/s
Iteration   4: 879872.566 ops/s
Iteration   5: 875754.849 ops/s
Iteration   6: 881201.425 ops/s
Iteration   7: 882286.363 ops/s
Iteration   8: 888135.287 ops/s
Iteration   9: 885773.990 ops/s
Iteration  10: 887446.150 ops/s
Iteration  11: 896122.556 ops/s
Iteration  12: 879978.300 ops/s
Iteration  13: 895953.103 ops/s
Iteration  14: 892946.152 ops/s
Iteration  15: 888535.609 ops/s
Iteration  16: 883020.438 ops/s
Iteration  17: 870962.410 ops/s
Iteration  18: 880769.652 ops/s
Iteration  19: 887998.584 ops/s
Iteration  20: 884365.534 ops/s
Iteration  21: 886056.181 ops/s
Iteration  22: 885946.595 ops/s
Iteration  23: 883011.648 ops/s
Iteration  24: 888845.730 ops/s
Iteration  25: 881153.325 ops/s
Iteration  26: 881500.042 ops/s
Iteration  27: 876645.805 ops/s
Iteration  28: 880182.222 ops/s
Iteration  29: 891287.413 ops/s
Iteration  30: 880961.751 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybeTest._Benchmark.benchmark_normalEmpty":
  884977.444 ±(99.9%) 4581.244 ops/s [Average]
  (min, avg, max) = (870962.410, 884977.444, 904344.607), stdev = 6856.991
  CI (99.9%): [880396.200, 889558.688] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
FlowableFlatMapMaybeTest._Benchmark.benchmark_normalEmpty  thrpt   30  884977.444 ± 4581.244  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybeTest._Benchmark.benchmark_successShortcut$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybeTest._Benchmark.benchmark_successShortcut

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1563002.833 ops/s
# Warmup Iteration   2: 2252754.197 ops/s
# Warmup Iteration   3: 2681685.070 ops/s
# Warmup Iteration   4: 2726246.740 ops/s
# Warmup Iteration   5: 2695926.572 ops/s
# Warmup Iteration   6: 2734675.236 ops/s
# Warmup Iteration   7: 2724306.999 ops/s
# Warmup Iteration   8: 2758020.770 ops/s
# Warmup Iteration   9: 2746917.196 ops/s
# Warmup Iteration  10: 2728523.014 ops/s
# Warmup Iteration  11: 2684436.810 ops/s
# Warmup Iteration  12: 2725951.552 ops/s
# Warmup Iteration  13: 2740202.591 ops/s
# Warmup Iteration  14: 2737532.593 ops/s
# Warmup Iteration  15: 2723529.881 ops/s
# Warmup Iteration  16: 2716304.198 ops/s
# Warmup Iteration  17: 2723382.813 ops/s
# Warmup Iteration  18: 2740219.332 ops/s
# Warmup Iteration  19: 2770200.831 ops/s
# Warmup Iteration  20: 2737658.245 ops/s
# Warmup Iteration  21: 2727226.433 ops/s
# Warmup Iteration  22: 2764887.222 ops/s
# Warmup Iteration  23: 2749701.381 ops/s
# Warmup Iteration  24: 2720639.390 ops/s
# Warmup Iteration  25: 2713777.612 ops/s
# Warmup Iteration  26: 2720143.896 ops/s
# Warmup Iteration  27: 2747699.574 ops/s
# Warmup Iteration  28: 2733494.451 ops/s
# Warmup Iteration  29: 2726615.406 ops/s
# Warmup Iteration  30: 2711770.692 ops/s
Iteration   1: 2686992.819 ops/s
Iteration   2: 2747997.438 ops/s
Iteration   3: 2721880.159 ops/s
Iteration   4: 2714915.505 ops/s
Iteration   5: 2715811.379 ops/s
Iteration   6: 2718055.288 ops/s
Iteration   7: 2715006.163 ops/s
Iteration   8: 2757815.618 ops/s
Iteration   9: 2707569.391 ops/s
Iteration  10: 2763238.855 ops/s
Iteration  11: 2744263.146 ops/s
Iteration  12: 2737888.099 ops/s
Iteration  13: 2728989.741 ops/s
Iteration  14: 2703417.194 ops/s
Iteration  15: 2727965.814 ops/s
Iteration  16: 2707223.607 ops/s
Iteration  17: 2716607.711 ops/s
Iteration  18: 2722379.527 ops/s
Iteration  19: 2700629.758 ops/s
Iteration  20: 2728224.791 ops/s
Iteration  21: 2699660.802 ops/s
Iteration  22: 2701335.549 ops/s
Iteration  23: 2693544.877 ops/s
Iteration  24: 2743569.306 ops/s
Iteration  25: 2740766.839 ops/s
Iteration  26: 2727808.141 ops/s
Iteration  27: 2717066.609 ops/s
Iteration  28: 2718668.705 ops/s
Iteration  29: 2705868.689 ops/s
Iteration  30: 2716974.873 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybeTest._Benchmark.benchmark_successShortcut":
  2721071.213 ±(99.9%) 12436.769 ops/s [Average]
  (min, avg, max) = (2686992.819, 2721071.213, 2763238.855), stdev = 18614.771
  CI (99.9%): [2708634.445, 2733507.982] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
FlowableFlatMapMaybeTest._Benchmark.benchmark_successShortcut  thrpt   30  2721071.213 ± 12436.769  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybeTest._Benchmark.benchmark_normalBackpressured$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybeTest._Benchmark.benchmark_normalBackpressured

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 321397.697 ops/s
# Warmup Iteration   2: 438735.232 ops/s
# Warmup Iteration   3: 445845.462 ops/s
# Warmup Iteration   4: 487283.933 ops/s
# Warmup Iteration   5: 518685.489 ops/s
# Warmup Iteration   6: 512386.729 ops/s
# Warmup Iteration   7: 512488.328 ops/s
# Warmup Iteration   8: 514438.081 ops/s
# Warmup Iteration   9: 506138.252 ops/s
# Warmup Iteration  10: 509028.364 ops/s
# Warmup Iteration  11: 510153.671 ops/s
# Warmup Iteration  12: 510510.932 ops/s
# Warmup Iteration  13: 506700.798 ops/s
# Warmup Iteration  14: 516096.297 ops/s
# Warmup Iteration  15: 504630.901 ops/s
# Warmup Iteration  16: 506890.125 ops/s
# Warmup Iteration  17: 502618.059 ops/s
# Warmup Iteration  18: 509459.102 ops/s
# Warmup Iteration  19: 505048.325 ops/s
# Warmup Iteration  20: 506495.622 ops/s
# Warmup Iteration  21: 504732.385 ops/s
# Warmup Iteration  22: 511178.147 ops/s
# Warmup Iteration  23: 511781.221 ops/s
# Warmup Iteration  24: 510587.975 ops/s
# Warmup Iteration  25: 501268.622 ops/s
# Warmup Iteration  26: 503352.036 ops/s
# Warmup Iteration  27: 506864.715 ops/s
# Warmup Iteration  28: 505728.770 ops/s
# Warmup Iteration  29: 508417.668 ops/s
# Warmup Iteration  30: 508107.006 ops/s
Iteration   1: 497102.018 ops/s
Iteration   2: 513130.696 ops/s
Iteration   3: 505448.298 ops/s
Iteration   4: 514162.851 ops/s
Iteration   5: 502762.988 ops/s
Iteration   6: 509053.311 ops/s
Iteration   7: 505385.455 ops/s
Iteration   8: 508758.197 ops/s
Iteration   9: 510370.964 ops/s
Iteration  10: 505264.856 ops/s
Iteration  11: 508434.838 ops/s
Iteration  12: 498271.855 ops/s
Iteration  13: 511517.029 ops/s
Iteration  14: 504990.485 ops/s
Iteration  15: 507195.641 ops/s
Iteration  16: 510758.240 ops/s
Iteration  17: 509638.215 ops/s
Iteration  18: 507198.174 ops/s
Iteration  19: 509009.830 ops/s
Iteration  20: 500816.749 ops/s
Iteration  21: 505790.375 ops/s
Iteration  22: 508765.382 ops/s
Iteration  23: 503088.829 ops/s
Iteration  24: 506489.862 ops/s
Iteration  25: 507968.242 ops/s
Iteration  26: 509612.929 ops/s
Iteration  27: 499588.791 ops/s
Iteration  28: 508667.324 ops/s
Iteration  29: 509438.484 ops/s
Iteration  30: 505236.136 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybeTest._Benchmark.benchmark_normalBackpressured":
  506797.235 ±(99.9%) 2749.267 ops/s [Average]
  (min, avg, max) = (497102.018, 506797.235, 514162.851), stdev = 4114.974
  CI (99.9%): [504047.967, 509546.502] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score      Error  Units
FlowableFlatMapMaybeTest._Benchmark.benchmark_normalBackpressured  thrpt   30  506797.235 ± 2749.267  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybeTest._Benchmark.benchmark_normalMaxConcurrent2Backpressured$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybeTest._Benchmark.benchmark_normalMaxConcurrent2Backpressured

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 284162.190 ops/s
# Warmup Iteration   2: 424934.555 ops/s
# Warmup Iteration   3: 427315.012 ops/s
# Warmup Iteration   4: 481169.399 ops/s
# Warmup Iteration   5: 497151.348 ops/s
# Warmup Iteration   6: 496809.394 ops/s
# Warmup Iteration   7: 491703.923 ops/s
# Warmup Iteration   8: 488783.378 ops/s
# Warmup Iteration   9: 495102.319 ops/s
# Warmup Iteration  10: 490103.132 ops/s
# Warmup Iteration  11: 490804.191 ops/s
# Warmup Iteration  12: 496113.863 ops/s
# Warmup Iteration  13: 490152.504 ops/s
# Warmup Iteration  14: 485617.811 ops/s
# Warmup Iteration  15: 494257.599 ops/s
# Warmup Iteration  16: 489857.673 ops/s
# Warmup Iteration  17: 489028.497 ops/s
# Warmup Iteration  18: 493648.583 ops/s
# Warmup Iteration  19: 490097.643 ops/s
# Warmup Iteration  20: 488799.284 ops/s
# Warmup Iteration  21: 485789.492 ops/s
# Warmup Iteration  22: 484260.735 ops/s
# Warmup Iteration  23: 496872.102 ops/s
# Warmup Iteration  24: 488769.109 ops/s
# Warmup Iteration  25: 489884.585 ops/s
# Warmup Iteration  26: 489418.331 ops/s
# Warmup Iteration  27: 484348.890 ops/s
# Warmup Iteration  28: 493933.169 ops/s
# Warmup Iteration  29: 490538.712 ops/s
# Warmup Iteration  30: 491542.488 ops/s
Iteration   1: 497585.947 ops/s
Iteration   2: 494057.584 ops/s
Iteration   3: 487031.544 ops/s
Iteration   4: 483276.181 ops/s
Iteration   5: 491023.769 ops/s
Iteration   6: 484037.223 ops/s
Iteration   7: 497084.023 ops/s
Iteration   8: 485154.777 ops/s
Iteration   9: 490827.325 ops/s
Iteration  10: 493098.727 ops/s
Iteration  11: 481845.206 ops/s
Iteration  12: 488716.420 ops/s
Iteration  13: 493529.844 ops/s
Iteration  14: 489984.610 ops/s
Iteration  15: 492769.762 ops/s
Iteration  16: 494157.460 ops/s
Iteration  17: 486310.830 ops/s
Iteration  18: 488866.208 ops/s
Iteration  19: 492460.607 ops/s
Iteration  20: 483492.822 ops/s
Iteration  21: 490989.514 ops/s
Iteration  22: 489394.043 ops/s
Iteration  23: 486759.670 ops/s
Iteration  24: 492731.208 ops/s
Iteration  25: 490277.523 ops/s
Iteration  26: 490637.929 ops/s
Iteration  27: 483336.488 ops/s
Iteration  28: 491602.518 ops/s
Iteration  29: 486939.350 ops/s
Iteration  30: 496527.239 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybeTest._Benchmark.benchmark_normalMaxConcurrent2Backpressured":
  489816.878 ±(99.9%) 2870.085 ops/s [Average]
  (min, avg, max) = (481845.206, 489816.878, 497585.947), stdev = 4295.809
  CI (99.9%): [486946.793, 492686.963] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt       Score      Error  Units
FlowableFlatMapMaybeTest._Benchmark.benchmark_normalMaxConcurrent2Backpressured  thrpt   30  489816.878 ± 2870.085  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_mergeDelayError3$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_mergeDelayError3

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 120614.634 ops/s
# Warmup Iteration   2: 183175.482 ops/s
# Warmup Iteration   3: 188619.284 ops/s
# Warmup Iteration   4: 199225.421 ops/s
# Warmup Iteration   5: 204099.196 ops/s
# Warmup Iteration   6: 203090.942 ops/s
# Warmup Iteration   7: 202260.432 ops/s
# Warmup Iteration   8: 203027.141 ops/s
# Warmup Iteration   9: 202358.452 ops/s
# Warmup Iteration  10: 202333.368 ops/s
# Warmup Iteration  11: 202425.201 ops/s
# Warmup Iteration  12: 202441.049 ops/s
# Warmup Iteration  13: 203073.026 ops/s
# Warmup Iteration  14: 202640.449 ops/s
# Warmup Iteration  15: 201239.060 ops/s
# Warmup Iteration  16: 201631.908 ops/s
# Warmup Iteration  17: 209850.216 ops/s
# Warmup Iteration  18: 208769.555 ops/s
# Warmup Iteration  19: 209514.512 ops/s
# Warmup Iteration  20: 209818.761 ops/s
# Warmup Iteration  21: 210547.810 ops/s
# Warmup Iteration  22: 208820.535 ops/s
# Warmup Iteration  23: 210149.538 ops/s
# Warmup Iteration  24: 210148.467 ops/s
# Warmup Iteration  25: 209972.198 ops/s
# Warmup Iteration  26: 208842.995 ops/s
# Warmup Iteration  27: 209701.175 ops/s
# Warmup Iteration  28: 210843.987 ops/s
# Warmup Iteration  29: 208976.612 ops/s
# Warmup Iteration  30: 208458.748 ops/s
Iteration   1: 209311.481 ops/s
Iteration   2: 209543.453 ops/s
Iteration   3: 209538.693 ops/s
Iteration   4: 209304.717 ops/s
Iteration   5: 209446.076 ops/s
Iteration   6: 208646.237 ops/s
Iteration   7: 210481.891 ops/s
Iteration   8: 209503.317 ops/s
Iteration   9: 209518.901 ops/s
Iteration  10: 209134.680 ops/s
Iteration  11: 209388.775 ops/s
Iteration  12: 208083.750 ops/s
Iteration  13: 209684.976 ops/s
Iteration  14: 208879.445 ops/s
Iteration  15: 208929.639 ops/s
Iteration  16: 209486.466 ops/s
Iteration  17: 209481.237 ops/s
Iteration  18: 209814.324 ops/s
Iteration  19: 209796.841 ops/s
Iteration  20: 208553.542 ops/s
Iteration  21: 209806.229 ops/s
Iteration  22: 210476.984 ops/s
Iteration  23: 209796.856 ops/s
Iteration  24: 209032.107 ops/s
Iteration  25: 209710.589 ops/s
Iteration  26: 209146.708 ops/s
Iteration  27: 210578.611 ops/s
Iteration  28: 208855.725 ops/s
Iteration  29: 209983.855 ops/s
Iteration  30: 210625.392 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_mergeDelayError3":
  209484.717 ±(99.9%) 399.124 ops/s [Average]
  (min, avg, max) = (208083.750, 209484.717, 210625.392), stdev = 597.391
  CI (99.9%): [209085.592, 209883.841] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt       Score     Error  Units
MaybeTest._Benchmark.benchmark_mergeDelayError3  thrpt   30  209484.717 ± 399.124  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_mergePublisherMaxConcurrent$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_mergePublisherMaxConcurrent

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 776565.027 ops/s
# Warmup Iteration   2: 1308991.201 ops/s
# Warmup Iteration   3: 1503527.769 ops/s
# Warmup Iteration   4: 1535106.214 ops/s
# Warmup Iteration   5: 1543480.067 ops/s
# Warmup Iteration   6: 1524934.623 ops/s
# Warmup Iteration   7: 1527682.517 ops/s
# Warmup Iteration   8: 1539741.004 ops/s
# Warmup Iteration   9: 1526628.198 ops/s
# Warmup Iteration  10: 1531885.675 ops/s
# Warmup Iteration  11: 1527334.112 ops/s
# Warmup Iteration  12: 1529451.710 ops/s
# Warmup Iteration  13: 1530398.948 ops/s
# Warmup Iteration  14: 1537192.160 ops/s
# Warmup Iteration  15: 1529678.624 ops/s
# Warmup Iteration  16: 1527787.935 ops/s
# Warmup Iteration  17: 1538234.380 ops/s
# Warmup Iteration  18: 1549716.027 ops/s
# Warmup Iteration  19: 1563654.781 ops/s
# Warmup Iteration  20: 1542153.931 ops/s
# Warmup Iteration  21: 1542140.191 ops/s
# Warmup Iteration  22: 1564258.388 ops/s
# Warmup Iteration  23: 1561773.675 ops/s
# Warmup Iteration  24: 1546082.221 ops/s
# Warmup Iteration  25: 1547665.906 ops/s
# Warmup Iteration  26: 1548245.179 ops/s
# Warmup Iteration  27: 1546077.241 ops/s
# Warmup Iteration  28: 1536266.907 ops/s
# Warmup Iteration  29: 1541288.086 ops/s
# Warmup Iteration  30: 1537083.783 ops/s
Iteration   1: 1528786.743 ops/s
Iteration   2: 1548845.599 ops/s
Iteration   3: 1543729.447 ops/s
Iteration   4: 1550839.746 ops/s
Iteration   5: 1537409.430 ops/s
Iteration   6: 1546793.832 ops/s
Iteration   7: 1539494.440 ops/s
Iteration   8: 1540381.995 ops/s
Iteration   9: 1548364.977 ops/s
Iteration  10: 1546110.065 ops/s
Iteration  11: 1538002.958 ops/s
Iteration  12: 1540566.868 ops/s
Iteration  13: 1536195.329 ops/s
Iteration  14: 1548295.500 ops/s
Iteration  15: 1532323.102 ops/s
Iteration  16: 1548642.635 ops/s
Iteration  17: 1542487.041 ops/s
Iteration  18: 1551848.599 ops/s
Iteration  19: 1538056.903 ops/s
Iteration  20: 1530663.911 ops/s
Iteration  21: 1530896.089 ops/s
Iteration  22: 1541150.685 ops/s
Iteration  23: 1534943.384 ops/s
Iteration  24: 1540662.195 ops/s
Iteration  25: 1535336.825 ops/s
Iteration  26: 1547312.299 ops/s
Iteration  27: 1541110.790 ops/s
Iteration  28: 1537107.674 ops/s
Iteration  29: 1544548.315 ops/s
Iteration  30: 1535295.690 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_mergePublisherMaxConcurrent":
  1540873.435 ±(99.9%) 4243.087 ops/s [Average]
  (min, avg, max) = (1528786.743, 1540873.435, 1551848.599), stdev = 6350.853
  CI (99.9%): [1536630.349, 1545116.522] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
MaybeTest._Benchmark.benchmark_mergePublisherMaxConcurrent  thrpt   30  1540873.435 ± 4243.087  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybeTest._Benchmark.benchmark_badSource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybeTest._Benchmark.benchmark_badSource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 141158.379 ops/s
# Warmup Iteration   2: 195912.374 ops/s
# Warmup Iteration   3: 197490.023 ops/s
# Warmup Iteration   4: 219399.416 ops/s
# Warmup Iteration   5: 222727.847 ops/s
# Warmup Iteration   6: 223190.880 ops/s
# Warmup Iteration   7: 223796.437 ops/s
# Warmup Iteration   8: 223046.905 ops/s
# Warmup Iteration   9: 222743.466 ops/s
# Warmup Iteration  10: 221772.869 ops/s
# Warmup Iteration  11: 222317.943 ops/s
# Warmup Iteration  12: 221931.859 ops/s
# Warmup Iteration  13: 221565.333 ops/s
# Warmup Iteration  14: 221011.927 ops/s
# Warmup Iteration  15: 221555.188 ops/s
# Warmup Iteration  16: 221930.595 ops/s
# Warmup Iteration  17: 228610.386 ops/s
# Warmup Iteration  18: 229055.185 ops/s
# Warmup Iteration  19: 228943.874 ops/s
# Warmup Iteration  20: 228473.292 ops/s
# Warmup Iteration  21: 229969.770 ops/s
# Warmup Iteration  22: 228306.293 ops/s
# Warmup Iteration  23: 229617.818 ops/s
# Warmup Iteration  24: 226915.075 ops/s
# Warmup Iteration  25: 229040.773 ops/s
# Warmup Iteration  26: 227771.092 ops/s
# Warmup Iteration  27: 230029.670 ops/s
# Warmup Iteration  28: 227501.180 ops/s
# Warmup Iteration  29: 228161.161 ops/s
# Warmup Iteration  30: 228330.701 ops/s
Iteration   1: 229381.602 ops/s
Iteration   2: 229375.607 ops/s
Iteration   3: 229763.607 ops/s
Iteration   4: 227171.948 ops/s
Iteration   5: 227955.112 ops/s
Iteration   6: 229740.770 ops/s
Iteration   7: 229812.596 ops/s
Iteration   8: 229160.116 ops/s
Iteration   9: 229056.182 ops/s
Iteration  10: 228754.847 ops/s
Iteration  11: 229622.728 ops/s
Iteration  12: 228102.354 ops/s
Iteration  13: 228598.847 ops/s
Iteration  14: 227378.607 ops/s
Iteration  15: 229833.069 ops/s
Iteration  16: 229149.247 ops/s
Iteration  17: 229005.604 ops/s
Iteration  18: 228846.093 ops/s
Iteration  19: 229938.786 ops/s
Iteration  20: 228769.374 ops/s
Iteration  21: 228616.969 ops/s
Iteration  22: 228589.968 ops/s
Iteration  23: 230649.113 ops/s
Iteration  24: 228192.216 ops/s
Iteration  25: 227778.955 ops/s
Iteration  26: 228109.929 ops/s
Iteration  27: 229466.532 ops/s
Iteration  28: 229610.487 ops/s
Iteration  29: 228799.149 ops/s
Iteration  30: 227891.484 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybeTest._Benchmark.benchmark_badSource":
  228904.063 ±(99.9%) 552.233 ops/s [Average]
  (min, avg, max) = (227171.948, 228904.063, 230649.113), stdev = 826.557
  CI (99.9%): [228351.830, 229456.297] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score     Error  Units
FlowableFlatMapMaybeTest._Benchmark.benchmark_badSource  thrpt   30  228904.063 ± 552.233  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_ambWithOrder$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_ambWithOrder

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 630272.282 ops/s
# Warmup Iteration   2: 767587.434 ops/s
# Warmup Iteration   3: 868810.950 ops/s
# Warmup Iteration   4: 820895.407 ops/s
# Warmup Iteration   5: 904404.135 ops/s
# Warmup Iteration   6: 904551.455 ops/s
# Warmup Iteration   7: 901444.054 ops/s
# Warmup Iteration   8: 898590.209 ops/s
# Warmup Iteration   9: 897695.363 ops/s
# Warmup Iteration  10: 902841.240 ops/s
# Warmup Iteration  11: 901379.972 ops/s
# Warmup Iteration  12: 902292.667 ops/s
# Warmup Iteration  13: 896118.205 ops/s
# Warmup Iteration  14: 896777.430 ops/s
# Warmup Iteration  15: 897858.467 ops/s
# Warmup Iteration  16: 896793.530 ops/s
# Warmup Iteration  17: 942827.197 ops/s
# Warmup Iteration  18: 946934.860 ops/s
# Warmup Iteration  19: 944309.504 ops/s
# Warmup Iteration  20: 946101.584 ops/s
# Warmup Iteration  21: 942574.904 ops/s
# Warmup Iteration  22: 946755.711 ops/s
# Warmup Iteration  23: 943747.239 ops/s
# Warmup Iteration  24: 942398.110 ops/s
# Warmup Iteration  25: 945650.235 ops/s
# Warmup Iteration  26: 944763.164 ops/s
# Warmup Iteration  27: 946203.186 ops/s
# Warmup Iteration  28: 936270.415 ops/s
# Warmup Iteration  29: 944160.930 ops/s
# Warmup Iteration  30: 943717.780 ops/s
Iteration   1: 943427.966 ops/s
Iteration   2: 948571.028 ops/s
Iteration   3: 947995.426 ops/s
Iteration   4: 944674.441 ops/s
Iteration   5: 944349.973 ops/s
Iteration   6: 945763.092 ops/s
Iteration   7: 939834.657 ops/s
Iteration   8: 942103.982 ops/s
Iteration   9: 941997.541 ops/s
Iteration  10: 940929.891 ops/s
Iteration  11: 940872.518 ops/s
Iteration  12: 942836.961 ops/s
Iteration  13: 947337.502 ops/s
Iteration  14: 947061.925 ops/s
Iteration  15: 943117.539 ops/s
Iteration  16: 937602.768 ops/s
Iteration  17: 945206.844 ops/s
Iteration  18: 940382.463 ops/s
Iteration  19: 943199.467 ops/s
Iteration  20: 946208.319 ops/s
Iteration  21: 947210.269 ops/s
Iteration  22: 940933.687 ops/s
Iteration  23: 948227.340 ops/s
Iteration  24: 949577.952 ops/s
Iteration  25: 946629.996 ops/s
Iteration  26: 947290.349 ops/s
Iteration  27: 944309.685 ops/s
Iteration  28: 947249.019 ops/s
Iteration  29: 944351.853 ops/s
Iteration  30: 940766.779 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_ambWithOrder":
  944334.041 ±(99.9%) 2049.825 ops/s [Average]
  (min, avg, max) = (937602.768, 944334.041, 949577.952), stdev = 3068.081
  CI (99.9%): [942284.216, 946383.866] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     Mode  Cnt       Score      Error  Units
MaybeTest._Benchmark.benchmark_ambWithOrder  thrpt   30  944334.041 ± 2049.825  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_ambIterableOrder$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_ambIterableOrder

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 602821.912 ops/s
# Warmup Iteration   2: 745867.539 ops/s
# Warmup Iteration   3: 803271.278 ops/s
# Warmup Iteration   4: 834526.393 ops/s
# Warmup Iteration   5: 873876.614 ops/s
# Warmup Iteration   6: 879065.908 ops/s
# Warmup Iteration   7: 877438.421 ops/s
# Warmup Iteration   8: 876037.022 ops/s
# Warmup Iteration   9: 880644.559 ops/s
# Warmup Iteration  10: 875551.425 ops/s
# Warmup Iteration  11: 876633.264 ops/s
# Warmup Iteration  12: 873744.549 ops/s
# Warmup Iteration  13: 870691.432 ops/s
# Warmup Iteration  14: 869418.511 ops/s
# Warmup Iteration  15: 871521.426 ops/s
# Warmup Iteration  16: 867002.119 ops/s
# Warmup Iteration  17: 923429.149 ops/s
# Warmup Iteration  18: 917207.352 ops/s
# Warmup Iteration  19: 912839.732 ops/s
# Warmup Iteration  20: 916238.690 ops/s
# Warmup Iteration  21: 919607.594 ops/s
# Warmup Iteration  22: 914592.207 ops/s
# Warmup Iteration  23: 921925.832 ops/s
# Warmup Iteration  24: 918544.662 ops/s
# Warmup Iteration  25: 916467.059 ops/s
# Warmup Iteration  26: 920307.592 ops/s
# Warmup Iteration  27: 919830.954 ops/s
# Warmup Iteration  28: 909827.638 ops/s
# Warmup Iteration  29: 916638.688 ops/s
# Warmup Iteration  30: 922732.186 ops/s
Iteration   1: 916638.665 ops/s
Iteration   2: 920941.732 ops/s
Iteration   3: 913912.441 ops/s
Iteration   4: 916010.050 ops/s
Iteration   5: 917405.433 ops/s
Iteration   6: 919180.550 ops/s
Iteration   7: 920589.117 ops/s
Iteration   8: 920582.696 ops/s
Iteration   9: 924614.148 ops/s
Iteration  10: 917892.315 ops/s
Iteration  11: 918912.405 ops/s
Iteration  12: 916181.544 ops/s
Iteration  13: 919780.810 ops/s
Iteration  14: 912660.277 ops/s
Iteration  15: 912702.579 ops/s
Iteration  16: 924416.329 ops/s
Iteration  17: 920703.772 ops/s
Iteration  18: 915790.300 ops/s
Iteration  19: 915279.823 ops/s
Iteration  20: 915507.541 ops/s
Iteration  21: 922103.776 ops/s
Iteration  22: 917468.062 ops/s
Iteration  23: 916181.319 ops/s
Iteration  24: 918516.162 ops/s
Iteration  25: 919165.354 ops/s
Iteration  26: 916669.282 ops/s
Iteration  27: 916362.709 ops/s
Iteration  28: 912972.015 ops/s
Iteration  29: 918501.398 ops/s
Iteration  30: 922953.797 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_ambIterableOrder":
  918019.880 ±(99.9%) 2139.841 ops/s [Average]
  (min, avg, max) = (912660.277, 918019.880, 924614.148), stdev = 3202.814
  CI (99.9%): [915880.039, 920159.721] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt       Score      Error  Units
MaybeTest._Benchmark.benchmark_ambIterableOrder  thrpt   30  918019.880 ± 2139.841  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_ambIterableOne$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_ambIterableOne

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3117129.312 ops/s
# Warmup Iteration   2: 4384958.374 ops/s
# Warmup Iteration   3: 5023528.539 ops/s
# Warmup Iteration   4: 5462228.523 ops/s
# Warmup Iteration   5: 6432615.893 ops/s
# Warmup Iteration   6: 6433142.983 ops/s
# Warmup Iteration   7: 6440387.883 ops/s
# Warmup Iteration   8: 6407792.752 ops/s
# Warmup Iteration   9: 6464892.419 ops/s
# Warmup Iteration  10: 6426946.290 ops/s
# Warmup Iteration  11: 6445377.671 ops/s
# Warmup Iteration  12: 6439288.743 ops/s
# Warmup Iteration  13: 6438864.644 ops/s
# Warmup Iteration  14: 6414977.024 ops/s
# Warmup Iteration  15: 6451840.863 ops/s
# Warmup Iteration  16: 6408673.247 ops/s
# Warmup Iteration  17: 6481461.653 ops/s
# Warmup Iteration  18: 6451290.744 ops/s
# Warmup Iteration  19: 6435717.498 ops/s
# Warmup Iteration  20: 6440763.664 ops/s
# Warmup Iteration  21: 6476483.797 ops/s
# Warmup Iteration  22: 6401199.355 ops/s
# Warmup Iteration  23: 6455438.489 ops/s
# Warmup Iteration  24: 6451747.587 ops/s
# Warmup Iteration  25: 6473258.932 ops/s
# Warmup Iteration  26: 6438325.205 ops/s
# Warmup Iteration  27: 6459186.376 ops/s
# Warmup Iteration  28: 6463000.268 ops/s
# Warmup Iteration  29: 6423873.621 ops/s
# Warmup Iteration  30: 6420398.477 ops/s
Iteration   1: 6436649.980 ops/s
Iteration   2: 6456080.966 ops/s
Iteration   3: 6474700.147 ops/s
Iteration   4: 6456263.944 ops/s
Iteration   5: 6489396.393 ops/s
Iteration   6: 6487744.042 ops/s
Iteration   7: 6392310.631 ops/s
Iteration   8: 6453330.276 ops/s
Iteration   9: 6427500.850 ops/s
Iteration  10: 6526740.140 ops/s
Iteration  11: 6468532.788 ops/s
Iteration  12: 6445625.772 ops/s
Iteration  13: 6442918.536 ops/s
Iteration  14: 6477638.910 ops/s
Iteration  15: 6431304.321 ops/s
Iteration  16: 6470589.508 ops/s
Iteration  17: 6411107.626 ops/s
Iteration  18: 6475791.387 ops/s
Iteration  19: 6437101.670 ops/s
Iteration  20: 6451463.680 ops/s
Iteration  21: 6499263.813 ops/s
Iteration  22: 6438422.569 ops/s
Iteration  23: 6455432.747 ops/s
Iteration  24: 6444220.590 ops/s
Iteration  25: 6490653.114 ops/s
Iteration  26: 6459856.257 ops/s
Iteration  27: 6407734.323 ops/s
Iteration  28: 6481250.618 ops/s
Iteration  29: 6484199.958 ops/s
Iteration  30: 6517540.502 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_ambIterableOne":
  6459712.202 ±(99.9%) 20726.844 ops/s [Average]
  (min, avg, max) = (6392310.631, 6459712.202, 6526740.140), stdev = 31022.966
  CI (99.9%): [6438985.358, 6480439.046] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt        Score       Error  Units
MaybeTest._Benchmark.benchmark_ambIterableOne  thrpt   30  6459712.202 ± 20726.844  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_valueConcatWithError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_valueConcatWithError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 549489.110 ops/s
# Warmup Iteration   2: 707543.511 ops/s
# Warmup Iteration   3: 829948.111 ops/s
# Warmup Iteration   4: 767855.139 ops/s
# Warmup Iteration   5: 834538.466 ops/s
# Warmup Iteration   6: 833355.136 ops/s
# Warmup Iteration   7: 834147.686 ops/s
# Warmup Iteration   8: 832351.740 ops/s
# Warmup Iteration   9: 830818.534 ops/s
# Warmup Iteration  10: 828618.638 ops/s
# Warmup Iteration  11: 830226.672 ops/s
# Warmup Iteration  12: 834658.489 ops/s
# Warmup Iteration  13: 831764.883 ops/s
# Warmup Iteration  14: 828701.657 ops/s
# Warmup Iteration  15: 830533.387 ops/s
# Warmup Iteration  16: 827036.887 ops/s
# Warmup Iteration  17: 869644.541 ops/s
# Warmup Iteration  18: 872614.119 ops/s
# Warmup Iteration  19: 877605.551 ops/s
# Warmup Iteration  20: 871746.941 ops/s
# Warmup Iteration  21: 867990.683 ops/s
# Warmup Iteration  22: 874187.294 ops/s
# Warmup Iteration  23: 878253.824 ops/s
# Warmup Iteration  24: 869823.513 ops/s
# Warmup Iteration  25: 876027.740 ops/s
# Warmup Iteration  26: 878533.624 ops/s
# Warmup Iteration  27: 871117.547 ops/s
# Warmup Iteration  28: 878609.363 ops/s
# Warmup Iteration  29: 877034.444 ops/s
# Warmup Iteration  30: 876762.544 ops/s
Iteration   1: 869124.150 ops/s
Iteration   2: 871262.142 ops/s
Iteration   3: 872725.634 ops/s
Iteration   4: 874365.253 ops/s
Iteration   5: 873478.769 ops/s
Iteration   6: 872407.207 ops/s
Iteration   7: 873354.823 ops/s
Iteration   8: 869671.237 ops/s
Iteration   9: 872242.483 ops/s
Iteration  10: 877559.790 ops/s
Iteration  11: 871221.084 ops/s
Iteration  12: 871440.259 ops/s
Iteration  13: 878231.114 ops/s
Iteration  14: 876779.363 ops/s
Iteration  15: 871819.381 ops/s
Iteration  16: 874857.740 ops/s
Iteration  17: 873178.932 ops/s
Iteration  18: 874646.817 ops/s
Iteration  19: 873568.030 ops/s
Iteration  20: 872192.242 ops/s
Iteration  21: 872609.857 ops/s
Iteration  22: 877464.895 ops/s
Iteration  23: 869902.649 ops/s
Iteration  24: 876247.705 ops/s
Iteration  25: 873184.420 ops/s
Iteration  26: 878937.605 ops/s
Iteration  27: 871482.458 ops/s
Iteration  28: 877874.482 ops/s
Iteration  29: 872671.864 ops/s
Iteration  30: 873910.184 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_valueConcatWithError":
  873613.752 ±(99.9%) 1755.255 ops/s [Average]
  (min, avg, max) = (869124.150, 873613.752, 878937.605), stdev = 2627.183
  CI (99.9%): [871858.497, 875369.007] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score      Error  Units
MaybeTest._Benchmark.benchmark_valueConcatWithError  thrpt   30  873613.752 ± 1755.255  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_errorConcatWithValue$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_errorConcatWithValue

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 616613.682 ops/s
# Warmup Iteration   2: 763125.099 ops/s
# Warmup Iteration   3: 887052.577 ops/s
# Warmup Iteration   4: 819152.212 ops/s
# Warmup Iteration   5: 892826.714 ops/s
# Warmup Iteration   6: 892757.408 ops/s
# Warmup Iteration   7: 889514.750 ops/s
# Warmup Iteration   8: 889225.996 ops/s
# Warmup Iteration   9: 892640.978 ops/s
# Warmup Iteration  10: 888402.320 ops/s
# Warmup Iteration  11: 887521.113 ops/s
# Warmup Iteration  12: 892668.824 ops/s
# Warmup Iteration  13: 889269.525 ops/s
# Warmup Iteration  14: 891853.947 ops/s
# Warmup Iteration  15: 887123.256 ops/s
# Warmup Iteration  16: 887005.612 ops/s
# Warmup Iteration  17: 930974.296 ops/s
# Warmup Iteration  18: 937057.379 ops/s
# Warmup Iteration  19: 931656.397 ops/s
# Warmup Iteration  20: 931750.796 ops/s
# Warmup Iteration  21: 931369.509 ops/s
# Warmup Iteration  22: 928105.223 ops/s
# Warmup Iteration  23: 931899.367 ops/s
# Warmup Iteration  24: 928768.170 ops/s
# Warmup Iteration  25: 932017.442 ops/s
# Warmup Iteration  26: 931789.972 ops/s
# Warmup Iteration  27: 931549.599 ops/s
# Warmup Iteration  28: 931490.213 ops/s
# Warmup Iteration  29: 935017.629 ops/s
# Warmup Iteration  30: 932147.870 ops/s
Iteration   1: 930653.231 ops/s
Iteration   2: 932488.255 ops/s
Iteration   3: 932304.006 ops/s
Iteration   4: 931094.724 ops/s
Iteration   5: 932832.299 ops/s
Iteration   6: 923985.809 ops/s
Iteration   7: 930673.250 ops/s
Iteration   8: 930711.916 ops/s
Iteration   9: 929871.121 ops/s
Iteration  10: 932296.485 ops/s
Iteration  11: 933812.462 ops/s
Iteration  12: 924908.325 ops/s
Iteration  13: 925243.851 ops/s
Iteration  14: 930525.000 ops/s
Iteration  15: 929557.085 ops/s
Iteration  16: 926596.044 ops/s
Iteration  17: 929905.378 ops/s
Iteration  18: 931648.332 ops/s
Iteration  19: 930648.344 ops/s
Iteration  20: 933841.528 ops/s
Iteration  21: 929564.891 ops/s
Iteration  22: 926823.167 ops/s
Iteration  23: 929173.927 ops/s
Iteration  24: 926573.123 ops/s
Iteration  25: 921890.333 ops/s
Iteration  26: 932087.831 ops/s
Iteration  27: 930305.226 ops/s
Iteration  28: 923403.199 ops/s
Iteration  29: 926319.314 ops/s
Iteration  30: 926451.165 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_errorConcatWithValue":
  929206.321 ±(99.9%) 2149.948 ops/s [Average]
  (min, avg, max) = (921890.333, 929206.321, 933841.528), stdev = 3217.942
  CI (99.9%): [927056.372, 931356.269] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score      Error  Units
MaybeTest._Benchmark.benchmark_errorConcatWithValue  thrpt   30  929206.321 ± 2149.948  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableLatestTest._Benchmark.benchmark_simpleJustNext$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableLatestTest._Benchmark.benchmark_simpleJustNext

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 217177.647 ops/s
# Warmup Iteration   2: 294699.872 ops/s
# Warmup Iteration   3: 288956.149 ops/s
# Warmup Iteration   4: 311510.340 ops/s
# Warmup Iteration   5: 310075.586 ops/s
# Warmup Iteration   6: 309652.102 ops/s
# Warmup Iteration   7: 309927.242 ops/s
# Warmup Iteration   8: 311124.688 ops/s
# Warmup Iteration   9: 309270.435 ops/s
# Warmup Iteration  10: 309305.732 ops/s
# Warmup Iteration  11: 310418.195 ops/s
# Warmup Iteration  12: 308636.495 ops/s
# Warmup Iteration  13: 309601.726 ops/s
# Warmup Iteration  14: 308714.560 ops/s
# Warmup Iteration  15: 307615.833 ops/s
# Warmup Iteration  16: 307986.565 ops/s
# Warmup Iteration  17: 310260.629 ops/s
# Warmup Iteration  18: 311017.921 ops/s
# Warmup Iteration  19: 312118.908 ops/s
# Warmup Iteration  20: 311730.489 ops/s
# Warmup Iteration  21: 311404.851 ops/s
# Warmup Iteration  22: 311983.721 ops/s
# Warmup Iteration  23: 313124.355 ops/s
# Warmup Iteration  24: 310682.414 ops/s
# Warmup Iteration  25: 313948.031 ops/s
# Warmup Iteration  26: 313695.999 ops/s
# Warmup Iteration  27: 313584.743 ops/s
# Warmup Iteration  28: 311157.324 ops/s
# Warmup Iteration  29: 311055.325 ops/s
# Warmup Iteration  30: 314378.704 ops/s
Iteration   1: 313393.589 ops/s
Iteration   2: 312375.554 ops/s
Iteration   3: 314377.063 ops/s
Iteration   4: 312770.292 ops/s
Iteration   5: 312486.456 ops/s
Iteration   6: 312219.814 ops/s
Iteration   7: 311607.375 ops/s
Iteration   8: 313506.836 ops/s
Iteration   9: 313456.657 ops/s
Iteration  10: 315443.335 ops/s
Iteration  11: 312983.856 ops/s
Iteration  12: 311596.650 ops/s
Iteration  13: 312629.421 ops/s
Iteration  14: 312172.939 ops/s
Iteration  15: 311468.744 ops/s
Iteration  16: 311954.847 ops/s
Iteration  17: 312121.445 ops/s
Iteration  18: 313953.422 ops/s
Iteration  19: 311737.933 ops/s
Iteration  20: 311804.891 ops/s
Iteration  21: 313001.811 ops/s
Iteration  22: 312092.053 ops/s
Iteration  23: 312058.149 ops/s
Iteration  24: 311745.313 ops/s
Iteration  25: 314028.337 ops/s
Iteration  26: 313037.221 ops/s
Iteration  27: 315722.147 ops/s
Iteration  28: 313487.310 ops/s
Iteration  29: 310875.166 ops/s
Iteration  30: 313184.623 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableLatestTest._Benchmark.benchmark_simpleJustNext":
  312776.442 ±(99.9%) 761.896 ops/s [Average]
  (min, avg, max) = (310875.166, 312776.442, 315722.147), stdev = 1140.370
  CI (99.9%): [312014.546, 313538.338] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score     Error  Units
BlockingFlowableLatestTest._Benchmark.benchmark_simpleJustNext  thrpt   30  312776.442 ± 761.896  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableLatestTest._Benchmark.benchmark_simple$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableLatestTest._Benchmark.benchmark_simple

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 356027.022 ops/s
# Warmup Iteration   2: 459262.285 ops/s
# Warmup Iteration   3: 451916.870 ops/s
# Warmup Iteration   4: 499920.193 ops/s
# Warmup Iteration   5: 493822.064 ops/s
# Warmup Iteration   6: 498639.287 ops/s
# Warmup Iteration   7: 499048.116 ops/s
# Warmup Iteration   8: 498190.259 ops/s
# Warmup Iteration   9: 494452.311 ops/s
# Warmup Iteration  10: 498890.805 ops/s
# Warmup Iteration  11: 496643.488 ops/s
# Warmup Iteration  12: 495333.525 ops/s
# Warmup Iteration  13: 498520.072 ops/s
# Warmup Iteration  14: 495146.250 ops/s
# Warmup Iteration  15: 496210.212 ops/s
# Warmup Iteration  16: 495594.326 ops/s
# Warmup Iteration  17: 492573.933 ops/s
# Warmup Iteration  18: 497260.891 ops/s
# Warmup Iteration  19: 493162.837 ops/s
# Warmup Iteration  20: 494988.241 ops/s
# Warmup Iteration  21: 496791.412 ops/s
# Warmup Iteration  22: 494506.546 ops/s
# Warmup Iteration  23: 491544.859 ops/s
# Warmup Iteration  24: 498398.793 ops/s
# Warmup Iteration  25: 494679.990 ops/s
# Warmup Iteration  26: 495130.737 ops/s
# Warmup Iteration  27: 493554.628 ops/s
# Warmup Iteration  28: 495743.036 ops/s
# Warmup Iteration  29: 495231.599 ops/s
# Warmup Iteration  30: 498312.640 ops/s
Iteration   1: 494787.810 ops/s
Iteration   2: 495826.529 ops/s
Iteration   3: 495062.915 ops/s
Iteration   4: 494196.927 ops/s
Iteration   5: 495595.214 ops/s
Iteration   6: 490673.899 ops/s
Iteration   7: 488950.754 ops/s
Iteration   8: 495963.738 ops/s
Iteration   9: 491581.191 ops/s
Iteration  10: 499164.015 ops/s
Iteration  11: 495454.696 ops/s
Iteration  12: 490841.833 ops/s
Iteration  13: 492987.762 ops/s
Iteration  14: 497826.673 ops/s
Iteration  15: 497941.143 ops/s
Iteration  16: 494456.123 ops/s
Iteration  17: 497463.410 ops/s
Iteration  18: 497342.931 ops/s
Iteration  19: 486401.761 ops/s
Iteration  20: 494624.176 ops/s
Iteration  21: 498474.518 ops/s
Iteration  22: 493188.868 ops/s
Iteration  23: 497374.956 ops/s
Iteration  24: 488637.426 ops/s
Iteration  25: 490914.096 ops/s
Iteration  26: 490920.682 ops/s
Iteration  27: 490889.332 ops/s
Iteration  28: 494917.341 ops/s
Iteration  29: 494891.301 ops/s
Iteration  30: 492216.304 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableLatestTest._Benchmark.benchmark_simple":
  493985.611 ±(99.9%) 2147.850 ops/s [Average]
  (min, avg, max) = (486401.761, 493985.611, 499164.015), stdev = 3214.801
  CI (99.9%): [491837.761, 496133.461] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
BlockingFlowableLatestTest._Benchmark.benchmark_simple  thrpt   30  493985.611 ± 2147.850  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupByTest._Benchmark.benchmark_innerEscapeCompleted$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupByTest._Benchmark.benchmark_innerEscapeCompleted

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 653706.906 ops/s
# Warmup Iteration   2: 1038801.726 ops/s
# Warmup Iteration   3: 1258184.970 ops/s
# Warmup Iteration   4: 1258071.202 ops/s
# Warmup Iteration   5: 1252568.613 ops/s
# Warmup Iteration   6: 1263010.808 ops/s
# Warmup Iteration   7: 1254508.757 ops/s
# Warmup Iteration   8: 1255013.753 ops/s
# Warmup Iteration   9: 1259990.926 ops/s
# Warmup Iteration  10: 1235507.863 ops/s
# Warmup Iteration  11: 1250930.942 ops/s
# Warmup Iteration  12: 1252412.181 ops/s
# Warmup Iteration  13: 1254315.924 ops/s
# Warmup Iteration  14: 1249647.515 ops/s
# Warmup Iteration  15: 1255195.029 ops/s
# Warmup Iteration  16: 1262548.317 ops/s
# Warmup Iteration  17: 1248149.804 ops/s
# Warmup Iteration  18: 1269045.359 ops/s
# Warmup Iteration  19: 1255145.767 ops/s
# Warmup Iteration  20: 1254978.176 ops/s
# Warmup Iteration  21: 1262502.717 ops/s
# Warmup Iteration  22: 1260180.515 ops/s
# Warmup Iteration  23: 1259530.394 ops/s
# Warmup Iteration  24: 1259889.473 ops/s
# Warmup Iteration  25: 1265054.533 ops/s
# Warmup Iteration  26: 1253953.149 ops/s
# Warmup Iteration  27: 1263719.256 ops/s
# Warmup Iteration  28: 1263932.752 ops/s
# Warmup Iteration  29: 1257161.662 ops/s
# Warmup Iteration  30: 1264344.467 ops/s
Iteration   1: 1255079.094 ops/s
Iteration   2: 1262599.522 ops/s
Iteration   3: 1263537.253 ops/s
Iteration   4: 1262915.698 ops/s
Iteration   5: 1259360.148 ops/s
Iteration   6: 1258589.426 ops/s
Iteration   7: 1254365.369 ops/s
Iteration   8: 1255358.500 ops/s
Iteration   9: 1261009.814 ops/s
Iteration  10: 1258829.037 ops/s
Iteration  11: 1246856.332 ops/s
Iteration  12: 1253932.213 ops/s
Iteration  13: 1249411.593 ops/s
Iteration  14: 1268112.733 ops/s
Iteration  15: 1260637.028 ops/s
Iteration  16: 1258927.476 ops/s
Iteration  17: 1252690.065 ops/s
Iteration  18: 1263535.801 ops/s
Iteration  19: 1257574.248 ops/s
Iteration  20: 1254821.096 ops/s
Iteration  21: 1258682.934 ops/s
Iteration  22: 1274071.700 ops/s
Iteration  23: 1269412.483 ops/s
Iteration  24: 1265897.491 ops/s
Iteration  25: 1261876.671 ops/s
Iteration  26: 1260550.607 ops/s
Iteration  27: 1259265.414 ops/s
Iteration  28: 1260224.489 ops/s
Iteration  29: 1262826.528 ops/s
Iteration  30: 1259715.796 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupByTest._Benchmark.benchmark_innerEscapeCompleted":
  1259688.885 ±(99.9%) 3784.456 ops/s [Average]
  (min, avg, max) = (1246856.332, 1259688.885, 1274071.700), stdev = 5664.396
  CI (99.9%): [1255904.429, 1263473.341] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
FlowableGroupByTest._Benchmark.benchmark_innerEscapeCompleted  thrpt   30  1259688.885 ± 3784.456  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupByTest._Benchmark.benchmark_delayErrorSimpleComplete$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupByTest._Benchmark.benchmark_delayErrorSimpleComplete

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 703062.016 ops/s
# Warmup Iteration   2: 1089865.620 ops/s
# Warmup Iteration   3: 1264522.039 ops/s
# Warmup Iteration   4: 1268615.250 ops/s
# Warmup Iteration   5: 1270338.889 ops/s
# Warmup Iteration   6: 1263139.022 ops/s
# Warmup Iteration   7: 1260020.811 ops/s
# Warmup Iteration   8: 1275865.861 ops/s
# Warmup Iteration   9: 1261694.257 ops/s
# Warmup Iteration  10: 1265871.993 ops/s
# Warmup Iteration  11: 1259595.736 ops/s
# Warmup Iteration  12: 1262537.958 ops/s
# Warmup Iteration  13: 1256613.936 ops/s
# Warmup Iteration  14: 1263525.618 ops/s
# Warmup Iteration  15: 1257102.603 ops/s
# Warmup Iteration  16: 1258900.572 ops/s
# Warmup Iteration  17: 1248977.418 ops/s
# Warmup Iteration  18: 1254353.929 ops/s
# Warmup Iteration  19: 1256848.292 ops/s
# Warmup Iteration  20: 1255980.101 ops/s
# Warmup Iteration  21: 1256965.982 ops/s
# Warmup Iteration  22: 1271835.732 ops/s
# Warmup Iteration  23: 1265151.628 ops/s
# Warmup Iteration  24: 1274656.106 ops/s
# Warmup Iteration  25: 1263987.816 ops/s
# Warmup Iteration  26: 1266724.543 ops/s
# Warmup Iteration  27: 1264956.196 ops/s
# Warmup Iteration  28: 1256946.497 ops/s
# Warmup Iteration  29: 1263605.725 ops/s
# Warmup Iteration  30: 1250546.193 ops/s
Iteration   1: 1260646.608 ops/s
Iteration   2: 1266598.870 ops/s
Iteration   3: 1256342.300 ops/s
Iteration   4: 1262653.466 ops/s
Iteration   5: 1269011.614 ops/s
Iteration   6: 1262368.306 ops/s
Iteration   7: 1251405.713 ops/s
Iteration   8: 1264483.853 ops/s
Iteration   9: 1252299.537 ops/s
Iteration  10: 1245913.444 ops/s
Iteration  11: 1249128.948 ops/s
Iteration  12: 1270439.118 ops/s
Iteration  13: 1265501.178 ops/s
Iteration  14: 1264514.791 ops/s
Iteration  15: 1259059.515 ops/s
Iteration  16: 1255464.898 ops/s
Iteration  17: 1256625.694 ops/s
Iteration  18: 1261683.284 ops/s
Iteration  19: 1265654.297 ops/s
Iteration  20: 1252815.418 ops/s
Iteration  21: 1263267.475 ops/s
Iteration  22: 1267058.556 ops/s
Iteration  23: 1262674.381 ops/s
Iteration  24: 1269337.825 ops/s
Iteration  25: 1264225.881 ops/s
Iteration  26: 1270150.189 ops/s
Iteration  27: 1269732.906 ops/s
Iteration  28: 1253332.490 ops/s
Iteration  29: 1260974.575 ops/s
Iteration  30: 1258244.549 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupByTest._Benchmark.benchmark_delayErrorSimpleComplete":
  1261053.656 ±(99.9%) 4448.399 ops/s [Average]
  (min, avg, max) = (1245913.444, 1261053.656, 1270439.118), stdev = 6658.154
  CI (99.9%): [1256605.257, 1265502.055] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
FlowableGroupByTest._Benchmark.benchmark_delayErrorSimpleComplete  thrpt   30  1261053.656 ± 4448.399  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableCovarianceTest._Benchmark.benchmark_groupByCompose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableCovarianceTest._Benchmark.benchmark_groupByCompose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 80954.469 ops/s
# Warmup Iteration   2: 196050.979 ops/s
# Warmup Iteration   3: 246551.093 ops/s
# Warmup Iteration   4: 245018.495 ops/s
# Warmup Iteration   5: 240172.084 ops/s
# Warmup Iteration   6: 239281.695 ops/s
# Warmup Iteration   7: 238591.735 ops/s
# Warmup Iteration   8: 239728.840 ops/s
# Warmup Iteration   9: 239110.752 ops/s
# Warmup Iteration  10: 241495.779 ops/s
# Warmup Iteration  11: 240722.892 ops/s
# Warmup Iteration  12: 239566.077 ops/s
# Warmup Iteration  13: 238792.661 ops/s
# Warmup Iteration  14: 238061.292 ops/s
# Warmup Iteration  15: 239870.770 ops/s
# Warmup Iteration  16: 238906.835 ops/s
# Warmup Iteration  17: 239339.340 ops/s
# Warmup Iteration  18: 237610.594 ops/s
# Warmup Iteration  19: 238341.259 ops/s
# Warmup Iteration  20: 239425.765 ops/s
# Warmup Iteration  21: 240077.204 ops/s
# Warmup Iteration  22: 238760.425 ops/s
# Warmup Iteration  23: 240416.224 ops/s
# Warmup Iteration  24: 240285.681 ops/s
# Warmup Iteration  25: 239717.565 ops/s
# Warmup Iteration  26: 240145.503 ops/s
# Warmup Iteration  27: 239545.450 ops/s
# Warmup Iteration  28: 240519.378 ops/s
# Warmup Iteration  29: 241633.440 ops/s
# Warmup Iteration  30: 239732.337 ops/s
Iteration   1: 238758.459 ops/s
Iteration   2: 239068.348 ops/s
Iteration   3: 239205.602 ops/s
Iteration   4: 239272.951 ops/s
Iteration   5: 240370.788 ops/s
Iteration   6: 240733.598 ops/s
Iteration   7: 238977.877 ops/s
Iteration   8: 238280.417 ops/s
Iteration   9: 241066.121 ops/s
Iteration  10: 239591.572 ops/s
Iteration  11: 238963.477 ops/s
Iteration  12: 240141.039 ops/s
Iteration  13: 239343.131 ops/s
Iteration  14: 241316.578 ops/s
Iteration  15: 240523.595 ops/s
Iteration  16: 239613.924 ops/s
Iteration  17: 239654.528 ops/s
Iteration  18: 239599.167 ops/s
Iteration  19: 242027.756 ops/s
Iteration  20: 239608.324 ops/s
Iteration  21: 240104.823 ops/s
Iteration  22: 239587.375 ops/s
Iteration  23: 240414.581 ops/s
Iteration  24: 239609.594 ops/s
Iteration  25: 239022.215 ops/s
Iteration  26: 239970.451 ops/s
Iteration  27: 240195.979 ops/s
Iteration  28: 241357.172 ops/s
Iteration  29: 239315.673 ops/s
Iteration  30: 239788.332 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableCovarianceTest._Benchmark.benchmark_groupByCompose":
  239849.448 ±(99.9%) 567.907 ops/s [Average]
  (min, avg, max) = (238280.417, 239849.448, 242027.756), stdev = 850.017
  CI (99.9%): [239281.541, 240417.356] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score     Error  Units
FlowableCovarianceTest._Benchmark.benchmark_groupByCompose  thrpt   30  239849.448 ± 567.907  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatestTest._Benchmark.benchmark_badRequest$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatestTest._Benchmark.benchmark_badRequest

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 339822.513 ops/s
# Warmup Iteration   2: 537072.635 ops/s
# Warmup Iteration   3: 504049.170 ops/s
# Warmup Iteration   4: 588937.717 ops/s
# Warmup Iteration   5: 606336.113 ops/s
# Warmup Iteration   6: 602859.458 ops/s
# Warmup Iteration   7: 597531.780 ops/s
# Warmup Iteration   8: 601083.262 ops/s
# Warmup Iteration   9: 600667.283 ops/s
# Warmup Iteration  10: 601896.033 ops/s
# Warmup Iteration  11: 597981.151 ops/s
# Warmup Iteration  12: 599983.533 ops/s
# Warmup Iteration  13: 599225.522 ops/s
# Warmup Iteration  14: 600108.960 ops/s
# Warmup Iteration  15: 599421.628 ops/s
# Warmup Iteration  16: 599933.354 ops/s
# Warmup Iteration  17: 619393.864 ops/s
# Warmup Iteration  18: 615285.173 ops/s
# Warmup Iteration  19: 619180.256 ops/s
# Warmup Iteration  20: 615529.926 ops/s
# Warmup Iteration  21: 619936.079 ops/s
# Warmup Iteration  22: 618743.498 ops/s
# Warmup Iteration  23: 617312.971 ops/s
# Warmup Iteration  24: 616430.520 ops/s
# Warmup Iteration  25: 615397.343 ops/s
# Warmup Iteration  26: 615534.942 ops/s
# Warmup Iteration  27: 620851.754 ops/s
# Warmup Iteration  28: 618784.622 ops/s
# Warmup Iteration  29: 617043.004 ops/s
# Warmup Iteration  30: 622328.024 ops/s
Iteration   1: 616496.398 ops/s
Iteration   2: 614894.310 ops/s
Iteration   3: 621479.956 ops/s
Iteration   4: 616535.209 ops/s
Iteration   5: 619437.180 ops/s
Iteration   6: 623779.533 ops/s
Iteration   7: 613772.384 ops/s
Iteration   8: 617681.641 ops/s
Iteration   9: 615173.288 ops/s
Iteration  10: 617249.622 ops/s
Iteration  11: 620817.967 ops/s
Iteration  12: 618953.458 ops/s
Iteration  13: 620947.284 ops/s
Iteration  14: 618180.810 ops/s
Iteration  15: 621170.990 ops/s
Iteration  16: 619491.437 ops/s
Iteration  17: 617945.510 ops/s
Iteration  18: 618970.878 ops/s
Iteration  19: 618032.074 ops/s
Iteration  20: 621642.667 ops/s
Iteration  21: 618304.948 ops/s
Iteration  22: 617894.451 ops/s
Iteration  23: 617513.030 ops/s
Iteration  24: 619877.628 ops/s
Iteration  25: 616434.439 ops/s
Iteration  26: 621548.799 ops/s
Iteration  27: 616695.254 ops/s
Iteration  28: 618374.706 ops/s
Iteration  29: 617650.125 ops/s
Iteration  30: 619150.974 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatestTest._Benchmark.benchmark_badRequest":
  618536.565 ±(99.9%) 1497.993 ops/s [Average]
  (min, avg, max) = (613772.384, 618536.565, 623779.533), stdev = 2242.126
  CI (99.9%): [617038.572, 620034.558] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score      Error  Units
FlowableThrottleLatestTest._Benchmark.benchmark_badRequest  thrpt   30  618536.565 ± 1497.993  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupByTest._Benchmark.benchmark_fusedGroupClearedOnCancel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupByTest._Benchmark.benchmark_fusedGroupClearedOnCancel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 377435.843 ops/s
# Warmup Iteration   2: 763120.091 ops/s
# Warmup Iteration   3: 923800.204 ops/s
# Warmup Iteration   4: 923902.032 ops/s
# Warmup Iteration   5: 929138.748 ops/s
# Warmup Iteration   6: 926533.726 ops/s
# Warmup Iteration   7: 921183.734 ops/s
# Warmup Iteration   8: 932735.326 ops/s
# Warmup Iteration   9: 926988.346 ops/s
# Warmup Iteration  10: 921335.240 ops/s
# Warmup Iteration  11: 925598.693 ops/s
# Warmup Iteration  12: 923063.746 ops/s
# Warmup Iteration  13: 921940.359 ops/s
# Warmup Iteration  14: 924268.898 ops/s
# Warmup Iteration  15: 924478.838 ops/s
# Warmup Iteration  16: 922778.181 ops/s
# Warmup Iteration  17: 925201.969 ops/s
# Warmup Iteration  18: 925892.571 ops/s
# Warmup Iteration  19: 924499.231 ops/s
# Warmup Iteration  20: 925562.460 ops/s
# Warmup Iteration  21: 925759.831 ops/s
# Warmup Iteration  22: 930588.592 ops/s
# Warmup Iteration  23: 921388.750 ops/s
# Warmup Iteration  24: 920793.839 ops/s
# Warmup Iteration  25: 926033.505 ops/s
# Warmup Iteration  26: 923441.278 ops/s
# Warmup Iteration  27: 925423.508 ops/s
# Warmup Iteration  28: 919645.345 ops/s
# Warmup Iteration  29: 920593.963 ops/s
# Warmup Iteration  30: 926165.292 ops/s
Iteration   1: 926623.809 ops/s
Iteration   2: 922193.363 ops/s
Iteration   3: 926053.704 ops/s
Iteration   4: 928336.848 ops/s
Iteration   5: 915976.347 ops/s
Iteration   6: 922225.555 ops/s
Iteration   7: 923569.199 ops/s
Iteration   8: 922177.716 ops/s
Iteration   9: 916324.240 ops/s
Iteration  10: 928056.501 ops/s
Iteration  11: 929308.050 ops/s
Iteration  12: 922838.447 ops/s
Iteration  13: 923879.190 ops/s
Iteration  14: 920807.811 ops/s
Iteration  15: 918555.395 ops/s
Iteration  16: 928459.191 ops/s
Iteration  17: 928190.027 ops/s
Iteration  18: 927314.593 ops/s
Iteration  19: 929542.783 ops/s
Iteration  20: 927277.475 ops/s
Iteration  21: 929125.213 ops/s
Iteration  22: 927658.374 ops/s
Iteration  23: 921647.475 ops/s
Iteration  24: 924655.039 ops/s
Iteration  25: 919038.217 ops/s
Iteration  26: 921208.376 ops/s
Iteration  27: 926661.123 ops/s
Iteration  28: 919593.095 ops/s
Iteration  29: 927282.191 ops/s
Iteration  30: 927083.019 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupByTest._Benchmark.benchmark_fusedGroupClearedOnCancel":
  924388.746 ±(99.9%) 2658.359 ops/s [Average]
  (min, avg, max) = (915976.347, 924388.746, 929542.783), stdev = 3978.906
  CI (99.9%): [921730.387, 927047.104] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score      Error  Units
FlowableGroupByTest._Benchmark.benchmark_fusedGroupClearedOnCancel  thrpt   30  924388.746 ± 2658.359  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupByTest._Benchmark.benchmark_groupByWithNullKey$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupByTest._Benchmark.benchmark_groupByWithNullKey

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 736900.905 ops/s
# Warmup Iteration   2: 1210676.338 ops/s
# Warmup Iteration   3: 1445949.393 ops/s
# Warmup Iteration   4: 1462014.586 ops/s
# Warmup Iteration   5: 1460368.757 ops/s
# Warmup Iteration   6: 1460862.851 ops/s
# Warmup Iteration   7: 1462766.443 ops/s
# Warmup Iteration   8: 1462457.052 ops/s
# Warmup Iteration   9: 1459791.893 ops/s
# Warmup Iteration  10: 1454038.058 ops/s
# Warmup Iteration  11: 1460893.082 ops/s
# Warmup Iteration  12: 1465246.237 ops/s
# Warmup Iteration  13: 1459037.279 ops/s
# Warmup Iteration  14: 1478928.694 ops/s
# Warmup Iteration  15: 1459796.992 ops/s
# Warmup Iteration  16: 1468815.899 ops/s
# Warmup Iteration  17: 1459664.949 ops/s
# Warmup Iteration  18: 1465370.726 ops/s
# Warmup Iteration  19: 1445603.718 ops/s
# Warmup Iteration  20: 1462212.739 ops/s
# Warmup Iteration  21: 1456834.904 ops/s
# Warmup Iteration  22: 1465709.536 ops/s
# Warmup Iteration  23: 1454421.268 ops/s
# Warmup Iteration  24: 1462163.800 ops/s
# Warmup Iteration  25: 1464136.204 ops/s
# Warmup Iteration  26: 1458308.645 ops/s
# Warmup Iteration  27: 1456452.919 ops/s
# Warmup Iteration  28: 1448497.841 ops/s
# Warmup Iteration  29: 1445554.795 ops/s
# Warmup Iteration  30: 1461530.554 ops/s
Iteration   1: 1455377.830 ops/s
Iteration   2: 1454338.138 ops/s
Iteration   3: 1456454.923 ops/s
Iteration   4: 1453063.036 ops/s
Iteration   5: 1464787.739 ops/s
Iteration   6: 1453879.867 ops/s
Iteration   7: 1454562.250 ops/s
Iteration   8: 1456909.803 ops/s
Iteration   9: 1461944.307 ops/s
Iteration  10: 1456751.564 ops/s
Iteration  11: 1444599.042 ops/s
Iteration  12: 1456309.521 ops/s
Iteration  13: 1462003.421 ops/s
Iteration  14: 1457250.069 ops/s
Iteration  15: 1475900.746 ops/s
Iteration  16: 1451420.159 ops/s
Iteration  17: 1457885.885 ops/s
Iteration  18: 1469691.797 ops/s
Iteration  19: 1466087.172 ops/s
Iteration  20: 1467524.769 ops/s
Iteration  21: 1458353.427 ops/s
Iteration  22: 1457695.007 ops/s
Iteration  23: 1455461.700 ops/s
Iteration  24: 1465264.603 ops/s
Iteration  25: 1462720.040 ops/s
Iteration  26: 1458990.591 ops/s
Iteration  27: 1465090.499 ops/s
Iteration  28: 1450932.434 ops/s
Iteration  29: 1468260.837 ops/s
Iteration  30: 1465109.708 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupByTest._Benchmark.benchmark_groupByWithNullKey":
  1459487.363 ±(99.9%) 4418.198 ops/s [Average]
  (min, avg, max) = (1444599.042, 1459487.363, 1475900.746), stdev = 6612.952
  CI (99.9%): [1455069.164, 1463905.561] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
FlowableGroupByTest._Benchmark.benchmark_groupByWithNullKey  thrpt   30  1459487.363 ± 4418.198  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupByTest._Benchmark.benchmark_firstGroupsCompleteAndParentSlowToThenEmitFinalGroupsAndThenComplete$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupByTest._Benchmark.benchmark_firstGroupsCompleteAndParentSlowToThenEmitFinalGroupsAndThenComplete

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 85534.406 ops/s
# Warmup Iteration   2: 275935.978 ops/s
# Warmup Iteration   3: 311271.822 ops/s
# Warmup Iteration   4: 345228.424 ops/s
# Warmup Iteration   5: 342909.801 ops/s
# Warmup Iteration   6: 344679.873 ops/s
# Warmup Iteration   7: 344418.098 ops/s
# Warmup Iteration   8: 345668.592 ops/s
# Warmup Iteration   9: 345963.763 ops/s
# Warmup Iteration  10: 344571.837 ops/s
# Warmup Iteration  11: 345807.908 ops/s
# Warmup Iteration  12: 344030.775 ops/s
# Warmup Iteration  13: 344411.281 ops/s
# Warmup Iteration  14: 342931.512 ops/s
# Warmup Iteration  15: 345993.251 ops/s
# Warmup Iteration  16: 342419.390 ops/s
# Warmup Iteration  17: 342295.853 ops/s
# Warmup Iteration  18: 342874.593 ops/s
# Warmup Iteration  19: 343913.776 ops/s
# Warmup Iteration  20: 343686.532 ops/s
# Warmup Iteration  21: 341285.222 ops/s
# Warmup Iteration  22: 343105.731 ops/s
# Warmup Iteration  23: 340576.186 ops/s
# Warmup Iteration  24: 345553.797 ops/s
# Warmup Iteration  25: 344108.741 ops/s
# Warmup Iteration  26: 341964.253 ops/s
# Warmup Iteration  27: 341946.790 ops/s
# Warmup Iteration  28: 343656.126 ops/s
# Warmup Iteration  29: 344003.818 ops/s
# Warmup Iteration  30: 343444.883 ops/s
Iteration   1: 341459.233 ops/s
Iteration   2: 343584.912 ops/s
Iteration   3: 343160.001 ops/s
Iteration   4: 344348.006 ops/s
Iteration   5: 341342.280 ops/s
Iteration   6: 344275.014 ops/s
Iteration   7: 341629.713 ops/s
Iteration   8: 344668.992 ops/s
Iteration   9: 342319.525 ops/s
Iteration  10: 343104.289 ops/s
Iteration  11: 340483.882 ops/s
Iteration  12: 344118.760 ops/s
Iteration  13: 340210.475 ops/s
Iteration  14: 338432.913 ops/s
Iteration  15: 341548.435 ops/s
Iteration  16: 344665.369 ops/s
Iteration  17: 343039.317 ops/s
Iteration  18: 344063.400 ops/s
Iteration  19: 342866.629 ops/s
Iteration  20: 343754.581 ops/s
Iteration  21: 344286.760 ops/s
Iteration  22: 345766.116 ops/s
Iteration  23: 342030.593 ops/s
Iteration  24: 342357.285 ops/s
Iteration  25: 343954.749 ops/s
Iteration  26: 342354.270 ops/s
Iteration  27: 342782.695 ops/s
Iteration  28: 343567.666 ops/s
Iteration  29: 344992.486 ops/s
Iteration  30: 343081.930 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupByTest._Benchmark.benchmark_firstGroupsCompleteAndParentSlowToThenEmitFinalGroupsAndThenComplete":
  342941.676 ±(99.9%) 1060.919 ops/s [Average]
  (min, avg, max) = (338432.913, 342941.676, 345766.116), stdev = 1587.934
  CI (99.9%): [341880.757, 344002.595] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                                       Mode  Cnt       Score      Error  Units
FlowableGroupByTest._Benchmark.benchmark_firstGroupsCompleteAndParentSlowToThenEmitFinalGroupsAndThenComplete  thrpt   30  342941.676 ± 1060.919  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupByTest._Benchmark.benchmark_groupBy$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupByTest._Benchmark.benchmark_groupBy

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 227466.839 ops/s
# Warmup Iteration   2: 410331.699 ops/s
# Warmup Iteration   3: 499802.274 ops/s
# Warmup Iteration   4: 503298.130 ops/s
# Warmup Iteration   5: 500226.378 ops/s
# Warmup Iteration   6: 500101.056 ops/s
# Warmup Iteration   7: 499050.005 ops/s
# Warmup Iteration   8: 504472.463 ops/s
# Warmup Iteration   9: 498023.662 ops/s
# Warmup Iteration  10: 501134.302 ops/s
# Warmup Iteration  11: 502846.438 ops/s
# Warmup Iteration  12: 502736.075 ops/s
# Warmup Iteration  13: 499050.865 ops/s
# Warmup Iteration  14: 505305.198 ops/s
# Warmup Iteration  15: 497677.938 ops/s
# Warmup Iteration  16: 501732.189 ops/s
# Warmup Iteration  17: 500394.673 ops/s
# Warmup Iteration  18: 503727.910 ops/s
# Warmup Iteration  19: 501470.314 ops/s
# Warmup Iteration  20: 499890.913 ops/s
# Warmup Iteration  21: 500741.303 ops/s
# Warmup Iteration  22: 496149.441 ops/s
# Warmup Iteration  23: 498991.932 ops/s
# Warmup Iteration  24: 498222.652 ops/s
# Warmup Iteration  25: 498804.558 ops/s
# Warmup Iteration  26: 500879.174 ops/s
# Warmup Iteration  27: 497230.360 ops/s
# Warmup Iteration  28: 499524.771 ops/s
# Warmup Iteration  29: 499053.288 ops/s
# Warmup Iteration  30: 504273.055 ops/s
Iteration   1: 501410.025 ops/s
Iteration   2: 499017.285 ops/s
Iteration   3: 500178.397 ops/s
Iteration   4: 497587.030 ops/s
Iteration   5: 495938.381 ops/s
Iteration   6: 496806.455 ops/s
Iteration   7: 500350.033 ops/s
Iteration   8: 500298.720 ops/s
Iteration   9: 497854.960 ops/s
Iteration  10: 498121.330 ops/s
Iteration  11: 501140.122 ops/s
Iteration  12: 500063.418 ops/s
Iteration  13: 499791.755 ops/s
Iteration  14: 501545.662 ops/s
Iteration  15: 501898.833 ops/s
Iteration  16: 504176.215 ops/s
Iteration  17: 499609.946 ops/s
Iteration  18: 504063.622 ops/s
Iteration  19: 503470.740 ops/s
Iteration  20: 500403.455 ops/s
Iteration  21: 500750.480 ops/s
Iteration  22: 498362.316 ops/s
Iteration  23: 502748.141 ops/s
Iteration  24: 501707.094 ops/s
Iteration  25: 501217.438 ops/s
Iteration  26: 499814.748 ops/s
Iteration  27: 497797.832 ops/s
Iteration  28: 496190.830 ops/s
Iteration  29: 501698.435 ops/s
Iteration  30: 501235.090 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupByTest._Benchmark.benchmark_groupBy":
  500174.960 ±(99.9%) 1444.614 ops/s [Average]
  (min, avg, max) = (495938.381, 500174.960, 504176.215), stdev = 2162.230
  CI (99.9%): [498730.346, 501619.573] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt       Score      Error  Units
FlowableGroupByTest._Benchmark.benchmark_groupBy  thrpt   30  500174.960 ± 1444.614  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupByTest._Benchmark.benchmark_groupByWithElementSelector2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupByTest._Benchmark.benchmark_groupByWithElementSelector2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 226451.810 ops/s
# Warmup Iteration   2: 412826.486 ops/s
# Warmup Iteration   3: 501009.252 ops/s
# Warmup Iteration   4: 491181.822 ops/s
# Warmup Iteration   5: 496999.419 ops/s
# Warmup Iteration   6: 496098.955 ops/s
# Warmup Iteration   7: 490628.163 ops/s
# Warmup Iteration   8: 492194.169 ops/s
# Warmup Iteration   9: 496036.763 ops/s
# Warmup Iteration  10: 490078.258 ops/s
# Warmup Iteration  11: 497977.976 ops/s
# Warmup Iteration  12: 494075.302 ops/s
# Warmup Iteration  13: 500126.699 ops/s
# Warmup Iteration  14: 496611.588 ops/s
# Warmup Iteration  15: 491374.998 ops/s
# Warmup Iteration  16: 494312.293 ops/s
# Warmup Iteration  17: 490868.160 ops/s
# Warmup Iteration  18: 494314.897 ops/s
# Warmup Iteration  19: 495005.821 ops/s
# Warmup Iteration  20: 497163.151 ops/s
# Warmup Iteration  21: 493191.435 ops/s
# Warmup Iteration  22: 493696.114 ops/s
# Warmup Iteration  23: 495128.073 ops/s
# Warmup Iteration  24: 496408.459 ops/s
# Warmup Iteration  25: 492040.592 ops/s
# Warmup Iteration  26: 492855.012 ops/s
# Warmup Iteration  27: 497111.630 ops/s
# Warmup Iteration  28: 495691.397 ops/s
# Warmup Iteration  29: 492913.056 ops/s
# Warmup Iteration  30: 492944.767 ops/s
Iteration   1: 495133.899 ops/s
Iteration   2: 497466.325 ops/s
Iteration   3: 495232.117 ops/s
Iteration   4: 494545.954 ops/s
Iteration   5: 493629.738 ops/s
Iteration   6: 494332.084 ops/s
Iteration   7: 492520.328 ops/s
Iteration   8: 496408.558 ops/s
Iteration   9: 499250.498 ops/s
Iteration  10: 495245.850 ops/s
Iteration  11: 491104.361 ops/s
Iteration  12: 483105.684 ops/s
Iteration  13: 492831.430 ops/s
Iteration  14: 494556.264 ops/s
Iteration  15: 497752.445 ops/s
Iteration  16: 493678.737 ops/s
Iteration  17: 496149.827 ops/s
Iteration  18: 493667.190 ops/s
Iteration  19: 495056.567 ops/s
Iteration  20: 493875.679 ops/s
Iteration  21: 496939.970 ops/s
Iteration  22: 496331.715 ops/s
Iteration  23: 497340.120 ops/s
Iteration  24: 496314.963 ops/s
Iteration  25: 494092.146 ops/s
Iteration  26: 491548.414 ops/s
Iteration  27: 497524.814 ops/s
Iteration  28: 494904.919 ops/s
Iteration  29: 498374.203 ops/s
Iteration  30: 494171.521 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupByTest._Benchmark.benchmark_groupByWithElementSelector2":
  494769.544 ±(99.9%) 1971.525 ops/s [Average]
  (min, avg, max) = (483105.684, 494769.544, 499250.498), stdev = 2950.886
  CI (99.9%): [492798.019, 496741.069] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score      Error  Units
FlowableGroupByTest._Benchmark.benchmark_groupByWithElementSelector2  thrpt   30  494769.544 ± 1971.525  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupByTest._Benchmark.benchmark_groupByWithElementSelector$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupByTest._Benchmark.benchmark_groupByWithElementSelector

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 229880.352 ops/s
# Warmup Iteration   2: 417899.096 ops/s
# Warmup Iteration   3: 491319.384 ops/s
# Warmup Iteration   4: 497573.308 ops/s
# Warmup Iteration   5: 499023.260 ops/s
# Warmup Iteration   6: 495060.275 ops/s
# Warmup Iteration   7: 501455.990 ops/s
# Warmup Iteration   8: 498288.436 ops/s
# Warmup Iteration   9: 496427.230 ops/s
# Warmup Iteration  10: 495532.307 ops/s
# Warmup Iteration  11: 497346.583 ops/s
# Warmup Iteration  12: 499825.950 ops/s
# Warmup Iteration  13: 497566.172 ops/s
# Warmup Iteration  14: 500277.493 ops/s
# Warmup Iteration  15: 502728.857 ops/s
# Warmup Iteration  16: 502496.535 ops/s
# Warmup Iteration  17: 504300.360 ops/s
# Warmup Iteration  18: 501190.626 ops/s
# Warmup Iteration  19: 498287.723 ops/s
# Warmup Iteration  20: 502470.227 ops/s
# Warmup Iteration  21: 497342.370 ops/s
# Warmup Iteration  22: 499896.974 ops/s
# Warmup Iteration  23: 497016.350 ops/s
# Warmup Iteration  24: 499560.460 ops/s
# Warmup Iteration  25: 498611.577 ops/s
# Warmup Iteration  26: 494565.335 ops/s
# Warmup Iteration  27: 497076.811 ops/s
# Warmup Iteration  28: 502857.630 ops/s
# Warmup Iteration  29: 502955.046 ops/s
# Warmup Iteration  30: 496890.926 ops/s
Iteration   1: 502471.028 ops/s
Iteration   2: 493795.859 ops/s
Iteration   3: 500214.392 ops/s
Iteration   4: 498026.799 ops/s
Iteration   5: 500229.374 ops/s
Iteration   6: 501741.437 ops/s
Iteration   7: 496314.065 ops/s
Iteration   8: 501166.434 ops/s
Iteration   9: 502801.189 ops/s
Iteration  10: 499850.298 ops/s
Iteration  11: 498133.475 ops/s
Iteration  12: 498433.408 ops/s
Iteration  13: 500847.390 ops/s
Iteration  14: 498557.854 ops/s
Iteration  15: 497841.417 ops/s
Iteration  16: 502499.077 ops/s
Iteration  17: 502289.305 ops/s
Iteration  18: 495922.982 ops/s
Iteration  19: 499872.143 ops/s
Iteration  20: 500850.210 ops/s
Iteration  21: 500537.920 ops/s
Iteration  22: 499467.068 ops/s
Iteration  23: 500640.500 ops/s
Iteration  24: 500572.715 ops/s
Iteration  25: 504089.885 ops/s
Iteration  26: 500400.943 ops/s
Iteration  27: 500180.291 ops/s
Iteration  28: 500296.983 ops/s
Iteration  29: 500372.039 ops/s
Iteration  30: 501735.904 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupByTest._Benchmark.benchmark_groupByWithElementSelector":
  500005.080 ±(99.9%) 1458.242 ops/s [Average]
  (min, avg, max) = (493795.859, 500005.080, 504089.885), stdev = 2182.628
  CI (99.9%): [498546.838, 501463.321] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score      Error  Units
FlowableGroupByTest._Benchmark.benchmark_groupByWithElementSelector  thrpt   30  500005.080 ± 1458.242  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArrayTest._Benchmark.benchmark_conditionalOneByOne$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArrayTest._Benchmark.benchmark_conditionalOneByOne

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1366421.753 ops/s
# Warmup Iteration   2: 1812057.612 ops/s
# Warmup Iteration   3: 2111178.397 ops/s
# Warmup Iteration   4: 2183368.540 ops/s
# Warmup Iteration   5: 2160307.709 ops/s
# Warmup Iteration   6: 2139913.824 ops/s
# Warmup Iteration   7: 2179797.632 ops/s
# Warmup Iteration   8: 2153094.141 ops/s
# Warmup Iteration   9: 2151069.014 ops/s
# Warmup Iteration  10: 2146170.895 ops/s
# Warmup Iteration  11: 2158743.341 ops/s
# Warmup Iteration  12: 2162941.125 ops/s
# Warmup Iteration  13: 2162439.661 ops/s
# Warmup Iteration  14: 2182884.854 ops/s
# Warmup Iteration  15: 2177723.229 ops/s
# Warmup Iteration  16: 2154660.070 ops/s
# Warmup Iteration  17: 2152857.958 ops/s
# Warmup Iteration  18: 2173441.322 ops/s
# Warmup Iteration  19: 2199680.309 ops/s
# Warmup Iteration  20: 2151317.948 ops/s
# Warmup Iteration  21: 2185749.384 ops/s
# Warmup Iteration  22: 2198940.331 ops/s
# Warmup Iteration  23: 2153795.619 ops/s
# Warmup Iteration  24: 2155729.763 ops/s
# Warmup Iteration  25: 2172493.910 ops/s
# Warmup Iteration  26: 2157302.358 ops/s
# Warmup Iteration  27: 2182304.295 ops/s
# Warmup Iteration  28: 2172879.281 ops/s
# Warmup Iteration  29: 2172938.299 ops/s
# Warmup Iteration  30: 2178811.767 ops/s
Iteration   1: 2153245.966 ops/s
Iteration   2: 2174325.732 ops/s
Iteration   3: 2171191.264 ops/s
Iteration   4: 2180587.202 ops/s
Iteration   5: 2139756.184 ops/s
Iteration   6: 2172237.483 ops/s
Iteration   7: 2154400.335 ops/s
Iteration   8: 2168737.423 ops/s
Iteration   9: 2144723.834 ops/s
Iteration  10: 2145075.858 ops/s
Iteration  11: 2153801.435 ops/s
Iteration  12: 2156455.574 ops/s
Iteration  13: 2181022.839 ops/s
Iteration  14: 2155825.262 ops/s
Iteration  15: 2146504.665 ops/s
Iteration  16: 2161842.996 ops/s
Iteration  17: 2169105.211 ops/s
Iteration  18: 2149852.415 ops/s
Iteration  19: 2186367.759 ops/s
Iteration  20: 2161530.349 ops/s
Iteration  21: 2192453.530 ops/s
Iteration  22: 2163068.109 ops/s
Iteration  23: 2152349.146 ops/s
Iteration  24: 2169025.467 ops/s
Iteration  25: 2146287.209 ops/s
Iteration  26: 2198743.301 ops/s
Iteration  27: 2159670.226 ops/s
Iteration  28: 2173679.058 ops/s
Iteration  29: 2141428.983 ops/s
Iteration  30: 2167144.625 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArrayTest._Benchmark.benchmark_conditionalOneByOne":
  2163014.648 ±(99.9%) 10158.897 ops/s [Average]
  (min, avg, max) = (2139756.184, 2163014.648, 2198743.301), stdev = 15205.360
  CI (99.9%): [2152855.751, 2173173.545] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
FlowableFromArrayTest._Benchmark.benchmark_conditionalOneByOne  thrpt   30  2163014.648 ± 10158.897  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupByTest._Benchmark.benchmark_groupByShouldPropagateError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupByTest._Benchmark.benchmark_groupByShouldPropagateError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 201169.385 ops/s
# Warmup Iteration   2: 362636.580 ops/s
# Warmup Iteration   3: 389063.408 ops/s
# Warmup Iteration   4: 415020.494 ops/s
# Warmup Iteration   5: 415933.208 ops/s
# Warmup Iteration   6: 415064.895 ops/s
# Warmup Iteration   7: 413855.451 ops/s
# Warmup Iteration   8: 414880.524 ops/s
# Warmup Iteration   9: 411415.793 ops/s
# Warmup Iteration  10: 414136.682 ops/s
# Warmup Iteration  11: 413216.575 ops/s
# Warmup Iteration  12: 414165.608 ops/s
# Warmup Iteration  13: 414195.864 ops/s
# Warmup Iteration  14: 414843.102 ops/s
# Warmup Iteration  15: 413260.668 ops/s
# Warmup Iteration  16: 415510.116 ops/s
# Warmup Iteration  17: 422439.930 ops/s
# Warmup Iteration  18: 423983.548 ops/s
# Warmup Iteration  19: 421670.255 ops/s
# Warmup Iteration  20: 423063.215 ops/s
# Warmup Iteration  21: 424138.764 ops/s
# Warmup Iteration  22: 422800.179 ops/s
# Warmup Iteration  23: 422551.256 ops/s
# Warmup Iteration  24: 419557.526 ops/s
# Warmup Iteration  25: 418311.078 ops/s
# Warmup Iteration  26: 419336.575 ops/s
# Warmup Iteration  27: 421685.004 ops/s
# Warmup Iteration  28: 421478.024 ops/s
# Warmup Iteration  29: 418599.923 ops/s
# Warmup Iteration  30: 420903.160 ops/s
Iteration   1: 418110.509 ops/s
Iteration   2: 419966.136 ops/s
Iteration   3: 423403.767 ops/s
Iteration   4: 421103.685 ops/s
Iteration   5: 421858.968 ops/s
Iteration   6: 421756.314 ops/s
Iteration   7: 423500.889 ops/s
Iteration   8: 419401.734 ops/s
Iteration   9: 420623.288 ops/s
Iteration  10: 423608.071 ops/s
Iteration  11: 420832.924 ops/s
Iteration  12: 421326.482 ops/s
Iteration  13: 424441.359 ops/s
Iteration  14: 423693.652 ops/s
Iteration  15: 422322.426 ops/s
Iteration  16: 423004.342 ops/s
Iteration  17: 421515.260 ops/s
Iteration  18: 422100.035 ops/s
Iteration  19: 421911.206 ops/s
Iteration  20: 420956.599 ops/s
Iteration  21: 422151.847 ops/s
Iteration  22: 424197.194 ops/s
Iteration  23: 422428.796 ops/s
Iteration  24: 422697.244 ops/s
Iteration  25: 422213.570 ops/s
Iteration  26: 422563.873 ops/s
Iteration  27: 423304.982 ops/s
Iteration  28: 422133.056 ops/s
Iteration  29: 422763.509 ops/s
Iteration  30: 422584.101 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupByTest._Benchmark.benchmark_groupByShouldPropagateError":
  422082.527 ±(99.9%) 936.889 ops/s [Average]
  (min, avg, max) = (418110.509, 422082.527, 424441.359), stdev = 1402.291
  CI (99.9%): [421145.638, 423019.416] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score     Error  Units
FlowableGroupByTest._Benchmark.benchmark_groupByShouldPropagateError  thrpt   30  422082.527 ± 936.889  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupByTest._Benchmark.benchmark_groupSyncFusionRejected$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupByTest._Benchmark.benchmark_groupSyncFusionRejected

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 712624.974 ops/s
# Warmup Iteration   2: 1221616.047 ops/s
# Warmup Iteration   3: 1379799.546 ops/s
# Warmup Iteration   4: 1377220.842 ops/s
# Warmup Iteration   5: 1388857.936 ops/s
# Warmup Iteration   6: 1372580.471 ops/s
# Warmup Iteration   7: 1375361.488 ops/s
# Warmup Iteration   8: 1383029.497 ops/s
# Warmup Iteration   9: 1382987.655 ops/s
# Warmup Iteration  10: 1388905.727 ops/s
# Warmup Iteration  11: 1385456.926 ops/s
# Warmup Iteration  12: 1378219.940 ops/s
# Warmup Iteration  13: 1386029.934 ops/s
# Warmup Iteration  14: 1391665.099 ops/s
# Warmup Iteration  15: 1393753.553 ops/s
# Warmup Iteration  16: 1382879.024 ops/s
# Warmup Iteration  17: 1375678.535 ops/s
# Warmup Iteration  18: 1384803.161 ops/s
# Warmup Iteration  19: 1373803.020 ops/s
# Warmup Iteration  20: 1380046.856 ops/s
# Warmup Iteration  21: 1383644.730 ops/s
# Warmup Iteration  22: 1383026.327 ops/s
# Warmup Iteration  23: 1383722.300 ops/s
# Warmup Iteration  24: 1380084.797 ops/s
# Warmup Iteration  25: 1372752.015 ops/s
# Warmup Iteration  26: 1377067.790 ops/s
# Warmup Iteration  27: 1382516.024 ops/s
# Warmup Iteration  28: 1381159.691 ops/s
# Warmup Iteration  29: 1375358.920 ops/s
# Warmup Iteration  30: 1376474.640 ops/s
Iteration   1: 1384968.019 ops/s
Iteration   2: 1387229.367 ops/s
Iteration   3: 1383448.181 ops/s
Iteration   4: 1393659.365 ops/s
Iteration   5: 1375728.444 ops/s
Iteration   6: 1377443.592 ops/s
Iteration   7: 1380992.711 ops/s
Iteration   8: 1377404.093 ops/s
Iteration   9: 1380355.367 ops/s
Iteration  10: 1375051.146 ops/s
Iteration  11: 1378969.294 ops/s
Iteration  12: 1383826.121 ops/s
Iteration  13: 1376127.723 ops/s
Iteration  14: 1380288.289 ops/s
Iteration  15: 1385428.329 ops/s
Iteration  16: 1377661.408 ops/s
Iteration  17: 1360797.798 ops/s
Iteration  18: 1373781.527 ops/s
Iteration  19: 1385887.954 ops/s
Iteration  20: 1376910.958 ops/s
Iteration  21: 1391032.885 ops/s
Iteration  22: 1380559.894 ops/s
Iteration  23: 1374340.478 ops/s
Iteration  24: 1369054.367 ops/s
Iteration  25: 1383005.092 ops/s
Iteration  26: 1383724.152 ops/s
Iteration  27: 1379997.526 ops/s
Iteration  28: 1391163.231 ops/s
Iteration  29: 1379846.127 ops/s
Iteration  30: 1374283.647 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupByTest._Benchmark.benchmark_groupSyncFusionRejected":
  1380098.903 ±(99.9%) 4479.527 ops/s [Average]
  (min, avg, max) = (1360797.798, 1380098.903, 1393659.365), stdev = 6704.746
  CI (99.9%): [1375619.376, 1384578.430] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
FlowableGroupByTest._Benchmark.benchmark_groupSyncFusionRejected  thrpt   30  1380098.903 ± 4479.527  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupByTest._Benchmark.benchmark_existingGroupValueSelectorFails$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupByTest._Benchmark.benchmark_existingGroupValueSelectorFails

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 218025.425 ops/s
# Warmup Iteration   2: 375641.366 ops/s
# Warmup Iteration   3: 411542.187 ops/s
# Warmup Iteration   4: 441174.251 ops/s
# Warmup Iteration   5: 446323.241 ops/s
# Warmup Iteration   6: 446112.908 ops/s
# Warmup Iteration   7: 444190.928 ops/s
# Warmup Iteration   8: 446536.148 ops/s
# Warmup Iteration   9: 444384.148 ops/s
# Warmup Iteration  10: 445034.184 ops/s
# Warmup Iteration  11: 442712.063 ops/s
# Warmup Iteration  12: 444308.137 ops/s
# Warmup Iteration  13: 443207.512 ops/s
# Warmup Iteration  14: 445399.154 ops/s
# Warmup Iteration  15: 444699.635 ops/s
# Warmup Iteration  16: 442267.629 ops/s
# Warmup Iteration  17: 453548.996 ops/s
# Warmup Iteration  18: 453986.259 ops/s
# Warmup Iteration  19: 451917.996 ops/s
# Warmup Iteration  20: 455746.840 ops/s
# Warmup Iteration  21: 453900.879 ops/s
# Warmup Iteration  22: 453437.555 ops/s
# Warmup Iteration  23: 453959.994 ops/s
# Warmup Iteration  24: 450470.354 ops/s
# Warmup Iteration  25: 453470.424 ops/s
# Warmup Iteration  26: 453771.518 ops/s
# Warmup Iteration  27: 453058.903 ops/s
# Warmup Iteration  28: 451362.592 ops/s
# Warmup Iteration  29: 452787.631 ops/s
# Warmup Iteration  30: 452738.954 ops/s
Iteration   1: 453635.790 ops/s
Iteration   2: 451222.167 ops/s
Iteration   3: 453381.753 ops/s
Iteration   4: 455178.904 ops/s
Iteration   5: 452408.707 ops/s
Iteration   6: 456195.941 ops/s
Iteration   7: 451508.494 ops/s
Iteration   8: 452907.811 ops/s
Iteration   9: 453733.902 ops/s
Iteration  10: 451853.209 ops/s
Iteration  11: 455960.934 ops/s
Iteration  12: 452362.203 ops/s
Iteration  13: 452087.431 ops/s
Iteration  14: 454054.474 ops/s
Iteration  15: 450715.424 ops/s
Iteration  16: 455968.297 ops/s
Iteration  17: 455161.121 ops/s
Iteration  18: 453796.293 ops/s
Iteration  19: 451911.022 ops/s
Iteration  20: 455081.270 ops/s
Iteration  21: 452971.430 ops/s
Iteration  22: 454863.066 ops/s
Iteration  23: 453691.497 ops/s
Iteration  24: 453062.904 ops/s
Iteration  25: 453665.090 ops/s
Iteration  26: 451781.160 ops/s
Iteration  27: 456146.349 ops/s
Iteration  28: 453711.288 ops/s
Iteration  29: 454214.198 ops/s
Iteration  30: 452602.681 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupByTest._Benchmark.benchmark_existingGroupValueSelectorFails":
  453527.827 ±(99.9%) 1027.880 ops/s [Average]
  (min, avg, max) = (450715.424, 453527.827, 456195.941), stdev = 1538.483
  CI (99.9%): [452499.947, 454555.707] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score      Error  Units
FlowableGroupByTest._Benchmark.benchmark_existingGroupValueSelectorFails  thrpt   30  453527.827 ± 1027.880  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupByTest._Benchmark.benchmark_outerInnerFusion$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupByTest._Benchmark.benchmark_outerInnerFusion

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 472765.837 ops/s
# Warmup Iteration   2: 682565.381 ops/s
# Warmup Iteration   3: 814595.300 ops/s
# Warmup Iteration   4: 823327.414 ops/s
# Warmup Iteration   5: 825548.370 ops/s
# Warmup Iteration   6: 824777.912 ops/s
# Warmup Iteration   7: 822445.988 ops/s
# Warmup Iteration   8: 821330.059 ops/s
# Warmup Iteration   9: 825351.878 ops/s
# Warmup Iteration  10: 821734.444 ops/s
# Warmup Iteration  11: 819411.852 ops/s
# Warmup Iteration  12: 821738.040 ops/s
# Warmup Iteration  13: 815164.377 ops/s
# Warmup Iteration  14: 825085.026 ops/s
# Warmup Iteration  15: 826931.533 ops/s
# Warmup Iteration  16: 820881.702 ops/s
# Warmup Iteration  17: 828286.440 ops/s
# Warmup Iteration  18: 816948.742 ops/s
# Warmup Iteration  19: 822307.475 ops/s
# Warmup Iteration  20: 819889.310 ops/s
# Warmup Iteration  21: 824575.464 ops/s
# Warmup Iteration  22: 825981.209 ops/s
# Warmup Iteration  23: 818111.269 ops/s
# Warmup Iteration  24: 812819.145 ops/s
# Warmup Iteration  25: 817050.619 ops/s
# Warmup Iteration  26: 819369.811 ops/s
# Warmup Iteration  27: 820302.517 ops/s
# Warmup Iteration  28: 819215.757 ops/s
# Warmup Iteration  29: 824665.847 ops/s
# Warmup Iteration  30: 828673.489 ops/s
Iteration   1: 820991.248 ops/s
Iteration   2: 822836.008 ops/s
Iteration   3: 823165.675 ops/s
Iteration   4: 824806.363 ops/s
Iteration   5: 828433.908 ops/s
Iteration   6: 824461.297 ops/s
Iteration   7: 827415.215 ops/s
Iteration   8: 823323.607 ops/s
Iteration   9: 822535.417 ops/s
Iteration  10: 824760.755 ops/s
Iteration  11: 814720.539 ops/s
Iteration  12: 827335.357 ops/s
Iteration  13: 821796.193 ops/s
Iteration  14: 819738.693 ops/s
Iteration  15: 818783.376 ops/s
Iteration  16: 817749.534 ops/s
Iteration  17: 826128.963 ops/s
Iteration  18: 825824.184 ops/s
Iteration  19: 822834.819 ops/s
Iteration  20: 824821.813 ops/s
Iteration  21: 820325.291 ops/s
Iteration  22: 821233.560 ops/s
Iteration  23: 823247.125 ops/s
Iteration  24: 805500.052 ops/s
Iteration  25: 791630.845 ops/s
Iteration  26: 819876.286 ops/s
Iteration  27: 821876.008 ops/s
Iteration  28: 820368.191 ops/s
Iteration  29: 819819.523 ops/s
Iteration  30: 826692.899 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupByTest._Benchmark.benchmark_outerInnerFusion":
  821101.091 ±(99.9%) 4743.703 ops/s [Average]
  (min, avg, max) = (791630.845, 821101.091, 828433.908), stdev = 7100.151
  CI (99.9%): [816357.389, 825844.794] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
FlowableGroupByTest._Benchmark.benchmark_outerInnerFusion  thrpt   30  821101.091 ± 4743.703  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupByTest._Benchmark.benchmark_mainFusionRejected$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupByTest._Benchmark.benchmark_mainFusionRejected

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 837274.645 ops/s
# Warmup Iteration   2: 1549440.269 ops/s
# Warmup Iteration   3: 1671938.729 ops/s
# Warmup Iteration   4: 1663123.818 ops/s
# Warmup Iteration   5: 1662812.479 ops/s
# Warmup Iteration   6: 1647109.476 ops/s
# Warmup Iteration   7: 1663360.666 ops/s
# Warmup Iteration   8: 1661987.407 ops/s
# Warmup Iteration   9: 1669232.883 ops/s
# Warmup Iteration  10: 1679678.127 ops/s
# Warmup Iteration  11: 1673073.831 ops/s
# Warmup Iteration  12: 1667378.388 ops/s
# Warmup Iteration  13: 1676990.299 ops/s
# Warmup Iteration  14: 1647614.546 ops/s
# Warmup Iteration  15: 1664271.709 ops/s
# Warmup Iteration  16: 1677051.156 ops/s
# Warmup Iteration  17: 1652741.444 ops/s
# Warmup Iteration  18: 1665955.526 ops/s
# Warmup Iteration  19: 1657643.172 ops/s
# Warmup Iteration  20: 1681985.710 ops/s
# Warmup Iteration  21: 1663032.176 ops/s
# Warmup Iteration  22: 1662542.066 ops/s
# Warmup Iteration  23: 1650320.485 ops/s
# Warmup Iteration  24: 1676794.647 ops/s
# Warmup Iteration  25: 1655730.991 ops/s
# Warmup Iteration  26: 1663021.620 ops/s
# Warmup Iteration  27: 1653330.952 ops/s
# Warmup Iteration  28: 1677668.524 ops/s
# Warmup Iteration  29: 1671476.409 ops/s
# Warmup Iteration  30: 1676597.367 ops/s
Iteration   1: 1671636.356 ops/s
Iteration   2: 1671971.498 ops/s
Iteration   3: 1670465.938 ops/s
Iteration   4: 1668085.262 ops/s
Iteration   5: 1669081.063 ops/s
Iteration   6: 1666289.065 ops/s
Iteration   7: 1661991.815 ops/s
Iteration   8: 1669758.806 ops/s
Iteration   9: 1675310.843 ops/s
Iteration  10: 1662498.992 ops/s
Iteration  11: 1663206.899 ops/s
Iteration  12: 1681676.191 ops/s
Iteration  13: 1667275.151 ops/s
Iteration  14: 1648072.389 ops/s
Iteration  15: 1656970.743 ops/s
Iteration  16: 1670042.166 ops/s
Iteration  17: 1663519.028 ops/s
Iteration  18: 1668975.043 ops/s
Iteration  19: 1648819.952 ops/s
Iteration  20: 1680450.052 ops/s
Iteration  21: 1679989.289 ops/s
Iteration  22: 1681699.091 ops/s
Iteration  23: 1654396.321 ops/s
Iteration  24: 1659670.649 ops/s
Iteration  25: 1660623.808 ops/s
Iteration  26: 1668162.939 ops/s
Iteration  27: 1661999.083 ops/s
Iteration  28: 1670169.276 ops/s
Iteration  29: 1687164.242 ops/s
Iteration  30: 1655472.878 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupByTest._Benchmark.benchmark_mainFusionRejected":
  1667181.494 ±(99.9%) 6355.915 ops/s [Average]
  (min, avg, max) = (1648072.389, 1667181.494, 1687164.242), stdev = 9513.235
  CI (99.9%): [1660825.580, 1673537.409] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
FlowableGroupByTest._Benchmark.benchmark_mainFusionRejected  thrpt   30  1667181.494 ± 6355.915  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupByTest._Benchmark.benchmark_backpressureInnerDoesntOverflowOuter$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupByTest._Benchmark.benchmark_backpressureInnerDoesntOverflowOuter

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 858998.299 ops/s
# Warmup Iteration   2: 1620055.927 ops/s
# Warmup Iteration   3: 1756148.984 ops/s
# Warmup Iteration   4: 1760489.157 ops/s
# Warmup Iteration   5: 1754678.628 ops/s
# Warmup Iteration   6: 1756553.845 ops/s
# Warmup Iteration   7: 1747447.461 ops/s
# Warmup Iteration   8: 1756987.223 ops/s
# Warmup Iteration   9: 1762096.517 ops/s
# Warmup Iteration  10: 1760171.105 ops/s
# Warmup Iteration  11: 1765078.552 ops/s
# Warmup Iteration  12: 1745906.590 ops/s
# Warmup Iteration  13: 1747989.239 ops/s
# Warmup Iteration  14: 1754591.912 ops/s
# Warmup Iteration  15: 1762661.582 ops/s
# Warmup Iteration  16: 1776993.703 ops/s
# Warmup Iteration  17: 1752963.158 ops/s
# Warmup Iteration  18: 1763341.891 ops/s
# Warmup Iteration  19: 1755007.533 ops/s
# Warmup Iteration  20: 1746392.216 ops/s
# Warmup Iteration  21: 1764359.322 ops/s
# Warmup Iteration  22: 1771989.011 ops/s
# Warmup Iteration  23: 1745196.401 ops/s
# Warmup Iteration  24: 1752414.796 ops/s
# Warmup Iteration  25: 1767356.123 ops/s
# Warmup Iteration  26: 1760259.733 ops/s
# Warmup Iteration  27: 1765123.777 ops/s
# Warmup Iteration  28: 1752344.738 ops/s
# Warmup Iteration  29: 1774552.407 ops/s
# Warmup Iteration  30: 1755812.347 ops/s
Iteration   1: 1755249.091 ops/s
Iteration   2: 1765436.994 ops/s
Iteration   3: 1754818.636 ops/s
Iteration   4: 1755266.976 ops/s
Iteration   5: 1765612.847 ops/s
Iteration   6: 1785293.090 ops/s
Iteration   7: 1757795.508 ops/s
Iteration   8: 1763148.706 ops/s
Iteration   9: 1751667.845 ops/s
Iteration  10: 1770093.124 ops/s
Iteration  11: 1756390.879 ops/s
Iteration  12: 1754539.984 ops/s
Iteration  13: 1759396.159 ops/s
Iteration  14: 1752676.335 ops/s
Iteration  15: 1764850.158 ops/s
Iteration  16: 1758809.054 ops/s
Iteration  17: 1765556.643 ops/s
Iteration  18: 1746549.876 ops/s
Iteration  19: 1736786.215 ops/s
Iteration  20: 1770387.013 ops/s
Iteration  21: 1771526.418 ops/s
Iteration  22: 1763162.983 ops/s
Iteration  23: 1774520.735 ops/s
Iteration  24: 1768562.643 ops/s
Iteration  25: 1751402.257 ops/s
Iteration  26: 1740986.925 ops/s
Iteration  27: 1766068.913 ops/s
Iteration  28: 1771552.382 ops/s
Iteration  29: 1764542.472 ops/s
Iteration  30: 1779004.689 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupByTest._Benchmark.benchmark_backpressureInnerDoesntOverflowOuter":
  1761388.518 ±(99.9%) 7122.417 ops/s [Average]
  (min, avg, max) = (1736786.215, 1761388.518, 1785293.090), stdev = 10660.499
  CI (99.9%): [1754266.102, 1768510.935] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt        Score      Error  Units
FlowableGroupByTest._Benchmark.benchmark_backpressureInnerDoesntOverflowOuter  thrpt   30  1761388.518 ± 7122.417  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupByTest._Benchmark.benchmark_badRequestInner$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupByTest._Benchmark.benchmark_badRequestInner

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 172992.899 ops/s
# Warmup Iteration   2: 323693.536 ops/s
# Warmup Iteration   3: 313376.178 ops/s
# Warmup Iteration   4: 357942.100 ops/s
# Warmup Iteration   5: 363665.082 ops/s
# Warmup Iteration   6: 361601.362 ops/s
# Warmup Iteration   7: 363347.799 ops/s
# Warmup Iteration   8: 363219.277 ops/s
# Warmup Iteration   9: 361852.391 ops/s
# Warmup Iteration  10: 360048.097 ops/s
# Warmup Iteration  11: 360604.788 ops/s
# Warmup Iteration  12: 360421.403 ops/s
# Warmup Iteration  13: 360640.821 ops/s
# Warmup Iteration  14: 361221.017 ops/s
# Warmup Iteration  15: 362139.684 ops/s
# Warmup Iteration  16: 359385.185 ops/s
# Warmup Iteration  17: 372951.514 ops/s
# Warmup Iteration  18: 369737.973 ops/s
# Warmup Iteration  19: 367150.339 ops/s
# Warmup Iteration  20: 371818.903 ops/s
# Warmup Iteration  21: 370294.111 ops/s
# Warmup Iteration  22: 368623.706 ops/s
# Warmup Iteration  23: 368749.872 ops/s
# Warmup Iteration  24: 366584.551 ops/s
# Warmup Iteration  25: 370304.976 ops/s
# Warmup Iteration  26: 369513.757 ops/s
# Warmup Iteration  27: 370909.980 ops/s
# Warmup Iteration  28: 369252.736 ops/s
# Warmup Iteration  29: 371208.691 ops/s
# Warmup Iteration  30: 368246.961 ops/s
Iteration   1: 370492.032 ops/s
Iteration   2: 369506.623 ops/s
Iteration   3: 370857.988 ops/s
Iteration   4: 367766.103 ops/s
Iteration   5: 369140.695 ops/s
Iteration   6: 368122.373 ops/s
Iteration   7: 370126.040 ops/s
Iteration   8: 367662.292 ops/s
Iteration   9: 367591.173 ops/s
Iteration  10: 368766.230 ops/s
Iteration  11: 368815.320 ops/s
Iteration  12: 367917.938 ops/s
Iteration  13: 371028.541 ops/s
Iteration  14: 369648.819 ops/s
Iteration  15: 368506.680 ops/s
Iteration  16: 370197.206 ops/s
Iteration  17: 370775.709 ops/s
Iteration  18: 368282.199 ops/s
Iteration  19: 371703.430 ops/s
Iteration  20: 370442.412 ops/s
Iteration  21: 369736.765 ops/s
Iteration  22: 368095.225 ops/s
Iteration  23: 370758.627 ops/s
Iteration  24: 370876.547 ops/s
Iteration  25: 371247.662 ops/s
Iteration  26: 370190.424 ops/s
Iteration  27: 371554.166 ops/s
Iteration  28: 368514.454 ops/s
Iteration  29: 368071.320 ops/s
Iteration  30: 370887.378 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupByTest._Benchmark.benchmark_badRequestInner":
  369576.079 ±(99.9%) 872.810 ops/s [Average]
  (min, avg, max) = (367591.173, 369576.079, 371703.430), stdev = 1306.381
  CI (99.9%): [368703.269, 370448.889] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score     Error  Units
FlowableGroupByTest._Benchmark.benchmark_badRequestInner  thrpt   30  369576.079 ± 872.810  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupByTest._Benchmark.benchmark_newGroupValueSelectorFails$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupByTest._Benchmark.benchmark_newGroupValueSelectorFails

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 274434.456 ops/s
# Warmup Iteration   2: 464237.949 ops/s
# Warmup Iteration   3: 448311.912 ops/s
# Warmup Iteration   4: 507000.379 ops/s
# Warmup Iteration   5: 508207.002 ops/s
# Warmup Iteration   6: 507964.183 ops/s
# Warmup Iteration   7: 506709.653 ops/s
# Warmup Iteration   8: 507519.808 ops/s
# Warmup Iteration   9: 505961.961 ops/s
# Warmup Iteration  10: 505833.873 ops/s
# Warmup Iteration  11: 504741.007 ops/s
# Warmup Iteration  12: 501930.377 ops/s
# Warmup Iteration  13: 505768.997 ops/s
# Warmup Iteration  14: 502142.186 ops/s
# Warmup Iteration  15: 504660.295 ops/s
# Warmup Iteration  16: 504311.833 ops/s
# Warmup Iteration  17: 518264.993 ops/s
# Warmup Iteration  18: 519616.401 ops/s
# Warmup Iteration  19: 519681.828 ops/s
# Warmup Iteration  20: 519586.266 ops/s
# Warmup Iteration  21: 520016.681 ops/s
# Warmup Iteration  22: 516453.861 ops/s
# Warmup Iteration  23: 517854.849 ops/s
# Warmup Iteration  24: 518859.649 ops/s
# Warmup Iteration  25: 517939.551 ops/s
# Warmup Iteration  26: 517756.323 ops/s
# Warmup Iteration  27: 519878.063 ops/s
# Warmup Iteration  28: 517972.166 ops/s
# Warmup Iteration  29: 520121.185 ops/s
# Warmup Iteration  30: 517510.932 ops/s
Iteration   1: 519220.675 ops/s
Iteration   2: 518908.802 ops/s
Iteration   3: 520436.601 ops/s
Iteration   4: 520302.700 ops/s
Iteration   5: 518293.862 ops/s
Iteration   6: 518380.335 ops/s
Iteration   7: 520466.002 ops/s
Iteration   8: 518781.190 ops/s
Iteration   9: 517188.038 ops/s
Iteration  10: 517265.977 ops/s
Iteration  11: 521536.372 ops/s
Iteration  12: 518508.911 ops/s
Iteration  13: 518259.980 ops/s
Iteration  14: 519459.595 ops/s
Iteration  15: 519056.267 ops/s
Iteration  16: 520464.955 ops/s
Iteration  17: 518860.835 ops/s
Iteration  18: 519143.356 ops/s
Iteration  19: 521546.951 ops/s
Iteration  20: 518144.092 ops/s
Iteration  21: 521383.717 ops/s
Iteration  22: 521328.381 ops/s
Iteration  23: 519142.530 ops/s
Iteration  24: 519980.503 ops/s
Iteration  25: 520819.563 ops/s
Iteration  26: 516941.948 ops/s
Iteration  27: 520555.599 ops/s
Iteration  28: 520738.461 ops/s
Iteration  29: 519255.088 ops/s
Iteration  30: 518379.817 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupByTest._Benchmark.benchmark_newGroupValueSelectorFails":
  519425.037 ±(99.9%) 878.443 ops/s [Average]
  (min, avg, max) = (516941.948, 519425.037, 521546.951), stdev = 1314.812
  CI (99.9%): [518546.594, 520303.480] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score     Error  Units
FlowableGroupByTest._Benchmark.benchmark_newGroupValueSelectorFails  thrpt   30  519425.037 ± 878.443  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupByTest._Benchmark.benchmark_badSource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupByTest._Benchmark.benchmark_badSource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 125119.774 ops/s
# Warmup Iteration   2: 242791.647 ops/s
# Warmup Iteration   3: 241715.012 ops/s
# Warmup Iteration   4: 271460.908 ops/s
# Warmup Iteration   5: 272638.930 ops/s
# Warmup Iteration   6: 272806.749 ops/s
# Warmup Iteration   7: 272893.572 ops/s
# Warmup Iteration   8: 273787.924 ops/s
# Warmup Iteration   9: 273751.043 ops/s
# Warmup Iteration  10: 273100.476 ops/s
# Warmup Iteration  11: 271095.674 ops/s
# Warmup Iteration  12: 273307.198 ops/s
# Warmup Iteration  13: 271725.270 ops/s
# Warmup Iteration  14: 273334.541 ops/s
# Warmup Iteration  15: 272755.569 ops/s
# Warmup Iteration  16: 273125.769 ops/s
# Warmup Iteration  17: 280582.145 ops/s
# Warmup Iteration  18: 280494.786 ops/s
# Warmup Iteration  19: 281193.515 ops/s
# Warmup Iteration  20: 279977.351 ops/s
# Warmup Iteration  21: 281009.765 ops/s
# Warmup Iteration  22: 279486.865 ops/s
# Warmup Iteration  23: 280326.090 ops/s
# Warmup Iteration  24: 282050.815 ops/s
# Warmup Iteration  25: 280213.811 ops/s
# Warmup Iteration  26: 280139.338 ops/s
# Warmup Iteration  27: 282224.953 ops/s
# Warmup Iteration  28: 280089.369 ops/s
# Warmup Iteration  29: 280173.060 ops/s
# Warmup Iteration  30: 280688.089 ops/s
Iteration   1: 280190.854 ops/s
Iteration   2: 281444.728 ops/s
Iteration   3: 281812.104 ops/s
Iteration   4: 281112.398 ops/s
Iteration   5: 280153.730 ops/s
Iteration   6: 280215.955 ops/s
Iteration   7: 280499.627 ops/s
Iteration   8: 282184.192 ops/s
Iteration   9: 281225.156 ops/s
Iteration  10: 279595.875 ops/s
Iteration  11: 281369.064 ops/s
Iteration  12: 279964.195 ops/s
Iteration  13: 279148.425 ops/s
Iteration  14: 279639.415 ops/s
Iteration  15: 281811.575 ops/s
Iteration  16: 281299.514 ops/s
Iteration  17: 280362.316 ops/s
Iteration  18: 279890.664 ops/s
Iteration  19: 282665.125 ops/s
Iteration  20: 280123.733 ops/s
Iteration  21: 280264.447 ops/s
Iteration  22: 280331.974 ops/s
Iteration  23: 280008.450 ops/s
Iteration  24: 280741.267 ops/s
Iteration  25: 279263.747 ops/s
Iteration  26: 281560.214 ops/s
Iteration  27: 279834.112 ops/s
Iteration  28: 281165.868 ops/s
Iteration  29: 276885.636 ops/s
Iteration  30: 282321.832 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupByTest._Benchmark.benchmark_badSource":
  280569.540 ±(99.9%) 772.941 ops/s [Average]
  (min, avg, max) = (276885.636, 280569.540, 282665.125), stdev = 1156.902
  CI (99.9%): [279796.599, 281342.481] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score     Error  Units
FlowableGroupByTest._Benchmark.benchmark_badSource  thrpt   30  280569.540 ± 772.941  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupByTest._Benchmark.benchmark_valueSelectorCrashAndMissingBackpressure$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupByTest._Benchmark.benchmark_valueSelectorCrashAndMissingBackpressure

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 180082.232 ops/s
# Warmup Iteration   2: 301119.749 ops/s
# Warmup Iteration   3: 290895.836 ops/s
# Warmup Iteration   4: 328403.172 ops/s
# Warmup Iteration   5: 330998.559 ops/s
# Warmup Iteration   6: 328919.976 ops/s
# Warmup Iteration   7: 328960.556 ops/s
# Warmup Iteration   8: 327755.986 ops/s
# Warmup Iteration   9: 330114.930 ops/s
# Warmup Iteration  10: 329264.482 ops/s
# Warmup Iteration  11: 326737.357 ops/s
# Warmup Iteration  12: 327309.132 ops/s
# Warmup Iteration  13: 326396.863 ops/s
# Warmup Iteration  14: 328849.671 ops/s
# Warmup Iteration  15: 326525.102 ops/s
# Warmup Iteration  16: 326374.683 ops/s
# Warmup Iteration  17: 339072.846 ops/s
# Warmup Iteration  18: 338433.155 ops/s
# Warmup Iteration  19: 337879.827 ops/s
# Warmup Iteration  20: 339094.934 ops/s
# Warmup Iteration  21: 339353.576 ops/s
# Warmup Iteration  22: 338584.323 ops/s
# Warmup Iteration  23: 337218.862 ops/s
# Warmup Iteration  24: 339628.570 ops/s
# Warmup Iteration  25: 337508.394 ops/s
# Warmup Iteration  26: 338369.445 ops/s
# Warmup Iteration  27: 337823.243 ops/s
# Warmup Iteration  28: 338910.142 ops/s
# Warmup Iteration  29: 338801.129 ops/s
# Warmup Iteration  30: 340057.613 ops/s
Iteration   1: 339382.425 ops/s
Iteration   2: 339531.028 ops/s
Iteration   3: 339216.084 ops/s
Iteration   4: 338954.916 ops/s
Iteration   5: 338818.832 ops/s
Iteration   6: 339858.101 ops/s
Iteration   7: 336923.863 ops/s
Iteration   8: 340710.435 ops/s
Iteration   9: 338831.069 ops/s
Iteration  10: 338324.630 ops/s
Iteration  11: 338577.131 ops/s
Iteration  12: 338949.879 ops/s
Iteration  13: 338217.030 ops/s
Iteration  14: 338984.374 ops/s
Iteration  15: 335660.462 ops/s
Iteration  16: 339720.370 ops/s
Iteration  17: 339693.304 ops/s
Iteration  18: 338218.789 ops/s
Iteration  19: 338696.856 ops/s
Iteration  20: 337345.014 ops/s
Iteration  21: 339569.740 ops/s
Iteration  22: 338760.066 ops/s
Iteration  23: 338478.251 ops/s
Iteration  24: 338506.321 ops/s
Iteration  25: 339832.115 ops/s
Iteration  26: 336246.615 ops/s
Iteration  27: 337700.654 ops/s
Iteration  28: 338797.772 ops/s
Iteration  29: 336857.044 ops/s
Iteration  30: 337280.148 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupByTest._Benchmark.benchmark_valueSelectorCrashAndMissingBackpressure":
  338554.777 ±(99.9%) 763.370 ops/s [Average]
  (min, avg, max) = (335660.462, 338554.777, 340710.435), stdev = 1142.576
  CI (99.9%): [337791.407, 339318.147] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           Mode  Cnt       Score     Error  Units
FlowableGroupByTest._Benchmark.benchmark_valueSelectorCrashAndMissingBackpressure  thrpt   30  338554.777 ± 763.370  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCreateTest._Benchmark.benchmark_serializedMissingMoreWorkWithComplete$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCreateTest._Benchmark.benchmark_serializedMissingMoreWorkWithComplete

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1384263.886 ops/s
# Warmup Iteration   2: 2305630.848 ops/s
# Warmup Iteration   3: 2822323.024 ops/s
# Warmup Iteration   4: 2829561.949 ops/s
# Warmup Iteration   5: 2852116.472 ops/s
# Warmup Iteration   6: 2856559.814 ops/s
# Warmup Iteration   7: 2857875.263 ops/s
# Warmup Iteration   8: 2858290.203 ops/s
# Warmup Iteration   9: 2886472.978 ops/s
# Warmup Iteration  10: 2869838.221 ops/s
# Warmup Iteration  11: 2853186.432 ops/s
# Warmup Iteration  12: 2843950.765 ops/s
# Warmup Iteration  13: 2853749.919 ops/s
# Warmup Iteration  14: 2867335.976 ops/s
# Warmup Iteration  15: 2861249.835 ops/s
# Warmup Iteration  16: 2843167.673 ops/s
# Warmup Iteration  17: 2865488.947 ops/s
# Warmup Iteration  18: 2853572.890 ops/s
# Warmup Iteration  19: 2837573.857 ops/s
# Warmup Iteration  20: 2883442.918 ops/s
# Warmup Iteration  21: 2855915.998 ops/s
# Warmup Iteration  22: 2848258.515 ops/s
# Warmup Iteration  23: 2858040.874 ops/s
# Warmup Iteration  24: 2864898.948 ops/s
# Warmup Iteration  25: 2850938.424 ops/s
# Warmup Iteration  26: 2843201.304 ops/s
# Warmup Iteration  27: 2887139.422 ops/s
# Warmup Iteration  28: 2872342.812 ops/s
# Warmup Iteration  29: 2879624.016 ops/s
# Warmup Iteration  30: 2857940.513 ops/s
Iteration   1: 2874232.130 ops/s
Iteration   2: 2867671.252 ops/s
Iteration   3: 2873497.855 ops/s
Iteration   4: 2839978.038 ops/s
Iteration   5: 2864644.873 ops/s
Iteration   6: 2842826.029 ops/s
Iteration   7: 2866489.281 ops/s
Iteration   8: 2858018.584 ops/s
Iteration   9: 2872206.485 ops/s
Iteration  10: 2864276.248 ops/s
Iteration  11: 2850080.759 ops/s
Iteration  12: 2862735.448 ops/s
Iteration  13: 2851632.687 ops/s
Iteration  14: 2867300.788 ops/s
Iteration  15: 2875004.282 ops/s
Iteration  16: 2883569.125 ops/s
Iteration  17: 2867530.788 ops/s
Iteration  18: 2854985.479 ops/s
Iteration  19: 2864157.670 ops/s
Iteration  20: 2885716.154 ops/s
Iteration  21: 2865811.292 ops/s
Iteration  22: 2865950.724 ops/s
Iteration  23: 2887849.912 ops/s
Iteration  24: 2867920.595 ops/s
Iteration  25: 2844208.336 ops/s
Iteration  26: 2847039.989 ops/s
Iteration  27: 2850455.908 ops/s
Iteration  28: 2866235.883 ops/s
Iteration  29: 2858911.028 ops/s
Iteration  30: 2850399.178 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableCreateTest._Benchmark.benchmark_serializedMissingMoreWorkWithComplete":
  2863044.560 ±(99.9%) 8243.335 ops/s [Average]
  (min, avg, max) = (2839978.038, 2863044.560, 2887849.912), stdev = 12338.236
  CI (99.9%): [2854801.225, 2871287.895] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt        Score      Error  Units
FlowableCreateTest._Benchmark.benchmark_serializedMissingMoreWorkWithComplete  thrpt   30  2863044.560 ± 8243.335  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableMapOptionalTest._Benchmark.benchmark_asyncFusedNoneConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableMapOptionalTest._Benchmark.benchmark_asyncFusedNoneConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1071657.687 ops/s
# Warmup Iteration   2: 1825427.014 ops/s
# Warmup Iteration   3: 2095996.047 ops/s
# Warmup Iteration   4: 2112227.596 ops/s
# Warmup Iteration   5: 2101839.234 ops/s
# Warmup Iteration   6: 2104780.612 ops/s
# Warmup Iteration   7: 2100010.644 ops/s
# Warmup Iteration   8: 2101406.442 ops/s
# Warmup Iteration   9: 2111590.607 ops/s
# Warmup Iteration  10: 2105005.035 ops/s
# Warmup Iteration  11: 2117741.526 ops/s
# Warmup Iteration  12: 2102575.387 ops/s
# Warmup Iteration  13: 2109363.783 ops/s
# Warmup Iteration  14: 2114144.479 ops/s
# Warmup Iteration  15: 2113285.013 ops/s
# Warmup Iteration  16: 2105024.056 ops/s
# Warmup Iteration  17: 2107895.017 ops/s
# Warmup Iteration  18: 2104598.611 ops/s
# Warmup Iteration  19: 2102303.538 ops/s
# Warmup Iteration  20: 2122922.947 ops/s
# Warmup Iteration  21: 2107108.737 ops/s
# Warmup Iteration  22: 2116692.743 ops/s
# Warmup Iteration  23: 2115354.032 ops/s
# Warmup Iteration  24: 2093872.238 ops/s
# Warmup Iteration  25: 2104359.688 ops/s
# Warmup Iteration  26: 2107946.453 ops/s
# Warmup Iteration  27: 2118856.092 ops/s
# Warmup Iteration  28: 2088052.161 ops/s
# Warmup Iteration  29: 2104335.355 ops/s
# Warmup Iteration  30: 2096697.514 ops/s
Iteration   1: 2087561.395 ops/s
Iteration   2: 2081850.054 ops/s
Iteration   3: 2073659.354 ops/s
Iteration   4: 2098495.432 ops/s
Iteration   5: 2085356.116 ops/s
Iteration   6: 2105439.443 ops/s
Iteration   7: 2107764.757 ops/s
Iteration   8: 2077998.774 ops/s
Iteration   9: 2110068.006 ops/s
Iteration  10: 2077175.779 ops/s
Iteration  11: 2087636.697 ops/s
Iteration  12: 2107286.626 ops/s
Iteration  13: 2121207.709 ops/s
Iteration  14: 2088371.299 ops/s
Iteration  15: 2087821.596 ops/s
Iteration  16: 2099985.811 ops/s
Iteration  17: 2094447.602 ops/s
Iteration  18: 2104660.441 ops/s
Iteration  19: 2098708.036 ops/s
Iteration  20: 2129763.339 ops/s
Iteration  21: 2082408.329 ops/s
Iteration  22: 2100101.179 ops/s
Iteration  23: 2099636.474 ops/s
Iteration  24: 2102890.649 ops/s
Iteration  25: 2103473.909 ops/s
Iteration  26: 2090155.178 ops/s
Iteration  27: 2116256.134 ops/s
Iteration  28: 2088326.260 ops/s
Iteration  29: 2099340.721 ops/s
Iteration  30: 2082688.178 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableMapOptionalTest._Benchmark.benchmark_asyncFusedNoneConditional":
  2096351.176 ±(99.9%) 8945.157 ops/s [Average]
  (min, avg, max) = (2073659.354, 2096351.176, 2129763.339), stdev = 13388.692
  CI (99.9%): [2087406.018, 2105296.333] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score      Error  Units
FlowableMapOptionalTest._Benchmark.benchmark_asyncFusedNoneConditional  thrpt   30  2096351.176 ± 8945.157  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableMapOptionalTest._Benchmark.benchmark_asyncFusedAllConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableMapOptionalTest._Benchmark.benchmark_asyncFusedAllConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1046355.984 ops/s
# Warmup Iteration   2: 1742411.219 ops/s
# Warmup Iteration   3: 1948871.537 ops/s
# Warmup Iteration   4: 1921586.708 ops/s
# Warmup Iteration   5: 1958597.291 ops/s
# Warmup Iteration   6: 1939636.960 ops/s
# Warmup Iteration   7: 1968033.014 ops/s
# Warmup Iteration   8: 1944445.855 ops/s
# Warmup Iteration   9: 1947191.343 ops/s
# Warmup Iteration  10: 1955466.845 ops/s
# Warmup Iteration  11: 1964733.302 ops/s
# Warmup Iteration  12: 1955272.310 ops/s
# Warmup Iteration  13: 1946442.420 ops/s
# Warmup Iteration  14: 1960929.867 ops/s
# Warmup Iteration  15: 1956184.137 ops/s
# Warmup Iteration  16: 1949600.202 ops/s
# Warmup Iteration  17: 1966908.195 ops/s
# Warmup Iteration  18: 1957843.950 ops/s
# Warmup Iteration  19: 1962770.102 ops/s
# Warmup Iteration  20: 1956612.241 ops/s
# Warmup Iteration  21: 1950901.201 ops/s
# Warmup Iteration  22: 1967012.707 ops/s
# Warmup Iteration  23: 1966651.412 ops/s
# Warmup Iteration  24: 1968192.220 ops/s
# Warmup Iteration  25: 1965605.101 ops/s
# Warmup Iteration  26: 1971349.880 ops/s
# Warmup Iteration  27: 1966045.230 ops/s
# Warmup Iteration  28: 1970073.457 ops/s
# Warmup Iteration  29: 1968979.644 ops/s
# Warmup Iteration  30: 1954657.726 ops/s
Iteration   1: 1962190.390 ops/s
Iteration   2: 1958503.972 ops/s
Iteration   3: 1986467.665 ops/s
Iteration   4: 1966431.685 ops/s
Iteration   5: 1955267.866 ops/s
Iteration   6: 1959600.102 ops/s
Iteration   7: 1953123.807 ops/s
Iteration   8: 1977946.498 ops/s
Iteration   9: 1961360.194 ops/s
Iteration  10: 1953331.875 ops/s
Iteration  11: 1948060.448 ops/s
Iteration  12: 1954140.775 ops/s
Iteration  13: 1968998.673 ops/s
Iteration  14: 1976743.051 ops/s
Iteration  15: 1947500.166 ops/s
Iteration  16: 1962831.242 ops/s
Iteration  17: 1948076.138 ops/s
Iteration  18: 1957211.972 ops/s
Iteration  19: 1963669.640 ops/s
Iteration  20: 1957146.807 ops/s
Iteration  21: 1969287.287 ops/s
Iteration  22: 1964713.311 ops/s
Iteration  23: 1977295.898 ops/s
Iteration  24: 1961902.330 ops/s
Iteration  25: 1951312.800 ops/s
Iteration  26: 1963192.482 ops/s
Iteration  27: 1965020.824 ops/s
Iteration  28: 1968898.898 ops/s
Iteration  29: 1966105.825 ops/s
Iteration  30: 1972978.646 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableMapOptionalTest._Benchmark.benchmark_asyncFusedAllConditional":
  1962643.709 ±(99.9%) 6396.919 ops/s [Average]
  (min, avg, max) = (1947500.166, 1962643.709, 1986467.665), stdev = 9574.607
  CI (99.9%): [1956246.790, 1969040.628] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
FlowableMapOptionalTest._Benchmark.benchmark_asyncFusedAllConditional  thrpt   30  1962643.709 ± 6396.919  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableMapOptionalTest._Benchmark.benchmark_asyncFusedMixedConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableMapOptionalTest._Benchmark.benchmark_asyncFusedMixedConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 874968.200 ops/s
# Warmup Iteration   2: 1220054.176 ops/s
# Warmup Iteration   3: 1483871.017 ops/s
# Warmup Iteration   4: 1489796.990 ops/s
# Warmup Iteration   5: 1486749.753 ops/s
# Warmup Iteration   6: 1482692.217 ops/s
# Warmup Iteration   7: 1477925.710 ops/s
# Warmup Iteration   8: 1472750.490 ops/s
# Warmup Iteration   9: 1475814.702 ops/s
# Warmup Iteration  10: 1471888.611 ops/s
# Warmup Iteration  11: 1473190.476 ops/s
# Warmup Iteration  12: 1464286.938 ops/s
# Warmup Iteration  13: 1470074.868 ops/s
# Warmup Iteration  14: 1475636.141 ops/s
# Warmup Iteration  15: 1463539.235 ops/s
# Warmup Iteration  16: 1479495.335 ops/s
# Warmup Iteration  17: 1465232.955 ops/s
# Warmup Iteration  18: 1483012.330 ops/s
# Warmup Iteration  19: 1467030.123 ops/s
# Warmup Iteration  20: 1486102.850 ops/s
# Warmup Iteration  21: 1480044.382 ops/s
# Warmup Iteration  22: 1470731.718 ops/s
# Warmup Iteration  23: 1476426.567 ops/s
# Warmup Iteration  24: 1477823.861 ops/s
# Warmup Iteration  25: 1481175.597 ops/s
# Warmup Iteration  26: 1491059.282 ops/s
# Warmup Iteration  27: 1472026.253 ops/s
# Warmup Iteration  28: 1465973.490 ops/s
# Warmup Iteration  29: 1458427.401 ops/s
# Warmup Iteration  30: 1469249.657 ops/s
Iteration   1: 1476859.276 ops/s
Iteration   2: 1473416.198 ops/s
Iteration   3: 1482614.373 ops/s
Iteration   4: 1467002.533 ops/s
Iteration   5: 1467331.422 ops/s
Iteration   6: 1465449.848 ops/s
Iteration   7: 1473459.043 ops/s
Iteration   8: 1482622.563 ops/s
Iteration   9: 1472082.325 ops/s
Iteration  10: 1463930.266 ops/s
Iteration  11: 1469204.450 ops/s
Iteration  12: 1467026.810 ops/s
Iteration  13: 1482955.763 ops/s
Iteration  14: 1476030.381 ops/s
Iteration  15: 1482084.911 ops/s
Iteration  16: 1482084.290 ops/s
Iteration  17: 1472986.524 ops/s
Iteration  18: 1454777.568 ops/s
Iteration  19: 1463024.225 ops/s
Iteration  20: 1470214.478 ops/s
Iteration  21: 1466730.769 ops/s
Iteration  22: 1473697.178 ops/s
Iteration  23: 1448794.097 ops/s
Iteration  24: 1466993.441 ops/s
Iteration  25: 1469057.297 ops/s
Iteration  26: 1464721.633 ops/s
Iteration  27: 1469430.594 ops/s
Iteration  28: 1467777.044 ops/s
Iteration  29: 1460315.438 ops/s
Iteration  30: 1474925.162 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableMapOptionalTest._Benchmark.benchmark_asyncFusedMixedConditional":
  1470253.330 ±(99.9%) 5401.428 ops/s [Average]
  (min, avg, max) = (1448794.097, 1470253.330, 1482955.763), stdev = 8084.604
  CI (99.9%): [1464851.902, 1475654.758] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score      Error  Units
FlowableMapOptionalTest._Benchmark.benchmark_asyncFusedMixedConditional  thrpt   30  1470253.330 ± 5401.428  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_windowAbandonmentCancelsUpstreamSkip$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_windowAbandonmentCancelsUpstreamSkip

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 694694.584 ops/s
# Warmup Iteration   2: 1182108.048 ops/s
# Warmup Iteration   3: 1374463.496 ops/s
# Warmup Iteration   4: 1390563.874 ops/s
# Warmup Iteration   5: 1387678.838 ops/s
# Warmup Iteration   6: 1360282.611 ops/s
# Warmup Iteration   7: 1365809.303 ops/s
# Warmup Iteration   8: 1388223.996 ops/s
# Warmup Iteration   9: 1386923.039 ops/s
# Warmup Iteration  10: 1387887.886 ops/s
# Warmup Iteration  11: 1390084.769 ops/s
# Warmup Iteration  12: 1399725.664 ops/s
# Warmup Iteration  13: 1386389.702 ops/s
# Warmup Iteration  14: 1374437.622 ops/s
# Warmup Iteration  15: 1381958.428 ops/s
# Warmup Iteration  16: 1368451.633 ops/s
# Warmup Iteration  17: 1386014.690 ops/s
# Warmup Iteration  18: 1380968.056 ops/s
# Warmup Iteration  19: 1377807.357 ops/s
# Warmup Iteration  20: 1392804.190 ops/s
# Warmup Iteration  21: 1403519.216 ops/s
# Warmup Iteration  22: 1378716.204 ops/s
# Warmup Iteration  23: 1396019.865 ops/s
# Warmup Iteration  24: 1390243.282 ops/s
# Warmup Iteration  25: 1382471.587 ops/s
# Warmup Iteration  26: 1380994.759 ops/s
# Warmup Iteration  27: 1378908.779 ops/s
# Warmup Iteration  28: 1389758.932 ops/s
# Warmup Iteration  29: 1378657.154 ops/s
# Warmup Iteration  30: 1375974.985 ops/s
Iteration   1: 1380056.717 ops/s
Iteration   2: 1374309.919 ops/s
Iteration   3: 1371413.517 ops/s
Iteration   4: 1378129.815 ops/s
Iteration   5: 1391625.977 ops/s
Iteration   6: 1375750.553 ops/s
Iteration   7: 1385406.011 ops/s
Iteration   8: 1391586.557 ops/s
Iteration   9: 1380162.921 ops/s
Iteration  10: 1390869.388 ops/s
Iteration  11: 1380879.406 ops/s
Iteration  12: 1378257.757 ops/s
Iteration  13: 1384469.005 ops/s
Iteration  14: 1388834.864 ops/s
Iteration  15: 1373530.830 ops/s
Iteration  16: 1380183.005 ops/s
Iteration  17: 1381748.682 ops/s
Iteration  18: 1385295.504 ops/s
Iteration  19: 1378753.289 ops/s
Iteration  20: 1402581.830 ops/s
Iteration  21: 1380010.024 ops/s
Iteration  22: 1378592.036 ops/s
Iteration  23: 1369919.724 ops/s
Iteration  24: 1376527.333 ops/s
Iteration  25: 1382346.269 ops/s
Iteration  26: 1373854.848 ops/s
Iteration  27: 1393643.030 ops/s
Iteration  28: 1396077.255 ops/s
Iteration  29: 1402084.167 ops/s
Iteration  30: 1376932.982 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_windowAbandonmentCancelsUpstreamSkip":
  1382794.441 ±(99.9%) 5681.554 ops/s [Average]
  (min, avg, max) = (1369919.724, 1382794.441, 1402581.830), stdev = 8503.884
  CI (99.9%): [1377112.886, 1388475.995] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              Mode  Cnt        Score      Error  Units
FlowableWindowWithSizeTest._Benchmark.benchmark_windowAbandonmentCancelsUpstreamSkip  thrpt   30  1382794.441 ± 5681.554  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.BlockingObservableMostRecentTest._Benchmark.benchmark_mostRecent$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.BlockingObservableMostRecentTest._Benchmark.benchmark_mostRecent

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 6149294.271 ops/s
# Warmup Iteration   2: 7824937.127 ops/s
# Warmup Iteration   3: 9533375.973 ops/s
# Warmup Iteration   4: 9614315.211 ops/s
# Warmup Iteration   5: 9582616.461 ops/s
# Warmup Iteration   6: 9676868.228 ops/s
# Warmup Iteration   7: 9707125.351 ops/s
# Warmup Iteration   8: 9664693.400 ops/s
# Warmup Iteration   9: 9511290.279 ops/s
# Warmup Iteration  10: 9662043.958 ops/s
# Warmup Iteration  11: 9672705.087 ops/s
# Warmup Iteration  12: 9556309.009 ops/s
# Warmup Iteration  13: 9544527.040 ops/s
# Warmup Iteration  14: 9554045.639 ops/s
# Warmup Iteration  15: 9596047.267 ops/s
# Warmup Iteration  16: 9628872.777 ops/s
# Warmup Iteration  17: 9509051.531 ops/s
# Warmup Iteration  18: 9666075.874 ops/s
# Warmup Iteration  19: 9667624.822 ops/s
# Warmup Iteration  20: 9530909.329 ops/s
# Warmup Iteration  21: 9550438.961 ops/s
# Warmup Iteration  22: 9633620.431 ops/s
# Warmup Iteration  23: 9784342.684 ops/s
# Warmup Iteration  24: 9548149.473 ops/s
# Warmup Iteration  25: 9847887.963 ops/s
# Warmup Iteration  26: 9696798.367 ops/s
# Warmup Iteration  27: 9517442.208 ops/s
# Warmup Iteration  28: 9668500.488 ops/s
# Warmup Iteration  29: 9763451.101 ops/s
# Warmup Iteration  30: 9581460.831 ops/s
Iteration   1: 9742225.309 ops/s
Iteration   2: 9599820.152 ops/s
Iteration   3: 9749452.510 ops/s
Iteration   4: 9656416.508 ops/s
Iteration   5: 9573356.182 ops/s
Iteration   6: 9783223.536 ops/s
Iteration   7: 9725480.500 ops/s
Iteration   8: 9775452.484 ops/s
Iteration   9: 9589309.607 ops/s
Iteration  10: 9674211.410 ops/s
Iteration  11: 9695995.533 ops/s
Iteration  12: 9698937.394 ops/s
Iteration  13: 9626522.320 ops/s
Iteration  14: 9693938.049 ops/s
Iteration  15: 9730852.656 ops/s
Iteration  16: 9473898.414 ops/s
Iteration  17: 9739077.921 ops/s
Iteration  18: 9623254.044 ops/s
Iteration  19: 9552485.930 ops/s
Iteration  20: 9606807.368 ops/s
Iteration  21: 9669767.794 ops/s
Iteration  22: 9545842.772 ops/s
Iteration  23: 9633043.907 ops/s
Iteration  24: 9592545.313 ops/s
Iteration  25: 9604869.665 ops/s
Iteration  26: 9762168.993 ops/s
Iteration  27: 9536205.773 ops/s
Iteration  28: 9651237.304 ops/s
Iteration  29: 9653547.955 ops/s
Iteration  30: 9652824.704 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.BlockingObservableMostRecentTest._Benchmark.benchmark_mostRecent":
  9653759.067 ±(99.9%) 52172.931 ops/s [Average]
  (min, avg, max) = (9473898.414, 9653759.067, 9783223.536), stdev = 78089.993
  CI (99.9%): [9601586.136, 9705931.998] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
BlockingObservableMostRecentTest._Benchmark.benchmark_mostRecent  thrpt   30  9653759.067 ± 52172.931  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrErrorTest._Benchmark.benchmark_lastCompletableManualCompleteExceptionallyCancels$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrErrorTest._Benchmark.benchmark_lastCompletableManualCompleteExceptionallyCancels

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 394722.398 ops/s
# Warmup Iteration   2: 459573.738 ops/s
# Warmup Iteration   3: 431001.675 ops/s
# Warmup Iteration   4: 488116.133 ops/s
# Warmup Iteration   5: 490919.170 ops/s
# Warmup Iteration   6: 492306.909 ops/s
# Warmup Iteration   7: 489461.712 ops/s
# Warmup Iteration   8: 492763.389 ops/s
# Warmup Iteration   9: 488977.222 ops/s
# Warmup Iteration  10: 492061.339 ops/s
# Warmup Iteration  11: 490553.007 ops/s
# Warmup Iteration  12: 490408.481 ops/s
# Warmup Iteration  13: 491946.722 ops/s
# Warmup Iteration  14: 491533.436 ops/s
# Warmup Iteration  15: 489573.137 ops/s
# Warmup Iteration  16: 491256.925 ops/s
# Warmup Iteration  17: 517244.589 ops/s
# Warmup Iteration  18: 517946.461 ops/s
# Warmup Iteration  19: 516214.370 ops/s
# Warmup Iteration  20: 513250.153 ops/s
# Warmup Iteration  21: 514727.594 ops/s
# Warmup Iteration  22: 516309.175 ops/s
# Warmup Iteration  23: 516217.985 ops/s
# Warmup Iteration  24: 518156.542 ops/s
# Warmup Iteration  25: 517884.771 ops/s
# Warmup Iteration  26: 516812.859 ops/s
# Warmup Iteration  27: 517731.121 ops/s
# Warmup Iteration  28: 515584.621 ops/s
# Warmup Iteration  29: 516048.988 ops/s
# Warmup Iteration  30: 514440.304 ops/s
Iteration   1: 518167.413 ops/s
Iteration   2: 516314.883 ops/s
Iteration   3: 516834.148 ops/s
Iteration   4: 515168.360 ops/s
Iteration   5: 515777.458 ops/s
Iteration   6: 516161.253 ops/s
Iteration   7: 515397.883 ops/s
Iteration   8: 517843.378 ops/s
Iteration   9: 515693.059 ops/s
Iteration  10: 519071.744 ops/s
Iteration  11: 516519.979 ops/s
Iteration  12: 516874.751 ops/s
Iteration  13: 519341.627 ops/s
Iteration  14: 518556.483 ops/s
Iteration  15: 514936.016 ops/s
Iteration  16: 516078.457 ops/s
Iteration  17: 513876.573 ops/s
Iteration  18: 516804.063 ops/s
Iteration  19: 517888.212 ops/s
Iteration  20: 514397.077 ops/s
Iteration  21: 516592.454 ops/s
Iteration  22: 516063.852 ops/s
Iteration  23: 516336.778 ops/s
Iteration  24: 515274.322 ops/s
Iteration  25: 516752.108 ops/s
Iteration  26: 518629.257 ops/s
Iteration  27: 518006.058 ops/s
Iteration  28: 516162.126 ops/s
Iteration  29: 516582.064 ops/s
Iteration  30: 515761.804 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrErrorTest._Benchmark.benchmark_lastCompletableManualCompleteExceptionallyCancels":
  516595.455 ±(99.9%) 903.202 ops/s [Average]
  (min, avg, max) = (513876.573, 516595.455, 519341.627), stdev = 1351.871
  CI (99.9%): [515692.252, 517498.657] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                                   Mode  Cnt       Score     Error  Units
FlowableStageSubscriberOrErrorTest._Benchmark.benchmark_lastCompletableManualCompleteExceptionallyCancels  thrpt   30  516595.455 ± 903.202  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrErrorTest._Benchmark.benchmark_firstCompletableManualCompleteExceptionallyCancels$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrErrorTest._Benchmark.benchmark_firstCompletableManualCompleteExceptionallyCancels

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 389237.730 ops/s
# Warmup Iteration   2: 453722.174 ops/s
# Warmup Iteration   3: 449832.099 ops/s
# Warmup Iteration   4: 485457.039 ops/s
# Warmup Iteration   5: 487794.763 ops/s
# Warmup Iteration   6: 486364.351 ops/s
# Warmup Iteration   7: 488536.179 ops/s
# Warmup Iteration   8: 490007.227 ops/s
# Warmup Iteration   9: 487799.300 ops/s
# Warmup Iteration  10: 491479.021 ops/s
# Warmup Iteration  11: 487720.860 ops/s
# Warmup Iteration  12: 489807.150 ops/s
# Warmup Iteration  13: 487375.084 ops/s
# Warmup Iteration  14: 487671.172 ops/s
# Warmup Iteration  15: 486155.305 ops/s
# Warmup Iteration  16: 487339.430 ops/s
# Warmup Iteration  17: 514114.114 ops/s
# Warmup Iteration  18: 512957.898 ops/s
# Warmup Iteration  19: 516303.782 ops/s
# Warmup Iteration  20: 514740.551 ops/s
# Warmup Iteration  21: 513999.968 ops/s
# Warmup Iteration  22: 515056.103 ops/s
# Warmup Iteration  23: 513423.430 ops/s
# Warmup Iteration  24: 512453.436 ops/s
# Warmup Iteration  25: 515069.609 ops/s
# Warmup Iteration  26: 509894.540 ops/s
# Warmup Iteration  27: 516578.238 ops/s
# Warmup Iteration  28: 513542.459 ops/s
# Warmup Iteration  29: 513160.823 ops/s
# Warmup Iteration  30: 513942.883 ops/s
Iteration   1: 512608.620 ops/s
Iteration   2: 514893.953 ops/s
Iteration   3: 516823.426 ops/s
Iteration   4: 515070.329 ops/s
Iteration   5: 512555.522 ops/s
Iteration   6: 513708.142 ops/s
Iteration   7: 516002.646 ops/s
Iteration   8: 515482.897 ops/s
Iteration   9: 511440.295 ops/s
Iteration  10: 514764.522 ops/s
Iteration  11: 513172.384 ops/s
Iteration  12: 514990.860 ops/s
Iteration  13: 510834.538 ops/s
Iteration  14: 511707.876 ops/s
Iteration  15: 512980.631 ops/s
Iteration  16: 513013.528 ops/s
Iteration  17: 513062.537 ops/s
Iteration  18: 514849.339 ops/s
Iteration  19: 515727.759 ops/s
Iteration  20: 515474.730 ops/s
Iteration  21: 512507.971 ops/s
Iteration  22: 510590.052 ops/s
Iteration  23: 510461.563 ops/s
Iteration  24: 514115.355 ops/s
Iteration  25: 513931.747 ops/s
Iteration  26: 513397.077 ops/s
Iteration  27: 513671.210 ops/s
Iteration  28: 513249.530 ops/s
Iteration  29: 510951.721 ops/s
Iteration  30: 512424.095 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrErrorTest._Benchmark.benchmark_firstCompletableManualCompleteExceptionallyCancels":
  513482.162 ±(99.9%) 1138.712 ops/s [Average]
  (min, avg, max) = (510461.563, 513482.162, 516823.426), stdev = 1704.370
  CI (99.9%): [512343.450, 514620.874] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                                    Mode  Cnt       Score      Error  Units
FlowableStageSubscriberOrErrorTest._Benchmark.benchmark_firstCompletableManualCompleteExceptionallyCancels  thrpt   30  513482.162 ± 1138.712  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrErrorTest._Benchmark.benchmark_singleCompletableManualCompleteExceptionallyCancels$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrErrorTest._Benchmark.benchmark_singleCompletableManualCompleteExceptionallyCancels

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 395849.652 ops/s
# Warmup Iteration   2: 458507.627 ops/s
# Warmup Iteration   3: 456048.587 ops/s
# Warmup Iteration   4: 493058.724 ops/s
# Warmup Iteration   5: 496879.988 ops/s
# Warmup Iteration   6: 493715.238 ops/s
# Warmup Iteration   7: 495700.583 ops/s
# Warmup Iteration   8: 494039.128 ops/s
# Warmup Iteration   9: 493576.511 ops/s
# Warmup Iteration  10: 495188.125 ops/s
# Warmup Iteration  11: 494733.094 ops/s
# Warmup Iteration  12: 494906.336 ops/s
# Warmup Iteration  13: 493764.348 ops/s
# Warmup Iteration  14: 492321.388 ops/s
# Warmup Iteration  15: 490646.769 ops/s
# Warmup Iteration  16: 492761.518 ops/s
# Warmup Iteration  17: 518932.304 ops/s
# Warmup Iteration  18: 517711.732 ops/s
# Warmup Iteration  19: 518658.371 ops/s
# Warmup Iteration  20: 517409.131 ops/s
# Warmup Iteration  21: 518190.605 ops/s
# Warmup Iteration  22: 519627.613 ops/s
# Warmup Iteration  23: 521247.800 ops/s
# Warmup Iteration  24: 520195.800 ops/s
# Warmup Iteration  25: 517534.730 ops/s
# Warmup Iteration  26: 517599.999 ops/s
# Warmup Iteration  27: 517114.687 ops/s
# Warmup Iteration  28: 516151.815 ops/s
# Warmup Iteration  29: 517680.165 ops/s
# Warmup Iteration  30: 516888.588 ops/s
Iteration   1: 520455.115 ops/s
Iteration   2: 520724.781 ops/s
Iteration   3: 516710.780 ops/s
Iteration   4: 521193.496 ops/s
Iteration   5: 520323.437 ops/s
Iteration   6: 518745.077 ops/s
Iteration   7: 518753.498 ops/s
Iteration   8: 521197.988 ops/s
Iteration   9: 522055.357 ops/s
Iteration  10: 519362.299 ops/s
Iteration  11: 518441.198 ops/s
Iteration  12: 517171.951 ops/s
Iteration  13: 521352.815 ops/s
Iteration  14: 518587.577 ops/s
Iteration  15: 515583.033 ops/s
Iteration  16: 518852.339 ops/s
Iteration  17: 521022.900 ops/s
Iteration  18: 517951.050 ops/s
Iteration  19: 516680.512 ops/s
Iteration  20: 517862.333 ops/s
Iteration  21: 518530.580 ops/s
Iteration  22: 519228.949 ops/s
Iteration  23: 520220.819 ops/s
Iteration  24: 520071.230 ops/s
Iteration  25: 516951.929 ops/s
Iteration  26: 517668.384 ops/s
Iteration  27: 520045.174 ops/s
Iteration  28: 519209.067 ops/s
Iteration  29: 519137.501 ops/s
Iteration  30: 516060.412 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrErrorTest._Benchmark.benchmark_singleCompletableManualCompleteExceptionallyCancels":
  519005.053 ±(99.9%) 1129.725 ops/s [Average]
  (min, avg, max) = (515583.033, 519005.053, 522055.357), stdev = 1690.919
  CI (99.9%): [517875.328, 520134.777] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                                       Mode  Cnt       Score      Error  Units
ObservableStageSubscriberOrErrorTest._Benchmark.benchmark_singleCompletableManualCompleteExceptionallyCancels  thrpt   30  519005.053 ± 1129.725  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableHideTest._Benchmark.benchmark_disposed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableHideTest._Benchmark.benchmark_disposed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3837944.188 ops/s
# Warmup Iteration   2: 5996863.189 ops/s
# Warmup Iteration   3: 6479052.444 ops/s
# Warmup Iteration   4: 6444327.253 ops/s
# Warmup Iteration   5: 6427557.543 ops/s
# Warmup Iteration   6: 6443232.679 ops/s
# Warmup Iteration   7: 6454122.191 ops/s
# Warmup Iteration   8: 6435764.152 ops/s
# Warmup Iteration   9: 6476218.598 ops/s
# Warmup Iteration  10: 6451142.854 ops/s
# Warmup Iteration  11: 6419950.705 ops/s
# Warmup Iteration  12: 6456261.420 ops/s
# Warmup Iteration  13: 6501633.015 ops/s
# Warmup Iteration  14: 6453382.654 ops/s
# Warmup Iteration  15: 6467900.624 ops/s
# Warmup Iteration  16: 6511337.623 ops/s
# Warmup Iteration  17: 6433598.802 ops/s
# Warmup Iteration  18: 6478373.687 ops/s
# Warmup Iteration  19: 6463068.086 ops/s
# Warmup Iteration  20: 6490128.070 ops/s
# Warmup Iteration  21: 6452707.913 ops/s
# Warmup Iteration  22: 6501041.025 ops/s
# Warmup Iteration  23: 6444078.941 ops/s
# Warmup Iteration  24: 6472132.385 ops/s
# Warmup Iteration  25: 6436704.704 ops/s
# Warmup Iteration  26: 6429502.303 ops/s
# Warmup Iteration  27: 6503504.935 ops/s
# Warmup Iteration  28: 6443538.688 ops/s
# Warmup Iteration  29: 6470623.309 ops/s
# Warmup Iteration  30: 6454201.929 ops/s
Iteration   1: 6442875.088 ops/s
Iteration   2: 6448456.684 ops/s
Iteration   3: 6422148.280 ops/s
Iteration   4: 6431072.182 ops/s
Iteration   5: 6439774.594 ops/s
Iteration   6: 6495012.912 ops/s
Iteration   7: 6382810.188 ops/s
Iteration   8: 6455144.501 ops/s
Iteration   9: 6504470.874 ops/s
Iteration  10: 6443081.568 ops/s
Iteration  11: 6470205.498 ops/s
Iteration  12: 6531871.686 ops/s
Iteration  13: 6439728.729 ops/s
Iteration  14: 6451699.682 ops/s
Iteration  15: 6473280.122 ops/s
Iteration  16: 6458179.831 ops/s
Iteration  17: 6446009.902 ops/s
Iteration  18: 6380373.719 ops/s
Iteration  19: 6499143.421 ops/s
Iteration  20: 6549244.184 ops/s
Iteration  21: 6480167.578 ops/s
Iteration  22: 6482937.899 ops/s
Iteration  23: 6536287.077 ops/s
Iteration  24: 6462897.964 ops/s
Iteration  25: 6490861.573 ops/s
Iteration  26: 6416866.835 ops/s
Iteration  27: 6380282.853 ops/s
Iteration  28: 6481602.428 ops/s
Iteration  29: 6468728.447 ops/s
Iteration  30: 6418486.585 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableHideTest._Benchmark.benchmark_disposed":
  6459456.763 ±(99.9%) 28487.777 ops/s [Average]
  (min, avg, max) = (6380282.853, 6459456.763, 6549244.184), stdev = 42639.167
  CI (99.9%): [6430968.985, 6487944.540] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt        Score       Error  Units
FlowableHideTest._Benchmark.benchmark_disposed  thrpt   30  6459456.763 ± 28487.777  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorCompleteTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorCompleteTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 5356367.011 ops/s
# Warmup Iteration   2: 6879717.124 ops/s
# Warmup Iteration   3: 7869354.496 ops/s
# Warmup Iteration   4: 7878344.309 ops/s
# Warmup Iteration   5: 7909371.186 ops/s
# Warmup Iteration   6: 7867904.854 ops/s
# Warmup Iteration   7: 7873078.612 ops/s
# Warmup Iteration   8: 7958369.990 ops/s
# Warmup Iteration   9: 7903931.282 ops/s
# Warmup Iteration  10: 7919275.694 ops/s
# Warmup Iteration  11: 7909006.184 ops/s
# Warmup Iteration  12: 7885720.576 ops/s
# Warmup Iteration  13: 7876129.113 ops/s
# Warmup Iteration  14: 7915318.581 ops/s
# Warmup Iteration  15: 7930609.281 ops/s
# Warmup Iteration  16: 7909203.567 ops/s
# Warmup Iteration  17: 7879730.087 ops/s
# Warmup Iteration  18: 7867107.006 ops/s
# Warmup Iteration  19: 7891646.593 ops/s
# Warmup Iteration  20: 7892757.063 ops/s
# Warmup Iteration  21: 7861941.299 ops/s
# Warmup Iteration  22: 7878428.344 ops/s
# Warmup Iteration  23: 7923028.133 ops/s
# Warmup Iteration  24: 7966728.518 ops/s
# Warmup Iteration  25: 7958684.611 ops/s
# Warmup Iteration  26: 7896016.955 ops/s
# Warmup Iteration  27: 7920085.430 ops/s
# Warmup Iteration  28: 7932454.008 ops/s
# Warmup Iteration  29: 7861678.453 ops/s
# Warmup Iteration  30: 7939294.387 ops/s
Iteration   1: 7834049.984 ops/s
Iteration   2: 7868513.905 ops/s
Iteration   3: 7844741.240 ops/s
Iteration   4: 7935157.419 ops/s
Iteration   5: 7901784.286 ops/s
Iteration   6: 7907842.235 ops/s
Iteration   7: 7922690.503 ops/s
Iteration   8: 7953159.360 ops/s
Iteration   9: 7940936.017 ops/s
Iteration  10: 7945672.509 ops/s
Iteration  11: 7895994.304 ops/s
Iteration  12: 7911725.173 ops/s
Iteration  13: 7884950.322 ops/s
Iteration  14: 7945458.932 ops/s
Iteration  15: 7878528.966 ops/s
Iteration  16: 7887442.376 ops/s
Iteration  17: 7869408.039 ops/s
Iteration  18: 7926022.754 ops/s
Iteration  19: 7909389.987 ops/s
Iteration  20: 7851495.730 ops/s
Iteration  21: 7902380.518 ops/s
Iteration  22: 7921235.701 ops/s
Iteration  23: 7911720.115 ops/s
Iteration  24: 7892606.477 ops/s
Iteration  25: 7902290.309 ops/s
Iteration  26: 7886643.129 ops/s
Iteration  27: 7856881.354 ops/s
Iteration  28: 7915012.658 ops/s
Iteration  29: 7874047.660 ops/s
Iteration  30: 7870950.771 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorCompleteTest._Benchmark.benchmark_dispose":
  7898291.091 ±(99.9%) 20857.515 ops/s [Average]
  (min, avg, max) = (7834049.984, 7898291.091, 7953159.360), stdev = 31218.549
  CI (99.9%): [7877433.576, 7919148.606] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
ObservableOnErrorCompleteTest._Benchmark.benchmark_dispose  thrpt   30  7898291.091 ± 20857.515  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmptySingleTest._Benchmark.benchmark_isDisposed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmptySingleTest._Benchmark.benchmark_isDisposed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3996670.396 ops/s
# Warmup Iteration   2: 6389292.254 ops/s
# Warmup Iteration   3: 7175123.525 ops/s
# Warmup Iteration   4: 7188769.827 ops/s
# Warmup Iteration   5: 7133294.577 ops/s
# Warmup Iteration   6: 7160241.121 ops/s
# Warmup Iteration   7: 7155460.778 ops/s
# Warmup Iteration   8: 7143261.201 ops/s
# Warmup Iteration   9: 7144312.275 ops/s
# Warmup Iteration  10: 7126080.186 ops/s
# Warmup Iteration  11: 7131689.172 ops/s
# Warmup Iteration  12: 7181512.619 ops/s
# Warmup Iteration  13: 7157814.993 ops/s
# Warmup Iteration  14: 7099655.129 ops/s
# Warmup Iteration  15: 7133639.483 ops/s
# Warmup Iteration  16: 7113438.440 ops/s
# Warmup Iteration  17: 7131021.939 ops/s
# Warmup Iteration  18: 7173196.199 ops/s
# Warmup Iteration  19: 7097716.873 ops/s
# Warmup Iteration  20: 7081617.252 ops/s
# Warmup Iteration  21: 7129425.764 ops/s
# Warmup Iteration  22: 7177311.924 ops/s
# Warmup Iteration  23: 7126283.062 ops/s
# Warmup Iteration  24: 7164789.044 ops/s
# Warmup Iteration  25: 7074606.883 ops/s
# Warmup Iteration  26: 7183149.225 ops/s
# Warmup Iteration  27: 7162915.146 ops/s
# Warmup Iteration  28: 7118034.869 ops/s
# Warmup Iteration  29: 7125023.216 ops/s
# Warmup Iteration  30: 7105470.088 ops/s
Iteration   1: 7108837.037 ops/s
Iteration   2: 7106008.289 ops/s
Iteration   3: 7170400.852 ops/s
Iteration   4: 7126346.446 ops/s
Iteration   5: 7170616.811 ops/s
Iteration   6: 7132078.903 ops/s
Iteration   7: 7171248.847 ops/s
Iteration   8: 7099508.588 ops/s
Iteration   9: 7151016.827 ops/s
Iteration  10: 7121387.814 ops/s
Iteration  11: 7096748.120 ops/s
Iteration  12: 7113226.565 ops/s
Iteration  13: 7156673.092 ops/s
Iteration  14: 7083984.461 ops/s
Iteration  15: 7128061.309 ops/s
Iteration  16: 7092000.401 ops/s
Iteration  17: 7188058.441 ops/s
Iteration  18: 7111680.806 ops/s
Iteration  19: 7071584.560 ops/s
Iteration  20: 7124104.765 ops/s
Iteration  21: 7149280.386 ops/s
Iteration  22: 7060027.165 ops/s
Iteration  23: 7134803.171 ops/s
Iteration  24: 7142683.971 ops/s
Iteration  25: 7143666.841 ops/s
Iteration  26: 7125430.534 ops/s
Iteration  27: 7165550.964 ops/s
Iteration  28: 7197021.883 ops/s
Iteration  29: 7081407.304 ops/s
Iteration  30: 7091307.087 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmptySingleTest._Benchmark.benchmark_isDisposed":
  7127158.408 ±(99.9%) 23315.992 ops/s [Average]
  (min, avg, max) = (7060027.165, 7127158.408, 7197021.883), stdev = 34898.281
  CI (99.9%): [7103842.416, 7150474.400] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
MaybeSwitchIfEmptySingleTest._Benchmark.benchmark_isDisposed  thrpt   30  7127158.408 ± 23315.992  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTakeTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTakeTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 5418754.386 ops/s
# Warmup Iteration   2: 7291826.700 ops/s
# Warmup Iteration   3: 8354442.661 ops/s
# Warmup Iteration   4: 8308758.752 ops/s
# Warmup Iteration   5: 8313076.829 ops/s
# Warmup Iteration   6: 8262897.353 ops/s
# Warmup Iteration   7: 8281251.430 ops/s
# Warmup Iteration   8: 8317028.696 ops/s
# Warmup Iteration   9: 8303915.304 ops/s
# Warmup Iteration  10: 8369297.086 ops/s
# Warmup Iteration  11: 8352546.619 ops/s
# Warmup Iteration  12: 8262852.507 ops/s
# Warmup Iteration  13: 8282479.823 ops/s
# Warmup Iteration  14: 8292592.832 ops/s
# Warmup Iteration  15: 8310139.818 ops/s
# Warmup Iteration  16: 8274495.556 ops/s
# Warmup Iteration  17: 8262335.004 ops/s
# Warmup Iteration  18: 8342522.030 ops/s
# Warmup Iteration  19: 8280435.236 ops/s
# Warmup Iteration  20: 8292759.624 ops/s
# Warmup Iteration  21: 8360883.733 ops/s
# Warmup Iteration  22: 8323753.633 ops/s
# Warmup Iteration  23: 8230953.569 ops/s
# Warmup Iteration  24: 8233680.440 ops/s
# Warmup Iteration  25: 8281284.044 ops/s
# Warmup Iteration  26: 8295425.292 ops/s
# Warmup Iteration  27: 8360728.874 ops/s
# Warmup Iteration  28: 8314772.563 ops/s
# Warmup Iteration  29: 8229037.860 ops/s
# Warmup Iteration  30: 8340045.932 ops/s
Iteration   1: 8321255.064 ops/s
Iteration   2: 8248854.394 ops/s
Iteration   3: 8305388.103 ops/s
Iteration   4: 8218909.023 ops/s
Iteration   5: 8319315.527 ops/s
Iteration   6: 8231595.068 ops/s
Iteration   7: 8317812.086 ops/s
Iteration   8: 8329504.483 ops/s
Iteration   9: 8205495.283 ops/s
Iteration  10: 8273964.017 ops/s
Iteration  11: 8299979.933 ops/s
Iteration  12: 8230797.629 ops/s
Iteration  13: 8318647.214 ops/s
Iteration  14: 8275466.308 ops/s
Iteration  15: 8258455.320 ops/s
Iteration  16: 8303467.555 ops/s
Iteration  17: 8227132.177 ops/s
Iteration  18: 8241455.152 ops/s
Iteration  19: 8286522.414 ops/s
Iteration  20: 8295641.057 ops/s
Iteration  21: 8313934.934 ops/s
Iteration  22: 8247687.411 ops/s
Iteration  23: 8293821.630 ops/s
Iteration  24: 8276904.616 ops/s
Iteration  25: 8337336.746 ops/s
Iteration  26: 8295053.632 ops/s
Iteration  27: 8302619.829 ops/s
Iteration  28: 8295489.383 ops/s
Iteration  29: 8277436.056 ops/s
Iteration  30: 8299045.962 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeTest._Benchmark.benchmark_dispose":
  8281632.933 ±(99.9%) 23952.545 ops/s [Average]
  (min, avg, max) = (8205495.283, 8281632.933, 8337336.746), stdev = 35851.045
  CI (99.9%): [8257680.388, 8305585.479] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score       Error  Units
ObservableTakeTest._Benchmark.benchmark_dispose  thrpt   30  8281632.933 ± 23952.545  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_cancelWithoutWindowSize$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_cancelWithoutWindowSize

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3189383.493 ops/s
# Warmup Iteration   2: 4335657.352 ops/s
# Warmup Iteration   3: 4902529.206 ops/s
# Warmup Iteration   4: 4876178.000 ops/s
# Warmup Iteration   5: 4873681.716 ops/s
# Warmup Iteration   6: 4865424.554 ops/s
# Warmup Iteration   7: 4879008.293 ops/s
# Warmup Iteration   8: 4883268.941 ops/s
# Warmup Iteration   9: 4890677.002 ops/s
# Warmup Iteration  10: 4883618.166 ops/s
# Warmup Iteration  11: 4893378.365 ops/s
# Warmup Iteration  12: 4895707.654 ops/s
# Warmup Iteration  13: 4904922.904 ops/s
# Warmup Iteration  14: 4910175.740 ops/s
# Warmup Iteration  15: 4875035.816 ops/s
# Warmup Iteration  16: 4904242.153 ops/s
# Warmup Iteration  17: 4898116.169 ops/s
# Warmup Iteration  18: 4931611.007 ops/s
# Warmup Iteration  19: 4903865.328 ops/s
# Warmup Iteration  20: 4864984.299 ops/s
# Warmup Iteration  21: 4905304.143 ops/s
# Warmup Iteration  22: 4905592.759 ops/s
# Warmup Iteration  23: 4914201.477 ops/s
# Warmup Iteration  24: 4913528.315 ops/s
# Warmup Iteration  25: 4923087.632 ops/s
# Warmup Iteration  26: 4892054.132 ops/s
# Warmup Iteration  27: 4927180.752 ops/s
# Warmup Iteration  28: 4939165.226 ops/s
# Warmup Iteration  29: 4925312.518 ops/s
# Warmup Iteration  30: 4921223.928 ops/s
Iteration   1: 4964164.796 ops/s
Iteration   2: 4891889.244 ops/s
Iteration   3: 4864117.626 ops/s
Iteration   4: 4895445.004 ops/s
Iteration   5: 4900495.797 ops/s
Iteration   6: 4933554.441 ops/s
Iteration   7: 4921866.694 ops/s
Iteration   8: 4895193.421 ops/s
Iteration   9: 4899442.187 ops/s
Iteration  10: 4920182.261 ops/s
Iteration  11: 4927654.543 ops/s
Iteration  12: 4919267.421 ops/s
Iteration  13: 4889204.847 ops/s
Iteration  14: 4892755.448 ops/s
Iteration  15: 4912656.308 ops/s
Iteration  16: 4943363.817 ops/s
Iteration  17: 4899156.725 ops/s
Iteration  18: 4899353.719 ops/s
Iteration  19: 4910912.057 ops/s
Iteration  20: 4901324.957 ops/s
Iteration  21: 4912763.921 ops/s
Iteration  22: 4935917.975 ops/s
Iteration  23: 4896536.781 ops/s
Iteration  24: 4883603.208 ops/s
Iteration  25: 4904229.655 ops/s
Iteration  26: 4900840.175 ops/s
Iteration  27: 4891677.106 ops/s
Iteration  28: 4890306.739 ops/s
Iteration  29: 4927343.028 ops/s
Iteration  30: 4927740.428 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_cancelWithoutWindowSize":
  4908432.011 ±(99.9%) 13756.012 ops/s [Average]
  (min, avg, max) = (4864117.626, 4908432.011, 4964164.796), stdev = 20589.353
  CI (99.9%): [4894675.999, 4922188.023] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score       Error  Units
FlowableWindowWithSizeTest._Benchmark.benchmark_cancelWithoutWindowSize  thrpt   30  4908432.011 ± 13756.012  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeZipIterableTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeZipIterableTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1656660.984 ops/s
# Warmup Iteration   2: 2583728.036 ops/s
# Warmup Iteration   3: 2902427.159 ops/s
# Warmup Iteration   4: 2907610.827 ops/s
# Warmup Iteration   5: 2901610.422 ops/s
# Warmup Iteration   6: 2895813.515 ops/s
# Warmup Iteration   7: 2910263.073 ops/s
# Warmup Iteration   8: 2892106.857 ops/s
# Warmup Iteration   9: 2899218.073 ops/s
# Warmup Iteration  10: 2907342.237 ops/s
# Warmup Iteration  11: 2894358.956 ops/s
# Warmup Iteration  12: 2878749.037 ops/s
# Warmup Iteration  13: 2907229.750 ops/s
# Warmup Iteration  14: 2890860.939 ops/s
# Warmup Iteration  15: 2879102.279 ops/s
# Warmup Iteration  16: 2892873.292 ops/s
# Warmup Iteration  17: 2894989.122 ops/s
# Warmup Iteration  18: 2904265.915 ops/s
# Warmup Iteration  19: 2905447.155 ops/s
# Warmup Iteration  20: 2902375.001 ops/s
# Warmup Iteration  21: 2894848.262 ops/s
# Warmup Iteration  22: 2890804.101 ops/s
# Warmup Iteration  23: 2880652.925 ops/s
# Warmup Iteration  24: 2897239.670 ops/s
# Warmup Iteration  25: 2887096.817 ops/s
# Warmup Iteration  26: 2890315.433 ops/s
# Warmup Iteration  27: 2879906.274 ops/s
# Warmup Iteration  28: 2892089.928 ops/s
# Warmup Iteration  29: 2893707.824 ops/s
# Warmup Iteration  30: 2878479.751 ops/s
Iteration   1: 2891886.281 ops/s
Iteration   2: 2904416.792 ops/s
Iteration   3: 2901101.316 ops/s
Iteration   4: 2881128.056 ops/s
Iteration   5: 2901848.265 ops/s
Iteration   6: 2895122.726 ops/s
Iteration   7: 2894043.438 ops/s
Iteration   8: 2900553.423 ops/s
Iteration   9: 2896684.200 ops/s
Iteration  10: 2894776.784 ops/s
Iteration  11: 2881546.177 ops/s
Iteration  12: 2891645.514 ops/s
Iteration  13: 2881732.182 ops/s
Iteration  14: 2887751.993 ops/s
Iteration  15: 2871850.822 ops/s
Iteration  16: 2888477.999 ops/s
Iteration  17: 2914296.693 ops/s
Iteration  18: 2893840.647 ops/s
Iteration  19: 2895652.939 ops/s
Iteration  20: 2864671.855 ops/s
Iteration  21: 2880823.183 ops/s
Iteration  22: 2888058.178 ops/s
Iteration  23: 2891095.923 ops/s
Iteration  24: 2903036.391 ops/s
Iteration  25: 2889561.182 ops/s
Iteration  26: 2904728.297 ops/s
Iteration  27: 2881642.600 ops/s
Iteration  28: 2890140.754 ops/s
Iteration  29: 2894862.790 ops/s
Iteration  30: 2893974.084 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeZipIterableTest._Benchmark.benchmark_dispose":
  2891698.383 ±(99.9%) 6831.559 ops/s [Average]
  (min, avg, max) = (2864671.855, 2891698.383, 2914296.693), stdev = 10225.156
  CI (99.9%): [2884866.824, 2898529.942] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score      Error  Units
MaybeZipIterableTest._Benchmark.benchmark_dispose  thrpt   30  2891698.383 ± 6831.559  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableFlatMapStreamTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableFlatMapStreamTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 4196368.304 ops/s
# Warmup Iteration   2: 5307338.611 ops/s
# Warmup Iteration   3: 6437916.505 ops/s
# Warmup Iteration   4: 6420489.836 ops/s
# Warmup Iteration   5: 6395083.635 ops/s
# Warmup Iteration   6: 6392942.941 ops/s
# Warmup Iteration   7: 6430829.779 ops/s
# Warmup Iteration   8: 6320917.912 ops/s
# Warmup Iteration   9: 6372173.949 ops/s
# Warmup Iteration  10: 6375160.428 ops/s
# Warmup Iteration  11: 6379662.532 ops/s
# Warmup Iteration  12: 6429299.588 ops/s
# Warmup Iteration  13: 6415464.737 ops/s
# Warmup Iteration  14: 6250034.454 ops/s
# Warmup Iteration  15: 6368154.748 ops/s
# Warmup Iteration  16: 6389110.185 ops/s
# Warmup Iteration  17: 6340355.148 ops/s
# Warmup Iteration  18: 6259436.100 ops/s
# Warmup Iteration  19: 6383662.855 ops/s
# Warmup Iteration  20: 6366882.490 ops/s
# Warmup Iteration  21: 6418605.668 ops/s
# Warmup Iteration  22: 6367785.749 ops/s
# Warmup Iteration  23: 6397241.442 ops/s
# Warmup Iteration  24: 6375998.221 ops/s
# Warmup Iteration  25: 6410523.104 ops/s
# Warmup Iteration  26: 6298970.931 ops/s
# Warmup Iteration  27: 6390714.992 ops/s
# Warmup Iteration  28: 6347487.279 ops/s
# Warmup Iteration  29: 6377331.311 ops/s
# Warmup Iteration  30: 6357797.456 ops/s
Iteration   1: 6270482.312 ops/s
Iteration   2: 6401448.030 ops/s
Iteration   3: 6319840.268 ops/s
Iteration   4: 6362583.621 ops/s
Iteration   5: 6381930.358 ops/s
Iteration   6: 6346888.375 ops/s
Iteration   7: 6370965.792 ops/s
Iteration   8: 6382244.702 ops/s
Iteration   9: 6369936.546 ops/s
Iteration  10: 6351776.600 ops/s
Iteration  11: 6338112.745 ops/s
Iteration  12: 6401667.517 ops/s
Iteration  13: 6381848.121 ops/s
Iteration  14: 6377569.346 ops/s
Iteration  15: 6369884.650 ops/s
Iteration  16: 6221067.651 ops/s
Iteration  17: 6392858.538 ops/s
Iteration  18: 6366834.920 ops/s
Iteration  19: 6344211.482 ops/s
Iteration  20: 6239540.071 ops/s
Iteration  21: 6372548.900 ops/s
Iteration  22: 6386522.202 ops/s
Iteration  23: 6366434.172 ops/s
Iteration  24: 6265426.812 ops/s
Iteration  25: 6353276.051 ops/s
Iteration  26: 6421751.867 ops/s
Iteration  27: 6384749.352 ops/s
Iteration  28: 6232468.887 ops/s
Iteration  29: 6414801.075 ops/s
Iteration  30: 6391672.920 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableFlatMapStreamTest._Benchmark.benchmark_dispose":
  6352711.463 ±(99.9%) 35971.881 ops/s [Average]
  (min, avg, max) = (6221067.651, 6352711.463, 6421751.867), stdev = 53841.022
  CI (99.9%): [6316739.582, 6388683.344] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
ObservableFlatMapStreamTest._Benchmark.benchmark_dispose  thrpt   30  6352711.463 ± 35971.881  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilTest._Benchmark.benchmark_untilPublisherDispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilTest._Benchmark.benchmark_untilPublisherDispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2119645.147 ops/s
# Warmup Iteration   2: 2945545.153 ops/s
# Warmup Iteration   3: 3321180.774 ops/s
# Warmup Iteration   4: 3329620.315 ops/s
# Warmup Iteration   5: 3310045.728 ops/s
# Warmup Iteration   6: 3314722.047 ops/s
# Warmup Iteration   7: 3296884.374 ops/s
# Warmup Iteration   8: 3321266.492 ops/s
# Warmup Iteration   9: 3288473.025 ops/s
# Warmup Iteration  10: 3316548.748 ops/s
# Warmup Iteration  11: 3292224.899 ops/s
# Warmup Iteration  12: 3292482.191 ops/s
# Warmup Iteration  13: 3303059.041 ops/s
# Warmup Iteration  14: 3319889.070 ops/s
# Warmup Iteration  15: 3328366.552 ops/s
# Warmup Iteration  16: 3271017.795 ops/s
# Warmup Iteration  17: 3326780.662 ops/s
# Warmup Iteration  18: 3318637.945 ops/s
# Warmup Iteration  19: 3330880.494 ops/s
# Warmup Iteration  20: 3357835.907 ops/s
# Warmup Iteration  21: 3324515.550 ops/s
# Warmup Iteration  22: 3311799.891 ops/s
# Warmup Iteration  23: 3342049.877 ops/s
# Warmup Iteration  24: 3364104.059 ops/s
# Warmup Iteration  25: 3316652.360 ops/s
# Warmup Iteration  26: 3317273.181 ops/s
# Warmup Iteration  27: 3322393.181 ops/s
# Warmup Iteration  28: 3312353.866 ops/s
# Warmup Iteration  29: 3339571.468 ops/s
# Warmup Iteration  30: 3346745.817 ops/s
Iteration   1: 3350948.548 ops/s
Iteration   2: 3347948.782 ops/s
Iteration   3: 3332139.911 ops/s
Iteration   4: 3329857.441 ops/s
Iteration   5: 3340846.412 ops/s
Iteration   6: 3324570.067 ops/s
Iteration   7: 3361878.517 ops/s
Iteration   8: 3359222.676 ops/s
Iteration   9: 3328049.028 ops/s
Iteration  10: 3306245.462 ops/s
Iteration  11: 3336371.919 ops/s
Iteration  12: 3333854.207 ops/s
Iteration  13: 3341290.535 ops/s
Iteration  14: 3306809.943 ops/s
Iteration  15: 3351862.920 ops/s
Iteration  16: 3312522.427 ops/s
Iteration  17: 3344302.107 ops/s
Iteration  18: 3353354.484 ops/s
Iteration  19: 3352420.492 ops/s
Iteration  20: 3334871.055 ops/s
Iteration  21: 3347936.342 ops/s
Iteration  22: 3337858.454 ops/s
Iteration  23: 3339391.178 ops/s
Iteration  24: 3325130.549 ops/s
Iteration  25: 3338302.433 ops/s
Iteration  26: 3349805.447 ops/s
Iteration  27: 3362423.103 ops/s
Iteration  28: 3344467.365 ops/s
Iteration  29: 3316825.304 ops/s
Iteration  30: 3352386.766 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilTest._Benchmark.benchmark_untilPublisherDispose":
  3338796.462 ±(99.9%) 10156.785 ops/s [Average]
  (min, avg, max) = (3306245.462, 3338796.462, 3362423.103), stdev = 15202.199
  CI (99.9%): [3328639.677, 3348953.248] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
FlowableTakeUntilTest._Benchmark.benchmark_untilPublisherDispose  thrpt   30  3338796.462 ± 10156.785  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherTest._Benchmark.benchmark_emptyWithOnComplete$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherTest._Benchmark.benchmark_emptyWithOnComplete

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3716465.660 ops/s
# Warmup Iteration   2: 5473613.181 ops/s
# Warmup Iteration   3: 6229899.506 ops/s
# Warmup Iteration   4: 6206999.942 ops/s
# Warmup Iteration   5: 6243247.084 ops/s
# Warmup Iteration   6: 6185247.128 ops/s
# Warmup Iteration   7: 6193160.372 ops/s
# Warmup Iteration   8: 6162345.217 ops/s
# Warmup Iteration   9: 6173141.715 ops/s
# Warmup Iteration  10: 6163424.667 ops/s
# Warmup Iteration  11: 6180720.026 ops/s
# Warmup Iteration  12: 6116026.798 ops/s
# Warmup Iteration  13: 6191995.815 ops/s
# Warmup Iteration  14: 6157365.304 ops/s
# Warmup Iteration  15: 6161540.111 ops/s
# Warmup Iteration  16: 6175467.572 ops/s
# Warmup Iteration  17: 6236923.641 ops/s
# Warmup Iteration  18: 6216446.747 ops/s
# Warmup Iteration  19: 6231143.706 ops/s
# Warmup Iteration  20: 6222847.969 ops/s
# Warmup Iteration  21: 6244233.329 ops/s
# Warmup Iteration  22: 6204727.468 ops/s
# Warmup Iteration  23: 6186055.499 ops/s
# Warmup Iteration  24: 6212012.160 ops/s
# Warmup Iteration  25: 6243727.527 ops/s
# Warmup Iteration  26: 6206114.433 ops/s
# Warmup Iteration  27: 6247312.781 ops/s
# Warmup Iteration  28: 6050690.146 ops/s
# Warmup Iteration  29: 6148367.489 ops/s
# Warmup Iteration  30: 6226124.934 ops/s
Iteration   1: 6254450.629 ops/s
Iteration   2: 6227975.160 ops/s
Iteration   3: 6275050.806 ops/s
Iteration   4: 6163763.184 ops/s
Iteration   5: 6219648.241 ops/s
Iteration   6: 6164598.167 ops/s
Iteration   7: 6157367.303 ops/s
Iteration   8: 6177538.769 ops/s
Iteration   9: 6260143.675 ops/s
Iteration  10: 6183923.994 ops/s
Iteration  11: 6198409.055 ops/s
Iteration  12: 6204182.037 ops/s
Iteration  13: 6184023.964 ops/s
Iteration  14: 6183675.716 ops/s
Iteration  15: 6197944.185 ops/s
Iteration  16: 6179014.716 ops/s
Iteration  17: 6213249.686 ops/s
Iteration  18: 6223469.744 ops/s
Iteration  19: 6209446.786 ops/s
Iteration  20: 6181090.359 ops/s
Iteration  21: 6203595.131 ops/s
Iteration  22: 6182950.446 ops/s
Iteration  23: 6221362.417 ops/s
Iteration  24: 6219678.177 ops/s
Iteration  25: 6166069.134 ops/s
Iteration  26: 6210689.890 ops/s
Iteration  27: 6253080.782 ops/s
Iteration  28: 6153543.800 ops/s
Iteration  29: 6216154.302 ops/s
Iteration  30: 6217637.727 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherTest._Benchmark.benchmark_emptyWithOnComplete":
  6203457.599 ±(99.9%) 20868.006 ops/s [Average]
  (min, avg, max) = (6153543.800, 6203457.599, 6275050.806), stdev = 31234.251
  CI (99.9%): [6182589.594, 6224325.605] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
MaybeDelayOtherTest._Benchmark.benchmark_emptyWithOnComplete  thrpt   30  6203457.599 ± 20868.006  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNextTest._Benchmark.benchmark_onError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNextTest._Benchmark.benchmark_onError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 550094.518 ops/s
# Warmup Iteration   2: 683432.695 ops/s
# Warmup Iteration   3: 686214.363 ops/s
# Warmup Iteration   4: 734827.912 ops/s
# Warmup Iteration   5: 741189.346 ops/s
# Warmup Iteration   6: 738695.646 ops/s
# Warmup Iteration   7: 736289.076 ops/s
# Warmup Iteration   8: 734620.411 ops/s
# Warmup Iteration   9: 731491.159 ops/s
# Warmup Iteration  10: 734170.597 ops/s
# Warmup Iteration  11: 735442.177 ops/s
# Warmup Iteration  12: 730842.006 ops/s
# Warmup Iteration  13: 730685.921 ops/s
# Warmup Iteration  14: 729415.602 ops/s
# Warmup Iteration  15: 733429.034 ops/s
# Warmup Iteration  16: 731253.638 ops/s
# Warmup Iteration  17: 768571.271 ops/s
# Warmup Iteration  18: 767246.789 ops/s
# Warmup Iteration  19: 770382.068 ops/s
# Warmup Iteration  20: 769897.132 ops/s
# Warmup Iteration  21: 766598.491 ops/s
# Warmup Iteration  22: 761873.150 ops/s
# Warmup Iteration  23: 773058.911 ops/s
# Warmup Iteration  24: 767375.268 ops/s
# Warmup Iteration  25: 769369.643 ops/s
# Warmup Iteration  26: 768392.239 ops/s
# Warmup Iteration  27: 768615.319 ops/s
# Warmup Iteration  28: 767334.951 ops/s
# Warmup Iteration  29: 766955.583 ops/s
# Warmup Iteration  30: 766130.357 ops/s
Iteration   1: 763326.690 ops/s
Iteration   2: 772025.925 ops/s
Iteration   3: 768190.366 ops/s
Iteration   4: 767837.239 ops/s
Iteration   5: 770090.283 ops/s
Iteration   6: 767424.392 ops/s
Iteration   7: 764783.495 ops/s
Iteration   8: 766831.752 ops/s
Iteration   9: 767592.424 ops/s
Iteration  10: 766911.423 ops/s
Iteration  11: 768399.405 ops/s
Iteration  12: 768748.718 ops/s
Iteration  13: 769030.789 ops/s
Iteration  14: 771304.514 ops/s
Iteration  15: 766819.794 ops/s
Iteration  16: 768412.658 ops/s
Iteration  17: 769119.047 ops/s
Iteration  18: 768104.519 ops/s
Iteration  19: 768209.161 ops/s
Iteration  20: 763076.537 ops/s
Iteration  21: 763708.589 ops/s
Iteration  22: 769278.525 ops/s
Iteration  23: 767101.021 ops/s
Iteration  24: 768695.692 ops/s
Iteration  25: 769130.832 ops/s
Iteration  26: 767652.753 ops/s
Iteration  27: 769738.752 ops/s
Iteration  28: 765614.620 ops/s
Iteration  29: 766368.429 ops/s
Iteration  30: 767172.038 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNextTest._Benchmark.benchmark_onError":
  767690.013 ±(99.9%) 1401.481 ops/s [Average]
  (min, avg, max) = (763076.537, 767690.013, 772025.925), stdev = 2097.671
  CI (99.9%): [766288.532, 769091.494] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score      Error  Units
BlockingFlowableNextTest._Benchmark.benchmark_onError  thrpt   30  767690.013 ± 1401.481  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicateTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicateTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 5106320.809 ops/s
# Warmup Iteration   2: 7198954.739 ops/s
# Warmup Iteration   3: 8276055.433 ops/s
# Warmup Iteration   4: 8229757.247 ops/s
# Warmup Iteration   5: 8222739.709 ops/s
# Warmup Iteration   6: 8225932.662 ops/s
# Warmup Iteration   7: 8194960.343 ops/s
# Warmup Iteration   8: 8257164.650 ops/s
# Warmup Iteration   9: 8234590.304 ops/s
# Warmup Iteration  10: 8247864.057 ops/s
# Warmup Iteration  11: 8187693.350 ops/s
# Warmup Iteration  12: 8201468.287 ops/s
# Warmup Iteration  13: 8214829.176 ops/s
# Warmup Iteration  14: 8195854.118 ops/s
# Warmup Iteration  15: 8185462.937 ops/s
# Warmup Iteration  16: 8235050.473 ops/s
# Warmup Iteration  17: 8204428.800 ops/s
# Warmup Iteration  18: 8209415.267 ops/s
# Warmup Iteration  19: 8240344.255 ops/s
# Warmup Iteration  20: 8197610.176 ops/s
# Warmup Iteration  21: 8260960.210 ops/s
# Warmup Iteration  22: 8192648.084 ops/s
# Warmup Iteration  23: 8243576.693 ops/s
# Warmup Iteration  24: 8226645.088 ops/s
# Warmup Iteration  25: 8270985.213 ops/s
# Warmup Iteration  26: 8233955.697 ops/s
# Warmup Iteration  27: 8196255.320 ops/s
# Warmup Iteration  28: 8180948.522 ops/s
# Warmup Iteration  29: 8282460.213 ops/s
# Warmup Iteration  30: 8223799.827 ops/s
Iteration   1: 8265255.315 ops/s
Iteration   2: 8216588.312 ops/s
Iteration   3: 8286749.877 ops/s
Iteration   4: 8237337.412 ops/s
Iteration   5: 8202943.885 ops/s
Iteration   6: 8183982.956 ops/s
Iteration   7: 8193905.211 ops/s
Iteration   8: 8213843.772 ops/s
Iteration   9: 8215834.003 ops/s
Iteration  10: 8263829.757 ops/s
Iteration  11: 8225729.533 ops/s
Iteration  12: 8260508.749 ops/s
Iteration  13: 8273561.291 ops/s
Iteration  14: 8187066.256 ops/s
Iteration  15: 8221568.358 ops/s
Iteration  16: 8277321.731 ops/s
Iteration  17: 8222234.735 ops/s
Iteration  18: 8184317.393 ops/s
Iteration  19: 8192956.216 ops/s
Iteration  20: 8202011.656 ops/s
Iteration  21: 8238645.799 ops/s
Iteration  22: 8234975.543 ops/s
Iteration  23: 8231680.151 ops/s
Iteration  24: 8220442.433 ops/s
Iteration  25: 8253235.293 ops/s
Iteration  26: 8254246.241 ops/s
Iteration  27: 8272314.142 ops/s
Iteration  28: 8197920.117 ops/s
Iteration  29: 8207391.204 ops/s
Iteration  30: 8215508.088 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicateTest._Benchmark.benchmark_dispose":
  8228463.514 ±(99.9%) 20215.556 ops/s [Average]
  (min, avg, max) = (8183982.956, 8228463.514, 8286749.877), stdev = 30257.695
  CI (99.9%): [8208247.958, 8248679.070] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
ObservableTakeUntilPredicateTest._Benchmark.benchmark_dispose  thrpt   30  8228463.514 ± 20215.556  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorXTest._Benchmark.benchmark_onErrorCompleteDispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorXTest._Benchmark.benchmark_onErrorCompleteDispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 4687522.789 ops/s
# Warmup Iteration   2: 7026145.161 ops/s
# Warmup Iteration   3: 8144338.996 ops/s
# Warmup Iteration   4: 8185740.177 ops/s
# Warmup Iteration   5: 8145509.464 ops/s
# Warmup Iteration   6: 8089053.406 ops/s
# Warmup Iteration   7: 8099119.529 ops/s
# Warmup Iteration   8: 8104567.242 ops/s
# Warmup Iteration   9: 8096539.638 ops/s
# Warmup Iteration  10: 8107125.409 ops/s
# Warmup Iteration  11: 8039220.865 ops/s
# Warmup Iteration  12: 8080090.162 ops/s
# Warmup Iteration  13: 8080373.210 ops/s
# Warmup Iteration  14: 8130118.512 ops/s
# Warmup Iteration  15: 8080356.165 ops/s
# Warmup Iteration  16: 8070574.236 ops/s
# Warmup Iteration  17: 8187542.034 ops/s
# Warmup Iteration  18: 8062027.640 ops/s
# Warmup Iteration  19: 8111070.863 ops/s
# Warmup Iteration  20: 8165491.176 ops/s
# Warmup Iteration  21: 8044090.817 ops/s
# Warmup Iteration  22: 8145051.251 ops/s
# Warmup Iteration  23: 8076956.195 ops/s
# Warmup Iteration  24: 8056255.533 ops/s
# Warmup Iteration  25: 8175827.271 ops/s
# Warmup Iteration  26: 8069859.559 ops/s
# Warmup Iteration  27: 8098658.094 ops/s
# Warmup Iteration  28: 8074273.923 ops/s
# Warmup Iteration  29: 8144564.134 ops/s
# Warmup Iteration  30: 8150047.125 ops/s
Iteration   1: 8159546.344 ops/s
Iteration   2: 8091367.890 ops/s
Iteration   3: 8167500.331 ops/s
Iteration   4: 8123533.563 ops/s
Iteration   5: 8047902.087 ops/s
Iteration   6: 8167677.091 ops/s
Iteration   7: 8069579.320 ops/s
Iteration   8: 8173696.007 ops/s
Iteration   9: 8184496.953 ops/s
Iteration  10: 8109972.354 ops/s
Iteration  11: 8127386.273 ops/s
Iteration  12: 8101117.049 ops/s
Iteration  13: 8088149.796 ops/s
Iteration  14: 8127029.853 ops/s
Iteration  15: 8164898.585 ops/s
Iteration  16: 8145800.241 ops/s
Iteration  17: 8159498.671 ops/s
Iteration  18: 8169329.745 ops/s
Iteration  19: 8081930.582 ops/s
Iteration  20: 8131673.955 ops/s
Iteration  21: 8114534.480 ops/s
Iteration  22: 8169745.582 ops/s
Iteration  23: 8119231.555 ops/s
Iteration  24: 8143650.278 ops/s
Iteration  25: 8128903.754 ops/s
Iteration  26: 8094678.362 ops/s
Iteration  27: 8095159.687 ops/s
Iteration  28: 8131123.550 ops/s
Iteration  29: 8120115.307 ops/s
Iteration  30: 8075647.437 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorXTest._Benchmark.benchmark_onErrorCompleteDispose":
  8126162.556 ±(99.9%) 23831.794 ops/s [Average]
  (min, avg, max) = (8047902.087, 8126162.556, 8184496.953), stdev = 35670.311
  CI (99.9%): [8102330.762, 8149994.350] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
MaybeOnErrorXTest._Benchmark.benchmark_onErrorCompleteDispose  thrpt   30  8126162.556 ± 23831.794  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybePeekTest._Benchmark.benchmark_disposed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybePeekTest._Benchmark.benchmark_disposed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 4644320.633 ops/s
# Warmup Iteration   2: 7099839.076 ops/s
# Warmup Iteration   3: 8133119.698 ops/s
# Warmup Iteration   4: 8078614.061 ops/s
# Warmup Iteration   5: 8128959.134 ops/s
# Warmup Iteration   6: 8059862.077 ops/s
# Warmup Iteration   7: 8165755.530 ops/s
# Warmup Iteration   8: 7993274.821 ops/s
# Warmup Iteration   9: 8219869.134 ops/s
# Warmup Iteration  10: 8123077.347 ops/s
# Warmup Iteration  11: 8100108.502 ops/s
# Warmup Iteration  12: 8126381.526 ops/s
# Warmup Iteration  13: 8108457.871 ops/s
# Warmup Iteration  14: 8154268.351 ops/s
# Warmup Iteration  15: 8121076.228 ops/s
# Warmup Iteration  16: 8106783.041 ops/s
# Warmup Iteration  17: 8096066.702 ops/s
# Warmup Iteration  18: 8119820.990 ops/s
# Warmup Iteration  19: 8073757.091 ops/s
# Warmup Iteration  20: 8103991.065 ops/s
# Warmup Iteration  21: 8088593.343 ops/s
# Warmup Iteration  22: 8101404.671 ops/s
# Warmup Iteration  23: 8087039.188 ops/s
# Warmup Iteration  24: 7956551.746 ops/s
# Warmup Iteration  25: 8115111.545 ops/s
# Warmup Iteration  26: 8070678.008 ops/s
# Warmup Iteration  27: 8148333.527 ops/s
# Warmup Iteration  28: 8141688.828 ops/s
# Warmup Iteration  29: 8177979.173 ops/s
# Warmup Iteration  30: 8175398.411 ops/s
Iteration   1: 8170247.975 ops/s
Iteration   2: 8128179.016 ops/s
Iteration   3: 8155526.387 ops/s
Iteration   4: 8154443.305 ops/s
Iteration   5: 8110283.542 ops/s
Iteration   6: 8114946.674 ops/s
Iteration   7: 8157254.945 ops/s
Iteration   8: 8081142.747 ops/s
Iteration   9: 8041514.645 ops/s
Iteration  10: 8028385.724 ops/s
Iteration  11: 8173808.699 ops/s
Iteration  12: 8112547.219 ops/s
Iteration  13: 8116482.786 ops/s
Iteration  14: 8144044.313 ops/s
Iteration  15: 8165134.990 ops/s
Iteration  16: 8137797.802 ops/s
Iteration  17: 8129223.255 ops/s
Iteration  18: 8100984.371 ops/s
Iteration  19: 8140743.129 ops/s
Iteration  20: 8143163.640 ops/s
Iteration  21: 8121412.786 ops/s
Iteration  22: 8105285.667 ops/s
Iteration  23: 8066580.954 ops/s
Iteration  24: 8102201.811 ops/s
Iteration  25: 8167570.292 ops/s
Iteration  26: 8064291.029 ops/s
Iteration  27: 8113648.408 ops/s
Iteration  28: 8080614.663 ops/s
Iteration  29: 8106264.360 ops/s
Iteration  30: 8098689.530 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybePeekTest._Benchmark.benchmark_disposed":
  8117747.155 ±(99.9%) 25046.889 ops/s [Average]
  (min, avg, max) = (8028385.724, 8117747.155, 8173808.699), stdev = 37489.007
  CI (99.9%): [8092700.266, 8142794.045] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     Mode  Cnt        Score       Error  Units
MaybePeekTest._Benchmark.benchmark_disposed  thrpt   30  8117747.155 ± 25046.889  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableCollectWithCollectorTest._Benchmark.benchmark_disposeToFlowable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableCollectWithCollectorTest._Benchmark.benchmark_disposeToFlowable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3108517.127 ops/s
# Warmup Iteration   2: 4648276.923 ops/s
# Warmup Iteration   3: 5339661.194 ops/s
# Warmup Iteration   4: 5331975.538 ops/s
# Warmup Iteration   5: 5327447.762 ops/s
# Warmup Iteration   6: 5343024.496 ops/s
# Warmup Iteration   7: 5354212.436 ops/s
# Warmup Iteration   8: 5339147.509 ops/s
# Warmup Iteration   9: 5341396.795 ops/s
# Warmup Iteration  10: 5350004.798 ops/s
# Warmup Iteration  11: 5339089.526 ops/s
# Warmup Iteration  12: 5305667.170 ops/s
# Warmup Iteration  13: 5326356.251 ops/s
# Warmup Iteration  14: 5344651.967 ops/s
# Warmup Iteration  15: 5326213.232 ops/s
# Warmup Iteration  16: 5316624.181 ops/s
# Warmup Iteration  17: 5377287.117 ops/s
# Warmup Iteration  18: 5355473.048 ops/s
# Warmup Iteration  19: 5358878.351 ops/s
# Warmup Iteration  20: 5346992.925 ops/s
# Warmup Iteration  21: 5312226.765 ops/s
# Warmup Iteration  22: 5334267.814 ops/s
# Warmup Iteration  23: 5285579.646 ops/s
# Warmup Iteration  24: 5337486.283 ops/s
# Warmup Iteration  25: 5330763.332 ops/s
# Warmup Iteration  26: 5333867.444 ops/s
# Warmup Iteration  27: 5330879.719 ops/s
# Warmup Iteration  28: 5308972.419 ops/s
# Warmup Iteration  29: 5322005.033 ops/s
# Warmup Iteration  30: 5361628.960 ops/s
Iteration   1: 5315622.231 ops/s
Iteration   2: 5334348.537 ops/s
Iteration   3: 5312629.432 ops/s
Iteration   4: 5284051.389 ops/s
Iteration   5: 5325786.880 ops/s
Iteration   6: 5351262.162 ops/s
Iteration   7: 5319003.239 ops/s
Iteration   8: 5314853.619 ops/s
Iteration   9: 5351194.656 ops/s
Iteration  10: 5324778.268 ops/s
Iteration  11: 5350309.313 ops/s
Iteration  12: 5350130.749 ops/s
Iteration  13: 5358287.136 ops/s
Iteration  14: 5320525.413 ops/s
Iteration  15: 5329942.228 ops/s
Iteration  16: 5347882.231 ops/s
Iteration  17: 5340397.025 ops/s
Iteration  18: 5333621.364 ops/s
Iteration  19: 5325341.539 ops/s
Iteration  20: 5321689.264 ops/s
Iteration  21: 5313358.840 ops/s
Iteration  22: 5326677.244 ops/s
Iteration  23: 5327424.069 ops/s
Iteration  24: 5302948.845 ops/s
Iteration  25: 5326233.321 ops/s
Iteration  26: 5352262.571 ops/s
Iteration  27: 5314243.543 ops/s
Iteration  28: 5358905.416 ops/s
Iteration  29: 5302539.493 ops/s
Iteration  30: 5307437.255 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableCollectWithCollectorTest._Benchmark.benchmark_disposeToFlowable":
  5328122.909 ±(99.9%) 12376.807 ops/s [Average]
  (min, avg, max) = (5284051.389, 5328122.909, 5358905.416), stdev = 18525.024
  CI (99.9%): [5315746.102, 5340499.716] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score       Error  Units
FlowableCollectWithCollectorTest._Benchmark.benchmark_disposeToFlowable  thrpt   30  5328122.909 ± 12376.807  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhileTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhileTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 4862923.199 ops/s
# Warmup Iteration   2: 7649539.583 ops/s
# Warmup Iteration   3: 8231963.464 ops/s
# Warmup Iteration   4: 8280033.392 ops/s
# Warmup Iteration   5: 8275857.334 ops/s
# Warmup Iteration   6: 8254714.756 ops/s
# Warmup Iteration   7: 8295202.128 ops/s
# Warmup Iteration   8: 8287334.151 ops/s
# Warmup Iteration   9: 8191191.144 ops/s
# Warmup Iteration  10: 8200284.191 ops/s
# Warmup Iteration  11: 8251225.515 ops/s
# Warmup Iteration  12: 8241613.970 ops/s
# Warmup Iteration  13: 8263872.511 ops/s
# Warmup Iteration  14: 8214696.462 ops/s
# Warmup Iteration  15: 8264542.772 ops/s
# Warmup Iteration  16: 8297463.667 ops/s
# Warmup Iteration  17: 8281610.967 ops/s
# Warmup Iteration  18: 8193905.370 ops/s
# Warmup Iteration  19: 8242569.473 ops/s
# Warmup Iteration  20: 8232088.608 ops/s
# Warmup Iteration  21: 8228017.183 ops/s
# Warmup Iteration  22: 8256673.093 ops/s
# Warmup Iteration  23: 8173207.272 ops/s
# Warmup Iteration  24: 8249022.407 ops/s
# Warmup Iteration  25: 8257759.979 ops/s
# Warmup Iteration  26: 8209269.279 ops/s
# Warmup Iteration  27: 8254557.305 ops/s
# Warmup Iteration  28: 8283997.666 ops/s
# Warmup Iteration  29: 8273753.722 ops/s
# Warmup Iteration  30: 8256317.988 ops/s
Iteration   1: 8281575.295 ops/s
Iteration   2: 8232751.318 ops/s
Iteration   3: 8266939.304 ops/s
Iteration   4: 8247084.506 ops/s
Iteration   5: 8265759.795 ops/s
Iteration   6: 8263000.421 ops/s
Iteration   7: 8298912.283 ops/s
Iteration   8: 8230149.987 ops/s
Iteration   9: 8285448.914 ops/s
Iteration  10: 8215702.547 ops/s
Iteration  11: 8235617.830 ops/s
Iteration  12: 8269969.233 ops/s
Iteration  13: 8235230.175 ops/s
Iteration  14: 8288891.555 ops/s
Iteration  15: 8255821.749 ops/s
Iteration  16: 8282721.033 ops/s
Iteration  17: 8240713.426 ops/s
Iteration  18: 8250007.091 ops/s
Iteration  19: 8211858.537 ops/s
Iteration  20: 8217171.989 ops/s
Iteration  21: 8215776.599 ops/s
Iteration  22: 8242278.373 ops/s
Iteration  23: 8271342.045 ops/s
Iteration  24: 8250094.328 ops/s
Iteration  25: 8259348.051 ops/s
Iteration  26: 8208340.085 ops/s
Iteration  27: 8211158.627 ops/s
Iteration  28: 8267898.468 ops/s
Iteration  29: 8310117.938 ops/s
Iteration  30: 8234922.058 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhileTest._Benchmark.benchmark_dispose":
  8251553.452 ±(99.9%) 18565.802 ops/s [Average]
  (min, avg, max) = (8208340.085, 8251553.452, 8310117.938), stdev = 27788.421
  CI (99.9%): [8232987.650, 8270119.254] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
ObservableTakeWhileTest._Benchmark.benchmark_dispose  thrpt   30  8251553.452 ± 18565.802  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleZipIterableTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleZipIterableTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1655676.900 ops/s
# Warmup Iteration   2: 2602669.537 ops/s
# Warmup Iteration   3: 2909033.518 ops/s
# Warmup Iteration   4: 2895210.825 ops/s
# Warmup Iteration   5: 2886651.246 ops/s
# Warmup Iteration   6: 2893424.762 ops/s
# Warmup Iteration   7: 2891790.808 ops/s
# Warmup Iteration   8: 2881946.064 ops/s
# Warmup Iteration   9: 2878823.759 ops/s
# Warmup Iteration  10: 2883452.577 ops/s
# Warmup Iteration  11: 2872394.635 ops/s
# Warmup Iteration  12: 2898140.787 ops/s
# Warmup Iteration  13: 2914429.309 ops/s
# Warmup Iteration  14: 2896223.769 ops/s
# Warmup Iteration  15: 2890818.441 ops/s
# Warmup Iteration  16: 2885601.387 ops/s
# Warmup Iteration  17: 2880289.452 ops/s
# Warmup Iteration  18: 2875539.279 ops/s
# Warmup Iteration  19: 2881417.062 ops/s
# Warmup Iteration  20: 2881811.854 ops/s
# Warmup Iteration  21: 2886111.303 ops/s
# Warmup Iteration  22: 2883544.476 ops/s
# Warmup Iteration  23: 2888202.859 ops/s
# Warmup Iteration  24: 2903560.440 ops/s
# Warmup Iteration  25: 2893292.479 ops/s
# Warmup Iteration  26: 2898492.697 ops/s
# Warmup Iteration  27: 2880413.612 ops/s
# Warmup Iteration  28: 2886992.671 ops/s
# Warmup Iteration  29: 2894391.250 ops/s
# Warmup Iteration  30: 2876497.512 ops/s
Iteration   1: 2879062.391 ops/s
Iteration   2: 2888697.771 ops/s
Iteration   3: 2868627.985 ops/s
Iteration   4: 2887770.618 ops/s
Iteration   5: 2885617.737 ops/s
Iteration   6: 2893488.219 ops/s
Iteration   7: 2914165.700 ops/s
Iteration   8: 2886976.987 ops/s
Iteration   9: 2872201.364 ops/s
Iteration  10: 2879813.404 ops/s
Iteration  11: 2883816.539 ops/s
Iteration  12: 2873368.469 ops/s
Iteration  13: 2890415.683 ops/s
Iteration  14: 2869290.108 ops/s
Iteration  15: 2883996.870 ops/s
Iteration  16: 2882587.270 ops/s
Iteration  17: 2873032.996 ops/s
Iteration  18: 2888956.067 ops/s
Iteration  19: 2895632.533 ops/s
Iteration  20: 2877431.974 ops/s
Iteration  21: 2869066.166 ops/s
Iteration  22: 2898357.034 ops/s
Iteration  23: 2879954.229 ops/s
Iteration  24: 2873066.786 ops/s
Iteration  25: 2887835.502 ops/s
Iteration  26: 2870918.322 ops/s
Iteration  27: 2905820.020 ops/s
Iteration  28: 2868877.422 ops/s
Iteration  29: 2876207.702 ops/s
Iteration  30: 2882350.763 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleZipIterableTest._Benchmark.benchmark_dispose":
  2882913.488 ±(99.9%) 7490.090 ops/s [Average]
  (min, avg, max) = (2868627.985, 2882913.488, 2914165.700), stdev = 11210.814
  CI (99.9%): [2875423.398, 2890403.577] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score      Error  Units
SingleZipIterableTest._Benchmark.benchmark_dispose  thrpt   30  2882913.488 ± 7490.090  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableDoFinallyTest._Benchmark.benchmark_disposed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableDoFinallyTest._Benchmark.benchmark_disposed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3915876.220 ops/s
# Warmup Iteration   2: 5723107.225 ops/s
# Warmup Iteration   3: 6607546.851 ops/s
# Warmup Iteration   4: 6652795.221 ops/s
# Warmup Iteration   5: 6667614.686 ops/s
# Warmup Iteration   6: 6662162.660 ops/s
# Warmup Iteration   7: 6579904.364 ops/s
# Warmup Iteration   8: 6621882.358 ops/s
# Warmup Iteration   9: 6743079.130 ops/s
# Warmup Iteration  10: 6671148.921 ops/s
# Warmup Iteration  11: 6664332.300 ops/s
# Warmup Iteration  12: 6719047.221 ops/s
# Warmup Iteration  13: 6755392.933 ops/s
# Warmup Iteration  14: 6714095.796 ops/s
# Warmup Iteration  15: 6702068.885 ops/s
# Warmup Iteration  16: 6711078.691 ops/s
# Warmup Iteration  17: 6695798.994 ops/s
# Warmup Iteration  18: 6664066.591 ops/s
# Warmup Iteration  19: 6713714.963 ops/s
# Warmup Iteration  20: 6675820.757 ops/s
# Warmup Iteration  21: 6713224.402 ops/s
# Warmup Iteration  22: 6669323.059 ops/s
# Warmup Iteration  23: 6739905.245 ops/s
# Warmup Iteration  24: 6672548.333 ops/s
# Warmup Iteration  25: 6777309.526 ops/s
# Warmup Iteration  26: 6673475.264 ops/s
# Warmup Iteration  27: 6745102.287 ops/s
# Warmup Iteration  28: 6688155.309 ops/s
# Warmup Iteration  29: 6740495.906 ops/s
# Warmup Iteration  30: 6689464.182 ops/s
Iteration   1: 6666130.158 ops/s
Iteration   2: 6637448.957 ops/s
Iteration   3: 6721451.584 ops/s
Iteration   4: 6724199.681 ops/s
Iteration   5: 6684592.786 ops/s
Iteration   6: 6593068.047 ops/s
Iteration   7: 6675009.703 ops/s
Iteration   8: 6682597.030 ops/s
Iteration   9: 6704715.283 ops/s
Iteration  10: 6652439.750 ops/s
Iteration  11: 6685659.077 ops/s
Iteration  12: 6622545.794 ops/s
Iteration  13: 6730565.814 ops/s
Iteration  14: 6694534.669 ops/s
Iteration  15: 6770332.952 ops/s
Iteration  16: 6661991.921 ops/s
Iteration  17: 6650748.405 ops/s
Iteration  18: 6695865.842 ops/s
Iteration  19: 6698870.511 ops/s
Iteration  20: 6708006.493 ops/s
Iteration  21: 6666110.142 ops/s
Iteration  22: 6662786.920 ops/s
Iteration  23: 6611288.696 ops/s
Iteration  24: 6678669.432 ops/s
Iteration  25: 6652536.862 ops/s
Iteration  26: 6684181.532 ops/s
Iteration  27: 6727938.316 ops/s
Iteration  28: 6658511.998 ops/s
Iteration  29: 6674714.804 ops/s
Iteration  30: 6681999.389 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableDoFinallyTest._Benchmark.benchmark_disposed":
  6678650.418 ±(99.9%) 24877.990 ops/s [Average]
  (min, avg, max) = (6593068.047, 6678650.418, 6770332.952), stdev = 37236.207
  CI (99.9%): [6653772.429, 6703528.408] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
CompletableDoFinallyTest._Benchmark.benchmark_disposed  thrpt   30  6678650.418 ± 24877.990  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilTest._Benchmark.benchmark_mainCompletes$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilTest._Benchmark.benchmark_mainCompletes

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2113025.145 ops/s
# Warmup Iteration   2: 3125921.926 ops/s
# Warmup Iteration   3: 3607694.138 ops/s
# Warmup Iteration   4: 3577951.446 ops/s
# Warmup Iteration   5: 3569519.700 ops/s
# Warmup Iteration   6: 3569200.137 ops/s
# Warmup Iteration   7: 3563222.626 ops/s
# Warmup Iteration   8: 3543435.065 ops/s
# Warmup Iteration   9: 3580175.064 ops/s
# Warmup Iteration  10: 3588705.100 ops/s
# Warmup Iteration  11: 3563564.821 ops/s
# Warmup Iteration  12: 3567308.787 ops/s
# Warmup Iteration  13: 3572807.975 ops/s
# Warmup Iteration  14: 3568399.992 ops/s
# Warmup Iteration  15: 3572646.267 ops/s
# Warmup Iteration  16: 3532969.196 ops/s
# Warmup Iteration  17: 3590150.454 ops/s
# Warmup Iteration  18: 3568332.789 ops/s
# Warmup Iteration  19: 3569955.353 ops/s
# Warmup Iteration  20: 3578382.420 ops/s
# Warmup Iteration  21: 3578057.595 ops/s
# Warmup Iteration  22: 3570634.724 ops/s
# Warmup Iteration  23: 3570205.318 ops/s
# Warmup Iteration  24: 3598676.015 ops/s
# Warmup Iteration  25: 3577177.639 ops/s
# Warmup Iteration  26: 3560573.599 ops/s
# Warmup Iteration  27: 3607970.859 ops/s
# Warmup Iteration  28: 3572946.504 ops/s
# Warmup Iteration  29: 3584159.717 ops/s
# Warmup Iteration  30: 3581912.413 ops/s
Iteration   1: 3591755.394 ops/s
Iteration   2: 3578585.242 ops/s
Iteration   3: 3571107.942 ops/s
Iteration   4: 3578379.114 ops/s
Iteration   5: 3587605.768 ops/s
Iteration   6: 3584195.781 ops/s
Iteration   7: 3551023.082 ops/s
Iteration   8: 3586548.024 ops/s
Iteration   9: 3557958.288 ops/s
Iteration  10: 3601680.312 ops/s
Iteration  11: 3570589.463 ops/s
Iteration  12: 3576016.259 ops/s
Iteration  13: 3612468.259 ops/s
Iteration  14: 3583117.447 ops/s
Iteration  15: 3574296.851 ops/s
Iteration  16: 3543512.470 ops/s
Iteration  17: 3573406.663 ops/s
Iteration  18: 3580079.465 ops/s
Iteration  19: 3587654.224 ops/s
Iteration  20: 3554778.350 ops/s
Iteration  21: 3562064.826 ops/s
Iteration  22: 3589332.248 ops/s
Iteration  23: 3563325.714 ops/s
Iteration  24: 3575482.061 ops/s
Iteration  25: 3587743.192 ops/s
Iteration  26: 3579517.695 ops/s
Iteration  27: 3575689.887 ops/s
Iteration  28: 3603994.351 ops/s
Iteration  29: 3587546.836 ops/s
Iteration  30: 3571769.349 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilTest._Benchmark.benchmark_mainCompletes":
  3578040.819 ±(99.9%) 10213.680 ops/s [Average]
  (min, avg, max) = (3543512.470, 3578040.819, 3612468.259), stdev = 15287.357
  CI (99.9%): [3567827.138, 3588254.499] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
ObservableTakeUntilTest._Benchmark.benchmark_mainCompletes  thrpt   30  3578040.819 ± 10213.680  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisherTest._Benchmark.benchmark_otherError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisherTest._Benchmark.benchmark_otherError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 547142.915 ops/s
# Warmup Iteration   2: 706278.758 ops/s
# Warmup Iteration   3: 822599.271 ops/s
# Warmup Iteration   4: 760724.233 ops/s
# Warmup Iteration   5: 833876.468 ops/s
# Warmup Iteration   6: 830394.283 ops/s
# Warmup Iteration   7: 831758.001 ops/s
# Warmup Iteration   8: 829773.089 ops/s
# Warmup Iteration   9: 832731.701 ops/s
# Warmup Iteration  10: 832165.674 ops/s
# Warmup Iteration  11: 827147.894 ops/s
# Warmup Iteration  12: 831933.520 ops/s
# Warmup Iteration  13: 826936.619 ops/s
# Warmup Iteration  14: 825304.899 ops/s
# Warmup Iteration  15: 824931.392 ops/s
# Warmup Iteration  16: 822531.391 ops/s
# Warmup Iteration  17: 864964.404 ops/s
# Warmup Iteration  18: 861741.149 ops/s
# Warmup Iteration  19: 867992.583 ops/s
# Warmup Iteration  20: 869419.405 ops/s
# Warmup Iteration  21: 865982.902 ops/s
# Warmup Iteration  22: 864883.328 ops/s
# Warmup Iteration  23: 869905.604 ops/s
# Warmup Iteration  24: 863945.116 ops/s
# Warmup Iteration  25: 867842.616 ops/s
# Warmup Iteration  26: 870798.920 ops/s
# Warmup Iteration  27: 868836.531 ops/s
# Warmup Iteration  28: 865298.370 ops/s
# Warmup Iteration  29: 867225.998 ops/s
# Warmup Iteration  30: 870505.319 ops/s
Iteration   1: 869034.249 ops/s
Iteration   2: 867216.896 ops/s
Iteration   3: 862702.458 ops/s
Iteration   4: 873318.041 ops/s
Iteration   5: 866669.985 ops/s
Iteration   6: 868271.787 ops/s
Iteration   7: 866243.559 ops/s
Iteration   8: 863637.316 ops/s
Iteration   9: 868122.072 ops/s
Iteration  10: 871583.654 ops/s
Iteration  11: 868480.046 ops/s
Iteration  12: 863773.160 ops/s
Iteration  13: 867438.220 ops/s
Iteration  14: 864091.243 ops/s
Iteration  15: 868865.071 ops/s
Iteration  16: 867325.310 ops/s
Iteration  17: 867975.867 ops/s
Iteration  18: 865816.411 ops/s
Iteration  19: 861566.175 ops/s
Iteration  20: 865452.964 ops/s
Iteration  21: 868851.369 ops/s
Iteration  22: 866133.839 ops/s
Iteration  23: 862848.738 ops/s
Iteration  24: 862988.089 ops/s
Iteration  25: 870126.134 ops/s
Iteration  26: 868404.071 ops/s
Iteration  27: 864122.281 ops/s
Iteration  28: 867377.290 ops/s
Iteration  29: 865760.564 ops/s
Iteration  30: 870216.466 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisherTest._Benchmark.benchmark_otherError":
  866813.777 ±(99.9%) 1865.424 ops/s [Average]
  (min, avg, max) = (861566.175, 866813.777, 873318.041), stdev = 2792.079
  CI (99.9%): [864948.353, 868679.202] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
MaybeTimeoutPublisherTest._Benchmark.benchmark_otherError  thrpt   30  866813.777 ± 1865.424  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableAmbTest._Benchmark.benchmark_ambCancelsOthers$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableAmbTest._Benchmark.benchmark_ambCancelsOthers

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1712020.182 ops/s
# Warmup Iteration   2: 2382739.799 ops/s
# Warmup Iteration   3: 2743787.373 ops/s
# Warmup Iteration   4: 2737240.789 ops/s
# Warmup Iteration   5: 2727639.224 ops/s
# Warmup Iteration   6: 2717940.951 ops/s
# Warmup Iteration   7: 2744878.130 ops/s
# Warmup Iteration   8: 2736806.619 ops/s
# Warmup Iteration   9: 2723847.786 ops/s
# Warmup Iteration  10: 2718552.049 ops/s
# Warmup Iteration  11: 2724308.470 ops/s
# Warmup Iteration  12: 2726194.695 ops/s
# Warmup Iteration  13: 2722152.108 ops/s
# Warmup Iteration  14: 2721707.797 ops/s
# Warmup Iteration  15: 2732723.090 ops/s
# Warmup Iteration  16: 2721353.026 ops/s
# Warmup Iteration  17: 2709386.897 ops/s
# Warmup Iteration  18: 2723620.512 ops/s
# Warmup Iteration  19: 2716987.482 ops/s
# Warmup Iteration  20: 2715640.795 ops/s
# Warmup Iteration  21: 2721713.377 ops/s
# Warmup Iteration  22: 2716615.031 ops/s
# Warmup Iteration  23: 2729944.225 ops/s
# Warmup Iteration  24: 2720281.859 ops/s
# Warmup Iteration  25: 2732454.761 ops/s
# Warmup Iteration  26: 2727298.492 ops/s
# Warmup Iteration  27: 2719883.892 ops/s
# Warmup Iteration  28: 2724487.090 ops/s
# Warmup Iteration  29: 2708834.922 ops/s
# Warmup Iteration  30: 2740328.637 ops/s
Iteration   1: 2721106.893 ops/s
Iteration   2: 2715680.096 ops/s
Iteration   3: 2716108.234 ops/s
Iteration   4: 2724089.495 ops/s
Iteration   5: 2725448.440 ops/s
Iteration   6: 2703837.945 ops/s
Iteration   7: 2717688.590 ops/s
Iteration   8: 2738628.873 ops/s
Iteration   9: 2724887.441 ops/s
Iteration  10: 2709032.549 ops/s
Iteration  11: 2712308.136 ops/s
Iteration  12: 2727678.012 ops/s
Iteration  13: 2724439.981 ops/s
Iteration  14: 2717544.746 ops/s
Iteration  15: 2716597.859 ops/s
Iteration  16: 2713675.095 ops/s
Iteration  17: 2716671.491 ops/s
Iteration  18: 2718003.160 ops/s
Iteration  19: 2699657.830 ops/s
Iteration  20: 2715465.544 ops/s
Iteration  21: 2719230.538 ops/s
Iteration  22: 2730788.616 ops/s
Iteration  23: 2727505.394 ops/s
Iteration  24: 2714314.475 ops/s
Iteration  25: 2727218.727 ops/s
Iteration  26: 2708331.897 ops/s
Iteration  27: 2718575.023 ops/s
Iteration  28: 2714639.338 ops/s
Iteration  29: 2710986.013 ops/s
Iteration  30: 2718390.621 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableAmbTest._Benchmark.benchmark_ambCancelsOthers":
  2718284.368 ±(99.9%) 5413.971 ops/s [Average]
  (min, avg, max) = (2699657.830, 2718284.368, 2738628.873), stdev = 8103.378
  CI (99.9%): [2712870.397, 2723698.339] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
ObservableAmbTest._Benchmark.benchmark_ambCancelsOthers  thrpt   30  2718284.368 ± 5413.971  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilTest._Benchmark.benchmark_untilPublisherOtherOnComplete$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilTest._Benchmark.benchmark_untilPublisherOtherOnComplete

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2622459.956 ops/s
# Warmup Iteration   2: 3896050.632 ops/s
# Warmup Iteration   3: 4402064.396 ops/s
# Warmup Iteration   4: 4465521.264 ops/s
# Warmup Iteration   5: 4443519.787 ops/s
# Warmup Iteration   6: 4444787.549 ops/s
# Warmup Iteration   7: 4430739.745 ops/s
# Warmup Iteration   8: 4439004.757 ops/s
# Warmup Iteration   9: 4445185.984 ops/s
# Warmup Iteration  10: 4420097.736 ops/s
# Warmup Iteration  11: 4410295.911 ops/s
# Warmup Iteration  12: 4440106.884 ops/s
# Warmup Iteration  13: 4438316.571 ops/s
# Warmup Iteration  14: 4422742.409 ops/s
# Warmup Iteration  15: 4427586.785 ops/s
# Warmup Iteration  16: 4433996.446 ops/s
# Warmup Iteration  17: 4431828.573 ops/s
# Warmup Iteration  18: 4423565.303 ops/s
# Warmup Iteration  19: 4445690.325 ops/s
# Warmup Iteration  20: 4453138.478 ops/s
# Warmup Iteration  21: 4435277.123 ops/s
# Warmup Iteration  22: 4449216.077 ops/s
# Warmup Iteration  23: 4427729.911 ops/s
# Warmup Iteration  24: 4472235.284 ops/s
# Warmup Iteration  25: 4467719.455 ops/s
# Warmup Iteration  26: 4425945.543 ops/s
# Warmup Iteration  27: 4453353.114 ops/s
# Warmup Iteration  28: 4439458.139 ops/s
# Warmup Iteration  29: 4390228.135 ops/s
# Warmup Iteration  30: 4432765.432 ops/s
Iteration   1: 4449680.771 ops/s
Iteration   2: 4384394.161 ops/s
Iteration   3: 4414508.098 ops/s
Iteration   4: 4450956.689 ops/s
Iteration   5: 4464026.889 ops/s
Iteration   6: 4381965.587 ops/s
Iteration   7: 4425583.530 ops/s
Iteration   8: 4422374.536 ops/s
Iteration   9: 4452870.080 ops/s
Iteration  10: 4445192.427 ops/s
Iteration  11: 4450477.683 ops/s
Iteration  12: 4426577.728 ops/s
Iteration  13: 4422758.855 ops/s
Iteration  14: 4397900.670 ops/s
Iteration  15: 4432534.276 ops/s
Iteration  16: 4425565.026 ops/s
Iteration  17: 4423741.709 ops/s
Iteration  18: 4439548.320 ops/s
Iteration  19: 4438169.735 ops/s
Iteration  20: 4441644.445 ops/s
Iteration  21: 4428721.033 ops/s
Iteration  22: 4416614.066 ops/s
Iteration  23: 4462009.764 ops/s
Iteration  24: 4450171.035 ops/s
Iteration  25: 4449659.815 ops/s
Iteration  26: 4460244.890 ops/s
Iteration  27: 4436317.824 ops/s
Iteration  28: 4433438.627 ops/s
Iteration  29: 4419667.368 ops/s
Iteration  30: 4408964.307 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilTest._Benchmark.benchmark_untilPublisherOtherOnComplete":
  4431875.998 ±(99.9%) 13995.032 ops/s [Average]
  (min, avg, max) = (4381965.587, 4431875.998, 4464026.889), stdev = 20947.107
  CI (99.9%): [4417880.966, 4445871.030] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
MaybeTakeUntilTest._Benchmark.benchmark_untilPublisherOtherOnComplete  thrpt   30  4431875.998 ± 13995.032  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilTest._Benchmark.benchmark_untilPublisherMainSuccess$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilTest._Benchmark.benchmark_untilPublisherMainSuccess

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2073462.085 ops/s
# Warmup Iteration   2: 2944480.695 ops/s
# Warmup Iteration   3: 3377692.347 ops/s
# Warmup Iteration   4: 3347806.774 ops/s
# Warmup Iteration   5: 3353055.293 ops/s
# Warmup Iteration   6: 3356122.875 ops/s
# Warmup Iteration   7: 3363553.374 ops/s
# Warmup Iteration   8: 3332430.679 ops/s
# Warmup Iteration   9: 3359476.158 ops/s
# Warmup Iteration  10: 3364481.351 ops/s
# Warmup Iteration  11: 3344032.508 ops/s
# Warmup Iteration  12: 3319030.220 ops/s
# Warmup Iteration  13: 3328834.035 ops/s
# Warmup Iteration  14: 3364510.059 ops/s
# Warmup Iteration  15: 3357720.734 ops/s
# Warmup Iteration  16: 3343710.187 ops/s
# Warmup Iteration  17: 3354714.912 ops/s
# Warmup Iteration  18: 3352865.513 ops/s
# Warmup Iteration  19: 3346871.657 ops/s
# Warmup Iteration  20: 3342818.211 ops/s
# Warmup Iteration  21: 3359566.408 ops/s
# Warmup Iteration  22: 3366929.336 ops/s
# Warmup Iteration  23: 3358338.688 ops/s
# Warmup Iteration  24: 3337048.835 ops/s
# Warmup Iteration  25: 3333550.754 ops/s
# Warmup Iteration  26: 3336391.469 ops/s
# Warmup Iteration  27: 3343814.611 ops/s
# Warmup Iteration  28: 3351050.585 ops/s
# Warmup Iteration  29: 3357016.226 ops/s
# Warmup Iteration  30: 3339130.368 ops/s
Iteration   1: 3366382.312 ops/s
Iteration   2: 3332348.794 ops/s
Iteration   3: 3372544.458 ops/s
Iteration   4: 3339672.698 ops/s
Iteration   5: 3339998.884 ops/s
Iteration   6: 3340076.266 ops/s
Iteration   7: 3348792.131 ops/s
Iteration   8: 3357894.744 ops/s
Iteration   9: 3368014.988 ops/s
Iteration  10: 3356047.741 ops/s
Iteration  11: 3355911.581 ops/s
Iteration  12: 3320358.807 ops/s
Iteration  13: 3345022.947 ops/s
Iteration  14: 3353502.096 ops/s
Iteration  15: 3338228.553 ops/s
Iteration  16: 3347276.972 ops/s
Iteration  17: 3345498.864 ops/s
Iteration  18: 3322584.696 ops/s
Iteration  19: 3360109.523 ops/s
Iteration  20: 3309648.584 ops/s
Iteration  21: 3373357.604 ops/s
Iteration  22: 3352753.919 ops/s
Iteration  23: 3341437.381 ops/s
Iteration  24: 3339213.772 ops/s
Iteration  25: 3337358.234 ops/s
Iteration  26: 3365650.796 ops/s
Iteration  27: 3330523.065 ops/s
Iteration  28: 3361478.631 ops/s
Iteration  29: 3346548.115 ops/s
Iteration  30: 3344536.227 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilTest._Benchmark.benchmark_untilPublisherMainSuccess":
  3347092.446 ±(99.9%) 10278.704 ops/s [Average]
  (min, avg, max) = (3309648.584, 3347092.446, 3373357.604), stdev = 15384.682
  CI (99.9%): [3336813.742, 3357371.150] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score       Error  Units
ObservableTakeUntilTest._Benchmark.benchmark_untilPublisherMainSuccess  thrpt   30  3347092.446 ± 10278.704  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3889168.712 ops/s
# Warmup Iteration   2: 5630739.831 ops/s
# Warmup Iteration   3: 6367552.557 ops/s
# Warmup Iteration   4: 6346465.998 ops/s
# Warmup Iteration   5: 6323117.111 ops/s
# Warmup Iteration   6: 6376651.040 ops/s
# Warmup Iteration   7: 6371485.912 ops/s
# Warmup Iteration   8: 6367838.727 ops/s
# Warmup Iteration   9: 6310442.908 ops/s
# Warmup Iteration  10: 6383681.597 ops/s
# Warmup Iteration  11: 6384215.621 ops/s
# Warmup Iteration  12: 6364138.756 ops/s
# Warmup Iteration  13: 6319457.371 ops/s
# Warmup Iteration  14: 6339660.143 ops/s
# Warmup Iteration  15: 6399216.916 ops/s
# Warmup Iteration  16: 6381868.677 ops/s
# Warmup Iteration  17: 6414514.831 ops/s
# Warmup Iteration  18: 6470115.991 ops/s
# Warmup Iteration  19: 6380298.086 ops/s
# Warmup Iteration  20: 6358071.427 ops/s
# Warmup Iteration  21: 6401806.204 ops/s
# Warmup Iteration  22: 6385041.423 ops/s
# Warmup Iteration  23: 6370899.827 ops/s
# Warmup Iteration  24: 6361905.824 ops/s
# Warmup Iteration  25: 6335828.592 ops/s
# Warmup Iteration  26: 6377171.066 ops/s
# Warmup Iteration  27: 6400245.408 ops/s
# Warmup Iteration  28: 6379950.578 ops/s
# Warmup Iteration  29: 6408024.064 ops/s
# Warmup Iteration  30: 6357553.669 ops/s
Iteration   1: 6402744.489 ops/s
Iteration   2: 6407870.292 ops/s
Iteration   3: 6357160.066 ops/s
Iteration   4: 6421091.612 ops/s
Iteration   5: 6394132.554 ops/s
Iteration   6: 6346428.502 ops/s
Iteration   7: 6427365.653 ops/s
Iteration   8: 6360962.328 ops/s
Iteration   9: 6364438.012 ops/s
Iteration  10: 6394727.877 ops/s
Iteration  11: 6383880.380 ops/s
Iteration  12: 6454654.066 ops/s
Iteration  13: 6365064.246 ops/s
Iteration  14: 6405984.488 ops/s
Iteration  15: 6365615.219 ops/s
Iteration  16: 6389352.348 ops/s
Iteration  17: 6357782.206 ops/s
Iteration  18: 6383178.566 ops/s
Iteration  19: 6389615.436 ops/s
Iteration  20: 6439400.944 ops/s
Iteration  21: 6377352.735 ops/s
Iteration  22: 6390140.782 ops/s
Iteration  23: 6391335.228 ops/s
Iteration  24: 6354063.562 ops/s
Iteration  25: 6379207.517 ops/s
Iteration  26: 6434926.015 ops/s
Iteration  27: 6397484.633 ops/s
Iteration  28: 6414796.587 ops/s
Iteration  29: 6390117.885 ops/s
Iteration  30: 6361590.466 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeTest._Benchmark.benchmark_dispose":
  6390082.156 ±(99.9%) 18250.057 ops/s [Average]
  (min, avg, max) = (6346428.502, 6390082.156, 6454654.066), stdev = 27315.829
  CI (99.9%): [6371832.099, 6408332.214] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt        Score       Error  Units
FlowableTakeTest._Benchmark.benchmark_dispose  thrpt   30  6390082.156 ± 18250.057  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilTest._Benchmark.benchmark_mainErrors$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilTest._Benchmark.benchmark_mainErrors

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 541939.194 ops/s
# Warmup Iteration   2: 710396.984 ops/s
# Warmup Iteration   3: 747961.076 ops/s
# Warmup Iteration   4: 811191.152 ops/s
# Warmup Iteration   5: 831233.762 ops/s
# Warmup Iteration   6: 835898.706 ops/s
# Warmup Iteration   7: 830493.438 ops/s
# Warmup Iteration   8: 834677.532 ops/s
# Warmup Iteration   9: 830504.700 ops/s
# Warmup Iteration  10: 831422.422 ops/s
# Warmup Iteration  11: 828321.438 ops/s
# Warmup Iteration  12: 830038.790 ops/s
# Warmup Iteration  13: 827744.635 ops/s
# Warmup Iteration  14: 826729.257 ops/s
# Warmup Iteration  15: 824210.867 ops/s
# Warmup Iteration  16: 826389.851 ops/s
# Warmup Iteration  17: 867979.566 ops/s
# Warmup Iteration  18: 868396.856 ops/s
# Warmup Iteration  19: 870834.477 ops/s
# Warmup Iteration  20: 866719.647 ops/s
# Warmup Iteration  21: 869279.526 ops/s
# Warmup Iteration  22: 867557.492 ops/s
# Warmup Iteration  23: 867005.043 ops/s
# Warmup Iteration  24: 869653.768 ops/s
# Warmup Iteration  25: 866047.406 ops/s
# Warmup Iteration  26: 870839.366 ops/s
# Warmup Iteration  27: 866416.289 ops/s
# Warmup Iteration  28: 866975.881 ops/s
# Warmup Iteration  29: 869031.542 ops/s
# Warmup Iteration  30: 866626.212 ops/s
Iteration   1: 870008.967 ops/s
Iteration   2: 868263.882 ops/s
Iteration   3: 863507.317 ops/s
Iteration   4: 865785.314 ops/s
Iteration   5: 869132.507 ops/s
Iteration   6: 868539.987 ops/s
Iteration   7: 866105.139 ops/s
Iteration   8: 868794.727 ops/s
Iteration   9: 864597.770 ops/s
Iteration  10: 864283.194 ops/s
Iteration  11: 865482.362 ops/s
Iteration  12: 864338.278 ops/s
Iteration  13: 868477.695 ops/s
Iteration  14: 866519.948 ops/s
Iteration  15: 865504.718 ops/s
Iteration  16: 872122.914 ops/s
Iteration  17: 870073.910 ops/s
Iteration  18: 873600.939 ops/s
Iteration  19: 869050.799 ops/s
Iteration  20: 863709.480 ops/s
Iteration  21: 874286.408 ops/s
Iteration  22: 870086.718 ops/s
Iteration  23: 870479.647 ops/s
Iteration  24: 870050.890 ops/s
Iteration  25: 864567.690 ops/s
Iteration  26: 867803.959 ops/s
Iteration  27: 871720.197 ops/s
Iteration  28: 867379.873 ops/s
Iteration  29: 865883.763 ops/s
Iteration  30: 867136.053 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilTest._Benchmark.benchmark_mainErrors":
  867909.835 ±(99.9%) 1946.713 ops/s [Average]
  (min, avg, max) = (863507.317, 867909.835, 874286.408), stdev = 2913.749
  CI (99.9%): [865963.122, 869856.548] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score      Error  Units
MaybeTakeUntilTest._Benchmark.benchmark_mainErrors  thrpt   30  867909.835 ± 1946.713  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilTest._Benchmark.benchmark_otherErrors$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilTest._Benchmark.benchmark_otherErrors

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 563211.964 ops/s
# Warmup Iteration   2: 727267.727 ops/s
# Warmup Iteration   3: 737847.428 ops/s
# Warmup Iteration   4: 821055.850 ops/s
# Warmup Iteration   5: 829096.985 ops/s
# Warmup Iteration   6: 831952.290 ops/s
# Warmup Iteration   7: 829885.078 ops/s
# Warmup Iteration   8: 831758.313 ops/s
# Warmup Iteration   9: 829920.560 ops/s
# Warmup Iteration  10: 830065.187 ops/s
# Warmup Iteration  11: 825491.217 ops/s
# Warmup Iteration  12: 827070.871 ops/s
# Warmup Iteration  13: 824456.393 ops/s
# Warmup Iteration  14: 825302.782 ops/s
# Warmup Iteration  15: 821316.940 ops/s
# Warmup Iteration  16: 822583.515 ops/s
# Warmup Iteration  17: 858743.514 ops/s
# Warmup Iteration  18: 864387.274 ops/s
# Warmup Iteration  19: 858354.433 ops/s
# Warmup Iteration  20: 862119.375 ops/s
# Warmup Iteration  21: 859056.575 ops/s
# Warmup Iteration  22: 857026.877 ops/s
# Warmup Iteration  23: 862704.169 ops/s
# Warmup Iteration  24: 854954.275 ops/s
# Warmup Iteration  25: 860273.656 ops/s
# Warmup Iteration  26: 855822.173 ops/s
# Warmup Iteration  27: 861937.556 ops/s
# Warmup Iteration  28: 864769.841 ops/s
# Warmup Iteration  29: 861296.739 ops/s
# Warmup Iteration  30: 858455.096 ops/s
Iteration   1: 859891.316 ops/s
Iteration   2: 858801.048 ops/s
Iteration   3: 858203.638 ops/s
Iteration   4: 859138.573 ops/s
Iteration   5: 862366.252 ops/s
Iteration   6: 860636.350 ops/s
Iteration   7: 863726.214 ops/s
Iteration   8: 854847.784 ops/s
Iteration   9: 859372.523 ops/s
Iteration  10: 866425.687 ops/s
Iteration  11: 859144.361 ops/s
Iteration  12: 864820.135 ops/s
Iteration  13: 856124.224 ops/s
Iteration  14: 858723.170 ops/s
Iteration  15: 858682.687 ops/s
Iteration  16: 862754.245 ops/s
Iteration  17: 865587.502 ops/s
Iteration  18: 863091.671 ops/s
Iteration  19: 861241.764 ops/s
Iteration  20: 859969.557 ops/s
Iteration  21: 861182.070 ops/s
Iteration  22: 865808.516 ops/s
Iteration  23: 859767.938 ops/s
Iteration  24: 859607.328 ops/s
Iteration  25: 860188.803 ops/s
Iteration  26: 855555.002 ops/s
Iteration  27: 861747.119 ops/s
Iteration  28: 856366.068 ops/s
Iteration  29: 859951.020 ops/s
Iteration  30: 862910.752 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilTest._Benchmark.benchmark_otherErrors":
  860554.444 ±(99.9%) 1986.769 ops/s [Average]
  (min, avg, max) = (854847.784, 860554.444, 866425.687), stdev = 2973.703
  CI (99.9%): [858567.675, 862541.213] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score      Error  Units
MaybeTakeUntilTest._Benchmark.benchmark_otherErrors  thrpt   30  860554.444 ± 1986.769  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTests._Benchmark.benchmark_shouldUnsubscribeFromUnderlyingSubscriptionOnDispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTests._Benchmark.benchmark_shouldUnsubscribeFromUnderlyingSubscriptionOnDispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1736788.685 ops/s
# Warmup Iteration   2: 2566003.053 ops/s
# Warmup Iteration   3: 2936568.080 ops/s
# Warmup Iteration   4: 2936472.729 ops/s
# Warmup Iteration   5: 2902998.235 ops/s
# Warmup Iteration   6: 2933233.652 ops/s
# Warmup Iteration   7: 2925610.761 ops/s
# Warmup Iteration   8: 2928851.345 ops/s
# Warmup Iteration   9: 2922290.740 ops/s
# Warmup Iteration  10: 2940144.222 ops/s
# Warmup Iteration  11: 2930219.044 ops/s
# Warmup Iteration  12: 2928935.543 ops/s
# Warmup Iteration  13: 2902208.846 ops/s
# Warmup Iteration  14: 2922335.556 ops/s
# Warmup Iteration  15: 2921307.753 ops/s
# Warmup Iteration  16: 2906274.326 ops/s
# Warmup Iteration  17: 2887274.310 ops/s
# Warmup Iteration  18: 2917657.413 ops/s
# Warmup Iteration  19: 2891241.844 ops/s
# Warmup Iteration  20: 2877522.817 ops/s
# Warmup Iteration  21: 2892821.921 ops/s
# Warmup Iteration  22: 2917473.198 ops/s
# Warmup Iteration  23: 2915752.332 ops/s
# Warmup Iteration  24: 2897291.162 ops/s
# Warmup Iteration  25: 2883962.599 ops/s
# Warmup Iteration  26: 2919356.003 ops/s
# Warmup Iteration  27: 2899944.761 ops/s
# Warmup Iteration  28: 2916071.419 ops/s
# Warmup Iteration  29: 2911181.382 ops/s
# Warmup Iteration  30: 2897823.368 ops/s
Iteration   1: 2894468.444 ops/s
Iteration   2: 2923329.009 ops/s
Iteration   3: 2913791.852 ops/s
Iteration   4: 2914312.732 ops/s
Iteration   5: 2886123.833 ops/s
Iteration   6: 2909615.622 ops/s
Iteration   7: 2901048.317 ops/s
Iteration   8: 2886197.192 ops/s
Iteration   9: 2936173.244 ops/s
Iteration  10: 2902221.078 ops/s
Iteration  11: 2919154.256 ops/s
Iteration  12: 2904693.742 ops/s
Iteration  13: 2893418.608 ops/s
Iteration  14: 2888800.395 ops/s
Iteration  15: 2888465.764 ops/s
Iteration  16: 2907077.521 ops/s
Iteration  17: 2874548.180 ops/s
Iteration  18: 2895735.683 ops/s
Iteration  19: 2909323.414 ops/s
Iteration  20: 2903110.895 ops/s
Iteration  21: 2902674.885 ops/s
Iteration  22: 2881200.458 ops/s
Iteration  23: 2909504.228 ops/s
Iteration  24: 2887385.403 ops/s
Iteration  25: 2890640.300 ops/s
Iteration  26: 2896759.129 ops/s
Iteration  27: 2902244.202 ops/s
Iteration  28: 2893888.755 ops/s
Iteration  29: 2882012.833 ops/s
Iteration  30: 2881277.710 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTests._Benchmark.benchmark_shouldUnsubscribeFromUnderlyingSubscriptionOnDispose":
  2899306.589 ±(99.9%) 9344.947 ops/s [Average]
  (min, avg, max) = (2874548.180, 2899306.589, 2936173.244), stdev = 13987.078
  CI (99.9%): [2889961.642, 2908651.537] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                        Mode  Cnt        Score      Error  Units
FlowableTimeoutTests._Benchmark.benchmark_shouldUnsubscribeFromUnderlyingSubscriptionOnDispose  thrpt   30  2899306.589 ± 9344.947  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutTest._Benchmark.benchmark_mainError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutTest._Benchmark.benchmark_mainError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 554127.024 ops/s
# Warmup Iteration   2: 730153.646 ops/s
# Warmup Iteration   3: 729646.809 ops/s
# Warmup Iteration   4: 818107.825 ops/s
# Warmup Iteration   5: 824866.460 ops/s
# Warmup Iteration   6: 822828.660 ops/s
# Warmup Iteration   7: 826180.933 ops/s
# Warmup Iteration   8: 823834.259 ops/s
# Warmup Iteration   9: 817453.440 ops/s
# Warmup Iteration  10: 821647.243 ops/s
# Warmup Iteration  11: 821805.787 ops/s
# Warmup Iteration  12: 821847.956 ops/s
# Warmup Iteration  13: 820510.408 ops/s
# Warmup Iteration  14: 820067.570 ops/s
# Warmup Iteration  15: 815270.713 ops/s
# Warmup Iteration  16: 819045.876 ops/s
# Warmup Iteration  17: 860484.538 ops/s
# Warmup Iteration  18: 855984.525 ops/s
# Warmup Iteration  19: 856745.647 ops/s
# Warmup Iteration  20: 863754.652 ops/s
# Warmup Iteration  21: 864176.703 ops/s
# Warmup Iteration  22: 861443.990 ops/s
# Warmup Iteration  23: 861966.419 ops/s
# Warmup Iteration  24: 857814.766 ops/s
# Warmup Iteration  25: 859589.151 ops/s
# Warmup Iteration  26: 858946.923 ops/s
# Warmup Iteration  27: 859570.216 ops/s
# Warmup Iteration  28: 865329.732 ops/s
# Warmup Iteration  29: 858909.405 ops/s
# Warmup Iteration  30: 857435.053 ops/s
Iteration   1: 857312.495 ops/s
Iteration   2: 857309.075 ops/s
Iteration   3: 863301.003 ops/s
Iteration   4: 859299.872 ops/s
Iteration   5: 859590.704 ops/s
Iteration   6: 857547.032 ops/s
Iteration   7: 861790.332 ops/s
Iteration   8: 860459.901 ops/s
Iteration   9: 865878.459 ops/s
Iteration  10: 859783.591 ops/s
Iteration  11: 860203.875 ops/s
Iteration  12: 859054.221 ops/s
Iteration  13: 863103.564 ops/s
Iteration  14: 860564.960 ops/s
Iteration  15: 859843.719 ops/s
Iteration  16: 860394.045 ops/s
Iteration  17: 857409.559 ops/s
Iteration  18: 862884.789 ops/s
Iteration  19: 859260.470 ops/s
Iteration  20: 860591.690 ops/s
Iteration  21: 857595.579 ops/s
Iteration  22: 866455.322 ops/s
Iteration  23: 869413.619 ops/s
Iteration  24: 856156.467 ops/s
Iteration  25: 860921.142 ops/s
Iteration  26: 858835.056 ops/s
Iteration  27: 858471.142 ops/s
Iteration  28: 856766.614 ops/s
Iteration  29: 861056.031 ops/s
Iteration  30: 858234.761 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutTest._Benchmark.benchmark_mainError":
  860316.303 ±(99.9%) 2016.285 ops/s [Average]
  (min, avg, max) = (856156.467, 860316.303, 869413.619), stdev = 3017.881
  CI (99.9%): [858300.018, 862332.588] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt       Score      Error  Units
MaybeTimeoutTest._Benchmark.benchmark_mainError  thrpt   30  860316.303 ± 2016.285  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeCacheTest._Benchmark.benchmark_onlineError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeCacheTest._Benchmark.benchmark_onlineError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 361436.015 ops/s
# Warmup Iteration   2: 536494.075 ops/s
# Warmup Iteration   3: 612809.380 ops/s
# Warmup Iteration   4: 616442.043 ops/s
# Warmup Iteration   5: 614832.169 ops/s
# Warmup Iteration   6: 618043.555 ops/s
# Warmup Iteration   7: 618627.999 ops/s
# Warmup Iteration   8: 618010.126 ops/s
# Warmup Iteration   9: 615192.201 ops/s
# Warmup Iteration  10: 617300.858 ops/s
# Warmup Iteration  11: 616737.041 ops/s
# Warmup Iteration  12: 616314.791 ops/s
# Warmup Iteration  13: 614251.360 ops/s
# Warmup Iteration  14: 613108.934 ops/s
# Warmup Iteration  15: 615379.297 ops/s
# Warmup Iteration  16: 616045.298 ops/s
# Warmup Iteration  17: 639889.553 ops/s
# Warmup Iteration  18: 641318.922 ops/s
# Warmup Iteration  19: 637804.845 ops/s
# Warmup Iteration  20: 636428.432 ops/s
# Warmup Iteration  21: 638774.233 ops/s
# Warmup Iteration  22: 638383.685 ops/s
# Warmup Iteration  23: 638221.062 ops/s
# Warmup Iteration  24: 637190.257 ops/s
# Warmup Iteration  25: 637546.428 ops/s
# Warmup Iteration  26: 638500.292 ops/s
# Warmup Iteration  27: 638784.797 ops/s
# Warmup Iteration  28: 641724.865 ops/s
# Warmup Iteration  29: 641203.463 ops/s
# Warmup Iteration  30: 638750.548 ops/s
Iteration   1: 637675.598 ops/s
Iteration   2: 637117.114 ops/s
Iteration   3: 640306.089 ops/s
Iteration   4: 638267.406 ops/s
Iteration   5: 640700.039 ops/s
Iteration   6: 640495.368 ops/s
Iteration   7: 640333.819 ops/s
Iteration   8: 642070.689 ops/s
Iteration   9: 636319.513 ops/s
Iteration  10: 638629.945 ops/s
Iteration  11: 637818.768 ops/s
Iteration  12: 638862.030 ops/s
Iteration  13: 638819.942 ops/s
Iteration  14: 640613.893 ops/s
Iteration  15: 639340.783 ops/s
Iteration  16: 638926.864 ops/s
Iteration  17: 637240.178 ops/s
Iteration  18: 640940.658 ops/s
Iteration  19: 640665.772 ops/s
Iteration  20: 641017.214 ops/s
Iteration  21: 637111.654 ops/s
Iteration  22: 643203.193 ops/s
Iteration  23: 639123.159 ops/s
Iteration  24: 639439.382 ops/s
Iteration  25: 639135.151 ops/s
Iteration  26: 638731.489 ops/s
Iteration  27: 636307.899 ops/s
Iteration  28: 643008.948 ops/s
Iteration  29: 640289.406 ops/s
Iteration  30: 638293.460 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeCacheTest._Benchmark.benchmark_onlineError":
  639360.181 ±(99.9%) 1191.277 ops/s [Average]
  (min, avg, max) = (636307.899, 639360.181, 643203.193), stdev = 1783.047
  CI (99.9%): [638168.904, 640551.458] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt       Score      Error  Units
MaybeCacheTest._Benchmark.benchmark_onlineError  thrpt   30  639360.181 ± 1191.277  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleZipIterableTest._Benchmark.benchmark_middleError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleZipIterableTest._Benchmark.benchmark_middleError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 435028.811 ops/s
# Warmup Iteration   2: 627563.732 ops/s
# Warmup Iteration   3: 611208.586 ops/s
# Warmup Iteration   4: 694322.190 ops/s
# Warmup Iteration   5: 697435.035 ops/s
# Warmup Iteration   6: 697848.868 ops/s
# Warmup Iteration   7: 679398.174 ops/s
# Warmup Iteration   8: 696797.266 ops/s
# Warmup Iteration   9: 697400.769 ops/s
# Warmup Iteration  10: 695920.028 ops/s
# Warmup Iteration  11: 696313.256 ops/s
# Warmup Iteration  12: 693988.862 ops/s
# Warmup Iteration  13: 693138.020 ops/s
# Warmup Iteration  14: 690803.067 ops/s
# Warmup Iteration  15: 690924.531 ops/s
# Warmup Iteration  16: 691373.263 ops/s
# Warmup Iteration  17: 721811.458 ops/s
# Warmup Iteration  18: 721678.814 ops/s
# Warmup Iteration  19: 720392.288 ops/s
# Warmup Iteration  20: 719119.555 ops/s
# Warmup Iteration  21: 721075.398 ops/s
# Warmup Iteration  22: 720981.388 ops/s
# Warmup Iteration  23: 720815.206 ops/s
# Warmup Iteration  24: 721844.629 ops/s
# Warmup Iteration  25: 722585.733 ops/s
# Warmup Iteration  26: 720433.988 ops/s
# Warmup Iteration  27: 719097.037 ops/s
# Warmup Iteration  28: 719417.306 ops/s
# Warmup Iteration  29: 719218.624 ops/s
# Warmup Iteration  30: 723460.710 ops/s
Iteration   1: 720299.079 ops/s
Iteration   2: 718685.534 ops/s
Iteration   3: 724600.994 ops/s
Iteration   4: 722336.544 ops/s
Iteration   5: 724519.044 ops/s
Iteration   6: 720237.393 ops/s
Iteration   7: 719360.678 ops/s
Iteration   8: 716572.627 ops/s
Iteration   9: 715400.187 ops/s
Iteration  10: 718466.544 ops/s
Iteration  11: 719776.766 ops/s
Iteration  12: 721037.089 ops/s
Iteration  13: 720010.271 ops/s
Iteration  14: 724657.942 ops/s
Iteration  15: 720729.695 ops/s
Iteration  16: 720010.329 ops/s
Iteration  17: 720618.370 ops/s
Iteration  18: 724053.509 ops/s
Iteration  19: 721003.021 ops/s
Iteration  20: 721087.256 ops/s
Iteration  21: 719296.423 ops/s
Iteration  22: 718016.864 ops/s
Iteration  23: 722780.792 ops/s
Iteration  24: 720955.277 ops/s
Iteration  25: 724741.779 ops/s
Iteration  26: 723759.840 ops/s
Iteration  27: 721287.188 ops/s
Iteration  28: 721286.112 ops/s
Iteration  29: 722508.170 ops/s
Iteration  30: 724396.467 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleZipIterableTest._Benchmark.benchmark_middleError":
  721083.059 ±(99.9%) 1619.421 ops/s [Average]
  (min, avg, max) = (715400.187, 721083.059, 724741.779), stdev = 2423.873
  CI (99.9%): [719463.639, 722702.480] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
SingleZipIterableTest._Benchmark.benchmark_middleError  thrpt   30  721083.059 ± 1619.421  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArrayTest._Benchmark.benchmark_middleError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArrayTest._Benchmark.benchmark_middleError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 427059.654 ops/s
# Warmup Iteration   2: 601594.278 ops/s
# Warmup Iteration   3: 701440.052 ops/s
# Warmup Iteration   4: 698766.685 ops/s
# Warmup Iteration   5: 699932.476 ops/s
# Warmup Iteration   6: 699165.196 ops/s
# Warmup Iteration   7: 698570.209 ops/s
# Warmup Iteration   8: 703464.340 ops/s
# Warmup Iteration   9: 697890.704 ops/s
# Warmup Iteration  10: 698387.939 ops/s
# Warmup Iteration  11: 696814.424 ops/s
# Warmup Iteration  12: 699040.897 ops/s
# Warmup Iteration  13: 698958.430 ops/s
# Warmup Iteration  14: 695521.392 ops/s
# Warmup Iteration  15: 694152.087 ops/s
# Warmup Iteration  16: 694651.321 ops/s
# Warmup Iteration  17: 722244.633 ops/s
# Warmup Iteration  18: 725852.692 ops/s
# Warmup Iteration  19: 728277.881 ops/s
# Warmup Iteration  20: 726437.621 ops/s
# Warmup Iteration  21: 728609.714 ops/s
# Warmup Iteration  22: 726273.429 ops/s
# Warmup Iteration  23: 723080.305 ops/s
# Warmup Iteration  24: 727372.715 ops/s
# Warmup Iteration  25: 731374.148 ops/s
# Warmup Iteration  26: 728923.519 ops/s
# Warmup Iteration  27: 728275.867 ops/s
# Warmup Iteration  28: 728132.062 ops/s
# Warmup Iteration  29: 725885.659 ops/s
# Warmup Iteration  30: 727021.212 ops/s
Iteration   1: 724909.953 ops/s
Iteration   2: 725059.693 ops/s
Iteration   3: 726968.932 ops/s
Iteration   4: 729071.666 ops/s
Iteration   5: 728161.488 ops/s
Iteration   6: 730770.411 ops/s
Iteration   7: 729808.245 ops/s
Iteration   8: 724899.176 ops/s
Iteration   9: 727877.525 ops/s
Iteration  10: 727976.196 ops/s
Iteration  11: 725006.370 ops/s
Iteration  12: 725573.601 ops/s
Iteration  13: 728710.859 ops/s
Iteration  14: 731940.324 ops/s
Iteration  15: 729245.745 ops/s
Iteration  16: 728332.355 ops/s
Iteration  17: 728614.867 ops/s
Iteration  18: 727627.989 ops/s
Iteration  19: 730083.735 ops/s
Iteration  20: 727264.400 ops/s
Iteration  21: 728212.052 ops/s
Iteration  22: 730454.870 ops/s
Iteration  23: 729660.926 ops/s
Iteration  24: 727946.400 ops/s
Iteration  25: 727035.855 ops/s
Iteration  26: 725680.566 ops/s
Iteration  27: 729727.020 ops/s
Iteration  28: 730442.800 ops/s
Iteration  29: 723500.995 ops/s
Iteration  30: 725618.260 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArrayTest._Benchmark.benchmark_middleError":
  727872.776 ±(99.9%) 1406.214 ops/s [Average]
  (min, avg, max) = (723500.995, 727872.776, 731940.324), stdev = 2104.756
  CI (99.9%): [726466.562, 729278.990] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score      Error  Units
MaybeZipArrayTest._Benchmark.benchmark_middleError  thrpt   30  727872.776 ± 1406.214  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleZipArrayTest._Benchmark.benchmark_middleError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleZipArrayTest._Benchmark.benchmark_middleError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 398438.430 ops/s
# Warmup Iteration   2: 607911.996 ops/s
# Warmup Iteration   3: 617970.498 ops/s
# Warmup Iteration   4: 702470.002 ops/s
# Warmup Iteration   5: 706196.324 ops/s
# Warmup Iteration   6: 705053.682 ops/s
# Warmup Iteration   7: 702074.794 ops/s
# Warmup Iteration   8: 704802.496 ops/s
# Warmup Iteration   9: 704627.605 ops/s
# Warmup Iteration  10: 705145.109 ops/s
# Warmup Iteration  11: 701852.821 ops/s
# Warmup Iteration  12: 703458.269 ops/s
# Warmup Iteration  13: 702058.078 ops/s
# Warmup Iteration  14: 698420.160 ops/s
# Warmup Iteration  15: 697764.052 ops/s
# Warmup Iteration  16: 697897.815 ops/s
# Warmup Iteration  17: 729686.247 ops/s
# Warmup Iteration  18: 730240.531 ops/s
# Warmup Iteration  19: 731485.931 ops/s
# Warmup Iteration  20: 730480.117 ops/s
# Warmup Iteration  21: 731202.188 ops/s
# Warmup Iteration  22: 725721.977 ops/s
# Warmup Iteration  23: 729658.934 ops/s
# Warmup Iteration  24: 728723.056 ops/s
# Warmup Iteration  25: 730237.852 ops/s
# Warmup Iteration  26: 726868.501 ops/s
# Warmup Iteration  27: 726049.567 ops/s
# Warmup Iteration  28: 728406.686 ops/s
# Warmup Iteration  29: 726905.350 ops/s
# Warmup Iteration  30: 725707.728 ops/s
Iteration   1: 728989.239 ops/s
Iteration   2: 723964.802 ops/s
Iteration   3: 729639.831 ops/s
Iteration   4: 728061.357 ops/s
Iteration   5: 727592.165 ops/s
Iteration   6: 729813.238 ops/s
Iteration   7: 729111.203 ops/s
Iteration   8: 727102.245 ops/s
Iteration   9: 729130.037 ops/s
Iteration  10: 732380.690 ops/s
Iteration  11: 729535.577 ops/s
Iteration  12: 724019.461 ops/s
Iteration  13: 728814.955 ops/s
Iteration  14: 725272.578 ops/s
Iteration  15: 729972.036 ops/s
Iteration  16: 728425.255 ops/s
Iteration  17: 728384.408 ops/s
Iteration  18: 733559.067 ops/s
Iteration  19: 728506.664 ops/s
Iteration  20: 728107.850 ops/s
Iteration  21: 726018.434 ops/s
Iteration  22: 728847.114 ops/s
Iteration  23: 728170.472 ops/s
Iteration  24: 729532.495 ops/s
Iteration  25: 726562.783 ops/s
Iteration  26: 731075.844 ops/s
Iteration  27: 733588.940 ops/s
Iteration  28: 724916.228 ops/s
Iteration  29: 727488.965 ops/s
Iteration  30: 729485.572 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleZipArrayTest._Benchmark.benchmark_middleError":
  728535.650 ±(99.9%) 1573.069 ops/s [Average]
  (min, avg, max) = (723964.802, 728535.650, 733588.940), stdev = 2354.496
  CI (99.9%): [726962.581, 730108.719] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score      Error  Units
SingleZipArrayTest._Benchmark.benchmark_middleError  thrpt   30  728535.650 ± 1573.069  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTakeTest._Benchmark.benchmark_reentrantTake$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTakeTest._Benchmark.benchmark_reentrantTake

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3322312.807 ops/s
# Warmup Iteration   2: 4631700.256 ops/s
# Warmup Iteration   3: 5245743.628 ops/s
# Warmup Iteration   4: 5280788.602 ops/s
# Warmup Iteration   5: 5269307.163 ops/s
# Warmup Iteration   6: 5244025.587 ops/s
# Warmup Iteration   7: 5257034.838 ops/s
# Warmup Iteration   8: 5281155.057 ops/s
# Warmup Iteration   9: 5257713.647 ops/s
# Warmup Iteration  10: 5258565.145 ops/s
# Warmup Iteration  11: 5258986.911 ops/s
# Warmup Iteration  12: 5269493.261 ops/s
# Warmup Iteration  13: 5264179.503 ops/s
# Warmup Iteration  14: 5278042.547 ops/s
# Warmup Iteration  15: 5252150.109 ops/s
# Warmup Iteration  16: 5246204.164 ops/s
# Warmup Iteration  17: 5281281.061 ops/s
# Warmup Iteration  18: 5222419.818 ops/s
# Warmup Iteration  19: 5284113.430 ops/s
# Warmup Iteration  20: 5293412.683 ops/s
# Warmup Iteration  21: 5279707.602 ops/s
# Warmup Iteration  22: 5275548.853 ops/s
# Warmup Iteration  23: 5254941.055 ops/s
# Warmup Iteration  24: 5246214.040 ops/s
# Warmup Iteration  25: 5261718.135 ops/s
# Warmup Iteration  26: 5252238.966 ops/s
# Warmup Iteration  27: 5238981.771 ops/s
# Warmup Iteration  28: 5268568.066 ops/s
# Warmup Iteration  29: 5278040.229 ops/s
# Warmup Iteration  30: 5282807.371 ops/s
Iteration   1: 5281674.032 ops/s
Iteration   2: 5276917.319 ops/s
Iteration   3: 5263665.284 ops/s
Iteration   4: 5247437.427 ops/s
Iteration   5: 5240381.435 ops/s
Iteration   6: 5257746.988 ops/s
Iteration   7: 5270653.937 ops/s
Iteration   8: 5259467.433 ops/s
Iteration   9: 5194152.033 ops/s
Iteration  10: 5275394.628 ops/s
Iteration  11: 5280014.502 ops/s
Iteration  12: 5282484.909 ops/s
Iteration  13: 5266444.201 ops/s
Iteration  14: 5252676.676 ops/s
Iteration  15: 5258981.444 ops/s
Iteration  16: 5255654.151 ops/s
Iteration  17: 5270207.487 ops/s
Iteration  18: 5256561.570 ops/s
Iteration  19: 5269571.612 ops/s
Iteration  20: 5277047.343 ops/s
Iteration  21: 5272554.283 ops/s
Iteration  22: 5265930.058 ops/s
Iteration  23: 5277560.011 ops/s
Iteration  24: 5257361.357 ops/s
Iteration  25: 5271993.004 ops/s
Iteration  26: 5252149.667 ops/s
Iteration  27: 5241990.009 ops/s
Iteration  28: 5267072.079 ops/s
Iteration  29: 5261463.836 ops/s
Iteration  30: 5261621.799 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeTest._Benchmark.benchmark_reentrantTake":
  5262227.684 ±(99.9%) 11416.189 ops/s [Average]
  (min, avg, max) = (5194152.033, 5262227.684, 5282484.909), stdev = 17087.215
  CI (99.9%): [5250811.495, 5273643.872] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
ObservableTakeTest._Benchmark.benchmark_reentrantTake  thrpt   30  5262227.684 ± 11416.189  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromTest._Benchmark.benchmark_functionThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromTest._Benchmark.benchmark_functionThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 534696.316 ops/s
# Warmup Iteration   2: 644365.265 ops/s
# Warmup Iteration   3: 745039.222 ops/s
# Warmup Iteration   4: 750472.204 ops/s
# Warmup Iteration   5: 755198.969 ops/s
# Warmup Iteration   6: 749395.742 ops/s
# Warmup Iteration   7: 753822.323 ops/s
# Warmup Iteration   8: 750155.459 ops/s
# Warmup Iteration   9: 751716.771 ops/s
# Warmup Iteration  10: 746266.574 ops/s
# Warmup Iteration  11: 747853.479 ops/s
# Warmup Iteration  12: 746149.260 ops/s
# Warmup Iteration  13: 746664.693 ops/s
# Warmup Iteration  14: 745754.485 ops/s
# Warmup Iteration  15: 751692.738 ops/s
# Warmup Iteration  16: 749473.843 ops/s
# Warmup Iteration  17: 782446.374 ops/s
# Warmup Iteration  18: 784273.657 ops/s
# Warmup Iteration  19: 781546.477 ops/s
# Warmup Iteration  20: 775505.647 ops/s
# Warmup Iteration  21: 778021.705 ops/s
# Warmup Iteration  22: 780677.280 ops/s
# Warmup Iteration  23: 785650.030 ops/s
# Warmup Iteration  24: 779402.711 ops/s
# Warmup Iteration  25: 778954.997 ops/s
# Warmup Iteration  26: 780903.000 ops/s
# Warmup Iteration  27: 778013.932 ops/s
# Warmup Iteration  28: 780727.106 ops/s
# Warmup Iteration  29: 778963.109 ops/s
# Warmup Iteration  30: 779548.735 ops/s
Iteration   1: 780687.797 ops/s
Iteration   2: 779710.269 ops/s
Iteration   3: 777962.802 ops/s
Iteration   4: 778798.962 ops/s
Iteration   5: 778777.051 ops/s
Iteration   6: 777927.737 ops/s
Iteration   7: 781280.885 ops/s
Iteration   8: 785206.154 ops/s
Iteration   9: 783708.676 ops/s
Iteration  10: 775667.779 ops/s
Iteration  11: 781367.630 ops/s
Iteration  12: 778661.256 ops/s
Iteration  13: 784246.822 ops/s
Iteration  14: 781760.037 ops/s
Iteration  15: 780020.410 ops/s
Iteration  16: 778494.087 ops/s
Iteration  17: 777910.894 ops/s
Iteration  18: 776887.705 ops/s
Iteration  19: 779659.957 ops/s
Iteration  20: 778071.572 ops/s
Iteration  21: 781466.095 ops/s
Iteration  22: 778719.679 ops/s
Iteration  23: 779707.648 ops/s
Iteration  24: 777924.619 ops/s
Iteration  25: 778763.845 ops/s
Iteration  26: 781879.402 ops/s
Iteration  27: 780983.979 ops/s
Iteration  28: 780595.825 ops/s
Iteration  29: 784853.441 ops/s
Iteration  30: 783341.952 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromTest._Benchmark.benchmark_functionThrows":
  780168.166 ±(99.9%) 1601.343 ops/s [Average]
  (min, avg, max) = (775667.779, 780168.166, 785206.154), stdev = 2396.814
  CI (99.9%): [778566.823, 781769.508] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
ObservableWithLatestFromTest._Benchmark.benchmark_functionThrows  thrpt   30  780168.166 ± 1601.343  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutWithSelectorTest._Benchmark.benchmark_selectorTake$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutWithSelectorTest._Benchmark.benchmark_selectorTake

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2306991.782 ops/s
# Warmup Iteration   2: 3936176.223 ops/s
# Warmup Iteration   3: 4345113.025 ops/s
# Warmup Iteration   4: 4326678.057 ops/s
# Warmup Iteration   5: 4305199.413 ops/s
# Warmup Iteration   6: 4280649.171 ops/s
# Warmup Iteration   7: 4323087.378 ops/s
# Warmup Iteration   8: 4303831.412 ops/s
# Warmup Iteration   9: 4314404.763 ops/s
# Warmup Iteration  10: 4274015.582 ops/s
# Warmup Iteration  11: 4291411.651 ops/s
# Warmup Iteration  12: 4295982.603 ops/s
# Warmup Iteration  13: 4306629.667 ops/s
# Warmup Iteration  14: 4354217.772 ops/s
# Warmup Iteration  15: 4343380.861 ops/s
# Warmup Iteration  16: 4278680.342 ops/s
# Warmup Iteration  17: 4340502.076 ops/s
# Warmup Iteration  18: 4308703.160 ops/s
# Warmup Iteration  19: 4307387.758 ops/s
# Warmup Iteration  20: 4338004.665 ops/s
# Warmup Iteration  21: 4303542.190 ops/s
# Warmup Iteration  22: 4312389.854 ops/s
# Warmup Iteration  23: 4341152.270 ops/s
# Warmup Iteration  24: 4308290.974 ops/s
# Warmup Iteration  25: 4309349.781 ops/s
# Warmup Iteration  26: 4330336.014 ops/s
# Warmup Iteration  27: 4285092.185 ops/s
# Warmup Iteration  28: 4350690.854 ops/s
# Warmup Iteration  29: 4318408.995 ops/s
# Warmup Iteration  30: 4316267.904 ops/s
Iteration   1: 4356727.732 ops/s
Iteration   2: 4286403.011 ops/s
Iteration   3: 4296653.765 ops/s
Iteration   4: 4297669.959 ops/s
Iteration   5: 4286006.029 ops/s
Iteration   6: 4296697.838 ops/s
Iteration   7: 4340538.867 ops/s
Iteration   8: 4305578.953 ops/s
Iteration   9: 4298835.237 ops/s
Iteration  10: 4350348.112 ops/s
Iteration  11: 4290366.546 ops/s
Iteration  12: 4324828.453 ops/s
Iteration  13: 4315652.517 ops/s
Iteration  14: 4309415.061 ops/s
Iteration  15: 4312872.274 ops/s
Iteration  16: 4273106.076 ops/s
Iteration  17: 4321676.816 ops/s
Iteration  18: 4336691.582 ops/s
Iteration  19: 4311123.839 ops/s
Iteration  20: 4307578.138 ops/s
Iteration  21: 4279884.242 ops/s
Iteration  22: 4317861.570 ops/s
Iteration  23: 4297324.394 ops/s
Iteration  24: 4343511.272 ops/s
Iteration  25: 4299274.391 ops/s
Iteration  26: 4311756.264 ops/s
Iteration  27: 4319563.650 ops/s
Iteration  28: 4308709.926 ops/s
Iteration  29: 4297632.471 ops/s
Iteration  30: 4342531.635 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutWithSelectorTest._Benchmark.benchmark_selectorTake":
  4311227.354 ±(99.9%) 14156.861 ops/s [Average]
  (min, avg, max) = (4273106.076, 4311227.354, 4356727.732), stdev = 21189.325
  CI (99.9%): [4297070.493, 4325384.216] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
ObservableTimeoutWithSelectorTest._Benchmark.benchmark_selectorTake  thrpt   30  4311227.354 ± 14156.861  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDelayTest._Benchmark.benchmark_delaySupplierErrors$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDelayTest._Benchmark.benchmark_delaySupplierErrors

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 454.802 ops/s
# Warmup Iteration   2: 174827.997 ops/s
# Warmup Iteration   3: 311220.295 ops/s
# Warmup Iteration   4: 384500.938 ops/s
# Warmup Iteration   5: 387691.967 ops/s
# Warmup Iteration   6: 386856.461 ops/s
# Warmup Iteration   7: 384289.523 ops/s
# Warmup Iteration   8: 382862.243 ops/s
# Warmup Iteration   9: 382031.568 ops/s
# Warmup Iteration  10: 382464.752 ops/s
# Warmup Iteration  11: 385296.378 ops/s
# Warmup Iteration  12: 384137.843 ops/s
# Warmup Iteration  13: 384932.177 ops/s
# Warmup Iteration  14: 385223.580 ops/s
# Warmup Iteration  15: 383993.192 ops/s
# Warmup Iteration  16: 383802.328 ops/s
# Warmup Iteration  17: 384325.153 ops/s
# Warmup Iteration  18: 385534.856 ops/s
# Warmup Iteration  19: 387898.891 ops/s
# Warmup Iteration  20: 385135.903 ops/s
# Warmup Iteration  21: 385410.790 ops/s
# Warmup Iteration  22: 386112.568 ops/s
# Warmup Iteration  23: 385718.796 ops/s
# Warmup Iteration  24: 384779.534 ops/s
# Warmup Iteration  25: 386567.357 ops/s
# Warmup Iteration  26: 386819.695 ops/s
# Warmup Iteration  27: 385029.440 ops/s
# Warmup Iteration  28: 385037.732 ops/s
# Warmup Iteration  29: 385666.243 ops/s
# Warmup Iteration  30: 385730.758 ops/s
Iteration   1: 388297.369 ops/s
Iteration   2: 385474.415 ops/s
Iteration   3: 385194.048 ops/s
Iteration   4: 385958.053 ops/s
Iteration   5: 384281.782 ops/s
Iteration   6: 386607.448 ops/s
Iteration   7: 386843.332 ops/s
Iteration   8: 385380.204 ops/s
Iteration   9: 385167.275 ops/s
Iteration  10: 385267.880 ops/s
Iteration  11: 387198.993 ops/s
Iteration  12: 385656.401 ops/s
Iteration  13: 385903.407 ops/s
Iteration  14: 385990.221 ops/s
Iteration  15: 385565.771 ops/s
Iteration  16: 385565.479 ops/s
Iteration  17: 385523.177 ops/s
Iteration  18: 385860.702 ops/s
Iteration  19: 384519.552 ops/s
Iteration  20: 385428.125 ops/s
Iteration  21: 383862.764 ops/s
Iteration  22: 385199.525 ops/s
Iteration  23: 385751.164 ops/s
Iteration  24: 385071.457 ops/s
Iteration  25: 385768.572 ops/s
Iteration  26: 385947.451 ops/s
Iteration  27: 384071.717 ops/s
Iteration  28: 386757.332 ops/s
Iteration  29: 387981.934 ops/s
Iteration  30: 384609.384 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableDelayTest._Benchmark.benchmark_delaySupplierErrors":
  385690.165 ±(99.9%) 679.786 ops/s [Average]
  (min, avg, max) = (383862.764, 385690.165, 388297.369), stdev = 1017.472
  CI (99.9%): [385010.379, 386369.950] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score     Error  Units
ObservableDelayTest._Benchmark.benchmark_delaySupplierErrors  thrpt   30  385690.165 ± 679.786  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromTest._Benchmark.benchmark_manySources$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromTest._Benchmark.benchmark_manySources

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 652829.416 ops/s
# Warmup Iteration   2: 1003149.584 ops/s
# Warmup Iteration   3: 1015884.505 ops/s
# Warmup Iteration   4: 1112636.477 ops/s
# Warmup Iteration   5: 1117398.678 ops/s
# Warmup Iteration   6: 1116446.477 ops/s
# Warmup Iteration   7: 1114238.539 ops/s
# Warmup Iteration   8: 1116428.299 ops/s
# Warmup Iteration   9: 1109191.460 ops/s
# Warmup Iteration  10: 1108751.158 ops/s
# Warmup Iteration  11: 1121576.628 ops/s
# Warmup Iteration  12: 1123120.906 ops/s
# Warmup Iteration  13: 1118504.109 ops/s
# Warmup Iteration  14: 1109670.479 ops/s
# Warmup Iteration  15: 1118849.953 ops/s
# Warmup Iteration  16: 1122864.051 ops/s
# Warmup Iteration  17: 1121577.007 ops/s
# Warmup Iteration  18: 1113901.114 ops/s
# Warmup Iteration  19: 1127332.087 ops/s
# Warmup Iteration  20: 1133651.743 ops/s
# Warmup Iteration  21: 1112650.780 ops/s
# Warmup Iteration  22: 1117431.763 ops/s
# Warmup Iteration  23: 1117267.807 ops/s
# Warmup Iteration  24: 1116115.549 ops/s
# Warmup Iteration  25: 1115895.368 ops/s
# Warmup Iteration  26: 1120775.396 ops/s
# Warmup Iteration  27: 1121678.063 ops/s
# Warmup Iteration  28: 1119384.574 ops/s
# Warmup Iteration  29: 1124818.674 ops/s
# Warmup Iteration  30: 1120107.360 ops/s
Iteration   1: 1118006.008 ops/s
Iteration   2: 1114110.983 ops/s
Iteration   3: 1113373.403 ops/s
Iteration   4: 1118149.273 ops/s
Iteration   5: 1113996.814 ops/s
Iteration   6: 1112070.717 ops/s
Iteration   7: 1109299.806 ops/s
Iteration   8: 1116851.900 ops/s
Iteration   9: 1120761.878 ops/s
Iteration  10: 1120769.524 ops/s
Iteration  11: 1121992.531 ops/s
Iteration  12: 1114181.855 ops/s
Iteration  13: 1110430.529 ops/s
Iteration  14: 1122399.453 ops/s
Iteration  15: 1115956.912 ops/s
Iteration  16: 1124495.123 ops/s
Iteration  17: 1116135.317 ops/s
Iteration  18: 1129170.150 ops/s
Iteration  19: 1116962.442 ops/s
Iteration  20: 1102675.754 ops/s
Iteration  21: 1120774.080 ops/s
Iteration  22: 1118136.196 ops/s
Iteration  23: 1119705.761 ops/s
Iteration  24: 1118238.378 ops/s
Iteration  25: 1119092.303 ops/s
Iteration  26: 1126731.092 ops/s
Iteration  27: 1117008.848 ops/s
Iteration  28: 1117482.904 ops/s
Iteration  29: 1122705.352 ops/s
Iteration  30: 1123240.132 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromTest._Benchmark.benchmark_manySources":
  1117830.181 ±(99.9%) 3586.807 ops/s [Average]
  (min, avg, max) = (1102675.754, 1117830.181, 1129170.150), stdev = 5368.565
  CI (99.9%): [1114243.373, 1121416.988] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
ObservableWithLatestFromTest._Benchmark.benchmark_manySources  thrpt   30  1117830.181 ± 3586.807  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDelaySubscriptionOtherTest._Benchmark.benchmark_noPrematureSubscriptionToError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDelaySubscriptionOtherTest._Benchmark.benchmark_noPrematureSubscriptionToError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 576328.498 ops/s
# Warmup Iteration   2: 743959.694 ops/s
# Warmup Iteration   3: 847152.789 ops/s
# Warmup Iteration   4: 843558.919 ops/s
# Warmup Iteration   5: 848356.277 ops/s
# Warmup Iteration   6: 843432.533 ops/s
# Warmup Iteration   7: 841920.964 ops/s
# Warmup Iteration   8: 846049.123 ops/s
# Warmup Iteration   9: 844726.954 ops/s
# Warmup Iteration  10: 837274.084 ops/s
# Warmup Iteration  11: 842251.558 ops/s
# Warmup Iteration  12: 848512.863 ops/s
# Warmup Iteration  13: 840178.342 ops/s
# Warmup Iteration  14: 842061.879 ops/s
# Warmup Iteration  15: 843986.447 ops/s
# Warmup Iteration  16: 839901.262 ops/s
# Warmup Iteration  17: 871958.702 ops/s
# Warmup Iteration  18: 875063.155 ops/s
# Warmup Iteration  19: 877762.568 ops/s
# Warmup Iteration  20: 872823.924 ops/s
# Warmup Iteration  21: 872609.905 ops/s
# Warmup Iteration  22: 875955.959 ops/s
# Warmup Iteration  23: 872520.629 ops/s
# Warmup Iteration  24: 869905.616 ops/s
# Warmup Iteration  25: 871613.721 ops/s
# Warmup Iteration  26: 871494.588 ops/s
# Warmup Iteration  27: 875776.263 ops/s
# Warmup Iteration  28: 875389.906 ops/s
# Warmup Iteration  29: 869666.171 ops/s
# Warmup Iteration  30: 870695.967 ops/s
Iteration   1: 873653.058 ops/s
Iteration   2: 871523.437 ops/s
Iteration   3: 878588.456 ops/s
Iteration   4: 874065.001 ops/s
Iteration   5: 866636.120 ops/s
Iteration   6: 877099.914 ops/s
Iteration   7: 868651.556 ops/s
Iteration   8: 873463.611 ops/s
Iteration   9: 870429.191 ops/s
Iteration  10: 875699.023 ops/s
Iteration  11: 878890.299 ops/s
Iteration  12: 877054.142 ops/s
Iteration  13: 867401.639 ops/s
Iteration  14: 872594.424 ops/s
Iteration  15: 874929.152 ops/s
Iteration  16: 873086.269 ops/s
Iteration  17: 872923.890 ops/s
Iteration  18: 878430.250 ops/s
Iteration  19: 870276.877 ops/s
Iteration  20: 879972.749 ops/s
Iteration  21: 872607.495 ops/s
Iteration  22: 871852.689 ops/s
Iteration  23: 869171.946 ops/s
Iteration  24: 873604.855 ops/s
Iteration  25: 878715.279 ops/s
Iteration  26: 873291.961 ops/s
Iteration  27: 874771.952 ops/s
Iteration  28: 876601.511 ops/s
Iteration  29: 872432.905 ops/s
Iteration  30: 874654.416 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableDelaySubscriptionOtherTest._Benchmark.benchmark_noPrematureSubscriptionToError":
  873769.136 ±(99.9%) 2313.928 ops/s [Average]
  (min, avg, max) = (866636.120, 873769.136, 879972.749), stdev = 3463.379
  CI (99.9%): [871455.207, 876083.064] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                  Mode  Cnt       Score      Error  Units
ObservableDelaySubscriptionOtherTest._Benchmark.benchmark_noPrematureSubscriptionToError  thrpt   30  873769.136 ± 2313.928  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTests._Benchmark.benchmark_shouldTimeoutIfSecondOnNextNotWithinTimeout$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTests._Benchmark.benchmark_shouldTimeoutIfSecondOnNextNotWithinTimeout

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 287227.263 ops/s
# Warmup Iteration   2: 480131.358 ops/s
# Warmup Iteration   3: 457098.543 ops/s
# Warmup Iteration   4: 520645.772 ops/s
# Warmup Iteration   5: 523977.590 ops/s
# Warmup Iteration   6: 522623.519 ops/s
# Warmup Iteration   7: 519291.933 ops/s
# Warmup Iteration   8: 520535.175 ops/s
# Warmup Iteration   9: 519021.666 ops/s
# Warmup Iteration  10: 516643.391 ops/s
# Warmup Iteration  11: 516470.862 ops/s
# Warmup Iteration  12: 520262.621 ops/s
# Warmup Iteration  13: 517876.771 ops/s
# Warmup Iteration  14: 517659.938 ops/s
# Warmup Iteration  15: 519576.255 ops/s
# Warmup Iteration  16: 522071.858 ops/s
# Warmup Iteration  17: 536877.305 ops/s
# Warmup Iteration  18: 538265.299 ops/s
# Warmup Iteration  19: 538119.613 ops/s
# Warmup Iteration  20: 536763.393 ops/s
# Warmup Iteration  21: 534132.688 ops/s
# Warmup Iteration  22: 535934.032 ops/s
# Warmup Iteration  23: 536669.772 ops/s
# Warmup Iteration  24: 539670.065 ops/s
# Warmup Iteration  25: 536443.962 ops/s
# Warmup Iteration  26: 538236.200 ops/s
# Warmup Iteration  27: 534620.191 ops/s
# Warmup Iteration  28: 534451.753 ops/s
# Warmup Iteration  29: 538012.291 ops/s
# Warmup Iteration  30: 535244.234 ops/s
Iteration   1: 535331.205 ops/s
Iteration   2: 537626.388 ops/s
Iteration   3: 535852.925 ops/s
Iteration   4: 532555.690 ops/s
Iteration   5: 539629.554 ops/s
Iteration   6: 538102.338 ops/s
Iteration   7: 537414.184 ops/s
Iteration   8: 534789.089 ops/s
Iteration   9: 537727.610 ops/s
Iteration  10: 536709.849 ops/s
Iteration  11: 539640.780 ops/s
Iteration  12: 534226.166 ops/s
Iteration  13: 539757.932 ops/s
Iteration  14: 534315.758 ops/s
Iteration  15: 537736.695 ops/s
Iteration  16: 540053.175 ops/s
Iteration  17: 537176.627 ops/s
Iteration  18: 537250.209 ops/s
Iteration  19: 540715.597 ops/s
Iteration  20: 535943.933 ops/s
Iteration  21: 536679.431 ops/s
Iteration  22: 534193.464 ops/s
Iteration  23: 534803.981 ops/s
Iteration  24: 536585.858 ops/s
Iteration  25: 537272.374 ops/s
Iteration  26: 539039.990 ops/s
Iteration  27: 533583.580 ops/s
Iteration  28: 536290.171 ops/s
Iteration  29: 536170.825 ops/s
Iteration  30: 535920.628 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTests._Benchmark.benchmark_shouldTimeoutIfSecondOnNextNotWithinTimeout":
  536769.867 ±(99.9%) 1370.657 ops/s [Average]
  (min, avg, max) = (532555.690, 536769.867, 540715.597), stdev = 2051.535
  CI (99.9%): [535399.209, 538140.524] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                 Mode  Cnt       Score      Error  Units
ObservableTimeoutTests._Benchmark.benchmark_shouldTimeoutIfSecondOnNextNotWithinTimeout  thrpt   30  536769.867 ± 1370.657  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReplayTest._Benchmark.benchmark_reentrantOnNextCancel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReplayTest._Benchmark.benchmark_reentrantOnNextCancel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1822953.998 ops/s
# Warmup Iteration   2: 2689942.252 ops/s
# Warmup Iteration   3: 3050281.373 ops/s
# Warmup Iteration   4: 3039052.318 ops/s
# Warmup Iteration   5: 3003337.583 ops/s
# Warmup Iteration   6: 3045094.367 ops/s
# Warmup Iteration   7: 3039583.122 ops/s
# Warmup Iteration   8: 3071074.156 ops/s
# Warmup Iteration   9: 3021158.719 ops/s
# Warmup Iteration  10: 3034538.048 ops/s
# Warmup Iteration  11: 3027539.613 ops/s
# Warmup Iteration  12: 3060705.055 ops/s
# Warmup Iteration  13: 3039628.430 ops/s
# Warmup Iteration  14: 3013104.579 ops/s
# Warmup Iteration  15: 3082071.858 ops/s
# Warmup Iteration  16: 3039485.324 ops/s
# Warmup Iteration  17: 3037658.491 ops/s
# Warmup Iteration  18: 3004019.646 ops/s
# Warmup Iteration  19: 3002062.192 ops/s
# Warmup Iteration  20: 3031807.075 ops/s
# Warmup Iteration  21: 3080521.880 ops/s
# Warmup Iteration  22: 3040868.932 ops/s
# Warmup Iteration  23: 3050335.695 ops/s
# Warmup Iteration  24: 3019705.740 ops/s
# Warmup Iteration  25: 3008714.503 ops/s
# Warmup Iteration  26: 3065000.716 ops/s
# Warmup Iteration  27: 3037670.172 ops/s
# Warmup Iteration  28: 3052922.358 ops/s
# Warmup Iteration  29: 3043287.712 ops/s
# Warmup Iteration  30: 3010724.280 ops/s
Iteration   1: 3050514.220 ops/s
Iteration   2: 3011765.130 ops/s
Iteration   3: 3049314.000 ops/s
Iteration   4: 3053375.440 ops/s
Iteration   5: 3051843.489 ops/s
Iteration   6: 3039893.315 ops/s
Iteration   7: 3023991.587 ops/s
Iteration   8: 3030268.973 ops/s
Iteration   9: 3027354.298 ops/s
Iteration  10: 3052654.312 ops/s
Iteration  11: 3028593.041 ops/s
Iteration  12: 3029705.031 ops/s
Iteration  13: 3062382.062 ops/s
Iteration  14: 3041791.684 ops/s
Iteration  15: 3076369.457 ops/s
Iteration  16: 3028109.103 ops/s
Iteration  17: 3024110.551 ops/s
Iteration  18: 3025910.995 ops/s
Iteration  19: 3036309.593 ops/s
Iteration  20: 3036976.653 ops/s
Iteration  21: 3031555.489 ops/s
Iteration  22: 3054264.535 ops/s
Iteration  23: 3014735.648 ops/s
Iteration  24: 3015764.056 ops/s
Iteration  25: 3046097.456 ops/s
Iteration  26: 3020164.507 ops/s
Iteration  27: 3022355.440 ops/s
Iteration  28: 3049253.456 ops/s
Iteration  29: 3067077.539 ops/s
Iteration  30: 3015195.027 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableReplayTest._Benchmark.benchmark_reentrantOnNextCancel":
  3037256.536 ±(99.9%) 11175.229 ops/s [Average]
  (min, avg, max) = (3011765.130, 3037256.536, 3076369.457), stdev = 16726.557
  CI (99.9%): [3026081.308, 3048431.765] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
ObservableReplayTest._Benchmark.benchmark_reentrantOnNextCancel  thrpt   30  3037256.536 ± 11175.229  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReplayEagerTruncateTest._Benchmark.benchmark_reentrantOnNextCancel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReplayEagerTruncateTest._Benchmark.benchmark_reentrantOnNextCancel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1777798.462 ops/s
# Warmup Iteration   2: 2584682.023 ops/s
# Warmup Iteration   3: 2956643.005 ops/s
# Warmup Iteration   4: 3007712.042 ops/s
# Warmup Iteration   5: 2987122.443 ops/s
# Warmup Iteration   6: 3013666.785 ops/s
# Warmup Iteration   7: 2993579.112 ops/s
# Warmup Iteration   8: 3012520.232 ops/s
# Warmup Iteration   9: 3014769.033 ops/s
# Warmup Iteration  10: 3017954.228 ops/s
# Warmup Iteration  11: 2983094.806 ops/s
# Warmup Iteration  12: 2987971.654 ops/s
# Warmup Iteration  13: 3001031.291 ops/s
# Warmup Iteration  14: 2968725.359 ops/s
# Warmup Iteration  15: 2984373.214 ops/s
# Warmup Iteration  16: 3026230.653 ops/s
# Warmup Iteration  17: 2984647.782 ops/s
# Warmup Iteration  18: 2998339.420 ops/s
# Warmup Iteration  19: 2984810.793 ops/s
# Warmup Iteration  20: 2984287.306 ops/s
# Warmup Iteration  21: 3006670.733 ops/s
# Warmup Iteration  22: 2995078.044 ops/s
# Warmup Iteration  23: 2972297.274 ops/s
# Warmup Iteration  24: 2974628.605 ops/s
# Warmup Iteration  25: 2995301.811 ops/s
# Warmup Iteration  26: 2972449.380 ops/s
# Warmup Iteration  27: 2971857.545 ops/s
# Warmup Iteration  28: 3007335.070 ops/s
# Warmup Iteration  29: 2994946.762 ops/s
# Warmup Iteration  30: 2979982.865 ops/s
Iteration   1: 3008403.709 ops/s
Iteration   2: 3020738.608 ops/s
Iteration   3: 2990528.404 ops/s
Iteration   4: 3010486.785 ops/s
Iteration   5: 3003071.625 ops/s
Iteration   6: 2966024.820 ops/s
Iteration   7: 2995109.834 ops/s
Iteration   8: 2991912.993 ops/s
Iteration   9: 3006380.367 ops/s
Iteration  10: 2987042.981 ops/s
Iteration  11: 2998287.085 ops/s
Iteration  12: 3001969.367 ops/s
Iteration  13: 2983556.505 ops/s
Iteration  14: 2988141.687 ops/s
Iteration  15: 2971645.889 ops/s
Iteration  16: 2994750.268 ops/s
Iteration  17: 3002169.047 ops/s
Iteration  18: 2961552.220 ops/s
Iteration  19: 2996475.138 ops/s
Iteration  20: 2977951.011 ops/s
Iteration  21: 2992723.808 ops/s
Iteration  22: 3000330.972 ops/s
Iteration  23: 2975471.852 ops/s
Iteration  24: 2996167.972 ops/s
Iteration  25: 2984288.011 ops/s
Iteration  26: 2998803.074 ops/s
Iteration  27: 3018314.689 ops/s
Iteration  28: 3010193.274 ops/s
Iteration  29: 3005101.325 ops/s
Iteration  30: 2967614.806 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableReplayEagerTruncateTest._Benchmark.benchmark_reentrantOnNextCancel":
  2993506.937 ±(99.9%) 10048.483 ops/s [Average]
  (min, avg, max) = (2961552.220, 2993506.937, 3020738.608), stdev = 15040.097
  CI (99.9%): [2983458.455, 3003555.420] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score       Error  Units
ObservableReplayEagerTruncateTest._Benchmark.benchmark_reentrantOnNextCancel  thrpt   30  2993506.937 ± 10048.483  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutWithSelectorTest._Benchmark.benchmark_disposedUpfrontFallback$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutWithSelectorTest._Benchmark.benchmark_disposedUpfrontFallback

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2426450.512 ops/s
# Warmup Iteration   2: 3653962.534 ops/s
# Warmup Iteration   3: 4172945.197 ops/s
# Warmup Iteration   4: 4168985.542 ops/s
# Warmup Iteration   5: 4165120.116 ops/s
# Warmup Iteration   6: 4196690.903 ops/s
# Warmup Iteration   7: 4123134.398 ops/s
# Warmup Iteration   8: 4216725.398 ops/s
# Warmup Iteration   9: 4145089.054 ops/s
# Warmup Iteration  10: 4132747.615 ops/s
# Warmup Iteration  11: 4191664.474 ops/s
# Warmup Iteration  12: 4179367.861 ops/s
# Warmup Iteration  13: 4161745.951 ops/s
# Warmup Iteration  14: 4148356.572 ops/s
# Warmup Iteration  15: 4168135.280 ops/s
# Warmup Iteration  16: 4192883.580 ops/s
# Warmup Iteration  17: 4165132.704 ops/s
# Warmup Iteration  18: 4171892.703 ops/s
# Warmup Iteration  19: 4192238.100 ops/s
# Warmup Iteration  20: 4162617.757 ops/s
# Warmup Iteration  21: 4165271.685 ops/s
# Warmup Iteration  22: 4201869.241 ops/s
# Warmup Iteration  23: 4135067.532 ops/s
# Warmup Iteration  24: 4116114.533 ops/s
# Warmup Iteration  25: 4186246.504 ops/s
# Warmup Iteration  26: 4178327.670 ops/s
# Warmup Iteration  27: 4179684.656 ops/s
# Warmup Iteration  28: 4149994.890 ops/s
# Warmup Iteration  29: 4159157.923 ops/s
# Warmup Iteration  30: 4189927.934 ops/s
Iteration   1: 4183139.184 ops/s
Iteration   2: 4157372.510 ops/s
Iteration   3: 4189416.638 ops/s
Iteration   4: 4153407.963 ops/s
Iteration   5: 4142846.717 ops/s
Iteration   6: 4185501.802 ops/s
Iteration   7: 4136942.907 ops/s
Iteration   8: 4191343.428 ops/s
Iteration   9: 4138956.550 ops/s
Iteration  10: 4155293.230 ops/s
Iteration  11: 4166333.914 ops/s
Iteration  12: 4196500.695 ops/s
Iteration  13: 4166966.131 ops/s
Iteration  14: 4155025.672 ops/s
Iteration  15: 4171788.172 ops/s
Iteration  16: 4196821.886 ops/s
Iteration  17: 4176875.947 ops/s
Iteration  18: 4147746.016 ops/s
Iteration  19: 4166574.741 ops/s
Iteration  20: 4178870.752 ops/s
Iteration  21: 4202572.980 ops/s
Iteration  22: 4193073.317 ops/s
Iteration  23: 4197982.892 ops/s
Iteration  24: 4206502.577 ops/s
Iteration  25: 4194782.858 ops/s
Iteration  26: 4157233.124 ops/s
Iteration  27: 4193608.196 ops/s
Iteration  28: 4175581.708 ops/s
Iteration  29: 4200889.629 ops/s
Iteration  30: 4148576.296 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutWithSelectorTest._Benchmark.benchmark_disposedUpfrontFallback":
  4174284.281 ±(99.9%) 14108.619 ops/s [Average]
  (min, avg, max) = (4136942.907, 4174284.281, 4206502.577), stdev = 21117.118
  CI (99.9%): [4160175.662, 4188392.900] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score       Error  Units
FlowableTimeoutWithSelectorTest._Benchmark.benchmark_disposedUpfrontFallback  thrpt   30  4174284.281 ± 14108.619  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReplayTest._Benchmark.benchmark_reentrantOnNext$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReplayTest._Benchmark.benchmark_reentrantOnNext

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1529315.041 ops/s
# Warmup Iteration   2: 2101088.357 ops/s
# Warmup Iteration   3: 2612358.104 ops/s
# Warmup Iteration   4: 2602311.494 ops/s
# Warmup Iteration   5: 2646347.966 ops/s
# Warmup Iteration   6: 2619072.329 ops/s
# Warmup Iteration   7: 2645817.796 ops/s
# Warmup Iteration   8: 2589417.989 ops/s
# Warmup Iteration   9: 2586966.243 ops/s
# Warmup Iteration  10: 2653173.358 ops/s
# Warmup Iteration  11: 2616608.104 ops/s
# Warmup Iteration  12: 2605885.626 ops/s
# Warmup Iteration  13: 2599960.183 ops/s
# Warmup Iteration  14: 2624093.841 ops/s
# Warmup Iteration  15: 2617081.429 ops/s
# Warmup Iteration  16: 2605232.791 ops/s
# Warmup Iteration  17: 2622858.174 ops/s
# Warmup Iteration  18: 2616263.235 ops/s
# Warmup Iteration  19: 2605687.597 ops/s
# Warmup Iteration  20: 2607161.559 ops/s
# Warmup Iteration  21: 2621843.878 ops/s
# Warmup Iteration  22: 2614990.123 ops/s
# Warmup Iteration  23: 2657144.268 ops/s
# Warmup Iteration  24: 2619736.206 ops/s
# Warmup Iteration  25: 2626963.076 ops/s
# Warmup Iteration  26: 2630840.766 ops/s
# Warmup Iteration  27: 2590699.621 ops/s
# Warmup Iteration  28: 2601875.306 ops/s
# Warmup Iteration  29: 2634624.887 ops/s
# Warmup Iteration  30: 2625080.092 ops/s
Iteration   1: 2591599.577 ops/s
Iteration   2: 2610083.519 ops/s
Iteration   3: 2634216.261 ops/s
Iteration   4: 2612244.199 ops/s
Iteration   5: 2611612.791 ops/s
Iteration   6: 2603806.851 ops/s
Iteration   7: 2623223.143 ops/s
Iteration   8: 2603643.071 ops/s
Iteration   9: 2604122.979 ops/s
Iteration  10: 2622815.490 ops/s
Iteration  11: 2631728.557 ops/s
Iteration  12: 2612619.974 ops/s
Iteration  13: 2626013.118 ops/s
Iteration  14: 2605739.194 ops/s
Iteration  15: 2613233.014 ops/s
Iteration  16: 2659970.117 ops/s
Iteration  17: 2649315.756 ops/s
Iteration  18: 2622837.524 ops/s
Iteration  19: 2623443.491 ops/s
Iteration  20: 2616370.476 ops/s
Iteration  21: 2653682.406 ops/s
Iteration  22: 2654438.432 ops/s
Iteration  23: 2615495.229 ops/s
Iteration  24: 2619766.273 ops/s
Iteration  25: 2592437.121 ops/s
Iteration  26: 2597185.662 ops/s
Iteration  27: 2632639.000 ops/s
Iteration  28: 2643196.812 ops/s
Iteration  29: 2618625.720 ops/s
Iteration  30: 2627341.825 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableReplayTest._Benchmark.benchmark_reentrantOnNext":
  2621114.919 ±(99.9%) 11991.767 ops/s [Average]
  (min, avg, max) = (2591599.577, 2621114.919, 2659970.117), stdev = 17948.714
  CI (99.9%): [2609123.152, 2633106.687] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
ObservableReplayTest._Benchmark.benchmark_reentrantOnNext  thrpt   30  2621114.919 ± 11991.767  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReplayEagerTruncateTest._Benchmark.benchmark_reentrantOnNext$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReplayEagerTruncateTest._Benchmark.benchmark_reentrantOnNext

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1621686.613 ops/s
# Warmup Iteration   2: 2211694.006 ops/s
# Warmup Iteration   3: 2696047.185 ops/s
# Warmup Iteration   4: 2732778.571 ops/s
# Warmup Iteration   5: 2777328.435 ops/s
# Warmup Iteration   6: 2712680.701 ops/s
# Warmup Iteration   7: 2732640.935 ops/s
# Warmup Iteration   8: 2731646.571 ops/s
# Warmup Iteration   9: 2723586.595 ops/s
# Warmup Iteration  10: 2766820.187 ops/s
# Warmup Iteration  11: 2726053.255 ops/s
# Warmup Iteration  12: 2731300.534 ops/s
# Warmup Iteration  13: 2714256.620 ops/s
# Warmup Iteration  14: 2730665.629 ops/s
# Warmup Iteration  15: 2732920.132 ops/s
# Warmup Iteration  16: 2713165.921 ops/s
# Warmup Iteration  17: 2696535.042 ops/s
# Warmup Iteration  18: 2692525.220 ops/s
# Warmup Iteration  19: 2728100.181 ops/s
# Warmup Iteration  20: 2741974.088 ops/s
# Warmup Iteration  21: 2748703.384 ops/s
# Warmup Iteration  22: 2727487.226 ops/s
# Warmup Iteration  23: 2697176.009 ops/s
# Warmup Iteration  24: 2727463.608 ops/s
# Warmup Iteration  25: 2674654.139 ops/s
# Warmup Iteration  26: 2701775.595 ops/s
# Warmup Iteration  27: 2701127.280 ops/s
# Warmup Iteration  28: 2717062.330 ops/s
# Warmup Iteration  29: 2700553.584 ops/s
# Warmup Iteration  30: 2700822.720 ops/s
Iteration   1: 2705196.204 ops/s
Iteration   2: 2727759.150 ops/s
Iteration   3: 2715146.262 ops/s
Iteration   4: 2709647.065 ops/s
Iteration   5: 2713968.461 ops/s
Iteration   6: 2703621.464 ops/s
Iteration   7: 2725203.614 ops/s
Iteration   8: 2719915.046 ops/s
Iteration   9: 2720182.166 ops/s
Iteration  10: 2731494.851 ops/s
Iteration  11: 2729072.031 ops/s
Iteration  12: 2691877.213 ops/s
Iteration  13: 2725243.160 ops/s
Iteration  14: 2742957.096 ops/s
Iteration  15: 2722280.312 ops/s
Iteration  16: 2705080.094 ops/s
Iteration  17: 2734096.105 ops/s
Iteration  18: 2675699.696 ops/s
Iteration  19: 2725863.578 ops/s
Iteration  20: 2741047.654 ops/s
Iteration  21: 2708799.558 ops/s
Iteration  22: 2719309.315 ops/s
Iteration  23: 2690669.383 ops/s
Iteration  24: 2729251.193 ops/s
Iteration  25: 2717038.236 ops/s
Iteration  26: 2714881.826 ops/s
Iteration  27: 2739764.311 ops/s
Iteration  28: 2722577.478 ops/s
Iteration  29: 2706891.795 ops/s
Iteration  30: 2733463.655 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableReplayEagerTruncateTest._Benchmark.benchmark_reentrantOnNext":
  2718266.599 ±(99.9%) 10331.824 ops/s [Average]
  (min, avg, max) = (2675699.696, 2718266.599, 2742957.096), stdev = 15464.188
  CI (99.9%): [2707934.775, 2728598.423] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score       Error  Units
ObservableReplayEagerTruncateTest._Benchmark.benchmark_reentrantOnNext  thrpt   30  2718266.599 ± 10331.824  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayEagerTruncateTest._Benchmark.benchmark_cancelOnArrival2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayEagerTruncateTest._Benchmark.benchmark_cancelOnArrival2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1071103.859 ops/s
# Warmup Iteration   2: 1347753.923 ops/s
# Warmup Iteration   3: 1635930.244 ops/s
# Warmup Iteration   4: 1780407.253 ops/s
# Warmup Iteration   5: 2109473.111 ops/s
# Warmup Iteration   6: 2082603.373 ops/s
# Warmup Iteration   7: 2072550.475 ops/s
# Warmup Iteration   8: 2108401.380 ops/s
# Warmup Iteration   9: 2075216.630 ops/s
# Warmup Iteration  10: 2083432.794 ops/s
# Warmup Iteration  11: 2077880.297 ops/s
# Warmup Iteration  12: 2094331.303 ops/s
# Warmup Iteration  13: 2097461.043 ops/s
# Warmup Iteration  14: 2096751.373 ops/s
# Warmup Iteration  15: 2102834.781 ops/s
# Warmup Iteration  16: 2089522.312 ops/s
# Warmup Iteration  17: 2082319.103 ops/s
# Warmup Iteration  18: 2090412.839 ops/s
# Warmup Iteration  19: 2075964.041 ops/s
# Warmup Iteration  20: 2088411.822 ops/s
# Warmup Iteration  21: 2072450.178 ops/s
# Warmup Iteration  22: 2108238.611 ops/s
# Warmup Iteration  23: 2100357.007 ops/s
# Warmup Iteration  24: 2097487.482 ops/s
# Warmup Iteration  25: 2094467.762 ops/s
# Warmup Iteration  26: 2109825.209 ops/s
# Warmup Iteration  27: 2100410.532 ops/s
# Warmup Iteration  28: 2078199.347 ops/s
# Warmup Iteration  29: 2089788.471 ops/s
# Warmup Iteration  30: 2113143.692 ops/s
Iteration   1: 2079117.967 ops/s
Iteration   2: 2097988.168 ops/s
Iteration   3: 2071744.783 ops/s
Iteration   4: 2097496.706 ops/s
Iteration   5: 2108938.354 ops/s
Iteration   6: 2105392.097 ops/s
Iteration   7: 2087661.115 ops/s
Iteration   8: 2100780.436 ops/s
Iteration   9: 2093171.640 ops/s
Iteration  10: 2086754.681 ops/s
Iteration  11: 2104204.408 ops/s
Iteration  12: 2098078.222 ops/s
Iteration  13: 2082511.283 ops/s
Iteration  14: 2090650.026 ops/s
Iteration  15: 2102413.531 ops/s
Iteration  16: 2101645.657 ops/s
Iteration  17: 2095456.382 ops/s
Iteration  18: 2105250.940 ops/s
Iteration  19: 2090310.364 ops/s
Iteration  20: 2082553.306 ops/s
Iteration  21: 2099817.691 ops/s
Iteration  22: 2070797.787 ops/s
Iteration  23: 2094704.210 ops/s
Iteration  24: 2079702.578 ops/s
Iteration  25: 2112347.919 ops/s
Iteration  26: 2086377.232 ops/s
Iteration  27: 2097342.668 ops/s
Iteration  28: 2092657.550 ops/s
Iteration  29: 2088877.899 ops/s
Iteration  30: 2097845.142 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayEagerTruncateTest._Benchmark.benchmark_cancelOnArrival2":
  2093419.691 ±(99.9%) 6929.345 ops/s [Average]
  (min, avg, max) = (2070797.787, 2093419.691, 2112347.919), stdev = 10371.518
  CI (99.9%): [2086490.346, 2100349.036] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
FlowableReplayEagerTruncateTest._Benchmark.benchmark_cancelOnArrival2  thrpt   30  2093419.691 ± 6929.345  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutWithSelectorTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutWithSelectorTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1396870.345 ops/s
# Warmup Iteration   2: 2196373.279 ops/s
# Warmup Iteration   3: 2546975.483 ops/s
# Warmup Iteration   4: 2533303.356 ops/s
# Warmup Iteration   5: 2515058.181 ops/s
# Warmup Iteration   6: 2502836.228 ops/s
# Warmup Iteration   7: 2513254.247 ops/s
# Warmup Iteration   8: 2517128.571 ops/s
# Warmup Iteration   9: 2517295.546 ops/s
# Warmup Iteration  10: 2501817.839 ops/s
# Warmup Iteration  11: 2523668.394 ops/s
# Warmup Iteration  12: 2502002.257 ops/s
# Warmup Iteration  13: 2512391.858 ops/s
# Warmup Iteration  14: 2507982.164 ops/s
# Warmup Iteration  15: 2520615.502 ops/s
# Warmup Iteration  16: 2527511.114 ops/s
# Warmup Iteration  17: 2512058.919 ops/s
# Warmup Iteration  18: 2503722.073 ops/s
# Warmup Iteration  19: 2521955.774 ops/s
# Warmup Iteration  20: 2519812.354 ops/s
# Warmup Iteration  21: 2513464.095 ops/s
# Warmup Iteration  22: 2521155.058 ops/s
# Warmup Iteration  23: 2535239.389 ops/s
# Warmup Iteration  24: 2522221.049 ops/s
# Warmup Iteration  25: 2522551.010 ops/s
# Warmup Iteration  26: 2530196.487 ops/s
# Warmup Iteration  27: 2517881.752 ops/s
# Warmup Iteration  28: 2544845.732 ops/s
# Warmup Iteration  29: 2498631.463 ops/s
# Warmup Iteration  30: 2523750.325 ops/s
Iteration   1: 2515329.977 ops/s
Iteration   2: 2507536.836 ops/s
Iteration   3: 2515188.816 ops/s
Iteration   4: 2516280.540 ops/s
Iteration   5: 2547514.851 ops/s
Iteration   6: 2511383.866 ops/s
Iteration   7: 2516438.475 ops/s
Iteration   8: 2523743.573 ops/s
Iteration   9: 2519258.778 ops/s
Iteration  10: 2527332.370 ops/s
Iteration  11: 2523115.792 ops/s
Iteration  12: 2534539.115 ops/s
Iteration  13: 2516034.923 ops/s
Iteration  14: 2518155.349 ops/s
Iteration  15: 2507428.131 ops/s
Iteration  16: 2516354.746 ops/s
Iteration  17: 2525259.724 ops/s
Iteration  18: 2498722.079 ops/s
Iteration  19: 2504962.709 ops/s
Iteration  20: 2519738.386 ops/s
Iteration  21: 2539668.874 ops/s
Iteration  22: 2515362.127 ops/s
Iteration  23: 2534063.828 ops/s
Iteration  24: 2515437.495 ops/s
Iteration  25: 2533248.006 ops/s
Iteration  26: 2527278.740 ops/s
Iteration  27: 2520455.745 ops/s
Iteration  28: 2518526.736 ops/s
Iteration  29: 2517263.040 ops/s
Iteration  30: 2518414.564 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutWithSelectorTest._Benchmark.benchmark_dispose":
  2520134.606 ±(99.9%) 6920.929 ops/s [Average]
  (min, avg, max) = (2498722.079, 2520134.606, 2547514.851), stdev = 10358.922
  CI (99.9%): [2513213.677, 2527055.536] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
FlowableTimeoutWithSelectorTest._Benchmark.benchmark_dispose  thrpt   30  2520134.606 ± 6920.929  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayEagerTruncateTest._Benchmark.benchmark_unboundedLeavesEarly$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayEagerTruncateTest._Benchmark.benchmark_unboundedLeavesEarly

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 741982.149 ops/s
# Warmup Iteration   2: 947698.364 ops/s
# Warmup Iteration   3: 1174823.431 ops/s
# Warmup Iteration   4: 1312852.667 ops/s
# Warmup Iteration   5: 1547406.645 ops/s
# Warmup Iteration   6: 1551792.643 ops/s
# Warmup Iteration   7: 1544401.642 ops/s
# Warmup Iteration   8: 1527990.827 ops/s
# Warmup Iteration   9: 1551346.510 ops/s
# Warmup Iteration  10: 1543729.036 ops/s
# Warmup Iteration  11: 1561466.978 ops/s
# Warmup Iteration  12: 1554467.466 ops/s
# Warmup Iteration  13: 1535520.467 ops/s
# Warmup Iteration  14: 1531047.055 ops/s
# Warmup Iteration  15: 1538321.022 ops/s
# Warmup Iteration  16: 1552414.702 ops/s
# Warmup Iteration  17: 1547751.734 ops/s
# Warmup Iteration  18: 1539723.926 ops/s
# Warmup Iteration  19: 1551042.160 ops/s
# Warmup Iteration  20: 1534135.831 ops/s
# Warmup Iteration  21: 1534462.995 ops/s
# Warmup Iteration  22: 1542212.897 ops/s
# Warmup Iteration  23: 1536931.603 ops/s
# Warmup Iteration  24: 1539329.455 ops/s
# Warmup Iteration  25: 1531692.539 ops/s
# Warmup Iteration  26: 1555093.367 ops/s
# Warmup Iteration  27: 1542769.914 ops/s
# Warmup Iteration  28: 1536559.175 ops/s
# Warmup Iteration  29: 1525720.412 ops/s
# Warmup Iteration  30: 1547976.639 ops/s
Iteration   1: 1561086.789 ops/s
Iteration   2: 1545132.203 ops/s
Iteration   3: 1537085.762 ops/s
Iteration   4: 1553185.874 ops/s
Iteration   5: 1532984.865 ops/s
Iteration   6: 1544770.471 ops/s
Iteration   7: 1550223.637 ops/s
Iteration   8: 1530790.014 ops/s
Iteration   9: 1548112.478 ops/s
Iteration  10: 1541713.914 ops/s
Iteration  11: 1534401.790 ops/s
Iteration  12: 1544570.262 ops/s
Iteration  13: 1550916.411 ops/s
Iteration  14: 1558086.981 ops/s
Iteration  15: 1548518.894 ops/s
Iteration  16: 1533928.898 ops/s
Iteration  17: 1542558.757 ops/s
Iteration  18: 1536408.291 ops/s
Iteration  19: 1545267.133 ops/s
Iteration  20: 1544961.883 ops/s
Iteration  21: 1531309.326 ops/s
Iteration  22: 1542501.534 ops/s
Iteration  23: 1555344.245 ops/s
Iteration  24: 1543404.731 ops/s
Iteration  25: 1541325.695 ops/s
Iteration  26: 1541764.286 ops/s
Iteration  27: 1538437.187 ops/s
Iteration  28: 1526714.701 ops/s
Iteration  29: 1531689.641 ops/s
Iteration  30: 1535207.314 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayEagerTruncateTest._Benchmark.benchmark_unboundedLeavesEarly":
  1542413.466 ±(99.9%) 5676.066 ops/s [Average]
  (min, avg, max) = (1526714.701, 1542413.466, 1561086.789), stdev = 8495.669
  CI (99.9%): [1536737.400, 1548089.532] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score      Error  Units
FlowableReplayEagerTruncateTest._Benchmark.benchmark_unboundedLeavesEarly  thrpt   30  1542413.466 ± 5676.066  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReplayEagerTruncateTest._Benchmark.benchmark_disposeNoNeedForResetSizeBound$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReplayEagerTruncateTest._Benchmark.benchmark_disposeNoNeedForResetSizeBound

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1085742.996 ops/s
# Warmup Iteration   2: 1534475.600 ops/s
# Warmup Iteration   3: 1743844.622 ops/s
# Warmup Iteration   4: 1774927.152 ops/s
# Warmup Iteration   5: 1769189.692 ops/s
# Warmup Iteration   6: 1779785.953 ops/s
# Warmup Iteration   7: 1774437.636 ops/s
# Warmup Iteration   8: 1778112.411 ops/s
# Warmup Iteration   9: 1781514.423 ops/s
# Warmup Iteration  10: 1768948.030 ops/s
# Warmup Iteration  11: 1784452.998 ops/s
# Warmup Iteration  12: 1773596.554 ops/s
# Warmup Iteration  13: 1772634.393 ops/s
# Warmup Iteration  14: 1774993.307 ops/s
# Warmup Iteration  15: 1759366.923 ops/s
# Warmup Iteration  16: 1758887.443 ops/s
# Warmup Iteration  17: 1766529.598 ops/s
# Warmup Iteration  18: 1751994.469 ops/s
# Warmup Iteration  19: 1793236.346 ops/s
# Warmup Iteration  20: 1755185.741 ops/s
# Warmup Iteration  21: 1754346.122 ops/s
# Warmup Iteration  22: 1784584.899 ops/s
# Warmup Iteration  23: 1768813.138 ops/s
# Warmup Iteration  24: 1757163.065 ops/s
# Warmup Iteration  25: 1767479.636 ops/s
# Warmup Iteration  26: 1761004.320 ops/s
# Warmup Iteration  27: 1769564.575 ops/s
# Warmup Iteration  28: 1761145.424 ops/s
# Warmup Iteration  29: 1754501.557 ops/s
# Warmup Iteration  30: 1766775.712 ops/s
Iteration   1: 1766915.402 ops/s
Iteration   2: 1773028.141 ops/s
Iteration   3: 1783238.798 ops/s
Iteration   4: 1764523.527 ops/s
Iteration   5: 1775379.304 ops/s
Iteration   6: 1778355.497 ops/s
Iteration   7: 1762559.187 ops/s
Iteration   8: 1771517.903 ops/s
Iteration   9: 1777765.633 ops/s
Iteration  10: 1779978.735 ops/s
Iteration  11: 1758595.236 ops/s
Iteration  12: 1760649.630 ops/s
Iteration  13: 1747787.599 ops/s
Iteration  14: 1759246.364 ops/s
Iteration  15: 1766380.610 ops/s
Iteration  16: 1764368.670 ops/s
Iteration  17: 1774371.048 ops/s
Iteration  18: 1768492.364 ops/s
Iteration  19: 1768902.751 ops/s
Iteration  20: 1774225.968 ops/s
Iteration  21: 1777692.027 ops/s
Iteration  22: 1774777.708 ops/s
Iteration  23: 1778599.905 ops/s
Iteration  24: 1777670.482 ops/s
Iteration  25: 1765991.244 ops/s
Iteration  26: 1779982.642 ops/s
Iteration  27: 1770893.777 ops/s
Iteration  28: 1770011.257 ops/s
Iteration  29: 1756971.305 ops/s
Iteration  30: 1766520.160 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableReplayEagerTruncateTest._Benchmark.benchmark_disposeNoNeedForResetSizeBound":
  1769846.429 ±(99.9%) 5498.893 ops/s [Average]
  (min, avg, max) = (1747787.599, 1769846.429, 1783238.798), stdev = 8230.485
  CI (99.9%): [1764347.536, 1775345.322] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               Mode  Cnt        Score      Error  Units
ObservableReplayEagerTruncateTest._Benchmark.benchmark_disposeNoNeedForResetSizeBound  thrpt   30  1769846.429 ± 5498.893  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayTest._Benchmark.benchmark_cancelOnArrival2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayTest._Benchmark.benchmark_cancelOnArrival2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1045378.661 ops/s
# Warmup Iteration   2: 1344031.457 ops/s
# Warmup Iteration   3: 1669560.625 ops/s
# Warmup Iteration   4: 1830185.405 ops/s
# Warmup Iteration   5: 2113606.205 ops/s
# Warmup Iteration   6: 2118645.095 ops/s
# Warmup Iteration   7: 2099508.177 ops/s
# Warmup Iteration   8: 2124296.350 ops/s
# Warmup Iteration   9: 2114421.973 ops/s
# Warmup Iteration  10: 2126479.639 ops/s
# Warmup Iteration  11: 2116212.716 ops/s
# Warmup Iteration  12: 2105858.884 ops/s
# Warmup Iteration  13: 2116023.733 ops/s
# Warmup Iteration  14: 2109640.865 ops/s
# Warmup Iteration  15: 2112109.342 ops/s
# Warmup Iteration  16: 2115568.030 ops/s
# Warmup Iteration  17: 2109386.411 ops/s
# Warmup Iteration  18: 2103978.592 ops/s
# Warmup Iteration  19: 2113155.640 ops/s
# Warmup Iteration  20: 2109087.281 ops/s
# Warmup Iteration  21: 2120060.590 ops/s
# Warmup Iteration  22: 2105763.739 ops/s
# Warmup Iteration  23: 2119245.813 ops/s
# Warmup Iteration  24: 2116489.370 ops/s
# Warmup Iteration  25: 2110070.814 ops/s
# Warmup Iteration  26: 2102169.758 ops/s
# Warmup Iteration  27: 2099858.395 ops/s
# Warmup Iteration  28: 2119152.248 ops/s
# Warmup Iteration  29: 2105302.826 ops/s
# Warmup Iteration  30: 2092022.729 ops/s
Iteration   1: 2105385.697 ops/s
Iteration   2: 2110942.669 ops/s
Iteration   3: 2116047.004 ops/s
Iteration   4: 2106599.143 ops/s
Iteration   5: 2129086.167 ops/s
Iteration   6: 2126172.269 ops/s
Iteration   7: 2109850.435 ops/s
Iteration   8: 2120714.920 ops/s
Iteration   9: 2101970.136 ops/s
Iteration  10: 2108856.364 ops/s
Iteration  11: 2116827.668 ops/s
Iteration  12: 2116804.843 ops/s
Iteration  13: 2108835.980 ops/s
Iteration  14: 2115557.840 ops/s
Iteration  15: 2122356.558 ops/s
Iteration  16: 2113781.064 ops/s
Iteration  17: 2116613.942 ops/s
Iteration  18: 2108777.249 ops/s
Iteration  19: 2117318.595 ops/s
Iteration  20: 2105036.945 ops/s
Iteration  21: 2118561.486 ops/s
Iteration  22: 2110196.752 ops/s
Iteration  23: 2105368.460 ops/s
Iteration  24: 2101213.137 ops/s
Iteration  25: 2117279.021 ops/s
Iteration  26: 2127273.090 ops/s
Iteration  27: 2106135.037 ops/s
Iteration  28: 2106776.587 ops/s
Iteration  29: 2114545.513 ops/s
Iteration  30: 2100669.343 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayTest._Benchmark.benchmark_cancelOnArrival2":
  2112851.797 ±(99.9%) 5122.487 ops/s [Average]
  (min, avg, max) = (2100669.343, 2112851.797, 2129086.167), stdev = 7667.097
  CI (99.9%): [2107729.311, 2117974.284] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
FlowableReplayTest._Benchmark.benchmark_cancelOnArrival2  thrpt   30  2112851.797 ± 5122.487  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayTest._Benchmark.benchmark_unboundedLeavesEarly$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayTest._Benchmark.benchmark_unboundedLeavesEarly

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 741636.871 ops/s
# Warmup Iteration   2: 962850.094 ops/s
# Warmup Iteration   3: 1180249.698 ops/s
# Warmup Iteration   4: 1318405.791 ops/s
# Warmup Iteration   5: 1552311.954 ops/s
# Warmup Iteration   6: 1563833.586 ops/s
# Warmup Iteration   7: 1550168.027 ops/s
# Warmup Iteration   8: 1550988.955 ops/s
# Warmup Iteration   9: 1547107.926 ops/s
# Warmup Iteration  10: 1566323.209 ops/s
# Warmup Iteration  11: 1559865.271 ops/s
# Warmup Iteration  12: 1584744.446 ops/s
# Warmup Iteration  13: 1572160.437 ops/s
# Warmup Iteration  14: 1552782.773 ops/s
# Warmup Iteration  15: 1556432.913 ops/s
# Warmup Iteration  16: 1562940.454 ops/s
# Warmup Iteration  17: 1555348.509 ops/s
# Warmup Iteration  18: 1569403.293 ops/s
# Warmup Iteration  19: 1553566.852 ops/s
# Warmup Iteration  20: 1571568.555 ops/s
# Warmup Iteration  21: 1558457.195 ops/s
# Warmup Iteration  22: 1562035.364 ops/s
# Warmup Iteration  23: 1557867.647 ops/s
# Warmup Iteration  24: 1542053.815 ops/s
# Warmup Iteration  25: 1548103.751 ops/s
# Warmup Iteration  26: 1571788.045 ops/s
# Warmup Iteration  27: 1555046.414 ops/s
# Warmup Iteration  28: 1558880.229 ops/s
# Warmup Iteration  29: 1571228.473 ops/s
# Warmup Iteration  30: 1553016.327 ops/s
Iteration   1: 1535396.346 ops/s
Iteration   2: 1551628.013 ops/s
Iteration   3: 1568536.275 ops/s
Iteration   4: 1565602.056 ops/s
Iteration   5: 1542505.463 ops/s
Iteration   6: 1567727.407 ops/s
Iteration   7: 1558962.060 ops/s
Iteration   8: 1568838.196 ops/s
Iteration   9: 1562810.486 ops/s
Iteration  10: 1555283.264 ops/s
Iteration  11: 1555821.383 ops/s
Iteration  12: 1545666.605 ops/s
Iteration  13: 1557025.602 ops/s
Iteration  14: 1552512.367 ops/s
Iteration  15: 1546818.058 ops/s
Iteration  16: 1562181.502 ops/s
Iteration  17: 1570547.145 ops/s
Iteration  18: 1557679.931 ops/s
Iteration  19: 1558072.843 ops/s
Iteration  20: 1574155.435 ops/s
Iteration  21: 1565696.124 ops/s
Iteration  22: 1563087.796 ops/s
Iteration  23: 1559435.148 ops/s
Iteration  24: 1549147.408 ops/s
Iteration  25: 1560631.574 ops/s
Iteration  26: 1552370.687 ops/s
Iteration  27: 1561938.901 ops/s
Iteration  28: 1560925.284 ops/s
Iteration  29: 1554043.291 ops/s
Iteration  30: 1559503.806 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayTest._Benchmark.benchmark_unboundedLeavesEarly":
  1558151.682 ±(99.9%) 5817.050 ops/s [Average]
  (min, avg, max) = (1535396.346, 1558151.682, 1574155.435), stdev = 8706.687
  CI (99.9%): [1552334.632, 1563968.732] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
FlowableReplayTest._Benchmark.benchmark_unboundedLeavesEarly  thrpt   30  1558151.682 ± 5817.050  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 688221.288 ops/s
# Warmup Iteration   2: 1152929.418 ops/s
# Warmup Iteration   3: 1243430.225 ops/s
# Warmup Iteration   4: 1243708.320 ops/s
# Warmup Iteration   5: 1239468.700 ops/s
# Warmup Iteration   6: 1251451.597 ops/s
# Warmup Iteration   7: 1249448.410 ops/s
# Warmup Iteration   8: 1230554.635 ops/s
# Warmup Iteration   9: 1246682.876 ops/s
# Warmup Iteration  10: 1240531.317 ops/s
# Warmup Iteration  11: 1240517.975 ops/s
# Warmup Iteration  12: 1243004.123 ops/s
# Warmup Iteration  13: 1252506.496 ops/s
# Warmup Iteration  14: 1246385.182 ops/s
# Warmup Iteration  15: 1240754.353 ops/s
# Warmup Iteration  16: 1242564.045 ops/s
# Warmup Iteration  17: 1243971.133 ops/s
# Warmup Iteration  18: 1245564.798 ops/s
# Warmup Iteration  19: 1256109.628 ops/s
# Warmup Iteration  20: 1236115.910 ops/s
# Warmup Iteration  21: 1238541.697 ops/s
# Warmup Iteration  22: 1240533.521 ops/s
# Warmup Iteration  23: 1248394.547 ops/s
# Warmup Iteration  24: 1247386.071 ops/s
# Warmup Iteration  25: 1240801.541 ops/s
# Warmup Iteration  26: 1238358.606 ops/s
# Warmup Iteration  27: 1243634.606 ops/s
# Warmup Iteration  28: 1244738.372 ops/s
# Warmup Iteration  29: 1238337.380 ops/s
# Warmup Iteration  30: 1233513.533 ops/s
Iteration   1: 1248216.658 ops/s
Iteration   2: 1245659.663 ops/s
Iteration   3: 1247833.457 ops/s
Iteration   4: 1246794.388 ops/s
Iteration   5: 1236878.161 ops/s
Iteration   6: 1241622.554 ops/s
Iteration   7: 1243934.401 ops/s
Iteration   8: 1249082.297 ops/s
Iteration   9: 1242034.669 ops/s
Iteration  10: 1248300.835 ops/s
Iteration  11: 1243221.824 ops/s
Iteration  12: 1241011.868 ops/s
Iteration  13: 1251976.634 ops/s
Iteration  14: 1234404.493 ops/s
Iteration  15: 1241477.294 ops/s
Iteration  16: 1240716.439 ops/s
Iteration  17: 1244274.374 ops/s
Iteration  18: 1237806.468 ops/s
Iteration  19: 1252926.024 ops/s
Iteration  20: 1238690.712 ops/s
Iteration  21: 1242664.950 ops/s
Iteration  22: 1248216.024 ops/s
Iteration  23: 1232918.659 ops/s
Iteration  24: 1237428.324 ops/s
Iteration  25: 1246793.460 ops/s
Iteration  26: 1235918.343 ops/s
Iteration  27: 1243692.546 ops/s
Iteration  28: 1244485.241 ops/s
Iteration  29: 1239329.344 ops/s
Iteration  30: 1251662.040 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_dispose":
  1243332.405 ±(99.9%) 3514.408 ops/s [Average]
  (min, avg, max) = (1232918.659, 1243332.405, 1252926.024), stdev = 5260.201
  CI (99.9%): [1239817.996, 1246846.813] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
FlowableWindowWithSizeTest._Benchmark.benchmark_dispose  thrpt   30  1243332.405 ± 3514.408  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReplayTest._Benchmark.benchmark_reentrantOnNextCancelBounded$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReplayTest._Benchmark.benchmark_reentrantOnNextCancelBounded

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1859380.308 ops/s
# Warmup Iteration   2: 2799490.712 ops/s
# Warmup Iteration   3: 3151533.292 ops/s
# Warmup Iteration   4: 3238621.291 ops/s
# Warmup Iteration   5: 3159951.687 ops/s
# Warmup Iteration   6: 3155877.248 ops/s
# Warmup Iteration   7: 3165104.715 ops/s
# Warmup Iteration   8: 3162117.943 ops/s
# Warmup Iteration   9: 3172643.616 ops/s
# Warmup Iteration  10: 3137390.193 ops/s
# Warmup Iteration  11: 3170592.298 ops/s
# Warmup Iteration  12: 3187932.780 ops/s
# Warmup Iteration  13: 3168171.920 ops/s
# Warmup Iteration  14: 3168600.655 ops/s
# Warmup Iteration  15: 3178365.187 ops/s
# Warmup Iteration  16: 3156029.326 ops/s
# Warmup Iteration  17: 3160811.681 ops/s
# Warmup Iteration  18: 3150579.346 ops/s
# Warmup Iteration  19: 3134667.892 ops/s
# Warmup Iteration  20: 3191655.531 ops/s
# Warmup Iteration  21: 3156711.126 ops/s
# Warmup Iteration  22: 3176496.449 ops/s
# Warmup Iteration  23: 3175387.691 ops/s
# Warmup Iteration  24: 3156548.963 ops/s
# Warmup Iteration  25: 3157505.188 ops/s
# Warmup Iteration  26: 3156717.619 ops/s
# Warmup Iteration  27: 3162415.913 ops/s
# Warmup Iteration  28: 3160507.009 ops/s
# Warmup Iteration  29: 3153789.733 ops/s
# Warmup Iteration  30: 3140725.562 ops/s
Iteration   1: 3131504.201 ops/s
Iteration   2: 3168023.697 ops/s
Iteration   3: 3210641.634 ops/s
Iteration   4: 3137805.051 ops/s
Iteration   5: 3174714.181 ops/s
Iteration   6: 3172677.304 ops/s
Iteration   7: 3158850.582 ops/s
Iteration   8: 3189780.565 ops/s
Iteration   9: 3174817.249 ops/s
Iteration  10: 3197743.224 ops/s
Iteration  11: 3139895.124 ops/s
Iteration  12: 3174507.026 ops/s
Iteration  13: 3176612.820 ops/s
Iteration  14: 3175793.208 ops/s
Iteration  15: 3197621.357 ops/s
Iteration  16: 3162731.221 ops/s
Iteration  17: 3154245.976 ops/s
Iteration  18: 3165732.726 ops/s
Iteration  19: 3176609.273 ops/s
Iteration  20: 3172718.764 ops/s
Iteration  21: 3163764.372 ops/s
Iteration  22: 3125118.891 ops/s
Iteration  23: 3143694.746 ops/s
Iteration  24: 3189968.426 ops/s
Iteration  25: 3115636.662 ops/s
Iteration  26: 3172899.818 ops/s
Iteration  27: 3158213.629 ops/s
Iteration  28: 3210403.301 ops/s
Iteration  29: 3178281.216 ops/s
Iteration  30: 3167231.984 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableReplayTest._Benchmark.benchmark_reentrantOnNextCancelBounded":
  3167941.274 ±(99.9%) 15434.673 ops/s [Average]
  (min, avg, max) = (3115636.662, 3167941.274, 3210641.634), stdev = 23101.893
  CI (99.9%): [3152506.602, 3183375.947] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score       Error  Units
ObservableReplayTest._Benchmark.benchmark_reentrantOnNextCancelBounded  thrpt   30  3167941.274 ± 15434.673  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReplayEagerTruncateTest._Benchmark.benchmark_reentrantOnNextCancelBounded$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReplayEagerTruncateTest._Benchmark.benchmark_reentrantOnNextCancelBounded

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1879429.693 ops/s
# Warmup Iteration   2: 2648741.549 ops/s
# Warmup Iteration   3: 2978851.796 ops/s
# Warmup Iteration   4: 3021603.261 ops/s
# Warmup Iteration   5: 3018013.591 ops/s
# Warmup Iteration   6: 3038661.815 ops/s
# Warmup Iteration   7: 2996218.536 ops/s
# Warmup Iteration   8: 3020481.896 ops/s
# Warmup Iteration   9: 3030788.697 ops/s
# Warmup Iteration  10: 3004492.757 ops/s
# Warmup Iteration  11: 3030375.454 ops/s
# Warmup Iteration  12: 2993940.856 ops/s
# Warmup Iteration  13: 2991871.989 ops/s
# Warmup Iteration  14: 2999592.314 ops/s
# Warmup Iteration  15: 2987278.006 ops/s
# Warmup Iteration  16: 3007011.176 ops/s
# Warmup Iteration  17: 3015358.758 ops/s
# Warmup Iteration  18: 2981247.843 ops/s
# Warmup Iteration  19: 2963039.053 ops/s
# Warmup Iteration  20: 3022419.392 ops/s
# Warmup Iteration  21: 3000768.678 ops/s
# Warmup Iteration  22: 2992532.362 ops/s
# Warmup Iteration  23: 3022127.263 ops/s
# Warmup Iteration  24: 3011730.075 ops/s
# Warmup Iteration  25: 3018678.451 ops/s
# Warmup Iteration  26: 2997656.161 ops/s
# Warmup Iteration  27: 3010078.894 ops/s
# Warmup Iteration  28: 3000748.177 ops/s
# Warmup Iteration  29: 2997922.723 ops/s
# Warmup Iteration  30: 3037577.715 ops/s
Iteration   1: 3042188.259 ops/s
Iteration   2: 3022496.622 ops/s
Iteration   3: 2979414.825 ops/s
Iteration   4: 3029248.971 ops/s
Iteration   5: 2976929.272 ops/s
Iteration   6: 2961380.973 ops/s
Iteration   7: 2997070.912 ops/s
Iteration   8: 3034023.839 ops/s
Iteration   9: 3005743.367 ops/s
Iteration  10: 2996229.165 ops/s
Iteration  11: 3032483.753 ops/s
Iteration  12: 2970362.741 ops/s
Iteration  13: 3024096.065 ops/s
Iteration  14: 2999701.685 ops/s
Iteration  15: 3033860.494 ops/s
Iteration  16: 2998521.697 ops/s
Iteration  17: 2977464.896 ops/s
Iteration  18: 3020476.314 ops/s
Iteration  19: 3000818.355 ops/s
Iteration  20: 2978223.153 ops/s
Iteration  21: 2985408.139 ops/s
Iteration  22: 3004943.353 ops/s
Iteration  23: 3031126.813 ops/s
Iteration  24: 2998300.552 ops/s
Iteration  25: 2984837.324 ops/s
Iteration  26: 3015356.929 ops/s
Iteration  27: 2990996.396 ops/s
Iteration  28: 3001549.695 ops/s
Iteration  29: 3040112.848 ops/s
Iteration  30: 3011470.106 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableReplayEagerTruncateTest._Benchmark.benchmark_reentrantOnNextCancelBounded":
  3004827.917 ±(99.9%) 15025.226 ops/s [Average]
  (min, avg, max) = (2961380.973, 3004827.917, 3042188.259), stdev = 22489.053
  CI (99.9%): [2989802.691, 3019853.144] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             Mode  Cnt        Score       Error  Units
ObservableReplayEagerTruncateTest._Benchmark.benchmark_reentrantOnNextCancelBounded  thrpt   30  3004827.917 ± 15025.226  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReduceTest._Benchmark.benchmark_backpressureWithNoInitialValueObservable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReduceTest._Benchmark.benchmark_backpressureWithNoInitialValueObservable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 61379.151 ops/s
# Warmup Iteration   2: 383931.649 ops/s
# Warmup Iteration   3: 576301.890 ops/s
# Warmup Iteration   4: 660076.296 ops/s
# Warmup Iteration   5: 657366.574 ops/s
# Warmup Iteration   6: 652649.370 ops/s
# Warmup Iteration   7: 655399.592 ops/s
# Warmup Iteration   8: 652913.535 ops/s
# Warmup Iteration   9: 649328.485 ops/s
# Warmup Iteration  10: 652837.305 ops/s
# Warmup Iteration  11: 656987.670 ops/s
# Warmup Iteration  12: 654808.148 ops/s
# Warmup Iteration  13: 651895.604 ops/s
# Warmup Iteration  14: 657216.925 ops/s
# Warmup Iteration  15: 658204.382 ops/s
# Warmup Iteration  16: 654666.656 ops/s
# Warmup Iteration  17: 661560.830 ops/s
# Warmup Iteration  18: 660792.401 ops/s
# Warmup Iteration  19: 658373.978 ops/s
# Warmup Iteration  20: 657964.491 ops/s
# Warmup Iteration  21: 661703.936 ops/s
# Warmup Iteration  22: 659409.123 ops/s
# Warmup Iteration  23: 661676.714 ops/s
# Warmup Iteration  24: 659014.957 ops/s
# Warmup Iteration  25: 660263.928 ops/s
# Warmup Iteration  26: 658445.302 ops/s
# Warmup Iteration  27: 658790.760 ops/s
# Warmup Iteration  28: 661244.478 ops/s
# Warmup Iteration  29: 657738.340 ops/s
# Warmup Iteration  30: 659008.159 ops/s
Iteration   1: 659467.131 ops/s
Iteration   2: 658226.131 ops/s
Iteration   3: 656500.644 ops/s
Iteration   4: 660000.824 ops/s
Iteration   5: 658230.122 ops/s
Iteration   6: 660470.519 ops/s
Iteration   7: 657477.001 ops/s
Iteration   8: 659351.200 ops/s
Iteration   9: 658310.852 ops/s
Iteration  10: 662923.236 ops/s
Iteration  11: 659157.900 ops/s
Iteration  12: 659750.340 ops/s
Iteration  13: 660606.451 ops/s
Iteration  14: 659063.047 ops/s
Iteration  15: 657764.651 ops/s
Iteration  16: 659630.018 ops/s
Iteration  17: 658626.871 ops/s
Iteration  18: 657899.599 ops/s
Iteration  19: 658227.766 ops/s
Iteration  20: 657340.341 ops/s
Iteration  21: 659009.973 ops/s
Iteration  22: 658779.674 ops/s
Iteration  23: 658632.849 ops/s
Iteration  24: 658914.610 ops/s
Iteration  25: 660425.744 ops/s
Iteration  26: 661735.239 ops/s
Iteration  27: 662164.663 ops/s
Iteration  28: 655621.011 ops/s
Iteration  29: 660639.988 ops/s
Iteration  30: 657493.095 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableReduceTest._Benchmark.benchmark_backpressureWithNoInitialValueObservable":
  659081.383 ±(99.9%) 1073.192 ops/s [Average]
  (min, avg, max) = (655621.011, 659081.383, 662923.236), stdev = 1606.303
  CI (99.9%): [658008.191, 660154.575] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            Mode  Cnt       Score      Error  Units
ObservableReduceTest._Benchmark.benchmark_backpressureWithNoInitialValueObservable  thrpt   30  659081.383 ± 1073.192  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSingleTest._Benchmark.benchmark_issue1527Observable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSingleTest._Benchmark.benchmark_issue1527Observable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 4825031.830 ops/s
# Warmup Iteration   2: 6636051.485 ops/s
# Warmup Iteration   3: 7679382.487 ops/s
# Warmup Iteration   4: 7643955.173 ops/s
# Warmup Iteration   5: 7626454.660 ops/s
# Warmup Iteration   6: 7603299.981 ops/s
# Warmup Iteration   7: 7605876.390 ops/s
# Warmup Iteration   8: 7598048.207 ops/s
# Warmup Iteration   9: 7716266.393 ops/s
# Warmup Iteration  10: 7627705.516 ops/s
# Warmup Iteration  11: 7603359.949 ops/s
# Warmup Iteration  12: 7620621.183 ops/s
# Warmup Iteration  13: 7607615.528 ops/s
# Warmup Iteration  14: 7620776.062 ops/s
# Warmup Iteration  15: 7645857.871 ops/s
# Warmup Iteration  16: 7655509.423 ops/s
# Warmup Iteration  17: 7629002.668 ops/s
# Warmup Iteration  18: 7604174.594 ops/s
# Warmup Iteration  19: 7569983.897 ops/s
# Warmup Iteration  20: 7665799.521 ops/s
# Warmup Iteration  21: 7627972.773 ops/s
# Warmup Iteration  22: 7592145.737 ops/s
# Warmup Iteration  23: 7607033.142 ops/s
# Warmup Iteration  24: 7603828.990 ops/s
# Warmup Iteration  25: 7666502.553 ops/s
# Warmup Iteration  26: 7617657.306 ops/s
# Warmup Iteration  27: 7573771.977 ops/s
# Warmup Iteration  28: 7647508.093 ops/s
# Warmup Iteration  29: 7636488.749 ops/s
# Warmup Iteration  30: 7647345.107 ops/s
Iteration   1: 7606358.752 ops/s
Iteration   2: 7617999.018 ops/s
Iteration   3: 7664479.498 ops/s
Iteration   4: 7619487.956 ops/s
Iteration   5: 7587228.479 ops/s
Iteration   6: 7627057.114 ops/s
Iteration   7: 7596115.245 ops/s
Iteration   8: 7641435.592 ops/s
Iteration   9: 7599147.563 ops/s
Iteration  10: 7600069.163 ops/s
Iteration  11: 7619681.755 ops/s
Iteration  12: 7643093.529 ops/s
Iteration  13: 7634538.874 ops/s
Iteration  14: 7657264.814 ops/s
Iteration  15: 7641240.381 ops/s
Iteration  16: 7613592.000 ops/s
Iteration  17: 7634649.617 ops/s
Iteration  18: 7604535.224 ops/s
Iteration  19: 7604864.639 ops/s
Iteration  20: 7601633.182 ops/s
Iteration  21: 7600972.171 ops/s
Iteration  22: 7611049.945 ops/s
Iteration  23: 7644725.317 ops/s
Iteration  24: 7633564.047 ops/s
Iteration  25: 7609351.916 ops/s
Iteration  26: 7620838.521 ops/s
Iteration  27: 7663475.554 ops/s
Iteration  28: 7600503.361 ops/s
Iteration  29: 7681329.941 ops/s
Iteration  30: 7617033.136 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableSingleTest._Benchmark.benchmark_issue1527Observable":
  7623243.877 ±(99.9%) 15632.610 ops/s [Average]
  (min, avg, max) = (7587228.479, 7623243.877, 7681329.941), stdev = 23398.157
  CI (99.9%): [7607611.266, 7638876.487] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
ObservableSingleTest._Benchmark.benchmark_issue1527Observable  thrpt   30  7623243.877 ± 15632.610  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableStartWithTest._Benchmark.benchmark_justMaybeJust$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableStartWithTest._Benchmark.benchmark_justMaybeJust

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1954599.603 ops/s
# Warmup Iteration   2: 2697506.627 ops/s
# Warmup Iteration   3: 3200295.345 ops/s
# Warmup Iteration   4: 3313898.394 ops/s
# Warmup Iteration   5: 3276905.189 ops/s
# Warmup Iteration   6: 3298381.824 ops/s
# Warmup Iteration   7: 3292093.184 ops/s
# Warmup Iteration   8: 3294594.436 ops/s
# Warmup Iteration   9: 3261724.660 ops/s
# Warmup Iteration  10: 3283143.334 ops/s
# Warmup Iteration  11: 3288306.429 ops/s
# Warmup Iteration  12: 3267855.414 ops/s
# Warmup Iteration  13: 3276512.023 ops/s
# Warmup Iteration  14: 3271915.645 ops/s
# Warmup Iteration  15: 3282965.370 ops/s
# Warmup Iteration  16: 3288467.744 ops/s
# Warmup Iteration  17: 3290432.290 ops/s
# Warmup Iteration  18: 3288510.756 ops/s
# Warmup Iteration  19: 3291872.072 ops/s
# Warmup Iteration  20: 3276591.368 ops/s
# Warmup Iteration  21: 3295322.241 ops/s
# Warmup Iteration  22: 3275663.499 ops/s
# Warmup Iteration  23: 3279364.938 ops/s
# Warmup Iteration  24: 3272707.254 ops/s
# Warmup Iteration  25: 3298036.122 ops/s
# Warmup Iteration  26: 3291910.669 ops/s
# Warmup Iteration  27: 3286614.036 ops/s
# Warmup Iteration  28: 3286962.520 ops/s
# Warmup Iteration  29: 3299948.593 ops/s
# Warmup Iteration  30: 3283641.682 ops/s
Iteration   1: 3280984.544 ops/s
Iteration   2: 3257583.538 ops/s
Iteration   3: 3270354.350 ops/s
Iteration   4: 3278691.747 ops/s
Iteration   5: 3274738.183 ops/s
Iteration   6: 3278390.834 ops/s
Iteration   7: 3288953.140 ops/s
Iteration   8: 3262353.619 ops/s
Iteration   9: 3292276.661 ops/s
Iteration  10: 3274475.373 ops/s
Iteration  11: 3268749.827 ops/s
Iteration  12: 3307291.123 ops/s
Iteration  13: 3286583.176 ops/s
Iteration  14: 3275123.226 ops/s
Iteration  15: 3278675.254 ops/s
Iteration  16: 3282281.435 ops/s
Iteration  17: 3281621.357 ops/s
Iteration  18: 3304892.762 ops/s
Iteration  19: 3273199.923 ops/s
Iteration  20: 3274565.204 ops/s
Iteration  21: 3301883.992 ops/s
Iteration  22: 3253548.485 ops/s
Iteration  23: 3261072.962 ops/s
Iteration  24: 3286431.342 ops/s
Iteration  25: 3277674.184 ops/s
Iteration  26: 3277092.308 ops/s
Iteration  27: 3270198.372 ops/s
Iteration  28: 3291942.099 ops/s
Iteration  29: 3289452.078 ops/s
Iteration  30: 3272167.977 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableStartWithTest._Benchmark.benchmark_justMaybeJust":
  3279108.302 ±(99.9%) 8597.618 ops/s [Average]
  (min, avg, max) = (3253548.485, 3279108.302, 3307291.123), stdev = 12868.511
  CI (99.9%): [3270510.684, 3287705.921] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
ObservableStartWithTest._Benchmark.benchmark_justMaybeJust  thrpt   30  3279108.302 ± 8597.618  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeStartWithTest._Benchmark.benchmark_justObservableJust$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeStartWithTest._Benchmark.benchmark_justObservableJust

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1521513.901 ops/s
# Warmup Iteration   2: 2277290.128 ops/s
# Warmup Iteration   3: 2620726.422 ops/s
# Warmup Iteration   4: 2707807.500 ops/s
# Warmup Iteration   5: 2712413.501 ops/s
# Warmup Iteration   6: 2725894.811 ops/s
# Warmup Iteration   7: 2702668.218 ops/s
# Warmup Iteration   8: 2691142.917 ops/s
# Warmup Iteration   9: 2686058.160 ops/s
# Warmup Iteration  10: 2681119.885 ops/s
# Warmup Iteration  11: 2685081.918 ops/s
# Warmup Iteration  12: 2706050.858 ops/s
# Warmup Iteration  13: 2678130.285 ops/s
# Warmup Iteration  14: 2687104.907 ops/s
# Warmup Iteration  15: 2699768.841 ops/s
# Warmup Iteration  16: 2686709.618 ops/s
# Warmup Iteration  17: 2678070.590 ops/s
# Warmup Iteration  18: 2700455.642 ops/s
# Warmup Iteration  19: 2687050.661 ops/s
# Warmup Iteration  20: 2698989.631 ops/s
# Warmup Iteration  21: 2702776.271 ops/s
# Warmup Iteration  22: 2702244.801 ops/s
# Warmup Iteration  23: 2716114.735 ops/s
# Warmup Iteration  24: 2701113.552 ops/s
# Warmup Iteration  25: 2706245.254 ops/s
# Warmup Iteration  26: 2694777.920 ops/s
# Warmup Iteration  27: 2700352.677 ops/s
# Warmup Iteration  28: 2703812.163 ops/s
# Warmup Iteration  29: 2692729.582 ops/s
# Warmup Iteration  30: 2691375.567 ops/s
Iteration   1: 2687320.061 ops/s
Iteration   2: 2705556.139 ops/s
Iteration   3: 2693216.967 ops/s
Iteration   4: 2717330.920 ops/s
Iteration   5: 2708177.531 ops/s
Iteration   6: 2691297.119 ops/s
Iteration   7: 2690026.845 ops/s
Iteration   8: 2704041.191 ops/s
Iteration   9: 2692024.043 ops/s
Iteration  10: 2698429.294 ops/s
Iteration  11: 2697026.244 ops/s
Iteration  12: 2709797.256 ops/s
Iteration  13: 2695841.980 ops/s
Iteration  14: 2716136.509 ops/s
Iteration  15: 2685151.930 ops/s
Iteration  16: 2696650.514 ops/s
Iteration  17: 2694336.610 ops/s
Iteration  18: 2691355.769 ops/s
Iteration  19: 2703915.264 ops/s
Iteration  20: 2699125.754 ops/s
Iteration  21: 2697448.837 ops/s
Iteration  22: 2708446.698 ops/s
Iteration  23: 2694002.266 ops/s
Iteration  24: 2699946.418 ops/s
Iteration  25: 2684409.442 ops/s
Iteration  26: 2707102.837 ops/s
Iteration  27: 2688933.320 ops/s
Iteration  28: 2706644.961 ops/s
Iteration  29: 2683955.829 ops/s
Iteration  30: 2677886.895 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeStartWithTest._Benchmark.benchmark_justObservableJust":
  2697517.848 ±(99.9%) 6488.443 ops/s [Average]
  (min, avg, max) = (2677886.895, 2697517.848, 2717330.920), stdev = 9711.597
  CI (99.9%): [2691029.405, 2704006.291] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
MaybeStartWithTest._Benchmark.benchmark_justObservableJust  thrpt   30  2697517.848 ± 6488.443  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithMaybeTest._Benchmark.benchmark_normalNonEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithMaybeTest._Benchmark.benchmark_normalNonEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2930454.089 ops/s
# Warmup Iteration   2: 5184635.216 ops/s
# Warmup Iteration   3: 5712029.809 ops/s
# Warmup Iteration   4: 5690085.541 ops/s
# Warmup Iteration   5: 5683421.661 ops/s
# Warmup Iteration   6: 5656939.593 ops/s
# Warmup Iteration   7: 5683351.409 ops/s
# Warmup Iteration   8: 5643781.829 ops/s
# Warmup Iteration   9: 5650777.831 ops/s
# Warmup Iteration  10: 5645555.022 ops/s
# Warmup Iteration  11: 5630668.961 ops/s
# Warmup Iteration  12: 5719721.776 ops/s
# Warmup Iteration  13: 5693305.441 ops/s
# Warmup Iteration  14: 5630477.237 ops/s
# Warmup Iteration  15: 5665271.972 ops/s
# Warmup Iteration  16: 5671442.735 ops/s
# Warmup Iteration  17: 5657673.372 ops/s
# Warmup Iteration  18: 5640950.491 ops/s
# Warmup Iteration  19: 5684872.319 ops/s
# Warmup Iteration  20: 5693854.469 ops/s
# Warmup Iteration  21: 5661825.439 ops/s
# Warmup Iteration  22: 5663706.669 ops/s
# Warmup Iteration  23: 5671248.145 ops/s
# Warmup Iteration  24: 5688498.739 ops/s
# Warmup Iteration  25: 5641687.739 ops/s
# Warmup Iteration  26: 5669880.234 ops/s
# Warmup Iteration  27: 5666384.891 ops/s
# Warmup Iteration  28: 5673271.092 ops/s
# Warmup Iteration  29: 5677324.000 ops/s
# Warmup Iteration  30: 5678298.188 ops/s
Iteration   1: 5648371.117 ops/s
Iteration   2: 5670193.852 ops/s
Iteration   3: 5640472.099 ops/s
Iteration   4: 5641218.813 ops/s
Iteration   5: 5644222.966 ops/s
Iteration   6: 5674936.944 ops/s
Iteration   7: 5678467.235 ops/s
Iteration   8: 5689676.724 ops/s
Iteration   9: 5655285.721 ops/s
Iteration  10: 5668663.206 ops/s
Iteration  11: 5664934.467 ops/s
Iteration  12: 5686322.187 ops/s
Iteration  13: 5654113.537 ops/s
Iteration  14: 5702409.724 ops/s
Iteration  15: 5638567.733 ops/s
Iteration  16: 5652598.240 ops/s
Iteration  17: 5669525.327 ops/s
Iteration  18: 5674028.218 ops/s
Iteration  19: 5680202.771 ops/s
Iteration  20: 5690041.515 ops/s
Iteration  21: 5671649.138 ops/s
Iteration  22: 5648317.099 ops/s
Iteration  23: 5660321.366 ops/s
Iteration  24: 5667303.607 ops/s
Iteration  25: 5666191.407 ops/s
Iteration  26: 5677624.596 ops/s
Iteration  27: 5669241.934 ops/s
Iteration  28: 5678694.506 ops/s
Iteration  29: 5671298.196 ops/s
Iteration  30: 5645650.871 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithMaybeTest._Benchmark.benchmark_normalNonEmpty":
  5666018.171 ±(99.9%) 10945.565 ops/s [Average]
  (min, avg, max) = (5638567.733, 5666018.171, 5702409.724), stdev = 16382.808
  CI (99.9%): [5655072.605, 5676963.736] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
ObservableConcatWithMaybeTest._Benchmark.benchmark_normalNonEmpty  thrpt   30  5666018.171 ± 10945.565  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromMaybeTest._Benchmark.benchmark_success$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromMaybeTest._Benchmark.benchmark_success

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 5345943.100 ops/s
# Warmup Iteration   2: 8224403.498 ops/s
# Warmup Iteration   3: 9000038.257 ops/s
# Warmup Iteration   4: 8959217.928 ops/s
# Warmup Iteration   5: 9009975.857 ops/s
# Warmup Iteration   6: 9000559.659 ops/s
# Warmup Iteration   7: 8962346.894 ops/s
# Warmup Iteration   8: 9026735.778 ops/s
# Warmup Iteration   9: 9002088.995 ops/s
# Warmup Iteration  10: 9037882.046 ops/s
# Warmup Iteration  11: 8958046.756 ops/s
# Warmup Iteration  12: 8996159.130 ops/s
# Warmup Iteration  13: 9051879.368 ops/s
# Warmup Iteration  14: 9019223.325 ops/s
# Warmup Iteration  15: 9021114.271 ops/s
# Warmup Iteration  16: 9037774.087 ops/s
# Warmup Iteration  17: 9031080.500 ops/s
# Warmup Iteration  18: 9086555.039 ops/s
# Warmup Iteration  19: 9075084.195 ops/s
# Warmup Iteration  20: 9080651.398 ops/s
# Warmup Iteration  21: 9103077.084 ops/s
# Warmup Iteration  22: 9028149.267 ops/s
# Warmup Iteration  23: 9021212.687 ops/s
# Warmup Iteration  24: 9081373.722 ops/s
# Warmup Iteration  25: 9044267.751 ops/s
# Warmup Iteration  26: 9079037.026 ops/s
# Warmup Iteration  27: 9053024.257 ops/s
# Warmup Iteration  28: 9086611.935 ops/s
# Warmup Iteration  29: 9084664.518 ops/s
# Warmup Iteration  30: 9038511.833 ops/s
Iteration   1: 9058252.841 ops/s
Iteration   2: 9031560.523 ops/s
Iteration   3: 9039033.798 ops/s
Iteration   4: 9098714.576 ops/s
Iteration   5: 9067497.473 ops/s
Iteration   6: 9064954.132 ops/s
Iteration   7: 9048748.418 ops/s
Iteration   8: 9116570.103 ops/s
Iteration   9: 9079229.867 ops/s
Iteration  10: 9063485.624 ops/s
Iteration  11: 9046993.975 ops/s
Iteration  12: 9064724.189 ops/s
Iteration  13: 9068085.792 ops/s
Iteration  14: 9047009.960 ops/s
Iteration  15: 9030551.312 ops/s
Iteration  16: 9062441.804 ops/s
Iteration  17: 9037732.123 ops/s
Iteration  18: 9107826.419 ops/s
Iteration  19: 9069417.009 ops/s
Iteration  20: 9002421.230 ops/s
Iteration  21: 9034410.767 ops/s
Iteration  22: 9067582.742 ops/s
Iteration  23: 9077618.175 ops/s
Iteration  24: 9040089.895 ops/s
Iteration  25: 9135742.994 ops/s
Iteration  26: 9058404.878 ops/s
Iteration  27: 9057047.384 ops/s
Iteration  28: 9055508.626 ops/s
Iteration  29: 9017626.849 ops/s
Iteration  30: 9043904.173 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFromMaybeTest._Benchmark.benchmark_success":
  9059772.922 ±(99.9%) 18924.066 ops/s [Average]
  (min, avg, max) = (9002421.230, 9059772.922, 9135742.994), stdev = 28324.654
  CI (99.9%): [9040848.855, 9078696.988] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
ObservableFromMaybeTest._Benchmark.benchmark_success  thrpt   30  9059772.922 ± 18924.066  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromMaybeTest._Benchmark.benchmark_syncFusionRejected$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromMaybeTest._Benchmark.benchmark_syncFusionRejected

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 5234638.526 ops/s
# Warmup Iteration   2: 7005341.397 ops/s
# Warmup Iteration   3: 8050983.895 ops/s
# Warmup Iteration   4: 8038033.756 ops/s
# Warmup Iteration   5: 8010657.672 ops/s
# Warmup Iteration   6: 7994421.297 ops/s
# Warmup Iteration   7: 8022467.727 ops/s
# Warmup Iteration   8: 8029353.666 ops/s
# Warmup Iteration   9: 8017256.121 ops/s
# Warmup Iteration  10: 8021568.561 ops/s
# Warmup Iteration  11: 8009502.752 ops/s
# Warmup Iteration  12: 8007675.297 ops/s
# Warmup Iteration  13: 8052180.602 ops/s
# Warmup Iteration  14: 8024681.084 ops/s
# Warmup Iteration  15: 7976436.299 ops/s
# Warmup Iteration  16: 8038398.071 ops/s
# Warmup Iteration  17: 7924127.501 ops/s
# Warmup Iteration  18: 7986106.956 ops/s
# Warmup Iteration  19: 8022295.389 ops/s
# Warmup Iteration  20: 7997640.276 ops/s
# Warmup Iteration  21: 7960818.928 ops/s
# Warmup Iteration  22: 8005227.129 ops/s
# Warmup Iteration  23: 7965307.535 ops/s
# Warmup Iteration  24: 7974634.903 ops/s
# Warmup Iteration  25: 7980422.550 ops/s
# Warmup Iteration  26: 7951671.697 ops/s
# Warmup Iteration  27: 7999269.930 ops/s
# Warmup Iteration  28: 7992573.500 ops/s
# Warmup Iteration  29: 8002084.984 ops/s
# Warmup Iteration  30: 8008480.559 ops/s
Iteration   1: 7979147.427 ops/s
Iteration   2: 7983722.002 ops/s
Iteration   3: 7993305.068 ops/s
Iteration   4: 7971655.401 ops/s
Iteration   5: 7956008.942 ops/s
Iteration   6: 7996940.938 ops/s
Iteration   7: 7984906.078 ops/s
Iteration   8: 8003356.600 ops/s
Iteration   9: 7999859.271 ops/s
Iteration  10: 7989176.693 ops/s
Iteration  11: 8010853.597 ops/s
Iteration  12: 8039314.137 ops/s
Iteration  13: 7987525.766 ops/s
Iteration  14: 7990904.322 ops/s
Iteration  15: 7971002.760 ops/s
Iteration  16: 7979373.684 ops/s
Iteration  17: 8022048.180 ops/s
Iteration  18: 8001087.847 ops/s
Iteration  19: 7968350.796 ops/s
Iteration  20: 7987028.175 ops/s
Iteration  21: 7997153.083 ops/s
Iteration  22: 8011870.139 ops/s
Iteration  23: 7944392.183 ops/s
Iteration  24: 7979174.603 ops/s
Iteration  25: 7968629.689 ops/s
Iteration  26: 7990004.685 ops/s
Iteration  27: 8012974.731 ops/s
Iteration  28: 8005328.403 ops/s
Iteration  29: 7994290.576 ops/s
Iteration  30: 8026226.946 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFromMaybeTest._Benchmark.benchmark_syncFusionRejected":
  7991520.424 ±(99.9%) 13699.637 ops/s [Average]
  (min, avg, max) = (7944392.183, 7991520.424, 8039314.137), stdev = 20504.973
  CI (99.9%): [7977820.787, 8005220.061] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
ObservableFromMaybeTest._Benchmark.benchmark_syncFusionRejected  thrpt   30  7991520.424 ± 13699.637  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFilterTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFilterTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 7640950.048 ops/s
# Warmup Iteration   2: 10938829.648 ops/s
# Warmup Iteration   3: 12482243.963 ops/s
# Warmup Iteration   4: 12404067.261 ops/s
# Warmup Iteration   5: 12414171.758 ops/s
# Warmup Iteration   6: 12387328.972 ops/s
# Warmup Iteration   7: 12462007.584 ops/s
# Warmup Iteration   8: 12464184.890 ops/s
# Warmup Iteration   9: 12440039.404 ops/s
# Warmup Iteration  10: 12453928.274 ops/s
# Warmup Iteration  11: 12438902.414 ops/s
# Warmup Iteration  12: 12445952.374 ops/s
# Warmup Iteration  13: 12382266.039 ops/s
# Warmup Iteration  14: 12352749.456 ops/s
# Warmup Iteration  15: 12444867.167 ops/s
# Warmup Iteration  16: 12402402.249 ops/s
# Warmup Iteration  17: 12492783.199 ops/s
# Warmup Iteration  18: 12467903.830 ops/s
# Warmup Iteration  19: 12500417.135 ops/s
# Warmup Iteration  20: 12346768.280 ops/s
# Warmup Iteration  21: 12431467.969 ops/s
# Warmup Iteration  22: 12426772.130 ops/s
# Warmup Iteration  23: 12437213.269 ops/s
# Warmup Iteration  24: 12420041.870 ops/s
# Warmup Iteration  25: 12440401.927 ops/s
# Warmup Iteration  26: 12407547.945 ops/s
# Warmup Iteration  27: 12521842.629 ops/s
# Warmup Iteration  28: 12407071.787 ops/s
# Warmup Iteration  29: 12430142.193 ops/s
# Warmup Iteration  30: 12481239.157 ops/s
Iteration   1: 12450871.658 ops/s
Iteration   2: 12484940.581 ops/s
Iteration   3: 12409727.518 ops/s
Iteration   4: 12484959.966 ops/s
Iteration   5: 12422924.554 ops/s
Iteration   6: 12403674.180 ops/s
Iteration   7: 12444138.846 ops/s
Iteration   8: 12475311.074 ops/s
Iteration   9: 12491296.671 ops/s
Iteration  10: 12426607.785 ops/s
Iteration  11: 12495062.759 ops/s
Iteration  12: 12383570.683 ops/s
Iteration  13: 12429507.117 ops/s
Iteration  14: 12448453.802 ops/s
Iteration  15: 12409068.416 ops/s
Iteration  16: 12385585.431 ops/s
Iteration  17: 12448068.194 ops/s
Iteration  18: 12539878.070 ops/s
Iteration  19: 12468481.928 ops/s
Iteration  20: 12487503.820 ops/s
Iteration  21: 12404936.135 ops/s
Iteration  22: 12465930.804 ops/s
Iteration  23: 12479531.077 ops/s
Iteration  24: 12440963.476 ops/s
Iteration  25: 12422658.934 ops/s
Iteration  26: 12381838.694 ops/s
Iteration  27: 12474264.460 ops/s
Iteration  28: 12439013.130 ops/s
Iteration  29: 12460301.124 ops/s
Iteration  30: 12476522.753 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFilterTest._Benchmark.benchmark_dispose":
  12447853.121 ±(99.9%) 25548.270 ops/s [Average]
  (min, avg, max) = (12381838.694, 12447853.121, 12539878.070), stdev = 38239.450
  CI (99.9%): [12422304.852, 12473401.391] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt         Score       Error  Units
ObservableFilterTest._Benchmark.benchmark_dispose  thrpt   30  12447853.121 ± 25548.270  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapTest._Benchmark.benchmark_badSource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapTest._Benchmark.benchmark_badSource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 180730.531 ops/s
# Warmup Iteration   2: 265497.993 ops/s
# Warmup Iteration   3: 256034.643 ops/s
# Warmup Iteration   4: 288476.346 ops/s
# Warmup Iteration   5: 296555.842 ops/s
# Warmup Iteration   6: 294953.180 ops/s
# Warmup Iteration   7: 295862.143 ops/s
# Warmup Iteration   8: 296154.849 ops/s
# Warmup Iteration   9: 296002.434 ops/s
# Warmup Iteration  10: 296335.335 ops/s
# Warmup Iteration  11: 295241.459 ops/s
# Warmup Iteration  12: 293927.941 ops/s
# Warmup Iteration  13: 294214.529 ops/s
# Warmup Iteration  14: 293550.545 ops/s
# Warmup Iteration  15: 293975.393 ops/s
# Warmup Iteration  16: 294846.798 ops/s
# Warmup Iteration  17: 305212.322 ops/s
# Warmup Iteration  18: 304335.645 ops/s
# Warmup Iteration  19: 304682.772 ops/s
# Warmup Iteration  20: 303623.873 ops/s
# Warmup Iteration  21: 305374.621 ops/s
# Warmup Iteration  22: 304644.268 ops/s
# Warmup Iteration  23: 306619.251 ops/s
# Warmup Iteration  24: 304082.821 ops/s
# Warmup Iteration  25: 305213.097 ops/s
# Warmup Iteration  26: 306303.668 ops/s
# Warmup Iteration  27: 304719.793 ops/s
# Warmup Iteration  28: 305410.690 ops/s
# Warmup Iteration  29: 304942.579 ops/s
# Warmup Iteration  30: 305461.234 ops/s
Iteration   1: 303846.782 ops/s
Iteration   2: 303768.739 ops/s
Iteration   3: 303097.636 ops/s
Iteration   4: 303844.531 ops/s
Iteration   5: 302599.592 ops/s
Iteration   6: 306279.336 ops/s
Iteration   7: 303581.929 ops/s
Iteration   8: 304596.306 ops/s
Iteration   9: 304844.867 ops/s
Iteration  10: 305381.947 ops/s
Iteration  11: 303652.031 ops/s
Iteration  12: 303986.627 ops/s
Iteration  13: 304377.668 ops/s
Iteration  14: 303302.003 ops/s
Iteration  15: 303531.976 ops/s
Iteration  16: 306686.242 ops/s
Iteration  17: 303766.692 ops/s
Iteration  18: 306181.686 ops/s
Iteration  19: 304254.123 ops/s
Iteration  20: 302649.823 ops/s
Iteration  21: 302593.802 ops/s
Iteration  22: 305635.724 ops/s
Iteration  23: 304302.552 ops/s
Iteration  24: 306745.819 ops/s
Iteration  25: 302962.682 ops/s
Iteration  26: 305491.586 ops/s
Iteration  27: 304072.077 ops/s
Iteration  28: 304268.093 ops/s
Iteration  29: 304949.894 ops/s
Iteration  30: 303765.935 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapTest._Benchmark.benchmark_badSource":
  304300.623 ±(99.9%) 784.869 ops/s [Average]
  (min, avg, max) = (302593.802, 304300.623, 306745.819), stdev = 1174.755
  CI (99.9%): [303515.754, 305085.493] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score     Error  Units
ObservableConcatMapTest._Benchmark.benchmark_badSource  thrpt   30  304300.623 ± 784.869  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_reduceFunctionReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_reduceFunctionReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 604473.899 ops/s
# Warmup Iteration   2: 699233.457 ops/s
# Warmup Iteration   3: 656306.900 ops/s
# Warmup Iteration   4: 752763.815 ops/s
# Warmup Iteration   5: 755439.125 ops/s
# Warmup Iteration   6: 752454.693 ops/s
# Warmup Iteration   7: 752371.514 ops/s
# Warmup Iteration   8: 749618.057 ops/s
# Warmup Iteration   9: 752145.286 ops/s
# Warmup Iteration  10: 753611.008 ops/s
# Warmup Iteration  11: 751495.834 ops/s
# Warmup Iteration  12: 752370.910 ops/s
# Warmup Iteration  13: 751577.553 ops/s
# Warmup Iteration  14: 753006.734 ops/s
# Warmup Iteration  15: 749268.375 ops/s
# Warmup Iteration  16: 754058.742 ops/s
# Warmup Iteration  17: 785407.057 ops/s
# Warmup Iteration  18: 784953.128 ops/s
# Warmup Iteration  19: 785362.162 ops/s
# Warmup Iteration  20: 781050.853 ops/s
# Warmup Iteration  21: 784302.333 ops/s
# Warmup Iteration  22: 782227.308 ops/s
# Warmup Iteration  23: 784574.879 ops/s
# Warmup Iteration  24: 783763.728 ops/s
# Warmup Iteration  25: 781401.092 ops/s
# Warmup Iteration  26: 786952.398 ops/s
# Warmup Iteration  27: 784254.450 ops/s
# Warmup Iteration  28: 781207.705 ops/s
# Warmup Iteration  29: 782965.972 ops/s
# Warmup Iteration  30: 781130.418 ops/s
Iteration   1: 764400.583 ops/s
Iteration   2: 785320.117 ops/s
Iteration   3: 782886.181 ops/s
Iteration   4: 780855.587 ops/s
Iteration   5: 786655.651 ops/s
Iteration   6: 784945.045 ops/s
Iteration   7: 780385.153 ops/s
Iteration   8: 787638.286 ops/s
Iteration   9: 779931.055 ops/s
Iteration  10: 781326.793 ops/s
Iteration  11: 779938.546 ops/s
Iteration  12: 781725.069 ops/s
Iteration  13: 782107.134 ops/s
Iteration  14: 782408.912 ops/s
Iteration  15: 785613.390 ops/s
Iteration  16: 784579.683 ops/s
Iteration  17: 787580.564 ops/s
Iteration  18: 783451.182 ops/s
Iteration  19: 785291.304 ops/s
Iteration  20: 783965.830 ops/s
Iteration  21: 788189.263 ops/s
Iteration  22: 782904.156 ops/s
Iteration  23: 784850.319 ops/s
Iteration  24: 785698.604 ops/s
Iteration  25: 782728.463 ops/s
Iteration  26: 781291.056 ops/s
Iteration  27: 783824.226 ops/s
Iteration  28: 781517.274 ops/s
Iteration  29: 780627.645 ops/s
Iteration  30: 784776.885 ops/s


Result "io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_reduceFunctionReturnsNull":
  782913.798 ±(99.9%) 2814.304 ops/s [Average]
  (min, avg, max) = (764400.583, 782913.798, 788189.263), stdev = 4212.317
  CI (99.9%): [780099.495, 785728.102] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score      Error  Units
ObservableNullTests._Benchmark.benchmark_reduceFunctionReturnsNull  thrpt   30  782913.798 ± 2814.304  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorCompleteTest._Benchmark.benchmark_normal$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorCompleteTest._Benchmark.benchmark_normal

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3592809.684 ops/s
# Warmup Iteration   2: 4916279.101 ops/s
# Warmup Iteration   3: 5494503.473 ops/s
# Warmup Iteration   4: 5543884.058 ops/s
# Warmup Iteration   5: 5542351.567 ops/s
# Warmup Iteration   6: 5529666.900 ops/s
# Warmup Iteration   7: 5524329.232 ops/s
# Warmup Iteration   8: 5511368.308 ops/s
# Warmup Iteration   9: 5529220.048 ops/s
# Warmup Iteration  10: 5532666.906 ops/s
# Warmup Iteration  11: 5531559.134 ops/s
# Warmup Iteration  12: 5535352.205 ops/s
# Warmup Iteration  13: 5514438.255 ops/s
# Warmup Iteration  14: 5534632.669 ops/s
# Warmup Iteration  15: 5539732.713 ops/s
# Warmup Iteration  16: 5533370.359 ops/s
# Warmup Iteration  17: 5498511.963 ops/s
# Warmup Iteration  18: 5540121.664 ops/s
# Warmup Iteration  19: 5525407.790 ops/s
# Warmup Iteration  20: 5512738.904 ops/s
# Warmup Iteration  21: 5516095.247 ops/s
# Warmup Iteration  22: 5522648.758 ops/s
# Warmup Iteration  23: 5545913.767 ops/s
# Warmup Iteration  24: 5530723.493 ops/s
# Warmup Iteration  25: 5524139.424 ops/s
# Warmup Iteration  26: 5518455.066 ops/s
# Warmup Iteration  27: 5547849.960 ops/s
# Warmup Iteration  28: 5503859.697 ops/s
# Warmup Iteration  29: 5532848.961 ops/s
# Warmup Iteration  30: 5525283.474 ops/s
Iteration   1: 5526719.990 ops/s
Iteration   2: 5514512.471 ops/s
Iteration   3: 5525249.743 ops/s
Iteration   4: 5530908.074 ops/s
Iteration   5: 5517784.607 ops/s
Iteration   6: 5514139.162 ops/s
Iteration   7: 5507752.944 ops/s
Iteration   8: 5514001.925 ops/s
Iteration   9: 5497006.532 ops/s
Iteration  10: 5525910.914 ops/s
Iteration  11: 5494418.879 ops/s
Iteration  12: 5541009.297 ops/s
Iteration  13: 5523067.799 ops/s
Iteration  14: 5489436.308 ops/s
Iteration  15: 5511345.315 ops/s
Iteration  16: 5537761.438 ops/s
Iteration  17: 5535458.681 ops/s
Iteration  18: 5527488.240 ops/s
Iteration  19: 5514845.638 ops/s
Iteration  20: 5523275.421 ops/s
Iteration  21: 5545704.557 ops/s
Iteration  22: 5513207.811 ops/s
Iteration  23: 5520006.379 ops/s
Iteration  24: 5527443.675 ops/s
Iteration  25: 5525066.636 ops/s
Iteration  26: 5525571.648 ops/s
Iteration  27: 5520053.340 ops/s
Iteration  28: 5516179.250 ops/s
Iteration  29: 5529508.953 ops/s
Iteration  30: 5524993.354 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorCompleteTest._Benchmark.benchmark_normal":
  5520660.966 ±(99.9%) 8513.238 ops/s [Average]
  (min, avg, max) = (5489436.308, 5520660.966, 5545704.557), stdev = 12742.214
  CI (99.9%): [5512147.728, 5529174.204] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
ObservableOnErrorCompleteTest._Benchmark.benchmark_normal  thrpt   30  5520660.966 ± 8513.238  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithMaybeTest._Benchmark.benchmark_normalEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithMaybeTest._Benchmark.benchmark_normalEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3339951.714 ops/s
# Warmup Iteration   2: 4900112.133 ops/s
# Warmup Iteration   3: 5621716.034 ops/s
# Warmup Iteration   4: 5595051.440 ops/s
# Warmup Iteration   5: 5576456.938 ops/s
# Warmup Iteration   6: 5544403.907 ops/s
# Warmup Iteration   7: 5595237.097 ops/s
# Warmup Iteration   8: 5582551.064 ops/s
# Warmup Iteration   9: 5590287.665 ops/s
# Warmup Iteration  10: 5578939.681 ops/s
# Warmup Iteration  11: 5581149.963 ops/s
# Warmup Iteration  12: 5535330.795 ops/s
# Warmup Iteration  13: 5570542.055 ops/s
# Warmup Iteration  14: 5570434.179 ops/s
# Warmup Iteration  15: 5579604.790 ops/s
# Warmup Iteration  16: 5551686.214 ops/s
# Warmup Iteration  17: 5543805.882 ops/s
# Warmup Iteration  18: 5579867.786 ops/s
# Warmup Iteration  19: 5602551.343 ops/s
# Warmup Iteration  20: 5582173.439 ops/s
# Warmup Iteration  21: 5564245.024 ops/s
# Warmup Iteration  22: 5569439.329 ops/s
# Warmup Iteration  23: 5550427.914 ops/s
# Warmup Iteration  24: 5568242.250 ops/s
# Warmup Iteration  25: 5578322.778 ops/s
# Warmup Iteration  26: 5537635.176 ops/s
# Warmup Iteration  27: 5545074.795 ops/s
# Warmup Iteration  28: 5537986.941 ops/s
# Warmup Iteration  29: 5495055.832 ops/s
# Warmup Iteration  30: 5568138.893 ops/s
Iteration   1: 5555635.303 ops/s
Iteration   2: 5598979.031 ops/s
Iteration   3: 5559749.170 ops/s
Iteration   4: 5568284.877 ops/s
Iteration   5: 5585283.155 ops/s
Iteration   6: 5568730.222 ops/s
Iteration   7: 5556452.360 ops/s
Iteration   8: 5554067.085 ops/s
Iteration   9: 5533892.837 ops/s
Iteration  10: 5536236.274 ops/s
Iteration  11: 5572623.912 ops/s
Iteration  12: 5544755.981 ops/s
Iteration  13: 5565023.265 ops/s
Iteration  14: 5580700.062 ops/s
Iteration  15: 5572101.521 ops/s
Iteration  16: 5560698.441 ops/s
Iteration  17: 5603646.118 ops/s
Iteration  18: 5590460.739 ops/s
Iteration  19: 5568050.191 ops/s
Iteration  20: 5589078.858 ops/s
Iteration  21: 5602231.987 ops/s
Iteration  22: 5568444.698 ops/s
Iteration  23: 5569232.194 ops/s
Iteration  24: 5560875.487 ops/s
Iteration  25: 5593459.715 ops/s
Iteration  26: 5598012.951 ops/s
Iteration  27: 5600564.565 ops/s
Iteration  28: 5585847.716 ops/s
Iteration  29: 5528862.579 ops/s
Iteration  30: 5568267.853 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithMaybeTest._Benchmark.benchmark_normalEmpty":
  5571341.638 ±(99.9%) 13787.562 ops/s [Average]
  (min, avg, max) = (5528862.579, 5571341.638, 5603646.118), stdev = 20636.575
  CI (99.9%): [5557554.077, 5585129.200] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
ObservableConcatWithMaybeTest._Benchmark.benchmark_normalEmpty  thrpt   30  5571341.638 ± 13787.562  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableForEachTest._Benchmark.benchmark_forEachWileWithError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableForEachTest._Benchmark.benchmark_forEachWileWithError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 441514.271 ops/s
# Warmup Iteration   2: 657289.651 ops/s
# Warmup Iteration   3: 702522.063 ops/s
# Warmup Iteration   4: 730810.542 ops/s
# Warmup Iteration   5: 729581.851 ops/s
# Warmup Iteration   6: 728981.559 ops/s
# Warmup Iteration   7: 729001.900 ops/s
# Warmup Iteration   8: 725872.099 ops/s
# Warmup Iteration   9: 728891.842 ops/s
# Warmup Iteration  10: 727375.041 ops/s
# Warmup Iteration  11: 724651.015 ops/s
# Warmup Iteration  12: 725272.570 ops/s
# Warmup Iteration  13: 726694.826 ops/s
# Warmup Iteration  14: 726531.908 ops/s
# Warmup Iteration  15: 726368.373 ops/s
# Warmup Iteration  16: 725329.266 ops/s
# Warmup Iteration  17: 757023.094 ops/s
# Warmup Iteration  18: 759351.784 ops/s
# Warmup Iteration  19: 759435.026 ops/s
# Warmup Iteration  20: 756925.246 ops/s
# Warmup Iteration  21: 760853.330 ops/s
# Warmup Iteration  22: 761535.318 ops/s
# Warmup Iteration  23: 757778.401 ops/s
# Warmup Iteration  24: 758556.164 ops/s
# Warmup Iteration  25: 758088.210 ops/s
# Warmup Iteration  26: 758868.783 ops/s
# Warmup Iteration  27: 753922.320 ops/s
# Warmup Iteration  28: 761224.770 ops/s
# Warmup Iteration  29: 758372.114 ops/s
# Warmup Iteration  30: 760186.071 ops/s
Iteration   1: 754379.825 ops/s
Iteration   2: 759365.533 ops/s
Iteration   3: 758469.625 ops/s
Iteration   4: 752204.080 ops/s
Iteration   5: 757246.830 ops/s
Iteration   6: 759485.950 ops/s
Iteration   7: 762836.974 ops/s
Iteration   8: 759343.443 ops/s
Iteration   9: 759161.906 ops/s
Iteration  10: 755634.293 ops/s
Iteration  11: 755881.617 ops/s
Iteration  12: 755125.607 ops/s
Iteration  13: 757960.897 ops/s
Iteration  14: 759914.715 ops/s
Iteration  15: 756674.805 ops/s
Iteration  16: 757308.504 ops/s
Iteration  17: 759982.828 ops/s
Iteration  18: 759855.338 ops/s
Iteration  19: 758014.335 ops/s
Iteration  20: 757566.093 ops/s
Iteration  21: 755958.612 ops/s
Iteration  22: 762907.380 ops/s
Iteration  23: 755748.661 ops/s
Iteration  24: 762045.227 ops/s
Iteration  25: 756605.445 ops/s
Iteration  26: 759647.942 ops/s
Iteration  27: 754853.804 ops/s
Iteration  28: 754580.027 ops/s
Iteration  29: 758007.609 ops/s
Iteration  30: 760898.154 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableForEachTest._Benchmark.benchmark_forEachWileWithError":
  757922.202 ±(99.9%) 1728.369 ops/s [Average]
  (min, avg, max) = (752204.080, 757922.202, 762907.380), stdev = 2586.942
  CI (99.9%): [756193.833, 759650.571] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score      Error  Units
ObservableForEachTest._Benchmark.benchmark_forEachWileWithError  thrpt   30  757922.202 ± 1728.369  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithMaybeTest._Benchmark.benchmark_otherError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithMaybeTest._Benchmark.benchmark_otherError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 617191.703 ops/s
# Warmup Iteration   2: 773512.907 ops/s
# Warmup Iteration   3: 815022.992 ops/s
# Warmup Iteration   4: 838171.006 ops/s
# Warmup Iteration   5: 877675.241 ops/s
# Warmup Iteration   6: 882718.614 ops/s
# Warmup Iteration   7: 878821.669 ops/s
# Warmup Iteration   8: 877290.204 ops/s
# Warmup Iteration   9: 875643.821 ops/s
# Warmup Iteration  10: 876949.505 ops/s
# Warmup Iteration  11: 877889.511 ops/s
# Warmup Iteration  12: 880896.795 ops/s
# Warmup Iteration  13: 876268.573 ops/s
# Warmup Iteration  14: 871089.940 ops/s
# Warmup Iteration  15: 872653.487 ops/s
# Warmup Iteration  16: 867424.965 ops/s
# Warmup Iteration  17: 913727.859 ops/s
# Warmup Iteration  18: 912517.008 ops/s
# Warmup Iteration  19: 918846.841 ops/s
# Warmup Iteration  20: 912900.926 ops/s
# Warmup Iteration  21: 920557.206 ops/s
# Warmup Iteration  22: 913627.440 ops/s
# Warmup Iteration  23: 916727.754 ops/s
# Warmup Iteration  24: 916631.007 ops/s
# Warmup Iteration  25: 916476.359 ops/s
# Warmup Iteration  26: 912145.412 ops/s
# Warmup Iteration  27: 914148.438 ops/s
# Warmup Iteration  28: 913287.570 ops/s
# Warmup Iteration  29: 912995.198 ops/s
# Warmup Iteration  30: 918782.299 ops/s
Iteration   1: 916191.181 ops/s
Iteration   2: 921544.431 ops/s
Iteration   3: 915699.120 ops/s
Iteration   4: 916641.956 ops/s
Iteration   5: 917180.168 ops/s
Iteration   6: 917609.195 ops/s
Iteration   7: 915579.330 ops/s
Iteration   8: 917243.710 ops/s
Iteration   9: 916801.459 ops/s
Iteration  10: 920611.393 ops/s
Iteration  11: 919714.092 ops/s
Iteration  12: 915607.857 ops/s
Iteration  13: 911846.461 ops/s
Iteration  14: 919548.774 ops/s
Iteration  15: 914507.606 ops/s
Iteration  16: 915246.119 ops/s
Iteration  17: 919704.974 ops/s
Iteration  18: 916020.969 ops/s
Iteration  19: 913645.595 ops/s
Iteration  20: 916178.141 ops/s
Iteration  21: 916381.327 ops/s
Iteration  22: 913437.858 ops/s
Iteration  23: 919811.053 ops/s
Iteration  24: 914268.439 ops/s
Iteration  25: 913131.703 ops/s
Iteration  26: 920288.958 ops/s
Iteration  27: 921497.978 ops/s
Iteration  28: 916562.768 ops/s
Iteration  29: 911904.036 ops/s
Iteration  30: 916746.448 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithMaybeTest._Benchmark.benchmark_otherError":
  916705.103 ±(99.9%) 1791.890 ops/s [Average]
  (min, avg, max) = (911846.461, 916705.103, 921544.431), stdev = 2682.017
  CI (99.9%): [914913.214, 918496.993] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
ObservableConcatWithMaybeTest._Benchmark.benchmark_otherError  thrpt   30  916705.103 ± 1791.890  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybeTest._Benchmark.benchmark_emptyOther$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybeTest._Benchmark.benchmark_emptyOther

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2347517.524 ops/s
# Warmup Iteration   2: 3009196.415 ops/s
# Warmup Iteration   3: 3533779.087 ops/s
# Warmup Iteration   4: 3579198.967 ops/s
# Warmup Iteration   5: 3612606.582 ops/s
# Warmup Iteration   6: 3620812.308 ops/s
# Warmup Iteration   7: 3601602.832 ops/s
# Warmup Iteration   8: 3630141.257 ops/s
# Warmup Iteration   9: 3588308.232 ops/s
# Warmup Iteration  10: 3593153.861 ops/s
# Warmup Iteration  11: 3625591.368 ops/s
# Warmup Iteration  12: 3539280.330 ops/s
# Warmup Iteration  13: 3597758.128 ops/s
# Warmup Iteration  14: 3546964.205 ops/s
# Warmup Iteration  15: 3618302.155 ops/s
# Warmup Iteration  16: 3679522.995 ops/s
# Warmup Iteration  17: 3562145.624 ops/s
# Warmup Iteration  18: 3609681.981 ops/s
# Warmup Iteration  19: 3588314.536 ops/s
# Warmup Iteration  20: 3510102.371 ops/s
# Warmup Iteration  21: 3623607.403 ops/s
# Warmup Iteration  22: 3615504.198 ops/s
# Warmup Iteration  23: 3644436.650 ops/s
# Warmup Iteration  24: 3546919.646 ops/s
# Warmup Iteration  25: 3583108.659 ops/s
# Warmup Iteration  26: 3617375.555 ops/s
# Warmup Iteration  27: 3561952.142 ops/s
# Warmup Iteration  28: 3629579.183 ops/s
# Warmup Iteration  29: 3523024.554 ops/s
# Warmup Iteration  30: 3549643.889 ops/s
Iteration   1: 3585260.689 ops/s
Iteration   2: 3537498.838 ops/s
Iteration   3: 3625909.399 ops/s
Iteration   4: 3556692.216 ops/s
Iteration   5: 3591024.672 ops/s
Iteration   6: 3664215.789 ops/s
Iteration   7: 3611470.534 ops/s
Iteration   8: 3571142.925 ops/s
Iteration   9: 3581639.502 ops/s
Iteration  10: 3549265.242 ops/s
Iteration  11: 3594711.525 ops/s
Iteration  12: 3588711.244 ops/s
Iteration  13: 3572510.860 ops/s
Iteration  14: 3575744.785 ops/s
Iteration  15: 3592584.251 ops/s
Iteration  16: 3564443.496 ops/s
Iteration  17: 3532547.622 ops/s
Iteration  18: 3582117.496 ops/s
Iteration  19: 3583380.867 ops/s
Iteration  20: 3579550.519 ops/s
Iteration  21: 3567680.816 ops/s
Iteration  22: 3585106.405 ops/s
Iteration  23: 3647553.711 ops/s
Iteration  24: 3662763.279 ops/s
Iteration  25: 3577871.539 ops/s
Iteration  26: 3545703.551 ops/s
Iteration  27: 3522654.299 ops/s
Iteration  28: 3535637.966 ops/s
Iteration  29: 3586984.749 ops/s
Iteration  30: 3565162.419 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybeTest._Benchmark.benchmark_emptyOther":
  3581251.373 ±(99.9%) 23210.530 ops/s [Average]
  (min, avg, max) = (3522654.299, 3581251.373, 3664215.789), stdev = 34740.431
  CI (99.9%): [3558040.843, 3604461.903] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
ObservableMergeWithMaybeTest._Benchmark.benchmark_emptyOther  thrpt   30  3581251.373 ± 23210.530  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybeTest._Benchmark.benchmark_normal$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybeTest._Benchmark.benchmark_normal

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2189910.116 ops/s
# Warmup Iteration   2: 2870323.139 ops/s
# Warmup Iteration   3: 3498007.325 ops/s
# Warmup Iteration   4: 3494810.934 ops/s
# Warmup Iteration   5: 3566356.774 ops/s
# Warmup Iteration   6: 3489239.009 ops/s
# Warmup Iteration   7: 3528403.407 ops/s
# Warmup Iteration   8: 3535259.985 ops/s
# Warmup Iteration   9: 3539759.225 ops/s
# Warmup Iteration  10: 3493402.162 ops/s
# Warmup Iteration  11: 3498508.164 ops/s
# Warmup Iteration  12: 3480772.667 ops/s
# Warmup Iteration  13: 3617841.102 ops/s
# Warmup Iteration  14: 3493838.761 ops/s
# Warmup Iteration  15: 3457685.687 ops/s
# Warmup Iteration  16: 3555122.156 ops/s
# Warmup Iteration  17: 3507169.729 ops/s
# Warmup Iteration  18: 3570472.340 ops/s
# Warmup Iteration  19: 3534459.405 ops/s
# Warmup Iteration  20: 3508597.709 ops/s
# Warmup Iteration  21: 3601184.792 ops/s
# Warmup Iteration  22: 3464537.821 ops/s
# Warmup Iteration  23: 3433761.895 ops/s
# Warmup Iteration  24: 3562227.881 ops/s
# Warmup Iteration  25: 3466924.248 ops/s
# Warmup Iteration  26: 3583611.259 ops/s
# Warmup Iteration  27: 3537105.258 ops/s
# Warmup Iteration  28: 3565956.882 ops/s
# Warmup Iteration  29: 3482990.639 ops/s
# Warmup Iteration  30: 3446835.135 ops/s
Iteration   1: 3523764.378 ops/s
Iteration   2: 3556508.827 ops/s
Iteration   3: 3521808.011 ops/s
Iteration   4: 3493497.296 ops/s
Iteration   5: 3507354.345 ops/s
Iteration   6: 3471699.715 ops/s
Iteration   7: 3528988.260 ops/s
Iteration   8: 3559526.864 ops/s
Iteration   9: 3506820.584 ops/s
Iteration  10: 3440438.222 ops/s
Iteration  11: 3440956.911 ops/s
Iteration  12: 3549492.976 ops/s
Iteration  13: 3558374.265 ops/s
Iteration  14: 3524789.283 ops/s
Iteration  15: 3468407.658 ops/s
Iteration  16: 3500540.549 ops/s
Iteration  17: 3426831.401 ops/s
Iteration  18: 3515515.131 ops/s
Iteration  19: 3460350.316 ops/s
Iteration  20: 3522481.986 ops/s
Iteration  21: 3509512.695 ops/s
Iteration  22: 3421044.546 ops/s
Iteration  23: 3555276.334 ops/s
Iteration  24: 3463819.713 ops/s
Iteration  25: 3426305.359 ops/s
Iteration  26: 3470429.082 ops/s
Iteration  27: 3522815.304 ops/s
Iteration  28: 3500161.170 ops/s
Iteration  29: 3477031.305 ops/s
Iteration  30: 3567669.063 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybeTest._Benchmark.benchmark_normal":
  3499740.385 ±(99.9%) 28925.138 ops/s [Average]
  (min, avg, max) = (3421044.546, 3499740.385, 3567669.063), stdev = 43293.788
  CI (99.9%): [3470815.247, 3528665.523] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
ObservableMergeWithMaybeTest._Benchmark.benchmark_normal  thrpt   30  3499740.385 ± 28925.138  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorTest._Benchmark.benchmark_toObservableTake$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorTest._Benchmark.benchmark_toObservableTake

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2432729.823 ops/s
# Warmup Iteration   2: 4449275.711 ops/s
# Warmup Iteration   3: 4838210.434 ops/s
# Warmup Iteration   4: 4843147.518 ops/s
# Warmup Iteration   5: 4829867.829 ops/s
# Warmup Iteration   6: 4831718.479 ops/s
# Warmup Iteration   7: 4832929.450 ops/s
# Warmup Iteration   8: 4829286.306 ops/s
# Warmup Iteration   9: 4840483.020 ops/s
# Warmup Iteration  10: 4830465.725 ops/s
# Warmup Iteration  11: 4829391.181 ops/s
# Warmup Iteration  12: 4838726.051 ops/s
# Warmup Iteration  13: 4837816.239 ops/s
# Warmup Iteration  14: 4843650.165 ops/s
# Warmup Iteration  15: 4839983.163 ops/s
# Warmup Iteration  16: 4824629.944 ops/s
# Warmup Iteration  17: 4829612.494 ops/s
# Warmup Iteration  18: 4840299.581 ops/s
# Warmup Iteration  19: 4824384.016 ops/s
# Warmup Iteration  20: 4846703.330 ops/s
# Warmup Iteration  21: 4845212.220 ops/s
# Warmup Iteration  22: 4819010.640 ops/s
# Warmup Iteration  23: 4835189.589 ops/s
# Warmup Iteration  24: 4837361.967 ops/s
# Warmup Iteration  25: 4833539.508 ops/s
# Warmup Iteration  26: 4834017.832 ops/s
# Warmup Iteration  27: 4820280.294 ops/s
# Warmup Iteration  28: 4824318.798 ops/s
# Warmup Iteration  29: 4835319.487 ops/s
# Warmup Iteration  30: 4822494.017 ops/s
Iteration   1: 4820169.376 ops/s
Iteration   2: 4831026.887 ops/s
Iteration   3: 4837201.823 ops/s
Iteration   4: 4807840.452 ops/s
Iteration   5: 4838109.105 ops/s
Iteration   6: 4840204.124 ops/s
Iteration   7: 4817670.367 ops/s
Iteration   8: 4858552.496 ops/s
Iteration   9: 4846738.880 ops/s
Iteration  10: 4815923.849 ops/s
Iteration  11: 4852970.485 ops/s
Iteration  12: 4842227.973 ops/s
Iteration  13: 4812725.870 ops/s
Iteration  14: 4845008.246 ops/s
Iteration  15: 4816515.171 ops/s
Iteration  16: 4838151.528 ops/s
Iteration  17: 4797155.968 ops/s
Iteration  18: 4820622.084 ops/s
Iteration  19: 4826467.500 ops/s
Iteration  20: 4814440.151 ops/s
Iteration  21: 4828049.286 ops/s
Iteration  22: 4814338.927 ops/s
Iteration  23: 4816383.881 ops/s
Iteration  24: 4837433.158 ops/s
Iteration  25: 4835608.408 ops/s
Iteration  26: 4838310.070 ops/s
Iteration  27: 4842687.501 ops/s
Iteration  28: 4833865.418 ops/s
Iteration  29: 4839074.146 ops/s
Iteration  30: 4811466.907 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorTest._Benchmark.benchmark_toObservableTake":
  4829231.335 ±(99.9%) 9847.924 ops/s [Average]
  (min, avg, max) = (4797155.968, 4829231.335, 4858552.496), stdev = 14739.911
  CI (99.9%): [4819383.410, 4839079.259] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score      Error  Units
ObservableCollectWithCollectorTest._Benchmark.benchmark_toObservableTake  thrpt   30  4829231.335 ± 9847.924  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDebounceTest._Benchmark.benchmark_emitLate$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDebounceTest._Benchmark.benchmark_emitLate

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 75906.013 ops/s
# Warmup Iteration   2: 657194.790 ops/s
# Warmup Iteration   3: 910103.471 ops/s
# Warmup Iteration   4: 992548.702 ops/s
# Warmup Iteration   5: 1020509.633 ops/s
# Warmup Iteration   6: 1012706.072 ops/s
# Warmup Iteration   7: 1012644.425 ops/s
# Warmup Iteration   8: 1017445.837 ops/s
# Warmup Iteration   9: 1017757.409 ops/s
# Warmup Iteration  10: 1017949.671 ops/s
# Warmup Iteration  11: 1012933.813 ops/s
# Warmup Iteration  12: 1017285.167 ops/s
# Warmup Iteration  13: 1015528.196 ops/s
# Warmup Iteration  14: 1012734.601 ops/s
# Warmup Iteration  15: 1019266.326 ops/s
# Warmup Iteration  16: 1021461.066 ops/s
# Warmup Iteration  17: 1013220.272 ops/s
# Warmup Iteration  18: 1015951.386 ops/s
# Warmup Iteration  19: 1012850.737 ops/s
# Warmup Iteration  20: 1011885.503 ops/s
# Warmup Iteration  21: 1010491.949 ops/s
# Warmup Iteration  22: 1006994.063 ops/s
# Warmup Iteration  23: 1011942.011 ops/s
# Warmup Iteration  24: 1015767.738 ops/s
# Warmup Iteration  25: 1012735.157 ops/s
# Warmup Iteration  26: 1016933.166 ops/s
# Warmup Iteration  27: 1014776.523 ops/s
# Warmup Iteration  28: 1015796.431 ops/s
# Warmup Iteration  29: 1008791.615 ops/s
# Warmup Iteration  30: 1015777.838 ops/s
Iteration   1: 1009118.381 ops/s
Iteration   2: 1010804.626 ops/s
Iteration   3: 1015975.321 ops/s
Iteration   4: 1018707.333 ops/s
Iteration   5: 1017228.729 ops/s
Iteration   6: 1013236.048 ops/s
Iteration   7: 1013573.904 ops/s
Iteration   8: 1010601.304 ops/s
Iteration   9: 1017553.280 ops/s
Iteration  10: 1020855.720 ops/s
Iteration  11: 1021403.799 ops/s
Iteration  12: 1011163.872 ops/s
Iteration  13: 1012285.896 ops/s
Iteration  14: 1011444.957 ops/s
Iteration  15: 1016130.021 ops/s
Iteration  16: 1014694.039 ops/s
Iteration  17: 1011928.150 ops/s
Iteration  18: 1013615.084 ops/s
Iteration  19: 1007467.028 ops/s
Iteration  20: 1013687.321 ops/s
Iteration  21: 1008899.830 ops/s
Iteration  22: 1016133.179 ops/s
Iteration  23: 1012851.867 ops/s
Iteration  24: 1011443.826 ops/s
Iteration  25: 1008190.211 ops/s
Iteration  26: 1017465.786 ops/s
Iteration  27: 1012241.397 ops/s
Iteration  28: 1014630.217 ops/s
Iteration  29: 1021789.291 ops/s
Iteration  30: 1015370.733 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableDebounceTest._Benchmark.benchmark_emitLate":
  1014016.372 ±(99.9%) 2534.235 ops/s [Average]
  (min, avg, max) = (1007467.028, 1014016.372, 1021789.291), stdev = 3793.124
  CI (99.9%): [1011482.137, 1016550.607] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
ObservableDebounceTest._Benchmark.benchmark_emitLate  thrpt   30  1014016.372 ± 2534.235  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableCacheTest._Benchmark.benchmark_observers$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableCacheTest._Benchmark.benchmark_observers

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 881411.878 ops/s
# Warmup Iteration   2: 1439166.560 ops/s
# Warmup Iteration   3: 1455310.682 ops/s
# Warmup Iteration   4: 1593325.320 ops/s
# Warmup Iteration   5: 1579726.619 ops/s
# Warmup Iteration   6: 1586738.407 ops/s
# Warmup Iteration   7: 1593202.787 ops/s
# Warmup Iteration   8: 1590998.344 ops/s
# Warmup Iteration   9: 1578047.692 ops/s
# Warmup Iteration  10: 1580801.357 ops/s
# Warmup Iteration  11: 1596887.646 ops/s
# Warmup Iteration  12: 1583004.292 ops/s
# Warmup Iteration  13: 1570442.832 ops/s
# Warmup Iteration  14: 1578265.130 ops/s
# Warmup Iteration  15: 1585950.866 ops/s
# Warmup Iteration  16: 1576955.479 ops/s
# Warmup Iteration  17: 1617981.161 ops/s
# Warmup Iteration  18: 1594090.124 ops/s
# Warmup Iteration  19: 1610051.123 ops/s
# Warmup Iteration  20: 1587468.835 ops/s
# Warmup Iteration  21: 1587690.756 ops/s
# Warmup Iteration  22: 1581276.477 ops/s
# Warmup Iteration  23: 1590158.159 ops/s
# Warmup Iteration  24: 1585540.715 ops/s
# Warmup Iteration  25: 1594085.171 ops/s
# Warmup Iteration  26: 1604360.652 ops/s
# Warmup Iteration  27: 1583308.257 ops/s
# Warmup Iteration  28: 1586690.138 ops/s
# Warmup Iteration  29: 1604352.622 ops/s
# Warmup Iteration  30: 1586594.015 ops/s
Iteration   1: 1594583.491 ops/s
Iteration   2: 1589108.566 ops/s
Iteration   3: 1590662.701 ops/s
Iteration   4: 1595973.816 ops/s
Iteration   5: 1590974.394 ops/s
Iteration   6: 1602963.846 ops/s
Iteration   7: 1597845.449 ops/s
Iteration   8: 1584390.226 ops/s
Iteration   9: 1588521.606 ops/s
Iteration  10: 1580349.123 ops/s
Iteration  11: 1573436.808 ops/s
Iteration  12: 1581833.368 ops/s
Iteration  13: 1582878.499 ops/s
Iteration  14: 1592663.413 ops/s
Iteration  15: 1577640.132 ops/s
Iteration  16: 1594709.317 ops/s
Iteration  17: 1607216.397 ops/s
Iteration  18: 1591260.110 ops/s
Iteration  19: 1575263.665 ops/s
Iteration  20: 1591197.328 ops/s
Iteration  21: 1588733.061 ops/s
Iteration  22: 1591726.779 ops/s
Iteration  23: 1582121.936 ops/s
Iteration  24: 1593302.269 ops/s
Iteration  25: 1590877.387 ops/s
Iteration  26: 1601368.385 ops/s
Iteration  27: 1602980.422 ops/s
Iteration  28: 1590986.199 ops/s
Iteration  29: 1595113.868 ops/s
Iteration  30: 1569963.893 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableCacheTest._Benchmark.benchmark_observers":
  1589688.215 ±(99.9%) 5959.493 ops/s [Average]
  (min, avg, max) = (1569963.893, 1589688.215, 1607216.397), stdev = 8919.889
  CI (99.9%): [1583728.723, 1595647.708] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score      Error  Units
ObservableCacheTest._Benchmark.benchmark_observers  thrpt   30  1589688.215 ± 5959.493  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservablePublishTest._Benchmark.benchmark_selectorLatecommer$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservablePublishTest._Benchmark.benchmark_selectorLatecommer

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1256763.937 ops/s
# Warmup Iteration   2: 1747797.882 ops/s
# Warmup Iteration   3: 2038899.253 ops/s
# Warmup Iteration   4: 2089063.998 ops/s
# Warmup Iteration   5: 2098663.042 ops/s
# Warmup Iteration   6: 2085679.839 ops/s
# Warmup Iteration   7: 2098702.735 ops/s
# Warmup Iteration   8: 2090140.342 ops/s
# Warmup Iteration   9: 2080442.064 ops/s
# Warmup Iteration  10: 2079596.257 ops/s
# Warmup Iteration  11: 2077204.360 ops/s
# Warmup Iteration  12: 2089614.466 ops/s
# Warmup Iteration  13: 2074866.327 ops/s
# Warmup Iteration  14: 2087290.928 ops/s
# Warmup Iteration  15: 2079319.737 ops/s
# Warmup Iteration  16: 2091646.035 ops/s
# Warmup Iteration  17: 2094567.273 ops/s
# Warmup Iteration  18: 2091323.909 ops/s
# Warmup Iteration  19: 2094652.169 ops/s
# Warmup Iteration  20: 2083099.548 ops/s
# Warmup Iteration  21: 2076425.279 ops/s
# Warmup Iteration  22: 2093080.832 ops/s
# Warmup Iteration  23: 2095212.434 ops/s
# Warmup Iteration  24: 2093905.122 ops/s
# Warmup Iteration  25: 2092865.254 ops/s
# Warmup Iteration  26: 2090276.429 ops/s
# Warmup Iteration  27: 2091003.490 ops/s
# Warmup Iteration  28: 2085190.640 ops/s
# Warmup Iteration  29: 2099436.949 ops/s
# Warmup Iteration  30: 2081691.070 ops/s
Iteration   1: 2078388.347 ops/s
Iteration   2: 2099148.994 ops/s
Iteration   3: 2090301.569 ops/s
Iteration   4: 2097711.019 ops/s
Iteration   5: 2082450.462 ops/s
Iteration   6: 2079070.827 ops/s
Iteration   7: 2074804.085 ops/s
Iteration   8: 2071111.036 ops/s
Iteration   9: 2095963.579 ops/s
Iteration  10: 2068682.478 ops/s
Iteration  11: 2076068.233 ops/s
Iteration  12: 2072281.693 ops/s
Iteration  13: 2086270.589 ops/s
Iteration  14: 2078836.376 ops/s
Iteration  15: 2091363.625 ops/s
Iteration  16: 2082954.482 ops/s
Iteration  17: 2093346.684 ops/s
Iteration  18: 2072549.282 ops/s
Iteration  19: 2097188.593 ops/s
Iteration  20: 2099822.346 ops/s
Iteration  21: 2099215.544 ops/s
Iteration  22: 2088095.467 ops/s
Iteration  23: 2091129.123 ops/s
Iteration  24: 2069477.866 ops/s
Iteration  25: 2077399.759 ops/s
Iteration  26: 2099093.788 ops/s
Iteration  27: 2094187.463 ops/s
Iteration  28: 2088817.326 ops/s
Iteration  29: 2081965.714 ops/s
Iteration  30: 2097570.880 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservablePublishTest._Benchmark.benchmark_selectorLatecommer":
  2085842.241 ±(99.9%) 6872.854 ops/s [Average]
  (min, avg, max) = (2068682.478, 2085842.241, 2099822.346), stdev = 10286.966
  CI (99.9%): [2078969.387, 2092715.095] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
ObservablePublishTest._Benchmark.benchmark_selectorLatecommer  thrpt   30  2085842.241 ± 6872.854  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDelayTest._Benchmark.benchmark_delayEmitsEverything$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDelayTest._Benchmark.benchmark_delayEmitsEverything

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 43619.290 ops/s
# Warmup Iteration   2: 272588.515 ops/s
# Warmup Iteration   3: 387375.534 ops/s
# Warmup Iteration   4: 450146.049 ops/s
# Warmup Iteration   5: 483671.060 ops/s
# Warmup Iteration   6: 483692.104 ops/s
# Warmup Iteration   7: 483405.906 ops/s
# Warmup Iteration   8: 481745.754 ops/s
# Warmup Iteration   9: 485393.600 ops/s
# Warmup Iteration  10: 483703.509 ops/s
# Warmup Iteration  11: 483541.518 ops/s
# Warmup Iteration  12: 482724.606 ops/s
# Warmup Iteration  13: 481151.734 ops/s
# Warmup Iteration  14: 481264.657 ops/s
# Warmup Iteration  15: 484236.301 ops/s
# Warmup Iteration  16: 483352.100 ops/s
# Warmup Iteration  17: 481641.588 ops/s
# Warmup Iteration  18: 481013.649 ops/s
# Warmup Iteration  19: 480213.268 ops/s
# Warmup Iteration  20: 485933.871 ops/s
# Warmup Iteration  21: 483519.662 ops/s
# Warmup Iteration  22: 482743.071 ops/s
# Warmup Iteration  23: 483160.928 ops/s
# Warmup Iteration  24: 484454.401 ops/s
# Warmup Iteration  25: 484754.749 ops/s
# Warmup Iteration  26: 483105.240 ops/s
# Warmup Iteration  27: 483405.685 ops/s
# Warmup Iteration  28: 483643.345 ops/s
# Warmup Iteration  29: 483368.719 ops/s
# Warmup Iteration  30: 482959.617 ops/s
Iteration   1: 482260.361 ops/s
Iteration   2: 485532.261 ops/s
Iteration   3: 482080.149 ops/s
Iteration   4: 482096.290 ops/s
Iteration   5: 485759.664 ops/s
Iteration   6: 483665.557 ops/s
Iteration   7: 482391.861 ops/s
Iteration   8: 483808.424 ops/s
Iteration   9: 485388.786 ops/s
Iteration  10: 482386.182 ops/s
Iteration  11: 484014.124 ops/s
Iteration  12: 482972.415 ops/s
Iteration  13: 485003.448 ops/s
Iteration  14: 484499.955 ops/s
Iteration  15: 481733.539 ops/s
Iteration  16: 484027.492 ops/s
Iteration  17: 484849.054 ops/s
Iteration  18: 482528.908 ops/s
Iteration  19: 484222.903 ops/s
Iteration  20: 479255.411 ops/s
Iteration  21: 483949.433 ops/s
Iteration  22: 483856.500 ops/s
Iteration  23: 482904.067 ops/s
Iteration  24: 485645.425 ops/s
Iteration  25: 487463.543 ops/s
Iteration  26: 482616.111 ops/s
Iteration  27: 484731.927 ops/s
Iteration  28: 483081.719 ops/s
Iteration  29: 483250.310 ops/s
Iteration  30: 483510.212 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableDelayTest._Benchmark.benchmark_delayEmitsEverything":
  483649.534 ±(99.9%) 1054.803 ops/s [Average]
  (min, avg, max) = (479255.411, 483649.534, 487463.543), stdev = 1578.779
  CI (99.9%): [482594.732, 484704.337] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
ObservableDelayTest._Benchmark.benchmark_delayEmitsEverything  thrpt   30  483649.534 ± 1054.803  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_singleInnerErrors$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_singleInnerErrors

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 386466.421 ops/s
# Warmup Iteration   2: 566695.367 ops/s
# Warmup Iteration   3: 653024.803 ops/s
# Warmup Iteration   4: 655590.765 ops/s
# Warmup Iteration   5: 655355.507 ops/s
# Warmup Iteration   6: 652905.471 ops/s
# Warmup Iteration   7: 654078.171 ops/s
# Warmup Iteration   8: 651888.552 ops/s
# Warmup Iteration   9: 651441.964 ops/s
# Warmup Iteration  10: 653004.648 ops/s
# Warmup Iteration  11: 654112.335 ops/s
# Warmup Iteration  12: 657889.607 ops/s
# Warmup Iteration  13: 650909.271 ops/s
# Warmup Iteration  14: 652992.790 ops/s
# Warmup Iteration  15: 651604.098 ops/s
# Warmup Iteration  16: 655372.215 ops/s
# Warmup Iteration  17: 681240.178 ops/s
# Warmup Iteration  18: 669860.256 ops/s
# Warmup Iteration  19: 680757.202 ops/s
# Warmup Iteration  20: 678703.116 ops/s
# Warmup Iteration  21: 682132.639 ops/s
# Warmup Iteration  22: 682240.673 ops/s
# Warmup Iteration  23: 681872.063 ops/s
# Warmup Iteration  24: 678042.287 ops/s
# Warmup Iteration  25: 682107.383 ops/s
# Warmup Iteration  26: 679921.309 ops/s
# Warmup Iteration  27: 674470.052 ops/s
# Warmup Iteration  28: 677624.972 ops/s
# Warmup Iteration  29: 677683.181 ops/s
# Warmup Iteration  30: 677901.888 ops/s
Iteration   1: 677223.196 ops/s
Iteration   2: 678790.405 ops/s
Iteration   3: 677388.525 ops/s
Iteration   4: 681398.865 ops/s
Iteration   5: 678986.954 ops/s
Iteration   6: 679066.921 ops/s
Iteration   7: 682145.244 ops/s
Iteration   8: 677125.198 ops/s
Iteration   9: 678331.589 ops/s
Iteration  10: 678120.644 ops/s
Iteration  11: 678510.377 ops/s
Iteration  12: 679125.778 ops/s
Iteration  13: 674355.527 ops/s
Iteration  14: 678141.230 ops/s
Iteration  15: 677601.474 ops/s
Iteration  16: 677748.346 ops/s
Iteration  17: 678905.897 ops/s
Iteration  18: 679433.067 ops/s
Iteration  19: 677189.724 ops/s
Iteration  20: 675789.068 ops/s
Iteration  21: 682016.157 ops/s
Iteration  22: 679799.673 ops/s
Iteration  23: 676601.421 ops/s
Iteration  24: 682617.666 ops/s
Iteration  25: 678651.794 ops/s
Iteration  26: 683137.500 ops/s
Iteration  27: 678106.659 ops/s
Iteration  28: 681480.713 ops/s
Iteration  29: 678661.875 ops/s
Iteration  30: 680378.850 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_singleInnerErrors":
  678894.345 ±(99.9%) 1361.925 ops/s [Average]
  (min, avg, max) = (674355.527, 678894.345, 683137.500), stdev = 2038.466
  CI (99.9%): [677532.419, 680256.270] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score      Error  Units
ObservableConcatMapSchedulerTest._Benchmark.benchmark_singleInnerErrors  thrpt   30  678894.345 ± 1361.925  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_mapperThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_mapperThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 579110.954 ops/s
# Warmup Iteration   2: 691895.447 ops/s
# Warmup Iteration   3: 710655.463 ops/s
# Warmup Iteration   4: 769218.541 ops/s
# Warmup Iteration   5: 773178.755 ops/s
# Warmup Iteration   6: 772800.021 ops/s
# Warmup Iteration   7: 774351.453 ops/s
# Warmup Iteration   8: 775783.343 ops/s
# Warmup Iteration   9: 772149.380 ops/s
# Warmup Iteration  10: 777087.093 ops/s
# Warmup Iteration  11: 772145.978 ops/s
# Warmup Iteration  12: 772419.624 ops/s
# Warmup Iteration  13: 768639.213 ops/s
# Warmup Iteration  14: 769688.158 ops/s
# Warmup Iteration  15: 770009.305 ops/s
# Warmup Iteration  16: 769749.925 ops/s
# Warmup Iteration  17: 801465.562 ops/s
# Warmup Iteration  18: 803730.587 ops/s
# Warmup Iteration  19: 804843.657 ops/s
# Warmup Iteration  20: 803282.305 ops/s
# Warmup Iteration  21: 802158.969 ops/s
# Warmup Iteration  22: 801557.840 ops/s
# Warmup Iteration  23: 805067.460 ops/s
# Warmup Iteration  24: 803011.860 ops/s
# Warmup Iteration  25: 802819.888 ops/s
# Warmup Iteration  26: 799237.460 ops/s
# Warmup Iteration  27: 802919.413 ops/s
# Warmup Iteration  28: 800216.008 ops/s
# Warmup Iteration  29: 801876.657 ops/s
# Warmup Iteration  30: 800855.433 ops/s
Iteration   1: 801084.505 ops/s
Iteration   2: 799289.691 ops/s
Iteration   3: 804179.667 ops/s
Iteration   4: 802346.836 ops/s
Iteration   5: 807289.635 ops/s
Iteration   6: 805169.897 ops/s
Iteration   7: 799378.863 ops/s
Iteration   8: 803261.654 ops/s
Iteration   9: 805126.744 ops/s
Iteration  10: 804990.048 ops/s
Iteration  11: 806165.910 ops/s
Iteration  12: 802840.574 ops/s
Iteration  13: 802989.699 ops/s
Iteration  14: 802966.705 ops/s
Iteration  15: 801790.605 ops/s
Iteration  16: 806416.271 ops/s
Iteration  17: 803937.171 ops/s
Iteration  18: 803088.595 ops/s
Iteration  19: 801790.259 ops/s
Iteration  20: 803663.513 ops/s
Iteration  21: 806991.634 ops/s
Iteration  22: 802527.758 ops/s
Iteration  23: 800192.180 ops/s
Iteration  24: 802379.581 ops/s
Iteration  25: 805327.659 ops/s
Iteration  26: 803378.042 ops/s
Iteration  27: 802390.935 ops/s
Iteration  28: 803281.585 ops/s
Iteration  29: 802120.343 ops/s
Iteration  30: 805748.474 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_mapperThrows":
  803403.501 ±(99.9%) 1380.867 ops/s [Average]
  (min, avg, max) = (799289.691, 803403.501, 807289.635), stdev = 2066.817
  CI (99.9%): [802022.634, 804784.368] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score      Error  Units
ObservableConcatMapSchedulerTest._Benchmark.benchmark_mapperThrows  thrpt   30  803403.501 ± 1380.867  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReplayTest._Benchmark.benchmark_valuesAndThenError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReplayTest._Benchmark.benchmark_valuesAndThenError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 262093.991 ops/s
# Warmup Iteration   2: 403431.570 ops/s
# Warmup Iteration   3: 433179.043 ops/s
# Warmup Iteration   4: 413305.745 ops/s
# Warmup Iteration   5: 455321.411 ops/s
# Warmup Iteration   6: 454654.503 ops/s
# Warmup Iteration   7: 454638.858 ops/s
# Warmup Iteration   8: 454454.944 ops/s
# Warmup Iteration   9: 454149.500 ops/s
# Warmup Iteration  10: 449871.032 ops/s
# Warmup Iteration  11: 452078.276 ops/s
# Warmup Iteration  12: 454166.581 ops/s
# Warmup Iteration  13: 451059.178 ops/s
# Warmup Iteration  14: 452039.342 ops/s
# Warmup Iteration  15: 450000.418 ops/s
# Warmup Iteration  16: 452533.175 ops/s
# Warmup Iteration  17: 460166.846 ops/s
# Warmup Iteration  18: 460728.556 ops/s
# Warmup Iteration  19: 462814.334 ops/s
# Warmup Iteration  20: 463007.592 ops/s
# Warmup Iteration  21: 466545.120 ops/s
# Warmup Iteration  22: 463023.897 ops/s
# Warmup Iteration  23: 460362.668 ops/s
# Warmup Iteration  24: 463465.146 ops/s
# Warmup Iteration  25: 463970.463 ops/s
# Warmup Iteration  26: 460930.131 ops/s
# Warmup Iteration  27: 462055.750 ops/s
# Warmup Iteration  28: 459848.970 ops/s
# Warmup Iteration  29: 458251.215 ops/s
# Warmup Iteration  30: 464806.658 ops/s
Iteration   1: 460181.455 ops/s
Iteration   2: 463353.372 ops/s
Iteration   3: 458887.538 ops/s
Iteration   4: 459437.554 ops/s
Iteration   5: 464011.211 ops/s
Iteration   6: 462661.960 ops/s
Iteration   7: 462020.349 ops/s
Iteration   8: 463153.140 ops/s
Iteration   9: 461985.791 ops/s
Iteration  10: 463070.098 ops/s
Iteration  11: 459392.313 ops/s
Iteration  12: 459603.687 ops/s
Iteration  13: 462534.325 ops/s
Iteration  14: 460165.086 ops/s
Iteration  15: 462719.421 ops/s
Iteration  16: 460098.077 ops/s
Iteration  17: 461345.835 ops/s
Iteration  18: 460908.407 ops/s
Iteration  19: 463539.433 ops/s
Iteration  20: 459640.717 ops/s
Iteration  21: 463053.548 ops/s
Iteration  22: 461122.564 ops/s
Iteration  23: 462426.680 ops/s
Iteration  24: 456153.284 ops/s
Iteration  25: 460178.324 ops/s
Iteration  26: 461744.964 ops/s
Iteration  27: 460392.550 ops/s
Iteration  28: 458331.264 ops/s
Iteration  29: 462781.740 ops/s
Iteration  30: 461929.626 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableReplayTest._Benchmark.benchmark_valuesAndThenError":
  461227.477 ±(99.9%) 1219.517 ops/s [Average]
  (min, avg, max) = (456153.284, 461227.477, 464011.211), stdev = 1825.315
  CI (99.9%): [460007.960, 462446.994] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
ObservableReplayTest._Benchmark.benchmark_valuesAndThenError  thrpt   30  461227.477 ± 1219.517  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReplayEagerTruncateTest._Benchmark.benchmark_valuesAndThenError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReplayEagerTruncateTest._Benchmark.benchmark_valuesAndThenError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 259748.083 ops/s
# Warmup Iteration   2: 392207.601 ops/s
# Warmup Iteration   3: 423858.116 ops/s
# Warmup Iteration   4: 415399.802 ops/s
# Warmup Iteration   5: 450234.502 ops/s
# Warmup Iteration   6: 448108.474 ops/s
# Warmup Iteration   7: 447782.584 ops/s
# Warmup Iteration   8: 446720.118 ops/s
# Warmup Iteration   9: 450076.575 ops/s
# Warmup Iteration  10: 445567.171 ops/s
# Warmup Iteration  11: 448331.516 ops/s
# Warmup Iteration  12: 447847.034 ops/s
# Warmup Iteration  13: 447617.415 ops/s
# Warmup Iteration  14: 445100.363 ops/s
# Warmup Iteration  15: 445401.973 ops/s
# Warmup Iteration  16: 444791.355 ops/s
# Warmup Iteration  17: 455234.566 ops/s
# Warmup Iteration  18: 454230.980 ops/s
# Warmup Iteration  19: 454618.511 ops/s
# Warmup Iteration  20: 458709.426 ops/s
# Warmup Iteration  21: 456698.889 ops/s
# Warmup Iteration  22: 456109.001 ops/s
# Warmup Iteration  23: 455744.160 ops/s
# Warmup Iteration  24: 456454.358 ops/s
# Warmup Iteration  25: 459557.544 ops/s
# Warmup Iteration  26: 453695.266 ops/s
# Warmup Iteration  27: 456422.974 ops/s
# Warmup Iteration  28: 455615.064 ops/s
# Warmup Iteration  29: 455277.836 ops/s
# Warmup Iteration  30: 455348.643 ops/s
Iteration   1: 453408.152 ops/s
Iteration   2: 455841.874 ops/s
Iteration   3: 457658.896 ops/s
Iteration   4: 454675.393 ops/s
Iteration   5: 457056.905 ops/s
Iteration   6: 457170.467 ops/s
Iteration   7: 456010.828 ops/s
Iteration   8: 456380.228 ops/s
Iteration   9: 457946.865 ops/s
Iteration  10: 457995.482 ops/s
Iteration  11: 456336.813 ops/s
Iteration  12: 457718.178 ops/s
Iteration  13: 454610.715 ops/s
Iteration  14: 459927.113 ops/s
Iteration  15: 456888.356 ops/s
Iteration  16: 454151.205 ops/s
Iteration  17: 456388.330 ops/s
Iteration  18: 456003.275 ops/s
Iteration  19: 456211.688 ops/s
Iteration  20: 455945.592 ops/s
Iteration  21: 454592.769 ops/s
Iteration  22: 455377.410 ops/s
Iteration  23: 458296.752 ops/s
Iteration  24: 455340.806 ops/s
Iteration  25: 456685.662 ops/s
Iteration  26: 455215.963 ops/s
Iteration  27: 455963.963 ops/s
Iteration  28: 458710.738 ops/s
Iteration  29: 452695.419 ops/s
Iteration  30: 457570.592 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableReplayEagerTruncateTest._Benchmark.benchmark_valuesAndThenError":
  456292.548 ±(99.9%) 1065.867 ops/s [Average]
  (min, avg, max) = (452695.419, 456292.548, 459927.113), stdev = 1595.339
  CI (99.9%): [455226.681, 457358.414] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score      Error  Units
ObservableReplayEagerTruncateTest._Benchmark.benchmark_valuesAndThenError  thrpt   30  456292.548 ± 1065.867  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_fusedCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_fusedCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 519215.631 ops/s
# Warmup Iteration   2: 644520.318 ops/s
# Warmup Iteration   3: 686342.355 ops/s
# Warmup Iteration   4: 686429.511 ops/s
# Warmup Iteration   5: 690079.651 ops/s
# Warmup Iteration   6: 689581.940 ops/s
# Warmup Iteration   7: 687119.894 ops/s
# Warmup Iteration   8: 687017.488 ops/s
# Warmup Iteration   9: 690652.929 ops/s
# Warmup Iteration  10: 690918.064 ops/s
# Warmup Iteration  11: 686870.547 ops/s
# Warmup Iteration  12: 689159.100 ops/s
# Warmup Iteration  13: 686122.247 ops/s
# Warmup Iteration  14: 686972.539 ops/s
# Warmup Iteration  15: 689413.113 ops/s
# Warmup Iteration  16: 689202.978 ops/s
# Warmup Iteration  17: 710209.210 ops/s
# Warmup Iteration  18: 713646.021 ops/s
# Warmup Iteration  19: 712363.018 ops/s
# Warmup Iteration  20: 712575.184 ops/s
# Warmup Iteration  21: 709849.848 ops/s
# Warmup Iteration  22: 708812.595 ops/s
# Warmup Iteration  23: 709736.527 ops/s
# Warmup Iteration  24: 712111.713 ops/s
# Warmup Iteration  25: 711119.597 ops/s
# Warmup Iteration  26: 712094.348 ops/s
# Warmup Iteration  27: 711354.931 ops/s
# Warmup Iteration  28: 709069.750 ops/s
# Warmup Iteration  29: 713251.737 ops/s
# Warmup Iteration  30: 709804.756 ops/s
Iteration   1: 710785.943 ops/s
Iteration   2: 712299.102 ops/s
Iteration   3: 708027.765 ops/s
Iteration   4: 709732.383 ops/s
Iteration   5: 706850.454 ops/s
Iteration   6: 707539.724 ops/s
Iteration   7: 708501.230 ops/s
Iteration   8: 712148.930 ops/s
Iteration   9: 707751.196 ops/s
Iteration  10: 708758.896 ops/s
Iteration  11: 710993.016 ops/s
Iteration  12: 706620.844 ops/s
Iteration  13: 710305.999 ops/s
Iteration  14: 707525.078 ops/s
Iteration  15: 709143.890 ops/s
Iteration  16: 707316.199 ops/s
Iteration  17: 707196.852 ops/s
Iteration  18: 709205.720 ops/s
Iteration  19: 709943.186 ops/s
Iteration  20: 709488.242 ops/s
Iteration  21: 710147.375 ops/s
Iteration  22: 708812.523 ops/s
Iteration  23: 710582.924 ops/s
Iteration  24: 708915.847 ops/s
Iteration  25: 711539.100 ops/s
Iteration  26: 711544.182 ops/s
Iteration  27: 713840.939 ops/s
Iteration  28: 709374.001 ops/s
Iteration  29: 709974.715 ops/s
Iteration  30: 710321.388 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_fusedCrash":
  709506.255 ±(99.9%) 1178.606 ops/s [Average]
  (min, avg, max) = (706620.844, 709506.255, 713840.939), stdev = 1764.082
  CI (99.9%): [708327.649, 710684.861] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
ObservableConcatMapSchedulerTest._Benchmark.benchmark_fusedCrash  thrpt   30  709506.255 ± 1178.606  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_fromObservableMany$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_fromObservableMany

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 640610.779 ops/s
# Warmup Iteration   2: 748040.479 ops/s
# Warmup Iteration   3: 811795.218 ops/s
# Warmup Iteration   4: 743116.112 ops/s
# Warmup Iteration   5: 840552.649 ops/s
# Warmup Iteration   6: 837443.844 ops/s
# Warmup Iteration   7: 838801.273 ops/s
# Warmup Iteration   8: 839609.218 ops/s
# Warmup Iteration   9: 836193.105 ops/s
# Warmup Iteration  10: 843494.135 ops/s
# Warmup Iteration  11: 838806.519 ops/s
# Warmup Iteration  12: 841089.545 ops/s
# Warmup Iteration  13: 839086.691 ops/s
# Warmup Iteration  14: 836957.567 ops/s
# Warmup Iteration  15: 835357.529 ops/s
# Warmup Iteration  16: 837333.476 ops/s
# Warmup Iteration  17: 877308.382 ops/s
# Warmup Iteration  18: 877066.270 ops/s
# Warmup Iteration  19: 876349.115 ops/s
# Warmup Iteration  20: 872525.986 ops/s
# Warmup Iteration  21: 876891.536 ops/s
# Warmup Iteration  22: 873118.524 ops/s
# Warmup Iteration  23: 868433.732 ops/s
# Warmup Iteration  24: 874854.411 ops/s
# Warmup Iteration  25: 877707.046 ops/s
# Warmup Iteration  26: 873172.015 ops/s
# Warmup Iteration  27: 877020.777 ops/s
# Warmup Iteration  28: 873580.894 ops/s
# Warmup Iteration  29: 873455.311 ops/s
# Warmup Iteration  30: 873405.376 ops/s
Iteration   1: 869650.290 ops/s
Iteration   2: 873881.423 ops/s
Iteration   3: 877525.004 ops/s
Iteration   4: 876032.688 ops/s
Iteration   5: 870144.295 ops/s
Iteration   6: 871482.271 ops/s
Iteration   7: 872703.175 ops/s
Iteration   8: 875111.327 ops/s
Iteration   9: 875270.545 ops/s
Iteration  10: 875227.243 ops/s
Iteration  11: 871093.178 ops/s
Iteration  12: 873726.812 ops/s
Iteration  13: 869961.578 ops/s
Iteration  14: 874714.893 ops/s
Iteration  15: 874674.849 ops/s
Iteration  16: 873919.824 ops/s
Iteration  17: 874439.725 ops/s
Iteration  18: 872751.060 ops/s
Iteration  19: 874120.979 ops/s
Iteration  20: 873570.241 ops/s
Iteration  21: 869747.745 ops/s
Iteration  22: 870638.313 ops/s
Iteration  23: 878581.514 ops/s
Iteration  24: 878386.850 ops/s
Iteration  25: 873809.450 ops/s
Iteration  26: 871412.455 ops/s
Iteration  27: 874274.016 ops/s
Iteration  28: 874971.834 ops/s
Iteration  29: 874598.063 ops/s
Iteration  30: 875699.922 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_fromObservableMany":
  873737.386 ±(99.9%) 1613.040 ops/s [Average]
  (min, avg, max) = (869650.290, 873737.386, 878581.514), stdev = 2414.323
  CI (99.9%): [872124.345, 875350.426] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt       Score      Error  Units
MaybeTest._Benchmark.benchmark_fromObservableMany  thrpt   30  873737.386 ± 1613.040  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_generateConsumerEmitsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_generateConsumerEmitsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 645060.213 ops/s
# Warmup Iteration   2: 734356.961 ops/s
# Warmup Iteration   3: 791602.047 ops/s
# Warmup Iteration   4: 817377.478 ops/s
# Warmup Iteration   5: 816330.474 ops/s
# Warmup Iteration   6: 816847.241 ops/s
# Warmup Iteration   7: 820465.346 ops/s
# Warmup Iteration   8: 819515.383 ops/s
# Warmup Iteration   9: 816765.238 ops/s
# Warmup Iteration  10: 815415.035 ops/s
# Warmup Iteration  11: 814585.804 ops/s
# Warmup Iteration  12: 815060.624 ops/s
# Warmup Iteration  13: 809242.988 ops/s
# Warmup Iteration  14: 810932.115 ops/s
# Warmup Iteration  15: 811318.686 ops/s
# Warmup Iteration  16: 812401.556 ops/s
# Warmup Iteration  17: 854248.012 ops/s
# Warmup Iteration  18: 852529.287 ops/s
# Warmup Iteration  19: 856186.186 ops/s
# Warmup Iteration  20: 853019.296 ops/s
# Warmup Iteration  21: 850957.126 ops/s
# Warmup Iteration  22: 851632.213 ops/s
# Warmup Iteration  23: 854339.341 ops/s
# Warmup Iteration  24: 853005.705 ops/s
# Warmup Iteration  25: 849966.197 ops/s
# Warmup Iteration  26: 855920.177 ops/s
# Warmup Iteration  27: 856744.757 ops/s
# Warmup Iteration  28: 850361.193 ops/s
# Warmup Iteration  29: 852416.350 ops/s
# Warmup Iteration  30: 852616.229 ops/s
Iteration   1: 852157.468 ops/s
Iteration   2: 855487.110 ops/s
Iteration   3: 853906.949 ops/s
Iteration   4: 854814.676 ops/s
Iteration   5: 853229.669 ops/s
Iteration   6: 857359.085 ops/s
Iteration   7: 852904.500 ops/s
Iteration   8: 854508.832 ops/s
Iteration   9: 854147.540 ops/s
Iteration  10: 856123.767 ops/s
Iteration  11: 850560.001 ops/s
Iteration  12: 850469.685 ops/s
Iteration  13: 853395.303 ops/s
Iteration  14: 849913.882 ops/s
Iteration  15: 853898.157 ops/s
Iteration  16: 854761.878 ops/s
Iteration  17: 854649.676 ops/s
Iteration  18: 855280.631 ops/s
Iteration  19: 856450.395 ops/s
Iteration  20: 853824.972 ops/s
Iteration  21: 852032.735 ops/s
Iteration  22: 857154.285 ops/s
Iteration  23: 855676.117 ops/s
Iteration  24: 853559.197 ops/s
Iteration  25: 853780.668 ops/s
Iteration  26: 853698.184 ops/s
Iteration  27: 856512.485 ops/s
Iteration  28: 856360.207 ops/s
Iteration  29: 851914.207 ops/s
Iteration  30: 854900.558 ops/s


Result "io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_generateConsumerEmitsNull":
  854114.427 ±(99.9%) 1288.179 ops/s [Average]
  (min, avg, max) = (849913.882, 854114.427, 857359.085), stdev = 1928.086
  CI (99.9%): [852826.248, 855402.606] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score      Error  Units
ObservableNullTests._Benchmark.benchmark_generateConsumerEmitsNull  thrpt   30  854114.427 ± 1288.179  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 217791.115 ops/s
# Warmup Iteration   2: 288263.632 ops/s
# Warmup Iteration   3: 283862.386 ops/s
# Warmup Iteration   4: 306121.022 ops/s
# Warmup Iteration   5: 309156.457 ops/s
# Warmup Iteration   6: 307956.007 ops/s
# Warmup Iteration   7: 309329.228 ops/s
# Warmup Iteration   8: 306101.842 ops/s
# Warmup Iteration   9: 307705.526 ops/s
# Warmup Iteration  10: 307103.817 ops/s
# Warmup Iteration  11: 308023.198 ops/s
# Warmup Iteration  12: 306330.669 ops/s
# Warmup Iteration  13: 307216.125 ops/s
# Warmup Iteration  14: 305078.851 ops/s
# Warmup Iteration  15: 305484.953 ops/s
# Warmup Iteration  16: 305213.342 ops/s
# Warmup Iteration  17: 317410.765 ops/s
# Warmup Iteration  18: 317807.497 ops/s
# Warmup Iteration  19: 316951.285 ops/s
# Warmup Iteration  20: 315121.945 ops/s
# Warmup Iteration  21: 314668.021 ops/s
# Warmup Iteration  22: 316992.459 ops/s
# Warmup Iteration  23: 316916.755 ops/s
# Warmup Iteration  24: 316488.828 ops/s
# Warmup Iteration  25: 315679.433 ops/s
# Warmup Iteration  26: 317478.526 ops/s
# Warmup Iteration  27: 317884.735 ops/s
# Warmup Iteration  28: 318288.995 ops/s
# Warmup Iteration  29: 316025.139 ops/s
# Warmup Iteration  30: 317445.690 ops/s
Iteration   1: 318772.342 ops/s
Iteration   2: 318318.133 ops/s
Iteration   3: 317160.262 ops/s
Iteration   4: 315266.570 ops/s
Iteration   5: 315200.309 ops/s
Iteration   6: 314203.276 ops/s
Iteration   7: 317346.301 ops/s
Iteration   8: 316445.231 ops/s
Iteration   9: 317710.412 ops/s
Iteration  10: 317187.196 ops/s
Iteration  11: 317105.324 ops/s
Iteration  12: 316011.352 ops/s
Iteration  13: 317353.687 ops/s
Iteration  14: 317220.655 ops/s
Iteration  15: 318416.662 ops/s
Iteration  16: 318161.604 ops/s
Iteration  17: 315329.726 ops/s
Iteration  18: 316846.171 ops/s
Iteration  19: 317237.714 ops/s
Iteration  20: 316985.581 ops/s
Iteration  21: 317353.172 ops/s
Iteration  22: 316929.408 ops/s
Iteration  23: 314118.481 ops/s
Iteration  24: 317641.321 ops/s
Iteration  25: 317087.620 ops/s
Iteration  26: 316529.312 ops/s
Iteration  27: 315938.751 ops/s
Iteration  28: 317218.219 ops/s
Iteration  29: 317424.423 ops/s
Iteration  30: 315761.986 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_doubleOnSubscribe":
  316809.373 ±(99.9%) 766.758 ops/s [Average]
  (min, avg, max) = (314118.481, 316809.373, 318772.342), stdev = 1147.648
  CI (99.9%): [316042.615, 317576.132] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score     Error  Units
ObservableConcatMapSchedulerTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  316809.373 ± 766.758  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableGroupByTest._Benchmark.benchmark_keySelectorThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableGroupByTest._Benchmark.benchmark_keySelectorThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 427337.335 ops/s
# Warmup Iteration   2: 583897.076 ops/s
# Warmup Iteration   3: 676411.134 ops/s
# Warmup Iteration   4: 675761.186 ops/s
# Warmup Iteration   5: 677337.891 ops/s
# Warmup Iteration   6: 672933.362 ops/s
# Warmup Iteration   7: 675555.596 ops/s
# Warmup Iteration   8: 671269.843 ops/s
# Warmup Iteration   9: 656486.832 ops/s
# Warmup Iteration  10: 671081.956 ops/s
# Warmup Iteration  11: 675279.639 ops/s
# Warmup Iteration  12: 668578.222 ops/s
# Warmup Iteration  13: 672029.400 ops/s
# Warmup Iteration  14: 669161.986 ops/s
# Warmup Iteration  15: 672203.848 ops/s
# Warmup Iteration  16: 668554.587 ops/s
# Warmup Iteration  17: 697426.719 ops/s
# Warmup Iteration  18: 696173.583 ops/s
# Warmup Iteration  19: 696580.865 ops/s
# Warmup Iteration  20: 700619.823 ops/s
# Warmup Iteration  21: 697271.786 ops/s
# Warmup Iteration  22: 698129.867 ops/s
# Warmup Iteration  23: 698931.249 ops/s
# Warmup Iteration  24: 695707.506 ops/s
# Warmup Iteration  25: 695645.882 ops/s
# Warmup Iteration  26: 699526.561 ops/s
# Warmup Iteration  27: 698121.439 ops/s
# Warmup Iteration  28: 697917.252 ops/s
# Warmup Iteration  29: 701275.759 ops/s
# Warmup Iteration  30: 697403.292 ops/s
Iteration   1: 700331.398 ops/s
Iteration   2: 696887.765 ops/s
Iteration   3: 696159.674 ops/s
Iteration   4: 698345.789 ops/s
Iteration   5: 699972.597 ops/s
Iteration   6: 699013.048 ops/s
Iteration   7: 701128.424 ops/s
Iteration   8: 699601.568 ops/s
Iteration   9: 697333.808 ops/s
Iteration  10: 698406.034 ops/s
Iteration  11: 701096.454 ops/s
Iteration  12: 699025.616 ops/s
Iteration  13: 696605.262 ops/s
Iteration  14: 701157.807 ops/s
Iteration  15: 697528.870 ops/s
Iteration  16: 697064.394 ops/s
Iteration  17: 700319.689 ops/s
Iteration  18: 698426.003 ops/s
Iteration  19: 699847.778 ops/s
Iteration  20: 699365.117 ops/s
Iteration  21: 701763.312 ops/s
Iteration  22: 700813.916 ops/s
Iteration  23: 698178.138 ops/s
Iteration  24: 700700.952 ops/s
Iteration  25: 698917.727 ops/s
Iteration  26: 700339.305 ops/s
Iteration  27: 698741.730 ops/s
Iteration  28: 696309.268 ops/s
Iteration  29: 697827.944 ops/s
Iteration  30: 698850.635 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableGroupByTest._Benchmark.benchmark_keySelectorThrows":
  699002.001 ±(99.9%) 1055.033 ops/s [Average]
  (min, avg, max) = (696159.674, 699002.001, 701763.312), stdev = 1579.124
  CI (99.9%): [697946.967, 700057.034] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
ObservableGroupByTest._Benchmark.benchmark_keySelectorThrows  thrpt   30  699002.001 ± 1055.033  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapTest._Benchmark.benchmark_mainErrorsInnerCancelled$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapTest._Benchmark.benchmark_mainErrorsInnerCancelled

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 487106.792 ops/s
# Warmup Iteration   2: 615222.186 ops/s
# Warmup Iteration   3: 687811.038 ops/s
# Warmup Iteration   4: 713466.394 ops/s
# Warmup Iteration   5: 715256.262 ops/s
# Warmup Iteration   6: 719585.277 ops/s
# Warmup Iteration   7: 715475.190 ops/s
# Warmup Iteration   8: 718557.643 ops/s
# Warmup Iteration   9: 716836.009 ops/s
# Warmup Iteration  10: 715304.323 ops/s
# Warmup Iteration  11: 715244.558 ops/s
# Warmup Iteration  12: 712989.782 ops/s
# Warmup Iteration  13: 710797.226 ops/s
# Warmup Iteration  14: 707748.433 ops/s
# Warmup Iteration  15: 709765.075 ops/s
# Warmup Iteration  16: 709248.613 ops/s
# Warmup Iteration  17: 747800.397 ops/s
# Warmup Iteration  18: 747068.557 ops/s
# Warmup Iteration  19: 745925.142 ops/s
# Warmup Iteration  20: 741387.641 ops/s
# Warmup Iteration  21: 746227.900 ops/s
# Warmup Iteration  22: 745183.724 ops/s
# Warmup Iteration  23: 745685.359 ops/s
# Warmup Iteration  24: 737193.838 ops/s
# Warmup Iteration  25: 749438.702 ops/s
# Warmup Iteration  26: 746836.039 ops/s
# Warmup Iteration  27: 747866.731 ops/s
# Warmup Iteration  28: 740194.168 ops/s
# Warmup Iteration  29: 741547.943 ops/s
# Warmup Iteration  30: 746550.472 ops/s
Iteration   1: 743072.777 ops/s
Iteration   2: 742822.240 ops/s
Iteration   3: 744076.611 ops/s
Iteration   4: 741419.233 ops/s
Iteration   5: 747502.575 ops/s
Iteration   6: 744677.660 ops/s
Iteration   7: 743190.686 ops/s
Iteration   8: 743025.800 ops/s
Iteration   9: 740452.323 ops/s
Iteration  10: 745080.259 ops/s
Iteration  11: 742855.153 ops/s
Iteration  12: 746646.454 ops/s
Iteration  13: 743023.501 ops/s
Iteration  14: 746477.706 ops/s
Iteration  15: 738029.294 ops/s
Iteration  16: 748317.819 ops/s
Iteration  17: 746716.602 ops/s
Iteration  18: 749332.961 ops/s
Iteration  19: 748686.788 ops/s
Iteration  20: 745396.623 ops/s
Iteration  21: 739876.718 ops/s
Iteration  22: 747141.967 ops/s
Iteration  23: 744641.724 ops/s
Iteration  24: 741668.108 ops/s
Iteration  25: 746786.884 ops/s
Iteration  26: 744936.506 ops/s
Iteration  27: 745868.211 ops/s
Iteration  28: 742132.933 ops/s
Iteration  29: 745284.687 ops/s
Iteration  30: 743161.623 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapTest._Benchmark.benchmark_mainErrorsInnerCancelled":
  744410.081 ±(99.9%) 1806.784 ops/s [Average]
  (min, avg, max) = (738029.294, 744410.081, 749332.961), stdev = 2704.309
  CI (99.9%): [742603.297, 746216.865] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score      Error  Units
ObservableFlatMapTest._Benchmark.benchmark_mainErrorsInnerCancelled  thrpt   30  744410.081 ± 1806.784  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapTest._Benchmark.benchmark_innerErrorsMainCancelled$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapTest._Benchmark.benchmark_innerErrorsMainCancelled

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 467208.526 ops/s
# Warmup Iteration   2: 618817.581 ops/s
# Warmup Iteration   3: 670955.174 ops/s
# Warmup Iteration   4: 693656.352 ops/s
# Warmup Iteration   5: 695148.031 ops/s
# Warmup Iteration   6: 691150.084 ops/s
# Warmup Iteration   7: 694591.920 ops/s
# Warmup Iteration   8: 695134.129 ops/s
# Warmup Iteration   9: 692754.871 ops/s
# Warmup Iteration  10: 689547.252 ops/s
# Warmup Iteration  11: 690085.493 ops/s
# Warmup Iteration  12: 688345.299 ops/s
# Warmup Iteration  13: 690849.742 ops/s
# Warmup Iteration  14: 688842.223 ops/s
# Warmup Iteration  15: 690053.161 ops/s
# Warmup Iteration  16: 689533.640 ops/s
# Warmup Iteration  17: 716911.155 ops/s
# Warmup Iteration  18: 717978.194 ops/s
# Warmup Iteration  19: 719992.565 ops/s
# Warmup Iteration  20: 720493.500 ops/s
# Warmup Iteration  21: 722375.265 ops/s
# Warmup Iteration  22: 721601.443 ops/s
# Warmup Iteration  23: 716604.371 ops/s
# Warmup Iteration  24: 719961.060 ops/s
# Warmup Iteration  25: 720648.251 ops/s
# Warmup Iteration  26: 719289.702 ops/s
# Warmup Iteration  27: 718075.160 ops/s
# Warmup Iteration  28: 720514.450 ops/s
# Warmup Iteration  29: 720701.657 ops/s
# Warmup Iteration  30: 718687.885 ops/s
Iteration   1: 719480.666 ops/s
Iteration   2: 715719.774 ops/s
Iteration   3: 721177.740 ops/s
Iteration   4: 716812.322 ops/s
Iteration   5: 716234.541 ops/s
Iteration   6: 721944.186 ops/s
Iteration   7: 718738.154 ops/s
Iteration   8: 717909.810 ops/s
Iteration   9: 718514.930 ops/s
Iteration  10: 718800.190 ops/s
Iteration  11: 719002.475 ops/s
Iteration  12: 717767.826 ops/s
Iteration  13: 718402.949 ops/s
Iteration  14: 719638.482 ops/s
Iteration  15: 719273.520 ops/s
Iteration  16: 719605.240 ops/s
Iteration  17: 717960.710 ops/s
Iteration  18: 720889.287 ops/s
Iteration  19: 722532.237 ops/s
Iteration  20: 720139.326 ops/s
Iteration  21: 720730.917 ops/s
Iteration  22: 721950.300 ops/s
Iteration  23: 717311.612 ops/s
Iteration  24: 719444.592 ops/s
Iteration  25: 720649.553 ops/s
Iteration  26: 723146.820 ops/s
Iteration  27: 718688.252 ops/s
Iteration  28: 720066.693 ops/s
Iteration  29: 720324.543 ops/s
Iteration  30: 722823.452 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapTest._Benchmark.benchmark_innerErrorsMainCancelled":
  719522.703 ±(99.9%) 1262.746 ops/s [Average]
  (min, avg, max) = (715719.774, 719522.703, 723146.820), stdev = 1890.019
  CI (99.9%): [718259.957, 720785.449] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score      Error  Units
ObservableFlatMapTest._Benchmark.benchmark_innerErrorsMainCancelled  thrpt   30  719522.703 ± 1262.746  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapTest._Benchmark.benchmark_scalarReentrant2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapTest._Benchmark.benchmark_scalarReentrant2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1207789.412 ops/s
# Warmup Iteration   2: 1803333.437 ops/s
# Warmup Iteration   3: 1910153.839 ops/s
# Warmup Iteration   4: 2239190.019 ops/s
# Warmup Iteration   5: 2753502.297 ops/s
# Warmup Iteration   6: 2744268.977 ops/s
# Warmup Iteration   7: 2720041.052 ops/s
# Warmup Iteration   8: 2728840.090 ops/s
# Warmup Iteration   9: 2750586.801 ops/s
# Warmup Iteration  10: 2747346.121 ops/s
# Warmup Iteration  11: 2750311.209 ops/s
# Warmup Iteration  12: 2735592.006 ops/s
# Warmup Iteration  13: 2755583.890 ops/s
# Warmup Iteration  14: 2739757.042 ops/s
# Warmup Iteration  15: 2736625.196 ops/s
# Warmup Iteration  16: 2750711.434 ops/s
# Warmup Iteration  17: 2744827.418 ops/s
# Warmup Iteration  18: 2715525.616 ops/s
# Warmup Iteration  19: 2744935.067 ops/s
# Warmup Iteration  20: 2770452.016 ops/s
# Warmup Iteration  21: 2735108.391 ops/s
# Warmup Iteration  22: 2734096.235 ops/s
# Warmup Iteration  23: 2739839.106 ops/s
# Warmup Iteration  24: 2736154.740 ops/s
# Warmup Iteration  25: 2743751.872 ops/s
# Warmup Iteration  26: 2750177.678 ops/s
# Warmup Iteration  27: 2732990.744 ops/s
# Warmup Iteration  28: 2738919.441 ops/s
# Warmup Iteration  29: 2732127.219 ops/s
# Warmup Iteration  30: 2739197.895 ops/s
Iteration   1: 2732658.483 ops/s
Iteration   2: 2741860.466 ops/s
Iteration   3: 2754423.872 ops/s
Iteration   4: 2740204.647 ops/s
Iteration   5: 2756921.636 ops/s
Iteration   6: 2721119.078 ops/s
Iteration   7: 2719746.058 ops/s
Iteration   8: 2725271.491 ops/s
Iteration   9: 2719992.297 ops/s
Iteration  10: 2744848.385 ops/s
Iteration  11: 2744245.132 ops/s
Iteration  12: 2738158.096 ops/s
Iteration  13: 2741167.576 ops/s
Iteration  14: 2730151.218 ops/s
Iteration  15: 2754930.945 ops/s
Iteration  16: 2743037.994 ops/s
Iteration  17: 2735339.282 ops/s
Iteration  18: 2749604.472 ops/s
Iteration  19: 2744358.363 ops/s
Iteration  20: 2726218.437 ops/s
Iteration  21: 2736971.545 ops/s
Iteration  22: 2749255.830 ops/s
Iteration  23: 2727002.876 ops/s
Iteration  24: 2740045.554 ops/s
Iteration  25: 2744198.294 ops/s
Iteration  26: 2732879.853 ops/s
Iteration  27: 2723472.298 ops/s
Iteration  28: 2731481.664 ops/s
Iteration  29: 2726047.334 ops/s
Iteration  30: 2758847.346 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapTest._Benchmark.benchmark_scalarReentrant2":
  2737815.351 ±(99.9%) 7565.568 ops/s [Average]
  (min, avg, max) = (2719746.058, 2737815.351, 2758847.346), stdev = 11323.787
  CI (99.9%): [2730249.783, 2745380.919] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
ObservableFlatMapTest._Benchmark.benchmark_scalarReentrant2  thrpt   30  2737815.351 ± 7565.568  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapTest._Benchmark.benchmark_scalarReentrant$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapTest._Benchmark.benchmark_scalarReentrant

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1378850.222 ops/s
# Warmup Iteration   2: 2317215.700 ops/s
# Warmup Iteration   3: 2641972.973 ops/s
# Warmup Iteration   4: 2637115.625 ops/s
# Warmup Iteration   5: 2626548.148 ops/s
# Warmup Iteration   6: 2633381.834 ops/s
# Warmup Iteration   7: 2633492.571 ops/s
# Warmup Iteration   8: 2619708.009 ops/s
# Warmup Iteration   9: 2616623.551 ops/s
# Warmup Iteration  10: 2616238.552 ops/s
# Warmup Iteration  11: 2623586.167 ops/s
# Warmup Iteration  12: 2631690.821 ops/s
# Warmup Iteration  13: 2639441.136 ops/s
# Warmup Iteration  14: 2637611.661 ops/s
# Warmup Iteration  15: 2615460.932 ops/s
# Warmup Iteration  16: 2638928.913 ops/s
# Warmup Iteration  17: 2632920.355 ops/s
# Warmup Iteration  18: 2639893.369 ops/s
# Warmup Iteration  19: 2616183.094 ops/s
# Warmup Iteration  20: 2636399.771 ops/s
# Warmup Iteration  21: 2648729.580 ops/s
# Warmup Iteration  22: 2633392.769 ops/s
# Warmup Iteration  23: 2616618.791 ops/s
# Warmup Iteration  24: 2637076.482 ops/s
# Warmup Iteration  25: 2636253.524 ops/s
# Warmup Iteration  26: 2623023.367 ops/s
# Warmup Iteration  27: 2636970.430 ops/s
# Warmup Iteration  28: 2619998.432 ops/s
# Warmup Iteration  29: 2625268.090 ops/s
# Warmup Iteration  30: 2617261.371 ops/s
Iteration   1: 2626165.199 ops/s
Iteration   2: 2632359.013 ops/s
Iteration   3: 2638350.838 ops/s
Iteration   4: 2645422.063 ops/s
Iteration   5: 2629533.230 ops/s
Iteration   6: 2635867.966 ops/s
Iteration   7: 2624569.761 ops/s
Iteration   8: 2654116.531 ops/s
Iteration   9: 2633839.180 ops/s
Iteration  10: 2630647.227 ops/s
Iteration  11: 2639612.354 ops/s
Iteration  12: 2618895.719 ops/s
Iteration  13: 2659350.882 ops/s
Iteration  14: 2635014.787 ops/s
Iteration  15: 2639483.466 ops/s
Iteration  16: 2629843.659 ops/s
Iteration  17: 2650619.363 ops/s
Iteration  18: 2634073.068 ops/s
Iteration  19: 2646507.270 ops/s
Iteration  20: 2645873.501 ops/s
Iteration  21: 2636188.091 ops/s
Iteration  22: 2627996.306 ops/s
Iteration  23: 2641981.191 ops/s
Iteration  24: 2639111.377 ops/s
Iteration  25: 2645907.583 ops/s
Iteration  26: 2631785.376 ops/s
Iteration  27: 2608621.258 ops/s
Iteration  28: 2635384.931 ops/s
Iteration  29: 2625289.479 ops/s
Iteration  30: 2635901.777 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapTest._Benchmark.benchmark_scalarReentrant":
  2635943.748 ±(99.9%) 6969.319 ops/s [Average]
  (min, avg, max) = (2608621.258, 2635943.748, 2659350.882), stdev = 10431.349
  CI (99.9%): [2628974.430, 2642913.067] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
ObservableFlatMapTest._Benchmark.benchmark_scalarReentrant  thrpt   30  2635943.748 ± 6969.319  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.BlockingObservableToFutureTest._Benchmark.benchmark_toFutureList$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.BlockingObservableToFutureTest._Benchmark.benchmark_toFutureList

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 5428936.346 ops/s
# Warmup Iteration   2: 7493202.862 ops/s
# Warmup Iteration   3: 8506733.460 ops/s
# Warmup Iteration   4: 8490614.344 ops/s
# Warmup Iteration   5: 8439595.237 ops/s
# Warmup Iteration   6: 8433082.386 ops/s
# Warmup Iteration   7: 8421539.779 ops/s
# Warmup Iteration   8: 8486284.169 ops/s
# Warmup Iteration   9: 8405268.889 ops/s
# Warmup Iteration  10: 8434350.502 ops/s
# Warmup Iteration  11: 8387705.892 ops/s
# Warmup Iteration  12: 8466356.999 ops/s
# Warmup Iteration  13: 8411893.364 ops/s
# Warmup Iteration  14: 8399363.206 ops/s
# Warmup Iteration  15: 8383177.333 ops/s
# Warmup Iteration  16: 8444335.304 ops/s
# Warmup Iteration  17: 8434690.309 ops/s
# Warmup Iteration  18: 8451158.527 ops/s
# Warmup Iteration  19: 8440475.014 ops/s
# Warmup Iteration  20: 8424319.485 ops/s
# Warmup Iteration  21: 8448671.791 ops/s
# Warmup Iteration  22: 8452854.489 ops/s
# Warmup Iteration  23: 8439794.989 ops/s
# Warmup Iteration  24: 8449443.382 ops/s
# Warmup Iteration  25: 8421303.403 ops/s
# Warmup Iteration  26: 8498572.722 ops/s
# Warmup Iteration  27: 8471621.388 ops/s
# Warmup Iteration  28: 8447614.522 ops/s
# Warmup Iteration  29: 8437828.282 ops/s
# Warmup Iteration  30: 8474123.305 ops/s
Iteration   1: 8449568.959 ops/s
Iteration   2: 8463437.193 ops/s
Iteration   3: 8427113.270 ops/s
Iteration   4: 8426951.548 ops/s
Iteration   5: 8466739.275 ops/s
Iteration   6: 8408214.483 ops/s
Iteration   7: 8428727.916 ops/s
Iteration   8: 8371515.566 ops/s
Iteration   9: 8425138.588 ops/s
Iteration  10: 8409818.469 ops/s
Iteration  11: 8429225.178 ops/s
Iteration  12: 8472581.127 ops/s
Iteration  13: 8424453.522 ops/s
Iteration  14: 8429985.590 ops/s
Iteration  15: 8438325.653 ops/s
Iteration  16: 8439845.182 ops/s
Iteration  17: 8432639.413 ops/s
Iteration  18: 8412561.629 ops/s
Iteration  19: 8470582.624 ops/s
Iteration  20: 8420258.708 ops/s
Iteration  21: 8428415.768 ops/s
Iteration  22: 8456498.285 ops/s
Iteration  23: 8453099.890 ops/s
Iteration  24: 8473542.289 ops/s
Iteration  25: 8474123.080 ops/s
Iteration  26: 8461947.491 ops/s
Iteration  27: 8438345.851 ops/s
Iteration  28: 8431793.667 ops/s
Iteration  29: 8400561.786 ops/s
Iteration  30: 8441421.766 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.BlockingObservableToFutureTest._Benchmark.benchmark_toFutureList":
  8436914.459 ±(99.9%) 16174.717 ops/s [Average]
  (min, avg, max) = (8371515.566, 8436914.459, 8474123.080), stdev = 24209.557
  CI (99.9%): [8420739.742, 8453089.176] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
BlockingObservableToFutureTest._Benchmark.benchmark_toFutureList  thrpt   30  8436914.459 ± 16174.717  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableStartWithTest._Benchmark.benchmark_justObservableJust$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableStartWithTest._Benchmark.benchmark_justObservableJust

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1509695.294 ops/s
# Warmup Iteration   2: 2459995.685 ops/s
# Warmup Iteration   3: 2612284.739 ops/s
# Warmup Iteration   4: 2818199.249 ops/s
# Warmup Iteration   5: 2814476.287 ops/s
# Warmup Iteration   6: 2817082.971 ops/s
# Warmup Iteration   7: 2816626.769 ops/s
# Warmup Iteration   8: 2798360.015 ops/s
# Warmup Iteration   9: 2812798.598 ops/s
# Warmup Iteration  10: 2802000.672 ops/s
# Warmup Iteration  11: 2798564.089 ops/s
# Warmup Iteration  12: 2792243.419 ops/s
# Warmup Iteration  13: 2797235.273 ops/s
# Warmup Iteration  14: 2801605.753 ops/s
# Warmup Iteration  15: 2809891.796 ops/s
# Warmup Iteration  16: 2798505.313 ops/s
# Warmup Iteration  17: 2815374.270 ops/s
# Warmup Iteration  18: 2823121.634 ops/s
# Warmup Iteration  19: 2807928.602 ops/s
# Warmup Iteration  20: 2808027.101 ops/s
# Warmup Iteration  21: 2801160.082 ops/s
# Warmup Iteration  22: 2806806.677 ops/s
# Warmup Iteration  23: 2814138.343 ops/s
# Warmup Iteration  24: 2790551.934 ops/s
# Warmup Iteration  25: 2817957.723 ops/s
# Warmup Iteration  26: 2792684.934 ops/s
# Warmup Iteration  27: 2794543.237 ops/s
# Warmup Iteration  28: 2807536.597 ops/s
# Warmup Iteration  29: 2807340.899 ops/s
# Warmup Iteration  30: 2795917.375 ops/s
Iteration   1: 2796128.546 ops/s
Iteration   2: 2807377.006 ops/s
Iteration   3: 2813027.709 ops/s
Iteration   4: 2789096.895 ops/s
Iteration   5: 2801610.569 ops/s
Iteration   6: 2799123.170 ops/s
Iteration   7: 2810690.471 ops/s
Iteration   8: 2806762.156 ops/s
Iteration   9: 2794193.066 ops/s
Iteration  10: 2794739.676 ops/s
Iteration  11: 2810469.382 ops/s
Iteration  12: 2805813.153 ops/s
Iteration  13: 2813238.208 ops/s
Iteration  14: 2807082.248 ops/s
Iteration  15: 2801651.623 ops/s
Iteration  16: 2805790.523 ops/s
Iteration  17: 2801986.640 ops/s
Iteration  18: 2788372.748 ops/s
Iteration  19: 2824584.597 ops/s
Iteration  20: 2800466.541 ops/s
Iteration  21: 2795694.806 ops/s
Iteration  22: 2802989.644 ops/s
Iteration  23: 2811771.977 ops/s
Iteration  24: 2804369.659 ops/s
Iteration  25: 2793502.605 ops/s
Iteration  26: 2798457.048 ops/s
Iteration  27: 2817612.744 ops/s
Iteration  28: 2815836.218 ops/s
Iteration  29: 2790290.526 ops/s
Iteration  30: 2801923.572 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableStartWithTest._Benchmark.benchmark_justObservableJust":
  2803488.457 ±(99.9%) 5891.780 ops/s [Average]
  (min, avg, max) = (2788372.748, 2803488.457, 2824584.597), stdev = 8818.540
  CI (99.9%): [2797596.677, 2809380.238] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
ObservableStartWithTest._Benchmark.benchmark_justObservableJust  thrpt   30  2803488.457 ± 5891.780  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapTest._Benchmark.benchmark_scalarQueueNoOverflow$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapTest._Benchmark.benchmark_scalarQueueNoOverflow

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 504491.672 ops/s
# Warmup Iteration   2: 719197.500 ops/s
# Warmup Iteration   3: 700047.043 ops/s
# Warmup Iteration   4: 830017.554 ops/s
# Warmup Iteration   5: 1005051.978 ops/s
# Warmup Iteration   6: 1013543.062 ops/s
# Warmup Iteration   7: 1006256.975 ops/s
# Warmup Iteration   8: 1002742.084 ops/s
# Warmup Iteration   9: 1002786.665 ops/s
# Warmup Iteration  10: 1001744.901 ops/s
# Warmup Iteration  11: 1005548.224 ops/s
# Warmup Iteration  12: 1001204.177 ops/s
# Warmup Iteration  13: 997241.220 ops/s
# Warmup Iteration  14: 999244.652 ops/s
# Warmup Iteration  15: 993295.087 ops/s
# Warmup Iteration  16: 1010640.576 ops/s
# Warmup Iteration  17: 1008194.117 ops/s
# Warmup Iteration  18: 1009627.903 ops/s
# Warmup Iteration  19: 1004665.525 ops/s
# Warmup Iteration  20: 1008642.970 ops/s
# Warmup Iteration  21: 995117.525 ops/s
# Warmup Iteration  22: 1006267.987 ops/s
# Warmup Iteration  23: 999111.573 ops/s
# Warmup Iteration  24: 1002590.838 ops/s
# Warmup Iteration  25: 996555.152 ops/s
# Warmup Iteration  26: 1002877.323 ops/s
# Warmup Iteration  27: 1004211.337 ops/s
# Warmup Iteration  28: 999149.035 ops/s
# Warmup Iteration  29: 1002874.482 ops/s
# Warmup Iteration  30: 1006126.387 ops/s
Iteration   1: 1001463.669 ops/s
Iteration   2: 1004624.884 ops/s
Iteration   3: 1001512.399 ops/s
Iteration   4: 1001667.759 ops/s
Iteration   5: 988295.218 ops/s
Iteration   6: 1000939.162 ops/s
Iteration   7: 1002536.972 ops/s
Iteration   8: 1001804.084 ops/s
Iteration   9: 995460.209 ops/s
Iteration  10: 998345.489 ops/s
Iteration  11: 1007057.498 ops/s
Iteration  12: 997768.925 ops/s
Iteration  13: 998621.801 ops/s
Iteration  14: 1004318.279 ops/s
Iteration  15: 997687.166 ops/s
Iteration  16: 1004908.316 ops/s
Iteration  17: 1007418.065 ops/s
Iteration  18: 1003901.749 ops/s
Iteration  19: 993670.555 ops/s
Iteration  20: 1001207.115 ops/s
Iteration  21: 1008002.453 ops/s
Iteration  22: 1000613.689 ops/s
Iteration  23: 1006458.281 ops/s
Iteration  24: 999227.584 ops/s
Iteration  25: 999508.299 ops/s
Iteration  26: 1011443.823 ops/s
Iteration  27: 1005891.746 ops/s
Iteration  28: 1002569.413 ops/s
Iteration  29: 997674.666 ops/s
Iteration  30: 1007951.896 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapTest._Benchmark.benchmark_scalarQueueNoOverflow":
  1001751.706 ±(99.9%) 3215.885 ops/s [Average]
  (min, avg, max) = (988295.218, 1001751.706, 1011443.823), stdev = 4813.385
  CI (99.9%): [998535.821, 1004967.590] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
ObservableFlatMapTest._Benchmark.benchmark_scalarQueueNoOverflow  thrpt   30  1001751.706 ± 3215.885  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_flatMapFunctionReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_flatMapFunctionReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 671301.408 ops/s
# Warmup Iteration   2: 827052.562 ops/s
# Warmup Iteration   3: 822684.976 ops/s
# Warmup Iteration   4: 883914.251 ops/s
# Warmup Iteration   5: 887092.810 ops/s
# Warmup Iteration   6: 893326.147 ops/s
# Warmup Iteration   7: 892793.326 ops/s
# Warmup Iteration   8: 890073.030 ops/s
# Warmup Iteration   9: 893251.419 ops/s
# Warmup Iteration  10: 886651.547 ops/s
# Warmup Iteration  11: 886459.001 ops/s
# Warmup Iteration  12: 887862.293 ops/s
# Warmup Iteration  13: 885166.345 ops/s
# Warmup Iteration  14: 886658.755 ops/s
# Warmup Iteration  15: 885131.083 ops/s
# Warmup Iteration  16: 880582.142 ops/s
# Warmup Iteration  17: 932135.297 ops/s
# Warmup Iteration  18: 939564.877 ops/s
# Warmup Iteration  19: 935861.694 ops/s
# Warmup Iteration  20: 935188.630 ops/s
# Warmup Iteration  21: 935088.296 ops/s
# Warmup Iteration  22: 936278.987 ops/s
# Warmup Iteration  23: 938931.861 ops/s
# Warmup Iteration  24: 933169.377 ops/s
# Warmup Iteration  25: 939673.025 ops/s
# Warmup Iteration  26: 935599.693 ops/s
# Warmup Iteration  27: 938357.741 ops/s
# Warmup Iteration  28: 936299.647 ops/s
# Warmup Iteration  29: 933987.273 ops/s
# Warmup Iteration  30: 932631.546 ops/s
Iteration   1: 934839.969 ops/s
Iteration   2: 937503.849 ops/s
Iteration   3: 937499.823 ops/s
Iteration   4: 938665.001 ops/s
Iteration   5: 935127.760 ops/s
Iteration   6: 937498.126 ops/s
Iteration   7: 936846.969 ops/s
Iteration   8: 935078.025 ops/s
Iteration   9: 936987.288 ops/s
Iteration  10: 938049.762 ops/s
Iteration  11: 936710.750 ops/s
Iteration  12: 932600.176 ops/s
Iteration  13: 932899.165 ops/s
Iteration  14: 937047.880 ops/s
Iteration  15: 936982.522 ops/s
Iteration  16: 935307.433 ops/s
Iteration  17: 929724.651 ops/s
Iteration  18: 939848.446 ops/s
Iteration  19: 934942.246 ops/s
Iteration  20: 938765.358 ops/s
Iteration  21: 932739.868 ops/s
Iteration  22: 932965.331 ops/s
Iteration  23: 936688.549 ops/s
Iteration  24: 934887.071 ops/s
Iteration  25: 937367.847 ops/s
Iteration  26: 938205.316 ops/s
Iteration  27: 937519.436 ops/s
Iteration  28: 934775.253 ops/s
Iteration  29: 932801.733 ops/s
Iteration  30: 940057.889 ops/s


Result "io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_flatMapFunctionReturnsNull":
  936031.116 ±(99.9%) 1611.163 ops/s [Average]
  (min, avg, max) = (929724.651, 936031.116, 940057.889), stdev = 2411.513
  CI (99.9%): [934419.954, 937642.279] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score      Error  Units
ObservableNullTests._Benchmark.benchmark_flatMapFunctionReturnsNull  thrpt   30  936031.116 ± 1611.163  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_delayWithFunctionReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_delayWithFunctionReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 569621.619 ops/s
# Warmup Iteration   2: 713695.809 ops/s
# Warmup Iteration   3: 671321.917 ops/s
# Warmup Iteration   4: 759597.615 ops/s
# Warmup Iteration   5: 768143.196 ops/s
# Warmup Iteration   6: 767149.355 ops/s
# Warmup Iteration   7: 767434.820 ops/s
# Warmup Iteration   8: 765805.055 ops/s
# Warmup Iteration   9: 762835.371 ops/s
# Warmup Iteration  10: 768025.258 ops/s
# Warmup Iteration  11: 766304.925 ops/s
# Warmup Iteration  12: 767532.502 ops/s
# Warmup Iteration  13: 768167.790 ops/s
# Warmup Iteration  14: 763883.881 ops/s
# Warmup Iteration  15: 767384.935 ops/s
# Warmup Iteration  16: 767247.638 ops/s
# Warmup Iteration  17: 801318.486 ops/s
# Warmup Iteration  18: 799623.637 ops/s
# Warmup Iteration  19: 796523.000 ops/s
# Warmup Iteration  20: 797076.156 ops/s
# Warmup Iteration  21: 794714.799 ops/s
# Warmup Iteration  22: 793675.880 ops/s
# Warmup Iteration  23: 799361.584 ops/s
# Warmup Iteration  24: 794875.833 ops/s
# Warmup Iteration  25: 795309.928 ops/s
# Warmup Iteration  26: 796596.569 ops/s
# Warmup Iteration  27: 797708.161 ops/s
# Warmup Iteration  28: 798482.885 ops/s
# Warmup Iteration  29: 796190.463 ops/s
# Warmup Iteration  30: 797183.718 ops/s
Iteration   1: 797659.283 ops/s
Iteration   2: 793935.495 ops/s
Iteration   3: 800479.849 ops/s
Iteration   4: 795470.469 ops/s
Iteration   5: 796917.690 ops/s
Iteration   6: 794158.302 ops/s
Iteration   7: 797381.788 ops/s
Iteration   8: 797582.756 ops/s
Iteration   9: 802749.878 ops/s
Iteration  10: 800836.162 ops/s
Iteration  11: 795132.858 ops/s
Iteration  12: 794753.312 ops/s
Iteration  13: 798284.079 ops/s
Iteration  14: 795680.429 ops/s
Iteration  15: 794531.525 ops/s
Iteration  16: 794027.681 ops/s
Iteration  17: 799833.915 ops/s
Iteration  18: 797896.403 ops/s
Iteration  19: 793815.722 ops/s
Iteration  20: 794067.510 ops/s
Iteration  21: 799780.845 ops/s
Iteration  22: 795375.006 ops/s
Iteration  23: 796119.148 ops/s
Iteration  24: 796690.555 ops/s
Iteration  25: 795760.748 ops/s
Iteration  26: 795880.825 ops/s
Iteration  27: 799876.221 ops/s
Iteration  28: 792951.295 ops/s
Iteration  29: 791605.348 ops/s
Iteration  30: 795357.980 ops/s


Result "io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_delayWithFunctionReturnsNull":
  796486.436 ±(99.9%) 1744.121 ops/s [Average]
  (min, avg, max) = (791605.348, 796486.436, 802749.878), stdev = 2610.518
  CI (99.9%): [794742.315, 798230.557] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score      Error  Units
ObservableNullTests._Benchmark.benchmark_delayWithFunctionReturnsNull  thrpt   30  796486.436 ± 1744.121  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.BlockingObservableLatestTest._Benchmark.benchmark_empty2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.BlockingObservableLatestTest._Benchmark.benchmark_empty2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 773768.189 ops/s
# Warmup Iteration   2: 894478.419 ops/s
# Warmup Iteration   3: 886014.262 ops/s
# Warmup Iteration   4: 951103.526 ops/s
# Warmup Iteration   5: 950525.549 ops/s
# Warmup Iteration   6: 959777.392 ops/s
# Warmup Iteration   7: 953919.480 ops/s
# Warmup Iteration   8: 958535.721 ops/s
# Warmup Iteration   9: 954116.927 ops/s
# Warmup Iteration  10: 952948.087 ops/s
# Warmup Iteration  11: 950807.797 ops/s
# Warmup Iteration  12: 953087.383 ops/s
# Warmup Iteration  13: 951803.762 ops/s
# Warmup Iteration  14: 947449.968 ops/s
# Warmup Iteration  15: 944707.524 ops/s
# Warmup Iteration  16: 946103.511 ops/s
# Warmup Iteration  17: 1006404.402 ops/s
# Warmup Iteration  18: 999300.929 ops/s
# Warmup Iteration  19: 999748.667 ops/s
# Warmup Iteration  20: 1004063.885 ops/s
# Warmup Iteration  21: 1005501.102 ops/s
# Warmup Iteration  22: 1000420.741 ops/s
# Warmup Iteration  23: 1000477.587 ops/s
# Warmup Iteration  24: 998686.232 ops/s
# Warmup Iteration  25: 1000694.508 ops/s
# Warmup Iteration  26: 1000615.510 ops/s
# Warmup Iteration  27: 1005359.732 ops/s
# Warmup Iteration  28: 1001115.890 ops/s
# Warmup Iteration  29: 1001230.720 ops/s
# Warmup Iteration  30: 1002653.963 ops/s
Iteration   1: 1000003.233 ops/s
Iteration   2: 995854.258 ops/s
Iteration   3: 1005502.865 ops/s
Iteration   4: 998467.667 ops/s
Iteration   5: 1001116.850 ops/s
Iteration   6: 997616.452 ops/s
Iteration   7: 1000097.895 ops/s
Iteration   8: 1002162.593 ops/s
Iteration   9: 997678.982 ops/s
Iteration  10: 999373.788 ops/s
Iteration  11: 1001951.391 ops/s
Iteration  12: 998603.541 ops/s
Iteration  13: 1002140.326 ops/s
Iteration  14: 999363.404 ops/s
Iteration  15: 1000878.772 ops/s
Iteration  16: 1003146.722 ops/s
Iteration  17: 998460.233 ops/s
Iteration  18: 998839.790 ops/s
Iteration  19: 993324.497 ops/s
Iteration  20: 1005614.098 ops/s
Iteration  21: 1002034.052 ops/s
Iteration  22: 996707.341 ops/s
Iteration  23: 998333.368 ops/s
Iteration  24: 1002412.026 ops/s
Iteration  25: 1001437.930 ops/s
Iteration  26: 1002229.284 ops/s
Iteration  27: 1000051.758 ops/s
Iteration  28: 1002827.206 ops/s
Iteration  29: 1003981.903 ops/s
Iteration  30: 1002202.830 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.BlockingObservableLatestTest._Benchmark.benchmark_empty2":
  1000413.835 ±(99.9%) 1851.049 ops/s [Average]
  (min, avg, max) = (993324.497, 1000413.835, 1005614.098), stdev = 2770.564
  CI (99.9%): [998562.786, 1002264.885] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
BlockingObservableLatestTest._Benchmark.benchmark_empty2  thrpt   30  1000413.835 ± 1851.049  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDoAfterNextTest._Benchmark.benchmark_empty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDoAfterNextTest._Benchmark.benchmark_empty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 6604337.448 ops/s
# Warmup Iteration   2: 11127073.804 ops/s
# Warmup Iteration   3: 11310536.170 ops/s
# Warmup Iteration   4: 11343870.767 ops/s
# Warmup Iteration   5: 11326421.910 ops/s
# Warmup Iteration   6: 11324045.033 ops/s
# Warmup Iteration   7: 11233164.182 ops/s
# Warmup Iteration   8: 11330054.784 ops/s
# Warmup Iteration   9: 11300328.652 ops/s
# Warmup Iteration  10: 11308815.982 ops/s
# Warmup Iteration  11: 11322501.955 ops/s
# Warmup Iteration  12: 11331803.747 ops/s
# Warmup Iteration  13: 11335334.954 ops/s
# Warmup Iteration  14: 11358438.877 ops/s
# Warmup Iteration  15: 11341518.775 ops/s
# Warmup Iteration  16: 11337211.543 ops/s
# Warmup Iteration  17: 11447040.943 ops/s
# Warmup Iteration  18: 11375780.712 ops/s
# Warmup Iteration  19: 11407876.441 ops/s
# Warmup Iteration  20: 11452291.675 ops/s
# Warmup Iteration  21: 11399954.691 ops/s
# Warmup Iteration  22: 11427245.518 ops/s
# Warmup Iteration  23: 11408954.076 ops/s
# Warmup Iteration  24: 11395576.790 ops/s
# Warmup Iteration  25: 11444687.017 ops/s
# Warmup Iteration  26: 11395382.798 ops/s
# Warmup Iteration  27: 11390539.033 ops/s
# Warmup Iteration  28: 11346883.189 ops/s
# Warmup Iteration  29: 11356737.916 ops/s
# Warmup Iteration  30: 11391196.617 ops/s
Iteration   1: 11451453.766 ops/s
Iteration   2: 11372031.729 ops/s
Iteration   3: 11418132.793 ops/s
Iteration   4: 11359305.450 ops/s
Iteration   5: 11364766.195 ops/s
Iteration   6: 11417975.923 ops/s
Iteration   7: 11395493.649 ops/s
Iteration   8: 11387982.526 ops/s
Iteration   9: 11398743.440 ops/s
Iteration  10: 11448128.241 ops/s
Iteration  11: 11408029.481 ops/s
Iteration  12: 11426548.743 ops/s
Iteration  13: 11402377.464 ops/s
Iteration  14: 11379369.761 ops/s
Iteration  15: 11361951.363 ops/s
Iteration  16: 11399606.000 ops/s
Iteration  17: 11387966.886 ops/s
Iteration  18: 11388442.309 ops/s
Iteration  19: 11366070.619 ops/s
Iteration  20: 11405300.796 ops/s
Iteration  21: 11387653.231 ops/s
Iteration  22: 11432418.433 ops/s
Iteration  23: 11428430.672 ops/s
Iteration  24: 11444320.595 ops/s
Iteration  25: 11376403.977 ops/s
Iteration  26: 11396072.929 ops/s
Iteration  27: 11413513.954 ops/s
Iteration  28: 11428798.327 ops/s
Iteration  29: 11370599.533 ops/s
Iteration  30: 11401658.399 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableDoAfterNextTest._Benchmark.benchmark_empty":
  11400651.573 ±(99.9%) 17537.795 ops/s [Average]
  (min, avg, max) = (11359305.450, 11400651.573, 11451453.766), stdev = 26249.747
  CI (99.9%): [11383113.778, 11418189.367] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt         Score       Error  Units
ObservableDoAfterNextTest._Benchmark.benchmark_empty  thrpt   30  11400651.573 ± 17537.795  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapTest._Benchmark.benchmark_flatMapBiMapperWithError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapTest._Benchmark.benchmark_flatMapBiMapperWithError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 401504.571 ops/s
# Warmup Iteration   2: 582791.218 ops/s
# Warmup Iteration   3: 606606.716 ops/s
# Warmup Iteration   4: 563133.506 ops/s
# Warmup Iteration   5: 637148.547 ops/s
# Warmup Iteration   6: 639334.449 ops/s
# Warmup Iteration   7: 637727.523 ops/s
# Warmup Iteration   8: 640111.522 ops/s
# Warmup Iteration   9: 639749.717 ops/s
# Warmup Iteration  10: 641043.302 ops/s
# Warmup Iteration  11: 638385.468 ops/s
# Warmup Iteration  12: 636328.197 ops/s
# Warmup Iteration  13: 640450.194 ops/s
# Warmup Iteration  14: 636758.085 ops/s
# Warmup Iteration  15: 637563.790 ops/s
# Warmup Iteration  16: 636116.516 ops/s
# Warmup Iteration  17: 659669.749 ops/s
# Warmup Iteration  18: 661106.985 ops/s
# Warmup Iteration  19: 654496.060 ops/s
# Warmup Iteration  20: 659849.762 ops/s
# Warmup Iteration  21: 659192.926 ops/s
# Warmup Iteration  22: 659449.249 ops/s
# Warmup Iteration  23: 657811.863 ops/s
# Warmup Iteration  24: 656583.739 ops/s
# Warmup Iteration  25: 659857.336 ops/s
# Warmup Iteration  26: 657475.557 ops/s
# Warmup Iteration  27: 661118.301 ops/s
# Warmup Iteration  28: 657552.559 ops/s
# Warmup Iteration  29: 659124.601 ops/s
# Warmup Iteration  30: 657457.042 ops/s
Iteration   1: 662370.910 ops/s
Iteration   2: 656989.097 ops/s
Iteration   3: 657335.516 ops/s
Iteration   4: 658846.705 ops/s
Iteration   5: 659256.847 ops/s
Iteration   6: 661404.340 ops/s
Iteration   7: 660924.944 ops/s
Iteration   8: 659519.349 ops/s
Iteration   9: 658281.955 ops/s
Iteration  10: 658954.821 ops/s
Iteration  11: 658324.491 ops/s
Iteration  12: 660462.556 ops/s
Iteration  13: 660475.699 ops/s
Iteration  14: 661328.989 ops/s
Iteration  15: 661466.030 ops/s
Iteration  16: 657711.956 ops/s
Iteration  17: 659479.446 ops/s
Iteration  18: 657874.584 ops/s
Iteration  19: 661657.368 ops/s
Iteration  20: 658787.632 ops/s
Iteration  21: 655103.097 ops/s
Iteration  22: 659008.251 ops/s
Iteration  23: 657863.518 ops/s
Iteration  24: 660523.381 ops/s
Iteration  25: 657310.226 ops/s
Iteration  26: 657437.353 ops/s
Iteration  27: 661996.809 ops/s
Iteration  28: 658951.963 ops/s
Iteration  29: 658264.295 ops/s
Iteration  30: 660375.986 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapTest._Benchmark.benchmark_flatMapBiMapperWithError":
  659276.270 ±(99.9%) 1165.849 ops/s [Average]
  (min, avg, max) = (655103.097, 659276.270, 662370.910), stdev = 1744.988
  CI (99.9%): [658110.421, 660442.120] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score      Error  Units
ObservableFlatMapTest._Benchmark.benchmark_flatMapBiMapperWithError  thrpt   30  659276.270 ± 1165.849  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_flatMapCombinerMapperReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_flatMapCombinerMapperReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 689955.545 ops/s
# Warmup Iteration   2: 828010.012 ops/s
# Warmup Iteration   3: 789680.399 ops/s
# Warmup Iteration   4: 902891.976 ops/s
# Warmup Iteration   5: 901456.110 ops/s
# Warmup Iteration   6: 902654.391 ops/s
# Warmup Iteration   7: 898035.028 ops/s
# Warmup Iteration   8: 900415.754 ops/s
# Warmup Iteration   9: 900050.716 ops/s
# Warmup Iteration  10: 903995.398 ops/s
# Warmup Iteration  11: 901407.582 ops/s
# Warmup Iteration  12: 898244.735 ops/s
# Warmup Iteration  13: 895837.197 ops/s
# Warmup Iteration  14: 893547.433 ops/s
# Warmup Iteration  15: 895803.774 ops/s
# Warmup Iteration  16: 892621.159 ops/s
# Warmup Iteration  17: 944832.947 ops/s
# Warmup Iteration  18: 933951.266 ops/s
# Warmup Iteration  19: 937159.132 ops/s
# Warmup Iteration  20: 940331.133 ops/s
# Warmup Iteration  21: 942747.679 ops/s
# Warmup Iteration  22: 937799.327 ops/s
# Warmup Iteration  23: 942966.285 ops/s
# Warmup Iteration  24: 937605.470 ops/s
# Warmup Iteration  25: 938710.424 ops/s
# Warmup Iteration  26: 941380.901 ops/s
# Warmup Iteration  27: 931250.852 ops/s
# Warmup Iteration  28: 933807.801 ops/s
# Warmup Iteration  29: 940271.802 ops/s
# Warmup Iteration  30: 940571.986 ops/s
Iteration   1: 936021.760 ops/s
Iteration   2: 939366.781 ops/s
Iteration   3: 940495.834 ops/s
Iteration   4: 937329.218 ops/s
Iteration   5: 938958.706 ops/s
Iteration   6: 933987.356 ops/s
Iteration   7: 936190.286 ops/s
Iteration   8: 943090.712 ops/s
Iteration   9: 937717.613 ops/s
Iteration  10: 939459.553 ops/s
Iteration  11: 942131.079 ops/s
Iteration  12: 940528.923 ops/s
Iteration  13: 939798.472 ops/s
Iteration  14: 938340.015 ops/s
Iteration  15: 938559.190 ops/s
Iteration  16: 933159.359 ops/s
Iteration  17: 938902.400 ops/s
Iteration  18: 934561.734 ops/s
Iteration  19: 939867.620 ops/s
Iteration  20: 939871.969 ops/s
Iteration  21: 940914.310 ops/s
Iteration  22: 938833.839 ops/s
Iteration  23: 937468.489 ops/s
Iteration  24: 942518.051 ops/s
Iteration  25: 936712.866 ops/s
Iteration  26: 938292.355 ops/s
Iteration  27: 937732.571 ops/s
Iteration  28: 941067.948 ops/s
Iteration  29: 941975.581 ops/s
Iteration  30: 941634.708 ops/s


Result "io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_flatMapCombinerMapperReturnsNull":
  938849.643 ±(99.9%) 1662.361 ops/s [Average]
  (min, avg, max) = (933159.359, 938849.643, 943090.712), stdev = 2488.144
  CI (99.9%): [937187.282, 940512.005] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score      Error  Units
ObservableNullTests._Benchmark.benchmark_flatMapCombinerMapperReturnsNull  thrpt   30  938849.643 ± 1662.361  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_concatMapDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_concatMapDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 4167379.819 ops/s
# Warmup Iteration   2: 6203129.840 ops/s
# Warmup Iteration   3: 6962582.646 ops/s
# Warmup Iteration   4: 6976814.569 ops/s
# Warmup Iteration   5: 6965194.682 ops/s
# Warmup Iteration   6: 6954403.053 ops/s
# Warmup Iteration   7: 6928083.629 ops/s
# Warmup Iteration   8: 6948361.931 ops/s
# Warmup Iteration   9: 6984000.516 ops/s
# Warmup Iteration  10: 7006380.543 ops/s
# Warmup Iteration  11: 6963197.191 ops/s
# Warmup Iteration  12: 6913584.072 ops/s
# Warmup Iteration  13: 6934273.055 ops/s
# Warmup Iteration  14: 6977074.825 ops/s
# Warmup Iteration  15: 6956776.754 ops/s
# Warmup Iteration  16: 6942687.533 ops/s
# Warmup Iteration  17: 6895870.527 ops/s
# Warmup Iteration  18: 6933996.124 ops/s
# Warmup Iteration  19: 6929407.784 ops/s
# Warmup Iteration  20: 6903613.096 ops/s
# Warmup Iteration  21: 6911793.775 ops/s
# Warmup Iteration  22: 6970772.481 ops/s
# Warmup Iteration  23: 6927159.906 ops/s
# Warmup Iteration  24: 6908335.905 ops/s
# Warmup Iteration  25: 6853981.320 ops/s
# Warmup Iteration  26: 6896944.133 ops/s
# Warmup Iteration  27: 6926597.510 ops/s
# Warmup Iteration  28: 6904644.076 ops/s
# Warmup Iteration  29: 6934423.821 ops/s
# Warmup Iteration  30: 6970303.059 ops/s
Iteration   1: 6855230.587 ops/s
Iteration   2: 6954048.586 ops/s
Iteration   3: 6925043.703 ops/s
Iteration   4: 6996382.213 ops/s
Iteration   5: 6983744.635 ops/s
Iteration   6: 6981996.607 ops/s
Iteration   7: 6997953.195 ops/s
Iteration   8: 6937284.931 ops/s
Iteration   9: 6892370.724 ops/s
Iteration  10: 6938516.610 ops/s
Iteration  11: 6892230.156 ops/s
Iteration  12: 6951632.821 ops/s
Iteration  13: 6919010.404 ops/s
Iteration  14: 6927845.823 ops/s
Iteration  15: 6950038.789 ops/s
Iteration  16: 6926577.020 ops/s
Iteration  17: 6939566.120 ops/s
Iteration  18: 6892570.643 ops/s
Iteration  19: 6934461.691 ops/s
Iteration  20: 6910921.957 ops/s
Iteration  21: 6912353.064 ops/s
Iteration  22: 6934771.998 ops/s
Iteration  23: 6928074.708 ops/s
Iteration  24: 6872882.838 ops/s
Iteration  25: 7034033.238 ops/s
Iteration  26: 6946814.278 ops/s
Iteration  27: 7019646.401 ops/s
Iteration  28: 6962085.751 ops/s
Iteration  29: 6959243.307 ops/s
Iteration  30: 6955067.709 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_concatMapDelayError":
  6941080.017 ±(99.9%) 27247.353 ops/s [Average]
  (min, avg, max) = (6855230.587, 6941080.017, 7034033.238), stdev = 40782.558
  CI (99.9%): [6913832.664, 6968327.369] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score       Error  Units
ObservableConcatMapSchedulerTest._Benchmark.benchmark_concatMapDelayError  thrpt   30  6941080.017 ± 27247.353  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithSizeTest._Benchmark.benchmark_errorExact$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithSizeTest._Benchmark.benchmark_errorExact

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 677972.810 ops/s
# Warmup Iteration   2: 853561.733 ops/s
# Warmup Iteration   3: 880249.324 ops/s
# Warmup Iteration   4: 928381.933 ops/s
# Warmup Iteration   5: 962988.099 ops/s
# Warmup Iteration   6: 966288.266 ops/s
# Warmup Iteration   7: 963262.700 ops/s
# Warmup Iteration   8: 957890.421 ops/s
# Warmup Iteration   9: 967692.833 ops/s
# Warmup Iteration  10: 965111.053 ops/s
# Warmup Iteration  11: 969569.803 ops/s
# Warmup Iteration  12: 963965.026 ops/s
# Warmup Iteration  13: 964190.198 ops/s
# Warmup Iteration  14: 962320.238 ops/s
# Warmup Iteration  15: 964815.946 ops/s
# Warmup Iteration  16: 959879.114 ops/s
# Warmup Iteration  17: 1017277.148 ops/s
# Warmup Iteration  18: 1007062.995 ops/s
# Warmup Iteration  19: 1015029.922 ops/s
# Warmup Iteration  20: 1018674.126 ops/s
# Warmup Iteration  21: 1009198.558 ops/s
# Warmup Iteration  22: 1009752.458 ops/s
# Warmup Iteration  23: 1014330.053 ops/s
# Warmup Iteration  24: 1023138.246 ops/s
# Warmup Iteration  25: 1012069.241 ops/s
# Warmup Iteration  26: 1011521.976 ops/s
# Warmup Iteration  27: 1013276.523 ops/s
# Warmup Iteration  28: 1013819.638 ops/s
# Warmup Iteration  29: 1014040.531 ops/s
# Warmup Iteration  30: 1015696.775 ops/s
Iteration   1: 1018543.568 ops/s
Iteration   2: 1012128.673 ops/s
Iteration   3: 1016573.030 ops/s
Iteration   4: 1013567.904 ops/s
Iteration   5: 1019975.770 ops/s
Iteration   6: 1011129.237 ops/s
Iteration   7: 1015118.738 ops/s
Iteration   8: 1019192.718 ops/s
Iteration   9: 1019395.773 ops/s
Iteration  10: 1017024.893 ops/s
Iteration  11: 1014089.949 ops/s
Iteration  12: 1022280.019 ops/s
Iteration  13: 1012972.444 ops/s
Iteration  14: 1016657.990 ops/s
Iteration  15: 1013806.866 ops/s
Iteration  16: 1010223.926 ops/s
Iteration  17: 1009467.039 ops/s
Iteration  18: 1016275.951 ops/s
Iteration  19: 1011087.025 ops/s
Iteration  20: 1013026.765 ops/s
Iteration  21: 1018025.402 ops/s
Iteration  22: 1017264.784 ops/s
Iteration  23: 1008066.998 ops/s
Iteration  24: 1012584.617 ops/s
Iteration  25: 1005765.536 ops/s
Iteration  26: 1016804.297 ops/s
Iteration  27: 1014647.185 ops/s
Iteration  28: 1019806.684 ops/s
Iteration  29: 1015733.250 ops/s
Iteration  30: 1009164.413 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithSizeTest._Benchmark.benchmark_errorExact":
  1014680.048 ±(99.9%) 2643.249 ops/s [Average]
  (min, avg, max) = (1005765.536, 1014680.048, 1022280.019), stdev = 3956.291
  CI (99.9%): [1012036.799, 1017323.297] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
ObservableWindowWithSizeTest._Benchmark.benchmark_errorExact  thrpt   30  1014680.048 ± 2643.249  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithSizeTest._Benchmark.benchmark_errorOverlap$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithSizeTest._Benchmark.benchmark_errorOverlap

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 616773.435 ops/s
# Warmup Iteration   2: 825253.526 ops/s
# Warmup Iteration   3: 872700.554 ops/s
# Warmup Iteration   4: 948152.832 ops/s
# Warmup Iteration   5: 952051.022 ops/s
# Warmup Iteration   6: 954171.845 ops/s
# Warmup Iteration   7: 952522.506 ops/s
# Warmup Iteration   8: 955511.792 ops/s
# Warmup Iteration   9: 948457.235 ops/s
# Warmup Iteration  10: 955313.501 ops/s
# Warmup Iteration  11: 945989.458 ops/s
# Warmup Iteration  12: 952066.376 ops/s
# Warmup Iteration  13: 948271.201 ops/s
# Warmup Iteration  14: 944742.149 ops/s
# Warmup Iteration  15: 946618.026 ops/s
# Warmup Iteration  16: 945094.896 ops/s
# Warmup Iteration  17: 999538.330 ops/s
# Warmup Iteration  18: 997362.547 ops/s
# Warmup Iteration  19: 1005329.953 ops/s
# Warmup Iteration  20: 1001340.658 ops/s
# Warmup Iteration  21: 998952.622 ops/s
# Warmup Iteration  22: 996801.748 ops/s
# Warmup Iteration  23: 996338.940 ops/s
# Warmup Iteration  24: 1004249.134 ops/s
# Warmup Iteration  25: 998253.376 ops/s
# Warmup Iteration  26: 994984.806 ops/s
# Warmup Iteration  27: 1000072.275 ops/s
# Warmup Iteration  28: 1003313.495 ops/s
# Warmup Iteration  29: 999750.300 ops/s
# Warmup Iteration  30: 1002370.006 ops/s
Iteration   1: 1004997.089 ops/s
Iteration   2: 995421.739 ops/s
Iteration   3: 1001396.392 ops/s
Iteration   4: 1000240.941 ops/s
Iteration   5: 1002174.024 ops/s
Iteration   6: 998420.144 ops/s
Iteration   7: 1005521.829 ops/s
Iteration   8: 1003804.842 ops/s
Iteration   9: 996768.578 ops/s
Iteration  10: 993696.800 ops/s
Iteration  11: 1005346.349 ops/s
Iteration  12: 999682.242 ops/s
Iteration  13: 999633.498 ops/s
Iteration  14: 998320.561 ops/s
Iteration  15: 999728.035 ops/s
Iteration  16: 1002112.026 ops/s
Iteration  17: 999385.760 ops/s
Iteration  18: 1001840.401 ops/s
Iteration  19: 1000713.480 ops/s
Iteration  20: 999768.771 ops/s
Iteration  21: 997722.390 ops/s
Iteration  22: 1003713.259 ops/s
Iteration  23: 999400.047 ops/s
Iteration  24: 999817.930 ops/s
Iteration  25: 996267.622 ops/s
Iteration  26: 1000605.323 ops/s
Iteration  27: 1006687.943 ops/s
Iteration  28: 1003842.301 ops/s
Iteration  29: 1001766.423 ops/s
Iteration  30: 1004000.431 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithSizeTest._Benchmark.benchmark_errorOverlap":
  1000759.906 ±(99.9%) 2097.257 ops/s [Average]
  (min, avg, max) = (993696.800, 1000759.906, 1006687.943), stdev = 3139.076
  CI (99.9%): [998662.649, 1002857.163] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
ObservableWindowWithSizeTest._Benchmark.benchmark_errorOverlap  thrpt   30  1000759.906 ± 2097.257  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithSizeTest._Benchmark.benchmark_errorSkip$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithSizeTest._Benchmark.benchmark_errorSkip

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 634559.010 ops/s
# Warmup Iteration   2: 837037.068 ops/s
# Warmup Iteration   3: 811193.618 ops/s
# Warmup Iteration   4: 924200.373 ops/s
# Warmup Iteration   5: 923334.056 ops/s
# Warmup Iteration   6: 924970.455 ops/s
# Warmup Iteration   7: 923677.824 ops/s
# Warmup Iteration   8: 922456.854 ops/s
# Warmup Iteration   9: 922347.953 ops/s
# Warmup Iteration  10: 920983.114 ops/s
# Warmup Iteration  11: 922300.681 ops/s
# Warmup Iteration  12: 923427.922 ops/s
# Warmup Iteration  13: 922497.028 ops/s
# Warmup Iteration  14: 913908.184 ops/s
# Warmup Iteration  15: 916165.602 ops/s
# Warmup Iteration  16: 917508.372 ops/s
# Warmup Iteration  17: 973044.441 ops/s
# Warmup Iteration  18: 967249.250 ops/s
# Warmup Iteration  19: 977081.448 ops/s
# Warmup Iteration  20: 972937.671 ops/s
# Warmup Iteration  21: 974722.293 ops/s
# Warmup Iteration  22: 969400.498 ops/s
# Warmup Iteration  23: 970421.231 ops/s
# Warmup Iteration  24: 966916.133 ops/s
# Warmup Iteration  25: 971546.028 ops/s
# Warmup Iteration  26: 972170.675 ops/s
# Warmup Iteration  27: 968570.682 ops/s
# Warmup Iteration  28: 973288.626 ops/s
# Warmup Iteration  29: 973723.634 ops/s
# Warmup Iteration  30: 967098.449 ops/s
Iteration   1: 973593.336 ops/s
Iteration   2: 976883.635 ops/s
Iteration   3: 968081.255 ops/s
Iteration   4: 975393.584 ops/s
Iteration   5: 974040.737 ops/s
Iteration   6: 973497.939 ops/s
Iteration   7: 972438.195 ops/s
Iteration   8: 975046.495 ops/s
Iteration   9: 968395.522 ops/s
Iteration  10: 972626.322 ops/s
Iteration  11: 977133.973 ops/s
Iteration  12: 972753.981 ops/s
Iteration  13: 971576.114 ops/s
Iteration  14: 968251.548 ops/s
Iteration  15: 972226.448 ops/s
Iteration  16: 975885.216 ops/s
Iteration  17: 972819.153 ops/s
Iteration  18: 972649.156 ops/s
Iteration  19: 972146.013 ops/s
Iteration  20: 972937.580 ops/s
Iteration  21: 974464.811 ops/s
Iteration  22: 970125.802 ops/s
Iteration  23: 973429.090 ops/s
Iteration  24: 971718.854 ops/s
Iteration  25: 974772.584 ops/s
Iteration  26: 967762.253 ops/s
Iteration  27: 972196.250 ops/s
Iteration  28: 972602.840 ops/s
Iteration  29: 974781.172 ops/s
Iteration  30: 974019.374 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithSizeTest._Benchmark.benchmark_errorSkip":
  972808.308 ±(99.9%) 1621.380 ops/s [Average]
  (min, avg, max) = (967762.253, 972808.308, 977133.973), stdev = 2426.806
  CI (99.9%): [971186.927, 974429.688] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
ObservableWindowWithSizeTest._Benchmark.benchmark_errorSkip  thrpt   30  972808.308 ± 1621.380  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDetachTest._Benchmark.benchmark_error$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDetachTest._Benchmark.benchmark_error

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 728549.150 ops/s
# Warmup Iteration   2: 858182.465 ops/s
# Warmup Iteration   3: 957810.316 ops/s
# Warmup Iteration   4: 954798.046 ops/s
# Warmup Iteration   5: 959494.725 ops/s
# Warmup Iteration   6: 957492.369 ops/s
# Warmup Iteration   7: 955093.064 ops/s
# Warmup Iteration   8: 952151.467 ops/s
# Warmup Iteration   9: 957270.930 ops/s
# Warmup Iteration  10: 957634.296 ops/s
# Warmup Iteration  11: 950098.635 ops/s
# Warmup Iteration  12: 957269.533 ops/s
# Warmup Iteration  13: 951305.190 ops/s
# Warmup Iteration  14: 952253.677 ops/s
# Warmup Iteration  15: 948006.230 ops/s
# Warmup Iteration  16: 953759.929 ops/s
# Warmup Iteration  17: 1014902.785 ops/s
# Warmup Iteration  18: 1018270.764 ops/s
# Warmup Iteration  19: 1008349.609 ops/s
# Warmup Iteration  20: 1014800.259 ops/s
# Warmup Iteration  21: 1013942.354 ops/s
# Warmup Iteration  22: 1013103.275 ops/s
# Warmup Iteration  23: 1015768.037 ops/s
# Warmup Iteration  24: 1016315.762 ops/s
# Warmup Iteration  25: 1011516.336 ops/s
# Warmup Iteration  26: 1015886.741 ops/s
# Warmup Iteration  27: 1017083.360 ops/s
# Warmup Iteration  28: 1018734.681 ops/s
# Warmup Iteration  29: 1013264.383 ops/s
# Warmup Iteration  30: 1015412.059 ops/s
Iteration   1: 1012583.666 ops/s
Iteration   2: 1013533.704 ops/s
Iteration   3: 1013401.907 ops/s
Iteration   4: 1009202.793 ops/s
Iteration   5: 1015217.613 ops/s
Iteration   6: 1013704.325 ops/s
Iteration   7: 1015881.060 ops/s
Iteration   8: 1013839.302 ops/s
Iteration   9: 1016026.008 ops/s
Iteration  10: 1011159.135 ops/s
Iteration  11: 1014443.039 ops/s
Iteration  12: 1017004.173 ops/s
Iteration  13: 1019329.128 ops/s
Iteration  14: 1019279.387 ops/s
Iteration  15: 1015429.653 ops/s
Iteration  16: 1012166.656 ops/s
Iteration  17: 1010100.614 ops/s
Iteration  18: 1021911.009 ops/s
Iteration  19: 1014223.112 ops/s
Iteration  20: 1016138.042 ops/s
Iteration  21: 1016832.230 ops/s
Iteration  22: 1018056.555 ops/s
Iteration  23: 981607.996 ops/s
Iteration  24: 789640.646 ops/s
Iteration  25: 731153.239 ops/s
Iteration  26: 779869.433 ops/s
Iteration  27: 742350.043 ops/s
Iteration  28: 764677.813 ops/s
Iteration  29: 758368.938 ops/s
Iteration  30: 750760.121 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableDetachTest._Benchmark.benchmark_error":
  954263.045 ±(99.9%) 73394.867 ops/s [Average]
  (min, avg, max) = (731153.239, 954263.045, 1021911.009), stdev = 109853.990
  CI (99.9%): [880868.178, 1027657.912] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt       Score       Error  Units
ObservableDetachTest._Benchmark.benchmark_error  thrpt   30  954263.045 ± 73394.867  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_error$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_error

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 328995.313 ops/s
# Warmup Iteration   2: 576933.627 ops/s
# Warmup Iteration   3: 661993.201 ops/s
# Warmup Iteration   4: 690636.374 ops/s
# Warmup Iteration   5: 596872.624 ops/s
# Warmup Iteration   6: 722450.391 ops/s
# Warmup Iteration   7: 705489.456 ops/s
# Warmup Iteration   8: 729163.320 ops/s
# Warmup Iteration   9: 699745.064 ops/s
# Warmup Iteration  10: 719190.254 ops/s
# Warmup Iteration  11: 708802.506 ops/s
# Warmup Iteration  12: 712554.587 ops/s
# Warmup Iteration  13: 733881.260 ops/s
# Warmup Iteration  14: 688661.571 ops/s
# Warmup Iteration  15: 760791.860 ops/s
# Warmup Iteration  16: 698762.423 ops/s
# Warmup Iteration  17: 769784.342 ops/s
# Warmup Iteration  18: 736856.442 ops/s
# Warmup Iteration  19: 768843.564 ops/s
# Warmup Iteration  20: 770617.863 ops/s
# Warmup Iteration  21: 749726.591 ops/s
# Warmup Iteration  22: 770007.300 ops/s
# Warmup Iteration  23: 747544.900 ops/s
# Warmup Iteration  24: 741014.554 ops/s
# Warmup Iteration  25: 765193.194 ops/s
# Warmup Iteration  26: 732848.638 ops/s
# Warmup Iteration  27: 776231.403 ops/s
# Warmup Iteration  28: 720722.223 ops/s
# Warmup Iteration  29: 780657.535 ops/s
# Warmup Iteration  30: 748289.469 ops/s
Iteration   1: 795576.261 ops/s
Iteration   2: 762502.844 ops/s
Iteration   3: 779171.120 ops/s
Iteration   4: 746516.672 ops/s
Iteration   5: 745398.499 ops/s
Iteration   6: 777621.434 ops/s
Iteration   7: 740706.905 ops/s
Iteration   8: 774288.371 ops/s
Iteration   9: 739860.626 ops/s
Iteration  10: 772385.672 ops/s
Iteration  11: 737845.590 ops/s
Iteration  12: 776336.122 ops/s
Iteration  13: 749278.630 ops/s
Iteration  14: 752144.163 ops/s
Iteration  15: 760932.788 ops/s
Iteration  16: 770020.209 ops/s
Iteration  17: 659470.668 ops/s
Iteration  18: 726521.305 ops/s
Iteration  19: 783497.827 ops/s
Iteration  20: 733262.612 ops/s
Iteration  21: 766638.464 ops/s
Iteration  22: 763084.035 ops/s
Iteration  23: 754698.401 ops/s
Iteration  24: 740369.259 ops/s
Iteration  25: 756277.047 ops/s
Iteration  26: 776878.653 ops/s
Iteration  27: 742154.157 ops/s
Iteration  28: 777883.622 ops/s
Iteration  29: 740776.901 ops/s
Iteration  30: 768133.850 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_error":
  755674.424 ±(99.9%) 16777.972 ops/s [Average]
  (min, avg, max) = (659470.668, 755674.424, 795576.261), stdev = 25112.481
  CI (99.9%): [738896.451, 772452.396] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score       Error  Units
ObservableConcatMapSchedulerTest._Benchmark.benchmark_error  thrpt   30  755674.424 ± 16777.972  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDoAfterNextTest._Benchmark.benchmark_errorConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDoAfterNextTest._Benchmark.benchmark_errorConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 176626.571 ops/s
# Warmup Iteration   2: 573399.713 ops/s
# Warmup Iteration   3: 711024.460 ops/s
# Warmup Iteration   4: 659909.763 ops/s
# Warmup Iteration   5: 702799.224 ops/s
# Warmup Iteration   6: 685229.993 ops/s
# Warmup Iteration   7: 679086.810 ops/s
# Warmup Iteration   8: 673781.258 ops/s
# Warmup Iteration   9: 694948.039 ops/s
# Warmup Iteration  10: 680822.625 ops/s
# Warmup Iteration  11: 663387.467 ops/s
# Warmup Iteration  12: 676240.196 ops/s
# Warmup Iteration  13: 664398.566 ops/s
# Warmup Iteration  14: 715701.564 ops/s
# Warmup Iteration  15: 678503.087 ops/s
# Warmup Iteration  16: 663415.185 ops/s
# Warmup Iteration  17: 741240.223 ops/s
# Warmup Iteration  18: 727548.594 ops/s
# Warmup Iteration  19: 771343.991 ops/s
# Warmup Iteration  20: 707578.536 ops/s
# Warmup Iteration  21: 744843.069 ops/s
# Warmup Iteration  22: 692270.955 ops/s
# Warmup Iteration  23: 735727.896 ops/s
# Warmup Iteration  24: 748201.804 ops/s
# Warmup Iteration  25: 727140.275 ops/s
# Warmup Iteration  26: 766200.702 ops/s
# Warmup Iteration  27: 722501.244 ops/s
# Warmup Iteration  28: 738424.633 ops/s
# Warmup Iteration  29: 750664.538 ops/s
# Warmup Iteration  30: 708712.502 ops/s
Iteration   1: 745349.648 ops/s
Iteration   2: 729317.364 ops/s
Iteration   3: 741666.768 ops/s
Iteration   4: 714008.880 ops/s
Iteration   5: 733756.819 ops/s
Iteration   6: 722566.009 ops/s
Iteration   7: 721007.221 ops/s
Iteration   8: 765854.214 ops/s
Iteration   9: 732108.833 ops/s
Iteration  10: 756098.245 ops/s
Iteration  11: 723484.263 ops/s
Iteration  12: 756879.844 ops/s
Iteration  13: 758149.021 ops/s
Iteration  14: 704744.182 ops/s
Iteration  15: 751489.975 ops/s
Iteration  16: 744052.966 ops/s
Iteration  17: 726631.783 ops/s
Iteration  18: 733664.534 ops/s
Iteration  19: 721645.277 ops/s
Iteration  20: 756404.243 ops/s
Iteration  21: 747209.129 ops/s
Iteration  22: 727059.956 ops/s
Iteration  23: 740653.029 ops/s
Iteration  24: 728618.640 ops/s
Iteration  25: 758318.230 ops/s
Iteration  26: 767853.998 ops/s
Iteration  27: 716312.506 ops/s
Iteration  28: 739840.896 ops/s
Iteration  29: 720133.592 ops/s
Iteration  30: 759849.974 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableDoAfterNextTest._Benchmark.benchmark_errorConditional":
  738157.668 ±(99.9%) 11321.056 ops/s [Average]
  (min, avg, max) = (704744.182, 738157.668, 767853.998), stdev = 16944.825
  CI (99.9%): [726836.612, 749478.724] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score       Error  Units
ObservableDoAfterNextTest._Benchmark.benchmark_errorConditional  thrpt   30  738157.668 ± 11321.056  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingleTest._Benchmark.benchmark_scalarEmptySource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingleTest._Benchmark.benchmark_scalarEmptySource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1355087.037 ops/s
# Warmup Iteration   2: 6290349.284 ops/s
# Warmup Iteration   3: 8114208.686 ops/s
# Warmup Iteration   4: 8485535.472 ops/s
# Warmup Iteration   5: 8526107.461 ops/s
# Warmup Iteration   6: 8803016.186 ops/s
# Warmup Iteration   7: 8563604.528 ops/s
# Warmup Iteration   8: 8738735.099 ops/s
# Warmup Iteration   9: 8501047.884 ops/s
# Warmup Iteration  10: 8463470.660 ops/s
# Warmup Iteration  11: 8640699.143 ops/s
# Warmup Iteration  12: 8214884.299 ops/s
# Warmup Iteration  13: 8324749.849 ops/s
# Warmup Iteration  14: 8981760.275 ops/s
# Warmup Iteration  15: 8313284.350 ops/s
# Warmup Iteration  16: 8462201.780 ops/s
# Warmup Iteration  17: 8750100.182 ops/s
# Warmup Iteration  18: 8688479.053 ops/s
# Warmup Iteration  19: 8381084.118 ops/s
# Warmup Iteration  20: 8589955.921 ops/s
# Warmup Iteration  21: 8574649.221 ops/s
# Warmup Iteration  22: 8450851.126 ops/s
# Warmup Iteration  23: 8699129.505 ops/s
# Warmup Iteration  24: 8327653.886 ops/s
# Warmup Iteration  25: 8429083.269 ops/s
# Warmup Iteration  26: 8978544.426 ops/s
# Warmup Iteration  27: 8431514.949 ops/s
# Warmup Iteration  28: 8489086.751 ops/s
# Warmup Iteration  29: 8286860.540 ops/s
# Warmup Iteration  30: 8859608.638 ops/s
Iteration   1: 8251045.769 ops/s
Iteration   2: 8515865.485 ops/s
Iteration   3: 8801079.988 ops/s
Iteration   4: 8426104.683 ops/s
Iteration   5: 8548658.160 ops/s
Iteration   6: 8338003.668 ops/s
Iteration   7: 8588708.366 ops/s
Iteration   8: 8503773.357 ops/s
Iteration   9: 8494201.061 ops/s
Iteration  10: 8878339.892 ops/s
Iteration  11: 8526867.512 ops/s
Iteration  12: 6616330.255 ops/s
Iteration  13: 8783303.978 ops/s
Iteration  14: 8385946.284 ops/s
Iteration  15: 8387792.994 ops/s
Iteration  16: 8768417.339 ops/s
Iteration  17: 8393119.444 ops/s
Iteration  18: 8237889.088 ops/s
Iteration  19: 8662050.409 ops/s
Iteration  20: 8408238.034 ops/s
Iteration  21: 8707098.598 ops/s
Iteration  22: 8248091.079 ops/s
Iteration  23: 8804177.455 ops/s
Iteration  24: 8406563.304 ops/s
Iteration  25: 8406620.627 ops/s
Iteration  26: 8380501.048 ops/s
Iteration  27: 8488274.695 ops/s
Iteration  28: 8858441.298 ops/s
Iteration  29: 8494288.686 ops/s
Iteration  30: 8594382.934 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingleTest._Benchmark.benchmark_scalarEmptySource":
  8463472.516 ±(99.9%) 263410.211 ops/s [Average]
  (min, avg, max) = (6616330.255, 8463472.516, 8878339.892), stdev = 394260.033
  CI (99.9%): [8200062.305, 8726882.727] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score        Error  Units
ObservableSwitchMapSingleTest._Benchmark.benchmark_scalarEmptySource  thrpt   30  8463472.516 ± 263410.211  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableAmbTest._Benchmark.benchmark_emptyIterable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableAmbTest._Benchmark.benchmark_emptyIterable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1494726.263 ops/s
# Warmup Iteration   2: 5342742.577 ops/s
# Warmup Iteration   3: 6876597.059 ops/s
# Warmup Iteration   4: 6723431.548 ops/s
# Warmup Iteration   5: 7115082.694 ops/s
# Warmup Iteration   6: 6911274.737 ops/s
# Warmup Iteration   7: 6739274.517 ops/s
# Warmup Iteration   8: 7074267.653 ops/s
# Warmup Iteration   9: 6667075.696 ops/s
# Warmup Iteration  10: 6749817.370 ops/s
# Warmup Iteration  11: 7144833.362 ops/s
# Warmup Iteration  12: 6716189.685 ops/s
# Warmup Iteration  13: 6978328.401 ops/s
# Warmup Iteration  14: 6755251.449 ops/s
# Warmup Iteration  15: 6885007.209 ops/s
# Warmup Iteration  16: 7181966.429 ops/s
# Warmup Iteration  17: 6765985.470 ops/s
# Warmup Iteration  18: 6792655.946 ops/s
# Warmup Iteration  19: 7211306.829 ops/s
# Warmup Iteration  20: 7016229.166 ops/s
# Warmup Iteration  21: 6774927.112 ops/s
# Warmup Iteration  22: 7313639.591 ops/s
# Warmup Iteration  23: 7096719.042 ops/s
# Warmup Iteration  24: 6697502.579 ops/s
# Warmup Iteration  25: 7107926.451 ops/s
# Warmup Iteration  26: 6647126.341 ops/s
# Warmup Iteration  27: 7120369.077 ops/s
# Warmup Iteration  28: 6746756.135 ops/s
# Warmup Iteration  29: 6950149.077 ops/s
# Warmup Iteration  30: 7129681.893 ops/s
Iteration   1: 6995541.059 ops/s
Iteration   2: 7046548.205 ops/s
Iteration   3: 6876117.861 ops/s
Iteration   4: 6899557.139 ops/s
Iteration   5: 6893883.005 ops/s
Iteration   6: 6995069.257 ops/s
Iteration   7: 6913433.524 ops/s
Iteration   8: 7088084.157 ops/s
Iteration   9: 6730859.796 ops/s
Iteration  10: 7071166.815 ops/s
Iteration  11: 6928413.903 ops/s
Iteration  12: 6866124.388 ops/s
Iteration  13: 7267195.340 ops/s
Iteration  14: 6821882.369 ops/s
Iteration  15: 6968516.903 ops/s
Iteration  16: 7197028.593 ops/s
Iteration  17: 6980838.720 ops/s
Iteration  18: 7116622.386 ops/s
Iteration  19: 6835299.143 ops/s
Iteration  20: 7102988.967 ops/s
Iteration  21: 7278120.007 ops/s
Iteration  22: 6834287.598 ops/s
Iteration  23: 7023657.012 ops/s
Iteration  24: 7014459.038 ops/s
Iteration  25: 7028836.251 ops/s
Iteration  26: 6944389.153 ops/s
Iteration  27: 7036097.091 ops/s
Iteration  28: 7098695.278 ops/s
Iteration  29: 6790828.369 ops/s
Iteration  30: 7202918.541 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableAmbTest._Benchmark.benchmark_emptyIterable":
  6994915.329 ±(99.9%) 92346.791 ops/s [Average]
  (min, avg, max) = (6730859.796, 6994915.329, 7278120.007), stdev = 138220.340
  CI (99.9%): [6902568.538, 7087262.120] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
ObservableAmbTest._Benchmark.benchmark_emptyIterable  thrpt   30  6994915.329 ± 92346.791  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableGroupByTest._Benchmark.benchmark_existingGroupValueSelectorFails$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableGroupByTest._Benchmark.benchmark_existingGroupValueSelectorFails

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 35131.540 ops/s
# Warmup Iteration   2: 99109.694 ops/s
# Warmup Iteration   3: 199073.578 ops/s
# Warmup Iteration   4: 342123.873 ops/s
# Warmup Iteration   5: 334119.578 ops/s
# Warmup Iteration   6: 390503.728 ops/s
# Warmup Iteration   7: 361882.108 ops/s
# Warmup Iteration   8: 386966.738 ops/s
# Warmup Iteration   9: 379483.474 ops/s
# Warmup Iteration  10: 390359.662 ops/s
# Warmup Iteration  11: 370065.386 ops/s
# Warmup Iteration  12: 374206.946 ops/s
# Warmup Iteration  13: 401929.311 ops/s
# Warmup Iteration  14: 364547.991 ops/s
# Warmup Iteration  15: 383707.475 ops/s
# Warmup Iteration  16: 371253.825 ops/s
# Warmup Iteration  17: 391577.445 ops/s
# Warmup Iteration  18: 407575.785 ops/s
# Warmup Iteration  19: 386507.331 ops/s
# Warmup Iteration  20: 382747.867 ops/s
# Warmup Iteration  21: 402576.340 ops/s
# Warmup Iteration  22: 387960.878 ops/s
# Warmup Iteration  23: 378652.292 ops/s
# Warmup Iteration  24: 392760.393 ops/s
# Warmup Iteration  25: 401337.336 ops/s
# Warmup Iteration  26: 386003.363 ops/s
# Warmup Iteration  27: 387979.810 ops/s
# Warmup Iteration  28: 384477.478 ops/s
# Warmup Iteration  29: 401800.830 ops/s
# Warmup Iteration  30: 387655.199 ops/s
Iteration   1: 391717.381 ops/s
Iteration   2: 402580.248 ops/s
Iteration   3: 370229.518 ops/s
Iteration   4: 406363.959 ops/s
Iteration   5: 391507.419 ops/s
Iteration   6: 387298.085 ops/s
Iteration   7: 329788.439 ops/s
Iteration   8: 384361.722 ops/s
Iteration   9: 397552.758 ops/s
Iteration  10: 386686.641 ops/s
Iteration  11: 381086.807 ops/s
Iteration  12: 409703.509 ops/s
Iteration  13: 381135.835 ops/s
Iteration  14: 401966.908 ops/s
Iteration  15: 391656.888 ops/s
Iteration  16: 399341.040 ops/s
Iteration  17: 388363.866 ops/s
Iteration  18: 384551.399 ops/s
Iteration  19: 400129.768 ops/s
Iteration  20: 375778.044 ops/s
Iteration  21: 402317.016 ops/s
Iteration  22: 383992.828 ops/s
Iteration  23: 394129.937 ops/s
Iteration  24: 407880.436 ops/s
Iteration  25: 391200.783 ops/s
Iteration  26: 389397.179 ops/s
Iteration  27: 383310.648 ops/s
Iteration  28: 384467.789 ops/s
Iteration  29: 399751.450 ops/s
Iteration  30: 379230.008 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableGroupByTest._Benchmark.benchmark_existingGroupValueSelectorFails":
  389249.277 ±(99.9%) 9977.261 ops/s [Average]
  (min, avg, max) = (329788.439, 389249.277, 409703.509), stdev = 14933.496
  CI (99.9%): [379272.015, 399226.538] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score      Error  Units
ObservableGroupByTest._Benchmark.benchmark_existingGroupValueSelectorFails  thrpt   30  389249.277 ± 9977.261  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromTest._Benchmark.benchmark_manyIteratorThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromTest._Benchmark.benchmark_manyIteratorThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 167966.029 ops/s
# Warmup Iteration   2: 558973.381 ops/s
# Warmup Iteration   3: 597917.669 ops/s
# Warmup Iteration   4: 616065.983 ops/s
# Warmup Iteration   5: 558400.239 ops/s
# Warmup Iteration   6: 642170.608 ops/s
# Warmup Iteration   7: 639308.180 ops/s
# Warmup Iteration   8: 618994.078 ops/s
# Warmup Iteration   9: 638746.945 ops/s
# Warmup Iteration  10: 632630.581 ops/s
# Warmup Iteration  11: 630548.815 ops/s
# Warmup Iteration  12: 656078.048 ops/s
# Warmup Iteration  13: 610965.994 ops/s
# Warmup Iteration  14: 655990.314 ops/s
# Warmup Iteration  15: 616343.092 ops/s
# Warmup Iteration  16: 640179.074 ops/s
# Warmup Iteration  17: 682392.977 ops/s
# Warmup Iteration  18: 655662.016 ops/s
# Warmup Iteration  19: 694468.750 ops/s
# Warmup Iteration  20: 659496.694 ops/s
# Warmup Iteration  21: 678147.252 ops/s
# Warmup Iteration  22: 660660.008 ops/s
# Warmup Iteration  23: 663714.991 ops/s
# Warmup Iteration  24: 662283.601 ops/s
# Warmup Iteration  25: 686927.914 ops/s
# Warmup Iteration  26: 649967.931 ops/s
# Warmup Iteration  27: 683405.686 ops/s
# Warmup Iteration  28: 649942.583 ops/s
# Warmup Iteration  29: 685451.608 ops/s
# Warmup Iteration  30: 648651.332 ops/s
Iteration   1: 689177.213 ops/s
Iteration   2: 677698.344 ops/s
Iteration   3: 663605.413 ops/s
Iteration   4: 696809.762 ops/s
Iteration   5: 649039.267 ops/s
Iteration   6: 684680.670 ops/s
Iteration   7: 680571.929 ops/s
Iteration   8: 650142.813 ops/s
Iteration   9: 690790.140 ops/s
Iteration  10: 644164.062 ops/s
Iteration  11: 703294.169 ops/s
Iteration  12: 665099.432 ops/s
Iteration  13: 666151.092 ops/s
Iteration  14: 669323.980 ops/s
Iteration  15: 660820.943 ops/s
Iteration  16: 665443.167 ops/s
Iteration  17: 646252.121 ops/s
Iteration  18: 669344.943 ops/s
Iteration  19: 648503.403 ops/s
Iteration  20: 656933.139 ops/s
Iteration  21: 691890.625 ops/s
Iteration  22: 658279.719 ops/s
Iteration  23: 679080.340 ops/s
Iteration  24: 650538.953 ops/s
Iteration  25: 691432.212 ops/s
Iteration  26: 661491.717 ops/s
Iteration  27: 681738.996 ops/s
Iteration  28: 646469.417 ops/s
Iteration  29: 675881.331 ops/s
Iteration  30: 667648.950 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromTest._Benchmark.benchmark_manyIteratorThrows":
  669409.942 ±(99.9%) 11253.802 ops/s [Average]
  (min, avg, max) = (644164.062, 669409.942, 703294.169), stdev = 16844.162
  CI (99.9%): [658156.140, 680663.744] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score       Error  Units
ObservableWithLatestFromTest._Benchmark.benchmark_manyIteratorThrows  thrpt   30  669409.942 ± 11253.802  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_pollThrowsDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_pollThrowsDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 101666.614 ops/s
# Warmup Iteration   2: 360985.136 ops/s
# Warmup Iteration   3: 448710.434 ops/s
# Warmup Iteration   4: 428220.420 ops/s
# Warmup Iteration   5: 454135.443 ops/s
# Warmup Iteration   6: 444963.976 ops/s
# Warmup Iteration   7: 435807.786 ops/s
# Warmup Iteration   8: 420186.688 ops/s
# Warmup Iteration   9: 444477.070 ops/s
# Warmup Iteration  10: 427547.189 ops/s
# Warmup Iteration  11: 425221.095 ops/s
# Warmup Iteration  12: 464389.729 ops/s
# Warmup Iteration  13: 447780.437 ops/s
# Warmup Iteration  14: 431144.699 ops/s
# Warmup Iteration  15: 462873.654 ops/s
# Warmup Iteration  16: 432752.014 ops/s
# Warmup Iteration  17: 445393.558 ops/s
# Warmup Iteration  18: 469019.865 ops/s
# Warmup Iteration  19: 451997.404 ops/s
# Warmup Iteration  20: 460274.344 ops/s
# Warmup Iteration  21: 422071.756 ops/s
# Warmup Iteration  22: 456808.165 ops/s
# Warmup Iteration  23: 458705.640 ops/s
# Warmup Iteration  24: 449017.362 ops/s
# Warmup Iteration  25: 456591.087 ops/s
# Warmup Iteration  26: 449691.040 ops/s
# Warmup Iteration  27: 472521.469 ops/s
# Warmup Iteration  28: 464080.200 ops/s
# Warmup Iteration  29: 446019.796 ops/s
# Warmup Iteration  30: 453512.281 ops/s
Iteration   1: 420227.915 ops/s
Iteration   2: 403766.485 ops/s
Iteration   3: 463825.143 ops/s
Iteration   4: 447777.631 ops/s
Iteration   5: 461770.613 ops/s
Iteration   6: 447759.054 ops/s
Iteration   7: 462475.241 ops/s
Iteration   8: 453803.030 ops/s
Iteration   9: 463996.178 ops/s
Iteration  10: 460616.324 ops/s
Iteration  11: 443493.155 ops/s
Iteration  12: 451469.411 ops/s
Iteration  13: 456520.406 ops/s
Iteration  14: 457561.369 ops/s
Iteration  15: 460686.554 ops/s
Iteration  16: 462073.061 ops/s
Iteration  17: 444960.072 ops/s
Iteration  18: 476057.102 ops/s
Iteration  19: 473708.899 ops/s
Iteration  20: 442884.121 ops/s
Iteration  21: 472029.735 ops/s
Iteration  22: 449080.585 ops/s
Iteration  23: 477152.134 ops/s
Iteration  24: 461222.277 ops/s
Iteration  25: 449130.468 ops/s
Iteration  26: 474507.040 ops/s
Iteration  27: 446852.185 ops/s
Iteration  28: 478483.401 ops/s
Iteration  29: 458695.627 ops/s
Iteration  30: 449699.522 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_pollThrowsDelayError":
  455742.825 ±(99.9%) 10688.166 ops/s [Average]
  (min, avg, max) = (403766.485, 455742.825, 478483.401), stdev = 15997.545
  CI (99.9%): [445054.659, 466430.990] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score       Error  Units
ObservableConcatMapSchedulerTest._Benchmark.benchmark_pollThrowsDelayError  thrpt   30  455742.825 ± 10688.166  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrErrorTest._Benchmark.benchmark_singleCompletableManualCompleteExceptionallyCancels$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrErrorTest._Benchmark.benchmark_singleCompletableManualCompleteExceptionallyCancels

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 154905.251 ops/s
# Warmup Iteration   2: 311909.457 ops/s
# Warmup Iteration   3: 347844.611 ops/s
# Warmup Iteration   4: 358197.433 ops/s
# Warmup Iteration   5: 348126.658 ops/s
# Warmup Iteration   6: 344484.477 ops/s
# Warmup Iteration   7: 380391.934 ops/s
# Warmup Iteration   8: 367707.770 ops/s
# Warmup Iteration   9: 352771.170 ops/s
# Warmup Iteration  10: 370140.464 ops/s
# Warmup Iteration  11: 360958.554 ops/s
# Warmup Iteration  12: 357872.717 ops/s
# Warmup Iteration  13: 363732.834 ops/s
# Warmup Iteration  14: 351393.459 ops/s
# Warmup Iteration  15: 367960.662 ops/s
# Warmup Iteration  16: 377836.306 ops/s
# Warmup Iteration  17: 382220.086 ops/s
# Warmup Iteration  18: 372419.474 ops/s
# Warmup Iteration  19: 400455.224 ops/s
# Warmup Iteration  20: 362828.936 ops/s
# Warmup Iteration  21: 402671.507 ops/s
# Warmup Iteration  22: 377715.643 ops/s
# Warmup Iteration  23: 371957.840 ops/s
# Warmup Iteration  24: 381535.477 ops/s
# Warmup Iteration  25: 380942.968 ops/s
# Warmup Iteration  26: 388094.575 ops/s
# Warmup Iteration  27: 383457.395 ops/s
# Warmup Iteration  28: 375616.403 ops/s
# Warmup Iteration  29: 382575.893 ops/s
# Warmup Iteration  30: 399103.648 ops/s
Iteration   1: 370444.106 ops/s
Iteration   2: 389776.479 ops/s
Iteration   3: 369601.128 ops/s
Iteration   4: 387077.521 ops/s
Iteration   5: 393886.329 ops/s
Iteration   6: 373085.753 ops/s
Iteration   7: 390127.121 ops/s
Iteration   8: 377733.385 ops/s
Iteration   9: 388277.591 ops/s
Iteration  10: 376817.016 ops/s
Iteration  11: 380495.402 ops/s
Iteration  12: 399153.776 ops/s
Iteration  13: 379536.904 ops/s
Iteration  14: 380660.943 ops/s
Iteration  15: 368009.250 ops/s
Iteration  16: 388976.208 ops/s
Iteration  17: 380369.087 ops/s
Iteration  18: 377518.310 ops/s
Iteration  19: 387008.484 ops/s
Iteration  20: 377507.205 ops/s
Iteration  21: 390207.440 ops/s
Iteration  22: 383440.134 ops/s
Iteration  23: 367399.622 ops/s
Iteration  24: 378475.730 ops/s
Iteration  25: 392023.272 ops/s
Iteration  26: 377794.092 ops/s
Iteration  27: 381276.776 ops/s
Iteration  28: 397104.723 ops/s
Iteration  29: 389286.479 ops/s
Iteration  30: 384239.784 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrErrorTest._Benchmark.benchmark_singleCompletableManualCompleteExceptionallyCancels":
  382577.002 ±(99.9%) 5619.466 ops/s [Average]
  (min, avg, max) = (367399.622, 382577.002, 399153.776), stdev = 8410.953
  CI (99.9%): [376957.535, 388196.468] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                                     Mode  Cnt       Score      Error  Units
FlowableStageSubscriberOrErrorTest._Benchmark.benchmark_singleCompletableManualCompleteExceptionallyCancels  thrpt   30  382577.002 ± 5619.466  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrDefaultTest._Benchmark.benchmark_lastCompletableManualCompleteExceptionallyCancels$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrDefaultTest._Benchmark.benchmark_lastCompletableManualCompleteExceptionallyCancels

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 154161.249 ops/s
# Warmup Iteration   2: 325098.002 ops/s
# Warmup Iteration   3: 356673.111 ops/s
# Warmup Iteration   4: 351699.601 ops/s
# Warmup Iteration   5: 368190.811 ops/s
# Warmup Iteration   6: 350694.109 ops/s
# Warmup Iteration   7: 360479.330 ops/s
# Warmup Iteration   8: 350655.581 ops/s
# Warmup Iteration   9: 356139.520 ops/s
# Warmup Iteration  10: 360610.052 ops/s
# Warmup Iteration  11: 350110.357 ops/s
# Warmup Iteration  12: 372380.534 ops/s
# Warmup Iteration  13: 367312.100 ops/s
# Warmup Iteration  14: 350634.055 ops/s
# Warmup Iteration  15: 371144.408 ops/s
# Warmup Iteration  16: 371103.144 ops/s
# Warmup Iteration  17: 377892.049 ops/s
# Warmup Iteration  18: 392707.816 ops/s
# Warmup Iteration  19: 392749.219 ops/s
# Warmup Iteration  20: 372192.017 ops/s
# Warmup Iteration  21: 383055.003 ops/s
# Warmup Iteration  22: 368492.084 ops/s
# Warmup Iteration  23: 386656.101 ops/s
# Warmup Iteration  24: 390667.241 ops/s
# Warmup Iteration  25: 374473.684 ops/s
# Warmup Iteration  26: 333227.235 ops/s
# Warmup Iteration  27: 327117.830 ops/s
# Warmup Iteration  28: 374880.872 ops/s
# Warmup Iteration  29: 379662.120 ops/s
# Warmup Iteration  30: 393575.974 ops/s
Iteration   1: 373077.138 ops/s
Iteration   2: 382506.314 ops/s
Iteration   3: 394245.691 ops/s
Iteration   4: 370108.015 ops/s
Iteration   5: 391260.814 ops/s
Iteration   6: 373497.343 ops/s
Iteration   7: 380272.583 ops/s
Iteration   8: 375861.505 ops/s
Iteration   9: 370159.109 ops/s
Iteration  10: 397154.800 ops/s
Iteration  11: 374925.774 ops/s
Iteration  12: 392824.353 ops/s
Iteration  13: 372606.809 ops/s
Iteration  14: 371871.046 ops/s
Iteration  15: 393788.051 ops/s
Iteration  16: 378577.382 ops/s
Iteration  17: 385175.267 ops/s
Iteration  18: 380643.789 ops/s
Iteration  19: 389681.007 ops/s
Iteration  20: 376468.614 ops/s
Iteration  21: 391833.250 ops/s
Iteration  22: 396311.068 ops/s
Iteration  23: 380618.374 ops/s
Iteration  24: 380574.907 ops/s
Iteration  25: 396156.911 ops/s
Iteration  26: 367678.689 ops/s
Iteration  27: 373781.003 ops/s
Iteration  28: 397522.080 ops/s
Iteration  29: 392592.039 ops/s
Iteration  30: 385868.800 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrDefaultTest._Benchmark.benchmark_lastCompletableManualCompleteExceptionallyCancels":
  382921.418 ±(99.9%) 6412.165 ops/s [Average]
  (min, avg, max) = (367678.689, 382921.418, 397522.080), stdev = 9597.427
  CI (99.9%): [376509.253, 389333.582] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                                     Mode  Cnt       Score      Error  Units
FlowableStageSubscriberOrDefaultTest._Benchmark.benchmark_lastCompletableManualCompleteExceptionallyCancels  thrpt   30  382921.418 ± 6412.165  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilTest._Benchmark.benchmark_untilPublisherOtherOnNext$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilTest._Benchmark.benchmark_untilPublisherOtherOnNext

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 400771.802 ops/s
# Warmup Iteration   2: 2044833.441 ops/s
# Warmup Iteration   3: 3151371.384 ops/s
# Warmup Iteration   4: 3071251.220 ops/s
# Warmup Iteration   5: 3009628.800 ops/s
# Warmup Iteration   6: 2774644.122 ops/s
# Warmup Iteration   7: 3001218.375 ops/s
# Warmup Iteration   8: 3237768.006 ops/s
# Warmup Iteration   9: 3069977.461 ops/s
# Warmup Iteration  10: 3155017.475 ops/s
# Warmup Iteration  11: 3013045.005 ops/s
# Warmup Iteration  12: 3124432.417 ops/s
# Warmup Iteration  13: 3166420.708 ops/s
# Warmup Iteration  14: 3116242.031 ops/s
# Warmup Iteration  15: 3134721.690 ops/s
# Warmup Iteration  16: 3082899.074 ops/s
# Warmup Iteration  17: 3123828.280 ops/s
# Warmup Iteration  18: 3092268.764 ops/s
# Warmup Iteration  19: 3182000.506 ops/s
# Warmup Iteration  20: 3075994.166 ops/s
# Warmup Iteration  21: 3175739.279 ops/s
# Warmup Iteration  22: 3221696.278 ops/s
# Warmup Iteration  23: 3044801.458 ops/s
# Warmup Iteration  24: 3244231.111 ops/s
# Warmup Iteration  25: 3161604.414 ops/s
# Warmup Iteration  26: 3056781.543 ops/s
# Warmup Iteration  27: 3147328.361 ops/s
# Warmup Iteration  28: 3192857.622 ops/s
# Warmup Iteration  29: 3083575.302 ops/s
# Warmup Iteration  30: 3255947.893 ops/s
Iteration   1: 3016242.619 ops/s
Iteration   2: 3157502.274 ops/s
Iteration   3: 3279170.818 ops/s
Iteration   4: 3091727.830 ops/s
Iteration   5: 3172216.086 ops/s
Iteration   6: 3126177.724 ops/s
Iteration   7: 3219640.127 ops/s
Iteration   8: 3040965.732 ops/s
Iteration   9: 3106021.001 ops/s
Iteration  10: 3195015.952 ops/s
Iteration  11: 3121041.968 ops/s
Iteration  12: 3219136.080 ops/s
Iteration  13: 3108170.850 ops/s
Iteration  14: 3087983.327 ops/s
Iteration  15: 3185675.555 ops/s
Iteration  16: 3044442.961 ops/s
Iteration  17: 3127812.277 ops/s
Iteration  18: 3243692.423 ops/s
Iteration  19: 3091834.419 ops/s
Iteration  20: 3214965.829 ops/s
Iteration  21: 3097707.726 ops/s
Iteration  22: 3246779.837 ops/s
Iteration  23: 3147860.168 ops/s
Iteration  24: 3189425.337 ops/s
Iteration  25: 3126869.652 ops/s
Iteration  26: 3121094.006 ops/s
Iteration  27: 3306794.957 ops/s
Iteration  28: 3003272.587 ops/s
Iteration  29: 3235473.835 ops/s
Iteration  30: 3119033.418 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilTest._Benchmark.benchmark_untilPublisherOtherOnNext":
  3148124.913 ±(99.9%) 51092.462 ops/s [Average]
  (min, avg, max) = (3003272.587, 3148124.913, 3306794.957), stdev = 76472.798
  CI (99.9%): [3097032.450, 3199217.375] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
MaybeTakeUntilTest._Benchmark.benchmark_untilPublisherOtherOnNext  thrpt   30  3148124.913 ± 51092.462  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeTest._Benchmark.benchmark_reentrantTake$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeTest._Benchmark.benchmark_reentrantTake

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 263784.790 ops/s
# Warmup Iteration   2: 1583999.128 ops/s
# Warmup Iteration   3: 2717486.070 ops/s
# Warmup Iteration   4: 2591629.194 ops/s
# Warmup Iteration   5: 2686792.922 ops/s
# Warmup Iteration   6: 2560236.607 ops/s
# Warmup Iteration   7: 2690522.557 ops/s
# Warmup Iteration   8: 2611044.404 ops/s
# Warmup Iteration   9: 2737465.053 ops/s
# Warmup Iteration  10: 2603676.790 ops/s
# Warmup Iteration  11: 2556681.447 ops/s
# Warmup Iteration  12: 2744230.446 ops/s
# Warmup Iteration  13: 2555931.925 ops/s
# Warmup Iteration  14: 2692869.146 ops/s
# Warmup Iteration  15: 2391692.235 ops/s
# Warmup Iteration  16: 2521337.618 ops/s
# Warmup Iteration  17: 2784556.791 ops/s
# Warmup Iteration  18: 2684996.599 ops/s
# Warmup Iteration  19: 2607917.577 ops/s
# Warmup Iteration  20: 2733499.731 ops/s
# Warmup Iteration  21: 2072293.090 ops/s
# Warmup Iteration  22: 2691546.214 ops/s
# Warmup Iteration  23: 2678959.350 ops/s
# Warmup Iteration  24: 2477926.953 ops/s
# Warmup Iteration  25: 2718274.118 ops/s
# Warmup Iteration  26: 2562946.013 ops/s
# Warmup Iteration  27: 2770899.264 ops/s
# Warmup Iteration  28: 2578438.369 ops/s
# Warmup Iteration  29: 2762490.139 ops/s
# Warmup Iteration  30: 2665375.182 ops/s
Iteration   1: 2692899.222 ops/s
Iteration   2: 2712415.165 ops/s
Iteration   3: 2652459.653 ops/s
Iteration   4: 2762130.396 ops/s
Iteration   5: 2596353.754 ops/s
Iteration   6: 2671665.828 ops/s
Iteration   7: 2585705.759 ops/s
Iteration   8: 2617714.692 ops/s
Iteration   9: 2812585.621 ops/s
Iteration  10: 2671479.679 ops/s
Iteration  11: 2798152.639 ops/s
Iteration  12: 2663972.264 ops/s
Iteration  13: 2733388.885 ops/s
Iteration  14: 2695318.404 ops/s
Iteration  15: 2690439.575 ops/s
Iteration  16: 2745025.949 ops/s
Iteration  17: 2696030.694 ops/s
Iteration  18: 2703708.434 ops/s
Iteration  19: 2614620.930 ops/s
Iteration  20: 2652960.412 ops/s
Iteration  21: 2748365.494 ops/s
Iteration  22: 2642084.429 ops/s
Iteration  23: 2792128.636 ops/s
Iteration  24: 2655464.564 ops/s
Iteration  25: 2673169.701 ops/s
Iteration  26: 2787224.127 ops/s
Iteration  27: 2624552.716 ops/s
Iteration  28: 2731958.167 ops/s
Iteration  29: 2728545.378 ops/s
Iteration  30: 2589082.674 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeTest._Benchmark.benchmark_reentrantTake":
  2691386.795 ±(99.9%) 42438.786 ops/s [Average]
  (min, avg, max) = (2585705.759, 2691386.795, 2812585.621), stdev = 63520.382
  CI (99.9%): [2648948.009, 2733825.581] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score       Error  Units
FlowableTakeTest._Benchmark.benchmark_reentrantTake  thrpt   30  2691386.795 ± 42438.786  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromTest._Benchmark.benchmark_emptySource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromTest._Benchmark.benchmark_emptySource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 450431.008 ops/s
# Warmup Iteration   2: 1509952.675 ops/s
# Warmup Iteration   3: 2451936.591 ops/s
# Warmup Iteration   4: 2353478.827 ops/s
# Warmup Iteration   5: 2174494.931 ops/s
# Warmup Iteration   6: 2409742.416 ops/s
# Warmup Iteration   7: 2487552.576 ops/s
# Warmup Iteration   8: 2586912.777 ops/s
# Warmup Iteration   9: 2422091.672 ops/s
# Warmup Iteration  10: 2535628.833 ops/s
# Warmup Iteration  11: 2540939.452 ops/s
# Warmup Iteration  12: 2393880.083 ops/s
# Warmup Iteration  13: 2557088.882 ops/s
# Warmup Iteration  14: 2425135.007 ops/s
# Warmup Iteration  15: 2476956.781 ops/s
# Warmup Iteration  16: 2593492.116 ops/s
# Warmup Iteration  17: 2439354.691 ops/s
# Warmup Iteration  18: 2542110.812 ops/s
# Warmup Iteration  19: 2455563.147 ops/s
# Warmup Iteration  20: 2514723.977 ops/s
# Warmup Iteration  21: 2552453.606 ops/s
# Warmup Iteration  22: 2387243.231 ops/s
# Warmup Iteration  23: 2567531.829 ops/s
# Warmup Iteration  24: 2440398.157 ops/s
# Warmup Iteration  25: 2490467.457 ops/s
# Warmup Iteration  26: 2497903.568 ops/s
# Warmup Iteration  27: 2496330.135 ops/s
# Warmup Iteration  28: 2400156.451 ops/s
# Warmup Iteration  29: 2545176.739 ops/s
# Warmup Iteration  30: 2426051.996 ops/s
Iteration   1: 2482520.438 ops/s
Iteration   2: 2564085.949 ops/s
Iteration   3: 2484473.470 ops/s
Iteration   4: 2541673.721 ops/s
Iteration   5: 2436876.976 ops/s
Iteration   6: 2466638.903 ops/s
Iteration   7: 2527382.379 ops/s
Iteration   8: 2389902.298 ops/s
Iteration   9: 2514143.468 ops/s
Iteration  10: 2397191.739 ops/s
Iteration  11: 2510991.431 ops/s
Iteration  12: 2457445.415 ops/s
Iteration  13: 2425674.540 ops/s
Iteration  14: 2498714.634 ops/s
Iteration  15: 2439357.539 ops/s
Iteration  16: 2452637.402 ops/s
Iteration  17: 2643852.135 ops/s
Iteration  18: 2347893.893 ops/s
Iteration  19: 2501700.893 ops/s
Iteration  20: 2551894.541 ops/s
Iteration  21: 2433817.082 ops/s
Iteration  22: 2516676.557 ops/s
Iteration  23: 2467741.727 ops/s
Iteration  24: 2448600.780 ops/s
Iteration  25: 2543295.849 ops/s
Iteration  26: 2432866.288 ops/s
Iteration  27: 2526762.140 ops/s
Iteration  28: 2473293.811 ops/s
Iteration  29: 2435640.858 ops/s
Iteration  30: 2536493.686 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromTest._Benchmark.benchmark_emptySource":
  2481674.685 ±(99.9%) 40503.845 ops/s [Average]
  (min, avg, max) = (2347893.893, 2481674.685, 2643852.135), stdev = 60624.252
  CI (99.9%): [2441170.840, 2522178.529] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
FlowableWithLatestFromTest._Benchmark.benchmark_emptySource  thrpt   30  2481674.685 ± 40503.845  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisherTest._Benchmark.benchmark_mainSuccessAfterOtherSignal$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisherTest._Benchmark.benchmark_mainSuccessAfterOtherSignal

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 157914.642 ops/s
# Warmup Iteration   2: 447626.651 ops/s
# Warmup Iteration   3: 524499.579 ops/s
# Warmup Iteration   4: 453287.512 ops/s
# Warmup Iteration   5: 545330.644 ops/s
# Warmup Iteration   6: 472446.076 ops/s
# Warmup Iteration   7: 555033.501 ops/s
# Warmup Iteration   8: 540248.407 ops/s
# Warmup Iteration   9: 522644.139 ops/s
# Warmup Iteration  10: 574587.219 ops/s
# Warmup Iteration  11: 509078.909 ops/s
# Warmup Iteration  12: 564161.569 ops/s
# Warmup Iteration  13: 554220.942 ops/s
# Warmup Iteration  14: 526923.923 ops/s
# Warmup Iteration  15: 560099.687 ops/s
# Warmup Iteration  16: 396858.893 ops/s
# Warmup Iteration  17: 566823.575 ops/s
# Warmup Iteration  18: 574750.733 ops/s
# Warmup Iteration  19: 538963.758 ops/s
# Warmup Iteration  20: 584472.181 ops/s
# Warmup Iteration  21: 563682.398 ops/s
# Warmup Iteration  22: 561293.036 ops/s
# Warmup Iteration  23: 553705.788 ops/s
# Warmup Iteration  24: 548319.820 ops/s
# Warmup Iteration  25: 577287.993 ops/s
# Warmup Iteration  26: 549154.375 ops/s
# Warmup Iteration  27: 558127.428 ops/s
# Warmup Iteration  28: 583207.796 ops/s
# Warmup Iteration  29: 546264.503 ops/s
# Warmup Iteration  30: 563194.322 ops/s
Iteration   1: 551011.643 ops/s
Iteration   2: 571235.554 ops/s
Iteration   3: 547482.414 ops/s
Iteration   4: 572630.077 ops/s
Iteration   5: 566603.806 ops/s
Iteration   6: 549060.748 ops/s
Iteration   7: 579654.448 ops/s
Iteration   8: 537730.379 ops/s
Iteration   9: 584561.713 ops/s
Iteration  10: 549336.577 ops/s
Iteration  11: 569016.442 ops/s
Iteration  12: 554490.521 ops/s
Iteration  13: 554188.991 ops/s
Iteration  14: 573896.660 ops/s
Iteration  15: 547189.134 ops/s
Iteration  16: 552599.796 ops/s
Iteration  17: 567296.018 ops/s
Iteration  18: 582823.843 ops/s
Iteration  19: 550374.800 ops/s
Iteration  20: 557112.562 ops/s
Iteration  21: 535856.745 ops/s
Iteration  22: 590083.327 ops/s
Iteration  23: 568729.945 ops/s
Iteration  24: 555245.192 ops/s
Iteration  25: 580002.361 ops/s
Iteration  26: 534798.707 ops/s
Iteration  27: 568922.760 ops/s
Iteration  28: 542166.786 ops/s
Iteration  29: 565975.155 ops/s
Iteration  30: 549695.432 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisherTest._Benchmark.benchmark_mainSuccessAfterOtherSignal":
  560325.751 ±(99.9%) 10137.414 ops/s [Average]
  (min, avg, max) = (534798.707, 560325.751, 590083.327), stdev = 15173.205
  CI (99.9%): [550188.338, 570463.165] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score       Error  Units
MaybeTimeoutPublisherTest._Benchmark.benchmark_mainSuccessAfterOtherSignal  thrpt   30  560325.751 ± 10137.414  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryTest._Benchmark.benchmark_unsubscribeFromRetry$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryTest._Benchmark.benchmark_unsubscribeFromRetry

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 590330.704 ops/s
# Warmup Iteration   2: 2432544.093 ops/s
# Warmup Iteration   3: 3217269.718 ops/s
# Warmup Iteration   4: 3053416.204 ops/s
# Warmup Iteration   5: 3073541.532 ops/s
# Warmup Iteration   6: 2968080.053 ops/s
# Warmup Iteration   7: 3300730.082 ops/s
# Warmup Iteration   8: 3375832.689 ops/s
# Warmup Iteration   9: 3252717.234 ops/s
# Warmup Iteration  10: 3347832.456 ops/s
# Warmup Iteration  11: 3188355.891 ops/s
# Warmup Iteration  12: 3354813.311 ops/s
# Warmup Iteration  13: 3336511.790 ops/s
# Warmup Iteration  14: 3349234.452 ops/s
# Warmup Iteration  15: 3280604.842 ops/s
# Warmup Iteration  16: 3204816.307 ops/s
# Warmup Iteration  17: 3374713.465 ops/s
# Warmup Iteration  18: 3356552.892 ops/s
# Warmup Iteration  19: 3315097.297 ops/s
# Warmup Iteration  20: 3337806.283 ops/s
# Warmup Iteration  21: 3365873.600 ops/s
# Warmup Iteration  22: 3214015.647 ops/s
# Warmup Iteration  23: 3313992.955 ops/s
# Warmup Iteration  24: 3315769.101 ops/s
# Warmup Iteration  25: 3216910.567 ops/s
# Warmup Iteration  26: 3311767.041 ops/s
# Warmup Iteration  27: 3231625.695 ops/s
# Warmup Iteration  28: 3180470.129 ops/s
# Warmup Iteration  29: 3292069.478 ops/s
# Warmup Iteration  30: 3198510.826 ops/s
Iteration   1: 3313654.977 ops/s
Iteration   2: 3323414.120 ops/s
Iteration   3: 3182875.541 ops/s
Iteration   4: 3460361.560 ops/s
Iteration   5: 3403399.514 ops/s
Iteration   6: 3243076.986 ops/s
Iteration   7: 3292520.841 ops/s
Iteration   8: 3346235.169 ops/s
Iteration   9: 3227833.011 ops/s
Iteration  10: 3368732.076 ops/s
Iteration  11: 3220468.613 ops/s
Iteration  12: 3330378.250 ops/s
Iteration  13: 3220726.420 ops/s
Iteration  14: 3268264.881 ops/s
Iteration  15: 3175500.465 ops/s
Iteration  16: 3427679.439 ops/s
Iteration  17: 3241780.037 ops/s
Iteration  18: 3380774.211 ops/s
Iteration  19: 3177925.180 ops/s
Iteration  20: 3201276.219 ops/s
Iteration  21: 3385538.618 ops/s
Iteration  22: 3248239.961 ops/s
Iteration  23: 3364578.329 ops/s
Iteration  24: 3266756.500 ops/s
Iteration  25: 3389963.351 ops/s
Iteration  26: 3271460.749 ops/s
Iteration  27: 3388876.847 ops/s
Iteration  28: 3345530.643 ops/s
Iteration  29: 3332827.748 ops/s
Iteration  30: 3312740.446 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryTest._Benchmark.benchmark_unsubscribeFromRetry":
  3303779.690 ±(99.9%) 52941.704 ops/s [Average]
  (min, avg, max) = (3175500.465, 3303779.690, 3460361.560), stdev = 79240.656
  CI (99.9%): [3250837.986, 3356721.394] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
FlowableRetryTest._Benchmark.benchmark_unsubscribeFromRetry  thrpt   30  3303779.690 ± 52941.704  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleTakeUntilTest._Benchmark.benchmark_mainSuccessPublisher$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleTakeUntilTest._Benchmark.benchmark_mainSuccessPublisher

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 461947.636 ops/s
# Warmup Iteration   2: 1596577.405 ops/s
# Warmup Iteration   3: 2355649.436 ops/s
# Warmup Iteration   4: 2669050.417 ops/s
# Warmup Iteration   5: 2596351.170 ops/s
# Warmup Iteration   6: 2793016.619 ops/s
# Warmup Iteration   7: 2807034.728 ops/s
# Warmup Iteration   8: 2636257.931 ops/s
# Warmup Iteration   9: 2735787.018 ops/s
# Warmup Iteration  10: 2280736.796 ops/s
# Warmup Iteration  11: 2647810.901 ops/s
# Warmup Iteration  12: 2693709.579 ops/s
# Warmup Iteration  13: 2715615.748 ops/s
# Warmup Iteration  14: 2859842.216 ops/s
# Warmup Iteration  15: 2655235.372 ops/s
# Warmup Iteration  16: 2733512.195 ops/s
# Warmup Iteration  17: 2700665.046 ops/s
# Warmup Iteration  18: 2666398.354 ops/s
# Warmup Iteration  19: 2765183.046 ops/s
# Warmup Iteration  20: 2678232.177 ops/s
# Warmup Iteration  21: 2736685.846 ops/s
# Warmup Iteration  22: 2808646.270 ops/s
# Warmup Iteration  23: 2611135.225 ops/s
# Warmup Iteration  24: 2833781.164 ops/s
# Warmup Iteration  25: 2790764.249 ops/s
# Warmup Iteration  26: 2666742.905 ops/s
# Warmup Iteration  27: 2764077.584 ops/s
# Warmup Iteration  28: 2799298.813 ops/s
# Warmup Iteration  29: 2637305.620 ops/s
# Warmup Iteration  30: 2823274.853 ops/s
Iteration   1: 2618735.031 ops/s
Iteration   2: 2684477.039 ops/s
Iteration   3: 2693267.377 ops/s
Iteration   4: 2822970.252 ops/s
Iteration   5: 2752730.093 ops/s
Iteration   6: 2630585.257 ops/s
Iteration   7: 2869518.531 ops/s
Iteration   8: 2685747.032 ops/s
Iteration   9: 2713693.833 ops/s
Iteration  10: 2713001.911 ops/s
Iteration  11: 2770925.433 ops/s
Iteration  12: 2711232.582 ops/s
Iteration  13: 2671990.051 ops/s
Iteration  14: 2747526.119 ops/s
Iteration  15: 2675139.080 ops/s
Iteration  16: 2737354.953 ops/s
Iteration  17: 2611651.971 ops/s
Iteration  18: 2654054.962 ops/s
Iteration  19: 2773734.438 ops/s
Iteration  20: 2668693.463 ops/s
Iteration  21: 2752798.473 ops/s
Iteration  22: 2686030.726 ops/s
Iteration  23: 2750503.545 ops/s
Iteration  24: 2733038.427 ops/s
Iteration  25: 2773561.404 ops/s
Iteration  26: 2703724.392 ops/s
Iteration  27: 2703532.768 ops/s
Iteration  28: 2749670.203 ops/s
Iteration  29: 2731377.331 ops/s
Iteration  30: 2710608.605 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntilTest._Benchmark.benchmark_mainSuccessPublisher":
  2716729.176 ±(99.9%) 37770.637 ops/s [Average]
  (min, avg, max) = (2611651.971, 2716729.176, 2869518.531), stdev = 56533.315
  CI (99.9%): [2678958.539, 2754499.813] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
SingleTakeUntilTest._Benchmark.benchmark_mainSuccessPublisher  thrpt   30  2716729.176 ± 37770.637  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSourceTest._Benchmark.benchmark_requestInlineLatest$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSourceTest._Benchmark.benchmark_requestInlineLatest

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 249032.537 ops/s
# Warmup Iteration   2: 1049968.124 ops/s
# Warmup Iteration   3: 1331237.742 ops/s
# Warmup Iteration   4: 1673166.496 ops/s
# Warmup Iteration   5: 1680917.363 ops/s
# Warmup Iteration   6: 1692007.852 ops/s
# Warmup Iteration   7: 1765433.471 ops/s
# Warmup Iteration   8: 1636492.484 ops/s
# Warmup Iteration   9: 1713504.817 ops/s
# Warmup Iteration  10: 1675931.879 ops/s
# Warmup Iteration  11: 1676853.536 ops/s
# Warmup Iteration  12: 1740514.182 ops/s
# Warmup Iteration  13: 1633656.697 ops/s
# Warmup Iteration  14: 1707112.763 ops/s
# Warmup Iteration  15: 1688506.555 ops/s
# Warmup Iteration  16: 1736321.323 ops/s
# Warmup Iteration  17: 1660444.634 ops/s
# Warmup Iteration  18: 1665793.072 ops/s
# Warmup Iteration  19: 1744349.871 ops/s
# Warmup Iteration  20: 1673580.728 ops/s
# Warmup Iteration  21: 1748094.583 ops/s
# Warmup Iteration  22: 1661022.750 ops/s
# Warmup Iteration  23: 1717217.041 ops/s
# Warmup Iteration  24: 1651106.217 ops/s
# Warmup Iteration  25: 1693925.056 ops/s
# Warmup Iteration  26: 1717899.468 ops/s
# Warmup Iteration  27: 1639242.937 ops/s
# Warmup Iteration  28: 1744095.335 ops/s
# Warmup Iteration  29: 1648568.211 ops/s
# Warmup Iteration  30: 1654362.097 ops/s
Iteration   1: 1749481.802 ops/s
Iteration   2: 1662851.666 ops/s
Iteration   3: 1713694.691 ops/s
Iteration   4: 1775815.480 ops/s
Iteration   5: 1785802.075 ops/s
Iteration   6: 1622328.917 ops/s
Iteration   7: 1735116.162 ops/s
Iteration   8: 1671081.383 ops/s
Iteration   9: 1720390.724 ops/s
Iteration  10: 1691263.844 ops/s
Iteration  11: 1688752.621 ops/s
Iteration  12: 1748934.587 ops/s
Iteration  13: 1647846.231 ops/s
Iteration  14: 1777994.269 ops/s
Iteration  15: 1701555.677 ops/s
Iteration  16: 1676892.406 ops/s
Iteration  17: 1763591.910 ops/s
Iteration  18: 1670702.440 ops/s
Iteration  19: 1700186.078 ops/s
Iteration  20: 1782165.971 ops/s
Iteration  21: 1610359.911 ops/s
Iteration  22: 1764721.136 ops/s
Iteration  23: 1676530.655 ops/s
Iteration  24: 1729116.977 ops/s
Iteration  25: 1658739.298 ops/s
Iteration  26: 1732236.311 ops/s
Iteration  27: 1664722.281 ops/s
Iteration  28: 1681411.702 ops/s
Iteration  29: 1758688.080 ops/s
Iteration  30: 1668567.313 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSourceTest._Benchmark.benchmark_requestInlineLatest":
  1707718.087 ±(99.9%) 32785.724 ops/s [Average]
  (min, avg, max) = (1610359.911, 1707718.087, 1785802.075), stdev = 49072.132
  CI (99.9%): [1674932.362, 1740503.811] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
FlowableFromSourceTest._Benchmark.benchmark_requestInlineLatest  thrpt   30  1707718.087 ± 32785.724  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromTest._Benchmark.benchmark_emptyOther$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromTest._Benchmark.benchmark_emptyOther

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 405191.491 ops/s
# Warmup Iteration   2: 1536964.527 ops/s
# Warmup Iteration   3: 2208062.395 ops/s
# Warmup Iteration   4: 2474277.882 ops/s
# Warmup Iteration   5: 1743930.986 ops/s
# Warmup Iteration   6: 2220592.195 ops/s
# Warmup Iteration   7: 2423328.194 ops/s
# Warmup Iteration   8: 2425610.138 ops/s
# Warmup Iteration   9: 2474019.411 ops/s
# Warmup Iteration  10: 2290690.281 ops/s
# Warmup Iteration  11: 2381455.214 ops/s
# Warmup Iteration  12: 2467745.955 ops/s
# Warmup Iteration  13: 2358983.680 ops/s
# Warmup Iteration  14: 2457208.936 ops/s
# Warmup Iteration  15: 2347511.911 ops/s
# Warmup Iteration  16: 2512590.120 ops/s
# Warmup Iteration  17: 2369755.402 ops/s
# Warmup Iteration  18: 2427007.941 ops/s
# Warmup Iteration  19: 2408646.004 ops/s
# Warmup Iteration  20: 2398299.145 ops/s
# Warmup Iteration  21: 2523988.770 ops/s
# Warmup Iteration  22: 2413256.090 ops/s
# Warmup Iteration  23: 2359990.182 ops/s
# Warmup Iteration  24: 2441627.426 ops/s
# Warmup Iteration  25: 2371788.328 ops/s
# Warmup Iteration  26: 2426636.176 ops/s
# Warmup Iteration  27: 2446199.450 ops/s
# Warmup Iteration  28: 2381935.379 ops/s
# Warmup Iteration  29: 2382704.862 ops/s
# Warmup Iteration  30: 2574338.463 ops/s
Iteration   1: 2357368.861 ops/s
Iteration   2: 2450069.020 ops/s
Iteration   3: 2398016.296 ops/s
Iteration   4: 2478831.829 ops/s
Iteration   5: 2438283.357 ops/s
Iteration   6: 2381868.218 ops/s
Iteration   7: 2483754.665 ops/s
Iteration   8: 2452942.425 ops/s
Iteration   9: 2375729.166 ops/s
Iteration  10: 2453219.094 ops/s
Iteration  11: 2337761.451 ops/s
Iteration  12: 2465527.218 ops/s
Iteration  13: 2370639.236 ops/s
Iteration  14: 2500114.353 ops/s
Iteration  15: 2401306.762 ops/s
Iteration  16: 2383217.337 ops/s
Iteration  17: 2388915.924 ops/s
Iteration  18: 2440820.583 ops/s
Iteration  19: 2412994.856 ops/s
Iteration  20: 2444030.498 ops/s
Iteration  21: 2385783.819 ops/s
Iteration  22: 2460050.275 ops/s
Iteration  23: 2446481.034 ops/s
Iteration  24: 2367578.921 ops/s
Iteration  25: 2487563.918 ops/s
Iteration  26: 2300000.060 ops/s
Iteration  27: 2519763.571 ops/s
Iteration  28: 2322679.441 ops/s
Iteration  29: 2438097.638 ops/s
Iteration  30: 2465108.930 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromTest._Benchmark.benchmark_emptyOther":
  2420283.959 ±(99.9%) 36628.747 ops/s [Average]
  (min, avg, max) = (2300000.060, 2420283.959, 2519763.571), stdev = 54824.188
  CI (99.9%): [2383655.212, 2456912.705] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
FlowableWithLatestFromTest._Benchmark.benchmark_emptyOther  thrpt   30  2420283.959 ± 36628.747  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilTest._Benchmark.benchmark_downstreamUnsubscribes$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilTest._Benchmark.benchmark_downstreamUnsubscribes

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 276605.981 ops/s
# Warmup Iteration   2: 948102.002 ops/s
# Warmup Iteration   3: 1752798.586 ops/s
# Warmup Iteration   4: 1980446.073 ops/s
# Warmup Iteration   5: 2176542.394 ops/s
# Warmup Iteration   6: 2041178.957 ops/s
# Warmup Iteration   7: 2189898.990 ops/s
# Warmup Iteration   8: 2129868.105 ops/s
# Warmup Iteration   9: 2213598.652 ops/s
# Warmup Iteration  10: 2121239.362 ops/s
# Warmup Iteration  11: 2120389.252 ops/s
# Warmup Iteration  12: 2156707.583 ops/s
# Warmup Iteration  13: 2082450.732 ops/s
# Warmup Iteration  14: 2223856.297 ops/s
# Warmup Iteration  15: 2213969.809 ops/s
# Warmup Iteration  16: 2032479.648 ops/s
# Warmup Iteration  17: 2147067.022 ops/s
# Warmup Iteration  18: 2145687.176 ops/s
# Warmup Iteration  19: 2116363.215 ops/s
# Warmup Iteration  20: 2209997.387 ops/s
# Warmup Iteration  21: 2066905.351 ops/s
# Warmup Iteration  22: 2147170.965 ops/s
# Warmup Iteration  23: 2147320.133 ops/s
# Warmup Iteration  24: 2075547.465 ops/s
# Warmup Iteration  25: 2147287.216 ops/s
# Warmup Iteration  26: 2126827.836 ops/s
# Warmup Iteration  27: 2198707.838 ops/s
# Warmup Iteration  28: 2098643.627 ops/s
# Warmup Iteration  29: 2127305.927 ops/s
# Warmup Iteration  30: 2174625.238 ops/s
Iteration   1: 2090709.778 ops/s
Iteration   2: 2182728.886 ops/s
Iteration   3: 2062582.910 ops/s
Iteration   4: 2188794.781 ops/s
Iteration   5: 2149384.977 ops/s
Iteration   6: 2105260.292 ops/s
Iteration   7: 2139241.328 ops/s
Iteration   8: 2110112.256 ops/s
Iteration   9: 2179693.898 ops/s
Iteration  10: 2122643.387 ops/s
Iteration  11: 2079299.637 ops/s
Iteration  12: 2195075.223 ops/s
Iteration  13: 2050794.737 ops/s
Iteration  14: 2079931.805 ops/s
Iteration  15: 2136865.938 ops/s
Iteration  16: 2187134.594 ops/s
Iteration  17: 2096702.946 ops/s
Iteration  18: 2139025.500 ops/s
Iteration  19: 2211647.376 ops/s
Iteration  20: 2098023.684 ops/s
Iteration  21: 2202866.753 ops/s
Iteration  22: 2085278.370 ops/s
Iteration  23: 2153000.544 ops/s
Iteration  24: 2171002.599 ops/s
Iteration  25: 2136107.513 ops/s
Iteration  26: 2231086.379 ops/s
Iteration  27: 2088370.818 ops/s
Iteration  28: 2166653.125 ops/s
Iteration  29: 2130885.181 ops/s
Iteration  30: 2110417.307 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilTest._Benchmark.benchmark_downstreamUnsubscribes":
  2136044.084 ±(99.9%) 31929.615 ops/s [Average]
  (min, avg, max) = (2050794.737, 2136044.084, 2231086.379), stdev = 47790.747
  CI (99.9%): [2104114.470, 2167973.699] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
FlowableTakeUntilTest._Benchmark.benchmark_downstreamUnsubscribes  thrpt   30  2136044.084 ± 31929.615  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromTest._Benchmark.benchmark_backpressure$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromTest._Benchmark.benchmark_backpressure

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 211929.259 ops/s
# Warmup Iteration   2: 433991.600 ops/s
# Warmup Iteration   3: 779998.568 ops/s
# Warmup Iteration   4: 1123535.548 ops/s
# Warmup Iteration   5: 1372992.786 ops/s
# Warmup Iteration   6: 1370217.964 ops/s
# Warmup Iteration   7: 1411374.029 ops/s
# Warmup Iteration   8: 1335339.012 ops/s
# Warmup Iteration   9: 1406561.694 ops/s
# Warmup Iteration  10: 1337356.483 ops/s
# Warmup Iteration  11: 1380932.331 ops/s
# Warmup Iteration  12: 1349629.059 ops/s
# Warmup Iteration  13: 1428217.558 ops/s
# Warmup Iteration  14: 1356988.429 ops/s
# Warmup Iteration  15: 1388015.210 ops/s
# Warmup Iteration  16: 1374410.509 ops/s
# Warmup Iteration  17: 1334932.253 ops/s
# Warmup Iteration  18: 1441052.162 ops/s
# Warmup Iteration  19: 1408503.332 ops/s
# Warmup Iteration  20: 1367557.634 ops/s
# Warmup Iteration  21: 1397196.110 ops/s
# Warmup Iteration  22: 1352268.359 ops/s
# Warmup Iteration  23: 1387826.996 ops/s
# Warmup Iteration  24: 1368035.136 ops/s
# Warmup Iteration  25: 1359355.098 ops/s
# Warmup Iteration  26: 1397928.764 ops/s
# Warmup Iteration  27: 1407671.782 ops/s
# Warmup Iteration  28: 1346230.975 ops/s
# Warmup Iteration  29: 1434277.818 ops/s
# Warmup Iteration  30: 1358915.466 ops/s
Iteration   1: 1381729.935 ops/s
Iteration   2: 1419205.296 ops/s
Iteration   3: 1350146.349 ops/s
Iteration   4: 1389701.829 ops/s
Iteration   5: 1380532.121 ops/s
Iteration   6: 1362502.703 ops/s
Iteration   7: 1390649.351 ops/s
Iteration   8: 1433295.847 ops/s
Iteration   9: 1324976.983 ops/s
Iteration  10: 1421497.637 ops/s
Iteration  11: 1341216.093 ops/s
Iteration  12: 1386991.201 ops/s
Iteration  13: 1396490.625 ops/s
Iteration  14: 1404588.011 ops/s
Iteration  15: 1379142.596 ops/s
Iteration  16: 1322835.117 ops/s
Iteration  17: 1424704.197 ops/s
Iteration  18: 1342695.568 ops/s
Iteration  19: 1358406.345 ops/s
Iteration  20: 1405911.572 ops/s
Iteration  21: 1349280.675 ops/s
Iteration  22: 1434345.326 ops/s
Iteration  23: 1372692.560 ops/s
Iteration  24: 1398991.851 ops/s
Iteration  25: 1388930.244 ops/s
Iteration  26: 1401129.218 ops/s
Iteration  27: 1359479.513 ops/s
Iteration  28: 1354075.965 ops/s
Iteration  29: 1403250.397 ops/s
Iteration  30: 1375650.030 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromTest._Benchmark.benchmark_backpressure":
  1381834.839 ±(99.9%) 20442.673 ops/s [Average]
  (min, avg, max) = (1322835.117, 1381834.839, 1434345.326), stdev = 30597.632
  CI (99.9%): [1361392.166, 1402277.511] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
FlowableWithLatestFromTest._Benchmark.benchmark_backpressure  thrpt   30  1381834.839 ± 20442.673  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMapNotificationTest._Benchmark.benchmark_noBackpressure$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMapNotificationTest._Benchmark.benchmark_noBackpressure

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 122672.771 ops/s
# Warmup Iteration   2: 286186.051 ops/s
# Warmup Iteration   3: 605028.549 ops/s
# Warmup Iteration   4: 586720.439 ops/s
# Warmup Iteration   5: 596687.129 ops/s
# Warmup Iteration   6: 579883.756 ops/s
# Warmup Iteration   7: 591417.809 ops/s
# Warmup Iteration   8: 580469.554 ops/s
# Warmup Iteration   9: 575370.302 ops/s
# Warmup Iteration  10: 605126.408 ops/s
# Warmup Iteration  11: 624004.455 ops/s
# Warmup Iteration  12: 569500.775 ops/s
# Warmup Iteration  13: 623856.222 ops/s
# Warmup Iteration  14: 571040.567 ops/s
# Warmup Iteration  15: 603484.384 ops/s
# Warmup Iteration  16: 596509.685 ops/s
# Warmup Iteration  17: 622198.793 ops/s
# Warmup Iteration  18: 645609.890 ops/s
# Warmup Iteration  19: 592773.380 ops/s
# Warmup Iteration  20: 637390.493 ops/s
# Warmup Iteration  21: 663680.926 ops/s
# Warmup Iteration  22: 603788.803 ops/s
# Warmup Iteration  23: 628640.881 ops/s
# Warmup Iteration  24: 621079.197 ops/s
# Warmup Iteration  25: 645642.685 ops/s
# Warmup Iteration  26: 619976.575 ops/s
# Warmup Iteration  27: 655724.201 ops/s
# Warmup Iteration  28: 629827.148 ops/s
# Warmup Iteration  29: 630278.742 ops/s
# Warmup Iteration  30: 637332.561 ops/s
Iteration   1: 627314.001 ops/s
Iteration   2: 644468.121 ops/s
Iteration   3: 625527.166 ops/s
Iteration   4: 641830.244 ops/s
Iteration   5: 612631.625 ops/s
Iteration   6: 636762.547 ops/s
Iteration   7: 618853.165 ops/s
Iteration   8: 622171.729 ops/s
Iteration   9: 659171.770 ops/s
Iteration  10: 595597.766 ops/s
Iteration  11: 645933.113 ops/s
Iteration  12: 623977.130 ops/s
Iteration  13: 651378.015 ops/s
Iteration  14: 622425.908 ops/s
Iteration  15: 615883.072 ops/s
Iteration  16: 627929.607 ops/s
Iteration  17: 605185.246 ops/s
Iteration  18: 650016.880 ops/s
Iteration  19: 607977.564 ops/s
Iteration  20: 618132.992 ops/s
Iteration  21: 630997.522 ops/s
Iteration  22: 621302.700 ops/s
Iteration  23: 620626.049 ops/s
Iteration  24: 618079.295 ops/s
Iteration  25: 647419.307 ops/s
Iteration  26: 597742.855 ops/s
Iteration  27: 504762.153 ops/s
Iteration  28: 616196.066 ops/s
Iteration  29: 615967.541 ops/s
Iteration  30: 653677.950 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableMapNotificationTest._Benchmark.benchmark_noBackpressure":
  622664.637 ±(99.9%) 18511.654 ops/s [Average]
  (min, avg, max) = (504762.153, 622664.637, 659171.770), stdev = 27707.374
  CI (99.9%): [604152.983, 641176.290] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score       Error  Units
FlowableMapNotificationTest._Benchmark.benchmark_noBackpressure  thrpt   30  622664.637 ± 18511.654  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatestTest._Benchmark.benchmark_reentrantComplete$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatestTest._Benchmark.benchmark_reentrantComplete

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 173031.418 ops/s
# Warmup Iteration   2: 836409.832 ops/s
# Warmup Iteration   3: 1299157.131 ops/s
# Warmup Iteration   4: 1168308.054 ops/s
# Warmup Iteration   5: 1277155.045 ops/s
# Warmup Iteration   6: 1430746.141 ops/s
# Warmup Iteration   7: 1383382.914 ops/s
# Warmup Iteration   8: 1370783.162 ops/s
# Warmup Iteration   9: 1396752.793 ops/s
# Warmup Iteration  10: 1345840.883 ops/s
# Warmup Iteration  11: 1372643.184 ops/s
# Warmup Iteration  12: 1375181.665 ops/s
# Warmup Iteration  13: 1354492.971 ops/s
# Warmup Iteration  14: 1388577.171 ops/s
# Warmup Iteration  15: 1365103.858 ops/s
# Warmup Iteration  16: 1436787.568 ops/s
# Warmup Iteration  17: 1364376.393 ops/s
# Warmup Iteration  18: 1339133.032 ops/s
# Warmup Iteration  19: 1384476.988 ops/s
# Warmup Iteration  20: 1358105.681 ops/s
# Warmup Iteration  21: 1379011.495 ops/s
# Warmup Iteration  22: 1328337.296 ops/s
# Warmup Iteration  23: 1390053.409 ops/s
# Warmup Iteration  24: 1384830.591 ops/s
# Warmup Iteration  25: 1334501.756 ops/s
# Warmup Iteration  26: 1374820.612 ops/s
# Warmup Iteration  27: 1383753.037 ops/s
# Warmup Iteration  28: 1310048.928 ops/s
# Warmup Iteration  29: 1403534.207 ops/s
# Warmup Iteration  30: 1335441.347 ops/s
Iteration   1: 1415767.843 ops/s
Iteration   2: 1348527.971 ops/s
Iteration   3: 1345882.210 ops/s
Iteration   4: 1370526.725 ops/s
Iteration   5: 1347534.888 ops/s
Iteration   6: 1361442.468 ops/s
Iteration   7: 1386869.267 ops/s
Iteration   8: 1331894.806 ops/s
Iteration   9: 1362414.827 ops/s
Iteration  10: 1413270.975 ops/s
Iteration  11: 1328391.291 ops/s
Iteration  12: 1384475.770 ops/s
Iteration  13: 1366540.000 ops/s
Iteration  14: 1350988.826 ops/s
Iteration  15: 1395834.408 ops/s
Iteration  16: 1335353.573 ops/s
Iteration  17: 1355657.108 ops/s
Iteration  18: 1409183.695 ops/s
Iteration  19: 1347739.621 ops/s
Iteration  20: 1394415.424 ops/s
Iteration  21: 1385442.179 ops/s
Iteration  22: 1358514.475 ops/s
Iteration  23: 1405496.461 ops/s
Iteration  24: 1406702.962 ops/s
Iteration  25: 1315195.985 ops/s
Iteration  26: 1394118.043 ops/s
Iteration  27: 1354811.314 ops/s
Iteration  28: 1392197.188 ops/s
Iteration  29: 1363127.665 ops/s
Iteration  30: 1337805.604 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatestTest._Benchmark.benchmark_reentrantComplete":
  1368870.786 ±(99.9%) 18704.009 ops/s [Average]
  (min, avg, max) = (1315195.985, 1368870.786, 1415767.843), stdev = 27995.283
  CI (99.9%): [1350166.776, 1387574.795] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
FlowableThrottleLatestTest._Benchmark.benchmark_reentrantComplete  thrpt   30  1368870.786 ± 18704.009  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSourceTest._Benchmark.benchmark_unsubscribeInlineLatest$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSourceTest._Benchmark.benchmark_unsubscribeInlineLatest

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 334660.350 ops/s
# Warmup Iteration   2: 1472319.629 ops/s
# Warmup Iteration   3: 2170638.921 ops/s
# Warmup Iteration   4: 2172517.297 ops/s
# Warmup Iteration   5: 2175181.289 ops/s
# Warmup Iteration   6: 2210912.827 ops/s
# Warmup Iteration   7: 2213332.450 ops/s
# Warmup Iteration   8: 2213480.765 ops/s
# Warmup Iteration   9: 2248441.695 ops/s
# Warmup Iteration  10: 2084118.861 ops/s
# Warmup Iteration  11: 2036462.980 ops/s
# Warmup Iteration  12: 2243958.287 ops/s
# Warmup Iteration  13: 2200689.946 ops/s
# Warmup Iteration  14: 2220371.989 ops/s
# Warmup Iteration  15: 2288959.819 ops/s
# Warmup Iteration  16: 2200238.857 ops/s
# Warmup Iteration  17: 2215387.209 ops/s
# Warmup Iteration  18: 2269921.268 ops/s
# Warmup Iteration  19: 2185660.924 ops/s
# Warmup Iteration  20: 2280150.718 ops/s
# Warmup Iteration  21: 2307556.532 ops/s
# Warmup Iteration  22: 2203431.017 ops/s
# Warmup Iteration  23: 2281637.447 ops/s
# Warmup Iteration  24: 2253011.691 ops/s
# Warmup Iteration  25: 2168185.448 ops/s
# Warmup Iteration  26: 2297556.545 ops/s
# Warmup Iteration  27: 2186058.138 ops/s
# Warmup Iteration  28: 2212675.348 ops/s
# Warmup Iteration  29: 2277346.291 ops/s
# Warmup Iteration  30: 2169741.189 ops/s
Iteration   1: 2267746.715 ops/s
Iteration   2: 2115580.010 ops/s
Iteration   3: 2273300.417 ops/s
Iteration   4: 2139548.347 ops/s
Iteration   5: 2305860.036 ops/s
Iteration   6: 2275860.396 ops/s
Iteration   7: 2190084.650 ops/s
Iteration   8: 2294141.126 ops/s
Iteration   9: 2233939.548 ops/s
Iteration  10: 2202228.237 ops/s
Iteration  11: 2357176.852 ops/s
Iteration  12: 2191871.769 ops/s
Iteration  13: 2233501.902 ops/s
Iteration  14: 2254841.725 ops/s
Iteration  15: 2239844.032 ops/s
Iteration  16: 2154247.322 ops/s
Iteration  17: 2318613.993 ops/s
Iteration  18: 2156697.683 ops/s
Iteration  19: 2272071.853 ops/s
Iteration  20: 2258302.659 ops/s
Iteration  21: 1894913.329 ops/s
Iteration  22: 2172481.510 ops/s
Iteration  23: 2300357.474 ops/s
Iteration  24: 2318483.435 ops/s
Iteration  25: 2169020.599 ops/s
Iteration  26: 2239484.768 ops/s
Iteration  27: 2205499.404 ops/s
Iteration  28: 2242806.549 ops/s
Iteration  29: 2264147.625 ops/s
Iteration  30: 2133521.596 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSourceTest._Benchmark.benchmark_unsubscribeInlineLatest":
  2222539.185 ±(99.9%) 58266.177 ops/s [Average]
  (min, avg, max) = (1894913.329, 2222539.185, 2357176.852), stdev = 87210.077
  CI (99.9%): [2164273.008, 2280805.362] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
FlowableFromSourceTest._Benchmark.benchmark_unsubscribeInlineLatest  thrpt   30  2222539.185 ± 58266.177  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSourceTest._Benchmark.benchmark_unsubscribeInlineExactLatest$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSourceTest._Benchmark.benchmark_unsubscribeInlineExactLatest

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 336524.770 ops/s
# Warmup Iteration   2: 1441094.179 ops/s
# Warmup Iteration   3: 1882224.316 ops/s
# Warmup Iteration   4: 2191565.977 ops/s
# Warmup Iteration   5: 2309584.962 ops/s
# Warmup Iteration   6: 2161252.138 ops/s
# Warmup Iteration   7: 2212981.606 ops/s
# Warmup Iteration   8: 2259763.572 ops/s
# Warmup Iteration   9: 2178570.599 ops/s
# Warmup Iteration  10: 2181809.156 ops/s
# Warmup Iteration  11: 2301091.788 ops/s
# Warmup Iteration  12: 2216621.246 ops/s
# Warmup Iteration  13: 2321591.957 ops/s
# Warmup Iteration  14: 2271565.080 ops/s
# Warmup Iteration  15: 2136529.776 ops/s
# Warmup Iteration  16: 2293574.620 ops/s
# Warmup Iteration  17: 2161967.789 ops/s
# Warmup Iteration  18: 2286827.279 ops/s
# Warmup Iteration  19: 2195433.464 ops/s
# Warmup Iteration  20: 2245048.780 ops/s
# Warmup Iteration  21: 2269009.802 ops/s
# Warmup Iteration  22: 2140923.086 ops/s
# Warmup Iteration  23: 2270471.156 ops/s
# Warmup Iteration  24: 2099866.272 ops/s
# Warmup Iteration  25: 2289237.629 ops/s
# Warmup Iteration  26: 2168334.464 ops/s
# Warmup Iteration  27: 2263009.031 ops/s
# Warmup Iteration  28: 2321034.938 ops/s
# Warmup Iteration  29: 2187157.843 ops/s
# Warmup Iteration  30: 2243335.255 ops/s
Iteration   1: 2207428.742 ops/s
Iteration   2: 2215456.247 ops/s
Iteration   3: 2308348.069 ops/s
Iteration   4: 2169064.509 ops/s
Iteration   5: 2257631.635 ops/s
Iteration   6: 2148249.234 ops/s
Iteration   7: 2204537.180 ops/s
Iteration   8: 2185703.237 ops/s
Iteration   9: 2227305.859 ops/s
Iteration  10: 2214912.872 ops/s
Iteration  11: 2262825.009 ops/s
Iteration  12: 2247636.767 ops/s
Iteration  13: 2225392.693 ops/s
Iteration  14: 2289918.124 ops/s
Iteration  15: 2225876.836 ops/s
Iteration  16: 2184713.122 ops/s
Iteration  17: 2295790.298 ops/s
Iteration  18: 2204089.753 ops/s
Iteration  19: 2133067.529 ops/s
Iteration  20: 2245524.230 ops/s
Iteration  21: 2244244.962 ops/s
Iteration  22: 2278778.172 ops/s
Iteration  23: 2193839.798 ops/s
Iteration  24: 2252213.281 ops/s
Iteration  25: 2211714.188 ops/s
Iteration  26: 2264429.821 ops/s
Iteration  27: 2324022.288 ops/s
Iteration  28: 2088793.226 ops/s
Iteration  29: 2286370.731 ops/s
Iteration  30: 2170244.789 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSourceTest._Benchmark.benchmark_unsubscribeInlineExactLatest":
  2225604.107 ±(99.9%) 35833.294 ops/s [Average]
  (min, avg, max) = (2088793.226, 2225604.107, 2324022.288), stdev = 53633.591
  CI (99.9%): [2189770.813, 2261437.400] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score       Error  Units
FlowableFromSourceTest._Benchmark.benchmark_unsubscribeInlineExactLatest  thrpt   30  2225604.107 ± 35833.294  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSourceTest._Benchmark.benchmark_unsubscribedMissing$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSourceTest._Benchmark.benchmark_unsubscribedMissing

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 138029.597 ops/s
# Warmup Iteration   2: 505824.689 ops/s
# Warmup Iteration   3: 575991.402 ops/s
# Warmup Iteration   4: 523562.389 ops/s
# Warmup Iteration   5: 502978.848 ops/s
# Warmup Iteration   6: 581222.827 ops/s
# Warmup Iteration   7: 586372.412 ops/s
# Warmup Iteration   8: 545216.892 ops/s
# Warmup Iteration   9: 572308.015 ops/s
# Warmup Iteration  10: 565447.492 ops/s
# Warmup Iteration  11: 572381.916 ops/s
# Warmup Iteration  12: 608679.713 ops/s
# Warmup Iteration  13: 586347.335 ops/s
# Warmup Iteration  14: 604828.264 ops/s
# Warmup Iteration  15: 574563.039 ops/s
# Warmup Iteration  16: 593646.155 ops/s
# Warmup Iteration  17: 611471.889 ops/s
# Warmup Iteration  18: 607138.523 ops/s
# Warmup Iteration  19: 632360.792 ops/s
# Warmup Iteration  20: 618141.902 ops/s
# Warmup Iteration  21: 611278.515 ops/s
# Warmup Iteration  22: 627666.906 ops/s
# Warmup Iteration  23: 587958.050 ops/s
# Warmup Iteration  24: 625601.809 ops/s
# Warmup Iteration  25: 606961.030 ops/s
# Warmup Iteration  26: 610642.372 ops/s
# Warmup Iteration  27: 626269.673 ops/s
# Warmup Iteration  28: 601529.105 ops/s
# Warmup Iteration  29: 613273.554 ops/s
# Warmup Iteration  30: 623989.210 ops/s
Iteration   1: 608138.649 ops/s
Iteration   2: 616637.045 ops/s
Iteration   3: 608652.702 ops/s
Iteration   4: 625693.666 ops/s
Iteration   5: 600613.501 ops/s
Iteration   6: 621672.955 ops/s
Iteration   7: 611712.664 ops/s
Iteration   8: 614594.704 ops/s
Iteration   9: 632426.401 ops/s
Iteration  10: 594656.957 ops/s
Iteration  11: 637723.435 ops/s
Iteration  12: 606429.434 ops/s
Iteration  13: 629034.507 ops/s
Iteration  14: 605048.820 ops/s
Iteration  15: 613715.996 ops/s
Iteration  16: 514008.603 ops/s
Iteration  17: 598311.907 ops/s
Iteration  18: 629615.806 ops/s
Iteration  19: 609598.685 ops/s
Iteration  20: 629375.315 ops/s
Iteration  21: 602945.264 ops/s
Iteration  22: 586310.650 ops/s
Iteration  23: 636912.517 ops/s
Iteration  24: 602381.767 ops/s
Iteration  25: 631787.422 ops/s
Iteration  26: 586160.433 ops/s
Iteration  27: 621242.472 ops/s
Iteration  28: 597804.439 ops/s
Iteration  29: 597595.430 ops/s
Iteration  30: 627526.166 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSourceTest._Benchmark.benchmark_unsubscribedMissing":
  609944.277 ±(99.9%) 15569.113 ops/s [Average]
  (min, avg, max) = (514008.603, 609944.277, 637723.435), stdev = 23303.117
  CI (99.9%): [594375.164, 625513.390] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score       Error  Units
FlowableFromSourceTest._Benchmark.benchmark_unsubscribedMissing  thrpt   30  609944.277 ± 15569.113  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSourceTest._Benchmark.benchmark_unsubscribeInline$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSourceTest._Benchmark.benchmark_unsubscribeInline

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 212875.832 ops/s
# Warmup Iteration   2: 937697.407 ops/s
# Warmup Iteration   3: 1443563.322 ops/s
# Warmup Iteration   4: 1534351.334 ops/s
# Warmup Iteration   5: 1588741.626 ops/s
# Warmup Iteration   6: 1615190.832 ops/s
# Warmup Iteration   7: 1565246.193 ops/s
# Warmup Iteration   8: 1537565.040 ops/s
# Warmup Iteration   9: 1618725.494 ops/s
# Warmup Iteration  10: 1525559.153 ops/s
# Warmup Iteration  11: 1565047.144 ops/s
# Warmup Iteration  12: 1628487.579 ops/s
# Warmup Iteration  13: 1513225.422 ops/s
# Warmup Iteration  14: 1652685.303 ops/s
# Warmup Iteration  15: 1566986.589 ops/s
# Warmup Iteration  16: 1579555.924 ops/s
# Warmup Iteration  17: 1620399.337 ops/s
# Warmup Iteration  18: 1659279.423 ops/s
# Warmup Iteration  19: 1539863.661 ops/s
# Warmup Iteration  20: 1601097.751 ops/s
# Warmup Iteration  21: 1572289.117 ops/s
# Warmup Iteration  22: 1570694.129 ops/s
# Warmup Iteration  23: 1618853.168 ops/s
# Warmup Iteration  24: 1564564.643 ops/s
# Warmup Iteration  25: 1588148.973 ops/s
# Warmup Iteration  26: 1547007.283 ops/s
# Warmup Iteration  27: 1652675.079 ops/s
# Warmup Iteration  28: 1587968.921 ops/s
# Warmup Iteration  29: 1565083.975 ops/s
# Warmup Iteration  30: 1669516.535 ops/s
Iteration   1: 1561193.282 ops/s
Iteration   2: 1587758.209 ops/s
Iteration   3: 1601306.098 ops/s
Iteration   4: 1546847.353 ops/s
Iteration   5: 1569716.429 ops/s
Iteration   6: 1573401.829 ops/s
Iteration   7: 1633778.526 ops/s
Iteration   8: 1620722.837 ops/s
Iteration   9: 1549936.488 ops/s
Iteration  10: 1648816.221 ops/s
Iteration  11: 1569959.183 ops/s
Iteration  12: 1618771.927 ops/s
Iteration  13: 1579575.137 ops/s
Iteration  14: 1531693.716 ops/s
Iteration  15: 1610177.921 ops/s
Iteration  16: 1565154.134 ops/s
Iteration  17: 1546838.449 ops/s
Iteration  18: 1622238.833 ops/s
Iteration  19: 1598844.332 ops/s
Iteration  20: 1589349.507 ops/s
Iteration  21: 1550272.383 ops/s
Iteration  22: 1595295.822 ops/s
Iteration  23: 1575396.526 ops/s
Iteration  24: 1581905.324 ops/s
Iteration  25: 1603626.972 ops/s
Iteration  26: 1596278.052 ops/s
Iteration  27: 1591181.839 ops/s
Iteration  28: 1598773.265 ops/s
Iteration  29: 1579386.571 ops/s
Iteration  30: 1582171.069 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSourceTest._Benchmark.benchmark_unsubscribeInline":
  1586012.274 ±(99.9%) 18429.144 ops/s [Average]
  (min, avg, max) = (1531693.716, 1586012.274, 1648816.221), stdev = 27583.877
  CI (99.9%): [1567583.130, 1604441.419] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
FlowableFromSourceTest._Benchmark.benchmark_unsubscribeInline  thrpt   30  1586012.274 ± 18429.144  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_eagerDispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_eagerDispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 58708.636 ops/s
# Warmup Iteration   2: 291891.981 ops/s
# Warmup Iteration   3: 1105579.836 ops/s
# Warmup Iteration   4: 1182773.443 ops/s
# Warmup Iteration   5: 1076709.706 ops/s
# Warmup Iteration   6: 1195570.355 ops/s
# Warmup Iteration   7: 1219390.578 ops/s
# Warmup Iteration   8: 1215198.767 ops/s
# Warmup Iteration   9: 1232794.270 ops/s
# Warmup Iteration  10: 1267434.009 ops/s
# Warmup Iteration  11: 1216017.033 ops/s
# Warmup Iteration  12: 1278655.165 ops/s
# Warmup Iteration  13: 1246166.247 ops/s
# Warmup Iteration  14: 1275189.842 ops/s
# Warmup Iteration  15: 1277240.288 ops/s
# Warmup Iteration  16: 1276042.839 ops/s
# Warmup Iteration  17: 1212435.419 ops/s
# Warmup Iteration  18: 1263369.187 ops/s
# Warmup Iteration  19: 1243583.349 ops/s
# Warmup Iteration  20: 1258319.326 ops/s
# Warmup Iteration  21: 1222929.842 ops/s
# Warmup Iteration  22: 1257255.568 ops/s
# Warmup Iteration  23: 1217779.849 ops/s
# Warmup Iteration  24: 1257424.461 ops/s
# Warmup Iteration  25: 1208306.813 ops/s
# Warmup Iteration  26: 1211523.062 ops/s
# Warmup Iteration  27: 1229549.494 ops/s
# Warmup Iteration  28: 1225129.850 ops/s
# Warmup Iteration  29: 1246743.387 ops/s
# Warmup Iteration  30: 1190142.063 ops/s
Iteration   1: 1245735.730 ops/s
Iteration   2: 1274034.028 ops/s
Iteration   3: 1250697.696 ops/s
Iteration   4: 1264358.929 ops/s
Iteration   5: 1215226.293 ops/s
Iteration   6: 1285249.471 ops/s
Iteration   7: 1215361.938 ops/s
Iteration   8: 1244010.779 ops/s
Iteration   9: 1244379.227 ops/s
Iteration  10: 1225279.895 ops/s
Iteration  11: 912296.612 ops/s
Iteration  12: 1270736.698 ops/s
Iteration  13: 1208798.780 ops/s
Iteration  14: 1270896.448 ops/s
Iteration  15: 1220421.060 ops/s
Iteration  16: 1198927.634 ops/s
Iteration  17: 1265503.153 ops/s
Iteration  18: 1218186.014 ops/s
Iteration  19: 1242491.828 ops/s
Iteration  20: 1281097.826 ops/s
Iteration  21: 1204502.952 ops/s
Iteration  22: 1273474.682 ops/s
Iteration  23: 1204641.751 ops/s
Iteration  24: 1268564.683 ops/s
Iteration  25: 1190667.183 ops/s
Iteration  26: 1265425.453 ops/s
Iteration  27: 1228535.093 ops/s
Iteration  28: 1218413.002 ops/s
Iteration  29: 1268652.550 ops/s
Iteration  30: 1225737.430 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_eagerDispose":
  1230076.827 ±(99.9%) 44172.885 ops/s [Average]
  (min, avg, max) = (912296.612, 1230076.827, 1285249.471), stdev = 66115.900
  CI (99.9%): [1185903.942, 1274249.712] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
FlowableCombineLatestTest._Benchmark.benchmark_eagerDispose  thrpt   30  1230076.827 ± 44172.885  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_leavingSubscriberOverrequests$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_leavingSubscriberOverrequests

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 113321.108 ops/s
# Warmup Iteration   2: 225765.499 ops/s
# Warmup Iteration   3: 313932.116 ops/s
# Warmup Iteration   4: 710293.793 ops/s
# Warmup Iteration   5: 807605.822 ops/s
# Warmup Iteration   6: 852964.140 ops/s
# Warmup Iteration   7: 738210.628 ops/s
# Warmup Iteration   8: 759548.121 ops/s
# Warmup Iteration   9: 845373.777 ops/s
# Warmup Iteration  10: 825648.824 ops/s
# Warmup Iteration  11: 830444.167 ops/s
# Warmup Iteration  12: 863184.293 ops/s
# Warmup Iteration  13: 799270.373 ops/s
# Warmup Iteration  14: 852216.899 ops/s
# Warmup Iteration  15: 824639.705 ops/s
# Warmup Iteration  16: 822337.916 ops/s
# Warmup Iteration  17: 825480.038 ops/s
# Warmup Iteration  18: 823954.983 ops/s
# Warmup Iteration  19: 841642.042 ops/s
# Warmup Iteration  20: 870002.833 ops/s
# Warmup Iteration  21: 809305.258 ops/s
# Warmup Iteration  22: 798876.425 ops/s
# Warmup Iteration  23: 864109.475 ops/s
# Warmup Iteration  24: 803300.780 ops/s
# Warmup Iteration  25: 813256.216 ops/s
# Warmup Iteration  26: 847557.486 ops/s
# Warmup Iteration  27: 825216.395 ops/s
# Warmup Iteration  28: 821354.162 ops/s
# Warmup Iteration  29: 826517.305 ops/s
# Warmup Iteration  30: 825529.942 ops/s
Iteration   1: 834253.004 ops/s
Iteration   2: 818887.131 ops/s
Iteration   3: 864824.509 ops/s
Iteration   4: 800676.681 ops/s
Iteration   5: 860710.269 ops/s
Iteration   6: 809757.394 ops/s
Iteration   7: 816059.940 ops/s
Iteration   8: 836796.180 ops/s
Iteration   9: 810981.974 ops/s
Iteration  10: 829278.473 ops/s
Iteration  11: 805659.400 ops/s
Iteration  12: 858635.131 ops/s
Iteration  13: 816694.638 ops/s
Iteration  14: 814601.616 ops/s
Iteration  15: 830809.938 ops/s
Iteration  16: 839645.803 ops/s
Iteration  17: 812940.624 ops/s
Iteration  18: 838282.764 ops/s
Iteration  19: 808712.489 ops/s
Iteration  20: 846428.883 ops/s
Iteration  21: 837484.872 ops/s
Iteration  22: 820458.744 ops/s
Iteration  23: 873844.696 ops/s
Iteration  24: 808892.199 ops/s
Iteration  25: 831069.891 ops/s
Iteration  26: 850963.470 ops/s
Iteration  27: 797332.052 ops/s
Iteration  28: 853228.213 ops/s
Iteration  29: 817954.496 ops/s
Iteration  30: 820819.741 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_leavingSubscriberOverrequests":
  828889.507 ±(99.9%) 13549.541 ops/s [Average]
  (min, avg, max) = (797332.052, 828889.507, 873844.696), stdev = 20280.317
  CI (99.9%): [815339.966, 842439.048] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score       Error  Units
FlowablePublishTest._Benchmark.benchmark_leavingSubscriberOverrequests  thrpt   30  828889.507 ± 13549.541  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutWithSelectorTest._Benchmark.benchmark_badInnerSource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutWithSelectorTest._Benchmark.benchmark_badInnerSource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 27878.181 ops/s
# Warmup Iteration   2: 69434.937 ops/s
# Warmup Iteration   3: 150526.237 ops/s
# Warmup Iteration   4: 153282.120 ops/s
# Warmup Iteration   5: 171421.294 ops/s
# Warmup Iteration   6: 165590.657 ops/s
# Warmup Iteration   7: 171285.475 ops/s
# Warmup Iteration   8: 164393.468 ops/s
# Warmup Iteration   9: 166972.910 ops/s
# Warmup Iteration  10: 174263.793 ops/s
# Warmup Iteration  11: 164836.992 ops/s
# Warmup Iteration  12: 164784.112 ops/s
# Warmup Iteration  13: 159427.239 ops/s
# Warmup Iteration  14: 165782.712 ops/s
# Warmup Iteration  15: 167277.523 ops/s
# Warmup Iteration  16: 170818.491 ops/s
# Warmup Iteration  17: 179923.562 ops/s
# Warmup Iteration  18: 172035.834 ops/s
# Warmup Iteration  19: 173314.951 ops/s
# Warmup Iteration  20: 174124.720 ops/s
# Warmup Iteration  21: 179890.730 ops/s
# Warmup Iteration  22: 169479.050 ops/s
# Warmup Iteration  23: 170976.917 ops/s
# Warmup Iteration  24: 167819.151 ops/s
# Warmup Iteration  25: 178535.549 ops/s
# Warmup Iteration  26: 169919.289 ops/s
# Warmup Iteration  27: 178789.769 ops/s
# Warmup Iteration  28: 175845.198 ops/s
# Warmup Iteration  29: 181320.770 ops/s
# Warmup Iteration  30: 171830.246 ops/s
Iteration   1: 179382.873 ops/s
Iteration   2: 170081.346 ops/s
Iteration   3: 168732.335 ops/s
Iteration   4: 182422.507 ops/s
Iteration   5: 169945.405 ops/s
Iteration   6: 148902.836 ops/s
Iteration   7: 175838.692 ops/s
Iteration   8: 173777.803 ops/s
Iteration   9: 178897.989 ops/s
Iteration  10: 169269.646 ops/s
Iteration  11: 172656.432 ops/s
Iteration  12: 175425.197 ops/s
Iteration  13: 178532.579 ops/s
Iteration  14: 170722.651 ops/s
Iteration  15: 172278.202 ops/s
Iteration  16: 181529.947 ops/s
Iteration  17: 178705.320 ops/s
Iteration  18: 171766.621 ops/s
Iteration  19: 176987.585 ops/s
Iteration  20: 171150.498 ops/s
Iteration  21: 178487.387 ops/s
Iteration  22: 172662.504 ops/s
Iteration  23: 174751.447 ops/s
Iteration  24: 172196.738 ops/s
Iteration  25: 173048.836 ops/s
Iteration  26: 182243.266 ops/s
Iteration  27: 174187.713 ops/s
Iteration  28: 179590.588 ops/s
Iteration  29: 171618.305 ops/s
Iteration  30: 177729.616 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutWithSelectorTest._Benchmark.benchmark_badInnerSource":
  174117.429 ±(99.9%) 4157.838 ops/s [Average]
  (min, avg, max) = (148902.836, 174117.429, 182422.507), stdev = 6223.256
  CI (99.9%): [169959.591, 178275.267] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score      Error  Units
FlowableTimeoutWithSelectorTest._Benchmark.benchmark_badInnerSource  thrpt   30  174117.429 ± 4157.838  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_doneButNotEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_doneButNotEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 106938.400 ops/s
# Warmup Iteration   2: 325173.279 ops/s
# Warmup Iteration   3: 901855.606 ops/s
# Warmup Iteration   4: 913712.572 ops/s
# Warmup Iteration   5: 1036730.934 ops/s
# Warmup Iteration   6: 1117422.761 ops/s
# Warmup Iteration   7: 1062670.964 ops/s
# Warmup Iteration   8: 1102831.513 ops/s
# Warmup Iteration   9: 1079169.224 ops/s
# Warmup Iteration  10: 1055173.937 ops/s
# Warmup Iteration  11: 1095713.967 ops/s
# Warmup Iteration  12: 1053124.722 ops/s
# Warmup Iteration  13: 1118654.743 ops/s
# Warmup Iteration  14: 1043949.535 ops/s
# Warmup Iteration  15: 1072532.294 ops/s
# Warmup Iteration  16: 1099185.099 ops/s
# Warmup Iteration  17: 1030466.866 ops/s
# Warmup Iteration  18: 1083761.947 ops/s
# Warmup Iteration  19: 1063826.728 ops/s
# Warmup Iteration  20: 1081633.898 ops/s
# Warmup Iteration  21: 1067808.445 ops/s
# Warmup Iteration  22: 1061249.468 ops/s
# Warmup Iteration  23: 1106766.081 ops/s
# Warmup Iteration  24: 1060294.975 ops/s
# Warmup Iteration  25: 1015754.609 ops/s
# Warmup Iteration  26: 1090935.442 ops/s
# Warmup Iteration  27: 1052625.339 ops/s
# Warmup Iteration  28: 1054940.166 ops/s
# Warmup Iteration  29: 1041745.047 ops/s
# Warmup Iteration  30: 1045899.372 ops/s
Iteration   1: 1116433.154 ops/s
Iteration   2: 1108065.409 ops/s
Iteration   3: 1042102.948 ops/s
Iteration   4: 1124231.324 ops/s
Iteration   5: 1105929.623 ops/s
Iteration   6: 1101990.221 ops/s
Iteration   7: 1055339.735 ops/s
Iteration   8: 1120444.886 ops/s
Iteration   9: 1055382.863 ops/s
Iteration  10: 1036087.000 ops/s
Iteration  11: 1132073.233 ops/s
Iteration  12: 1056698.595 ops/s
Iteration  13: 1067041.104 ops/s
Iteration  14: 1071556.990 ops/s
Iteration  15: 1064467.426 ops/s
Iteration  16: 1113823.464 ops/s
Iteration  17: 1063650.245 ops/s
Iteration  18: 1077917.702 ops/s
Iteration  19: 1081401.902 ops/s
Iteration  20: 1060216.745 ops/s
Iteration  21: 1091158.273 ops/s
Iteration  22: 1062122.976 ops/s
Iteration  23: 1027092.136 ops/s
Iteration  24: 1096054.362 ops/s
Iteration  25: 1071397.980 ops/s
Iteration  26: 1078395.613 ops/s
Iteration  27: 1044616.345 ops/s
Iteration  28: 1077829.036 ops/s
Iteration  29: 1096813.496 ops/s
Iteration  30: 1064612.610 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_doneButNotEmpty":
  1078831.580 ±(99.9%) 18526.414 ops/s [Average]
  (min, avg, max) = (1027092.136, 1078831.580, 1132073.233), stdev = 27729.466
  CI (99.9%): [1060305.166, 1097357.993] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
FlowableCombineLatestTest._Benchmark.benchmark_doneButNotEmpty  thrpt   30  1078831.580 ± 18526.414  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_mergeScalar2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_mergeScalar2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 403338.519 ops/s
# Warmup Iteration   2: 2014564.829 ops/s
# Warmup Iteration   3: 2413171.020 ops/s
# Warmup Iteration   4: 2988248.583 ops/s
# Warmup Iteration   5: 2805733.041 ops/s
# Warmup Iteration   6: 2970770.389 ops/s
# Warmup Iteration   7: 2766234.131 ops/s
# Warmup Iteration   8: 2987236.883 ops/s
# Warmup Iteration   9: 2870928.238 ops/s
# Warmup Iteration  10: 2841896.723 ops/s
# Warmup Iteration  11: 2964720.884 ops/s
# Warmup Iteration  12: 2897830.701 ops/s
# Warmup Iteration  13: 2889056.932 ops/s
# Warmup Iteration  14: 3006856.168 ops/s
# Warmup Iteration  15: 2930458.602 ops/s
# Warmup Iteration  16: 2881799.455 ops/s
# Warmup Iteration  17: 3016555.879 ops/s
# Warmup Iteration  18: 2972995.819 ops/s
# Warmup Iteration  19: 2881119.712 ops/s
# Warmup Iteration  20: 2919954.251 ops/s
# Warmup Iteration  21: 2919418.949 ops/s
# Warmup Iteration  22: 2837382.727 ops/s
# Warmup Iteration  23: 2906449.705 ops/s
# Warmup Iteration  24: 2858328.877 ops/s
# Warmup Iteration  25: 2857966.444 ops/s
# Warmup Iteration  26: 2989366.988 ops/s
# Warmup Iteration  27: 2966350.027 ops/s
# Warmup Iteration  28: 2890673.937 ops/s
# Warmup Iteration  29: 2904257.717 ops/s
# Warmup Iteration  30: 2256368.099 ops/s
Iteration   1: 2999745.281 ops/s
Iteration   2: 2864013.452 ops/s
Iteration   3: 2982866.943 ops/s
Iteration   4: 2953270.042 ops/s
Iteration   5: 2888138.544 ops/s
Iteration   6: 2887226.798 ops/s
Iteration   7: 3005600.424 ops/s
Iteration   8: 2848579.106 ops/s
Iteration   9: 2989950.678 ops/s
Iteration  10: 2896818.598 ops/s
Iteration  11: 2881490.503 ops/s
Iteration  12: 3028859.191 ops/s
Iteration  13: 2845455.695 ops/s
Iteration  14: 2881209.702 ops/s
Iteration  15: 2995394.937 ops/s
Iteration  16: 2860168.777 ops/s
Iteration  17: 2944760.300 ops/s
Iteration  18: 2967952.118 ops/s
Iteration  19: 2895987.892 ops/s
Iteration  20: 2957354.374 ops/s
Iteration  21: 2793983.878 ops/s
Iteration  22: 2896230.919 ops/s
Iteration  23: 3016532.621 ops/s
Iteration  24: 2903837.561 ops/s
Iteration  25: 2936434.097 ops/s
Iteration  26: 2884581.864 ops/s
Iteration  27: 3010339.303 ops/s
Iteration  28: 3009021.335 ops/s
Iteration  29: 2882217.559 ops/s
Iteration  30: 3012215.764 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_mergeScalar2":
  2930674.609 ±(99.9%) 42832.709 ops/s [Average]
  (min, avg, max) = (2793983.878, 2930674.609, 3028859.191), stdev = 64109.987
  CI (99.9%): [2887841.900, 2973507.317] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
FlowableFlatMapTest._Benchmark.benchmark_mergeScalar2  thrpt   30  2930674.609 ± 42832.709  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_someConcurrencyInnerScalarCancel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_someConcurrencyInnerScalarCancel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 259928.632 ops/s
# Warmup Iteration   2: 1339420.153 ops/s
# Warmup Iteration   3: 2295650.899 ops/s
# Warmup Iteration   4: 2624620.175 ops/s
# Warmup Iteration   5: 2523478.674 ops/s
# Warmup Iteration   6: 2589300.636 ops/s
# Warmup Iteration   7: 2501475.246 ops/s
# Warmup Iteration   8: 2614679.377 ops/s
# Warmup Iteration   9: 2559095.393 ops/s
# Warmup Iteration  10: 2557476.529 ops/s
# Warmup Iteration  11: 2621808.480 ops/s
# Warmup Iteration  12: 2231848.240 ops/s
# Warmup Iteration  13: 2486334.593 ops/s
# Warmup Iteration  14: 2614702.217 ops/s
# Warmup Iteration  15: 2529647.973 ops/s
# Warmup Iteration  16: 2689252.527 ops/s
# Warmup Iteration  17: 2491906.117 ops/s
# Warmup Iteration  18: 2610260.560 ops/s
# Warmup Iteration  19: 2542029.019 ops/s
# Warmup Iteration  20: 2599600.889 ops/s
# Warmup Iteration  21: 2681328.939 ops/s
# Warmup Iteration  22: 2570204.778 ops/s
# Warmup Iteration  23: 2614139.297 ops/s
# Warmup Iteration  24: 2645281.340 ops/s
# Warmup Iteration  25: 2500411.064 ops/s
# Warmup Iteration  26: 2529196.085 ops/s
# Warmup Iteration  27: 2652035.425 ops/s
# Warmup Iteration  28: 2540657.481 ops/s
# Warmup Iteration  29: 2624306.530 ops/s
# Warmup Iteration  30: 2627280.584 ops/s
Iteration   1: 2535319.585 ops/s
Iteration   2: 2652892.927 ops/s
Iteration   3: 2704607.233 ops/s
Iteration   4: 2568787.150 ops/s
Iteration   5: 2633235.055 ops/s
Iteration   6: 2605025.224 ops/s
Iteration   7: 2549419.329 ops/s
Iteration   8: 2692759.686 ops/s
Iteration   9: 2530083.507 ops/s
Iteration  10: 2604311.422 ops/s
Iteration  11: 2713444.969 ops/s
Iteration  12: 2447860.845 ops/s
Iteration  13: 2602833.042 ops/s
Iteration  14: 2580114.114 ops/s
Iteration  15: 2505219.644 ops/s
Iteration  16: 2659625.647 ops/s
Iteration  17: 2550147.984 ops/s
Iteration  18: 2613152.513 ops/s
Iteration  19: 2681999.248 ops/s
Iteration  20: 2669688.115 ops/s
Iteration  21: 2520250.864 ops/s
Iteration  22: 2634643.579 ops/s
Iteration  23: 2488623.351 ops/s
Iteration  24: 2659427.238 ops/s
Iteration  25: 2534573.520 ops/s
Iteration  26: 2629602.823 ops/s
Iteration  27: 2638539.713 ops/s
Iteration  28: 2481903.271 ops/s
Iteration  29: 2702163.623 ops/s
Iteration  30: 2745487.614 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_someConcurrencyInnerScalarCancel":
  2604524.761 ±(99.9%) 51806.743 ops/s [Average]
  (min, avg, max) = (2447860.845, 2604524.761, 2745487.614), stdev = 77541.900
  CI (99.9%): [2552718.018, 2656331.504] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score       Error  Units
FlowableFlatMapTest._Benchmark.benchmark_someConcurrencyInnerScalarCancel  thrpt   30  2604524.761 ± 51806.743  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupByTest._Benchmark.benchmark_keySelectorThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupByTest._Benchmark.benchmark_keySelectorThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 50575.906 ops/s
# Warmup Iteration   2: 382875.587 ops/s
# Warmup Iteration   3: 426375.772 ops/s
# Warmup Iteration   4: 460885.552 ops/s
# Warmup Iteration   5: 425201.024 ops/s
# Warmup Iteration   6: 470888.841 ops/s
# Warmup Iteration   7: 481652.330 ops/s
# Warmup Iteration   8: 494418.377 ops/s
# Warmup Iteration   9: 469695.442 ops/s
# Warmup Iteration  10: 468644.809 ops/s
# Warmup Iteration  11: 487604.584 ops/s
# Warmup Iteration  12: 478567.759 ops/s
# Warmup Iteration  13: 482592.900 ops/s
# Warmup Iteration  14: 466030.686 ops/s
# Warmup Iteration  15: 494329.918 ops/s
# Warmup Iteration  16: 494856.263 ops/s
# Warmup Iteration  17: 487830.339 ops/s
# Warmup Iteration  18: 520980.781 ops/s
# Warmup Iteration  19: 502365.365 ops/s
# Warmup Iteration  20: 496867.923 ops/s
# Warmup Iteration  21: 506701.781 ops/s
# Warmup Iteration  22: 483117.237 ops/s
# Warmup Iteration  23: 511575.805 ops/s
# Warmup Iteration  24: 411614.248 ops/s
# Warmup Iteration  25: 494786.330 ops/s
# Warmup Iteration  26: 504284.639 ops/s
# Warmup Iteration  27: 509820.819 ops/s
# Warmup Iteration  28: 498292.716 ops/s
# Warmup Iteration  29: 492576.365 ops/s
# Warmup Iteration  30: 495367.005 ops/s
Iteration   1: 508606.331 ops/s
Iteration   2: 494461.606 ops/s
Iteration   3: 491387.171 ops/s
Iteration   4: 515713.777 ops/s
Iteration   5: 492016.160 ops/s
Iteration   6: 513230.344 ops/s
Iteration   7: 501394.524 ops/s
Iteration   8: 484503.963 ops/s
Iteration   9: 517239.975 ops/s
Iteration  10: 481576.758 ops/s
Iteration  11: 492348.910 ops/s
Iteration  12: 492076.507 ops/s
Iteration  13: 489158.650 ops/s
Iteration  14: 512675.568 ops/s
Iteration  15: 505461.168 ops/s
Iteration  16: 488517.413 ops/s
Iteration  17: 512623.384 ops/s
Iteration  18: 484153.813 ops/s
Iteration  19: 503722.838 ops/s
Iteration  20: 498216.288 ops/s
Iteration  21: 504013.624 ops/s
Iteration  22: 518257.756 ops/s
Iteration  23: 485334.183 ops/s
Iteration  24: 503847.022 ops/s
Iteration  25: 492774.592 ops/s
Iteration  26: 505183.527 ops/s
Iteration  27: 503929.382 ops/s
Iteration  28: 475793.057 ops/s
Iteration  29: 494601.513 ops/s
Iteration  30: 488678.388 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupByTest._Benchmark.benchmark_keySelectorThrows":
  498383.273 ±(99.9%) 7718.793 ops/s [Average]
  (min, avg, max) = (475793.057, 498383.273, 518257.756), stdev = 11553.127
  CI (99.9%): [490664.480, 506102.066] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score      Error  Units
FlowableGroupByTest._Benchmark.benchmark_keySelectorThrows  thrpt   30  498383.273 ± 7718.793  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_allConcurrencyBackpressured$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_allConcurrencyBackpressured

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 234445.720 ops/s
# Warmup Iteration   2: 955967.584 ops/s
# Warmup Iteration   3: 1712906.258 ops/s
# Warmup Iteration   4: 2008676.505 ops/s
# Warmup Iteration   5: 1953915.690 ops/s
# Warmup Iteration   6: 1941088.253 ops/s
# Warmup Iteration   7: 1962079.752 ops/s
# Warmup Iteration   8: 1915931.556 ops/s
# Warmup Iteration   9: 2018897.410 ops/s
# Warmup Iteration  10: 1891444.975 ops/s
# Warmup Iteration  11: 1962398.306 ops/s
# Warmup Iteration  12: 1952220.812 ops/s
# Warmup Iteration  13: 1981564.906 ops/s
# Warmup Iteration  14: 1906243.752 ops/s
# Warmup Iteration  15: 1939415.939 ops/s
# Warmup Iteration  16: 2025713.446 ops/s
# Warmup Iteration  17: 1921807.175 ops/s
# Warmup Iteration  18: 1970802.598 ops/s
# Warmup Iteration  19: 1983856.304 ops/s
# Warmup Iteration  20: 1907344.474 ops/s
# Warmup Iteration  21: 1963226.022 ops/s
# Warmup Iteration  22: 1907352.520 ops/s
# Warmup Iteration  23: 1957718.020 ops/s
# Warmup Iteration  24: 1980933.559 ops/s
# Warmup Iteration  25: 1865081.008 ops/s
# Warmup Iteration  26: 2038606.341 ops/s
# Warmup Iteration  27: 1977594.911 ops/s
# Warmup Iteration  28: 1916011.858 ops/s
# Warmup Iteration  29: 2008028.384 ops/s
# Warmup Iteration  30: 1860617.082 ops/s
Iteration   1: 1939426.807 ops/s
Iteration   2: 1928081.227 ops/s
Iteration   3: 1938635.693 ops/s
Iteration   4: 1994101.643 ops/s
Iteration   5: 1857384.935 ops/s
Iteration   6: 1953356.793 ops/s
Iteration   7: 1923974.031 ops/s
Iteration   8: 1917010.642 ops/s
Iteration   9: 1960612.337 ops/s
Iteration  10: 1924435.204 ops/s
Iteration  11: 1764309.349 ops/s
Iteration  12: 2000621.467 ops/s
Iteration  13: 1919304.193 ops/s
Iteration  14: 1961259.049 ops/s
Iteration  15: 1967347.927 ops/s
Iteration  16: 1888276.419 ops/s
Iteration  17: 1893188.140 ops/s
Iteration  18: 1935834.434 ops/s
Iteration  19: 1952446.509 ops/s
Iteration  20: 2017057.560 ops/s
Iteration  21: 1848376.108 ops/s
Iteration  22: 2036925.161 ops/s
Iteration  23: 1954682.335 ops/s
Iteration  24: 1903176.510 ops/s
Iteration  25: 1992088.952 ops/s
Iteration  26: 1938181.996 ops/s
Iteration  27: 1979644.055 ops/s
Iteration  28: 1910549.572 ops/s
Iteration  29: 1977754.681 ops/s
Iteration  30: 1904310.283 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_allConcurrencyBackpressured":
  1936078.467 ±(99.9%) 36262.113 ops/s [Average]
  (min, avg, max) = (1764309.349, 1936078.467, 2036925.161), stdev = 54275.428
  CI (99.9%): [1899816.354, 1972340.581] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
FlowableFlatMapTest._Benchmark.benchmark_allConcurrencyBackpressured  thrpt   30  1936078.467 ± 36262.113  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_mergeDelayErrorIterableOneIsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_mergeDelayErrorIterableOneIsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 138582.634 ops/s
# Warmup Iteration   2: 466540.574 ops/s
# Warmup Iteration   3: 489170.619 ops/s
# Warmup Iteration   4: 539755.981 ops/s
# Warmup Iteration   5: 546919.660 ops/s
# Warmup Iteration   6: 553381.349 ops/s
# Warmup Iteration   7: 487695.651 ops/s
# Warmup Iteration   8: 564734.346 ops/s
# Warmup Iteration   9: 540608.955 ops/s
# Warmup Iteration  10: 526670.933 ops/s
# Warmup Iteration  11: 550301.861 ops/s
# Warmup Iteration  12: 518010.483 ops/s
# Warmup Iteration  13: 547816.274 ops/s
# Warmup Iteration  14: 543210.745 ops/s
# Warmup Iteration  15: 537502.066 ops/s
# Warmup Iteration  16: 549104.379 ops/s
# Warmup Iteration  17: 547124.029 ops/s
# Warmup Iteration  18: 558841.504 ops/s
# Warmup Iteration  19: 395060.893 ops/s
# Warmup Iteration  20: 558217.049 ops/s
# Warmup Iteration  21: 584442.981 ops/s
# Warmup Iteration  22: 540821.738 ops/s
# Warmup Iteration  23: 582379.433 ops/s
# Warmup Iteration  24: 536056.266 ops/s
# Warmup Iteration  25: 562505.830 ops/s
# Warmup Iteration  26: 575031.702 ops/s
# Warmup Iteration  27: 551851.987 ops/s
# Warmup Iteration  28: 578053.144 ops/s
# Warmup Iteration  29: 546308.230 ops/s
# Warmup Iteration  30: 572286.236 ops/s
Iteration   1: 549439.696 ops/s
Iteration   2: 563236.670 ops/s
Iteration   3: 572093.123 ops/s
Iteration   4: 550428.899 ops/s
Iteration   5: 579864.914 ops/s
Iteration   6: 543970.372 ops/s
Iteration   7: 584502.512 ops/s
Iteration   8: 530233.518 ops/s
Iteration   9: 571289.920 ops/s
Iteration  10: 566651.295 ops/s
Iteration  11: 545105.869 ops/s
Iteration  12: 566601.850 ops/s
Iteration  13: 552310.942 ops/s
Iteration  14: 568028.816 ops/s
Iteration  15: 559179.865 ops/s
Iteration  16: 565763.561 ops/s
Iteration  17: 549558.154 ops/s
Iteration  18: 560798.501 ops/s
Iteration  19: 589467.936 ops/s
Iteration  20: 539510.822 ops/s
Iteration  21: 582512.823 ops/s
Iteration  22: 544240.875 ops/s
Iteration  23: 569770.805 ops/s
Iteration  24: 547129.745 ops/s
Iteration  25: 571618.791 ops/s
Iteration  26: 555745.892 ops/s
Iteration  27: 539813.492 ops/s
Iteration  28: 564056.011 ops/s
Iteration  29: 547471.739 ops/s
Iteration  30: 552773.202 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_mergeDelayErrorIterableOneIsNull":
  559439.020 ±(99.9%) 9834.353 ops/s [Average]
  (min, avg, max) = (530233.518, 559439.020, 589467.936), stdev = 14719.598
  CI (99.9%): [549604.667, 569273.373] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score      Error  Units
FlowableNullTests._Benchmark.benchmark_mergeDelayErrorIterableOneIsNull  thrpt   30  559439.020 ± 9834.353  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_mergeScalarError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_mergeScalarError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 75767.775 ops/s
# Warmup Iteration   2: 355948.749 ops/s
# Warmup Iteration   3: 374688.660 ops/s
# Warmup Iteration   4: 407633.242 ops/s
# Warmup Iteration   5: 389107.483 ops/s
# Warmup Iteration   6: 409243.311 ops/s
# Warmup Iteration   7: 434008.073 ops/s
# Warmup Iteration   8: 432740.574 ops/s
# Warmup Iteration   9: 412300.301 ops/s
# Warmup Iteration  10: 421088.328 ops/s
# Warmup Iteration  11: 408645.322 ops/s
# Warmup Iteration  12: 424436.699 ops/s
# Warmup Iteration  13: 420522.190 ops/s
# Warmup Iteration  14: 409135.386 ops/s
# Warmup Iteration  15: 414264.602 ops/s
# Warmup Iteration  16: 419815.714 ops/s
# Warmup Iteration  17: 503244.034 ops/s
# Warmup Iteration  18: 519155.113 ops/s
# Warmup Iteration  19: 489891.808 ops/s
# Warmup Iteration  20: 497825.910 ops/s
# Warmup Iteration  21: 496005.197 ops/s
# Warmup Iteration  22: 509269.643 ops/s
# Warmup Iteration  23: 506176.972 ops/s
# Warmup Iteration  24: 489119.513 ops/s
# Warmup Iteration  25: 512796.159 ops/s
# Warmup Iteration  26: 487922.148 ops/s
# Warmup Iteration  27: 491695.389 ops/s
# Warmup Iteration  28: 497935.416 ops/s
# Warmup Iteration  29: 509626.200 ops/s
# Warmup Iteration  30: 504478.324 ops/s
Iteration   1: 512415.574 ops/s
Iteration   2: 492798.196 ops/s
Iteration   3: 504692.215 ops/s
Iteration   4: 504568.531 ops/s
Iteration   5: 494460.794 ops/s
Iteration   6: 529112.656 ops/s
Iteration   7: 480027.097 ops/s
Iteration   8: 517619.681 ops/s
Iteration   9: 491572.747 ops/s
Iteration  10: 502223.978 ops/s
Iteration  11: 518627.469 ops/s
Iteration  12: 486049.392 ops/s
Iteration  13: 509602.135 ops/s
Iteration  14: 491826.832 ops/s
Iteration  15: 495282.004 ops/s
Iteration  16: 513328.609 ops/s
Iteration  17: 494995.514 ops/s
Iteration  18: 519182.941 ops/s
Iteration  19: 480914.045 ops/s
Iteration  20: 525451.867 ops/s
Iteration  21: 508319.814 ops/s
Iteration  22: 497020.354 ops/s
Iteration  23: 516015.479 ops/s
Iteration  24: 493388.858 ops/s
Iteration  25: 500852.007 ops/s
Iteration  26: 486263.612 ops/s
Iteration  27: 518107.581 ops/s
Iteration  28: 498367.740 ops/s
Iteration  29: 499597.777 ops/s
Iteration  30: 515490.533 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_mergeScalarError":
  503272.534 ±(99.9%) 8803.559 ops/s [Average]
  (min, avg, max) = (480027.097, 503272.534, 529112.656), stdev = 13176.754
  CI (99.9%): [494468.975, 512076.094] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
FlowableFlatMapTest._Benchmark.benchmark_mergeScalarError  thrpt   30  503272.534 ± 8803.559  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_scalarQueueCompleteMain$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_scalarQueueCompleteMain

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3861.077 ops/s
# Warmup Iteration   2: 5778.067 ops/s
# Warmup Iteration   3: 9094.624 ops/s
# Warmup Iteration   4: 24279.908 ops/s
# Warmup Iteration   5: 18487.741 ops/s
# Warmup Iteration   6: 25208.868 ops/s
# Warmup Iteration   7: 25456.497 ops/s
# Warmup Iteration   8: 24824.699 ops/s
# Warmup Iteration   9: 26113.713 ops/s
# Warmup Iteration  10: 23702.770 ops/s
# Warmup Iteration  11: 25665.523 ops/s
# Warmup Iteration  12: 27903.208 ops/s
# Warmup Iteration  13: 22379.355 ops/s
# Warmup Iteration  14: 20508.013 ops/s
# Warmup Iteration  15: 29447.767 ops/s
# Warmup Iteration  16: 28913.200 ops/s
# Warmup Iteration  17: 26892.048 ops/s
# Warmup Iteration  18: 28112.116 ops/s
# Warmup Iteration  19: 27155.075 ops/s
# Warmup Iteration  20: 24993.317 ops/s
# Warmup Iteration  21: 26195.839 ops/s
# Warmup Iteration  22: 28348.129 ops/s
# Warmup Iteration  23: 25259.241 ops/s
# Warmup Iteration  24: 26625.513 ops/s
# Warmup Iteration  25: 25883.902 ops/s
# Warmup Iteration  26: 25306.115 ops/s
# Warmup Iteration  27: 28924.666 ops/s
# Warmup Iteration  28: 27419.490 ops/s
# Warmup Iteration  29: 24306.203 ops/s
# Warmup Iteration  30: 24229.779 ops/s
Iteration   1: 31820.995 ops/s
Iteration   2: 25554.743 ops/s
Iteration   3: 25976.043 ops/s
Iteration   4: 28359.931 ops/s
Iteration   5: 27921.403 ops/s
Iteration   6: 27288.212 ops/s
Iteration   7: 28046.434 ops/s
Iteration   8: 24621.490 ops/s
Iteration   9: 26418.115 ops/s
Iteration  10: 25527.605 ops/s
Iteration  11: 24692.452 ops/s
Iteration  12: 23580.762 ops/s
Iteration  13: 24528.760 ops/s
Iteration  14: 23955.380 ops/s
Iteration  15: 24546.760 ops/s
Iteration  16: 25885.862 ops/s
Iteration  17: 29736.723 ops/s
Iteration  18: 27557.608 ops/s
Iteration  19: 25285.710 ops/s
Iteration  20: 27310.185 ops/s
Iteration  21: 25377.381 ops/s
Iteration  22: 26463.936 ops/s
Iteration  23: 25294.930 ops/s
Iteration  24: 27256.404 ops/s
Iteration  25: 24558.443 ops/s
Iteration  26: 27966.853 ops/s
Iteration  27: 24390.867 ops/s
Iteration  28: 24996.447 ops/s
Iteration  29: 25242.793 ops/s
Iteration  30: 26392.810 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_scalarQueueCompleteMain":
  26218.535 ±(99.9%) 1226.018 ops/s [Average]
  (min, avg, max) = (23580.762, 26218.535, 31820.995), stdev = 1835.046
  CI (99.9%): [24992.517, 27444.553] (assumes normal distribution)


# Run complete. Total time: 00:01:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt      Score      Error  Units
FlowableFlatMapTest._Benchmark.benchmark_scalarQueueCompleteMain  thrpt   30  26218.535 ± 1226.018  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOtherTest._Benchmark.benchmark_backpressurePassesThrough$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOtherTest._Benchmark.benchmark_backpressurePassesThrough

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 101064.482 ops/s
# Warmup Iteration   2: 634647.133 ops/s
# Warmup Iteration   3: 1494970.445 ops/s
# Warmup Iteration   4: 1735851.842 ops/s
# Warmup Iteration   5: 1899767.022 ops/s
# Warmup Iteration   6: 1861408.166 ops/s
# Warmup Iteration   7: 1830953.636 ops/s
# Warmup Iteration   8: 1679220.563 ops/s
# Warmup Iteration   9: 1822622.491 ops/s
# Warmup Iteration  10: 1766338.444 ops/s
# Warmup Iteration  11: 1919136.804 ops/s
# Warmup Iteration  12: 1846750.027 ops/s
# Warmup Iteration  13: 1938271.231 ops/s
# Warmup Iteration  14: 1893033.969 ops/s
# Warmup Iteration  15: 1854323.725 ops/s
# Warmup Iteration  16: 1994909.430 ops/s
# Warmup Iteration  17: 1869661.391 ops/s
# Warmup Iteration  18: 1971789.612 ops/s
# Warmup Iteration  19: 1898956.065 ops/s
# Warmup Iteration  20: 1930341.825 ops/s
# Warmup Iteration  21: 1851868.466 ops/s
# Warmup Iteration  22: 1917244.973 ops/s
# Warmup Iteration  23: 1938671.181 ops/s
# Warmup Iteration  24: 1862862.347 ops/s
# Warmup Iteration  25: 1923187.634 ops/s
# Warmup Iteration  26: 1890333.563 ops/s
# Warmup Iteration  27: 1940382.433 ops/s
# Warmup Iteration  28: 1982709.083 ops/s
# Warmup Iteration  29: 1881957.761 ops/s
# Warmup Iteration  30: 1912381.258 ops/s
Iteration   1: 1903723.462 ops/s
Iteration   2: 1907469.357 ops/s
Iteration   3: 1867828.317 ops/s
Iteration   4: 1895330.135 ops/s
Iteration   5: 1908607.399 ops/s
Iteration   6: 1853788.168 ops/s
Iteration   7: 1910443.029 ops/s
Iteration   8: 1897741.451 ops/s
Iteration   9: 1986468.929 ops/s
Iteration  10: 1881274.988 ops/s
Iteration  11: 1927707.592 ops/s
Iteration  12: 1900438.508 ops/s
Iteration  13: 1870646.168 ops/s
Iteration  14: 1965056.134 ops/s
Iteration  15: 1883880.481 ops/s
Iteration  16: 1864348.141 ops/s
Iteration  17: 1904982.174 ops/s
Iteration  18: 1842240.505 ops/s
Iteration  19: 1917279.756 ops/s
Iteration  20: 1896956.696 ops/s
Iteration  21: 1866352.800 ops/s
Iteration  22: 1954518.946 ops/s
Iteration  23: 1849135.155 ops/s
Iteration  24: 1954047.541 ops/s
Iteration  25: 1925253.400 ops/s
Iteration  26: 1869673.083 ops/s
Iteration  27: 1925397.848 ops/s
Iteration  28: 1901017.827 ops/s
Iteration  29: 1887618.574 ops/s
Iteration  30: 1901700.581 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOtherTest._Benchmark.benchmark_backpressurePassesThrough":
  1900697.571 ±(99.9%) 22976.336 ops/s [Average]
  (min, avg, max) = (1842240.505, 1900697.571, 1986468.929), stdev = 34389.901
  CI (99.9%): [1877721.235, 1923673.908] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           Mode  Cnt        Score       Error  Units
FlowableDelaySubscriptionOtherTest._Benchmark.benchmark_backpressurePassesThrough  thrpt   30  1900697.571 ± 22976.336  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_scalarXMap$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_scalarXMap

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1429369.082 ops/s
# Warmup Iteration   2: 3348347.590 ops/s
# Warmup Iteration   3: 4621780.094 ops/s
# Warmup Iteration   4: 4495253.136 ops/s
# Warmup Iteration   5: 4642449.878 ops/s
# Warmup Iteration   6: 4529769.386 ops/s
# Warmup Iteration   7: 3501452.865 ops/s
# Warmup Iteration   8: 4666833.792 ops/s
# Warmup Iteration   9: 4533647.221 ops/s
# Warmup Iteration  10: 4748266.035 ops/s
# Warmup Iteration  11: 4506969.213 ops/s
# Warmup Iteration  12: 4559041.101 ops/s
# Warmup Iteration  13: 4723776.077 ops/s
# Warmup Iteration  14: 4480838.214 ops/s
# Warmup Iteration  15: 4711642.028 ops/s
# Warmup Iteration  16: 4566081.622 ops/s
# Warmup Iteration  17: 4596954.452 ops/s
# Warmup Iteration  18: 4547530.467 ops/s
# Warmup Iteration  19: 4831582.358 ops/s
# Warmup Iteration  20: 4649701.820 ops/s
# Warmup Iteration  21: 4570731.958 ops/s
# Warmup Iteration  22: 4623805.206 ops/s
# Warmup Iteration  23: 4482361.152 ops/s
# Warmup Iteration  24: 4597977.631 ops/s
# Warmup Iteration  25: 4730803.736 ops/s
# Warmup Iteration  26: 4526866.273 ops/s
# Warmup Iteration  27: 4751405.458 ops/s
# Warmup Iteration  28: 4845603.737 ops/s
# Warmup Iteration  29: 4500036.819 ops/s
# Warmup Iteration  30: 4822159.079 ops/s
Iteration   1: 4424369.722 ops/s
Iteration   2: 4575685.985 ops/s
Iteration   3: 4615894.223 ops/s
Iteration   4: 4632143.514 ops/s
Iteration   5: 4898971.089 ops/s
Iteration   6: 4509338.722 ops/s
Iteration   7: 4690930.273 ops/s
Iteration   8: 4613942.986 ops/s
Iteration   9: 4598930.849 ops/s
Iteration  10: 4744746.602 ops/s
Iteration  11: 4520586.049 ops/s
Iteration  12: 4647272.643 ops/s
Iteration  13: 4704640.473 ops/s
Iteration  14: 4464012.792 ops/s
Iteration  15: 4599319.757 ops/s
Iteration  16: 4735813.086 ops/s
Iteration  17: 4639083.129 ops/s
Iteration  18: 4556264.375 ops/s
Iteration  19: 4718442.585 ops/s
Iteration  20: 4538608.502 ops/s
Iteration  21: 4661867.526 ops/s
Iteration  22: 4701075.009 ops/s
Iteration  23: 4518613.405 ops/s
Iteration  24: 4674965.953 ops/s
Iteration  25: 4602794.938 ops/s
Iteration  26: 4604970.888 ops/s
Iteration  27: 4646164.583 ops/s
Iteration  28: 4503951.044 ops/s
Iteration  29: 4663688.618 ops/s
Iteration  30: 4655371.518 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_scalarXMap":
  4622082.028 ±(99.9%) 64176.605 ops/s [Average]
  (min, avg, max) = (4424369.722, 4622082.028, 4898971.089), stdev = 96056.528
  CI (99.9%): [4557905.423, 4686258.633] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score       Error  Units
FlowableFlatMapTest._Benchmark.benchmark_scalarXMap  thrpt   30  4622082.028 ± 64176.605  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_iterableMapperFunctionReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_iterableMapperFunctionReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 155986.632 ops/s
# Warmup Iteration   2: 513207.255 ops/s
# Warmup Iteration   3: 548357.198 ops/s
# Warmup Iteration   4: 592568.478 ops/s
# Warmup Iteration   5: 536952.886 ops/s
# Warmup Iteration   6: 549967.252 ops/s
# Warmup Iteration   7: 524740.122 ops/s
# Warmup Iteration   8: 543701.040 ops/s
# Warmup Iteration   9: 582659.767 ops/s
# Warmup Iteration  10: 602850.770 ops/s
# Warmup Iteration  11: 593263.367 ops/s
# Warmup Iteration  12: 577218.087 ops/s
# Warmup Iteration  13: 586457.378 ops/s
# Warmup Iteration  14: 574577.088 ops/s
# Warmup Iteration  15: 600480.929 ops/s
# Warmup Iteration  16: 588437.140 ops/s
# Warmup Iteration  17: 587887.208 ops/s
# Warmup Iteration  18: 637776.317 ops/s
# Warmup Iteration  19: 594641.240 ops/s
# Warmup Iteration  20: 621125.281 ops/s
# Warmup Iteration  21: 620032.892 ops/s
# Warmup Iteration  22: 618957.188 ops/s
# Warmup Iteration  23: 633905.790 ops/s
# Warmup Iteration  24: 602920.104 ops/s
# Warmup Iteration  25: 610728.014 ops/s
# Warmup Iteration  26: 639793.653 ops/s
# Warmup Iteration  27: 600702.087 ops/s
# Warmup Iteration  28: 637361.152 ops/s
# Warmup Iteration  29: 596070.322 ops/s
# Warmup Iteration  30: 619894.411 ops/s
Iteration   1: 617060.457 ops/s
Iteration   2: 597541.621 ops/s
Iteration   3: 634284.355 ops/s
Iteration   4: 608083.047 ops/s
Iteration   5: 598729.380 ops/s
Iteration   6: 624272.953 ops/s
Iteration   7: 613928.529 ops/s
Iteration   8: 632998.070 ops/s
Iteration   9: 631528.940 ops/s
Iteration  10: 603796.901 ops/s
Iteration  11: 621629.659 ops/s
Iteration  12: 615395.494 ops/s
Iteration  13: 616512.550 ops/s
Iteration  14: 604022.049 ops/s
Iteration  15: 598915.572 ops/s
Iteration  16: 608987.353 ops/s
Iteration  17: 599752.434 ops/s
Iteration  18: 617754.885 ops/s
Iteration  19: 627584.892 ops/s
Iteration  20: 616025.143 ops/s
Iteration  21: 639953.452 ops/s
Iteration  22: 591294.701 ops/s
Iteration  23: 626053.342 ops/s
Iteration  24: 596809.159 ops/s
Iteration  25: 613162.964 ops/s
Iteration  26: 634508.723 ops/s
Iteration  27: 589152.987 ops/s
Iteration  28: 609782.487 ops/s
Iteration  29: 616787.132 ops/s
Iteration  30: 599669.963 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_iterableMapperFunctionReturnsNull":
  613532.640 ±(99.9%) 9246.939 ops/s [Average]
  (min, avg, max) = (589152.987, 613532.640, 639953.452), stdev = 13840.384
  CI (99.9%): [604285.701, 622779.579] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score      Error  Units
FlowableFlatMapTest._Benchmark.benchmark_iterableMapperFunctionReturnsNull  thrpt   30  613532.640 ± 9246.939  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithStartEndFlowableTest._Benchmark.benchmark_badRequest$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithStartEndFlowableTest._Benchmark.benchmark_badRequest

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 51130.882 ops/s
# Warmup Iteration   2: 113875.562 ops/s
# Warmup Iteration   3: 388616.436 ops/s
# Warmup Iteration   4: 416069.571 ops/s
# Warmup Iteration   5: 417058.799 ops/s
# Warmup Iteration   6: 398534.870 ops/s
# Warmup Iteration   7: 387237.521 ops/s
# Warmup Iteration   8: 462375.191 ops/s
# Warmup Iteration   9: 427410.490 ops/s
# Warmup Iteration  10: 445578.951 ops/s
# Warmup Iteration  11: 430620.980 ops/s
# Warmup Iteration  12: 438364.574 ops/s
# Warmup Iteration  13: 443876.474 ops/s
# Warmup Iteration  14: 430481.545 ops/s
# Warmup Iteration  15: 443056.999 ops/s
# Warmup Iteration  16: 435199.319 ops/s
# Warmup Iteration  17: 470019.347 ops/s
# Warmup Iteration  18: 439598.938 ops/s
# Warmup Iteration  19: 461865.637 ops/s
# Warmup Iteration  20: 449923.644 ops/s
# Warmup Iteration  21: 455707.801 ops/s
# Warmup Iteration  22: 449624.958 ops/s
# Warmup Iteration  23: 440900.274 ops/s
# Warmup Iteration  24: 460927.300 ops/s
# Warmup Iteration  25: 470063.014 ops/s
# Warmup Iteration  26: 442555.140 ops/s
# Warmup Iteration  27: 468136.846 ops/s
# Warmup Iteration  28: 449781.802 ops/s
# Warmup Iteration  29: 440864.876 ops/s
# Warmup Iteration  30: 458663.072 ops/s
Iteration   1: 441243.718 ops/s
Iteration   2: 456294.425 ops/s
Iteration   3: 453379.295 ops/s
Iteration   4: 466362.536 ops/s
Iteration   5: 438546.068 ops/s
Iteration   6: 450954.821 ops/s
Iteration   7: 463540.596 ops/s
Iteration   8: 460709.077 ops/s
Iteration   9: 452661.708 ops/s
Iteration  10: 452161.872 ops/s
Iteration  11: 467882.469 ops/s
Iteration  12: 444922.278 ops/s
Iteration  13: 452282.538 ops/s
Iteration  14: 463659.344 ops/s
Iteration  15: 442111.263 ops/s
Iteration  16: 459895.373 ops/s
Iteration  17: 439627.593 ops/s
Iteration  18: 461134.648 ops/s
Iteration  19: 458624.885 ops/s
Iteration  20: 445687.335 ops/s
Iteration  21: 456787.838 ops/s
Iteration  22: 439895.436 ops/s
Iteration  23: 449380.892 ops/s
Iteration  24: 453523.420 ops/s
Iteration  25: 444837.378 ops/s
Iteration  26: 439792.773 ops/s
Iteration  27: 457809.230 ops/s
Iteration  28: 441332.842 ops/s
Iteration  29: 464567.511 ops/s
Iteration  30: 442783.072 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithStartEndFlowableTest._Benchmark.benchmark_badRequest":
  452079.741 ±(99.9%) 6105.550 ops/s [Average]
  (min, avg, max) = (438546.068, 452079.741, 467882.469), stdev = 9138.501
  CI (99.9%): [445974.191, 458185.291] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score      Error  Units
FlowableWindowWithStartEndFlowableTest._Benchmark.benchmark_badRequest  thrpt   30  452079.741 ± 6105.550  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinallyTest._Benchmark.benchmark_fusionRejectedConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinallyTest._Benchmark.benchmark_fusionRejectedConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1537833.811 ops/s
# Warmup Iteration   2: 4513507.051 ops/s
# Warmup Iteration   3: 6058424.783 ops/s
# Warmup Iteration   4: 6310751.351 ops/s
# Warmup Iteration   5: 6089953.831 ops/s
# Warmup Iteration   6: 6197415.706 ops/s
# Warmup Iteration   7: 6296506.771 ops/s
# Warmup Iteration   8: 6060134.991 ops/s
# Warmup Iteration   9: 6357305.306 ops/s
# Warmup Iteration  10: 6258723.989 ops/s
# Warmup Iteration  11: 6062519.229 ops/s
# Warmup Iteration  12: 6299500.396 ops/s
# Warmup Iteration  13: 6280102.710 ops/s
# Warmup Iteration  14: 6267269.133 ops/s
# Warmup Iteration  15: 6373867.649 ops/s
# Warmup Iteration  16: 6476982.372 ops/s
# Warmup Iteration  17: 5998087.791 ops/s
# Warmup Iteration  18: 6277958.259 ops/s
# Warmup Iteration  19: 6273671.527 ops/s
# Warmup Iteration  20: 6196615.323 ops/s
# Warmup Iteration  21: 6041967.978 ops/s
# Warmup Iteration  22: 6410458.984 ops/s
# Warmup Iteration  23: 6061167.216 ops/s
# Warmup Iteration  24: 6090025.170 ops/s
# Warmup Iteration  25: 6420537.861 ops/s
# Warmup Iteration  26: 6047459.456 ops/s
# Warmup Iteration  27: 6446484.719 ops/s
# Warmup Iteration  28: 6196115.293 ops/s
# Warmup Iteration  29: 6060636.900 ops/s
# Warmup Iteration  30: 6233550.986 ops/s
Iteration   1: 6294832.605 ops/s
Iteration   2: 6077151.647 ops/s
Iteration   3: 6437027.429 ops/s
Iteration   4: 5966632.762 ops/s
Iteration   5: 6234833.328 ops/s
Iteration   6: 6044409.346 ops/s
Iteration   7: 6283208.227 ops/s
Iteration   8: 5972364.609 ops/s
Iteration   9: 6216634.398 ops/s
Iteration  10: 6017548.159 ops/s
Iteration  11: 6082348.028 ops/s
Iteration  12: 6363478.282 ops/s
Iteration  13: 6024429.374 ops/s
Iteration  14: 6357549.612 ops/s
Iteration  15: 6185928.303 ops/s
Iteration  16: 5947992.692 ops/s
Iteration  17: 6383992.371 ops/s
Iteration  18: 6444671.708 ops/s
Iteration  19: 5951456.657 ops/s
Iteration  20: 6434669.176 ops/s
Iteration  21: 6166062.803 ops/s
Iteration  22: 6242857.980 ops/s
Iteration  23: 6384199.460 ops/s
Iteration  24: 6093734.853 ops/s
Iteration  25: 6218802.176 ops/s
Iteration  26: 6198066.385 ops/s
Iteration  27: 6205540.653 ops/s
Iteration  28: 6000366.171 ops/s
Iteration  29: 4916268.231 ops/s
Iteration  30: 6208888.781 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinallyTest._Benchmark.benchmark_fusionRejectedConditional":
  6145198.207 ±(99.9%) 186896.170 ops/s [Average]
  (min, avg, max) = (4916268.231, 6145198.207, 6444671.708), stdev = 279737.411
  CI (99.9%): [5958302.036, 6332094.377] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score        Error  Units
FlowableDoFinallyTest._Benchmark.benchmark_fusionRejectedConditional  thrpt   30  6145198.207 ± 186896.170  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_callableCrashDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_callableCrashDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 69986.491 ops/s
# Warmup Iteration   2: 322038.010 ops/s
# Warmup Iteration   3: 403771.250 ops/s
# Warmup Iteration   4: 390458.553 ops/s
# Warmup Iteration   5: 416280.145 ops/s
# Warmup Iteration   6: 384209.886 ops/s
# Warmup Iteration   7: 399488.396 ops/s
# Warmup Iteration   8: 406617.210 ops/s
# Warmup Iteration   9: 382294.859 ops/s
# Warmup Iteration  10: 400390.602 ops/s
# Warmup Iteration  11: 392503.421 ops/s
# Warmup Iteration  12: 403817.700 ops/s
# Warmup Iteration  13: 392630.122 ops/s
# Warmup Iteration  14: 400787.813 ops/s
# Warmup Iteration  15: 410245.898 ops/s
# Warmup Iteration  16: 394581.299 ops/s
# Warmup Iteration  17: 413213.202 ops/s
# Warmup Iteration  18: 406219.676 ops/s
# Warmup Iteration  19: 404571.228 ops/s
# Warmup Iteration  20: 431436.090 ops/s
# Warmup Iteration  21: 411161.956 ops/s
# Warmup Iteration  22: 412513.124 ops/s
# Warmup Iteration  23: 431510.551 ops/s
# Warmup Iteration  24: 403568.396 ops/s
# Warmup Iteration  25: 406068.230 ops/s
# Warmup Iteration  26: 413292.073 ops/s
# Warmup Iteration  27: 430788.476 ops/s
# Warmup Iteration  28: 402808.713 ops/s
# Warmup Iteration  29: 415327.795 ops/s
# Warmup Iteration  30: 419048.217 ops/s
Iteration   1: 419936.953 ops/s
Iteration   2: 410318.107 ops/s
Iteration   3: 397408.901 ops/s
Iteration   4: 427539.607 ops/s
Iteration   5: 415898.034 ops/s
Iteration   6: 397323.913 ops/s
Iteration   7: 415785.694 ops/s
Iteration   8: 418966.867 ops/s
Iteration   9: 407397.675 ops/s
Iteration  10: 414046.713 ops/s
Iteration  11: 399608.748 ops/s
Iteration  12: 421236.422 ops/s
Iteration  13: 407720.939 ops/s
Iteration  14: 412943.988 ops/s
Iteration  15: 423945.765 ops/s
Iteration  16: 399845.374 ops/s
Iteration  17: 427609.968 ops/s
Iteration  18: 416627.002 ops/s
Iteration  19: 408907.227 ops/s
Iteration  20: 429424.884 ops/s
Iteration  21: 398564.234 ops/s
Iteration  22: 425965.359 ops/s
Iteration  23: 413070.576 ops/s
Iteration  24: 419143.408 ops/s
Iteration  25: 403452.446 ops/s
Iteration  26: 419178.465 ops/s
Iteration  27: 417772.230 ops/s
Iteration  28: 411568.128 ops/s
Iteration  29: 397857.833 ops/s
Iteration  30: 413581.383 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_callableCrashDelayError":
  413088.228 ±(99.9%) 6468.779 ops/s [Average]
  (min, avg, max) = (397323.913, 413088.228, 429424.884), stdev = 9682.165
  CI (99.9%): [406619.449, 419557.008] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score      Error  Units
FlowableConcatTest._Benchmark.benchmark_callableCrashDelayError  thrpt   30  413088.228 ± 6468.779  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromTest._Benchmark.benchmark_withError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromTest._Benchmark.benchmark_withError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 104257.805 ops/s
# Warmup Iteration   2: 441899.413 ops/s
# Warmup Iteration   3: 541744.604 ops/s
# Warmup Iteration   4: 596842.390 ops/s
# Warmup Iteration   5: 562830.218 ops/s
# Warmup Iteration   6: 633386.857 ops/s
# Warmup Iteration   7: 641334.490 ops/s
# Warmup Iteration   8: 598659.931 ops/s
# Warmup Iteration   9: 645780.157 ops/s
# Warmup Iteration  10: 613258.540 ops/s
# Warmup Iteration  11: 618581.321 ops/s
# Warmup Iteration  12: 657585.765 ops/s
# Warmup Iteration  13: 604473.136 ops/s
# Warmup Iteration  14: 643634.592 ops/s
# Warmup Iteration  15: 616570.679 ops/s
# Warmup Iteration  16: 651953.014 ops/s
# Warmup Iteration  17: 631866.450 ops/s
# Warmup Iteration  18: 678171.236 ops/s
# Warmup Iteration  19: 636934.294 ops/s
# Warmup Iteration  20: 677745.289 ops/s
# Warmup Iteration  21: 659143.876 ops/s
# Warmup Iteration  22: 651075.915 ops/s
# Warmup Iteration  23: 683021.571 ops/s
# Warmup Iteration  24: 650177.310 ops/s
# Warmup Iteration  25: 655860.123 ops/s
# Warmup Iteration  26: 673470.331 ops/s
# Warmup Iteration  27: 677130.606 ops/s
# Warmup Iteration  28: 643815.136 ops/s
# Warmup Iteration  29: 671746.185 ops/s
# Warmup Iteration  30: 676056.622 ops/s
Iteration   1: 628301.917 ops/s
Iteration   2: 674465.779 ops/s
Iteration   3: 644774.700 ops/s
Iteration   4: 677397.882 ops/s
Iteration   5: 651099.942 ops/s
Iteration   6: 662727.763 ops/s
Iteration   7: 657289.092 ops/s
Iteration   8: 673002.305 ops/s
Iteration   9: 641718.143 ops/s
Iteration  10: 671579.715 ops/s
Iteration  11: 676699.164 ops/s
Iteration  12: 639256.203 ops/s
Iteration  13: 683234.788 ops/s
Iteration  14: 657101.650 ops/s
Iteration  15: 644231.857 ops/s
Iteration  16: 682765.321 ops/s
Iteration  17: 632591.814 ops/s
Iteration  18: 695850.968 ops/s
Iteration  19: 650307.507 ops/s
Iteration  20: 686141.815 ops/s
Iteration  21: 632907.437 ops/s
Iteration  22: 686156.247 ops/s
Iteration  23: 520856.818 ops/s
Iteration  24: 671825.389 ops/s
Iteration  25: 666692.611 ops/s
Iteration  26: 650961.899 ops/s
Iteration  27: 652517.834 ops/s
Iteration  28: 647492.113 ops/s
Iteration  29: 671483.165 ops/s
Iteration  30: 646115.990 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromTest._Benchmark.benchmark_withError":
  655918.261 ±(99.9%) 20908.101 ops/s [Average]
  (min, avg, max) = (520856.818, 655918.261, 695850.968), stdev = 31294.264
  CI (99.9%): [635010.160, 676826.362] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score       Error  Units
FlowableWithLatestFromTest._Benchmark.benchmark_withError  thrpt   30  655918.261 ± 20908.101  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybeTest._Benchmark.benchmark_undeliverableUponCancelDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybeTest._Benchmark.benchmark_undeliverableUponCancelDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 34140.664 ops/s
# Warmup Iteration   2: 138100.916 ops/s
# Warmup Iteration   3: 148972.394 ops/s
# Warmup Iteration   4: 177111.859 ops/s
# Warmup Iteration   5: 164045.550 ops/s
# Warmup Iteration   6: 187388.151 ops/s
# Warmup Iteration   7: 175884.064 ops/s
# Warmup Iteration   8: 182711.612 ops/s
# Warmup Iteration   9: 183920.032 ops/s
# Warmup Iteration  10: 176896.438 ops/s
# Warmup Iteration  11: 177472.939 ops/s
# Warmup Iteration  12: 177962.648 ops/s
# Warmup Iteration  13: 179892.260 ops/s
# Warmup Iteration  14: 181405.744 ops/s
# Warmup Iteration  15: 179643.310 ops/s
# Warmup Iteration  16: 177964.485 ops/s
# Warmup Iteration  17: 191362.766 ops/s
# Warmup Iteration  18: 193618.385 ops/s
# Warmup Iteration  19: 194020.315 ops/s
# Warmup Iteration  20: 191720.145 ops/s
# Warmup Iteration  21: 194083.804 ops/s
# Warmup Iteration  22: 187491.573 ops/s
# Warmup Iteration  23: 183721.907 ops/s
# Warmup Iteration  24: 195977.132 ops/s
# Warmup Iteration  25: 194322.448 ops/s
# Warmup Iteration  26: 195941.303 ops/s
# Warmup Iteration  27: 200948.794 ops/s
# Warmup Iteration  28: 187268.737 ops/s
# Warmup Iteration  29: 194361.283 ops/s
# Warmup Iteration  30: 182528.974 ops/s
Iteration   1: 196803.443 ops/s
Iteration   2: 195814.781 ops/s
Iteration   3: 189634.075 ops/s
Iteration   4: 193626.489 ops/s
Iteration   5: 190845.654 ops/s
Iteration   6: 189280.554 ops/s
Iteration   7: 196773.430 ops/s
Iteration   8: 188743.999 ops/s
Iteration   9: 194716.825 ops/s
Iteration  10: 188003.245 ops/s
Iteration  11: 194980.981 ops/s
Iteration  12: 187572.780 ops/s
Iteration  13: 194435.785 ops/s
Iteration  14: 189349.320 ops/s
Iteration  15: 191646.003 ops/s
Iteration  16: 194414.994 ops/s
Iteration  17: 190381.366 ops/s
Iteration  18: 195771.239 ops/s
Iteration  19: 186229.915 ops/s
Iteration  20: 196639.105 ops/s
Iteration  21: 196371.018 ops/s
Iteration  22: 193620.952 ops/s
Iteration  23: 191862.226 ops/s
Iteration  24: 199430.109 ops/s
Iteration  25: 189918.271 ops/s
Iteration  26: 189350.652 ops/s
Iteration  27: 200605.360 ops/s
Iteration  28: 187396.772 ops/s
Iteration  29: 194516.652 ops/s
Iteration  30: 190747.458 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybeTest._Benchmark.benchmark_undeliverableUponCancelDelayError":
  192649.448 ±(99.9%) 2509.687 ops/s [Average]
  (min, avg, max) = (186229.915, 192649.448, 200605.360), stdev = 3756.382
  CI (99.9%): [190139.761, 195159.136] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt       Score      Error  Units
FlowableFlatMapMaybeTest._Benchmark.benchmark_undeliverableUponCancelDelayError  thrpt   30  192649.448 ± 2509.687  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_combineLatestIterable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_combineLatestIterable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 125036.113 ops/s
# Warmup Iteration   2: 664301.636 ops/s
# Warmup Iteration   3: 1346461.728 ops/s
# Warmup Iteration   4: 1450249.430 ops/s
# Warmup Iteration   5: 1648084.726 ops/s
# Warmup Iteration   6: 1518114.030 ops/s
# Warmup Iteration   7: 1484977.576 ops/s
# Warmup Iteration   8: 1463042.584 ops/s
# Warmup Iteration   9: 1602127.406 ops/s
# Warmup Iteration  10: 1608822.253 ops/s
# Warmup Iteration  11: 1598296.510 ops/s
# Warmup Iteration  12: 1574091.759 ops/s
# Warmup Iteration  13: 1650018.690 ops/s
# Warmup Iteration  14: 1534757.882 ops/s
# Warmup Iteration  15: 1613191.039 ops/s
# Warmup Iteration  16: 1558620.956 ops/s
# Warmup Iteration  17: 1631496.296 ops/s
# Warmup Iteration  18: 1612148.485 ops/s
# Warmup Iteration  19: 1551186.320 ops/s
# Warmup Iteration  20: 1671217.356 ops/s
# Warmup Iteration  21: 1559082.430 ops/s
# Warmup Iteration  22: 1591045.079 ops/s
# Warmup Iteration  23: 1634276.637 ops/s
# Warmup Iteration  24: 1596091.473 ops/s
# Warmup Iteration  25: 1554197.039 ops/s
# Warmup Iteration  26: 1619971.854 ops/s
# Warmup Iteration  27: 1600924.969 ops/s
# Warmup Iteration  28: 1609397.480 ops/s
# Warmup Iteration  29: 1614747.134 ops/s
# Warmup Iteration  30: 1601049.035 ops/s
Iteration   1: 1648885.599 ops/s
Iteration   2: 1558280.080 ops/s
Iteration   3: 1601772.663 ops/s
Iteration   4: 1597151.510 ops/s
Iteration   5: 1568280.516 ops/s
Iteration   6: 1592356.085 ops/s
Iteration   7: 1589682.194 ops/s
Iteration   8: 1595292.576 ops/s
Iteration   9: 1655071.306 ops/s
Iteration  10: 1551520.307 ops/s
Iteration  11: 1587501.628 ops/s
Iteration  12: 1576652.740 ops/s
Iteration  13: 1589890.541 ops/s
Iteration  14: 1545941.883 ops/s
Iteration  15: 1546188.600 ops/s
Iteration  16: 1598182.148 ops/s
Iteration  17: 1551658.187 ops/s
Iteration  18: 1350006.761 ops/s
Iteration  19: 1548737.108 ops/s
Iteration  20: 1630083.295 ops/s
Iteration  21: 1547065.069 ops/s
Iteration  22: 1601637.985 ops/s
Iteration  23: 1618836.929 ops/s
Iteration  24: 1588314.701 ops/s
Iteration  25: 1598825.279 ops/s
Iteration  26: 1586636.284 ops/s
Iteration  27: 1603197.694 ops/s
Iteration  28: 1621523.997 ops/s
Iteration  29: 1569783.591 ops/s
Iteration  30: 1612549.935 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_combineLatestIterable":
  1581050.240 ±(99.9%) 35081.462 ops/s [Average]
  (min, avg, max) = (1350006.761, 1581050.240, 1655071.306), stdev = 52508.285
  CI (99.9%): [1545968.778, 1616131.702] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
FlowableCombineLatestTest._Benchmark.benchmark_combineLatestIterable  thrpt   30  1581050.240 ± 35081.462  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_combineLatestArrayOfSources$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_combineLatestArrayOfSources

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 130429.095 ops/s
# Warmup Iteration   2: 305561.468 ops/s
# Warmup Iteration   3: 1061552.305 ops/s
# Warmup Iteration   4: 1109456.644 ops/s
# Warmup Iteration   5: 1199570.395 ops/s
# Warmup Iteration   6: 1236014.624 ops/s
# Warmup Iteration   7: 1295531.558 ops/s
# Warmup Iteration   8: 1357819.829 ops/s
# Warmup Iteration   9: 1260829.601 ops/s
# Warmup Iteration  10: 1352610.494 ops/s
# Warmup Iteration  11: 1325604.343 ops/s
# Warmup Iteration  12: 1274682.672 ops/s
# Warmup Iteration  13: 1341212.543 ops/s
# Warmup Iteration  14: 1289886.710 ops/s
# Warmup Iteration  15: 1329426.822 ops/s
# Warmup Iteration  16: 1337876.519 ops/s
# Warmup Iteration  17: 1311207.544 ops/s
# Warmup Iteration  18: 1362530.031 ops/s
# Warmup Iteration  19: 1347376.319 ops/s
# Warmup Iteration  20: 1285556.162 ops/s
# Warmup Iteration  21: 1325386.636 ops/s
# Warmup Iteration  22: 1333437.463 ops/s
# Warmup Iteration  23: 1293073.983 ops/s
# Warmup Iteration  24: 1276093.748 ops/s
# Warmup Iteration  25: 1267916.223 ops/s
# Warmup Iteration  26: 1370633.078 ops/s
# Warmup Iteration  27: 1298980.367 ops/s
# Warmup Iteration  28: 1355266.331 ops/s
# Warmup Iteration  29: 1319039.866 ops/s
# Warmup Iteration  30: 1329771.760 ops/s
Iteration   1: 1293042.225 ops/s
Iteration   2: 1292260.949 ops/s
Iteration   3: 1357543.592 ops/s
Iteration   4: 1308663.372 ops/s
Iteration   5: 1320086.097 ops/s
Iteration   6: 1307059.739 ops/s
Iteration   7: 1287680.357 ops/s
Iteration   8: 1341372.251 ops/s
Iteration   9: 1338893.167 ops/s
Iteration  10: 1361239.930 ops/s
Iteration  11: 1303531.557 ops/s
Iteration  12: 1321857.506 ops/s
Iteration  13: 1350266.526 ops/s
Iteration  14: 1330734.192 ops/s
Iteration  15: 1250792.852 ops/s
Iteration  16: 1330799.446 ops/s
Iteration  17: 1309827.371 ops/s
Iteration  18: 1378567.306 ops/s
Iteration  19: 1381116.896 ops/s
Iteration  20: 1279358.469 ops/s
Iteration  21: 1317871.731 ops/s
Iteration  22: 1295488.652 ops/s
Iteration  23: 1303920.621 ops/s
Iteration  24: 1375149.316 ops/s
Iteration  25: 1376734.393 ops/s
Iteration  26: 1375314.114 ops/s
Iteration  27: 1281905.131 ops/s
Iteration  28: 1315459.392 ops/s
Iteration  29: 1336908.337 ops/s
Iteration  30: 1311026.589 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_combineLatestArrayOfSources":
  1324482.402 ±(99.9%) 22644.163 ops/s [Average]
  (min, avg, max) = (1250792.852, 1324482.402, 1381116.896), stdev = 33892.720
  CI (99.9%): [1301838.239, 1347126.566] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score       Error  Units
FlowableCombineLatestTest._Benchmark.benchmark_combineLatestArrayOfSources  thrpt   30  1324482.402 ± 22644.163  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_errorDelayed2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_errorDelayed2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 49736.918 ops/s
# Warmup Iteration   2: 166415.372 ops/s
# Warmup Iteration   3: 401931.863 ops/s
# Warmup Iteration   4: 424945.510 ops/s
# Warmup Iteration   5: 387633.247 ops/s
# Warmup Iteration   6: 459498.676 ops/s
# Warmup Iteration   7: 449421.395 ops/s
# Warmup Iteration   8: 459078.034 ops/s
# Warmup Iteration   9: 453647.889 ops/s
# Warmup Iteration  10: 446016.506 ops/s
# Warmup Iteration  11: 454545.001 ops/s
# Warmup Iteration  12: 450004.883 ops/s
# Warmup Iteration  13: 462812.680 ops/s
# Warmup Iteration  14: 439209.658 ops/s
# Warmup Iteration  15: 450262.952 ops/s
# Warmup Iteration  16: 462245.577 ops/s
# Warmup Iteration  17: 459928.456 ops/s
# Warmup Iteration  18: 472095.865 ops/s
# Warmup Iteration  19: 480926.285 ops/s
# Warmup Iteration  20: 467781.961 ops/s
# Warmup Iteration  21: 483308.746 ops/s
# Warmup Iteration  22: 468440.108 ops/s
# Warmup Iteration  23: 484997.354 ops/s
# Warmup Iteration  24: 462333.774 ops/s
# Warmup Iteration  25: 460432.013 ops/s
# Warmup Iteration  26: 479371.686 ops/s
# Warmup Iteration  27: 463421.691 ops/s
# Warmup Iteration  28: 460201.153 ops/s
# Warmup Iteration  29: 488908.075 ops/s
# Warmup Iteration  30: 457752.170 ops/s
Iteration   1: 473244.442 ops/s
Iteration   2: 459066.507 ops/s
Iteration   3: 459192.070 ops/s
Iteration   4: 494349.331 ops/s
Iteration   5: 492736.949 ops/s
Iteration   6: 487487.615 ops/s
Iteration   7: 463946.293 ops/s
Iteration   8: 481272.600 ops/s
Iteration   9: 467134.099 ops/s
Iteration  10: 475796.701 ops/s
Iteration  11: 462222.630 ops/s
Iteration  12: 471834.815 ops/s
Iteration  13: 390680.281 ops/s
Iteration  14: 469520.219 ops/s
Iteration  15: 459202.897 ops/s
Iteration  16: 466723.833 ops/s
Iteration  17: 464316.060 ops/s
Iteration  18: 480970.196 ops/s
Iteration  19: 459568.587 ops/s
Iteration  20: 481992.864 ops/s
Iteration  21: 462992.906 ops/s
Iteration  22: 475923.025 ops/s
Iteration  23: 472028.897 ops/s
Iteration  24: 463658.764 ops/s
Iteration  25: 478241.245 ops/s
Iteration  26: 456293.251 ops/s
Iteration  27: 493399.445 ops/s
Iteration  28: 471649.514 ops/s
Iteration  29: 465486.010 ops/s
Iteration  30: 465736.515 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_errorDelayed2":
  468888.952 ±(99.9%) 12214.289 ops/s [Average]
  (min, avg, max) = (390680.281, 468888.952, 494349.331), stdev = 18281.774
  CI (99.9%): [456674.663, 481103.241] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score       Error  Units
FlowableCombineLatestTest._Benchmark.benchmark_errorDelayed2  thrpt   30  468888.952 ± 12214.289  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableMapOptionalTest._Benchmark.benchmark_asyncFusedNone$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableMapOptionalTest._Benchmark.benchmark_asyncFusedNone

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 187917.355 ops/s
# Warmup Iteration   2: 827121.336 ops/s
# Warmup Iteration   3: 1142786.989 ops/s
# Warmup Iteration   4: 1444258.634 ops/s
# Warmup Iteration   5: 1515664.798 ops/s
# Warmup Iteration   6: 1501035.897 ops/s
# Warmup Iteration   7: 1424876.514 ops/s
# Warmup Iteration   8: 1472952.991 ops/s
# Warmup Iteration   9: 1552227.436 ops/s
# Warmup Iteration  10: 1430768.493 ops/s
# Warmup Iteration  11: 1476860.792 ops/s
# Warmup Iteration  12: 1457577.755 ops/s
# Warmup Iteration  13: 1509190.636 ops/s
# Warmup Iteration  14: 1512763.026 ops/s
# Warmup Iteration  15: 1404423.377 ops/s
# Warmup Iteration  16: 1554000.595 ops/s
# Warmup Iteration  17: 1456564.771 ops/s
# Warmup Iteration  18: 1445827.105 ops/s
# Warmup Iteration  19: 1477088.801 ops/s
# Warmup Iteration  20: 1513605.120 ops/s
# Warmup Iteration  21: 1436535.112 ops/s
# Warmup Iteration  22: 1528716.812 ops/s
# Warmup Iteration  23: 1446767.222 ops/s
# Warmup Iteration  24: 1492514.532 ops/s
# Warmup Iteration  25: 1540362.944 ops/s
# Warmup Iteration  26: 1501533.850 ops/s
# Warmup Iteration  27: 1524524.073 ops/s
# Warmup Iteration  28: 1468267.791 ops/s
# Warmup Iteration  29: 1497585.260 ops/s
# Warmup Iteration  30: 1517966.358 ops/s
Iteration   1: 1441364.941 ops/s
Iteration   2: 1530210.215 ops/s
Iteration   3: 1481730.554 ops/s
Iteration   4: 1540667.736 ops/s
Iteration   5: 1446577.867 ops/s
Iteration   6: 1500231.269 ops/s
Iteration   7: 1547372.750 ops/s
Iteration   8: 1422527.232 ops/s
Iteration   9: 1512126.809 ops/s
Iteration  10: 1453810.059 ops/s
Iteration  11: 1466262.707 ops/s
Iteration  12: 1492254.673 ops/s
Iteration  13: 1524157.237 ops/s
Iteration  14: 1571896.891 ops/s
Iteration  15: 1559415.192 ops/s
Iteration  16: 1482416.808 ops/s
Iteration  17: 1452159.398 ops/s
Iteration  18: 1485651.569 ops/s
Iteration  19: 1443050.976 ops/s
Iteration  20: 1482283.029 ops/s
Iteration  21: 1515176.727 ops/s
Iteration  22: 1416151.671 ops/s
Iteration  23: 1467290.599 ops/s
Iteration  24: 1513241.966 ops/s
Iteration  25: 1470349.914 ops/s
Iteration  26: 1548141.249 ops/s
Iteration  27: 1460489.132 ops/s
Iteration  28: 1478995.229 ops/s
Iteration  29: 1519955.637 ops/s
Iteration  30: 1466074.043 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableMapOptionalTest._Benchmark.benchmark_asyncFusedNone":
  1489734.469 ±(99.9%) 27365.918 ops/s [Average]
  (min, avg, max) = (1416151.671, 1489734.469, 1571896.891), stdev = 40960.022
  CI (99.9%): [1462368.551, 1517100.388] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
FlowableMapOptionalTest._Benchmark.benchmark_asyncFusedNone  thrpt   30  1489734.469 ± 27365.918  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStreamTest._Benchmark.benchmark_onSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStreamTest._Benchmark.benchmark_onSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 94569.345 ops/s
# Warmup Iteration   2: 327053.663 ops/s
# Warmup Iteration   3: 391269.966 ops/s
# Warmup Iteration   4: 410328.321 ops/s
# Warmup Iteration   5: 446571.120 ops/s
# Warmup Iteration   6: 443788.594 ops/s
# Warmup Iteration   7: 466689.551 ops/s
# Warmup Iteration   8: 427001.845 ops/s
# Warmup Iteration   9: 450566.975 ops/s
# Warmup Iteration  10: 436346.984 ops/s
# Warmup Iteration  11: 441871.602 ops/s
# Warmup Iteration  12: 437994.401 ops/s
# Warmup Iteration  13: 443327.668 ops/s
# Warmup Iteration  14: 457846.138 ops/s
# Warmup Iteration  15: 449598.491 ops/s
# Warmup Iteration  16: 436970.052 ops/s
# Warmup Iteration  17: 471267.625 ops/s
# Warmup Iteration  18: 452863.041 ops/s
# Warmup Iteration  19: 460984.408 ops/s
# Warmup Iteration  20: 450831.681 ops/s
# Warmup Iteration  21: 467588.550 ops/s
# Warmup Iteration  22: 443380.768 ops/s
# Warmup Iteration  23: 459433.058 ops/s
# Warmup Iteration  24: 467892.015 ops/s
# Warmup Iteration  25: 448788.954 ops/s
# Warmup Iteration  26: 461086.515 ops/s
# Warmup Iteration  27: 458666.235 ops/s
# Warmup Iteration  28: 452353.804 ops/s
# Warmup Iteration  29: 466977.824 ops/s
# Warmup Iteration  30: 469331.046 ops/s
Iteration   1: 447733.725 ops/s
Iteration   2: 463562.653 ops/s
Iteration   3: 450210.601 ops/s
Iteration   4: 446237.200 ops/s
Iteration   5: 459078.605 ops/s
Iteration   6: 461620.232 ops/s
Iteration   7: 486096.634 ops/s
Iteration   8: 335395.383 ops/s
Iteration   9: 466342.135 ops/s
Iteration  10: 454979.806 ops/s
Iteration  11: 460524.258 ops/s
Iteration  12: 487169.075 ops/s
Iteration  13: 449821.548 ops/s
Iteration  14: 473635.294 ops/s
Iteration  15: 474002.184 ops/s
Iteration  16: 458130.210 ops/s
Iteration  17: 465687.294 ops/s
Iteration  18: 440372.351 ops/s
Iteration  19: 468332.134 ops/s
Iteration  20: 469053.956 ops/s
Iteration  21: 456145.211 ops/s
Iteration  22: 455831.229 ops/s
Iteration  23: 484711.277 ops/s
Iteration  24: 447166.122 ops/s
Iteration  25: 469915.523 ops/s
Iteration  26: 458987.238 ops/s
Iteration  27: 469202.005 ops/s
Iteration  28: 458967.015 ops/s
Iteration  29: 444531.027 ops/s
Iteration  30: 472440.176 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStreamTest._Benchmark.benchmark_onSubscribe":
  457862.737 ±(99.9%) 17444.695 ops/s [Average]
  (min, avg, max) = (335395.383, 457862.737, 487169.075), stdev = 26110.401
  CI (99.9%): [440418.041, 475307.432] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score       Error  Units
FlowableFlatMapStreamTest._Benchmark.benchmark_onSubscribe  thrpt   30  457862.737 ± 17444.695  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStreamTest._Benchmark.benchmark_asyncUpstreamFused$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStreamTest._Benchmark.benchmark_asyncUpstreamFused

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 146649.890 ops/s
# Warmup Iteration   2: 709181.918 ops/s
# Warmup Iteration   3: 1119429.008 ops/s
# Warmup Iteration   4: 1320830.477 ops/s
# Warmup Iteration   5: 1444720.090 ops/s
# Warmup Iteration   6: 1349267.886 ops/s
# Warmup Iteration   7: 1317000.786 ops/s
# Warmup Iteration   8: 1404703.086 ops/s
# Warmup Iteration   9: 1390295.485 ops/s
# Warmup Iteration  10: 1354417.158 ops/s
# Warmup Iteration  11: 1346748.950 ops/s
# Warmup Iteration  12: 1331856.132 ops/s
# Warmup Iteration  13: 1374317.768 ops/s
# Warmup Iteration  14: 1397706.487 ops/s
# Warmup Iteration  15: 1328383.997 ops/s
# Warmup Iteration  16: 1402172.934 ops/s
# Warmup Iteration  17: 1398230.946 ops/s
# Warmup Iteration  18: 1372196.473 ops/s
# Warmup Iteration  19: 1400717.451 ops/s
# Warmup Iteration  20: 1323284.048 ops/s
# Warmup Iteration  21: 1367813.132 ops/s
# Warmup Iteration  22: 1436030.282 ops/s
# Warmup Iteration  23: 1398809.402 ops/s
# Warmup Iteration  24: 1342134.800 ops/s
# Warmup Iteration  25: 1331909.291 ops/s
# Warmup Iteration  26: 1410270.955 ops/s
# Warmup Iteration  27: 1339117.913 ops/s
# Warmup Iteration  28: 1416640.107 ops/s
# Warmup Iteration  29: 1337510.756 ops/s
# Warmup Iteration  30: 1385124.014 ops/s
Iteration   1: 1395322.256 ops/s
Iteration   2: 1385683.661 ops/s
Iteration   3: 1374995.658 ops/s
Iteration   4: 1373011.737 ops/s
Iteration   5: 1312850.869 ops/s
Iteration   6: 1411505.925 ops/s
Iteration   7: 1348600.996 ops/s
Iteration   8: 1406881.332 ops/s
Iteration   9: 1349085.282 ops/s
Iteration  10: 1352829.413 ops/s
Iteration  11: 1393610.719 ops/s
Iteration  12: 1355021.051 ops/s
Iteration  13: 1430934.791 ops/s
Iteration  14: 1392364.912 ops/s
Iteration  15: 1316315.569 ops/s
Iteration  16: 1386222.000 ops/s
Iteration  17: 1393263.244 ops/s
Iteration  18: 1348316.192 ops/s
Iteration  19: 1423795.110 ops/s
Iteration  20: 1371326.880 ops/s
Iteration  21: 1394918.012 ops/s
Iteration  22: 1395260.695 ops/s
Iteration  23: 1383064.139 ops/s
Iteration  24: 1316595.625 ops/s
Iteration  25: 1381180.272 ops/s
Iteration  26: 1413845.195 ops/s
Iteration  27: 1324383.818 ops/s
Iteration  28: 1429871.424 ops/s
Iteration  29: 1339990.486 ops/s
Iteration  30: 1444150.380 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStreamTest._Benchmark.benchmark_asyncUpstreamFused":
  1378173.255 ±(99.9%) 23831.224 ops/s [Average]
  (min, avg, max) = (1312850.869, 1378173.255, 1444150.380), stdev = 35669.457
  CI (99.9%): [1354342.031, 1402004.479] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
FlowableFlatMapStreamTest._Benchmark.benchmark_asyncUpstreamFused  thrpt   30  1378173.255 ± 23831.224  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableMapOptionalTest._Benchmark.benchmark_asyncFusedAll$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableMapOptionalTest._Benchmark.benchmark_asyncFusedAll

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 238068.597 ops/s
# Warmup Iteration   2: 1050332.314 ops/s
# Warmup Iteration   3: 1413927.667 ops/s
# Warmup Iteration   4: 1295036.554 ops/s
# Warmup Iteration   5: 1382404.252 ops/s
# Warmup Iteration   6: 1460101.113 ops/s
# Warmup Iteration   7: 1427724.346 ops/s
# Warmup Iteration   8: 1475012.258 ops/s
# Warmup Iteration   9: 1400573.805 ops/s
# Warmup Iteration  10: 1443480.395 ops/s
# Warmup Iteration  11: 1396965.828 ops/s
# Warmup Iteration  12: 1446589.782 ops/s
# Warmup Iteration  13: 1526176.679 ops/s
# Warmup Iteration  14: 1426637.850 ops/s
# Warmup Iteration  15: 1447079.255 ops/s
# Warmup Iteration  16: 1440301.759 ops/s
# Warmup Iteration  17: 1456045.836 ops/s
# Warmup Iteration  18: 1416448.978 ops/s
# Warmup Iteration  19: 1461146.751 ops/s
# Warmup Iteration  20: 1487567.144 ops/s
# Warmup Iteration  21: 1415101.197 ops/s
# Warmup Iteration  22: 1441207.221 ops/s
# Warmup Iteration  23: 1463808.395 ops/s
# Warmup Iteration  24: 1418596.177 ops/s
# Warmup Iteration  25: 1477998.655 ops/s
# Warmup Iteration  26: 1468644.359 ops/s
# Warmup Iteration  27: 1393134.752 ops/s
# Warmup Iteration  28: 1467882.436 ops/s
# Warmup Iteration  29: 1485505.504 ops/s
# Warmup Iteration  30: 1405668.359 ops/s
Iteration   1: 1423167.425 ops/s
Iteration   2: 1460161.162 ops/s
Iteration   3: 1197495.569 ops/s
Iteration   4: 1491456.626 ops/s
Iteration   5: 1428122.647 ops/s
Iteration   6: 1507927.568 ops/s
Iteration   7: 1438574.825 ops/s
Iteration   8: 1418098.784 ops/s
Iteration   9: 1520656.461 ops/s
Iteration  10: 1420134.627 ops/s
Iteration  11: 1485169.347 ops/s
Iteration  12: 1400616.351 ops/s
Iteration  13: 1471205.271 ops/s
Iteration  14: 1455384.865 ops/s
Iteration  15: 1418125.321 ops/s
Iteration  16: 1495393.132 ops/s
Iteration  17: 1413993.362 ops/s
Iteration  18: 1445779.637 ops/s
Iteration  19: 1495281.320 ops/s
Iteration  20: 1429932.502 ops/s
Iteration  21: 1510421.850 ops/s
Iteration  22: 1483973.477 ops/s
Iteration  23: 1394679.341 ops/s
Iteration  24: 1478333.903 ops/s
Iteration  25: 1436985.905 ops/s
Iteration  26: 1381905.951 ops/s
Iteration  27: 1457342.374 ops/s
Iteration  28: 1424296.851 ops/s
Iteration  29: 1416726.606 ops/s
Iteration  30: 1510099.394 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableMapOptionalTest._Benchmark.benchmark_asyncFusedAll":
  1443714.748 ±(99.9%) 40371.466 ops/s [Average]
  (min, avg, max) = (1197495.569, 1443714.748, 1520656.461), stdev = 60426.114
  CI (99.9%): [1403343.283, 1484086.214] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
FlowableMapOptionalTest._Benchmark.benchmark_asyncFusedAll  thrpt   30  1443714.748 ± 40371.466  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableMapOptionalTest._Benchmark.benchmark_boundaryFusedAll$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableMapOptionalTest._Benchmark.benchmark_boundaryFusedAll

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 216320.234 ops/s
# Warmup Iteration   2: 797386.610 ops/s
# Warmup Iteration   3: 1282336.327 ops/s
# Warmup Iteration   4: 1407519.327 ops/s
# Warmup Iteration   5: 1516704.913 ops/s
# Warmup Iteration   6: 1490887.107 ops/s
# Warmup Iteration   7: 1436920.083 ops/s
# Warmup Iteration   8: 1555895.509 ops/s
# Warmup Iteration   9: 1473399.725 ops/s
# Warmup Iteration  10: 1498951.222 ops/s
# Warmup Iteration  11: 1447232.075 ops/s
# Warmup Iteration  12: 1483505.334 ops/s
# Warmup Iteration  13: 1544980.342 ops/s
# Warmup Iteration  14: 1440136.908 ops/s
# Warmup Iteration  15: 1516484.666 ops/s
# Warmup Iteration  16: 1441240.525 ops/s
# Warmup Iteration  17: 1463077.910 ops/s
# Warmup Iteration  18: 1504512.673 ops/s
# Warmup Iteration  19: 1483799.265 ops/s
# Warmup Iteration  20: 1556477.222 ops/s
# Warmup Iteration  21: 1471853.789 ops/s
# Warmup Iteration  22: 1451608.547 ops/s
# Warmup Iteration  23: 1491869.345 ops/s
# Warmup Iteration  24: 1480889.424 ops/s
# Warmup Iteration  25: 1515234.126 ops/s
# Warmup Iteration  26: 1565810.278 ops/s
# Warmup Iteration  27: 1457005.007 ops/s
# Warmup Iteration  28: 1487481.618 ops/s
# Warmup Iteration  29: 1542498.637 ops/s
# Warmup Iteration  30: 1505628.349 ops/s
Iteration   1: 1514547.164 ops/s
Iteration   2: 1530708.803 ops/s
Iteration   3: 1459945.096 ops/s
Iteration   4: 1479583.633 ops/s
Iteration   5: 1544183.399 ops/s
Iteration   6: 1481096.423 ops/s
Iteration   7: 1527564.876 ops/s
Iteration   8: 1479781.471 ops/s
Iteration   9: 1557553.417 ops/s
Iteration  10: 1499082.941 ops/s
Iteration  11: 1494302.963 ops/s
Iteration  12: 1516643.346 ops/s
Iteration  13: 1481616.822 ops/s
Iteration  14: 1514274.191 ops/s
Iteration  15: 1470776.296 ops/s
Iteration  16: 1533028.527 ops/s
Iteration  17: 1482645.184 ops/s
Iteration  18: 1480965.132 ops/s
Iteration  19: 1522250.304 ops/s
Iteration  20: 1493477.611 ops/s
Iteration  21: 1532835.089 ops/s
Iteration  22: 1467382.176 ops/s
Iteration  23: 1528487.573 ops/s
Iteration  24: 1479638.484 ops/s
Iteration  25: 1511370.276 ops/s
Iteration  26: 1552591.762 ops/s
Iteration  27: 1437071.183 ops/s
Iteration  28: 1495340.565 ops/s
Iteration  29: 1539723.810 ops/s
Iteration  30: 1506089.811 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableMapOptionalTest._Benchmark.benchmark_boundaryFusedAll":
  1503818.611 ±(99.9%) 19767.784 ops/s [Average]
  (min, avg, max) = (1437071.183, 1503818.611, 1557553.417), stdev = 29587.490
  CI (99.9%): [1484050.827, 1523586.395] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
FlowableMapOptionalTest._Benchmark.benchmark_boundaryFusedAll  thrpt   30  1503818.611 ± 19767.784  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureErrorTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureErrorTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 192608.863 ops/s
# Warmup Iteration   2: 460069.053 ops/s
# Warmup Iteration   3: 469178.574 ops/s
# Warmup Iteration   4: 462093.912 ops/s
# Warmup Iteration   5: 509253.265 ops/s
# Warmup Iteration   6: 501543.173 ops/s
# Warmup Iteration   7: 503309.592 ops/s
# Warmup Iteration   8: 518267.523 ops/s
# Warmup Iteration   9: 514638.778 ops/s
# Warmup Iteration  10: 456177.701 ops/s
# Warmup Iteration  11: 484267.628 ops/s
# Warmup Iteration  12: 502585.774 ops/s
# Warmup Iteration  13: 513535.005 ops/s
# Warmup Iteration  14: 521227.385 ops/s
# Warmup Iteration  15: 497156.274 ops/s
# Warmup Iteration  16: 514155.171 ops/s
# Warmup Iteration  17: 516349.804 ops/s
# Warmup Iteration  18: 546423.935 ops/s
# Warmup Iteration  19: 516396.192 ops/s
# Warmup Iteration  20: 535665.911 ops/s
# Warmup Iteration  21: 529741.055 ops/s
# Warmup Iteration  22: 518142.447 ops/s
# Warmup Iteration  23: 547669.256 ops/s
# Warmup Iteration  24: 525034.364 ops/s
# Warmup Iteration  25: 514859.260 ops/s
# Warmup Iteration  26: 539767.855 ops/s
# Warmup Iteration  27: 461419.857 ops/s
# Warmup Iteration  28: 485133.022 ops/s
# Warmup Iteration  29: 548637.433 ops/s
# Warmup Iteration  30: 516676.417 ops/s
Iteration   1: 531188.517 ops/s
Iteration   2: 502288.997 ops/s
Iteration   3: 552425.739 ops/s
Iteration   4: 515154.355 ops/s
Iteration   5: 531448.076 ops/s
Iteration   6: 522379.086 ops/s
Iteration   7: 518939.898 ops/s
Iteration   8: 548964.284 ops/s
Iteration   9: 504618.112 ops/s
Iteration  10: 539546.140 ops/s
Iteration  11: 517418.526 ops/s
Iteration  12: 535986.986 ops/s
Iteration  13: 522722.734 ops/s
Iteration  14: 510277.344 ops/s
Iteration  15: 532391.689 ops/s
Iteration  16: 527349.472 ops/s
Iteration  17: 522257.724 ops/s
Iteration  18: 546926.721 ops/s
Iteration  19: 509828.955 ops/s
Iteration  20: 539533.039 ops/s
Iteration  21: 504651.418 ops/s
Iteration  22: 536586.128 ops/s
Iteration  23: 518926.777 ops/s
Iteration  24: 530157.143 ops/s
Iteration  25: 522825.787 ops/s
Iteration  26: 532420.918 ops/s
Iteration  27: 540774.031 ops/s
Iteration  28: 524659.631 ops/s
Iteration  29: 544095.146 ops/s
Iteration  30: 510792.214 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureErrorTest._Benchmark.benchmark_doubleOnSubscribe":
  526584.519 ±(99.9%) 9193.668 ops/s [Average]
  (min, avg, max) = (502288.997, 526584.519, 552425.739), stdev = 13760.651
  CI (99.9%): [517390.851, 535778.188] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score      Error  Units
FlowableOnBackpressureErrorTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  526584.519 ± 9193.668  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableMapOptionalTest._Benchmark.benchmark_asyncFusedMixed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableMapOptionalTest._Benchmark.benchmark_asyncFusedMixed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 136093.645 ops/s
# Warmup Iteration   2: 677576.822 ops/s
# Warmup Iteration   3: 1023632.736 ops/s
# Warmup Iteration   4: 1065318.824 ops/s
# Warmup Iteration   5: 1083348.786 ops/s
# Warmup Iteration   6: 1126134.851 ops/s
# Warmup Iteration   7: 1054278.955 ops/s
# Warmup Iteration   8: 1103704.537 ops/s
# Warmup Iteration   9: 961212.350 ops/s
# Warmup Iteration  10: 1028445.549 ops/s
# Warmup Iteration  11: 1103561.696 ops/s
# Warmup Iteration  12: 1101085.605 ops/s
# Warmup Iteration  13: 1132059.696 ops/s
# Warmup Iteration  14: 1086018.828 ops/s
# Warmup Iteration  15: 1107030.232 ops/s
# Warmup Iteration  16: 1111110.190 ops/s
# Warmup Iteration  17: 1105240.585 ops/s
# Warmup Iteration  18: 1068760.276 ops/s
# Warmup Iteration  19: 1151425.456 ops/s
# Warmup Iteration  20: 1045765.722 ops/s
# Warmup Iteration  21: 1115986.494 ops/s
# Warmup Iteration  22: 1101828.712 ops/s
# Warmup Iteration  23: 1138873.311 ops/s
# Warmup Iteration  24: 1099336.849 ops/s
# Warmup Iteration  25: 1106155.209 ops/s
# Warmup Iteration  26: 1082552.219 ops/s
# Warmup Iteration  27: 1158882.688 ops/s
# Warmup Iteration  28: 1115135.718 ops/s
# Warmup Iteration  29: 1053030.940 ops/s
# Warmup Iteration  30: 1099846.492 ops/s
Iteration   1: 1081623.100 ops/s
Iteration   2: 1136286.321 ops/s
Iteration   3: 1080040.859 ops/s
Iteration   4: 1101545.955 ops/s
Iteration   5: 1119706.200 ops/s
Iteration   6: 1091927.325 ops/s
Iteration   7: 1119111.641 ops/s
Iteration   8: 1057654.243 ops/s
Iteration   9: 1141602.375 ops/s
Iteration  10: 1059442.892 ops/s
Iteration  11: 1071104.798 ops/s
Iteration  12: 1065294.890 ops/s
Iteration  13: 1102204.347 ops/s
Iteration  14: 1077100.865 ops/s
Iteration  15: 1118718.718 ops/s
Iteration  16: 1093546.377 ops/s
Iteration  17: 1101591.313 ops/s
Iteration  18: 1084543.213 ops/s
Iteration  19: 1125802.649 ops/s
Iteration  20: 1090857.156 ops/s
Iteration  21: 1104491.327 ops/s
Iteration  22: 1072727.327 ops/s
Iteration  23: 1103308.220 ops/s
Iteration  24: 1051438.111 ops/s
Iteration  25: 1118056.595 ops/s
Iteration  26: 1124836.051 ops/s
Iteration  27: 1091531.872 ops/s
Iteration  28: 1121865.877 ops/s
Iteration  29: 1110849.533 ops/s
Iteration  30: 1061344.637 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableMapOptionalTest._Benchmark.benchmark_asyncFusedMixed":
  1096005.160 ±(99.9%) 16530.638 ops/s [Average]
  (min, avg, max) = (1051438.111, 1096005.160, 1141602.375), stdev = 24742.283
  CI (99.9%): [1079474.521, 1112535.798] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
FlowableMapOptionalTest._Benchmark.benchmark_asyncFusedMixed  thrpt   30  1096005.160 ± 16530.638  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeToFutureTest._Benchmark.benchmark_success$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeToFutureTest._Benchmark.benchmark_success

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 28943.240 ops/s
# Warmup Iteration   2: 19128.008 ops/s
# Warmup Iteration   3: 20745.111 ops/s
# Warmup Iteration   4: 21337.991 ops/s
# Warmup Iteration   5: 23822.222 ops/s
# Warmup Iteration   6: 21712.107 ops/s
# Warmup Iteration   7: 20532.511 ops/s
# Warmup Iteration   8: 21659.513 ops/s
# Warmup Iteration   9: 21143.541 ops/s
# Warmup Iteration  10: 20966.714 ops/s
# Warmup Iteration  11: 32847.352 ops/s
# Warmup Iteration  12: 20605.363 ops/s
# Warmup Iteration  13: 21208.627 ops/s
# Warmup Iteration  14: 21866.061 ops/s
# Warmup Iteration  15: 22792.177 ops/s
# Warmup Iteration  16: 21098.867 ops/s
# Warmup Iteration  17: 21802.999 ops/s
# Warmup Iteration  18: 21459.373 ops/s
# Warmup Iteration  19: 21588.791 ops/s
# Warmup Iteration  20: 21587.788 ops/s
# Warmup Iteration  21: 21658.693 ops/s
# Warmup Iteration  22: 29900.173 ops/s
# Warmup Iteration  23: 21742.949 ops/s
# Warmup Iteration  24: 21077.310 ops/s
# Warmup Iteration  25: 21343.558 ops/s
# Warmup Iteration  26: 21716.150 ops/s
# Warmup Iteration  27: 21048.529 ops/s
# Warmup Iteration  28: 21310.529 ops/s
# Warmup Iteration  29: 21673.490 ops/s
# Warmup Iteration  30: 21199.302 ops/s
Iteration   1: 21584.329 ops/s
Iteration   2: 21568.517 ops/s
Iteration   3: 21712.777 ops/s
Iteration   4: 22082.793 ops/s
Iteration   5: 20415.956 ops/s
Iteration   6: 21254.140 ops/s
Iteration   7: 21084.461 ops/s
Iteration   8: 21379.877 ops/s
Iteration   9: 21373.438 ops/s
Iteration  10: 21829.311 ops/s
Iteration  11: 21335.078 ops/s
Iteration  12: 21257.991 ops/s
Iteration  13: 21618.451 ops/s
Iteration  14: 21251.714 ops/s
Iteration  15: 20502.053 ops/s
Iteration  16: 21685.240 ops/s
Iteration  17: 21767.805 ops/s
Iteration  18: 21690.425 ops/s
Iteration  19: 21148.077 ops/s
Iteration  20: 21437.034 ops/s
Iteration  21: 21322.420 ops/s
Iteration  22: 21088.401 ops/s
Iteration  23: 21582.955 ops/s
Iteration  24: 22110.982 ops/s
Iteration  25: 21319.124 ops/s
Iteration  26: 21319.762 ops/s
Iteration  27: 21481.115 ops/s
Iteration  28: 21137.606 ops/s
Iteration  29: 20775.305 ops/s
Iteration  30: 21879.795 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeToFutureTest._Benchmark.benchmark_success":
  21399.898 ±(99.9%) 263.714 ops/s [Average]
  (min, avg, max) = (20415.956, 21399.898, 22110.982), stdev = 394.714
  CI (99.9%): [21136.184, 21663.611] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt      Score     Error  Units
MaybeToFutureTest._Benchmark.benchmark_success  thrpt   30  21399.898 ± 263.714  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeIntervalTest._Benchmark.benchmark_justSecondsScheduler$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeIntervalTest._Benchmark.benchmark_justSecondsScheduler

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 317434.832 ops/s
# Warmup Iteration   2: 585897.871 ops/s
# Warmup Iteration   3: 640828.668 ops/s
# Warmup Iteration   4: 614402.128 ops/s
# Warmup Iteration   5: 663369.685 ops/s
# Warmup Iteration   6: 628548.020 ops/s
# Warmup Iteration   7: 617240.309 ops/s
# Warmup Iteration   8: 631035.048 ops/s
# Warmup Iteration   9: 643476.474 ops/s
# Warmup Iteration  10: 620147.480 ops/s
# Warmup Iteration  11: 632137.423 ops/s
# Warmup Iteration  12: 626048.395 ops/s
# Warmup Iteration  13: 641844.185 ops/s
# Warmup Iteration  14: 632615.695 ops/s
# Warmup Iteration  15: 641183.194 ops/s
# Warmup Iteration  16: 630086.500 ops/s
# Warmup Iteration  17: 608149.287 ops/s
# Warmup Iteration  18: 659730.705 ops/s
# Warmup Iteration  19: 613341.433 ops/s
# Warmup Iteration  20: 620118.332 ops/s
# Warmup Iteration  21: 631989.905 ops/s
# Warmup Iteration  22: 601950.677 ops/s
# Warmup Iteration  23: 636965.698 ops/s
# Warmup Iteration  24: 624932.898 ops/s
# Warmup Iteration  25: 615679.763 ops/s
# Warmup Iteration  26: 630264.431 ops/s
# Warmup Iteration  27: 631881.296 ops/s
# Warmup Iteration  28: 642838.667 ops/s
# Warmup Iteration  29: 627159.446 ops/s
# Warmup Iteration  30: 648989.114 ops/s
Iteration   1: 613298.276 ops/s
Iteration   2: 624806.062 ops/s
Iteration   3: 651508.680 ops/s
Iteration   4: 624264.412 ops/s
Iteration   5: 620237.987 ops/s
Iteration   6: 655158.713 ops/s
Iteration   7: 625391.149 ops/s
Iteration   8: 656465.138 ops/s
Iteration   9: 637109.994 ops/s
Iteration  10: 626503.057 ops/s
Iteration  11: 646621.823 ops/s
Iteration  12: 610645.590 ops/s
Iteration  13: 648797.114 ops/s
Iteration  14: 612415.514 ops/s
Iteration  15: 623465.828 ops/s
Iteration  16: 625448.037 ops/s
Iteration  17: 632479.918 ops/s
Iteration  18: 633451.529 ops/s
Iteration  19: 612227.185 ops/s
Iteration  20: 619905.884 ops/s
Iteration  21: 650524.185 ops/s
Iteration  22: 612905.128 ops/s
Iteration  23: 629367.881 ops/s
Iteration  24: 616169.985 ops/s
Iteration  25: 634466.543 ops/s
Iteration  26: 653889.307 ops/s
Iteration  27: 611717.209 ops/s
Iteration  28: 646365.563 ops/s
Iteration  29: 624890.125 ops/s
Iteration  30: 634364.241 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeIntervalTest._Benchmark.benchmark_justSecondsScheduler":
  630495.402 ±(99.9%) 9818.020 ops/s [Average]
  (min, avg, max) = (610645.590, 630495.402, 656465.138), stdev = 14695.151
  CI (99.9%): [620677.382, 640313.422] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score      Error  Units
MaybeTimeIntervalTest._Benchmark.benchmark_justSecondsScheduler  thrpt   30  630495.402 ± 9818.020  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTimestampTest._Benchmark.benchmark_justSecondsScheduler$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTimestampTest._Benchmark.benchmark_justSecondsScheduler

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 622271.867 ops/s
# Warmup Iteration   2: 1064778.442 ops/s
# Warmup Iteration   3: 1139731.646 ops/s
# Warmup Iteration   4: 1018375.141 ops/s
# Warmup Iteration   5: 1186875.381 ops/s
# Warmup Iteration   6: 1010406.693 ops/s
# Warmup Iteration   7: 1073384.224 ops/s
# Warmup Iteration   8: 1216079.131 ops/s
# Warmup Iteration   9: 1107367.908 ops/s
# Warmup Iteration  10: 1160977.610 ops/s
# Warmup Iteration  11: 1157894.177 ops/s
# Warmup Iteration  12: 1159402.762 ops/s
# Warmup Iteration  13: 1142211.348 ops/s
# Warmup Iteration  14: 1193267.603 ops/s
# Warmup Iteration  15: 1148626.487 ops/s
# Warmup Iteration  16: 1163533.818 ops/s
# Warmup Iteration  17: 1064249.071 ops/s
# Warmup Iteration  18: 1048297.937 ops/s
# Warmup Iteration  19: 1184491.474 ops/s
# Warmup Iteration  20: 1128837.748 ops/s
# Warmup Iteration  21: 1172467.827 ops/s
# Warmup Iteration  22: 1129016.049 ops/s
# Warmup Iteration  23: 1144739.231 ops/s
# Warmup Iteration  24: 1170983.369 ops/s
# Warmup Iteration  25: 1131876.152 ops/s
# Warmup Iteration  26: 1176552.042 ops/s
# Warmup Iteration  27: 1142810.965 ops/s
# Warmup Iteration  28: 1159175.836 ops/s
# Warmup Iteration  29: 1181746.535 ops/s
# Warmup Iteration  30: 1113965.461 ops/s
Iteration   1: 1173790.832 ops/s
Iteration   2: 1139579.679 ops/s
Iteration   3: 1179663.430 ops/s
Iteration   4: 1166596.577 ops/s
Iteration   5: 1136297.603 ops/s
Iteration   6: 1154681.128 ops/s
Iteration   7: 1178282.046 ops/s
Iteration   8: 1138265.167 ops/s
Iteration   9: 1194516.362 ops/s
Iteration  10: 1176125.110 ops/s
Iteration  11: 1170151.109 ops/s
Iteration  12: 1118495.872 ops/s
Iteration  13: 1155478.453 ops/s
Iteration  14: 1121837.499 ops/s
Iteration  15: 1140961.517 ops/s
Iteration  16: 1158628.943 ops/s
Iteration  17: 1132615.209 ops/s
Iteration  18: 1160216.905 ops/s
Iteration  19: 1135818.503 ops/s
Iteration  20: 1198797.166 ops/s
Iteration  21: 1117308.265 ops/s
Iteration  22: 1178165.943 ops/s
Iteration  23: 1181677.390 ops/s
Iteration  24: 1185064.314 ops/s
Iteration  25: 1132558.893 ops/s
Iteration  26: 1198415.449 ops/s
Iteration  27: 1131001.031 ops/s
Iteration  28: 1130982.560 ops/s
Iteration  29: 1123281.704 ops/s
Iteration  30: 1181691.800 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimestampTest._Benchmark.benchmark_justSecondsScheduler":
  1156364.882 ±(99.9%) 17090.881 ops/s [Average]
  (min, avg, max) = (1117308.265, 1156364.882, 1198797.166), stdev = 25580.828
  CI (99.9%): [1139274.001, 1173455.763] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
MaybeTimestampTest._Benchmark.benchmark_justSecondsScheduler  thrpt   30  1156364.882 ± 17090.881  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTimestampTest._Benchmark.benchmark_justScheduler$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTimestampTest._Benchmark.benchmark_justScheduler

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 405537.151 ops/s
# Warmup Iteration   2: 984665.956 ops/s
# Warmup Iteration   3: 1193206.753 ops/s
# Warmup Iteration   4: 1114201.937 ops/s
# Warmup Iteration   5: 1115165.477 ops/s
# Warmup Iteration   6: 1136617.657 ops/s
# Warmup Iteration   7: 1085154.170 ops/s
# Warmup Iteration   8: 1165582.665 ops/s
# Warmup Iteration   9: 1173223.526 ops/s
# Warmup Iteration  10: 1191952.967 ops/s
# Warmup Iteration  11: 1174780.444 ops/s
# Warmup Iteration  12: 1119287.775 ops/s
# Warmup Iteration  13: 1154180.440 ops/s
# Warmup Iteration  14: 1178526.985 ops/s
# Warmup Iteration  15: 1140964.819 ops/s
# Warmup Iteration  16: 1206918.780 ops/s
# Warmup Iteration  17: 1091885.342 ops/s
# Warmup Iteration  18: 1203361.327 ops/s
# Warmup Iteration  19: 1132099.409 ops/s
# Warmup Iteration  20: 1165061.744 ops/s
# Warmup Iteration  21: 1210627.129 ops/s
# Warmup Iteration  22: 1134468.753 ops/s
# Warmup Iteration  23: 1196052.364 ops/s
# Warmup Iteration  24: 1099111.153 ops/s
# Warmup Iteration  25: 1156770.540 ops/s
# Warmup Iteration  26: 1164701.442 ops/s
# Warmup Iteration  27: 1153499.985 ops/s
# Warmup Iteration  28: 1173679.490 ops/s
# Warmup Iteration  29: 1141164.840 ops/s
# Warmup Iteration  30: 1180537.785 ops/s
Iteration   1: 1161493.571 ops/s
Iteration   2: 1167978.692 ops/s
Iteration   3: 1147166.676 ops/s
Iteration   4: 1146331.065 ops/s
Iteration   5: 1147663.006 ops/s
Iteration   6: 1185393.324 ops/s
Iteration   7: 1169642.971 ops/s
Iteration   8: 1171231.053 ops/s
Iteration   9: 1201355.221 ops/s
Iteration  10: 1106083.036 ops/s
Iteration  11: 1169428.631 ops/s
Iteration  12: 1144597.223 ops/s
Iteration  13: 1172596.425 ops/s
Iteration  14: 1202933.961 ops/s
Iteration  15: 1112304.898 ops/s
Iteration  16: 1153492.364 ops/s
Iteration  17: 1158245.250 ops/s
Iteration  18: 1166386.837 ops/s
Iteration  19: 1155450.569 ops/s
Iteration  20: 1188177.678 ops/s
Iteration  21: 1149720.261 ops/s
Iteration  22: 1160611.449 ops/s
Iteration  23: 1146169.316 ops/s
Iteration  24: 1166889.578 ops/s
Iteration  25: 1169833.318 ops/s
Iteration  26: 1146296.328 ops/s
Iteration  27: 1170686.851 ops/s
Iteration  28: 1130379.630 ops/s
Iteration  29: 1148099.797 ops/s
Iteration  30: 1133641.256 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimestampTest._Benchmark.benchmark_justScheduler":
  1158342.675 ±(99.9%) 14642.657 ops/s [Average]
  (min, avg, max) = (1106083.036, 1158342.675, 1202933.961), stdev = 21916.442
  CI (99.9%): [1143700.017, 1172985.332] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
MaybeTimestampTest._Benchmark.benchmark_justScheduler  thrpt   30  1158342.675 ± 14642.657  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeIntervalTest._Benchmark.benchmark_justScheduler$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeIntervalTest._Benchmark.benchmark_justScheduler

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 318830.490 ops/s
# Warmup Iteration   2: 591809.855 ops/s
# Warmup Iteration   3: 653031.059 ops/s
# Warmup Iteration   4: 609734.244 ops/s
# Warmup Iteration   5: 618841.509 ops/s
# Warmup Iteration   6: 616094.859 ops/s
# Warmup Iteration   7: 627449.744 ops/s
# Warmup Iteration   8: 674296.250 ops/s
# Warmup Iteration   9: 614372.488 ops/s
# Warmup Iteration  10: 637845.506 ops/s
# Warmup Iteration  11: 617200.782 ops/s
# Warmup Iteration  12: 531278.705 ops/s
# Warmup Iteration  13: 663770.049 ops/s
# Warmup Iteration  14: 613811.062 ops/s
# Warmup Iteration  15: 657067.943 ops/s
# Warmup Iteration  16: 626227.231 ops/s
# Warmup Iteration  17: 641080.086 ops/s
# Warmup Iteration  18: 633844.537 ops/s
# Warmup Iteration  19: 610907.831 ops/s
# Warmup Iteration  20: 665176.079 ops/s
# Warmup Iteration  21: 630328.452 ops/s
# Warmup Iteration  22: 652317.549 ops/s
# Warmup Iteration  23: 621615.448 ops/s
# Warmup Iteration  24: 622708.946 ops/s
# Warmup Iteration  25: 648869.220 ops/s
# Warmup Iteration  26: 635714.469 ops/s
# Warmup Iteration  27: 636983.772 ops/s
# Warmup Iteration  28: 612615.803 ops/s
# Warmup Iteration  29: 662194.722 ops/s
# Warmup Iteration  30: 659361.395 ops/s
Iteration   1: 625965.731 ops/s
Iteration   2: 640076.581 ops/s
Iteration   3: 621229.458 ops/s
Iteration   4: 641768.698 ops/s
Iteration   5: 627974.795 ops/s
Iteration   6: 642231.925 ops/s
Iteration   7: 643826.042 ops/s
Iteration   8: 628763.777 ops/s
Iteration   9: 641094.567 ops/s
Iteration  10: 641644.315 ops/s
Iteration  11: 641608.292 ops/s
Iteration  12: 638139.905 ops/s
Iteration  13: 615946.389 ops/s
Iteration  14: 652681.894 ops/s
Iteration  15: 626385.320 ops/s
Iteration  16: 621296.419 ops/s
Iteration  17: 654827.654 ops/s
Iteration  18: 622088.402 ops/s
Iteration  19: 624310.046 ops/s
Iteration  20: 624945.919 ops/s
Iteration  21: 648879.472 ops/s
Iteration  22: 616907.477 ops/s
Iteration  23: 620751.814 ops/s
Iteration  24: 658490.425 ops/s
Iteration  25: 643172.420 ops/s
Iteration  26: 610715.398 ops/s
Iteration  27: 645463.725 ops/s
Iteration  28: 640345.688 ops/s
Iteration  29: 658150.245 ops/s
Iteration  30: 607347.069 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeIntervalTest._Benchmark.benchmark_justScheduler":
  634234.329 ±(99.9%) 9417.056 ops/s [Average]
  (min, avg, max) = (607347.069, 634234.329, 658490.425), stdev = 14095.008
  CI (99.9%): [624817.272, 643651.385] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score      Error  Units
MaybeTimeIntervalTest._Benchmark.benchmark_justScheduler  thrpt   30  634234.329 ± 9417.056  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 174618.925 ops/s
# Warmup Iteration   2: 454995.424 ops/s
# Warmup Iteration   3: 477808.068 ops/s
# Warmup Iteration   4: 455914.738 ops/s
# Warmup Iteration   5: 528010.649 ops/s
# Warmup Iteration   6: 480238.291 ops/s
# Warmup Iteration   7: 478423.722 ops/s
# Warmup Iteration   8: 528636.103 ops/s
# Warmup Iteration   9: 520904.841 ops/s
# Warmup Iteration  10: 513556.889 ops/s
# Warmup Iteration  11: 522216.937 ops/s
# Warmup Iteration  12: 504314.113 ops/s
# Warmup Iteration  13: 527424.811 ops/s
# Warmup Iteration  14: 526853.877 ops/s
# Warmup Iteration  15: 511465.469 ops/s
# Warmup Iteration  16: 534182.038 ops/s
# Warmup Iteration  17: 526863.254 ops/s
# Warmup Iteration  18: 542005.292 ops/s
# Warmup Iteration  19: 536073.942 ops/s
# Warmup Iteration  20: 525990.106 ops/s
# Warmup Iteration  21: 544127.827 ops/s
# Warmup Iteration  22: 544026.571 ops/s
# Warmup Iteration  23: 517519.325 ops/s
# Warmup Iteration  24: 538591.822 ops/s
# Warmup Iteration  25: 535678.563 ops/s
# Warmup Iteration  26: 532464.656 ops/s
# Warmup Iteration  27: 525723.142 ops/s
# Warmup Iteration  28: 537750.847 ops/s
# Warmup Iteration  29: 557429.626 ops/s
# Warmup Iteration  30: 515910.620 ops/s
Iteration   1: 551457.365 ops/s
Iteration   2: 523758.796 ops/s
Iteration   3: 549364.122 ops/s
Iteration   4: 520526.230 ops/s
Iteration   5: 539778.506 ops/s
Iteration   6: 544434.534 ops/s
Iteration   7: 521553.823 ops/s
Iteration   8: 542204.222 ops/s
Iteration   9: 524295.832 ops/s
Iteration  10: 556642.711 ops/s
Iteration  11: 525886.025 ops/s
Iteration  12: 530974.985 ops/s
Iteration  13: 528654.267 ops/s
Iteration  14: 526719.684 ops/s
Iteration  15: 537118.456 ops/s
Iteration  16: 515990.482 ops/s
Iteration  17: 537339.702 ops/s
Iteration  18: 527558.640 ops/s
Iteration  19: 555303.647 ops/s
Iteration  20: 546779.388 ops/s
Iteration  21: 520825.699 ops/s
Iteration  22: 552566.267 ops/s
Iteration  23: 552640.410 ops/s
Iteration  24: 522087.423 ops/s
Iteration  25: 545547.174 ops/s
Iteration  26: 524893.553 ops/s
Iteration  27: 522561.422 ops/s
Iteration  28: 553235.739 ops/s
Iteration  29: 517351.569 ops/s
Iteration  30: 539613.222 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayTest._Benchmark.benchmark_doubleOnSubscribe":
  535255.463 ±(99.9%) 8724.530 ops/s [Average]
  (min, avg, max) = (515990.482, 535255.463, 556642.711), stdev = 13058.468
  CI (99.9%): [526530.933, 543979.994] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score      Error  Units
MaybeDelayTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  535255.463 ± 8724.530  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSampleTest._Benchmark.benchmark_emitLastTimed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSampleTest._Benchmark.benchmark_emitLastTimed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.771 ops/s
# Warmup Iteration   2: 11691.601 ops/s
# Warmup Iteration   3: 30214.799 ops/s
# Warmup Iteration   4: 36710.439 ops/s
# Warmup Iteration   5: 51578.796 ops/s
# Warmup Iteration   6: 52469.638 ops/s
# Warmup Iteration   7: 76066.034 ops/s
# Warmup Iteration   8: 122080.583 ops/s
# Warmup Iteration   9: 114607.740 ops/s
# Warmup Iteration  10: 112952.987 ops/s
# Warmup Iteration  11: 112009.443 ops/s
# Warmup Iteration  12: 116083.356 ops/s
# Warmup Iteration  13: 110742.448 ops/s
# Warmup Iteration  14: 110528.091 ops/s
# Warmup Iteration  15: 124420.996 ops/s
# Warmup Iteration  16: 119587.369 ops/s
# Warmup Iteration  17: 117827.796 ops/s
# Warmup Iteration  18: 123046.569 ops/s
# Warmup Iteration  19: 128192.183 ops/s
# Warmup Iteration  20: 114624.848 ops/s
# Warmup Iteration  21: 115142.473 ops/s
# Warmup Iteration  22: 119168.950 ops/s
# Warmup Iteration  23: 119489.569 ops/s
# Warmup Iteration  24: 117608.549 ops/s
# Warmup Iteration  25: 110769.493 ops/s
# Warmup Iteration  26: 96524.017 ops/s
# Warmup Iteration  27: 112033.311 ops/s
# Warmup Iteration  28: 101143.668 ops/s
# Warmup Iteration  29: 113176.649 ops/s
# Warmup Iteration  30: 105009.986 ops/s
Iteration   1: 119800.741 ops/s
Iteration   2: 104283.503 ops/s
Iteration   3: 105616.406 ops/s
Iteration   4: 111884.560 ops/s
Iteration   5: 112496.693 ops/s
Iteration   6: 109151.600 ops/s
Iteration   7: 122560.192 ops/s
Iteration   8: 111279.191 ops/s
Iteration   9: 113230.915 ops/s
Iteration  10: 108409.323 ops/s
Iteration  11: 111093.488 ops/s
Iteration  12: 112406.714 ops/s
Iteration  13: 120088.458 ops/s
Iteration  14: 116063.612 ops/s
Iteration  15: 128707.126 ops/s
Iteration  16: 110264.995 ops/s
Iteration  17: 126912.707 ops/s
Iteration  18: 118068.923 ops/s
Iteration  19: 123211.127 ops/s
Iteration  20: 112892.895 ops/s
Iteration  21: 108920.818 ops/s
Iteration  22: 110005.265 ops/s
Iteration  23: 110150.642 ops/s
Iteration  24: 124377.605 ops/s
Iteration  25: 107466.180 ops/s
Iteration  26: 112225.273 ops/s
Iteration  27: 115583.546 ops/s
Iteration  28: 115999.559 ops/s
Iteration  29: 121537.045 ops/s
Iteration  30: 116451.792 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableSampleTest._Benchmark.benchmark_emitLastTimed":
  114704.696 ±(99.9%) 4221.100 ops/s [Average]
  (min, avg, max) = (104283.503, 114704.696, 128707.126), stdev = 6317.944
  CI (99.9%): [110483.597, 118925.796] (assumes normal distribution)


# Run complete. Total time: 00:01:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score      Error  Units
ObservableSampleTest._Benchmark.benchmark_emitLastTimed  thrpt   30  114704.696 ± 4221.100  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_bufferTimedExactEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_bufferTimedExactEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.777 ops/s
# Warmup Iteration   2: 8959.491 ops/s
# Warmup Iteration   3: 29695.802 ops/s
# Warmup Iteration   4: 29991.517 ops/s
# Warmup Iteration   5: 43828.397 ops/s
# Warmup Iteration   6: 52816.208 ops/s
# Warmup Iteration   7: 42369.001 ops/s
# Warmup Iteration   8: 34720.662 ops/s
# Warmup Iteration   9: 31896.569 ops/s
# Warmup Iteration  10: 84386.556 ops/s
# Warmup Iteration  11: 122987.996 ops/s
# Warmup Iteration  12: 108688.877 ops/s
# Warmup Iteration  13: 118241.326 ops/s
# Warmup Iteration  14: 99261.470 ops/s
# Warmup Iteration  15: 131388.418 ops/s
# Warmup Iteration  16: 110359.092 ops/s
# Warmup Iteration  17: 122494.337 ops/s
# Warmup Iteration  18: 105020.867 ops/s
# Warmup Iteration  19: 125340.367 ops/s
# Warmup Iteration  20: 131481.833 ops/s
# Warmup Iteration  21: 102854.337 ops/s
# Warmup Iteration  22: 122869.051 ops/s
# Warmup Iteration  23: 108783.434 ops/s
# Warmup Iteration  24: 103955.892 ops/s
# Warmup Iteration  25: 115679.424 ops/s
# Warmup Iteration  26: 116453.188 ops/s
# Warmup Iteration  27: 114721.904 ops/s
# Warmup Iteration  28: 115940.038 ops/s
# Warmup Iteration  29: 121184.862 ops/s
# Warmup Iteration  30: 122280.166 ops/s
Iteration   1: 115609.007 ops/s
Iteration   2: 116463.828 ops/s
Iteration   3: 112279.783 ops/s
Iteration   4: 113474.887 ops/s
Iteration   5: 115143.487 ops/s
Iteration   6: 119013.194 ops/s
Iteration   7: 114076.423 ops/s
Iteration   8: 134759.031 ops/s
Iteration   9: 121322.615 ops/s
Iteration  10: 104267.998 ops/s
Iteration  11: 110474.945 ops/s
Iteration  12: 119783.331 ops/s
Iteration  13: 111927.070 ops/s
Iteration  14: 106837.610 ops/s
Iteration  15: 122755.330 ops/s
Iteration  16: 111743.371 ops/s
Iteration  17: 112560.500 ops/s
Iteration  18: 103365.764 ops/s
Iteration  19: 105192.941 ops/s
Iteration  20: 116779.217 ops/s
Iteration  21: 110793.011 ops/s
Iteration  22: 130605.627 ops/s
Iteration  23: 125820.195 ops/s
Iteration  24: 122958.916 ops/s
Iteration  25: 103245.503 ops/s
Iteration  26: 109465.234 ops/s
Iteration  27: 111386.695 ops/s
Iteration  28: 118899.977 ops/s
Iteration  29: 109092.633 ops/s
Iteration  30: 86657.072 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_bufferTimedExactEmpty":
  113891.840 ±(99.9%) 6135.554 ops/s [Average]
  (min, avg, max) = (86657.072, 113891.840, 134759.031), stdev = 9183.410
  CI (99.9%): [107756.285, 120027.394] (assumes normal distribution)


# Run complete. Total time: 00:01:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score      Error  Units
ObservableBufferTest._Benchmark.benchmark_bufferTimedExactEmpty  thrpt   30  113891.840 ± 6135.554  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReplayTest._Benchmark.benchmark_replaySelectorTime$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReplayTest._Benchmark.benchmark_replaySelectorTime

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 40004.520 ops/s
# Warmup Iteration   2: 211427.100 ops/s
# Warmup Iteration   3: 229936.655 ops/s
# Warmup Iteration   4: 234836.539 ops/s
# Warmup Iteration   5: 243874.981 ops/s
# Warmup Iteration   6: 233654.607 ops/s
# Warmup Iteration   7: 231280.759 ops/s
# Warmup Iteration   8: 234389.458 ops/s
# Warmup Iteration   9: 233534.604 ops/s
# Warmup Iteration  10: 245197.077 ops/s
# Warmup Iteration  11: 224343.490 ops/s
# Warmup Iteration  12: 244046.684 ops/s
# Warmup Iteration  13: 228768.862 ops/s
# Warmup Iteration  14: 244971.320 ops/s
# Warmup Iteration  15: 244402.423 ops/s
# Warmup Iteration  16: 231724.026 ops/s
# Warmup Iteration  17: 242633.566 ops/s
# Warmup Iteration  18: 245224.200 ops/s
# Warmup Iteration  19: 235943.882 ops/s
# Warmup Iteration  20: 237251.316 ops/s
# Warmup Iteration  21: 202956.028 ops/s
# Warmup Iteration  22: 242378.264 ops/s
# Warmup Iteration  23: 245803.499 ops/s
# Warmup Iteration  24: 235039.263 ops/s
# Warmup Iteration  25: 235263.350 ops/s
# Warmup Iteration  26: 241771.869 ops/s
# Warmup Iteration  27: 231840.105 ops/s
# Warmup Iteration  28: 242357.547 ops/s
# Warmup Iteration  29: 233263.395 ops/s
# Warmup Iteration  30: 243408.885 ops/s
Iteration   1: 239505.688 ops/s
Iteration   2: 233090.083 ops/s
Iteration   3: 241785.269 ops/s
Iteration   4: 240211.151 ops/s
Iteration   5: 241678.457 ops/s
Iteration   6: 226806.733 ops/s
Iteration   7: 236337.240 ops/s
Iteration   8: 246103.129 ops/s
Iteration   9: 234241.986 ops/s
Iteration  10: 242006.747 ops/s
Iteration  11: 232322.002 ops/s
Iteration  12: 247416.139 ops/s
Iteration  13: 228946.684 ops/s
Iteration  14: 241098.813 ops/s
Iteration  15: 240589.267 ops/s
Iteration  16: 234053.837 ops/s
Iteration  17: 239200.107 ops/s
Iteration  18: 239116.819 ops/s
Iteration  19: 236913.153 ops/s
Iteration  20: 237684.749 ops/s
Iteration  21: 243559.583 ops/s
Iteration  22: 234257.555 ops/s
Iteration  23: 238282.442 ops/s
Iteration  24: 243429.130 ops/s
Iteration  25: 230773.236 ops/s
Iteration  26: 241384.756 ops/s
Iteration  27: 229667.503 ops/s
Iteration  28: 243281.445 ops/s
Iteration  29: 239536.978 ops/s
Iteration  30: 233493.719 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableReplayTest._Benchmark.benchmark_replaySelectorTime":
  237892.480 ±(99.9%) 3463.907 ops/s [Average]
  (min, avg, max) = (226806.733, 237892.480, 247416.139), stdev = 5184.614
  CI (99.9%): [234428.573, 241356.387] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
ObservableReplayTest._Benchmark.benchmark_replaySelectorTime  thrpt   30  237892.480 ± 3463.907  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReplayEagerTruncateTest._Benchmark.benchmark_replaySelectorTime$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReplayEagerTruncateTest._Benchmark.benchmark_replaySelectorTime

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 67750.411 ops/s
# Warmup Iteration   2: 217683.493 ops/s
# Warmup Iteration   3: 231720.504 ops/s
# Warmup Iteration   4: 229347.853 ops/s
# Warmup Iteration   5: 232906.036 ops/s
# Warmup Iteration   6: 241611.857 ops/s
# Warmup Iteration   7: 234177.576 ops/s
# Warmup Iteration   8: 245294.813 ops/s
# Warmup Iteration   9: 218333.777 ops/s
# Warmup Iteration  10: 229571.814 ops/s
# Warmup Iteration  11: 239880.422 ops/s
# Warmup Iteration  12: 243108.284 ops/s
# Warmup Iteration  13: 233224.234 ops/s
# Warmup Iteration  14: 245344.300 ops/s
# Warmup Iteration  15: 230273.123 ops/s
# Warmup Iteration  16: 238522.713 ops/s
# Warmup Iteration  17: 241336.653 ops/s
# Warmup Iteration  18: 227538.735 ops/s
# Warmup Iteration  19: 198333.418 ops/s
# Warmup Iteration  20: 225449.121 ops/s
# Warmup Iteration  21: 244052.805 ops/s
# Warmup Iteration  22: 233565.956 ops/s
# Warmup Iteration  23: 232688.409 ops/s
# Warmup Iteration  24: 235778.251 ops/s
# Warmup Iteration  25: 230826.953 ops/s
# Warmup Iteration  26: 238906.169 ops/s
# Warmup Iteration  27: 238655.234 ops/s
# Warmup Iteration  28: 241728.282 ops/s
# Warmup Iteration  29: 228029.723 ops/s
# Warmup Iteration  30: 240426.200 ops/s
Iteration   1: 233783.548 ops/s
Iteration   2: 241417.102 ops/s
Iteration   3: 232768.131 ops/s
Iteration   4: 233657.318 ops/s
Iteration   5: 239170.425 ops/s
Iteration   6: 232765.180 ops/s
Iteration   7: 242217.933 ops/s
Iteration   8: 228560.881 ops/s
Iteration   9: 236580.821 ops/s
Iteration  10: 242446.721 ops/s
Iteration  11: 239487.864 ops/s
Iteration  12: 226504.925 ops/s
Iteration  13: 246876.140 ops/s
Iteration  14: 247378.518 ops/s
Iteration  15: 233811.773 ops/s
Iteration  16: 229618.212 ops/s
Iteration  17: 241977.804 ops/s
Iteration  18: 233837.247 ops/s
Iteration  19: 233167.193 ops/s
Iteration  20: 240162.535 ops/s
Iteration  21: 228691.690 ops/s
Iteration  22: 241666.677 ops/s
Iteration  23: 234969.467 ops/s
Iteration  24: 243504.956 ops/s
Iteration  25: 196203.730 ops/s
Iteration  26: 227894.139 ops/s
Iteration  27: 245246.105 ops/s
Iteration  28: 224804.704 ops/s
Iteration  29: 240679.416 ops/s
Iteration  30: 232207.314 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableReplayEagerTruncateTest._Benchmark.benchmark_replaySelectorTime":
  235068.616 ±(99.9%) 6424.396 ops/s [Average]
  (min, avg, max) = (196203.730, 235068.616, 247378.518), stdev = 9615.734
  CI (99.9%): [228644.220, 241493.012] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score      Error  Units
ObservableReplayEagerTruncateTest._Benchmark.benchmark_replaySelectorTime  thrpt   30  235068.616 ± 6424.396  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeBlockingSubscribeTest._Benchmark.benchmark_observerError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeBlockingSubscribeTest._Benchmark.benchmark_observerError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 383283.850 ops/s
# Warmup Iteration   2: 641825.225 ops/s
# Warmup Iteration   3: 779103.145 ops/s
# Warmup Iteration   4: 710982.091 ops/s
# Warmup Iteration   5: 740405.159 ops/s
# Warmup Iteration   6: 775824.516 ops/s
# Warmup Iteration   7: 706653.645 ops/s
# Warmup Iteration   8: 765556.988 ops/s
# Warmup Iteration   9: 727473.635 ops/s
# Warmup Iteration  10: 741211.103 ops/s
# Warmup Iteration  11: 744572.043 ops/s
# Warmup Iteration  12: 714954.249 ops/s
# Warmup Iteration  13: 725323.706 ops/s
# Warmup Iteration  14: 765039.029 ops/s
# Warmup Iteration  15: 697465.471 ops/s
# Warmup Iteration  16: 780591.756 ops/s
# Warmup Iteration  17: 791862.494 ops/s
# Warmup Iteration  18: 792719.345 ops/s
# Warmup Iteration  19: 811316.216 ops/s
# Warmup Iteration  20: 772169.886 ops/s
# Warmup Iteration  21: 763985.964 ops/s
# Warmup Iteration  22: 824451.743 ops/s
# Warmup Iteration  23: 751214.662 ops/s
# Warmup Iteration  24: 775147.544 ops/s
# Warmup Iteration  25: 830928.844 ops/s
# Warmup Iteration  26: 775498.475 ops/s
# Warmup Iteration  27: 794528.078 ops/s
# Warmup Iteration  28: 759728.848 ops/s
# Warmup Iteration  29: 783605.089 ops/s
# Warmup Iteration  30: 807226.966 ops/s
Iteration   1: 779862.922 ops/s
Iteration   2: 794990.241 ops/s
Iteration   3: 777259.085 ops/s
Iteration   4: 795929.969 ops/s
Iteration   5: 774639.463 ops/s
Iteration   6: 799627.059 ops/s
Iteration   7: 763742.073 ops/s
Iteration   8: 775712.423 ops/s
Iteration   9: 774091.948 ops/s
Iteration  10: 795676.005 ops/s
Iteration  11: 777758.570 ops/s
Iteration  12: 786321.842 ops/s
Iteration  13: 797990.152 ops/s
Iteration  14: 765312.936 ops/s
Iteration  15: 780285.969 ops/s
Iteration  16: 799390.133 ops/s
Iteration  17: 778078.550 ops/s
Iteration  18: 817366.132 ops/s
Iteration  19: 780178.759 ops/s
Iteration  20: 787487.216 ops/s
Iteration  21: 803648.059 ops/s
Iteration  22: 771420.860 ops/s
Iteration  23: 805044.699 ops/s
Iteration  24: 777390.947 ops/s
Iteration  25: 777991.290 ops/s
Iteration  26: 786761.354 ops/s
Iteration  27: 774731.927 ops/s
Iteration  28: 806597.463 ops/s
Iteration  29: 782076.967 ops/s
Iteration  30: 792608.690 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeBlockingSubscribeTest._Benchmark.benchmark_observerError":
  785999.123 ±(99.9%) 8786.018 ops/s [Average]
  (min, avg, max) = (763742.073, 785999.123, 817366.132), stdev = 13150.499
  CI (99.9%): [777213.106, 794785.141] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
MaybeBlockingSubscribeTest._Benchmark.benchmark_observerError  thrpt   30  785999.123 ± 8786.018  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlattenTest._Benchmark.benchmark_mainError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlattenTest._Benchmark.benchmark_mainError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 347948.948 ops/s
# Warmup Iteration   2: 609012.870 ops/s
# Warmup Iteration   3: 708849.706 ops/s
# Warmup Iteration   4: 710077.647 ops/s
# Warmup Iteration   5: 719643.085 ops/s
# Warmup Iteration   6: 697878.095 ops/s
# Warmup Iteration   7: 657735.142 ops/s
# Warmup Iteration   8: 748538.696 ops/s
# Warmup Iteration   9: 658596.908 ops/s
# Warmup Iteration  10: 653934.101 ops/s
# Warmup Iteration  11: 715456.822 ops/s
# Warmup Iteration  12: 714499.775 ops/s
# Warmup Iteration  13: 754174.939 ops/s
# Warmup Iteration  14: 700224.236 ops/s
# Warmup Iteration  15: 739513.476 ops/s
# Warmup Iteration  16: 710542.817 ops/s
# Warmup Iteration  17: 774825.878 ops/s
# Warmup Iteration  18: 768126.023 ops/s
# Warmup Iteration  19: 786642.050 ops/s
# Warmup Iteration  20: 750384.073 ops/s
# Warmup Iteration  21: 788356.355 ops/s
# Warmup Iteration  22: 752097.854 ops/s
# Warmup Iteration  23: 790085.363 ops/s
# Warmup Iteration  24: 766957.440 ops/s
# Warmup Iteration  25: 742935.574 ops/s
# Warmup Iteration  26: 782806.877 ops/s
# Warmup Iteration  27: 775719.911 ops/s
# Warmup Iteration  28: 750675.457 ops/s
# Warmup Iteration  29: 795850.039 ops/s
# Warmup Iteration  30: 750377.305 ops/s
Iteration   1: 776564.397 ops/s
Iteration   2: 758182.640 ops/s
Iteration   3: 795815.320 ops/s
Iteration   4: 785623.407 ops/s
Iteration   5: 728850.807 ops/s
Iteration   6: 767856.896 ops/s
Iteration   7: 767874.301 ops/s
Iteration   8: 766649.508 ops/s
Iteration   9: 759359.090 ops/s
Iteration  10: 757890.753 ops/s
Iteration  11: 757820.179 ops/s
Iteration  12: 762806.529 ops/s
Iteration  13: 751653.200 ops/s
Iteration  14: 765825.284 ops/s
Iteration  15: 779771.246 ops/s
Iteration  16: 753895.809 ops/s
Iteration  17: 779716.769 ops/s
Iteration  18: 756004.396 ops/s
Iteration  19: 771429.303 ops/s
Iteration  20: 629613.525 ops/s
Iteration  21: 781180.652 ops/s
Iteration  22: 750942.192 ops/s
Iteration  23: 789055.879 ops/s
Iteration  24: 801878.726 ops/s
Iteration  25: 732338.007 ops/s
Iteration  26: 777792.720 ops/s
Iteration  27: 769867.944 ops/s
Iteration  28: 749607.723 ops/s
Iteration  29: 788685.944 ops/s
Iteration  30: 776910.979 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlattenTest._Benchmark.benchmark_mainError":
  763048.804 ±(99.9%) 20267.268 ops/s [Average]
  (min, avg, max) = (629613.525, 763048.804, 801878.726), stdev = 30335.094
  CI (99.9%): [742781.537, 783316.072] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt       Score       Error  Units
MaybeFlattenTest._Benchmark.benchmark_mainError  thrpt   30  763048.804 ± 20267.268  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorXTest._Benchmark.benchmark_onErrorCompleteTrue$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorXTest._Benchmark.benchmark_onErrorCompleteTrue

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 392267.489 ops/s
# Warmup Iteration   2: 634312.730 ops/s
# Warmup Iteration   3: 663234.751 ops/s
# Warmup Iteration   4: 702473.591 ops/s
# Warmup Iteration   5: 639334.572 ops/s
# Warmup Iteration   6: 710295.800 ops/s
# Warmup Iteration   7: 717319.486 ops/s
# Warmup Iteration   8: 720848.102 ops/s
# Warmup Iteration   9: 749541.335 ops/s
# Warmup Iteration  10: 691130.877 ops/s
# Warmup Iteration  11: 736397.092 ops/s
# Warmup Iteration  12: 710387.582 ops/s
# Warmup Iteration  13: 740651.829 ops/s
# Warmup Iteration  14: 712704.574 ops/s
# Warmup Iteration  15: 736538.011 ops/s
# Warmup Iteration  16: 723031.359 ops/s
# Warmup Iteration  17: 780022.147 ops/s
# Warmup Iteration  18: 785440.843 ops/s
# Warmup Iteration  19: 755700.149 ops/s
# Warmup Iteration  20: 787054.531 ops/s
# Warmup Iteration  21: 765396.225 ops/s
# Warmup Iteration  22: 766161.897 ops/s
# Warmup Iteration  23: 757215.069 ops/s
# Warmup Iteration  24: 749162.077 ops/s
# Warmup Iteration  25: 770570.995 ops/s
# Warmup Iteration  26: 747480.061 ops/s
# Warmup Iteration  27: 797333.530 ops/s
# Warmup Iteration  28: 757977.979 ops/s
# Warmup Iteration  29: 746848.884 ops/s
# Warmup Iteration  30: 810218.527 ops/s
Iteration   1: 750568.130 ops/s
Iteration   2: 774208.438 ops/s
Iteration   3: 748144.205 ops/s
Iteration   4: 770110.825 ops/s
Iteration   5: 757841.225 ops/s
Iteration   6: 783336.008 ops/s
Iteration   7: 756020.269 ops/s
Iteration   8: 760768.872 ops/s
Iteration   9: 784408.552 ops/s
Iteration  10: 745960.586 ops/s
Iteration  11: 800472.988 ops/s
Iteration  12: 757894.766 ops/s
Iteration  13: 768308.769 ops/s
Iteration  14: 776148.465 ops/s
Iteration  15: 766166.166 ops/s
Iteration  16: 748107.705 ops/s
Iteration  17: 786053.971 ops/s
Iteration  18: 763955.478 ops/s
Iteration  19: 798584.283 ops/s
Iteration  20: 741417.358 ops/s
Iteration  21: 778093.382 ops/s
Iteration  22: 772345.373 ops/s
Iteration  23: 786312.231 ops/s
Iteration  24: 764290.616 ops/s
Iteration  25: 786408.862 ops/s
Iteration  26: 787010.399 ops/s
Iteration  27: 742583.431 ops/s
Iteration  28: 770232.015 ops/s
Iteration  29: 772179.517 ops/s
Iteration  30: 781039.524 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorXTest._Benchmark.benchmark_onErrorCompleteTrue":
  769299.080 ±(99.9%) 10812.072 ops/s [Average]
  (min, avg, max) = (741417.358, 769299.080, 800472.988), stdev = 16183.001
  CI (99.9%): [758487.009, 780111.152] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score       Error  Units
MaybeOnErrorXTest._Benchmark.benchmark_onErrorCompleteTrue  thrpt   30  769299.080 ± 10812.072  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapBiSelectorTest._Benchmark.benchmark_errorWithJust$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapBiSelectorTest._Benchmark.benchmark_errorWithJust

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 312707.104 ops/s
# Warmup Iteration   2: 590208.021 ops/s
# Warmup Iteration   3: 646741.097 ops/s
# Warmup Iteration   4: 705158.760 ops/s
# Warmup Iteration   5: 729087.761 ops/s
# Warmup Iteration   6: 727239.791 ops/s
# Warmup Iteration   7: 674440.570 ops/s
# Warmup Iteration   8: 717867.932 ops/s
# Warmup Iteration   9: 692103.471 ops/s
# Warmup Iteration  10: 697217.815 ops/s
# Warmup Iteration  11: 713173.892 ops/s
# Warmup Iteration  12: 650007.886 ops/s
# Warmup Iteration  13: 723921.521 ops/s
# Warmup Iteration  14: 730146.529 ops/s
# Warmup Iteration  15: 697530.878 ops/s
# Warmup Iteration  16: 715540.229 ops/s
# Warmup Iteration  17: 744057.915 ops/s
# Warmup Iteration  18: 774083.227 ops/s
# Warmup Iteration  19: 740693.848 ops/s
# Warmup Iteration  20: 709236.533 ops/s
# Warmup Iteration  21: 750727.206 ops/s
# Warmup Iteration  22: 730523.528 ops/s
# Warmup Iteration  23: 762427.407 ops/s
# Warmup Iteration  24: 721027.126 ops/s
# Warmup Iteration  25: 762289.755 ops/s
# Warmup Iteration  26: 762545.119 ops/s
# Warmup Iteration  27: 738617.415 ops/s
# Warmup Iteration  28: 767842.389 ops/s
# Warmup Iteration  29: 778364.409 ops/s
# Warmup Iteration  30: 721388.609 ops/s
Iteration   1: 780110.954 ops/s
Iteration   2: 748649.481 ops/s
Iteration   3: 723630.831 ops/s
Iteration   4: 789647.815 ops/s
Iteration   5: 734468.978 ops/s
Iteration   6: 777580.461 ops/s
Iteration   7: 736544.638 ops/s
Iteration   8: 763860.917 ops/s
Iteration   9: 754528.657 ops/s
Iteration  10: 723488.367 ops/s
Iteration  11: 756801.022 ops/s
Iteration  12: 741844.227 ops/s
Iteration  13: 785852.530 ops/s
Iteration  14: 662155.497 ops/s
Iteration  15: 704262.699 ops/s
Iteration  16: 723253.853 ops/s
Iteration  17: 739136.126 ops/s
Iteration  18: 749935.760 ops/s
Iteration  19: 723715.699 ops/s
Iteration  20: 771007.152 ops/s
Iteration  21: 732959.999 ops/s
Iteration  22: 751287.071 ops/s
Iteration  23: 772659.935 ops/s
Iteration  24: 716731.750 ops/s
Iteration  25: 760023.933 ops/s
Iteration  26: 754711.674 ops/s
Iteration  27: 764825.513 ops/s
Iteration  28: 745099.107 ops/s
Iteration  29: 721564.503 ops/s
Iteration  30: 755875.414 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapBiSelectorTest._Benchmark.benchmark_errorWithJust":
  745540.485 ±(99.9%) 17966.690 ops/s [Average]
  (min, avg, max) = (662155.497, 745540.485, 789647.815), stdev = 26891.698
  CI (99.9%): [727573.795, 763507.175] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score       Error  Units
MaybeFlatMapBiSelectorTest._Benchmark.benchmark_errorWithJust  thrpt   30  745540.485 ± 17966.690  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorXTest._Benchmark.benchmark_onErrorComplete$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorXTest._Benchmark.benchmark_onErrorComplete

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 310714.812 ops/s
# Warmup Iteration   2: 611393.517 ops/s
# Warmup Iteration   3: 742900.149 ops/s
# Warmup Iteration   4: 719195.964 ops/s
# Warmup Iteration   5: 709469.617 ops/s
# Warmup Iteration   6: 631383.224 ops/s
# Warmup Iteration   7: 727843.693 ops/s
# Warmup Iteration   8: 769095.273 ops/s
# Warmup Iteration   9: 749435.073 ops/s
# Warmup Iteration  10: 704140.651 ops/s
# Warmup Iteration  11: 757346.194 ops/s
# Warmup Iteration  12: 720524.812 ops/s
# Warmup Iteration  13: 729774.087 ops/s
# Warmup Iteration  14: 765376.259 ops/s
# Warmup Iteration  15: 707662.321 ops/s
# Warmup Iteration  16: 754626.493 ops/s
# Warmup Iteration  17: 768556.034 ops/s
# Warmup Iteration  18: 791679.000 ops/s
# Warmup Iteration  19: 800436.262 ops/s
# Warmup Iteration  20: 765343.529 ops/s
# Warmup Iteration  21: 796452.952 ops/s
# Warmup Iteration  22: 754061.149 ops/s
# Warmup Iteration  23: 776075.929 ops/s
# Warmup Iteration  24: 794719.857 ops/s
# Warmup Iteration  25: 781623.328 ops/s
# Warmup Iteration  26: 789118.762 ops/s
# Warmup Iteration  27: 788199.360 ops/s
# Warmup Iteration  28: 775963.481 ops/s
# Warmup Iteration  29: 818620.420 ops/s
# Warmup Iteration  30: 779877.990 ops/s
Iteration   1: 744759.318 ops/s
Iteration   2: 797163.093 ops/s
Iteration   3: 763823.723 ops/s
Iteration   4: 790310.258 ops/s
Iteration   5: 773043.229 ops/s
Iteration   6: 783571.424 ops/s
Iteration   7: 813704.372 ops/s
Iteration   8: 757528.382 ops/s
Iteration   9: 816210.243 ops/s
Iteration  10: 765375.448 ops/s
Iteration  11: 795910.663 ops/s
Iteration  12: 790816.925 ops/s
Iteration  13: 770697.323 ops/s
Iteration  14: 788226.933 ops/s
Iteration  15: 780004.426 ops/s
Iteration  16: 805321.803 ops/s
Iteration  17: 790458.969 ops/s
Iteration  18: 766932.278 ops/s
Iteration  19: 811675.118 ops/s
Iteration  20: 753294.758 ops/s
Iteration  21: 801327.417 ops/s
Iteration  22: 759059.278 ops/s
Iteration  23: 806861.070 ops/s
Iteration  24: 774342.569 ops/s
Iteration  25: 782799.839 ops/s
Iteration  26: 784850.576 ops/s
Iteration  27: 830639.418 ops/s
Iteration  28: 799885.708 ops/s
Iteration  29: 768483.337 ops/s
Iteration  30: 798149.413 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorXTest._Benchmark.benchmark_onErrorComplete":
  785507.577 ±(99.9%) 13862.013 ops/s [Average]
  (min, avg, max) = (744759.318, 785507.577, 830639.418), stdev = 20748.010
  CI (99.9%): [771645.564, 799369.590] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score       Error  Units
MaybeOnErrorXTest._Benchmark.benchmark_onErrorComplete  thrpt   30  785507.577 ± 13862.013  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatMapTest._Benchmark.benchmark_mainError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatMapTest._Benchmark.benchmark_mainError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 381888.095 ops/s
# Warmup Iteration   2: 589643.847 ops/s
# Warmup Iteration   3: 668089.595 ops/s
# Warmup Iteration   4: 702187.692 ops/s
# Warmup Iteration   5: 625344.888 ops/s
# Warmup Iteration   6: 713765.141 ops/s
# Warmup Iteration   7: 704770.125 ops/s
# Warmup Iteration   8: 728286.793 ops/s
# Warmup Iteration   9: 732871.836 ops/s
# Warmup Iteration  10: 715892.491 ops/s
# Warmup Iteration  11: 733270.085 ops/s
# Warmup Iteration  12: 709419.230 ops/s
# Warmup Iteration  13: 746296.566 ops/s
# Warmup Iteration  14: 712095.311 ops/s
# Warmup Iteration  15: 727191.988 ops/s
# Warmup Iteration  16: 725931.936 ops/s
# Warmup Iteration  17: 730532.800 ops/s
# Warmup Iteration  18: 806452.056 ops/s
# Warmup Iteration  19: 754886.785 ops/s
# Warmup Iteration  20: 785470.114 ops/s
# Warmup Iteration  21: 785664.877 ops/s
# Warmup Iteration  22: 766867.503 ops/s
# Warmup Iteration  23: 732722.935 ops/s
# Warmup Iteration  24: 773025.981 ops/s
# Warmup Iteration  25: 741547.241 ops/s
# Warmup Iteration  26: 782150.845 ops/s
# Warmup Iteration  27: 766309.228 ops/s
# Warmup Iteration  28: 731298.896 ops/s
# Warmup Iteration  29: 755669.150 ops/s
# Warmup Iteration  30: 770963.902 ops/s
Iteration   1: 767335.611 ops/s
Iteration   2: 750755.488 ops/s
Iteration   3: 781827.530 ops/s
Iteration   4: 753380.072 ops/s
Iteration   5: 754156.722 ops/s
Iteration   6: 770556.239 ops/s
Iteration   7: 759120.271 ops/s
Iteration   8: 774442.303 ops/s
Iteration   9: 674224.389 ops/s
Iteration  10: 686308.370 ops/s
Iteration  11: 777381.918 ops/s
Iteration  12: 746328.231 ops/s
Iteration  13: 769519.342 ops/s
Iteration  14: 782997.423 ops/s
Iteration  15: 745748.860 ops/s
Iteration  16: 756356.126 ops/s
Iteration  17: 756760.703 ops/s
Iteration  18: 753119.787 ops/s
Iteration  19: 771993.810 ops/s
Iteration  20: 752833.352 ops/s
Iteration  21: 775389.774 ops/s
Iteration  22: 755214.503 ops/s
Iteration  23: 773493.784 ops/s
Iteration  24: 797612.801 ops/s
Iteration  25: 759405.394 ops/s
Iteration  26: 764870.489 ops/s
Iteration  27: 752651.898 ops/s
Iteration  28: 775777.573 ops/s
Iteration  29: 756872.925 ops/s
Iteration  30: 761800.906 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatMapTest._Benchmark.benchmark_mainError":
  758607.886 ±(99.9%) 16421.120 ops/s [Average]
  (min, avg, max) = (674224.389, 758607.886, 797612.801), stdev = 24578.361
  CI (99.9%): [742186.767, 775029.006] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt       Score       Error  Units
MaybeConcatMapTest._Benchmark.benchmark_mainError  thrpt   30  758607.886 ± 16421.120  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeZipIterableTest._Benchmark.benchmark_nextThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeZipIterableTest._Benchmark.benchmark_nextThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 154259.335 ops/s
# Warmup Iteration   2: 504832.091 ops/s
# Warmup Iteration   3: 553057.688 ops/s
# Warmup Iteration   4: 550347.974 ops/s
# Warmup Iteration   5: 536583.376 ops/s
# Warmup Iteration   6: 585420.017 ops/s
# Warmup Iteration   7: 569519.077 ops/s
# Warmup Iteration   8: 612369.409 ops/s
# Warmup Iteration   9: 608201.240 ops/s
# Warmup Iteration  10: 598144.451 ops/s
# Warmup Iteration  11: 571632.183 ops/s
# Warmup Iteration  12: 605199.952 ops/s
# Warmup Iteration  13: 587117.503 ops/s
# Warmup Iteration  14: 595211.846 ops/s
# Warmup Iteration  15: 598351.598 ops/s
# Warmup Iteration  16: 590863.466 ops/s
# Warmup Iteration  17: 637838.592 ops/s
# Warmup Iteration  18: 632523.308 ops/s
# Warmup Iteration  19: 614884.931 ops/s
# Warmup Iteration  20: 638353.068 ops/s
# Warmup Iteration  21: 610680.152 ops/s
# Warmup Iteration  22: 620865.646 ops/s
# Warmup Iteration  23: 626608.747 ops/s
# Warmup Iteration  24: 601659.163 ops/s
# Warmup Iteration  25: 627731.979 ops/s
# Warmup Iteration  26: 621244.131 ops/s
# Warmup Iteration  27: 612199.454 ops/s
# Warmup Iteration  28: 646075.942 ops/s
# Warmup Iteration  29: 616432.285 ops/s
# Warmup Iteration  30: 631048.655 ops/s
Iteration   1: 649365.029 ops/s
Iteration   2: 596594.557 ops/s
Iteration   3: 617293.759 ops/s
Iteration   4: 607375.854 ops/s
Iteration   5: 624576.589 ops/s
Iteration   6: 634106.991 ops/s
Iteration   7: 601777.279 ops/s
Iteration   8: 613364.425 ops/s
Iteration   9: 636814.169 ops/s
Iteration  10: 620546.651 ops/s
Iteration  11: 634213.075 ops/s
Iteration  12: 611709.889 ops/s
Iteration  13: 606654.136 ops/s
Iteration  14: 644983.336 ops/s
Iteration  15: 602520.551 ops/s
Iteration  16: 624383.074 ops/s
Iteration  17: 615059.095 ops/s
Iteration  18: 618941.169 ops/s
Iteration  19: 631813.349 ops/s
Iteration  20: 612467.180 ops/s
Iteration  21: 621516.000 ops/s
Iteration  22: 605982.804 ops/s
Iteration  23: 622341.210 ops/s
Iteration  24: 639553.416 ops/s
Iteration  25: 600058.012 ops/s
Iteration  26: 635583.207 ops/s
Iteration  27: 587159.826 ops/s
Iteration  28: 624911.265 ops/s
Iteration  29: 603121.127 ops/s
Iteration  30: 607317.673 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeZipIterableTest._Benchmark.benchmark_nextThrows":
  618403.490 ±(99.9%) 10211.466 ops/s [Average]
  (min, avg, max) = (587159.826, 618403.490, 649365.029), stdev = 15284.042
  CI (99.9%): [608192.024, 628614.955] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score       Error  Units
MaybeZipIterableTest._Benchmark.benchmark_nextThrows  thrpt   30  618403.490 ± 10211.466  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeZipIterableTest._Benchmark.benchmark_hasNextThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeZipIterableTest._Benchmark.benchmark_hasNextThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 182309.246 ops/s
# Warmup Iteration   2: 393843.028 ops/s
# Warmup Iteration   3: 508194.519 ops/s
# Warmup Iteration   4: 465423.124 ops/s
# Warmup Iteration   5: 479684.826 ops/s
# Warmup Iteration   6: 481345.346 ops/s
# Warmup Iteration   7: 450358.829 ops/s
# Warmup Iteration   8: 503200.549 ops/s
# Warmup Iteration   9: 490389.530 ops/s
# Warmup Iteration  10: 501443.376 ops/s
# Warmup Iteration  11: 508009.590 ops/s
# Warmup Iteration  12: 490719.239 ops/s
# Warmup Iteration  13: 509648.635 ops/s
# Warmup Iteration  14: 484293.387 ops/s
# Warmup Iteration  15: 497452.247 ops/s
# Warmup Iteration  16: 526217.677 ops/s
# Warmup Iteration  17: 491767.804 ops/s
# Warmup Iteration  18: 529381.317 ops/s
# Warmup Iteration  19: 513736.189 ops/s
# Warmup Iteration  20: 520372.734 ops/s
# Warmup Iteration  21: 527101.410 ops/s
# Warmup Iteration  22: 512019.506 ops/s
# Warmup Iteration  23: 527806.568 ops/s
# Warmup Iteration  24: 527242.969 ops/s
# Warmup Iteration  25: 520315.331 ops/s
# Warmup Iteration  26: 500312.249 ops/s
# Warmup Iteration  27: 521146.118 ops/s
# Warmup Iteration  28: 528727.114 ops/s
# Warmup Iteration  29: 535422.932 ops/s
# Warmup Iteration  30: 514174.073 ops/s
Iteration   1: 539496.512 ops/s
Iteration   2: 508397.657 ops/s
Iteration   3: 511597.952 ops/s
Iteration   4: 408339.625 ops/s
Iteration   5: 472853.429 ops/s
Iteration   6: 515973.492 ops/s
Iteration   7: 521090.590 ops/s
Iteration   8: 515907.646 ops/s
Iteration   9: 526513.963 ops/s
Iteration  10: 514099.692 ops/s
Iteration  11: 522318.873 ops/s
Iteration  12: 537591.373 ops/s
Iteration  13: 508640.948 ops/s
Iteration  14: 531041.207 ops/s
Iteration  15: 532433.184 ops/s
Iteration  16: 505786.241 ops/s
Iteration  17: 527781.273 ops/s
Iteration  18: 510945.965 ops/s
Iteration  19: 536412.477 ops/s
Iteration  20: 520588.004 ops/s
Iteration  21: 504066.755 ops/s
Iteration  22: 530021.975 ops/s
Iteration  23: 507065.416 ops/s
Iteration  24: 532781.413 ops/s
Iteration  25: 514205.183 ops/s
Iteration  26: 515860.376 ops/s
Iteration  27: 529459.235 ops/s
Iteration  28: 506719.734 ops/s
Iteration  29: 503082.689 ops/s
Iteration  30: 545895.764 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeZipIterableTest._Benchmark.benchmark_hasNextThrows":
  515232.288 ±(99.9%) 16644.465 ops/s [Average]
  (min, avg, max) = (408339.625, 515232.288, 545895.764), stdev = 24912.654
  CI (99.9%): [498587.823, 531876.753] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score       Error  Units
MaybeZipIterableTest._Benchmark.benchmark_hasNextThrows  thrpt   30  515232.288 ± 16644.465  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeUsingTest._Benchmark.benchmark_supplierCrashNonEager$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeUsingTest._Benchmark.benchmark_supplierCrashNonEager

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 293714.241 ops/s
# Warmup Iteration   2: 553382.158 ops/s
# Warmup Iteration   3: 664392.991 ops/s
# Warmup Iteration   4: 657342.294 ops/s
# Warmup Iteration   5: 672640.543 ops/s
# Warmup Iteration   6: 634250.511 ops/s
# Warmup Iteration   7: 653460.667 ops/s
# Warmup Iteration   8: 671963.543 ops/s
# Warmup Iteration   9: 642519.410 ops/s
# Warmup Iteration  10: 613233.431 ops/s
# Warmup Iteration  11: 646393.265 ops/s
# Warmup Iteration  12: 666822.613 ops/s
# Warmup Iteration  13: 626542.476 ops/s
# Warmup Iteration  14: 646730.721 ops/s
# Warmup Iteration  15: 663932.482 ops/s
# Warmup Iteration  16: 660167.947 ops/s
# Warmup Iteration  17: 680393.539 ops/s
# Warmup Iteration  18: 683937.172 ops/s
# Warmup Iteration  19: 699338.850 ops/s
# Warmup Iteration  20: 669293.339 ops/s
# Warmup Iteration  21: 698491.664 ops/s
# Warmup Iteration  22: 708163.121 ops/s
# Warmup Iteration  23: 687940.492 ops/s
# Warmup Iteration  24: 704990.094 ops/s
# Warmup Iteration  25: 695471.799 ops/s
# Warmup Iteration  26: 692532.821 ops/s
# Warmup Iteration  27: 681963.022 ops/s
# Warmup Iteration  28: 697508.953 ops/s
# Warmup Iteration  29: 666010.073 ops/s
# Warmup Iteration  30: 681223.809 ops/s
Iteration   1: 701898.126 ops/s
Iteration   2: 700265.812 ops/s
Iteration   3: 664369.300 ops/s
Iteration   4: 693256.881 ops/s
Iteration   5: 659074.844 ops/s
Iteration   6: 695999.407 ops/s
Iteration   7: 696843.444 ops/s
Iteration   8: 706498.079 ops/s
Iteration   9: 690476.018 ops/s
Iteration  10: 695442.596 ops/s
Iteration  11: 713532.386 ops/s
Iteration  12: 679976.846 ops/s
Iteration  13: 712748.125 ops/s
Iteration  14: 721691.480 ops/s
Iteration  15: 694205.681 ops/s
Iteration  16: 677051.218 ops/s
Iteration  17: 695464.558 ops/s
Iteration  18: 694707.926 ops/s
Iteration  19: 698592.679 ops/s
Iteration  20: 690240.590 ops/s
Iteration  21: 692399.021 ops/s
Iteration  22: 690494.286 ops/s
Iteration  23: 686623.417 ops/s
Iteration  24: 714216.429 ops/s
Iteration  25: 674046.091 ops/s
Iteration  26: 678544.074 ops/s
Iteration  27: 700407.847 ops/s
Iteration  28: 653721.580 ops/s
Iteration  29: 697385.881 ops/s
Iteration  30: 692094.115 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsingTest._Benchmark.benchmark_supplierCrashNonEager":
  692075.625 ±(99.9%) 10444.217 ops/s [Average]
  (min, avg, max) = (653721.580, 692075.625, 721691.480), stdev = 15632.413
  CI (99.9%): [681631.408, 702519.841] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score       Error  Units
MaybeUsingTest._Benchmark.benchmark_supplierCrashNonEager  thrpt   30  692075.625 ± 10444.217  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeUsingTest._Benchmark.benchmark_supplierCrashEager$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeUsingTest._Benchmark.benchmark_supplierCrashEager

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 140265.990 ops/s
# Warmup Iteration   2: 599606.919 ops/s
# Warmup Iteration   3: 645458.711 ops/s
# Warmup Iteration   4: 653101.134 ops/s
# Warmup Iteration   5: 673113.766 ops/s
# Warmup Iteration   6: 618027.599 ops/s
# Warmup Iteration   7: 659478.168 ops/s
# Warmup Iteration   8: 633327.860 ops/s
# Warmup Iteration   9: 676674.268 ops/s
# Warmup Iteration  10: 667860.608 ops/s
# Warmup Iteration  11: 648168.231 ops/s
# Warmup Iteration  12: 659317.628 ops/s
# Warmup Iteration  13: 666342.047 ops/s
# Warmup Iteration  14: 658767.357 ops/s
# Warmup Iteration  15: 663113.828 ops/s
# Warmup Iteration  16: 660325.323 ops/s
# Warmup Iteration  17: 686843.942 ops/s
# Warmup Iteration  18: 699936.074 ops/s
# Warmup Iteration  19: 707385.661 ops/s
# Warmup Iteration  20: 709628.419 ops/s
# Warmup Iteration  21: 724379.238 ops/s
# Warmup Iteration  22: 679823.049 ops/s
# Warmup Iteration  23: 686275.417 ops/s
# Warmup Iteration  24: 705818.172 ops/s
# Warmup Iteration  25: 678697.612 ops/s
# Warmup Iteration  26: 678463.459 ops/s
# Warmup Iteration  27: 730408.252 ops/s
# Warmup Iteration  28: 584921.702 ops/s
# Warmup Iteration  29: 651208.347 ops/s
# Warmup Iteration  30: 695343.083 ops/s
Iteration   1: 697814.140 ops/s
Iteration   2: 695855.378 ops/s
Iteration   3: 706906.904 ops/s
Iteration   4: 727806.724 ops/s
Iteration   5: 688053.548 ops/s
Iteration   6: 695680.964 ops/s
Iteration   7: 723256.093 ops/s
Iteration   8: 687849.949 ops/s
Iteration   9: 724558.299 ops/s
Iteration  10: 690314.931 ops/s
Iteration  11: 709525.702 ops/s
Iteration  12: 736997.516 ops/s
Iteration  13: 686303.056 ops/s
Iteration  14: 719570.892 ops/s
Iteration  15: 697126.914 ops/s
Iteration  16: 704777.649 ops/s
Iteration  17: 686090.840 ops/s
Iteration  18: 725192.489 ops/s
Iteration  19: 688643.590 ops/s
Iteration  20: 722061.362 ops/s
Iteration  21: 683970.510 ops/s
Iteration  22: 696215.169 ops/s
Iteration  23: 720242.255 ops/s
Iteration  24: 632564.323 ops/s
Iteration  25: 713428.274 ops/s
Iteration  26: 707149.386 ops/s
Iteration  27: 724195.578 ops/s
Iteration  28: 678175.827 ops/s
Iteration  29: 719217.419 ops/s
Iteration  30: 715764.721 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsingTest._Benchmark.benchmark_supplierCrashEager":
  703510.347 ±(99.9%) 13961.960 ops/s [Average]
  (min, avg, max) = (632564.323, 703510.347, 736997.516), stdev = 20897.606
  CI (99.9%): [689548.387, 717472.307] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score       Error  Units
MaybeUsingTest._Benchmark.benchmark_supplierCrashEager  thrpt   30  703510.347 ± 13961.960  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDoAfterTerminateTest._Benchmark.benchmark_errorConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDoAfterTerminateTest._Benchmark.benchmark_errorConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 223322.845 ops/s
# Warmup Iteration   2: 592336.443 ops/s
# Warmup Iteration   3: 697919.936 ops/s
# Warmup Iteration   4: 684635.252 ops/s
# Warmup Iteration   5: 676133.075 ops/s
# Warmup Iteration   6: 653350.139 ops/s
# Warmup Iteration   7: 694862.532 ops/s
# Warmup Iteration   8: 637274.006 ops/s
# Warmup Iteration   9: 728602.695 ops/s
# Warmup Iteration  10: 683275.239 ops/s
# Warmup Iteration  11: 702208.480 ops/s
# Warmup Iteration  12: 724917.602 ops/s
# Warmup Iteration  13: 677277.896 ops/s
# Warmup Iteration  14: 702020.619 ops/s
# Warmup Iteration  15: 700314.001 ops/s
# Warmup Iteration  16: 695928.455 ops/s
# Warmup Iteration  17: 761443.956 ops/s
# Warmup Iteration  18: 741373.183 ops/s
# Warmup Iteration  19: 743982.473 ops/s
# Warmup Iteration  20: 741309.972 ops/s
# Warmup Iteration  21: 717698.206 ops/s
# Warmup Iteration  22: 755012.188 ops/s
# Warmup Iteration  23: 728918.355 ops/s
# Warmup Iteration  24: 742816.284 ops/s
# Warmup Iteration  25: 729599.081 ops/s
# Warmup Iteration  26: 734941.539 ops/s
# Warmup Iteration  27: 733581.682 ops/s
# Warmup Iteration  28: 733314.485 ops/s
# Warmup Iteration  29: 725898.823 ops/s
# Warmup Iteration  30: 762367.143 ops/s
Iteration   1: 715599.177 ops/s
Iteration   2: 732232.080 ops/s
Iteration   3: 764645.844 ops/s
Iteration   4: 722198.080 ops/s
Iteration   5: 754838.110 ops/s
Iteration   6: 769992.333 ops/s
Iteration   7: 718878.580 ops/s
Iteration   8: 757071.382 ops/s
Iteration   9: 740570.148 ops/s
Iteration  10: 750135.402 ops/s
Iteration  11: 759525.540 ops/s
Iteration  12: 717405.029 ops/s
Iteration  13: 769532.965 ops/s
Iteration  14: 718781.948 ops/s
Iteration  15: 753530.613 ops/s
Iteration  16: 740241.601 ops/s
Iteration  17: 730485.510 ops/s
Iteration  18: 729040.430 ops/s
Iteration  19: 758236.017 ops/s
Iteration  20: 733142.237 ops/s
Iteration  21: 745014.009 ops/s
Iteration  22: 725263.142 ops/s
Iteration  23: 743034.474 ops/s
Iteration  24: 729214.660 ops/s
Iteration  25: 751849.424 ops/s
Iteration  26: 750539.262 ops/s
Iteration  27: 721320.864 ops/s
Iteration  28: 768855.499 ops/s
Iteration  29: 713182.079 ops/s
Iteration  30: 763381.380 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleDoAfterTerminateTest._Benchmark.benchmark_errorConditional":
  741591.261 ±(99.9%) 12104.312 ops/s [Average]
  (min, avg, max) = (713182.079, 741591.261, 769992.333), stdev = 18117.165
  CI (99.9%): [729486.949, 753695.572] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score       Error  Units
SingleDoAfterTerminateTest._Benchmark.benchmark_errorConditional  thrpt   30  741591.261 ± 12104.312  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnTerminateTest._Benchmark.benchmark_doOnTerminateErrorCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnTerminateTest._Benchmark.benchmark_doOnTerminateErrorCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 50441.557 ops/s
# Warmup Iteration   2: 180065.433 ops/s
# Warmup Iteration   3: 179212.044 ops/s
# Warmup Iteration   4: 206772.673 ops/s
# Warmup Iteration   5: 204164.118 ops/s
# Warmup Iteration   6: 197025.374 ops/s
# Warmup Iteration   7: 201336.576 ops/s
# Warmup Iteration   8: 207826.747 ops/s
# Warmup Iteration   9: 204175.146 ops/s
# Warmup Iteration  10: 198773.916 ops/s
# Warmup Iteration  11: 192468.687 ops/s
# Warmup Iteration  12: 201049.740 ops/s
# Warmup Iteration  13: 195607.137 ops/s
# Warmup Iteration  14: 209521.926 ops/s
# Warmup Iteration  15: 194753.920 ops/s
# Warmup Iteration  16: 196171.512 ops/s
# Warmup Iteration  17: 203416.984 ops/s
# Warmup Iteration  18: 206673.713 ops/s
# Warmup Iteration  19: 220701.399 ops/s
# Warmup Iteration  20: 206988.197 ops/s
# Warmup Iteration  21: 212530.149 ops/s
# Warmup Iteration  22: 215889.425 ops/s
# Warmup Iteration  23: 166926.121 ops/s
# Warmup Iteration  24: 211078.158 ops/s
# Warmup Iteration  25: 207327.779 ops/s
# Warmup Iteration  26: 210267.135 ops/s
# Warmup Iteration  27: 213989.749 ops/s
# Warmup Iteration  28: 204427.179 ops/s
# Warmup Iteration  29: 209494.082 ops/s
# Warmup Iteration  30: 208090.427 ops/s
Iteration   1: 206216.580 ops/s
Iteration   2: 207115.033 ops/s
Iteration   3: 208448.656 ops/s
Iteration   4: 214204.506 ops/s
Iteration   5: 214439.399 ops/s
Iteration   6: 209809.342 ops/s
Iteration   7: 214147.547 ops/s
Iteration   8: 208184.380 ops/s
Iteration   9: 214503.425 ops/s
Iteration  10: 210697.276 ops/s
Iteration  11: 212989.764 ops/s
Iteration  12: 210097.927 ops/s
Iteration  13: 203510.394 ops/s
Iteration  14: 209487.184 ops/s
Iteration  15: 221003.698 ops/s
Iteration  16: 215297.219 ops/s
Iteration  17: 206882.644 ops/s
Iteration  18: 217022.534 ops/s
Iteration  19: 203119.741 ops/s
Iteration  20: 213365.678 ops/s
Iteration  21: 215217.796 ops/s
Iteration  22: 203507.034 ops/s
Iteration  23: 215405.964 ops/s
Iteration  24: 213372.857 ops/s
Iteration  25: 211597.090 ops/s
Iteration  26: 212216.197 ops/s
Iteration  27: 213097.161 ops/s
Iteration  28: 213931.463 ops/s
Iteration  29: 203524.407 ops/s
Iteration  30: 216128.798 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnTerminateTest._Benchmark.benchmark_doOnTerminateErrorCrash":
  211284.723 ±(99.9%) 3024.693 ops/s [Average]
  (min, avg, max) = (203119.741, 211284.723, 221003.698), stdev = 4527.219
  CI (99.9%): [208260.030, 214309.416] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score      Error  Units
MaybeDoOnTerminateTest._Benchmark.benchmark_doOnTerminateErrorCrash  thrpt   30  211284.723 ± 3024.693  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeCacheTest._Benchmark.benchmark_offlineError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeCacheTest._Benchmark.benchmark_offlineError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 256049.299 ops/s
# Warmup Iteration   2: 573840.575 ops/s
# Warmup Iteration   3: 626354.687 ops/s
# Warmup Iteration   4: 649551.283 ops/s
# Warmup Iteration   5: 647576.219 ops/s
# Warmup Iteration   6: 624019.392 ops/s
# Warmup Iteration   7: 585299.874 ops/s
# Warmup Iteration   8: 666745.857 ops/s
# Warmup Iteration   9: 634869.079 ops/s
# Warmup Iteration  10: 631688.301 ops/s
# Warmup Iteration  11: 661075.076 ops/s
# Warmup Iteration  12: 660564.732 ops/s
# Warmup Iteration  13: 624820.064 ops/s
# Warmup Iteration  14: 645605.550 ops/s
# Warmup Iteration  15: 639015.617 ops/s
# Warmup Iteration  16: 638344.829 ops/s
# Warmup Iteration  17: 671256.217 ops/s
# Warmup Iteration  18: 662988.803 ops/s
# Warmup Iteration  19: 656082.418 ops/s
# Warmup Iteration  20: 646808.587 ops/s
# Warmup Iteration  21: 676149.528 ops/s
# Warmup Iteration  22: 676166.259 ops/s
# Warmup Iteration  23: 673604.692 ops/s
# Warmup Iteration  24: 696436.429 ops/s
# Warmup Iteration  25: 666357.080 ops/s
# Warmup Iteration  26: 660055.926 ops/s
# Warmup Iteration  27: 690383.439 ops/s
# Warmup Iteration  28: 678196.311 ops/s
# Warmup Iteration  29: 687704.803 ops/s
# Warmup Iteration  30: 675258.173 ops/s
Iteration   1: 676767.004 ops/s
Iteration   2: 702138.469 ops/s
Iteration   3: 665579.313 ops/s
Iteration   4: 685932.383 ops/s
Iteration   5: 689607.546 ops/s
Iteration   6: 678715.749 ops/s
Iteration   7: 692848.831 ops/s
Iteration   8: 682925.685 ops/s
Iteration   9: 652687.976 ops/s
Iteration  10: 701976.070 ops/s
Iteration  11: 709045.195 ops/s
Iteration  12: 655115.274 ops/s
Iteration  13: 695011.015 ops/s
Iteration  14: 675463.810 ops/s
Iteration  15: 668995.271 ops/s
Iteration  16: 703963.682 ops/s
Iteration  17: 655787.951 ops/s
Iteration  18: 683819.798 ops/s
Iteration  19: 696450.873 ops/s
Iteration  20: 658193.208 ops/s
Iteration  21: 695274.127 ops/s
Iteration  22: 662339.378 ops/s
Iteration  23: 681642.130 ops/s
Iteration  24: 667631.854 ops/s
Iteration  25: 675754.667 ops/s
Iteration  26: 684592.720 ops/s
Iteration  27: 669295.752 ops/s
Iteration  28: 662028.950 ops/s
Iteration  29: 673654.939 ops/s
Iteration  30: 681558.166 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeCacheTest._Benchmark.benchmark_offlineError":
  679493.259 ±(99.9%) 10530.111 ops/s [Average]
  (min, avg, max) = (652687.976, 679493.259, 709045.195), stdev = 15760.976
  CI (99.9%): [668963.149, 690023.370] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt       Score       Error  Units
MaybeCacheTest._Benchmark.benchmark_offlineError  thrpt   30  679493.259 ± 10530.111  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeUsingTest._Benchmark.benchmark_supplierAndDisposerCrashEager$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeUsingTest._Benchmark.benchmark_supplierAndDisposerCrashEager

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 35567.478 ops/s
# Warmup Iteration   2: 173475.258 ops/s
# Warmup Iteration   3: 185555.119 ops/s
# Warmup Iteration   4: 202500.334 ops/s
# Warmup Iteration   5: 190693.700 ops/s
# Warmup Iteration   6: 196292.942 ops/s
# Warmup Iteration   7: 200886.632 ops/s
# Warmup Iteration   8: 188647.055 ops/s
# Warmup Iteration   9: 202539.032 ops/s
# Warmup Iteration  10: 195037.236 ops/s
# Warmup Iteration  11: 192733.918 ops/s
# Warmup Iteration  12: 206595.945 ops/s
# Warmup Iteration  13: 190023.830 ops/s
# Warmup Iteration  14: 197018.864 ops/s
# Warmup Iteration  15: 195865.352 ops/s
# Warmup Iteration  16: 204419.653 ops/s
# Warmup Iteration  17: 213470.608 ops/s
# Warmup Iteration  18: 158303.334 ops/s
# Warmup Iteration  19: 207051.907 ops/s
# Warmup Iteration  20: 217799.340 ops/s
# Warmup Iteration  21: 206730.670 ops/s
# Warmup Iteration  22: 208941.483 ops/s
# Warmup Iteration  23: 209391.500 ops/s
# Warmup Iteration  24: 207422.860 ops/s
# Warmup Iteration  25: 205942.552 ops/s
# Warmup Iteration  26: 215430.635 ops/s
# Warmup Iteration  27: 210275.076 ops/s
# Warmup Iteration  28: 206582.712 ops/s
# Warmup Iteration  29: 210609.302 ops/s
# Warmup Iteration  30: 214285.923 ops/s
Iteration   1: 202447.812 ops/s
Iteration   2: 209292.969 ops/s
Iteration   3: 210692.402 ops/s
Iteration   4: 208499.189 ops/s
Iteration   5: 219863.322 ops/s
Iteration   6: 211852.476 ops/s
Iteration   7: 205164.205 ops/s
Iteration   8: 216362.340 ops/s
Iteration   9: 204315.507 ops/s
Iteration  10: 213418.603 ops/s
Iteration  11: 210951.249 ops/s
Iteration  12: 205358.187 ops/s
Iteration  13: 211031.753 ops/s
Iteration  14: 199318.980 ops/s
Iteration  15: 201319.726 ops/s
Iteration  16: 210943.236 ops/s
Iteration  17: 204821.971 ops/s
Iteration  18: 211176.321 ops/s
Iteration  19: 200901.380 ops/s
Iteration  20: 210310.166 ops/s
Iteration  21: 209389.423 ops/s
Iteration  22: 207357.340 ops/s
Iteration  23: 205949.504 ops/s
Iteration  24: 205096.090 ops/s
Iteration  25: 216367.692 ops/s
Iteration  26: 201951.340 ops/s
Iteration  27: 219824.261 ops/s
Iteration  28: 205059.960 ops/s
Iteration  29: 205999.909 ops/s
Iteration  30: 211690.566 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsingTest._Benchmark.benchmark_supplierAndDisposerCrashEager":
  208557.596 ±(99.9%) 3561.921 ops/s [Average]
  (min, avg, max) = (199318.980, 208557.596, 219863.322), stdev = 5331.316
  CI (99.9%): [204995.675, 212119.517] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score      Error  Units
MaybeUsingTest._Benchmark.benchmark_supplierAndDisposerCrashEager  thrpt   30  208557.596 ± 3561.921  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilTest._Benchmark.benchmark_untilMaybeMainError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilTest._Benchmark.benchmark_untilMaybeMainError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 246397.132 ops/s
# Warmup Iteration   2: 495891.023 ops/s
# Warmup Iteration   3: 575823.221 ops/s
# Warmup Iteration   4: 649831.372 ops/s
# Warmup Iteration   5: 527560.860 ops/s
# Warmup Iteration   6: 643073.933 ops/s
# Warmup Iteration   7: 631415.411 ops/s
# Warmup Iteration   8: 632839.087 ops/s
# Warmup Iteration   9: 675599.378 ops/s
# Warmup Iteration  10: 616254.390 ops/s
# Warmup Iteration  11: 634930.572 ops/s
# Warmup Iteration  12: 645182.595 ops/s
# Warmup Iteration  13: 642448.705 ops/s
# Warmup Iteration  14: 657042.436 ops/s
# Warmup Iteration  15: 632295.296 ops/s
# Warmup Iteration  16: 650217.570 ops/s
# Warmup Iteration  17: 649446.090 ops/s
# Warmup Iteration  18: 675735.008 ops/s
# Warmup Iteration  19: 679744.860 ops/s
# Warmup Iteration  20: 661907.110 ops/s
# Warmup Iteration  21: 679666.395 ops/s
# Warmup Iteration  22: 684983.941 ops/s
# Warmup Iteration  23: 674210.870 ops/s
# Warmup Iteration  24: 656418.746 ops/s
# Warmup Iteration  25: 709107.175 ops/s
# Warmup Iteration  26: 646981.606 ops/s
# Warmup Iteration  27: 690891.927 ops/s
# Warmup Iteration  28: 667359.857 ops/s
# Warmup Iteration  29: 674887.698 ops/s
# Warmup Iteration  30: 672740.450 ops/s
Iteration   1: 666797.169 ops/s
Iteration   2: 697539.257 ops/s
Iteration   3: 704180.853 ops/s
Iteration   4: 674491.540 ops/s
Iteration   5: 682160.281 ops/s
Iteration   6: 652023.579 ops/s
Iteration   7: 696021.358 ops/s
Iteration   8: 663901.676 ops/s
Iteration   9: 657974.031 ops/s
Iteration  10: 694290.501 ops/s
Iteration  11: 647455.258 ops/s
Iteration  12: 663132.635 ops/s
Iteration  13: 655018.299 ops/s
Iteration  14: 672786.941 ops/s
Iteration  15: 671489.553 ops/s
Iteration  16: 648430.716 ops/s
Iteration  17: 674895.963 ops/s
Iteration  18: 661311.611 ops/s
Iteration  19: 693460.064 ops/s
Iteration  20: 672106.281 ops/s
Iteration  21: 671324.652 ops/s
Iteration  22: 694276.264 ops/s
Iteration  23: 640328.503 ops/s
Iteration  24: 697151.860 ops/s
Iteration  25: 647455.279 ops/s
Iteration  26: 689493.682 ops/s
Iteration  27: 658140.655 ops/s
Iteration  28: 667589.831 ops/s
Iteration  29: 694329.400 ops/s
Iteration  30: 670230.547 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilTest._Benchmark.benchmark_untilMaybeMainError":
  672659.608 ±(99.9%) 12034.808 ops/s [Average]
  (min, avg, max) = (640328.503, 672659.608, 704180.853), stdev = 18013.136
  CI (99.9%): [660624.800, 684694.416] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score       Error  Units
MaybeTakeUntilTest._Benchmark.benchmark_untilMaybeMainError  thrpt   30  672659.608 ± 12034.808  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilTest._Benchmark.benchmark_untilMaybeOtherError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilTest._Benchmark.benchmark_untilMaybeOtherError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 147818.531 ops/s
# Warmup Iteration   2: 511261.743 ops/s
# Warmup Iteration   3: 562321.501 ops/s
# Warmup Iteration   4: 595417.792 ops/s
# Warmup Iteration   5: 523349.035 ops/s
# Warmup Iteration   6: 588235.453 ops/s
# Warmup Iteration   7: 611304.401 ops/s
# Warmup Iteration   8: 608336.564 ops/s
# Warmup Iteration   9: 619177.533 ops/s
# Warmup Iteration  10: 624955.064 ops/s
# Warmup Iteration  11: 594147.279 ops/s
# Warmup Iteration  12: 631351.182 ops/s
# Warmup Iteration  13: 482083.106 ops/s
# Warmup Iteration  14: 638698.263 ops/s
# Warmup Iteration  15: 610604.287 ops/s
# Warmup Iteration  16: 595865.760 ops/s
# Warmup Iteration  17: 652541.216 ops/s
# Warmup Iteration  18: 621464.745 ops/s
# Warmup Iteration  19: 647437.468 ops/s
# Warmup Iteration  20: 649802.285 ops/s
# Warmup Iteration  21: 641846.174 ops/s
# Warmup Iteration  22: 667711.317 ops/s
# Warmup Iteration  23: 617922.432 ops/s
# Warmup Iteration  24: 664334.737 ops/s
# Warmup Iteration  25: 662387.104 ops/s
# Warmup Iteration  26: 622017.242 ops/s
# Warmup Iteration  27: 637528.020 ops/s
# Warmup Iteration  28: 628783.972 ops/s
# Warmup Iteration  29: 658026.106 ops/s
# Warmup Iteration  30: 634894.515 ops/s
Iteration   1: 639875.853 ops/s
Iteration   2: 626985.722 ops/s
Iteration   3: 635717.413 ops/s
Iteration   4: 634968.269 ops/s
Iteration   5: 625793.852 ops/s
Iteration   6: 650456.905 ops/s
Iteration   7: 644468.850 ops/s
Iteration   8: 634383.738 ops/s
Iteration   9: 651373.722 ops/s
Iteration  10: 617411.252 ops/s
Iteration  11: 656411.085 ops/s
Iteration  12: 622016.577 ops/s
Iteration  13: 653509.018 ops/s
Iteration  14: 642828.906 ops/s
Iteration  15: 630010.066 ops/s
Iteration  16: 652535.449 ops/s
Iteration  17: 631695.563 ops/s
Iteration  18: 652195.244 ops/s
Iteration  19: 626230.679 ops/s
Iteration  20: 653148.408 ops/s
Iteration  21: 630639.063 ops/s
Iteration  22: 645707.181 ops/s
Iteration  23: 652538.409 ops/s
Iteration  24: 628686.010 ops/s
Iteration  25: 663897.494 ops/s
Iteration  26: 629260.741 ops/s
Iteration  27: 634374.170 ops/s
Iteration  28: 644384.710 ops/s
Iteration  29: 648733.806 ops/s
Iteration  30: 644539.921 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilTest._Benchmark.benchmark_untilMaybeOtherError":
  640159.269 ±(99.9%) 7919.322 ops/s [Average]
  (min, avg, max) = (617411.252, 640159.269, 663897.494), stdev = 11853.269
  CI (99.9%): [632239.947, 648078.591] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
MaybeTakeUntilTest._Benchmark.benchmark_untilMaybeOtherError  thrpt   30  640159.269 ± 7919.322  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_subscribeToOnSuccess$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_subscribeToOnSuccess

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1091408.394 ops/s
# Warmup Iteration   2: 4668863.228 ops/s
# Warmup Iteration   3: 5788733.672 ops/s
# Warmup Iteration   4: 6515827.337 ops/s
# Warmup Iteration   5: 6643899.500 ops/s
# Warmup Iteration   6: 6485773.586 ops/s
# Warmup Iteration   7: 6752639.591 ops/s
# Warmup Iteration   8: 6553084.359 ops/s
# Warmup Iteration   9: 6671748.509 ops/s
# Warmup Iteration  10: 6399068.870 ops/s
# Warmup Iteration  11: 6477733.270 ops/s
# Warmup Iteration  12: 6454860.144 ops/s
# Warmup Iteration  13: 6658557.591 ops/s
# Warmup Iteration  14: 6682035.767 ops/s
# Warmup Iteration  15: 6563933.384 ops/s
# Warmup Iteration  16: 6634137.886 ops/s
# Warmup Iteration  17: 6485779.933 ops/s
# Warmup Iteration  18: 6864628.295 ops/s
# Warmup Iteration  19: 6311691.510 ops/s
# Warmup Iteration  20: 6656679.532 ops/s
# Warmup Iteration  21: 6454035.020 ops/s
# Warmup Iteration  22: 6841946.495 ops/s
# Warmup Iteration  23: 6813904.652 ops/s
# Warmup Iteration  24: 6516148.706 ops/s
# Warmup Iteration  25: 6941624.621 ops/s
# Warmup Iteration  26: 6499996.829 ops/s
# Warmup Iteration  27: 6490610.102 ops/s
# Warmup Iteration  28: 6762419.727 ops/s
# Warmup Iteration  29: 6641394.741 ops/s
# Warmup Iteration  30: 6735531.148 ops/s
Iteration   1: 6492337.957 ops/s
Iteration   2: 6906680.124 ops/s
Iteration   3: 6795839.598 ops/s
Iteration   4: 6674273.353 ops/s
Iteration   5: 6746632.206 ops/s
Iteration   6: 6587523.473 ops/s
Iteration   7: 6473883.418 ops/s
Iteration   8: 6805115.825 ops/s
Iteration   9: 6665494.231 ops/s
Iteration  10: 6580926.811 ops/s
Iteration  11: 6846960.715 ops/s
Iteration  12: 6876667.697 ops/s
Iteration  13: 6551617.738 ops/s
Iteration  14: 6756395.074 ops/s
Iteration  15: 6754544.509 ops/s
Iteration  16: 6494537.551 ops/s
Iteration  17: 6769342.496 ops/s
Iteration  18: 6697274.672 ops/s
Iteration  19: 6708396.175 ops/s
Iteration  20: 6498145.195 ops/s
Iteration  21: 6491663.398 ops/s
Iteration  22: 6879806.938 ops/s
Iteration  23: 6475922.332 ops/s
Iteration  24: 6926110.374 ops/s
Iteration  25: 6378436.578 ops/s
Iteration  26: 6702635.055 ops/s
Iteration  27: 6477591.633 ops/s
Iteration  28: 6504279.925 ops/s
Iteration  29: 6913135.684 ops/s
Iteration  30: 6605888.245 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_subscribeToOnSuccess":
  6667935.299 ±(99.9%) 107342.129 ops/s [Average]
  (min, avg, max) = (6378436.578, 6667935.299, 6926110.374), stdev = 160664.657
  CI (99.9%): [6560593.171, 6775277.428] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score        Error  Units
MaybeTest._Benchmark.benchmark_subscribeToOnSuccess  thrpt   30  6667935.299 ± 107342.129  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_ambArrayOneIsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_ambArrayOneIsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 284975.575 ops/s
# Warmup Iteration   2: 506510.389 ops/s
# Warmup Iteration   3: 612292.546 ops/s
# Warmup Iteration   4: 598217.081 ops/s
# Warmup Iteration   5: 555875.516 ops/s
# Warmup Iteration   6: 626859.679 ops/s
# Warmup Iteration   7: 583314.438 ops/s
# Warmup Iteration   8: 544303.931 ops/s
# Warmup Iteration   9: 655493.971 ops/s
# Warmup Iteration  10: 632756.894 ops/s
# Warmup Iteration  11: 631589.568 ops/s
# Warmup Iteration  12: 658431.779 ops/s
# Warmup Iteration  13: 653986.957 ops/s
# Warmup Iteration  14: 631629.705 ops/s
# Warmup Iteration  15: 645510.176 ops/s
# Warmup Iteration  16: 639930.974 ops/s
# Warmup Iteration  17: 680750.798 ops/s
# Warmup Iteration  18: 697983.731 ops/s
# Warmup Iteration  19: 662283.896 ops/s
# Warmup Iteration  20: 701545.018 ops/s
# Warmup Iteration  21: 650957.040 ops/s
# Warmup Iteration  22: 668123.512 ops/s
# Warmup Iteration  23: 700394.096 ops/s
# Warmup Iteration  24: 652147.054 ops/s
# Warmup Iteration  25: 685275.914 ops/s
# Warmup Iteration  26: 679906.067 ops/s
# Warmup Iteration  27: 649490.512 ops/s
# Warmup Iteration  28: 671154.469 ops/s
# Warmup Iteration  29: 679591.568 ops/s
# Warmup Iteration  30: 671049.265 ops/s
Iteration   1: 701280.234 ops/s
Iteration   2: 683175.974 ops/s
Iteration   3: 673134.690 ops/s
Iteration   4: 694128.939 ops/s
Iteration   5: 659781.526 ops/s
Iteration   6: 669806.239 ops/s
Iteration   7: 698324.259 ops/s
Iteration   8: 652501.230 ops/s
Iteration   9: 689594.883 ops/s
Iteration  10: 652858.097 ops/s
Iteration  11: 693811.238 ops/s
Iteration  12: 657928.084 ops/s
Iteration  13: 675498.224 ops/s
Iteration  14: 653704.922 ops/s
Iteration  15: 676659.925 ops/s
Iteration  16: 664109.763 ops/s
Iteration  17: 657631.721 ops/s
Iteration  18: 693371.420 ops/s
Iteration  19: 667778.381 ops/s
Iteration  20: 669801.143 ops/s
Iteration  21: 691633.936 ops/s
Iteration  22: 636375.603 ops/s
Iteration  23: 690702.436 ops/s
Iteration  24: 665429.792 ops/s
Iteration  25: 679451.921 ops/s
Iteration  26: 653527.658 ops/s
Iteration  27: 699574.604 ops/s
Iteration  28: 668763.004 ops/s
Iteration  29: 663006.868 ops/s
Iteration  30: 671385.122 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_ambArrayOneIsNull":
  673491.061 ±(99.9%) 11368.536 ops/s [Average]
  (min, avg, max) = (636375.603, 673491.061, 701280.234), stdev = 17015.891
  CI (99.9%): [662122.525, 684859.597] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt       Score       Error  Units
MaybeTest._Benchmark.benchmark_ambArrayOneIsNull  thrpt   30  673491.061 ± 11368.536  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_subscribeToOnError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_subscribeToOnError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 188526.835 ops/s
# Warmup Iteration   2: 597482.551 ops/s
# Warmup Iteration   3: 679769.305 ops/s
# Warmup Iteration   4: 644371.290 ops/s
# Warmup Iteration   5: 738855.353 ops/s
# Warmup Iteration   6: 725479.165 ops/s
# Warmup Iteration   7: 703458.847 ops/s
# Warmup Iteration   8: 671547.898 ops/s
# Warmup Iteration   9: 741327.821 ops/s
# Warmup Iteration  10: 705001.571 ops/s
# Warmup Iteration  11: 712539.495 ops/s
# Warmup Iteration  12: 709052.986 ops/s
# Warmup Iteration  13: 720385.723 ops/s
# Warmup Iteration  14: 718562.344 ops/s
# Warmup Iteration  15: 707933.666 ops/s
# Warmup Iteration  16: 718732.491 ops/s
# Warmup Iteration  17: 747161.313 ops/s
# Warmup Iteration  18: 761355.191 ops/s
# Warmup Iteration  19: 808061.768 ops/s
# Warmup Iteration  20: 736751.279 ops/s
# Warmup Iteration  21: 781210.114 ops/s
# Warmup Iteration  22: 737376.516 ops/s
# Warmup Iteration  23: 752902.973 ops/s
# Warmup Iteration  24: 750164.224 ops/s
# Warmup Iteration  25: 769395.405 ops/s
# Warmup Iteration  26: 751657.032 ops/s
# Warmup Iteration  27: 774484.255 ops/s
# Warmup Iteration  28: 785837.799 ops/s
# Warmup Iteration  29: 786180.208 ops/s
# Warmup Iteration  30: 738813.881 ops/s
Iteration   1: 784056.760 ops/s
Iteration   2: 761546.394 ops/s
Iteration   3: 772030.294 ops/s
Iteration   4: 767774.590 ops/s
Iteration   5: 717024.335 ops/s
Iteration   6: 767366.739 ops/s
Iteration   7: 758688.633 ops/s
Iteration   8: 772100.216 ops/s
Iteration   9: 758286.076 ops/s
Iteration  10: 726204.641 ops/s
Iteration  11: 774531.776 ops/s
Iteration  12: 728316.136 ops/s
Iteration  13: 737560.621 ops/s
Iteration  14: 763507.267 ops/s
Iteration  15: 733467.851 ops/s
Iteration  16: 742115.862 ops/s
Iteration  17: 775013.413 ops/s
Iteration  18: 758589.073 ops/s
Iteration  19: 722513.313 ops/s
Iteration  20: 751813.346 ops/s
Iteration  21: 789245.254 ops/s
Iteration  22: 780362.211 ops/s
Iteration  23: 732942.019 ops/s
Iteration  24: 776548.218 ops/s
Iteration  25: 753757.115 ops/s
Iteration  26: 752465.057 ops/s
Iteration  27: 787822.273 ops/s
Iteration  28: 731705.600 ops/s
Iteration  29: 781782.221 ops/s
Iteration  30: 740729.143 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_subscribeToOnError":
  756662.215 ±(99.9%) 14087.241 ops/s [Average]
  (min, avg, max) = (717024.335, 756662.215, 789245.254), stdev = 21085.120
  CI (99.9%): [742574.974, 770749.456] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt       Score       Error  Units
MaybeTest._Benchmark.benchmark_subscribeToOnError  thrpt   30  756662.215 ± 14087.241  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_subscribeToOnComplete$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_subscribeToOnComplete

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3044778.366 ops/s
# Warmup Iteration   2: 5857359.042 ops/s
# Warmup Iteration   3: 10565399.265 ops/s
# Warmup Iteration   4: 10547474.748 ops/s
# Warmup Iteration   5: 10684013.241 ops/s
# Warmup Iteration   6: 10739864.795 ops/s
# Warmup Iteration   7: 10109856.504 ops/s
# Warmup Iteration   8: 10573086.666 ops/s
# Warmup Iteration   9: 10432838.246 ops/s
# Warmup Iteration  10: 10746146.311 ops/s
# Warmup Iteration  11: 10614638.796 ops/s
# Warmup Iteration  12: 10265390.420 ops/s
# Warmup Iteration  13: 11005585.022 ops/s
# Warmup Iteration  14: 10427530.144 ops/s
# Warmup Iteration  15: 10744295.944 ops/s
# Warmup Iteration  16: 10666257.893 ops/s
# Warmup Iteration  17: 10468261.140 ops/s
# Warmup Iteration  18: 10436192.410 ops/s
# Warmup Iteration  19: 10223354.278 ops/s
# Warmup Iteration  20: 10700274.822 ops/s
# Warmup Iteration  21: 10429670.202 ops/s
# Warmup Iteration  22: 10650028.628 ops/s
# Warmup Iteration  23: 10177882.754 ops/s
# Warmup Iteration  24: 10181027.154 ops/s
# Warmup Iteration  25: 10423732.160 ops/s
# Warmup Iteration  26: 10556155.107 ops/s
# Warmup Iteration  27: 10724820.335 ops/s
# Warmup Iteration  28: 10141092.230 ops/s
# Warmup Iteration  29: 10651232.906 ops/s
# Warmup Iteration  30: 10460500.785 ops/s
Iteration   1: 10374613.763 ops/s
Iteration   2: 10733443.964 ops/s
Iteration   3: 10265922.721 ops/s
Iteration   4: 10448496.275 ops/s
Iteration   5: 10418209.031 ops/s
Iteration   6: 10145028.917 ops/s
Iteration   7: 10683469.062 ops/s
Iteration   8: 10298251.302 ops/s
Iteration   9: 10784458.086 ops/s
Iteration  10: 10660708.191 ops/s
Iteration  11: 10151735.444 ops/s
Iteration  12: 10525616.151 ops/s
Iteration  13: 10042011.811 ops/s
Iteration  14: 10390198.064 ops/s
Iteration  15: 10492116.674 ops/s
Iteration  16: 10631611.464 ops/s
Iteration  17: 10504051.371 ops/s
Iteration  18: 10576665.015 ops/s
Iteration  19: 10206520.884 ops/s
Iteration  20: 10670554.187 ops/s
Iteration  21: 10427603.492 ops/s
Iteration  22: 10728997.506 ops/s
Iteration  23: 10726536.632 ops/s
Iteration  24: 10140462.098 ops/s
Iteration  25: 11067197.571 ops/s
Iteration  26: 10084475.050 ops/s
Iteration  27: 10919506.232 ops/s
Iteration  28: 10338041.474 ops/s
Iteration  29: 10396110.101 ops/s
Iteration  30: 10910644.948 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_subscribeToOnComplete":
  10491441.916 ±(99.9%) 177018.266 ops/s [Average]
  (min, avg, max) = (10042011.811, 10491441.916, 11067197.571), stdev = 264952.627
  CI (99.9%): [10314423.650, 10668460.182] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt         Score        Error  Units
MaybeTest._Benchmark.benchmark_subscribeToOnComplete  thrpt   30  10491441.916 ± 177018.266  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_mergeMaybe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_mergeMaybe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1356178.235 ops/s
# Warmup Iteration   2: 4216622.802 ops/s
# Warmup Iteration   3: 6302254.591 ops/s
# Warmup Iteration   4: 6140801.025 ops/s
# Warmup Iteration   5: 6348173.162 ops/s
# Warmup Iteration   6: 6229845.333 ops/s
# Warmup Iteration   7: 6208088.030 ops/s
# Warmup Iteration   8: 6288936.925 ops/s
# Warmup Iteration   9: 6336184.643 ops/s
# Warmup Iteration  10: 6274204.441 ops/s
# Warmup Iteration  11: 6188617.490 ops/s
# Warmup Iteration  12: 6313752.775 ops/s
# Warmup Iteration  13: 6257647.717 ops/s
# Warmup Iteration  14: 6361462.701 ops/s
# Warmup Iteration  15: 6235633.496 ops/s
# Warmup Iteration  16: 6366267.634 ops/s
# Warmup Iteration  17: 6401271.168 ops/s
# Warmup Iteration  18: 6280365.352 ops/s
# Warmup Iteration  19: 6479931.568 ops/s
# Warmup Iteration  20: 6131185.747 ops/s
# Warmup Iteration  21: 6536392.139 ops/s
# Warmup Iteration  22: 6191047.440 ops/s
# Warmup Iteration  23: 6293198.466 ops/s
# Warmup Iteration  24: 6322343.393 ops/s
# Warmup Iteration  25: 6293377.841 ops/s
# Warmup Iteration  26: 6358290.117 ops/s
# Warmup Iteration  27: 6464994.561 ops/s
# Warmup Iteration  28: 6212950.303 ops/s
# Warmup Iteration  29: 6362603.028 ops/s
# Warmup Iteration  30: 6503600.989 ops/s
Iteration   1: 6229116.807 ops/s
Iteration   2: 6479486.849 ops/s
Iteration   3: 6253933.431 ops/s
Iteration   4: 6239122.449 ops/s
Iteration   5: 6244744.930 ops/s
Iteration   6: 6376646.353 ops/s
Iteration   7: 6416874.114 ops/s
Iteration   8: 6249681.933 ops/s
Iteration   9: 6196827.204 ops/s
Iteration  10: 6670112.925 ops/s
Iteration  11: 6012128.676 ops/s
Iteration  12: 6457133.645 ops/s
Iteration  13: 6109433.810 ops/s
Iteration  14: 6237122.694 ops/s
Iteration  15: 6394602.393 ops/s
Iteration  16: 6394581.092 ops/s
Iteration  17: 6165402.080 ops/s
Iteration  18: 6286362.545 ops/s
Iteration  19: 6380946.978 ops/s
Iteration  20: 6256662.257 ops/s
Iteration  21: 6306827.820 ops/s
Iteration  22: 6479856.924 ops/s
Iteration  23: 6329235.949 ops/s
Iteration  24: 6149786.460 ops/s
Iteration  25: 6443260.377 ops/s
Iteration  26: 6470026.687 ops/s
Iteration  27: 6210681.423 ops/s
Iteration  28: 5871981.363 ops/s
Iteration  29: 5757808.031 ops/s
Iteration  30: 6281320.208 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_mergeMaybe":
  6278390.280 ±(99.9%) 123132.061 ops/s [Average]
  (min, avg, max) = (5757808.031, 6278390.280, 6670112.925), stdev = 184298.287
  CI (99.9%): [6155258.219, 6401522.342] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                   Mode  Cnt        Score        Error  Units
MaybeTest._Benchmark.benchmark_mergeMaybe  thrpt   30  6278390.280 ± 123132.061  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_onErrorResumeWithEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_onErrorResumeWithEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3187403.309 ops/s
# Warmup Iteration   2: 5126630.977 ops/s
# Warmup Iteration   3: 7033308.150 ops/s
# Warmup Iteration   4: 7188694.876 ops/s
# Warmup Iteration   5: 6897396.318 ops/s
# Warmup Iteration   6: 7295282.433 ops/s
# Warmup Iteration   7: 7010665.984 ops/s
# Warmup Iteration   8: 7078664.199 ops/s
# Warmup Iteration   9: 6990695.558 ops/s
# Warmup Iteration  10: 6942303.378 ops/s
# Warmup Iteration  11: 7146223.350 ops/s
# Warmup Iteration  12: 6932852.355 ops/s
# Warmup Iteration  13: 7064194.325 ops/s
# Warmup Iteration  14: 7159154.418 ops/s
# Warmup Iteration  15: 7058292.266 ops/s
# Warmup Iteration  16: 7297224.984 ops/s
# Warmup Iteration  17: 6853862.085 ops/s
# Warmup Iteration  18: 7013270.585 ops/s
# Warmup Iteration  19: 7258852.743 ops/s
# Warmup Iteration  20: 6980224.654 ops/s
# Warmup Iteration  21: 7215287.298 ops/s
# Warmup Iteration  22: 6921089.128 ops/s
# Warmup Iteration  23: 7304247.730 ops/s
# Warmup Iteration  24: 7074694.616 ops/s
# Warmup Iteration  25: 7072177.213 ops/s
# Warmup Iteration  26: 7140226.936 ops/s
# Warmup Iteration  27: 7495291.534 ops/s
# Warmup Iteration  28: 7026343.939 ops/s
# Warmup Iteration  29: 7126468.910 ops/s
# Warmup Iteration  30: 7098635.106 ops/s
Iteration   1: 7278738.871 ops/s
Iteration   2: 6932271.196 ops/s
Iteration   3: 6874571.544 ops/s
Iteration   4: 7228510.334 ops/s
Iteration   5: 6872009.785 ops/s
Iteration   6: 7238544.898 ops/s
Iteration   7: 7146244.536 ops/s
Iteration   8: 7073884.505 ops/s
Iteration   9: 7370239.188 ops/s
Iteration  10: 6922167.849 ops/s
Iteration  11: 6938645.077 ops/s
Iteration  12: 7516904.717 ops/s
Iteration  13: 6914869.539 ops/s
Iteration  14: 7244762.106 ops/s
Iteration  15: 7120646.012 ops/s
Iteration  16: 6988390.730 ops/s
Iteration  17: 7219871.326 ops/s
Iteration  18: 7256939.779 ops/s
Iteration  19: 7013127.814 ops/s
Iteration  20: 7274629.180 ops/s
Iteration  21: 6957992.912 ops/s
Iteration  22: 7186219.162 ops/s
Iteration  23: 6958034.427 ops/s
Iteration  24: 6991528.906 ops/s
Iteration  25: 7116013.799 ops/s
Iteration  26: 7033859.841 ops/s
Iteration  27: 7264161.340 ops/s
Iteration  28: 6770305.245 ops/s
Iteration  29: 7033129.166 ops/s
Iteration  30: 6996047.790 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_onErrorResumeWithEmpty":
  7091108.719 ±(99.9%) 115305.130 ops/s [Average]
  (min, avg, max) = (6770305.245, 7091108.719, 7516904.717), stdev = 172583.303
  CI (99.9%): [6975803.589, 7206413.849] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score        Error  Units
MaybeTest._Benchmark.benchmark_onErrorResumeWithEmpty  thrpt   30  7091108.719 ± 115305.130  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_doOnEventComplete$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_doOnEventComplete

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2192537.311 ops/s
# Warmup Iteration   2: 5584389.767 ops/s
# Warmup Iteration   3: 8403796.502 ops/s
# Warmup Iteration   4: 8055490.438 ops/s
# Warmup Iteration   5: 8122155.292 ops/s
# Warmup Iteration   6: 8113490.813 ops/s
# Warmup Iteration   7: 8064673.566 ops/s
# Warmup Iteration   8: 8190845.980 ops/s
# Warmup Iteration   9: 8134320.086 ops/s
# Warmup Iteration  10: 8072477.065 ops/s
# Warmup Iteration  11: 8144494.719 ops/s
# Warmup Iteration  12: 8153686.925 ops/s
# Warmup Iteration  13: 8390666.662 ops/s
# Warmup Iteration  14: 7786103.904 ops/s
# Warmup Iteration  15: 8392770.785 ops/s
# Warmup Iteration  16: 8141377.106 ops/s
# Warmup Iteration  17: 7996491.797 ops/s
# Warmup Iteration  18: 8345821.705 ops/s
# Warmup Iteration  19: 8061801.373 ops/s
# Warmup Iteration  20: 8178514.571 ops/s
# Warmup Iteration  21: 8517425.721 ops/s
# Warmup Iteration  22: 8034864.324 ops/s
# Warmup Iteration  23: 8182936.512 ops/s
# Warmup Iteration  24: 8209116.425 ops/s
# Warmup Iteration  25: 8151969.678 ops/s
# Warmup Iteration  26: 8105367.052 ops/s
# Warmup Iteration  27: 8536475.033 ops/s
# Warmup Iteration  28: 8051099.353 ops/s
# Warmup Iteration  29: 8443611.863 ops/s
# Warmup Iteration  30: 8105102.001 ops/s
Iteration   1: 8154207.311 ops/s
Iteration   2: 8189265.257 ops/s
Iteration   3: 8087904.556 ops/s
Iteration   4: 8356852.847 ops/s
Iteration   5: 7705576.697 ops/s
Iteration   6: 8151463.898 ops/s
Iteration   7: 8523682.305 ops/s
Iteration   8: 8448086.172 ops/s
Iteration   9: 8047576.532 ops/s
Iteration  10: 8450181.963 ops/s
Iteration  11: 7940473.159 ops/s
Iteration  12: 8385738.407 ops/s
Iteration  13: 8156981.328 ops/s
Iteration  14: 8350702.517 ops/s
Iteration  15: 8108228.616 ops/s
Iteration  16: 8265752.634 ops/s
Iteration  17: 8165049.589 ops/s
Iteration  18: 8101767.510 ops/s
Iteration  19: 8149985.408 ops/s
Iteration  20: 8517103.590 ops/s
Iteration  21: 8057847.371 ops/s
Iteration  22: 8533269.902 ops/s
Iteration  23: 6584075.015 ops/s
Iteration  24: 8408034.600 ops/s
Iteration  25: 8449211.933 ops/s
Iteration  26: 7859432.356 ops/s
Iteration  27: 8419961.881 ops/s
Iteration  28: 8100393.682 ops/s
Iteration  29: 8018127.960 ops/s
Iteration  30: 8291719.213 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_doOnEventComplete":
  8165955.140 ±(99.9%) 242493.306 ops/s [Average]
  (min, avg, max) = (6584075.015, 8165955.140, 8533269.902), stdev = 362952.592
  CI (99.9%): [7923461.834, 8408448.447] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score        Error  Units
MaybeTest._Benchmark.benchmark_doOnEventComplete  thrpt   30  8165955.140 ± 242493.306  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_doOnDispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_doOnDispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2336825.152 ops/s
# Warmup Iteration   2: 5229342.348 ops/s
# Warmup Iteration   3: 7091839.851 ops/s
# Warmup Iteration   4: 6773502.158 ops/s
# Warmup Iteration   5: 7144647.621 ops/s
# Warmup Iteration   6: 6819628.461 ops/s
# Warmup Iteration   7: 6960142.690 ops/s
# Warmup Iteration   8: 6973515.189 ops/s
# Warmup Iteration   9: 6838339.256 ops/s
# Warmup Iteration  10: 6899846.462 ops/s
# Warmup Iteration  11: 6796337.000 ops/s
# Warmup Iteration  12: 7008121.713 ops/s
# Warmup Iteration  13: 6990172.695 ops/s
# Warmup Iteration  14: 6863366.258 ops/s
# Warmup Iteration  15: 7217579.098 ops/s
# Warmup Iteration  16: 6976232.255 ops/s
# Warmup Iteration  17: 7029380.227 ops/s
# Warmup Iteration  18: 6930124.897 ops/s
# Warmup Iteration  19: 6833206.565 ops/s
# Warmup Iteration  20: 7097912.505 ops/s
# Warmup Iteration  21: 6748871.652 ops/s
# Warmup Iteration  22: 7198815.271 ops/s
# Warmup Iteration  23: 7247496.885 ops/s
# Warmup Iteration  24: 6705894.038 ops/s
# Warmup Iteration  25: 6949045.406 ops/s
# Warmup Iteration  26: 7102859.391 ops/s
# Warmup Iteration  27: 6932430.414 ops/s
# Warmup Iteration  28: 6856370.801 ops/s
# Warmup Iteration  29: 7113479.320 ops/s
# Warmup Iteration  30: 6743055.972 ops/s
Iteration   1: 7227881.535 ops/s
Iteration   2: 7075045.483 ops/s
Iteration   3: 6778491.829 ops/s
Iteration   4: 6801790.952 ops/s
Iteration   5: 7022566.849 ops/s
Iteration   6: 7234238.922 ops/s
Iteration   7: 6737610.429 ops/s
Iteration   8: 7033457.734 ops/s
Iteration   9: 7029218.789 ops/s
Iteration  10: 6983630.772 ops/s
Iteration  11: 6965486.491 ops/s
Iteration  12: 6778694.499 ops/s
Iteration  13: 7013635.842 ops/s
Iteration  14: 6735570.646 ops/s
Iteration  15: 6924363.501 ops/s
Iteration  16: 7063615.810 ops/s
Iteration  17: 6975754.225 ops/s
Iteration  18: 7116830.195 ops/s
Iteration  19: 6801895.245 ops/s
Iteration  20: 6909860.286 ops/s
Iteration  21: 7001902.318 ops/s
Iteration  22: 6914346.265 ops/s
Iteration  23: 7021423.417 ops/s
Iteration  24: 6822703.965 ops/s
Iteration  25: 7032532.594 ops/s
Iteration  26: 7229946.903 ops/s
Iteration  27: 6810037.196 ops/s
Iteration  28: 7000612.201 ops/s
Iteration  29: 6957399.986 ops/s
Iteration  30: 7021886.234 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_doOnDispose":
  6967414.370 ±(99.9%) 93150.363 ops/s [Average]
  (min, avg, max) = (6735570.646, 6967414.370, 7234238.922), stdev = 139423.088
  CI (99.9%): [6874264.008, 7060564.733] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                    Mode  Cnt        Score       Error  Units
MaybeTest._Benchmark.benchmark_doOnDispose  thrpt   30  6967414.370 ± 93150.363  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_flatMapError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_flatMapError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 245727.936 ops/s
# Warmup Iteration   2: 522782.067 ops/s
# Warmup Iteration   3: 620958.714 ops/s
# Warmup Iteration   4: 582273.410 ops/s
# Warmup Iteration   5: 628497.067 ops/s
# Warmup Iteration   6: 584876.817 ops/s
# Warmup Iteration   7: 589643.964 ops/s
# Warmup Iteration   8: 618517.466 ops/s
# Warmup Iteration   9: 599942.345 ops/s
# Warmup Iteration  10: 580108.800 ops/s
# Warmup Iteration  11: 602494.493 ops/s
# Warmup Iteration  12: 597494.878 ops/s
# Warmup Iteration  13: 607615.014 ops/s
# Warmup Iteration  14: 583108.591 ops/s
# Warmup Iteration  15: 597526.820 ops/s
# Warmup Iteration  16: 610333.605 ops/s
# Warmup Iteration  17: 600954.849 ops/s
# Warmup Iteration  18: 630710.108 ops/s
# Warmup Iteration  19: 625263.155 ops/s
# Warmup Iteration  20: 643289.946 ops/s
# Warmup Iteration  21: 645053.070 ops/s
# Warmup Iteration  22: 626722.910 ops/s
# Warmup Iteration  23: 635077.093 ops/s
# Warmup Iteration  24: 622352.504 ops/s
# Warmup Iteration  25: 635455.224 ops/s
# Warmup Iteration  26: 626488.222 ops/s
# Warmup Iteration  27: 650726.878 ops/s
# Warmup Iteration  28: 620425.056 ops/s
# Warmup Iteration  29: 621932.054 ops/s
# Warmup Iteration  30: 645920.551 ops/s
Iteration   1: 652946.757 ops/s
Iteration   2: 664419.375 ops/s
Iteration   3: 611059.512 ops/s
Iteration   4: 645749.339 ops/s
Iteration   5: 624229.881 ops/s
Iteration   6: 646886.688 ops/s
Iteration   7: 646313.479 ops/s
Iteration   8: 615506.714 ops/s
Iteration   9: 642009.523 ops/s
Iteration  10: 616392.581 ops/s
Iteration  11: 646290.875 ops/s
Iteration  12: 637996.242 ops/s
Iteration  13: 624861.021 ops/s
Iteration  14: 633898.549 ops/s
Iteration  15: 641536.949 ops/s
Iteration  16: 635397.583 ops/s
Iteration  17: 492106.833 ops/s
Iteration  18: 634837.791 ops/s
Iteration  19: 613693.221 ops/s
Iteration  20: 659584.723 ops/s
Iteration  21: 626738.305 ops/s
Iteration  22: 621717.341 ops/s
Iteration  23: 662546.954 ops/s
Iteration  24: 615468.287 ops/s
Iteration  25: 660535.040 ops/s
Iteration  26: 591912.192 ops/s
Iteration  27: 644452.713 ops/s
Iteration  28: 635301.691 ops/s
Iteration  29: 654871.272 ops/s
Iteration  30: 632556.521 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_flatMapError":
  631060.598 ±(99.9%) 21023.687 ops/s [Average]
  (min, avg, max) = (492106.833, 631060.598, 664419.375), stdev = 31467.267
  CI (99.9%): [610036.912, 652084.285] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     Mode  Cnt       Score       Error  Units
MaybeTest._Benchmark.benchmark_flatMapError  thrpt   30  631060.598 ± 21023.687  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_filterThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_filterThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 171734.794 ops/s
# Warmup Iteration   2: 529818.367 ops/s
# Warmup Iteration   3: 601167.206 ops/s
# Warmup Iteration   4: 536374.904 ops/s
# Warmup Iteration   5: 630660.735 ops/s
# Warmup Iteration   6: 619108.009 ops/s
# Warmup Iteration   7: 603200.284 ops/s
# Warmup Iteration   8: 615481.036 ops/s
# Warmup Iteration   9: 607855.438 ops/s
# Warmup Iteration  10: 598710.155 ops/s
# Warmup Iteration  11: 617453.744 ops/s
# Warmup Iteration  12: 626436.919 ops/s
# Warmup Iteration  13: 601418.029 ops/s
# Warmup Iteration  14: 623926.498 ops/s
# Warmup Iteration  15: 595792.232 ops/s
# Warmup Iteration  16: 621319.583 ops/s
# Warmup Iteration  17: 632923.063 ops/s
# Warmup Iteration  18: 642009.747 ops/s
# Warmup Iteration  19: 660459.180 ops/s
# Warmup Iteration  20: 636139.538 ops/s
# Warmup Iteration  21: 662361.332 ops/s
# Warmup Iteration  22: 641037.254 ops/s
# Warmup Iteration  23: 632880.150 ops/s
# Warmup Iteration  24: 637048.609 ops/s
# Warmup Iteration  25: 651171.642 ops/s
# Warmup Iteration  26: 627505.880 ops/s
# Warmup Iteration  27: 627806.856 ops/s
# Warmup Iteration  28: 653699.187 ops/s
# Warmup Iteration  29: 661971.283 ops/s
# Warmup Iteration  30: 642105.872 ops/s
Iteration   1: 638228.448 ops/s
Iteration   2: 663766.457 ops/s
Iteration   3: 628815.402 ops/s
Iteration   4: 650277.542 ops/s
Iteration   5: 651378.311 ops/s
Iteration   6: 629440.030 ops/s
Iteration   7: 686248.730 ops/s
Iteration   8: 623814.841 ops/s
Iteration   9: 669164.290 ops/s
Iteration  10: 627159.315 ops/s
Iteration  11: 636059.401 ops/s
Iteration  12: 660192.244 ops/s
Iteration  13: 665924.085 ops/s
Iteration  14: 636983.204 ops/s
Iteration  15: 634547.258 ops/s
Iteration  16: 651320.972 ops/s
Iteration  17: 632182.900 ops/s
Iteration  18: 662575.325 ops/s
Iteration  19: 648143.469 ops/s
Iteration  20: 630776.493 ops/s
Iteration  21: 651511.885 ops/s
Iteration  22: 641924.957 ops/s
Iteration  23: 643369.660 ops/s
Iteration  24: 631364.212 ops/s
Iteration  25: 639140.902 ops/s
Iteration  26: 656580.262 ops/s
Iteration  27: 628881.895 ops/s
Iteration  28: 656711.161 ops/s
Iteration  29: 643230.104 ops/s
Iteration  30: 635599.528 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_filterThrows":
  645177.109 ±(99.9%) 10053.806 ops/s [Average]
  (min, avg, max) = (623814.841, 645177.109, 686248.730), stdev = 15048.065
  CI (99.9%): [635123.303, 655230.916] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     Mode  Cnt       Score       Error  Units
MaybeTest._Benchmark.benchmark_filterThrows  thrpt   30  645177.109 ± 10053.806  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_mapThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_mapThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 242073.388 ops/s
# Warmup Iteration   2: 525530.206 ops/s
# Warmup Iteration   3: 561507.597 ops/s
# Warmup Iteration   4: 597916.523 ops/s
# Warmup Iteration   5: 542116.784 ops/s
# Warmup Iteration   6: 602806.368 ops/s
# Warmup Iteration   7: 564197.935 ops/s
# Warmup Iteration   8: 591595.908 ops/s
# Warmup Iteration   9: 609421.778 ops/s
# Warmup Iteration  10: 620664.380 ops/s
# Warmup Iteration  11: 594231.577 ops/s
# Warmup Iteration  12: 608313.547 ops/s
# Warmup Iteration  13: 630539.437 ops/s
# Warmup Iteration  14: 591053.771 ops/s
# Warmup Iteration  15: 613867.315 ops/s
# Warmup Iteration  16: 597108.949 ops/s
# Warmup Iteration  17: 655428.603 ops/s
# Warmup Iteration  18: 636127.701 ops/s
# Warmup Iteration  19: 636717.589 ops/s
# Warmup Iteration  20: 660553.607 ops/s
# Warmup Iteration  21: 632188.934 ops/s
# Warmup Iteration  22: 659051.979 ops/s
# Warmup Iteration  23: 659980.233 ops/s
# Warmup Iteration  24: 648085.573 ops/s
# Warmup Iteration  25: 619358.582 ops/s
# Warmup Iteration  26: 652178.573 ops/s
# Warmup Iteration  27: 619179.929 ops/s
# Warmup Iteration  28: 645695.129 ops/s
# Warmup Iteration  29: 651973.618 ops/s
# Warmup Iteration  30: 637072.432 ops/s
Iteration   1: 641108.644 ops/s
Iteration   2: 628015.778 ops/s
Iteration   3: 653444.835 ops/s
Iteration   4: 617167.511 ops/s
Iteration   5: 622874.809 ops/s
Iteration   6: 635158.981 ops/s
Iteration   7: 667846.378 ops/s
Iteration   8: 611496.510 ops/s
Iteration   9: 676661.896 ops/s
Iteration  10: 619988.657 ops/s
Iteration  11: 517298.702 ops/s
Iteration  12: 618175.809 ops/s
Iteration  13: 629440.367 ops/s
Iteration  14: 619194.813 ops/s
Iteration  15: 656694.760 ops/s
Iteration  16: 617942.511 ops/s
Iteration  17: 672940.700 ops/s
Iteration  18: 601844.701 ops/s
Iteration  19: 641402.378 ops/s
Iteration  20: 621150.560 ops/s
Iteration  21: 625894.261 ops/s
Iteration  22: 629058.238 ops/s
Iteration  23: 638933.748 ops/s
Iteration  24: 611713.274 ops/s
Iteration  25: 634304.726 ops/s
Iteration  26: 653786.216 ops/s
Iteration  27: 641100.262 ops/s
Iteration  28: 617854.599 ops/s
Iteration  29: 664422.630 ops/s
Iteration  30: 626667.202 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_mapThrows":
  630452.815 ±(99.9%) 19263.982 ops/s [Average]
  (min, avg, max) = (517298.702, 630452.815, 676661.896), stdev = 28833.423
  CI (99.9%): [611188.834, 649716.797] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                  Mode  Cnt       Score       Error  Units
MaybeTest._Benchmark.benchmark_mapThrows  thrpt   30  630452.815 ± 19263.982  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybePeekTest._Benchmark.benchmark_doubleError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybePeekTest._Benchmark.benchmark_doubleError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 24454.884 ops/s
# Warmup Iteration   2: 50751.127 ops/s
# Warmup Iteration   3: 56205.794 ops/s
# Warmup Iteration   4: 82954.860 ops/s
# Warmup Iteration   5: 148781.864 ops/s
# Warmup Iteration   6: 161121.033 ops/s
# Warmup Iteration   7: 161017.096 ops/s
# Warmup Iteration   8: 169803.456 ops/s
# Warmup Iteration   9: 159820.692 ops/s
# Warmup Iteration  10: 147962.629 ops/s
# Warmup Iteration  11: 155056.305 ops/s
# Warmup Iteration  12: 166715.366 ops/s
# Warmup Iteration  13: 160375.413 ops/s
# Warmup Iteration  14: 169199.891 ops/s
# Warmup Iteration  15: 160230.211 ops/s
# Warmup Iteration  16: 165193.935 ops/s
# Warmup Iteration  17: 170249.836 ops/s
# Warmup Iteration  18: 166213.520 ops/s
# Warmup Iteration  19: 174934.633 ops/s
# Warmup Iteration  20: 169987.075 ops/s
# Warmup Iteration  21: 176455.915 ops/s
# Warmup Iteration  22: 166575.557 ops/s
# Warmup Iteration  23: 168937.311 ops/s
# Warmup Iteration  24: 174416.674 ops/s
# Warmup Iteration  25: 165959.364 ops/s
# Warmup Iteration  26: 176528.530 ops/s
# Warmup Iteration  27: 169960.213 ops/s
# Warmup Iteration  28: 168037.991 ops/s
# Warmup Iteration  29: 179938.401 ops/s
# Warmup Iteration  30: 165465.484 ops/s
Iteration   1: 177542.206 ops/s
Iteration   2: 175424.348 ops/s
Iteration   3: 170366.335 ops/s
Iteration   4: 169561.297 ops/s
Iteration   5: 176774.337 ops/s
Iteration   6: 165211.329 ops/s
Iteration   7: 178481.672 ops/s
Iteration   8: 171318.864 ops/s
Iteration   9: 169702.926 ops/s
Iteration  10: 168857.572 ops/s
Iteration  11: 170086.088 ops/s
Iteration  12: 173128.925 ops/s
Iteration  13: 170041.416 ops/s
Iteration  14: 169839.986 ops/s
Iteration  15: 171427.205 ops/s
Iteration  16: 167206.452 ops/s
Iteration  17: 171317.375 ops/s
Iteration  18: 180827.502 ops/s
Iteration  19: 167158.328 ops/s
Iteration  20: 174393.574 ops/s
Iteration  21: 168875.871 ops/s
Iteration  22: 177570.814 ops/s
Iteration  23: 172978.253 ops/s
Iteration  24: 169021.930 ops/s
Iteration  25: 176202.208 ops/s
Iteration  26: 167683.679 ops/s
Iteration  27: 174326.736 ops/s
Iteration  28: 175385.780 ops/s
Iteration  29: 169013.059 ops/s
Iteration  30: 169931.916 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybePeekTest._Benchmark.benchmark_doubleError":
  171988.599 ±(99.9%) 2599.029 ops/s [Average]
  (min, avg, max) = (165211.329, 171988.599, 180827.502), stdev = 3890.105
  CI (99.9%): [169389.570, 174587.629] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt       Score      Error  Units
MaybePeekTest._Benchmark.benchmark_doubleError  thrpt   30  171988.599 ± 2599.029  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_errorToCompletable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_errorToCompletable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 213435.432 ops/s
# Warmup Iteration   2: 595152.080 ops/s
# Warmup Iteration   3: 640866.604 ops/s
# Warmup Iteration   4: 647669.006 ops/s
# Warmup Iteration   5: 604334.654 ops/s
# Warmup Iteration   6: 686852.701 ops/s
# Warmup Iteration   7: 712197.068 ops/s
# Warmup Iteration   8: 690424.783 ops/s
# Warmup Iteration   9: 699400.203 ops/s
# Warmup Iteration  10: 697502.764 ops/s
# Warmup Iteration  11: 691424.804 ops/s
# Warmup Iteration  12: 721027.321 ops/s
# Warmup Iteration  13: 678965.345 ops/s
# Warmup Iteration  14: 709039.817 ops/s
# Warmup Iteration  15: 698215.139 ops/s
# Warmup Iteration  16: 692146.088 ops/s
# Warmup Iteration  17: 740151.011 ops/s
# Warmup Iteration  18: 731594.679 ops/s
# Warmup Iteration  19: 753689.953 ops/s
# Warmup Iteration  20: 717793.548 ops/s
# Warmup Iteration  21: 730331.425 ops/s
# Warmup Iteration  22: 758811.502 ops/s
# Warmup Iteration  23: 756670.889 ops/s
# Warmup Iteration  24: 726838.865 ops/s
# Warmup Iteration  25: 710778.916 ops/s
# Warmup Iteration  26: 758084.933 ops/s
# Warmup Iteration  27: 749275.887 ops/s
# Warmup Iteration  28: 721712.095 ops/s
# Warmup Iteration  29: 749052.608 ops/s
# Warmup Iteration  30: 700766.633 ops/s
Iteration   1: 734052.151 ops/s
Iteration   2: 746486.944 ops/s
Iteration   3: 738838.646 ops/s
Iteration   4: 724959.633 ops/s
Iteration   5: 728076.217 ops/s
Iteration   6: 564463.223 ops/s
Iteration   7: 735463.088 ops/s
Iteration   8: 747862.155 ops/s
Iteration   9: 719037.266 ops/s
Iteration  10: 731948.640 ops/s
Iteration  11: 767695.997 ops/s
Iteration  12: 719752.052 ops/s
Iteration  13: 747043.270 ops/s
Iteration  14: 719345.099 ops/s
Iteration  15: 734868.623 ops/s
Iteration  16: 767454.356 ops/s
Iteration  17: 706253.060 ops/s
Iteration  18: 785300.369 ops/s
Iteration  19: 722282.985 ops/s
Iteration  20: 761668.717 ops/s
Iteration  21: 735249.768 ops/s
Iteration  22: 734332.389 ops/s
Iteration  23: 769464.999 ops/s
Iteration  24: 724482.955 ops/s
Iteration  25: 755389.802 ops/s
Iteration  26: 735890.962 ops/s
Iteration  27: 732215.340 ops/s
Iteration  28: 764294.292 ops/s
Iteration  29: 737929.107 ops/s
Iteration  30: 739312.402 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_errorToCompletable":
  734380.484 ±(99.9%) 24620.150 ops/s [Average]
  (min, avg, max) = (564463.223, 734380.484, 785300.369), stdev = 36850.284
  CI (99.9%): [709760.334, 759000.633] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt       Score       Error  Units
MaybeTest._Benchmark.benchmark_errorToCompletable  thrpt   30  734380.484 ± 24620.150  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_ignoreElementError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_ignoreElementError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 274934.841 ops/s
# Warmup Iteration   2: 604782.496 ops/s
# Warmup Iteration   3: 738452.755 ops/s
# Warmup Iteration   4: 678544.144 ops/s
# Warmup Iteration   5: 741396.756 ops/s
# Warmup Iteration   6: 708116.444 ops/s
# Warmup Iteration   7: 699216.142 ops/s
# Warmup Iteration   8: 708354.983 ops/s
# Warmup Iteration   9: 687300.126 ops/s
# Warmup Iteration  10: 714276.118 ops/s
# Warmup Iteration  11: 677802.380 ops/s
# Warmup Iteration  12: 702243.840 ops/s
# Warmup Iteration  13: 716949.532 ops/s
# Warmup Iteration  14: 699157.510 ops/s
# Warmup Iteration  15: 725124.610 ops/s
# Warmup Iteration  16: 676938.246 ops/s
# Warmup Iteration  17: 754822.308 ops/s
# Warmup Iteration  18: 731426.892 ops/s
# Warmup Iteration  19: 746789.723 ops/s
# Warmup Iteration  20: 758966.050 ops/s
# Warmup Iteration  21: 768490.744 ops/s
# Warmup Iteration  22: 760169.817 ops/s
# Warmup Iteration  23: 767544.509 ops/s
# Warmup Iteration  24: 760998.690 ops/s
# Warmup Iteration  25: 737998.475 ops/s
# Warmup Iteration  26: 767667.012 ops/s
# Warmup Iteration  27: 735984.160 ops/s
# Warmup Iteration  28: 774671.988 ops/s
# Warmup Iteration  29: 778239.229 ops/s
# Warmup Iteration  30: 726703.462 ops/s
Iteration   1: 773758.678 ops/s
Iteration   2: 757217.575 ops/s
Iteration   3: 757877.559 ops/s
Iteration   4: 778838.267 ops/s
Iteration   5: 742118.614 ops/s
Iteration   6: 770846.530 ops/s
Iteration   7: 752130.229 ops/s
Iteration   8: 766926.726 ops/s
Iteration   9: 736303.579 ops/s
Iteration  10: 754713.862 ops/s
Iteration  11: 777402.196 ops/s
Iteration  12: 746745.272 ops/s
Iteration  13: 757178.116 ops/s
Iteration  14: 751767.211 ops/s
Iteration  15: 762957.668 ops/s
Iteration  16: 760909.401 ops/s
Iteration  17: 748793.393 ops/s
Iteration  18: 778126.297 ops/s
Iteration  19: 743421.080 ops/s
Iteration  20: 770263.497 ops/s
Iteration  21: 696600.839 ops/s
Iteration  22: 761645.001 ops/s
Iteration  23: 778284.008 ops/s
Iteration  24: 733956.834 ops/s
Iteration  25: 774152.266 ops/s
Iteration  26: 755511.184 ops/s
Iteration  27: 791652.749 ops/s
Iteration  28: 755439.098 ops/s
Iteration  29: 729759.540 ops/s
Iteration  30: 775656.905 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_ignoreElementError":
  758031.806 ±(99.9%) 12659.931 ops/s [Average]
  (min, avg, max) = (696600.839, 758031.806, 791652.749), stdev = 18948.791
  CI (99.9%): [745371.874, 770691.737] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt       Score       Error  Units
MaybeTest._Benchmark.benchmark_ignoreElementError  thrpt   30  758031.806 ± 12659.931  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybeTest._Benchmark.benchmark_normalEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybeTest._Benchmark.benchmark_normalEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 102331.648 ops/s
# Warmup Iteration   2: 477037.845 ops/s
# Warmup Iteration   3: 622693.880 ops/s
# Warmup Iteration   4: 618695.042 ops/s
# Warmup Iteration   5: 747172.921 ops/s
# Warmup Iteration   6: 699645.519 ops/s
# Warmup Iteration   7: 728745.870 ops/s
# Warmup Iteration   8: 704956.938 ops/s
# Warmup Iteration   9: 720479.068 ops/s
# Warmup Iteration  10: 730391.470 ops/s
# Warmup Iteration  11: 689324.046 ops/s
# Warmup Iteration  12: 722949.076 ops/s
# Warmup Iteration  13: 721887.762 ops/s
# Warmup Iteration  14: 686240.172 ops/s
# Warmup Iteration  15: 743723.783 ops/s
# Warmup Iteration  16: 696989.767 ops/s
# Warmup Iteration  17: 714651.233 ops/s
# Warmup Iteration  18: 707763.900 ops/s
# Warmup Iteration  19: 728156.640 ops/s
# Warmup Iteration  20: 707615.098 ops/s
# Warmup Iteration  21: 718749.933 ops/s
# Warmup Iteration  22: 722657.226 ops/s
# Warmup Iteration  23: 699013.439 ops/s
# Warmup Iteration  24: 748424.350 ops/s
# Warmup Iteration  25: 695999.213 ops/s
# Warmup Iteration  26: 728029.239 ops/s
# Warmup Iteration  27: 726643.130 ops/s
# Warmup Iteration  28: 704035.025 ops/s
# Warmup Iteration  29: 721321.820 ops/s
# Warmup Iteration  30: 548549.341 ops/s
Iteration   1: 746745.117 ops/s
Iteration   2: 692570.425 ops/s
Iteration   3: 735312.122 ops/s
Iteration   4: 722596.525 ops/s
Iteration   5: 702066.188 ops/s
Iteration   6: 736178.517 ops/s
Iteration   7: 698981.876 ops/s
Iteration   8: 716783.941 ops/s
Iteration   9: 724885.697 ops/s
Iteration  10: 691235.803 ops/s
Iteration  11: 755400.605 ops/s
Iteration  12: 677099.309 ops/s
Iteration  13: 740127.493 ops/s
Iteration  14: 718682.066 ops/s
Iteration  15: 660889.468 ops/s
Iteration  16: 745387.439 ops/s
Iteration  17: 686284.933 ops/s
Iteration  18: 731737.259 ops/s
Iteration  19: 745571.236 ops/s
Iteration  20: 694276.321 ops/s
Iteration  21: 734231.581 ops/s
Iteration  22: 726142.268 ops/s
Iteration  23: 719974.825 ops/s
Iteration  24: 729859.978 ops/s
Iteration  25: 709377.381 ops/s
Iteration  26: 728272.785 ops/s
Iteration  27: 689448.654 ops/s
Iteration  28: 737931.171 ops/s
Iteration  29: 700229.894 ops/s
Iteration  30: 698837.422 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybeTest._Benchmark.benchmark_normalEmpty":
  716570.610 ±(99.9%) 15734.482 ops/s [Average]
  (min, avg, max) = (660889.468, 716570.610, 755400.605), stdev = 23550.634
  CI (99.9%): [700836.128, 732305.092] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score       Error  Units
ObservableFlatMapMaybeTest._Benchmark.benchmark_normalEmpty  thrpt   30  716570.610 ± 15734.482  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybeTest._Benchmark.benchmark_normal$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybeTest._Benchmark.benchmark_normal

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 118286.484 ops/s
# Warmup Iteration   2: 508576.889 ops/s
# Warmup Iteration   3: 610304.450 ops/s
# Warmup Iteration   4: 639019.711 ops/s
# Warmup Iteration   5: 693568.563 ops/s
# Warmup Iteration   6: 649369.863 ops/s
# Warmup Iteration   7: 631881.135 ops/s
# Warmup Iteration   8: 693011.188 ops/s
# Warmup Iteration   9: 670516.968 ops/s
# Warmup Iteration  10: 696485.436 ops/s
# Warmup Iteration  11: 701636.644 ops/s
# Warmup Iteration  12: 708663.467 ops/s
# Warmup Iteration  13: 667246.101 ops/s
# Warmup Iteration  14: 680022.761 ops/s
# Warmup Iteration  15: 680692.437 ops/s
# Warmup Iteration  16: 653188.762 ops/s
# Warmup Iteration  17: 659294.996 ops/s
# Warmup Iteration  18: 689048.487 ops/s
# Warmup Iteration  19: 682044.307 ops/s
# Warmup Iteration  20: 668846.195 ops/s
# Warmup Iteration  21: 662035.365 ops/s
# Warmup Iteration  22: 684252.832 ops/s
# Warmup Iteration  23: 658951.949 ops/s
# Warmup Iteration  24: 666623.059 ops/s
# Warmup Iteration  25: 683795.432 ops/s
# Warmup Iteration  26: 653441.569 ops/s
# Warmup Iteration  27: 691383.309 ops/s
# Warmup Iteration  28: 664654.926 ops/s
# Warmup Iteration  29: 679259.861 ops/s
# Warmup Iteration  30: 670730.773 ops/s
Iteration   1: 692823.225 ops/s
Iteration   2: 690692.509 ops/s
Iteration   3: 659796.013 ops/s
Iteration   4: 691914.491 ops/s
Iteration   5: 662438.832 ops/s
Iteration   6: 662855.886 ops/s
Iteration   7: 688859.291 ops/s
Iteration   8: 676820.560 ops/s
Iteration   9: 661276.337 ops/s
Iteration  10: 666446.683 ops/s
Iteration  11: 654871.950 ops/s
Iteration  12: 667682.146 ops/s
Iteration  13: 631406.196 ops/s
Iteration  14: 671528.013 ops/s
Iteration  15: 686976.721 ops/s
Iteration  16: 698619.719 ops/s
Iteration  17: 676665.822 ops/s
Iteration  18: 724876.179 ops/s
Iteration  19: 684837.592 ops/s
Iteration  20: 669695.211 ops/s
Iteration  21: 712322.176 ops/s
Iteration  22: 676942.765 ops/s
Iteration  23: 678740.511 ops/s
Iteration  24: 672631.867 ops/s
Iteration  25: 689672.501 ops/s
Iteration  26: 726046.135 ops/s
Iteration  27: 671628.273 ops/s
Iteration  28: 704274.939 ops/s
Iteration  29: 674494.719 ops/s
Iteration  30: 688571.106 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybeTest._Benchmark.benchmark_normal":
  680546.946 ±(99.9%) 13532.938 ops/s [Average]
  (min, avg, max) = (631406.196, 680546.946, 726046.135), stdev = 20255.467
  CI (99.9%): [667014.007, 694079.884] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score       Error  Units
ObservableFlatMapMaybeTest._Benchmark.benchmark_normal  thrpt   30  680546.946 ± 13532.938  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybeTest._Benchmark.benchmark_normalDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybeTest._Benchmark.benchmark_normalDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 61333.332 ops/s
# Warmup Iteration   2: 492504.069 ops/s
# Warmup Iteration   3: 587174.605 ops/s
# Warmup Iteration   4: 602459.364 ops/s
# Warmup Iteration   5: 621599.005 ops/s
# Warmup Iteration   6: 685284.001 ops/s
# Warmup Iteration   7: 593871.383 ops/s
# Warmup Iteration   8: 703613.500 ops/s
# Warmup Iteration   9: 688448.678 ops/s
# Warmup Iteration  10: 690015.004 ops/s
# Warmup Iteration  11: 654333.680 ops/s
# Warmup Iteration  12: 707090.965 ops/s
# Warmup Iteration  13: 697312.458 ops/s
# Warmup Iteration  14: 708233.436 ops/s
# Warmup Iteration  15: 661762.244 ops/s
# Warmup Iteration  16: 709293.764 ops/s
# Warmup Iteration  17: 669586.813 ops/s
# Warmup Iteration  18: 667713.916 ops/s
# Warmup Iteration  19: 707246.270 ops/s
# Warmup Iteration  20: 664006.624 ops/s
# Warmup Iteration  21: 686213.815 ops/s
# Warmup Iteration  22: 693814.242 ops/s
# Warmup Iteration  23: 693428.030 ops/s
# Warmup Iteration  24: 683526.972 ops/s
# Warmup Iteration  25: 575307.565 ops/s
# Warmup Iteration  26: 680576.674 ops/s
# Warmup Iteration  27: 660335.556 ops/s
# Warmup Iteration  28: 695874.765 ops/s
# Warmup Iteration  29: 678468.530 ops/s
# Warmup Iteration  30: 709018.353 ops/s
Iteration   1: 673512.629 ops/s
Iteration   2: 681594.385 ops/s
Iteration   3: 721465.930 ops/s
Iteration   4: 667366.052 ops/s
Iteration   5: 673796.960 ops/s
Iteration   6: 679230.220 ops/s
Iteration   7: 677520.690 ops/s
Iteration   8: 663278.946 ops/s
Iteration   9: 678253.215 ops/s
Iteration  10: 692058.660 ops/s
Iteration  11: 672958.976 ops/s
Iteration  12: 698245.356 ops/s
Iteration  13: 683164.649 ops/s
Iteration  14: 682469.544 ops/s
Iteration  15: 704632.373 ops/s
Iteration  16: 695083.130 ops/s
Iteration  17: 675407.761 ops/s
Iteration  18: 718326.044 ops/s
Iteration  19: 662056.980 ops/s
Iteration  20: 692636.618 ops/s
Iteration  21: 712524.637 ops/s
Iteration  22: 672976.605 ops/s
Iteration  23: 707221.879 ops/s
Iteration  24: 666573.051 ops/s
Iteration  25: 681581.828 ops/s
Iteration  26: 678772.621 ops/s
Iteration  27: 658992.394 ops/s
Iteration  28: 703174.351 ops/s
Iteration  29: 648211.704 ops/s
Iteration  30: 678423.049 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybeTest._Benchmark.benchmark_normalDelayError":
  683383.708 ±(99.9%) 11952.700 ops/s [Average]
  (min, avg, max) = (648211.704, 683383.708, 721465.930), stdev = 17890.240
  CI (99.9%): [671431.008, 695336.408] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score       Error  Units
ObservableFlatMapMaybeTest._Benchmark.benchmark_normalDelayError  thrpt   30  683383.708 ± 11952.700  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybeTest._Benchmark.benchmark_innerSuccessCompletesAfterMain$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybeTest._Benchmark.benchmark_innerSuccessCompletesAfterMain

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 256915.576 ops/s
# Warmup Iteration   2: 557968.544 ops/s
# Warmup Iteration   3: 1740855.081 ops/s
# Warmup Iteration   4: 2154707.723 ops/s
# Warmup Iteration   5: 2242523.832 ops/s
# Warmup Iteration   6: 2280849.493 ops/s
# Warmup Iteration   7: 2158376.169 ops/s
# Warmup Iteration   8: 2134185.886 ops/s
# Warmup Iteration   9: 2154980.847 ops/s
# Warmup Iteration  10: 2343196.718 ops/s
# Warmup Iteration  11: 2326910.075 ops/s
# Warmup Iteration  12: 2176821.887 ops/s
# Warmup Iteration  13: 2312284.407 ops/s
# Warmup Iteration  14: 2156307.592 ops/s
# Warmup Iteration  15: 2325247.331 ops/s
# Warmup Iteration  16: 2189944.501 ops/s
# Warmup Iteration  17: 2310348.013 ops/s
# Warmup Iteration  18: 2345618.221 ops/s
# Warmup Iteration  19: 2186976.543 ops/s
# Warmup Iteration  20: 2319804.106 ops/s
# Warmup Iteration  21: 2176045.370 ops/s
# Warmup Iteration  22: 2230950.212 ops/s
# Warmup Iteration  23: 2345770.739 ops/s
# Warmup Iteration  24: 2163565.993 ops/s
# Warmup Iteration  25: 2226074.448 ops/s
# Warmup Iteration  26: 2226385.973 ops/s
# Warmup Iteration  27: 2294870.008 ops/s
# Warmup Iteration  28: 2290886.450 ops/s
# Warmup Iteration  29: 2225220.875 ops/s
# Warmup Iteration  30: 2269773.331 ops/s
Iteration   1: 2208465.565 ops/s
Iteration   2: 2218360.899 ops/s
Iteration   3: 2271002.411 ops/s
Iteration   4: 2251856.675 ops/s
Iteration   5: 2319327.205 ops/s
Iteration   6: 2302073.692 ops/s
Iteration   7: 2324568.850 ops/s
Iteration   8: 2215005.505 ops/s
Iteration   9: 2284261.376 ops/s
Iteration  10: 2233459.672 ops/s
Iteration  11: 2238107.551 ops/s
Iteration  12: 2203739.598 ops/s
Iteration  13: 2248954.960 ops/s
Iteration  14: 2360185.701 ops/s
Iteration  15: 2214058.250 ops/s
Iteration  16: 2284098.779 ops/s
Iteration  17: 2341354.887 ops/s
Iteration  18: 2224734.714 ops/s
Iteration  19: 2342682.892 ops/s
Iteration  20: 2196743.235 ops/s
Iteration  21: 2282423.814 ops/s
Iteration  22: 2211307.622 ops/s
Iteration  23: 2328657.852 ops/s
Iteration  24: 2225769.180 ops/s
Iteration  25: 2316932.548 ops/s
Iteration  26: 2298487.057 ops/s
Iteration  27: 2229239.407 ops/s
Iteration  28: 2298312.983 ops/s
Iteration  29: 2259777.440 ops/s
Iteration  30: 2266698.726 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybeTest._Benchmark.benchmark_innerSuccessCompletesAfterMain":
  2266688.302 ±(99.9%) 32148.938 ops/s [Average]
  (min, avg, max) = (2196743.235, 2266688.302, 2360185.701), stdev = 48119.020
  CI (99.9%): [2234539.364, 2298837.239] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt        Score       Error  Units
ObservableFlatMapMaybeTest._Benchmark.benchmark_innerSuccessCompletesAfterMain  thrpt   30  2266688.302 ± 32148.938  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArrayTest._Benchmark.benchmark_fusedEmptyCheck$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArrayTest._Benchmark.benchmark_fusedEmptyCheck

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1177454.065 ops/s
# Warmup Iteration   2: 3270420.165 ops/s
# Warmup Iteration   3: 4126900.726 ops/s
# Warmup Iteration   4: 4914625.987 ops/s
# Warmup Iteration   5: 5100681.724 ops/s
# Warmup Iteration   6: 5124134.895 ops/s
# Warmup Iteration   7: 4890017.891 ops/s
# Warmup Iteration   8: 5016641.034 ops/s
# Warmup Iteration   9: 5205976.628 ops/s
# Warmup Iteration  10: 5022584.023 ops/s
# Warmup Iteration  11: 4816398.544 ops/s
# Warmup Iteration  12: 5136982.875 ops/s
# Warmup Iteration  13: 5145053.006 ops/s
# Warmup Iteration  14: 4882754.202 ops/s
# Warmup Iteration  15: 5083971.908 ops/s
# Warmup Iteration  16: 4996419.742 ops/s
# Warmup Iteration  17: 5152839.226 ops/s
# Warmup Iteration  18: 5091943.817 ops/s
# Warmup Iteration  19: 5018171.590 ops/s
# Warmup Iteration  20: 4293092.186 ops/s
# Warmup Iteration  21: 4796601.033 ops/s
# Warmup Iteration  22: 5102443.793 ops/s
# Warmup Iteration  23: 5048785.133 ops/s
# Warmup Iteration  24: 4919380.197 ops/s
# Warmup Iteration  25: 5166499.360 ops/s
# Warmup Iteration  26: 4912397.688 ops/s
# Warmup Iteration  27: 5314387.449 ops/s
# Warmup Iteration  28: 4977039.524 ops/s
# Warmup Iteration  29: 5119162.517 ops/s
# Warmup Iteration  30: 5252905.364 ops/s
Iteration   1: 4961271.358 ops/s
Iteration   2: 5275471.471 ops/s
Iteration   3: 4986354.748 ops/s
Iteration   4: 5080510.671 ops/s
Iteration   5: 5070610.186 ops/s
Iteration   6: 5080635.673 ops/s
Iteration   7: 5016646.843 ops/s
Iteration   8: 5222552.631 ops/s
Iteration   9: 4940778.015 ops/s
Iteration  10: 5347242.781 ops/s
Iteration  11: 5089850.567 ops/s
Iteration  12: 4886655.166 ops/s
Iteration  13: 5166622.733 ops/s
Iteration  14: 5110799.561 ops/s
Iteration  15: 4892502.323 ops/s
Iteration  16: 5111078.181 ops/s
Iteration  17: 5255255.634 ops/s
Iteration  18: 4971818.313 ops/s
Iteration  19: 5184424.832 ops/s
Iteration  20: 4970119.638 ops/s
Iteration  21: 5249822.360 ops/s
Iteration  22: 4903741.957 ops/s
Iteration  23: 5117638.546 ops/s
Iteration  24: 5244090.273 ops/s
Iteration  25: 4869388.234 ops/s
Iteration  26: 5041317.764 ops/s
Iteration  27: 5116637.072 ops/s
Iteration  28: 4742116.821 ops/s
Iteration  29: 5082103.428 ops/s
Iteration  30: 5068380.889 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArrayTest._Benchmark.benchmark_fusedEmptyCheck":
  5068547.956 ±(99.9%) 93631.493 ops/s [Average]
  (min, avg, max) = (4742116.821, 5068547.956, 5347242.781), stdev = 140143.222
  CI (99.9%): [4974916.462, 5162179.449] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
MaybeMergeArrayTest._Benchmark.benchmark_fusedEmptyCheck  thrpt   30  5068547.956 ± 93631.493  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeAmbTest._Benchmark.benchmark_disposeNoFurtherSignals$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeAmbTest._Benchmark.benchmark_disposeNoFurtherSignals

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 586461.960 ops/s
# Warmup Iteration   2: 2167209.960 ops/s
# Warmup Iteration   3: 2412183.576 ops/s
# Warmup Iteration   4: 3058761.110 ops/s
# Warmup Iteration   5: 2973711.800 ops/s
# Warmup Iteration   6: 3196712.344 ops/s
# Warmup Iteration   7: 2963786.925 ops/s
# Warmup Iteration   8: 3000225.030 ops/s
# Warmup Iteration   9: 3202691.803 ops/s
# Warmup Iteration  10: 2829078.715 ops/s
# Warmup Iteration  11: 3067011.590 ops/s
# Warmup Iteration  12: 3005800.857 ops/s
# Warmup Iteration  13: 3040473.145 ops/s
# Warmup Iteration  14: 2999561.282 ops/s
# Warmup Iteration  15: 3092637.946 ops/s
# Warmup Iteration  16: 3103240.691 ops/s
# Warmup Iteration  17: 3057894.005 ops/s
# Warmup Iteration  18: 3046356.015 ops/s
# Warmup Iteration  19: 3015482.102 ops/s
# Warmup Iteration  20: 3121681.023 ops/s
# Warmup Iteration  21: 3136110.130 ops/s
# Warmup Iteration  22: 2958152.417 ops/s
# Warmup Iteration  23: 3024482.836 ops/s
# Warmup Iteration  24: 3056772.352 ops/s
# Warmup Iteration  25: 3136835.261 ops/s
# Warmup Iteration  26: 3092906.144 ops/s
# Warmup Iteration  27: 3122813.958 ops/s
# Warmup Iteration  28: 3013563.200 ops/s
# Warmup Iteration  29: 3026529.479 ops/s
# Warmup Iteration  30: 3139664.759 ops/s
Iteration   1: 3021177.322 ops/s
Iteration   2: 3093667.328 ops/s
Iteration   3: 3046167.416 ops/s
Iteration   4: 3096288.965 ops/s
Iteration   5: 3033379.018 ops/s
Iteration   6: 3029058.971 ops/s
Iteration   7: 3065760.316 ops/s
Iteration   8: 3136122.861 ops/s
Iteration   9: 2994724.455 ops/s
Iteration  10: 3157165.834 ops/s
Iteration  11: 2993736.365 ops/s
Iteration  12: 3139089.769 ops/s
Iteration  13: 2935293.775 ops/s
Iteration  14: 3036223.286 ops/s
Iteration  15: 3153075.289 ops/s
Iteration  16: 3204268.326 ops/s
Iteration  17: 2984250.988 ops/s
Iteration  18: 3096379.473 ops/s
Iteration  19: 3157831.355 ops/s
Iteration  20: 3007762.755 ops/s
Iteration  21: 3174257.460 ops/s
Iteration  22: 3145896.501 ops/s
Iteration  23: 2983536.317 ops/s
Iteration  24: 3033124.963 ops/s
Iteration  25: 3078588.677 ops/s
Iteration  26: 2982121.341 ops/s
Iteration  27: 3045068.741 ops/s
Iteration  28: 3012074.590 ops/s
Iteration  29: 3089773.646 ops/s
Iteration  30: 2936608.629 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeAmbTest._Benchmark.benchmark_disposeNoFurtherSignals":
  3062082.491 ±(99.9%) 48506.185 ops/s [Average]
  (min, avg, max) = (2935293.775, 3062082.491, 3204268.326), stdev = 72601.780
  CI (99.9%): [3013576.306, 3110588.676] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
MaybeAmbTest._Benchmark.benchmark_disposeNoFurtherSignals  thrpt   30  3062082.491 ± 48506.185  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingleTest._Benchmark.benchmark_errorDelayed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingleTest._Benchmark.benchmark_errorDelayed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 127652.016 ops/s
# Warmup Iteration   2: 480345.727 ops/s
# Warmup Iteration   3: 515103.483 ops/s
# Warmup Iteration   4: 584514.406 ops/s
# Warmup Iteration   5: 479041.125 ops/s
# Warmup Iteration   6: 577382.707 ops/s
# Warmup Iteration   7: 602206.686 ops/s
# Warmup Iteration   8: 579518.649 ops/s
# Warmup Iteration   9: 577842.799 ops/s
# Warmup Iteration  10: 607136.011 ops/s
# Warmup Iteration  11: 590191.249 ops/s
# Warmup Iteration  12: 574489.625 ops/s
# Warmup Iteration  13: 565265.632 ops/s
# Warmup Iteration  14: 605402.553 ops/s
# Warmup Iteration  15: 467606.681 ops/s
# Warmup Iteration  16: 594250.347 ops/s
# Warmup Iteration  17: 585407.060 ops/s
# Warmup Iteration  18: 620521.984 ops/s
# Warmup Iteration  19: 603784.214 ops/s
# Warmup Iteration  20: 609835.283 ops/s
# Warmup Iteration  21: 630946.587 ops/s
# Warmup Iteration  22: 602774.093 ops/s
# Warmup Iteration  23: 616536.239 ops/s
# Warmup Iteration  24: 601495.806 ops/s
# Warmup Iteration  25: 612901.683 ops/s
# Warmup Iteration  26: 618079.506 ops/s
# Warmup Iteration  27: 594755.170 ops/s
# Warmup Iteration  28: 611655.164 ops/s
# Warmup Iteration  29: 630606.415 ops/s
# Warmup Iteration  30: 592445.678 ops/s
Iteration   1: 634807.311 ops/s
Iteration   2: 587359.174 ops/s
Iteration   3: 607801.985 ops/s
Iteration   4: 582666.359 ops/s
Iteration   5: 612197.809 ops/s
Iteration   6: 611694.712 ops/s
Iteration   7: 609074.410 ops/s
Iteration   8: 628078.393 ops/s
Iteration   9: 594415.945 ops/s
Iteration  10: 635113.487 ops/s
Iteration  11: 594877.303 ops/s
Iteration  12: 608015.606 ops/s
Iteration  13: 616197.238 ops/s
Iteration  14: 616440.448 ops/s
Iteration  15: 578351.163 ops/s
Iteration  16: 638163.831 ops/s
Iteration  17: 613402.999 ops/s
Iteration  18: 592221.347 ops/s
Iteration  19: 636291.372 ops/s
Iteration  20: 597744.782 ops/s
Iteration  21: 633704.015 ops/s
Iteration  22: 588638.799 ops/s
Iteration  23: 624811.837 ops/s
Iteration  24: 637507.485 ops/s
Iteration  25: 604194.436 ops/s
Iteration  26: 624103.943 ops/s
Iteration  27: 584217.270 ops/s
Iteration  28: 614543.751 ops/s
Iteration  29: 609501.468 ops/s
Iteration  30: 596120.864 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingleTest._Benchmark.benchmark_errorDelayed":
  610408.651 ±(99.9%) 12070.418 ops/s [Average]
  (min, avg, max) = (578351.163, 610408.651, 638163.831), stdev = 18066.435
  CI (99.9%): [598338.233, 622479.070] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score       Error  Units
FlowableFlatMapSingleTest._Benchmark.benchmark_errorDelayed  thrpt   30  610408.651 ± 12070.418  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableTest._Benchmark.benchmark_innerObserverObservable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableTest._Benchmark.benchmark_innerObserverObservable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 502030.853 ops/s
# Warmup Iteration   2: 1426902.449 ops/s
# Warmup Iteration   3: 1720181.232 ops/s
# Warmup Iteration   4: 1727886.154 ops/s
# Warmup Iteration   5: 1881062.183 ops/s
# Warmup Iteration   6: 1790711.074 ops/s
# Warmup Iteration   7: 1830833.875 ops/s
# Warmup Iteration   8: 1854360.460 ops/s
# Warmup Iteration   9: 1797567.448 ops/s
# Warmup Iteration  10: 1852230.033 ops/s
# Warmup Iteration  11: 1869882.883 ops/s
# Warmup Iteration  12: 1704313.320 ops/s
# Warmup Iteration  13: 1861597.538 ops/s
# Warmup Iteration  14: 1742696.033 ops/s
# Warmup Iteration  15: 1846487.641 ops/s
# Warmup Iteration  16: 1789603.387 ops/s
# Warmup Iteration  17: 1821195.708 ops/s
# Warmup Iteration  18: 1831433.196 ops/s
# Warmup Iteration  19: 1807554.792 ops/s
# Warmup Iteration  20: 1887942.666 ops/s
# Warmup Iteration  21: 1746981.857 ops/s
# Warmup Iteration  22: 1816075.508 ops/s
# Warmup Iteration  23: 1856068.602 ops/s
# Warmup Iteration  24: 1897444.131 ops/s
# Warmup Iteration  25: 1774289.934 ops/s
# Warmup Iteration  26: 1832168.939 ops/s
# Warmup Iteration  27: 1795486.253 ops/s
# Warmup Iteration  28: 1811430.195 ops/s
# Warmup Iteration  29: 1849337.700 ops/s
# Warmup Iteration  30: 1749778.539 ops/s
Iteration   1: 1910210.628 ops/s
Iteration   2: 1747322.337 ops/s
Iteration   3: 1871867.820 ops/s
Iteration   4: 1746085.522 ops/s
Iteration   5: 1805279.587 ops/s
Iteration   6: 1888616.829 ops/s
Iteration   7: 1847336.556 ops/s
Iteration   8: 1805231.168 ops/s
Iteration   9: 1838339.279 ops/s
Iteration  10: 1791134.829 ops/s
Iteration  11: 1859862.332 ops/s
Iteration  12: 1796775.598 ops/s
Iteration  13: 1813690.371 ops/s
Iteration  14: 1859174.811 ops/s
Iteration  15: 1757022.517 ops/s
Iteration  16: 1832077.268 ops/s
Iteration  17: 1774216.421 ops/s
Iteration  18: 1885598.889 ops/s
Iteration  19: 1898190.526 ops/s
Iteration  20: 1743329.282 ops/s
Iteration  21: 1867832.495 ops/s
Iteration  22: 1778473.174 ops/s
Iteration  23: 1858426.216 ops/s
Iteration  24: 1787816.532 ops/s
Iteration  25: 1845518.444 ops/s
Iteration  26: 1787991.656 ops/s
Iteration  27: 1877840.312 ops/s
Iteration  28: 1856245.620 ops/s
Iteration  29: 1767500.142 ops/s
Iteration  30: 1797197.310 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableTest._Benchmark.benchmark_innerObserverObservable":
  1823206.816 ±(99.9%) 32980.726 ops/s [Average]
  (min, avg, max) = (1743329.282, 1823206.816, 1910210.628), stdev = 49364.002
  CI (99.9%): [1790226.090, 1856187.542] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt        Score       Error  Units
ObservableFlatMapCompletableTest._Benchmark.benchmark_innerObserverObservable  thrpt   30  1823206.816 ± 32980.726  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.disposables.CompositeDisposableTest._Benchmark.benchmark_delete$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.disposables.CompositeDisposableTest._Benchmark.benchmark_delete

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3269545.735 ops/s
# Warmup Iteration   2: 5254498.384 ops/s
# Warmup Iteration   3: 5510700.092 ops/s
# Warmup Iteration   4: 5105222.099 ops/s
# Warmup Iteration   5: 5189862.588 ops/s
# Warmup Iteration   6: 4858500.485 ops/s
# Warmup Iteration   7: 5013397.261 ops/s
# Warmup Iteration   8: 5239544.019 ops/s
# Warmup Iteration   9: 4898926.098 ops/s
# Warmup Iteration  10: 3855834.459 ops/s
# Warmup Iteration  11: 5064369.200 ops/s
# Warmup Iteration  12: 4850092.194 ops/s
# Warmup Iteration  13: 5259546.000 ops/s
# Warmup Iteration  14: 4746547.342 ops/s
# Warmup Iteration  15: 5114930.839 ops/s
# Warmup Iteration  16: 5043105.406 ops/s
# Warmup Iteration  17: 5046225.330 ops/s
# Warmup Iteration  18: 4887275.559 ops/s
# Warmup Iteration  19: 5136366.180 ops/s
# Warmup Iteration  20: 5002512.208 ops/s
# Warmup Iteration  21: 5056748.044 ops/s
# Warmup Iteration  22: 5180558.134 ops/s
# Warmup Iteration  23: 4990903.102 ops/s
# Warmup Iteration  24: 5004248.118 ops/s
# Warmup Iteration  25: 5072995.706 ops/s
# Warmup Iteration  26: 4838106.598 ops/s
# Warmup Iteration  27: 5064864.622 ops/s
# Warmup Iteration  28: 5073301.967 ops/s
# Warmup Iteration  29: 4926609.561 ops/s
# Warmup Iteration  30: 5209195.506 ops/s
Iteration   1: 4961599.424 ops/s
Iteration   2: 5147929.134 ops/s
Iteration   3: 4936894.461 ops/s
Iteration   4: 5052523.909 ops/s
Iteration   5: 5111579.236 ops/s
Iteration   6: 4995956.716 ops/s
Iteration   7: 5089260.989 ops/s
Iteration   8: 5012375.488 ops/s
Iteration   9: 5057648.294 ops/s
Iteration  10: 5101230.697 ops/s
Iteration  11: 5197195.596 ops/s
Iteration  12: 5020161.672 ops/s
Iteration  13: 5253659.798 ops/s
Iteration  14: 5106888.067 ops/s
Iteration  15: 4935029.844 ops/s
Iteration  16: 5075668.470 ops/s
Iteration  17: 5086126.734 ops/s
Iteration  18: 5094500.420 ops/s
Iteration  19: 5207868.046 ops/s
Iteration  20: 4934982.061 ops/s
Iteration  21: 5157226.797 ops/s
Iteration  22: 4939377.702 ops/s
Iteration  23: 4991952.002 ops/s
Iteration  24: 5130097.662 ops/s
Iteration  25: 5031501.328 ops/s
Iteration  26: 5119506.272 ops/s
Iteration  27: 4822814.260 ops/s
Iteration  28: 5001294.670 ops/s
Iteration  29: 5083848.350 ops/s
Iteration  30: 4870742.263 ops/s


Result "io.reactivex.rxjava3.disposables.CompositeDisposableTest._Benchmark.benchmark_delete":
  5050914.679 ±(99.9%) 66934.896 ops/s [Average]
  (min, avg, max) = (4822814.260, 5050914.679, 5253659.798), stdev = 100185.008
  CI (99.9%): [4983979.783, 5117849.574] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score       Error  Units
CompositeDisposableTest._Benchmark.benchmark_delete  thrpt   30  5050914.679 ± 66934.896  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingleTest._Benchmark.benchmark_error$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingleTest._Benchmark.benchmark_error

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 96335.241 ops/s
# Warmup Iteration   2: 417662.618 ops/s
# Warmup Iteration   3: 513413.652 ops/s
# Warmup Iteration   4: 526219.501 ops/s
# Warmup Iteration   5: 485338.737 ops/s
# Warmup Iteration   6: 569014.809 ops/s
# Warmup Iteration   7: 560059.698 ops/s
# Warmup Iteration   8: 575240.473 ops/s
# Warmup Iteration   9: 547481.456 ops/s
# Warmup Iteration  10: 580089.877 ops/s
# Warmup Iteration  11: 565208.687 ops/s
# Warmup Iteration  12: 566506.363 ops/s
# Warmup Iteration  13: 566326.371 ops/s
# Warmup Iteration  14: 556594.888 ops/s
# Warmup Iteration  15: 585473.955 ops/s
# Warmup Iteration  16: 557018.543 ops/s
# Warmup Iteration  17: 611774.080 ops/s
# Warmup Iteration  18: 579934.803 ops/s
# Warmup Iteration  19: 596237.268 ops/s
# Warmup Iteration  20: 594837.401 ops/s
# Warmup Iteration  21: 592371.491 ops/s
# Warmup Iteration  22: 594681.818 ops/s
# Warmup Iteration  23: 589384.035 ops/s
# Warmup Iteration  24: 590423.799 ops/s
# Warmup Iteration  25: 604269.651 ops/s
# Warmup Iteration  26: 575703.693 ops/s
# Warmup Iteration  27: 573277.647 ops/s
# Warmup Iteration  28: 599914.936 ops/s
# Warmup Iteration  29: 581472.989 ops/s
# Warmup Iteration  30: 577468.457 ops/s
Iteration   1: 614442.872 ops/s
Iteration   2: 575944.667 ops/s
Iteration   3: 614115.307 ops/s
Iteration   4: 583932.979 ops/s
Iteration   5: 586542.605 ops/s
Iteration   6: 623870.619 ops/s
Iteration   7: 581396.781 ops/s
Iteration   8: 609556.389 ops/s
Iteration   9: 592040.086 ops/s
Iteration  10: 614176.976 ops/s
Iteration  11: 591954.904 ops/s
Iteration  12: 594368.491 ops/s
Iteration  13: 605010.405 ops/s
Iteration  14: 584962.900 ops/s
Iteration  15: 593450.736 ops/s
Iteration  16: 604081.409 ops/s
Iteration  17: 582506.318 ops/s
Iteration  18: 595867.509 ops/s
Iteration  19: 579197.381 ops/s
Iteration  20: 598586.536 ops/s
Iteration  21: 592543.146 ops/s
Iteration  22: 604340.332 ops/s
Iteration  23: 590368.275 ops/s
Iteration  24: 615676.380 ops/s
Iteration  25: 578006.057 ops/s
Iteration  26: 608141.147 ops/s
Iteration  27: 578092.641 ops/s
Iteration  28: 593129.364 ops/s
Iteration  29: 618063.711 ops/s
Iteration  30: 569294.271 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingleTest._Benchmark.benchmark_error":
  595788.706 ±(99.9%) 9681.532 ops/s [Average]
  (min, avg, max) = (569294.271, 595788.706, 623870.619), stdev = 14490.862
  CI (99.9%): [586107.175, 605470.238] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score      Error  Units
FlowableFlatMapSingleTest._Benchmark.benchmark_error  thrpt   30  595788.706 ± 9681.532  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableAmbTest._Benchmark.benchmark_ambLots$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableAmbTest._Benchmark.benchmark_ambLots

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 204344.937 ops/s
# Warmup Iteration   2: 323806.947 ops/s
# Warmup Iteration   3: 471812.351 ops/s
# Warmup Iteration   4: 624575.165 ops/s
# Warmup Iteration   5: 554985.975 ops/s
# Warmup Iteration   6: 707476.572 ops/s
# Warmup Iteration   7: 593999.121 ops/s
# Warmup Iteration   8: 716962.652 ops/s
# Warmup Iteration   9: 687370.139 ops/s
# Warmup Iteration  10: 697096.199 ops/s
# Warmup Iteration  11: 708145.760 ops/s
# Warmup Iteration  12: 670752.804 ops/s
# Warmup Iteration  13: 724152.350 ops/s
# Warmup Iteration  14: 694572.001 ops/s
# Warmup Iteration  15: 706979.497 ops/s
# Warmup Iteration  16: 735600.782 ops/s
# Warmup Iteration  17: 686781.771 ops/s
# Warmup Iteration  18: 727075.045 ops/s
# Warmup Iteration  19: 691674.676 ops/s
# Warmup Iteration  20: 721070.629 ops/s
# Warmup Iteration  21: 699494.838 ops/s
# Warmup Iteration  22: 683251.957 ops/s
# Warmup Iteration  23: 725728.961 ops/s
# Warmup Iteration  24: 679234.737 ops/s
# Warmup Iteration  25: 695895.843 ops/s
# Warmup Iteration  26: 713555.301 ops/s
# Warmup Iteration  27: 688208.687 ops/s
# Warmup Iteration  28: 682851.904 ops/s
# Warmup Iteration  29: 697549.180 ops/s
# Warmup Iteration  30: 681502.165 ops/s
Iteration   1: 732383.807 ops/s
Iteration   2: 726514.298 ops/s
Iteration   3: 717874.618 ops/s
Iteration   4: 703095.589 ops/s
Iteration   5: 726146.259 ops/s
Iteration   6: 696560.784 ops/s
Iteration   7: 729215.313 ops/s
Iteration   8: 691083.463 ops/s
Iteration   9: 708304.540 ops/s
Iteration  10: 735153.613 ops/s
Iteration  11: 699217.387 ops/s
Iteration  12: 721775.878 ops/s
Iteration  13: 680594.629 ops/s
Iteration  14: 689972.926 ops/s
Iteration  15: 729667.926 ops/s
Iteration  16: 676346.151 ops/s
Iteration  17: 705702.296 ops/s
Iteration  18: 710747.049 ops/s
Iteration  19: 701837.729 ops/s
Iteration  20: 717568.195 ops/s
Iteration  21: 716955.934 ops/s
Iteration  22: 691385.042 ops/s
Iteration  23: 716591.239 ops/s
Iteration  24: 703198.394 ops/s
Iteration  25: 722136.663 ops/s
Iteration  26: 694471.598 ops/s
Iteration  27: 725044.022 ops/s
Iteration  28: 698970.890 ops/s
Iteration  29: 674893.184 ops/s
Iteration  30: 712775.105 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableAmbTest._Benchmark.benchmark_ambLots":
  708539.484 ±(99.9%) 11280.835 ops/s [Average]
  (min, avg, max) = (674893.184, 708539.484, 735153.613), stdev = 16884.624
  CI (99.9%): [697258.649, 719820.319] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt       Score       Error  Units
CompletableAmbTest._Benchmark.benchmark_ambLots  thrpt   30  708539.484 ± 11280.835  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArrayTest._Benchmark.benchmark_firstErrors$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArrayTest._Benchmark.benchmark_firstErrors

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 144082.359 ops/s
# Warmup Iteration   2: 508061.509 ops/s
# Warmup Iteration   3: 646678.103 ops/s
# Warmup Iteration   4: 620503.956 ops/s
# Warmup Iteration   5: 657038.163 ops/s
# Warmup Iteration   6: 601664.850 ops/s
# Warmup Iteration   7: 653223.336 ops/s
# Warmup Iteration   8: 630589.723 ops/s
# Warmup Iteration   9: 588674.171 ops/s
# Warmup Iteration  10: 614925.884 ops/s
# Warmup Iteration  11: 631872.830 ops/s
# Warmup Iteration  12: 654462.261 ops/s
# Warmup Iteration  13: 640203.664 ops/s
# Warmup Iteration  14: 638593.812 ops/s
# Warmup Iteration  15: 633917.038 ops/s
# Warmup Iteration  16: 635529.502 ops/s
# Warmup Iteration  17: 635470.687 ops/s
# Warmup Iteration  18: 645779.330 ops/s
# Warmup Iteration  19: 686963.558 ops/s
# Warmup Iteration  20: 669047.157 ops/s
# Warmup Iteration  21: 689345.197 ops/s
# Warmup Iteration  22: 652969.419 ops/s
# Warmup Iteration  23: 639338.886 ops/s
# Warmup Iteration  24: 683935.167 ops/s
# Warmup Iteration  25: 670572.783 ops/s
# Warmup Iteration  26: 687988.663 ops/s
# Warmup Iteration  27: 677384.030 ops/s
# Warmup Iteration  28: 673709.249 ops/s
# Warmup Iteration  29: 670743.612 ops/s
# Warmup Iteration  30: 686971.219 ops/s
Iteration   1: 702190.754 ops/s
Iteration   2: 656249.101 ops/s
Iteration   3: 680538.100 ops/s
Iteration   4: 673929.472 ops/s
Iteration   5: 671353.129 ops/s
Iteration   6: 679546.810 ops/s
Iteration   7: 668626.585 ops/s
Iteration   8: 707263.682 ops/s
Iteration   9: 652556.856 ops/s
Iteration  10: 685011.096 ops/s
Iteration  11: 662481.349 ops/s
Iteration  12: 673772.511 ops/s
Iteration  13: 660437.039 ops/s
Iteration  14: 685440.159 ops/s
Iteration  15: 675371.421 ops/s
Iteration  16: 691500.106 ops/s
Iteration  17: 659969.028 ops/s
Iteration  18: 688464.467 ops/s
Iteration  19: 677161.069 ops/s
Iteration  20: 678320.034 ops/s
Iteration  21: 688473.761 ops/s
Iteration  22: 670658.238 ops/s
Iteration  23: 696682.927 ops/s
Iteration  24: 646016.155 ops/s
Iteration  25: 709102.451 ops/s
Iteration  26: 674797.039 ops/s
Iteration  27: 683058.401 ops/s
Iteration  28: 664446.720 ops/s
Iteration  29: 680005.269 ops/s
Iteration  30: 691188.764 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArrayTest._Benchmark.benchmark_firstErrors":
  677820.416 ±(99.9%) 10317.019 ops/s [Average]
  (min, avg, max) = (646016.155, 677820.416, 709102.451), stdev = 15442.029
  CI (99.9%): [667503.398, 688137.435] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score       Error  Units
MaybeMergeArrayTest._Benchmark.benchmark_firstErrors  thrpt   30  677820.416 ± 10317.019  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.schedulers.ScheduledRunnableTest._Benchmark.benchmark_crashReported$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.schedulers.ScheduledRunnableTest._Benchmark.benchmark_crashReported

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 87215.896 ops/s
# Warmup Iteration   2: 220790.221 ops/s
# Warmup Iteration   3: 231982.096 ops/s
# Warmup Iteration   4: 223096.243 ops/s
# Warmup Iteration   5: 264545.155 ops/s
# Warmup Iteration   6: 254812.951 ops/s
# Warmup Iteration   7: 270406.429 ops/s
# Warmup Iteration   8: 252893.437 ops/s
# Warmup Iteration   9: 260284.662 ops/s
# Warmup Iteration  10: 260576.725 ops/s
# Warmup Iteration  11: 254830.998 ops/s
# Warmup Iteration  12: 264913.574 ops/s
# Warmup Iteration  13: 258584.225 ops/s
# Warmup Iteration  14: 268850.439 ops/s
# Warmup Iteration  15: 269447.974 ops/s
# Warmup Iteration  16: 249965.813 ops/s
# Warmup Iteration  17: 269645.096 ops/s
# Warmup Iteration  18: 275908.719 ops/s
# Warmup Iteration  19: 270151.917 ops/s
# Warmup Iteration  20: 283543.994 ops/s
# Warmup Iteration  21: 280732.694 ops/s
# Warmup Iteration  22: 264962.056 ops/s
# Warmup Iteration  23: 286745.948 ops/s
# Warmup Iteration  24: 266726.596 ops/s
# Warmup Iteration  25: 263703.249 ops/s
# Warmup Iteration  26: 279239.020 ops/s
# Warmup Iteration  27: 288083.075 ops/s
# Warmup Iteration  28: 265377.494 ops/s
# Warmup Iteration  29: 278146.876 ops/s
# Warmup Iteration  30: 278910.738 ops/s
Iteration   1: 266661.393 ops/s
Iteration   2: 282793.602 ops/s
Iteration   3: 265366.176 ops/s
Iteration   4: 271573.494 ops/s
Iteration   5: 289374.519 ops/s
Iteration   6: 263758.781 ops/s
Iteration   7: 278584.066 ops/s
Iteration   8: 268771.500 ops/s
Iteration   9: 279481.874 ops/s
Iteration  10: 276665.026 ops/s
Iteration  11: 270512.259 ops/s
Iteration  12: 273262.159 ops/s
Iteration  13: 272491.940 ops/s
Iteration  14: 272734.874 ops/s
Iteration  15: 277955.692 ops/s
Iteration  16: 270169.832 ops/s
Iteration  17: 267765.639 ops/s
Iteration  18: 285026.780 ops/s
Iteration  19: 271224.510 ops/s
Iteration  20: 271644.889 ops/s
Iteration  21: 268388.024 ops/s
Iteration  22: 272114.926 ops/s
Iteration  23: 284396.774 ops/s
Iteration  24: 262377.572 ops/s
Iteration  25: 286434.667 ops/s
Iteration  26: 262862.230 ops/s
Iteration  27: 275430.523 ops/s
Iteration  28: 275235.209 ops/s
Iteration  29: 266135.924 ops/s
Iteration  30: 279980.173 ops/s


Result "io.reactivex.rxjava3.internal.schedulers.ScheduledRunnableTest._Benchmark.benchmark_crashReported":
  273639.168 ±(99.9%) 4826.049 ops/s [Average]
  (min, avg, max) = (262377.572, 273639.168, 289374.519), stdev = 7223.403
  CI (99.9%): [268813.119, 278465.216] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score      Error  Units
ScheduledRunnableTest._Benchmark.benchmark_crashReported  thrpt   30  273639.168 ± 4826.049  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.disposables.CompositeDisposableTest._Benchmark.benchmark_disposeThrowsError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.disposables.CompositeDisposableTest._Benchmark.benchmark_disposeThrowsError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 320697.294 ops/s
# Warmup Iteration   2: 465278.226 ops/s
# Warmup Iteration   3: 537573.755 ops/s
# Warmup Iteration   4: 496224.169 ops/s
# Warmup Iteration   5: 526342.624 ops/s
# Warmup Iteration   6: 550416.202 ops/s
# Warmup Iteration   7: 531100.498 ops/s
# Warmup Iteration   8: 542166.490 ops/s
# Warmup Iteration   9: 555378.381 ops/s
# Warmup Iteration  10: 524715.382 ops/s
# Warmup Iteration  11: 544157.310 ops/s
# Warmup Iteration  12: 534558.763 ops/s
# Warmup Iteration  13: 552368.889 ops/s
# Warmup Iteration  14: 565538.149 ops/s
# Warmup Iteration  15: 536179.380 ops/s
# Warmup Iteration  16: 540432.203 ops/s
# Warmup Iteration  17: 567777.049 ops/s
# Warmup Iteration  18: 558495.820 ops/s
# Warmup Iteration  19: 566753.274 ops/s
# Warmup Iteration  20: 583423.094 ops/s
# Warmup Iteration  21: 553721.236 ops/s
# Warmup Iteration  22: 574535.225 ops/s
# Warmup Iteration  23: 561958.357 ops/s
# Warmup Iteration  24: 554737.800 ops/s
# Warmup Iteration  25: 572637.502 ops/s
# Warmup Iteration  26: 550513.199 ops/s
# Warmup Iteration  27: 556194.477 ops/s
# Warmup Iteration  28: 563466.350 ops/s
# Warmup Iteration  29: 559815.111 ops/s
# Warmup Iteration  30: 560536.495 ops/s
Iteration   1: 547964.357 ops/s
Iteration   2: 581406.635 ops/s
Iteration   3: 552675.225 ops/s
Iteration   4: 550597.947 ops/s
Iteration   5: 592101.171 ops/s
Iteration   6: 554927.138 ops/s
Iteration   7: 554999.376 ops/s
Iteration   8: 576212.844 ops/s
Iteration   9: 542380.348 ops/s
Iteration  10: 564882.494 ops/s
Iteration  11: 575719.735 ops/s
Iteration  12: 546363.713 ops/s
Iteration  13: 562060.551 ops/s
Iteration  14: 561949.434 ops/s
Iteration  15: 558696.125 ops/s
Iteration  16: 575299.519 ops/s
Iteration  17: 533652.040 ops/s
Iteration  18: 527927.847 ops/s
Iteration  19: 570375.553 ops/s
Iteration  20: 549905.960 ops/s
Iteration  21: 576011.881 ops/s
Iteration  22: 552317.502 ops/s
Iteration  23: 576780.825 ops/s
Iteration  24: 588854.832 ops/s
Iteration  25: 560282.369 ops/s
Iteration  26: 475965.318 ops/s
Iteration  27: 579959.077 ops/s
Iteration  28: 585486.390 ops/s
Iteration  29: 536974.633 ops/s
Iteration  30: 570344.563 ops/s


Result "io.reactivex.rxjava3.disposables.CompositeDisposableTest._Benchmark.benchmark_disposeThrowsError":
  559435.847 ±(99.9%) 15295.735 ops/s [Average]
  (min, avg, max) = (475965.318, 559435.847, 592101.171), stdev = 22893.938
  CI (99.9%): [544140.111, 574731.582] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score       Error  Units
CompositeDisposableTest._Benchmark.benchmark_disposeThrowsError  thrpt   30  559435.847 ± 15295.735  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybeTest._Benchmark.benchmark_undeliverableUponCancel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybeTest._Benchmark.benchmark_undeliverableUponCancel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 54769.903 ops/s
# Warmup Iteration   2: 166750.752 ops/s
# Warmup Iteration   3: 191669.773 ops/s
# Warmup Iteration   4: 205229.557 ops/s
# Warmup Iteration   5: 198617.091 ops/s
# Warmup Iteration   6: 205903.590 ops/s
# Warmup Iteration   7: 184525.639 ops/s
# Warmup Iteration   8: 215133.303 ops/s
# Warmup Iteration   9: 203937.071 ops/s
# Warmup Iteration  10: 216748.863 ops/s
# Warmup Iteration  11: 211873.423 ops/s
# Warmup Iteration  12: 209044.044 ops/s
# Warmup Iteration  13: 212849.450 ops/s
# Warmup Iteration  14: 207376.952 ops/s
# Warmup Iteration  15: 210848.667 ops/s
# Warmup Iteration  16: 206984.910 ops/s
# Warmup Iteration  17: 216243.889 ops/s
# Warmup Iteration  18: 215510.607 ops/s
# Warmup Iteration  19: 216036.721 ops/s
# Warmup Iteration  20: 217018.308 ops/s
# Warmup Iteration  21: 212675.752 ops/s
# Warmup Iteration  22: 221875.084 ops/s
# Warmup Iteration  23: 219032.055 ops/s
# Warmup Iteration  24: 214468.456 ops/s
# Warmup Iteration  25: 220689.987 ops/s
# Warmup Iteration  26: 218104.021 ops/s
# Warmup Iteration  27: 223986.101 ops/s
# Warmup Iteration  28: 212324.140 ops/s
# Warmup Iteration  29: 220511.293 ops/s
# Warmup Iteration  30: 220230.517 ops/s
Iteration   1: 212836.511 ops/s
Iteration   2: 220765.823 ops/s
Iteration   3: 215031.636 ops/s
Iteration   4: 220162.329 ops/s
Iteration   5: 226233.242 ops/s
Iteration   6: 220844.026 ops/s
Iteration   7: 217571.566 ops/s
Iteration   8: 222009.358 ops/s
Iteration   9: 225023.839 ops/s
Iteration  10: 213766.383 ops/s
Iteration  11: 221578.947 ops/s
Iteration  12: 215015.969 ops/s
Iteration  13: 220672.993 ops/s
Iteration  14: 218723.164 ops/s
Iteration  15: 208598.581 ops/s
Iteration  16: 226404.756 ops/s
Iteration  17: 217742.308 ops/s
Iteration  18: 215917.219 ops/s
Iteration  19: 213606.651 ops/s
Iteration  20: 221723.669 ops/s
Iteration  21: 215462.353 ops/s
Iteration  22: 224248.405 ops/s
Iteration  23: 215295.575 ops/s
Iteration  24: 222287.338 ops/s
Iteration  25: 219628.104 ops/s
Iteration  26: 218494.809 ops/s
Iteration  27: 222732.924 ops/s
Iteration  28: 214280.655 ops/s
Iteration  29: 224425.374 ops/s
Iteration  30: 221294.024 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybeTest._Benchmark.benchmark_undeliverableUponCancel":
  219079.284 ±(99.9%) 2937.670 ops/s [Average]
  (min, avg, max) = (208598.581, 219079.284, 226404.756), stdev = 4396.967
  CI (99.9%): [216141.614, 222016.954] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score      Error  Units
ObservableFlatMapMaybeTest._Benchmark.benchmark_undeliverableUponCancel  thrpt   30  219079.284 ± 2937.670  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybeTest._Benchmark.benchmark_undeliverableUponCancelDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybeTest._Benchmark.benchmark_undeliverableUponCancelDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 26141.881 ops/s
# Warmup Iteration   2: 158071.366 ops/s
# Warmup Iteration   3: 185440.106 ops/s
# Warmup Iteration   4: 200783.073 ops/s
# Warmup Iteration   5: 187627.367 ops/s
# Warmup Iteration   6: 212565.687 ops/s
# Warmup Iteration   7: 212189.313 ops/s
# Warmup Iteration   8: 216488.888 ops/s
# Warmup Iteration   9: 207838.857 ops/s
# Warmup Iteration  10: 220551.866 ops/s
# Warmup Iteration  11: 219994.868 ops/s
# Warmup Iteration  12: 205023.557 ops/s
# Warmup Iteration  13: 210925.367 ops/s
# Warmup Iteration  14: 212971.173 ops/s
# Warmup Iteration  15: 208362.593 ops/s
# Warmup Iteration  16: 214779.576 ops/s
# Warmup Iteration  17: 211720.759 ops/s
# Warmup Iteration  18: 220619.874 ops/s
# Warmup Iteration  19: 227725.624 ops/s
# Warmup Iteration  20: 218718.652 ops/s
# Warmup Iteration  21: 224635.046 ops/s
# Warmup Iteration  22: 213113.962 ops/s
# Warmup Iteration  23: 221849.063 ops/s
# Warmup Iteration  24: 223965.554 ops/s
# Warmup Iteration  25: 214040.373 ops/s
# Warmup Iteration  26: 222840.456 ops/s
# Warmup Iteration  27: 219624.971 ops/s
# Warmup Iteration  28: 216688.840 ops/s
# Warmup Iteration  29: 223193.251 ops/s
# Warmup Iteration  30: 217617.545 ops/s
Iteration   1: 218114.937 ops/s
Iteration   2: 221935.052 ops/s
Iteration   3: 210533.544 ops/s
Iteration   4: 220543.583 ops/s
Iteration   5: 218652.367 ops/s
Iteration   6: 214038.065 ops/s
Iteration   7: 228128.308 ops/s
Iteration   8: 213399.225 ops/s
Iteration   9: 219570.120 ops/s
Iteration  10: 222871.817 ops/s
Iteration  11: 217258.099 ops/s
Iteration  12: 218289.401 ops/s
Iteration  13: 214348.802 ops/s
Iteration  14: 216079.002 ops/s
Iteration  15: 221325.543 ops/s
Iteration  16: 215837.585 ops/s
Iteration  17: 220757.427 ops/s
Iteration  18: 225509.010 ops/s
Iteration  19: 210872.673 ops/s
Iteration  20: 221633.470 ops/s
Iteration  21: 171406.973 ops/s
Iteration  22: 220482.039 ops/s
Iteration  23: 217396.221 ops/s
Iteration  24: 223018.229 ops/s
Iteration  25: 211129.436 ops/s
Iteration  26: 217356.627 ops/s
Iteration  27: 225715.350 ops/s
Iteration  28: 216172.623 ops/s
Iteration  29: 212361.201 ops/s
Iteration  30: 226848.250 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybeTest._Benchmark.benchmark_undeliverableUponCancelDelayError":
  217052.833 ±(99.9%) 6566.620 ops/s [Average]
  (min, avg, max) = (171406.973, 217052.833, 228128.308), stdev = 9828.608
  CI (99.9%): [210486.213, 223619.452] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           Mode  Cnt       Score      Error  Units
ObservableFlatMapMaybeTest._Benchmark.benchmark_undeliverableUponCancelDelayError  thrpt   30  217052.833 ± 6566.620  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_undeliverableUponCancelDelayErrorTillEnd$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_undeliverableUponCancelDelayErrorTillEnd

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 18948.506 ops/s
# Warmup Iteration   2: 120533.235 ops/s
# Warmup Iteration   3: 173387.835 ops/s
# Warmup Iteration   4: 193400.231 ops/s
# Warmup Iteration   5: 188371.894 ops/s
# Warmup Iteration   6: 194622.184 ops/s
# Warmup Iteration   7: 188908.948 ops/s
# Warmup Iteration   8: 184323.029 ops/s
# Warmup Iteration   9: 198738.212 ops/s
# Warmup Iteration  10: 186673.159 ops/s
# Warmup Iteration  11: 192544.737 ops/s
# Warmup Iteration  12: 180157.695 ops/s
# Warmup Iteration  13: 197881.928 ops/s
# Warmup Iteration  14: 187715.005 ops/s
# Warmup Iteration  15: 195873.024 ops/s
# Warmup Iteration  16: 193663.870 ops/s
# Warmup Iteration  17: 196879.019 ops/s
# Warmup Iteration  18: 196320.060 ops/s
# Warmup Iteration  19: 190081.664 ops/s
# Warmup Iteration  20: 205115.285 ops/s
# Warmup Iteration  21: 194687.935 ops/s
# Warmup Iteration  22: 200233.228 ops/s
# Warmup Iteration  23: 194434.175 ops/s
# Warmup Iteration  24: 181846.877 ops/s
# Warmup Iteration  25: 192217.108 ops/s
# Warmup Iteration  26: 203844.155 ops/s
# Warmup Iteration  27: 195189.555 ops/s
# Warmup Iteration  28: 191576.046 ops/s
# Warmup Iteration  29: 201963.479 ops/s
# Warmup Iteration  30: 193067.024 ops/s
Iteration   1: 199661.496 ops/s
Iteration   2: 196443.950 ops/s
Iteration   3: 192473.198 ops/s
Iteration   4: 206139.539 ops/s
Iteration   5: 196433.107 ops/s
Iteration   6: 195475.889 ops/s
Iteration   7: 200620.727 ops/s
Iteration   8: 198397.620 ops/s
Iteration   9: 200542.282 ops/s
Iteration  10: 194309.098 ops/s
Iteration  11: 199321.977 ops/s
Iteration  12: 200600.940 ops/s
Iteration  13: 195243.625 ops/s
Iteration  14: 198415.045 ops/s
Iteration  15: 196688.387 ops/s
Iteration  16: 198927.941 ops/s
Iteration  17: 197467.936 ops/s
Iteration  18: 195982.909 ops/s
Iteration  19: 202846.285 ops/s
Iteration  20: 186457.420 ops/s
Iteration  21: 202988.756 ops/s
Iteration  22: 186927.247 ops/s
Iteration  23: 201287.734 ops/s
Iteration  24: 193899.715 ops/s
Iteration  25: 199114.500 ops/s
Iteration  26: 197643.987 ops/s
Iteration  27: 191151.744 ops/s
Iteration  28: 208580.697 ops/s
Iteration  29: 192995.923 ops/s
Iteration  30: 198259.984 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_undeliverableUponCancelDelayErrorTillEnd":
  197509.989 ±(99.9%) 3213.966 ops/s [Average]
  (min, avg, max) = (186457.420, 197509.989, 208580.697), stdev = 4810.513
  CI (99.9%): [194296.023, 200723.954] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                    Mode  Cnt       Score      Error  Units
ObservableConcatMapEagerTest._Benchmark.benchmark_undeliverableUponCancelDelayErrorTillEnd  thrpt   30  197509.989 ± 3213.966  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableGroupByTest._Benchmark.benchmark_newGroupValueSelectorFails$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableGroupByTest._Benchmark.benchmark_newGroupValueSelectorFails

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 47406.691 ops/s
# Warmup Iteration   2: 165974.164 ops/s
# Warmup Iteration   3: 265200.357 ops/s
# Warmup Iteration   4: 389609.095 ops/s
# Warmup Iteration   5: 409939.623 ops/s
# Warmup Iteration   6: 387133.679 ops/s
# Warmup Iteration   7: 379655.483 ops/s
# Warmup Iteration   8: 421025.953 ops/s
# Warmup Iteration   9: 402717.889 ops/s
# Warmup Iteration  10: 420323.218 ops/s
# Warmup Iteration  11: 406326.600 ops/s
# Warmup Iteration  12: 410754.403 ops/s
# Warmup Iteration  13: 412055.029 ops/s
# Warmup Iteration  14: 398529.163 ops/s
# Warmup Iteration  15: 411524.554 ops/s
# Warmup Iteration  16: 411871.234 ops/s
# Warmup Iteration  17: 410603.572 ops/s
# Warmup Iteration  18: 414916.793 ops/s
# Warmup Iteration  19: 427207.399 ops/s
# Warmup Iteration  20: 403678.089 ops/s
# Warmup Iteration  21: 432265.009 ops/s
# Warmup Iteration  22: 423254.163 ops/s
# Warmup Iteration  23: 426831.537 ops/s
# Warmup Iteration  24: 422278.546 ops/s
# Warmup Iteration  25: 408087.203 ops/s
# Warmup Iteration  26: 418448.881 ops/s
# Warmup Iteration  27: 426144.874 ops/s
# Warmup Iteration  28: 437004.281 ops/s
# Warmup Iteration  29: 409215.996 ops/s
# Warmup Iteration  30: 429237.728 ops/s
Iteration   1: 415415.612 ops/s
Iteration   2: 413372.675 ops/s
Iteration   3: 406489.509 ops/s
Iteration   4: 424482.928 ops/s
Iteration   5: 409468.488 ops/s
Iteration   6: 422646.250 ops/s
Iteration   7: 413120.898 ops/s
Iteration   8: 410150.775 ops/s
Iteration   9: 430062.918 ops/s
Iteration  10: 419109.785 ops/s
Iteration  11: 424829.607 ops/s
Iteration  12: 424262.836 ops/s
Iteration  13: 426507.579 ops/s
Iteration  14: 413424.993 ops/s
Iteration  15: 413824.447 ops/s
Iteration  16: 351711.384 ops/s
Iteration  17: 402633.764 ops/s
Iteration  18: 438967.441 ops/s
Iteration  19: 403398.446 ops/s
Iteration  20: 429366.004 ops/s
Iteration  21: 430600.827 ops/s
Iteration  22: 406782.249 ops/s
Iteration  23: 439812.098 ops/s
Iteration  24: 436126.928 ops/s
Iteration  25: 401668.605 ops/s
Iteration  26: 423891.388 ops/s
Iteration  27: 418580.241 ops/s
Iteration  28: 435547.895 ops/s
Iteration  29: 424745.882 ops/s
Iteration  30: 421432.326 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableGroupByTest._Benchmark.benchmark_newGroupValueSelectorFails":
  417747.826 ±(99.9%) 11021.681 ops/s [Average]
  (min, avg, max) = (351711.384, 417747.826, 439812.098), stdev = 16496.735
  CI (99.9%): [406726.145, 428769.507] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score       Error  Units
ObservableGroupByTest._Benchmark.benchmark_newGroupValueSelectorFails  thrpt   30  417747.826 ± 11021.681  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_innerErrorsMainCancelled$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_innerErrorsMainCancelled

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 113707.852 ops/s
# Warmup Iteration   2: 367502.117 ops/s
# Warmup Iteration   3: 472506.689 ops/s
# Warmup Iteration   4: 490375.743 ops/s
# Warmup Iteration   5: 506264.203 ops/s
# Warmup Iteration   6: 497829.655 ops/s
# Warmup Iteration   7: 465900.282 ops/s
# Warmup Iteration   8: 508111.946 ops/s
# Warmup Iteration   9: 485374.690 ops/s
# Warmup Iteration  10: 508299.733 ops/s
# Warmup Iteration  11: 496313.015 ops/s
# Warmup Iteration  12: 482036.663 ops/s
# Warmup Iteration  13: 493267.718 ops/s
# Warmup Iteration  14: 499889.117 ops/s
# Warmup Iteration  15: 493482.522 ops/s
# Warmup Iteration  16: 521795.496 ops/s
# Warmup Iteration  17: 508524.176 ops/s
# Warmup Iteration  18: 517817.702 ops/s
# Warmup Iteration  19: 518939.890 ops/s
# Warmup Iteration  20: 530736.797 ops/s
# Warmup Iteration  21: 536217.960 ops/s
# Warmup Iteration  22: 515672.895 ops/s
# Warmup Iteration  23: 524542.509 ops/s
# Warmup Iteration  24: 515305.582 ops/s
# Warmup Iteration  25: 542279.537 ops/s
# Warmup Iteration  26: 508954.659 ops/s
# Warmup Iteration  27: 540989.097 ops/s
# Warmup Iteration  28: 539077.746 ops/s
# Warmup Iteration  29: 506026.015 ops/s
# Warmup Iteration  30: 537839.016 ops/s
Iteration   1: 507701.774 ops/s
Iteration   2: 512938.148 ops/s
Iteration   3: 521035.619 ops/s
Iteration   4: 516905.044 ops/s
Iteration   5: 516663.453 ops/s
Iteration   6: 513526.860 ops/s
Iteration   7: 525857.307 ops/s
Iteration   8: 515562.475 ops/s
Iteration   9: 510542.960 ops/s
Iteration  10: 521666.611 ops/s
Iteration  11: 524955.127 ops/s
Iteration  12: 540830.560 ops/s
Iteration  13: 510371.219 ops/s
Iteration  14: 525488.817 ops/s
Iteration  15: 541129.499 ops/s
Iteration  16: 502669.421 ops/s
Iteration  17: 517606.543 ops/s
Iteration  18: 537443.548 ops/s
Iteration  19: 517236.036 ops/s
Iteration  20: 547622.327 ops/s
Iteration  21: 509286.510 ops/s
Iteration  22: 532562.733 ops/s
Iteration  23: 523270.550 ops/s
Iteration  24: 525189.426 ops/s
Iteration  25: 539640.384 ops/s
Iteration  26: 516027.075 ops/s
Iteration  27: 528699.379 ops/s
Iteration  28: 510907.942 ops/s
Iteration  29: 531990.594 ops/s
Iteration  30: 520355.257 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_innerErrorsMainCancelled":
  522189.440 ±(99.9%) 7536.357 ops/s [Average]
  (min, avg, max) = (502669.421, 522189.440, 547622.327), stdev = 11280.065
  CI (99.9%): [514653.083, 529725.797] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score      Error  Units
FlowableFlatMapTest._Benchmark.benchmark_innerErrorsMainCancelled  thrpt   30  522189.440 ± 7536.357  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_mainErrorsInnerCancelled$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_mainErrorsInnerCancelled

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 130194.390 ops/s
# Warmup Iteration   2: 404836.323 ops/s
# Warmup Iteration   3: 457289.126 ops/s
# Warmup Iteration   4: 454881.345 ops/s
# Warmup Iteration   5: 481720.933 ops/s
# Warmup Iteration   6: 476586.145 ops/s
# Warmup Iteration   7: 518729.379 ops/s
# Warmup Iteration   8: 494394.053 ops/s
# Warmup Iteration   9: 528950.430 ops/s
# Warmup Iteration  10: 510795.620 ops/s
# Warmup Iteration  11: 491997.296 ops/s
# Warmup Iteration  12: 514101.734 ops/s
# Warmup Iteration  13: 498365.090 ops/s
# Warmup Iteration  14: 500085.057 ops/s
# Warmup Iteration  15: 512694.110 ops/s
# Warmup Iteration  16: 499278.679 ops/s
# Warmup Iteration  17: 550267.579 ops/s
# Warmup Iteration  18: 545611.219 ops/s
# Warmup Iteration  19: 511191.882 ops/s
# Warmup Iteration  20: 544778.096 ops/s
# Warmup Iteration  21: 516666.186 ops/s
# Warmup Iteration  22: 522653.910 ops/s
# Warmup Iteration  23: 552328.123 ops/s
# Warmup Iteration  24: 506331.006 ops/s
# Warmup Iteration  25: 529665.829 ops/s
# Warmup Iteration  26: 528296.321 ops/s
# Warmup Iteration  27: 537070.944 ops/s
# Warmup Iteration  28: 517715.348 ops/s
# Warmup Iteration  29: 524541.542 ops/s
# Warmup Iteration  30: 543903.360 ops/s
Iteration   1: 540493.232 ops/s
Iteration   2: 533338.526 ops/s
Iteration   3: 505709.137 ops/s
Iteration   4: 544490.908 ops/s
Iteration   5: 516700.865 ops/s
Iteration   6: 531668.757 ops/s
Iteration   7: 538608.903 ops/s
Iteration   8: 506384.364 ops/s
Iteration   9: 548871.760 ops/s
Iteration  10: 488508.242 ops/s
Iteration  11: 446734.535 ops/s
Iteration  12: 542201.523 ops/s
Iteration  13: 513524.949 ops/s
Iteration  14: 522203.609 ops/s
Iteration  15: 538039.619 ops/s
Iteration  16: 511410.082 ops/s
Iteration  17: 537259.419 ops/s
Iteration  18: 526664.491 ops/s
Iteration  19: 514420.160 ops/s
Iteration  20: 543200.646 ops/s
Iteration  21: 509282.411 ops/s
Iteration  22: 541546.648 ops/s
Iteration  23: 529035.782 ops/s
Iteration  24: 530513.960 ops/s
Iteration  25: 526966.792 ops/s
Iteration  26: 534443.316 ops/s
Iteration  27: 545376.313 ops/s
Iteration  28: 511407.411 ops/s
Iteration  29: 539915.682 ops/s
Iteration  30: 521643.402 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_mainErrorsInnerCancelled":
  524685.515 ±(99.9%) 13932.586 ops/s [Average]
  (min, avg, max) = (446734.535, 524685.515, 548871.760), stdev = 20853.641
  CI (99.9%): [510752.929, 538618.101] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score       Error  Units
FlowableFlatMapTest._Benchmark.benchmark_mainErrorsInnerCancelled  thrpt   30  524685.515 ± 13932.586  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableToFutureTest._Benchmark.benchmark_getWithEmptyFlowable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableToFutureTest._Benchmark.benchmark_getWithEmptyFlowable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 171881.640 ops/s
# Warmup Iteration   2: 307858.819 ops/s
# Warmup Iteration   3: 340541.836 ops/s
# Warmup Iteration   4: 343743.352 ops/s
# Warmup Iteration   5: 341923.961 ops/s
# Warmup Iteration   6: 329525.175 ops/s
# Warmup Iteration   7: 330873.927 ops/s
# Warmup Iteration   8: 343122.141 ops/s
# Warmup Iteration   9: 339174.793 ops/s
# Warmup Iteration  10: 352370.776 ops/s
# Warmup Iteration  11: 353889.370 ops/s
# Warmup Iteration  12: 330596.064 ops/s
# Warmup Iteration  13: 346770.148 ops/s
# Warmup Iteration  14: 331996.511 ops/s
# Warmup Iteration  15: 349235.780 ops/s
# Warmup Iteration  16: 336372.839 ops/s
# Warmup Iteration  17: 360348.238 ops/s
# Warmup Iteration  18: 356895.163 ops/s
# Warmup Iteration  19: 362781.165 ops/s
# Warmup Iteration  20: 363933.585 ops/s
# Warmup Iteration  21: 350410.372 ops/s
# Warmup Iteration  22: 356713.620 ops/s
# Warmup Iteration  23: 373222.348 ops/s
# Warmup Iteration  24: 375162.123 ops/s
# Warmup Iteration  25: 353132.918 ops/s
# Warmup Iteration  26: 366360.785 ops/s
# Warmup Iteration  27: 364816.880 ops/s
# Warmup Iteration  28: 357735.439 ops/s
# Warmup Iteration  29: 369424.640 ops/s
# Warmup Iteration  30: 348331.268 ops/s
Iteration   1: 362910.436 ops/s
Iteration   2: 368232.814 ops/s
Iteration   3: 347366.269 ops/s
Iteration   4: 371128.901 ops/s
Iteration   5: 345317.554 ops/s
Iteration   6: 365301.962 ops/s
Iteration   7: 369924.243 ops/s
Iteration   8: 354367.137 ops/s
Iteration   9: 364202.068 ops/s
Iteration  10: 359839.317 ops/s
Iteration  11: 370824.335 ops/s
Iteration  12: 349453.311 ops/s
Iteration  13: 354281.990 ops/s
Iteration  14: 375282.840 ops/s
Iteration  15: 363456.171 ops/s
Iteration  16: 353377.844 ops/s
Iteration  17: 364454.119 ops/s
Iteration  18: 356260.011 ops/s
Iteration  19: 377127.015 ops/s
Iteration  20: 352421.809 ops/s
Iteration  21: 359278.701 ops/s
Iteration  22: 366539.743 ops/s
Iteration  23: 360717.603 ops/s
Iteration  24: 361844.626 ops/s
Iteration  25: 361148.496 ops/s
Iteration  26: 371764.337 ops/s
Iteration  27: 357322.877 ops/s
Iteration  28: 374228.695 ops/s
Iteration  29: 356556.868 ops/s
Iteration  30: 348725.128 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableToFutureTest._Benchmark.benchmark_getWithEmptyFlowable":
  361455.241 ±(99.9%) 5763.829 ops/s [Average]
  (min, avg, max) = (345317.554, 361455.241, 377127.015), stdev = 8627.029
  CI (99.9%): [355691.411, 367219.070] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score      Error  Units
BlockingFlowableToFutureTest._Benchmark.benchmark_getWithEmptyFlowable  thrpt   30  361455.241 ± 5763.829  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithStartEndFlowableTest._Benchmark.benchmark_boundarySelectorNormal$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithStartEndFlowableTest._Benchmark.benchmark_boundarySelectorNormal

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 4376.776 ops/s
# Warmup Iteration   2: 45563.219 ops/s
# Warmup Iteration   3: 126158.235 ops/s
# Warmup Iteration   4: 193237.578 ops/s
# Warmup Iteration   5: 204354.903 ops/s
# Warmup Iteration   6: 198586.234 ops/s
# Warmup Iteration   7: 195435.100 ops/s
# Warmup Iteration   8: 197416.461 ops/s
# Warmup Iteration   9: 213039.716 ops/s
# Warmup Iteration  10: 203931.988 ops/s
# Warmup Iteration  11: 203560.874 ops/s
# Warmup Iteration  12: 203093.760 ops/s
# Warmup Iteration  13: 207108.402 ops/s
# Warmup Iteration  14: 201052.324 ops/s
# Warmup Iteration  15: 206090.620 ops/s
# Warmup Iteration  16: 209529.084 ops/s
# Warmup Iteration  17: 197089.423 ops/s
# Warmup Iteration  18: 213262.062 ops/s
# Warmup Iteration  19: 198858.518 ops/s
# Warmup Iteration  20: 205653.242 ops/s
# Warmup Iteration  21: 212599.460 ops/s
# Warmup Iteration  22: 204554.066 ops/s
# Warmup Iteration  23: 202340.583 ops/s
# Warmup Iteration  24: 200445.850 ops/s
# Warmup Iteration  25: 204486.707 ops/s
# Warmup Iteration  26: 208126.167 ops/s
# Warmup Iteration  27: 202850.344 ops/s
# Warmup Iteration  28: 206383.944 ops/s
# Warmup Iteration  29: 207943.424 ops/s
# Warmup Iteration  30: 205763.884 ops/s
Iteration   1: 209980.120 ops/s
Iteration   2: 200279.275 ops/s
Iteration   3: 214136.847 ops/s
Iteration   4: 207589.834 ops/s
Iteration   5: 203726.233 ops/s
Iteration   6: 174510.983 ops/s
Iteration   7: 202001.029 ops/s
Iteration   8: 209741.123 ops/s
Iteration   9: 201577.923 ops/s
Iteration  10: 210279.156 ops/s
Iteration  11: 199147.386 ops/s
Iteration  12: 208688.700 ops/s
Iteration  13: 201137.109 ops/s
Iteration  14: 205182.883 ops/s
Iteration  15: 209903.854 ops/s
Iteration  16: 203499.461 ops/s
Iteration  17: 202616.253 ops/s
Iteration  18: 213450.581 ops/s
Iteration  19: 198361.293 ops/s
Iteration  20: 217864.721 ops/s
Iteration  21: 210665.872 ops/s
Iteration  22: 203584.451 ops/s
Iteration  23: 213157.782 ops/s
Iteration  24: 204532.717 ops/s
Iteration  25: 207015.154 ops/s
Iteration  26: 212158.997 ops/s
Iteration  27: 206923.942 ops/s
Iteration  28: 210069.844 ops/s
Iteration  29: 200915.507 ops/s
Iteration  30: 212536.338 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithStartEndFlowableTest._Benchmark.benchmark_boundarySelectorNormal":
  205841.179 ±(99.9%) 5194.708 ops/s [Average]
  (min, avg, max) = (174510.983, 205841.179, 217864.721), stdev = 7775.195
  CI (99.9%): [200646.471, 211035.887] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            Mode  Cnt       Score      Error  Units
FlowableWindowWithStartEndFlowableTest._Benchmark.benchmark_boundarySelectorNormal  thrpt   30  205841.179 ± 5194.708  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_timeskipSkipping$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_timeskipSkipping

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 17478.295 ops/s
# Warmup Iteration   2: 117154.014 ops/s
# Warmup Iteration   3: 198865.951 ops/s
# Warmup Iteration   4: 293047.925 ops/s
# Warmup Iteration   5: 316760.896 ops/s
# Warmup Iteration   6: 310869.298 ops/s
# Warmup Iteration   7: 297114.597 ops/s
# Warmup Iteration   8: 302827.954 ops/s
# Warmup Iteration   9: 286515.324 ops/s
# Warmup Iteration  10: 308918.894 ops/s
# Warmup Iteration  11: 291939.269 ops/s
# Warmup Iteration  12: 304185.579 ops/s
# Warmup Iteration  13: 285522.401 ops/s
# Warmup Iteration  14: 289676.688 ops/s
# Warmup Iteration  15: 280250.096 ops/s
# Warmup Iteration  16: 292008.626 ops/s
# Warmup Iteration  17: 317786.078 ops/s
# Warmup Iteration  18: 300116.051 ops/s
# Warmup Iteration  19: 313768.486 ops/s
# Warmup Iteration  20: 296259.682 ops/s
# Warmup Iteration  21: 303690.322 ops/s
# Warmup Iteration  22: 306957.893 ops/s
# Warmup Iteration  23: 291330.281 ops/s
# Warmup Iteration  24: 297468.523 ops/s
# Warmup Iteration  25: 306192.364 ops/s
# Warmup Iteration  26: 296023.474 ops/s
# Warmup Iteration  27: 306310.367 ops/s
# Warmup Iteration  28: 309141.794 ops/s
# Warmup Iteration  29: 305274.309 ops/s
# Warmup Iteration  30: 316336.995 ops/s
Iteration   1: 275224.621 ops/s
Iteration   2: 307749.326 ops/s
Iteration   3: 299496.168 ops/s
Iteration   4: 307203.556 ops/s
Iteration   5: 315401.290 ops/s
Iteration   6: 292203.165 ops/s
Iteration   7: 306421.445 ops/s
Iteration   8: 305938.579 ops/s
Iteration   9: 302972.755 ops/s
Iteration  10: 315816.902 ops/s
Iteration  11: 286875.563 ops/s
Iteration  12: 308257.168 ops/s
Iteration  13: 303108.075 ops/s
Iteration  14: 303946.600 ops/s
Iteration  15: 308943.766 ops/s
Iteration  16: 304685.636 ops/s
Iteration  17: 314238.871 ops/s
Iteration  18: 311691.910 ops/s
Iteration  19: 299989.480 ops/s
Iteration  20: 305339.007 ops/s
Iteration  21: 300711.285 ops/s
Iteration  22: 310644.376 ops/s
Iteration  23: 301973.807 ops/s
Iteration  24: 305730.410 ops/s
Iteration  25: 310765.439 ops/s
Iteration  26: 294496.159 ops/s
Iteration  27: 309926.575 ops/s
Iteration  28: 301098.870 ops/s
Iteration  29: 316641.317 ops/s
Iteration  30: 302776.242 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_timeskipSkipping":
  304342.279 ±(99.9%) 5833.106 ops/s [Average]
  (min, avg, max) = (275224.621, 304342.279, 316641.317), stdev = 8730.719
  CI (99.9%): [298509.173, 310175.384] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
FlowableWindowWithTimeTest._Benchmark.benchmark_timeskipSkipping  thrpt   30  304342.279 ± 5833.106  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterableTest._Benchmark.benchmark_fromEmptyIterableWhenZeroRequestedShouldStillEmitOnCompletedEagerly$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterableTest._Benchmark.benchmark_fromEmptyIterableWhenZeroRequestedShouldStillEmitOnCompletedEagerly

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 10703599.781 ops/s
# Warmup Iteration   2: 15181173.230 ops/s
# Warmup Iteration   3: 21848006.219 ops/s
# Warmup Iteration   4: 22288621.912 ops/s
# Warmup Iteration   5: 21594018.638 ops/s
# Warmup Iteration   6: 21783604.858 ops/s
# Warmup Iteration   7: 21410117.640 ops/s
# Warmup Iteration   8: 21772203.379 ops/s
# Warmup Iteration   9: 22601824.407 ops/s
# Warmup Iteration  10: 21207149.691 ops/s
# Warmup Iteration  11: 22437545.607 ops/s
# Warmup Iteration  12: 21859865.539 ops/s
# Warmup Iteration  13: 22184905.477 ops/s
# Warmup Iteration  14: 22083417.442 ops/s
# Warmup Iteration  15: 21918017.848 ops/s
# Warmup Iteration  16: 21664916.987 ops/s
# Warmup Iteration  17: 21815259.023 ops/s
# Warmup Iteration  18: 23251369.301 ops/s
# Warmup Iteration  19: 21033627.418 ops/s
# Warmup Iteration  20: 22326078.537 ops/s
# Warmup Iteration  21: 21472355.743 ops/s
# Warmup Iteration  22: 21412251.560 ops/s
# Warmup Iteration  23: 21866953.887 ops/s
# Warmup Iteration  24: 22124498.236 ops/s
# Warmup Iteration  25: 22091258.543 ops/s
# Warmup Iteration  26: 22173593.159 ops/s
# Warmup Iteration  27: 21929496.295 ops/s
# Warmup Iteration  28: 22066755.760 ops/s
# Warmup Iteration  29: 22623507.879 ops/s
# Warmup Iteration  30: 19445597.920 ops/s
Iteration   1: 20522690.215 ops/s
Iteration   2: 21513247.063 ops/s
Iteration   3: 21804121.461 ops/s
Iteration   4: 21542565.079 ops/s
Iteration   5: 22584317.335 ops/s
Iteration   6: 20718942.930 ops/s
Iteration   7: 22713421.275 ops/s
Iteration   8: 21491560.654 ops/s
Iteration   9: 22220850.829 ops/s
Iteration  10: 22647863.204 ops/s
Iteration  11: 20943262.026 ops/s
Iteration  12: 22418499.275 ops/s
Iteration  13: 21258179.151 ops/s
Iteration  14: 21600665.097 ops/s
Iteration  15: 21962814.069 ops/s
Iteration  16: 21959207.927 ops/s
Iteration  17: 22363944.580 ops/s
Iteration  18: 20704161.922 ops/s
Iteration  19: 22121391.433 ops/s
Iteration  20: 22550253.454 ops/s
Iteration  21: 21555949.710 ops/s
Iteration  22: 22566427.200 ops/s
Iteration  23: 21050689.790 ops/s
Iteration  24: 22424862.768 ops/s
Iteration  25: 20962376.297 ops/s
Iteration  26: 21616813.625 ops/s
Iteration  27: 22205387.816 ops/s
Iteration  28: 21730555.545 ops/s
Iteration  29: 20930597.032 ops/s
Iteration  30: 21874885.846 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterableTest._Benchmark.benchmark_fromEmptyIterableWhenZeroRequestedShouldStillEmitOnCompletedEagerly":
  21752016.820 ±(99.9%) 434613.953 ops/s [Average]
  (min, avg, max) = (20522690.215, 21752016.820, 22713421.275), stdev = 650509.754
  CI (99.9%): [21317402.867, 22186630.773] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                                           Mode  Cnt         Score        Error  Units
FlowableFromIterableTest._Benchmark.benchmark_fromEmptyIterableWhenZeroRequestedShouldStillEmitOnCompletedEagerly  thrpt   30  21752016.820 ± 434613.953  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_exactOnError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_exactOnError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 27142.851 ops/s
# Warmup Iteration   2: 62694.477 ops/s
# Warmup Iteration   3: 64021.333 ops/s
# Warmup Iteration   4: 85118.222 ops/s
# Warmup Iteration   5: 171266.290 ops/s
# Warmup Iteration   6: 170121.158 ops/s
# Warmup Iteration   7: 177559.694 ops/s
# Warmup Iteration   8: 190841.131 ops/s
# Warmup Iteration   9: 189365.616 ops/s
# Warmup Iteration  10: 190022.465 ops/s
# Warmup Iteration  11: 192465.715 ops/s
# Warmup Iteration  12: 183970.687 ops/s
# Warmup Iteration  13: 193095.239 ops/s
# Warmup Iteration  14: 184205.139 ops/s
# Warmup Iteration  15: 190176.127 ops/s
# Warmup Iteration  16: 189608.411 ops/s
# Warmup Iteration  17: 193157.223 ops/s
# Warmup Iteration  18: 175911.803 ops/s
# Warmup Iteration  19: 196795.395 ops/s
# Warmup Iteration  20: 199062.971 ops/s
# Warmup Iteration  21: 192508.858 ops/s
# Warmup Iteration  22: 196938.000 ops/s
# Warmup Iteration  23: 192424.728 ops/s
# Warmup Iteration  24: 195639.791 ops/s
# Warmup Iteration  25: 196454.846 ops/s
# Warmup Iteration  26: 195418.011 ops/s
# Warmup Iteration  27: 196125.103 ops/s
# Warmup Iteration  28: 194290.026 ops/s
# Warmup Iteration  29: 194744.270 ops/s
# Warmup Iteration  30: 198503.652 ops/s
Iteration   1: 191082.768 ops/s
Iteration   2: 196097.046 ops/s
Iteration   3: 195706.127 ops/s
Iteration   4: 196943.326 ops/s
Iteration   5: 200365.345 ops/s
Iteration   6: 192761.957 ops/s
Iteration   7: 201681.607 ops/s
Iteration   8: 190930.538 ops/s
Iteration   9: 204048.881 ops/s
Iteration  10: 189536.993 ops/s
Iteration  11: 195404.265 ops/s
Iteration  12: 201985.794 ops/s
Iteration  13: 190674.610 ops/s
Iteration  14: 202830.432 ops/s
Iteration  15: 187928.786 ops/s
Iteration  16: 201060.676 ops/s
Iteration  17: 197439.598 ops/s
Iteration  18: 191238.693 ops/s
Iteration  19: 200669.559 ops/s
Iteration  20: 190274.502 ops/s
Iteration  21: 192898.550 ops/s
Iteration  22: 203553.670 ops/s
Iteration  23: 184116.418 ops/s
Iteration  24: 201026.600 ops/s
Iteration  25: 198314.695 ops/s
Iteration  26: 187993.079 ops/s
Iteration  27: 199703.674 ops/s
Iteration  28: 188762.163 ops/s
Iteration  29: 197128.406 ops/s
Iteration  30: 192814.767 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_exactOnError":
  195499.117 ±(99.9%) 3666.027 ops/s [Average]
  (min, avg, max) = (184116.418, 195499.117, 204048.881), stdev = 5487.137
  CI (99.9%): [191833.090, 199165.144] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
FlowableWindowWithTimeTest._Benchmark.benchmark_exactOnError  thrpt   30  195499.117 ± 3666.027  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_combine2Flowable2Errors$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_combine2Flowable2Errors

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 15556.007 ops/s
# Warmup Iteration   2: 67603.912 ops/s
# Warmup Iteration   3: 96492.305 ops/s
# Warmup Iteration   4: 117968.105 ops/s
# Warmup Iteration   5: 235395.596 ops/s
# Warmup Iteration   6: 247165.432 ops/s
# Warmup Iteration   7: 220669.652 ops/s
# Warmup Iteration   8: 227471.448 ops/s
# Warmup Iteration   9: 242245.753 ops/s
# Warmup Iteration  10: 238384.906 ops/s
# Warmup Iteration  11: 245684.075 ops/s
# Warmup Iteration  12: 254298.387 ops/s
# Warmup Iteration  13: 237622.554 ops/s
# Warmup Iteration  14: 249383.947 ops/s
# Warmup Iteration  15: 244932.805 ops/s
# Warmup Iteration  16: 250654.357 ops/s
# Warmup Iteration  17: 252558.969 ops/s
# Warmup Iteration  18: 247501.466 ops/s
# Warmup Iteration  19: 260278.595 ops/s
# Warmup Iteration  20: 256584.073 ops/s
# Warmup Iteration  21: 247404.038 ops/s
# Warmup Iteration  22: 257561.613 ops/s
# Warmup Iteration  23: 244070.915 ops/s
# Warmup Iteration  24: 253051.222 ops/s
# Warmup Iteration  25: 200013.517 ops/s
# Warmup Iteration  26: 251138.069 ops/s
# Warmup Iteration  27: 247217.236 ops/s
# Warmup Iteration  28: 246460.262 ops/s
# Warmup Iteration  29: 256310.752 ops/s
# Warmup Iteration  30: 247862.487 ops/s
Iteration   1: 254848.674 ops/s
Iteration   2: 243717.694 ops/s
Iteration   3: 249822.836 ops/s
Iteration   4: 240572.864 ops/s
Iteration   5: 244529.919 ops/s
Iteration   6: 253741.355 ops/s
Iteration   7: 249674.348 ops/s
Iteration   8: 255606.820 ops/s
Iteration   9: 244554.349 ops/s
Iteration  10: 257101.354 ops/s
Iteration  11: 243490.555 ops/s
Iteration  12: 243096.624 ops/s
Iteration  13: 252421.872 ops/s
Iteration  14: 243329.638 ops/s
Iteration  15: 256923.930 ops/s
Iteration  16: 248382.222 ops/s
Iteration  17: 242337.235 ops/s
Iteration  18: 244902.765 ops/s
Iteration  19: 250389.027 ops/s
Iteration  20: 260779.087 ops/s
Iteration  21: 245094.809 ops/s
Iteration  22: 242795.926 ops/s
Iteration  23: 252464.198 ops/s
Iteration  24: 252068.925 ops/s
Iteration  25: 245410.512 ops/s
Iteration  26: 233255.681 ops/s
Iteration  27: 253634.958 ops/s
Iteration  28: 246839.215 ops/s
Iteration  29: 248823.103 ops/s
Iteration  30: 251595.556 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_combine2Flowable2Errors":
  248406.868 ±(99.9%) 3997.435 ops/s [Average]
  (min, avg, max) = (233255.681, 248406.868, 260779.087), stdev = 5983.173
  CI (99.9%): [244409.433, 252404.303] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score      Error  Units
FlowableCombineLatestTest._Benchmark.benchmark_combine2Flowable2Errors  thrpt   30  248406.868 ± 3997.435  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_zipWithIterableIteratorNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_zipWithIterableIteratorNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 271121.717 ops/s
# Warmup Iteration   2: 587681.676 ops/s
# Warmup Iteration   3: 647658.222 ops/s
# Warmup Iteration   4: 545591.521 ops/s
# Warmup Iteration   5: 655131.174 ops/s
# Warmup Iteration   6: 687082.662 ops/s
# Warmup Iteration   7: 633195.790 ops/s
# Warmup Iteration   8: 658318.557 ops/s
# Warmup Iteration   9: 677198.231 ops/s
# Warmup Iteration  10: 650234.695 ops/s
# Warmup Iteration  11: 649369.594 ops/s
# Warmup Iteration  12: 686477.670 ops/s
# Warmup Iteration  13: 640585.897 ops/s
# Warmup Iteration  14: 678236.910 ops/s
# Warmup Iteration  15: 646436.527 ops/s
# Warmup Iteration  16: 661637.911 ops/s
# Warmup Iteration  17: 688332.121 ops/s
# Warmup Iteration  18: 709141.695 ops/s
# Warmup Iteration  19: 705314.423 ops/s
# Warmup Iteration  20: 680185.238 ops/s
# Warmup Iteration  21: 710084.537 ops/s
# Warmup Iteration  22: 680494.580 ops/s
# Warmup Iteration  23: 695628.050 ops/s
# Warmup Iteration  24: 705056.849 ops/s
# Warmup Iteration  25: 695569.912 ops/s
# Warmup Iteration  26: 705542.231 ops/s
# Warmup Iteration  27: 717334.973 ops/s
# Warmup Iteration  28: 692740.035 ops/s
# Warmup Iteration  29: 683278.525 ops/s
# Warmup Iteration  30: 724183.297 ops/s
Iteration   1: 681164.896 ops/s
Iteration   2: 725870.021 ops/s
Iteration   3: 692640.449 ops/s
Iteration   4: 683359.466 ops/s
Iteration   5: 715233.825 ops/s
Iteration   6: 693181.049 ops/s
Iteration   7: 713426.510 ops/s
Iteration   8: 684612.067 ops/s
Iteration   9: 706859.154 ops/s
Iteration  10: 713105.268 ops/s
Iteration  11: 675675.680 ops/s
Iteration  12: 711510.310 ops/s
Iteration  13: 682413.151 ops/s
Iteration  14: 695616.818 ops/s
Iteration  15: 715660.545 ops/s
Iteration  16: 687292.426 ops/s
Iteration  17: 706204.270 ops/s
Iteration  18: 692085.044 ops/s
Iteration  19: 716518.057 ops/s
Iteration  20: 718440.700 ops/s
Iteration  21: 677739.595 ops/s
Iteration  22: 693312.744 ops/s
Iteration  23: 706265.466 ops/s
Iteration  24: 710378.281 ops/s
Iteration  25: 700753.877 ops/s
Iteration  26: 711603.722 ops/s
Iteration  27: 685411.553 ops/s
Iteration  28: 708722.225 ops/s
Iteration  29: 681091.107 ops/s
Iteration  30: 706852.712 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_zipWithIterableIteratorNull":
  699766.700 ±(99.9%) 9575.699 ops/s [Average]
  (min, avg, max) = (675675.680, 699766.700, 725870.021), stdev = 14332.456
  CI (99.9%): [690191.001, 709342.398] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score      Error  Units
FlowableNullTests._Benchmark.benchmark_zipWithIterableIteratorNull  thrpt   30  699766.700 ± 9575.699  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_scanSeedSupplierReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_scanSeedSupplierReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 291479.780 ops/s
# Warmup Iteration   2: 593184.298 ops/s
# Warmup Iteration   3: 589708.183 ops/s
# Warmup Iteration   4: 574362.149 ops/s
# Warmup Iteration   5: 666387.796 ops/s
# Warmup Iteration   6: 576739.654 ops/s
# Warmup Iteration   7: 590483.143 ops/s
# Warmup Iteration   8: 680767.991 ops/s
# Warmup Iteration   9: 656574.682 ops/s
# Warmup Iteration  10: 623987.046 ops/s
# Warmup Iteration  11: 638018.493 ops/s
# Warmup Iteration  12: 668306.972 ops/s
# Warmup Iteration  13: 631286.687 ops/s
# Warmup Iteration  14: 648791.777 ops/s
# Warmup Iteration  15: 651405.917 ops/s
# Warmup Iteration  16: 641267.476 ops/s
# Warmup Iteration  17: 691092.930 ops/s
# Warmup Iteration  18: 666689.471 ops/s
# Warmup Iteration  19: 705835.419 ops/s
# Warmup Iteration  20: 553532.377 ops/s
# Warmup Iteration  21: 700352.273 ops/s
# Warmup Iteration  22: 699413.181 ops/s
# Warmup Iteration  23: 669229.325 ops/s
# Warmup Iteration  24: 686592.931 ops/s
# Warmup Iteration  25: 677465.659 ops/s
# Warmup Iteration  26: 699775.614 ops/s
# Warmup Iteration  27: 667393.804 ops/s
# Warmup Iteration  28: 687806.218 ops/s
# Warmup Iteration  29: 686414.218 ops/s
# Warmup Iteration  30: 682676.193 ops/s
Iteration   1: 699651.493 ops/s
Iteration   2: 664463.012 ops/s
Iteration   3: 678301.764 ops/s
Iteration   4: 710136.766 ops/s
Iteration   5: 667834.803 ops/s
Iteration   6: 696921.877 ops/s
Iteration   7: 670666.088 ops/s
Iteration   8: 683195.985 ops/s
Iteration   9: 695164.784 ops/s
Iteration  10: 665286.686 ops/s
Iteration  11: 689606.889 ops/s
Iteration  12: 681270.459 ops/s
Iteration  13: 677320.308 ops/s
Iteration  14: 708670.121 ops/s
Iteration  15: 672271.816 ops/s
Iteration  16: 683716.728 ops/s
Iteration  17: 667431.636 ops/s
Iteration  18: 708589.670 ops/s
Iteration  19: 684087.526 ops/s
Iteration  20: 686897.413 ops/s
Iteration  21: 665648.849 ops/s
Iteration  22: 690413.945 ops/s
Iteration  23: 674345.922 ops/s
Iteration  24: 674869.687 ops/s
Iteration  25: 693070.630 ops/s
Iteration  26: 678288.768 ops/s
Iteration  27: 697145.642 ops/s
Iteration  28: 676108.234 ops/s
Iteration  29: 670118.349 ops/s
Iteration  30: 694977.275 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_scanSeedSupplierReturnsNull":
  683549.104 ±(99.9%) 9076.895 ops/s [Average]
  (min, avg, max) = (664463.012, 683549.104, 710136.766), stdev = 13585.870
  CI (99.9%): [674472.209, 692625.999] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score      Error  Units
FlowableNullTests._Benchmark.benchmark_scanSeedSupplierReturnsNull  thrpt   30  683549.104 ± 9076.895  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_distinctSupplierReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_distinctSupplierReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 276389.364 ops/s
# Warmup Iteration   2: 516963.191 ops/s
# Warmup Iteration   3: 558209.461 ops/s
# Warmup Iteration   4: 641465.003 ops/s
# Warmup Iteration   5: 495375.363 ops/s
# Warmup Iteration   6: 609336.285 ops/s
# Warmup Iteration   7: 629079.059 ops/s
# Warmup Iteration   8: 592957.496 ops/s
# Warmup Iteration   9: 617567.249 ops/s
# Warmup Iteration  10: 641280.543 ops/s
# Warmup Iteration  11: 604717.053 ops/s
# Warmup Iteration  12: 618448.830 ops/s
# Warmup Iteration  13: 610566.968 ops/s
# Warmup Iteration  14: 609808.038 ops/s
# Warmup Iteration  15: 647785.845 ops/s
# Warmup Iteration  16: 596495.743 ops/s
# Warmup Iteration  17: 650807.061 ops/s
# Warmup Iteration  18: 642497.151 ops/s
# Warmup Iteration  19: 645737.977 ops/s
# Warmup Iteration  20: 662490.949 ops/s
# Warmup Iteration  21: 621749.247 ops/s
# Warmup Iteration  22: 664528.315 ops/s
# Warmup Iteration  23: 622362.558 ops/s
# Warmup Iteration  24: 645398.456 ops/s
# Warmup Iteration  25: 662501.008 ops/s
# Warmup Iteration  26: 628020.550 ops/s
# Warmup Iteration  27: 664301.928 ops/s
# Warmup Iteration  28: 655578.486 ops/s
# Warmup Iteration  29: 622977.644 ops/s
# Warmup Iteration  30: 654687.791 ops/s
Iteration   1: 638250.491 ops/s
Iteration   2: 656892.531 ops/s
Iteration   3: 624349.975 ops/s
Iteration   4: 666105.403 ops/s
Iteration   5: 619483.296 ops/s
Iteration   6: 649330.066 ops/s
Iteration   7: 659894.641 ops/s
Iteration   8: 630454.911 ops/s
Iteration   9: 638571.130 ops/s
Iteration  10: 664773.743 ops/s
Iteration  11: 629196.676 ops/s
Iteration  12: 644340.585 ops/s
Iteration  13: 640981.685 ops/s
Iteration  14: 640986.625 ops/s
Iteration  15: 648520.905 ops/s
Iteration  16: 664955.315 ops/s
Iteration  17: 632552.398 ops/s
Iteration  18: 632965.809 ops/s
Iteration  19: 650894.848 ops/s
Iteration  20: 645595.438 ops/s
Iteration  21: 672474.923 ops/s
Iteration  22: 655052.117 ops/s
Iteration  23: 633908.815 ops/s
Iteration  24: 657690.126 ops/s
Iteration  25: 629174.830 ops/s
Iteration  26: 642523.904 ops/s
Iteration  27: 656687.213 ops/s
Iteration  28: 628252.164 ops/s
Iteration  29: 640106.797 ops/s
Iteration  30: 662375.443 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_distinctSupplierReturnsNull":
  645244.760 ±(99.9%) 9415.927 ops/s [Average]
  (min, avg, max) = (619483.296, 645244.760, 672474.923), stdev = 14093.318
  CI (99.9%): [635828.833, 654660.687] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score      Error  Units
FlowableNullTests._Benchmark.benchmark_distinctSupplierReturnsNull  thrpt   30  645244.760 ± 9415.927  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterableTest._Benchmark.benchmark_hasNextThrowsImmediately$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterableTest._Benchmark.benchmark_hasNextThrowsImmediately

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 221830.624 ops/s
# Warmup Iteration   2: 538768.368 ops/s
# Warmup Iteration   3: 674525.691 ops/s
# Warmup Iteration   4: 580326.105 ops/s
# Warmup Iteration   5: 610893.759 ops/s
# Warmup Iteration   6: 602444.848 ops/s
# Warmup Iteration   7: 661899.564 ops/s
# Warmup Iteration   8: 649709.782 ops/s
# Warmup Iteration   9: 653962.589 ops/s
# Warmup Iteration  10: 661379.539 ops/s
# Warmup Iteration  11: 682827.231 ops/s
# Warmup Iteration  12: 633051.267 ops/s
# Warmup Iteration  13: 654164.839 ops/s
# Warmup Iteration  14: 604080.501 ops/s
# Warmup Iteration  15: 575138.947 ops/s
# Warmup Iteration  16: 639105.340 ops/s
# Warmup Iteration  17: 714138.287 ops/s
# Warmup Iteration  18: 710897.886 ops/s
# Warmup Iteration  19: 665230.428 ops/s
# Warmup Iteration  20: 691493.969 ops/s
# Warmup Iteration  21: 685763.691 ops/s
# Warmup Iteration  22: 687843.482 ops/s
# Warmup Iteration  23: 706207.024 ops/s
# Warmup Iteration  24: 671735.801 ops/s
# Warmup Iteration  25: 667788.043 ops/s
# Warmup Iteration  26: 703423.135 ops/s
# Warmup Iteration  27: 675626.495 ops/s
# Warmup Iteration  28: 695709.627 ops/s
# Warmup Iteration  29: 699422.575 ops/s
# Warmup Iteration  30: 667718.611 ops/s
Iteration   1: 691127.409 ops/s
Iteration   2: 681897.481 ops/s
Iteration   3: 705033.008 ops/s
Iteration   4: 674838.025 ops/s
Iteration   5: 698550.176 ops/s
Iteration   6: 687025.259 ops/s
Iteration   7: 693412.157 ops/s
Iteration   8: 701420.790 ops/s
Iteration   9: 676018.727 ops/s
Iteration  10: 719704.058 ops/s
Iteration  11: 663884.040 ops/s
Iteration  12: 702104.444 ops/s
Iteration  13: 668563.227 ops/s
Iteration  14: 657344.568 ops/s
Iteration  15: 711731.118 ops/s
Iteration  16: 673513.700 ops/s
Iteration  17: 696752.673 ops/s
Iteration  18: 687208.535 ops/s
Iteration  19: 674364.304 ops/s
Iteration  20: 697776.231 ops/s
Iteration  21: 686890.617 ops/s
Iteration  22: 682128.457 ops/s
Iteration  23: 711080.931 ops/s
Iteration  24: 667562.279 ops/s
Iteration  25: 701163.823 ops/s
Iteration  26: 681844.783 ops/s
Iteration  27: 691816.440 ops/s
Iteration  28: 671151.782 ops/s
Iteration  29: 706295.215 ops/s
Iteration  30: 681327.206 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterableTest._Benchmark.benchmark_hasNextThrowsImmediately":
  688117.715 ±(99.9%) 10442.986 ops/s [Average]
  (min, avg, max) = (657344.568, 688117.715, 719704.058), stdev = 15630.571
  CI (99.9%): [677674.730, 698560.701] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score       Error  Units
FlowableFromIterableTest._Benchmark.benchmark_hasNextThrowsImmediately  thrpt   30  688117.715 ± 10442.986  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_repeatWhenFunctionReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_repeatWhenFunctionReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 203972.710 ops/s
# Warmup Iteration   2: 500732.810 ops/s
# Warmup Iteration   3: 593290.411 ops/s
# Warmup Iteration   4: 573036.649 ops/s
# Warmup Iteration   5: 554490.946 ops/s
# Warmup Iteration   6: 651596.931 ops/s
# Warmup Iteration   7: 627676.234 ops/s
# Warmup Iteration   8: 619261.019 ops/s
# Warmup Iteration   9: 653217.469 ops/s
# Warmup Iteration  10: 612330.814 ops/s
# Warmup Iteration  11: 612364.846 ops/s
# Warmup Iteration  12: 646859.370 ops/s
# Warmup Iteration  13: 612468.410 ops/s
# Warmup Iteration  14: 646671.794 ops/s
# Warmup Iteration  15: 606399.887 ops/s
# Warmup Iteration  16: 636839.445 ops/s
# Warmup Iteration  17: 655649.753 ops/s
# Warmup Iteration  18: 641496.574 ops/s
# Warmup Iteration  19: 682106.781 ops/s
# Warmup Iteration  20: 648945.421 ops/s
# Warmup Iteration  21: 682289.006 ops/s
# Warmup Iteration  22: 638333.352 ops/s
# Warmup Iteration  23: 652725.424 ops/s
# Warmup Iteration  24: 643771.407 ops/s
# Warmup Iteration  25: 677588.279 ops/s
# Warmup Iteration  26: 662834.033 ops/s
# Warmup Iteration  27: 644773.367 ops/s
# Warmup Iteration  28: 648787.833 ops/s
# Warmup Iteration  29: 643592.421 ops/s
# Warmup Iteration  30: 658720.474 ops/s
Iteration   1: 688883.363 ops/s
Iteration   2: 628132.191 ops/s
Iteration   3: 662714.688 ops/s
Iteration   4: 671702.194 ops/s
Iteration   5: 649768.330 ops/s
Iteration   6: 678243.760 ops/s
Iteration   7: 648184.011 ops/s
Iteration   8: 652299.654 ops/s
Iteration   9: 688487.952 ops/s
Iteration  10: 641275.287 ops/s
Iteration  11: 683268.863 ops/s
Iteration  12: 647411.959 ops/s
Iteration  13: 669855.235 ops/s
Iteration  14: 647551.813 ops/s
Iteration  15: 640716.839 ops/s
Iteration  16: 684291.828 ops/s
Iteration  17: 666208.350 ops/s
Iteration  18: 644426.886 ops/s
Iteration  19: 682169.884 ops/s
Iteration  20: 654158.854 ops/s
Iteration  21: 680397.701 ops/s
Iteration  22: 632848.546 ops/s
Iteration  23: 664588.925 ops/s
Iteration  24: 684395.921 ops/s
Iteration  25: 635432.804 ops/s
Iteration  26: 654760.332 ops/s
Iteration  27: 666302.567 ops/s
Iteration  28: 643227.376 ops/s
Iteration  29: 690382.286 ops/s
Iteration  30: 640693.318 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_repeatWhenFunctionReturnsNull":
  660759.390 ±(99.9%) 12721.032 ops/s [Average]
  (min, avg, max) = (628132.191, 660759.390, 690382.286), stdev = 19040.244
  CI (99.9%): [648038.358, 673480.423] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score       Error  Units
FlowableNullTests._Benchmark.benchmark_repeatWhenFunctionReturnsNull  thrpt   30  660759.390 ± 12721.032  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterableTest._Benchmark.benchmark_iteratorThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterableTest._Benchmark.benchmark_iteratorThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 155975.828 ops/s
# Warmup Iteration   2: 484734.281 ops/s
# Warmup Iteration   3: 529651.766 ops/s
# Warmup Iteration   4: 426672.674 ops/s
# Warmup Iteration   5: 564654.729 ops/s
# Warmup Iteration   6: 528641.020 ops/s
# Warmup Iteration   7: 498011.150 ops/s
# Warmup Iteration   8: 558687.344 ops/s
# Warmup Iteration   9: 526765.942 ops/s
# Warmup Iteration  10: 469848.638 ops/s
# Warmup Iteration  11: 534347.870 ops/s
# Warmup Iteration  12: 552116.963 ops/s
# Warmup Iteration  13: 543301.637 ops/s
# Warmup Iteration  14: 530161.839 ops/s
# Warmup Iteration  15: 548079.727 ops/s
# Warmup Iteration  16: 542206.300 ops/s
# Warmup Iteration  17: 558994.267 ops/s
# Warmup Iteration  18: 589229.910 ops/s
# Warmup Iteration  19: 557762.979 ops/s
# Warmup Iteration  20: 566095.255 ops/s
# Warmup Iteration  21: 588706.450 ops/s
# Warmup Iteration  22: 565171.844 ops/s
# Warmup Iteration  23: 553139.728 ops/s
# Warmup Iteration  24: 572146.395 ops/s
# Warmup Iteration  25: 554137.026 ops/s
# Warmup Iteration  26: 574021.175 ops/s
# Warmup Iteration  27: 559624.664 ops/s
# Warmup Iteration  28: 562100.620 ops/s
# Warmup Iteration  29: 580619.842 ops/s
# Warmup Iteration  30: 550809.356 ops/s
Iteration   1: 579500.873 ops/s
Iteration   2: 549126.033 ops/s
Iteration   3: 577550.114 ops/s
Iteration   4: 571202.375 ops/s
Iteration   5: 554330.101 ops/s
Iteration   6: 580558.745 ops/s
Iteration   7: 553354.644 ops/s
Iteration   8: 595431.397 ops/s
Iteration   9: 578794.516 ops/s
Iteration  10: 563725.264 ops/s
Iteration  11: 587121.282 ops/s
Iteration  12: 566137.717 ops/s
Iteration  13: 563691.738 ops/s
Iteration  14: 572107.227 ops/s
Iteration  15: 543258.124 ops/s
Iteration  16: 573311.002 ops/s
Iteration  17: 548908.087 ops/s
Iteration  18: 545997.814 ops/s
Iteration  19: 571068.152 ops/s
Iteration  20: 547603.219 ops/s
Iteration  21: 577199.266 ops/s
Iteration  22: 549113.291 ops/s
Iteration  23: 540668.933 ops/s
Iteration  24: 584110.758 ops/s
Iteration  25: 544396.805 ops/s
Iteration  26: 591252.886 ops/s
Iteration  27: 565325.750 ops/s
Iteration  28: 537242.793 ops/s
Iteration  29: 589282.403 ops/s
Iteration  30: 560272.942 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterableTest._Benchmark.benchmark_iteratorThrows":
  565388.142 ±(99.9%) 11208.593 ops/s [Average]
  (min, avg, max) = (537242.793, 565388.142, 595431.397), stdev = 16776.496
  CI (99.9%): [554179.549, 576596.735] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score       Error  Units
FlowableFromIterableTest._Benchmark.benchmark_iteratorThrows  thrpt   30  565388.142 ± 11208.593  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_error$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_error

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 86429.410 ops/s
# Warmup Iteration   2: 283829.906 ops/s
# Warmup Iteration   3: 530733.925 ops/s
# Warmup Iteration   4: 516442.980 ops/s
# Warmup Iteration   5: 539389.798 ops/s
# Warmup Iteration   6: 508650.869 ops/s
# Warmup Iteration   7: 506038.111 ops/s
# Warmup Iteration   8: 539688.093 ops/s
# Warmup Iteration   9: 481327.476 ops/s
# Warmup Iteration  10: 516370.503 ops/s
# Warmup Iteration  11: 513790.685 ops/s
# Warmup Iteration  12: 548059.261 ops/s
# Warmup Iteration  13: 533988.023 ops/s
# Warmup Iteration  14: 526659.834 ops/s
# Warmup Iteration  15: 533013.159 ops/s
# Warmup Iteration  16: 520564.640 ops/s
# Warmup Iteration  17: 534890.425 ops/s
# Warmup Iteration  18: 507835.825 ops/s
# Warmup Iteration  19: 560467.293 ops/s
# Warmup Iteration  20: 519511.857 ops/s
# Warmup Iteration  21: 582930.580 ops/s
# Warmup Iteration  22: 561410.058 ops/s
# Warmup Iteration  23: 544056.678 ops/s
# Warmup Iteration  24: 544647.483 ops/s
# Warmup Iteration  25: 573884.602 ops/s
# Warmup Iteration  26: 540358.971 ops/s
# Warmup Iteration  27: 557879.772 ops/s
# Warmup Iteration  28: 579097.787 ops/s
# Warmup Iteration  29: 537254.123 ops/s
# Warmup Iteration  30: 561474.333 ops/s
Iteration   1: 558611.015 ops/s
Iteration   2: 567299.435 ops/s
Iteration   3: 563393.429 ops/s
Iteration   4: 551812.104 ops/s
Iteration   5: 561473.566 ops/s
Iteration   6: 544764.891 ops/s
Iteration   7: 574097.849 ops/s
Iteration   8: 539062.926 ops/s
Iteration   9: 562519.247 ops/s
Iteration  10: 575148.634 ops/s
Iteration  11: 547293.150 ops/s
Iteration  12: 557973.330 ops/s
Iteration  13: 555861.819 ops/s
Iteration  14: 543439.774 ops/s
Iteration  15: 571416.139 ops/s
Iteration  16: 553521.854 ops/s
Iteration  17: 538468.116 ops/s
Iteration  18: 566590.564 ops/s
Iteration  19: 541469.024 ops/s
Iteration  20: 573916.958 ops/s
Iteration  21: 537776.905 ops/s
Iteration  22: 565454.801 ops/s
Iteration  23: 539613.035 ops/s
Iteration  24: 549614.078 ops/s
Iteration  25: 579816.481 ops/s
Iteration  26: 528362.666 ops/s
Iteration  27: 572914.902 ops/s
Iteration  28: 545103.710 ops/s
Iteration  29: 569077.609 ops/s
Iteration  30: 539740.604 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_error":
  555853.620 ±(99.9%) 9383.852 ops/s [Average]
  (min, avg, max) = (528362.666, 555853.620, 579816.481), stdev = 14045.309
  CI (99.9%): [546469.768, 565237.473] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score      Error  Units
FlowableCombineLatestTest._Benchmark.benchmark_error  thrpt   30  555853.620 ± 9383.852  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_noErrorLoss$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_noErrorLoss

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 122480.418 ops/s
# Warmup Iteration   2: 536413.814 ops/s
# Warmup Iteration   3: 603276.442 ops/s
# Warmup Iteration   4: 550117.364 ops/s
# Warmup Iteration   5: 653421.015 ops/s
# Warmup Iteration   6: 639049.026 ops/s
# Warmup Iteration   7: 646537.925 ops/s
# Warmup Iteration   8: 633816.306 ops/s
# Warmup Iteration   9: 622339.613 ops/s
# Warmup Iteration  10: 616915.867 ops/s
# Warmup Iteration  11: 628668.351 ops/s
# Warmup Iteration  12: 651044.416 ops/s
# Warmup Iteration  13: 635306.702 ops/s
# Warmup Iteration  14: 651040.035 ops/s
# Warmup Iteration  15: 669282.102 ops/s
# Warmup Iteration  16: 635069.047 ops/s
# Warmup Iteration  17: 701741.890 ops/s
# Warmup Iteration  18: 674500.400 ops/s
# Warmup Iteration  19: 669575.373 ops/s
# Warmup Iteration  20: 695677.621 ops/s
# Warmup Iteration  21: 667928.297 ops/s
# Warmup Iteration  22: 708548.927 ops/s
# Warmup Iteration  23: 669161.726 ops/s
# Warmup Iteration  24: 662951.910 ops/s
# Warmup Iteration  25: 704208.541 ops/s
# Warmup Iteration  26: 669839.632 ops/s
# Warmup Iteration  27: 703455.314 ops/s
# Warmup Iteration  28: 616899.860 ops/s
# Warmup Iteration  29: 704275.706 ops/s
# Warmup Iteration  30: 613206.625 ops/s
Iteration   1: 678074.321 ops/s
Iteration   2: 655211.602 ops/s
Iteration   3: 682039.651 ops/s
Iteration   4: 688162.074 ops/s
Iteration   5: 672108.261 ops/s
Iteration   6: 688623.664 ops/s
Iteration   7: 700778.185 ops/s
Iteration   8: 674609.036 ops/s
Iteration   9: 690031.452 ops/s
Iteration  10: 709407.886 ops/s
Iteration  11: 665945.286 ops/s
Iteration  12: 680144.824 ops/s
Iteration  13: 686596.551 ops/s
Iteration  14: 673418.580 ops/s
Iteration  15: 690785.996 ops/s
Iteration  16: 702938.313 ops/s
Iteration  17: 672523.309 ops/s
Iteration  18: 674230.815 ops/s
Iteration  19: 708716.097 ops/s
Iteration  20: 667593.817 ops/s
Iteration  21: 701086.905 ops/s
Iteration  22: 674251.189 ops/s
Iteration  23: 703381.921 ops/s
Iteration  24: 667860.101 ops/s
Iteration  25: 685036.403 ops/s
Iteration  26: 687708.158 ops/s
Iteration  27: 682399.987 ops/s
Iteration  28: 703459.111 ops/s
Iteration  29: 674545.249 ops/s
Iteration  30: 678486.073 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_noErrorLoss":
  684005.161 ±(99.9%) 9292.433 ops/s [Average]
  (min, avg, max) = (655211.602, 684005.161, 709407.886), stdev = 13908.477
  CI (99.9%): [674712.728, 693297.593] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score      Error  Units
FlowablePublishTest._Benchmark.benchmark_noErrorLoss  thrpt   30  684005.161 ± 9292.433  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayTest._Benchmark.benchmark_connectDisposeCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayTest._Benchmark.benchmark_connectDisposeCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 313957.097 ops/s
# Warmup Iteration   2: 471817.566 ops/s
# Warmup Iteration   3: 595982.924 ops/s
# Warmup Iteration   4: 572393.397 ops/s
# Warmup Iteration   5: 595758.222 ops/s
# Warmup Iteration   6: 629256.175 ops/s
# Warmup Iteration   7: 586712.627 ops/s
# Warmup Iteration   8: 594864.694 ops/s
# Warmup Iteration   9: 611821.280 ops/s
# Warmup Iteration  10: 581268.489 ops/s
# Warmup Iteration  11: 605406.810 ops/s
# Warmup Iteration  12: 600027.678 ops/s
# Warmup Iteration  13: 577972.877 ops/s
# Warmup Iteration  14: 625906.982 ops/s
# Warmup Iteration  15: 586066.700 ops/s
# Warmup Iteration  16: 609053.989 ops/s
# Warmup Iteration  17: 633614.330 ops/s
# Warmup Iteration  18: 599215.066 ops/s
# Warmup Iteration  19: 639897.011 ops/s
# Warmup Iteration  20: 616675.521 ops/s
# Warmup Iteration  21: 653577.703 ops/s
# Warmup Iteration  22: 638063.168 ops/s
# Warmup Iteration  23: 618398.526 ops/s
# Warmup Iteration  24: 624985.510 ops/s
# Warmup Iteration  25: 655995.313 ops/s
# Warmup Iteration  26: 613422.481 ops/s
# Warmup Iteration  27: 635798.275 ops/s
# Warmup Iteration  28: 621426.411 ops/s
# Warmup Iteration  29: 626143.924 ops/s
# Warmup Iteration  30: 640261.866 ops/s
Iteration   1: 601938.015 ops/s
Iteration   2: 639612.202 ops/s
Iteration   3: 615930.040 ops/s
Iteration   4: 638458.376 ops/s
Iteration   5: 645189.271 ops/s
Iteration   6: 613488.189 ops/s
Iteration   7: 644799.601 ops/s
Iteration   8: 617309.256 ops/s
Iteration   9: 630399.015 ops/s
Iteration  10: 640675.446 ops/s
Iteration  11: 626917.305 ops/s
Iteration  12: 648587.500 ops/s
Iteration  13: 620530.177 ops/s
Iteration  14: 622719.754 ops/s
Iteration  15: 618442.255 ops/s
Iteration  16: 640757.772 ops/s
Iteration  17: 627167.922 ops/s
Iteration  18: 643146.906 ops/s
Iteration  19: 611910.185 ops/s
Iteration  20: 624941.250 ops/s
Iteration  21: 644645.460 ops/s
Iteration  22: 610311.738 ops/s
Iteration  23: 635673.331 ops/s
Iteration  24: 615541.269 ops/s
Iteration  25: 625863.347 ops/s
Iteration  26: 611468.298 ops/s
Iteration  27: 654707.838 ops/s
Iteration  28: 618090.885 ops/s
Iteration  29: 625637.271 ops/s
Iteration  30: 655078.523 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayTest._Benchmark.benchmark_connectDisposeCrash":
  628997.947 ±(99.9%) 9611.400 ops/s [Average]
  (min, avg, max) = (601938.015, 628997.947, 655078.523), stdev = 14385.892
  CI (99.9%): [619386.547, 638609.347] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
FlowableReplayTest._Benchmark.benchmark_connectDisposeCrash  thrpt   30  628997.947 ± 9611.400  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.exceptions.OnErrorNotImplementedExceptionTest._Benchmark.benchmark_flowableBoundedBlockingSubscribe1$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.exceptions.OnErrorNotImplementedExceptionTest._Benchmark.benchmark_flowableBoundedBlockingSubscribe1

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 36689.292 ops/s
# Warmup Iteration   2: 64227.478 ops/s
# Warmup Iteration   3: 187422.224 ops/s
# Warmup Iteration   4: 180102.421 ops/s
# Warmup Iteration   5: 178965.985 ops/s
# Warmup Iteration   6: 179626.085 ops/s
# Warmup Iteration   7: 206105.557 ops/s
# Warmup Iteration   8: 195083.997 ops/s
# Warmup Iteration   9: 193427.007 ops/s
# Warmup Iteration  10: 202281.628 ops/s
# Warmup Iteration  11: 195425.086 ops/s
# Warmup Iteration  12: 197535.344 ops/s
# Warmup Iteration  13: 195601.093 ops/s
# Warmup Iteration  14: 203974.628 ops/s
# Warmup Iteration  15: 206088.170 ops/s
# Warmup Iteration  16: 194248.998 ops/s
# Warmup Iteration  17: 200210.679 ops/s
# Warmup Iteration  18: 208305.061 ops/s
# Warmup Iteration  19: 202778.740 ops/s
# Warmup Iteration  20: 205291.074 ops/s
# Warmup Iteration  21: 216592.669 ops/s
# Warmup Iteration  22: 210010.346 ops/s
# Warmup Iteration  23: 200053.824 ops/s
# Warmup Iteration  24: 201660.943 ops/s
# Warmup Iteration  25: 208026.829 ops/s
# Warmup Iteration  26: 199957.858 ops/s
# Warmup Iteration  27: 213885.251 ops/s
# Warmup Iteration  28: 204256.336 ops/s
# Warmup Iteration  29: 208431.420 ops/s
# Warmup Iteration  30: 209560.555 ops/s
Iteration   1: 198860.520 ops/s
Iteration   2: 206806.713 ops/s
Iteration   3: 201494.104 ops/s
Iteration   4: 205035.729 ops/s
Iteration   5: 204487.790 ops/s
Iteration   6: 200152.331 ops/s
Iteration   7: 212821.677 ops/s
Iteration   8: 199782.823 ops/s
Iteration   9: 205634.421 ops/s
Iteration  10: 215276.416 ops/s
Iteration  11: 199165.493 ops/s
Iteration  12: 207779.513 ops/s
Iteration  13: 197812.024 ops/s
Iteration  14: 206797.111 ops/s
Iteration  15: 191523.340 ops/s
Iteration  16: 198869.358 ops/s
Iteration  17: 205037.124 ops/s
Iteration  18: 206431.672 ops/s
Iteration  19: 209900.331 ops/s
Iteration  20: 201763.577 ops/s
Iteration  21: 207013.188 ops/s
Iteration  22: 210456.748 ops/s
Iteration  23: 201437.181 ops/s
Iteration  24: 204173.738 ops/s
Iteration  25: 206804.846 ops/s
Iteration  26: 210047.872 ops/s
Iteration  27: 203873.092 ops/s
Iteration  28: 193543.168 ops/s
Iteration  29: 213416.233 ops/s
Iteration  30: 205763.749 ops/s


Result "io.reactivex.rxjava3.exceptions.OnErrorNotImplementedExceptionTest._Benchmark.benchmark_flowableBoundedBlockingSubscribe1":
  204398.729 ±(99.9%) 3707.187 ops/s [Average]
  (min, avg, max) = (191523.340, 204398.729, 215276.416), stdev = 5548.743
  CI (99.9%): [200691.543, 208105.916] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                   Mode  Cnt       Score      Error  Units
OnErrorNotImplementedExceptionTest._Benchmark.benchmark_flowableBoundedBlockingSubscribe1  thrpt   30  204398.729 ± 3707.187  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeTest2._Benchmark.benchmark_errorAfterLimitReached$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeTest2._Benchmark.benchmark_errorAfterLimitReached

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 63148.536 ops/s
# Warmup Iteration   2: 210049.942 ops/s
# Warmup Iteration   3: 226078.181 ops/s
# Warmup Iteration   4: 212924.623 ops/s
# Warmup Iteration   5: 262065.043 ops/s
# Warmup Iteration   6: 246304.802 ops/s
# Warmup Iteration   7: 251887.720 ops/s
# Warmup Iteration   8: 260745.162 ops/s
# Warmup Iteration   9: 257479.353 ops/s
# Warmup Iteration  10: 241147.083 ops/s
# Warmup Iteration  11: 247063.915 ops/s
# Warmup Iteration  12: 250813.448 ops/s
# Warmup Iteration  13: 256362.794 ops/s
# Warmup Iteration  14: 250596.015 ops/s
# Warmup Iteration  15: 247835.051 ops/s
# Warmup Iteration  16: 254144.235 ops/s
# Warmup Iteration  17: 267854.175 ops/s
# Warmup Iteration  18: 249071.959 ops/s
# Warmup Iteration  19: 261766.120 ops/s
# Warmup Iteration  20: 261055.220 ops/s
# Warmup Iteration  21: 259416.354 ops/s
# Warmup Iteration  22: 260194.624 ops/s
# Warmup Iteration  23: 254888.545 ops/s
# Warmup Iteration  24: 266784.755 ops/s
# Warmup Iteration  25: 264262.258 ops/s
# Warmup Iteration  26: 257534.584 ops/s
# Warmup Iteration  27: 250227.394 ops/s
# Warmup Iteration  28: 270563.051 ops/s
# Warmup Iteration  29: 255571.183 ops/s
# Warmup Iteration  30: 264759.522 ops/s
Iteration   1: 258776.243 ops/s
Iteration   2: 256415.158 ops/s
Iteration   3: 268749.106 ops/s
Iteration   4: 257706.357 ops/s
Iteration   5: 261021.527 ops/s
Iteration   6: 260457.063 ops/s
Iteration   7: 256338.027 ops/s
Iteration   8: 258114.933 ops/s
Iteration   9: 259459.665 ops/s
Iteration  10: 265143.484 ops/s
Iteration  11: 255580.443 ops/s
Iteration  12: 263054.145 ops/s
Iteration  13: 256560.393 ops/s
Iteration  14: 255906.555 ops/s
Iteration  15: 262815.967 ops/s
Iteration  16: 261039.193 ops/s
Iteration  17: 257372.911 ops/s
Iteration  18: 269095.773 ops/s
Iteration  19: 252749.619 ops/s
Iteration  20: 264688.169 ops/s
Iteration  21: 270880.634 ops/s
Iteration  22: 255708.276 ops/s
Iteration  23: 254193.214 ops/s
Iteration  24: 263333.666 ops/s
Iteration  25: 256929.268 ops/s
Iteration  26: 210781.362 ops/s
Iteration  27: 264608.578 ops/s
Iteration  28: 255909.570 ops/s
Iteration  29: 263032.602 ops/s
Iteration  30: 253116.733 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeTest2._Benchmark.benchmark_errorAfterLimitReached":
  258317.954 ±(99.9%) 6789.645 ops/s [Average]
  (min, avg, max) = (210781.362, 258317.954, 270880.634), stdev = 10162.422
  CI (99.9%): [251528.310, 265107.599] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
FlowableTakeTest2._Benchmark.benchmark_errorAfterLimitReached  thrpt   30  258317.954 ± 6789.645  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_fusedIsEmptyWithEmptySource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_fusedIsEmptyWithEmptySource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 880985.071 ops/s
# Warmup Iteration   2: 3602863.659 ops/s
# Warmup Iteration   3: 4643873.936 ops/s
# Warmup Iteration   4: 5035316.317 ops/s
# Warmup Iteration   5: 5261913.575 ops/s
# Warmup Iteration   6: 5233966.453 ops/s
# Warmup Iteration   7: 5004367.586 ops/s
# Warmup Iteration   8: 5191906.987 ops/s
# Warmup Iteration   9: 5195996.555 ops/s
# Warmup Iteration  10: 5103687.454 ops/s
# Warmup Iteration  11: 5021503.773 ops/s
# Warmup Iteration  12: 5073607.147 ops/s
# Warmup Iteration  13: 5138369.818 ops/s
# Warmup Iteration  14: 5318642.556 ops/s
# Warmup Iteration  15: 4991234.694 ops/s
# Warmup Iteration  16: 5048991.298 ops/s
# Warmup Iteration  17: 5202593.092 ops/s
# Warmup Iteration  18: 4957040.673 ops/s
# Warmup Iteration  19: 5206371.594 ops/s
# Warmup Iteration  20: 4924840.779 ops/s
# Warmup Iteration  21: 5161116.968 ops/s
# Warmup Iteration  22: 5170112.684 ops/s
# Warmup Iteration  23: 5068209.814 ops/s
# Warmup Iteration  24: 5187701.518 ops/s
# Warmup Iteration  25: 5257191.212 ops/s
# Warmup Iteration  26: 5063769.563 ops/s
# Warmup Iteration  27: 5254079.882 ops/s
# Warmup Iteration  28: 5009198.369 ops/s
# Warmup Iteration  29: 5371269.589 ops/s
# Warmup Iteration  30: 5047738.485 ops/s
Iteration   1: 5006356.019 ops/s
Iteration   2: 5143766.489 ops/s
Iteration   3: 5180441.134 ops/s
Iteration   4: 5159709.229 ops/s
Iteration   5: 5145830.051 ops/s
Iteration   6: 5066630.456 ops/s
Iteration   7: 5072512.424 ops/s
Iteration   8: 5401866.825 ops/s
Iteration   9: 5019336.423 ops/s
Iteration  10: 5273905.276 ops/s
Iteration  11: 5181747.340 ops/s
Iteration  12: 5046593.201 ops/s
Iteration  13: 5236122.872 ops/s
Iteration  14: 5084695.631 ops/s
Iteration  15: 5004738.226 ops/s
Iteration  16: 5384317.645 ops/s
Iteration  17: 4970917.019 ops/s
Iteration  18: 5419727.873 ops/s
Iteration  19: 5126465.143 ops/s
Iteration  20: 5089430.012 ops/s
Iteration  21: 5402165.763 ops/s
Iteration  22: 4983963.784 ops/s
Iteration  23: 5243043.987 ops/s
Iteration  24: 5195972.266 ops/s
Iteration  25: 4947548.593 ops/s
Iteration  26: 5193010.019 ops/s
Iteration  27: 5072648.097 ops/s
Iteration  28: 5205705.059 ops/s
Iteration  29: 5064207.312 ops/s
Iteration  30: 5177864.953 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_fusedIsEmptyWithEmptySource":
  5150041.304 ±(99.9%) 87810.704 ops/s [Average]
  (min, avg, max) = (4947548.593, 5150041.304, 5419727.873), stdev = 131430.937
  CI (99.9%): [5062230.600, 5237852.008] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score       Error  Units
FlowableFlattenIterableTest._Benchmark.benchmark_fusedIsEmptyWithEmptySource  thrpt   30  5150041.304 ± 87810.704  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_flatMapIterablePrefetch$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_flatMapIterablePrefetch

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 292348.095 ops/s
# Warmup Iteration   2: 1641445.652 ops/s
# Warmup Iteration   3: 2494565.987 ops/s
# Warmup Iteration   4: 2537028.620 ops/s
# Warmup Iteration   5: 2715303.619 ops/s
# Warmup Iteration   6: 2661513.682 ops/s
# Warmup Iteration   7: 2549500.123 ops/s
# Warmup Iteration   8: 2713610.510 ops/s
# Warmup Iteration   9: 2590111.441 ops/s
# Warmup Iteration  10: 2690578.730 ops/s
# Warmup Iteration  11: 2595344.768 ops/s
# Warmup Iteration  12: 2597824.159 ops/s
# Warmup Iteration  13: 2758068.111 ops/s
# Warmup Iteration  14: 2557433.413 ops/s
# Warmup Iteration  15: 2715607.233 ops/s
# Warmup Iteration  16: 2667647.026 ops/s
# Warmup Iteration  17: 2679347.518 ops/s
# Warmup Iteration  18: 2546530.208 ops/s
# Warmup Iteration  19: 2693482.237 ops/s
# Warmup Iteration  20: 2605614.961 ops/s
# Warmup Iteration  21: 2734208.011 ops/s
# Warmup Iteration  22: 2642385.336 ops/s
# Warmup Iteration  23: 2679821.888 ops/s
# Warmup Iteration  24: 2675180.730 ops/s
# Warmup Iteration  25: 2691985.925 ops/s
# Warmup Iteration  26: 2607863.237 ops/s
# Warmup Iteration  27: 2720745.509 ops/s
# Warmup Iteration  28: 2628827.835 ops/s
# Warmup Iteration  29: 2705379.294 ops/s
# Warmup Iteration  30: 2578923.370 ops/s
Iteration   1: 2715042.621 ops/s
Iteration   2: 2649771.548 ops/s
Iteration   3: 2609142.593 ops/s
Iteration   4: 2746256.051 ops/s
Iteration   5: 2530611.223 ops/s
Iteration   6: 2734359.983 ops/s
Iteration   7: 2600929.381 ops/s
Iteration   8: 2566986.992 ops/s
Iteration   9: 2691621.684 ops/s
Iteration  10: 2559937.459 ops/s
Iteration  11: 2607989.594 ops/s
Iteration  12: 2693456.857 ops/s
Iteration  13: 2675690.908 ops/s
Iteration  14: 2662605.356 ops/s
Iteration  15: 2646389.474 ops/s
Iteration  16: 2570705.033 ops/s
Iteration  17: 2742071.311 ops/s
Iteration  18: 2602773.782 ops/s
Iteration  19: 2619565.603 ops/s
Iteration  20: 2332646.446 ops/s
Iteration  21: 2519108.876 ops/s
Iteration  22: 2658787.153 ops/s
Iteration  23: 2723866.283 ops/s
Iteration  24: 2585359.403 ops/s
Iteration  25: 2626865.621 ops/s
Iteration  26: 2693037.230 ops/s
Iteration  27: 2644204.619 ops/s
Iteration  28: 2683224.706 ops/s
Iteration  29: 2581525.523 ops/s
Iteration  30: 2715666.833 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_flatMapIterablePrefetch":
  2633006.672 ±(99.9%) 56786.890 ops/s [Average]
  (min, avg, max) = (2332646.446, 2633006.672, 2746256.051), stdev = 84995.950
  CI (99.9%): [2576219.782, 2689793.562] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score       Error  Units
FlowableFlattenIterableTest._Benchmark.benchmark_flatMapIterablePrefetch  thrpt   30  2633006.672 ± 56786.890  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_concatMapIterableBufferSize$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_concatMapIterableBufferSize

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 258754.951 ops/s
# Warmup Iteration   2: 1450172.709 ops/s
# Warmup Iteration   3: 1804264.757 ops/s
# Warmup Iteration   4: 1551185.573 ops/s
# Warmup Iteration   5: 1767228.993 ops/s
# Warmup Iteration   6: 1771507.663 ops/s
# Warmup Iteration   7: 1885795.994 ops/s
# Warmup Iteration   8: 1819088.785 ops/s
# Warmup Iteration   9: 1815038.533 ops/s
# Warmup Iteration  10: 1872445.386 ops/s
# Warmup Iteration  11: 1775751.610 ops/s
# Warmup Iteration  12: 1797903.320 ops/s
# Warmup Iteration  13: 1881952.268 ops/s
# Warmup Iteration  14: 1849953.780 ops/s
# Warmup Iteration  15: 1782972.631 ops/s
# Warmup Iteration  16: 1900822.908 ops/s
# Warmup Iteration  17: 1771738.520 ops/s
# Warmup Iteration  18: 1811911.904 ops/s
# Warmup Iteration  19: 1861555.831 ops/s
# Warmup Iteration  20: 1817092.574 ops/s
# Warmup Iteration  21: 1850306.359 ops/s
# Warmup Iteration  22: 1754763.313 ops/s
# Warmup Iteration  23: 1889490.543 ops/s
# Warmup Iteration  24: 1823084.199 ops/s
# Warmup Iteration  25: 1790322.734 ops/s
# Warmup Iteration  26: 1898478.544 ops/s
# Warmup Iteration  27: 1843947.411 ops/s
# Warmup Iteration  28: 1781074.563 ops/s
# Warmup Iteration  29: 1876168.404 ops/s
# Warmup Iteration  30: 1816190.484 ops/s
Iteration   1: 1892258.260 ops/s
Iteration   2: 1870068.073 ops/s
Iteration   3: 1794545.955 ops/s
Iteration   4: 1857748.050 ops/s
Iteration   5: 1775140.053 ops/s
Iteration   6: 1883084.191 ops/s
Iteration   7: 1835173.994 ops/s
Iteration   8: 1824678.325 ops/s
Iteration   9: 1884485.517 ops/s
Iteration  10: 1892012.953 ops/s
Iteration  11: 1808000.487 ops/s
Iteration  12: 1848636.532 ops/s
Iteration  13: 1821948.579 ops/s
Iteration  14: 1785371.146 ops/s
Iteration  15: 1889083.940 ops/s
Iteration  16: 1860244.434 ops/s
Iteration  17: 1787384.487 ops/s
Iteration  18: 1859367.822 ops/s
Iteration  19: 1841699.062 ops/s
Iteration  20: 1816004.710 ops/s
Iteration  21: 1872762.120 ops/s
Iteration  22: 1755961.582 ops/s
Iteration  23: 1892287.926 ops/s
Iteration  24: 1778671.250 ops/s
Iteration  25: 1816670.534 ops/s
Iteration  26: 1744755.979 ops/s
Iteration  27: 1878096.437 ops/s
Iteration  28: 1800573.878 ops/s
Iteration  29: 1766038.424 ops/s
Iteration  30: 1798314.922 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_concatMapIterableBufferSize":
  1831035.654 ±(99.9%) 30395.054 ops/s [Average]
  (min, avg, max) = (1744755.979, 1831035.654, 1892287.926), stdev = 45493.890
  CI (99.9%): [1800640.600, 1861430.708] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
FlowableConcatTest._Benchmark.benchmark_concatMapIterableBufferSize  thrpt   30  1831035.654 ± 30395.054  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_smallPrefetch$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_smallPrefetch

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 262436.363 ops/s
# Warmup Iteration   2: 1147820.693 ops/s
# Warmup Iteration   3: 1662810.284 ops/s
# Warmup Iteration   4: 1485939.619 ops/s
# Warmup Iteration   5: 1833683.540 ops/s
# Warmup Iteration   6: 1784605.909 ops/s
# Warmup Iteration   7: 1823833.026 ops/s
# Warmup Iteration   8: 1808115.001 ops/s
# Warmup Iteration   9: 1846319.894 ops/s
# Warmup Iteration  10: 1795300.116 ops/s
# Warmup Iteration  11: 1771764.562 ops/s
# Warmup Iteration  12: 1871536.951 ops/s
# Warmup Iteration  13: 1784101.371 ops/s
# Warmup Iteration  14: 1769653.568 ops/s
# Warmup Iteration  15: 1870291.213 ops/s
# Warmup Iteration  16: 1757870.560 ops/s
# Warmup Iteration  17: 1845842.669 ops/s
# Warmup Iteration  18: 1841533.231 ops/s
# Warmup Iteration  19: 1856519.096 ops/s
# Warmup Iteration  20: 1737572.094 ops/s
# Warmup Iteration  21: 1851052.908 ops/s
# Warmup Iteration  22: 1839549.630 ops/s
# Warmup Iteration  23: 1783279.205 ops/s
# Warmup Iteration  24: 1787291.380 ops/s
# Warmup Iteration  25: 1873813.423 ops/s
# Warmup Iteration  26: 1755074.610 ops/s
# Warmup Iteration  27: 1807959.091 ops/s
# Warmup Iteration  28: 1799543.346 ops/s
# Warmup Iteration  29: 1833700.500 ops/s
# Warmup Iteration  30: 1799277.451 ops/s
Iteration   1: 1833697.144 ops/s
Iteration   2: 1827756.004 ops/s
Iteration   3: 1778708.884 ops/s
Iteration   4: 1802779.967 ops/s
Iteration   5: 1784657.890 ops/s
Iteration   6: 1804624.983 ops/s
Iteration   7: 1842434.285 ops/s
Iteration   8: 1820103.116 ops/s
Iteration   9: 1877352.171 ops/s
Iteration  10: 1742089.240 ops/s
Iteration  11: 1862518.319 ops/s
Iteration  12: 1847491.940 ops/s
Iteration  13: 1698769.383 ops/s
Iteration  14: 1823388.786 ops/s
Iteration  15: 1349566.209 ops/s
Iteration  16: 1777546.908 ops/s
Iteration  17: 1854749.044 ops/s
Iteration  18: 1775134.355 ops/s
Iteration  19: 1832810.448 ops/s
Iteration  20: 1794927.978 ops/s
Iteration  21: 1915329.673 ops/s
Iteration  22: 1840986.239 ops/s
Iteration  23: 1773269.779 ops/s
Iteration  24: 1877561.560 ops/s
Iteration  25: 1795975.234 ops/s
Iteration  26: 1849970.172 ops/s
Iteration  27: 1765563.952 ops/s
Iteration  28: 1823314.001 ops/s
Iteration  29: 1870723.146 ops/s
Iteration  30: 1783429.110 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_smallPrefetch":
  1800907.664 ±(99.9%) 64519.082 ops/s [Average]
  (min, avg, max) = (1349566.209, 1800907.664, 1915329.673), stdev = 96569.132
  CI (99.9%): [1736388.582, 1865426.746] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
FlowableFlattenIterableTest._Benchmark.benchmark_smallPrefetch  thrpt   30  1800907.664 ± 64519.082  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_fusionMethods$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_fusionMethods

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1632494.325 ops/s
# Warmup Iteration   2: 4603445.875 ops/s
# Warmup Iteration   3: 5668495.497 ops/s
# Warmup Iteration   4: 5950689.010 ops/s
# Warmup Iteration   5: 6016409.118 ops/s
# Warmup Iteration   6: 5756415.029 ops/s
# Warmup Iteration   7: 6081633.255 ops/s
# Warmup Iteration   8: 6205278.696 ops/s
# Warmup Iteration   9: 5714644.471 ops/s
# Warmup Iteration  10: 6097569.736 ops/s
# Warmup Iteration  11: 6185204.617 ops/s
# Warmup Iteration  12: 5736894.814 ops/s
# Warmup Iteration  13: 6086646.528 ops/s
# Warmup Iteration  14: 5868887.999 ops/s
# Warmup Iteration  15: 5962063.117 ops/s
# Warmup Iteration  16: 5912511.399 ops/s
# Warmup Iteration  17: 5821375.642 ops/s
# Warmup Iteration  18: 5963350.244 ops/s
# Warmup Iteration  19: 5863422.492 ops/s
# Warmup Iteration  20: 5913316.032 ops/s
# Warmup Iteration  21: 6094526.324 ops/s
# Warmup Iteration  22: 5873819.102 ops/s
# Warmup Iteration  23: 6140068.085 ops/s
# Warmup Iteration  24: 5795652.024 ops/s
# Warmup Iteration  25: 5970812.886 ops/s
# Warmup Iteration  26: 6193752.590 ops/s
# Warmup Iteration  27: 6016004.893 ops/s
# Warmup Iteration  28: 5854352.764 ops/s
# Warmup Iteration  29: 6053982.082 ops/s
# Warmup Iteration  30: 5922771.985 ops/s
Iteration   1: 6116962.664 ops/s
Iteration   2: 5970180.868 ops/s
Iteration   3: 5760134.990 ops/s
Iteration   4: 6064772.160 ops/s
Iteration   5: 5883822.204 ops/s
Iteration   6: 6076318.928 ops/s
Iteration   7: 6052977.806 ops/s
Iteration   8: 5944770.563 ops/s
Iteration   9: 6126168.943 ops/s
Iteration  10: 5825761.752 ops/s
Iteration  11: 6033531.032 ops/s
Iteration  12: 5979363.265 ops/s
Iteration  13: 5834008.780 ops/s
Iteration  14: 6005593.409 ops/s
Iteration  15: 5860503.300 ops/s
Iteration  16: 5999464.951 ops/s
Iteration  17: 5781020.106 ops/s
Iteration  18: 5929358.194 ops/s
Iteration  19: 5987697.925 ops/s
Iteration  20: 5995425.511 ops/s
Iteration  21: 6068247.960 ops/s
Iteration  22: 5871491.185 ops/s
Iteration  23: 6115941.900 ops/s
Iteration  24: 6004809.941 ops/s
Iteration  25: 5983500.597 ops/s
Iteration  26: 5813532.134 ops/s
Iteration  27: 6132366.732 ops/s
Iteration  28: 6043202.740 ops/s
Iteration  29: 5747620.229 ops/s
Iteration  30: 6090456.317 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_fusionMethods":
  5969966.903 ±(99.9%) 76815.607 ops/s [Average]
  (min, avg, max) = (5747620.229, 5969966.903, 6132366.732), stdev = 114973.993
  CI (99.9%): [5893151.296, 6046782.510] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
FlowableFlattenIterableTest._Benchmark.benchmark_fusionMethods  thrpt   30  5969966.903 ± 76815.607  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_normalViaFlatMap$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_normalViaFlatMap

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 243819.848 ops/s
# Warmup Iteration   2: 1245366.072 ops/s
# Warmup Iteration   3: 1368404.717 ops/s
# Warmup Iteration   4: 1596448.523 ops/s
# Warmup Iteration   5: 1675076.272 ops/s
# Warmup Iteration   6: 1713756.552 ops/s
# Warmup Iteration   7: 1622840.692 ops/s
# Warmup Iteration   8: 1583233.424 ops/s
# Warmup Iteration   9: 1682370.632 ops/s
# Warmup Iteration  10: 1630212.020 ops/s
# Warmup Iteration  11: 1629859.759 ops/s
# Warmup Iteration  12: 1657979.135 ops/s
# Warmup Iteration  13: 1646643.308 ops/s
# Warmup Iteration  14: 1674248.856 ops/s
# Warmup Iteration  15: 1714245.914 ops/s
# Warmup Iteration  16: 1582934.272 ops/s
# Warmup Iteration  17: 1734442.787 ops/s
# Warmup Iteration  18: 1681364.658 ops/s
# Warmup Iteration  19: 1611648.635 ops/s
# Warmup Iteration  20: 1711673.955 ops/s
# Warmup Iteration  21: 1611734.373 ops/s
# Warmup Iteration  22: 1722459.193 ops/s
# Warmup Iteration  23: 1700811.704 ops/s
# Warmup Iteration  24: 1572784.070 ops/s
# Warmup Iteration  25: 1702373.457 ops/s
# Warmup Iteration  26: 1668498.559 ops/s
# Warmup Iteration  27: 1620581.902 ops/s
# Warmup Iteration  28: 1642213.887 ops/s
# Warmup Iteration  29: 1632050.545 ops/s
# Warmup Iteration  30: 1639369.721 ops/s
Iteration   1: 1659660.346 ops/s
Iteration   2: 1627983.527 ops/s
Iteration   3: 1701666.059 ops/s
Iteration   4: 1584711.915 ops/s
Iteration   5: 1597570.174 ops/s
Iteration   6: 1652449.642 ops/s
Iteration   7: 1674949.537 ops/s
Iteration   8: 1690512.360 ops/s
Iteration   9: 1588414.768 ops/s
Iteration  10: 1390312.645 ops/s
Iteration  11: 1609460.270 ops/s
Iteration  12: 1672415.723 ops/s
Iteration  13: 1611047.097 ops/s
Iteration  14: 1641356.056 ops/s
Iteration  15: 1680096.870 ops/s
Iteration  16: 1634023.759 ops/s
Iteration  17: 1655178.475 ops/s
Iteration  18: 1681817.835 ops/s
Iteration  19: 1617016.398 ops/s
Iteration  20: 1667245.878 ops/s
Iteration  21: 1639139.057 ops/s
Iteration  22: 1653850.152 ops/s
Iteration  23: 1678018.014 ops/s
Iteration  24: 1643735.947 ops/s
Iteration  25: 1672143.724 ops/s
Iteration  26: 1666978.487 ops/s
Iteration  27: 1672346.436 ops/s
Iteration  28: 1649334.605 ops/s
Iteration  29: 1675793.332 ops/s
Iteration  30: 1644797.444 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_normalViaFlatMap":
  1641134.218 ±(99.9%) 37559.709 ops/s [Average]
  (min, avg, max) = (1390312.645, 1641134.218, 1701666.059), stdev = 56217.609
  CI (99.9%): [1603574.509, 1678693.927] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
FlowableFlattenIterableTest._Benchmark.benchmark_normalViaFlatMap  thrpt   30  1641134.218 ± 37559.709  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_normalPrefetchViaFlatMap$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_normalPrefetchViaFlatMap

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 491979.182 ops/s
# Warmup Iteration   2: 1274639.745 ops/s
# Warmup Iteration   3: 1471085.859 ops/s
# Warmup Iteration   4: 1662821.908 ops/s
# Warmup Iteration   5: 1703439.201 ops/s
# Warmup Iteration   6: 1690420.743 ops/s
# Warmup Iteration   7: 1640374.858 ops/s
# Warmup Iteration   8: 1667458.553 ops/s
# Warmup Iteration   9: 1675691.615 ops/s
# Warmup Iteration  10: 1702765.645 ops/s
# Warmup Iteration  11: 1660022.245 ops/s
# Warmup Iteration  12: 1653292.018 ops/s
# Warmup Iteration  13: 1748655.551 ops/s
# Warmup Iteration  14: 1640355.489 ops/s
# Warmup Iteration  15: 1733523.088 ops/s
# Warmup Iteration  16: 1635726.406 ops/s
# Warmup Iteration  17: 1676273.067 ops/s
# Warmup Iteration  18: 1770776.645 ops/s
# Warmup Iteration  19: 1731944.113 ops/s
# Warmup Iteration  20: 1624189.277 ops/s
# Warmup Iteration  21: 1745439.033 ops/s
# Warmup Iteration  22: 1634212.260 ops/s
# Warmup Iteration  23: 1717131.438 ops/s
# Warmup Iteration  24: 1685586.085 ops/s
# Warmup Iteration  25: 1640304.247 ops/s
# Warmup Iteration  26: 1706919.033 ops/s
# Warmup Iteration  27: 1639093.375 ops/s
# Warmup Iteration  28: 1706806.822 ops/s
# Warmup Iteration  29: 1715620.191 ops/s
# Warmup Iteration  30: 1681329.472 ops/s
Iteration   1: 1750120.621 ops/s
Iteration   2: 1637080.828 ops/s
Iteration   3: 1712685.330 ops/s
Iteration   4: 1669308.061 ops/s
Iteration   5: 1651380.117 ops/s
Iteration   6: 1720258.924 ops/s
Iteration   7: 1680056.655 ops/s
Iteration   8: 1697426.605 ops/s
Iteration   9: 1664435.524 ops/s
Iteration  10: 1668140.557 ops/s
Iteration  11: 1762711.644 ops/s
Iteration  12: 1600003.791 ops/s
Iteration  13: 1693969.342 ops/s
Iteration  14: 1678576.133 ops/s
Iteration  15: 1713680.753 ops/s
Iteration  16: 1685027.289 ops/s
Iteration  17: 1560851.748 ops/s
Iteration  18: 1741289.924 ops/s
Iteration  19: 1686780.177 ops/s
Iteration  20: 1649000.050 ops/s
Iteration  21: 1724705.570 ops/s
Iteration  22: 1640971.407 ops/s
Iteration  23: 1664153.604 ops/s
Iteration  24: 1714335.341 ops/s
Iteration  25: 1668323.444 ops/s
Iteration  26: 1713588.279 ops/s
Iteration  27: 1742905.373 ops/s
Iteration  28: 1635321.620 ops/s
Iteration  29: 1721512.763 ops/s
Iteration  30: 1695512.278 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_normalPrefetchViaFlatMap":
  1684803.792 ±(99.9%) 29896.040 ops/s [Average]
  (min, avg, max) = (1560851.748, 1684803.792, 1762711.644), stdev = 44746.988
  CI (99.9%): [1654907.752, 1714699.832] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score       Error  Units
FlowableFlattenIterableTest._Benchmark.benchmark_normalPrefetchViaFlatMap  thrpt   30  1684803.792 ± 29896.040  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_fusedSourceCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_fusedSourceCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 118489.168 ops/s
# Warmup Iteration   2: 352745.556 ops/s
# Warmup Iteration   3: 405384.006 ops/s
# Warmup Iteration   4: 394305.859 ops/s
# Warmup Iteration   5: 402838.330 ops/s
# Warmup Iteration   6: 373321.740 ops/s
# Warmup Iteration   7: 409705.857 ops/s
# Warmup Iteration   8: 433364.431 ops/s
# Warmup Iteration   9: 411574.330 ops/s
# Warmup Iteration  10: 408020.280 ops/s
# Warmup Iteration  11: 413624.711 ops/s
# Warmup Iteration  12: 407946.768 ops/s
# Warmup Iteration  13: 424070.104 ops/s
# Warmup Iteration  14: 406324.309 ops/s
# Warmup Iteration  15: 425650.792 ops/s
# Warmup Iteration  16: 408138.732 ops/s
# Warmup Iteration  17: 477590.771 ops/s
# Warmup Iteration  18: 505710.858 ops/s
# Warmup Iteration  19: 467831.933 ops/s
# Warmup Iteration  20: 488565.986 ops/s
# Warmup Iteration  21: 500058.873 ops/s
# Warmup Iteration  22: 486695.974 ops/s
# Warmup Iteration  23: 503146.755 ops/s
# Warmup Iteration  24: 465577.757 ops/s
# Warmup Iteration  25: 473275.437 ops/s
# Warmup Iteration  26: 483301.618 ops/s
# Warmup Iteration  27: 479539.599 ops/s
# Warmup Iteration  28: 503951.475 ops/s
# Warmup Iteration  29: 486400.181 ops/s
# Warmup Iteration  30: 480292.699 ops/s
Iteration   1: 487882.880 ops/s
Iteration   2: 488341.205 ops/s
Iteration   3: 511723.026 ops/s
Iteration   4: 475894.192 ops/s
Iteration   5: 365074.172 ops/s
Iteration   6: 496672.350 ops/s
Iteration   7: 484920.771 ops/s
Iteration   8: 506827.555 ops/s
Iteration   9: 503142.399 ops/s
Iteration  10: 484066.962 ops/s
Iteration  11: 500097.530 ops/s
Iteration  12: 486720.257 ops/s
Iteration  13: 499093.240 ops/s
Iteration  14: 477874.185 ops/s
Iteration  15: 486478.299 ops/s
Iteration  16: 506540.740 ops/s
Iteration  17: 484084.261 ops/s
Iteration  18: 488742.890 ops/s
Iteration  19: 488146.203 ops/s
Iteration  20: 508290.156 ops/s
Iteration  21: 508260.617 ops/s
Iteration  22: 476400.168 ops/s
Iteration  23: 508372.006 ops/s
Iteration  24: 481324.555 ops/s
Iteration  25: 482214.342 ops/s
Iteration  26: 508858.582 ops/s
Iteration  27: 478934.744 ops/s
Iteration  28: 500761.459 ops/s
Iteration  29: 492398.610 ops/s
Iteration  30: 502851.777 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_fusedSourceCrash":
  489033.004 ±(99.9%) 17359.204 ops/s [Average]
  (min, avg, max) = (365074.172, 489033.004, 511723.026), stdev = 25982.441
  CI (99.9%): [471673.801, 506392.208] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score       Error  Units
FlowableFlattenIterableTest._Benchmark.benchmark_fusedSourceCrash  thrpt   30  489033.004 ± 17359.204  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_empty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_empty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2470132.449 ops/s
# Warmup Iteration   2: 6282712.301 ops/s
# Warmup Iteration   3: 8080425.967 ops/s
# Warmup Iteration   4: 7851140.754 ops/s
# Warmup Iteration   5: 8572806.862 ops/s
# Warmup Iteration   6: 8326034.176 ops/s
# Warmup Iteration   7: 8160579.896 ops/s
# Warmup Iteration   8: 7974045.781 ops/s
# Warmup Iteration   9: 8743526.145 ops/s
# Warmup Iteration  10: 8131312.327 ops/s
# Warmup Iteration  11: 7992495.804 ops/s
# Warmup Iteration  12: 8526824.929 ops/s
# Warmup Iteration  13: 8066843.256 ops/s
# Warmup Iteration  14: 8389500.990 ops/s
# Warmup Iteration  15: 8144540.790 ops/s
# Warmup Iteration  16: 8283531.527 ops/s
# Warmup Iteration  17: 8405421.887 ops/s
# Warmup Iteration  18: 8154451.339 ops/s
# Warmup Iteration  19: 8221479.180 ops/s
# Warmup Iteration  20: 8413234.928 ops/s
# Warmup Iteration  21: 8211272.764 ops/s
# Warmup Iteration  22: 8263148.504 ops/s
# Warmup Iteration  23: 8452587.785 ops/s
# Warmup Iteration  24: 7989612.820 ops/s
# Warmup Iteration  25: 8314574.249 ops/s
# Warmup Iteration  26: 8274953.398 ops/s
# Warmup Iteration  27: 8339307.494 ops/s
# Warmup Iteration  28: 8170547.918 ops/s
# Warmup Iteration  29: 8088790.189 ops/s
# Warmup Iteration  30: 8431689.591 ops/s
Iteration   1: 8290452.417 ops/s
Iteration   2: 8276670.220 ops/s
Iteration   3: 8388208.796 ops/s
Iteration   4: 7940029.364 ops/s
Iteration   5: 8307721.330 ops/s
Iteration   6: 8534006.811 ops/s
Iteration   7: 8010976.879 ops/s
Iteration   8: 8430745.153 ops/s
Iteration   9: 8296042.543 ops/s
Iteration  10: 8489453.882 ops/s
Iteration  11: 8163906.908 ops/s
Iteration  12: 8286304.279 ops/s
Iteration  13: 8254495.861 ops/s
Iteration  14: 8357804.481 ops/s
Iteration  15: 8154962.762 ops/s
Iteration  16: 8570378.266 ops/s
Iteration  17: 8148631.835 ops/s
Iteration  18: 8273229.020 ops/s
Iteration  19: 8539838.520 ops/s
Iteration  20: 8173504.890 ops/s
Iteration  21: 8623413.474 ops/s
Iteration  22: 7973625.020 ops/s
Iteration  23: 8463166.951 ops/s
Iteration  24: 8068182.004 ops/s
Iteration  25: 8230924.509 ops/s
Iteration  26: 8425865.366 ops/s
Iteration  27: 8172425.102 ops/s
Iteration  28: 8363102.104 ops/s
Iteration  29: 7980220.482 ops/s
Iteration  30: 8434653.300 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_empty":
  8287431.418 ±(99.9%) 123615.932 ops/s [Average]
  (min, avg, max) = (7940029.364, 8287431.418, 8623413.474), stdev = 185022.522
  CI (99.9%): [8163815.485, 8411047.350] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score        Error  Units
FlowableFlattenIterableTest._Benchmark.benchmark_empty  thrpt   30  8287431.418 ± 123615.932  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_upstreamFusionRejected$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_upstreamFusionRejected

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 632974.049 ops/s
# Warmup Iteration   2: 1990628.760 ops/s
# Warmup Iteration   3: 2755968.209 ops/s
# Warmup Iteration   4: 2610093.768 ops/s
# Warmup Iteration   5: 2732859.684 ops/s
# Warmup Iteration   6: 2693547.919 ops/s
# Warmup Iteration   7: 2705617.588 ops/s
# Warmup Iteration   8: 2795103.348 ops/s
# Warmup Iteration   9: 2567431.296 ops/s
# Warmup Iteration  10: 2733055.021 ops/s
# Warmup Iteration  11: 2722707.899 ops/s
# Warmup Iteration  12: 2723666.172 ops/s
# Warmup Iteration  13: 2699445.566 ops/s
# Warmup Iteration  14: 2731391.121 ops/s
# Warmup Iteration  15: 2717047.105 ops/s
# Warmup Iteration  16: 2612132.547 ops/s
# Warmup Iteration  17: 2723377.715 ops/s
# Warmup Iteration  18: 2687580.547 ops/s
# Warmup Iteration  19: 2704628.249 ops/s
# Warmup Iteration  20: 2709332.008 ops/s
# Warmup Iteration  21: 2767861.117 ops/s
# Warmup Iteration  22: 2679684.135 ops/s
# Warmup Iteration  23: 2704915.151 ops/s
# Warmup Iteration  24: 2768248.440 ops/s
# Warmup Iteration  25: 2624984.731 ops/s
# Warmup Iteration  26: 2705523.347 ops/s
# Warmup Iteration  27: 2769027.776 ops/s
# Warmup Iteration  28: 2698035.528 ops/s
# Warmup Iteration  29: 2664945.151 ops/s
# Warmup Iteration  30: 2149250.639 ops/s
Iteration   1: 2674406.746 ops/s
Iteration   2: 2749981.226 ops/s
Iteration   3: 2670373.638 ops/s
Iteration   4: 2665106.775 ops/s
Iteration   5: 2816025.704 ops/s
Iteration   6: 2641287.420 ops/s
Iteration   7: 2649904.513 ops/s
Iteration   8: 2827605.916 ops/s
Iteration   9: 2583804.376 ops/s
Iteration  10: 2818934.876 ops/s
Iteration  11: 2581109.427 ops/s
Iteration  12: 2706574.771 ops/s
Iteration  13: 2757438.589 ops/s
Iteration  14: 2642228.734 ops/s
Iteration  15: 2661787.884 ops/s
Iteration  16: 2753871.192 ops/s
Iteration  17: 2652975.337 ops/s
Iteration  18: 2750160.445 ops/s
Iteration  19: 2558643.154 ops/s
Iteration  20: 2764408.020 ops/s
Iteration  21: 2812337.778 ops/s
Iteration  22: 2649447.943 ops/s
Iteration  23: 2739572.970 ops/s
Iteration  24: 2821121.020 ops/s
Iteration  25: 2668872.445 ops/s
Iteration  26: 2827965.814 ops/s
Iteration  27: 2652308.766 ops/s
Iteration  28: 2768506.463 ops/s
Iteration  29: 2644504.264 ops/s
Iteration  30: 2752314.780 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_upstreamFusionRejected":
  2708786.033 ±(99.9%) 52907.209 ops/s [Average]
  (min, avg, max) = (2558643.154, 2708786.033, 2827965.814), stdev = 79189.026
  CI (99.9%): [2655878.824, 2761693.242] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score       Error  Units
FlowableFlattenIterableTest._Benchmark.benchmark_upstreamFusionRejected  thrpt   30  2708786.033 ± 52907.209  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_iteratorHasNextThrowsImmediatelyJust$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_iteratorHasNextThrowsImmediatelyJust

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 315662.249 ops/s
# Warmup Iteration   2: 540807.715 ops/s
# Warmup Iteration   3: 666218.182 ops/s
# Warmup Iteration   4: 594801.211 ops/s
# Warmup Iteration   5: 630786.352 ops/s
# Warmup Iteration   6: 660638.902 ops/s
# Warmup Iteration   7: 543574.894 ops/s
# Warmup Iteration   8: 668079.356 ops/s
# Warmup Iteration   9: 639313.994 ops/s
# Warmup Iteration  10: 667117.058 ops/s
# Warmup Iteration  11: 640908.767 ops/s
# Warmup Iteration  12: 652787.373 ops/s
# Warmup Iteration  13: 626333.736 ops/s
# Warmup Iteration  14: 666383.247 ops/s
# Warmup Iteration  15: 632806.910 ops/s
# Warmup Iteration  16: 679071.775 ops/s
# Warmup Iteration  17: 672192.275 ops/s
# Warmup Iteration  18: 684987.364 ops/s
# Warmup Iteration  19: 687769.815 ops/s
# Warmup Iteration  20: 679119.663 ops/s
# Warmup Iteration  21: 694630.307 ops/s
# Warmup Iteration  22: 702006.061 ops/s
# Warmup Iteration  23: 671408.504 ops/s
# Warmup Iteration  24: 689670.872 ops/s
# Warmup Iteration  25: 663294.638 ops/s
# Warmup Iteration  26: 669758.428 ops/s
# Warmup Iteration  27: 689337.692 ops/s
# Warmup Iteration  28: 670920.943 ops/s
# Warmup Iteration  29: 671350.791 ops/s
# Warmup Iteration  30: 691794.522 ops/s
Iteration   1: 666896.145 ops/s
Iteration   2: 692730.359 ops/s
Iteration   3: 691910.240 ops/s
Iteration   4: 708525.180 ops/s
Iteration   5: 670786.692 ops/s
Iteration   6: 722986.614 ops/s
Iteration   7: 659966.107 ops/s
Iteration   8: 689596.714 ops/s
Iteration   9: 699156.601 ops/s
Iteration  10: 685683.452 ops/s
Iteration  11: 685621.061 ops/s
Iteration  12: 679964.376 ops/s
Iteration  13: 707011.229 ops/s
Iteration  14: 680364.981 ops/s
Iteration  15: 663936.189 ops/s
Iteration  16: 709743.547 ops/s
Iteration  17: 679313.744 ops/s
Iteration  18: 687595.591 ops/s
Iteration  19: 703579.676 ops/s
Iteration  20: 661855.129 ops/s
Iteration  21: 686456.235 ops/s
Iteration  22: 682795.285 ops/s
Iteration  23: 696513.348 ops/s
Iteration  24: 689710.419 ops/s
Iteration  25: 671937.410 ops/s
Iteration  26: 722225.408 ops/s
Iteration  27: 685450.519 ops/s
Iteration  28: 696031.297 ops/s
Iteration  29: 687510.433 ops/s
Iteration  30: 686601.531 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_iteratorHasNextThrowsImmediatelyJust":
  688415.184 ±(99.9%) 10736.464 ops/s [Average]
  (min, avg, max) = (659966.107, 688415.184, 722986.614), stdev = 16069.835
  CI (99.9%): [677678.720, 699151.648] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               Mode  Cnt       Score       Error  Units
FlowableFlattenIterableTest._Benchmark.benchmark_iteratorHasNextThrowsImmediatelyJust  thrpt   30  688415.184 ± 10736.464  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 434381.288 ops/s
# Warmup Iteration   2: 1494200.413 ops/s
# Warmup Iteration   3: 2085712.679 ops/s
# Warmup Iteration   4: 2289242.360 ops/s
# Warmup Iteration   5: 2284711.136 ops/s
# Warmup Iteration   6: 2290779.158 ops/s
# Warmup Iteration   7: 2238357.501 ops/s
# Warmup Iteration   8: 2266086.739 ops/s
# Warmup Iteration   9: 2278173.663 ops/s
# Warmup Iteration  10: 2283087.535 ops/s
# Warmup Iteration  11: 2294003.247 ops/s
# Warmup Iteration  12: 2182628.245 ops/s
# Warmup Iteration  13: 2366905.299 ops/s
# Warmup Iteration  14: 2298355.335 ops/s
# Warmup Iteration  15: 2217714.766 ops/s
# Warmup Iteration  16: 2323151.595 ops/s
# Warmup Iteration  17: 2257754.801 ops/s
# Warmup Iteration  18: 2223400.515 ops/s
# Warmup Iteration  19: 2267110.658 ops/s
# Warmup Iteration  20: 2204943.415 ops/s
# Warmup Iteration  21: 2377719.134 ops/s
# Warmup Iteration  22: 2336581.795 ops/s
# Warmup Iteration  23: 2171528.183 ops/s
# Warmup Iteration  24: 1800928.175 ops/s
# Warmup Iteration  25: 2174430.516 ops/s
# Warmup Iteration  26: 2198843.731 ops/s
# Warmup Iteration  27: 2326762.702 ops/s
# Warmup Iteration  28: 2342881.396 ops/s
# Warmup Iteration  29: 2240331.172 ops/s
# Warmup Iteration  30: 2353242.044 ops/s
Iteration   1: 2306141.616 ops/s
Iteration   2: 2230390.356 ops/s
Iteration   3: 2246588.356 ops/s
Iteration   4: 2306369.148 ops/s
Iteration   5: 2157907.948 ops/s
Iteration   6: 2299706.833 ops/s
Iteration   7: 2243728.021 ops/s
Iteration   8: 2275529.100 ops/s
Iteration   9: 2296332.391 ops/s
Iteration  10: 2282942.896 ops/s
Iteration  11: 2264111.095 ops/s
Iteration  12: 2344192.142 ops/s
Iteration  13: 2133973.965 ops/s
Iteration  14: 2308249.409 ops/s
Iteration  15: 2272753.500 ops/s
Iteration  16: 2273348.427 ops/s
Iteration  17: 2303952.066 ops/s
Iteration  18: 2243669.336 ops/s
Iteration  19: 2242186.939 ops/s
Iteration  20: 2386955.826 ops/s
Iteration  21: 2212750.744 ops/s
Iteration  22: 2324625.895 ops/s
Iteration  23: 2198716.337 ops/s
Iteration  24: 2319409.381 ops/s
Iteration  25: 2316958.044 ops/s
Iteration  26: 2185786.510 ops/s
Iteration  27: 2345348.208 ops/s
Iteration  28: 2194941.866 ops/s
Iteration  29: 2382976.057 ops/s
Iteration  30: 2245197.461 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_dispose":
  2271524.662 ±(99.9%) 41016.399 ops/s [Average]
  (min, avg, max) = (2133973.965, 2271524.662, 2386955.826), stdev = 61391.420
  CI (99.9%): [2230508.263, 2312541.061] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
FlowableFlattenIterableTest._Benchmark.benchmark_dispose  thrpt   30  2271524.662 ± 41016.399  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_iteratorNextThrowsAndUnsubscribes$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_iteratorNextThrowsAndUnsubscribes

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 99943.570 ops/s
# Warmup Iteration   2: 364615.756 ops/s
# Warmup Iteration   3: 494014.735 ops/s
# Warmup Iteration   4: 456233.142 ops/s
# Warmup Iteration   5: 452720.392 ops/s
# Warmup Iteration   6: 525253.409 ops/s
# Warmup Iteration   7: 513526.492 ops/s
# Warmup Iteration   8: 534427.156 ops/s
# Warmup Iteration   9: 508424.162 ops/s
# Warmup Iteration  10: 525819.634 ops/s
# Warmup Iteration  11: 513440.146 ops/s
# Warmup Iteration  12: 524985.559 ops/s
# Warmup Iteration  13: 529963.947 ops/s
# Warmup Iteration  14: 502019.851 ops/s
# Warmup Iteration  15: 536831.351 ops/s
# Warmup Iteration  16: 502720.895 ops/s
# Warmup Iteration  17: 552739.662 ops/s
# Warmup Iteration  18: 546019.982 ops/s
# Warmup Iteration  19: 533904.862 ops/s
# Warmup Iteration  20: 554060.125 ops/s
# Warmup Iteration  21: 534952.386 ops/s
# Warmup Iteration  22: 551258.830 ops/s
# Warmup Iteration  23: 524326.720 ops/s
# Warmup Iteration  24: 535232.031 ops/s
# Warmup Iteration  25: 556874.491 ops/s
# Warmup Iteration  26: 528903.339 ops/s
# Warmup Iteration  27: 555131.900 ops/s
# Warmup Iteration  28: 529589.628 ops/s
# Warmup Iteration  29: 556737.035 ops/s
# Warmup Iteration  30: 536012.210 ops/s
Iteration   1: 546040.456 ops/s
Iteration   2: 538766.273 ops/s
Iteration   3: 551875.216 ops/s
Iteration   4: 543759.111 ops/s
Iteration   5: 536566.841 ops/s
Iteration   6: 527425.474 ops/s
Iteration   7: 556076.208 ops/s
Iteration   8: 524131.524 ops/s
Iteration   9: 551036.238 ops/s
Iteration  10: 528513.607 ops/s
Iteration  11: 557144.709 ops/s
Iteration  12: 552649.827 ops/s
Iteration  13: 556276.214 ops/s
Iteration  14: 526388.678 ops/s
Iteration  15: 552741.206 ops/s
Iteration  16: 537460.055 ops/s
Iteration  17: 536388.680 ops/s
Iteration  18: 550820.505 ops/s
Iteration  19: 534914.183 ops/s
Iteration  20: 555038.163 ops/s
Iteration  21: 549683.055 ops/s
Iteration  22: 566908.200 ops/s
Iteration  23: 528160.488 ops/s
Iteration  24: 549198.499 ops/s
Iteration  25: 546552.048 ops/s
Iteration  26: 550909.430 ops/s
Iteration  27: 524228.660 ops/s
Iteration  28: 546264.464 ops/s
Iteration  29: 538769.552 ops/s
Iteration  30: 543341.299 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_iteratorNextThrowsAndUnsubscribes":
  543600.962 ±(99.9%) 7544.890 ops/s [Average]
  (min, avg, max) = (524131.524, 543600.962, 566908.200), stdev = 11292.838
  CI (99.9%): [536056.072, 551145.852] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            Mode  Cnt       Score      Error  Units
FlowableFlattenIterableTest._Benchmark.benchmark_iteratorNextThrowsAndUnsubscribes  thrpt   30  543600.962 ± 7544.890  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_hasNextIsNotCalledAfterChildUnsubscribedOnNext$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_hasNextIsNotCalledAfterChildUnsubscribedOnNext

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 273342.649 ops/s
# Warmup Iteration   2: 1267852.304 ops/s
# Warmup Iteration   3: 1671846.686 ops/s
# Warmup Iteration   4: 2004106.665 ops/s
# Warmup Iteration   5: 2043679.968 ops/s
# Warmup Iteration   6: 2034101.266 ops/s
# Warmup Iteration   7: 1972211.964 ops/s
# Warmup Iteration   8: 2025892.033 ops/s
# Warmup Iteration   9: 2098028.201 ops/s
# Warmup Iteration  10: 1992455.227 ops/s
# Warmup Iteration  11: 1988664.479 ops/s
# Warmup Iteration  12: 2089669.094 ops/s
# Warmup Iteration  13: 2033178.300 ops/s
# Warmup Iteration  14: 2045544.347 ops/s
# Warmup Iteration  15: 1988603.647 ops/s
# Warmup Iteration  16: 2083710.720 ops/s
# Warmup Iteration  17: 1989056.337 ops/s
# Warmup Iteration  18: 2080292.288 ops/s
# Warmup Iteration  19: 1643710.033 ops/s
# Warmup Iteration  20: 1991264.163 ops/s
# Warmup Iteration  21: 2079015.361 ops/s
# Warmup Iteration  22: 1981258.740 ops/s
# Warmup Iteration  23: 2053101.926 ops/s
# Warmup Iteration  24: 2069699.178 ops/s
# Warmup Iteration  25: 2017995.440 ops/s
# Warmup Iteration  26: 2017501.778 ops/s
# Warmup Iteration  27: 2089512.266 ops/s
# Warmup Iteration  28: 1995100.499 ops/s
# Warmup Iteration  29: 2103459.547 ops/s
# Warmup Iteration  30: 1968132.603 ops/s
Iteration   1: 2066415.402 ops/s
Iteration   2: 1977450.423 ops/s
Iteration   3: 2061968.157 ops/s
Iteration   4: 2118651.200 ops/s
Iteration   5: 1995949.549 ops/s
Iteration   6: 2039332.282 ops/s
Iteration   7: 2075933.863 ops/s
Iteration   8: 2086213.131 ops/s
Iteration   9: 1986583.771 ops/s
Iteration  10: 2069462.339 ops/s
Iteration  11: 2059789.065 ops/s
Iteration  12: 1956423.968 ops/s
Iteration  13: 2011240.137 ops/s
Iteration  14: 2021545.690 ops/s
Iteration  15: 2137442.297 ops/s
Iteration  16: 2113486.217 ops/s
Iteration  17: 1963640.210 ops/s
Iteration  18: 2019597.412 ops/s
Iteration  19: 2077844.648 ops/s
Iteration  20: 2094040.198 ops/s
Iteration  21: 1948125.588 ops/s
Iteration  22: 2088386.236 ops/s
Iteration  23: 1949382.955 ops/s
Iteration  24: 2032799.865 ops/s
Iteration  25: 2067885.576 ops/s
Iteration  26: 1995789.007 ops/s
Iteration  27: 2068566.194 ops/s
Iteration  28: 2020559.839 ops/s
Iteration  29: 2109157.483 ops/s
Iteration  30: 2079116.703 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_hasNextIsNotCalledAfterChildUnsubscribedOnNext":
  2043092.647 ±(99.9%) 35829.920 ops/s [Average]
  (min, avg, max) = (1948125.588, 2043092.647, 2137442.297), stdev = 53628.541
  CI (99.9%): [2007262.727, 2078922.567] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                         Mode  Cnt        Score       Error  Units
FlowableFlattenIterableTest._Benchmark.benchmark_hasNextIsNotCalledAfterChildUnsubscribedOnNext  thrpt   30  2043092.647 ± 35829.920  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastOneTest._Benchmark.benchmark_lastOfEmptyReturnsEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastOneTest._Benchmark.benchmark_lastOfEmptyReturnsEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1798594.360 ops/s
# Warmup Iteration   2: 4362943.474 ops/s
# Warmup Iteration   3: 5312636.358 ops/s
# Warmup Iteration   4: 5774916.544 ops/s
# Warmup Iteration   5: 5944629.255 ops/s
# Warmup Iteration   6: 5600929.900 ops/s
# Warmup Iteration   7: 5988960.173 ops/s
# Warmup Iteration   8: 5525444.197 ops/s
# Warmup Iteration   9: 5872069.367 ops/s
# Warmup Iteration  10: 5791625.131 ops/s
# Warmup Iteration  11: 5789811.200 ops/s
# Warmup Iteration  12: 5785166.509 ops/s
# Warmup Iteration  13: 5650085.891 ops/s
# Warmup Iteration  14: 5868164.508 ops/s
# Warmup Iteration  15: 5479882.130 ops/s
# Warmup Iteration  16: 5884523.254 ops/s
# Warmup Iteration  17: 5834202.119 ops/s
# Warmup Iteration  18: 5897845.766 ops/s
# Warmup Iteration  19: 5658754.136 ops/s
# Warmup Iteration  20: 5832076.208 ops/s
# Warmup Iteration  21: 5818767.638 ops/s
# Warmup Iteration  22: 5628999.826 ops/s
# Warmup Iteration  23: 6024520.231 ops/s
# Warmup Iteration  24: 5818254.250 ops/s
# Warmup Iteration  25: 5722665.202 ops/s
# Warmup Iteration  26: 5842616.005 ops/s
# Warmup Iteration  27: 5786248.511 ops/s
# Warmup Iteration  28: 5757839.390 ops/s
# Warmup Iteration  29: 5719418.675 ops/s
# Warmup Iteration  30: 5626199.269 ops/s
Iteration   1: 6081745.439 ops/s
Iteration   2: 5508804.267 ops/s
Iteration   3: 5925966.311 ops/s
Iteration   4: 5931864.534 ops/s
Iteration   5: 5741371.879 ops/s
Iteration   6: 5892947.394 ops/s
Iteration   7: 6100147.138 ops/s
Iteration   8: 5887271.120 ops/s
Iteration   9: 5632683.312 ops/s
Iteration  10: 5902625.425 ops/s
Iteration  11: 5609492.651 ops/s
Iteration  12: 6050703.604 ops/s
Iteration  13: 5727656.227 ops/s
Iteration  14: 5693227.657 ops/s
Iteration  15: 5831816.809 ops/s
Iteration  16: 5574290.001 ops/s
Iteration  17: 6058176.643 ops/s
Iteration  18: 5739934.487 ops/s
Iteration  19: 5666906.339 ops/s
Iteration  20: 5964512.612 ops/s
Iteration  21: 5806926.166 ops/s
Iteration  22: 5909800.479 ops/s
Iteration  23: 5593798.226 ops/s
Iteration  24: 5746170.276 ops/s
Iteration  25: 5911158.744 ops/s
Iteration  26: 5563649.082 ops/s
Iteration  27: 5879825.750 ops/s
Iteration  28: 5568892.058 ops/s
Iteration  29: 5783041.325 ops/s
Iteration  30: 6063343.817 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastOneTest._Benchmark.benchmark_lastOfEmptyReturnsEmpty":
  5811624.992 ±(99.9%) 116358.736 ops/s [Average]
  (min, avg, max) = (5508804.267, 5811624.992, 6100147.138), stdev = 174160.291
  CI (99.9%): [5695266.256, 5927983.728] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score        Error  Units
FlowableTakeLastOneTest._Benchmark.benchmark_lastOfEmptyReturnsEmpty  thrpt   30  5811624.992 ± 116358.736  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableLatestTest._Benchmark.benchmark_empty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableLatestTest._Benchmark.benchmark_empty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 310831.657 ops/s
# Warmup Iteration   2: 546635.569 ops/s
# Warmup Iteration   3: 684356.869 ops/s
# Warmup Iteration   4: 610672.877 ops/s
# Warmup Iteration   5: 680467.367 ops/s
# Warmup Iteration   6: 642706.441 ops/s
# Warmup Iteration   7: 732796.461 ops/s
# Warmup Iteration   8: 676405.941 ops/s
# Warmup Iteration   9: 720823.782 ops/s
# Warmup Iteration  10: 683436.948 ops/s
# Warmup Iteration  11: 704054.649 ops/s
# Warmup Iteration  12: 713582.918 ops/s
# Warmup Iteration  13: 678009.946 ops/s
# Warmup Iteration  14: 603930.011 ops/s
# Warmup Iteration  15: 679782.607 ops/s
# Warmup Iteration  16: 691435.628 ops/s
# Warmup Iteration  17: 731711.513 ops/s
# Warmup Iteration  18: 764135.163 ops/s
# Warmup Iteration  19: 722880.026 ops/s
# Warmup Iteration  20: 743671.569 ops/s
# Warmup Iteration  21: 720745.406 ops/s
# Warmup Iteration  22: 737948.276 ops/s
# Warmup Iteration  23: 733682.320 ops/s
# Warmup Iteration  24: 725874.570 ops/s
# Warmup Iteration  25: 717721.822 ops/s
# Warmup Iteration  26: 752514.088 ops/s
# Warmup Iteration  27: 718191.751 ops/s
# Warmup Iteration  28: 750617.094 ops/s
# Warmup Iteration  29: 729204.904 ops/s
# Warmup Iteration  30: 707955.023 ops/s
Iteration   1: 765962.533 ops/s
Iteration   2: 730296.091 ops/s
Iteration   3: 737652.915 ops/s
Iteration   4: 709819.332 ops/s
Iteration   5: 759169.585 ops/s
Iteration   6: 757932.992 ops/s
Iteration   7: 750925.773 ops/s
Iteration   8: 718533.118 ops/s
Iteration   9: 749841.476 ops/s
Iteration  10: 737935.945 ops/s
Iteration  11: 739959.210 ops/s
Iteration  12: 782518.749 ops/s
Iteration  13: 703934.784 ops/s
Iteration  14: 746420.833 ops/s
Iteration  15: 755214.166 ops/s
Iteration  16: 702788.229 ops/s
Iteration  17: 758245.823 ops/s
Iteration  18: 728682.416 ops/s
Iteration  19: 736962.132 ops/s
Iteration  20: 756414.294 ops/s
Iteration  21: 719140.251 ops/s
Iteration  22: 737386.333 ops/s
Iteration  23: 735218.089 ops/s
Iteration  24: 733920.459 ops/s
Iteration  25: 768814.618 ops/s
Iteration  26: 703840.961 ops/s
Iteration  27: 741853.228 ops/s
Iteration  28: 744142.460 ops/s
Iteration  29: 748632.355 ops/s
Iteration  30: 727672.018 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableLatestTest._Benchmark.benchmark_empty":
  739661.039 ±(99.9%) 13271.980 ops/s [Average]
  (min, avg, max) = (702788.229, 739661.039, 782518.749), stdev = 19864.876
  CI (99.9%): [726389.059, 752933.019] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score       Error  Units
BlockingFlowableLatestTest._Benchmark.benchmark_empty  thrpt   30  739661.039 ± 13271.980  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFromStreamTest._Benchmark.benchmark_emptyConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFromStreamTest._Benchmark.benchmark_emptyConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1278065.615 ops/s
# Warmup Iteration   2: 3506745.177 ops/s
# Warmup Iteration   3: 4813539.522 ops/s
# Warmup Iteration   4: 4970137.134 ops/s
# Warmup Iteration   5: 4986593.342 ops/s
# Warmup Iteration   6: 4820140.652 ops/s
# Warmup Iteration   7: 5078027.732 ops/s
# Warmup Iteration   8: 4925503.081 ops/s
# Warmup Iteration   9: 4847320.528 ops/s
# Warmup Iteration  10: 5162774.833 ops/s
# Warmup Iteration  11: 4694245.773 ops/s
# Warmup Iteration  12: 5045515.794 ops/s
# Warmup Iteration  13: 5058401.165 ops/s
# Warmup Iteration  14: 4850106.162 ops/s
# Warmup Iteration  15: 5029515.645 ops/s
# Warmup Iteration  16: 4957014.403 ops/s
# Warmup Iteration  17: 5001350.183 ops/s
# Warmup Iteration  18: 4985722.924 ops/s
# Warmup Iteration  19: 4822702.397 ops/s
# Warmup Iteration  20: 5007423.972 ops/s
# Warmup Iteration  21: 4823149.488 ops/s
# Warmup Iteration  22: 4874212.660 ops/s
# Warmup Iteration  23: 4975384.666 ops/s
# Warmup Iteration  24: 4814189.899 ops/s
# Warmup Iteration  25: 4949458.092 ops/s
# Warmup Iteration  26: 4835214.740 ops/s
# Warmup Iteration  27: 4906201.031 ops/s
# Warmup Iteration  28: 5134287.433 ops/s
# Warmup Iteration  29: 4972172.193 ops/s
# Warmup Iteration  30: 4992517.438 ops/s
Iteration   1: 4853797.615 ops/s
Iteration   2: 4999501.546 ops/s
Iteration   3: 5070373.042 ops/s
Iteration   4: 4883536.851 ops/s
Iteration   5: 4889781.600 ops/s
Iteration   6: 4932574.717 ops/s
Iteration   7: 5203604.507 ops/s
Iteration   8: 5033560.632 ops/s
Iteration   9: 4922425.516 ops/s
Iteration  10: 5125954.064 ops/s
Iteration  11: 4673679.143 ops/s
Iteration  12: 5023971.820 ops/s
Iteration  13: 4915557.444 ops/s
Iteration  14: 4907353.948 ops/s
Iteration  15: 5015266.283 ops/s
Iteration  16: 5156693.545 ops/s
Iteration  17: 4765063.370 ops/s
Iteration  18: 5055049.254 ops/s
Iteration  19: 5129396.260 ops/s
Iteration  20: 4724703.333 ops/s
Iteration  21: 5093411.977 ops/s
Iteration  22: 4968262.437 ops/s
Iteration  23: 5110039.023 ops/s
Iteration  24: 4818816.619 ops/s
Iteration  25: 4952274.535 ops/s
Iteration  26: 5253406.639 ops/s
Iteration  27: 4901750.257 ops/s
Iteration  28: 4975500.031 ops/s
Iteration  29: 4793605.254 ops/s
Iteration  30: 4967222.983 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableFromStreamTest._Benchmark.benchmark_emptyConditional":
  4970537.808 ±(99.9%) 93536.916 ops/s [Average]
  (min, avg, max) = (4673679.143, 4970537.808, 5253406.639), stdev = 140001.663
  CI (99.9%): [4877000.892, 5064074.724] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
FlowableFromStreamTest._Benchmark.benchmark_emptyConditional  thrpt   30  4970537.808 ± 93536.916  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFromStreamTest._Benchmark.benchmark_empty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFromStreamTest._Benchmark.benchmark_empty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1081535.373 ops/s
# Warmup Iteration   2: 4907187.593 ops/s
# Warmup Iteration   3: 6522773.340 ops/s
# Warmup Iteration   4: 6756974.927 ops/s
# Warmup Iteration   5: 6929250.512 ops/s
# Warmup Iteration   6: 6535602.632 ops/s
# Warmup Iteration   7: 6674795.486 ops/s
# Warmup Iteration   8: 7011519.114 ops/s
# Warmup Iteration   9: 5580481.418 ops/s
# Warmup Iteration  10: 6742462.305 ops/s
# Warmup Iteration  11: 6422468.419 ops/s
# Warmup Iteration  12: 6996743.450 ops/s
# Warmup Iteration  13: 6767271.529 ops/s
# Warmup Iteration  14: 6779524.227 ops/s
# Warmup Iteration  15: 6663968.949 ops/s
# Warmup Iteration  16: 6987279.664 ops/s
# Warmup Iteration  17: 7058308.151 ops/s
# Warmup Iteration  18: 6617860.718 ops/s
# Warmup Iteration  19: 6992130.851 ops/s
# Warmup Iteration  20: 6835592.479 ops/s
# Warmup Iteration  21: 6726537.264 ops/s
# Warmup Iteration  22: 6978849.831 ops/s
# Warmup Iteration  23: 6625573.936 ops/s
# Warmup Iteration  24: 6845465.050 ops/s
# Warmup Iteration  25: 6844479.595 ops/s
# Warmup Iteration  26: 6841003.587 ops/s
# Warmup Iteration  27: 6893396.249 ops/s
# Warmup Iteration  28: 6707380.890 ops/s
# Warmup Iteration  29: 6771270.508 ops/s
# Warmup Iteration  30: 7119604.403 ops/s
Iteration   1: 6578926.569 ops/s
Iteration   2: 7067802.869 ops/s
Iteration   3: 6722589.770 ops/s
Iteration   4: 6899504.661 ops/s
Iteration   5: 6664915.683 ops/s
Iteration   6: 6821470.398 ops/s
Iteration   7: 7000746.866 ops/s
Iteration   8: 6649563.265 ops/s
Iteration   9: 7019151.998 ops/s
Iteration  10: 6804014.602 ops/s
Iteration  11: 7014141.561 ops/s
Iteration  12: 6600416.303 ops/s
Iteration  13: 6963818.986 ops/s
Iteration  14: 6979242.812 ops/s
Iteration  15: 6739754.726 ops/s
Iteration  16: 6961178.288 ops/s
Iteration  17: 6575885.718 ops/s
Iteration  18: 6819414.932 ops/s
Iteration  19: 6870886.344 ops/s
Iteration  20: 6614654.648 ops/s
Iteration  21: 7107782.980 ops/s
Iteration  22: 6765841.778 ops/s
Iteration  23: 6993027.369 ops/s
Iteration  24: 6812798.856 ops/s
Iteration  25: 6799793.153 ops/s
Iteration  26: 7000759.560 ops/s
Iteration  27: 6641403.972 ops/s
Iteration  28: 7022516.055 ops/s
Iteration  29: 7236006.647 ops/s
Iteration  30: 6673410.727 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableFromStreamTest._Benchmark.benchmark_empty":
  6847380.737 ±(99.9%) 118836.490 ops/s [Average]
  (min, avg, max) = (6575885.718, 6847380.737, 7236006.647), stdev = 177868.877
  CI (99.9%): [6728544.247, 6966217.226] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score        Error  Units
FlowableFromStreamTest._Benchmark.benchmark_empty  thrpt   30  6847380.737 ± 118836.490  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_overlapEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_overlapEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 377860.461 ops/s
# Warmup Iteration   2: 1543465.659 ops/s
# Warmup Iteration   3: 2281357.587 ops/s
# Warmup Iteration   4: 2175777.949 ops/s
# Warmup Iteration   5: 2152243.886 ops/s
# Warmup Iteration   6: 2205029.090 ops/s
# Warmup Iteration   7: 2156824.839 ops/s
# Warmup Iteration   8: 2211991.108 ops/s
# Warmup Iteration   9: 2230051.289 ops/s
# Warmup Iteration  10: 2204611.860 ops/s
# Warmup Iteration  11: 2209238.039 ops/s
# Warmup Iteration  12: 2161979.020 ops/s
# Warmup Iteration  13: 2230028.486 ops/s
# Warmup Iteration  14: 2145621.363 ops/s
# Warmup Iteration  15: 2214110.121 ops/s
# Warmup Iteration  16: 2135760.702 ops/s
# Warmup Iteration  17: 2276545.653 ops/s
# Warmup Iteration  18: 2236665.363 ops/s
# Warmup Iteration  19: 2258386.007 ops/s
# Warmup Iteration  20: 2299720.706 ops/s
# Warmup Iteration  21: 2168701.235 ops/s
# Warmup Iteration  22: 2284529.554 ops/s
# Warmup Iteration  23: 2171197.516 ops/s
# Warmup Iteration  24: 2112306.993 ops/s
# Warmup Iteration  25: 2282213.513 ops/s
# Warmup Iteration  26: 2197515.685 ops/s
# Warmup Iteration  27: 2246483.126 ops/s
# Warmup Iteration  28: 2208012.052 ops/s
# Warmup Iteration  29: 2299973.576 ops/s
# Warmup Iteration  30: 2246009.409 ops/s
Iteration   1: 2126703.149 ops/s
Iteration   2: 2337954.854 ops/s
Iteration   3: 2129233.604 ops/s
Iteration   4: 2351052.637 ops/s
Iteration   5: 2213119.810 ops/s
Iteration   6: 2128428.446 ops/s
Iteration   7: 2298938.118 ops/s
Iteration   8: 2201857.396 ops/s
Iteration   9: 2242953.483 ops/s
Iteration  10: 2153765.844 ops/s
Iteration  11: 2251007.267 ops/s
Iteration  12: 2300956.632 ops/s
Iteration  13: 2136156.227 ops/s
Iteration  14: 2261942.613 ops/s
Iteration  15: 2254663.904 ops/s
Iteration  16: 2150538.662 ops/s
Iteration  17: 2223878.973 ops/s
Iteration  18: 2174870.185 ops/s
Iteration  19: 2299482.244 ops/s
Iteration  20: 2222599.489 ops/s
Iteration  21: 2161461.686 ops/s
Iteration  22: 2203667.333 ops/s
Iteration  23: 2251300.486 ops/s
Iteration  24: 2242919.558 ops/s
Iteration  25: 2269593.230 ops/s
Iteration  26: 2173018.085 ops/s
Iteration  27: 2366539.688 ops/s
Iteration  28: 2218907.899 ops/s
Iteration  29: 2122465.549 ops/s
Iteration  30: 2326565.975 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_overlapEmpty":
  2226551.434 ±(99.9%) 47980.887 ops/s [Average]
  (min, avg, max) = (2122465.549, 2226551.434, 2366539.688), stdev = 71815.538
  CI (99.9%): [2178570.547, 2274532.321] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
FlowableWindowWithSizeTest._Benchmark.benchmark_overlapEmpty  thrpt   30  2226551.434 ± 47980.887  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFromStreamTest._Benchmark.benchmark_closeCalledOnEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFromStreamTest._Benchmark.benchmark_closeCalledOnEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 950680.101 ops/s
# Warmup Iteration   2: 4404472.383 ops/s
# Warmup Iteration   3: 5815584.843 ops/s
# Warmup Iteration   4: 5098728.807 ops/s
# Warmup Iteration   5: 6513643.256 ops/s
# Warmup Iteration   6: 6533837.601 ops/s
# Warmup Iteration   7: 6238657.959 ops/s
# Warmup Iteration   8: 6450559.153 ops/s
# Warmup Iteration   9: 6283097.544 ops/s
# Warmup Iteration  10: 6305880.169 ops/s
# Warmup Iteration  11: 6634485.216 ops/s
# Warmup Iteration  12: 6380566.789 ops/s
# Warmup Iteration  13: 6234623.868 ops/s
# Warmup Iteration  14: 6430878.242 ops/s
# Warmup Iteration  15: 6334486.424 ops/s
# Warmup Iteration  16: 6593555.013 ops/s
# Warmup Iteration  17: 5913917.393 ops/s
# Warmup Iteration  18: 6108215.650 ops/s
# Warmup Iteration  19: 6165925.691 ops/s
# Warmup Iteration  20: 6305541.507 ops/s
# Warmup Iteration  21: 6204914.059 ops/s
# Warmup Iteration  22: 6040121.795 ops/s
# Warmup Iteration  23: 6140608.626 ops/s
# Warmup Iteration  24: 6080560.272 ops/s
# Warmup Iteration  25: 6124613.454 ops/s
# Warmup Iteration  26: 6260410.312 ops/s
# Warmup Iteration  27: 6025880.154 ops/s
# Warmup Iteration  28: 6346039.313 ops/s
# Warmup Iteration  29: 6015083.281 ops/s
# Warmup Iteration  30: 6258179.639 ops/s
Iteration   1: 6040628.023 ops/s
Iteration   2: 6147148.255 ops/s
Iteration   3: 5979366.909 ops/s
Iteration   4: 6245540.419 ops/s
Iteration   5: 5901498.229 ops/s
Iteration   6: 6357795.429 ops/s
Iteration   7: 6161083.184 ops/s
Iteration   8: 6033257.815 ops/s
Iteration   9: 5883620.727 ops/s
Iteration  10: 6327211.359 ops/s
Iteration  11: 6177639.261 ops/s
Iteration  12: 5911976.414 ops/s
Iteration  13: 6130269.395 ops/s
Iteration  14: 6100297.774 ops/s
Iteration  15: 5968560.729 ops/s
Iteration  16: 6264823.625 ops/s
Iteration  17: 6048313.374 ops/s
Iteration  18: 6490147.494 ops/s
Iteration  19: 6019965.265 ops/s
Iteration  20: 6372305.767 ops/s
Iteration  21: 6359731.757 ops/s
Iteration  22: 5885130.384 ops/s
Iteration  23: 6325665.990 ops/s
Iteration  24: 6211483.404 ops/s
Iteration  25: 5971681.403 ops/s
Iteration  26: 6348504.941 ops/s
Iteration  27: 6350278.118 ops/s
Iteration  28: 5943104.262 ops/s
Iteration  29: 6396850.991 ops/s
Iteration  30: 6104298.671 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableFromStreamTest._Benchmark.benchmark_closeCalledOnEmpty":
  6148605.979 ±(99.9%) 120021.952 ops/s [Average]
  (min, avg, max) = (5883620.727, 6148605.979, 6490147.494), stdev = 179643.222
  CI (99.9%): [6028584.026, 6268627.931] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score        Error  Units
FlowableFromStreamTest._Benchmark.benchmark_closeCalledOnEmpty  thrpt   30  6148605.979 ± 120021.952  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferTest._Benchmark.benchmark_fusionRejected$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferTest._Benchmark.benchmark_fusionRejected

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 737537.073 ops/s
# Warmup Iteration   2: 2066568.960 ops/s
# Warmup Iteration   3: 2651463.943 ops/s
# Warmup Iteration   4: 2739187.941 ops/s
# Warmup Iteration   5: 2611148.813 ops/s
# Warmup Iteration   6: 2684112.380 ops/s
# Warmup Iteration   7: 2802765.308 ops/s
# Warmup Iteration   8: 2657638.666 ops/s
# Warmup Iteration   9: 2710478.754 ops/s
# Warmup Iteration  10: 2656967.570 ops/s
# Warmup Iteration  11: 2718481.100 ops/s
# Warmup Iteration  12: 2692091.184 ops/s
# Warmup Iteration  13: 2639089.202 ops/s
# Warmup Iteration  14: 2776574.591 ops/s
# Warmup Iteration  15: 2670851.379 ops/s
# Warmup Iteration  16: 2628831.915 ops/s
# Warmup Iteration  17: 2764811.309 ops/s
# Warmup Iteration  18: 2585495.439 ops/s
# Warmup Iteration  19: 2781127.579 ops/s
# Warmup Iteration  20: 2707303.744 ops/s
# Warmup Iteration  21: 2545121.150 ops/s
# Warmup Iteration  22: 2701729.844 ops/s
# Warmup Iteration  23: 2704463.895 ops/s
# Warmup Iteration  24: 2621746.926 ops/s
# Warmup Iteration  25: 2693531.108 ops/s
# Warmup Iteration  26: 2642311.210 ops/s
# Warmup Iteration  27: 2703986.661 ops/s
# Warmup Iteration  28: 2743752.369 ops/s
# Warmup Iteration  29: 2627398.777 ops/s
# Warmup Iteration  30: 2764827.938 ops/s
Iteration   1: 2721698.732 ops/s
Iteration   2: 2636651.153 ops/s
Iteration   3: 2725303.928 ops/s
Iteration   4: 2623794.263 ops/s
Iteration   5: 2764653.062 ops/s
Iteration   6: 2636857.844 ops/s
Iteration   7: 2695469.193 ops/s
Iteration   8: 2637034.443 ops/s
Iteration   9: 2686163.849 ops/s
Iteration  10: 2728064.795 ops/s
Iteration  11: 2633675.357 ops/s
Iteration  12: 2784359.863 ops/s
Iteration  13: 2712800.156 ops/s
Iteration  14: 2609894.492 ops/s
Iteration  15: 2609410.598 ops/s
Iteration  16: 2741498.926 ops/s
Iteration  17: 2659492.860 ops/s
Iteration  18: 2666456.120 ops/s
Iteration  19: 2798287.113 ops/s
Iteration  20: 2651686.691 ops/s
Iteration  21: 2745421.818 ops/s
Iteration  22: 2744783.418 ops/s
Iteration  23: 2585155.652 ops/s
Iteration  24: 2837822.683 ops/s
Iteration  25: 2645425.767 ops/s
Iteration  26: 2656577.720 ops/s
Iteration  27: 2711280.570 ops/s
Iteration  28: 2601216.261 ops/s
Iteration  29: 2696727.342 ops/s
Iteration  30: 2781237.623 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferTest._Benchmark.benchmark_fusionRejected":
  2690963.410 ±(99.9%) 43637.377 ops/s [Average]
  (min, avg, max) = (2585155.652, 2690963.410, 2837822.683), stdev = 65314.377
  CI (99.9%): [2647326.033, 2734600.787] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
FlowableOnBackpressureBufferTest._Benchmark.benchmark_fusionRejected  thrpt   30  2690963.410 ± 43637.377  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferTest._Benchmark.benchmark_badRequest$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferTest._Benchmark.benchmark_badRequest

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 70953.022 ops/s
# Warmup Iteration   2: 209632.441 ops/s
# Warmup Iteration   3: 355161.417 ops/s
# Warmup Iteration   4: 454821.843 ops/s
# Warmup Iteration   5: 446400.432 ops/s
# Warmup Iteration   6: 430025.537 ops/s
# Warmup Iteration   7: 445956.600 ops/s
# Warmup Iteration   8: 427194.828 ops/s
# Warmup Iteration   9: 450326.380 ops/s
# Warmup Iteration  10: 449729.132 ops/s
# Warmup Iteration  11: 417837.582 ops/s
# Warmup Iteration  12: 462874.273 ops/s
# Warmup Iteration  13: 461901.324 ops/s
# Warmup Iteration  14: 432429.521 ops/s
# Warmup Iteration  15: 454380.641 ops/s
# Warmup Iteration  16: 435262.900 ops/s
# Warmup Iteration  17: 458073.251 ops/s
# Warmup Iteration  18: 466092.928 ops/s
# Warmup Iteration  19: 465101.936 ops/s
# Warmup Iteration  20: 439404.455 ops/s
# Warmup Iteration  21: 459464.553 ops/s
# Warmup Iteration  22: 451567.758 ops/s
# Warmup Iteration  23: 444742.874 ops/s
# Warmup Iteration  24: 456493.365 ops/s
# Warmup Iteration  25: 467192.213 ops/s
# Warmup Iteration  26: 457613.186 ops/s
# Warmup Iteration  27: 443176.430 ops/s
# Warmup Iteration  28: 472530.344 ops/s
# Warmup Iteration  29: 415222.900 ops/s
# Warmup Iteration  30: 459269.640 ops/s
Iteration   1: 464961.246 ops/s
Iteration   2: 445482.676 ops/s
Iteration   3: 471337.021 ops/s
Iteration   4: 461182.812 ops/s
Iteration   5: 478901.619 ops/s
Iteration   6: 464723.118 ops/s
Iteration   7: 467734.644 ops/s
Iteration   8: 459381.558 ops/s
Iteration   9: 474725.838 ops/s
Iteration  10: 448858.557 ops/s
Iteration  11: 462665.953 ops/s
Iteration  12: 474821.977 ops/s
Iteration  13: 451526.387 ops/s
Iteration  14: 439541.432 ops/s
Iteration  15: 455552.473 ops/s
Iteration  16: 441385.805 ops/s
Iteration  17: 478499.841 ops/s
Iteration  18: 452220.362 ops/s
Iteration  19: 460270.400 ops/s
Iteration  20: 477470.595 ops/s
Iteration  21: 448017.789 ops/s
Iteration  22: 464178.300 ops/s
Iteration  23: 442843.890 ops/s
Iteration  24: 474891.488 ops/s
Iteration  25: 458698.428 ops/s
Iteration  26: 463997.575 ops/s
Iteration  27: 478310.077 ops/s
Iteration  28: 448959.419 ops/s
Iteration  29: 468057.646 ops/s
Iteration  30: 452367.182 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferTest._Benchmark.benchmark_badRequest":
  461052.204 ±(99.9%) 8020.681 ops/s [Average]
  (min, avg, max) = (439541.432, 461052.204, 478901.619), stdev = 12004.978
  CI (99.9%): [453031.523, 469072.885] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
FlowableOnBackpressureBufferTest._Benchmark.benchmark_badRequest  thrpt   30  461052.204 ± 8020.681  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 148648.876 ops/s
# Warmup Iteration   2: 444652.298 ops/s
# Warmup Iteration   3: 471265.475 ops/s
# Warmup Iteration   4: 481090.104 ops/s
# Warmup Iteration   5: 514109.223 ops/s
# Warmup Iteration   6: 466192.656 ops/s
# Warmup Iteration   7: 492746.422 ops/s
# Warmup Iteration   8: 507866.394 ops/s
# Warmup Iteration   9: 498282.998 ops/s
# Warmup Iteration  10: 518697.704 ops/s
# Warmup Iteration  11: 478663.048 ops/s
# Warmup Iteration  12: 509987.243 ops/s
# Warmup Iteration  13: 482864.023 ops/s
# Warmup Iteration  14: 495765.219 ops/s
# Warmup Iteration  15: 497497.892 ops/s
# Warmup Iteration  16: 495617.773 ops/s
# Warmup Iteration  17: 507838.955 ops/s
# Warmup Iteration  18: 511639.735 ops/s
# Warmup Iteration  19: 522025.677 ops/s
# Warmup Iteration  20: 515172.510 ops/s
# Warmup Iteration  21: 527005.179 ops/s
# Warmup Iteration  22: 535362.148 ops/s
# Warmup Iteration  23: 508466.170 ops/s
# Warmup Iteration  24: 518930.028 ops/s
# Warmup Iteration  25: 529075.647 ops/s
# Warmup Iteration  26: 509739.189 ops/s
# Warmup Iteration  27: 504130.723 ops/s
# Warmup Iteration  28: 511318.977 ops/s
# Warmup Iteration  29: 514826.636 ops/s
# Warmup Iteration  30: 530186.358 ops/s
Iteration   1: 498085.924 ops/s
Iteration   2: 530249.728 ops/s
Iteration   3: 535059.024 ops/s
Iteration   4: 498269.629 ops/s
Iteration   5: 528413.554 ops/s
Iteration   6: 505953.931 ops/s
Iteration   7: 505143.851 ops/s
Iteration   8: 518635.839 ops/s
Iteration   9: 509597.933 ops/s
Iteration  10: 530810.110 ops/s
Iteration  11: 504358.207 ops/s
Iteration  12: 521286.387 ops/s
Iteration  13: 521089.995 ops/s
Iteration  14: 513920.318 ops/s
Iteration  15: 519206.612 ops/s
Iteration  16: 512418.569 ops/s
Iteration  17: 516376.170 ops/s
Iteration  18: 517700.587 ops/s
Iteration  19: 532341.525 ops/s
Iteration  20: 537360.384 ops/s
Iteration  21: 505267.187 ops/s
Iteration  22: 512708.963 ops/s
Iteration  23: 522530.737 ops/s
Iteration  24: 521914.267 ops/s
Iteration  25: 423300.795 ops/s
Iteration  26: 522570.393 ops/s
Iteration  27: 507080.231 ops/s
Iteration  28: 501611.264 ops/s
Iteration  29: 513865.878 ops/s
Iteration  30: 508578.609 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableTest._Benchmark.benchmark_doubleOnSubscribe":
  513190.220 ±(99.9%) 13439.355 ops/s [Average]
  (min, avg, max) = (423300.795, 513190.220, 537360.384), stdev = 20115.395
  CI (99.9%): [499750.865, 526629.575] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score       Error  Units
FlowableFlatMapCompletableTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  513190.220 ± 13439.355  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableScalarXMapTest._Benchmark.benchmark_scalarMapToCrashingCallable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableScalarXMapTest._Benchmark.benchmark_scalarMapToCrashingCallable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 239102.941 ops/s
# Warmup Iteration   2: 535824.508 ops/s
# Warmup Iteration   3: 633389.620 ops/s
# Warmup Iteration   4: 622613.586 ops/s
# Warmup Iteration   5: 648350.945 ops/s
# Warmup Iteration   6: 602435.223 ops/s
# Warmup Iteration   7: 626316.746 ops/s
# Warmup Iteration   8: 636775.129 ops/s
# Warmup Iteration   9: 625639.740 ops/s
# Warmup Iteration  10: 653113.477 ops/s
# Warmup Iteration  11: 657444.522 ops/s
# Warmup Iteration  12: 625211.500 ops/s
# Warmup Iteration  13: 628566.657 ops/s
# Warmup Iteration  14: 638816.346 ops/s
# Warmup Iteration  15: 649031.612 ops/s
# Warmup Iteration  16: 605829.560 ops/s
# Warmup Iteration  17: 677615.848 ops/s
# Warmup Iteration  18: 643541.327 ops/s
# Warmup Iteration  19: 694189.136 ops/s
# Warmup Iteration  20: 653424.622 ops/s
# Warmup Iteration  21: 696489.029 ops/s
# Warmup Iteration  22: 685633.111 ops/s
# Warmup Iteration  23: 638801.303 ops/s
# Warmup Iteration  24: 669606.737 ops/s
# Warmup Iteration  25: 668543.843 ops/s
# Warmup Iteration  26: 645493.734 ops/s
# Warmup Iteration  27: 673458.735 ops/s
# Warmup Iteration  28: 678215.899 ops/s
# Warmup Iteration  29: 648273.380 ops/s
# Warmup Iteration  30: 654204.723 ops/s
Iteration   1: 665334.882 ops/s
Iteration   2: 649156.225 ops/s
Iteration   3: 679124.390 ops/s
Iteration   4: 654984.035 ops/s
Iteration   5: 641266.092 ops/s
Iteration   6: 691169.896 ops/s
Iteration   7: 637070.323 ops/s
Iteration   8: 683065.867 ops/s
Iteration   9: 662096.251 ops/s
Iteration  10: 658070.151 ops/s
Iteration  11: 682493.941 ops/s
Iteration  12: 647008.097 ops/s
Iteration  13: 688253.247 ops/s
Iteration  14: 662533.112 ops/s
Iteration  15: 658983.218 ops/s
Iteration  16: 688471.083 ops/s
Iteration  17: 648306.573 ops/s
Iteration  18: 679102.444 ops/s
Iteration  19: 657654.575 ops/s
Iteration  20: 678795.766 ops/s
Iteration  21: 662144.344 ops/s
Iteration  22: 664747.249 ops/s
Iteration  23: 685549.904 ops/s
Iteration  24: 631828.133 ops/s
Iteration  25: 677943.058 ops/s
Iteration  26: 658372.135 ops/s
Iteration  27: 675199.184 ops/s
Iteration  28: 659457.370 ops/s
Iteration  29: 679296.518 ops/s
Iteration  30: 659015.666 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableScalarXMapTest._Benchmark.benchmark_scalarMapToCrashingCallable":
  665549.791 ±(99.9%) 10784.207 ops/s [Average]
  (min, avg, max) = (631828.133, 665549.791, 691169.896), stdev = 16141.295
  CI (99.9%): [654765.583, 676333.998] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score       Error  Units
FlowableScalarXMapTest._Benchmark.benchmark_scalarMapToCrashingCallable  thrpt   30  665549.791 ± 10784.207  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableToListTest._Benchmark.benchmark_collectionSupplierThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableToListTest._Benchmark.benchmark_collectionSupplierThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 211902.619 ops/s
# Warmup Iteration   2: 555348.565 ops/s
# Warmup Iteration   3: 648514.819 ops/s
# Warmup Iteration   4: 637479.600 ops/s
# Warmup Iteration   5: 679109.432 ops/s
# Warmup Iteration   6: 637239.178 ops/s
# Warmup Iteration   7: 651323.012 ops/s
# Warmup Iteration   8: 660046.521 ops/s
# Warmup Iteration   9: 630618.457 ops/s
# Warmup Iteration  10: 649571.262 ops/s
# Warmup Iteration  11: 663084.427 ops/s
# Warmup Iteration  12: 643901.415 ops/s
# Warmup Iteration  13: 648256.621 ops/s
# Warmup Iteration  14: 674106.216 ops/s
# Warmup Iteration  15: 674032.997 ops/s
# Warmup Iteration  16: 662091.891 ops/s
# Warmup Iteration  17: 696114.391 ops/s
# Warmup Iteration  18: 712166.963 ops/s
# Warmup Iteration  19: 697658.041 ops/s
# Warmup Iteration  20: 665210.188 ops/s
# Warmup Iteration  21: 699318.119 ops/s
# Warmup Iteration  22: 666531.241 ops/s
# Warmup Iteration  23: 667587.973 ops/s
# Warmup Iteration  24: 685242.687 ops/s
# Warmup Iteration  25: 710257.260 ops/s
# Warmup Iteration  26: 664275.652 ops/s
# Warmup Iteration  27: 704222.504 ops/s
# Warmup Iteration  28: 675390.303 ops/s
# Warmup Iteration  29: 694138.885 ops/s
# Warmup Iteration  30: 691354.936 ops/s
Iteration   1: 692808.364 ops/s
Iteration   2: 685457.190 ops/s
Iteration   3: 676110.770 ops/s
Iteration   4: 712188.388 ops/s
Iteration   5: 675525.255 ops/s
Iteration   6: 692917.579 ops/s
Iteration   7: 672745.584 ops/s
Iteration   8: 711117.224 ops/s
Iteration   9: 677171.043 ops/s
Iteration  10: 694307.739 ops/s
Iteration  11: 716492.744 ops/s
Iteration  12: 674304.141 ops/s
Iteration  13: 699990.429 ops/s
Iteration  14: 664348.035 ops/s
Iteration  15: 692151.335 ops/s
Iteration  16: 696866.415 ops/s
Iteration  17: 688552.877 ops/s
Iteration  18: 702271.136 ops/s
Iteration  19: 681738.919 ops/s
Iteration  20: 588618.132 ops/s
Iteration  21: 686975.032 ops/s
Iteration  22: 679640.850 ops/s
Iteration  23: 703396.230 ops/s
Iteration  24: 660874.829 ops/s
Iteration  25: 697247.784 ops/s
Iteration  26: 711361.551 ops/s
Iteration  27: 675785.154 ops/s
Iteration  28: 690753.582 ops/s
Iteration  29: 687559.404 ops/s
Iteration  30: 707570.892 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableToListTest._Benchmark.benchmark_collectionSupplierThrows":
  686561.620 ±(99.9%) 15659.453 ops/s [Average]
  (min, avg, max) = (588618.132, 686561.620, 716492.744), stdev = 23438.334
  CI (99.9%): [670902.167, 702221.073] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score       Error  Units
FlowableToListTest._Benchmark.benchmark_collectionSupplierThrows  thrpt   30  686561.620 ± 15659.453  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_selectorCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_selectorCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 128944.398 ops/s
# Warmup Iteration   2: 443834.729 ops/s
# Warmup Iteration   3: 602499.217 ops/s
# Warmup Iteration   4: 583271.547 ops/s
# Warmup Iteration   5: 603583.593 ops/s
# Warmup Iteration   6: 651883.350 ops/s
# Warmup Iteration   7: 648395.114 ops/s
# Warmup Iteration   8: 650554.018 ops/s
# Warmup Iteration   9: 645402.674 ops/s
# Warmup Iteration  10: 634401.040 ops/s
# Warmup Iteration  11: 661974.602 ops/s
# Warmup Iteration  12: 637317.980 ops/s
# Warmup Iteration  13: 657437.551 ops/s
# Warmup Iteration  14: 654583.896 ops/s
# Warmup Iteration  15: 636991.364 ops/s
# Warmup Iteration  16: 662049.680 ops/s
# Warmup Iteration  17: 675736.989 ops/s
# Warmup Iteration  18: 681011.299 ops/s
# Warmup Iteration  19: 713795.685 ops/s
# Warmup Iteration  20: 666819.498 ops/s
# Warmup Iteration  21: 698191.972 ops/s
# Warmup Iteration  22: 682274.080 ops/s
# Warmup Iteration  23: 719292.371 ops/s
# Warmup Iteration  24: 700708.055 ops/s
# Warmup Iteration  25: 712993.286 ops/s
# Warmup Iteration  26: 671416.634 ops/s
# Warmup Iteration  27: 703191.903 ops/s
# Warmup Iteration  28: 696251.456 ops/s
# Warmup Iteration  29: 672318.595 ops/s
# Warmup Iteration  30: 678415.846 ops/s
Iteration   1: 697504.363 ops/s
Iteration   2: 712398.627 ops/s
Iteration   3: 707614.032 ops/s
Iteration   4: 663571.127 ops/s
Iteration   5: 704568.431 ops/s
Iteration   6: 662772.912 ops/s
Iteration   7: 697691.209 ops/s
Iteration   8: 688215.367 ops/s
Iteration   9: 687281.653 ops/s
Iteration  10: 711684.057 ops/s
Iteration  11: 684700.451 ops/s
Iteration  12: 705574.452 ops/s
Iteration  13: 673354.738 ops/s
Iteration  14: 687778.672 ops/s
Iteration  15: 678109.740 ops/s
Iteration  16: 694240.941 ops/s
Iteration  17: 670545.323 ops/s
Iteration  18: 700339.035 ops/s
Iteration  19: 660267.336 ops/s
Iteration  20: 690192.507 ops/s
Iteration  21: 708857.057 ops/s
Iteration  22: 677792.468 ops/s
Iteration  23: 704810.441 ops/s
Iteration  24: 695087.538 ops/s
Iteration  25: 695030.088 ops/s
Iteration  26: 678550.654 ops/s
Iteration  27: 691779.057 ops/s
Iteration  28: 700711.844 ops/s
Iteration  29: 675411.965 ops/s
Iteration  30: 705949.345 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_selectorCrash":
  690412.848 ±(99.9%) 10100.418 ops/s [Average]
  (min, avg, max) = (660267.336, 690412.848, 712398.627), stdev = 15117.832
  CI (99.9%): [680312.429, 700513.266] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score       Error  Units
FlowablePublishTest._Benchmark.benchmark_selectorCrash  thrpt   30  690412.848 ± 10100.418  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStreamTest._Benchmark.benchmark_supplierFusedError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStreamTest._Benchmark.benchmark_supplierFusedError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 187796.945 ops/s
# Warmup Iteration   2: 578060.313 ops/s
# Warmup Iteration   3: 637572.299 ops/s
# Warmup Iteration   4: 650167.943 ops/s
# Warmup Iteration   5: 663373.401 ops/s
# Warmup Iteration   6: 612082.032 ops/s
# Warmup Iteration   7: 661003.297 ops/s
# Warmup Iteration   8: 594407.151 ops/s
# Warmup Iteration   9: 636338.672 ops/s
# Warmup Iteration  10: 619729.167 ops/s
# Warmup Iteration  11: 636940.042 ops/s
# Warmup Iteration  12: 618492.749 ops/s
# Warmup Iteration  13: 654907.030 ops/s
# Warmup Iteration  14: 641538.494 ops/s
# Warmup Iteration  15: 650464.492 ops/s
# Warmup Iteration  16: 670504.777 ops/s
# Warmup Iteration  17: 654767.885 ops/s
# Warmup Iteration  18: 691458.931 ops/s
# Warmup Iteration  19: 692895.396 ops/s
# Warmup Iteration  20: 670786.088 ops/s
# Warmup Iteration  21: 714589.249 ops/s
# Warmup Iteration  22: 710303.646 ops/s
# Warmup Iteration  23: 714919.956 ops/s
# Warmup Iteration  24: 681751.960 ops/s
# Warmup Iteration  25: 694299.134 ops/s
# Warmup Iteration  26: 674064.915 ops/s
# Warmup Iteration  27: 695500.994 ops/s
# Warmup Iteration  28: 662775.012 ops/s
# Warmup Iteration  29: 702111.346 ops/s
# Warmup Iteration  30: 685008.922 ops/s
Iteration   1: 717303.539 ops/s
Iteration   2: 685360.468 ops/s
Iteration   3: 680248.175 ops/s
Iteration   4: 680092.182 ops/s
Iteration   5: 686047.133 ops/s
Iteration   6: 689975.617 ops/s
Iteration   7: 696191.770 ops/s
Iteration   8: 672929.415 ops/s
Iteration   9: 685579.948 ops/s
Iteration  10: 702012.646 ops/s
Iteration  11: 680025.324 ops/s
Iteration  12: 696216.466 ops/s
Iteration  13: 691518.661 ops/s
Iteration  14: 650402.837 ops/s
Iteration  15: 528166.000 ops/s
Iteration  16: 697531.743 ops/s
Iteration  17: 670893.096 ops/s
Iteration  18: 683165.617 ops/s
Iteration  19: 679435.629 ops/s
Iteration  20: 719465.019 ops/s
Iteration  21: 664653.157 ops/s
Iteration  22: 715000.249 ops/s
Iteration  23: 689601.087 ops/s
Iteration  24: 677008.154 ops/s
Iteration  25: 704386.537 ops/s
Iteration  26: 694864.251 ops/s
Iteration  27: 669430.520 ops/s
Iteration  28: 725410.062 ops/s
Iteration  29: 674291.591 ops/s
Iteration  30: 713068.126 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStreamTest._Benchmark.benchmark_supplierFusedError":
  684009.167 ±(99.9%) 22830.277 ops/s [Average]
  (min, avg, max) = (528166.000, 684009.167, 725410.062), stdev = 34171.287
  CI (99.9%): [661178.890, 706839.445] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score       Error  Units
FlowableFlatMapStreamTest._Benchmark.benchmark_supplierFusedError  thrpt   30  684009.167 ± 22830.277  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinallyTest._Benchmark.benchmark_normalError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinallyTest._Benchmark.benchmark_normalError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 212265.975 ops/s
# Warmup Iteration   2: 578718.309 ops/s
# Warmup Iteration   3: 602668.943 ops/s
# Warmup Iteration   4: 661684.665 ops/s
# Warmup Iteration   5: 556618.573 ops/s
# Warmup Iteration   6: 704577.463 ops/s
# Warmup Iteration   7: 695909.961 ops/s
# Warmup Iteration   8: 654867.499 ops/s
# Warmup Iteration   9: 689885.184 ops/s
# Warmup Iteration  10: 665219.145 ops/s
# Warmup Iteration  11: 700275.979 ops/s
# Warmup Iteration  12: 700187.409 ops/s
# Warmup Iteration  13: 671611.952 ops/s
# Warmup Iteration  14: 679364.048 ops/s
# Warmup Iteration  15: 704092.426 ops/s
# Warmup Iteration  16: 668458.854 ops/s
# Warmup Iteration  17: 742239.178 ops/s
# Warmup Iteration  18: 723003.884 ops/s
# Warmup Iteration  19: 718481.701 ops/s
# Warmup Iteration  20: 737692.321 ops/s
# Warmup Iteration  21: 712222.147 ops/s
# Warmup Iteration  22: 710409.580 ops/s
# Warmup Iteration  23: 718074.462 ops/s
# Warmup Iteration  24: 692897.875 ops/s
# Warmup Iteration  25: 733540.430 ops/s
# Warmup Iteration  26: 704438.642 ops/s
# Warmup Iteration  27: 729000.543 ops/s
# Warmup Iteration  28: 722442.858 ops/s
# Warmup Iteration  29: 717555.447 ops/s
# Warmup Iteration  30: 727323.238 ops/s
Iteration   1: 715340.803 ops/s
Iteration   2: 705086.945 ops/s
Iteration   3: 734007.036 ops/s
Iteration   4: 706856.167 ops/s
Iteration   5: 727869.170 ops/s
Iteration   6: 708837.415 ops/s
Iteration   7: 742325.550 ops/s
Iteration   8: 705574.522 ops/s
Iteration   9: 717148.405 ops/s
Iteration  10: 732369.388 ops/s
Iteration  11: 715199.558 ops/s
Iteration  12: 723949.533 ops/s
Iteration  13: 700040.354 ops/s
Iteration  14: 726175.778 ops/s
Iteration  15: 732376.669 ops/s
Iteration  16: 736596.472 ops/s
Iteration  17: 716034.643 ops/s
Iteration  18: 722697.669 ops/s
Iteration  19: 718953.947 ops/s
Iteration  20: 745436.540 ops/s
Iteration  21: 710781.027 ops/s
Iteration  22: 733756.765 ops/s
Iteration  23: 714039.625 ops/s
Iteration  24: 714614.733 ops/s
Iteration  25: 745944.769 ops/s
Iteration  26: 739344.108 ops/s
Iteration  27: 751207.890 ops/s
Iteration  28: 708063.478 ops/s
Iteration  29: 727818.885 ops/s
Iteration  30: 738155.708 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinallyTest._Benchmark.benchmark_normalError":
  723886.785 ±(99.9%) 9352.111 ops/s [Average]
  (min, avg, max) = (700040.354, 723886.785, 751207.890), stdev = 13997.800
  CI (99.9%): [714534.674, 733238.896] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
FlowableDoFinallyTest._Benchmark.benchmark_normalError  thrpt   30  723886.785 ± 9352.111  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableScanTest._Benchmark.benchmark_scanNoSeedDoesNotEmitTerminalEventTwiceIfScanFunctionThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableScanTest._Benchmark.benchmark_scanNoSeedDoesNotEmitTerminalEventTwiceIfScanFunctionThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 65813.597 ops/s
# Warmup Iteration   2: 306547.945 ops/s
# Warmup Iteration   3: 533635.369 ops/s
# Warmup Iteration   4: 510225.265 ops/s
# Warmup Iteration   5: 605556.443 ops/s
# Warmup Iteration   6: 609050.592 ops/s
# Warmup Iteration   7: 552297.903 ops/s
# Warmup Iteration   8: 597221.915 ops/s
# Warmup Iteration   9: 627476.944 ops/s
# Warmup Iteration  10: 595255.618 ops/s
# Warmup Iteration  11: 591965.051 ops/s
# Warmup Iteration  12: 622333.042 ops/s
# Warmup Iteration  13: 605379.074 ops/s
# Warmup Iteration  14: 621806.496 ops/s
# Warmup Iteration  15: 599876.007 ops/s
# Warmup Iteration  16: 594838.503 ops/s
# Warmup Iteration  17: 656214.438 ops/s
# Warmup Iteration  18: 640093.128 ops/s
# Warmup Iteration  19: 638992.044 ops/s
# Warmup Iteration  20: 618027.939 ops/s
# Warmup Iteration  21: 656448.964 ops/s
# Warmup Iteration  22: 654592.548 ops/s
# Warmup Iteration  23: 622275.683 ops/s
# Warmup Iteration  24: 642683.925 ops/s
# Warmup Iteration  25: 653793.787 ops/s
# Warmup Iteration  26: 613896.689 ops/s
# Warmup Iteration  27: 640178.017 ops/s
# Warmup Iteration  28: 633330.124 ops/s
# Warmup Iteration  29: 633371.250 ops/s
# Warmup Iteration  30: 663741.409 ops/s
Iteration   1: 634347.900 ops/s
Iteration   2: 641984.453 ops/s
Iteration   3: 621821.000 ops/s
Iteration   4: 668933.719 ops/s
Iteration   5: 640974.919 ops/s
Iteration   6: 638799.498 ops/s
Iteration   7: 631952.070 ops/s
Iteration   8: 647359.098 ops/s
Iteration   9: 515561.211 ops/s
Iteration  10: 661050.176 ops/s
Iteration  11: 612888.303 ops/s
Iteration  12: 619878.437 ops/s
Iteration  13: 627558.850 ops/s
Iteration  14: 631167.960 ops/s
Iteration  15: 627686.960 ops/s
Iteration  16: 633047.245 ops/s
Iteration  17: 642535.963 ops/s
Iteration  18: 634538.032 ops/s
Iteration  19: 643509.174 ops/s
Iteration  20: 639399.157 ops/s
Iteration  21: 641912.131 ops/s
Iteration  22: 630553.735 ops/s
Iteration  23: 639804.066 ops/s
Iteration  24: 648666.481 ops/s
Iteration  25: 625489.036 ops/s
Iteration  26: 663079.869 ops/s
Iteration  27: 621067.113 ops/s
Iteration  28: 644504.170 ops/s
Iteration  29: 634438.319 ops/s
Iteration  30: 647846.976 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableScanTest._Benchmark.benchmark_scanNoSeedDoesNotEmitTerminalEventTwiceIfScanFunctionThrows":
  633745.201 ±(99.9%) 17138.741 ops/s [Average]
  (min, avg, max) = (515561.211, 633745.201, 668933.719), stdev = 25652.462
  CI (99.9%): [616606.460, 650883.942] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                           Mode  Cnt       Score       Error  Units
FlowableScanTest._Benchmark.benchmark_scanNoSeedDoesNotEmitTerminalEventTwiceIfScanFunctionThrows  thrpt   30  633745.201 ± 17138.741  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableScanTest._Benchmark.benchmark_scanNoSeedDoesNotProcessOnNextAfterTerminalEventIfScanFunctionThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableScanTest._Benchmark.benchmark_scanNoSeedDoesNotProcessOnNextAfterTerminalEventIfScanFunctionThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 97724.959 ops/s
# Warmup Iteration   2: 394557.707 ops/s
# Warmup Iteration   3: 522972.376 ops/s
# Warmup Iteration   4: 555991.942 ops/s
# Warmup Iteration   5: 513365.823 ops/s
# Warmup Iteration   6: 603374.518 ops/s
# Warmup Iteration   7: 565904.625 ops/s
# Warmup Iteration   8: 601398.805 ops/s
# Warmup Iteration   9: 608476.606 ops/s
# Warmup Iteration  10: 623684.589 ops/s
# Warmup Iteration  11: 585492.977 ops/s
# Warmup Iteration  12: 590759.632 ops/s
# Warmup Iteration  13: 615884.257 ops/s
# Warmup Iteration  14: 581052.743 ops/s
# Warmup Iteration  15: 610446.863 ops/s
# Warmup Iteration  16: 594807.690 ops/s
# Warmup Iteration  17: 615793.183 ops/s
# Warmup Iteration  18: 633948.200 ops/s
# Warmup Iteration  19: 647809.176 ops/s
# Warmup Iteration  20: 609172.068 ops/s
# Warmup Iteration  21: 649605.013 ops/s
# Warmup Iteration  22: 630684.843 ops/s
# Warmup Iteration  23: 646669.982 ops/s
# Warmup Iteration  24: 608375.966 ops/s
# Warmup Iteration  25: 618317.597 ops/s
# Warmup Iteration  26: 641557.193 ops/s
# Warmup Iteration  27: 614447.715 ops/s
# Warmup Iteration  28: 642980.772 ops/s
# Warmup Iteration  29: 643924.684 ops/s
# Warmup Iteration  30: 627746.479 ops/s
Iteration   1: 621037.268 ops/s
Iteration   2: 633827.498 ops/s
Iteration   3: 618875.259 ops/s
Iteration   4: 606988.325 ops/s
Iteration   5: 653070.721 ops/s
Iteration   6: 651929.717 ops/s
Iteration   7: 614010.928 ops/s
Iteration   8: 637756.306 ops/s
Iteration   9: 608303.597 ops/s
Iteration  10: 638294.896 ops/s
Iteration  11: 611160.277 ops/s
Iteration  12: 630128.238 ops/s
Iteration  13: 614677.028 ops/s
Iteration  14: 612292.994 ops/s
Iteration  15: 621869.330 ops/s
Iteration  16: 616370.257 ops/s
Iteration  17: 639803.843 ops/s
Iteration  18: 609968.871 ops/s
Iteration  19: 631900.156 ops/s
Iteration  20: 641786.266 ops/s
Iteration  21: 611278.786 ops/s
Iteration  22: 628797.283 ops/s
Iteration  23: 626556.045 ops/s
Iteration  24: 636396.952 ops/s
Iteration  25: 652020.221 ops/s
Iteration  26: 605966.420 ops/s
Iteration  27: 657014.431 ops/s
Iteration  28: 634529.978 ops/s
Iteration  29: 603808.301 ops/s
Iteration  30: 647706.174 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableScanTest._Benchmark.benchmark_scanNoSeedDoesNotProcessOnNextAfterTerminalEventIfScanFunctionThrows":
  627270.879 ±(99.9%) 10676.431 ops/s [Average]
  (min, avg, max) = (603808.301, 627270.879, 657014.431), stdev = 15979.980
  CI (99.9%): [616594.448, 637947.309] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                                    Mode  Cnt       Score       Error  Units
FlowableScanTest._Benchmark.benchmark_scanNoSeedDoesNotProcessOnNextAfterTerminalEventIfScanFunctionThrows  thrpt   30  627270.879 ± 10676.431  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.exceptions.ExceptionsTest._Benchmark.benchmark_threadDeathIsThrown$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.exceptions.ExceptionsTest._Benchmark.benchmark_threadDeathIsThrown

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 441315.424 ops/s
# Warmup Iteration   2: 640768.990 ops/s
# Warmup Iteration   3: 696154.957 ops/s
# Warmup Iteration   4: 619612.418 ops/s
# Warmup Iteration   5: 727954.825 ops/s
# Warmup Iteration   6: 706255.000 ops/s
# Warmup Iteration   7: 713361.348 ops/s
# Warmup Iteration   8: 698448.172 ops/s
# Warmup Iteration   9: 717642.647 ops/s
# Warmup Iteration  10: 698122.978 ops/s
# Warmup Iteration  11: 693208.743 ops/s
# Warmup Iteration  12: 753036.556 ops/s
# Warmup Iteration  13: 697139.026 ops/s
# Warmup Iteration  14: 721384.196 ops/s
# Warmup Iteration  15: 703308.499 ops/s
# Warmup Iteration  16: 711530.450 ops/s
# Warmup Iteration  17: 769894.121 ops/s
# Warmup Iteration  18: 784920.299 ops/s
# Warmup Iteration  19: 752421.960 ops/s
# Warmup Iteration  20: 773289.999 ops/s
# Warmup Iteration  21: 757261.115 ops/s
# Warmup Iteration  22: 758273.526 ops/s
# Warmup Iteration  23: 786597.083 ops/s
# Warmup Iteration  24: 734807.220 ops/s
# Warmup Iteration  25: 779391.002 ops/s
# Warmup Iteration  26: 746252.710 ops/s
# Warmup Iteration  27: 760966.124 ops/s
# Warmup Iteration  28: 758618.618 ops/s
# Warmup Iteration  29: 754930.177 ops/s
# Warmup Iteration  30: 773524.581 ops/s
Iteration   1: 750611.575 ops/s
Iteration   2: 773624.384 ops/s
Iteration   3: 780117.061 ops/s
Iteration   4: 607285.803 ops/s
Iteration   5: 772906.139 ops/s
Iteration   6: 779894.140 ops/s
Iteration   7: 728795.497 ops/s
Iteration   8: 776790.785 ops/s
Iteration   9: 743279.575 ops/s
Iteration  10: 791117.984 ops/s
Iteration  11: 747656.147 ops/s
Iteration  12: 759022.306 ops/s
Iteration  13: 757519.435 ops/s
Iteration  14: 757618.446 ops/s
Iteration  15: 760191.209 ops/s
Iteration  16: 766296.821 ops/s
Iteration  17: 745650.987 ops/s
Iteration  18: 773786.762 ops/s
Iteration  19: 736201.472 ops/s
Iteration  20: 777213.457 ops/s
Iteration  21: 774355.495 ops/s
Iteration  22: 747989.367 ops/s
Iteration  23: 789960.952 ops/s
Iteration  24: 749103.650 ops/s
Iteration  25: 749831.955 ops/s
Iteration  26: 754769.777 ops/s
Iteration  27: 792024.283 ops/s
Iteration  28: 735644.175 ops/s
Iteration  29: 787301.748 ops/s
Iteration  30: 760583.925 ops/s


Result "io.reactivex.rxjava3.exceptions.ExceptionsTest._Benchmark.benchmark_threadDeathIsThrown":
  757571.510 ±(99.9%) 22267.760 ops/s [Average]
  (min, avg, max) = (607285.803, 757571.510, 792024.283), stdev = 33329.337
  CI (99.9%): [735303.751, 779839.270] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score       Error  Units
ExceptionsTest._Benchmark.benchmark_threadDeathIsThrown  thrpt   30  757571.510 ± 22267.760  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrErrorTest._Benchmark.benchmark_lastJust$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrErrorTest._Benchmark.benchmark_lastJust

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 4732422.558 ops/s
# Warmup Iteration   2: 9115587.699 ops/s
# Warmup Iteration   3: 8677335.946 ops/s
# Warmup Iteration   4: 10433619.108 ops/s
# Warmup Iteration   5: 10720047.289 ops/s
# Warmup Iteration   6: 10132383.796 ops/s
# Warmup Iteration   7: 10704003.864 ops/s
# Warmup Iteration   8: 10622519.416 ops/s
# Warmup Iteration   9: 9960311.076 ops/s
# Warmup Iteration  10: 10586810.036 ops/s
# Warmup Iteration  11: 10194616.902 ops/s
# Warmup Iteration  12: 10185280.312 ops/s
# Warmup Iteration  13: 10452904.800 ops/s
# Warmup Iteration  14: 10797331.946 ops/s
# Warmup Iteration  15: 10233032.224 ops/s
# Warmup Iteration  16: 10637098.228 ops/s
# Warmup Iteration  17: 10193574.980 ops/s
# Warmup Iteration  18: 10254287.269 ops/s
# Warmup Iteration  19: 10630943.101 ops/s
# Warmup Iteration  20: 10052922.473 ops/s
# Warmup Iteration  21: 10667047.752 ops/s
# Warmup Iteration  22: 10163612.825 ops/s
# Warmup Iteration  23: 10058352.598 ops/s
# Warmup Iteration  24: 10403491.447 ops/s
# Warmup Iteration  25: 9964088.773 ops/s
# Warmup Iteration  26: 10718984.301 ops/s
# Warmup Iteration  27: 10474282.121 ops/s
# Warmup Iteration  28: 10196225.388 ops/s
# Warmup Iteration  29: 10963055.582 ops/s
# Warmup Iteration  30: 10421648.723 ops/s
Iteration   1: 10156841.240 ops/s
Iteration   2: 10351221.335 ops/s
Iteration   3: 10807836.579 ops/s
Iteration   4: 10193240.082 ops/s
Iteration   5: 10193196.037 ops/s
Iteration   6: 10901409.317 ops/s
Iteration   7: 10529298.491 ops/s
Iteration   8: 10420937.410 ops/s
Iteration   9: 10825636.911 ops/s
Iteration  10: 10068686.994 ops/s
Iteration  11: 10777941.345 ops/s
Iteration  12: 10713199.659 ops/s
Iteration  13: 10131258.721 ops/s
Iteration  14: 10647506.794 ops/s
Iteration  15: 10556563.707 ops/s
Iteration  16: 9998063.793 ops/s
Iteration  17: 10527538.991 ops/s
Iteration  18: 10580117.469 ops/s
Iteration  19: 10061683.369 ops/s
Iteration  20: 10459437.695 ops/s
Iteration  21: 10171923.869 ops/s
Iteration  22: 10426881.519 ops/s
Iteration  23: 10312786.595 ops/s
Iteration  24: 10461390.387 ops/s
Iteration  25: 10541743.651 ops/s
Iteration  26: 10462065.769 ops/s
Iteration  27: 10596687.780 ops/s
Iteration  28: 10300196.604 ops/s
Iteration  29: 10432348.304 ops/s
Iteration  30: 10193207.979 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrErrorTest._Benchmark.benchmark_lastJust":
  10426694.947 ±(99.9%) 164552.765 ops/s [Average]
  (min, avg, max) = (9998063.793, 10426694.947, 10901409.317), stdev = 246294.851
  CI (99.9%): [10262142.181, 10591247.712] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt         Score        Error  Units
ObservableStageSubscriberOrErrorTest._Benchmark.benchmark_lastJust  thrpt   30  10426694.947 ± 164552.765  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrDefaultTest._Benchmark.benchmark_lastJust$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrDefaultTest._Benchmark.benchmark_lastJust

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 5378000.466 ops/s
# Warmup Iteration   2: 9208062.456 ops/s
# Warmup Iteration   3: 8869168.594 ops/s
# Warmup Iteration   4: 10362087.185 ops/s
# Warmup Iteration   5: 10767885.680 ops/s
# Warmup Iteration   6: 10100188.966 ops/s
# Warmup Iteration   7: 10828891.334 ops/s
# Warmup Iteration   8: 10185535.492 ops/s
# Warmup Iteration   9: 10359483.801 ops/s
# Warmup Iteration  10: 10482060.975 ops/s
# Warmup Iteration  11: 10234944.272 ops/s
# Warmup Iteration  12: 11021331.247 ops/s
# Warmup Iteration  13: 10642159.320 ops/s
# Warmup Iteration  14: 10102767.570 ops/s
# Warmup Iteration  15: 10620482.958 ops/s
# Warmup Iteration  16: 10785748.537 ops/s
# Warmup Iteration  17: 10161104.981 ops/s
# Warmup Iteration  18: 10779660.844 ops/s
# Warmup Iteration  19: 10088606.225 ops/s
# Warmup Iteration  20: 10762508.255 ops/s
# Warmup Iteration  21: 10258852.067 ops/s
# Warmup Iteration  22: 10365155.988 ops/s
# Warmup Iteration  23: 10323282.046 ops/s
# Warmup Iteration  24: 10146596.214 ops/s
# Warmup Iteration  25: 10801375.551 ops/s
# Warmup Iteration  26: 10281757.710 ops/s
# Warmup Iteration  27: 10422699.238 ops/s
# Warmup Iteration  28: 10513446.617 ops/s
# Warmup Iteration  29: 8582791.900 ops/s
# Warmup Iteration  30: 10568527.150 ops/s
Iteration   1: 10315423.751 ops/s
Iteration   2: 10224077.257 ops/s
Iteration   3: 10731214.847 ops/s
Iteration   4: 10413678.931 ops/s
Iteration   5: 10506761.194 ops/s
Iteration   6: 10580280.490 ops/s
Iteration   7: 10416484.966 ops/s
Iteration   8: 10237430.740 ops/s
Iteration   9: 10835272.010 ops/s
Iteration  10: 10085594.120 ops/s
Iteration  11: 10627676.301 ops/s
Iteration  12: 10734388.215 ops/s
Iteration  13: 10078296.130 ops/s
Iteration  14: 10786505.428 ops/s
Iteration  15: 10559706.411 ops/s
Iteration  16: 10171359.170 ops/s
Iteration  17: 10408486.820 ops/s
Iteration  18: 10631802.787 ops/s
Iteration  19: 10205673.448 ops/s
Iteration  20: 10647793.210 ops/s
Iteration  21: 10340838.319 ops/s
Iteration  22: 10727867.117 ops/s
Iteration  23: 10674522.418 ops/s
Iteration  24: 10207554.549 ops/s
Iteration  25: 10607754.352 ops/s
Iteration  26: 10360521.607 ops/s
Iteration  27: 10585979.801 ops/s
Iteration  28: 10457507.679 ops/s
Iteration  29: 10292373.188 ops/s
Iteration  30: 10417817.371 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrDefaultTest._Benchmark.benchmark_lastJust":
  10462354.754 ±(99.9%) 144442.044 ops/s [Average]
  (min, avg, max) = (10078296.130, 10462354.754, 10835272.010), stdev = 216194.068
  CI (99.9%): [10317912.710, 10606796.799] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt         Score        Error  Units
ObservableStageSubscriberOrDefaultTest._Benchmark.benchmark_lastJust  thrpt   30  10462354.754 ± 144442.044  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrErrorTest._Benchmark.benchmark_singleJust$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrErrorTest._Benchmark.benchmark_singleJust

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 4492958.400 ops/s
# Warmup Iteration   2: 8271571.766 ops/s
# Warmup Iteration   3: 9205978.744 ops/s
# Warmup Iteration   4: 10230066.865 ops/s
# Warmup Iteration   5: 10677689.799 ops/s
# Warmup Iteration   6: 10535933.455 ops/s
# Warmup Iteration   7: 9997745.427 ops/s
# Warmup Iteration   8: 10391557.978 ops/s
# Warmup Iteration   9: 10603433.678 ops/s
# Warmup Iteration  10: 10060983.568 ops/s
# Warmup Iteration  11: 10163754.387 ops/s
# Warmup Iteration  12: 10711319.475 ops/s
# Warmup Iteration  13: 10134630.286 ops/s
# Warmup Iteration  14: 10890226.898 ops/s
# Warmup Iteration  15: 10203120.381 ops/s
# Warmup Iteration  16: 10331278.916 ops/s
# Warmup Iteration  17: 10651227.898 ops/s
# Warmup Iteration  18: 10258662.326 ops/s
# Warmup Iteration  19: 10534933.795 ops/s
# Warmup Iteration  20: 10148788.989 ops/s
# Warmup Iteration  21: 10680534.815 ops/s
# Warmup Iteration  22: 10429183.530 ops/s
# Warmup Iteration  23: 10594932.700 ops/s
# Warmup Iteration  24: 10323138.318 ops/s
# Warmup Iteration  25: 9950430.547 ops/s
# Warmup Iteration  26: 10691963.984 ops/s
# Warmup Iteration  27: 10341143.022 ops/s
# Warmup Iteration  28: 9719075.370 ops/s
# Warmup Iteration  29: 10446589.284 ops/s
# Warmup Iteration  30: 10079728.531 ops/s
Iteration   1: 10673917.381 ops/s
Iteration   2: 10425606.710 ops/s
Iteration   3: 10017776.368 ops/s
Iteration   4: 10514940.455 ops/s
Iteration   5: 10217710.322 ops/s
Iteration   6: 10259694.993 ops/s
Iteration   7: 10654358.948 ops/s
Iteration   8: 10248363.654 ops/s
Iteration   9: 10558587.946 ops/s
Iteration  10: 10192841.585 ops/s
Iteration  11: 10457546.007 ops/s
Iteration  12: 10138629.657 ops/s
Iteration  13: 10510754.062 ops/s
Iteration  14: 10456423.759 ops/s
Iteration  15: 10467401.070 ops/s
Iteration  16: 10176441.350 ops/s
Iteration  17: 10533185.474 ops/s
Iteration  18: 10439502.596 ops/s
Iteration  19: 10151986.605 ops/s
Iteration  20: 10868184.045 ops/s
Iteration  21: 9983040.592 ops/s
Iteration  22: 10789695.021 ops/s
Iteration  23: 10377808.626 ops/s
Iteration  24: 10541599.723 ops/s
Iteration  25: 10591301.915 ops/s
Iteration  26: 10313225.351 ops/s
Iteration  27: 10715083.256 ops/s
Iteration  28: 10088718.546 ops/s
Iteration  29: 10288374.180 ops/s
Iteration  30: 10579408.810 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrErrorTest._Benchmark.benchmark_singleJust":
  10407736.967 ±(99.9%) 152690.242 ops/s [Average]
  (min, avg, max) = (9983040.592, 10407736.967, 10868184.045), stdev = 228539.584
  CI (99.9%): [10255046.724, 10560427.209] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt         Score        Error  Units
ObservableStageSubscriberOrErrorTest._Benchmark.benchmark_singleJust  thrpt   30  10407736.967 ± 152690.242  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrDefaultTest._Benchmark.benchmark_singleJust$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrDefaultTest._Benchmark.benchmark_singleJust

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 4728938.739 ops/s
# Warmup Iteration   2: 8397962.994 ops/s
# Warmup Iteration   3: 9253851.185 ops/s
# Warmup Iteration   4: 10582688.858 ops/s
# Warmup Iteration   5: 10448641.705 ops/s
# Warmup Iteration   6: 10454310.406 ops/s
# Warmup Iteration   7: 10559074.748 ops/s
# Warmup Iteration   8: 10127960.568 ops/s
# Warmup Iteration   9: 10607533.286 ops/s
# Warmup Iteration  10: 10281795.751 ops/s
# Warmup Iteration  11: 10339569.498 ops/s
# Warmup Iteration  12: 10555105.422 ops/s
# Warmup Iteration  13: 10187871.696 ops/s
# Warmup Iteration  14: 10681350.505 ops/s
# Warmup Iteration  15: 9893073.986 ops/s
# Warmup Iteration  16: 10517798.407 ops/s
# Warmup Iteration  17: 10573903.155 ops/s
# Warmup Iteration  18: 10231253.354 ops/s
# Warmup Iteration  19: 10715892.710 ops/s
# Warmup Iteration  20: 10331688.010 ops/s
# Warmup Iteration  21: 10230515.294 ops/s
# Warmup Iteration  22: 10517946.347 ops/s
# Warmup Iteration  23: 8698447.337 ops/s
# Warmup Iteration  24: 10659194.039 ops/s
# Warmup Iteration  25: 10359880.553 ops/s
# Warmup Iteration  26: 10207726.289 ops/s
# Warmup Iteration  27: 10187602.008 ops/s
# Warmup Iteration  28: 10551629.585 ops/s
# Warmup Iteration  29: 10272725.036 ops/s
# Warmup Iteration  30: 10530744.212 ops/s
Iteration   1: 10157392.121 ops/s
Iteration   2: 10485181.359 ops/s
Iteration   3: 10499611.981 ops/s
Iteration   4: 10565626.179 ops/s
Iteration   5: 9972232.022 ops/s
Iteration   6: 10483177.929 ops/s
Iteration   7: 10461127.038 ops/s
Iteration   8: 10071950.946 ops/s
Iteration   9: 10555699.845 ops/s
Iteration  10: 10534745.818 ops/s
Iteration  11: 10451763.519 ops/s
Iteration  12: 10214509.185 ops/s
Iteration  13: 10280900.514 ops/s
Iteration  14: 10177330.522 ops/s
Iteration  15: 10464237.544 ops/s
Iteration  16: 10735656.248 ops/s
Iteration  17: 10318123.215 ops/s
Iteration  18: 10294347.774 ops/s
Iteration  19: 10294912.711 ops/s
Iteration  20: 10329237.667 ops/s
Iteration  21: 10372872.610 ops/s
Iteration  22: 10211825.872 ops/s
Iteration  23: 11014436.665 ops/s
Iteration  24: 10177688.704 ops/s
Iteration  25: 10569048.777 ops/s
Iteration  26: 10095502.464 ops/s
Iteration  27: 10516308.341 ops/s
Iteration  28: 10289467.133 ops/s
Iteration  29: 10565448.818 ops/s
Iteration  30: 10258117.311 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrDefaultTest._Benchmark.benchmark_singleJust":
  10380616.028 ±(99.9%) 143886.992 ops/s [Average]
  (min, avg, max) = (9972232.022, 10380616.028, 11014436.665), stdev = 215363.293
  CI (99.9%): [10236729.035, 10524503.020] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt         Score        Error  Units
ObservableStageSubscriberOrDefaultTest._Benchmark.benchmark_singleJust  thrpt   30  10380616.028 ± 143886.992  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableFromObservableTest._Benchmark.benchmark_fromObservable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableFromObservableTest._Benchmark.benchmark_fromObservable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2043269.186 ops/s
# Warmup Iteration   2: 4977535.048 ops/s
# Warmup Iteration   3: 7548634.381 ops/s
# Warmup Iteration   4: 7285185.509 ops/s
# Warmup Iteration   5: 7446537.767 ops/s
# Warmup Iteration   6: 7637673.246 ops/s
# Warmup Iteration   7: 7300272.628 ops/s
# Warmup Iteration   8: 7483964.949 ops/s
# Warmup Iteration   9: 7200077.868 ops/s
# Warmup Iteration  10: 7590920.512 ops/s
# Warmup Iteration  11: 7330341.157 ops/s
# Warmup Iteration  12: 7457806.711 ops/s
# Warmup Iteration  13: 7470998.393 ops/s
# Warmup Iteration  14: 7556910.820 ops/s
# Warmup Iteration  15: 7362575.269 ops/s
# Warmup Iteration  16: 7537302.090 ops/s
# Warmup Iteration  17: 7674218.499 ops/s
# Warmup Iteration  18: 7374022.384 ops/s
# Warmup Iteration  19: 7628799.476 ops/s
# Warmup Iteration  20: 7832099.082 ops/s
# Warmup Iteration  21: 7402786.641 ops/s
# Warmup Iteration  22: 7695346.744 ops/s
# Warmup Iteration  23: 7250629.673 ops/s
# Warmup Iteration  24: 7562978.348 ops/s
# Warmup Iteration  25: 7616937.092 ops/s
# Warmup Iteration  26: 7496370.769 ops/s
# Warmup Iteration  27: 7698423.539 ops/s
# Warmup Iteration  28: 7288249.833 ops/s
# Warmup Iteration  29: 7890965.391 ops/s
# Warmup Iteration  30: 7185980.066 ops/s
Iteration   1: 7511709.078 ops/s
Iteration   2: 7726126.432 ops/s
Iteration   3: 7288692.035 ops/s
Iteration   4: 7579302.304 ops/s
Iteration   5: 7393188.717 ops/s
Iteration   6: 7753683.443 ops/s
Iteration   7: 7389011.235 ops/s
Iteration   8: 7471352.939 ops/s
Iteration   9: 7720698.402 ops/s
Iteration  10: 7340386.335 ops/s
Iteration  11: 7766486.345 ops/s
Iteration  12: 7283193.466 ops/s
Iteration  13: 7522064.864 ops/s
Iteration  14: 7791225.515 ops/s
Iteration  15: 7510480.705 ops/s
Iteration  16: 7222123.325 ops/s
Iteration  17: 7732921.390 ops/s
Iteration  18: 7443238.354 ops/s
Iteration  19: 7402961.750 ops/s
Iteration  20: 7496037.743 ops/s
Iteration  21: 7406578.793 ops/s
Iteration  22: 7408541.249 ops/s
Iteration  23: 7803458.766 ops/s
Iteration  24: 7314234.812 ops/s
Iteration  25: 7696150.885 ops/s
Iteration  26: 7451656.297 ops/s
Iteration  27: 7550389.353 ops/s
Iteration  28: 7519167.570 ops/s
Iteration  29: 7295315.060 ops/s
Iteration  30: 7810688.723 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableFromObservableTest._Benchmark.benchmark_fromObservable":
  7520035.529 ±(99.9%) 119427.809 ops/s [Average]
  (min, avg, max) = (7222123.325, 7520035.529, 7810688.723), stdev = 178753.935
  CI (99.9%): [7400607.721, 7639463.338] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score        Error  Units
CompletableFromObservableTest._Benchmark.benchmark_fromObservable  thrpt   30  7520035.529 ± 119427.809  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.observers.LambdaObserverTest._Benchmark.benchmark_onNextThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.observers.LambdaObserverTest._Benchmark.benchmark_onNextThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 197409.401 ops/s
# Warmup Iteration   2: 465926.534 ops/s
# Warmup Iteration   3: 480266.435 ops/s
# Warmup Iteration   4: 454588.032 ops/s
# Warmup Iteration   5: 543921.905 ops/s
# Warmup Iteration   6: 523701.251 ops/s
# Warmup Iteration   7: 533743.610 ops/s
# Warmup Iteration   8: 529195.538 ops/s
# Warmup Iteration   9: 548924.735 ops/s
# Warmup Iteration  10: 521301.575 ops/s
# Warmup Iteration  11: 534439.309 ops/s
# Warmup Iteration  12: 532320.254 ops/s
# Warmup Iteration  13: 536977.259 ops/s
# Warmup Iteration  14: 548235.996 ops/s
# Warmup Iteration  15: 532145.263 ops/s
# Warmup Iteration  16: 538003.743 ops/s
# Warmup Iteration  17: 482434.422 ops/s
# Warmup Iteration  18: 527195.593 ops/s
# Warmup Iteration  19: 537578.569 ops/s
# Warmup Iteration  20: 580369.408 ops/s
# Warmup Iteration  21: 549270.719 ops/s
# Warmup Iteration  22: 548902.414 ops/s
# Warmup Iteration  23: 538453.152 ops/s
# Warmup Iteration  24: 553830.465 ops/s
# Warmup Iteration  25: 559958.774 ops/s
# Warmup Iteration  26: 549019.059 ops/s
# Warmup Iteration  27: 555805.087 ops/s
# Warmup Iteration  28: 568166.552 ops/s
# Warmup Iteration  29: 535614.221 ops/s
# Warmup Iteration  30: 550572.988 ops/s
Iteration   1: 542410.070 ops/s
Iteration   2: 529420.667 ops/s
Iteration   3: 558941.267 ops/s
Iteration   4: 543654.708 ops/s
Iteration   5: 556043.132 ops/s
Iteration   6: 549062.004 ops/s
Iteration   7: 555921.162 ops/s
Iteration   8: 569730.780 ops/s
Iteration   9: 533360.100 ops/s
Iteration  10: 564528.812 ops/s
Iteration  11: 548872.325 ops/s
Iteration  12: 562660.809 ops/s
Iteration  13: 544030.551 ops/s
Iteration  14: 567126.367 ops/s
Iteration  15: 569495.062 ops/s
Iteration  16: 552177.703 ops/s
Iteration  17: 552679.712 ops/s
Iteration  18: 566433.310 ops/s
Iteration  19: 538355.171 ops/s
Iteration  20: 573275.449 ops/s
Iteration  21: 545145.470 ops/s
Iteration  22: 562733.512 ops/s
Iteration  23: 548596.433 ops/s
Iteration  24: 557660.483 ops/s
Iteration  25: 556723.374 ops/s
Iteration  26: 527878.829 ops/s
Iteration  27: 574122.626 ops/s
Iteration  28: 540332.869 ops/s
Iteration  29: 557273.750 ops/s
Iteration  30: 568151.191 ops/s


Result "io.reactivex.rxjava3.internal.observers.LambdaObserverTest._Benchmark.benchmark_onNextThrows":
  553893.257 ±(99.9%) 8563.998 ops/s [Average]
  (min, avg, max) = (527878.829, 553893.257, 574122.626), stdev = 12818.190
  CI (99.9%): [545329.258, 562457.255] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score      Error  Units
LambdaObserverTest._Benchmark.benchmark_onNextThrows  thrpt   30  553893.257 ± 8563.998  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrDefaultTest._Benchmark.benchmark_firstJust$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrDefaultTest._Benchmark.benchmark_firstJust

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 4587666.565 ops/s
# Warmup Iteration   2: 9309492.793 ops/s
# Warmup Iteration   3: 8548047.987 ops/s
# Warmup Iteration   4: 10697995.933 ops/s
# Warmup Iteration   5: 10361467.826 ops/s
# Warmup Iteration   6: 10226482.950 ops/s
# Warmup Iteration   7: 10478805.514 ops/s
# Warmup Iteration   8: 10676366.484 ops/s
# Warmup Iteration   9: 10401864.016 ops/s
# Warmup Iteration  10: 10648482.245 ops/s
# Warmup Iteration  11: 10256487.343 ops/s
# Warmup Iteration  12: 10226041.351 ops/s
# Warmup Iteration  13: 10246182.770 ops/s
# Warmup Iteration  14: 10532720.609 ops/s
# Warmup Iteration  15: 10316214.161 ops/s
# Warmup Iteration  16: 10575597.841 ops/s
# Warmup Iteration  17: 10467816.549 ops/s
# Warmup Iteration  18: 10279444.188 ops/s
# Warmup Iteration  19: 10604335.113 ops/s
# Warmup Iteration  20: 10262827.091 ops/s
# Warmup Iteration  21: 10534251.302 ops/s
# Warmup Iteration  22: 10441188.181 ops/s
# Warmup Iteration  23: 10134039.462 ops/s
# Warmup Iteration  24: 10551067.171 ops/s
# Warmup Iteration  25: 10005929.636 ops/s
# Warmup Iteration  26: 10452191.685 ops/s
# Warmup Iteration  27: 10266652.128 ops/s
# Warmup Iteration  28: 10402405.651 ops/s
# Warmup Iteration  29: 10550946.707 ops/s
# Warmup Iteration  30: 9959196.559 ops/s
Iteration   1: 10482408.064 ops/s
Iteration   2: 10118311.699 ops/s
Iteration   3: 10612778.673 ops/s
Iteration   4: 10204628.562 ops/s
Iteration   5: 10179390.994 ops/s
Iteration   6: 10429797.791 ops/s
Iteration   7: 10042267.993 ops/s
Iteration   8: 10488414.819 ops/s
Iteration   9: 10057045.587 ops/s
Iteration  10: 10397488.690 ops/s
Iteration  11: 10563991.697 ops/s
Iteration  12: 10084402.162 ops/s
Iteration  13: 10371500.474 ops/s
Iteration  14: 10371879.351 ops/s
Iteration  15: 10123445.186 ops/s
Iteration  16: 10649478.310 ops/s
Iteration  17: 10044198.888 ops/s
Iteration  18: 10785000.823 ops/s
Iteration  19: 10140717.140 ops/s
Iteration  20: 10416381.141 ops/s
Iteration  21: 10771723.936 ops/s
Iteration  22: 9938637.837 ops/s
Iteration  23: 10298320.699 ops/s
Iteration  24: 10506607.846 ops/s
Iteration  25: 10175638.652 ops/s
Iteration  26: 10801318.229 ops/s
Iteration  27: 9943326.933 ops/s
Iteration  28: 10423757.445 ops/s
Iteration  29: 10095171.437 ops/s
Iteration  30: 10102434.112 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrDefaultTest._Benchmark.benchmark_firstJust":
  10320682.172 ±(99.9%) 169550.910 ops/s [Average]
  (min, avg, max) = (9938637.837, 10320682.172, 10801318.229), stdev = 253775.840
  CI (99.9%): [10151131.262, 10490233.082] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt         Score        Error  Units
ObservableStageSubscriberOrDefaultTest._Benchmark.benchmark_firstJust  thrpt   30  10320682.172 ± 169550.910  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrErrorTest._Benchmark.benchmark_firstJust$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrErrorTest._Benchmark.benchmark_firstJust

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 4429431.960 ops/s
# Warmup Iteration   2: 8553277.456 ops/s
# Warmup Iteration   3: 9162349.980 ops/s
# Warmup Iteration   4: 10135467.332 ops/s
# Warmup Iteration   5: 10552848.100 ops/s
# Warmup Iteration   6: 10838402.131 ops/s
# Warmup Iteration   7: 10176105.420 ops/s
# Warmup Iteration   8: 10472844.448 ops/s
# Warmup Iteration   9: 10989892.306 ops/s
# Warmup Iteration  10: 10188302.633 ops/s
# Warmup Iteration  11: 10459190.504 ops/s
# Warmup Iteration  12: 9647864.068 ops/s
# Warmup Iteration  13: 9253472.876 ops/s
# Warmup Iteration  14: 10711122.869 ops/s
# Warmup Iteration  15: 10045936.528 ops/s
# Warmup Iteration  16: 10727759.058 ops/s
# Warmup Iteration  17: 10516736.012 ops/s
# Warmup Iteration  18: 10178533.091 ops/s
# Warmup Iteration  19: 10419040.133 ops/s
# Warmup Iteration  20: 10747756.290 ops/s
# Warmup Iteration  21: 10544273.363 ops/s
# Warmup Iteration  22: 9985814.588 ops/s
# Warmup Iteration  23: 10300625.617 ops/s
# Warmup Iteration  24: 10148266.302 ops/s
# Warmup Iteration  25: 10205195.671 ops/s
# Warmup Iteration  26: 10716350.858 ops/s
# Warmup Iteration  27: 10089566.858 ops/s
# Warmup Iteration  28: 10229900.944 ops/s
# Warmup Iteration  29: 10585547.724 ops/s
# Warmup Iteration  30: 10316158.639 ops/s
Iteration   1: 10665375.277 ops/s
Iteration   2: 9964246.989 ops/s
Iteration   3: 10379609.493 ops/s
Iteration   4: 10470362.670 ops/s
Iteration   5: 10486245.983 ops/s
Iteration   6: 10487969.698 ops/s
Iteration   7: 10486918.013 ops/s
Iteration   8: 10044163.752 ops/s
Iteration   9: 10747654.407 ops/s
Iteration  10: 10412962.532 ops/s
Iteration  11: 10531595.045 ops/s
Iteration  12: 10244076.348 ops/s
Iteration  13: 10424380.254 ops/s
Iteration  14: 10991733.733 ops/s
Iteration  15: 10559416.249 ops/s
Iteration  16: 10314286.551 ops/s
Iteration  17: 10435931.109 ops/s
Iteration  18: 10369351.792 ops/s
Iteration  19: 10536298.188 ops/s
Iteration  20: 10396427.285 ops/s
Iteration  21: 10081104.719 ops/s
Iteration  22: 10853386.057 ops/s
Iteration  23: 10020547.911 ops/s
Iteration  24: 10516398.618 ops/s
Iteration  25: 9975450.985 ops/s
Iteration  26: 10454105.873 ops/s
Iteration  27: 10693963.572 ops/s
Iteration  28: 9887929.057 ops/s
Iteration  29: 10284223.833 ops/s
Iteration  30: 10337043.879 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrErrorTest._Benchmark.benchmark_firstJust":
  10401771.996 ±(99.9%) 175273.663 ops/s [Average]
  (min, avg, max) = (9887929.057, 10401771.996, 10991733.733), stdev = 262341.388
  CI (99.9%): [10226498.332, 10577045.659] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt         Score        Error  Units
ObservableStageSubscriberOrErrorTest._Benchmark.benchmark_firstJust  thrpt   30  10401771.996 ± 175273.663  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.observers.LambdaObserverTest._Benchmark.benchmark_onSubscribeThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.observers.LambdaObserverTest._Benchmark.benchmark_onSubscribeThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 197439.298 ops/s
# Warmup Iteration   2: 467812.191 ops/s
# Warmup Iteration   3: 513232.166 ops/s
# Warmup Iteration   4: 446906.169 ops/s
# Warmup Iteration   5: 547449.517 ops/s
# Warmup Iteration   6: 545147.855 ops/s
# Warmup Iteration   7: 541953.104 ops/s
# Warmup Iteration   8: 555764.571 ops/s
# Warmup Iteration   9: 543849.003 ops/s
# Warmup Iteration  10: 551038.315 ops/s
# Warmup Iteration  11: 541307.600 ops/s
# Warmup Iteration  12: 532765.648 ops/s
# Warmup Iteration  13: 561881.124 ops/s
# Warmup Iteration  14: 533915.918 ops/s
# Warmup Iteration  15: 548986.917 ops/s
# Warmup Iteration  16: 553607.017 ops/s
# Warmup Iteration  17: 562442.953 ops/s
# Warmup Iteration  18: 590977.714 ops/s
# Warmup Iteration  19: 549221.332 ops/s
# Warmup Iteration  20: 574338.961 ops/s
# Warmup Iteration  21: 564067.439 ops/s
# Warmup Iteration  22: 581714.652 ops/s
# Warmup Iteration  23: 581275.169 ops/s
# Warmup Iteration  24: 565888.856 ops/s
# Warmup Iteration  25: 563786.916 ops/s
# Warmup Iteration  26: 555622.222 ops/s
# Warmup Iteration  27: 582427.197 ops/s
# Warmup Iteration  28: 567150.676 ops/s
# Warmup Iteration  29: 582587.751 ops/s
# Warmup Iteration  30: 550236.253 ops/s
Iteration   1: 581282.206 ops/s
Iteration   2: 577055.748 ops/s
Iteration   3: 565777.022 ops/s
Iteration   4: 589070.685 ops/s
Iteration   5: 563156.350 ops/s
Iteration   6: 588305.934 ops/s
Iteration   7: 562587.135 ops/s
Iteration   8: 558024.626 ops/s
Iteration   9: 581243.617 ops/s
Iteration  10: 554343.586 ops/s
Iteration  11: 587714.002 ops/s
Iteration  12: 591464.481 ops/s
Iteration  13: 557426.902 ops/s
Iteration  14: 589913.687 ops/s
Iteration  15: 561171.672 ops/s
Iteration  16: 568847.939 ops/s
Iteration  17: 595519.395 ops/s
Iteration  18: 553377.873 ops/s
Iteration  19: 577962.118 ops/s
Iteration  20: 563807.074 ops/s
Iteration  21: 568450.866 ops/s
Iteration  22: 578609.739 ops/s
Iteration  23: 561778.164 ops/s
Iteration  24: 594293.145 ops/s
Iteration  25: 581230.332 ops/s
Iteration  26: 553354.996 ops/s
Iteration  27: 584752.290 ops/s
Iteration  28: 561311.990 ops/s
Iteration  29: 564434.508 ops/s
Iteration  30: 571283.538 ops/s


Result "io.reactivex.rxjava3.internal.observers.LambdaObserverTest._Benchmark.benchmark_onSubscribeThrows":
  572918.387 ±(99.9%) 8908.402 ops/s [Average]
  (min, avg, max) = (553354.996, 572918.387, 595519.395), stdev = 13333.677
  CI (99.9%): [564009.986, 581826.789] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
LambdaObserverTest._Benchmark.benchmark_onSubscribeThrows  thrpt   30  572918.387 ± 8908.402  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingTest._Benchmark.benchmark_blockingFirstEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingTest._Benchmark.benchmark_blockingFirstEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 388752.166 ops/s
# Warmup Iteration   2: 661490.769 ops/s
# Warmup Iteration   3: 693415.885 ops/s
# Warmup Iteration   4: 705588.835 ops/s
# Warmup Iteration   5: 705294.185 ops/s
# Warmup Iteration   6: 690496.133 ops/s
# Warmup Iteration   7: 720278.961 ops/s
# Warmup Iteration   8: 574310.703 ops/s
# Warmup Iteration   9: 788711.571 ops/s
# Warmup Iteration  10: 731479.187 ops/s
# Warmup Iteration  11: 734862.541 ops/s
# Warmup Iteration  12: 775874.112 ops/s
# Warmup Iteration  13: 741303.709 ops/s
# Warmup Iteration  14: 746677.357 ops/s
# Warmup Iteration  15: 741123.461 ops/s
# Warmup Iteration  16: 746100.058 ops/s
# Warmup Iteration  17: 816562.603 ops/s
# Warmup Iteration  18: 794076.619 ops/s
# Warmup Iteration  19: 799118.576 ops/s
# Warmup Iteration  20: 816337.642 ops/s
# Warmup Iteration  21: 768578.098 ops/s
# Warmup Iteration  22: 808625.969 ops/s
# Warmup Iteration  23: 780335.730 ops/s
# Warmup Iteration  24: 755926.390 ops/s
# Warmup Iteration  25: 825054.366 ops/s
# Warmup Iteration  26: 768222.219 ops/s
# Warmup Iteration  27: 787857.365 ops/s
# Warmup Iteration  28: 822178.595 ops/s
# Warmup Iteration  29: 804422.392 ops/s
# Warmup Iteration  30: 788425.083 ops/s
Iteration   1: 821946.003 ops/s
Iteration   2: 782817.690 ops/s
Iteration   3: 807192.754 ops/s
Iteration   4: 804489.198 ops/s
Iteration   5: 778521.849 ops/s
Iteration   6: 829070.257 ops/s
Iteration   7: 767693.723 ops/s
Iteration   8: 787965.340 ops/s
Iteration   9: 827374.573 ops/s
Iteration  10: 777312.970 ops/s
Iteration  11: 823948.964 ops/s
Iteration  12: 787881.976 ops/s
Iteration  13: 810305.628 ops/s
Iteration  14: 794902.764 ops/s
Iteration  15: 778245.273 ops/s
Iteration  16: 836136.706 ops/s
Iteration  17: 823575.550 ops/s
Iteration  18: 773473.489 ops/s
Iteration  19: 805529.642 ops/s
Iteration  20: 805688.381 ops/s
Iteration  21: 789401.258 ops/s
Iteration  22: 789709.013 ops/s
Iteration  23: 799733.938 ops/s
Iteration  24: 821698.435 ops/s
Iteration  25: 778605.456 ops/s
Iteration  26: 803596.172 ops/s
Iteration  27: 792996.190 ops/s
Iteration  28: 789764.580 ops/s
Iteration  29: 823598.881 ops/s
Iteration  30: 768667.585 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingTest._Benchmark.benchmark_blockingFirstEmpty":
  799394.808 ±(99.9%) 13248.364 ops/s [Average]
  (min, avg, max) = (767693.723, 799394.808, 836136.706), stdev = 19829.528
  CI (99.9%): [786146.444, 812643.171] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score       Error  Units
ObservableBlockingTest._Benchmark.benchmark_blockingFirstEmpty  thrpt   30  799394.808 ± 13248.364  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableFromOptionalTest._Benchmark.benchmark_hasValue$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableFromOptionalTest._Benchmark.benchmark_hasValue

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 953329.931 ops/s
# Warmup Iteration   2: 5138249.859 ops/s
# Warmup Iteration   3: 5979332.740 ops/s
# Warmup Iteration   4: 7178205.629 ops/s
# Warmup Iteration   5: 6863335.715 ops/s
# Warmup Iteration   6: 6833551.423 ops/s
# Warmup Iteration   7: 7050378.734 ops/s
# Warmup Iteration   8: 6771211.589 ops/s
# Warmup Iteration   9: 7197762.358 ops/s
# Warmup Iteration  10: 6817926.129 ops/s
# Warmup Iteration  11: 6900476.927 ops/s
# Warmup Iteration  12: 7192039.080 ops/s
# Warmup Iteration  13: 6853873.633 ops/s
# Warmup Iteration  14: 6958166.083 ops/s
# Warmup Iteration  15: 6878421.063 ops/s
# Warmup Iteration  16: 6760359.174 ops/s
# Warmup Iteration  17: 7040790.109 ops/s
# Warmup Iteration  18: 6939337.916 ops/s
# Warmup Iteration  19: 7048424.294 ops/s
# Warmup Iteration  20: 7253522.418 ops/s
# Warmup Iteration  21: 6927857.512 ops/s
# Warmup Iteration  22: 7067930.913 ops/s
# Warmup Iteration  23: 6864269.578 ops/s
# Warmup Iteration  24: 6782822.378 ops/s
# Warmup Iteration  25: 7005993.881 ops/s
# Warmup Iteration  26: 6804003.526 ops/s
# Warmup Iteration  27: 6994477.693 ops/s
# Warmup Iteration  28: 6888065.668 ops/s
# Warmup Iteration  29: 6967947.533 ops/s
# Warmup Iteration  30: 7260681.032 ops/s
Iteration   1: 6776628.906 ops/s
Iteration   2: 7217706.751 ops/s
Iteration   3: 7039182.272 ops/s
Iteration   4: 6694435.313 ops/s
Iteration   5: 7004626.862 ops/s
Iteration   6: 6806623.014 ops/s
Iteration   7: 7086168.729 ops/s
Iteration   8: 7158629.399 ops/s
Iteration   9: 6730282.503 ops/s
Iteration  10: 7283386.963 ops/s
Iteration  11: 6926159.197 ops/s
Iteration  12: 6868344.300 ops/s
Iteration  13: 7172171.755 ops/s
Iteration  14: 6541596.483 ops/s
Iteration  15: 7029365.195 ops/s
Iteration  16: 7181967.675 ops/s
Iteration  17: 6788637.607 ops/s
Iteration  18: 7173861.568 ops/s
Iteration  19: 6762766.908 ops/s
Iteration  20: 7166496.206 ops/s
Iteration  21: 7205722.471 ops/s
Iteration  22: 6766381.998 ops/s
Iteration  23: 7160931.088 ops/s
Iteration  24: 7037711.418 ops/s
Iteration  25: 6897949.220 ops/s
Iteration  26: 7122099.034 ops/s
Iteration  27: 6958048.231 ops/s
Iteration  28: 7097446.110 ops/s
Iteration  29: 6825937.666 ops/s
Iteration  30: 7281005.620 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableFromOptionalTest._Benchmark.benchmark_hasValue":
  6992075.682 ±(99.9%) 132400.093 ops/s [Average]
  (min, avg, max) = (6541596.483, 6992075.682, 7283386.963), stdev = 198170.241
  CI (99.9%): [6859675.589, 7124475.775] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score        Error  Units
ObservableFromOptionalTest._Benchmark.benchmark_hasValue  thrpt   30  6992075.682 ± 132400.093  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableIgnoreElementsTest._Benchmark.benchmark_checkDispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableIgnoreElementsTest._Benchmark.benchmark_checkDispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1582175.944 ops/s
# Warmup Iteration   2: 3682461.390 ops/s
# Warmup Iteration   3: 4605102.065 ops/s
# Warmup Iteration   4: 5547699.598 ops/s
# Warmup Iteration   5: 5813869.700 ops/s
# Warmup Iteration   6: 5691308.322 ops/s
# Warmup Iteration   7: 5734189.583 ops/s
# Warmup Iteration   8: 5620031.986 ops/s
# Warmup Iteration   9: 5916330.359 ops/s
# Warmup Iteration  10: 5724716.782 ops/s
# Warmup Iteration  11: 5666460.692 ops/s
# Warmup Iteration  12: 6010776.902 ops/s
# Warmup Iteration  13: 5684211.203 ops/s
# Warmup Iteration  14: 5962066.177 ops/s
# Warmup Iteration  15: 5547373.390 ops/s
# Warmup Iteration  16: 5839240.919 ops/s
# Warmup Iteration  17: 5767099.496 ops/s
# Warmup Iteration  18: 5784441.414 ops/s
# Warmup Iteration  19: 5919293.033 ops/s
# Warmup Iteration  20: 5667281.935 ops/s
# Warmup Iteration  21: 5779749.523 ops/s
# Warmup Iteration  22: 5562707.088 ops/s
# Warmup Iteration  23: 5831095.360 ops/s
# Warmup Iteration  24: 5776746.972 ops/s
# Warmup Iteration  25: 5938501.713 ops/s
# Warmup Iteration  26: 5562811.728 ops/s
# Warmup Iteration  27: 5981331.970 ops/s
# Warmup Iteration  28: 5618135.807 ops/s
# Warmup Iteration  29: 5940261.691 ops/s
# Warmup Iteration  30: 5822816.475 ops/s
Iteration   1: 6055215.590 ops/s
Iteration   2: 5570967.894 ops/s
Iteration   3: 5860946.471 ops/s
Iteration   4: 5832757.083 ops/s
Iteration   5: 5943804.536 ops/s
Iteration   6: 5832391.021 ops/s
Iteration   7: 5630896.096 ops/s
Iteration   8: 5817457.916 ops/s
Iteration   9: 5689296.329 ops/s
Iteration  10: 5818351.021 ops/s
Iteration  11: 5840748.081 ops/s
Iteration  12: 5833091.487 ops/s
Iteration  13: 6044025.802 ops/s
Iteration  14: 5944800.093 ops/s
Iteration  15: 5811414.086 ops/s
Iteration  16: 5768065.793 ops/s
Iteration  17: 5910831.534 ops/s
Iteration  18: 5817868.189 ops/s
Iteration  19: 5759202.622 ops/s
Iteration  20: 5931521.427 ops/s
Iteration  21: 5815550.172 ops/s
Iteration  22: 5875455.747 ops/s
Iteration  23: 5761921.226 ops/s
Iteration  24: 5828621.733 ops/s
Iteration  25: 5766759.213 ops/s
Iteration  26: 5663287.177 ops/s
Iteration  27: 5882056.843 ops/s
Iteration  28: 5919597.627 ops/s
Iteration  29: 5585857.222 ops/s
Iteration  30: 5982356.659 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableIgnoreElementsTest._Benchmark.benchmark_checkDispose":
  5826503.890 ±(99.9%) 79310.795 ops/s [Average]
  (min, avg, max) = (5570967.894, 5826503.890, 6055215.590), stdev = 118708.674
  CI (99.9%): [5747193.094, 5905814.685] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
ObservableIgnoreElementsTest._Benchmark.benchmark_checkDispose  thrpt   30  5826503.890 ± 79310.795  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRangeLongTest._Benchmark.benchmark_countOne$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRangeLongTest._Benchmark.benchmark_countOne

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1819288.228 ops/s
# Warmup Iteration   2: 4937772.051 ops/s
# Warmup Iteration   3: 6704267.566 ops/s
# Warmup Iteration   4: 6889563.342 ops/s
# Warmup Iteration   5: 6718560.789 ops/s
# Warmup Iteration   6: 6753165.254 ops/s
# Warmup Iteration   7: 6779114.299 ops/s
# Warmup Iteration   8: 6825010.121 ops/s
# Warmup Iteration   9: 6956256.455 ops/s
# Warmup Iteration  10: 6840803.633 ops/s
# Warmup Iteration  11: 6691859.440 ops/s
# Warmup Iteration  12: 7066225.217 ops/s
# Warmup Iteration  13: 6611242.418 ops/s
# Warmup Iteration  14: 6847646.127 ops/s
# Warmup Iteration  15: 7122494.238 ops/s
# Warmup Iteration  16: 6741278.773 ops/s
# Warmup Iteration  17: 6963817.068 ops/s
# Warmup Iteration  18: 6906834.675 ops/s
# Warmup Iteration  19: 6990062.839 ops/s
# Warmup Iteration  20: 7075816.072 ops/s
# Warmup Iteration  21: 6780608.010 ops/s
# Warmup Iteration  22: 7159969.379 ops/s
# Warmup Iteration  23: 6858432.525 ops/s
# Warmup Iteration  24: 6985634.442 ops/s
# Warmup Iteration  25: 7087983.641 ops/s
# Warmup Iteration  26: 7177666.625 ops/s
# Warmup Iteration  27: 6723364.949 ops/s
# Warmup Iteration  28: 7043902.773 ops/s
# Warmup Iteration  29: 7266588.836 ops/s
# Warmup Iteration  30: 6676909.256 ops/s
Iteration   1: 7020065.588 ops/s
Iteration   2: 6914298.468 ops/s
Iteration   3: 6973909.919 ops/s
Iteration   4: 6884572.024 ops/s
Iteration   5: 6864662.560 ops/s
Iteration   6: 6954542.675 ops/s
Iteration   7: 6730727.257 ops/s
Iteration   8: 7021860.417 ops/s
Iteration   9: 6699872.149 ops/s
Iteration  10: 6923733.875 ops/s
Iteration  11: 6985499.415 ops/s
Iteration  12: 6719540.090 ops/s
Iteration  13: 6946321.049 ops/s
Iteration  14: 7002036.367 ops/s
Iteration  15: 7039265.786 ops/s
Iteration  16: 6914375.863 ops/s
Iteration  17: 6794784.052 ops/s
Iteration  18: 6958573.592 ops/s
Iteration  19: 6902946.739 ops/s
Iteration  20: 7192525.461 ops/s
Iteration  21: 6811887.436 ops/s
Iteration  22: 6918089.129 ops/s
Iteration  23: 6703534.652 ops/s
Iteration  24: 7111373.695 ops/s
Iteration  25: 6853340.659 ops/s
Iteration  26: 7019224.540 ops/s
Iteration  27: 7121495.032 ops/s
Iteration  28: 7080932.457 ops/s
Iteration  29: 5546508.726 ops/s
Iteration  30: 6941672.956 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableRangeLongTest._Benchmark.benchmark_countOne":
  6885072.421 ±(99.9%) 188045.118 ops/s [Average]
  (min, avg, max) = (5546508.726, 6885072.421, 7192525.461), stdev = 281457.101
  CI (99.9%): [6697027.303, 7073117.539] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score        Error  Units
ObservableRangeLongTest._Benchmark.benchmark_countOne  thrpt   30  6885072.421 ± 188045.118  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDelayTest._Benchmark.benchmark_withObservableDispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDelayTest._Benchmark.benchmark_withObservableDispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2092259.879 ops/s
# Warmup Iteration   2: 5099153.338 ops/s
# Warmup Iteration   3: 5742760.601 ops/s
# Warmup Iteration   4: 6472316.801 ops/s
# Warmup Iteration   5: 6581695.469 ops/s
# Warmup Iteration   6: 6580128.009 ops/s
# Warmup Iteration   7: 6411340.415 ops/s
# Warmup Iteration   8: 6428661.238 ops/s
# Warmup Iteration   9: 6351177.501 ops/s
# Warmup Iteration  10: 6785291.327 ops/s
# Warmup Iteration  11: 6513788.790 ops/s
# Warmup Iteration  12: 6233794.464 ops/s
# Warmup Iteration  13: 6604289.757 ops/s
# Warmup Iteration  14: 6433971.165 ops/s
# Warmup Iteration  15: 6589457.937 ops/s
# Warmup Iteration  16: 6430237.309 ops/s
# Warmup Iteration  17: 6341356.308 ops/s
# Warmup Iteration  18: 6715552.321 ops/s
# Warmup Iteration  19: 6466185.290 ops/s
# Warmup Iteration  20: 6576613.443 ops/s
# Warmup Iteration  21: 6533344.315 ops/s
# Warmup Iteration  22: 6508938.657 ops/s
# Warmup Iteration  23: 6349739.789 ops/s
# Warmup Iteration  24: 6328713.974 ops/s
# Warmup Iteration  25: 6833941.505 ops/s
# Warmup Iteration  26: 6414653.525 ops/s
# Warmup Iteration  27: 6456814.499 ops/s
# Warmup Iteration  28: 6459614.977 ops/s
# Warmup Iteration  29: 6594001.338 ops/s
# Warmup Iteration  30: 6445089.897 ops/s
Iteration   1: 6380897.161 ops/s
Iteration   2: 6432262.424 ops/s
Iteration   3: 6771967.451 ops/s
Iteration   4: 6476968.680 ops/s
Iteration   5: 6520784.327 ops/s
Iteration   6: 6306721.117 ops/s
Iteration   7: 6463673.171 ops/s
Iteration   8: 6568024.787 ops/s
Iteration   9: 6306154.482 ops/s
Iteration  10: 6523529.865 ops/s
Iteration  11: 6238651.379 ops/s
Iteration  12: 6636607.154 ops/s
Iteration  13: 6347747.777 ops/s
Iteration  14: 6532645.400 ops/s
Iteration  15: 6592505.402 ops/s
Iteration  16: 6255556.189 ops/s
Iteration  17: 6616587.804 ops/s
Iteration  18: 6428059.740 ops/s
Iteration  19: 6669136.802 ops/s
Iteration  20: 6378021.144 ops/s
Iteration  21: 6608667.756 ops/s
Iteration  22: 6562396.817 ops/s
Iteration  23: 6497542.353 ops/s
Iteration  24: 6532343.979 ops/s
Iteration  25: 6782120.830 ops/s
Iteration  26: 6171782.519 ops/s
Iteration  27: 6742067.346 ops/s
Iteration  28: 6386919.898 ops/s
Iteration  29: 6544607.511 ops/s
Iteration  30: 6409238.994 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleDelayTest._Benchmark.benchmark_withObservableDispose":
  6489473.009 ±(99.9%) 103746.542 ops/s [Average]
  (min, avg, max) = (6171782.519, 6489473.009, 6782120.830), stdev = 155282.951
  CI (99.9%): [6385726.467, 6593219.550] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score        Error  Units
SingleDelayTest._Benchmark.benchmark_withObservableDispose  thrpt   30  6489473.009 ± 103746.542  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorReturnTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorReturnTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2470985.652 ops/s
# Warmup Iteration   2: 7009749.357 ops/s
# Warmup Iteration   3: 8591023.150 ops/s
# Warmup Iteration   4: 9144819.761 ops/s
# Warmup Iteration   5: 9369078.892 ops/s
# Warmup Iteration   6: 9286057.182 ops/s
# Warmup Iteration   7: 9002600.869 ops/s
# Warmup Iteration   8: 9450765.184 ops/s
# Warmup Iteration   9: 9300848.332 ops/s
# Warmup Iteration  10: 8935527.193 ops/s
# Warmup Iteration  11: 9072390.357 ops/s
# Warmup Iteration  12: 9134519.885 ops/s
# Warmup Iteration  13: 9149562.342 ops/s
# Warmup Iteration  14: 9509395.506 ops/s
# Warmup Iteration  15: 8858468.616 ops/s
# Warmup Iteration  16: 9169265.276 ops/s
# Warmup Iteration  17: 9292469.351 ops/s
# Warmup Iteration  18: 9157658.105 ops/s
# Warmup Iteration  19: 9484861.929 ops/s
# Warmup Iteration  20: 9255043.196 ops/s
# Warmup Iteration  21: 9491760.510 ops/s
# Warmup Iteration  22: 9145508.278 ops/s
# Warmup Iteration  23: 9174799.915 ops/s
# Warmup Iteration  24: 9241365.566 ops/s
# Warmup Iteration  25: 9130201.432 ops/s
# Warmup Iteration  26: 9571836.733 ops/s
# Warmup Iteration  27: 8974400.202 ops/s
# Warmup Iteration  28: 9399567.898 ops/s
# Warmup Iteration  29: 9269758.478 ops/s
# Warmup Iteration  30: 9164843.731 ops/s
Iteration   1: 9614953.300 ops/s
Iteration   2: 8978344.552 ops/s
Iteration   3: 9411873.878 ops/s
Iteration   4: 9094983.126 ops/s
Iteration   5: 9418319.991 ops/s
Iteration   6: 9333774.282 ops/s
Iteration   7: 9844692.528 ops/s
Iteration   8: 8822493.957 ops/s
Iteration   9: 9538067.746 ops/s
Iteration  10: 9062892.448 ops/s
Iteration  11: 9221889.179 ops/s
Iteration  12: 9268184.613 ops/s
Iteration  13: 8995449.485 ops/s
Iteration  14: 9585045.037 ops/s
Iteration  15: 9287871.153 ops/s
Iteration  16: 8967876.908 ops/s
Iteration  17: 9642720.917 ops/s
Iteration  18: 9295106.747 ops/s
Iteration  19: 9369158.981 ops/s
Iteration  20: 8973985.626 ops/s
Iteration  21: 9360853.102 ops/s
Iteration  22: 9056046.115 ops/s
Iteration  23: 9231726.482 ops/s
Iteration  24: 7578522.224 ops/s
Iteration  25: 9047710.540 ops/s
Iteration  26: 9395308.973 ops/s
Iteration  27: 9191879.046 ops/s
Iteration  28: 9192438.406 ops/s
Iteration  29: 9509071.374 ops/s
Iteration  30: 9138804.515 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorReturnTest._Benchmark.benchmark_dispose":
  9214334.841 ±(99.9%) 260447.577 ops/s [Average]
  (min, avg, max) = (7578522.224, 9214334.841, 9844692.528), stdev = 389825.702
  CI (99.9%): [8953887.264, 9474782.418] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score        Error  Units
ObservableOnErrorReturnTest._Benchmark.benchmark_dispose  thrpt   30  9214334.841 ± 260447.577  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualTest._Benchmark.benchmark_disposedObservable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualTest._Benchmark.benchmark_disposedObservable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 152407.886 ops/s
# Warmup Iteration   2: 1115706.711 ops/s
# Warmup Iteration   3: 1619625.962 ops/s
# Warmup Iteration   4: 1839228.102 ops/s
# Warmup Iteration   5: 1853739.997 ops/s
# Warmup Iteration   6: 1826512.697 ops/s
# Warmup Iteration   7: 1793627.789 ops/s
# Warmup Iteration   8: 1782715.871 ops/s
# Warmup Iteration   9: 1877817.188 ops/s
# Warmup Iteration  10: 1830336.452 ops/s
# Warmup Iteration  11: 1842851.029 ops/s
# Warmup Iteration  12: 1800531.924 ops/s
# Warmup Iteration  13: 1823683.936 ops/s
# Warmup Iteration  14: 1879098.490 ops/s
# Warmup Iteration  15: 1771739.505 ops/s
# Warmup Iteration  16: 1884416.318 ops/s
# Warmup Iteration  17: 1774272.409 ops/s
# Warmup Iteration  18: 1853779.121 ops/s
# Warmup Iteration  19: 1887403.013 ops/s
# Warmup Iteration  20: 1788836.439 ops/s
# Warmup Iteration  21: 1869521.425 ops/s
# Warmup Iteration  22: 1780243.348 ops/s
# Warmup Iteration  23: 1860445.458 ops/s
# Warmup Iteration  24: 1863737.282 ops/s
# Warmup Iteration  25: 1834724.678 ops/s
# Warmup Iteration  26: 1827118.178 ops/s
# Warmup Iteration  27: 1843716.561 ops/s
# Warmup Iteration  28: 1812015.778 ops/s
# Warmup Iteration  29: 1923507.424 ops/s
# Warmup Iteration  30: 1846064.600 ops/s
Iteration   1: 1849081.190 ops/s
Iteration   2: 1804559.339 ops/s
Iteration   3: 1950342.909 ops/s
Iteration   4: 1754389.388 ops/s
Iteration   5: 1819591.390 ops/s
Iteration   6: 1866970.738 ops/s
Iteration   7: 1807292.528 ops/s
Iteration   8: 1824410.988 ops/s
Iteration   9: 1911616.559 ops/s
Iteration  10: 1798219.165 ops/s
Iteration  11: 1875181.091 ops/s
Iteration  12: 1790842.157 ops/s
Iteration  13: 1885955.589 ops/s
Iteration  14: 1784102.513 ops/s
Iteration  15: 1794993.092 ops/s
Iteration  16: 1852055.250 ops/s
Iteration  17: 1866535.383 ops/s
Iteration  18: 1847726.377 ops/s
Iteration  19: 1902346.109 ops/s
Iteration  20: 1830792.530 ops/s
Iteration  21: 1828468.737 ops/s
Iteration  22: 1876761.125 ops/s
Iteration  23: 1821260.690 ops/s
Iteration  24: 1811587.015 ops/s
Iteration  25: 1885604.007 ops/s
Iteration  26: 1831475.101 ops/s
Iteration  27: 1888915.022 ops/s
Iteration  28: 1789420.798 ops/s
Iteration  29: 1816274.062 ops/s
Iteration  30: 1813211.449 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualTest._Benchmark.benchmark_disposedObservable":
  1839332.743 ±(99.9%) 29616.351 ops/s [Average]
  (min, avg, max) = (1754389.388, 1839332.743, 1950342.909), stdev = 44328.364
  CI (99.9%): [1809716.392, 1868949.094] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
ObservableSequenceEqualTest._Benchmark.benchmark_disposedObservable  thrpt   30  1839332.743 ± 29616.351  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_usingObservableSupplierReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_usingObservableSupplierReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 390745.608 ops/s
# Warmup Iteration   2: 603722.996 ops/s
# Warmup Iteration   3: 656971.520 ops/s
# Warmup Iteration   4: 635166.362 ops/s
# Warmup Iteration   5: 679994.557 ops/s
# Warmup Iteration   6: 687722.679 ops/s
# Warmup Iteration   7: 695356.586 ops/s
# Warmup Iteration   8: 693464.639 ops/s
# Warmup Iteration   9: 708685.225 ops/s
# Warmup Iteration  10: 663586.878 ops/s
# Warmup Iteration  11: 686765.054 ops/s
# Warmup Iteration  12: 706309.138 ops/s
# Warmup Iteration  13: 673021.585 ops/s
# Warmup Iteration  14: 692753.695 ops/s
# Warmup Iteration  15: 658853.672 ops/s
# Warmup Iteration  16: 711880.676 ops/s
# Warmup Iteration  17: 715742.919 ops/s
# Warmup Iteration  18: 749167.593 ops/s
# Warmup Iteration  19: 754883.631 ops/s
# Warmup Iteration  20: 715212.789 ops/s
# Warmup Iteration  21: 752222.913 ops/s
# Warmup Iteration  22: 721432.807 ops/s
# Warmup Iteration  23: 736083.828 ops/s
# Warmup Iteration  24: 747573.596 ops/s
# Warmup Iteration  25: 720892.402 ops/s
# Warmup Iteration  26: 748796.286 ops/s
# Warmup Iteration  27: 715321.433 ops/s
# Warmup Iteration  28: 719606.955 ops/s
# Warmup Iteration  29: 751869.184 ops/s
# Warmup Iteration  30: 713299.629 ops/s
Iteration   1: 731798.661 ops/s
Iteration   2: 716133.388 ops/s
Iteration   3: 739350.781 ops/s
Iteration   4: 714837.790 ops/s
Iteration   5: 704551.497 ops/s
Iteration   6: 733096.604 ops/s
Iteration   7: 718374.539 ops/s
Iteration   8: 755924.530 ops/s
Iteration   9: 719067.296 ops/s
Iteration  10: 751400.819 ops/s
Iteration  11: 720517.871 ops/s
Iteration  12: 717202.970 ops/s
Iteration  13: 747567.125 ops/s
Iteration  14: 707163.135 ops/s
Iteration  15: 752226.080 ops/s
Iteration  16: 739383.099 ops/s
Iteration  17: 727588.853 ops/s
Iteration  18: 762094.584 ops/s
Iteration  19: 583175.424 ops/s
Iteration  20: 739722.543 ops/s
Iteration  21: 711700.933 ops/s
Iteration  22: 723759.218 ops/s
Iteration  23: 771822.932 ops/s
Iteration  24: 699454.497 ops/s
Iteration  25: 755001.759 ops/s
Iteration  26: 711240.899 ops/s
Iteration  27: 712603.313 ops/s
Iteration  28: 741953.994 ops/s
Iteration  29: 718625.500 ops/s
Iteration  30: 725706.279 ops/s


Result "io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_usingObservableSupplierReturnsNull":
  725101.564 ±(99.9%) 21778.705 ops/s [Average]
  (min, avg, max) = (583175.424, 725101.564, 771822.932), stdev = 32597.342
  CI (99.9%): [703322.859, 746880.268] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt       Score       Error  Units
ObservableNullTests._Benchmark.benchmark_usingObservableSupplierReturnsNull  thrpt   30  725101.564 ± 21778.705  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.core.ConverterTest._Benchmark.benchmark_singleConverterThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.core.ConverterTest._Benchmark.benchmark_singleConverterThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 532222.343 ops/s
# Warmup Iteration   2: 643016.361 ops/s
# Warmup Iteration   3: 710078.979 ops/s
# Warmup Iteration   4: 759497.700 ops/s
# Warmup Iteration   5: 748803.204 ops/s
# Warmup Iteration   6: 743081.118 ops/s
# Warmup Iteration   7: 760691.626 ops/s
# Warmup Iteration   8: 735028.121 ops/s
# Warmup Iteration   9: 773356.510 ops/s
# Warmup Iteration  10: 745717.966 ops/s
# Warmup Iteration  11: 716048.649 ops/s
# Warmup Iteration  12: 789911.724 ops/s
# Warmup Iteration  13: 696879.247 ops/s
# Warmup Iteration  14: 772119.755 ops/s
# Warmup Iteration  15: 744590.964 ops/s
# Warmup Iteration  16: 755113.707 ops/s
# Warmup Iteration  17: 794050.383 ops/s
# Warmup Iteration  18: 835197.345 ops/s
# Warmup Iteration  19: 774443.068 ops/s
# Warmup Iteration  20: 824343.255 ops/s
# Warmup Iteration  21: 785711.207 ops/s
# Warmup Iteration  22: 797214.554 ops/s
# Warmup Iteration  23: 810282.961 ops/s
# Warmup Iteration  24: 778194.769 ops/s
# Warmup Iteration  25: 791009.494 ops/s
# Warmup Iteration  26: 776853.869 ops/s
# Warmup Iteration  27: 805886.757 ops/s
# Warmup Iteration  28: 803434.674 ops/s
# Warmup Iteration  29: 779191.335 ops/s
# Warmup Iteration  30: 815920.550 ops/s
Iteration   1: 789480.308 ops/s
Iteration   2: 796192.207 ops/s
Iteration   3: 802209.166 ops/s
Iteration   4: 799463.639 ops/s
Iteration   5: 784144.583 ops/s
Iteration   6: 782404.793 ops/s
Iteration   7: 788455.262 ops/s
Iteration   8: 822096.868 ops/s
Iteration   9: 788256.886 ops/s
Iteration  10: 819294.637 ops/s
Iteration  11: 796186.737 ops/s
Iteration  12: 816323.233 ops/s
Iteration  13: 805281.429 ops/s
Iteration  14: 775892.126 ops/s
Iteration  15: 812002.604 ops/s
Iteration  16: 786637.645 ops/s
Iteration  17: 798653.543 ops/s
Iteration  18: 820734.794 ops/s
Iteration  19: 779811.844 ops/s
Iteration  20: 831664.774 ops/s
Iteration  21: 790830.662 ops/s
Iteration  22: 809634.362 ops/s
Iteration  23: 776868.614 ops/s
Iteration  24: 818246.116 ops/s
Iteration  25: 815130.965 ops/s
Iteration  26: 776987.428 ops/s
Iteration  27: 809075.105 ops/s
Iteration  28: 795704.291 ops/s
Iteration  29: 807034.706 ops/s
Iteration  30: 776364.498 ops/s


Result "io.reactivex.rxjava3.core.ConverterTest._Benchmark.benchmark_singleConverterThrows":
  799035.461 ±(99.9%) 10645.172 ops/s [Average]
  (min, avg, max) = (775892.126, 799035.461, 831664.774), stdev = 15933.193
  CI (99.9%): [788390.289, 809680.633] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score       Error  Units
ConverterTest._Benchmark.benchmark_singleConverterThrows  thrpt   30  799035.461 ± 10645.172  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTest._Benchmark.benchmark_takeLastWithNegativeCount$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTest._Benchmark.benchmark_takeLastWithNegativeCount

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 476562.560 ops/s
# Warmup Iteration   2: 612121.089 ops/s
# Warmup Iteration   3: 733054.376 ops/s
# Warmup Iteration   4: 670238.328 ops/s
# Warmup Iteration   5: 738272.346 ops/s
# Warmup Iteration   6: 644258.833 ops/s
# Warmup Iteration   7: 762625.438 ops/s
# Warmup Iteration   8: 751112.875 ops/s
# Warmup Iteration   9: 716451.739 ops/s
# Warmup Iteration  10: 764101.435 ops/s
# Warmup Iteration  11: 696118.819 ops/s
# Warmup Iteration  12: 760756.756 ops/s
# Warmup Iteration  13: 732806.386 ops/s
# Warmup Iteration  14: 720248.196 ops/s
# Warmup Iteration  15: 735486.336 ops/s
# Warmup Iteration  16: 750859.275 ops/s
# Warmup Iteration  17: 765925.583 ops/s
# Warmup Iteration  18: 780729.342 ops/s
# Warmup Iteration  19: 780803.218 ops/s
# Warmup Iteration  20: 791982.214 ops/s
# Warmup Iteration  21: 770421.401 ops/s
# Warmup Iteration  22: 812464.076 ops/s
# Warmup Iteration  23: 760238.755 ops/s
# Warmup Iteration  24: 789723.208 ops/s
# Warmup Iteration  25: 775508.191 ops/s
# Warmup Iteration  26: 763044.392 ops/s
# Warmup Iteration  27: 817060.896 ops/s
# Warmup Iteration  28: 757544.053 ops/s
# Warmup Iteration  29: 784209.637 ops/s
# Warmup Iteration  30: 786189.859 ops/s
Iteration   1: 777171.820 ops/s
Iteration   2: 803097.132 ops/s
Iteration   3: 752877.169 ops/s
Iteration   4: 784288.847 ops/s
Iteration   5: 809121.298 ops/s
Iteration   6: 773507.435 ops/s
Iteration   7: 763136.694 ops/s
Iteration   8: 815234.134 ops/s
Iteration   9: 791255.059 ops/s
Iteration  10: 781174.081 ops/s
Iteration  11: 800386.595 ops/s
Iteration  12: 761110.977 ops/s
Iteration  13: 814241.440 ops/s
Iteration  14: 626761.467 ops/s
Iteration  15: 755170.774 ops/s
Iteration  16: 793949.291 ops/s
Iteration  17: 798111.311 ops/s
Iteration  18: 759460.733 ops/s
Iteration  19: 778772.885 ops/s
Iteration  20: 795801.769 ops/s
Iteration  21: 758853.236 ops/s
Iteration  22: 807529.480 ops/s
Iteration  23: 767152.279 ops/s
Iteration  24: 777176.629 ops/s
Iteration  25: 796085.909 ops/s
Iteration  26: 773606.176 ops/s
Iteration  27: 768613.723 ops/s
Iteration  28: 788959.621 ops/s
Iteration  29: 744114.833 ops/s
Iteration  30: 766990.580 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTest._Benchmark.benchmark_takeLastWithNegativeCount":
  776123.779 ±(99.9%) 22867.309 ops/s [Average]
  (min, avg, max) = (626761.467, 776123.779, 815234.134), stdev = 34226.714
  CI (99.9%): [753256.470, 798991.088] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score       Error  Units
FlowableTakeLastTest._Benchmark.benchmark_takeLastWithNegativeCount  thrpt   30  776123.779 ± 22867.309  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_combineLatestIterableOneIsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_combineLatestIterableOneIsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 335799.340 ops/s
# Warmup Iteration   2: 541572.215 ops/s
# Warmup Iteration   3: 578169.865 ops/s
# Warmup Iteration   4: 621800.710 ops/s
# Warmup Iteration   5: 607461.978 ops/s
# Warmup Iteration   6: 636857.003 ops/s
# Warmup Iteration   7: 605493.922 ops/s
# Warmup Iteration   8: 608086.601 ops/s
# Warmup Iteration   9: 645199.987 ops/s
# Warmup Iteration  10: 607752.997 ops/s
# Warmup Iteration  11: 617663.662 ops/s
# Warmup Iteration  12: 651306.848 ops/s
# Warmup Iteration  13: 601332.616 ops/s
# Warmup Iteration  14: 638368.999 ops/s
# Warmup Iteration  15: 618282.422 ops/s
# Warmup Iteration  16: 598132.845 ops/s
# Warmup Iteration  17: 684312.871 ops/s
# Warmup Iteration  18: 618497.161 ops/s
# Warmup Iteration  19: 695056.698 ops/s
# Warmup Iteration  20: 685993.829 ops/s
# Warmup Iteration  21: 644129.394 ops/s
# Warmup Iteration  22: 672994.280 ops/s
# Warmup Iteration  23: 650966.566 ops/s
# Warmup Iteration  24: 651435.185 ops/s
# Warmup Iteration  25: 671500.713 ops/s
# Warmup Iteration  26: 649764.407 ops/s
# Warmup Iteration  27: 663787.783 ops/s
# Warmup Iteration  28: 631849.374 ops/s
# Warmup Iteration  29: 662301.105 ops/s
# Warmup Iteration  30: 679860.285 ops/s
Iteration   1: 639638.781 ops/s
Iteration   2: 662576.585 ops/s
Iteration   3: 660077.717 ops/s
Iteration   4: 667964.341 ops/s
Iteration   5: 647644.481 ops/s
Iteration   6: 661119.327 ops/s
Iteration   7: 656950.984 ops/s
Iteration   8: 667630.422 ops/s
Iteration   9: 657804.239 ops/s
Iteration  10: 649315.730 ops/s
Iteration  11: 662120.740 ops/s
Iteration  12: 650063.636 ops/s
Iteration  13: 659070.206 ops/s
Iteration  14: 667654.042 ops/s
Iteration  15: 632318.193 ops/s
Iteration  16: 652798.173 ops/s
Iteration  17: 678193.717 ops/s
Iteration  18: 643178.837 ops/s
Iteration  19: 681849.737 ops/s
Iteration  20: 644601.629 ops/s
Iteration  21: 676289.519 ops/s
Iteration  22: 653708.145 ops/s
Iteration  23: 661784.251 ops/s
Iteration  24: 673003.006 ops/s
Iteration  25: 641216.701 ops/s
Iteration  26: 691419.465 ops/s
Iteration  27: 643100.522 ops/s
Iteration  28: 660341.408 ops/s
Iteration  29: 672533.407 ops/s
Iteration  30: 629950.236 ops/s


Result "io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_combineLatestIterableOneIsNull":
  658197.273 ±(99.9%) 9768.807 ops/s [Average]
  (min, avg, max) = (629950.236, 658197.273, 691419.465), stdev = 14621.492
  CI (99.9%): [648428.465, 667966.080] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score      Error  Units
ObservableNullTests._Benchmark.benchmark_combineLatestIterableOneIsNull  thrpt   30  658197.273 ± 9768.807  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_combineLatestDelayErrorIterableOneIsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_combineLatestDelayErrorIterableOneIsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 299064.233 ops/s
# Warmup Iteration   2: 581357.805 ops/s
# Warmup Iteration   3: 656579.087 ops/s
# Warmup Iteration   4: 651264.905 ops/s
# Warmup Iteration   5: 674429.269 ops/s
# Warmup Iteration   6: 571564.741 ops/s
# Warmup Iteration   7: 654857.204 ops/s
# Warmup Iteration   8: 699794.774 ops/s
# Warmup Iteration   9: 675676.163 ops/s
# Warmup Iteration  10: 691784.687 ops/s
# Warmup Iteration  11: 699384.657 ops/s
# Warmup Iteration  12: 673546.514 ops/s
# Warmup Iteration  13: 712114.555 ops/s
# Warmup Iteration  14: 670719.692 ops/s
# Warmup Iteration  15: 705762.530 ops/s
# Warmup Iteration  16: 704662.614 ops/s
# Warmup Iteration  17: 701594.929 ops/s
# Warmup Iteration  18: 704519.817 ops/s
# Warmup Iteration  19: 721190.697 ops/s
# Warmup Iteration  20: 720095.467 ops/s
# Warmup Iteration  21: 717454.510 ops/s
# Warmup Iteration  22: 712472.255 ops/s
# Warmup Iteration  23: 718982.105 ops/s
# Warmup Iteration  24: 737413.863 ops/s
# Warmup Iteration  25: 733021.825 ops/s
# Warmup Iteration  26: 724567.695 ops/s
# Warmup Iteration  27: 735453.285 ops/s
# Warmup Iteration  28: 717995.369 ops/s
# Warmup Iteration  29: 716378.105 ops/s
# Warmup Iteration  30: 749450.613 ops/s
Iteration   1: 700118.726 ops/s
Iteration   2: 728149.957 ops/s
Iteration   3: 729733.838 ops/s
Iteration   4: 708437.521 ops/s
Iteration   5: 755994.992 ops/s
Iteration   6: 739574.391 ops/s
Iteration   7: 690094.634 ops/s
Iteration   8: 752050.649 ops/s
Iteration   9: 536766.751 ops/s
Iteration  10: 735022.935 ops/s
Iteration  11: 702154.148 ops/s
Iteration  12: 727890.389 ops/s
Iteration  13: 722406.749 ops/s
Iteration  14: 711964.407 ops/s
Iteration  15: 693203.269 ops/s
Iteration  16: 728034.464 ops/s
Iteration  17: 690051.408 ops/s
Iteration  18: 696857.198 ops/s
Iteration  19: 727926.689 ops/s
Iteration  20: 688439.268 ops/s
Iteration  21: 747456.717 ops/s
Iteration  22: 690607.200 ops/s
Iteration  23: 716317.171 ops/s
Iteration  24: 742800.032 ops/s
Iteration  25: 753862.255 ops/s
Iteration  26: 705628.707 ops/s
Iteration  27: 748576.172 ops/s
Iteration  28: 711740.706 ops/s
Iteration  29: 719120.300 ops/s
Iteration  30: 716928.856 ops/s


Result "io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_combineLatestDelayErrorIterableOneIsNull":
  713930.350 ±(99.9%) 26350.386 ops/s [Average]
  (min, avg, max) = (536766.751, 713930.350, 755994.992), stdev = 39440.020
  CI (99.9%): [687579.964, 740280.736] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           Mode  Cnt       Score       Error  Units
ObservableNullTests._Benchmark.benchmark_combineLatestDelayErrorIterableOneIsNull  thrpt   30  713930.350 ± 26350.386  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.core.TransformerTest._Benchmark.benchmark_observableGenericsSignatureTest$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.core.TransformerTest._Benchmark.benchmark_observableGenericsSignatureTest

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 19193569.996 ops/s
# Warmup Iteration   2: 36942863.148 ops/s
# Warmup Iteration   3: 40249119.589 ops/s
# Warmup Iteration   4: 42835149.742 ops/s
# Warmup Iteration   5: 41693093.117 ops/s
# Warmup Iteration   6: 42400714.683 ops/s
# Warmup Iteration   7: 40570065.970 ops/s
# Warmup Iteration   8: 40890829.398 ops/s
# Warmup Iteration   9: 43091314.243 ops/s
# Warmup Iteration  10: 40189969.070 ops/s
# Warmup Iteration  11: 41895945.717 ops/s
# Warmup Iteration  12: 40416703.451 ops/s
# Warmup Iteration  13: 42421445.800 ops/s
# Warmup Iteration  14: 42287686.550 ops/s
# Warmup Iteration  15: 42246279.429 ops/s
# Warmup Iteration  16: 42245360.906 ops/s
# Warmup Iteration  17: 40591855.792 ops/s
# Warmup Iteration  18: 42398607.867 ops/s
# Warmup Iteration  19: 42472112.710 ops/s
# Warmup Iteration  20: 41084383.216 ops/s
# Warmup Iteration  21: 41185844.943 ops/s
# Warmup Iteration  22: 42884213.793 ops/s
# Warmup Iteration  23: 39792680.016 ops/s
# Warmup Iteration  24: 41509876.627 ops/s
# Warmup Iteration  25: 42236978.521 ops/s
# Warmup Iteration  26: 40525945.525 ops/s
# Warmup Iteration  27: 42801348.387 ops/s
# Warmup Iteration  28: 40909983.033 ops/s
# Warmup Iteration  29: 41905425.755 ops/s
# Warmup Iteration  30: 40922165.339 ops/s
Iteration   1: 42564952.692 ops/s
Iteration   2: 43097446.219 ops/s
Iteration   3: 42096769.181 ops/s
Iteration   4: 39746442.671 ops/s
Iteration   5: 43069866.786 ops/s
Iteration   6: 40992693.592 ops/s
Iteration   7: 40975013.344 ops/s
Iteration   8: 42383690.278 ops/s
Iteration   9: 40410471.112 ops/s
Iteration  10: 40959151.738 ops/s
Iteration  11: 43740224.504 ops/s
Iteration  12: 40115463.132 ops/s
Iteration  13: 41350995.259 ops/s
Iteration  14: 42788701.938 ops/s
Iteration  15: 42159513.422 ops/s
Iteration  16: 41052201.880 ops/s
Iteration  17: 43291201.253 ops/s
Iteration  18: 40908405.847 ops/s
Iteration  19: 41691197.652 ops/s
Iteration  20: 40469670.609 ops/s
Iteration  21: 42219433.908 ops/s
Iteration  22: 41171565.895 ops/s
Iteration  23: 41799560.711 ops/s
Iteration  24: 42694239.512 ops/s
Iteration  25: 41258386.278 ops/s
Iteration  26: 42466698.771 ops/s
Iteration  27: 40991827.373 ops/s
Iteration  28: 41412338.994 ops/s
Iteration  29: 43142540.073 ops/s
Iteration  30: 41156190.881 ops/s


Result "io.reactivex.rxjava3.core.TransformerTest._Benchmark.benchmark_observableGenericsSignatureTest":
  41739228.517 ±(99.9%) 688367.082 ops/s [Average]
  (min, avg, max) = (39746442.671, 41739228.517, 43740224.504), stdev = 1030315.520
  CI (99.9%): [41050861.435, 42427595.598] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt         Score        Error  Units
TransformerTest._Benchmark.benchmark_observableGenericsSignatureTest  thrpt   30  41739228.517 ± 688367.082  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.core.TransformerTest._Benchmark.benchmark_singleGenericsSignatureTest$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.core.TransformerTest._Benchmark.benchmark_singleGenericsSignatureTest

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 21006315.669 ops/s
# Warmup Iteration   2: 34582865.697 ops/s
# Warmup Iteration   3: 41044954.417 ops/s
# Warmup Iteration   4: 42146729.919 ops/s
# Warmup Iteration   5: 40918458.331 ops/s
# Warmup Iteration   6: 40304525.695 ops/s
# Warmup Iteration   7: 42995158.927 ops/s
# Warmup Iteration   8: 41343155.220 ops/s
# Warmup Iteration   9: 41153893.128 ops/s
# Warmup Iteration  10: 40873391.283 ops/s
# Warmup Iteration  11: 40221253.985 ops/s
# Warmup Iteration  12: 43312858.075 ops/s
# Warmup Iteration  13: 40470074.457 ops/s
# Warmup Iteration  14: 42027556.713 ops/s
# Warmup Iteration  15: 41518937.307 ops/s
# Warmup Iteration  16: 42247684.324 ops/s
# Warmup Iteration  17: 41353809.779 ops/s
# Warmup Iteration  18: 40166858.788 ops/s
# Warmup Iteration  19: 41238169.742 ops/s
# Warmup Iteration  20: 41817880.302 ops/s
# Warmup Iteration  21: 42496322.863 ops/s
# Warmup Iteration  22: 41505863.708 ops/s
# Warmup Iteration  23: 40460250.216 ops/s
# Warmup Iteration  24: 42801899.273 ops/s
# Warmup Iteration  25: 40692163.859 ops/s
# Warmup Iteration  26: 42790123.795 ops/s
# Warmup Iteration  27: 41872545.330 ops/s
# Warmup Iteration  28: 40698139.179 ops/s
# Warmup Iteration  29: 41942301.965 ops/s
# Warmup Iteration  30: 40943706.333 ops/s
Iteration   1: 42474066.630 ops/s
Iteration   2: 41803181.553 ops/s
Iteration   3: 40683379.508 ops/s
Iteration   4: 33987512.371 ops/s
Iteration   5: 39757016.601 ops/s
Iteration   6: 41815441.826 ops/s
Iteration   7: 41734301.374 ops/s
Iteration   8: 40264583.154 ops/s
Iteration   9: 42473978.676 ops/s
Iteration  10: 40153431.121 ops/s
Iteration  11: 41402198.128 ops/s
Iteration  12: 42384780.372 ops/s
Iteration  13: 39793308.827 ops/s
Iteration  14: 42429215.307 ops/s
Iteration  15: 42503640.784 ops/s
Iteration  16: 41042122.832 ops/s
Iteration  17: 41926060.939 ops/s
Iteration  18: 40583802.289 ops/s
Iteration  19: 42035819.199 ops/s
Iteration  20: 41433945.852 ops/s
Iteration  21: 40977625.507 ops/s
Iteration  22: 42852318.093 ops/s
Iteration  23: 40828400.473 ops/s
Iteration  24: 41785560.396 ops/s
Iteration  25: 40965131.191 ops/s
Iteration  26: 42020775.201 ops/s
Iteration  27: 40496786.519 ops/s
Iteration  28: 41924598.816 ops/s
Iteration  29: 41406461.239 ops/s
Iteration  30: 41586293.453 ops/s


Result "io.reactivex.rxjava3.core.TransformerTest._Benchmark.benchmark_singleGenericsSignatureTest":
  41184191.274 ±(99.9%) 1068159.373 ops/s [Average]
  (min, avg, max) = (33987512.371, 41184191.274, 42852318.093), stdev = 1598770.785
  CI (99.9%): [40116031.901, 42252350.648] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt         Score         Error  Units
TransformerTest._Benchmark.benchmark_singleGenericsSignatureTest  thrpt   30  41184191.274 ± 1068159.373  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.core.TransformerTest._Benchmark.benchmark_maybeGenericsSignatureTest$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.core.TransformerTest._Benchmark.benchmark_maybeGenericsSignatureTest

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 19655561.472 ops/s
# Warmup Iteration   2: 35203749.288 ops/s
# Warmup Iteration   3: 40463199.403 ops/s
# Warmup Iteration   4: 41107180.112 ops/s
# Warmup Iteration   5: 42700745.423 ops/s
# Warmup Iteration   6: 40237675.369 ops/s
# Warmup Iteration   7: 41157587.147 ops/s
# Warmup Iteration   8: 42339214.147 ops/s
# Warmup Iteration   9: 39764915.708 ops/s
# Warmup Iteration  10: 42636488.565 ops/s
# Warmup Iteration  11: 41321180.758 ops/s
# Warmup Iteration  12: 39883732.840 ops/s
# Warmup Iteration  13: 42465812.475 ops/s
# Warmup Iteration  14: 40990141.182 ops/s
# Warmup Iteration  15: 42380780.026 ops/s
# Warmup Iteration  16: 40800888.771 ops/s
# Warmup Iteration  17: 40074152.642 ops/s
# Warmup Iteration  18: 41649005.998 ops/s
# Warmup Iteration  19: 40285994.154 ops/s
# Warmup Iteration  20: 42087648.477 ops/s
# Warmup Iteration  21: 43214257.675 ops/s
# Warmup Iteration  22: 41626505.209 ops/s
# Warmup Iteration  23: 39929615.751 ops/s
# Warmup Iteration  24: 41496088.876 ops/s
# Warmup Iteration  25: 40472599.760 ops/s
# Warmup Iteration  26: 41641596.012 ops/s
# Warmup Iteration  27: 41403138.802 ops/s
# Warmup Iteration  28: 40927166.264 ops/s
# Warmup Iteration  29: 41354807.427 ops/s
# Warmup Iteration  30: 42321020.052 ops/s
Iteration   1: 40496173.750 ops/s
Iteration   2: 40767056.255 ops/s
Iteration   3: 42678034.730 ops/s
Iteration   4: 39712525.432 ops/s
Iteration   5: 41451410.131 ops/s
Iteration   6: 41485811.710 ops/s
Iteration   7: 42125390.971 ops/s
Iteration   8: 39350099.469 ops/s
Iteration   9: 42751411.438 ops/s
Iteration  10: 41711363.594 ops/s
Iteration  11: 41327075.253 ops/s
Iteration  12: 40616576.646 ops/s
Iteration  13: 41639894.208 ops/s
Iteration  14: 41076815.993 ops/s
Iteration  15: 41355802.679 ops/s
Iteration  16: 41130205.730 ops/s
Iteration  17: 41016615.592 ops/s
Iteration  18: 42205379.931 ops/s
Iteration  19: 40786877.047 ops/s
Iteration  20: 42382413.352 ops/s
Iteration  21: 40645574.195 ops/s
Iteration  22: 41699579.205 ops/s
Iteration  23: 41220737.619 ops/s
Iteration  24: 41005252.750 ops/s
Iteration  25: 42184663.478 ops/s
Iteration  26: 40681220.799 ops/s
Iteration  27: 41722680.195 ops/s
Iteration  28: 40518145.719 ops/s
Iteration  29: 41193414.509 ops/s
Iteration  30: 42443501.988 ops/s


Result "io.reactivex.rxjava3.core.TransformerTest._Benchmark.benchmark_maybeGenericsSignatureTest":
  41312723.479 ±(99.9%) 542444.936 ops/s [Average]
  (min, avg, max) = (39350099.469, 41312723.479, 42751411.438), stdev = 811906.105
  CI (99.9%): [40770278.543, 41855168.415] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt         Score        Error  Units
TransformerTest._Benchmark.benchmark_maybeGenericsSignatureTest  thrpt   30  41312723.479 ± 542444.936  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDoAfterNextTest._Benchmark.benchmark_justConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDoAfterNextTest._Benchmark.benchmark_justConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 395591.429 ops/s
# Warmup Iteration   2: 1424560.219 ops/s
# Warmup Iteration   3: 3194858.735 ops/s
# Warmup Iteration   4: 3934700.969 ops/s
# Warmup Iteration   5: 4187612.998 ops/s
# Warmup Iteration   6: 4068166.312 ops/s
# Warmup Iteration   7: 4045831.973 ops/s
# Warmup Iteration   8: 4228657.185 ops/s
# Warmup Iteration   9: 3946898.855 ops/s
# Warmup Iteration  10: 3980207.497 ops/s
# Warmup Iteration  11: 4066600.706 ops/s
# Warmup Iteration  12: 4058852.861 ops/s
# Warmup Iteration  13: 4070169.645 ops/s
# Warmup Iteration  14: 4088146.659 ops/s
# Warmup Iteration  15: 3990696.286 ops/s
# Warmup Iteration  16: 4069392.716 ops/s
# Warmup Iteration  17: 3977487.992 ops/s
# Warmup Iteration  18: 4111923.516 ops/s
# Warmup Iteration  19: 4025709.800 ops/s
# Warmup Iteration  20: 4045950.230 ops/s
# Warmup Iteration  21: 4138575.466 ops/s
# Warmup Iteration  22: 4079286.188 ops/s
# Warmup Iteration  23: 4155758.606 ops/s
# Warmup Iteration  24: 3938618.061 ops/s
# Warmup Iteration  25: 4047218.061 ops/s
# Warmup Iteration  26: 4233615.463 ops/s
# Warmup Iteration  27: 4177399.617 ops/s
# Warmup Iteration  28: 3885334.613 ops/s
# Warmup Iteration  29: 3556117.752 ops/s
# Warmup Iteration  30: 4114898.377 ops/s
Iteration   1: 4042795.060 ops/s
Iteration   2: 4104808.826 ops/s
Iteration   3: 4130338.175 ops/s
Iteration   4: 3991875.728 ops/s
Iteration   5: 4233429.436 ops/s
Iteration   6: 3908673.558 ops/s
Iteration   7: 4183219.281 ops/s
Iteration   8: 4044025.476 ops/s
Iteration   9: 4008682.024 ops/s
Iteration  10: 4206613.652 ops/s
Iteration  11: 4090993.820 ops/s
Iteration  12: 3950743.534 ops/s
Iteration  13: 4124767.478 ops/s
Iteration  14: 4129150.238 ops/s
Iteration  15: 3863146.410 ops/s
Iteration  16: 4085268.228 ops/s
Iteration  17: 4160552.682 ops/s
Iteration  18: 3987096.356 ops/s
Iteration  19: 4299827.150 ops/s
Iteration  20: 3892946.120 ops/s
Iteration  21: 4143784.424 ops/s
Iteration  22: 3884133.293 ops/s
Iteration  23: 4226876.434 ops/s
Iteration  24: 3991393.780 ops/s
Iteration  25: 4091923.689 ops/s
Iteration  26: 3965693.063 ops/s
Iteration  27: 4068849.537 ops/s
Iteration  28: 4113988.913 ops/s
Iteration  29: 3891216.465 ops/s
Iteration  30: 4175103.721 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableDoAfterNextTest._Benchmark.benchmark_justConditional":
  4066397.218 ±(99.9%) 77525.454 ops/s [Average]
  (min, avg, max) = (3863146.410, 4066397.218, 4299827.150), stdev = 116036.458
  CI (99.9%): [3988871.765, 4143922.672] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
ObservableDoAfterNextTest._Benchmark.benchmark_justConditional  thrpt   30  4066397.218 ± 77525.454  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatTest._Benchmark.benchmark_repeatUntil$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatTest._Benchmark.benchmark_repeatUntil

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 386567.838 ops/s
# Warmup Iteration   2: 1672397.532 ops/s
# Warmup Iteration   3: 2254281.218 ops/s
# Warmup Iteration   4: 2323186.613 ops/s
# Warmup Iteration   5: 2232331.845 ops/s
# Warmup Iteration   6: 2223176.569 ops/s
# Warmup Iteration   7: 2240294.094 ops/s
# Warmup Iteration   8: 2262150.113 ops/s
# Warmup Iteration   9: 2339908.328 ops/s
# Warmup Iteration  10: 2254438.352 ops/s
# Warmup Iteration  11: 2274727.803 ops/s
# Warmup Iteration  12: 2296637.253 ops/s
# Warmup Iteration  13: 1985626.092 ops/s
# Warmup Iteration  14: 2254549.766 ops/s
# Warmup Iteration  15: 2385572.723 ops/s
# Warmup Iteration  16: 2331239.999 ops/s
# Warmup Iteration  17: 2246928.395 ops/s
# Warmup Iteration  18: 2150597.941 ops/s
# Warmup Iteration  19: 2321042.167 ops/s
# Warmup Iteration  20: 2358416.951 ops/s
# Warmup Iteration  21: 2259174.361 ops/s
# Warmup Iteration  22: 2322871.749 ops/s
# Warmup Iteration  23: 2342648.811 ops/s
# Warmup Iteration  24: 2220619.074 ops/s
# Warmup Iteration  25: 2284896.063 ops/s
# Warmup Iteration  26: 2292056.684 ops/s
# Warmup Iteration  27: 2318367.280 ops/s
# Warmup Iteration  28: 2279112.032 ops/s
# Warmup Iteration  29: 2339042.046 ops/s
# Warmup Iteration  30: 2289899.177 ops/s
Iteration   1: 2334450.194 ops/s
Iteration   2: 2403957.922 ops/s
Iteration   3: 2262174.281 ops/s
Iteration   4: 2281761.776 ops/s
Iteration   5: 2284726.719 ops/s
Iteration   6: 2307565.853 ops/s
Iteration   7: 2272895.812 ops/s
Iteration   8: 2237115.874 ops/s
Iteration   9: 2311982.564 ops/s
Iteration  10: 2220607.911 ops/s
Iteration  11: 2316707.199 ops/s
Iteration  12: 2278794.471 ops/s
Iteration  13: 2292069.863 ops/s
Iteration  14: 2214671.107 ops/s
Iteration  15: 2229232.959 ops/s
Iteration  16: 2368570.020 ops/s
Iteration  17: 2185950.145 ops/s
Iteration  18: 2419156.534 ops/s
Iteration  19: 2394533.741 ops/s
Iteration  20: 2292489.482 ops/s
Iteration  21: 2356771.440 ops/s
Iteration  22: 2293557.427 ops/s
Iteration  23: 2300557.710 ops/s
Iteration  24: 2314601.107 ops/s
Iteration  25: 2322218.784 ops/s
Iteration  26: 2255646.693 ops/s
Iteration  27: 2350088.671 ops/s
Iteration  28: 2310159.257 ops/s
Iteration  29: 2329478.269 ops/s
Iteration  30: 2350376.254 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatTest._Benchmark.benchmark_repeatUntil":
  2303095.668 ±(99.9%) 37391.930 ops/s [Average]
  (min, avg, max) = (2185950.145, 2303095.668, 2419156.534), stdev = 55966.485
  CI (99.9%): [2265703.738, 2340487.598] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
ObservableRepeatTest._Benchmark.benchmark_repeatUntil  thrpt   30  2303095.668 ± 37391.930  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_zipIterable2FunctionReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_zipIterable2FunctionReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 55883.555 ops/s
# Warmup Iteration   2: 216541.925 ops/s
# Warmup Iteration   3: 383693.567 ops/s
# Warmup Iteration   4: 373577.041 ops/s
# Warmup Iteration   5: 394921.733 ops/s
# Warmup Iteration   6: 370764.109 ops/s
# Warmup Iteration   7: 385158.114 ops/s
# Warmup Iteration   8: 384475.905 ops/s
# Warmup Iteration   9: 384342.025 ops/s
# Warmup Iteration  10: 392654.531 ops/s
# Warmup Iteration  11: 362933.881 ops/s
# Warmup Iteration  12: 383561.202 ops/s
# Warmup Iteration  13: 402080.815 ops/s
# Warmup Iteration  14: 375250.060 ops/s
# Warmup Iteration  15: 405445.551 ops/s
# Warmup Iteration  16: 398885.387 ops/s
# Warmup Iteration  17: 404809.275 ops/s
# Warmup Iteration  18: 389837.098 ops/s
# Warmup Iteration  19: 394530.442 ops/s
# Warmup Iteration  20: 394852.883 ops/s
# Warmup Iteration  21: 410380.698 ops/s
# Warmup Iteration  22: 421676.224 ops/s
# Warmup Iteration  23: 318258.701 ops/s
# Warmup Iteration  24: 369566.248 ops/s
# Warmup Iteration  25: 419306.877 ops/s
# Warmup Iteration  26: 384198.441 ops/s
# Warmup Iteration  27: 404672.627 ops/s
# Warmup Iteration  28: 391332.854 ops/s
# Warmup Iteration  29: 394714.630 ops/s
# Warmup Iteration  30: 398139.685 ops/s
Iteration   1: 410409.781 ops/s
Iteration   2: 412908.866 ops/s
Iteration   3: 400630.802 ops/s
Iteration   4: 402463.752 ops/s
Iteration   5: 397445.482 ops/s
Iteration   6: 397953.868 ops/s
Iteration   7: 402807.477 ops/s
Iteration   8: 397579.435 ops/s
Iteration   9: 416850.108 ops/s
Iteration  10: 383930.639 ops/s
Iteration  11: 402804.641 ops/s
Iteration  12: 383387.671 ops/s
Iteration  13: 402288.950 ops/s
Iteration  14: 406887.013 ops/s
Iteration  15: 409638.163 ops/s
Iteration  16: 393981.640 ops/s
Iteration  17: 402937.813 ops/s
Iteration  18: 404677.090 ops/s
Iteration  19: 403593.220 ops/s
Iteration  20: 419760.009 ops/s
Iteration  21: 390716.005 ops/s
Iteration  22: 417365.789 ops/s
Iteration  23: 384526.409 ops/s
Iteration  24: 419166.760 ops/s
Iteration  25: 399708.172 ops/s
Iteration  26: 400685.456 ops/s
Iteration  27: 413449.455 ops/s
Iteration  28: 388135.946 ops/s
Iteration  29: 409319.000 ops/s
Iteration  30: 402712.434 ops/s


Result "io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_zipIterable2FunctionReturnsNull":
  402624.061 ±(99.9%) 6740.715 ops/s [Average]
  (min, avg, max) = (383387.671, 402624.061, 419760.009), stdev = 10089.186
  CI (99.9%): [395883.346, 409364.777] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score      Error  Units
ObservableNullTests._Benchmark.benchmark_zipIterable2FunctionReturnsNull  thrpt   30  402624.061 ± 6740.715  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableAmbTest._Benchmark.benchmark_ambArrayOrder$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableAmbTest._Benchmark.benchmark_ambArrayOrder

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 163458.401 ops/s
# Warmup Iteration   2: 503643.271 ops/s
# Warmup Iteration   3: 627719.649 ops/s
# Warmup Iteration   4: 609817.082 ops/s
# Warmup Iteration   5: 644384.683 ops/s
# Warmup Iteration   6: 639594.048 ops/s
# Warmup Iteration   7: 591794.103 ops/s
# Warmup Iteration   8: 633182.789 ops/s
# Warmup Iteration   9: 616656.259 ops/s
# Warmup Iteration  10: 629968.728 ops/s
# Warmup Iteration  11: 621435.512 ops/s
# Warmup Iteration  12: 618698.253 ops/s
# Warmup Iteration  13: 638246.525 ops/s
# Warmup Iteration  14: 611098.919 ops/s
# Warmup Iteration  15: 612567.448 ops/s
# Warmup Iteration  16: 644341.140 ops/s
# Warmup Iteration  17: 671119.678 ops/s
# Warmup Iteration  18: 642259.728 ops/s
# Warmup Iteration  19: 683002.935 ops/s
# Warmup Iteration  20: 658400.349 ops/s
# Warmup Iteration  21: 625798.180 ops/s
# Warmup Iteration  22: 669309.551 ops/s
# Warmup Iteration  23: 643765.593 ops/s
# Warmup Iteration  24: 644718.000 ops/s
# Warmup Iteration  25: 677609.542 ops/s
# Warmup Iteration  26: 620055.986 ops/s
# Warmup Iteration  27: 663561.280 ops/s
# Warmup Iteration  28: 653370.995 ops/s
# Warmup Iteration  29: 638998.368 ops/s
# Warmup Iteration  30: 694812.367 ops/s
Iteration   1: 645375.178 ops/s
Iteration   2: 655356.505 ops/s
Iteration   3: 650094.805 ops/s
Iteration   4: 655840.421 ops/s
Iteration   5: 649144.157 ops/s
Iteration   6: 654445.373 ops/s
Iteration   7: 639889.108 ops/s
Iteration   8: 666164.030 ops/s
Iteration   9: 683624.765 ops/s
Iteration  10: 605506.956 ops/s
Iteration  11: 642803.880 ops/s
Iteration  12: 647975.990 ops/s
Iteration  13: 682736.792 ops/s
Iteration  14: 642358.881 ops/s
Iteration  15: 655884.599 ops/s
Iteration  16: 642728.282 ops/s
Iteration  17: 675284.470 ops/s
Iteration  18: 657411.354 ops/s
Iteration  19: 651420.068 ops/s
Iteration  20: 653480.332 ops/s
Iteration  21: 661175.363 ops/s
Iteration  22: 660503.249 ops/s
Iteration  23: 648471.634 ops/s
Iteration  24: 664727.591 ops/s
Iteration  25: 637245.911 ops/s
Iteration  26: 663084.615 ops/s
Iteration  27: 666207.000 ops/s
Iteration  28: 657915.463 ops/s
Iteration  29: 665538.105 ops/s
Iteration  30: 646082.731 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableAmbTest._Benchmark.benchmark_ambArrayOrder":
  654282.587 ±(99.9%) 9910.097 ops/s [Average]
  (min, avg, max) = (605506.956, 654282.587, 683624.765), stdev = 14832.967
  CI (99.9%): [644372.490, 664192.684] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score      Error  Units
ObservableAmbTest._Benchmark.benchmark_ambArrayOrder  thrpt   30  654282.587 ± 9910.097  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableAmbTest._Benchmark.benchmark_ambWithOrder$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableAmbTest._Benchmark.benchmark_ambWithOrder

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 138154.012 ops/s
# Warmup Iteration   2: 514423.980 ops/s
# Warmup Iteration   3: 575598.584 ops/s
# Warmup Iteration   4: 557633.877 ops/s
# Warmup Iteration   5: 608709.321 ops/s
# Warmup Iteration   6: 641684.211 ops/s
# Warmup Iteration   7: 614528.275 ops/s
# Warmup Iteration   8: 629958.964 ops/s
# Warmup Iteration   9: 635503.744 ops/s
# Warmup Iteration  10: 642323.720 ops/s
# Warmup Iteration  11: 635922.196 ops/s
# Warmup Iteration  12: 611237.628 ops/s
# Warmup Iteration  13: 661851.949 ops/s
# Warmup Iteration  14: 612405.972 ops/s
# Warmup Iteration  15: 642984.108 ops/s
# Warmup Iteration  16: 625605.814 ops/s
# Warmup Iteration  17: 654266.070 ops/s
# Warmup Iteration  18: 485289.584 ops/s
# Warmup Iteration  19: 658807.573 ops/s
# Warmup Iteration  20: 691887.268 ops/s
# Warmup Iteration  21: 656941.550 ops/s
# Warmup Iteration  22: 666388.541 ops/s
# Warmup Iteration  23: 661187.592 ops/s
# Warmup Iteration  24: 659374.438 ops/s
# Warmup Iteration  25: 687447.520 ops/s
# Warmup Iteration  26: 636954.489 ops/s
# Warmup Iteration  27: 694788.481 ops/s
# Warmup Iteration  28: 667513.540 ops/s
# Warmup Iteration  29: 680295.224 ops/s
# Warmup Iteration  30: 662109.131 ops/s
Iteration   1: 673760.454 ops/s
Iteration   2: 645693.617 ops/s
Iteration   3: 657992.776 ops/s
Iteration   4: 669982.674 ops/s
Iteration   5: 652214.783 ops/s
Iteration   6: 685553.207 ops/s
Iteration   7: 652260.785 ops/s
Iteration   8: 651193.106 ops/s
Iteration   9: 681998.985 ops/s
Iteration  10: 645170.896 ops/s
Iteration  11: 691214.205 ops/s
Iteration  12: 652219.028 ops/s
Iteration  13: 683103.432 ops/s
Iteration  14: 646792.463 ops/s
Iteration  15: 666038.590 ops/s
Iteration  16: 699698.764 ops/s
Iteration  17: 639988.317 ops/s
Iteration  18: 690248.592 ops/s
Iteration  19: 654928.016 ops/s
Iteration  20: 684799.062 ops/s
Iteration  21: 657005.494 ops/s
Iteration  22: 673125.817 ops/s
Iteration  23: 673624.595 ops/s
Iteration  24: 667663.970 ops/s
Iteration  25: 674436.749 ops/s
Iteration  26: 654656.405 ops/s
Iteration  27: 684367.025 ops/s
Iteration  28: 689538.944 ops/s
Iteration  29: 666235.427 ops/s
Iteration  30: 696349.638 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableAmbTest._Benchmark.benchmark_ambWithOrder":
  668728.527 ±(99.9%) 11483.763 ops/s [Average]
  (min, avg, max) = (639988.317, 668728.527, 699698.764), stdev = 17188.358
  CI (99.9%): [657244.764, 680212.290] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score       Error  Units
ObservableAmbTest._Benchmark.benchmark_ambWithOrder  thrpt   30  668728.527 ± 11483.763  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableAmbTest._Benchmark.benchmark_ambIterableOrder$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableAmbTest._Benchmark.benchmark_ambIterableOrder

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 130822.475 ops/s
# Warmup Iteration   2: 513931.506 ops/s
# Warmup Iteration   3: 609446.027 ops/s
# Warmup Iteration   4: 595356.924 ops/s
# Warmup Iteration   5: 593895.568 ops/s
# Warmup Iteration   6: 584792.293 ops/s
# Warmup Iteration   7: 549561.279 ops/s
# Warmup Iteration   8: 646682.918 ops/s
# Warmup Iteration   9: 608417.797 ops/s
# Warmup Iteration  10: 611320.677 ops/s
# Warmup Iteration  11: 591626.716 ops/s
# Warmup Iteration  12: 626201.699 ops/s
# Warmup Iteration  13: 617048.330 ops/s
# Warmup Iteration  14: 610597.472 ops/s
# Warmup Iteration  15: 633567.737 ops/s
# Warmup Iteration  16: 601944.534 ops/s
# Warmup Iteration  17: 626807.010 ops/s
# Warmup Iteration  18: 668062.831 ops/s
# Warmup Iteration  19: 635072.291 ops/s
# Warmup Iteration  20: 626140.860 ops/s
# Warmup Iteration  21: 660533.230 ops/s
# Warmup Iteration  22: 621322.975 ops/s
# Warmup Iteration  23: 647962.703 ops/s
# Warmup Iteration  24: 650046.001 ops/s
# Warmup Iteration  25: 643554.746 ops/s
# Warmup Iteration  26: 624462.300 ops/s
# Warmup Iteration  27: 645309.676 ops/s
# Warmup Iteration  28: 618398.578 ops/s
# Warmup Iteration  29: 683588.396 ops/s
# Warmup Iteration  30: 617738.932 ops/s
Iteration   1: 648407.474 ops/s
Iteration   2: 660519.254 ops/s
Iteration   3: 658556.220 ops/s
Iteration   4: 646420.417 ops/s
Iteration   5: 654053.900 ops/s
Iteration   6: 677835.892 ops/s
Iteration   7: 634853.643 ops/s
Iteration   8: 655246.681 ops/s
Iteration   9: 634789.055 ops/s
Iteration  10: 657296.340 ops/s
Iteration  11: 626211.507 ops/s
Iteration  12: 644489.905 ops/s
Iteration  13: 635658.750 ops/s
Iteration  14: 655858.130 ops/s
Iteration  15: 660004.235 ops/s
Iteration  16: 655919.575 ops/s
Iteration  17: 626552.668 ops/s
Iteration  18: 657034.228 ops/s
Iteration  19: 650272.800 ops/s
Iteration  20: 658092.962 ops/s
Iteration  21: 647452.089 ops/s
Iteration  22: 642335.752 ops/s
Iteration  23: 664961.244 ops/s
Iteration  24: 629217.676 ops/s
Iteration  25: 647156.536 ops/s
Iteration  26: 631996.426 ops/s
Iteration  27: 654365.971 ops/s
Iteration  28: 631151.652 ops/s
Iteration  29: 653320.477 ops/s
Iteration  30: 653765.424 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableAmbTest._Benchmark.benchmark_ambIterableOrder":
  648459.896 ±(99.9%) 8368.478 ops/s [Average]
  (min, avg, max) = (626211.507, 648459.896, 677835.892), stdev = 12525.545
  CI (99.9%): [640091.418, 656828.374] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score      Error  Units
ObservableAmbTest._Benchmark.benchmark_ambIterableOrder  thrpt   30  648459.896 ± 8368.478  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservablePublishTest._Benchmark.benchmark_onCompleteAvailableUntilReset$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservablePublishTest._Benchmark.benchmark_onCompleteAvailableUntilReset

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 284317.330 ops/s
# Warmup Iteration   2: 1044499.610 ops/s
# Warmup Iteration   3: 1551747.140 ops/s
# Warmup Iteration   4: 1671763.490 ops/s
# Warmup Iteration   5: 1742223.037 ops/s
# Warmup Iteration   6: 1728926.236 ops/s
# Warmup Iteration   7: 1819635.545 ops/s
# Warmup Iteration   8: 1753335.319 ops/s
# Warmup Iteration   9: 1819852.506 ops/s
# Warmup Iteration  10: 1634449.576 ops/s
# Warmup Iteration  11: 1782978.134 ops/s
# Warmup Iteration  12: 1707166.233 ops/s
# Warmup Iteration  13: 1405516.288 ops/s
# Warmup Iteration  14: 1681645.587 ops/s
# Warmup Iteration  15: 1752363.502 ops/s
# Warmup Iteration  16: 1724382.535 ops/s
# Warmup Iteration  17: 1755217.161 ops/s
# Warmup Iteration  18: 1680698.959 ops/s
# Warmup Iteration  19: 1705864.949 ops/s
# Warmup Iteration  20: 1720279.417 ops/s
# Warmup Iteration  21: 1700769.092 ops/s
# Warmup Iteration  22: 1768515.293 ops/s
# Warmup Iteration  23: 1776177.210 ops/s
# Warmup Iteration  24: 1682362.369 ops/s
# Warmup Iteration  25: 1711708.060 ops/s
# Warmup Iteration  26: 1843251.108 ops/s
# Warmup Iteration  27: 1790495.211 ops/s
# Warmup Iteration  28: 1683360.988 ops/s
# Warmup Iteration  29: 1793200.814 ops/s
# Warmup Iteration  30: 1692524.029 ops/s
Iteration   1: 1809337.782 ops/s
Iteration   2: 1762113.562 ops/s
Iteration   3: 1691782.947 ops/s
Iteration   4: 1784104.016 ops/s
Iteration   5: 1752170.873 ops/s
Iteration   6: 1686957.112 ops/s
Iteration   7: 1745141.441 ops/s
Iteration   8: 1680560.762 ops/s
Iteration   9: 1818262.146 ops/s
Iteration  10: 1818742.980 ops/s
Iteration  11: 1706088.031 ops/s
Iteration  12: 1757136.829 ops/s
Iteration  13: 1734132.082 ops/s
Iteration  14: 1724267.910 ops/s
Iteration  15: 1745522.250 ops/s
Iteration  16: 1746342.009 ops/s
Iteration  17: 1726479.064 ops/s
Iteration  18: 1796713.467 ops/s
Iteration  19: 1800716.896 ops/s
Iteration  20: 1695789.605 ops/s
Iteration  21: 1726458.933 ops/s
Iteration  22: 1702543.782 ops/s
Iteration  23: 1775683.373 ops/s
Iteration  24: 1665138.699 ops/s
Iteration  25: 1759862.488 ops/s
Iteration  26: 1760617.481 ops/s
Iteration  27: 1679118.562 ops/s
Iteration  28: 1783937.885 ops/s
Iteration  29: 1828567.860 ops/s
Iteration  30: 1694680.196 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservablePublishTest._Benchmark.benchmark_onCompleteAvailableUntilReset":
  1745299.034 ±(99.9%) 31196.061 ops/s [Average]
  (min, avg, max) = (1665138.699, 1745299.034, 1828567.860), stdev = 46692.799
  CI (99.9%): [1714102.973, 1776495.095] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score       Error  Units
ObservablePublishTest._Benchmark.benchmark_onCompleteAvailableUntilReset  thrpt   30  1745299.034 ± 31196.061  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowableTest._Benchmark.benchmark_fusedEmptyCheck$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowableTest._Benchmark.benchmark_fusedEmptyCheck

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2738940.088 ops/s
# Warmup Iteration   2: 6411733.718 ops/s
# Warmup Iteration   3: 9774323.261 ops/s
# Warmup Iteration   4: 9776961.532 ops/s
# Warmup Iteration   5: 9207334.430 ops/s
# Warmup Iteration   6: 9717023.094 ops/s
# Warmup Iteration   7: 10068588.889 ops/s
# Warmup Iteration   8: 9181017.234 ops/s
# Warmup Iteration   9: 9599827.744 ops/s
# Warmup Iteration  10: 9243889.181 ops/s
# Warmup Iteration  11: 9203248.010 ops/s
# Warmup Iteration  12: 9725389.438 ops/s
# Warmup Iteration  13: 9459586.428 ops/s
# Warmup Iteration  14: 9500884.665 ops/s
# Warmup Iteration  15: 9696619.541 ops/s
# Warmup Iteration  16: 9501900.295 ops/s
# Warmup Iteration  17: 9910501.529 ops/s
# Warmup Iteration  18: 9230739.793 ops/s
# Warmup Iteration  19: 9392805.553 ops/s
# Warmup Iteration  20: 9704347.833 ops/s
# Warmup Iteration  21: 9503197.308 ops/s
# Warmup Iteration  22: 9208396.388 ops/s
# Warmup Iteration  23: 9546091.642 ops/s
# Warmup Iteration  24: 9236524.831 ops/s
# Warmup Iteration  25: 9925950.806 ops/s
# Warmup Iteration  26: 9465080.062 ops/s
# Warmup Iteration  27: 9847480.179 ops/s
# Warmup Iteration  28: 9599039.668 ops/s
# Warmup Iteration  29: 9369747.551 ops/s
# Warmup Iteration  30: 9368309.370 ops/s
Iteration   1: 9564873.118 ops/s
Iteration   2: 9698265.867 ops/s
Iteration   3: 9738474.283 ops/s
Iteration   4: 9660220.189 ops/s
Iteration   5: 9604155.369 ops/s
Iteration   6: 9733865.875 ops/s
Iteration   7: 9917586.368 ops/s
Iteration   8: 9966663.812 ops/s
Iteration   9: 9985882.686 ops/s
Iteration  10: 9577436.172 ops/s
Iteration  11: 9349187.060 ops/s
Iteration  12: 9878006.052 ops/s
Iteration  13: 9571349.967 ops/s
Iteration  14: 9747950.838 ops/s
Iteration  15: 9440699.922 ops/s
Iteration  16: 9452025.413 ops/s
Iteration  17: 9747131.864 ops/s
Iteration  18: 9262723.888 ops/s
Iteration  19: 9720230.803 ops/s
Iteration  20: 9585882.672 ops/s
Iteration  21: 9378941.777 ops/s
Iteration  22: 9976459.113 ops/s
Iteration  23: 9401250.798 ops/s
Iteration  24: 9843872.664 ops/s
Iteration  25: 9211701.137 ops/s
Iteration  26: 9927957.797 ops/s
Iteration  27: 9679794.716 ops/s
Iteration  28: 9585223.248 ops/s
Iteration  29: 9953672.775 ops/s
Iteration  30: 9089585.833 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowableTest._Benchmark.benchmark_fusedEmptyCheck":
  9641702.403 ±(99.9%) 161022.331 ops/s [Average]
  (min, avg, max) = (9089585.833, 9641702.403, 9985882.686), stdev = 241010.663
  CI (99.9%): [9480680.071, 9802724.734] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score        Error  Units
MaybeFlatMapIterableFlowableTest._Benchmark.benchmark_fusedEmptyCheck  thrpt   30  9641702.403 ± 161022.331  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowableTest._Benchmark.benchmark_normal$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowableTest._Benchmark.benchmark_normal

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 550040.549 ops/s
# Warmup Iteration   2: 2346110.577 ops/s
# Warmup Iteration   3: 2995703.997 ops/s
# Warmup Iteration   4: 3466603.529 ops/s
# Warmup Iteration   5: 3679823.631 ops/s
# Warmup Iteration   6: 3623102.055 ops/s
# Warmup Iteration   7: 2916000.191 ops/s
# Warmup Iteration   8: 3553126.466 ops/s
# Warmup Iteration   9: 3439363.090 ops/s
# Warmup Iteration  10: 3544074.916 ops/s
# Warmup Iteration  11: 3476422.666 ops/s
# Warmup Iteration  12: 3469907.938 ops/s
# Warmup Iteration  13: 3613519.485 ops/s
# Warmup Iteration  14: 3437046.077 ops/s
# Warmup Iteration  15: 3460550.882 ops/s
# Warmup Iteration  16: 3633702.933 ops/s
# Warmup Iteration  17: 3510043.440 ops/s
# Warmup Iteration  18: 3594746.789 ops/s
# Warmup Iteration  19: 3570067.706 ops/s
# Warmup Iteration  20: 3505977.528 ops/s
# Warmup Iteration  21: 3722271.702 ops/s
# Warmup Iteration  22: 3535741.267 ops/s
# Warmup Iteration  23: 3515585.945 ops/s
# Warmup Iteration  24: 3540549.878 ops/s
# Warmup Iteration  25: 3515213.405 ops/s
# Warmup Iteration  26: 3489598.476 ops/s
# Warmup Iteration  27: 3614559.216 ops/s
# Warmup Iteration  28: 3577454.310 ops/s
# Warmup Iteration  29: 3663193.819 ops/s
# Warmup Iteration  30: 3607755.518 ops/s
Iteration   1: 3521454.118 ops/s
Iteration   2: 3608391.261 ops/s
Iteration   3: 3532313.891 ops/s
Iteration   4: 3513772.651 ops/s
Iteration   5: 3633253.710 ops/s
Iteration   6: 3509721.698 ops/s
Iteration   7: 3538557.119 ops/s
Iteration   8: 3459923.246 ops/s
Iteration   9: 3617563.950 ops/s
Iteration  10: 3693641.410 ops/s
Iteration  11: 3668282.437 ops/s
Iteration  12: 3453497.147 ops/s
Iteration  13: 3689887.658 ops/s
Iteration  14: 3519355.659 ops/s
Iteration  15: 3557831.436 ops/s
Iteration  16: 3647806.915 ops/s
Iteration  17: 3468364.868 ops/s
Iteration  18: 3541470.955 ops/s
Iteration  19: 3629245.722 ops/s
Iteration  20: 3613043.451 ops/s
Iteration  21: 3685090.078 ops/s
Iteration  22: 3472263.479 ops/s
Iteration  23: 3733128.148 ops/s
Iteration  24: 3559521.823 ops/s
Iteration  25: 3459603.944 ops/s
Iteration  26: 3561732.125 ops/s
Iteration  27: 3476672.083 ops/s
Iteration  28: 3733542.129 ops/s
Iteration  29: 3515680.685 ops/s
Iteration  30: 3432991.961 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowableTest._Benchmark.benchmark_normal":
  3568253.525 ±(99.9%) 59297.752 ops/s [Average]
  (min, avg, max) = (3432991.961, 3568253.525, 3733542.129), stdev = 88754.091
  CI (99.9%): [3508955.773, 3627551.277] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
MaybeFlatMapIterableFlowableTest._Benchmark.benchmark_normal  thrpt   30  3568253.525 ± 59297.752  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowableTest._Benchmark.benchmark_emptyIterable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowableTest._Benchmark.benchmark_emptyIterable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1539084.754 ops/s
# Warmup Iteration   2: 4178657.679 ops/s
# Warmup Iteration   3: 4804328.311 ops/s
# Warmup Iteration   4: 5520960.762 ops/s
# Warmup Iteration   5: 5501376.136 ops/s
# Warmup Iteration   6: 5415145.094 ops/s
# Warmup Iteration   7: 5684449.619 ops/s
# Warmup Iteration   8: 5727366.293 ops/s
# Warmup Iteration   9: 5515414.853 ops/s
# Warmup Iteration  10: 5690606.933 ops/s
# Warmup Iteration  11: 5308703.345 ops/s
# Warmup Iteration  12: 5591053.963 ops/s
# Warmup Iteration  13: 5495666.440 ops/s
# Warmup Iteration  14: 5321780.086 ops/s
# Warmup Iteration  15: 5570300.765 ops/s
# Warmup Iteration  16: 5728700.683 ops/s
# Warmup Iteration  17: 5449103.534 ops/s
# Warmup Iteration  18: 5400246.359 ops/s
# Warmup Iteration  19: 5581816.452 ops/s
# Warmup Iteration  20: 5480791.445 ops/s
# Warmup Iteration  21: 5435608.482 ops/s
# Warmup Iteration  22: 5431369.813 ops/s
# Warmup Iteration  23: 5662499.805 ops/s
# Warmup Iteration  24: 5300589.453 ops/s
# Warmup Iteration  25: 5660665.931 ops/s
# Warmup Iteration  26: 5321648.082 ops/s
# Warmup Iteration  27: 5400965.610 ops/s
# Warmup Iteration  28: 5765208.757 ops/s
# Warmup Iteration  29: 5403208.498 ops/s
# Warmup Iteration  30: 5509055.391 ops/s
Iteration   1: 5460445.132 ops/s
Iteration   2: 5617472.949 ops/s
Iteration   3: 5390841.771 ops/s
Iteration   4: 5407815.923 ops/s
Iteration   5: 5606468.974 ops/s
Iteration   6: 5320742.533 ops/s
Iteration   7: 5619799.980 ops/s
Iteration   8: 5619334.234 ops/s
Iteration   9: 5756950.697 ops/s
Iteration  10: 5324965.751 ops/s
Iteration  11: 5677957.665 ops/s
Iteration  12: 5357923.715 ops/s
Iteration  13: 5691243.714 ops/s
Iteration  14: 5527254.006 ops/s
Iteration  15: 5445078.472 ops/s
Iteration  16: 5619148.211 ops/s
Iteration  17: 5428659.367 ops/s
Iteration  18: 5630391.727 ops/s
Iteration  19: 5506217.921 ops/s
Iteration  20: 5667874.722 ops/s
Iteration  21: 5586486.614 ops/s
Iteration  22: 5483807.048 ops/s
Iteration  23: 5632732.647 ops/s
Iteration  24: 5394847.907 ops/s
Iteration  25: 5691145.480 ops/s
Iteration  26: 5444977.697 ops/s
Iteration  27: 5586889.985 ops/s
Iteration  28: 5654686.001 ops/s
Iteration  29: 5373158.763 ops/s
Iteration  30: 5779898.269 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowableTest._Benchmark.benchmark_emptyIterable":
  5543507.262 ±(99.9%) 88278.512 ops/s [Average]
  (min, avg, max) = (5320742.533, 5543507.262, 5779898.269), stdev = 132131.131
  CI (99.9%): [5455228.750, 5631785.775] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
MaybeFlatMapIterableFlowableTest._Benchmark.benchmark_emptyIterable  thrpt   30  5543507.262 ± 88278.512  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowableTest._Benchmark.benchmark_fusedNoSync$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowableTest._Benchmark.benchmark_fusedNoSync

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 676726.629 ops/s
# Warmup Iteration   2: 2312373.034 ops/s
# Warmup Iteration   3: 3448141.388 ops/s
# Warmup Iteration   4: 3837688.535 ops/s
# Warmup Iteration   5: 4093244.915 ops/s
# Warmup Iteration   6: 4001254.270 ops/s
# Warmup Iteration   7: 3921311.736 ops/s
# Warmup Iteration   8: 3831139.611 ops/s
# Warmup Iteration   9: 4069764.285 ops/s
# Warmup Iteration  10: 3811902.132 ops/s
# Warmup Iteration  11: 3911213.914 ops/s
# Warmup Iteration  12: 3976261.034 ops/s
# Warmup Iteration  13: 3992647.097 ops/s
# Warmup Iteration  14: 4037332.772 ops/s
# Warmup Iteration  15: 3684884.943 ops/s
# Warmup Iteration  16: 3926022.346 ops/s
# Warmup Iteration  17: 3947419.164 ops/s
# Warmup Iteration  18: 3871782.405 ops/s
# Warmup Iteration  19: 3909315.301 ops/s
# Warmup Iteration  20: 3888022.967 ops/s
# Warmup Iteration  21: 3953554.951 ops/s
# Warmup Iteration  22: 3888239.624 ops/s
# Warmup Iteration  23: 3922235.159 ops/s
# Warmup Iteration  24: 3870429.012 ops/s
# Warmup Iteration  25: 4009141.557 ops/s
# Warmup Iteration  26: 3886302.234 ops/s
# Warmup Iteration  27: 4041406.236 ops/s
# Warmup Iteration  28: 3896605.166 ops/s
# Warmup Iteration  29: 4078738.777 ops/s
# Warmup Iteration  30: 4108467.261 ops/s
Iteration   1: 3877783.345 ops/s
Iteration   2: 4044475.433 ops/s
Iteration   3: 3833458.947 ops/s
Iteration   4: 4080686.742 ops/s
Iteration   5: 3866418.710 ops/s
Iteration   6: 3755843.527 ops/s
Iteration   7: 4045821.921 ops/s
Iteration   8: 3825332.459 ops/s
Iteration   9: 3934967.440 ops/s
Iteration  10: 4059909.984 ops/s
Iteration  11: 3855406.246 ops/s
Iteration  12: 3825404.721 ops/s
Iteration  13: 4071806.499 ops/s
Iteration  14: 3930922.457 ops/s
Iteration  15: 3840509.468 ops/s
Iteration  16: 3965705.382 ops/s
Iteration  17: 3841824.718 ops/s
Iteration  18: 4052020.096 ops/s
Iteration  19: 3803505.223 ops/s
Iteration  20: 4027911.967 ops/s
Iteration  21: 4039736.735 ops/s
Iteration  22: 3718572.581 ops/s
Iteration  23: 3975786.585 ops/s
Iteration  24: 3881742.201 ops/s
Iteration  25: 3978224.532 ops/s
Iteration  26: 4028332.003 ops/s
Iteration  27: 3865515.429 ops/s
Iteration  28: 4032965.259 ops/s
Iteration  29: 3869868.663 ops/s
Iteration  30: 4006486.305 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowableTest._Benchmark.benchmark_fusedNoSync":
  3931231.519 ±(99.9%) 69631.087 ops/s [Average]
  (min, avg, max) = (3718572.581, 3931231.519, 4080686.742), stdev = 104220.540
  CI (99.9%): [3861600.433, 4000862.606] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
MaybeFlatMapIterableFlowableTest._Benchmark.benchmark_fusedNoSync  thrpt   30  3931231.519 ± 69631.087  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowableTest._Benchmark.benchmark_fastPathCancelAfterHasNext$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowableTest._Benchmark.benchmark_fastPathCancelAfterHasNext

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 225486.527 ops/s
# Warmup Iteration   2: 478602.996 ops/s
# Warmup Iteration   3: 623094.978 ops/s
# Warmup Iteration   4: 657413.407 ops/s
# Warmup Iteration   5: 678633.052 ops/s
# Warmup Iteration   6: 630513.452 ops/s
# Warmup Iteration   7: 644985.361 ops/s
# Warmup Iteration   8: 655089.177 ops/s
# Warmup Iteration   9: 634300.757 ops/s
# Warmup Iteration  10: 648153.531 ops/s
# Warmup Iteration  11: 661021.905 ops/s
# Warmup Iteration  12: 657697.202 ops/s
# Warmup Iteration  13: 629053.413 ops/s
# Warmup Iteration  14: 639846.403 ops/s
# Warmup Iteration  15: 658525.070 ops/s
# Warmup Iteration  16: 631287.243 ops/s
# Warmup Iteration  17: 642227.450 ops/s
# Warmup Iteration  18: 657237.193 ops/s
# Warmup Iteration  19: 629221.428 ops/s
# Warmup Iteration  20: 648591.663 ops/s
# Warmup Iteration  21: 670607.527 ops/s
# Warmup Iteration  22: 663993.440 ops/s
# Warmup Iteration  23: 633161.329 ops/s
# Warmup Iteration  24: 643742.914 ops/s
# Warmup Iteration  25: 645176.339 ops/s
# Warmup Iteration  26: 650299.016 ops/s
# Warmup Iteration  27: 672071.654 ops/s
# Warmup Iteration  28: 628462.735 ops/s
# Warmup Iteration  29: 675904.090 ops/s
# Warmup Iteration  30: 657563.033 ops/s
Iteration   1: 643694.405 ops/s
Iteration   2: 668189.568 ops/s
Iteration   3: 675735.883 ops/s
Iteration   4: 650643.270 ops/s
Iteration   5: 648405.735 ops/s
Iteration   6: 657334.635 ops/s
Iteration   7: 657782.405 ops/s
Iteration   8: 648632.949 ops/s
Iteration   9: 644844.812 ops/s
Iteration  10: 661480.262 ops/s
Iteration  11: 634338.824 ops/s
Iteration  12: 671047.409 ops/s
Iteration  13: 641219.248 ops/s
Iteration  14: 646296.362 ops/s
Iteration  15: 657373.942 ops/s
Iteration  16: 635445.661 ops/s
Iteration  17: 642839.985 ops/s
Iteration  18: 661665.183 ops/s
Iteration  19: 652159.743 ops/s
Iteration  20: 679455.757 ops/s
Iteration  21: 642631.731 ops/s
Iteration  22: 642284.350 ops/s
Iteration  23: 677338.129 ops/s
Iteration  24: 649705.092 ops/s
Iteration  25: 668112.503 ops/s
Iteration  26: 618749.430 ops/s
Iteration  27: 658362.892 ops/s
Iteration  28: 675865.509 ops/s
Iteration  29: 512806.059 ops/s
Iteration  30: 665582.582 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowableTest._Benchmark.benchmark_fastPathCancelAfterHasNext":
  649667.477 ±(99.9%) 19765.786 ops/s [Average]
  (min, avg, max) = (512806.059, 649667.477, 679455.757), stdev = 29584.500
  CI (99.9%): [629901.692, 669433.263] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt       Score       Error  Units
MaybeFlatMapIterableFlowableTest._Benchmark.benchmark_fastPathCancelAfterHasNext  thrpt   30  649667.477 ± 19765.786  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowableTest._Benchmark.benchmark_empty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowableTest._Benchmark.benchmark_empty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 920800.416 ops/s
# Warmup Iteration   2: 4570180.932 ops/s
# Warmup Iteration   3: 6030819.067 ops/s
# Warmup Iteration   4: 5516369.842 ops/s
# Warmup Iteration   5: 6036960.255 ops/s
# Warmup Iteration   6: 5168724.904 ops/s
# Warmup Iteration   7: 5548557.023 ops/s
# Warmup Iteration   8: 5900051.584 ops/s
# Warmup Iteration   9: 5949099.872 ops/s
# Warmup Iteration  10: 5775185.217 ops/s
# Warmup Iteration  11: 5795474.572 ops/s
# Warmup Iteration  12: 5843378.810 ops/s
# Warmup Iteration  13: 5764390.195 ops/s
# Warmup Iteration  14: 5984888.274 ops/s
# Warmup Iteration  15: 5869401.270 ops/s
# Warmup Iteration  16: 5627903.730 ops/s
# Warmup Iteration  17: 6045614.401 ops/s
# Warmup Iteration  18: 5823559.823 ops/s
# Warmup Iteration  19: 6037975.485 ops/s
# Warmup Iteration  20: 5969055.598 ops/s
# Warmup Iteration  21: 5824995.049 ops/s
# Warmup Iteration  22: 5799400.056 ops/s
# Warmup Iteration  23: 5905916.510 ops/s
# Warmup Iteration  24: 5679646.456 ops/s
# Warmup Iteration  25: 6206770.055 ops/s
# Warmup Iteration  26: 6128245.927 ops/s
# Warmup Iteration  27: 5817938.441 ops/s
# Warmup Iteration  28: 6015612.135 ops/s
# Warmup Iteration  29: 5823395.881 ops/s
# Warmup Iteration  30: 5948700.924 ops/s
Iteration   1: 6024573.889 ops/s
Iteration   2: 5789363.947 ops/s
Iteration   3: 6028927.431 ops/s
Iteration   4: 5826997.351 ops/s
Iteration   5: 5930256.766 ops/s
Iteration   6: 5990941.806 ops/s
Iteration   7: 5754732.349 ops/s
Iteration   8: 6006424.093 ops/s
Iteration   9: 5961365.676 ops/s
Iteration  10: 5766546.168 ops/s
Iteration  11: 5976246.953 ops/s
Iteration  12: 5665411.625 ops/s
Iteration  13: 6003416.582 ops/s
Iteration  14: 5733540.610 ops/s
Iteration  15: 6013456.619 ops/s
Iteration  16: 5745274.870 ops/s
Iteration  17: 6020401.036 ops/s
Iteration  18: 5808763.705 ops/s
Iteration  19: 5870502.666 ops/s
Iteration  20: 6084160.452 ops/s
Iteration  21: 5702005.391 ops/s
Iteration  22: 5943672.992 ops/s
Iteration  23: 5832841.506 ops/s
Iteration  24: 5930654.087 ops/s
Iteration  25: 6090037.059 ops/s
Iteration  26: 5842363.284 ops/s
Iteration  27: 6001754.726 ops/s
Iteration  28: 5847677.418 ops/s
Iteration  29: 6043822.385 ops/s
Iteration  30: 5790863.892 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowableTest._Benchmark.benchmark_empty":
  5900899.911 ±(99.9%) 82129.648 ops/s [Average]
  (min, avg, max) = (5665411.625, 5900899.911, 6090037.059), stdev = 122927.800
  CI (99.9%): [5818770.263, 5983029.559] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
MaybeFlatMapIterableFlowableTest._Benchmark.benchmark_empty  thrpt   30  5900899.911 ± 82129.648  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowableTest._Benchmark.benchmark_slowPathCancelAfterHasNext$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowableTest._Benchmark.benchmark_slowPathCancelAfterHasNext

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 133242.110 ops/s
# Warmup Iteration   2: 400816.504 ops/s
# Warmup Iteration   3: 631889.528 ops/s
# Warmup Iteration   4: 617042.168 ops/s
# Warmup Iteration   5: 623810.778 ops/s
# Warmup Iteration   6: 639636.517 ops/s
# Warmup Iteration   7: 611279.302 ops/s
# Warmup Iteration   8: 612963.646 ops/s
# Warmup Iteration   9: 639057.697 ops/s
# Warmup Iteration  10: 604513.591 ops/s
# Warmup Iteration  11: 600184.226 ops/s
# Warmup Iteration  12: 616861.854 ops/s
# Warmup Iteration  13: 621518.568 ops/s
# Warmup Iteration  14: 646938.358 ops/s
# Warmup Iteration  15: 611046.665 ops/s
# Warmup Iteration  16: 644481.741 ops/s
# Warmup Iteration  17: 617988.543 ops/s
# Warmup Iteration  18: 627695.129 ops/s
# Warmup Iteration  19: 639144.994 ops/s
# Warmup Iteration  20: 601983.673 ops/s
# Warmup Iteration  21: 635803.254 ops/s
# Warmup Iteration  22: 621920.500 ops/s
# Warmup Iteration  23: 636434.995 ops/s
# Warmup Iteration  24: 625561.750 ops/s
# Warmup Iteration  25: 612891.380 ops/s
# Warmup Iteration  26: 647604.399 ops/s
# Warmup Iteration  27: 607847.106 ops/s
# Warmup Iteration  28: 619131.564 ops/s
# Warmup Iteration  29: 653904.395 ops/s
# Warmup Iteration  30: 606921.017 ops/s
Iteration   1: 632764.898 ops/s
Iteration   2: 610482.119 ops/s
Iteration   3: 644781.465 ops/s
Iteration   4: 602405.286 ops/s
Iteration   5: 608429.281 ops/s
Iteration   6: 633702.505 ops/s
Iteration   7: 631734.909 ops/s
Iteration   8: 627803.784 ops/s
Iteration   9: 626092.705 ops/s
Iteration  10: 619430.357 ops/s
Iteration  11: 647955.701 ops/s
Iteration  12: 628897.344 ops/s
Iteration  13: 633652.520 ops/s
Iteration  14: 626656.744 ops/s
Iteration  15: 616898.838 ops/s
Iteration  16: 632897.416 ops/s
Iteration  17: 631762.944 ops/s
Iteration  18: 589967.617 ops/s
Iteration  19: 647894.558 ops/s
Iteration  20: 627826.190 ops/s
Iteration  21: 624427.141 ops/s
Iteration  22: 632257.878 ops/s
Iteration  23: 579255.211 ops/s
Iteration  24: 581828.730 ops/s
Iteration  25: 637953.868 ops/s
Iteration  26: 613082.336 ops/s
Iteration  27: 649680.946 ops/s
Iteration  28: 614002.818 ops/s
Iteration  29: 630122.818 ops/s
Iteration  30: 617955.112 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowableTest._Benchmark.benchmark_slowPathCancelAfterHasNext":
  623420.135 ±(99.9%) 11907.587 ops/s [Average]
  (min, avg, max) = (579255.211, 623420.135, 649680.946), stdev = 17822.717
  CI (99.9%): [611512.548, 635327.721] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt       Score       Error  Units
MaybeFlatMapIterableFlowableTest._Benchmark.benchmark_slowPathCancelAfterHasNext  thrpt   30  623420.135 ± 11907.587  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowableTest._Benchmark.benchmark_fused$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowableTest._Benchmark.benchmark_fused

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 310532.407 ops/s
# Warmup Iteration   2: 2302009.269 ops/s
# Warmup Iteration   3: 3753394.866 ops/s
# Warmup Iteration   4: 3765666.381 ops/s
# Warmup Iteration   5: 3400959.482 ops/s
# Warmup Iteration   6: 3496790.926 ops/s
# Warmup Iteration   7: 3753775.675 ops/s
# Warmup Iteration   8: 4003991.038 ops/s
# Warmup Iteration   9: 3908144.642 ops/s
# Warmup Iteration  10: 3756175.832 ops/s
# Warmup Iteration  11: 3832857.011 ops/s
# Warmup Iteration  12: 3819189.945 ops/s
# Warmup Iteration  13: 3812158.721 ops/s
# Warmup Iteration  14: 3880847.390 ops/s
# Warmup Iteration  15: 3721058.509 ops/s
# Warmup Iteration  16: 3963034.705 ops/s
# Warmup Iteration  17: 3858902.230 ops/s
# Warmup Iteration  18: 3944310.028 ops/s
# Warmup Iteration  19: 3822825.551 ops/s
# Warmup Iteration  20: 3914233.490 ops/s
# Warmup Iteration  21: 3726261.242 ops/s
# Warmup Iteration  22: 3963388.657 ops/s
# Warmup Iteration  23: 3965234.955 ops/s
# Warmup Iteration  24: 3692250.642 ops/s
# Warmup Iteration  25: 3849467.911 ops/s
# Warmup Iteration  26: 3911590.224 ops/s
# Warmup Iteration  27: 3773682.799 ops/s
# Warmup Iteration  28: 3846999.887 ops/s
# Warmup Iteration  29: 3961577.724 ops/s
# Warmup Iteration  30: 4004614.798 ops/s
Iteration   1: 3850357.811 ops/s
Iteration   2: 3994790.530 ops/s
Iteration   3: 3816523.259 ops/s
Iteration   4: 4015779.018 ops/s
Iteration   5: 3816416.425 ops/s
Iteration   6: 3824019.877 ops/s
Iteration   7: 3950269.347 ops/s
Iteration   8: 3848629.039 ops/s
Iteration   9: 3941606.616 ops/s
Iteration  10: 3888376.962 ops/s
Iteration  11: 3984294.434 ops/s
Iteration  12: 3880757.188 ops/s
Iteration  13: 3801105.017 ops/s
Iteration  14: 4012040.247 ops/s
Iteration  15: 3897003.753 ops/s
Iteration  16: 3835580.985 ops/s
Iteration  17: 3977667.522 ops/s
Iteration  18: 3740838.585 ops/s
Iteration  19: 3982940.367 ops/s
Iteration  20: 3995355.023 ops/s
Iteration  21: 3761504.209 ops/s
Iteration  22: 3886041.502 ops/s
Iteration  23: 3820255.815 ops/s
Iteration  24: 3906697.459 ops/s
Iteration  25: 3964681.005 ops/s
Iteration  26: 4035242.837 ops/s
Iteration  27: 3819239.769 ops/s
Iteration  28: 3864972.822 ops/s
Iteration  29: 4035079.215 ops/s
Iteration  30: 3744962.857 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowableTest._Benchmark.benchmark_fused":
  3896434.317 ±(99.9%) 59606.062 ops/s [Average]
  (min, avg, max) = (3740838.585, 3896434.317, 4035242.837), stdev = 89215.555
  CI (99.9%): [3836828.254, 3956040.379] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
MaybeFlatMapIterableFlowableTest._Benchmark.benchmark_fused  thrpt   30  3896434.317 ± 59606.062  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowableTest._Benchmark.benchmark_take$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowableTest._Benchmark.benchmark_take

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 511432.221 ops/s
# Warmup Iteration   2: 2358356.404 ops/s
# Warmup Iteration   3: 3112334.012 ops/s
# Warmup Iteration   4: 3540813.204 ops/s
# Warmup Iteration   5: 3552517.850 ops/s
# Warmup Iteration   6: 3484033.049 ops/s
# Warmup Iteration   7: 3343024.691 ops/s
# Warmup Iteration   8: 3535873.170 ops/s
# Warmup Iteration   9: 3423541.272 ops/s
# Warmup Iteration  10: 3550594.362 ops/s
# Warmup Iteration  11: 3461234.950 ops/s
# Warmup Iteration  12: 3488190.996 ops/s
# Warmup Iteration  13: 3332361.071 ops/s
# Warmup Iteration  14: 3528157.724 ops/s
# Warmup Iteration  15: 3530940.690 ops/s
# Warmup Iteration  16: 3345078.256 ops/s
# Warmup Iteration  17: 3668720.623 ops/s
# Warmup Iteration  18: 3439887.120 ops/s
# Warmup Iteration  19: 3437719.487 ops/s
# Warmup Iteration  20: 3602633.521 ops/s
# Warmup Iteration  21: 3351493.069 ops/s
# Warmup Iteration  22: 3469965.976 ops/s
# Warmup Iteration  23: 3584725.044 ops/s
# Warmup Iteration  24: 3415699.494 ops/s
# Warmup Iteration  25: 3560496.398 ops/s
# Warmup Iteration  26: 3456779.880 ops/s
# Warmup Iteration  27: 3506866.371 ops/s
# Warmup Iteration  28: 3586341.012 ops/s
# Warmup Iteration  29: 3452523.544 ops/s
# Warmup Iteration  30: 3676033.916 ops/s
Iteration   1: 3411340.417 ops/s
Iteration   2: 3506593.268 ops/s
Iteration   3: 3594483.219 ops/s
Iteration   4: 3383498.639 ops/s
Iteration   5: 3453049.690 ops/s
Iteration   6: 3523839.833 ops/s
Iteration   7: 3507496.366 ops/s
Iteration   8: 3524311.066 ops/s
Iteration   9: 3354492.957 ops/s
Iteration  10: 3673880.817 ops/s
Iteration  11: 3497661.885 ops/s
Iteration  12: 3438747.947 ops/s
Iteration  13: 3600100.239 ops/s
Iteration  14: 3654724.463 ops/s
Iteration  15: 3419240.195 ops/s
Iteration  16: 3591542.449 ops/s
Iteration  17: 3316527.253 ops/s
Iteration  18: 2887149.468 ops/s
Iteration  19: 3409854.007 ops/s
Iteration  20: 3428211.423 ops/s
Iteration  21: 3601749.709 ops/s
Iteration  22: 3436090.884 ops/s
Iteration  23: 3636139.128 ops/s
Iteration  24: 3354948.696 ops/s
Iteration  25: 3467700.217 ops/s
Iteration  26: 3573183.086 ops/s
Iteration  27: 3389366.559 ops/s
Iteration  28: 3589324.470 ops/s
Iteration  29: 3353738.689 ops/s
Iteration  30: 3621262.769 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowableTest._Benchmark.benchmark_take":
  3473341.660 ±(99.9%) 100468.754 ops/s [Average]
  (min, avg, max) = (2887149.468, 3473341.660, 3673880.817), stdev = 150376.912
  CI (99.9%): [3372872.907, 3573810.414] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score        Error  Units
MaybeFlatMapIterableFlowableTest._Benchmark.benchmark_take  thrpt   30  3473341.660 ± 100468.754  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowableTest._Benchmark.benchmark_backpressure$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowableTest._Benchmark.benchmark_backpressure

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 575399.010 ops/s
# Warmup Iteration   2: 2392795.848 ops/s
# Warmup Iteration   3: 3060996.964 ops/s
# Warmup Iteration   4: 3424506.723 ops/s
# Warmup Iteration   5: 3539632.347 ops/s
# Warmup Iteration   6: 3430477.047 ops/s
# Warmup Iteration   7: 3570837.746 ops/s
# Warmup Iteration   8: 3307520.372 ops/s
# Warmup Iteration   9: 3438371.925 ops/s
# Warmup Iteration  10: 3554069.647 ops/s
# Warmup Iteration  11: 3508970.137 ops/s
# Warmup Iteration  12: 3383950.415 ops/s
# Warmup Iteration  13: 3522162.148 ops/s
# Warmup Iteration  14: 3357261.826 ops/s
# Warmup Iteration  15: 3596135.345 ops/s
# Warmup Iteration  16: 3408209.042 ops/s
# Warmup Iteration  17: 3370818.076 ops/s
# Warmup Iteration  18: 3591523.238 ops/s
# Warmup Iteration  19: 3480309.442 ops/s
# Warmup Iteration  20: 3516878.070 ops/s
# Warmup Iteration  21: 3483487.596 ops/s
# Warmup Iteration  22: 3498043.877 ops/s
# Warmup Iteration  23: 3499864.075 ops/s
# Warmup Iteration  24: 3387517.499 ops/s
# Warmup Iteration  25: 3628385.065 ops/s
# Warmup Iteration  26: 3410982.056 ops/s
# Warmup Iteration  27: 3523901.191 ops/s
# Warmup Iteration  28: 3526940.964 ops/s
# Warmup Iteration  29: 3500283.623 ops/s
# Warmup Iteration  30: 3427880.074 ops/s
Iteration   1: 3476752.081 ops/s
Iteration   2: 3561789.608 ops/s
Iteration   3: 3382310.082 ops/s
Iteration   4: 3582653.325 ops/s
Iteration   5: 3364759.948 ops/s
Iteration   6: 3437189.149 ops/s
Iteration   7: 3487331.687 ops/s
Iteration   8: 3445649.987 ops/s
Iteration   9: 3422643.332 ops/s
Iteration  10: 3568229.678 ops/s
Iteration  11: 3303622.038 ops/s
Iteration  12: 3523054.961 ops/s
Iteration  13: 3530608.126 ops/s
Iteration  14: 3398665.801 ops/s
Iteration  15: 3294625.498 ops/s
Iteration  16: 3519639.638 ops/s
Iteration  17: 3460302.112 ops/s
Iteration  18: 3540643.632 ops/s
Iteration  19: 3364722.244 ops/s
Iteration  20: 3676217.031 ops/s
Iteration  21: 3357172.652 ops/s
Iteration  22: 3493466.800 ops/s
Iteration  23: 3421967.527 ops/s
Iteration  24: 3501800.827 ops/s
Iteration  25: 3568480.268 ops/s
Iteration  26: 3408303.662 ops/s
Iteration  27: 3453379.795 ops/s
Iteration  28: 3391226.327 ops/s
Iteration  29: 3545842.876 ops/s
Iteration  30: 3512090.679 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowableTest._Benchmark.benchmark_backpressure":
  3466504.712 ±(99.9%) 59331.710 ops/s [Average]
  (min, avg, max) = (3294625.498, 3466504.712, 3676217.031), stdev = 88804.916
  CI (99.9%): [3407173.003, 3525836.422] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
MaybeFlatMapIterableFlowableTest._Benchmark.benchmark_backpressure  thrpt   30  3466504.712 ± 59331.710  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowableTest._Benchmark.benchmark_nextCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowableTest._Benchmark.benchmark_nextCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 93664.220 ops/s
# Warmup Iteration   2: 409561.060 ops/s
# Warmup Iteration   3: 477489.751 ops/s
# Warmup Iteration   4: 451563.293 ops/s
# Warmup Iteration   5: 500098.459 ops/s
# Warmup Iteration   6: 457788.512 ops/s
# Warmup Iteration   7: 544440.457 ops/s
# Warmup Iteration   8: 516321.963 ops/s
# Warmup Iteration   9: 504331.159 ops/s
# Warmup Iteration  10: 543939.381 ops/s
# Warmup Iteration  11: 507499.769 ops/s
# Warmup Iteration  12: 522548.994 ops/s
# Warmup Iteration  13: 536751.163 ops/s
# Warmup Iteration  14: 509137.712 ops/s
# Warmup Iteration  15: 532386.935 ops/s
# Warmup Iteration  16: 519488.798 ops/s
# Warmup Iteration  17: 547048.170 ops/s
# Warmup Iteration  18: 555716.615 ops/s
# Warmup Iteration  19: 545758.994 ops/s
# Warmup Iteration  20: 548795.207 ops/s
# Warmup Iteration  21: 536560.760 ops/s
# Warmup Iteration  22: 567465.328 ops/s
# Warmup Iteration  23: 520610.955 ops/s
# Warmup Iteration  24: 552377.283 ops/s
# Warmup Iteration  25: 554611.581 ops/s
# Warmup Iteration  26: 526543.704 ops/s
# Warmup Iteration  27: 545293.353 ops/s
# Warmup Iteration  28: 569686.275 ops/s
# Warmup Iteration  29: 546445.385 ops/s
# Warmup Iteration  30: 552231.348 ops/s
Iteration   1: 536196.195 ops/s
Iteration   2: 540546.629 ops/s
Iteration   3: 560137.613 ops/s
Iteration   4: 568065.304 ops/s
Iteration   5: 537676.363 ops/s
Iteration   6: 550813.572 ops/s
Iteration   7: 549333.040 ops/s
Iteration   8: 550179.219 ops/s
Iteration   9: 533672.220 ops/s
Iteration  10: 549710.461 ops/s
Iteration  11: 570006.381 ops/s
Iteration  12: 529145.186 ops/s
Iteration  13: 434444.636 ops/s
Iteration  14: 533790.393 ops/s
Iteration  15: 541345.042 ops/s
Iteration  16: 543330.540 ops/s
Iteration  17: 529115.566 ops/s
Iteration  18: 544747.991 ops/s
Iteration  19: 532866.772 ops/s
Iteration  20: 552487.086 ops/s
Iteration  21: 549157.208 ops/s
Iteration  22: 521229.147 ops/s
Iteration  23: 551554.643 ops/s
Iteration  24: 530642.323 ops/s
Iteration  25: 536294.512 ops/s
Iteration  26: 543154.796 ops/s
Iteration  27: 521251.006 ops/s
Iteration  28: 538583.483 ops/s
Iteration  29: 550497.521 ops/s
Iteration  30: 540589.023 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowableTest._Benchmark.benchmark_nextCrash":
  539018.796 ±(99.9%) 15361.549 ops/s [Average]
  (min, avg, max) = (434444.636, 539018.796, 570006.381), stdev = 22992.445
  CI (99.9%): [523657.247, 554380.345] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score       Error  Units
MaybeFlatMapIterableFlowableTest._Benchmark.benchmark_nextCrash  thrpt   30  539018.796 ± 15361.549  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowableTest._Benchmark.benchmark_nextThrowsUnbounded$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowableTest._Benchmark.benchmark_nextThrowsUnbounded

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 110979.166 ops/s
# Warmup Iteration   2: 443759.455 ops/s
# Warmup Iteration   3: 476150.581 ops/s
# Warmup Iteration   4: 452708.560 ops/s
# Warmup Iteration   5: 519072.881 ops/s
# Warmup Iteration   6: 426362.546 ops/s
# Warmup Iteration   7: 532888.763 ops/s
# Warmup Iteration   8: 513447.663 ops/s
# Warmup Iteration   9: 520775.788 ops/s
# Warmup Iteration  10: 531316.916 ops/s
# Warmup Iteration  11: 525813.783 ops/s
# Warmup Iteration  12: 528543.910 ops/s
# Warmup Iteration  13: 509054.826 ops/s
# Warmup Iteration  14: 538385.961 ops/s
# Warmup Iteration  15: 526236.607 ops/s
# Warmup Iteration  16: 505106.994 ops/s
# Warmup Iteration  17: 550872.747 ops/s
# Warmup Iteration  18: 538471.446 ops/s
# Warmup Iteration  19: 568275.318 ops/s
# Warmup Iteration  20: 527309.025 ops/s
# Warmup Iteration  21: 554442.544 ops/s
# Warmup Iteration  22: 529633.121 ops/s
# Warmup Iteration  23: 558024.323 ops/s
# Warmup Iteration  24: 557642.489 ops/s
# Warmup Iteration  25: 533027.225 ops/s
# Warmup Iteration  26: 559003.567 ops/s
# Warmup Iteration  27: 533198.280 ops/s
# Warmup Iteration  28: 558099.300 ops/s
# Warmup Iteration  29: 558908.231 ops/s
# Warmup Iteration  30: 528002.225 ops/s
Iteration   1: 541768.842 ops/s
Iteration   2: 536775.719 ops/s
Iteration   3: 543416.842 ops/s
Iteration   4: 539405.079 ops/s
Iteration   5: 542854.731 ops/s
Iteration   6: 561185.744 ops/s
Iteration   7: 528928.816 ops/s
Iteration   8: 552946.200 ops/s
Iteration   9: 532825.616 ops/s
Iteration  10: 523879.072 ops/s
Iteration  11: 547054.254 ops/s
Iteration  12: 536248.492 ops/s
Iteration  13: 535727.871 ops/s
Iteration  14: 527586.041 ops/s
Iteration  15: 549696.288 ops/s
Iteration  16: 528661.137 ops/s
Iteration  17: 557946.800 ops/s
Iteration  18: 514845.264 ops/s
Iteration  19: 533112.787 ops/s
Iteration  20: 538922.481 ops/s
Iteration  21: 537201.784 ops/s
Iteration  22: 547460.195 ops/s
Iteration  23: 564382.151 ops/s
Iteration  24: 525667.570 ops/s
Iteration  25: 556855.170 ops/s
Iteration  26: 544909.538 ops/s
Iteration  27: 542670.422 ops/s
Iteration  28: 539644.414 ops/s
Iteration  29: 538536.555 ops/s
Iteration  30: 549871.580 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowableTest._Benchmark.benchmark_nextThrowsUnbounded":
  540699.582 ±(99.9%) 7658.017 ops/s [Average]
  (min, avg, max) = (514845.264, 540699.582, 564382.151), stdev = 11462.160
  CI (99.9%): [533041.565, 548357.599] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score      Error  Units
MaybeFlatMapIterableFlowableTest._Benchmark.benchmark_nextThrowsUnbounded  thrpt   30  540699.582 ± 7658.017  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowableTest._Benchmark.benchmark_hasNextCrash2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowableTest._Benchmark.benchmark_hasNextCrash2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 86557.491 ops/s
# Warmup Iteration   2: 414659.627 ops/s
# Warmup Iteration   3: 497350.010 ops/s
# Warmup Iteration   4: 492518.622 ops/s
# Warmup Iteration   5: 484641.602 ops/s
# Warmup Iteration   6: 492913.517 ops/s
# Warmup Iteration   7: 488866.858 ops/s
# Warmup Iteration   8: 493701.209 ops/s
# Warmup Iteration   9: 509593.631 ops/s
# Warmup Iteration  10: 503726.181 ops/s
# Warmup Iteration  11: 502141.552 ops/s
# Warmup Iteration  12: 503259.878 ops/s
# Warmup Iteration  13: 489010.026 ops/s
# Warmup Iteration  14: 517164.614 ops/s
# Warmup Iteration  15: 488960.325 ops/s
# Warmup Iteration  16: 489355.746 ops/s
# Warmup Iteration  17: 530270.598 ops/s
# Warmup Iteration  18: 499784.360 ops/s
# Warmup Iteration  19: 533779.845 ops/s
# Warmup Iteration  20: 503864.371 ops/s
# Warmup Iteration  21: 538172.597 ops/s
# Warmup Iteration  22: 510878.604 ops/s
# Warmup Iteration  23: 510531.417 ops/s
# Warmup Iteration  24: 519969.820 ops/s
# Warmup Iteration  25: 512998.646 ops/s
# Warmup Iteration  26: 532187.902 ops/s
# Warmup Iteration  27: 536181.421 ops/s
# Warmup Iteration  28: 515931.055 ops/s
# Warmup Iteration  29: 532556.645 ops/s
# Warmup Iteration  30: 508683.290 ops/s
Iteration   1: 530496.346 ops/s
Iteration   2: 538912.165 ops/s
Iteration   3: 502291.313 ops/s
Iteration   4: 536107.693 ops/s
Iteration   5: 510674.126 ops/s
Iteration   6: 522540.316 ops/s
Iteration   7: 472814.825 ops/s
Iteration   8: 511351.113 ops/s
Iteration   9: 523334.943 ops/s
Iteration  10: 536726.197 ops/s
Iteration  11: 509528.260 ops/s
Iteration  12: 524868.084 ops/s
Iteration  13: 534726.720 ops/s
Iteration  14: 502631.636 ops/s
Iteration  15: 505169.824 ops/s
Iteration  16: 501748.094 ops/s
Iteration  17: 530249.330 ops/s
Iteration  18: 523938.233 ops/s
Iteration  19: 535678.220 ops/s
Iteration  20: 540095.074 ops/s
Iteration  21: 511123.076 ops/s
Iteration  22: 540957.138 ops/s
Iteration  23: 551709.976 ops/s
Iteration  24: 506487.251 ops/s
Iteration  25: 534329.005 ops/s
Iteration  26: 530884.474 ops/s
Iteration  27: 539486.674 ops/s
Iteration  28: 510280.879 ops/s
Iteration  29: 524603.915 ops/s
Iteration  30: 510344.882 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowableTest._Benchmark.benchmark_hasNextCrash2":
  521802.993 ±(99.9%) 11250.066 ops/s [Average]
  (min, avg, max) = (472814.825, 521802.993, 551709.976), stdev = 16838.571
  CI (99.9%): [510552.926, 533053.059] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score       Error  Units
MaybeFlatMapIterableFlowableTest._Benchmark.benchmark_hasNextCrash2  thrpt   30  521802.993 ± 11250.066  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowableTest._Benchmark.benchmark_hasNextThrowsUnbounded$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowableTest._Benchmark.benchmark_hasNextThrowsUnbounded

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 79788.137 ops/s
# Warmup Iteration   2: 385955.516 ops/s
# Warmup Iteration   3: 517578.372 ops/s
# Warmup Iteration   4: 520000.736 ops/s
# Warmup Iteration   5: 499964.677 ops/s
# Warmup Iteration   6: 508124.766 ops/s
# Warmup Iteration   7: 489526.008 ops/s
# Warmup Iteration   8: 508205.919 ops/s
# Warmup Iteration   9: 523275.223 ops/s
# Warmup Iteration  10: 497580.943 ops/s
# Warmup Iteration  11: 502939.073 ops/s
# Warmup Iteration  12: 501890.992 ops/s
# Warmup Iteration  13: 512130.723 ops/s
# Warmup Iteration  14: 482311.798 ops/s
# Warmup Iteration  15: 504817.142 ops/s
# Warmup Iteration  16: 506561.754 ops/s
# Warmup Iteration  17: 516078.726 ops/s
# Warmup Iteration  18: 553164.449 ops/s
# Warmup Iteration  19: 516858.918 ops/s
# Warmup Iteration  20: 532607.558 ops/s
# Warmup Iteration  21: 555987.037 ops/s
# Warmup Iteration  22: 536050.595 ops/s
# Warmup Iteration  23: 517925.641 ops/s
# Warmup Iteration  24: 522134.869 ops/s
# Warmup Iteration  25: 523912.920 ops/s
# Warmup Iteration  26: 539583.815 ops/s
# Warmup Iteration  27: 538299.499 ops/s
# Warmup Iteration  28: 517293.978 ops/s
# Warmup Iteration  29: 557403.187 ops/s
# Warmup Iteration  30: 516983.338 ops/s
Iteration   1: 542709.151 ops/s
Iteration   2: 527828.293 ops/s
Iteration   3: 547910.661 ops/s
Iteration   4: 509837.960 ops/s
Iteration   5: 549335.701 ops/s
Iteration   6: 513006.628 ops/s
Iteration   7: 544045.193 ops/s
Iteration   8: 526003.656 ops/s
Iteration   9: 523121.816 ops/s
Iteration  10: 521195.438 ops/s
Iteration  11: 531558.176 ops/s
Iteration  12: 545748.601 ops/s
Iteration  13: 524849.038 ops/s
Iteration  14: 514757.516 ops/s
Iteration  15: 536200.276 ops/s
Iteration  16: 520509.914 ops/s
Iteration  17: 535626.438 ops/s
Iteration  18: 553994.824 ops/s
Iteration  19: 511285.029 ops/s
Iteration  20: 537522.036 ops/s
Iteration  21: 517835.509 ops/s
Iteration  22: 540300.765 ops/s
Iteration  23: 513404.479 ops/s
Iteration  24: 531836.872 ops/s
Iteration  25: 515539.528 ops/s
Iteration  26: 537477.212 ops/s
Iteration  27: 540239.800 ops/s
Iteration  28: 525225.239 ops/s
Iteration  29: 542159.983 ops/s
Iteration  30: 524455.803 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowableTest._Benchmark.benchmark_hasNextThrowsUnbounded":
  530184.051 ±(99.9%) 8459.614 ops/s [Average]
  (min, avg, max) = (509837.960, 530184.051, 553994.824), stdev = 12661.952
  CI (99.9%): [521724.438, 538643.665] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt       Score      Error  Units
MaybeFlatMapIterableFlowableTest._Benchmark.benchmark_hasNextThrowsUnbounded  thrpt   30  530184.051 ± 8459.614  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowableTest._Benchmark.benchmark_nextThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowableTest._Benchmark.benchmark_nextThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 80939.599 ops/s
# Warmup Iteration   2: 449157.887 ops/s
# Warmup Iteration   3: 557140.601 ops/s
# Warmup Iteration   4: 521631.380 ops/s
# Warmup Iteration   5: 531200.121 ops/s
# Warmup Iteration   6: 530779.475 ops/s
# Warmup Iteration   7: 514828.576 ops/s
# Warmup Iteration   8: 533804.600 ops/s
# Warmup Iteration   9: 546766.887 ops/s
# Warmup Iteration  10: 563648.049 ops/s
# Warmup Iteration  11: 515182.893 ops/s
# Warmup Iteration  12: 555498.193 ops/s
# Warmup Iteration  13: 526832.104 ops/s
# Warmup Iteration  14: 528719.288 ops/s
# Warmup Iteration  15: 548319.123 ops/s
# Warmup Iteration  16: 531470.487 ops/s
# Warmup Iteration  17: 569431.959 ops/s
# Warmup Iteration  18: 546689.794 ops/s
# Warmup Iteration  19: 585443.997 ops/s
# Warmup Iteration  20: 554857.311 ops/s
# Warmup Iteration  21: 547090.575 ops/s
# Warmup Iteration  22: 577139.013 ops/s
# Warmup Iteration  23: 545973.381 ops/s
# Warmup Iteration  24: 584122.932 ops/s
# Warmup Iteration  25: 567343.443 ops/s
# Warmup Iteration  26: 554802.069 ops/s
# Warmup Iteration  27: 557196.733 ops/s
# Warmup Iteration  28: 540615.917 ops/s
# Warmup Iteration  29: 556817.018 ops/s
# Warmup Iteration  30: 551819.738 ops/s
Iteration   1: 591947.152 ops/s
Iteration   2: 464605.675 ops/s
Iteration   3: 560043.655 ops/s
Iteration   4: 544292.816 ops/s
Iteration   5: 566972.749 ops/s
Iteration   6: 580897.495 ops/s
Iteration   7: 540998.710 ops/s
Iteration   8: 576017.809 ops/s
Iteration   9: 559817.004 ops/s
Iteration  10: 576430.161 ops/s
Iteration  11: 554780.404 ops/s
Iteration  12: 551691.916 ops/s
Iteration  13: 549189.260 ops/s
Iteration  14: 546488.727 ops/s
Iteration  15: 576146.135 ops/s
Iteration  16: 553437.009 ops/s
Iteration  17: 562253.070 ops/s
Iteration  18: 596411.664 ops/s
Iteration  19: 549680.738 ops/s
Iteration  20: 572031.533 ops/s
Iteration  21: 559040.212 ops/s
Iteration  22: 566209.075 ops/s
Iteration  23: 600220.663 ops/s
Iteration  24: 545037.664 ops/s
Iteration  25: 565465.557 ops/s
Iteration  26: 550804.889 ops/s
Iteration  27: 584336.582 ops/s
Iteration  28: 551242.608 ops/s
Iteration  29: 570556.852 ops/s
Iteration  30: 566450.593 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowableTest._Benchmark.benchmark_nextThrows":
  561116.613 ±(99.9%) 16081.688 ops/s [Average]
  (min, avg, max) = (464605.675, 561116.613, 600220.663), stdev = 24070.315
  CI (99.9%): [545034.925, 577198.300] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score       Error  Units
MaybeFlatMapIterableFlowableTest._Benchmark.benchmark_nextThrows  thrpt   30  561116.613 ± 16081.688  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowableTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowableTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 48503.329 ops/s
# Warmup Iteration   2: 421213.803 ops/s
# Warmup Iteration   3: 496753.043 ops/s
# Warmup Iteration   4: 505302.442 ops/s
# Warmup Iteration   5: 532858.986 ops/s
# Warmup Iteration   6: 495492.417 ops/s
# Warmup Iteration   7: 489327.720 ops/s
# Warmup Iteration   8: 525872.994 ops/s
# Warmup Iteration   9: 493204.167 ops/s
# Warmup Iteration  10: 508299.843 ops/s
# Warmup Iteration  11: 498822.604 ops/s
# Warmup Iteration  12: 516448.245 ops/s
# Warmup Iteration  13: 495560.827 ops/s
# Warmup Iteration  14: 519614.163 ops/s
# Warmup Iteration  15: 507977.181 ops/s
# Warmup Iteration  16: 500775.282 ops/s
# Warmup Iteration  17: 507249.442 ops/s
# Warmup Iteration  18: 557238.072 ops/s
# Warmup Iteration  19: 535934.722 ops/s
# Warmup Iteration  20: 524487.879 ops/s
# Warmup Iteration  21: 546192.789 ops/s
# Warmup Iteration  22: 535773.380 ops/s
# Warmup Iteration  23: 525065.750 ops/s
# Warmup Iteration  24: 547107.256 ops/s
# Warmup Iteration  25: 547916.197 ops/s
# Warmup Iteration  26: 517569.563 ops/s
# Warmup Iteration  27: 552746.139 ops/s
# Warmup Iteration  28: 548987.230 ops/s
# Warmup Iteration  29: 523500.264 ops/s
# Warmup Iteration  30: 551430.303 ops/s
Iteration   1: 527503.250 ops/s
Iteration   2: 548941.234 ops/s
Iteration   3: 528082.810 ops/s
Iteration   4: 525108.827 ops/s
Iteration   5: 557003.513 ops/s
Iteration   6: 518764.302 ops/s
Iteration   7: 539100.909 ops/s
Iteration   8: 531748.903 ops/s
Iteration   9: 539771.850 ops/s
Iteration  10: 533345.285 ops/s
Iteration  11: 502635.010 ops/s
Iteration  12: 545043.570 ops/s
Iteration  13: 543528.626 ops/s
Iteration  14: 519192.340 ops/s
Iteration  15: 552444.758 ops/s
Iteration  16: 521125.921 ops/s
Iteration  17: 539149.119 ops/s
Iteration  18: 552605.471 ops/s
Iteration  19: 517378.137 ops/s
Iteration  20: 550213.938 ops/s
Iteration  21: 523632.292 ops/s
Iteration  22: 534389.307 ops/s
Iteration  23: 542360.525 ops/s
Iteration  24: 539732.553 ops/s
Iteration  25: 519938.450 ops/s
Iteration  26: 549932.727 ops/s
Iteration  27: 534483.556 ops/s
Iteration  28: 534640.098 ops/s
Iteration  29: 530524.711 ops/s
Iteration  30: 544003.122 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowableTest._Benchmark.benchmark_doubleOnSubscribe":
  534877.504 ±(99.9%) 8587.343 ops/s [Average]
  (min, avg, max) = (502635.010, 534877.504, 557003.513), stdev = 12853.131
  CI (99.9%): [526290.161, 543464.846] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score      Error  Units
MaybeFlatMapIterableFlowableTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  534877.504 ± 8587.343  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowableTest._Benchmark.benchmark_badRequest$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowableTest._Benchmark.benchmark_badRequest

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 69060.718 ops/s
# Warmup Iteration   2: 287277.439 ops/s
# Warmup Iteration   3: 474261.925 ops/s
# Warmup Iteration   4: 452016.223 ops/s
# Warmup Iteration   5: 460734.439 ops/s
# Warmup Iteration   6: 431274.068 ops/s
# Warmup Iteration   7: 442828.013 ops/s
# Warmup Iteration   8: 454028.650 ops/s
# Warmup Iteration   9: 458195.810 ops/s
# Warmup Iteration  10: 485050.304 ops/s
# Warmup Iteration  11: 478662.351 ops/s
# Warmup Iteration  12: 454262.822 ops/s
# Warmup Iteration  13: 481408.078 ops/s
# Warmup Iteration  14: 460415.150 ops/s
# Warmup Iteration  15: 494820.241 ops/s
# Warmup Iteration  16: 467394.103 ops/s
# Warmup Iteration  17: 484616.709 ops/s
# Warmup Iteration  18: 509469.963 ops/s
# Warmup Iteration  19: 488799.260 ops/s
# Warmup Iteration  20: 499632.908 ops/s
# Warmup Iteration  21: 478216.103 ops/s
# Warmup Iteration  22: 515395.550 ops/s
# Warmup Iteration  23: 477425.554 ops/s
# Warmup Iteration  24: 477353.660 ops/s
# Warmup Iteration  25: 513515.021 ops/s
# Warmup Iteration  26: 485678.678 ops/s
# Warmup Iteration  27: 391094.177 ops/s
# Warmup Iteration  28: 486142.485 ops/s
# Warmup Iteration  29: 492066.230 ops/s
# Warmup Iteration  30: 508278.493 ops/s
Iteration   1: 473245.670 ops/s
Iteration   2: 505570.694 ops/s
Iteration   3: 482995.308 ops/s
Iteration   4: 486390.644 ops/s
Iteration   5: 504826.881 ops/s
Iteration   6: 488813.497 ops/s
Iteration   7: 506521.804 ops/s
Iteration   8: 481367.029 ops/s
Iteration   9: 500433.714 ops/s
Iteration  10: 503447.192 ops/s
Iteration  11: 482117.208 ops/s
Iteration  12: 498915.097 ops/s
Iteration  13: 497295.418 ops/s
Iteration  14: 486972.029 ops/s
Iteration  15: 490077.255 ops/s
Iteration  16: 479281.210 ops/s
Iteration  17: 504961.923 ops/s
Iteration  18: 488438.719 ops/s
Iteration  19: 478629.339 ops/s
Iteration  20: 509318.962 ops/s
Iteration  21: 492571.672 ops/s
Iteration  22: 493115.048 ops/s
Iteration  23: 488014.151 ops/s
Iteration  24: 489446.404 ops/s
Iteration  25: 506164.260 ops/s
Iteration  26: 482303.905 ops/s
Iteration  27: 503910.849 ops/s
Iteration  28: 494114.292 ops/s
Iteration  29: 485744.365 ops/s
Iteration  30: 515580.612 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowableTest._Benchmark.benchmark_badRequest":
  493352.838 ±(99.9%) 7210.913 ops/s [Average]
  (min, avg, max) = (473245.670, 493352.838, 515580.612), stdev = 10792.956
  CI (99.9%): [486141.925, 500563.752] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
MaybeFlattenStreamAsFlowableTest._Benchmark.benchmark_badRequest  thrpt   30  493352.838 ± 7210.913  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDematerializeTest._Benchmark.benchmark_selectorCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDematerializeTest._Benchmark.benchmark_selectorCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 299221.515 ops/s
# Warmup Iteration   2: 504562.388 ops/s
# Warmup Iteration   3: 568971.059 ops/s
# Warmup Iteration   4: 538308.516 ops/s
# Warmup Iteration   5: 565944.422 ops/s
# Warmup Iteration   6: 551842.398 ops/s
# Warmup Iteration   7: 578166.165 ops/s
# Warmup Iteration   8: 629269.882 ops/s
# Warmup Iteration   9: 586622.074 ops/s
# Warmup Iteration  10: 607608.114 ops/s
# Warmup Iteration  11: 617010.247 ops/s
# Warmup Iteration  12: 592630.113 ops/s
# Warmup Iteration  13: 606179.143 ops/s
# Warmup Iteration  14: 599160.310 ops/s
# Warmup Iteration  15: 635294.640 ops/s
# Warmup Iteration  16: 583618.131 ops/s
# Warmup Iteration  17: 635900.046 ops/s
# Warmup Iteration  18: 660420.444 ops/s
# Warmup Iteration  19: 609973.850 ops/s
# Warmup Iteration  20: 656115.092 ops/s
# Warmup Iteration  21: 639377.908 ops/s
# Warmup Iteration  22: 665222.851 ops/s
# Warmup Iteration  23: 622005.075 ops/s
# Warmup Iteration  24: 627065.016 ops/s
# Warmup Iteration  25: 651447.277 ops/s
# Warmup Iteration  26: 623006.250 ops/s
# Warmup Iteration  27: 656726.659 ops/s
# Warmup Iteration  28: 624674.019 ops/s
# Warmup Iteration  29: 624323.484 ops/s
# Warmup Iteration  30: 647795.828 ops/s
Iteration   1: 619055.762 ops/s
Iteration   2: 632550.896 ops/s
Iteration   3: 646867.643 ops/s
Iteration   4: 610632.749 ops/s
Iteration   5: 631906.075 ops/s
Iteration   6: 626362.963 ops/s
Iteration   7: 637180.076 ops/s
Iteration   8: 634674.777 ops/s
Iteration   9: 632330.362 ops/s
Iteration  10: 652917.919 ops/s
Iteration  11: 627757.665 ops/s
Iteration  12: 635056.205 ops/s
Iteration  13: 639447.456 ops/s
Iteration  14: 633125.669 ops/s
Iteration  15: 637756.169 ops/s
Iteration  16: 638696.240 ops/s
Iteration  17: 627693.923 ops/s
Iteration  18: 657580.755 ops/s
Iteration  19: 617677.984 ops/s
Iteration  20: 647277.683 ops/s
Iteration  21: 636828.563 ops/s
Iteration  22: 625447.843 ops/s
Iteration  23: 659748.394 ops/s
Iteration  24: 612261.262 ops/s
Iteration  25: 634037.550 ops/s
Iteration  26: 629967.545 ops/s
Iteration  27: 632296.305 ops/s
Iteration  28: 626109.038 ops/s
Iteration  29: 618572.774 ops/s
Iteration  30: 649721.003 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeDematerializeTest._Benchmark.benchmark_selectorCrash":
  633717.975 ±(99.9%) 8132.756 ops/s [Average]
  (min, avg, max) = (610632.749, 633717.975, 659748.394), stdev = 12172.728
  CI (99.9%): [625585.219, 641850.731] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
MaybeDematerializeTest._Benchmark.benchmark_selectorCrash  thrpt   30  633717.975 ± 8132.756  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDematerializeTest._Benchmark.benchmark_selectorNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDematerializeTest._Benchmark.benchmark_selectorNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 225386.781 ops/s
# Warmup Iteration   2: 517346.354 ops/s
# Warmup Iteration   3: 596709.152 ops/s
# Warmup Iteration   4: 546759.430 ops/s
# Warmup Iteration   5: 574577.918 ops/s
# Warmup Iteration   6: 527521.583 ops/s
# Warmup Iteration   7: 596016.908 ops/s
# Warmup Iteration   8: 606447.121 ops/s
# Warmup Iteration   9: 620199.880 ops/s
# Warmup Iteration  10: 595418.607 ops/s
# Warmup Iteration  11: 602320.763 ops/s
# Warmup Iteration  12: 591109.930 ops/s
# Warmup Iteration  13: 612820.379 ops/s
# Warmup Iteration  14: 589906.740 ops/s
# Warmup Iteration  15: 620067.546 ops/s
# Warmup Iteration  16: 599582.208 ops/s
# Warmup Iteration  17: 610700.858 ops/s
# Warmup Iteration  18: 641605.716 ops/s
# Warmup Iteration  19: 632850.438 ops/s
# Warmup Iteration  20: 633385.492 ops/s
# Warmup Iteration  21: 632086.175 ops/s
# Warmup Iteration  22: 527635.925 ops/s
# Warmup Iteration  23: 634907.433 ops/s
# Warmup Iteration  24: 605917.153 ops/s
# Warmup Iteration  25: 658375.279 ops/s
# Warmup Iteration  26: 614357.816 ops/s
# Warmup Iteration  27: 643440.812 ops/s
# Warmup Iteration  28: 632072.657 ops/s
# Warmup Iteration  29: 634109.591 ops/s
# Warmup Iteration  30: 649418.161 ops/s
Iteration   1: 623261.092 ops/s
Iteration   2: 647131.625 ops/s
Iteration   3: 642011.140 ops/s
Iteration   4: 615895.659 ops/s
Iteration   5: 644692.903 ops/s
Iteration   6: 627313.396 ops/s
Iteration   7: 633567.787 ops/s
Iteration   8: 649964.346 ops/s
Iteration   9: 616923.039 ops/s
Iteration  10: 643853.437 ops/s
Iteration  11: 596131.172 ops/s
Iteration  12: 662183.257 ops/s
Iteration  13: 612310.355 ops/s
Iteration  14: 627879.661 ops/s
Iteration  15: 634260.358 ops/s
Iteration  16: 648627.560 ops/s
Iteration  17: 604728.731 ops/s
Iteration  18: 643495.143 ops/s
Iteration  19: 621055.567 ops/s
Iteration  20: 645047.265 ops/s
Iteration  21: 630445.994 ops/s
Iteration  22: 624013.539 ops/s
Iteration  23: 624030.674 ops/s
Iteration  24: 630250.458 ops/s
Iteration  25: 655268.226 ops/s
Iteration  26: 613906.808 ops/s
Iteration  27: 643055.782 ops/s
Iteration  28: 646291.405 ops/s
Iteration  29: 629757.175 ops/s
Iteration  30: 624393.765 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeDematerializeTest._Benchmark.benchmark_selectorNull":
  632058.244 ±(99.9%) 10366.331 ops/s [Average]
  (min, avg, max) = (596131.172, 632058.244, 662183.257), stdev = 15515.838
  CI (99.9%): [621691.913, 642424.575] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score       Error  Units
MaybeDematerializeTest._Benchmark.benchmark_selectorNull  thrpt   30  632058.244 ± 10366.331  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybeTest._Benchmark.benchmark_normalBackpressured$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybeTest._Benchmark.benchmark_normalBackpressured

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 184357.766 ops/s
# Warmup Iteration   2: 753356.834 ops/s
# Warmup Iteration   3: 1221471.429 ops/s
# Warmup Iteration   4: 1240699.140 ops/s
# Warmup Iteration   5: 1382767.862 ops/s
# Warmup Iteration   6: 1409210.373 ops/s
# Warmup Iteration   7: 1342444.989 ops/s
# Warmup Iteration   8: 1374348.845 ops/s
# Warmup Iteration   9: 1354273.777 ops/s
# Warmup Iteration  10: 1388823.158 ops/s
# Warmup Iteration  11: 1346027.583 ops/s
# Warmup Iteration  12: 1322580.386 ops/s
# Warmup Iteration  13: 1411496.739 ops/s
# Warmup Iteration  14: 1413067.336 ops/s
# Warmup Iteration  15: 1411031.856 ops/s
# Warmup Iteration  16: 1311577.035 ops/s
# Warmup Iteration  17: 1340782.810 ops/s
# Warmup Iteration  18: 1425623.845 ops/s
# Warmup Iteration  19: 1315138.462 ops/s
# Warmup Iteration  20: 1410067.078 ops/s
# Warmup Iteration  21: 1373532.291 ops/s
# Warmup Iteration  22: 1374780.273 ops/s
# Warmup Iteration  23: 1336528.119 ops/s
# Warmup Iteration  24: 1375428.708 ops/s
# Warmup Iteration  25: 1353521.467 ops/s
# Warmup Iteration  26: 1335416.517 ops/s
# Warmup Iteration  27: 1364459.934 ops/s
# Warmup Iteration  28: 1335765.125 ops/s
# Warmup Iteration  29: 1402497.491 ops/s
# Warmup Iteration  30: 1307474.575 ops/s
Iteration   1: 1329892.918 ops/s
Iteration   2: 1398507.798 ops/s
Iteration   3: 1343341.727 ops/s
Iteration   4: 1416999.467 ops/s
Iteration   5: 1358732.133 ops/s
Iteration   6: 1329892.150 ops/s
Iteration   7: 1379043.076 ops/s
Iteration   8: 1372905.399 ops/s
Iteration   9: 1400098.895 ops/s
Iteration  10: 1411726.456 ops/s
Iteration  11: 1305873.319 ops/s
Iteration  12: 1405002.807 ops/s
Iteration  13: 1354577.492 ops/s
Iteration  14: 1371423.616 ops/s
Iteration  15: 1370764.335 ops/s
Iteration  16: 1362660.232 ops/s
Iteration  17: 1370083.566 ops/s
Iteration  18: 1359992.085 ops/s
Iteration  19: 1381905.094 ops/s
Iteration  20: 1343548.952 ops/s
Iteration  21: 1360962.714 ops/s
Iteration  22: 1415155.224 ops/s
Iteration  23: 1330670.639 ops/s
Iteration  24: 1400889.981 ops/s
Iteration  25: 1393267.007 ops/s
Iteration  26: 1324463.831 ops/s
Iteration  27: 1400670.094 ops/s
Iteration  28: 1348811.878 ops/s
Iteration  29: 1402332.503 ops/s
Iteration  30: 1362688.913 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybeTest._Benchmark.benchmark_normalBackpressured":
  1370229.477 ±(99.9%) 20047.409 ops/s [Average]
  (min, avg, max) = (1305873.319, 1370229.477, 1416999.467), stdev = 30006.020
  CI (99.9%): [1350182.068, 1390276.885] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
FlowableMergeWithMaybeTest._Benchmark.benchmark_normalBackpressured  thrpt   30  1370229.477 ± 20047.409  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDematerializeTest._Benchmark.benchmark_success$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDematerializeTest._Benchmark.benchmark_success

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1779881.218 ops/s
# Warmup Iteration   2: 4686275.426 ops/s
# Warmup Iteration   3: 7062043.630 ops/s
# Warmup Iteration   4: 6554856.876 ops/s
# Warmup Iteration   5: 7022669.331 ops/s
# Warmup Iteration   6: 6961623.003 ops/s
# Warmup Iteration   7: 6644155.966 ops/s
# Warmup Iteration   8: 6993777.214 ops/s
# Warmup Iteration   9: 6628567.649 ops/s
# Warmup Iteration  10: 6909956.591 ops/s
# Warmup Iteration  11: 6783252.755 ops/s
# Warmup Iteration  12: 6561685.700 ops/s
# Warmup Iteration  13: 7225576.732 ops/s
# Warmup Iteration  14: 6585795.020 ops/s
# Warmup Iteration  15: 6788010.286 ops/s
# Warmup Iteration  16: 6640961.209 ops/s
# Warmup Iteration  17: 5347635.426 ops/s
# Warmup Iteration  18: 7033240.005 ops/s
# Warmup Iteration  19: 6619290.218 ops/s
# Warmup Iteration  20: 7033918.969 ops/s
# Warmup Iteration  21: 6783211.243 ops/s
# Warmup Iteration  22: 6745348.387 ops/s
# Warmup Iteration  23: 6803920.834 ops/s
# Warmup Iteration  24: 6805284.344 ops/s
# Warmup Iteration  25: 7034518.144 ops/s
# Warmup Iteration  26: 6598555.237 ops/s
# Warmup Iteration  27: 6978407.328 ops/s
# Warmup Iteration  28: 6661827.764 ops/s
# Warmup Iteration  29: 7005009.549 ops/s
# Warmup Iteration  30: 6919992.935 ops/s
Iteration   1: 6691457.315 ops/s
Iteration   2: 6979610.976 ops/s
Iteration   3: 6845249.553 ops/s
Iteration   4: 6933065.185 ops/s
Iteration   5: 6753567.834 ops/s
Iteration   6: 6772316.872 ops/s
Iteration   7: 6808696.213 ops/s
Iteration   8: 6820916.820 ops/s
Iteration   9: 6674957.870 ops/s
Iteration  10: 6687666.644 ops/s
Iteration  11: 7085971.300 ops/s
Iteration  12: 6630709.122 ops/s
Iteration  13: 6988425.986 ops/s
Iteration  14: 6545062.594 ops/s
Iteration  15: 6694011.502 ops/s
Iteration  16: 6765904.052 ops/s
Iteration  17: 6806115.290 ops/s
Iteration  18: 6968873.404 ops/s
Iteration  19: 6742651.740 ops/s
Iteration  20: 6998919.015 ops/s
Iteration  21: 6665956.088 ops/s
Iteration  22: 6834620.851 ops/s
Iteration  23: 6964667.458 ops/s
Iteration  24: 6769006.125 ops/s
Iteration  25: 6865442.664 ops/s
Iteration  26: 6660262.668 ops/s
Iteration  27: 6789923.401 ops/s
Iteration  28: 6971891.598 ops/s
Iteration  29: 6679094.372 ops/s
Iteration  30: 6970492.529 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeDematerializeTest._Benchmark.benchmark_success":
  6812183.568 ±(99.9%) 90334.946 ops/s [Average]
  (min, avg, max) = (6545062.594, 6812183.568, 7085971.300), stdev = 135209.104
  CI (99.9%): [6721848.622, 6902518.514] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score       Error  Units
MaybeDematerializeTest._Benchmark.benchmark_success  thrpt   30  6812183.568 ± 90334.946  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDelaySubscriptionTest._Benchmark.benchmark_withPublisherCallAfterTerminalEvent$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDelaySubscriptionTest._Benchmark.benchmark_withPublisherCallAfterTerminalEvent

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 44357.184 ops/s
# Warmup Iteration   2: 193299.665 ops/s
# Warmup Iteration   3: 217669.453 ops/s
# Warmup Iteration   4: 197408.039 ops/s
# Warmup Iteration   5: 238369.873 ops/s
# Warmup Iteration   6: 241032.059 ops/s
# Warmup Iteration   7: 232076.141 ops/s
# Warmup Iteration   8: 243343.680 ops/s
# Warmup Iteration   9: 232994.563 ops/s
# Warmup Iteration  10: 242090.700 ops/s
# Warmup Iteration  11: 243641.716 ops/s
# Warmup Iteration  12: 233449.645 ops/s
# Warmup Iteration  13: 241908.842 ops/s
# Warmup Iteration  14: 239165.651 ops/s
# Warmup Iteration  15: 235593.648 ops/s
# Warmup Iteration  16: 243228.161 ops/s
# Warmup Iteration  17: 246564.643 ops/s
# Warmup Iteration  18: 253369.053 ops/s
# Warmup Iteration  19: 241366.752 ops/s
# Warmup Iteration  20: 249299.143 ops/s
# Warmup Iteration  21: 247758.790 ops/s
# Warmup Iteration  22: 242811.991 ops/s
# Warmup Iteration  23: 250696.026 ops/s
# Warmup Iteration  24: 242187.434 ops/s
# Warmup Iteration  25: 244677.074 ops/s
# Warmup Iteration  26: 254826.923 ops/s
# Warmup Iteration  27: 241093.175 ops/s
# Warmup Iteration  28: 251877.705 ops/s
# Warmup Iteration  29: 241475.893 ops/s
# Warmup Iteration  30: 239967.165 ops/s
Iteration   1: 256232.480 ops/s
Iteration   2: 246919.268 ops/s
Iteration   3: 243959.733 ops/s
Iteration   4: 242147.371 ops/s
Iteration   5: 241254.333 ops/s
Iteration   6: 249007.235 ops/s
Iteration   7: 253842.942 ops/s
Iteration   8: 245440.067 ops/s
Iteration   9: 251458.550 ops/s
Iteration  10: 235056.301 ops/s
Iteration  11: 254593.337 ops/s
Iteration  12: 249495.929 ops/s
Iteration  13: 246799.593 ops/s
Iteration  14: 242267.658 ops/s
Iteration  15: 247134.868 ops/s
Iteration  16: 248812.408 ops/s
Iteration  17: 239260.048 ops/s
Iteration  18: 242809.652 ops/s
Iteration  19: 240334.333 ops/s
Iteration  20: 253006.285 ops/s
Iteration  21: 256227.073 ops/s
Iteration  22: 238813.761 ops/s
Iteration  23: 257762.681 ops/s
Iteration  24: 259830.167 ops/s
Iteration  25: 240402.589 ops/s
Iteration  26: 254405.403 ops/s
Iteration  27: 238874.501 ops/s
Iteration  28: 252066.446 ops/s
Iteration  29: 250669.898 ops/s
Iteration  30: 238911.441 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelaySubscriptionTest._Benchmark.benchmark_withPublisherCallAfterTerminalEvent":
  247259.878 ±(99.9%) 4497.256 ops/s [Average]
  (min, avg, max) = (235056.301, 247259.878, 259830.167), stdev = 6731.281
  CI (99.9%): [242762.623, 251757.134] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             Mode  Cnt       Score      Error  Units
MaybeDelaySubscriptionTest._Benchmark.benchmark_withPublisherCallAfterTerminalEvent  thrpt   30  247259.878 ± 4497.256  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableOnErrorXTest._Benchmark.benchmark_onErrorReturnConst$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableOnErrorXTest._Benchmark.benchmark_onErrorReturnConst

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 295347.850 ops/s
# Warmup Iteration   2: 595279.588 ops/s
# Warmup Iteration   3: 691558.038 ops/s
# Warmup Iteration   4: 711047.196 ops/s
# Warmup Iteration   5: 721744.688 ops/s
# Warmup Iteration   6: 688431.248 ops/s
# Warmup Iteration   7: 714946.799 ops/s
# Warmup Iteration   8: 723792.720 ops/s
# Warmup Iteration   9: 657225.159 ops/s
# Warmup Iteration  10: 662558.712 ops/s
# Warmup Iteration  11: 583826.019 ops/s
# Warmup Iteration  12: 709692.954 ops/s
# Warmup Iteration  13: 722847.186 ops/s
# Warmup Iteration  14: 693216.096 ops/s
# Warmup Iteration  15: 731183.160 ops/s
# Warmup Iteration  16: 742832.910 ops/s
# Warmup Iteration  17: 733417.931 ops/s
# Warmup Iteration  18: 753400.426 ops/s
# Warmup Iteration  19: 753902.317 ops/s
# Warmup Iteration  20: 740251.696 ops/s
# Warmup Iteration  21: 775482.723 ops/s
# Warmup Iteration  22: 752795.612 ops/s
# Warmup Iteration  23: 720082.775 ops/s
# Warmup Iteration  24: 782597.210 ops/s
# Warmup Iteration  25: 738761.651 ops/s
# Warmup Iteration  26: 751820.993 ops/s
# Warmup Iteration  27: 748333.419 ops/s
# Warmup Iteration  28: 742170.700 ops/s
# Warmup Iteration  29: 750736.419 ops/s
# Warmup Iteration  30: 748307.738 ops/s
Iteration   1: 755950.468 ops/s
Iteration   2: 719089.337 ops/s
Iteration   3: 772393.844 ops/s
Iteration   4: 740406.317 ops/s
Iteration   5: 716728.706 ops/s
Iteration   6: 753431.457 ops/s
Iteration   7: 704580.985 ops/s
Iteration   8: 781907.601 ops/s
Iteration   9: 735863.763 ops/s
Iteration  10: 749003.633 ops/s
Iteration  11: 753610.149 ops/s
Iteration  12: 725760.194 ops/s
Iteration  13: 778318.533 ops/s
Iteration  14: 746175.202 ops/s
Iteration  15: 735804.022 ops/s
Iteration  16: 770278.115 ops/s
Iteration  17: 736433.828 ops/s
Iteration  18: 753849.181 ops/s
Iteration  19: 751469.803 ops/s
Iteration  20: 739106.687 ops/s
Iteration  21: 757370.782 ops/s
Iteration  22: 726976.267 ops/s
Iteration  23: 768814.465 ops/s
Iteration  24: 711005.436 ops/s
Iteration  25: 747585.666 ops/s
Iteration  26: 713415.313 ops/s
Iteration  27: 758622.379 ops/s
Iteration  28: 768838.003 ops/s
Iteration  29: 767784.509 ops/s
Iteration  30: 729340.239 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableOnErrorXTest._Benchmark.benchmark_onErrorReturnConst":
  745663.830 ±(99.9%) 14006.791 ops/s [Average]
  (min, avg, max) = (704580.985, 745663.830, 781907.601), stdev = 20964.707
  CI (99.9%): [731657.038, 759670.621] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score       Error  Units
CompletableOnErrorXTest._Benchmark.benchmark_onErrorReturnConst  thrpt   30  745663.830 ± 14006.791  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_valueConcatWithValue$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_valueConcatWithValue

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 546394.045 ops/s
# Warmup Iteration   2: 2194584.016 ops/s
# Warmup Iteration   3: 2863568.372 ops/s
# Warmup Iteration   4: 3489152.186 ops/s
# Warmup Iteration   5: 3352415.470 ops/s
# Warmup Iteration   6: 3302360.281 ops/s
# Warmup Iteration   7: 3466643.100 ops/s
# Warmup Iteration   8: 3432433.839 ops/s
# Warmup Iteration   9: 3305995.110 ops/s
# Warmup Iteration  10: 3483204.458 ops/s
# Warmup Iteration  11: 3376652.937 ops/s
# Warmup Iteration  12: 3375204.597 ops/s
# Warmup Iteration  13: 3344351.748 ops/s
# Warmup Iteration  14: 3306742.986 ops/s
# Warmup Iteration  15: 3436124.865 ops/s
# Warmup Iteration  16: 3378595.533 ops/s
# Warmup Iteration  17: 3377382.330 ops/s
# Warmup Iteration  18: 3519619.785 ops/s
# Warmup Iteration  19: 3272179.068 ops/s
# Warmup Iteration  20: 3536976.325 ops/s
# Warmup Iteration  21: 3333112.279 ops/s
# Warmup Iteration  22: 3495660.193 ops/s
# Warmup Iteration  23: 3357746.930 ops/s
# Warmup Iteration  24: 3404346.842 ops/s
# Warmup Iteration  25: 3458371.857 ops/s
# Warmup Iteration  26: 3290926.117 ops/s
# Warmup Iteration  27: 3305118.354 ops/s
# Warmup Iteration  28: 3315101.151 ops/s
# Warmup Iteration  29: 3464397.621 ops/s
# Warmup Iteration  30: 3492092.114 ops/s
Iteration   1: 3320700.408 ops/s
Iteration   2: 3479219.746 ops/s
Iteration   3: 3251862.461 ops/s
Iteration   4: 3374550.414 ops/s
Iteration   5: 3371815.109 ops/s
Iteration   6: 3363187.362 ops/s
Iteration   7: 3446851.117 ops/s
Iteration   8: 3389079.464 ops/s
Iteration   9: 3439903.589 ops/s
Iteration  10: 3407578.640 ops/s
Iteration  11: 3334933.770 ops/s
Iteration  12: 3465644.834 ops/s
Iteration  13: 3347201.031 ops/s
Iteration  14: 3510730.969 ops/s
Iteration  15: 3366914.406 ops/s
Iteration  16: 3253058.850 ops/s
Iteration  17: 3466997.095 ops/s
Iteration  18: 3379188.234 ops/s
Iteration  19: 3365207.002 ops/s
Iteration  20: 3391103.752 ops/s
Iteration  21: 3352839.252 ops/s
Iteration  22: 3455950.014 ops/s
Iteration  23: 3438406.355 ops/s
Iteration  24: 3329886.550 ops/s
Iteration  25: 3445407.081 ops/s
Iteration  26: 3310771.166 ops/s
Iteration  27: 3395600.181 ops/s
Iteration  28: 3412981.401 ops/s
Iteration  29: 3352194.749 ops/s
Iteration  30: 3431494.108 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_valueConcatWithValue":
  3388375.304 ±(99.9%) 42061.677 ops/s [Average]
  (min, avg, max) = (3251862.461, 3388375.304, 3510730.969), stdev = 62955.943
  CI (99.9%): [3346313.626, 3430436.981] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score       Error  Units
MaybeTest._Benchmark.benchmark_valueConcatWithValue  thrpt   30  3388375.304 ± 42061.677  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 153623.670 ops/s
# Warmup Iteration   2: 404549.877 ops/s
# Warmup Iteration   3: 1110020.624 ops/s
# Warmup Iteration   4: 1358853.817 ops/s
# Warmup Iteration   5: 1333269.447 ops/s
# Warmup Iteration   6: 1003121.099 ops/s
# Warmup Iteration   7: 1223381.533 ops/s
# Warmup Iteration   8: 1380986.855 ops/s
# Warmup Iteration   9: 1410243.151 ops/s
# Warmup Iteration  10: 1319758.982 ops/s
# Warmup Iteration  11: 1384090.521 ops/s
# Warmup Iteration  12: 1379772.993 ops/s
# Warmup Iteration  13: 1388799.727 ops/s
# Warmup Iteration  14: 1425541.407 ops/s
# Warmup Iteration  15: 1360909.144 ops/s
# Warmup Iteration  16: 1357803.647 ops/s
# Warmup Iteration  17: 1321249.544 ops/s
# Warmup Iteration  18: 1399479.626 ops/s
# Warmup Iteration  19: 1384823.501 ops/s
# Warmup Iteration  20: 1424368.813 ops/s
# Warmup Iteration  21: 1371343.463 ops/s
# Warmup Iteration  22: 1389314.664 ops/s
# Warmup Iteration  23: 1379627.936 ops/s
# Warmup Iteration  24: 1350856.726 ops/s
# Warmup Iteration  25: 1354535.050 ops/s
# Warmup Iteration  26: 1391514.896 ops/s
# Warmup Iteration  27: 1340150.723 ops/s
# Warmup Iteration  28: 1422096.045 ops/s
# Warmup Iteration  29: 1327009.386 ops/s
# Warmup Iteration  30: 1360474.619 ops/s
Iteration   1: 1340192.876 ops/s
Iteration   2: 1354368.135 ops/s
Iteration   3: 1356011.171 ops/s
Iteration   4: 1357737.495 ops/s
Iteration   5: 1388843.981 ops/s
Iteration   6: 1315536.152 ops/s
Iteration   7: 1418591.213 ops/s
Iteration   8: 1361422.117 ops/s
Iteration   9: 1391902.335 ops/s
Iteration  10: 1384916.366 ops/s
Iteration  11: 1413998.592 ops/s
Iteration  12: 1327819.422 ops/s
Iteration  13: 1431559.862 ops/s
Iteration  14: 1366903.700 ops/s
Iteration  15: 1322427.441 ops/s
Iteration  16: 1410340.475 ops/s
Iteration  17: 1341177.085 ops/s
Iteration  18: 1407752.493 ops/s
Iteration  19: 1314157.753 ops/s
Iteration  20: 1350740.963 ops/s
Iteration  21: 1381590.713 ops/s
Iteration  22: 1325332.940 ops/s
Iteration  23: 1368854.181 ops/s
Iteration  24: 1328179.285 ops/s
Iteration  25: 1343690.074 ops/s
Iteration  26: 1412730.331 ops/s
Iteration  27: 1359735.912 ops/s
Iteration  28: 1384855.225 ops/s
Iteration  29: 1376115.748 ops/s
Iteration  30: 1375592.247 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtTest._Benchmark.benchmark_dispose":
  1367102.543 ±(99.9%) 22064.110 ops/s [Average]
  (min, avg, max) = (1314157.753, 1367102.543, 1431559.862), stdev = 33024.524
  CI (99.9%): [1345038.433, 1389166.653] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score       Error  Units
FlowableElementAtTest._Benchmark.benchmark_dispose  thrpt   30  1367102.543 ± 22064.110  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_concat2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_concat2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 537435.639 ops/s
# Warmup Iteration   2: 2151506.983 ops/s
# Warmup Iteration   3: 3402462.340 ops/s
# Warmup Iteration   4: 3368888.012 ops/s
# Warmup Iteration   5: 3394258.602 ops/s
# Warmup Iteration   6: 3255038.640 ops/s
# Warmup Iteration   7: 2912482.370 ops/s
# Warmup Iteration   8: 3372992.701 ops/s
# Warmup Iteration   9: 3316805.474 ops/s
# Warmup Iteration  10: 3414468.813 ops/s
# Warmup Iteration  11: 3296350.141 ops/s
# Warmup Iteration  12: 3380707.687 ops/s
# Warmup Iteration  13: 3500763.439 ops/s
# Warmup Iteration  14: 3239901.242 ops/s
# Warmup Iteration  15: 3528722.721 ops/s
# Warmup Iteration  16: 3270984.909 ops/s
# Warmup Iteration  17: 3475102.989 ops/s
# Warmup Iteration  18: 3448089.950 ops/s
# Warmup Iteration  19: 3283571.114 ops/s
# Warmup Iteration  20: 3449688.836 ops/s
# Warmup Iteration  21: 3339838.460 ops/s
# Warmup Iteration  22: 3352578.298 ops/s
# Warmup Iteration  23: 3499599.853 ops/s
# Warmup Iteration  24: 3296187.208 ops/s
# Warmup Iteration  25: 3299496.167 ops/s
# Warmup Iteration  26: 3445470.879 ops/s
# Warmup Iteration  27: 3327297.692 ops/s
# Warmup Iteration  28: 3384809.968 ops/s
# Warmup Iteration  29: 3475970.524 ops/s
# Warmup Iteration  30: 3380805.652 ops/s
Iteration   1: 3418026.221 ops/s
Iteration   2: 3476623.464 ops/s
Iteration   3: 3298348.037 ops/s
Iteration   4: 3449669.060 ops/s
Iteration   5: 3308004.945 ops/s
Iteration   6: 3350404.455 ops/s
Iteration   7: 3418065.455 ops/s
Iteration   8: 3270123.397 ops/s
Iteration   9: 3417987.921 ops/s
Iteration  10: 3447387.347 ops/s
Iteration  11: 3392045.453 ops/s
Iteration  12: 3358147.362 ops/s
Iteration  13: 3417184.041 ops/s
Iteration  14: 3401529.547 ops/s
Iteration  15: 3311460.755 ops/s
Iteration  16: 3380580.809 ops/s
Iteration  17: 3420200.168 ops/s
Iteration  18: 3224556.683 ops/s
Iteration  19: 3462012.934 ops/s
Iteration  20: 3338751.923 ops/s
Iteration  21: 3446819.143 ops/s
Iteration  22: 3342569.948 ops/s
Iteration  23: 3504235.911 ops/s
Iteration  24: 3304461.353 ops/s
Iteration  25: 3476204.809 ops/s
Iteration  26: 3294217.288 ops/s
Iteration  27: 3432975.453 ops/s
Iteration  28: 3407786.591 ops/s
Iteration  29: 3285419.542 ops/s
Iteration  30: 3505273.354 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_concat2":
  3385369.112 ±(99.9%) 49659.371 ops/s [Average]
  (min, avg, max) = (3224556.683, 3385369.112, 3505273.354), stdev = 74327.814
  CI (99.9%): [3335709.742, 3435028.483] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                Mode  Cnt        Score       Error  Units
MaybeTest._Benchmark.benchmark_concat2  thrpt   30  3385369.112 ± 49659.371  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_concatIterable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_concatIterable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 238869.656 ops/s
# Warmup Iteration   2: 1709384.920 ops/s
# Warmup Iteration   3: 2337391.482 ops/s
# Warmup Iteration   4: 2938279.021 ops/s
# Warmup Iteration   5: 3081480.865 ops/s
# Warmup Iteration   6: 3005364.448 ops/s
# Warmup Iteration   7: 3002610.767 ops/s
# Warmup Iteration   8: 3119845.536 ops/s
# Warmup Iteration   9: 3062888.597 ops/s
# Warmup Iteration  10: 3111995.447 ops/s
# Warmup Iteration  11: 2919931.852 ops/s
# Warmup Iteration  12: 3128963.044 ops/s
# Warmup Iteration  13: 3197936.519 ops/s
# Warmup Iteration  14: 2932654.093 ops/s
# Warmup Iteration  15: 3090134.298 ops/s
# Warmup Iteration  16: 2903946.330 ops/s
# Warmup Iteration  17: 3041349.662 ops/s
# Warmup Iteration  18: 3062069.416 ops/s
# Warmup Iteration  19: 2907457.770 ops/s
# Warmup Iteration  20: 3090018.956 ops/s
# Warmup Iteration  21: 2962772.152 ops/s
# Warmup Iteration  22: 3023534.068 ops/s
# Warmup Iteration  23: 2968762.197 ops/s
# Warmup Iteration  24: 2867956.084 ops/s
# Warmup Iteration  25: 3073894.671 ops/s
# Warmup Iteration  26: 2855029.585 ops/s
# Warmup Iteration  27: 2960051.786 ops/s
# Warmup Iteration  28: 2936130.950 ops/s
# Warmup Iteration  29: 3109280.222 ops/s
# Warmup Iteration  30: 2979632.754 ops/s
Iteration   1: 3000874.899 ops/s
Iteration   2: 3120541.046 ops/s
Iteration   3: 2912038.758 ops/s
Iteration   4: 2999916.087 ops/s
Iteration   5: 3015932.124 ops/s
Iteration   6: 2878791.007 ops/s
Iteration   7: 3088431.150 ops/s
Iteration   8: 3054682.121 ops/s
Iteration   9: 3102577.911 ops/s
Iteration  10: 3118150.641 ops/s
Iteration  11: 2925434.015 ops/s
Iteration  12: 2999122.368 ops/s
Iteration  13: 3092716.982 ops/s
Iteration  14: 3043711.411 ops/s
Iteration  15: 3027291.208 ops/s
Iteration  16: 2994389.207 ops/s
Iteration  17: 3145272.010 ops/s
Iteration  18: 2938138.393 ops/s
Iteration  19: 3073275.327 ops/s
Iteration  20: 3199411.512 ops/s
Iteration  21: 2998671.140 ops/s
Iteration  22: 3087149.501 ops/s
Iteration  23: 3002659.160 ops/s
Iteration  24: 2940743.630 ops/s
Iteration  25: 3056657.256 ops/s
Iteration  26: 3085224.701 ops/s
Iteration  27: 2913923.826 ops/s
Iteration  28: 3124560.729 ops/s
Iteration  29: 2935463.913 ops/s
Iteration  30: 2968356.444 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_concatIterable":
  3028136.949 ±(99.9%) 53412.073 ops/s [Average]
  (min, avg, max) = (2878791.007, 3028136.949, 3199411.512), stdev = 79944.683
  CI (99.9%): [2974724.876, 3081549.023] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt        Score       Error  Units
MaybeTest._Benchmark.benchmark_concatIterable  thrpt   30  3028136.949 ± 53412.073  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_concat3$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_concat3

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 399148.663 ops/s
# Warmup Iteration   2: 2157987.219 ops/s
# Warmup Iteration   3: 2554936.114 ops/s
# Warmup Iteration   4: 3123632.740 ops/s
# Warmup Iteration   5: 3023188.383 ops/s
# Warmup Iteration   6: 3104158.082 ops/s
# Warmup Iteration   7: 3092916.733 ops/s
# Warmup Iteration   8: 2947641.423 ops/s
# Warmup Iteration   9: 3028899.534 ops/s
# Warmup Iteration  10: 3004012.699 ops/s
# Warmup Iteration  11: 2976680.073 ops/s
# Warmup Iteration  12: 3224807.331 ops/s
# Warmup Iteration  13: 2921901.074 ops/s
# Warmup Iteration  14: 3120425.003 ops/s
# Warmup Iteration  15: 2870155.215 ops/s
# Warmup Iteration  16: 3054886.407 ops/s
# Warmup Iteration  17: 3030379.274 ops/s
# Warmup Iteration  18: 3019637.479 ops/s
# Warmup Iteration  19: 3171741.161 ops/s
# Warmup Iteration  20: 3109493.347 ops/s
# Warmup Iteration  21: 2931013.544 ops/s
# Warmup Iteration  22: 3049260.602 ops/s
# Warmup Iteration  23: 2985431.464 ops/s
# Warmup Iteration  24: 3033245.260 ops/s
# Warmup Iteration  25: 3053094.109 ops/s
# Warmup Iteration  26: 2910120.828 ops/s
# Warmup Iteration  27: 3100617.550 ops/s
# Warmup Iteration  28: 3158588.928 ops/s
# Warmup Iteration  29: 2991329.837 ops/s
# Warmup Iteration  30: 3120881.490 ops/s
Iteration   1: 3134192.295 ops/s
Iteration   2: 2981470.723 ops/s
Iteration   3: 3129879.410 ops/s
Iteration   4: 2901208.156 ops/s
Iteration   5: 3105621.242 ops/s
Iteration   6: 2947551.027 ops/s
Iteration   7: 3064654.340 ops/s
Iteration   8: 2997048.669 ops/s
Iteration   9: 3159281.570 ops/s
Iteration  10: 2942908.618 ops/s
Iteration  11: 2999753.353 ops/s
Iteration  12: 3046616.809 ops/s
Iteration  13: 3172728.627 ops/s
Iteration  14: 3114567.079 ops/s
Iteration  15: 2926418.276 ops/s
Iteration  16: 3121370.360 ops/s
Iteration  17: 2969092.211 ops/s
Iteration  18: 3058337.070 ops/s
Iteration  19: 3198527.210 ops/s
Iteration  20: 2990866.303 ops/s
Iteration  21: 3093356.302 ops/s
Iteration  22: 3089796.015 ops/s
Iteration  23: 3166600.402 ops/s
Iteration  24: 2996551.915 ops/s
Iteration  25: 3083663.351 ops/s
Iteration  26: 3016020.483 ops/s
Iteration  27: 2579162.068 ops/s
Iteration  28: 2958832.139 ops/s
Iteration  29: 3074233.443 ops/s
Iteration  30: 3051814.885 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_concat3":
  3035737.478 ±(99.9%) 78595.371 ops/s [Average]
  (min, avg, max) = (2579162.068, 3035737.478, 3198527.210), stdev = 117637.860
  CI (99.9%): [2957142.108, 3114332.849] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                Mode  Cnt        Score       Error  Units
MaybeTest._Benchmark.benchmark_concat3  thrpt   30  3035737.478 ± 78595.371  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_concatIterableOne$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_concatIterableOne

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 590566.265 ops/s
# Warmup Iteration   2: 2413835.223 ops/s
# Warmup Iteration   3: 3610371.707 ops/s
# Warmup Iteration   4: 3542697.627 ops/s
# Warmup Iteration   5: 3534902.578 ops/s
# Warmup Iteration   6: 3530883.767 ops/s
# Warmup Iteration   7: 3525533.445 ops/s
# Warmup Iteration   8: 3672837.292 ops/s
# Warmup Iteration   9: 3729265.839 ops/s
# Warmup Iteration  10: 3470849.966 ops/s
# Warmup Iteration  11: 3604484.720 ops/s
# Warmup Iteration  12: 3620250.802 ops/s
# Warmup Iteration  13: 3550559.149 ops/s
# Warmup Iteration  14: 3594483.871 ops/s
# Warmup Iteration  15: 3514453.883 ops/s
# Warmup Iteration  16: 3622522.103 ops/s
# Warmup Iteration  17: 3566674.259 ops/s
# Warmup Iteration  18: 3634370.858 ops/s
# Warmup Iteration  19: 3719386.399 ops/s
# Warmup Iteration  20: 3576763.484 ops/s
# Warmup Iteration  21: 3650467.289 ops/s
# Warmup Iteration  22: 3654210.434 ops/s
# Warmup Iteration  23: 3682211.246 ops/s
# Warmup Iteration  24: 3581142.497 ops/s
# Warmup Iteration  25: 3590070.722 ops/s
# Warmup Iteration  26: 3544891.270 ops/s
# Warmup Iteration  27: 3644638.520 ops/s
# Warmup Iteration  28: 3657289.469 ops/s
# Warmup Iteration  29: 3650604.925 ops/s
# Warmup Iteration  30: 3577145.168 ops/s
Iteration   1: 3544208.651 ops/s
Iteration   2: 3631091.596 ops/s
Iteration   3: 3586632.907 ops/s
Iteration   4: 3631227.344 ops/s
Iteration   5: 3537980.237 ops/s
Iteration   6: 3612323.103 ops/s
Iteration   7: 3696930.140 ops/s
Iteration   8: 3581866.953 ops/s
Iteration   9: 3712611.410 ops/s
Iteration  10: 3523218.147 ops/s
Iteration  11: 3687690.005 ops/s
Iteration  12: 3783624.832 ops/s
Iteration  13: 3516122.937 ops/s
Iteration  14: 3594080.179 ops/s
Iteration  15: 3736023.269 ops/s
Iteration  16: 3683025.072 ops/s
Iteration  17: 3633891.220 ops/s
Iteration  18: 3624777.876 ops/s
Iteration  19: 3683802.763 ops/s
Iteration  20: 3580536.289 ops/s
Iteration  21: 3787108.455 ops/s
Iteration  22: 3514348.465 ops/s
Iteration  23: 3584581.892 ops/s
Iteration  24: 3667260.788 ops/s
Iteration  25: 3472709.380 ops/s
Iteration  26: 3679265.134 ops/s
Iteration  27: 3517081.317 ops/s
Iteration  28: 3581644.395 ops/s
Iteration  29: 3669906.839 ops/s
Iteration  30: 3545449.753 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_concatIterableOne":
  3620034.045 ±(99.9%) 54532.086 ops/s [Average]
  (min, avg, max) = (3472709.380, 3620034.045, 3787108.455), stdev = 81621.065
  CI (99.9%): [3565501.959, 3674566.131] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score       Error  Units
MaybeTest._Benchmark.benchmark_concatIterableOne  thrpt   30  3620034.045 ± 54532.086  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_concat4$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_concat4

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 462525.383 ops/s
# Warmup Iteration   2: 1801916.540 ops/s
# Warmup Iteration   3: 2197785.255 ops/s
# Warmup Iteration   4: 2593513.930 ops/s
# Warmup Iteration   5: 2638891.663 ops/s
# Warmup Iteration   6: 2653196.366 ops/s
# Warmup Iteration   7: 2675794.567 ops/s
# Warmup Iteration   8: 2578752.099 ops/s
# Warmup Iteration   9: 2719733.291 ops/s
# Warmup Iteration  10: 2523345.166 ops/s
# Warmup Iteration  11: 2594953.071 ops/s
# Warmup Iteration  12: 2675274.259 ops/s
# Warmup Iteration  13: 2573301.785 ops/s
# Warmup Iteration  14: 2704176.771 ops/s
# Warmup Iteration  15: 2526477.839 ops/s
# Warmup Iteration  16: 2664593.642 ops/s
# Warmup Iteration  17: 2610380.091 ops/s
# Warmup Iteration  18: 2553797.586 ops/s
# Warmup Iteration  19: 2704866.561 ops/s
# Warmup Iteration  20: 2530403.648 ops/s
# Warmup Iteration  21: 2588299.088 ops/s
# Warmup Iteration  22: 2709536.489 ops/s
# Warmup Iteration  23: 2552114.238 ops/s
# Warmup Iteration  24: 2671114.975 ops/s
# Warmup Iteration  25: 2498039.186 ops/s
# Warmup Iteration  26: 2624636.455 ops/s
# Warmup Iteration  27: 2699606.150 ops/s
# Warmup Iteration  28: 2732865.659 ops/s
# Warmup Iteration  29: 2588195.801 ops/s
# Warmup Iteration  30: 2666846.192 ops/s
Iteration   1: 2598705.556 ops/s
Iteration   2: 2601106.708 ops/s
Iteration   3: 2696168.928 ops/s
Iteration   4: 2593095.402 ops/s
Iteration   5: 2567423.043 ops/s
Iteration   6: 2641519.235 ops/s
Iteration   7: 2547978.560 ops/s
Iteration   8: 2675275.647 ops/s
Iteration   9: 2620552.895 ops/s
Iteration  10: 2611259.645 ops/s
Iteration  11: 2577354.354 ops/s
Iteration  12: 2691700.145 ops/s
Iteration  13: 2684501.766 ops/s
Iteration  14: 2586913.002 ops/s
Iteration  15: 2537762.401 ops/s
Iteration  16: 2749852.400 ops/s
Iteration  17: 2527641.761 ops/s
Iteration  18: 2626189.229 ops/s
Iteration  19: 2593879.969 ops/s
Iteration  20: 2569768.424 ops/s
Iteration  21: 2107937.441 ops/s
Iteration  22: 2653982.658 ops/s
Iteration  23: 2565454.593 ops/s
Iteration  24: 2666612.085 ops/s
Iteration  25: 2509064.650 ops/s
Iteration  26: 2678188.911 ops/s
Iteration  27: 2559054.738 ops/s
Iteration  28: 2687116.199 ops/s
Iteration  29: 2732165.126 ops/s
Iteration  30: 2589340.621 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_concat4":
  2601585.536 ±(99.9%) 74673.217 ops/s [Average]
  (min, avg, max) = (2107937.441, 2601585.536, 2749852.400), stdev = 111767.365
  CI (99.9%): [2526912.319, 2676258.754] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                Mode  Cnt        Score       Error  Units
MaybeTest._Benchmark.benchmark_concat4  thrpt   30  2601585.536 ± 74673.217  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_emptyConcatWithValue$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_emptyConcatWithValue

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 541375.630 ops/s
# Warmup Iteration   2: 2327290.140 ops/s
# Warmup Iteration   3: 2857599.486 ops/s
# Warmup Iteration   4: 3490430.967 ops/s
# Warmup Iteration   5: 3427461.497 ops/s
# Warmup Iteration   6: 3406457.562 ops/s
# Warmup Iteration   7: 3445497.771 ops/s
# Warmup Iteration   8: 3349687.204 ops/s
# Warmup Iteration   9: 3510877.640 ops/s
# Warmup Iteration  10: 3430642.727 ops/s
# Warmup Iteration  11: 3399950.955 ops/s
# Warmup Iteration  12: 3424003.859 ops/s
# Warmup Iteration  13: 3541607.350 ops/s
# Warmup Iteration  14: 3448362.205 ops/s
# Warmup Iteration  15: 3281309.108 ops/s
# Warmup Iteration  16: 3513544.538 ops/s
# Warmup Iteration  17: 3450435.426 ops/s
# Warmup Iteration  18: 3554918.287 ops/s
# Warmup Iteration  19: 3547809.396 ops/s
# Warmup Iteration  20: 3423933.536 ops/s
# Warmup Iteration  21: 3479636.728 ops/s
# Warmup Iteration  22: 3566297.148 ops/s
# Warmup Iteration  23: 3373231.893 ops/s
# Warmup Iteration  24: 3371382.285 ops/s
# Warmup Iteration  25: 3568914.910 ops/s
# Warmup Iteration  26: 3377294.765 ops/s
# Warmup Iteration  27: 3481086.663 ops/s
# Warmup Iteration  28: 3505975.348 ops/s
# Warmup Iteration  29: 3558034.040 ops/s
# Warmup Iteration  30: 3580519.033 ops/s
Iteration   1: 3419075.854 ops/s
Iteration   2: 3518120.847 ops/s
Iteration   3: 3588068.111 ops/s
Iteration   4: 3449576.055 ops/s
Iteration   5: 3434497.725 ops/s
Iteration   6: 3493885.486 ops/s
Iteration   7: 3328481.666 ops/s
Iteration   8: 3534122.607 ops/s
Iteration   9: 3471396.935 ops/s
Iteration  10: 3601296.112 ops/s
Iteration  11: 3442558.860 ops/s
Iteration  12: 3433884.844 ops/s
Iteration  13: 3601275.806 ops/s
Iteration  14: 3305863.139 ops/s
Iteration  15: 3429478.588 ops/s
Iteration  16: 3492303.138 ops/s
Iteration  17: 3432584.351 ops/s
Iteration  18: 3516133.324 ops/s
Iteration  19: 3397790.480 ops/s
Iteration  20: 3503039.049 ops/s
Iteration  21: 3559545.134 ops/s
Iteration  22: 3393706.384 ops/s
Iteration  23: 3506142.977 ops/s
Iteration  24: 3589819.575 ops/s
Iteration  25: 3457099.696 ops/s
Iteration  26: 3602864.158 ops/s
Iteration  27: 3386480.590 ops/s
Iteration  28: 3455122.907 ops/s
Iteration  29: 3570369.131 ops/s
Iteration  30: 3447667.359 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_emptyConcatWithValue":
  3478741.696 ±(99.9%) 53142.924 ops/s [Average]
  (min, avg, max) = (3305863.139, 3478741.696, 3602864.158), stdev = 79541.833
  CI (99.9%): [3425598.772, 3531884.620] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score       Error  Units
MaybeTest._Benchmark.benchmark_emptyConcatWithValue  thrpt   30  3478741.696 ± 53142.924  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingTest._Benchmark.benchmark_blockingFirstDefault$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingTest._Benchmark.benchmark_blockingFirstDefault

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 25191.467 ops/s
# Warmup Iteration   2: 21800.448 ops/s
# Warmup Iteration   3: 22035.935 ops/s
# Warmup Iteration   4: 21143.814 ops/s
# Warmup Iteration   5: 23462.789 ops/s
# Warmup Iteration   6: 21515.553 ops/s
# Warmup Iteration   7: 21268.745 ops/s
# Warmup Iteration   8: 22210.863 ops/s
# Warmup Iteration   9: 21386.364 ops/s
# Warmup Iteration  10: 21866.636 ops/s
# Warmup Iteration  11: 21347.934 ops/s
# Warmup Iteration  12: 22801.942 ops/s
# Warmup Iteration  13: 21313.917 ops/s
# Warmup Iteration  14: 21392.206 ops/s
# Warmup Iteration  15: 21838.670 ops/s
# Warmup Iteration  16: 21447.519 ops/s
# Warmup Iteration  17: 21254.215 ops/s
# Warmup Iteration  18: 21335.930 ops/s
# Warmup Iteration  19: 21684.369 ops/s
# Warmup Iteration  20: 23042.539 ops/s
# Warmup Iteration  21: 21561.253 ops/s
# Warmup Iteration  22: 21103.107 ops/s
# Warmup Iteration  23: 21661.392 ops/s
# Warmup Iteration  24: 21397.140 ops/s
# Warmup Iteration  25: 21160.396 ops/s
# Warmup Iteration  26: 20989.352 ops/s
# Warmup Iteration  27: 21545.750 ops/s
# Warmup Iteration  28: 21988.926 ops/s
# Warmup Iteration  29: 21228.756 ops/s
# Warmup Iteration  30: 21056.543 ops/s
Iteration   1: 21767.535 ops/s
Iteration   2: 21648.000 ops/s
Iteration   3: 21675.339 ops/s
Iteration   4: 21943.094 ops/s
Iteration   5: 21286.881 ops/s
Iteration   6: 21065.160 ops/s
Iteration   7: 21754.717 ops/s
Iteration   8: 21845.522 ops/s
Iteration   9: 21613.942 ops/s
Iteration  10: 21816.035 ops/s
Iteration  11: 21186.015 ops/s
Iteration  12: 21588.899 ops/s
Iteration  13: 21423.101 ops/s
Iteration  14: 20915.825 ops/s
Iteration  15: 21590.905 ops/s
Iteration  16: 30773.481 ops/s
Iteration  17: 21240.123 ops/s
Iteration  18: 21675.320 ops/s
Iteration  19: 21977.613 ops/s
Iteration  20: 20704.485 ops/s
Iteration  21: 21219.407 ops/s
Iteration  22: 21919.029 ops/s
Iteration  23: 21011.297 ops/s
Iteration  24: 21024.445 ops/s
Iteration  25: 21262.681 ops/s
Iteration  26: 21590.205 ops/s
Iteration  27: 21065.623 ops/s
Iteration  28: 20812.774 ops/s
Iteration  29: 21832.355 ops/s
Iteration  30: 20846.194 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingTest._Benchmark.benchmark_blockingFirstDefault":
  21735.867 ±(99.9%) 1167.695 ops/s [Average]
  (min, avg, max) = (20704.485, 21735.867, 30773.481), stdev = 1747.752
  CI (99.9%): [20568.171, 22903.562] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt      Score      Error  Units
ObservableBlockingTest._Benchmark.benchmark_blockingFirstDefault  thrpt   30  21735.867 ± 1167.695  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.schedulers.SchedulerWhenTest._Benchmark.benchmark_disposed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.schedulers.SchedulerWhenTest._Benchmark.benchmark_disposed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 816641.857 ops/s
# Warmup Iteration   2: 2890289.138 ops/s
# Warmup Iteration   3: 3855164.817 ops/s
# Warmup Iteration   4: 3656271.377 ops/s
# Warmup Iteration   5: 3732397.117 ops/s
# Warmup Iteration   6: 3689308.395 ops/s
# Warmup Iteration   7: 3908487.222 ops/s
# Warmup Iteration   8: 3758915.145 ops/s
# Warmup Iteration   9: 3672280.337 ops/s
# Warmup Iteration  10: 3765349.360 ops/s
# Warmup Iteration  11: 3901090.293 ops/s
# Warmup Iteration  12: 3617601.236 ops/s
# Warmup Iteration  13: 3740024.680 ops/s
# Warmup Iteration  14: 3679744.590 ops/s
# Warmup Iteration  15: 3881890.632 ops/s
# Warmup Iteration  16: 3828525.723 ops/s
# Warmup Iteration  17: 3568664.372 ops/s
# Warmup Iteration  18: 3737576.069 ops/s
# Warmup Iteration  19: 3870355.199 ops/s
# Warmup Iteration  20: 3759106.158 ops/s
# Warmup Iteration  21: 3727700.154 ops/s
# Warmup Iteration  22: 3671577.257 ops/s
# Warmup Iteration  23: 3744409.888 ops/s
# Warmup Iteration  24: 3643242.079 ops/s
# Warmup Iteration  25: 3788236.891 ops/s
# Warmup Iteration  26: 3683178.306 ops/s
# Warmup Iteration  27: 3821794.971 ops/s
# Warmup Iteration  28: 3698772.136 ops/s
# Warmup Iteration  29: 3673221.526 ops/s
# Warmup Iteration  30: 3811936.497 ops/s
Iteration   1: 3752777.756 ops/s
Iteration   2: 3723508.517 ops/s
Iteration   3: 3708453.530 ops/s
Iteration   4: 3848217.042 ops/s
Iteration   5: 3781754.972 ops/s
Iteration   6: 3739823.689 ops/s
Iteration   7: 3788611.486 ops/s
Iteration   8: 3677477.410 ops/s
Iteration   9: 3931539.530 ops/s
Iteration  10: 3605529.854 ops/s
Iteration  11: 3651304.159 ops/s
Iteration  12: 3833619.972 ops/s
Iteration  13: 3703028.872 ops/s
Iteration  14: 3695261.404 ops/s
Iteration  15: 3799659.874 ops/s
Iteration  16: 3681509.814 ops/s
Iteration  17: 3880539.190 ops/s
Iteration  18: 3664017.071 ops/s
Iteration  19: 3808937.300 ops/s
Iteration  20: 3693547.245 ops/s
Iteration  21: 3709949.114 ops/s
Iteration  22: 3796695.293 ops/s
Iteration  23: 3735558.188 ops/s
Iteration  24: 3644197.426 ops/s
Iteration  25: 3843474.008 ops/s
Iteration  26: 3706494.857 ops/s
Iteration  27: 3884372.407 ops/s
Iteration  28: 3860166.457 ops/s
Iteration  29: 3696617.143 ops/s
Iteration  30: 3666949.939 ops/s


Result "io.reactivex.rxjava3.internal.schedulers.SchedulerWhenTest._Benchmark.benchmark_disposed":
  3750453.117 ±(99.9%) 55443.574 ops/s [Average]
  (min, avg, max) = (3605529.854, 3750453.117, 3931539.530), stdev = 82985.337
  CI (99.9%): [3695009.543, 3805896.691] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score       Error  Units
SchedulerWhenTest._Benchmark.benchmark_disposed  thrpt   30  3750453.117 ± 55443.574  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleTimeIntervalTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleTimeIntervalTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2218351.189 ops/s
# Warmup Iteration   2: 4878140.276 ops/s
# Warmup Iteration   3: 5698131.090 ops/s
# Warmup Iteration   4: 6397357.497 ops/s
# Warmup Iteration   5: 6701072.793 ops/s
# Warmup Iteration   6: 6340670.257 ops/s
# Warmup Iteration   7: 6634809.028 ops/s
# Warmup Iteration   8: 6318147.080 ops/s
# Warmup Iteration   9: 6359922.091 ops/s
# Warmup Iteration  10: 6709982.971 ops/s
# Warmup Iteration  11: 6253003.664 ops/s
# Warmup Iteration  12: 6540619.963 ops/s
# Warmup Iteration  13: 6682032.720 ops/s
# Warmup Iteration  14: 6409401.553 ops/s
# Warmup Iteration  15: 6677032.380 ops/s
# Warmup Iteration  16: 6360908.651 ops/s
# Warmup Iteration  17: 6738725.526 ops/s
# Warmup Iteration  18: 6545679.522 ops/s
# Warmup Iteration  19: 6401594.157 ops/s
# Warmup Iteration  20: 6734588.767 ops/s
# Warmup Iteration  21: 6452451.429 ops/s
# Warmup Iteration  22: 6513434.024 ops/s
# Warmup Iteration  23: 6673733.593 ops/s
# Warmup Iteration  24: 6344082.046 ops/s
# Warmup Iteration  25: 6432738.803 ops/s
# Warmup Iteration  26: 6410010.732 ops/s
# Warmup Iteration  27: 6522724.719 ops/s
# Warmup Iteration  28: 6564801.766 ops/s
# Warmup Iteration  29: 6454197.335 ops/s
# Warmup Iteration  30: 6752380.035 ops/s
Iteration   1: 6378847.185 ops/s
Iteration   2: 6669967.003 ops/s
Iteration   3: 6483700.605 ops/s
Iteration   4: 6364473.543 ops/s
Iteration   5: 6473987.242 ops/s
Iteration   6: 6368627.142 ops/s
Iteration   7: 6423662.942 ops/s
Iteration   8: 6546529.446 ops/s
Iteration   9: 6268228.564 ops/s
Iteration  10: 6715609.888 ops/s
Iteration  11: 5080117.594 ops/s
Iteration  12: 6364419.188 ops/s
Iteration  13: 6719795.190 ops/s
Iteration  14: 6509343.990 ops/s
Iteration  15: 6521780.821 ops/s
Iteration  16: 6542472.515 ops/s
Iteration  17: 6547297.434 ops/s
Iteration  18: 6179842.133 ops/s
Iteration  19: 6635467.164 ops/s
Iteration  20: 6115307.131 ops/s
Iteration  21: 6702947.530 ops/s
Iteration  22: 6496384.262 ops/s
Iteration  23: 6387746.942 ops/s
Iteration  24: 6596238.563 ops/s
Iteration  25: 6326030.952 ops/s
Iteration  26: 6425167.268 ops/s
Iteration  27: 6776578.536 ops/s
Iteration  28: 6425180.756 ops/s
Iteration  29: 6558647.096 ops/s
Iteration  30: 6319952.398 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleTimeIntervalTest._Benchmark.benchmark_dispose":
  6430811.701 ±(99.9%) 200733.270 ops/s [Average]
  (min, avg, max) = (5080117.594, 6430811.701, 6776578.536), stdev = 300448.131
  CI (99.9%): [6230078.431, 6631544.970] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score        Error  Units
SingleTimeIntervalTest._Benchmark.benchmark_dispose  thrpt   30  6430811.701 ± 200733.270  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTimestampTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTimestampTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2300002.690 ops/s
# Warmup Iteration   2: 4858416.773 ops/s
# Warmup Iteration   3: 5265171.735 ops/s
# Warmup Iteration   4: 6726148.006 ops/s
# Warmup Iteration   5: 6377397.254 ops/s
# Warmup Iteration   6: 6497529.623 ops/s
# Warmup Iteration   7: 6649766.355 ops/s
# Warmup Iteration   8: 6445910.956 ops/s
# Warmup Iteration   9: 6231033.242 ops/s
# Warmup Iteration  10: 6555076.759 ops/s
# Warmup Iteration  11: 6176481.292 ops/s
# Warmup Iteration  12: 6512957.360 ops/s
# Warmup Iteration  13: 6663464.261 ops/s
# Warmup Iteration  14: 6260515.242 ops/s
# Warmup Iteration  15: 6585158.344 ops/s
# Warmup Iteration  16: 6614965.451 ops/s
# Warmup Iteration  17: 6342087.745 ops/s
# Warmup Iteration  18: 6427096.282 ops/s
# Warmup Iteration  19: 6748966.710 ops/s
# Warmup Iteration  20: 6397910.751 ops/s
# Warmup Iteration  21: 6448522.025 ops/s
# Warmup Iteration  22: 6613516.539 ops/s
# Warmup Iteration  23: 6556841.130 ops/s
# Warmup Iteration  24: 6322891.542 ops/s
# Warmup Iteration  25: 6456964.437 ops/s
# Warmup Iteration  26: 6491599.607 ops/s
# Warmup Iteration  27: 6503320.603 ops/s
# Warmup Iteration  28: 6399851.488 ops/s
# Warmup Iteration  29: 6720087.973 ops/s
# Warmup Iteration  30: 6277013.919 ops/s
Iteration   1: 6618027.027 ops/s
Iteration   2: 6490837.364 ops/s
Iteration   3: 6601361.803 ops/s
Iteration   4: 6282194.357 ops/s
Iteration   5: 6504899.366 ops/s
Iteration   6: 6561125.751 ops/s
Iteration   7: 6299255.536 ops/s
Iteration   8: 6483572.862 ops/s
Iteration   9: 6317969.170 ops/s
Iteration  10: 6313009.898 ops/s
Iteration  11: 6589607.744 ops/s
Iteration  12: 6314557.394 ops/s
Iteration  13: 6411002.862 ops/s
Iteration  14: 6599854.700 ops/s
Iteration  15: 6369829.850 ops/s
Iteration  16: 6479683.899 ops/s
Iteration  17: 6699030.557 ops/s
Iteration  18: 6387126.227 ops/s
Iteration  19: 6698462.592 ops/s
Iteration  20: 6706067.408 ops/s
Iteration  21: 6422489.596 ops/s
Iteration  22: 6649397.670 ops/s
Iteration  23: 6473700.826 ops/s
Iteration  24: 6612045.573 ops/s
Iteration  25: 6552621.364 ops/s
Iteration  26: 6365865.232 ops/s
Iteration  27: 6668829.637 ops/s
Iteration  28: 6724132.315 ops/s
Iteration  29: 6384027.481 ops/s
Iteration  30: 6745674.887 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimestampTest._Benchmark.benchmark_dispose":
  6510875.365 ±(99.9%) 96688.270 ops/s [Average]
  (min, avg, max) = (6282194.357, 6510875.365, 6745674.887), stdev = 144718.461
  CI (99.9%): [6414187.095, 6607563.634] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score       Error  Units
MaybeTimestampTest._Benchmark.benchmark_dispose  thrpt   30  6510875.365 ± 96688.270  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleTimestampTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleTimestampTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 491742.287 ops/s
# Warmup Iteration   2: 915475.517 ops/s
# Warmup Iteration   3: 1103279.393 ops/s
# Warmup Iteration   4: 1152092.401 ops/s
# Warmup Iteration   5: 1058444.772 ops/s
# Warmup Iteration   6: 1155239.949 ops/s
# Warmup Iteration   7: 1145587.947 ops/s
# Warmup Iteration   8: 1135148.027 ops/s
# Warmup Iteration   9: 1145286.985 ops/s
# Warmup Iteration  10: 1143297.305 ops/s
# Warmup Iteration  11: 1140005.486 ops/s
# Warmup Iteration  12: 1119623.406 ops/s
# Warmup Iteration  13: 1135230.929 ops/s
# Warmup Iteration  14: 1144251.267 ops/s
# Warmup Iteration  15: 1163835.805 ops/s
# Warmup Iteration  16: 1175926.889 ops/s
# Warmup Iteration  17: 1119293.348 ops/s
# Warmup Iteration  18: 1130492.169 ops/s
# Warmup Iteration  19: 1188412.382 ops/s
# Warmup Iteration  20: 1081570.942 ops/s
# Warmup Iteration  21: 1141118.226 ops/s
# Warmup Iteration  22: 1151609.894 ops/s
# Warmup Iteration  23: 1128622.704 ops/s
# Warmup Iteration  24: 1162165.853 ops/s
# Warmup Iteration  25: 1105524.445 ops/s
# Warmup Iteration  26: 1114613.431 ops/s
# Warmup Iteration  27: 1234091.031 ops/s
# Warmup Iteration  28: 1192360.176 ops/s
# Warmup Iteration  29: 1108169.180 ops/s
# Warmup Iteration  30: 1154769.148 ops/s
Iteration   1: 1109693.979 ops/s
Iteration   2: 1145926.877 ops/s
Iteration   3: 1185652.818 ops/s
Iteration   4: 1117467.386 ops/s
Iteration   5: 1158804.873 ops/s
Iteration   6: 957560.150 ops/s
Iteration   7: 1098239.611 ops/s
Iteration   8: 1138281.850 ops/s
Iteration   9: 1181652.515 ops/s
Iteration  10: 1105684.528 ops/s
Iteration  11: 1135513.875 ops/s
Iteration  12: 1153652.448 ops/s
Iteration  13: 1126521.677 ops/s
Iteration  14: 1168826.923 ops/s
Iteration  15: 1098949.714 ops/s
Iteration  16: 1236122.205 ops/s
Iteration  17: 1114100.336 ops/s
Iteration  18: 1187915.080 ops/s
Iteration  19: 1103434.225 ops/s
Iteration  20: 1167408.114 ops/s
Iteration  21: 1121663.840 ops/s
Iteration  22: 1159441.390 ops/s
Iteration  23: 1108937.679 ops/s
Iteration  24: 1123038.453 ops/s
Iteration  25: 1198087.584 ops/s
Iteration  26: 1128239.585 ops/s
Iteration  27: 1139236.342 ops/s
Iteration  28: 1145014.542 ops/s
Iteration  29: 1171600.277 ops/s
Iteration  30: 1184909.140 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleTimestampTest._Benchmark.benchmark_dispose":
  1139052.601 ±(99.9%) 32241.477 ops/s [Average]
  (min, avg, max) = (957560.150, 1139052.601, 1236122.205), stdev = 48257.528
  CI (99.9%): [1106811.124, 1171294.077] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score       Error  Units
SingleTimestampTest._Benchmark.benchmark_dispose  thrpt   30  1139052.601 ± 32241.477  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableUnsubscribeOnTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableUnsubscribeOnTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 63757.598 ops/s
# Warmup Iteration   2: 156242.332 ops/s
# Warmup Iteration   3: 184636.581 ops/s
# Warmup Iteration   4: 188484.806 ops/s
# Warmup Iteration   5: 189801.886 ops/s
# Warmup Iteration   6: 174398.568 ops/s
# Warmup Iteration   7: 188239.687 ops/s
# Warmup Iteration   8: 187959.519 ops/s
# Warmup Iteration   9: 194505.754 ops/s
# Warmup Iteration  10: 200470.182 ops/s
# Warmup Iteration  11: 190735.719 ops/s
# Warmup Iteration  12: 184936.150 ops/s
# Warmup Iteration  13: 187918.049 ops/s
# Warmup Iteration  14: 186003.971 ops/s
# Warmup Iteration  15: 172480.402 ops/s
# Warmup Iteration  16: 211533.708 ops/s
# Warmup Iteration  17: 183645.149 ops/s
# Warmup Iteration  18: 198971.985 ops/s
# Warmup Iteration  19: 185889.419 ops/s
# Warmup Iteration  20: 210068.769 ops/s
# Warmup Iteration  21: 205036.296 ops/s
# Warmup Iteration  22: 175760.018 ops/s
# Warmup Iteration  23: 166257.640 ops/s
# Warmup Iteration  24: 193049.296 ops/s
# Warmup Iteration  25: 233849.962 ops/s
# Warmup Iteration  26: 192921.053 ops/s
# Warmup Iteration  27: 217133.490 ops/s
# Warmup Iteration  28: 198946.996 ops/s
# Warmup Iteration  29: 195019.371 ops/s
# Warmup Iteration  30: 193672.026 ops/s
Iteration   1: 190194.517 ops/s
Iteration   2: 206589.601 ops/s
Iteration   3: 188571.832 ops/s
Iteration   4: 214994.731 ops/s
Iteration   5: 200644.570 ops/s
Iteration   6: 217108.109 ops/s
Iteration   7: 214191.382 ops/s
Iteration   8: 199566.179 ops/s
Iteration   9: 190871.798 ops/s
Iteration  10: 200566.101 ops/s
Iteration  11: 204468.014 ops/s
Iteration  12: 194337.670 ops/s
Iteration  13: 203272.710 ops/s
Iteration  14: 210872.125 ops/s
Iteration  15: 216562.934 ops/s
Iteration  16: 204901.023 ops/s
Iteration  17: 203797.363 ops/s
Iteration  18: 205471.382 ops/s
Iteration  19: 215253.337 ops/s
Iteration  20: 221177.930 ops/s
Iteration  21: 208536.661 ops/s
Iteration  22: 237263.955 ops/s
Iteration  23: 211978.095 ops/s
Iteration  24: 204737.800 ops/s
Iteration  25: 223908.679 ops/s
Iteration  26: 216469.879 ops/s
Iteration  27: 205051.947 ops/s
Iteration  28: 203934.700 ops/s
Iteration  29: 195986.503 ops/s
Iteration  30: 194547.813 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableUnsubscribeOnTest._Benchmark.benchmark_dispose":
  206860.978 ±(99.9%) 7258.719 ops/s [Average]
  (min, avg, max) = (188571.832, 206860.978, 237263.955), stdev = 10864.509
  CI (99.9%): [199602.259, 214119.697] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
FlowableUnsubscribeOnTest._Benchmark.benchmark_dispose  thrpt   30  206860.978 ± 7258.719  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTimestampTest._Benchmark.benchmark_empty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTimestampTest._Benchmark.benchmark_empty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 4591856.318 ops/s
# Warmup Iteration   2: 8037704.342 ops/s
# Warmup Iteration   3: 10662200.094 ops/s
# Warmup Iteration   4: 11745276.417 ops/s
# Warmup Iteration   5: 10451711.318 ops/s
# Warmup Iteration   6: 9828032.007 ops/s
# Warmup Iteration   7: 11958954.879 ops/s
# Warmup Iteration   8: 10878665.425 ops/s
# Warmup Iteration   9: 10185522.613 ops/s
# Warmup Iteration  10: 9996207.460 ops/s
# Warmup Iteration  11: 9861045.043 ops/s
# Warmup Iteration  12: 10101130.390 ops/s
# Warmup Iteration  13: 9879846.283 ops/s
# Warmup Iteration  14: 10616040.120 ops/s
# Warmup Iteration  15: 9772669.552 ops/s
# Warmup Iteration  16: 9946079.769 ops/s
# Warmup Iteration  17: 10369283.430 ops/s
# Warmup Iteration  18: 10011611.433 ops/s
# Warmup Iteration  19: 10332852.356 ops/s
# Warmup Iteration  20: 10176608.810 ops/s
# Warmup Iteration  21: 9741854.661 ops/s
# Warmup Iteration  22: 10318755.655 ops/s
# Warmup Iteration  23: 9893941.407 ops/s
# Warmup Iteration  24: 9926144.637 ops/s
# Warmup Iteration  25: 9799202.117 ops/s
# Warmup Iteration  26: 10002836.359 ops/s
# Warmup Iteration  27: 10309897.354 ops/s
# Warmup Iteration  28: 9881658.838 ops/s
# Warmup Iteration  29: 10112863.026 ops/s
# Warmup Iteration  30: 8261806.877 ops/s
Iteration   1: 9983460.722 ops/s
Iteration   2: 10402713.574 ops/s
Iteration   3: 9795792.228 ops/s
Iteration   4: 10181124.121 ops/s
Iteration   5: 9612741.634 ops/s
Iteration   6: 10358048.098 ops/s
Iteration   7: 9868815.747 ops/s
Iteration   8: 9864832.734 ops/s
Iteration   9: 10130571.758 ops/s
Iteration  10: 10053996.390 ops/s
Iteration  11: 10202577.346 ops/s
Iteration  12: 10005803.437 ops/s
Iteration  13: 10291165.182 ops/s
Iteration  14: 9870756.553 ops/s
Iteration  15: 10322015.341 ops/s
Iteration  16: 10301348.027 ops/s
Iteration  17: 9822615.833 ops/s
Iteration  18: 10249994.067 ops/s
Iteration  19: 9918065.243 ops/s
Iteration  20: 10400232.036 ops/s
Iteration  21: 9741036.092 ops/s
Iteration  22: 10355027.167 ops/s
Iteration  23: 10479330.005 ops/s
Iteration  24: 9848497.561 ops/s
Iteration  25: 10081467.203 ops/s
Iteration  26: 10453244.720 ops/s
Iteration  27: 10361365.671 ops/s
Iteration  28: 10139238.562 ops/s
Iteration  29: 10139561.365 ops/s
Iteration  30: 9965720.207 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimestampTest._Benchmark.benchmark_empty":
  10106705.287 ±(99.9%) 159626.343 ops/s [Average]
  (min, avg, max) = (9612741.634, 10106705.287, 10479330.005), stdev = 238921.214
  CI (99.9%): [9947078.944, 10266331.631] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt         Score        Error  Units
MaybeTimestampTest._Benchmark.benchmark_empty  thrpt   30  10106705.287 ± 159626.343  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeIntervalTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeIntervalTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 554849.335 ops/s
# Warmup Iteration   2: 899554.722 ops/s
# Warmup Iteration   3: 1159467.984 ops/s
# Warmup Iteration   4: 1106002.588 ops/s
# Warmup Iteration   5: 1186694.336 ops/s
# Warmup Iteration   6: 1157706.437 ops/s
# Warmup Iteration   7: 1101904.749 ops/s
# Warmup Iteration   8: 1143300.774 ops/s
# Warmup Iteration   9: 1117942.485 ops/s
# Warmup Iteration  10: 1124601.928 ops/s
# Warmup Iteration  11: 1126556.948 ops/s
# Warmup Iteration  12: 1174581.199 ops/s
# Warmup Iteration  13: 1200205.055 ops/s
# Warmup Iteration  14: 1090493.530 ops/s
# Warmup Iteration  15: 1200917.281 ops/s
# Warmup Iteration  16: 1146293.567 ops/s
# Warmup Iteration  17: 1119661.673 ops/s
# Warmup Iteration  18: 1166405.172 ops/s
# Warmup Iteration  19: 1176025.729 ops/s
# Warmup Iteration  20: 1110313.806 ops/s
# Warmup Iteration  21: 1173094.381 ops/s
# Warmup Iteration  22: 1093752.468 ops/s
# Warmup Iteration  23: 1157311.211 ops/s
# Warmup Iteration  24: 1135251.149 ops/s
# Warmup Iteration  25: 1119429.766 ops/s
# Warmup Iteration  26: 1189740.985 ops/s
# Warmup Iteration  27: 1117324.174 ops/s
# Warmup Iteration  28: 1140974.889 ops/s
# Warmup Iteration  29: 1137528.217 ops/s
# Warmup Iteration  30: 1165613.501 ops/s
Iteration   1: 1126870.710 ops/s
Iteration   2: 1139511.548 ops/s
Iteration   3: 1162701.510 ops/s
Iteration   4: 1112774.722 ops/s
Iteration   5: 1163891.827 ops/s
Iteration   6: 1142605.466 ops/s
Iteration   7: 1150258.222 ops/s
Iteration   8: 1130290.941 ops/s
Iteration   9: 1150178.949 ops/s
Iteration  10: 1173218.291 ops/s
Iteration  11: 1103591.625 ops/s
Iteration  12: 1174070.364 ops/s
Iteration  13: 1114363.081 ops/s
Iteration  14: 1149919.429 ops/s
Iteration  15: 1148045.713 ops/s
Iteration  16: 1106831.650 ops/s
Iteration  17: 1148705.139 ops/s
Iteration  18: 1138650.973 ops/s
Iteration  19: 1127369.723 ops/s
Iteration  20: 1177419.322 ops/s
Iteration  21: 1149669.097 ops/s
Iteration  22: 1139060.911 ops/s
Iteration  23: 1169302.171 ops/s
Iteration  24: 1141175.893 ops/s
Iteration  25: 1166817.763 ops/s
Iteration  26: 1099356.753 ops/s
Iteration  27: 1195548.025 ops/s
Iteration  28: 1120331.254 ops/s
Iteration  29: 1098786.910 ops/s
Iteration  30: 1149877.524 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeIntervalTest._Benchmark.benchmark_dispose":
  1142373.184 ±(99.9%) 16590.745 ops/s [Average]
  (min, avg, max) = (1098786.910, 1142373.184, 1195548.025), stdev = 24832.248
  CI (99.9%): [1125782.438, 1158963.929] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score       Error  Units
MaybeTimeIntervalTest._Benchmark.benchmark_dispose  thrpt   30  1142373.184 ± 16590.745  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastTimedTest._Benchmark.benchmark_takeLastTime$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastTimedTest._Benchmark.benchmark_takeLastTime

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 72078.050 ops/s
# Warmup Iteration   2: 235255.313 ops/s
# Warmup Iteration   3: 343012.544 ops/s
# Warmup Iteration   4: 347987.828 ops/s
# Warmup Iteration   5: 376958.414 ops/s
# Warmup Iteration   6: 371703.542 ops/s
# Warmup Iteration   7: 370116.086 ops/s
# Warmup Iteration   8: 358886.299 ops/s
# Warmup Iteration   9: 379449.095 ops/s
# Warmup Iteration  10: 369535.506 ops/s
# Warmup Iteration  11: 341264.137 ops/s
# Warmup Iteration  12: 370845.215 ops/s
# Warmup Iteration  13: 372364.288 ops/s
# Warmup Iteration  14: 372737.461 ops/s
# Warmup Iteration  15: 355595.639 ops/s
# Warmup Iteration  16: 386120.570 ops/s
# Warmup Iteration  17: 368981.667 ops/s
# Warmup Iteration  18: 378494.491 ops/s
# Warmup Iteration  19: 364917.779 ops/s
# Warmup Iteration  20: 369095.902 ops/s
# Warmup Iteration  21: 379707.545 ops/s
# Warmup Iteration  22: 354770.707 ops/s
# Warmup Iteration  23: 385003.963 ops/s
# Warmup Iteration  24: 359986.728 ops/s
# Warmup Iteration  25: 302912.094 ops/s
# Warmup Iteration  26: 365679.517 ops/s
# Warmup Iteration  27: 372771.630 ops/s
# Warmup Iteration  28: 386627.688 ops/s
# Warmup Iteration  29: 353983.810 ops/s
# Warmup Iteration  30: 384188.275 ops/s
Iteration   1: 363431.420 ops/s
Iteration   2: 369515.340 ops/s
Iteration   3: 374936.581 ops/s
Iteration   4: 363149.926 ops/s
Iteration   5: 361883.275 ops/s
Iteration   6: 364949.828 ops/s
Iteration   7: 372604.486 ops/s
Iteration   8: 365908.996 ops/s
Iteration   9: 367280.995 ops/s
Iteration  10: 363689.919 ops/s
Iteration  11: 371953.389 ops/s
Iteration  12: 361068.560 ops/s
Iteration  13: 348179.160 ops/s
Iteration  14: 376156.999 ops/s
Iteration  15: 381940.165 ops/s
Iteration  16: 378870.490 ops/s
Iteration  17: 371221.691 ops/s
Iteration  18: 376248.951 ops/s
Iteration  19: 361159.334 ops/s
Iteration  20: 381382.126 ops/s
Iteration  21: 373217.757 ops/s
Iteration  22: 366634.847 ops/s
Iteration  23: 354273.359 ops/s
Iteration  24: 381788.862 ops/s
Iteration  25: 363546.797 ops/s
Iteration  26: 379329.925 ops/s
Iteration  27: 373232.670 ops/s
Iteration  28: 363557.174 ops/s
Iteration  29: 381475.893 ops/s
Iteration  30: 362618.876 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastTimedTest._Benchmark.benchmark_takeLastTime":
  369173.593 ±(99.9%) 5683.040 ops/s [Average]
  (min, avg, max) = (348179.160, 369173.593, 381940.165), stdev = 8506.107
  CI (99.9%): [363490.553, 374856.633] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
ObservableTakeLastTimedTest._Benchmark.benchmark_takeLastTime  thrpt   30  369173.593 ± 5683.040  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastTimedTest._Benchmark.benchmark_takeLastTimeAndSize$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastTimedTest._Benchmark.benchmark_takeLastTimeAndSize

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 41426.185 ops/s
# Warmup Iteration   2: 222697.728 ops/s
# Warmup Iteration   3: 361101.087 ops/s
# Warmup Iteration   4: 368038.509 ops/s
# Warmup Iteration   5: 360801.655 ops/s
# Warmup Iteration   6: 381275.351 ops/s
# Warmup Iteration   7: 350975.284 ops/s
# Warmup Iteration   8: 364458.170 ops/s
# Warmup Iteration   9: 373446.613 ops/s
# Warmup Iteration  10: 353079.873 ops/s
# Warmup Iteration  11: 368676.484 ops/s
# Warmup Iteration  12: 380363.713 ops/s
# Warmup Iteration  13: 363997.638 ops/s
# Warmup Iteration  14: 382853.615 ops/s
# Warmup Iteration  15: 366327.077 ops/s
# Warmup Iteration  16: 370964.973 ops/s
# Warmup Iteration  17: 381454.277 ops/s
# Warmup Iteration  18: 359622.098 ops/s
# Warmup Iteration  19: 381127.667 ops/s
# Warmup Iteration  20: 367423.339 ops/s
# Warmup Iteration  21: 369906.671 ops/s
# Warmup Iteration  22: 368272.955 ops/s
# Warmup Iteration  23: 363523.143 ops/s
# Warmup Iteration  24: 384018.094 ops/s
# Warmup Iteration  25: 374759.563 ops/s
# Warmup Iteration  26: 372766.211 ops/s
# Warmup Iteration  27: 379248.520 ops/s
# Warmup Iteration  28: 367134.881 ops/s
# Warmup Iteration  29: 381181.998 ops/s
# Warmup Iteration  30: 363944.835 ops/s
Iteration   1: 377389.388 ops/s
Iteration   2: 356344.704 ops/s
Iteration   3: 382062.200 ops/s
Iteration   4: 378636.848 ops/s
Iteration   5: 364514.941 ops/s
Iteration   6: 371438.373 ops/s
Iteration   7: 371147.064 ops/s
Iteration   8: 375701.748 ops/s
Iteration   9: 364460.410 ops/s
Iteration  10: 372956.522 ops/s
Iteration  11: 381372.348 ops/s
Iteration  12: 388823.451 ops/s
Iteration  13: 364464.244 ops/s
Iteration  14: 364257.990 ops/s
Iteration  15: 380306.869 ops/s
Iteration  16: 386471.999 ops/s
Iteration  17: 371442.513 ops/s
Iteration  18: 376216.110 ops/s
Iteration  19: 372281.411 ops/s
Iteration  20: 372899.397 ops/s
Iteration  21: 377362.107 ops/s
Iteration  22: 356275.084 ops/s
Iteration  23: 374887.142 ops/s
Iteration  24: 376100.441 ops/s
Iteration  25: 361736.201 ops/s
Iteration  26: 381690.465 ops/s
Iteration  27: 365963.591 ops/s
Iteration  28: 375725.695 ops/s
Iteration  29: 354337.147 ops/s
Iteration  30: 357081.013 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastTimedTest._Benchmark.benchmark_takeLastTimeAndSize":
  371811.580 ±(99.9%) 6099.689 ops/s [Average]
  (min, avg, max) = (354337.147, 371811.580, 388823.451), stdev = 9129.729
  CI (99.9%): [365711.891, 377911.270] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score      Error  Units
ObservableTakeLastTimedTest._Benchmark.benchmark_takeLastTimeAndSize  thrpt   30  371811.580 ± 6099.689  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSkipLastTimedTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSkipLastTimedTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 37236.795 ops/s
# Warmup Iteration   2: 339091.790 ops/s
# Warmup Iteration   3: 430421.968 ops/s
# Warmup Iteration   4: 428079.307 ops/s
# Warmup Iteration   5: 442081.777 ops/s
# Warmup Iteration   6: 428207.993 ops/s
# Warmup Iteration   7: 411595.750 ops/s
# Warmup Iteration   8: 426653.428 ops/s
# Warmup Iteration   9: 424770.541 ops/s
# Warmup Iteration  10: 446240.294 ops/s
# Warmup Iteration  11: 446761.312 ops/s
# Warmup Iteration  12: 428778.790 ops/s
# Warmup Iteration  13: 441994.742 ops/s
# Warmup Iteration  14: 434726.430 ops/s
# Warmup Iteration  15: 437374.536 ops/s
# Warmup Iteration  16: 416889.325 ops/s
# Warmup Iteration  17: 450679.273 ops/s
# Warmup Iteration  18: 452616.470 ops/s
# Warmup Iteration  19: 421742.194 ops/s
# Warmup Iteration  20: 389029.984 ops/s
# Warmup Iteration  21: 419816.027 ops/s
# Warmup Iteration  22: 443220.159 ops/s
# Warmup Iteration  23: 428394.668 ops/s
# Warmup Iteration  24: 439287.915 ops/s
# Warmup Iteration  25: 451843.972 ops/s
# Warmup Iteration  26: 443529.856 ops/s
# Warmup Iteration  27: 440518.568 ops/s
# Warmup Iteration  28: 449134.539 ops/s
# Warmup Iteration  29: 441916.732 ops/s
# Warmup Iteration  30: 437540.200 ops/s
Iteration   1: 429188.608 ops/s
Iteration   2: 461286.828 ops/s
Iteration   3: 443081.639 ops/s
Iteration   4: 429257.943 ops/s
Iteration   5: 447860.295 ops/s
Iteration   6: 461125.707 ops/s
Iteration   7: 435735.523 ops/s
Iteration   8: 450212.661 ops/s
Iteration   9: 439852.953 ops/s
Iteration  10: 456429.974 ops/s
Iteration  11: 436036.729 ops/s
Iteration  12: 459160.805 ops/s
Iteration  13: 457619.153 ops/s
Iteration  14: 433507.597 ops/s
Iteration  15: 455339.829 ops/s
Iteration  16: 458206.826 ops/s
Iteration  17: 438216.439 ops/s
Iteration  18: 462671.754 ops/s
Iteration  19: 454317.676 ops/s
Iteration  20: 435736.060 ops/s
Iteration  21: 457344.792 ops/s
Iteration  22: 436990.923 ops/s
Iteration  23: 458858.143 ops/s
Iteration  24: 436504.455 ops/s
Iteration  25: 436369.026 ops/s
Iteration  26: 457298.766 ops/s
Iteration  27: 435819.376 ops/s
Iteration  28: 459963.475 ops/s
Iteration  29: 462483.885 ops/s
Iteration  30: 425973.510 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableSkipLastTimedTest._Benchmark.benchmark_doubleOnSubscribe":
  447081.712 ±(99.9%) 8080.434 ops/s [Average]
  (min, avg, max) = (425973.510, 447081.712, 462671.754), stdev = 12094.414
  CI (99.9%): [439001.278, 455162.146] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score      Error  Units
ObservableSkipLastTimedTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  447081.712 ± 8080.434  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastTimedTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastTimedTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 65730.000 ops/s
# Warmup Iteration   2: 382018.890 ops/s
# Warmup Iteration   3: 419069.446 ops/s
# Warmup Iteration   4: 423325.621 ops/s
# Warmup Iteration   5: 409434.932 ops/s
# Warmup Iteration   6: 444561.692 ops/s
# Warmup Iteration   7: 471804.895 ops/s
# Warmup Iteration   8: 448689.894 ops/s
# Warmup Iteration   9: 466192.587 ops/s
# Warmup Iteration  10: 443946.866 ops/s
# Warmup Iteration  11: 453585.332 ops/s
# Warmup Iteration  12: 470475.051 ops/s
# Warmup Iteration  13: 449524.607 ops/s
# Warmup Iteration  14: 474130.255 ops/s
# Warmup Iteration  15: 450122.293 ops/s
# Warmup Iteration  16: 477702.180 ops/s
# Warmup Iteration  17: 465597.634 ops/s
# Warmup Iteration  18: 498829.766 ops/s
# Warmup Iteration  19: 484195.341 ops/s
# Warmup Iteration  20: 489434.259 ops/s
# Warmup Iteration  21: 498381.919 ops/s
# Warmup Iteration  22: 458994.633 ops/s
# Warmup Iteration  23: 483573.685 ops/s
# Warmup Iteration  24: 491024.614 ops/s
# Warmup Iteration  25: 493126.693 ops/s
# Warmup Iteration  26: 473589.862 ops/s
# Warmup Iteration  27: 494007.420 ops/s
# Warmup Iteration  28: 481416.652 ops/s
# Warmup Iteration  29: 480347.204 ops/s
# Warmup Iteration  30: 482957.930 ops/s
Iteration   1: 481153.320 ops/s
Iteration   2: 467276.713 ops/s
Iteration   3: 491425.214 ops/s
Iteration   4: 479770.709 ops/s
Iteration   5: 497176.521 ops/s
Iteration   6: 473997.656 ops/s
Iteration   7: 486363.608 ops/s
Iteration   8: 486459.884 ops/s
Iteration   9: 469866.949 ops/s
Iteration  10: 499339.775 ops/s
Iteration  11: 474260.212 ops/s
Iteration  12: 492908.685 ops/s
Iteration  13: 460136.528 ops/s
Iteration  14: 476810.438 ops/s
Iteration  15: 472360.005 ops/s
Iteration  16: 485980.057 ops/s
Iteration  17: 490141.674 ops/s
Iteration  18: 481189.971 ops/s
Iteration  19: 479863.058 ops/s
Iteration  20: 487721.146 ops/s
Iteration  21: 487779.700 ops/s
Iteration  22: 472446.736 ops/s
Iteration  23: 483469.264 ops/s
Iteration  24: 479076.493 ops/s
Iteration  25: 486879.620 ops/s
Iteration  26: 474463.932 ops/s
Iteration  27: 492720.072 ops/s
Iteration  28: 478149.336 ops/s
Iteration  29: 484219.754 ops/s
Iteration  30: 497031.841 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastTimedTest._Benchmark.benchmark_doubleOnSubscribe":
  482347.962 ±(99.9%) 6280.097 ops/s [Average]
  (min, avg, max) = (460136.528, 482347.962, 499339.775), stdev = 9399.755
  CI (99.9%): [476067.865, 488628.060] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score      Error  Units
ObservableTakeLastTimedTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  482347.962 ± 6280.097  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.BlockingObservableToIteratorTest._Benchmark.benchmark_toIteratorWithException$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.BlockingObservableToIteratorTest._Benchmark.benchmark_toIteratorWithException

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 146090.307 ops/s
# Warmup Iteration   2: 492865.710 ops/s
# Warmup Iteration   3: 559777.445 ops/s
# Warmup Iteration   4: 596874.631 ops/s
# Warmup Iteration   5: 575352.030 ops/s
# Warmup Iteration   6: 584966.942 ops/s
# Warmup Iteration   7: 521274.974 ops/s
# Warmup Iteration   8: 602703.645 ops/s
# Warmup Iteration   9: 576567.291 ops/s
# Warmup Iteration  10: 586467.995 ops/s
# Warmup Iteration  11: 591068.919 ops/s
# Warmup Iteration  12: 582671.405 ops/s
# Warmup Iteration  13: 608384.871 ops/s
# Warmup Iteration  14: 590049.860 ops/s
# Warmup Iteration  15: 478573.998 ops/s
# Warmup Iteration  16: 583065.763 ops/s
# Warmup Iteration  17: 610698.407 ops/s
# Warmup Iteration  18: 622317.981 ops/s
# Warmup Iteration  19: 629848.787 ops/s
# Warmup Iteration  20: 615591.718 ops/s
# Warmup Iteration  21: 634819.542 ops/s
# Warmup Iteration  22: 600241.217 ops/s
# Warmup Iteration  23: 625362.529 ops/s
# Warmup Iteration  24: 625538.121 ops/s
# Warmup Iteration  25: 645461.839 ops/s
# Warmup Iteration  26: 592851.680 ops/s
# Warmup Iteration  27: 621089.183 ops/s
# Warmup Iteration  28: 617541.476 ops/s
# Warmup Iteration  29: 627046.134 ops/s
# Warmup Iteration  30: 608430.031 ops/s
Iteration   1: 621776.217 ops/s
Iteration   2: 636900.238 ops/s
Iteration   3: 605565.152 ops/s
Iteration   4: 618725.221 ops/s
Iteration   5: 598450.637 ops/s
Iteration   6: 612240.984 ops/s
Iteration   7: 653424.089 ops/s
Iteration   8: 614791.870 ops/s
Iteration   9: 621415.295 ops/s
Iteration  10: 603685.784 ops/s
Iteration  11: 610923.931 ops/s
Iteration  12: 645182.883 ops/s
Iteration  13: 604196.233 ops/s
Iteration  14: 592959.766 ops/s
Iteration  15: 609505.662 ops/s
Iteration  16: 644623.673 ops/s
Iteration  17: 595099.248 ops/s
Iteration  18: 611414.234 ops/s
Iteration  19: 628692.457 ops/s
Iteration  20: 602300.041 ops/s
Iteration  21: 614738.426 ops/s
Iteration  22: 595050.898 ops/s
Iteration  23: 614067.940 ops/s
Iteration  24: 629157.061 ops/s
Iteration  25: 610220.069 ops/s
Iteration  26: 628982.681 ops/s
Iteration  27: 633993.096 ops/s
Iteration  28: 620222.413 ops/s
Iteration  29: 591194.172 ops/s
Iteration  30: 630918.487 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.BlockingObservableToIteratorTest._Benchmark.benchmark_toIteratorWithException":
  616680.629 ±(99.9%) 10881.156 ops/s [Average]
  (min, avg, max) = (591194.172, 616680.629, 653424.089), stdev = 16286.403
  CI (99.9%): [605799.473, 627561.785] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt       Score       Error  Units
BlockingObservableToIteratorTest._Benchmark.benchmark_toIteratorWithException  thrpt   30  616680.629 ± 10881.156  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOnTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOnTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 261193.169 ops/s
# Warmup Iteration   2: 1591068.392 ops/s
# Warmup Iteration   3: 2301760.373 ops/s
# Warmup Iteration   4: 2454629.013 ops/s
# Warmup Iteration   5: 2619797.482 ops/s
# Warmup Iteration   6: 2516317.805 ops/s
# Warmup Iteration   7: 2433675.553 ops/s
# Warmup Iteration   8: 2552470.476 ops/s
# Warmup Iteration   9: 2507905.342 ops/s
# Warmup Iteration  10: 2517212.697 ops/s
# Warmup Iteration  11: 2519721.479 ops/s
# Warmup Iteration  12: 2596166.483 ops/s
# Warmup Iteration  13: 2554087.061 ops/s
# Warmup Iteration  14: 2555976.677 ops/s
# Warmup Iteration  15: 2634173.960 ops/s
# Warmup Iteration  16: 2517736.371 ops/s
# Warmup Iteration  17: 2639604.483 ops/s
# Warmup Iteration  18: 2605531.661 ops/s
# Warmup Iteration  19: 2400269.616 ops/s
# Warmup Iteration  20: 2494093.055 ops/s
# Warmup Iteration  21: 2535219.466 ops/s
# Warmup Iteration  22: 2540885.047 ops/s
# Warmup Iteration  23: 2467993.705 ops/s
# Warmup Iteration  24: 2509070.965 ops/s
# Warmup Iteration  25: 2602841.375 ops/s
# Warmup Iteration  26: 2443157.984 ops/s
# Warmup Iteration  27: 2663671.395 ops/s
# Warmup Iteration  28: 2450093.545 ops/s
# Warmup Iteration  29: 2550901.003 ops/s
# Warmup Iteration  30: 2649474.908 ops/s
Iteration   1: 2585634.142 ops/s
Iteration   2: 2526794.513 ops/s
Iteration   3: 2502378.296 ops/s
Iteration   4: 2615634.712 ops/s
Iteration   5: 2425445.515 ops/s
Iteration   6: 2590475.766 ops/s
Iteration   7: 2463898.279 ops/s
Iteration   8: 2657453.142 ops/s
Iteration   9: 2454645.906 ops/s
Iteration  10: 2510980.537 ops/s
Iteration  11: 2599651.545 ops/s
Iteration  12: 2581190.654 ops/s
Iteration  13: 2597012.783 ops/s
Iteration  14: 2639651.455 ops/s
Iteration  15: 2453818.110 ops/s
Iteration  16: 2621432.484 ops/s
Iteration  17: 2412160.953 ops/s
Iteration  18: 2636525.939 ops/s
Iteration  19: 2635408.953 ops/s
Iteration  20: 2509636.136 ops/s
Iteration  21: 2591776.499 ops/s
Iteration  22: 2481294.695 ops/s
Iteration  23: 2604522.182 ops/s
Iteration  24: 2440593.038 ops/s
Iteration  25: 2632031.245 ops/s
Iteration  26: 2523264.566 ops/s
Iteration  27: 2575538.930 ops/s
Iteration  28: 2615196.616 ops/s
Iteration  29: 2421534.635 ops/s
Iteration  30: 2589065.113 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOnTest._Benchmark.benchmark_dispose":
  2549821.578 ±(99.9%) 51205.188 ops/s [Average]
  (min, avg, max) = (2412160.953, 2549821.578, 2657453.142), stdev = 76641.520
  CI (99.9%): [2498616.390, 2601026.766] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
ObservableObserveOnTest._Benchmark.benchmark_dispose  thrpt   30  2549821.578 ± 51205.188  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimedTest._Benchmark.benchmark_takeLastTimeDelayErrorCustomScheduler$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimedTest._Benchmark.benchmark_takeLastTimeDelayErrorCustomScheduler

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 28589.907 ops/s
# Warmup Iteration   2: 86194.273 ops/s
# Warmup Iteration   3: 133912.809 ops/s
# Warmup Iteration   4: 203078.293 ops/s
# Warmup Iteration   5: 211186.755 ops/s
# Warmup Iteration   6: 214017.000 ops/s
# Warmup Iteration   7: 201409.559 ops/s
# Warmup Iteration   8: 214129.926 ops/s
# Warmup Iteration   9: 171890.840 ops/s
# Warmup Iteration  10: 210474.460 ops/s
# Warmup Iteration  11: 208623.594 ops/s
# Warmup Iteration  12: 212890.503 ops/s
# Warmup Iteration  13: 210250.339 ops/s
# Warmup Iteration  14: 211975.315 ops/s
# Warmup Iteration  15: 207059.795 ops/s
# Warmup Iteration  16: 212474.575 ops/s
# Warmup Iteration  17: 215047.672 ops/s
# Warmup Iteration  18: 214968.124 ops/s
# Warmup Iteration  19: 223242.733 ops/s
# Warmup Iteration  20: 212250.595 ops/s
# Warmup Iteration  21: 214446.311 ops/s
# Warmup Iteration  22: 217220.710 ops/s
# Warmup Iteration  23: 217396.332 ops/s
# Warmup Iteration  24: 222143.309 ops/s
# Warmup Iteration  25: 206229.751 ops/s
# Warmup Iteration  26: 222425.684 ops/s
# Warmup Iteration  27: 209419.450 ops/s
# Warmup Iteration  28: 225246.898 ops/s
# Warmup Iteration  29: 212936.068 ops/s
# Warmup Iteration  30: 210911.356 ops/s
Iteration   1: 223378.790 ops/s
Iteration   2: 212994.262 ops/s
Iteration   3: 222431.822 ops/s
Iteration   4: 210428.273 ops/s
Iteration   5: 211747.661 ops/s
Iteration   6: 220384.900 ops/s
Iteration   7: 217918.812 ops/s
Iteration   8: 209728.873 ops/s
Iteration   9: 218973.011 ops/s
Iteration  10: 208116.779 ops/s
Iteration  11: 217971.352 ops/s
Iteration  12: 214582.865 ops/s
Iteration  13: 219183.234 ops/s
Iteration  14: 215707.940 ops/s
Iteration  15: 210958.068 ops/s
Iteration  16: 212723.636 ops/s
Iteration  17: 220403.961 ops/s
Iteration  18: 218891.159 ops/s
Iteration  19: 213127.976 ops/s
Iteration  20: 214937.809 ops/s
Iteration  21: 217995.401 ops/s
Iteration  22: 219085.392 ops/s
Iteration  23: 212725.634 ops/s
Iteration  24: 219204.313 ops/s
Iteration  25: 210827.747 ops/s
Iteration  26: 216534.190 ops/s
Iteration  27: 217293.668 ops/s
Iteration  28: 216263.976 ops/s
Iteration  29: 217537.418 ops/s
Iteration  30: 208385.109 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimedTest._Benchmark.benchmark_takeLastTimeDelayErrorCustomScheduler":
  215681.468 ±(99.9%) 2766.332 ops/s [Average]
  (min, avg, max) = (208116.779, 215681.468, 223378.790), stdev = 4140.517
  CI (99.9%): [212915.135, 218447.800] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              Mode  Cnt       Score      Error  Units
FlowableTakeLastTimedTest._Benchmark.benchmark_takeLastTimeDelayErrorCustomScheduler  thrpt   30  215681.468 ± 2766.332  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimedTest._Benchmark.benchmark_takeLastTimeDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimedTest._Benchmark.benchmark_takeLastTimeDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 21703.559 ops/s
# Warmup Iteration   2: 82852.351 ops/s
# Warmup Iteration   3: 158574.819 ops/s
# Warmup Iteration   4: 207868.711 ops/s
# Warmup Iteration   5: 220350.965 ops/s
# Warmup Iteration   6: 213811.769 ops/s
# Warmup Iteration   7: 198541.168 ops/s
# Warmup Iteration   8: 228148.418 ops/s
# Warmup Iteration   9: 225107.982 ops/s
# Warmup Iteration  10: 210178.891 ops/s
# Warmup Iteration  11: 224470.437 ops/s
# Warmup Iteration  12: 219425.865 ops/s
# Warmup Iteration  13: 224772.490 ops/s
# Warmup Iteration  14: 219757.287 ops/s
# Warmup Iteration  15: 222376.927 ops/s
# Warmup Iteration  16: 231147.314 ops/s
# Warmup Iteration  17: 216493.283 ops/s
# Warmup Iteration  18: 231397.875 ops/s
# Warmup Iteration  19: 232078.411 ops/s
# Warmup Iteration  20: 226094.041 ops/s
# Warmup Iteration  21: 227451.283 ops/s
# Warmup Iteration  22: 221976.910 ops/s
# Warmup Iteration  23: 222804.265 ops/s
# Warmup Iteration  24: 226869.609 ops/s
# Warmup Iteration  25: 220263.748 ops/s
# Warmup Iteration  26: 230285.344 ops/s
# Warmup Iteration  27: 224616.448 ops/s
# Warmup Iteration  28: 221780.820 ops/s
# Warmup Iteration  29: 229733.758 ops/s
# Warmup Iteration  30: 222479.733 ops/s
Iteration   1: 224923.770 ops/s
Iteration   2: 219357.656 ops/s
Iteration   3: 227198.387 ops/s
Iteration   4: 228860.095 ops/s
Iteration   5: 221015.207 ops/s
Iteration   6: 230888.895 ops/s
Iteration   7: 216734.396 ops/s
Iteration   8: 222273.832 ops/s
Iteration   9: 227668.550 ops/s
Iteration  10: 216734.775 ops/s
Iteration  11: 227474.341 ops/s
Iteration  12: 216793.396 ops/s
Iteration  13: 222664.799 ops/s
Iteration  14: 231032.408 ops/s
Iteration  15: 224041.599 ops/s
Iteration  16: 231439.456 ops/s
Iteration  17: 225298.093 ops/s
Iteration  18: 228318.527 ops/s
Iteration  19: 221784.777 ops/s
Iteration  20: 222972.474 ops/s
Iteration  21: 225757.213 ops/s
Iteration  22: 223240.255 ops/s
Iteration  23: 227477.698 ops/s
Iteration  24: 222386.069 ops/s
Iteration  25: 221174.756 ops/s
Iteration  26: 232394.103 ops/s
Iteration  27: 218346.059 ops/s
Iteration  28: 235420.823 ops/s
Iteration  29: 233264.246 ops/s
Iteration  30: 215996.445 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimedTest._Benchmark.benchmark_takeLastTimeDelayError":
  224764.437 ±(99.9%) 3559.363 ops/s [Average]
  (min, avg, max) = (215996.445, 224764.437, 235420.823), stdev = 5327.487
  CI (99.9%): [221205.074, 228323.800] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score      Error  Units
FlowableTakeLastTimedTest._Benchmark.benchmark_takeLastTimeDelayError  thrpt   30  224764.437 ± 3559.363  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMapTest._Benchmark.benchmark_fusedAsync$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMapTest._Benchmark.benchmark_fusedAsync

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.731 ops/s
# Warmup Iteration   2: 27332.399 ops/s
# Warmup Iteration   3: 78974.767 ops/s
# Warmup Iteration   4: 97554.600 ops/s
# Warmup Iteration   5: 195708.121 ops/s
# Warmup Iteration   6: 221969.387 ops/s
# Warmup Iteration   7: 370495.561 ops/s
# Warmup Iteration   8: 431700.501 ops/s
# Warmup Iteration   9: 368960.286 ops/s
# Warmup Iteration  10: 414459.933 ops/s
# Warmup Iteration  11: 417198.153 ops/s
# Warmup Iteration  12: 437017.658 ops/s
# Warmup Iteration  13: 411494.871 ops/s
# Warmup Iteration  14: 423640.064 ops/s
# Warmup Iteration  15: 415602.511 ops/s
# Warmup Iteration  16: 422193.396 ops/s
# Warmup Iteration  17: 434173.041 ops/s
# Warmup Iteration  18: 419404.415 ops/s
# Warmup Iteration  19: 429131.792 ops/s
# Warmup Iteration  20: 406384.759 ops/s
# Warmup Iteration  21: 439779.082 ops/s
# Warmup Iteration  22: 442860.244 ops/s
# Warmup Iteration  23: 410931.295 ops/s
# Warmup Iteration  24: 421147.639 ops/s
# Warmup Iteration  25: 423486.659 ops/s
# Warmup Iteration  26: 421499.208 ops/s
# Warmup Iteration  27: 437676.552 ops/s
# Warmup Iteration  28: 421191.606 ops/s
# Warmup Iteration  29: 433124.962 ops/s
# Warmup Iteration  30: 407006.910 ops/s
Iteration   1: 442001.012 ops/s
Iteration   2: 430606.128 ops/s
Iteration   3: 413590.709 ops/s
Iteration   4: 436235.869 ops/s
Iteration   5: 417433.567 ops/s
Iteration   6: 427225.319 ops/s
Iteration   7: 430652.967 ops/s
Iteration   8: 414700.820 ops/s
Iteration   9: 418403.473 ops/s
Iteration  10: 438640.812 ops/s
Iteration  11: 416174.476 ops/s
Iteration  12: 418040.530 ops/s
Iteration  13: 421710.117 ops/s
Iteration  14: 430309.095 ops/s
Iteration  15: 429860.053 ops/s
Iteration  16: 403884.473 ops/s
Iteration  17: 431485.316 ops/s
Iteration  18: 414649.431 ops/s
Iteration  19: 413621.681 ops/s
Iteration  20: 424327.000 ops/s
Iteration  21: 408064.897 ops/s
Iteration  22: 424094.157 ops/s
Iteration  23: 414973.083 ops/s
Iteration  24: 420454.204 ops/s
Iteration  25: 439671.950 ops/s
Iteration  26: 409417.653 ops/s
Iteration  27: 437488.238 ops/s
Iteration  28: 421687.707 ops/s
Iteration  29: 409771.082 ops/s
Iteration  30: 445235.712 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableMapTest._Benchmark.benchmark_fusedAsync":
  423480.384 ±(99.9%) 7367.630 ops/s [Average]
  (min, avg, max) = (403884.473, 423480.384, 445235.712), stdev = 11027.523
  CI (99.9%): [416112.754, 430848.015] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt       Score      Error  Units
ObservableMapTest._Benchmark.benchmark_fusedAsync  thrpt   30  423480.384 ± 7367.630  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctTest._Benchmark.benchmark_fusedAsync$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctTest._Benchmark.benchmark_fusedAsync

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.788 ops/s
# Warmup Iteration   2: 33988.722 ops/s
# Warmup Iteration   3: 114680.895 ops/s
# Warmup Iteration   4: 111858.433 ops/s
# Warmup Iteration   5: 146257.170 ops/s
# Warmup Iteration   6: 217256.275 ops/s
# Warmup Iteration   7: 173443.154 ops/s
# Warmup Iteration   8: 532860.651 ops/s
# Warmup Iteration   9: 505944.174 ops/s
# Warmup Iteration  10: 526315.945 ops/s
# Warmup Iteration  11: 514403.332 ops/s
# Warmup Iteration  12: 532760.271 ops/s
# Warmup Iteration  13: 507129.019 ops/s
# Warmup Iteration  14: 519440.089 ops/s
# Warmup Iteration  15: 539521.016 ops/s
# Warmup Iteration  16: 514169.533 ops/s
# Warmup Iteration  17: 517740.166 ops/s
# Warmup Iteration  18: 529852.448 ops/s
# Warmup Iteration  19: 501563.947 ops/s
# Warmup Iteration  20: 527773.394 ops/s
# Warmup Iteration  21: 489194.175 ops/s
# Warmup Iteration  22: 521104.001 ops/s
# Warmup Iteration  23: 534742.231 ops/s
# Warmup Iteration  24: 515162.232 ops/s
# Warmup Iteration  25: 511820.219 ops/s
# Warmup Iteration  26: 529904.403 ops/s
# Warmup Iteration  27: 511459.153 ops/s
# Warmup Iteration  28: 521029.901 ops/s
# Warmup Iteration  29: 540332.077 ops/s
# Warmup Iteration  30: 501119.530 ops/s
Iteration   1: 510244.621 ops/s
Iteration   2: 511283.057 ops/s
Iteration   3: 544894.891 ops/s
Iteration   4: 523592.786 ops/s
Iteration   5: 524068.748 ops/s
Iteration   6: 513102.473 ops/s
Iteration   7: 509229.065 ops/s
Iteration   8: 528082.041 ops/s
Iteration   9: 517846.555 ops/s
Iteration  10: 513975.131 ops/s
Iteration  11: 528317.468 ops/s
Iteration  12: 521003.711 ops/s
Iteration  13: 533048.263 ops/s
Iteration  14: 546208.414 ops/s
Iteration  15: 517043.760 ops/s
Iteration  16: 420764.440 ops/s
Iteration  17: 526868.742 ops/s
Iteration  18: 507371.882 ops/s
Iteration  19: 523588.403 ops/s
Iteration  20: 514028.912 ops/s
Iteration  21: 519258.968 ops/s
Iteration  22: 527341.390 ops/s
Iteration  23: 518493.457 ops/s
Iteration  24: 539030.194 ops/s
Iteration  25: 506282.219 ops/s
Iteration  26: 515519.974 ops/s
Iteration  27: 539265.552 ops/s
Iteration  28: 498552.519 ops/s
Iteration  29: 532391.912 ops/s
Iteration  30: 495600.060 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctTest._Benchmark.benchmark_fusedAsync":
  517543.320 ±(99.9%) 14760.808 ops/s [Average]
  (min, avg, max) = (420764.440, 517543.320, 546208.414), stdev = 22093.284
  CI (99.9%): [502782.513, 532304.128] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score       Error  Units
ObservableDistinctTest._Benchmark.benchmark_fusedAsync  thrpt   30  517543.320 ± 14760.808  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChangedTest._Benchmark.benchmark_fusedAsync$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChangedTest._Benchmark.benchmark_fusedAsync

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.763 ops/s
# Warmup Iteration   2: 25824.293 ops/s
# Warmup Iteration   3: 80328.540 ops/s
# Warmup Iteration   4: 91715.828 ops/s
# Warmup Iteration   5: 95807.767 ops/s
# Warmup Iteration   6: 158125.398 ops/s
# Warmup Iteration   7: 371844.642 ops/s
# Warmup Iteration   8: 395134.731 ops/s
# Warmup Iteration   9: 357351.181 ops/s
# Warmup Iteration  10: 388066.374 ops/s
# Warmup Iteration  11: 387184.562 ops/s
# Warmup Iteration  12: 396724.436 ops/s
# Warmup Iteration  13: 384801.122 ops/s
# Warmup Iteration  14: 372542.127 ops/s
# Warmup Iteration  15: 390943.500 ops/s
# Warmup Iteration  16: 408255.407 ops/s
# Warmup Iteration  17: 393638.198 ops/s
# Warmup Iteration  18: 405174.231 ops/s
# Warmup Iteration  19: 389277.279 ops/s
# Warmup Iteration  20: 395848.638 ops/s
# Warmup Iteration  21: 403646.007 ops/s
# Warmup Iteration  22: 401596.469 ops/s
# Warmup Iteration  23: 381693.219 ops/s
# Warmup Iteration  24: 390551.175 ops/s
# Warmup Iteration  25: 399654.483 ops/s
# Warmup Iteration  26: 414930.080 ops/s
# Warmup Iteration  27: 406454.603 ops/s
# Warmup Iteration  28: 389611.117 ops/s
# Warmup Iteration  29: 409933.551 ops/s
# Warmup Iteration  30: 387600.456 ops/s
Iteration   1: 408404.606 ops/s
Iteration   2: 385115.928 ops/s
Iteration   3: 401208.432 ops/s
Iteration   4: 400250.666 ops/s
Iteration   5: 409717.759 ops/s
Iteration   6: 395897.578 ops/s
Iteration   7: 402516.835 ops/s
Iteration   8: 403115.745 ops/s
Iteration   9: 395047.505 ops/s
Iteration  10: 411252.486 ops/s
Iteration  11: 395422.103 ops/s
Iteration  12: 406693.934 ops/s
Iteration  13: 403665.293 ops/s
Iteration  14: 411743.046 ops/s
Iteration  15: 402546.501 ops/s
Iteration  16: 386941.523 ops/s
Iteration  17: 402102.422 ops/s
Iteration  18: 402548.448 ops/s
Iteration  19: 392226.203 ops/s
Iteration  20: 405757.258 ops/s
Iteration  21: 407535.591 ops/s
Iteration  22: 402620.141 ops/s
Iteration  23: 391513.463 ops/s
Iteration  24: 391646.304 ops/s
Iteration  25: 408327.908 ops/s
Iteration  26: 394325.423 ops/s
Iteration  27: 344903.194 ops/s
Iteration  28: 386264.524 ops/s
Iteration  29: 405307.711 ops/s
Iteration  30: 397270.147 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChangedTest._Benchmark.benchmark_fusedAsync":
  398396.289 ±(99.9%) 8378.367 ops/s [Average]
  (min, avg, max) = (344903.194, 398396.289, 411743.046), stdev = 12540.347
  CI (99.9%): [390017.922, 406774.657] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score      Error  Units
ObservableDistinctUntilChangedTest._Benchmark.benchmark_fusedAsync  thrpt   30  398396.289 ± 8378.367  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDoAfterNextTest._Benchmark.benchmark_asyncFusedConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDoAfterNextTest._Benchmark.benchmark_asyncFusedConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 52095.789 ops/s
# Warmup Iteration   2: 323613.601 ops/s
# Warmup Iteration   3: 804194.147 ops/s
# Warmup Iteration   4: 1101909.371 ops/s
# Warmup Iteration   5: 1184025.434 ops/s
# Warmup Iteration   6: 1001198.691 ops/s
# Warmup Iteration   7: 1131345.527 ops/s
# Warmup Iteration   8: 1150383.560 ops/s
# Warmup Iteration   9: 1155996.320 ops/s
# Warmup Iteration  10: 1179160.242 ops/s
# Warmup Iteration  11: 1203956.597 ops/s
# Warmup Iteration  12: 1120306.634 ops/s
# Warmup Iteration  13: 1198168.389 ops/s
# Warmup Iteration  14: 1171635.522 ops/s
# Warmup Iteration  15: 1167641.612 ops/s
# Warmup Iteration  16: 1147529.818 ops/s
# Warmup Iteration  17: 1224263.772 ops/s
# Warmup Iteration  18: 1130183.025 ops/s
# Warmup Iteration  19: 1162162.122 ops/s
# Warmup Iteration  20: 1169520.414 ops/s
# Warmup Iteration  21: 1206287.615 ops/s
# Warmup Iteration  22: 1171739.207 ops/s
# Warmup Iteration  23: 1163354.419 ops/s
# Warmup Iteration  24: 1152153.339 ops/s
# Warmup Iteration  25: 1166260.518 ops/s
# Warmup Iteration  26: 1147006.269 ops/s
# Warmup Iteration  27: 1170766.685 ops/s
# Warmup Iteration  28: 1143648.179 ops/s
# Warmup Iteration  29: 1186004.696 ops/s
# Warmup Iteration  30: 1114567.029 ops/s
Iteration   1: 1152136.456 ops/s
Iteration   2: 1210977.422 ops/s
Iteration   3: 1117598.955 ops/s
Iteration   4: 1175530.923 ops/s
Iteration   5: 1184621.325 ops/s
Iteration   6: 1148295.403 ops/s
Iteration   7: 1198841.985 ops/s
Iteration   8: 1147083.931 ops/s
Iteration   9: 1210140.169 ops/s
Iteration  10: 1141057.139 ops/s
Iteration  11: 1161275.071 ops/s
Iteration  12: 1193514.604 ops/s
Iteration  13: 1157530.978 ops/s
Iteration  14: 1183569.540 ops/s
Iteration  15: 1168990.802 ops/s
Iteration  16: 1146280.112 ops/s
Iteration  17: 1221260.325 ops/s
Iteration  18: 1125140.066 ops/s
Iteration  19: 1203081.497 ops/s
Iteration  20: 1136862.617 ops/s
Iteration  21: 1191873.669 ops/s
Iteration  22: 1189541.747 ops/s
Iteration  23: 1124476.293 ops/s
Iteration  24: 1218530.885 ops/s
Iteration  25: 1140518.725 ops/s
Iteration  26: 1173438.431 ops/s
Iteration  27: 1136802.207 ops/s
Iteration  28: 1154493.957 ops/s
Iteration  29: 1200006.509 ops/s
Iteration  30: 1140961.014 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableDoAfterNextTest._Benchmark.benchmark_asyncFusedConditional":
  1168481.092 ±(99.9%) 20316.556 ops/s [Average]
  (min, avg, max) = (1117598.955, 1168481.092, 1221260.325), stdev = 30408.867
  CI (99.9%): [1148164.536, 1188797.648] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
ObservableDoAfterNextTest._Benchmark.benchmark_asyncFusedConditional  thrpt   30  1168481.092 ± 20316.556  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFilterTest._Benchmark.benchmark_fusedAsync$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFilterTest._Benchmark.benchmark_fusedAsync

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 225915.878 ops/s
# Warmup Iteration   2: 1096294.278 ops/s
# Warmup Iteration   3: 1836034.332 ops/s
# Warmup Iteration   4: 1749243.649 ops/s
# Warmup Iteration   5: 1771502.434 ops/s
# Warmup Iteration   6: 1780335.330 ops/s
# Warmup Iteration   7: 1713567.538 ops/s
# Warmup Iteration   8: 1842267.244 ops/s
# Warmup Iteration   9: 1652752.211 ops/s
# Warmup Iteration  10: 1629005.117 ops/s
# Warmup Iteration  11: 1808676.598 ops/s
# Warmup Iteration  12: 1808706.588 ops/s
# Warmup Iteration  13: 1815135.139 ops/s
# Warmup Iteration  14: 1844089.494 ops/s
# Warmup Iteration  15: 1751283.561 ops/s
# Warmup Iteration  16: 1909702.702 ops/s
# Warmup Iteration  17: 1812280.993 ops/s
# Warmup Iteration  18: 1743113.654 ops/s
# Warmup Iteration  19: 1882390.429 ops/s
# Warmup Iteration  20: 1734720.943 ops/s
# Warmup Iteration  21: 1839309.462 ops/s
# Warmup Iteration  22: 1856705.053 ops/s
# Warmup Iteration  23: 1754310.625 ops/s
# Warmup Iteration  24: 1845392.745 ops/s
# Warmup Iteration  25: 1722928.444 ops/s
# Warmup Iteration  26: 1877570.701 ops/s
# Warmup Iteration  27: 1842010.954 ops/s
# Warmup Iteration  28: 1699181.709 ops/s
# Warmup Iteration  29: 1824788.415 ops/s
# Warmup Iteration  30: 1747312.279 ops/s
Iteration   1: 1488513.271 ops/s
Iteration   2: 1804961.037 ops/s
Iteration   3: 1754714.751 ops/s
Iteration   4: 1819783.595 ops/s
Iteration   5: 1772748.654 ops/s
Iteration   6: 1811604.100 ops/s
Iteration   7: 1755580.622 ops/s
Iteration   8: 1797208.615 ops/s
Iteration   9: 1877038.619 ops/s
Iteration  10: 1750278.457 ops/s
Iteration  11: 1836935.478 ops/s
Iteration  12: 1798216.427 ops/s
Iteration  13: 1818877.975 ops/s
Iteration  14: 1813462.746 ops/s
Iteration  15: 1775571.776 ops/s
Iteration  16: 1764238.116 ops/s
Iteration  17: 1762513.424 ops/s
Iteration  18: 1875968.494 ops/s
Iteration  19: 1752260.361 ops/s
Iteration  20: 1878924.407 ops/s
Iteration  21: 1775407.214 ops/s
Iteration  22: 1801084.327 ops/s
Iteration  23: 1774399.294 ops/s
Iteration  24: 1812176.322 ops/s
Iteration  25: 1859009.171 ops/s
Iteration  26: 1761677.324 ops/s
Iteration  27: 1749108.889 ops/s
Iteration  28: 1860521.424 ops/s
Iteration  29: 1760268.128 ops/s
Iteration  30: 1816712.779 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFilterTest._Benchmark.benchmark_fusedAsync":
  1789325.527 ±(99.9%) 46631.788 ops/s [Average]
  (min, avg, max) = (1488513.271, 1789325.527, 1878924.407), stdev = 69796.271
  CI (99.9%): [1742693.738, 1835957.315] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
ObservableFilterTest._Benchmark.benchmark_fusedAsync  thrpt   30  1789325.527 ± 46631.788  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableCreateTest._Benchmark.benchmark_nullThrowableSync$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableCreateTest._Benchmark.benchmark_nullThrowableSync

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 135496.577 ops/s
# Warmup Iteration   2: 453455.075 ops/s
# Warmup Iteration   3: 504659.038 ops/s
# Warmup Iteration   4: 527178.706 ops/s
# Warmup Iteration   5: 492409.801 ops/s
# Warmup Iteration   6: 573284.514 ops/s
# Warmup Iteration   7: 544775.947 ops/s
# Warmup Iteration   8: 562915.619 ops/s
# Warmup Iteration   9: 569633.988 ops/s
# Warmup Iteration  10: 544868.829 ops/s
# Warmup Iteration  11: 567592.119 ops/s
# Warmup Iteration  12: 573369.838 ops/s
# Warmup Iteration  13: 541852.094 ops/s
# Warmup Iteration  14: 568509.904 ops/s
# Warmup Iteration  15: 551107.064 ops/s
# Warmup Iteration  16: 565922.183 ops/s
# Warmup Iteration  17: 574888.434 ops/s
# Warmup Iteration  18: 583448.432 ops/s
# Warmup Iteration  19: 582940.285 ops/s
# Warmup Iteration  20: 585266.407 ops/s
# Warmup Iteration  21: 574758.308 ops/s
# Warmup Iteration  22: 581551.410 ops/s
# Warmup Iteration  23: 588917.638 ops/s
# Warmup Iteration  24: 590149.419 ops/s
# Warmup Iteration  25: 579563.217 ops/s
# Warmup Iteration  26: 614550.644 ops/s
# Warmup Iteration  27: 588169.465 ops/s
# Warmup Iteration  28: 581813.983 ops/s
# Warmup Iteration  29: 582975.465 ops/s
# Warmup Iteration  30: 599405.963 ops/s
Iteration   1: 577869.935 ops/s
Iteration   2: 600897.965 ops/s
Iteration   3: 595387.304 ops/s
Iteration   4: 552032.500 ops/s
Iteration   5: 606690.254 ops/s
Iteration   6: 576309.828 ops/s
Iteration   7: 585877.159 ops/s
Iteration   8: 600883.909 ops/s
Iteration   9: 571296.356 ops/s
Iteration  10: 603453.162 ops/s
Iteration  11: 576506.080 ops/s
Iteration  12: 598651.024 ops/s
Iteration  13: 577641.423 ops/s
Iteration  14: 559813.727 ops/s
Iteration  15: 601030.134 ops/s
Iteration  16: 573696.739 ops/s
Iteration  17: 583335.387 ops/s
Iteration  18: 608446.646 ops/s
Iteration  19: 471937.741 ops/s
Iteration  20: 587133.603 ops/s
Iteration  21: 602964.507 ops/s
Iteration  22: 570470.264 ops/s
Iteration  23: 587468.011 ops/s
Iteration  24: 591971.802 ops/s
Iteration  25: 576347.745 ops/s
Iteration  26: 602972.806 ops/s
Iteration  27: 570361.253 ops/s
Iteration  28: 606461.648 ops/s
Iteration  29: 574108.178 ops/s
Iteration  30: 580303.583 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableCreateTest._Benchmark.benchmark_nullThrowableSync":
  582410.689 ±(99.9%) 17145.481 ops/s [Average]
  (min, avg, max) = (471937.741, 582410.689, 608446.646), stdev = 25662.551
  CI (99.9%): [565265.208, 599556.170] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score       Error  Units
ObservableCreateTest._Benchmark.benchmark_nullThrowableSync  thrpt   30  582410.689 ± 17145.481  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableCreateTest._Benchmark.benchmark_nullValueSync$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableCreateTest._Benchmark.benchmark_nullValueSync

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 96083.367 ops/s
# Warmup Iteration   2: 453810.664 ops/s
# Warmup Iteration   3: 578184.473 ops/s
# Warmup Iteration   4: 552415.639 ops/s
# Warmup Iteration   5: 579693.259 ops/s
# Warmup Iteration   6: 545006.550 ops/s
# Warmup Iteration   7: 550493.200 ops/s
# Warmup Iteration   8: 559014.045 ops/s
# Warmup Iteration   9: 565769.268 ops/s
# Warmup Iteration  10: 575095.292 ops/s
# Warmup Iteration  11: 528507.166 ops/s
# Warmup Iteration  12: 570859.630 ops/s
# Warmup Iteration  13: 574145.565 ops/s
# Warmup Iteration  14: 540385.472 ops/s
# Warmup Iteration  15: 583447.141 ops/s
# Warmup Iteration  16: 538300.958 ops/s
# Warmup Iteration  17: 591299.246 ops/s
# Warmup Iteration  18: 594878.826 ops/s
# Warmup Iteration  19: 586007.237 ops/s
# Warmup Iteration  20: 593070.759 ops/s
# Warmup Iteration  21: 556644.084 ops/s
# Warmup Iteration  22: 588784.670 ops/s
# Warmup Iteration  23: 557875.952 ops/s
# Warmup Iteration  24: 579602.584 ops/s
# Warmup Iteration  25: 619233.153 ops/s
# Warmup Iteration  26: 583915.602 ops/s
# Warmup Iteration  27: 605982.506 ops/s
# Warmup Iteration  28: 600546.068 ops/s
# Warmup Iteration  29: 587473.005 ops/s
# Warmup Iteration  30: 604037.817 ops/s
Iteration   1: 584060.341 ops/s
Iteration   2: 590573.725 ops/s
Iteration   3: 591720.664 ops/s
Iteration   4: 600881.344 ops/s
Iteration   5: 576452.462 ops/s
Iteration   6: 604041.357 ops/s
Iteration   7: 615298.928 ops/s
Iteration   8: 584039.476 ops/s
Iteration   9: 613887.827 ops/s
Iteration  10: 597748.646 ops/s
Iteration  11: 605860.228 ops/s
Iteration  12: 613848.352 ops/s
Iteration  13: 577010.253 ops/s
Iteration  14: 594168.227 ops/s
Iteration  15: 597630.446 ops/s
Iteration  16: 594522.337 ops/s
Iteration  17: 620012.876 ops/s
Iteration  18: 592370.844 ops/s
Iteration  19: 589005.723 ops/s
Iteration  20: 609376.277 ops/s
Iteration  21: 589624.405 ops/s
Iteration  22: 589295.854 ops/s
Iteration  23: 603918.968 ops/s
Iteration  24: 580415.068 ops/s
Iteration  25: 613188.254 ops/s
Iteration  26: 581923.491 ops/s
Iteration  27: 569242.996 ops/s
Iteration  28: 604391.653 ops/s
Iteration  29: 584442.747 ops/s
Iteration  30: 602554.725 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableCreateTest._Benchmark.benchmark_nullValueSync":
  595716.950 ±(99.9%) 8726.080 ops/s [Average]
  (min, avg, max) = (569242.996, 595716.950, 620012.876), stdev = 13060.786
  CI (99.9%): [586990.870, 604443.030] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score      Error  Units
ObservableCreateTest._Benchmark.benchmark_nullValueSync  thrpt   30  595716.950 ± 8726.080  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDoFinallyTest._Benchmark.benchmark_asyncFusedBoundary$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDoFinallyTest._Benchmark.benchmark_asyncFusedBoundary

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 179846.286 ops/s
# Warmup Iteration   2: 876404.642 ops/s
# Warmup Iteration   3: 1452183.403 ops/s
# Warmup Iteration   4: 1603103.944 ops/s
# Warmup Iteration   5: 1779286.693 ops/s
# Warmup Iteration   6: 1749249.771 ops/s
# Warmup Iteration   7: 1782046.705 ops/s
# Warmup Iteration   8: 1662136.932 ops/s
# Warmup Iteration   9: 1690908.462 ops/s
# Warmup Iteration  10: 1701453.493 ops/s
# Warmup Iteration  11: 1712253.680 ops/s
# Warmup Iteration  12: 1682294.525 ops/s
# Warmup Iteration  13: 1720783.100 ops/s
# Warmup Iteration  14: 1666920.255 ops/s
# Warmup Iteration  15: 1686449.351 ops/s
# Warmup Iteration  16: 1666867.702 ops/s
# Warmup Iteration  17: 1670684.436 ops/s
# Warmup Iteration  18: 1746648.285 ops/s
# Warmup Iteration  19: 1694048.874 ops/s
# Warmup Iteration  20: 1787613.442 ops/s
# Warmup Iteration  21: 1680121.206 ops/s
# Warmup Iteration  22: 1699095.825 ops/s
# Warmup Iteration  23: 1709552.804 ops/s
# Warmup Iteration  24: 1669042.120 ops/s
# Warmup Iteration  25: 1732657.758 ops/s
# Warmup Iteration  26: 1678412.975 ops/s
# Warmup Iteration  27: 1655366.644 ops/s
# Warmup Iteration  28: 1782577.711 ops/s
# Warmup Iteration  29: 1660884.122 ops/s
# Warmup Iteration  30: 1720782.294 ops/s
Iteration   1: 1683113.158 ops/s
Iteration   2: 1720432.102 ops/s
Iteration   3: 1708881.110 ops/s
Iteration   4: 1668969.752 ops/s
Iteration   5: 1746638.865 ops/s
Iteration   6: 1683141.898 ops/s
Iteration   7: 1730345.842 ops/s
Iteration   8: 1793758.942 ops/s
Iteration   9: 1636956.815 ops/s
Iteration  10: 1723794.580 ops/s
Iteration  11: 1773872.970 ops/s
Iteration  12: 1636102.289 ops/s
Iteration  13: 1710262.618 ops/s
Iteration  14: 1340004.484 ops/s
Iteration  15: 1721137.178 ops/s
Iteration  16: 1748080.038 ops/s
Iteration  17: 1632753.290 ops/s
Iteration  18: 1764859.432 ops/s
Iteration  19: 1641191.802 ops/s
Iteration  20: 1735229.892 ops/s
Iteration  21: 1673295.358 ops/s
Iteration  22: 1693131.214 ops/s
Iteration  23: 1721656.745 ops/s
Iteration  24: 1683706.109 ops/s
Iteration  25: 1733757.291 ops/s
Iteration  26: 1727810.339 ops/s
Iteration  27: 1707557.639 ops/s
Iteration  28: 1651581.194 ops/s
Iteration  29: 1721240.550 ops/s
Iteration  30: 1774724.903 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableDoFinallyTest._Benchmark.benchmark_asyncFusedBoundary":
  1696266.280 ±(99.9%) 53407.425 ops/s [Average]
  (min, avg, max) = (1340004.484, 1696266.280, 1793758.942), stdev = 79937.725
  CI (99.9%): [1642858.855, 1749673.705] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
ObservableDoFinallyTest._Benchmark.benchmark_asyncFusedBoundary  thrpt   30  1696266.280 ± 53407.425  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDoFinallyTest._Benchmark.benchmark_asyncFused$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDoFinallyTest._Benchmark.benchmark_asyncFused

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 249829.036 ops/s
# Warmup Iteration   2: 895070.953 ops/s
# Warmup Iteration   3: 1507822.723 ops/s
# Warmup Iteration   4: 1597671.910 ops/s
# Warmup Iteration   5: 1704518.534 ops/s
# Warmup Iteration   6: 1673973.169 ops/s
# Warmup Iteration   7: 1716470.747 ops/s
# Warmup Iteration   8: 1649536.218 ops/s
# Warmup Iteration   9: 1643019.350 ops/s
# Warmup Iteration  10: 1704688.177 ops/s
# Warmup Iteration  11: 1732247.913 ops/s
# Warmup Iteration  12: 1684065.495 ops/s
# Warmup Iteration  13: 1712344.316 ops/s
# Warmup Iteration  14: 1672313.542 ops/s
# Warmup Iteration  15: 1705152.495 ops/s
# Warmup Iteration  16: 1660656.649 ops/s
# Warmup Iteration  17: 1646743.629 ops/s
# Warmup Iteration  18: 1694077.296 ops/s
# Warmup Iteration  19: 1722857.378 ops/s
# Warmup Iteration  20: 1663686.600 ops/s
# Warmup Iteration  21: 1688273.300 ops/s
# Warmup Iteration  22: 1659681.674 ops/s
# Warmup Iteration  23: 1711358.365 ops/s
# Warmup Iteration  24: 1681280.200 ops/s
# Warmup Iteration  25: 1628406.144 ops/s
# Warmup Iteration  26: 1771995.238 ops/s
# Warmup Iteration  27: 1680333.038 ops/s
# Warmup Iteration  28: 1639042.722 ops/s
# Warmup Iteration  29: 1750359.270 ops/s
# Warmup Iteration  30: 1638972.950 ops/s
Iteration   1: 1705986.468 ops/s
Iteration   2: 1656590.297 ops/s
Iteration   3: 1712925.406 ops/s
Iteration   4: 1699734.475 ops/s
Iteration   5: 1641745.412 ops/s
Iteration   6: 1747226.664 ops/s
Iteration   7: 1646841.956 ops/s
Iteration   8: 1732520.512 ops/s
Iteration   9: 1664189.893 ops/s
Iteration  10: 1692086.400 ops/s
Iteration  11: 1665277.197 ops/s
Iteration  12: 1676994.484 ops/s
Iteration  13: 1750316.474 ops/s
Iteration  14: 1658590.345 ops/s
Iteration  15: 1620586.531 ops/s
Iteration  16: 1724776.160 ops/s
Iteration  17: 1642462.926 ops/s
Iteration  18: 1657783.170 ops/s
Iteration  19: 1737114.539 ops/s
Iteration  20: 1610838.294 ops/s
Iteration  21: 1741991.516 ops/s
Iteration  22: 1689272.666 ops/s
Iteration  23: 1760495.376 ops/s
Iteration  24: 1732541.383 ops/s
Iteration  25: 1640946.405 ops/s
Iteration  26: 1721514.470 ops/s
Iteration  27: 1694914.172 ops/s
Iteration  28: 1666379.573 ops/s
Iteration  29: 1691529.738 ops/s
Iteration  30: 1653085.600 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableDoFinallyTest._Benchmark.benchmark_asyncFused":
  1687908.617 ±(99.9%) 27700.679 ops/s [Average]
  (min, avg, max) = (1610838.294, 1687908.617, 1760495.376), stdev = 41461.075
  CI (99.9%): [1660207.938, 1715609.295] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
ObservableDoFinallyTest._Benchmark.benchmark_asyncFused  thrpt   30  1687908.617 ± 27700.679  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableMapOptionalTest._Benchmark.benchmark_boundaryFusedNone$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableMapOptionalTest._Benchmark.benchmark_boundaryFusedNone

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 178632.413 ops/s
# Warmup Iteration   2: 1167495.082 ops/s
# Warmup Iteration   3: 1866219.813 ops/s
# Warmup Iteration   4: 2125184.087 ops/s
# Warmup Iteration   5: 2008523.943 ops/s
# Warmup Iteration   6: 2064811.505 ops/s
# Warmup Iteration   7: 2093410.611 ops/s
# Warmup Iteration   8: 2104707.743 ops/s
# Warmup Iteration   9: 2049847.735 ops/s
# Warmup Iteration  10: 2105908.193 ops/s
# Warmup Iteration  11: 2007662.942 ops/s
# Warmup Iteration  12: 2054955.104 ops/s
# Warmup Iteration  13: 2091979.528 ops/s
# Warmup Iteration  14: 2015776.608 ops/s
# Warmup Iteration  15: 2133421.364 ops/s
# Warmup Iteration  16: 2147399.227 ops/s
# Warmup Iteration  17: 2077361.859 ops/s
# Warmup Iteration  18: 1995342.491 ops/s
# Warmup Iteration  19: 2035688.999 ops/s
# Warmup Iteration  20: 2114120.681 ops/s
# Warmup Iteration  21: 2043556.827 ops/s
# Warmup Iteration  22: 2174524.728 ops/s
# Warmup Iteration  23: 2091397.301 ops/s
# Warmup Iteration  24: 2012089.333 ops/s
# Warmup Iteration  25: 2141800.022 ops/s
# Warmup Iteration  26: 2038608.890 ops/s
# Warmup Iteration  27: 2096673.599 ops/s
# Warmup Iteration  28: 2012982.547 ops/s
# Warmup Iteration  29: 2069251.180 ops/s
# Warmup Iteration  30: 2109947.335 ops/s
Iteration   1: 2037923.672 ops/s
Iteration   2: 2136389.618 ops/s
Iteration   3: 2037025.834 ops/s
Iteration   4: 2016802.203 ops/s
Iteration   5: 2095534.602 ops/s
Iteration   6: 2091553.082 ops/s
Iteration   7: 2120916.639 ops/s
Iteration   8: 1774380.160 ops/s
Iteration   9: 1947382.185 ops/s
Iteration  10: 2095750.510 ops/s
Iteration  11: 2084544.840 ops/s
Iteration  12: 2117230.371 ops/s
Iteration  13: 1977968.486 ops/s
Iteration  14: 2081068.888 ops/s
Iteration  15: 2031940.998 ops/s
Iteration  16: 2048826.710 ops/s
Iteration  17: 2129357.081 ops/s
Iteration  18: 2065598.354 ops/s
Iteration  19: 2088824.651 ops/s
Iteration  20: 1984323.686 ops/s
Iteration  21: 2143218.057 ops/s
Iteration  22: 2027036.965 ops/s
Iteration  23: 2105322.127 ops/s
Iteration  24: 2072878.009 ops/s
Iteration  25: 2071911.785 ops/s
Iteration  26: 2022835.288 ops/s
Iteration  27: 2072471.840 ops/s
Iteration  28: 2160869.097 ops/s
Iteration  29: 2069995.612 ops/s
Iteration  30: 2067506.197 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableMapOptionalTest._Benchmark.benchmark_boundaryFusedNone":
  2059246.252 ±(99.9%) 48972.388 ops/s [Average]
  (min, avg, max) = (1774380.160, 2059246.252, 2160869.097), stdev = 73299.570
  CI (99.9%): [2010273.864, 2108218.639] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
ObservableMapOptionalTest._Benchmark.benchmark_boundaryFusedNone  thrpt   30  2059246.252 ± 48972.388  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableMapOptionalTest._Benchmark.benchmark_boundaryFusedNoneConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableMapOptionalTest._Benchmark.benchmark_boundaryFusedNoneConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 176541.910 ops/s
# Warmup Iteration   2: 930035.230 ops/s
# Warmup Iteration   3: 1744896.691 ops/s
# Warmup Iteration   4: 2051289.761 ops/s
# Warmup Iteration   5: 1966176.812 ops/s
# Warmup Iteration   6: 2010118.709 ops/s
# Warmup Iteration   7: 2025531.406 ops/s
# Warmup Iteration   8: 1923685.470 ops/s
# Warmup Iteration   9: 2030678.188 ops/s
# Warmup Iteration  10: 2015726.306 ops/s
# Warmup Iteration  11: 1945748.232 ops/s
# Warmup Iteration  12: 1950006.771 ops/s
# Warmup Iteration  13: 2052091.485 ops/s
# Warmup Iteration  14: 1967449.384 ops/s
# Warmup Iteration  15: 2001626.869 ops/s
# Warmup Iteration  16: 1930687.879 ops/s
# Warmup Iteration  17: 1993913.279 ops/s
# Warmup Iteration  18: 2106446.474 ops/s
# Warmup Iteration  19: 1987200.398 ops/s
# Warmup Iteration  20: 2036714.803 ops/s
# Warmup Iteration  21: 1978749.713 ops/s
# Warmup Iteration  22: 2062349.022 ops/s
# Warmup Iteration  23: 1959298.008 ops/s
# Warmup Iteration  24: 2003145.117 ops/s
# Warmup Iteration  25: 2021218.113 ops/s
# Warmup Iteration  26: 1966280.324 ops/s
# Warmup Iteration  27: 1999175.754 ops/s
# Warmup Iteration  28: 1943641.917 ops/s
# Warmup Iteration  29: 2013810.119 ops/s
# Warmup Iteration  30: 2025318.885 ops/s
Iteration   1: 1899140.263 ops/s
Iteration   2: 2017194.052 ops/s
Iteration   3: 2001960.660 ops/s
Iteration   4: 1972427.998 ops/s
Iteration   5: 2046108.954 ops/s
Iteration   6: 1995353.455 ops/s
Iteration   7: 1968999.964 ops/s
Iteration   8: 2071462.554 ops/s
Iteration   9: 1953045.870 ops/s
Iteration  10: 2082666.285 ops/s
Iteration  11: 1923648.019 ops/s
Iteration  12: 2023946.333 ops/s
Iteration  13: 2080506.743 ops/s
Iteration  14: 1953019.424 ops/s
Iteration  15: 2027342.432 ops/s
Iteration  16: 2093100.172 ops/s
Iteration  17: 1980194.338 ops/s
Iteration  18: 2039329.076 ops/s
Iteration  19: 1979957.423 ops/s
Iteration  20: 2005815.192 ops/s
Iteration  21: 1964032.394 ops/s
Iteration  22: 1964904.424 ops/s
Iteration  23: 2012808.484 ops/s
Iteration  24: 2088607.435 ops/s
Iteration  25: 1968350.941 ops/s
Iteration  26: 2080740.073 ops/s
Iteration  27: 1960122.687 ops/s
Iteration  28: 1931341.940 ops/s
Iteration  29: 1938152.902 ops/s
Iteration  30: 2028033.753 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableMapOptionalTest._Benchmark.benchmark_boundaryFusedNoneConditional":
  2001743.808 ±(99.9%) 36011.665 ops/s [Average]
  (min, avg, max) = (1899140.263, 2001743.808, 2093100.172), stdev = 53900.569
  CI (99.9%): [1965732.143, 2037755.473] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score       Error  Units
ObservableMapOptionalTest._Benchmark.benchmark_boundaryFusedNoneConditional  thrpt   30  2001743.808 ± 36011.665  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableFlatMapStreamTest._Benchmark.benchmark_asyncUpstreamFused$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableFlatMapStreamTest._Benchmark.benchmark_asyncUpstreamFused

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 144645.664 ops/s
# Warmup Iteration   2: 720558.686 ops/s
# Warmup Iteration   3: 1701794.605 ops/s
# Warmup Iteration   4: 2074720.678 ops/s
# Warmup Iteration   5: 2268811.040 ops/s
# Warmup Iteration   6: 2099571.981 ops/s
# Warmup Iteration   7: 2093638.381 ops/s
# Warmup Iteration   8: 2211979.157 ops/s
# Warmup Iteration   9: 2197043.912 ops/s
# Warmup Iteration  10: 2125970.397 ops/s
# Warmup Iteration  11: 2170065.419 ops/s
# Warmup Iteration  12: 2193150.711 ops/s
# Warmup Iteration  13: 2234033.496 ops/s
# Warmup Iteration  14: 2198885.024 ops/s
# Warmup Iteration  15: 2233741.191 ops/s
# Warmup Iteration  16: 2185530.406 ops/s
# Warmup Iteration  17: 2200725.853 ops/s
# Warmup Iteration  18: 2258390.693 ops/s
# Warmup Iteration  19: 2130753.381 ops/s
# Warmup Iteration  20: 2246225.608 ops/s
# Warmup Iteration  21: 2157468.249 ops/s
# Warmup Iteration  22: 2311751.335 ops/s
# Warmup Iteration  23: 2162329.591 ops/s
# Warmup Iteration  24: 2115670.665 ops/s
# Warmup Iteration  25: 2267240.958 ops/s
# Warmup Iteration  26: 2093623.069 ops/s
# Warmup Iteration  27: 2156523.982 ops/s
# Warmup Iteration  28: 2231474.221 ops/s
# Warmup Iteration  29: 2172496.377 ops/s
# Warmup Iteration  30: 2225072.998 ops/s
Iteration   1: 2186483.761 ops/s
Iteration   2: 2212623.762 ops/s
Iteration   3: 1686080.847 ops/s
Iteration   4: 2151106.588 ops/s
Iteration   5: 2276506.714 ops/s
Iteration   6: 2094145.021 ops/s
Iteration   7: 2282736.803 ops/s
Iteration   8: 2176804.623 ops/s
Iteration   9: 2160420.934 ops/s
Iteration  10: 2276313.990 ops/s
Iteration  11: 2180612.520 ops/s
Iteration  12: 2252829.383 ops/s
Iteration  13: 2066076.297 ops/s
Iteration  14: 2305804.412 ops/s
Iteration  15: 2298329.773 ops/s
Iteration  16: 2165652.410 ops/s
Iteration  17: 2249057.290 ops/s
Iteration  18: 2219000.131 ops/s
Iteration  19: 2159420.422 ops/s
Iteration  20: 2154406.344 ops/s
Iteration  21: 2147639.030 ops/s
Iteration  22: 2214770.024 ops/s
Iteration  23: 2199385.176 ops/s
Iteration  24: 2270439.835 ops/s
Iteration  25: 2167165.103 ops/s
Iteration  26: 2186493.328 ops/s
Iteration  27: 2309506.355 ops/s
Iteration  28: 2139324.031 ops/s
Iteration  29: 2279544.999 ops/s
Iteration  30: 2205362.183 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableFlatMapStreamTest._Benchmark.benchmark_asyncUpstreamFused":
  2189134.736 ±(99.9%) 76074.142 ops/s [Average]
  (min, avg, max) = (1686080.847, 2189134.736, 2309506.355), stdev = 113864.203
  CI (99.9%): [2113060.595, 2265208.878] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
ObservableFlatMapStreamTest._Benchmark.benchmark_asyncUpstreamFused  thrpt   30  2189134.736 ± 76074.142  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDoAfterNextTest._Benchmark.benchmark_asyncFused$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDoAfterNextTest._Benchmark.benchmark_asyncFused

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 105686.598 ops/s
# Warmup Iteration   2: 701389.762 ops/s
# Warmup Iteration   3: 1256159.633 ops/s
# Warmup Iteration   4: 1143737.278 ops/s
# Warmup Iteration   5: 1265335.608 ops/s
# Warmup Iteration   6: 1300817.518 ops/s
# Warmup Iteration   7: 1294615.015 ops/s
# Warmup Iteration   8: 1361545.816 ops/s
# Warmup Iteration   9: 1252423.961 ops/s
# Warmup Iteration  10: 1280114.375 ops/s
# Warmup Iteration  11: 1281870.195 ops/s
# Warmup Iteration  12: 1339525.857 ops/s
# Warmup Iteration  13: 1247048.762 ops/s
# Warmup Iteration  14: 1306041.038 ops/s
# Warmup Iteration  15: 1256218.424 ops/s
# Warmup Iteration  16: 1334053.919 ops/s
# Warmup Iteration  17: 1235723.874 ops/s
# Warmup Iteration  18: 1270950.844 ops/s
# Warmup Iteration  19: 1277034.567 ops/s
# Warmup Iteration  20: 1253404.866 ops/s
# Warmup Iteration  21: 1259969.489 ops/s
# Warmup Iteration  22: 1247216.013 ops/s
# Warmup Iteration  23: 1249499.733 ops/s
# Warmup Iteration  24: 1248369.737 ops/s
# Warmup Iteration  25: 1267890.429 ops/s
# Warmup Iteration  26: 1262419.823 ops/s
# Warmup Iteration  27: 1304605.486 ops/s
# Warmup Iteration  28: 1263151.795 ops/s
# Warmup Iteration  29: 1267753.803 ops/s
# Warmup Iteration  30: 1298390.366 ops/s
Iteration   1: 1287106.533 ops/s
Iteration   2: 1041470.060 ops/s
Iteration   3: 1230175.932 ops/s
Iteration   4: 1287728.891 ops/s
Iteration   5: 1279971.500 ops/s
Iteration   6: 1226756.941 ops/s
Iteration   7: 1300400.208 ops/s
Iteration   8: 1237734.347 ops/s
Iteration   9: 1245407.099 ops/s
Iteration  10: 1291298.414 ops/s
Iteration  11: 1226409.106 ops/s
Iteration  12: 1275578.905 ops/s
Iteration  13: 1257544.130 ops/s
Iteration  14: 1253730.843 ops/s
Iteration  15: 1277480.296 ops/s
Iteration  16: 1228923.951 ops/s
Iteration  17: 1259175.146 ops/s
Iteration  18: 1277617.260 ops/s
Iteration  19: 1233317.245 ops/s
Iteration  20: 1298406.111 ops/s
Iteration  21: 1257485.066 ops/s
Iteration  22: 1265042.897 ops/s
Iteration  23: 1271757.299 ops/s
Iteration  24: 1261149.791 ops/s
Iteration  25: 1246227.383 ops/s
Iteration  26: 1286546.230 ops/s
Iteration  27: 1208796.844 ops/s
Iteration  28: 1281815.149 ops/s
Iteration  29: 1234675.226 ops/s
Iteration  30: 1275466.622 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableDoAfterNextTest._Benchmark.benchmark_asyncFused":
  1253506.514 ±(99.9%) 31371.043 ops/s [Average]
  (min, avg, max) = (1041470.060, 1253506.514, 1300400.208), stdev = 46954.704
  CI (99.9%): [1222135.471, 1284877.557] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
ObservableDoAfterNextTest._Benchmark.benchmark_asyncFused  thrpt   30  1253506.514 ± 31371.043  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.BlockingObservableToIteratorTest._Benchmark.benchmark_emptyThrowsNoSuch$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.BlockingObservableToIteratorTest._Benchmark.benchmark_emptyThrowsNoSuch

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 428064.235 ops/s
# Warmup Iteration   2: 517277.700 ops/s
# Warmup Iteration   3: 594615.838 ops/s
# Warmup Iteration   4: 579282.438 ops/s
# Warmup Iteration   5: 650272.418 ops/s
# Warmup Iteration   6: 618176.840 ops/s
# Warmup Iteration   7: 636654.689 ops/s
# Warmup Iteration   8: 635055.190 ops/s
# Warmup Iteration   9: 644332.958 ops/s
# Warmup Iteration  10: 640281.318 ops/s
# Warmup Iteration  11: 601177.441 ops/s
# Warmup Iteration  12: 635515.176 ops/s
# Warmup Iteration  13: 641802.722 ops/s
# Warmup Iteration  14: 633184.066 ops/s
# Warmup Iteration  15: 653576.867 ops/s
# Warmup Iteration  16: 627130.531 ops/s
# Warmup Iteration  17: 681724.595 ops/s
# Warmup Iteration  18: 674521.077 ops/s
# Warmup Iteration  19: 650600.375 ops/s
# Warmup Iteration  20: 694033.161 ops/s
# Warmup Iteration  21: 650912.977 ops/s
# Warmup Iteration  22: 692230.294 ops/s
# Warmup Iteration  23: 654158.504 ops/s
# Warmup Iteration  24: 658216.901 ops/s
# Warmup Iteration  25: 701526.938 ops/s
# Warmup Iteration  26: 695035.128 ops/s
# Warmup Iteration  27: 670774.584 ops/s
# Warmup Iteration  28: 663593.531 ops/s
# Warmup Iteration  29: 701678.423 ops/s
# Warmup Iteration  30: 666164.593 ops/s
Iteration   1: 649490.830 ops/s
Iteration   2: 556133.925 ops/s
Iteration   3: 683480.683 ops/s
Iteration   4: 682640.313 ops/s
Iteration   5: 662404.335 ops/s
Iteration   6: 680609.067 ops/s
Iteration   7: 654874.339 ops/s
Iteration   8: 671694.878 ops/s
Iteration   9: 679625.435 ops/s
Iteration  10: 658419.758 ops/s
Iteration  11: 671327.113 ops/s
Iteration  12: 660667.111 ops/s
Iteration  13: 688765.872 ops/s
Iteration  14: 647578.639 ops/s
Iteration  15: 664607.511 ops/s
Iteration  16: 686839.518 ops/s
Iteration  17: 678989.803 ops/s
Iteration  18: 700808.134 ops/s
Iteration  19: 647125.309 ops/s
Iteration  20: 688190.542 ops/s
Iteration  21: 660926.484 ops/s
Iteration  22: 657553.428 ops/s
Iteration  23: 681219.488 ops/s
Iteration  24: 657749.702 ops/s
Iteration  25: 674745.947 ops/s
Iteration  26: 676959.181 ops/s
Iteration  27: 643666.257 ops/s
Iteration  28: 675625.741 ops/s
Iteration  29: 648281.390 ops/s
Iteration  30: 681800.673 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.BlockingObservableToIteratorTest._Benchmark.benchmark_emptyThrowsNoSuch":
  665760.047 ±(99.9%) 17046.098 ops/s [Average]
  (min, avg, max) = (556133.925, 665760.047, 700808.134), stdev = 25513.798
  CI (99.9%): [648713.949, 682806.145] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score       Error  Units
BlockingObservableToIteratorTest._Benchmark.benchmark_emptyThrowsNoSuch  thrpt   30  665760.047 ± 17046.098  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.BlockingObservableToIteratorTest._Benchmark.benchmark_interruptWait$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.BlockingObservableToIteratorTest._Benchmark.benchmark_interruptWait

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 158419.967 ops/s
# Warmup Iteration   2: 250370.332 ops/s
# Warmup Iteration   3: 300227.580 ops/s
# Warmup Iteration   4: 297185.094 ops/s
# Warmup Iteration   5: 293841.867 ops/s
# Warmup Iteration   6: 309474.697 ops/s
# Warmup Iteration   7: 303966.358 ops/s
# Warmup Iteration   8: 291678.389 ops/s
# Warmup Iteration   9: 287877.907 ops/s
# Warmup Iteration  10: 304170.621 ops/s
# Warmup Iteration  11: 302365.199 ops/s
# Warmup Iteration  12: 289094.699 ops/s
# Warmup Iteration  13: 297893.880 ops/s
# Warmup Iteration  14: 288652.711 ops/s
# Warmup Iteration  15: 305818.091 ops/s
# Warmup Iteration  16: 307163.546 ops/s
# Warmup Iteration  17: 311965.708 ops/s
# Warmup Iteration  18: 283906.406 ops/s
# Warmup Iteration  19: 321800.983 ops/s
# Warmup Iteration  20: 312545.651 ops/s
# Warmup Iteration  21: 317631.450 ops/s
# Warmup Iteration  22: 320113.499 ops/s
# Warmup Iteration  23: 315007.124 ops/s
# Warmup Iteration  24: 312132.156 ops/s
# Warmup Iteration  25: 318435.334 ops/s
# Warmup Iteration  26: 310213.364 ops/s
# Warmup Iteration  27: 315870.712 ops/s
# Warmup Iteration  28: 324075.154 ops/s
# Warmup Iteration  29: 306131.125 ops/s
# Warmup Iteration  30: 312653.528 ops/s
Iteration   1: 305588.085 ops/s
Iteration   2: 324832.034 ops/s
Iteration   3: 307183.467 ops/s
Iteration   4: 321820.674 ops/s
Iteration   5: 313181.081 ops/s
Iteration   6: 239064.969 ops/s
Iteration   7: 321356.839 ops/s
Iteration   8: 304607.880 ops/s
Iteration   9: 317233.591 ops/s
Iteration  10: 308344.225 ops/s
Iteration  11: 316506.435 ops/s
Iteration  12: 315777.942 ops/s
Iteration  13: 302816.956 ops/s
Iteration  14: 304946.304 ops/s
Iteration  15: 310399.464 ops/s
Iteration  16: 322118.430 ops/s
Iteration  17: 307351.595 ops/s
Iteration  18: 330728.073 ops/s
Iteration  19: 314874.908 ops/s
Iteration  20: 309243.474 ops/s
Iteration  21: 324893.229 ops/s
Iteration  22: 302324.809 ops/s
Iteration  23: 320395.295 ops/s
Iteration  24: 313583.056 ops/s
Iteration  25: 313020.305 ops/s
Iteration  26: 324298.776 ops/s
Iteration  27: 300273.979 ops/s
Iteration  28: 312758.790 ops/s
Iteration  29: 304821.062 ops/s
Iteration  30: 323257.310 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.BlockingObservableToIteratorTest._Benchmark.benchmark_interruptWait":
  311253.435 ±(99.9%) 10582.610 ops/s [Average]
  (min, avg, max) = (239064.969, 311253.435, 330728.073), stdev = 15839.554
  CI (99.9%): [300670.824, 321836.045] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score       Error  Units
BlockingObservableToIteratorTest._Benchmark.benchmark_interruptWait  thrpt   30  311253.435 ± 10582.610  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableMapOptionalTest._Benchmark.benchmark_boundaryFusedMixed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableMapOptionalTest._Benchmark.benchmark_boundaryFusedMixed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 128728.925 ops/s
# Warmup Iteration   2: 831750.350 ops/s
# Warmup Iteration   3: 1090026.706 ops/s
# Warmup Iteration   4: 1262793.701 ops/s
# Warmup Iteration   5: 1300252.480 ops/s
# Warmup Iteration   6: 1290338.773 ops/s
# Warmup Iteration   7: 1327721.204 ops/s
# Warmup Iteration   8: 1320940.150 ops/s
# Warmup Iteration   9: 1279006.075 ops/s
# Warmup Iteration  10: 1232158.748 ops/s
# Warmup Iteration  11: 1315999.524 ops/s
# Warmup Iteration  12: 1315019.216 ops/s
# Warmup Iteration  13: 1285345.607 ops/s
# Warmup Iteration  14: 1275397.783 ops/s
# Warmup Iteration  15: 1280693.856 ops/s
# Warmup Iteration  16: 1293693.828 ops/s
# Warmup Iteration  17: 1233504.345 ops/s
# Warmup Iteration  18: 1272120.901 ops/s
# Warmup Iteration  19: 1323255.084 ops/s
# Warmup Iteration  20: 1264317.391 ops/s
# Warmup Iteration  21: 1310148.157 ops/s
# Warmup Iteration  22: 1307655.901 ops/s
# Warmup Iteration  23: 1300768.915 ops/s
# Warmup Iteration  24: 1349096.738 ops/s
# Warmup Iteration  25: 1257039.302 ops/s
# Warmup Iteration  26: 1325980.328 ops/s
# Warmup Iteration  27: 1261194.925 ops/s
# Warmup Iteration  28: 1328298.369 ops/s
# Warmup Iteration  29: 1245946.234 ops/s
# Warmup Iteration  30: 1329068.905 ops/s
Iteration   1: 1326153.406 ops/s
Iteration   2: 1333549.516 ops/s
Iteration   3: 1322339.179 ops/s
Iteration   4: 1309225.871 ops/s
Iteration   5: 1251381.715 ops/s
Iteration   6: 1307360.344 ops/s
Iteration   7: 1112968.792 ops/s
Iteration   8: 1299495.840 ops/s
Iteration   9: 1321174.916 ops/s
Iteration  10: 1307496.671 ops/s
Iteration  11: 1351070.120 ops/s
Iteration  12: 1287877.849 ops/s
Iteration  13: 1287314.639 ops/s
Iteration  14: 1310507.017 ops/s
Iteration  15: 1287926.492 ops/s
Iteration  16: 1307939.250 ops/s
Iteration  17: 1319572.543 ops/s
Iteration  18: 1293665.469 ops/s
Iteration  19: 1275866.785 ops/s
Iteration  20: 1289951.590 ops/s
Iteration  21: 1277065.484 ops/s
Iteration  22: 1311402.373 ops/s
Iteration  23: 1259522.690 ops/s
Iteration  24: 1297028.343 ops/s
Iteration  25: 1332700.365 ops/s
Iteration  26: 1271217.507 ops/s
Iteration  27: 1372328.908 ops/s
Iteration  28: 1300355.973 ops/s
Iteration  29: 1322806.240 ops/s
Iteration  30: 1261951.415 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableMapOptionalTest._Benchmark.benchmark_boundaryFusedMixed":
  1296973.910 ±(99.9%) 29297.486 ops/s [Average]
  (min, avg, max) = (1112968.792, 1296973.910, 1372328.908), stdev = 43851.101
  CI (99.9%): [1267676.424, 1326271.396] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
ObservableMapOptionalTest._Benchmark.benchmark_boundaryFusedMixed  thrpt   30  1296973.910 ± 29297.486  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableMapOptionalTest._Benchmark.benchmark_boundaryFusedAll$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableMapOptionalTest._Benchmark.benchmark_boundaryFusedAll

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 175134.363 ops/s
# Warmup Iteration   2: 840059.830 ops/s
# Warmup Iteration   3: 1362826.536 ops/s
# Warmup Iteration   4: 1627505.195 ops/s
# Warmup Iteration   5: 1773999.989 ops/s
# Warmup Iteration   6: 1620677.054 ops/s
# Warmup Iteration   7: 1720508.219 ops/s
# Warmup Iteration   8: 1644538.642 ops/s
# Warmup Iteration   9: 1669821.761 ops/s
# Warmup Iteration  10: 1719440.103 ops/s
# Warmup Iteration  11: 1776905.379 ops/s
# Warmup Iteration  12: 1688389.780 ops/s
# Warmup Iteration  13: 1777944.110 ops/s
# Warmup Iteration  14: 1634050.544 ops/s
# Warmup Iteration  15: 1775668.993 ops/s
# Warmup Iteration  16: 1807907.015 ops/s
# Warmup Iteration  17: 1690725.740 ops/s
# Warmup Iteration  18: 1710474.480 ops/s
# Warmup Iteration  19: 1735819.418 ops/s
# Warmup Iteration  20: 1643177.356 ops/s
# Warmup Iteration  21: 1723306.513 ops/s
# Warmup Iteration  22: 1665865.410 ops/s
# Warmup Iteration  23: 1713345.155 ops/s
# Warmup Iteration  24: 1742595.151 ops/s
# Warmup Iteration  25: 1628306.167 ops/s
# Warmup Iteration  26: 1721323.132 ops/s
# Warmup Iteration  27: 1664153.342 ops/s
# Warmup Iteration  28: 1686416.592 ops/s
# Warmup Iteration  29: 1657280.836 ops/s
# Warmup Iteration  30: 1755833.066 ops/s
Iteration   1: 1716891.210 ops/s
Iteration   2: 1621503.988 ops/s
Iteration   3: 1710804.334 ops/s
Iteration   4: 1701746.165 ops/s
Iteration   5: 1697628.024 ops/s
Iteration   6: 1648370.211 ops/s
Iteration   7: 1739415.744 ops/s
Iteration   8: 1420696.912 ops/s
Iteration   9: 1641092.094 ops/s
Iteration  10: 1721137.293 ops/s
Iteration  11: 1653905.108 ops/s
Iteration  12: 1754178.951 ops/s
Iteration  13: 1628730.385 ops/s
Iteration  14: 1731499.859 ops/s
Iteration  15: 1758993.714 ops/s
Iteration  16: 1698481.865 ops/s
Iteration  17: 1725952.442 ops/s
Iteration  18: 1720113.157 ops/s
Iteration  19: 1692792.123 ops/s
Iteration  20: 1642651.703 ops/s
Iteration  21: 1718259.419 ops/s
Iteration  22: 1740415.634 ops/s
Iteration  23: 1653157.600 ops/s
Iteration  24: 1689112.851 ops/s
Iteration  25: 1697815.040 ops/s
Iteration  26: 1694913.670 ops/s
Iteration  27: 1659999.089 ops/s
Iteration  28: 1679454.502 ops/s
Iteration  29: 1724631.643 ops/s
Iteration  30: 1753927.816 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableMapOptionalTest._Benchmark.benchmark_boundaryFusedAll":
  1687942.418 ±(99.9%) 42479.982 ops/s [Average]
  (min, avg, max) = (1420696.912, 1687942.418, 1758993.714), stdev = 63582.042
  CI (99.9%): [1645462.436, 1730422.400] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
ObservableMapOptionalTest._Benchmark.benchmark_boundaryFusedAll  thrpt   30  1687942.418 ± 42479.982  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableMapOptionalTest._Benchmark.benchmark_asyncFusedNoneConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableMapOptionalTest._Benchmark.benchmark_asyncFusedNoneConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 250518.020 ops/s
# Warmup Iteration   2: 882281.890 ops/s
# Warmup Iteration   3: 1327246.405 ops/s
# Warmup Iteration   4: 1631306.852 ops/s
# Warmup Iteration   5: 1692789.731 ops/s
# Warmup Iteration   6: 1679087.377 ops/s
# Warmup Iteration   7: 1635354.305 ops/s
# Warmup Iteration   8: 1597447.169 ops/s
# Warmup Iteration   9: 1626421.474 ops/s
# Warmup Iteration  10: 1640812.830 ops/s
# Warmup Iteration  11: 1678909.681 ops/s
# Warmup Iteration  12: 1584142.060 ops/s
# Warmup Iteration  13: 1621083.924 ops/s
# Warmup Iteration  14: 1663457.229 ops/s
# Warmup Iteration  15: 1655225.008 ops/s
# Warmup Iteration  16: 1668998.646 ops/s
# Warmup Iteration  17: 1632895.146 ops/s
# Warmup Iteration  18: 1651864.830 ops/s
# Warmup Iteration  19: 1663435.247 ops/s
# Warmup Iteration  20: 1584232.097 ops/s
# Warmup Iteration  21: 1645073.807 ops/s
# Warmup Iteration  22: 1679755.764 ops/s
# Warmup Iteration  23: 1616121.192 ops/s
# Warmup Iteration  24: 1578335.782 ops/s
# Warmup Iteration  25: 1703865.310 ops/s
# Warmup Iteration  26: 1668077.838 ops/s
# Warmup Iteration  27: 1631660.804 ops/s
# Warmup Iteration  28: 1580942.096 ops/s
# Warmup Iteration  29: 1676424.153 ops/s
# Warmup Iteration  30: 1634011.574 ops/s
Iteration   1: 1583807.991 ops/s
Iteration   2: 1663944.310 ops/s
Iteration   3: 1632798.905 ops/s
Iteration   4: 1683000.163 ops/s
Iteration   5: 1574530.112 ops/s
Iteration   6: 1636544.195 ops/s
Iteration   7: 1652425.893 ops/s
Iteration   8: 1375631.455 ops/s
Iteration   9: 1572852.231 ops/s
Iteration  10: 1635590.407 ops/s
Iteration  11: 1626196.298 ops/s
Iteration  12: 1633073.821 ops/s
Iteration  13: 1681689.277 ops/s
Iteration  14: 1570452.933 ops/s
Iteration  15: 1630715.728 ops/s
Iteration  16: 1614951.592 ops/s
Iteration  17: 1698168.883 ops/s
Iteration  18: 1626485.467 ops/s
Iteration  19: 1695064.972 ops/s
Iteration  20: 1690929.080 ops/s
Iteration  21: 1592946.001 ops/s
Iteration  22: 1658106.037 ops/s
Iteration  23: 1630813.794 ops/s
Iteration  24: 1682601.743 ops/s
Iteration  25: 1670130.146 ops/s
Iteration  26: 1582462.563 ops/s
Iteration  27: 1743472.165 ops/s
Iteration  28: 1567696.795 ops/s
Iteration  29: 1648628.391 ops/s
Iteration  30: 1721286.389 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableMapOptionalTest._Benchmark.benchmark_asyncFusedNoneConditional":
  1632566.591 ±(99.9%) 44876.821 ops/s [Average]
  (min, avg, max) = (1375631.455, 1632566.591, 1743472.165), stdev = 67169.519
  CI (99.9%): [1587689.770, 1677443.413] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score       Error  Units
ObservableMapOptionalTest._Benchmark.benchmark_asyncFusedNoneConditional  thrpt   30  1632566.591 ± 44876.821  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableMapOptionalTest._Benchmark.benchmark_asyncFusedAll$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableMapOptionalTest._Benchmark.benchmark_asyncFusedAll

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 81535.414 ops/s
# Warmup Iteration   2: 921593.421 ops/s
# Warmup Iteration   3: 1665925.826 ops/s
# Warmup Iteration   4: 1783602.123 ops/s
# Warmup Iteration   5: 1902663.787 ops/s
# Warmup Iteration   6: 1847380.345 ops/s
# Warmup Iteration   7: 1851408.748 ops/s
# Warmup Iteration   8: 1950871.050 ops/s
# Warmup Iteration   9: 1928879.565 ops/s
# Warmup Iteration  10: 1815485.553 ops/s
# Warmup Iteration  11: 1947634.280 ops/s
# Warmup Iteration  12: 1817928.799 ops/s
# Warmup Iteration  13: 1873549.470 ops/s
# Warmup Iteration  14: 1920040.664 ops/s
# Warmup Iteration  15: 1813447.474 ops/s
# Warmup Iteration  16: 1911576.307 ops/s
# Warmup Iteration  17: 1934530.450 ops/s
# Warmup Iteration  18: 1925428.775 ops/s
# Warmup Iteration  19: 1854281.694 ops/s
# Warmup Iteration  20: 1922349.328 ops/s
# Warmup Iteration  21: 1814591.434 ops/s
# Warmup Iteration  22: 1816543.694 ops/s
# Warmup Iteration  23: 1833809.148 ops/s
# Warmup Iteration  24: 1863420.230 ops/s
# Warmup Iteration  25: 1907008.096 ops/s
# Warmup Iteration  26: 1875822.735 ops/s
# Warmup Iteration  27: 1906678.384 ops/s
# Warmup Iteration  28: 1861308.821 ops/s
# Warmup Iteration  29: 1845959.527 ops/s
# Warmup Iteration  30: 1900479.240 ops/s
Iteration   1: 1923184.276 ops/s
Iteration   2: 1866491.433 ops/s
Iteration   3: 1860636.647 ops/s
Iteration   4: 1833171.145 ops/s
Iteration   5: 1914244.420 ops/s
Iteration   6: 1810761.529 ops/s
Iteration   7: 1918784.488 ops/s
Iteration   8: 1836884.118 ops/s
Iteration   9: 1674093.529 ops/s
Iteration  10: 1766299.558 ops/s
Iteration  11: 1814402.668 ops/s
Iteration  12: 1857300.440 ops/s
Iteration  13: 1880437.609 ops/s
Iteration  14: 1784869.152 ops/s
Iteration  15: 1861497.381 ops/s
Iteration  16: 1863428.889 ops/s
Iteration  17: 1838234.704 ops/s
Iteration  18: 1940945.633 ops/s
Iteration  19: 1868286.378 ops/s
Iteration  20: 1908953.899 ops/s
Iteration  21: 1848100.613 ops/s
Iteration  22: 1837999.137 ops/s
Iteration  23: 1976667.575 ops/s
Iteration  24: 1804441.055 ops/s
Iteration  25: 1941186.349 ops/s
Iteration  26: 1841227.454 ops/s
Iteration  27: 1846875.569 ops/s
Iteration  28: 1834436.159 ops/s
Iteration  29: 1882999.962 ops/s
Iteration  30: 1925475.530 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableMapOptionalTest._Benchmark.benchmark_asyncFusedAll":
  1858743.910 ±(99.9%) 40195.691 ops/s [Average]
  (min, avg, max) = (1674093.529, 1858743.910, 1976667.575), stdev = 60163.022
  CI (99.9%): [1818548.219, 1898939.601] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
ObservableMapOptionalTest._Benchmark.benchmark_asyncFusedAll  thrpt   30  1858743.910 ± 40195.691  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableMapOptionalTest._Benchmark.benchmark_asyncFusedMixed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableMapOptionalTest._Benchmark.benchmark_asyncFusedMixed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 18559.095 ops/s
# Warmup Iteration   2: 738605.071 ops/s
# Warmup Iteration   3: 1133224.132 ops/s
# Warmup Iteration   4: 1276213.666 ops/s
# Warmup Iteration   5: 1399765.245 ops/s
# Warmup Iteration   6: 1349768.534 ops/s
# Warmup Iteration   7: 1414585.432 ops/s
# Warmup Iteration   8: 1392414.395 ops/s
# Warmup Iteration   9: 1386874.484 ops/s
# Warmup Iteration  10: 1393689.760 ops/s
# Warmup Iteration  11: 1323590.606 ops/s
# Warmup Iteration  12: 1383891.654 ops/s
# Warmup Iteration  13: 1429060.070 ops/s
# Warmup Iteration  14: 1353997.344 ops/s
# Warmup Iteration  15: 1468793.436 ops/s
# Warmup Iteration  16: 1316509.090 ops/s
# Warmup Iteration  17: 1455953.228 ops/s
# Warmup Iteration  18: 1448662.366 ops/s
# Warmup Iteration  19: 1430601.629 ops/s
# Warmup Iteration  20: 1371249.469 ops/s
# Warmup Iteration  21: 1363605.924 ops/s
# Warmup Iteration  22: 1336797.829 ops/s
# Warmup Iteration  23: 1380608.642 ops/s
# Warmup Iteration  24: 1379613.767 ops/s
# Warmup Iteration  25: 1449942.829 ops/s
# Warmup Iteration  26: 1398575.078 ops/s
# Warmup Iteration  27: 1397780.341 ops/s
# Warmup Iteration  28: 1378107.645 ops/s
# Warmup Iteration  29: 1391607.992 ops/s
# Warmup Iteration  30: 1399822.126 ops/s
Iteration   1: 1386937.599 ops/s
Iteration   2: 1474954.944 ops/s
Iteration   3: 1365568.037 ops/s
Iteration   4: 1373465.650 ops/s
Iteration   5: 1433477.570 ops/s
Iteration   6: 1354990.771 ops/s
Iteration   7: 1398030.858 ops/s
Iteration   8: 1336230.768 ops/s
Iteration   9: 1408233.544 ops/s
Iteration  10: 1084667.762 ops/s
Iteration  11: 1420065.040 ops/s
Iteration  12: 1372766.805 ops/s
Iteration  13: 1382990.998 ops/s
Iteration  14: 1408805.961 ops/s
Iteration  15: 1398805.617 ops/s
Iteration  16: 1401845.349 ops/s
Iteration  17: 1463901.821 ops/s
Iteration  18: 1409069.369 ops/s
Iteration  19: 1472009.290 ops/s
Iteration  20: 1410932.932 ops/s
Iteration  21: 1393390.613 ops/s
Iteration  22: 1440246.928 ops/s
Iteration  23: 1428316.423 ops/s
Iteration  24: 1470714.214 ops/s
Iteration  25: 1418916.413 ops/s
Iteration  26: 1364597.307 ops/s
Iteration  27: 1481821.286 ops/s
Iteration  28: 1394435.054 ops/s
Iteration  29: 1422995.932 ops/s
Iteration  30: 1461390.638 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableMapOptionalTest._Benchmark.benchmark_asyncFusedMixed":
  1401152.517 ±(99.9%) 47315.096 ops/s [Average]
  (min, avg, max) = (1084667.762, 1401152.517, 1481821.286), stdev = 70819.014
  CI (99.9%): [1353837.420, 1448467.613] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
ObservableMapOptionalTest._Benchmark.benchmark_asyncFusedMixed  thrpt   30  1401152.517 ± 47315.096  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableMapOptionalTest._Benchmark.benchmark_boundaryFusedMixedConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableMapOptionalTest._Benchmark.benchmark_boundaryFusedMixedConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 137653.119 ops/s
# Warmup Iteration   2: 693388.686 ops/s
# Warmup Iteration   3: 1263661.377 ops/s
# Warmup Iteration   4: 1376712.253 ops/s
# Warmup Iteration   5: 1242554.042 ops/s
# Warmup Iteration   6: 1246618.231 ops/s
# Warmup Iteration   7: 1307449.106 ops/s
# Warmup Iteration   8: 1356669.433 ops/s
# Warmup Iteration   9: 1406907.379 ops/s
# Warmup Iteration  10: 1299733.165 ops/s
# Warmup Iteration  11: 1338078.888 ops/s
# Warmup Iteration  12: 1378002.058 ops/s
# Warmup Iteration  13: 1344435.457 ops/s
# Warmup Iteration  14: 1349980.957 ops/s
# Warmup Iteration  15: 1381360.803 ops/s
# Warmup Iteration  16: 1330091.978 ops/s
# Warmup Iteration  17: 1403141.901 ops/s
# Warmup Iteration  18: 1312607.117 ops/s
# Warmup Iteration  19: 1324606.314 ops/s
# Warmup Iteration  20: 1314308.795 ops/s
# Warmup Iteration  21: 1335092.539 ops/s
# Warmup Iteration  22: 1342296.544 ops/s
# Warmup Iteration  23: 1318161.533 ops/s
# Warmup Iteration  24: 1345093.275 ops/s
# Warmup Iteration  25: 1352902.746 ops/s
# Warmup Iteration  26: 1277629.929 ops/s
# Warmup Iteration  27: 1379430.793 ops/s
# Warmup Iteration  28: 1293524.884 ops/s
# Warmup Iteration  29: 1373642.923 ops/s
# Warmup Iteration  30: 1301953.156 ops/s
Iteration   1: 1354626.859 ops/s
Iteration   2: 1344948.408 ops/s
Iteration   3: 1331195.692 ops/s
Iteration   4: 1346473.822 ops/s
Iteration   5: 1337887.577 ops/s
Iteration   6: 1342372.729 ops/s
Iteration   7: 1313774.143 ops/s
Iteration   8: 1314894.580 ops/s
Iteration   9: 1388611.350 ops/s
Iteration  10: 1306832.005 ops/s
Iteration  11: 1368777.517 ops/s
Iteration  12: 1342113.609 ops/s
Iteration  13: 1373605.009 ops/s
Iteration  14: 1335664.870 ops/s
Iteration  15: 1296650.531 ops/s
Iteration  16: 1371484.252 ops/s
Iteration  17: 1308640.850 ops/s
Iteration  18: 1340696.453 ops/s
Iteration  19: 1362741.233 ops/s
Iteration  20: 1275831.845 ops/s
Iteration  21: 1367921.097 ops/s
Iteration  22: 1356284.510 ops/s
Iteration  23: 1396677.444 ops/s
Iteration  24: 1326420.976 ops/s
Iteration  25: 1387873.962 ops/s
Iteration  26: 1306863.176 ops/s
Iteration  27: 1333784.140 ops/s
Iteration  28: 1375743.145 ops/s
Iteration  29: 1281007.885 ops/s
Iteration  30: 1371153.041 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableMapOptionalTest._Benchmark.benchmark_boundaryFusedMixedConditional":
  1342051.757 ±(99.9%) 21160.672 ops/s [Average]
  (min, avg, max) = (1275831.845, 1342051.757, 1396677.444), stdev = 31672.299
  CI (99.9%): [1320891.085, 1363212.429] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score       Error  Units
ObservableMapOptionalTest._Benchmark.benchmark_boundaryFusedMixedConditional  thrpt   30  1342051.757 ± 21160.672  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableMapOptionalTest._Benchmark.benchmark_boundaryFusedAllConditiona$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableMapOptionalTest._Benchmark.benchmark_boundaryFusedAllConditiona

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 130709.548 ops/s
# Warmup Iteration   2: 882879.440 ops/s
# Warmup Iteration   3: 1705376.042 ops/s
# Warmup Iteration   4: 1601537.559 ops/s
# Warmup Iteration   5: 1676702.682 ops/s
# Warmup Iteration   6: 1073050.691 ops/s
# Warmup Iteration   7: 1649414.294 ops/s
# Warmup Iteration   8: 1760797.860 ops/s
# Warmup Iteration   9: 1654957.156 ops/s
# Warmup Iteration  10: 1732144.263 ops/s
# Warmup Iteration  11: 1703914.535 ops/s
# Warmup Iteration  12: 1660224.851 ops/s
# Warmup Iteration  13: 1715121.285 ops/s
# Warmup Iteration  14: 1757003.155 ops/s
# Warmup Iteration  15: 1690504.114 ops/s
# Warmup Iteration  16: 1727304.536 ops/s
# Warmup Iteration  17: 1655016.033 ops/s
# Warmup Iteration  18: 1731984.575 ops/s
# Warmup Iteration  19: 1676280.348 ops/s
# Warmup Iteration  20: 1693038.638 ops/s
# Warmup Iteration  21: 1685943.774 ops/s
# Warmup Iteration  22: 1630769.707 ops/s
# Warmup Iteration  23: 1736578.358 ops/s
# Warmup Iteration  24: 1754286.749 ops/s
# Warmup Iteration  25: 1676717.748 ops/s
# Warmup Iteration  26: 1704387.788 ops/s
# Warmup Iteration  27: 1751385.031 ops/s
# Warmup Iteration  28: 1667252.917 ops/s
# Warmup Iteration  29: 1690355.094 ops/s
# Warmup Iteration  30: 1709073.800 ops/s
Iteration   1: 1613235.673 ops/s
Iteration   2: 1706872.582 ops/s
Iteration   3: 1676994.833 ops/s
Iteration   4: 1735043.164 ops/s
Iteration   5: 1762913.892 ops/s
Iteration   6: 1644552.965 ops/s
Iteration   7: 1672682.279 ops/s
Iteration   8: 1733684.097 ops/s
Iteration   9: 1610178.377 ops/s
Iteration  10: 1777180.467 ops/s
Iteration  11: 1642245.304 ops/s
Iteration  12: 1761216.910 ops/s
Iteration  13: 1686364.540 ops/s
Iteration  14: 1660159.648 ops/s
Iteration  15: 1744514.852 ops/s
Iteration  16: 1680792.460 ops/s
Iteration  17: 1693396.370 ops/s
Iteration  18: 1721641.999 ops/s
Iteration  19: 1692862.103 ops/s
Iteration  20: 1755748.361 ops/s
Iteration  21: 1672096.526 ops/s
Iteration  22: 1739164.446 ops/s
Iteration  23: 1663758.506 ops/s
Iteration  24: 1672430.906 ops/s
Iteration  25: 1725110.125 ops/s
Iteration  26: 1681023.970 ops/s
Iteration  27: 1747467.990 ops/s
Iteration  28: 1670427.040 ops/s
Iteration  29: 1693911.845 ops/s
Iteration  30: 1706244.433 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableMapOptionalTest._Benchmark.benchmark_boundaryFusedAllConditiona":
  1698130.556 ±(99.9%) 29260.477 ops/s [Average]
  (min, avg, max) = (1610178.377, 1698130.556, 1777180.467), stdev = 43795.708
  CI (99.9%): [1668870.078, 1727391.033] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score       Error  Units
ObservableMapOptionalTest._Benchmark.benchmark_boundaryFusedAllConditiona  thrpt   30  1698130.556 ± 29260.477  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableFlatMapStreamTest._Benchmark.benchmark_asyncUpstreamFusionBoundary$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableFlatMapStreamTest._Benchmark.benchmark_asyncUpstreamFusionBoundary

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 140356.880 ops/s
# Warmup Iteration   2: 654152.274 ops/s
# Warmup Iteration   3: 1507496.394 ops/s
# Warmup Iteration   4: 2136938.065 ops/s
# Warmup Iteration   5: 2077802.022 ops/s
# Warmup Iteration   6: 2131724.898 ops/s
# Warmup Iteration   7: 2066537.134 ops/s
# Warmup Iteration   8: 2144204.705 ops/s
# Warmup Iteration   9: 2071798.687 ops/s
# Warmup Iteration  10: 2166730.713 ops/s
# Warmup Iteration  11: 2089897.165 ops/s
# Warmup Iteration  12: 2042901.519 ops/s
# Warmup Iteration  13: 2213262.406 ops/s
# Warmup Iteration  14: 2093373.934 ops/s
# Warmup Iteration  15: 2194116.958 ops/s
# Warmup Iteration  16: 2111148.021 ops/s
# Warmup Iteration  17: 2172020.747 ops/s
# Warmup Iteration  18: 2075774.574 ops/s
# Warmup Iteration  19: 2195965.315 ops/s
# Warmup Iteration  20: 2036856.513 ops/s
# Warmup Iteration  21: 2166207.924 ops/s
# Warmup Iteration  22: 2142363.619 ops/s
# Warmup Iteration  23: 2058131.636 ops/s
# Warmup Iteration  24: 2101028.071 ops/s
# Warmup Iteration  25: 2203461.383 ops/s
# Warmup Iteration  26: 2094539.281 ops/s
# Warmup Iteration  27: 2164311.911 ops/s
# Warmup Iteration  28: 2061155.170 ops/s
# Warmup Iteration  29: 2209270.751 ops/s
# Warmup Iteration  30: 2204078.308 ops/s
Iteration   1: 2025423.243 ops/s
Iteration   2: 2115608.983 ops/s
Iteration   3: 2197633.153 ops/s
Iteration   4: 2100891.176 ops/s
Iteration   5: 2127366.019 ops/s
Iteration   6: 2105092.635 ops/s
Iteration   7: 2122895.274 ops/s
Iteration   8: 2113982.026 ops/s
Iteration   9: 2230406.452 ops/s
Iteration  10: 2046749.251 ops/s
Iteration  11: 2130405.087 ops/s
Iteration  12: 2171298.475 ops/s
Iteration  13: 2123125.474 ops/s
Iteration  14: 2055147.262 ops/s
Iteration  15: 2219896.721 ops/s
Iteration  16: 2182789.643 ops/s
Iteration  17: 2042821.199 ops/s
Iteration  18: 2243819.988 ops/s
Iteration  19: 2059954.851 ops/s
Iteration  20: 2195257.091 ops/s
Iteration  21: 2121619.834 ops/s
Iteration  22: 2045925.476 ops/s
Iteration  23: 2145813.301 ops/s
Iteration  24: 2072963.248 ops/s
Iteration  25: 2210779.387 ops/s
Iteration  26: 2053996.682 ops/s
Iteration  27: 2200919.640 ops/s
Iteration  28: 2099732.438 ops/s
Iteration  29: 2175070.267 ops/s
Iteration  30: 2021016.922 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableFlatMapStreamTest._Benchmark.benchmark_asyncUpstreamFusionBoundary":
  2125280.040 ±(99.9%) 43790.947 ops/s [Average]
  (min, avg, max) = (2021016.922, 2125280.040, 2243819.988), stdev = 65544.232
  CI (99.9%): [2081489.093, 2169070.987] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score       Error  Units
ObservableFlatMapStreamTest._Benchmark.benchmark_asyncUpstreamFusionBoundary  thrpt   30  2125280.040 ± 43790.947  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableMapOptionalTest._Benchmark.benchmark_asyncFusedAllConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableMapOptionalTest._Benchmark.benchmark_asyncFusedAllConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 112300.387 ops/s
# Warmup Iteration   2: 461634.739 ops/s
# Warmup Iteration   3: 1196298.321 ops/s
# Warmup Iteration   4: 1408220.902 ops/s
# Warmup Iteration   5: 1478418.482 ops/s
# Warmup Iteration   6: 1475542.465 ops/s
# Warmup Iteration   7: 1457384.105 ops/s
# Warmup Iteration   8: 1466882.513 ops/s
# Warmup Iteration   9: 1423551.579 ops/s
# Warmup Iteration  10: 1482798.130 ops/s
# Warmup Iteration  11: 1496922.247 ops/s
# Warmup Iteration  12: 1446122.607 ops/s
# Warmup Iteration  13: 1474739.371 ops/s
# Warmup Iteration  14: 1489935.322 ops/s
# Warmup Iteration  15: 1466169.322 ops/s
# Warmup Iteration  16: 1485371.893 ops/s
# Warmup Iteration  17: 1444007.368 ops/s
# Warmup Iteration  18: 1452401.306 ops/s
# Warmup Iteration  19: 1499650.629 ops/s
# Warmup Iteration  20: 1430642.406 ops/s
# Warmup Iteration  21: 1497506.066 ops/s
# Warmup Iteration  22: 1473208.999 ops/s
# Warmup Iteration  23: 1473032.911 ops/s
# Warmup Iteration  24: 1452027.390 ops/s
# Warmup Iteration  25: 1451323.791 ops/s
# Warmup Iteration  26: 1428025.528 ops/s
# Warmup Iteration  27: 1491204.437 ops/s
# Warmup Iteration  28: 1426490.950 ops/s
# Warmup Iteration  29: 1440265.777 ops/s
# Warmup Iteration  30: 1475415.566 ops/s
Iteration   1: 1470316.377 ops/s
Iteration   2: 1443810.523 ops/s
Iteration   3: 1474839.610 ops/s
Iteration   4: 1443311.592 ops/s
Iteration   5: 1450497.359 ops/s
Iteration   6: 1420694.032 ops/s
Iteration   7: 1473779.324 ops/s
Iteration   8: 1427183.812 ops/s
Iteration   9: 1448309.717 ops/s
Iteration  10: 1524426.862 ops/s
Iteration  11: 1432891.784 ops/s
Iteration  12: 1509706.822 ops/s
Iteration  13: 1404907.676 ops/s
Iteration  14: 1515273.211 ops/s
Iteration  15: 1468269.750 ops/s
Iteration  16: 1455122.489 ops/s
Iteration  17: 1442898.093 ops/s
Iteration  18: 1455939.731 ops/s
Iteration  19: 1467871.458 ops/s
Iteration  20: 1459924.932 ops/s
Iteration  21: 1522844.058 ops/s
Iteration  22: 1427149.458 ops/s
Iteration  23: 1477578.973 ops/s
Iteration  24: 1510986.919 ops/s
Iteration  25: 1407647.930 ops/s
Iteration  26: 1456890.397 ops/s
Iteration  27: 1495709.715 ops/s
Iteration  28: 1432658.640 ops/s
Iteration  29: 1417955.230 ops/s
Iteration  30: 1481624.333 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableMapOptionalTest._Benchmark.benchmark_asyncFusedAllConditional":
  1460700.694 ±(99.9%) 22450.975 ops/s [Average]
  (min, avg, max) = (1404907.676, 1460700.694, 1524426.862), stdev = 33603.565
  CI (99.9%): [1438249.719, 1483151.668] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score       Error  Units
ObservableMapOptionalTest._Benchmark.benchmark_asyncFusedAllConditional  thrpt   30  1460700.694 ± 22450.975  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithSizeTest._Benchmark.benchmark_windowAbandonmentCancelsUpstreamOverlap$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithSizeTest._Benchmark.benchmark_windowAbandonmentCancelsUpstreamOverlap

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 86795.160 ops/s
# Warmup Iteration   2: 513926.824 ops/s
# Warmup Iteration   3: 1000660.729 ops/s
# Warmup Iteration   4: 1284014.521 ops/s
# Warmup Iteration   5: 1372419.171 ops/s
# Warmup Iteration   6: 1293970.179 ops/s
# Warmup Iteration   7: 1338265.222 ops/s
# Warmup Iteration   8: 1350501.060 ops/s
# Warmup Iteration   9: 1285395.902 ops/s
# Warmup Iteration  10: 1323884.025 ops/s
# Warmup Iteration  11: 1335392.905 ops/s
# Warmup Iteration  12: 1302858.618 ops/s
# Warmup Iteration  13: 1343103.421 ops/s
# Warmup Iteration  14: 1357550.939 ops/s
# Warmup Iteration  15: 1253633.494 ops/s
# Warmup Iteration  16: 1351130.520 ops/s
# Warmup Iteration  17: 1306903.592 ops/s
# Warmup Iteration  18: 1308752.728 ops/s
# Warmup Iteration  19: 1349165.385 ops/s
# Warmup Iteration  20: 1319970.403 ops/s
# Warmup Iteration  21: 1351639.482 ops/s
# Warmup Iteration  22: 1306410.036 ops/s
# Warmup Iteration  23: 1297683.433 ops/s
# Warmup Iteration  24: 1295735.610 ops/s
# Warmup Iteration  25: 1358416.494 ops/s
# Warmup Iteration  26: 1294602.977 ops/s
# Warmup Iteration  27: 1345893.767 ops/s
# Warmup Iteration  28: 1331644.079 ops/s
# Warmup Iteration  29: 1305404.869 ops/s
# Warmup Iteration  30: 1372109.469 ops/s
Iteration   1: 1302668.568 ops/s
Iteration   2: 1303301.460 ops/s
Iteration   3: 1321790.293 ops/s
Iteration   4: 1309736.342 ops/s
Iteration   5: 1339616.760 ops/s
Iteration   6: 1268798.750 ops/s
Iteration   7: 1376025.269 ops/s
Iteration   8: 1326656.190 ops/s
Iteration   9: 1296087.497 ops/s
Iteration  10: 1382049.768 ops/s
Iteration  11: 1345551.008 ops/s
Iteration  12: 1332168.760 ops/s
Iteration  13: 1325936.869 ops/s
Iteration  14: 1318243.024 ops/s
Iteration  15: 1331174.212 ops/s
Iteration  16: 1367462.026 ops/s
Iteration  17: 1303783.458 ops/s
Iteration  18: 1322325.074 ops/s
Iteration  19: 1332199.602 ops/s
Iteration  20: 1312048.919 ops/s
Iteration  21: 1340975.116 ops/s
Iteration  22: 1305558.480 ops/s
Iteration  23: 1382924.910 ops/s
Iteration  24: 1276855.560 ops/s
Iteration  25: 1339805.636 ops/s
Iteration  26: 1346063.648 ops/s
Iteration  27: 1003671.574 ops/s
Iteration  28: 1348462.336 ops/s
Iteration  29: 1314294.160 ops/s
Iteration  30: 1353623.237 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithSizeTest._Benchmark.benchmark_windowAbandonmentCancelsUpstreamOverlap":
  1317661.950 ±(99.9%) 43760.192 ops/s [Average]
  (min, avg, max) = (1003671.574, 1317661.950, 1382924.910), stdev = 65498.201
  CI (99.9%): [1273901.758, 1361422.142] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                   Mode  Cnt        Score       Error  Units
ObservableWindowWithSizeTest._Benchmark.benchmark_windowAbandonmentCancelsUpstreamOverlap  thrpt   30  1317661.950 ± 43760.192  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithSizeTest._Benchmark.benchmark_windowAbandonmentCancelsUpstreamSkip$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithSizeTest._Benchmark.benchmark_windowAbandonmentCancelsUpstreamSkip

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 40005.654 ops/s
# Warmup Iteration   2: 359052.397 ops/s
# Warmup Iteration   3: 974634.656 ops/s
# Warmup Iteration   4: 1328954.688 ops/s
# Warmup Iteration   5: 1347950.047 ops/s
# Warmup Iteration   6: 1317041.340 ops/s
# Warmup Iteration   7: 1356607.414 ops/s
# Warmup Iteration   8: 1313315.770 ops/s
# Warmup Iteration   9: 1185721.825 ops/s
# Warmup Iteration  10: 1320998.915 ops/s
# Warmup Iteration  11: 1329285.226 ops/s
# Warmup Iteration  12: 1332901.505 ops/s
# Warmup Iteration  13: 1361664.838 ops/s
# Warmup Iteration  14: 1361204.729 ops/s
# Warmup Iteration  15: 1312619.854 ops/s
# Warmup Iteration  16: 1380406.553 ops/s
# Warmup Iteration  17: 1353720.799 ops/s
# Warmup Iteration  18: 1348065.770 ops/s
# Warmup Iteration  19: 1415532.544 ops/s
# Warmup Iteration  20: 1317260.235 ops/s
# Warmup Iteration  21: 1386164.708 ops/s
# Warmup Iteration  22: 1308862.345 ops/s
# Warmup Iteration  23: 1329110.242 ops/s
# Warmup Iteration  24: 1350635.301 ops/s
# Warmup Iteration  25: 1313774.915 ops/s
# Warmup Iteration  26: 1352187.567 ops/s
# Warmup Iteration  27: 1399078.323 ops/s
# Warmup Iteration  28: 1349973.622 ops/s
# Warmup Iteration  29: 1385982.471 ops/s
# Warmup Iteration  30: 1391626.122 ops/s
Iteration   1: 1302991.929 ops/s
Iteration   2: 1340674.073 ops/s
Iteration   3: 1432762.492 ops/s
Iteration   4: 1303130.366 ops/s
Iteration   5: 1443638.500 ops/s
Iteration   6: 1326700.829 ops/s
Iteration   7: 1337069.825 ops/s
Iteration   8: 1448690.989 ops/s
Iteration   9: 1395402.713 ops/s
Iteration  10: 1340158.951 ops/s
Iteration  11: 1365334.913 ops/s
Iteration  12: 1339514.541 ops/s
Iteration  13: 1375342.423 ops/s
Iteration  14: 1380114.830 ops/s
Iteration  15: 1325091.640 ops/s
Iteration  16: 1406902.687 ops/s
Iteration  17: 1411987.580 ops/s
Iteration  18: 1354133.583 ops/s
Iteration  19: 1369129.223 ops/s
Iteration  20: 1378307.049 ops/s
Iteration  21: 1361475.769 ops/s
Iteration  22: 1347841.571 ops/s
Iteration  23: 1361880.610 ops/s
Iteration  24: 1325516.882 ops/s
Iteration  25: 1375181.601 ops/s
Iteration  26: 1322038.325 ops/s
Iteration  27: 1400505.836 ops/s
Iteration  28: 1330075.233 ops/s
Iteration  29: 1373608.465 ops/s
Iteration  30: 1315803.291 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithSizeTest._Benchmark.benchmark_windowAbandonmentCancelsUpstreamSkip":
  1363033.557 ±(99.9%) 26426.273 ops/s [Average]
  (min, avg, max) = (1302991.929, 1363033.557, 1448690.989), stdev = 39553.605
  CI (99.9%): [1336607.284, 1389459.831] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                Mode  Cnt        Score       Error  Units
ObservableWindowWithSizeTest._Benchmark.benchmark_windowAbandonmentCancelsUpstreamSkip  thrpt   30  1363033.557 ± 26426.273  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_mainErrorsDelayBoundary$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_mainErrorsDelayBoundary

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 28773.465 ops/s
# Warmup Iteration   2: 94762.746 ops/s
# Warmup Iteration   3: 201901.465 ops/s
# Warmup Iteration   4: 311514.208 ops/s
# Warmup Iteration   5: 396291.336 ops/s
# Warmup Iteration   6: 378273.701 ops/s
# Warmup Iteration   7: 375154.360 ops/s
# Warmup Iteration   8: 363716.823 ops/s
# Warmup Iteration   9: 382866.057 ops/s
# Warmup Iteration  10: 390621.398 ops/s
# Warmup Iteration  11: 382560.744 ops/s
# Warmup Iteration  12: 385404.438 ops/s
# Warmup Iteration  13: 384252.067 ops/s
# Warmup Iteration  14: 390939.620 ops/s
# Warmup Iteration  15: 396802.812 ops/s
# Warmup Iteration  16: 374942.719 ops/s
# Warmup Iteration  17: 394842.234 ops/s
# Warmup Iteration  18: 390618.351 ops/s
# Warmup Iteration  19: 405279.042 ops/s
# Warmup Iteration  20: 395362.766 ops/s
# Warmup Iteration  21: 400266.622 ops/s
# Warmup Iteration  22: 395533.617 ops/s
# Warmup Iteration  23: 394195.185 ops/s
# Warmup Iteration  24: 372546.325 ops/s
# Warmup Iteration  25: 409297.718 ops/s
# Warmup Iteration  26: 377016.814 ops/s
# Warmup Iteration  27: 395392.573 ops/s
# Warmup Iteration  28: 387040.387 ops/s
# Warmup Iteration  29: 410851.897 ops/s
# Warmup Iteration  30: 411171.126 ops/s
Iteration   1: 388365.856 ops/s
Iteration   2: 409019.880 ops/s
Iteration   3: 380898.650 ops/s
Iteration   4: 401088.752 ops/s
Iteration   5: 393696.157 ops/s
Iteration   6: 401920.903 ops/s
Iteration   7: 407872.037 ops/s
Iteration   8: 398180.689 ops/s
Iteration   9: 395975.059 ops/s
Iteration  10: 400992.677 ops/s
Iteration  11: 388170.985 ops/s
Iteration  12: 406963.220 ops/s
Iteration  13: 389463.995 ops/s
Iteration  14: 402146.599 ops/s
Iteration  15: 375793.544 ops/s
Iteration  16: 395385.260 ops/s
Iteration  17: 388837.430 ops/s
Iteration  18: 385689.045 ops/s
Iteration  19: 391702.713 ops/s
Iteration  20: 377380.240 ops/s
Iteration  21: 367104.103 ops/s
Iteration  22: 351353.180 ops/s
Iteration  23: 394138.924 ops/s
Iteration  24: 411100.650 ops/s
Iteration  25: 389309.863 ops/s
Iteration  26: 399033.107 ops/s
Iteration  27: 391413.901 ops/s
Iteration  28: 393555.911 ops/s
Iteration  29: 401990.297 ops/s
Iteration  30: 395328.677 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_mainErrorsDelayBoundary":
  392462.410 ±(99.9%) 8494.496 ops/s [Average]
  (min, avg, max) = (351353.180, 392462.410, 411100.650), stdev = 12714.162
  CI (99.9%): [383967.915, 400956.906] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score      Error  Units
ObservableConcatMapEagerTest._Benchmark.benchmark_mainErrorsDelayBoundary  thrpt   30  392462.410 ± 8494.496  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_mainErrorsDelayEnd$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_mainErrorsDelayEnd

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 32619.926 ops/s
# Warmup Iteration   2: 126067.401 ops/s
# Warmup Iteration   3: 152281.968 ops/s
# Warmup Iteration   4: 292479.879 ops/s
# Warmup Iteration   5: 295302.722 ops/s
# Warmup Iteration   6: 323939.291 ops/s
# Warmup Iteration   7: 323071.807 ops/s
# Warmup Iteration   8: 337771.598 ops/s
# Warmup Iteration   9: 312743.611 ops/s
# Warmup Iteration  10: 328349.478 ops/s
# Warmup Iteration  11: 329524.708 ops/s
# Warmup Iteration  12: 315929.345 ops/s
# Warmup Iteration  13: 326745.518 ops/s
# Warmup Iteration  14: 312973.729 ops/s
# Warmup Iteration  15: 338144.352 ops/s
# Warmup Iteration  16: 312037.689 ops/s
# Warmup Iteration  17: 321070.734 ops/s
# Warmup Iteration  18: 331470.344 ops/s
# Warmup Iteration  19: 332284.443 ops/s
# Warmup Iteration  20: 334634.477 ops/s
# Warmup Iteration  21: 334756.420 ops/s
# Warmup Iteration  22: 341413.662 ops/s
# Warmup Iteration  23: 326352.638 ops/s
# Warmup Iteration  24: 336874.250 ops/s
# Warmup Iteration  25: 337291.724 ops/s
# Warmup Iteration  26: 330607.169 ops/s
# Warmup Iteration  27: 331735.601 ops/s
# Warmup Iteration  28: 332681.224 ops/s
# Warmup Iteration  29: 339039.753 ops/s
# Warmup Iteration  30: 320848.254 ops/s
Iteration   1: 334413.485 ops/s
Iteration   2: 353118.767 ops/s
Iteration   3: 318962.782 ops/s
Iteration   4: 345190.493 ops/s
Iteration   5: 327083.020 ops/s
Iteration   6: 345150.363 ops/s
Iteration   7: 329071.856 ops/s
Iteration   8: 326149.009 ops/s
Iteration   9: 345165.894 ops/s
Iteration  10: 320395.116 ops/s
Iteration  11: 337673.142 ops/s
Iteration  12: 326223.612 ops/s
Iteration  13: 331285.883 ops/s
Iteration  14: 351281.024 ops/s
Iteration  15: 350496.701 ops/s
Iteration  16: 336747.649 ops/s
Iteration  17: 322710.781 ops/s
Iteration  18: 335990.118 ops/s
Iteration  19: 332982.672 ops/s
Iteration  20: 327996.191 ops/s
Iteration  21: 336974.654 ops/s
Iteration  22: 331616.571 ops/s
Iteration  23: 345137.244 ops/s
Iteration  24: 324932.798 ops/s
Iteration  25: 347982.165 ops/s
Iteration  26: 351446.970 ops/s
Iteration  27: 322245.643 ops/s
Iteration  28: 345609.698 ops/s
Iteration  29: 329307.254 ops/s
Iteration  30: 331279.042 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_mainErrorsDelayEnd":
  335487.353 ±(99.9%) 6873.880 ops/s [Average]
  (min, avg, max) = (318962.782, 335487.353, 353118.767), stdev = 10288.501
  CI (99.9%): [328613.473, 342361.233] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score      Error  Units
ObservableConcatMapEagerTest._Benchmark.benchmark_mainErrorsDelayEnd  thrpt   30  335487.353 ± 6873.880  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableCreateTest._Benchmark.benchmark_serializedOnNextAfterComplete$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableCreateTest._Benchmark.benchmark_serializedOnNextAfterComplete

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1089272.386 ops/s
# Warmup Iteration   2: 3287596.565 ops/s
# Warmup Iteration   3: 4848337.889 ops/s
# Warmup Iteration   4: 5014782.784 ops/s
# Warmup Iteration   5: 5110714.802 ops/s
# Warmup Iteration   6: 4850494.320 ops/s
# Warmup Iteration   7: 5164030.710 ops/s
# Warmup Iteration   8: 5059288.016 ops/s
# Warmup Iteration   9: 4836332.411 ops/s
# Warmup Iteration  10: 5023869.551 ops/s
# Warmup Iteration  11: 4938605.438 ops/s
# Warmup Iteration  12: 4843138.007 ops/s
# Warmup Iteration  13: 5159258.952 ops/s
# Warmup Iteration  14: 4879381.878 ops/s
# Warmup Iteration  15: 5058319.379 ops/s
# Warmup Iteration  16: 5005771.071 ops/s
# Warmup Iteration  17: 5100895.573 ops/s
# Warmup Iteration  18: 4919780.544 ops/s
# Warmup Iteration  19: 4990132.358 ops/s
# Warmup Iteration  20: 5129120.410 ops/s
# Warmup Iteration  21: 4978917.667 ops/s
# Warmup Iteration  22: 5032024.499 ops/s
# Warmup Iteration  23: 4907079.190 ops/s
# Warmup Iteration  24: 4980154.387 ops/s
# Warmup Iteration  25: 5042972.850 ops/s
# Warmup Iteration  26: 4808910.559 ops/s
# Warmup Iteration  27: 5013793.639 ops/s
# Warmup Iteration  28: 4909042.176 ops/s
# Warmup Iteration  29: 5137758.739 ops/s
# Warmup Iteration  30: 5011833.949 ops/s
Iteration   1: 4830120.013 ops/s
Iteration   2: 4980131.395 ops/s
Iteration   3: 5047869.688 ops/s
Iteration   4: 4811463.703 ops/s
Iteration   5: 5025228.691 ops/s
Iteration   6: 4986056.144 ops/s
Iteration   7: 5011504.778 ops/s
Iteration   8: 4626852.928 ops/s
Iteration   9: 4293926.349 ops/s
Iteration  10: 5105027.449 ops/s
Iteration  11: 4710513.696 ops/s
Iteration  12: 5017813.231 ops/s
Iteration  13: 5007357.547 ops/s
Iteration  14: 4916157.559 ops/s
Iteration  15: 4930950.665 ops/s
Iteration  16: 5158353.238 ops/s
Iteration  17: 4873387.641 ops/s
Iteration  18: 5096572.469 ops/s
Iteration  19: 4927255.658 ops/s
Iteration  20: 4985820.060 ops/s
Iteration  21: 5137158.474 ops/s
Iteration  22: 4825608.530 ops/s
Iteration  23: 5105824.683 ops/s
Iteration  24: 5067758.544 ops/s
Iteration  25: 4878685.349 ops/s
Iteration  26: 4943935.717 ops/s
Iteration  27: 4866324.581 ops/s
Iteration  28: 4898961.100 ops/s
Iteration  29: 5202625.544 ops/s
Iteration  30: 4723053.681 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableCreateTest._Benchmark.benchmark_serializedOnNextAfterComplete":
  4933076.637 ±(99.9%) 121755.460 ops/s [Average]
  (min, avg, max) = (4293926.349, 4933076.637, 5202625.544), stdev = 182237.855
  CI (99.9%): [4811321.177, 5054832.097] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score        Error  Units
ObservableCreateTest._Benchmark.benchmark_serializedOnNextAfterComplete  thrpt   30  4933076.637 ± 121755.460  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_mainErrorsImmediate$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_mainErrorsImmediate

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 26258.638 ops/s
# Warmup Iteration   2: 74529.067 ops/s
# Warmup Iteration   3: 240489.763 ops/s
# Warmup Iteration   4: 327235.256 ops/s
# Warmup Iteration   5: 352270.603 ops/s
# Warmup Iteration   6: 346864.973 ops/s
# Warmup Iteration   7: 339025.333 ops/s
# Warmup Iteration   8: 346070.127 ops/s
# Warmup Iteration   9: 340266.210 ops/s
# Warmup Iteration  10: 358278.581 ops/s
# Warmup Iteration  11: 336182.526 ops/s
# Warmup Iteration  12: 344206.153 ops/s
# Warmup Iteration  13: 351932.794 ops/s
# Warmup Iteration  14: 353029.661 ops/s
# Warmup Iteration  15: 356481.727 ops/s
# Warmup Iteration  16: 338756.797 ops/s
# Warmup Iteration  17: 350600.706 ops/s
# Warmup Iteration  18: 346931.969 ops/s
# Warmup Iteration  19: 357332.970 ops/s
# Warmup Iteration  20: 371141.510 ops/s
# Warmup Iteration  21: 360468.123 ops/s
# Warmup Iteration  22: 362786.137 ops/s
# Warmup Iteration  23: 362594.726 ops/s
# Warmup Iteration  24: 346644.308 ops/s
# Warmup Iteration  25: 349985.700 ops/s
# Warmup Iteration  26: 377927.482 ops/s
# Warmup Iteration  27: 356939.275 ops/s
# Warmup Iteration  28: 357995.703 ops/s
# Warmup Iteration  29: 360234.456 ops/s
# Warmup Iteration  30: 362296.821 ops/s
Iteration   1: 356362.221 ops/s
Iteration   2: 346891.952 ops/s
Iteration   3: 369755.801 ops/s
Iteration   4: 354948.186 ops/s
Iteration   5: 354729.783 ops/s
Iteration   6: 372366.794 ops/s
Iteration   7: 355515.633 ops/s
Iteration   8: 368000.338 ops/s
Iteration   9: 358247.324 ops/s
Iteration  10: 364662.785 ops/s
Iteration  11: 382294.394 ops/s
Iteration  12: 353552.790 ops/s
Iteration  13: 321179.858 ops/s
Iteration  14: 336849.663 ops/s
Iteration  15: 345432.213 ops/s
Iteration  16: 370131.591 ops/s
Iteration  17: 366583.442 ops/s
Iteration  18: 344205.047 ops/s
Iteration  19: 368471.617 ops/s
Iteration  20: 354232.565 ops/s
Iteration  21: 363397.597 ops/s
Iteration  22: 365936.566 ops/s
Iteration  23: 371615.697 ops/s
Iteration  24: 353359.373 ops/s
Iteration  25: 364279.660 ops/s
Iteration  26: 367620.148 ops/s
Iteration  27: 355062.893 ops/s
Iteration  28: 365099.903 ops/s
Iteration  29: 359022.739 ops/s
Iteration  30: 350334.737 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_mainErrorsImmediate":
  358671.444 ±(99.9%) 8120.042 ops/s [Average]
  (min, avg, max) = (321179.858, 358671.444, 382294.394), stdev = 12153.698
  CI (99.9%): [350551.401, 366791.486] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score      Error  Units
ObservableConcatMapEagerTest._Benchmark.benchmark_mainErrorsImmediate  thrpt   30  358671.444 ± 8120.042  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithTimeTest._Benchmark.benchmark_timed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithTimeTest._Benchmark.benchmark_timed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 21896.166 ops/s
# Warmup Iteration   2: 111533.905 ops/s
# Warmup Iteration   3: 167943.396 ops/s
# Warmup Iteration   4: 284429.794 ops/s
# Warmup Iteration   5: 373644.668 ops/s
# Warmup Iteration   6: 345619.238 ops/s
# Warmup Iteration   7: 336971.817 ops/s
# Warmup Iteration   8: 361327.789 ops/s
# Warmup Iteration   9: 360415.526 ops/s
# Warmup Iteration  10: 373024.032 ops/s
# Warmup Iteration  11: 358898.961 ops/s
# Warmup Iteration  12: 351904.481 ops/s
# Warmup Iteration  13: 377180.412 ops/s
# Warmup Iteration  14: 349356.660 ops/s
# Warmup Iteration  15: 361485.737 ops/s
# Warmup Iteration  16: 371541.819 ops/s
# Warmup Iteration  17: 364993.147 ops/s
# Warmup Iteration  18: 371325.451 ops/s
# Warmup Iteration  19: 353838.428 ops/s
# Warmup Iteration  20: 371499.639 ops/s
# Warmup Iteration  21: 351019.230 ops/s
# Warmup Iteration  22: 364475.652 ops/s
# Warmup Iteration  23: 370844.863 ops/s
# Warmup Iteration  24: 348141.416 ops/s
# Warmup Iteration  25: 349634.065 ops/s
# Warmup Iteration  26: 375684.910 ops/s
# Warmup Iteration  27: 357020.304 ops/s
# Warmup Iteration  28: 343297.742 ops/s
# Warmup Iteration  29: 364807.293 ops/s
# Warmup Iteration  30: 365696.919 ops/s
Iteration   1: 363538.601 ops/s
Iteration   2: 372820.081 ops/s
Iteration   3: 344379.185 ops/s
Iteration   4: 371759.814 ops/s
Iteration   5: 343754.397 ops/s
Iteration   6: 375902.213 ops/s
Iteration   7: 358148.361 ops/s
Iteration   8: 357958.915 ops/s
Iteration   9: 366442.205 ops/s
Iteration  10: 349750.185 ops/s
Iteration  11: 364078.027 ops/s
Iteration  12: 371098.664 ops/s
Iteration  13: 364508.549 ops/s
Iteration  14: 356590.217 ops/s
Iteration  15: 371018.456 ops/s
Iteration  16: 356835.660 ops/s
Iteration  17: 360766.084 ops/s
Iteration  18: 370124.718 ops/s
Iteration  19: 355880.020 ops/s
Iteration  20: 371347.712 ops/s
Iteration  21: 350274.757 ops/s
Iteration  22: 358579.576 ops/s
Iteration  23: 376354.324 ops/s
Iteration  24: 361881.734 ops/s
Iteration  25: 352923.726 ops/s
Iteration  26: 378911.395 ops/s
Iteration  27: 343906.981 ops/s
Iteration  28: 372540.430 ops/s
Iteration  29: 373302.694 ops/s
Iteration  30: 350027.986 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithTimeTest._Benchmark.benchmark_timed":
  362180.189 ±(99.9%) 6916.057 ops/s [Average]
  (min, avg, max) = (343754.397, 362180.189, 378911.395), stdev = 10351.630
  CI (99.9%): [355264.132, 369096.246] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score      Error  Units
ObservableWindowWithTimeTest._Benchmark.benchmark_timed  thrpt   30  362180.189 ± 6916.057  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithTimeTest._Benchmark.benchmark_timedAndCount$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithTimeTest._Benchmark.benchmark_timedAndCount

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 16100.365 ops/s
# Warmup Iteration   2: 88505.978 ops/s
# Warmup Iteration   3: 122386.158 ops/s
# Warmup Iteration   4: 244300.586 ops/s
# Warmup Iteration   5: 223912.626 ops/s
# Warmup Iteration   6: 223464.864 ops/s
# Warmup Iteration   7: 260232.601 ops/s
# Warmup Iteration   8: 244068.104 ops/s
# Warmup Iteration   9: 257199.151 ops/s
# Warmup Iteration  10: 257931.593 ops/s
# Warmup Iteration  11: 251469.470 ops/s
# Warmup Iteration  12: 259607.383 ops/s
# Warmup Iteration  13: 252020.202 ops/s
# Warmup Iteration  14: 257883.031 ops/s
# Warmup Iteration  15: 253478.140 ops/s
# Warmup Iteration  16: 254644.216 ops/s
# Warmup Iteration  17: 256283.559 ops/s
# Warmup Iteration  18: 255308.674 ops/s
# Warmup Iteration  19: 270756.046 ops/s
# Warmup Iteration  20: 252390.646 ops/s
# Warmup Iteration  21: 256976.141 ops/s
# Warmup Iteration  22: 248651.047 ops/s
# Warmup Iteration  23: 254250.060 ops/s
# Warmup Iteration  24: 249277.510 ops/s
# Warmup Iteration  25: 260903.460 ops/s
# Warmup Iteration  26: 253812.057 ops/s
# Warmup Iteration  27: 261643.367 ops/s
# Warmup Iteration  28: 257813.556 ops/s
# Warmup Iteration  29: 252692.252 ops/s
# Warmup Iteration  30: 262322.795 ops/s
Iteration   1: 252578.655 ops/s
Iteration   2: 250938.340 ops/s
Iteration   3: 246531.051 ops/s
Iteration   4: 249816.170 ops/s
Iteration   5: 258577.726 ops/s
Iteration   6: 251671.696 ops/s
Iteration   7: 249180.430 ops/s
Iteration   8: 205780.643 ops/s
Iteration   9: 255126.170 ops/s
Iteration  10: 254275.732 ops/s
Iteration  11: 250351.892 ops/s
Iteration  12: 259557.319 ops/s
Iteration  13: 250968.754 ops/s
Iteration  14: 258208.458 ops/s
Iteration  15: 249641.739 ops/s
Iteration  16: 253971.342 ops/s
Iteration  17: 257853.254 ops/s
Iteration  18: 252896.647 ops/s
Iteration  19: 265122.851 ops/s
Iteration  20: 257745.344 ops/s
Iteration  21: 249834.281 ops/s
Iteration  22: 254353.993 ops/s
Iteration  23: 256058.374 ops/s
Iteration  24: 264020.930 ops/s
Iteration  25: 251611.232 ops/s
Iteration  26: 260627.042 ops/s
Iteration  27: 263972.739 ops/s
Iteration  28: 258209.825 ops/s
Iteration  29: 249006.366 ops/s
Iteration  30: 259713.173 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithTimeTest._Benchmark.benchmark_timedAndCount":
  253273.406 ±(99.9%) 6835.220 ops/s [Average]
  (min, avg, max) = (205780.643, 253273.406, 265122.851), stdev = 10230.637
  CI (99.9%): [246438.185, 260108.626] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score      Error  Units
ObservableWindowWithTimeTest._Benchmark.benchmark_timedAndCount  thrpt   30  253273.406 ± 6835.220  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithStartEndObservableTest._Benchmark.benchmark_windowOpenMainError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithStartEndObservableTest._Benchmark.benchmark_windowOpenMainError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 19423.283 ops/s
# Warmup Iteration   2: 90085.052 ops/s
# Warmup Iteration   3: 164259.536 ops/s
# Warmup Iteration   4: 337038.327 ops/s
# Warmup Iteration   5: 335168.872 ops/s
# Warmup Iteration   6: 331772.902 ops/s
# Warmup Iteration   7: 361436.665 ops/s
# Warmup Iteration   8: 372452.292 ops/s
# Warmup Iteration   9: 363871.028 ops/s
# Warmup Iteration  10: 374726.714 ops/s
# Warmup Iteration  11: 372922.317 ops/s
# Warmup Iteration  12: 368982.653 ops/s
# Warmup Iteration  13: 353175.251 ops/s
# Warmup Iteration  14: 382538.153 ops/s
# Warmup Iteration  15: 369604.533 ops/s
# Warmup Iteration  16: 366546.431 ops/s
# Warmup Iteration  17: 373779.174 ops/s
# Warmup Iteration  18: 375910.963 ops/s
# Warmup Iteration  19: 374417.437 ops/s
# Warmup Iteration  20: 383095.150 ops/s
# Warmup Iteration  21: 382376.204 ops/s
# Warmup Iteration  22: 382568.227 ops/s
# Warmup Iteration  23: 384873.552 ops/s
# Warmup Iteration  24: 370388.062 ops/s
# Warmup Iteration  25: 392885.255 ops/s
# Warmup Iteration  26: 394056.002 ops/s
# Warmup Iteration  27: 372250.591 ops/s
# Warmup Iteration  28: 379824.646 ops/s
# Warmup Iteration  29: 388180.419 ops/s
# Warmup Iteration  30: 382330.816 ops/s
Iteration   1: 384920.574 ops/s
Iteration   2: 381910.783 ops/s
Iteration   3: 394481.837 ops/s
Iteration   4: 374649.446 ops/s
Iteration   5: 386631.848 ops/s
Iteration   6: 376999.702 ops/s
Iteration   7: 374424.328 ops/s
Iteration   8: 395246.959 ops/s
Iteration   9: 377614.597 ops/s
Iteration  10: 392004.461 ops/s
Iteration  11: 389436.352 ops/s
Iteration  12: 377232.900 ops/s
Iteration  13: 388746.964 ops/s
Iteration  14: 370453.417 ops/s
Iteration  15: 371873.490 ops/s
Iteration  16: 386995.235 ops/s
Iteration  17: 368793.133 ops/s
Iteration  18: 393053.713 ops/s
Iteration  19: 368294.131 ops/s
Iteration  20: 386072.466 ops/s
Iteration  21: 381854.007 ops/s
Iteration  22: 380528.045 ops/s
Iteration  23: 388561.731 ops/s
Iteration  24: 378461.363 ops/s
Iteration  25: 375840.887 ops/s
Iteration  26: 373674.266 ops/s
Iteration  27: 388373.838 ops/s
Iteration  28: 368439.500 ops/s
Iteration  29: 392928.969 ops/s
Iteration  30: 373772.674 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithStartEndObservableTest._Benchmark.benchmark_windowOpenMainError":
  381409.054 ±(99.9%) 5642.744 ops/s [Average]
  (min, avg, max) = (368294.131, 381409.054, 395246.959), stdev = 8445.794
  CI (99.9%): [375766.310, 387051.798] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             Mode  Cnt       Score      Error  Units
ObservableWindowWithStartEndObservableTest._Benchmark.benchmark_windowOpenMainError  thrpt   30  381409.054 ± 5642.744  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableCombineLatestTest._Benchmark.benchmark_dontSubscribeIfDone$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableCombineLatestTest._Benchmark.benchmark_dontSubscribeIfDone

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 65746.362 ops/s
# Warmup Iteration   2: 366632.242 ops/s
# Warmup Iteration   3: 448569.816 ops/s
# Warmup Iteration   4: 443766.229 ops/s
# Warmup Iteration   5: 449131.478 ops/s
# Warmup Iteration   6: 428429.897 ops/s
# Warmup Iteration   7: 422358.300 ops/s
# Warmup Iteration   8: 430961.944 ops/s
# Warmup Iteration   9: 449113.564 ops/s
# Warmup Iteration  10: 467035.435 ops/s
# Warmup Iteration  11: 476081.030 ops/s
# Warmup Iteration  12: 367425.250 ops/s
# Warmup Iteration  13: 453392.918 ops/s
# Warmup Iteration  14: 471736.860 ops/s
# Warmup Iteration  15: 454844.610 ops/s
# Warmup Iteration  16: 483402.151 ops/s
# Warmup Iteration  17: 479414.364 ops/s
# Warmup Iteration  18: 477798.219 ops/s
# Warmup Iteration  19: 470371.232 ops/s
# Warmup Iteration  20: 488977.515 ops/s
# Warmup Iteration  21: 469229.298 ops/s
# Warmup Iteration  22: 472415.610 ops/s
# Warmup Iteration  23: 477407.353 ops/s
# Warmup Iteration  24: 467048.067 ops/s
# Warmup Iteration  25: 504016.686 ops/s
# Warmup Iteration  26: 481250.286 ops/s
# Warmup Iteration  27: 472109.349 ops/s
# Warmup Iteration  28: 477995.298 ops/s
# Warmup Iteration  29: 489464.598 ops/s
# Warmup Iteration  30: 486793.411 ops/s
Iteration   1: 475442.485 ops/s
Iteration   2: 492417.262 ops/s
Iteration   3: 464898.797 ops/s
Iteration   4: 478826.676 ops/s
Iteration   5: 493505.897 ops/s
Iteration   6: 469066.824 ops/s
Iteration   7: 500216.338 ops/s
Iteration   8: 477891.212 ops/s
Iteration   9: 471292.108 ops/s
Iteration  10: 492391.446 ops/s
Iteration  11: 468170.810 ops/s
Iteration  12: 486002.540 ops/s
Iteration  13: 505147.073 ops/s
Iteration  14: 460058.361 ops/s
Iteration  15: 484301.785 ops/s
Iteration  16: 478703.998 ops/s
Iteration  17: 491695.704 ops/s
Iteration  18: 482666.007 ops/s
Iteration  19: 466980.717 ops/s
Iteration  20: 490258.117 ops/s
Iteration  21: 479119.398 ops/s
Iteration  22: 482066.265 ops/s
Iteration  23: 485507.188 ops/s
Iteration  24: 461092.322 ops/s
Iteration  25: 470406.532 ops/s
Iteration  26: 452975.043 ops/s
Iteration  27: 478017.082 ops/s
Iteration  28: 462312.007 ops/s
Iteration  29: 481218.506 ops/s
Iteration  30: 470066.759 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableCombineLatestTest._Benchmark.benchmark_dontSubscribeIfDone":
  478423.842 ±(99.9%) 8369.910 ops/s [Average]
  (min, avg, max) = (452975.043, 478423.842, 505147.073), stdev = 12527.688
  CI (99.9%): [470053.932, 486793.752] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score      Error  Units
ObservableCombineLatestTest._Benchmark.benchmark_dontSubscribeIfDone  thrpt   30  478423.842 ± 8369.910  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithObservableTest._Benchmark.benchmark_windowAbandonmentCancelsUpstream$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithObservableTest._Benchmark.benchmark_windowAbandonmentCancelsUpstream

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 83516.795 ops/s
# Warmup Iteration   2: 472689.348 ops/s
# Warmup Iteration   3: 987130.806 ops/s
# Warmup Iteration   4: 1126921.992 ops/s
# Warmup Iteration   5: 996011.865 ops/s
# Warmup Iteration   6: 1050484.522 ops/s
# Warmup Iteration   7: 1161171.376 ops/s
# Warmup Iteration   8: 1142310.238 ops/s
# Warmup Iteration   9: 1104611.788 ops/s
# Warmup Iteration  10: 1173796.081 ops/s
# Warmup Iteration  11: 1123039.882 ops/s
# Warmup Iteration  12: 1112056.300 ops/s
# Warmup Iteration  13: 1128216.146 ops/s
# Warmup Iteration  14: 1109453.734 ops/s
# Warmup Iteration  15: 1133693.499 ops/s
# Warmup Iteration  16: 1097859.757 ops/s
# Warmup Iteration  17: 1126453.417 ops/s
# Warmup Iteration  18: 1140069.610 ops/s
# Warmup Iteration  19: 1106937.058 ops/s
# Warmup Iteration  20: 1183835.811 ops/s
# Warmup Iteration  21: 1121149.262 ops/s
# Warmup Iteration  22: 1160754.657 ops/s
# Warmup Iteration  23: 1104554.592 ops/s
# Warmup Iteration  24: 1128912.696 ops/s
# Warmup Iteration  25: 1143552.356 ops/s
# Warmup Iteration  26: 1083426.779 ops/s
# Warmup Iteration  27: 1096637.818 ops/s
# Warmup Iteration  28: 1173852.210 ops/s
# Warmup Iteration  29: 1109370.310 ops/s
# Warmup Iteration  30: 949991.787 ops/s
Iteration   1: 1139611.181 ops/s
Iteration   2: 1109578.632 ops/s
Iteration   3: 1133624.055 ops/s
Iteration   4: 1092365.766 ops/s
Iteration   5: 1153449.744 ops/s
Iteration   6: 1086181.136 ops/s
Iteration   7: 1150241.846 ops/s
Iteration   8: 1079846.328 ops/s
Iteration   9: 1187163.395 ops/s
Iteration  10: 1099956.548 ops/s
Iteration  11: 1175998.468 ops/s
Iteration  12: 1127350.589 ops/s
Iteration  13: 1110007.662 ops/s
Iteration  14: 1135104.553 ops/s
Iteration  15: 1105871.651 ops/s
Iteration  16: 1188677.878 ops/s
Iteration  17: 1149686.903 ops/s
Iteration  18: 1111778.213 ops/s
Iteration  19: 1117563.063 ops/s
Iteration  20: 1129953.853 ops/s
Iteration  21: 1088691.426 ops/s
Iteration  22: 1159230.062 ops/s
Iteration  23: 1144485.895 ops/s
Iteration  24: 1139807.850 ops/s
Iteration  25: 1134976.400 ops/s
Iteration  26: 1130029.444 ops/s
Iteration  27: 1160452.296 ops/s
Iteration  28: 1088263.835 ops/s
Iteration  29: 1122532.739 ops/s
Iteration  30: 1155026.544 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithObservableTest._Benchmark.benchmark_windowAbandonmentCancelsUpstream":
  1130250.265 ±(99.9%) 19692.234 ops/s [Average]
  (min, avg, max) = (1079846.328, 1130250.265, 1188677.878), stdev = 29474.411
  CI (99.9%): [1110558.031, 1149942.499] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                  Mode  Cnt        Score       Error  Units
ObservableWindowWithObservableTest._Benchmark.benchmark_windowAbandonmentCancelsUpstream  thrpt   30  1130250.265 ± 19692.234  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 45087.413 ops/s
# Warmup Iteration   2: 233432.734 ops/s
# Warmup Iteration   3: 384951.943 ops/s
# Warmup Iteration   4: 370824.719 ops/s
# Warmup Iteration   5: 380380.035 ops/s
# Warmup Iteration   6: 431979.857 ops/s
# Warmup Iteration   7: 421928.779 ops/s
# Warmup Iteration   8: 419242.936 ops/s
# Warmup Iteration   9: 431577.386 ops/s
# Warmup Iteration  10: 421681.474 ops/s
# Warmup Iteration  11: 417661.249 ops/s
# Warmup Iteration  12: 442117.985 ops/s
# Warmup Iteration  13: 411062.755 ops/s
# Warmup Iteration  14: 436954.304 ops/s
# Warmup Iteration  15: 445177.814 ops/s
# Warmup Iteration  16: 412910.164 ops/s
# Warmup Iteration  17: 440299.319 ops/s
# Warmup Iteration  18: 452760.590 ops/s
# Warmup Iteration  19: 445061.799 ops/s
# Warmup Iteration  20: 443366.097 ops/s
# Warmup Iteration  21: 427780.386 ops/s
# Warmup Iteration  22: 462303.349 ops/s
# Warmup Iteration  23: 445101.341 ops/s
# Warmup Iteration  24: 438291.276 ops/s
# Warmup Iteration  25: 452891.041 ops/s
# Warmup Iteration  26: 439705.042 ops/s
# Warmup Iteration  27: 443904.786 ops/s
# Warmup Iteration  28: 454168.097 ops/s
# Warmup Iteration  29: 429098.832 ops/s
# Warmup Iteration  30: 457891.554 ops/s
Iteration   1: 446140.193 ops/s
Iteration   2: 430772.138 ops/s
Iteration   3: 465981.343 ops/s
Iteration   4: 431681.330 ops/s
Iteration   5: 451099.995 ops/s
Iteration   6: 434938.701 ops/s
Iteration   7: 452062.956 ops/s
Iteration   8: 443567.446 ops/s
Iteration   9: 437216.681 ops/s
Iteration  10: 450099.241 ops/s
Iteration  11: 430766.880 ops/s
Iteration  12: 455419.099 ops/s
Iteration  13: 429718.638 ops/s
Iteration  14: 430972.148 ops/s
Iteration  15: 436323.191 ops/s
Iteration  16: 439864.883 ops/s
Iteration  17: 449237.200 ops/s
Iteration  18: 456079.043 ops/s
Iteration  19: 429069.950 ops/s
Iteration  20: 449413.733 ops/s
Iteration  21: 447856.466 ops/s
Iteration  22: 430565.380 ops/s
Iteration  23: 468577.683 ops/s
Iteration  24: 427242.591 ops/s
Iteration  25: 452127.179 ops/s
Iteration  26: 431444.630 ops/s
Iteration  27: 450210.432 ops/s
Iteration  28: 435896.725 ops/s
Iteration  29: 439285.390 ops/s
Iteration  30: 448460.396 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_doubleOnSubscribe":
  442736.389 ±(99.9%) 7524.715 ops/s [Average]
  (min, avg, max) = (427242.591, 442736.389, 468577.683), stdev = 11262.640
  CI (99.9%): [435211.674, 450261.104] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score      Error  Units
ObservableConcatMapEagerTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  442736.389 ± 7524.715  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableSubscriberTest._Benchmark.benchmark_requestThroughMap$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableSubscriberTest._Benchmark.benchmark_requestThroughMap

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2210799.497 ops/s
# Warmup Iteration   2: 3917129.869 ops/s
# Warmup Iteration   3: 5315162.109 ops/s
# Warmup Iteration   4: 5406643.511 ops/s
# Warmup Iteration   5: 5568329.252 ops/s
# Warmup Iteration   6: 5398355.708 ops/s
# Warmup Iteration   7: 5358327.209 ops/s
# Warmup Iteration   8: 5484482.012 ops/s
# Warmup Iteration   9: 5083588.917 ops/s
# Warmup Iteration  10: 5531881.484 ops/s
# Warmup Iteration  11: 5491597.432 ops/s
# Warmup Iteration  12: 5443728.953 ops/s
# Warmup Iteration  13: 5506568.194 ops/s
# Warmup Iteration  14: 5431246.891 ops/s
# Warmup Iteration  15: 5257654.118 ops/s
# Warmup Iteration  16: 5622100.721 ops/s
# Warmup Iteration  17: 5167036.151 ops/s
# Warmup Iteration  18: 5447148.437 ops/s
# Warmup Iteration  19: 5432294.400 ops/s
# Warmup Iteration  20: 5457946.827 ops/s
# Warmup Iteration  21: 5558804.190 ops/s
# Warmup Iteration  22: 5423270.233 ops/s
# Warmup Iteration  23: 5421384.787 ops/s
# Warmup Iteration  24: 4904359.531 ops/s
# Warmup Iteration  25: 5008970.784 ops/s
# Warmup Iteration  26: 5343767.348 ops/s
# Warmup Iteration  27: 5456636.108 ops/s
# Warmup Iteration  28: 5669717.958 ops/s
# Warmup Iteration  29: 5309021.269 ops/s
# Warmup Iteration  30: 5584562.280 ops/s
Iteration   1: 5231704.812 ops/s
Iteration   2: 5385991.066 ops/s
Iteration   3: 5578929.732 ops/s
Iteration   4: 5298244.290 ops/s
Iteration   5: 5629707.293 ops/s
Iteration   6: 5303721.913 ops/s
Iteration   7: 5664191.524 ops/s
Iteration   8: 5387561.319 ops/s
Iteration   9: 5405665.443 ops/s
Iteration  10: 5539273.789 ops/s
Iteration  11: 5593116.860 ops/s
Iteration  12: 5537079.608 ops/s
Iteration  13: 5421083.503 ops/s
Iteration  14: 5512829.802 ops/s
Iteration  15: 5481027.058 ops/s
Iteration  16: 5306621.099 ops/s
Iteration  17: 5707237.724 ops/s
Iteration  18: 5499030.336 ops/s
Iteration  19: 5288691.030 ops/s
Iteration  20: 5640960.725 ops/s
Iteration  21: 5318831.488 ops/s
Iteration  22: 5440625.526 ops/s
Iteration  23: 5307089.425 ops/s
Iteration  24: 5331174.502 ops/s
Iteration  25: 5727501.329 ops/s
Iteration  26: 5344905.155 ops/s
Iteration  27: 5603618.460 ops/s
Iteration  28: 5357490.362 ops/s
Iteration  29: 5482564.501 ops/s
Iteration  30: 5623260.351 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableSubscriberTest._Benchmark.benchmark_requestThroughMap":
  5464991.001 ±(99.9%) 95023.108 ops/s [Average]
  (min, avg, max) = (5231704.812, 5464991.001, 5727501.329), stdev = 142226.125
  CI (99.9%): [5369967.893, 5560014.108] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
FlowableSubscriberTest._Benchmark.benchmark_requestThroughMap  thrpt   30  5464991.001 ± 95023.108  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnRequestTest._Benchmark.benchmark_doRequest$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnRequestTest._Benchmark.benchmark_doRequest

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 875338.698 ops/s
# Warmup Iteration   2: 2782189.963 ops/s
# Warmup Iteration   3: 2870814.464 ops/s
# Warmup Iteration   4: 3613921.560 ops/s
# Warmup Iteration   5: 3511897.259 ops/s
# Warmup Iteration   6: 3495103.993 ops/s
# Warmup Iteration   7: 3627448.227 ops/s
# Warmup Iteration   8: 3463309.328 ops/s
# Warmup Iteration   9: 3571915.403 ops/s
# Warmup Iteration  10: 3483951.703 ops/s
# Warmup Iteration  11: 3471887.497 ops/s
# Warmup Iteration  12: 3616125.649 ops/s
# Warmup Iteration  13: 3530062.507 ops/s
# Warmup Iteration  14: 3390917.594 ops/s
# Warmup Iteration  15: 3638460.814 ops/s
# Warmup Iteration  16: 3636054.437 ops/s
# Warmup Iteration  17: 3424907.766 ops/s
# Warmup Iteration  18: 3677096.863 ops/s
# Warmup Iteration  19: 3591077.571 ops/s
# Warmup Iteration  20: 3444042.773 ops/s
# Warmup Iteration  21: 3612210.006 ops/s
# Warmup Iteration  22: 3449987.649 ops/s
# Warmup Iteration  23: 3600250.385 ops/s
# Warmup Iteration  24: 3479224.260 ops/s
# Warmup Iteration  25: 3600504.539 ops/s
# Warmup Iteration  26: 3529035.142 ops/s
# Warmup Iteration  27: 3523360.281 ops/s
# Warmup Iteration  28: 3625759.423 ops/s
# Warmup Iteration  29: 3426225.290 ops/s
# Warmup Iteration  30: 3666493.623 ops/s
Iteration   1: 3428452.827 ops/s
Iteration   2: 3519374.387 ops/s
Iteration   3: 3610597.339 ops/s
Iteration   4: 3529306.738 ops/s
Iteration   5: 3627426.546 ops/s
Iteration   6: 3463753.974 ops/s
Iteration   7: 3404854.305 ops/s
Iteration   8: 3693933.773 ops/s
Iteration   9: 3538890.184 ops/s
Iteration  10: 3443971.382 ops/s
Iteration  11: 3679841.852 ops/s
Iteration  12: 3451223.301 ops/s
Iteration  13: 3682267.712 ops/s
Iteration  14: 3396217.018 ops/s
Iteration  15: 3393225.858 ops/s
Iteration  16: 3664389.351 ops/s
Iteration  17: 3448455.587 ops/s
Iteration  18: 3567207.911 ops/s
Iteration  19: 3571269.109 ops/s
Iteration  20: 3503950.372 ops/s
Iteration  21: 3574716.729 ops/s
Iteration  22: 3437697.036 ops/s
Iteration  23: 3631511.439 ops/s
Iteration  24: 3587875.723 ops/s
Iteration  25: 3547489.496 ops/s
Iteration  26: 3548715.321 ops/s
Iteration  27: 3548472.064 ops/s
Iteration  28: 3499505.449 ops/s
Iteration  29: 3680567.996 ops/s
Iteration  30: 3443321.589 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnRequestTest._Benchmark.benchmark_doRequest":
  3537282.746 ±(99.9%) 62334.201 ops/s [Average]
  (min, avg, max) = (3393225.858, 3537282.746, 3693933.773), stdev = 93298.905
  CI (99.9%): [3474948.544, 3599616.947] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
FlowableDoOnRequestTest._Benchmark.benchmark_doRequest  thrpt   30  3537282.746 ± 62334.201  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_fusedInnerThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_fusedInnerThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 55750.275 ops/s
# Warmup Iteration   2: 264925.539 ops/s
# Warmup Iteration   3: 311655.489 ops/s
# Warmup Iteration   4: 330459.499 ops/s
# Warmup Iteration   5: 324745.928 ops/s
# Warmup Iteration   6: 334174.653 ops/s
# Warmup Iteration   7: 331628.836 ops/s
# Warmup Iteration   8: 342585.566 ops/s
# Warmup Iteration   9: 329531.252 ops/s
# Warmup Iteration  10: 331972.175 ops/s
# Warmup Iteration  11: 338310.064 ops/s
# Warmup Iteration  12: 326399.099 ops/s
# Warmup Iteration  13: 332046.410 ops/s
# Warmup Iteration  14: 340782.385 ops/s
# Warmup Iteration  15: 322938.904 ops/s
# Warmup Iteration  16: 332202.511 ops/s
# Warmup Iteration  17: 332114.582 ops/s
# Warmup Iteration  18: 332646.112 ops/s
# Warmup Iteration  19: 294069.834 ops/s
# Warmup Iteration  20: 329179.014 ops/s
# Warmup Iteration  21: 353356.594 ops/s
# Warmup Iteration  22: 339997.341 ops/s
# Warmup Iteration  23: 338820.608 ops/s
# Warmup Iteration  24: 333152.250 ops/s
# Warmup Iteration  25: 348094.047 ops/s
# Warmup Iteration  26: 338783.139 ops/s
# Warmup Iteration  27: 359033.979 ops/s
# Warmup Iteration  28: 332300.676 ops/s
# Warmup Iteration  29: 354619.866 ops/s
# Warmup Iteration  30: 338215.326 ops/s
Iteration   1: 338761.823 ops/s
Iteration   2: 350135.068 ops/s
Iteration   3: 345165.601 ops/s
Iteration   4: 329360.589 ops/s
Iteration   5: 358257.159 ops/s
Iteration   6: 336407.651 ops/s
Iteration   7: 350810.457 ops/s
Iteration   8: 322313.800 ops/s
Iteration   9: 345409.782 ops/s
Iteration  10: 346472.440 ops/s
Iteration  11: 338610.031 ops/s
Iteration  12: 350237.193 ops/s
Iteration  13: 333268.087 ops/s
Iteration  14: 340804.789 ops/s
Iteration  15: 355910.621 ops/s
Iteration  16: 337317.095 ops/s
Iteration  17: 331755.592 ops/s
Iteration  18: 354542.529 ops/s
Iteration  19: 323774.955 ops/s
Iteration  20: 329842.212 ops/s
Iteration  21: 358513.861 ops/s
Iteration  22: 340849.770 ops/s
Iteration  23: 350527.395 ops/s
Iteration  24: 328468.103 ops/s
Iteration  25: 350801.291 ops/s
Iteration  26: 353044.415 ops/s
Iteration  27: 344571.144 ops/s
Iteration  28: 355709.116 ops/s
Iteration  29: 333718.616 ops/s
Iteration  30: 352564.294 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_fusedInnerThrows":
  342930.849 ±(99.9%) 7052.696 ops/s [Average]
  (min, avg, max) = (322313.800, 342930.849, 358513.861), stdev = 10556.145
  CI (99.9%): [335878.153, 349983.546] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
FlowableFlatMapTest._Benchmark.benchmark_fusedInnerThrows  thrpt   30  342930.849 ± 7052.696  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.subscribers.StrictSubscriberTest._Benchmark.benchmark_deferredRequest$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.subscribers.StrictSubscriberTest._Benchmark.benchmark_deferredRequest

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 509953.354 ops/s
# Warmup Iteration   2: 1368807.522 ops/s
# Warmup Iteration   3: 2117174.698 ops/s
# Warmup Iteration   4: 1885621.381 ops/s
# Warmup Iteration   5: 2308812.161 ops/s
# Warmup Iteration   6: 2272415.645 ops/s
# Warmup Iteration   7: 2335768.570 ops/s
# Warmup Iteration   8: 2371249.816 ops/s
# Warmup Iteration   9: 2228860.866 ops/s
# Warmup Iteration  10: 2316670.700 ops/s
# Warmup Iteration  11: 2267797.067 ops/s
# Warmup Iteration  12: 2286438.536 ops/s
# Warmup Iteration  13: 2344765.570 ops/s
# Warmup Iteration  14: 2201795.768 ops/s
# Warmup Iteration  15: 2331981.500 ops/s
# Warmup Iteration  16: 2226376.758 ops/s
# Warmup Iteration  17: 2237026.799 ops/s
# Warmup Iteration  18: 2309475.972 ops/s
# Warmup Iteration  19: 2243546.301 ops/s
# Warmup Iteration  20: 2305295.910 ops/s
# Warmup Iteration  21: 2290780.738 ops/s
# Warmup Iteration  22: 2238835.062 ops/s
# Warmup Iteration  23: 2314228.340 ops/s
# Warmup Iteration  24: 2184039.203 ops/s
# Warmup Iteration  25: 2295951.925 ops/s
# Warmup Iteration  26: 2267985.239 ops/s
# Warmup Iteration  27: 2356584.472 ops/s
# Warmup Iteration  28: 2236014.409 ops/s
# Warmup Iteration  29: 2322362.230 ops/s
# Warmup Iteration  30: 2282056.343 ops/s
Iteration   1: 2357630.708 ops/s
Iteration   2: 2243799.821 ops/s
Iteration   3: 2271372.039 ops/s
Iteration   4: 2321206.918 ops/s
Iteration   5: 2205651.542 ops/s
Iteration   6: 2383496.036 ops/s
Iteration   7: 2181845.946 ops/s
Iteration   8: 2354183.287 ops/s
Iteration   9: 2255143.497 ops/s
Iteration  10: 2282679.299 ops/s
Iteration  11: 2310329.009 ops/s
Iteration  12: 2237219.048 ops/s
Iteration  13: 2334467.522 ops/s
Iteration  14: 2283856.516 ops/s
Iteration  15: 2202652.593 ops/s
Iteration  16: 2324710.762 ops/s
Iteration  17: 2358432.976 ops/s
Iteration  18: 2166038.518 ops/s
Iteration  19: 2386291.791 ops/s
Iteration  20: 2336291.457 ops/s
Iteration  21: 2242997.600 ops/s
Iteration  22: 2326679.129 ops/s
Iteration  23: 2244715.434 ops/s
Iteration  24: 2238364.435 ops/s
Iteration  25: 2367386.964 ops/s
Iteration  26: 2280964.634 ops/s
Iteration  27: 2297367.398 ops/s
Iteration  28: 2306813.740 ops/s
Iteration  29: 2259839.857 ops/s
Iteration  30: 2393166.311 ops/s


Result "io.reactivex.rxjava3.internal.subscribers.StrictSubscriberTest._Benchmark.benchmark_deferredRequest":
  2291853.160 ±(99.9%) 41633.650 ops/s [Average]
  (min, avg, max) = (2166038.518, 2291853.160, 2393166.311), stdev = 62315.293
  CI (99.9%): [2250219.509, 2333486.810] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
StrictSubscriberTest._Benchmark.benchmark_deferredRequest  thrpt   30  2291853.160 ± 41633.650  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableSubscriberTest._Benchmark.benchmark_subscribeConsumerConsumer$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableSubscriberTest._Benchmark.benchmark_subscribeConsumerConsumer

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2250138.483 ops/s
# Warmup Iteration   2: 5944238.955 ops/s
# Warmup Iteration   3: 7527640.347 ops/s
# Warmup Iteration   4: 8410249.608 ops/s
# Warmup Iteration   5: 8148822.902 ops/s
# Warmup Iteration   6: 8603431.266 ops/s
# Warmup Iteration   7: 8192887.622 ops/s
# Warmup Iteration   8: 8189681.619 ops/s
# Warmup Iteration   9: 8772497.322 ops/s
# Warmup Iteration  10: 8528312.133 ops/s
# Warmup Iteration  11: 8455232.563 ops/s
# Warmup Iteration  12: 8788993.110 ops/s
# Warmup Iteration  13: 8195761.853 ops/s
# Warmup Iteration  14: 6471684.022 ops/s
# Warmup Iteration  15: 8561682.249 ops/s
# Warmup Iteration  16: 7939629.961 ops/s
# Warmup Iteration  17: 8380008.003 ops/s
# Warmup Iteration  18: 8166905.498 ops/s
# Warmup Iteration  19: 8363717.377 ops/s
# Warmup Iteration  20: 8147593.001 ops/s
# Warmup Iteration  21: 8492619.259 ops/s
# Warmup Iteration  22: 8327656.501 ops/s
# Warmup Iteration  23: 8330310.751 ops/s
# Warmup Iteration  24: 8091630.751 ops/s
# Warmup Iteration  25: 8403504.903 ops/s
# Warmup Iteration  26: 8240641.984 ops/s
# Warmup Iteration  27: 8300522.992 ops/s
# Warmup Iteration  28: 8333092.163 ops/s
# Warmup Iteration  29: 8213358.568 ops/s
# Warmup Iteration  30: 8558364.027 ops/s
Iteration   1: 8196222.650 ops/s
Iteration   2: 8291250.912 ops/s
Iteration   3: 8676196.452 ops/s
Iteration   4: 8127932.524 ops/s
Iteration   5: 8449086.293 ops/s
Iteration   6: 8148544.383 ops/s
Iteration   7: 8524729.143 ops/s
Iteration   8: 8733627.229 ops/s
Iteration   9: 8055067.181 ops/s
Iteration  10: 8647867.328 ops/s
Iteration  11: 8140567.249 ops/s
Iteration  12: 8439892.712 ops/s
Iteration  13: 8598540.141 ops/s
Iteration  14: 8062583.318 ops/s
Iteration  15: 8359093.446 ops/s
Iteration  16: 8169785.832 ops/s
Iteration  17: 8599789.729 ops/s
Iteration  18: 8195194.259 ops/s
Iteration  19: 8342461.204 ops/s
Iteration  20: 8327131.463 ops/s
Iteration  21: 8472922.500 ops/s
Iteration  22: 8356802.326 ops/s
Iteration  23: 8503123.202 ops/s
Iteration  24: 8314647.061 ops/s
Iteration  25: 8161641.302 ops/s
Iteration  26: 8533938.316 ops/s
Iteration  27: 8025874.041 ops/s
Iteration  28: 8725349.111 ops/s
Iteration  29: 8250063.721 ops/s
Iteration  30: 8188858.682 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableSubscriberTest._Benchmark.benchmark_subscribeConsumerConsumer":
  8353959.457 ±(99.9%) 141077.513 ops/s [Average]
  (min, avg, max) = (8025874.041, 8353959.457, 8733627.229), stdev = 211158.196
  CI (99.9%): [8212881.944, 8495036.970] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score        Error  Units
FlowableSubscriberTest._Benchmark.benchmark_subscribeConsumerConsumer  thrpt   30  8353959.457 ± 141077.513  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableForEachTest._Benchmark.benchmark_forEachWile$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableForEachTest._Benchmark.benchmark_forEachWile

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 483022.213 ops/s
# Warmup Iteration   2: 2668735.520 ops/s
# Warmup Iteration   3: 3286933.124 ops/s
# Warmup Iteration   4: 3793851.422 ops/s
# Warmup Iteration   5: 4060592.664 ops/s
# Warmup Iteration   6: 3790593.514 ops/s
# Warmup Iteration   7: 3870292.761 ops/s
# Warmup Iteration   8: 3868817.054 ops/s
# Warmup Iteration   9: 3920482.260 ops/s
# Warmup Iteration  10: 3819651.455 ops/s
# Warmup Iteration  11: 3862283.878 ops/s
# Warmup Iteration  12: 3863967.641 ops/s
# Warmup Iteration  13: 3901189.974 ops/s
# Warmup Iteration  14: 3948071.988 ops/s
# Warmup Iteration  15: 3756573.278 ops/s
# Warmup Iteration  16: 4017381.243 ops/s
# Warmup Iteration  17: 3794814.197 ops/s
# Warmup Iteration  18: 3944549.119 ops/s
# Warmup Iteration  19: 3740463.633 ops/s
# Warmup Iteration  20: 3910354.587 ops/s
# Warmup Iteration  21: 3948100.008 ops/s
# Warmup Iteration  22: 3812305.373 ops/s
# Warmup Iteration  23: 3958341.215 ops/s
# Warmup Iteration  24: 3787500.110 ops/s
# Warmup Iteration  25: 3828230.672 ops/s
# Warmup Iteration  26: 3925557.803 ops/s
# Warmup Iteration  27: 3689595.309 ops/s
# Warmup Iteration  28: 3895238.123 ops/s
# Warmup Iteration  29: 3910287.485 ops/s
# Warmup Iteration  30: 3882591.615 ops/s
Iteration   1: 3832682.528 ops/s
Iteration   2: 3811174.710 ops/s
Iteration   3: 3965312.513 ops/s
Iteration   4: 3731894.548 ops/s
Iteration   5: 3871992.578 ops/s
Iteration   6: 3818431.562 ops/s
Iteration   7: 3876031.928 ops/s
Iteration   8: 3890686.324 ops/s
Iteration   9: 3756035.069 ops/s
Iteration  10: 3818147.784 ops/s
Iteration  11: 3955441.241 ops/s
Iteration  12: 3758221.862 ops/s
Iteration  13: 3988648.205 ops/s
Iteration  14: 3775926.474 ops/s
Iteration  15: 3778509.845 ops/s
Iteration  16: 3897366.550 ops/s
Iteration  17: 3919155.946 ops/s
Iteration  18: 3755725.068 ops/s
Iteration  19: 3881657.633 ops/s
Iteration  20: 3917985.362 ops/s
Iteration  21: 3731134.569 ops/s
Iteration  22: 3886372.360 ops/s
Iteration  23: 3855771.619 ops/s
Iteration  24: 3848952.518 ops/s
Iteration  25: 3890212.386 ops/s
Iteration  26: 3976146.972 ops/s
Iteration  27: 3919642.182 ops/s
Iteration  28: 3796271.808 ops/s
Iteration  29: 3850237.220 ops/s
Iteration  30: 3787465.806 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableForEachTest._Benchmark.benchmark_forEachWile":
  3851441.172 ±(99.9%) 49348.136 ops/s [Average]
  (min, avg, max) = (3731134.569, 3851441.172, 3988648.205), stdev = 73861.972
  CI (99.9%): [3802093.036, 3900789.308] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
FlowableForEachTest._Benchmark.benchmark_forEachWile  thrpt   30  3851441.172 ± 49348.136  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorCompleteTest._Benchmark.benchmark_normalBackpressured$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorCompleteTest._Benchmark.benchmark_normalBackpressured

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 302457.991 ops/s
# Warmup Iteration   2: 1998503.397 ops/s
# Warmup Iteration   3: 2052816.225 ops/s
# Warmup Iteration   4: 2460422.937 ops/s
# Warmup Iteration   5: 2713268.549 ops/s
# Warmup Iteration   6: 2555927.470 ops/s
# Warmup Iteration   7: 2719431.083 ops/s
# Warmup Iteration   8: 2535421.226 ops/s
# Warmup Iteration   9: 2117112.380 ops/s
# Warmup Iteration  10: 2646520.869 ops/s
# Warmup Iteration  11: 2556915.378 ops/s
# Warmup Iteration  12: 2753575.464 ops/s
# Warmup Iteration  13: 2550070.914 ops/s
# Warmup Iteration  14: 2662093.182 ops/s
# Warmup Iteration  15: 2644660.166 ops/s
# Warmup Iteration  16: 2597321.454 ops/s
# Warmup Iteration  17: 2596698.125 ops/s
# Warmup Iteration  18: 2560892.375 ops/s
# Warmup Iteration  19: 2652519.796 ops/s
# Warmup Iteration  20: 2574943.574 ops/s
# Warmup Iteration  21: 2655214.954 ops/s
# Warmup Iteration  22: 2631986.168 ops/s
# Warmup Iteration  23: 2545823.457 ops/s
# Warmup Iteration  24: 2645176.983 ops/s
# Warmup Iteration  25: 2642344.068 ops/s
# Warmup Iteration  26: 2563725.384 ops/s
# Warmup Iteration  27: 2701617.811 ops/s
# Warmup Iteration  28: 2611815.902 ops/s
# Warmup Iteration  29: 2595835.835 ops/s
# Warmup Iteration  30: 2661505.324 ops/s
Iteration   1: 2613853.239 ops/s
Iteration   2: 2589083.092 ops/s
Iteration   3: 2631973.105 ops/s
Iteration   4: 2632178.873 ops/s
Iteration   5: 2596849.085 ops/s
Iteration   6: 2627189.995 ops/s
Iteration   7: 2738984.039 ops/s
Iteration   8: 2684772.953 ops/s
Iteration   9: 2514587.309 ops/s
Iteration  10: 2663991.105 ops/s
Iteration  11: 2686954.662 ops/s
Iteration  12: 2586162.550 ops/s
Iteration  13: 2622510.116 ops/s
Iteration  14: 2619708.065 ops/s
Iteration  15: 2585845.304 ops/s
Iteration  16: 2662683.069 ops/s
Iteration  17: 2509463.318 ops/s
Iteration  18: 2605520.111 ops/s
Iteration  19: 2606770.125 ops/s
Iteration  20: 2771160.218 ops/s
Iteration  21: 2508737.179 ops/s
Iteration  22: 2738088.260 ops/s
Iteration  23: 2623423.929 ops/s
Iteration  24: 2709232.629 ops/s
Iteration  25: 2641776.078 ops/s
Iteration  26: 2591325.949 ops/s
Iteration  27: 2633520.233 ops/s
Iteration  28: 2677431.893 ops/s
Iteration  29: 2539065.070 ops/s
Iteration  30: 2705660.111 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorCompleteTest._Benchmark.benchmark_normalBackpressured":
  2630616.722 ±(99.9%) 44201.202 ops/s [Average]
  (min, avg, max) = (2508737.179, 2630616.722, 2771160.218), stdev = 66158.284
  CI (99.9%): [2586415.520, 2674817.925] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
FlowableOnErrorCompleteTest._Benchmark.benchmark_normalBackpressured  thrpt   30  2630616.722 ± 44201.202  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_mergeIterableOneIsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_mergeIterableOneIsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 99554.500 ops/s
# Warmup Iteration   2: 447723.559 ops/s
# Warmup Iteration   3: 496965.020 ops/s
# Warmup Iteration   4: 431443.294 ops/s
# Warmup Iteration   5: 552966.850 ops/s
# Warmup Iteration   6: 527182.562 ops/s
# Warmup Iteration   7: 463967.253 ops/s
# Warmup Iteration   8: 544397.092 ops/s
# Warmup Iteration   9: 535154.578 ops/s
# Warmup Iteration  10: 513192.773 ops/s
# Warmup Iteration  11: 529163.519 ops/s
# Warmup Iteration  12: 520402.941 ops/s
# Warmup Iteration  13: 532524.439 ops/s
# Warmup Iteration  14: 548190.112 ops/s
# Warmup Iteration  15: 511388.127 ops/s
# Warmup Iteration  16: 545974.900 ops/s
# Warmup Iteration  17: 550670.393 ops/s
# Warmup Iteration  18: 566469.108 ops/s
# Warmup Iteration  19: 533811.439 ops/s
# Warmup Iteration  20: 561830.078 ops/s
# Warmup Iteration  21: 581649.358 ops/s
# Warmup Iteration  22: 543085.636 ops/s
# Warmup Iteration  23: 534737.457 ops/s
# Warmup Iteration  24: 564535.652 ops/s
# Warmup Iteration  25: 545927.623 ops/s
# Warmup Iteration  26: 571549.501 ops/s
# Warmup Iteration  27: 561367.865 ops/s
# Warmup Iteration  28: 534546.580 ops/s
# Warmup Iteration  29: 568085.975 ops/s
# Warmup Iteration  30: 538947.769 ops/s
Iteration   1: 575043.816 ops/s
Iteration   2: 560708.325 ops/s
Iteration   3: 537364.840 ops/s
Iteration   4: 563524.042 ops/s
Iteration   5: 586283.518 ops/s
Iteration   6: 524795.415 ops/s
Iteration   7: 572594.273 ops/s
Iteration   8: 549655.577 ops/s
Iteration   9: 577370.235 ops/s
Iteration  10: 532310.127 ops/s
Iteration  11: 565385.013 ops/s
Iteration  12: 555461.460 ops/s
Iteration  13: 554415.455 ops/s
Iteration  14: 575122.144 ops/s
Iteration  15: 561416.361 ops/s
Iteration  16: 548108.732 ops/s
Iteration  17: 560652.574 ops/s
Iteration  18: 547307.297 ops/s
Iteration  19: 567581.139 ops/s
Iteration  20: 576405.753 ops/s
Iteration  21: 551810.302 ops/s
Iteration  22: 573956.063 ops/s
Iteration  23: 542771.305 ops/s
Iteration  24: 562107.709 ops/s
Iteration  25: 545981.866 ops/s
Iteration  26: 576651.585 ops/s
Iteration  27: 564661.838 ops/s
Iteration  28: 525974.159 ops/s
Iteration  29: 555861.292 ops/s
Iteration  30: 574094.560 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_mergeIterableOneIsNull":
  558845.892 ±(99.9%) 10635.737 ops/s [Average]
  (min, avg, max) = (524795.415, 558845.892, 586283.518), stdev = 15919.072
  CI (99.9%): [548210.155, 569481.630] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score       Error  Units
FlowableNullTests._Benchmark.benchmark_mergeIterableOneIsNull  thrpt   30  558845.892 ± 10635.737  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_flatMapNotificationOnCompleteReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_flatMapNotificationOnCompleteReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 73956.590 ops/s
# Warmup Iteration   2: 370712.591 ops/s
# Warmup Iteration   3: 339936.695 ops/s
# Warmup Iteration   4: 407070.012 ops/s
# Warmup Iteration   5: 428547.497 ops/s
# Warmup Iteration   6: 414006.573 ops/s
# Warmup Iteration   7: 396988.421 ops/s
# Warmup Iteration   8: 435526.548 ops/s
# Warmup Iteration   9: 418578.023 ops/s
# Warmup Iteration  10: 393216.990 ops/s
# Warmup Iteration  11: 426519.162 ops/s
# Warmup Iteration  12: 418570.550 ops/s
# Warmup Iteration  13: 394408.174 ops/s
# Warmup Iteration  14: 415495.810 ops/s
# Warmup Iteration  15: 422141.482 ops/s
# Warmup Iteration  16: 421412.263 ops/s
# Warmup Iteration  17: 419735.248 ops/s
# Warmup Iteration  18: 432950.832 ops/s
# Warmup Iteration  19: 439546.336 ops/s
# Warmup Iteration  20: 429478.910 ops/s
# Warmup Iteration  21: 443813.602 ops/s
# Warmup Iteration  22: 431093.574 ops/s
# Warmup Iteration  23: 418940.465 ops/s
# Warmup Iteration  24: 437961.318 ops/s
# Warmup Iteration  25: 437988.621 ops/s
# Warmup Iteration  26: 423898.589 ops/s
# Warmup Iteration  27: 424699.664 ops/s
# Warmup Iteration  28: 424602.363 ops/s
# Warmup Iteration  29: 429562.715 ops/s
# Warmup Iteration  30: 428971.884 ops/s
Iteration   1: 438065.166 ops/s
Iteration   2: 411394.231 ops/s
Iteration   3: 439686.544 ops/s
Iteration   4: 440370.811 ops/s
Iteration   5: 419422.323 ops/s
Iteration   6: 442901.479 ops/s
Iteration   7: 428215.333 ops/s
Iteration   8: 450248.357 ops/s
Iteration   9: 419044.766 ops/s
Iteration  10: 438558.471 ops/s
Iteration  11: 422039.856 ops/s
Iteration  12: 440086.596 ops/s
Iteration  13: 442534.385 ops/s
Iteration  14: 423465.819 ops/s
Iteration  15: 423826.727 ops/s
Iteration  16: 455159.859 ops/s
Iteration  17: 412475.509 ops/s
Iteration  18: 437191.887 ops/s
Iteration  19: 426358.542 ops/s
Iteration  20: 429565.573 ops/s
Iteration  21: 446289.836 ops/s
Iteration  22: 421929.362 ops/s
Iteration  23: 436218.198 ops/s
Iteration  24: 420121.586 ops/s
Iteration  25: 433399.399 ops/s
Iteration  26: 424553.785 ops/s
Iteration  27: 435491.870 ops/s
Iteration  28: 443220.575 ops/s
Iteration  29: 426478.589 ops/s
Iteration  30: 444853.423 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_flatMapNotificationOnCompleteReturnsNull":
  432438.962 ±(99.9%) 7519.201 ops/s [Average]
  (min, avg, max) = (411394.231, 432438.962, 455159.859), stdev = 11254.387
  CI (99.9%): [424919.761, 439958.163] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt       Score      Error  Units
FlowableNullTests._Benchmark.benchmark_flatMapNotificationOnCompleteReturnsNull  thrpt   30  432438.962 ± 7519.201  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorCompleteTest._Benchmark.benchmark_normal$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorCompleteTest._Benchmark.benchmark_normal

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 562530.426 ops/s
# Warmup Iteration   2: 2484944.612 ops/s
# Warmup Iteration   3: 2676257.096 ops/s
# Warmup Iteration   4: 3234854.068 ops/s
# Warmup Iteration   5: 3360458.740 ops/s
# Warmup Iteration   6: 3347018.449 ops/s
# Warmup Iteration   7: 3408014.150 ops/s
# Warmup Iteration   8: 3226730.001 ops/s
# Warmup Iteration   9: 3321666.824 ops/s
# Warmup Iteration  10: 3174706.192 ops/s
# Warmup Iteration  11: 3254684.873 ops/s
# Warmup Iteration  12: 3272479.883 ops/s
# Warmup Iteration  13: 3253181.959 ops/s
# Warmup Iteration  14: 3358288.072 ops/s
# Warmup Iteration  15: 3222823.004 ops/s
# Warmup Iteration  16: 3285138.904 ops/s
# Warmup Iteration  17: 3288785.403 ops/s
# Warmup Iteration  18: 3219978.454 ops/s
# Warmup Iteration  19: 3395808.633 ops/s
# Warmup Iteration  20: 3123115.698 ops/s
# Warmup Iteration  21: 3265692.993 ops/s
# Warmup Iteration  22: 3390176.358 ops/s
# Warmup Iteration  23: 3133225.194 ops/s
# Warmup Iteration  24: 3255913.187 ops/s
# Warmup Iteration  25: 3238797.911 ops/s
# Warmup Iteration  26: 3361581.900 ops/s
# Warmup Iteration  27: 3255688.968 ops/s
# Warmup Iteration  28: 3260501.666 ops/s
# Warmup Iteration  29: 3310114.586 ops/s
# Warmup Iteration  30: 3247738.784 ops/s
Iteration   1: 3328908.512 ops/s
Iteration   2: 3187009.251 ops/s
Iteration   3: 3353447.519 ops/s
Iteration   4: 3246465.919 ops/s
Iteration   5: 3255209.252 ops/s
Iteration   6: 3307068.465 ops/s
Iteration   7: 3249219.326 ops/s
Iteration   8: 3200823.768 ops/s
Iteration   9: 3329491.976 ops/s
Iteration  10: 3181821.830 ops/s
Iteration  11: 3339381.275 ops/s
Iteration  12: 3261099.582 ops/s
Iteration  13: 3285924.069 ops/s
Iteration  14: 3104467.076 ops/s
Iteration  15: 3213996.437 ops/s
Iteration  16: 3280618.174 ops/s
Iteration  17: 3067869.812 ops/s
Iteration  18: 3274365.797 ops/s
Iteration  19: 3202130.388 ops/s
Iteration  20: 3275158.390 ops/s
Iteration  21: 3137169.645 ops/s
Iteration  22: 3320957.379 ops/s
Iteration  23: 3304193.201 ops/s
Iteration  24: 3133476.029 ops/s
Iteration  25: 3434365.957 ops/s
Iteration  26: 3189985.283 ops/s
Iteration  27: 3251994.439 ops/s
Iteration  28: 3237407.631 ops/s
Iteration  29: 3312224.244 ops/s
Iteration  30: 2854536.287 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorCompleteTest._Benchmark.benchmark_normal":
  3237359.564 ±(99.9%) 71764.082 ops/s [Average]
  (min, avg, max) = (2854536.287, 3237359.564, 3434365.957), stdev = 107413.108
  CI (99.9%): [3165595.482, 3309123.646] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
FlowableOnErrorCompleteTest._Benchmark.benchmark_normal  thrpt   30  3237359.564 ± 71764.082  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsTest._Benchmark.benchmark_doesNotHangAndProcessesAllUsingBackpressure$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsTest._Benchmark.benchmark_doesNotHangAndProcessesAllUsingBackpressure

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 813228.160 ops/s
# Warmup Iteration   2: 2843251.492 ops/s
# Warmup Iteration   3: 3210992.060 ops/s
# Warmup Iteration   4: 3059365.280 ops/s
# Warmup Iteration   5: 3279100.778 ops/s
# Warmup Iteration   6: 2799585.642 ops/s
# Warmup Iteration   7: 3436753.934 ops/s
# Warmup Iteration   8: 3280859.580 ops/s
# Warmup Iteration   9: 3346741.206 ops/s
# Warmup Iteration  10: 3415821.862 ops/s
# Warmup Iteration  11: 3268676.011 ops/s
# Warmup Iteration  12: 3347114.126 ops/s
# Warmup Iteration  13: 3342351.727 ops/s
# Warmup Iteration  14: 3371345.915 ops/s
# Warmup Iteration  15: 3315524.895 ops/s
# Warmup Iteration  16: 3357577.944 ops/s
# Warmup Iteration  17: 3262028.491 ops/s
# Warmup Iteration  18: 3297887.166 ops/s
# Warmup Iteration  19: 3301826.768 ops/s
# Warmup Iteration  20: 3373104.185 ops/s
# Warmup Iteration  21: 3271260.370 ops/s
# Warmup Iteration  22: 3444369.670 ops/s
# Warmup Iteration  23: 3277687.047 ops/s
# Warmup Iteration  24: 3317710.443 ops/s
# Warmup Iteration  25: 3328270.087 ops/s
# Warmup Iteration  26: 3320966.614 ops/s
# Warmup Iteration  27: 3422365.743 ops/s
# Warmup Iteration  28: 3185306.883 ops/s
# Warmup Iteration  29: 3389621.593 ops/s
# Warmup Iteration  30: 3255439.414 ops/s
Iteration   1: 3403745.889 ops/s
Iteration   2: 3417621.983 ops/s
Iteration   3: 3297819.715 ops/s
Iteration   4: 3349543.089 ops/s
Iteration   5: 3281448.018 ops/s
Iteration   6: 3442470.484 ops/s
Iteration   7: 3282660.269 ops/s
Iteration   8: 3367970.792 ops/s
Iteration   9: 3326327.127 ops/s
Iteration  10: 3304109.584 ops/s
Iteration  11: 3364507.020 ops/s
Iteration  12: 3440714.407 ops/s
Iteration  13: 3447793.583 ops/s
Iteration  14: 3251884.598 ops/s
Iteration  15: 3326070.359 ops/s
Iteration  16: 3390703.279 ops/s
Iteration  17: 3407229.555 ops/s
Iteration  18: 3345530.704 ops/s
Iteration  19: 3340405.488 ops/s
Iteration  20: 3475234.944 ops/s
Iteration  21: 3242683.346 ops/s
Iteration  22: 3323480.896 ops/s
Iteration  23: 3447708.659 ops/s
Iteration  24: 3217638.546 ops/s
Iteration  25: 3441831.428 ops/s
Iteration  26: 3362411.241 ops/s
Iteration  27: 3392930.242 ops/s
Iteration  28: 3273863.460 ops/s
Iteration  29: 3376163.084 ops/s
Iteration  30: 3335448.472 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsTest._Benchmark.benchmark_doesNotHangAndProcessesAllUsingBackpressure":
  3355931.675 ±(99.9%) 45625.537 ops/s [Average]
  (min, avg, max) = (3217638.546, 3355931.675, 3475234.944), stdev = 68290.161
  CI (99.9%): [3310306.138, 3401557.212] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                     Mode  Cnt        Score       Error  Units
FlowableIgnoreElementsTest._Benchmark.benchmark_doesNotHangAndProcessesAllUsingBackpressure  thrpt   30  3355931.675 ± 45625.537  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeTest._Benchmark.benchmark_requestOverflow$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeTest._Benchmark.benchmark_requestOverflow

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2305553.205 ops/s
# Warmup Iteration   2: 4231662.111 ops/s
# Warmup Iteration   3: 4813435.727 ops/s
# Warmup Iteration   4: 5247234.778 ops/s
# Warmup Iteration   5: 4905835.119 ops/s
# Warmup Iteration   6: 4675623.267 ops/s
# Warmup Iteration   7: 4440628.246 ops/s
# Warmup Iteration   8: 5447291.457 ops/s
# Warmup Iteration   9: 5068113.394 ops/s
# Warmup Iteration  10: 5088065.833 ops/s
# Warmup Iteration  11: 4961317.604 ops/s
# Warmup Iteration  12: 5246305.190 ops/s
# Warmup Iteration  13: 5030656.516 ops/s
# Warmup Iteration  14: 4735937.789 ops/s
# Warmup Iteration  15: 4920584.513 ops/s
# Warmup Iteration  16: 5534213.532 ops/s
# Warmup Iteration  17: 5057884.090 ops/s
# Warmup Iteration  18: 5272547.550 ops/s
# Warmup Iteration  19: 5158159.701 ops/s
# Warmup Iteration  20: 5174096.061 ops/s
# Warmup Iteration  21: 5504184.371 ops/s
# Warmup Iteration  22: 5156623.044 ops/s
# Warmup Iteration  23: 4737220.246 ops/s
# Warmup Iteration  24: 5049645.042 ops/s
# Warmup Iteration  25: 5078242.407 ops/s
# Warmup Iteration  26: 4879067.026 ops/s
# Warmup Iteration  27: 5223395.034 ops/s
# Warmup Iteration  28: 4786476.518 ops/s
# Warmup Iteration  29: 4750238.291 ops/s
# Warmup Iteration  30: 5370610.569 ops/s
Iteration   1: 4997654.340 ops/s
Iteration   2: 5025835.824 ops/s
Iteration   3: 5441389.004 ops/s
Iteration   4: 4861554.626 ops/s
Iteration   5: 4919173.116 ops/s
Iteration   6: 4971416.847 ops/s
Iteration   7: 5056337.452 ops/s
Iteration   8: 4850613.836 ops/s
Iteration   9: 5291993.287 ops/s
Iteration  10: 5053958.253 ops/s
Iteration  11: 4920155.522 ops/s
Iteration  12: 5093767.978 ops/s
Iteration  13: 4778217.807 ops/s
Iteration  14: 5011587.795 ops/s
Iteration  15: 4779929.473 ops/s
Iteration  16: 4966524.785 ops/s
Iteration  17: 5250344.006 ops/s
Iteration  18: 5379404.287 ops/s
Iteration  19: 4794672.029 ops/s
Iteration  20: 5096870.287 ops/s
Iteration  21: 5029572.329 ops/s
Iteration  22: 5050766.988 ops/s
Iteration  23: 5296757.538 ops/s
Iteration  24: 5021098.465 ops/s
Iteration  25: 4140862.530 ops/s
Iteration  26: 5070261.208 ops/s
Iteration  27: 5106673.515 ops/s
Iteration  28: 4933227.652 ops/s
Iteration  29: 4697428.946 ops/s
Iteration  30: 4848427.109 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeTest._Benchmark.benchmark_requestOverflow":
  4991215.894 ±(99.9%) 160373.126 ops/s [Average]
  (min, avg, max) = (4140862.530, 4991215.894, 5441389.004), stdev = 240038.963
  CI (99.9%): [4830842.768, 5151589.020] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score        Error  Units
FlowableRangeTest._Benchmark.benchmark_requestOverflow  thrpt   30  4991215.894 ± 160373.126  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsTest._Benchmark.benchmark_doesNotHangAndProcessesAllUsingBackpressureFlowable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsTest._Benchmark.benchmark_doesNotHangAndProcessesAllUsingBackpressureFlowable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 858490.731 ops/s
# Warmup Iteration   2: 2611614.532 ops/s
# Warmup Iteration   3: 2856802.239 ops/s
# Warmup Iteration   4: 3227980.935 ops/s
# Warmup Iteration   5: 3325272.281 ops/s
# Warmup Iteration   6: 3469086.553 ops/s
# Warmup Iteration   7: 3169252.593 ops/s
# Warmup Iteration   8: 3347265.648 ops/s
# Warmup Iteration   9: 3387021.653 ops/s
# Warmup Iteration  10: 3377426.011 ops/s
# Warmup Iteration  11: 3220079.647 ops/s
# Warmup Iteration  12: 3436378.314 ops/s
# Warmup Iteration  13: 3406688.943 ops/s
# Warmup Iteration  14: 3285195.035 ops/s
# Warmup Iteration  15: 3337810.893 ops/s
# Warmup Iteration  16: 3253584.579 ops/s
# Warmup Iteration  17: 3295317.133 ops/s
# Warmup Iteration  18: 3294505.433 ops/s
# Warmup Iteration  19: 3353572.720 ops/s
# Warmup Iteration  20: 3186746.695 ops/s
# Warmup Iteration  21: 3394549.578 ops/s
# Warmup Iteration  22: 3141775.861 ops/s
# Warmup Iteration  23: 3276751.818 ops/s
# Warmup Iteration  24: 3369590.556 ops/s
# Warmup Iteration  25: 3351795.054 ops/s
# Warmup Iteration  26: 3186390.467 ops/s
# Warmup Iteration  27: 3460578.175 ops/s
# Warmup Iteration  28: 3250920.628 ops/s
# Warmup Iteration  29: 3390713.905 ops/s
# Warmup Iteration  30: 3471470.097 ops/s
Iteration   1: 3238508.576 ops/s
Iteration   2: 3364113.451 ops/s
Iteration   3: 3288667.729 ops/s
Iteration   4: 3321484.861 ops/s
Iteration   5: 3336593.136 ops/s
Iteration   6: 3244181.614 ops/s
Iteration   7: 3260894.270 ops/s
Iteration   8: 3421949.558 ops/s
Iteration   9: 3319657.543 ops/s
Iteration  10: 3401558.030 ops/s
Iteration  11: 3203262.303 ops/s
Iteration  12: 3325672.469 ops/s
Iteration  13: 3347316.746 ops/s
Iteration  14: 3230679.942 ops/s
Iteration  15: 3318113.751 ops/s
Iteration  16: 3340874.834 ops/s
Iteration  17: 3324756.063 ops/s
Iteration  18: 3331115.054 ops/s
Iteration  19: 3326322.445 ops/s
Iteration  20: 3369968.189 ops/s
Iteration  21: 3260783.055 ops/s
Iteration  22: 3419400.433 ops/s
Iteration  23: 3218144.360 ops/s
Iteration  24: 3394250.699 ops/s
Iteration  25: 3273724.108 ops/s
Iteration  26: 3331140.471 ops/s
Iteration  27: 3367436.788 ops/s
Iteration  28: 3280658.334 ops/s
Iteration  29: 3333151.791 ops/s
Iteration  30: 3383159.265 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsTest._Benchmark.benchmark_doesNotHangAndProcessesAllUsingBackpressureFlowable":
  3319251.329 ±(99.9%) 39452.741 ops/s [Average]
  (min, avg, max) = (3203262.303, 3319251.329, 3421949.558), stdev = 59051.011
  CI (99.9%): [3279798.587, 3358704.070] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                             Mode  Cnt        Score       Error  Units
FlowableIgnoreElementsTest._Benchmark.benchmark_doesNotHangAndProcessesAllUsingBackpressureFlowable  thrpt   30  3319251.329 ± 39452.741  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategyTest._Benchmark.benchmark_backpressureBufferZeroCapacity$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategyTest._Benchmark.benchmark_backpressureBufferZeroCapacity

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 387244.735 ops/s
# Warmup Iteration   2: 628407.849 ops/s
# Warmup Iteration   3: 669231.930 ops/s
# Warmup Iteration   4: 707711.919 ops/s
# Warmup Iteration   5: 636507.030 ops/s
# Warmup Iteration   6: 733439.275 ops/s
# Warmup Iteration   7: 705416.514 ops/s
# Warmup Iteration   8: 742204.541 ops/s
# Warmup Iteration   9: 714147.662 ops/s
# Warmup Iteration  10: 749605.089 ops/s
# Warmup Iteration  11: 734367.410 ops/s
# Warmup Iteration  12: 735063.952 ops/s
# Warmup Iteration  13: 714657.106 ops/s
# Warmup Iteration  14: 727241.554 ops/s
# Warmup Iteration  15: 759685.519 ops/s
# Warmup Iteration  16: 711460.096 ops/s
# Warmup Iteration  17: 789221.925 ops/s
# Warmup Iteration  18: 767543.360 ops/s
# Warmup Iteration  19: 739188.491 ops/s
# Warmup Iteration  20: 789004.563 ops/s
# Warmup Iteration  21: 756701.013 ops/s
# Warmup Iteration  22: 755899.828 ops/s
# Warmup Iteration  23: 758715.017 ops/s
# Warmup Iteration  24: 748564.305 ops/s
# Warmup Iteration  25: 769746.921 ops/s
# Warmup Iteration  26: 793429.031 ops/s
# Warmup Iteration  27: 784112.143 ops/s
# Warmup Iteration  28: 770985.759 ops/s
# Warmup Iteration  29: 785276.211 ops/s
# Warmup Iteration  30: 779003.881 ops/s
Iteration   1: 744382.512 ops/s
Iteration   2: 787150.934 ops/s
Iteration   3: 794261.517 ops/s
Iteration   4: 764587.517 ops/s
Iteration   5: 764070.894 ops/s
Iteration   6: 786921.053 ops/s
Iteration   7: 748045.568 ops/s
Iteration   8: 795004.289 ops/s
Iteration   9: 767160.838 ops/s
Iteration  10: 730367.295 ops/s
Iteration  11: 769675.842 ops/s
Iteration  12: 796447.758 ops/s
Iteration  13: 774222.352 ops/s
Iteration  14: 754453.707 ops/s
Iteration  15: 755274.108 ops/s
Iteration  16: 774250.037 ops/s
Iteration  17: 754584.521 ops/s
Iteration  18: 784668.367 ops/s
Iteration  19: 753464.213 ops/s
Iteration  20: 641736.401 ops/s
Iteration  21: 756483.737 ops/s
Iteration  22: 788278.626 ops/s
Iteration  23: 779638.482 ops/s
Iteration  24: 737530.409 ops/s
Iteration  25: 749112.611 ops/s
Iteration  26: 791571.134 ops/s
Iteration  27: 775745.496 ops/s
Iteration  28: 765150.520 ops/s
Iteration  29: 772645.273 ops/s
Iteration  30: 785231.991 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategyTest._Benchmark.benchmark_backpressureBufferZeroCapacity":
  764737.267 ±(99.9%) 19607.776 ops/s [Average]
  (min, avg, max) = (641736.401, 764737.267, 796447.758), stdev = 29347.998
  CI (99.9%): [745129.491, 784345.042] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                      Mode  Cnt       Score       Error  Units
FlowableOnBackpressureBufferStrategyTest._Benchmark.benchmark_backpressureBufferZeroCapacity  thrpt   30  764737.267 ± 19607.776  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFilterTest._Benchmark.benchmark_conditionalNone$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFilterTest._Benchmark.benchmark_conditionalNone

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1251641.456 ops/s
# Warmup Iteration   2: 3188693.902 ops/s
# Warmup Iteration   3: 3609718.176 ops/s
# Warmup Iteration   4: 4288008.271 ops/s
# Warmup Iteration   5: 4104205.680 ops/s
# Warmup Iteration   6: 4196821.576 ops/s
# Warmup Iteration   7: 4265866.145 ops/s
# Warmup Iteration   8: 4210152.336 ops/s
# Warmup Iteration   9: 4037103.038 ops/s
# Warmup Iteration  10: 4326420.796 ops/s
# Warmup Iteration  11: 4110076.996 ops/s
# Warmup Iteration  12: 4366562.665 ops/s
# Warmup Iteration  13: 4052385.988 ops/s
# Warmup Iteration  14: 4225452.635 ops/s
# Warmup Iteration  15: 4398221.815 ops/s
# Warmup Iteration  16: 4070817.674 ops/s
# Warmup Iteration  17: 4185007.345 ops/s
# Warmup Iteration  18: 4290761.116 ops/s
# Warmup Iteration  19: 4123539.019 ops/s
# Warmup Iteration  20: 4400513.735 ops/s
# Warmup Iteration  21: 4167858.271 ops/s
# Warmup Iteration  22: 4270416.952 ops/s
# Warmup Iteration  23: 4142461.308 ops/s
# Warmup Iteration  24: 4206257.339 ops/s
# Warmup Iteration  25: 4298086.574 ops/s
# Warmup Iteration  26: 4049744.459 ops/s
# Warmup Iteration  27: 4361867.654 ops/s
# Warmup Iteration  28: 4067569.059 ops/s
# Warmup Iteration  29: 4241599.409 ops/s
# Warmup Iteration  30: 4291989.166 ops/s
Iteration   1: 4138933.098 ops/s
Iteration   2: 4253899.866 ops/s
Iteration   3: 4139053.631 ops/s
Iteration   4: 4146963.033 ops/s
Iteration   5: 4299034.061 ops/s
Iteration   6: 4204211.699 ops/s
Iteration   7: 4355259.935 ops/s
Iteration   8: 4022002.392 ops/s
Iteration   9: 4177913.364 ops/s
Iteration  10: 4182257.251 ops/s
Iteration  11: 4089138.391 ops/s
Iteration  12: 4223766.715 ops/s
Iteration  13: 4134164.669 ops/s
Iteration  14: 4136941.557 ops/s
Iteration  15: 4253278.001 ops/s
Iteration  16: 4190036.528 ops/s
Iteration  17: 4317611.862 ops/s
Iteration  18: 4221813.676 ops/s
Iteration  19: 4289160.333 ops/s
Iteration  20: 4311176.363 ops/s
Iteration  21: 4150707.134 ops/s
Iteration  22: 4390224.628 ops/s
Iteration  23: 4124158.777 ops/s
Iteration  24: 4262796.866 ops/s
Iteration  25: 4294637.579 ops/s
Iteration  26: 4165545.142 ops/s
Iteration  27: 4174358.654 ops/s
Iteration  28: 4181251.518 ops/s
Iteration  29: 4276434.138 ops/s
Iteration  30: 4160440.515 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFilterTest._Benchmark.benchmark_conditionalNone":
  4208905.713 ±(99.9%) 55869.568 ops/s [Average]
  (min, avg, max) = (4022002.392, 4208905.713, 4390224.628), stdev = 83622.945
  CI (99.9%): [4153036.145, 4264775.280] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
FlowableFilterTest._Benchmark.benchmark_conditionalNone  thrpt   30  4208905.713 ± 55869.568  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeTest._Benchmark.benchmark_conditionalNormal$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeTest._Benchmark.benchmark_conditionalNormal

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 673875.354 ops/s
# Warmup Iteration   2: 2703219.720 ops/s
# Warmup Iteration   3: 2856245.134 ops/s
# Warmup Iteration   4: 3360005.800 ops/s
# Warmup Iteration   5: 3415179.920 ops/s
# Warmup Iteration   6: 3435694.276 ops/s
# Warmup Iteration   7: 3381867.632 ops/s
# Warmup Iteration   8: 3426793.317 ops/s
# Warmup Iteration   9: 3251824.269 ops/s
# Warmup Iteration  10: 3542823.816 ops/s
# Warmup Iteration  11: 3477958.721 ops/s
# Warmup Iteration  12: 3466259.185 ops/s
# Warmup Iteration  13: 3335595.783 ops/s
# Warmup Iteration  14: 3513585.044 ops/s
# Warmup Iteration  15: 3267677.518 ops/s
# Warmup Iteration  16: 3381436.867 ops/s
# Warmup Iteration  17: 3452637.950 ops/s
# Warmup Iteration  18: 3379884.579 ops/s
# Warmup Iteration  19: 3409093.840 ops/s
# Warmup Iteration  20: 3291278.288 ops/s
# Warmup Iteration  21: 3341762.636 ops/s
# Warmup Iteration  22: 3489828.823 ops/s
# Warmup Iteration  23: 3569725.687 ops/s
# Warmup Iteration  24: 3344131.231 ops/s
# Warmup Iteration  25: 3414150.357 ops/s
# Warmup Iteration  26: 3424065.159 ops/s
# Warmup Iteration  27: 3352729.593 ops/s
# Warmup Iteration  28: 3291193.715 ops/s
# Warmup Iteration  29: 3367513.010 ops/s
# Warmup Iteration  30: 3309677.228 ops/s
Iteration   1: 3561728.499 ops/s
Iteration   2: 3456897.206 ops/s
Iteration   3: 3400871.924 ops/s
Iteration   4: 3462269.170 ops/s
Iteration   5: 3325252.815 ops/s
Iteration   6: 3433142.515 ops/s
Iteration   7: 3278925.455 ops/s
Iteration   8: 3405157.818 ops/s
Iteration   9: 3373719.260 ops/s
Iteration  10: 3393619.912 ops/s
Iteration  11: 3395263.811 ops/s
Iteration  12: 3284240.852 ops/s
Iteration  13: 3533069.237 ops/s
Iteration  14: 2949961.964 ops/s
Iteration  15: 3100983.632 ops/s
Iteration  16: 3484030.092 ops/s
Iteration  17: 3313803.001 ops/s
Iteration  18: 3390059.189 ops/s
Iteration  19: 3368786.913 ops/s
Iteration  20: 3342532.277 ops/s
Iteration  21: 3400699.918 ops/s
Iteration  22: 3366055.292 ops/s
Iteration  23: 3440878.296 ops/s
Iteration  24: 3406867.001 ops/s
Iteration  25: 3480670.823 ops/s
Iteration  26: 3512973.829 ops/s
Iteration  27: 3351626.266 ops/s
Iteration  28: 3393546.221 ops/s
Iteration  29: 3367665.896 ops/s
Iteration  30: 3467949.419 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeTest._Benchmark.benchmark_conditionalNormal":
  3381441.617 ±(99.9%) 80132.214 ops/s [Average]
  (min, avg, max) = (2949961.964, 3381441.617, 3561728.499), stdev = 119938.135
  CI (99.9%): [3301309.403, 3461573.831] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
FlowableRangeTest._Benchmark.benchmark_conditionalNormal  thrpt   30  3381441.617 ± 80132.214  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeTest._Benchmark.benchmark_conditionalNormalSlowpath$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeTest._Benchmark.benchmark_conditionalNormalSlowpath

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 844215.198 ops/s
# Warmup Iteration   2: 2348564.392 ops/s
# Warmup Iteration   3: 2878239.343 ops/s
# Warmup Iteration   4: 3290098.928 ops/s
# Warmup Iteration   5: 3156487.512 ops/s
# Warmup Iteration   6: 3217451.401 ops/s
# Warmup Iteration   7: 3427916.341 ops/s
# Warmup Iteration   8: 3176647.587 ops/s
# Warmup Iteration   9: 3218789.735 ops/s
# Warmup Iteration  10: 3173296.782 ops/s
# Warmup Iteration  11: 3265374.790 ops/s
# Warmup Iteration  12: 3346589.775 ops/s
# Warmup Iteration  13: 3331354.165 ops/s
# Warmup Iteration  14: 3247413.725 ops/s
# Warmup Iteration  15: 3387813.513 ops/s
# Warmup Iteration  16: 3180014.976 ops/s
# Warmup Iteration  17: 3394737.043 ops/s
# Warmup Iteration  18: 3395368.913 ops/s
# Warmup Iteration  19: 3180963.777 ops/s
# Warmup Iteration  20: 3156560.377 ops/s
# Warmup Iteration  21: 3359743.108 ops/s
# Warmup Iteration  22: 3165001.831 ops/s
# Warmup Iteration  23: 3275266.164 ops/s
# Warmup Iteration  24: 3276684.365 ops/s
# Warmup Iteration  25: 3199650.271 ops/s
# Warmup Iteration  26: 3266694.137 ops/s
# Warmup Iteration  27: 3223115.462 ops/s
# Warmup Iteration  28: 3169059.122 ops/s
# Warmup Iteration  29: 3296427.734 ops/s
# Warmup Iteration  30: 3219403.899 ops/s
Iteration   1: 3453347.138 ops/s
Iteration   2: 3147429.315 ops/s
Iteration   3: 3403973.751 ops/s
Iteration   4: 3163837.962 ops/s
Iteration   5: 3310219.565 ops/s
Iteration   6: 3205057.632 ops/s
Iteration   7: 3146590.377 ops/s
Iteration   8: 3325426.125 ops/s
Iteration   9: 3226191.511 ops/s
Iteration  10: 3245397.084 ops/s
Iteration  11: 3232983.848 ops/s
Iteration  12: 3219410.920 ops/s
Iteration  13: 3332801.971 ops/s
Iteration  14: 3174829.779 ops/s
Iteration  15: 3284686.091 ops/s
Iteration  16: 3248164.349 ops/s
Iteration  17: 3220470.234 ops/s
Iteration  18: 3139855.084 ops/s
Iteration  19: 3268427.930 ops/s
Iteration  20: 3203007.533 ops/s
Iteration  21: 3344045.216 ops/s
Iteration  22: 3230314.130 ops/s
Iteration  23: 3253818.791 ops/s
Iteration  24: 3353488.662 ops/s
Iteration  25: 3191323.871 ops/s
Iteration  26: 3314205.068 ops/s
Iteration  27: 3191158.947 ops/s
Iteration  28: 3174401.979 ops/s
Iteration  29: 3360707.156 ops/s
Iteration  30: 3183972.799 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeTest._Benchmark.benchmark_conditionalNormalSlowpath":
  3251651.494 ±(99.9%) 53985.244 ops/s [Average]
  (min, avg, max) = (3139855.084, 3251651.494, 3453347.138), stdev = 80802.578
  CI (99.9%): [3197666.250, 3305636.738] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
FlowableRangeTest._Benchmark.benchmark_conditionalNormalSlowpath  thrpt   30  3251651.494 ± 53985.244  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFilterTest._Benchmark.benchmark_filterThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFilterTest._Benchmark.benchmark_filterThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 175410.844 ops/s
# Warmup Iteration   2: 420930.861 ops/s
# Warmup Iteration   3: 447440.975 ops/s
# Warmup Iteration   4: 402983.234 ops/s
# Warmup Iteration   5: 478764.797 ops/s
# Warmup Iteration   6: 405462.043 ops/s
# Warmup Iteration   7: 449077.074 ops/s
# Warmup Iteration   8: 476580.915 ops/s
# Warmup Iteration   9: 474137.947 ops/s
# Warmup Iteration  10: 468914.254 ops/s
# Warmup Iteration  11: 477899.274 ops/s
# Warmup Iteration  12: 473088.352 ops/s
# Warmup Iteration  13: 463790.788 ops/s
# Warmup Iteration  14: 480307.572 ops/s
# Warmup Iteration  15: 493353.439 ops/s
# Warmup Iteration  16: 463038.705 ops/s
# Warmup Iteration  17: 485467.570 ops/s
# Warmup Iteration  18: 504636.364 ops/s
# Warmup Iteration  19: 479261.248 ops/s
# Warmup Iteration  20: 508406.067 ops/s
# Warmup Iteration  21: 476235.962 ops/s
# Warmup Iteration  22: 482166.054 ops/s
# Warmup Iteration  23: 503353.678 ops/s
# Warmup Iteration  24: 484796.034 ops/s
# Warmup Iteration  25: 465460.225 ops/s
# Warmup Iteration  26: 496386.291 ops/s
# Warmup Iteration  27: 482151.516 ops/s
# Warmup Iteration  28: 505624.066 ops/s
# Warmup Iteration  29: 475379.753 ops/s
# Warmup Iteration  30: 492929.251 ops/s
Iteration   1: 503634.509 ops/s
Iteration   2: 481267.975 ops/s
Iteration   3: 500814.306 ops/s
Iteration   4: 482070.426 ops/s
Iteration   5: 484058.490 ops/s
Iteration   6: 499526.379 ops/s
Iteration   7: 484682.126 ops/s
Iteration   8: 501391.425 ops/s
Iteration   9: 347021.251 ops/s
Iteration  10: 479493.665 ops/s
Iteration  11: 494104.234 ops/s
Iteration  12: 502468.656 ops/s
Iteration  13: 473032.355 ops/s
Iteration  14: 487546.474 ops/s
Iteration  15: 508962.621 ops/s
Iteration  16: 487961.337 ops/s
Iteration  17: 488824.388 ops/s
Iteration  18: 501802.148 ops/s
Iteration  19: 474405.751 ops/s
Iteration  20: 500219.869 ops/s
Iteration  21: 503492.278 ops/s
Iteration  22: 470295.592 ops/s
Iteration  23: 518450.830 ops/s
Iteration  24: 477841.266 ops/s
Iteration  25: 504943.992 ops/s
Iteration  26: 480233.546 ops/s
Iteration  27: 499193.414 ops/s
Iteration  28: 472611.555 ops/s
Iteration  29: 494223.219 ops/s
Iteration  30: 499656.774 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFilterTest._Benchmark.benchmark_filterThrows":
  486807.695 ±(99.9%) 19473.212 ops/s [Average]
  (min, avg, max) = (347021.251, 486807.695, 518450.830), stdev = 29146.589
  CI (99.9%): [467334.483, 506280.907] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score       Error  Units
FlowableFilterTest._Benchmark.benchmark_filterThrows  thrpt   30  486807.695 ± 19473.212  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFilterTest._Benchmark.benchmark_conditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFilterTest._Benchmark.benchmark_conditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 536065.596 ops/s
# Warmup Iteration   2: 2351391.945 ops/s
# Warmup Iteration   3: 2870485.674 ops/s
# Warmup Iteration   4: 2843555.852 ops/s
# Warmup Iteration   5: 3083905.462 ops/s
# Warmup Iteration   6: 3210280.518 ops/s
# Warmup Iteration   7: 3061176.742 ops/s
# Warmup Iteration   8: 3111040.011 ops/s
# Warmup Iteration   9: 3176410.530 ops/s
# Warmup Iteration  10: 3168681.235 ops/s
# Warmup Iteration  11: 3045639.141 ops/s
# Warmup Iteration  12: 3172322.228 ops/s
# Warmup Iteration  13: 3013948.925 ops/s
# Warmup Iteration  14: 3265366.622 ops/s
# Warmup Iteration  15: 3031215.343 ops/s
# Warmup Iteration  16: 3093291.526 ops/s
# Warmup Iteration  17: 3226559.760 ops/s
# Warmup Iteration  18: 3104185.548 ops/s
# Warmup Iteration  19: 3097941.407 ops/s
# Warmup Iteration  20: 3097745.430 ops/s
# Warmup Iteration  21: 3070860.545 ops/s
# Warmup Iteration  22: 3090862.087 ops/s
# Warmup Iteration  23: 3021524.620 ops/s
# Warmup Iteration  24: 3078406.442 ops/s
# Warmup Iteration  25: 3111702.220 ops/s
# Warmup Iteration  26: 3037898.446 ops/s
# Warmup Iteration  27: 3201241.403 ops/s
# Warmup Iteration  28: 3070835.424 ops/s
# Warmup Iteration  29: 3174610.929 ops/s
# Warmup Iteration  30: 3087733.965 ops/s
Iteration   1: 3178974.659 ops/s
Iteration   2: 3043466.279 ops/s
Iteration   3: 3084952.650 ops/s
Iteration   4: 3195326.819 ops/s
Iteration   5: 3158756.088 ops/s
Iteration   6: 2964443.082 ops/s
Iteration   7: 3103228.439 ops/s
Iteration   8: 3073657.051 ops/s
Iteration   9: 3185333.187 ops/s
Iteration  10: 3178860.301 ops/s
Iteration  11: 2958748.003 ops/s
Iteration  12: 3147737.932 ops/s
Iteration  13: 3121414.093 ops/s
Iteration  14: 3105201.984 ops/s
Iteration  15: 3078893.150 ops/s
Iteration  16: 3204956.278 ops/s
Iteration  17: 3085433.840 ops/s
Iteration  18: 3101643.301 ops/s
Iteration  19: 3032456.656 ops/s
Iteration  20: 3269147.631 ops/s
Iteration  21: 3251748.834 ops/s
Iteration  22: 3075803.254 ops/s
Iteration  23: 3047113.903 ops/s
Iteration  24: 3226804.599 ops/s
Iteration  25: 3145163.023 ops/s
Iteration  26: 3076539.461 ops/s
Iteration  27: 3121830.890 ops/s
Iteration  28: 3077069.980 ops/s
Iteration  29: 3099602.827 ops/s
Iteration  30: 3229509.341 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFilterTest._Benchmark.benchmark_conditional":
  3120793.918 ±(99.9%) 51487.732 ops/s [Average]
  (min, avg, max) = (2958748.003, 3120793.918, 3269147.631), stdev = 77064.418
  CI (99.9%): [3069306.186, 3172281.649] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score       Error  Units
FlowableFilterTest._Benchmark.benchmark_conditional  thrpt   30  3120793.918 ± 51487.732  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeTest._Benchmark.benchmark_conditionalRequestOneByOne2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeTest._Benchmark.benchmark_conditionalRequestOneByOne2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 747220.804 ops/s
# Warmup Iteration   2: 2244136.829 ops/s
# Warmup Iteration   3: 2529395.328 ops/s
# Warmup Iteration   4: 2847073.573 ops/s
# Warmup Iteration   5: 2871606.777 ops/s
# Warmup Iteration   6: 2826215.187 ops/s
# Warmup Iteration   7: 3011418.313 ops/s
# Warmup Iteration   8: 2828472.971 ops/s
# Warmup Iteration   9: 2866394.740 ops/s
# Warmup Iteration  10: 2943524.614 ops/s
# Warmup Iteration  11: 2762736.080 ops/s
# Warmup Iteration  12: 2909775.153 ops/s
# Warmup Iteration  13: 2942060.438 ops/s
# Warmup Iteration  14: 2868306.607 ops/s
# Warmup Iteration  15: 2930381.428 ops/s
# Warmup Iteration  16: 2852133.810 ops/s
# Warmup Iteration  17: 2936244.325 ops/s
# Warmup Iteration  18: 2868994.781 ops/s
# Warmup Iteration  19: 2828139.420 ops/s
# Warmup Iteration  20: 2919471.424 ops/s
# Warmup Iteration  21: 2854682.208 ops/s
# Warmup Iteration  22: 2933047.834 ops/s
# Warmup Iteration  23: 2873098.561 ops/s
# Warmup Iteration  24: 2826057.880 ops/s
# Warmup Iteration  25: 3040158.426 ops/s
# Warmup Iteration  26: 2818395.441 ops/s
# Warmup Iteration  27: 2971550.591 ops/s
# Warmup Iteration  28: 2819587.273 ops/s
# Warmup Iteration  29: 2956196.239 ops/s
# Warmup Iteration  30: 2831410.014 ops/s
Iteration   1: 2958122.311 ops/s
Iteration   2: 2869441.990 ops/s
Iteration   3: 2878043.914 ops/s
Iteration   4: 2472442.912 ops/s
Iteration   5: 2926737.417 ops/s
Iteration   6: 2893573.231 ops/s
Iteration   7: 2980210.339 ops/s
Iteration   8: 2856961.831 ops/s
Iteration   9: 2954336.282 ops/s
Iteration  10: 2892801.680 ops/s
Iteration  11: 2991627.447 ops/s
Iteration  12: 2821314.725 ops/s
Iteration  13: 2987929.588 ops/s
Iteration  14: 2915633.177 ops/s
Iteration  15: 2849876.200 ops/s
Iteration  16: 2980369.191 ops/s
Iteration  17: 2876503.975 ops/s
Iteration  18: 2845795.836 ops/s
Iteration  19: 2897493.917 ops/s
Iteration  20: 2902110.210 ops/s
Iteration  21: 2906064.752 ops/s
Iteration  22: 2968073.814 ops/s
Iteration  23: 2889895.061 ops/s
Iteration  24: 2907135.602 ops/s
Iteration  25: 2940072.056 ops/s
Iteration  26: 2890373.513 ops/s
Iteration  27: 2985871.221 ops/s
Iteration  28: 2895271.117 ops/s
Iteration  29: 2868722.992 ops/s
Iteration  30: 2954142.846 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeTest._Benchmark.benchmark_conditionalRequestOneByOne2":
  2898564.972 ±(99.9%) 62335.629 ops/s [Average]
  (min, avg, max) = (2472442.912, 2898564.972, 2991627.447), stdev = 93301.042
  CI (99.9%): [2836229.342, 2960900.601] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
FlowableRangeTest._Benchmark.benchmark_conditionalRequestOneByOne2  thrpt   30  2898564.972 ± 62335.629  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_fusedCrashDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_fusedCrashDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 85268.815 ops/s
# Warmup Iteration   2: 328486.957 ops/s
# Warmup Iteration   3: 380741.048 ops/s
# Warmup Iteration   4: 373178.524 ops/s
# Warmup Iteration   5: 416453.059 ops/s
# Warmup Iteration   6: 425349.056 ops/s
# Warmup Iteration   7: 404137.270 ops/s
# Warmup Iteration   8: 416823.159 ops/s
# Warmup Iteration   9: 395604.124 ops/s
# Warmup Iteration  10: 417443.858 ops/s
# Warmup Iteration  11: 377698.420 ops/s
# Warmup Iteration  12: 412991.404 ops/s
# Warmup Iteration  13: 420130.614 ops/s
# Warmup Iteration  14: 422592.302 ops/s
# Warmup Iteration  15: 414716.396 ops/s
# Warmup Iteration  16: 417550.609 ops/s
# Warmup Iteration  17: 487603.600 ops/s
# Warmup Iteration  18: 511168.529 ops/s
# Warmup Iteration  19: 496119.882 ops/s
# Warmup Iteration  20: 486851.829 ops/s
# Warmup Iteration  21: 496810.900 ops/s
# Warmup Iteration  22: 516468.163 ops/s
# Warmup Iteration  23: 469718.491 ops/s
# Warmup Iteration  24: 504957.591 ops/s
# Warmup Iteration  25: 490636.482 ops/s
# Warmup Iteration  26: 478804.826 ops/s
# Warmup Iteration  27: 498357.713 ops/s
# Warmup Iteration  28: 473639.113 ops/s
# Warmup Iteration  29: 491544.464 ops/s
# Warmup Iteration  30: 489953.042 ops/s
Iteration   1: 498884.456 ops/s
Iteration   2: 487988.788 ops/s
Iteration   3: 494857.348 ops/s
Iteration   4: 499869.874 ops/s
Iteration   5: 478423.378 ops/s
Iteration   6: 483425.121 ops/s
Iteration   7: 509134.315 ops/s
Iteration   8: 508204.697 ops/s
Iteration   9: 480244.885 ops/s
Iteration  10: 485069.043 ops/s
Iteration  11: 475824.324 ops/s
Iteration  12: 505358.214 ops/s
Iteration  13: 493853.452 ops/s
Iteration  14: 478363.087 ops/s
Iteration  15: 502080.026 ops/s
Iteration  16: 484456.146 ops/s
Iteration  17: 486571.557 ops/s
Iteration  18: 512400.833 ops/s
Iteration  19: 482502.765 ops/s
Iteration  20: 506380.605 ops/s
Iteration  21: 481908.982 ops/s
Iteration  22: 501824.016 ops/s
Iteration  23: 494261.892 ops/s
Iteration  24: 484273.083 ops/s
Iteration  25: 509224.619 ops/s
Iteration  26: 482450.828 ops/s
Iteration  27: 512957.943 ops/s
Iteration  28: 492795.711 ops/s
Iteration  29: 481946.170 ops/s
Iteration  30: 498519.704 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_fusedCrashDelayError":
  493135.195 ±(99.9%) 7708.388 ops/s [Average]
  (min, avg, max) = (475824.324, 493135.195, 512957.943), stdev = 11537.553
  CI (99.9%): [485426.807, 500843.584] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
FlowableConcatTest._Benchmark.benchmark_fusedCrashDelayError  thrpt   30  493135.195 ± 7708.388  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNextTest._Benchmark.benchmark_rangeConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNextTest._Benchmark.benchmark_rangeConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 222529.040 ops/s
# Warmup Iteration   2: 1084887.810 ops/s
# Warmup Iteration   3: 1671027.676 ops/s
# Warmup Iteration   4: 2075257.463 ops/s
# Warmup Iteration   5: 2251837.283 ops/s
# Warmup Iteration   6: 2141305.270 ops/s
# Warmup Iteration   7: 2235904.028 ops/s
# Warmup Iteration   8: 2148717.741 ops/s
# Warmup Iteration   9: 2218270.036 ops/s
# Warmup Iteration  10: 2193643.207 ops/s
# Warmup Iteration  11: 2173812.194 ops/s
# Warmup Iteration  12: 2168029.668 ops/s
# Warmup Iteration  13: 2165755.648 ops/s
# Warmup Iteration  14: 2288362.654 ops/s
# Warmup Iteration  15: 2152274.224 ops/s
# Warmup Iteration  16: 2219565.204 ops/s
# Warmup Iteration  17: 2204442.737 ops/s
# Warmup Iteration  18: 2115900.227 ops/s
# Warmup Iteration  19: 2256504.808 ops/s
# Warmup Iteration  20: 2139760.105 ops/s
# Warmup Iteration  21: 2294223.789 ops/s
# Warmup Iteration  22: 2150006.819 ops/s
# Warmup Iteration  23: 2150139.707 ops/s
# Warmup Iteration  24: 2225932.058 ops/s
# Warmup Iteration  25: 2098770.721 ops/s
# Warmup Iteration  26: 2177881.975 ops/s
# Warmup Iteration  27: 2196750.487 ops/s
# Warmup Iteration  28: 1784468.102 ops/s
# Warmup Iteration  29: 2152450.232 ops/s
# Warmup Iteration  30: 2199931.206 ops/s
Iteration   1: 2174282.383 ops/s
Iteration   2: 2234487.089 ops/s
Iteration   3: 2151158.087 ops/s
Iteration   4: 2198631.228 ops/s
Iteration   5: 2186920.893 ops/s
Iteration   6: 2212435.912 ops/s
Iteration   7: 2176736.923 ops/s
Iteration   8: 2154022.815 ops/s
Iteration   9: 2244809.317 ops/s
Iteration  10: 2143218.112 ops/s
Iteration  11: 2266995.319 ops/s
Iteration  12: 2144612.655 ops/s
Iteration  13: 2206708.720 ops/s
Iteration  14: 2190721.883 ops/s
Iteration  15: 2113362.097 ops/s
Iteration  16: 2192487.861 ops/s
Iteration  17: 2263955.996 ops/s
Iteration  18: 2143790.238 ops/s
Iteration  19: 2263573.421 ops/s
Iteration  20: 2278677.118 ops/s
Iteration  21: 2150974.943 ops/s
Iteration  22: 2206114.135 ops/s
Iteration  23: 2172540.437 ops/s
Iteration  24: 2208568.004 ops/s
Iteration  25: 2235647.793 ops/s
Iteration  26: 2119861.966 ops/s
Iteration  27: 2193460.982 ops/s
Iteration  28: 2152473.757 ops/s
Iteration  29: 2252083.034 ops/s
Iteration  30: 2161251.845 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNextTest._Benchmark.benchmark_rangeConditional":
  2193152.165 ±(99.9%) 30705.206 ops/s [Average]
  (min, avg, max) = (2113362.097, 2193152.165, 2278677.118), stdev = 45958.110
  CI (99.9%): [2162446.960, 2223857.371] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
FlowableDoAfterNextTest._Benchmark.benchmark_rangeConditional  thrpt   30  2193152.165 ± 30705.206  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.observers.CallbackCompletableObserverTest._Benchmark.benchmark_emptyActionShouldReportNoCustomOnError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.observers.CallbackCompletableObserverTest._Benchmark.benchmark_emptyActionShouldReportNoCustomOnError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 29197257.841 ops/s
# Warmup Iteration   2: 40399322.029 ops/s
# Warmup Iteration   3: 60260405.469 ops/s
# Warmup Iteration   4: 56623968.372 ops/s
# Warmup Iteration   5: 59853271.522 ops/s
# Warmup Iteration   6: 59296063.606 ops/s
# Warmup Iteration   7: 59027390.604 ops/s
# Warmup Iteration   8: 57749392.765 ops/s
# Warmup Iteration   9: 59745068.418 ops/s
# Warmup Iteration  10: 57582944.988 ops/s
# Warmup Iteration  11: 59876827.271 ops/s
# Warmup Iteration  12: 58929878.345 ops/s
# Warmup Iteration  13: 56575888.058 ops/s
# Warmup Iteration  14: 60391538.893 ops/s
# Warmup Iteration  15: 57187213.626 ops/s
# Warmup Iteration  16: 60366463.470 ops/s
# Warmup Iteration  17: 57087647.730 ops/s
# Warmup Iteration  18: 57460613.346 ops/s
# Warmup Iteration  19: 60361599.013 ops/s
# Warmup Iteration  20: 57318129.651 ops/s
# Warmup Iteration  21: 61071261.034 ops/s
# Warmup Iteration  22: 58058535.193 ops/s
# Warmup Iteration  23: 58859361.134 ops/s
# Warmup Iteration  24: 58648995.231 ops/s
# Warmup Iteration  25: 58379798.068 ops/s
# Warmup Iteration  26: 59353121.771 ops/s
# Warmup Iteration  27: 57973469.965 ops/s
# Warmup Iteration  28: 57485379.925 ops/s
# Warmup Iteration  29: 60424155.897 ops/s
# Warmup Iteration  30: 56223794.486 ops/s
Iteration   1: 60780248.777 ops/s
Iteration   2: 57956530.454 ops/s
Iteration   3: 56160560.670 ops/s
Iteration   4: 59478258.320 ops/s
Iteration   5: 61437608.722 ops/s
Iteration   6: 57378991.812 ops/s
Iteration   7: 60364884.942 ops/s
Iteration   8: 60463519.971 ops/s
Iteration   9: 57431024.370 ops/s
Iteration  10: 59935028.127 ops/s
Iteration  11: 58271774.356 ops/s
Iteration  12: 60603762.345 ops/s
Iteration  13: 56357788.953 ops/s
Iteration  14: 57913023.688 ops/s
Iteration  15: 58545252.878 ops/s
Iteration  16: 57868523.646 ops/s
Iteration  17: 59915369.584 ops/s
Iteration  18: 58632765.375 ops/s
Iteration  19: 58373799.025 ops/s
Iteration  20: 60242748.538 ops/s
Iteration  21: 58168341.303 ops/s
Iteration  22: 60933924.861 ops/s
Iteration  23: 58028627.834 ops/s
Iteration  24: 59236558.955 ops/s
Iteration  25: 58720682.693 ops/s
Iteration  26: 57845201.614 ops/s
Iteration  27: 60495203.951 ops/s
Iteration  28: 56769864.544 ops/s
Iteration  29: 59861828.139 ops/s
Iteration  30: 58551492.286 ops/s


Result "io.reactivex.rxjava3.internal.observers.CallbackCompletableObserverTest._Benchmark.benchmark_emptyActionShouldReportNoCustomOnError":
  58890773.025 ±(99.9%) 951017.248 ops/s [Average]
  (min, avg, max) = (56160560.670, 58890773.025, 61437608.722), stdev = 1423437.954
  CI (99.9%): [57939755.776, 59841790.273] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                     Mode  Cnt         Score        Error  Units
CallbackCompletableObserverTest._Benchmark.benchmark_emptyActionShouldReportNoCustomOnError  thrpt   30  58890773.025 ± 951017.248  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFilterTest._Benchmark.benchmark_syncNoneFused$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFilterTest._Benchmark.benchmark_syncNoneFused

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1399241.899 ops/s
# Warmup Iteration   2: 3673716.928 ops/s
# Warmup Iteration   3: 4907476.000 ops/s
# Warmup Iteration   4: 5056094.863 ops/s
# Warmup Iteration   5: 5031877.226 ops/s
# Warmup Iteration   6: 5310307.343 ops/s
# Warmup Iteration   7: 5008708.041 ops/s
# Warmup Iteration   8: 5215076.326 ops/s
# Warmup Iteration   9: 5033513.804 ops/s
# Warmup Iteration  10: 5397198.535 ops/s
# Warmup Iteration  11: 5173626.026 ops/s
# Warmup Iteration  12: 4984931.000 ops/s
# Warmup Iteration  13: 5120087.698 ops/s
# Warmup Iteration  14: 5138359.451 ops/s
# Warmup Iteration  15: 5051760.193 ops/s
# Warmup Iteration  16: 5169503.593 ops/s
# Warmup Iteration  17: 5007187.491 ops/s
# Warmup Iteration  18: 5126080.694 ops/s
# Warmup Iteration  19: 5268938.609 ops/s
# Warmup Iteration  20: 5040717.660 ops/s
# Warmup Iteration  21: 5066357.277 ops/s
# Warmup Iteration  22: 5140333.899 ops/s
# Warmup Iteration  23: 4032845.041 ops/s
# Warmup Iteration  24: 5104482.533 ops/s
# Warmup Iteration  25: 5206224.333 ops/s
# Warmup Iteration  26: 4985444.686 ops/s
# Warmup Iteration  27: 5112113.750 ops/s
# Warmup Iteration  28: 5285698.830 ops/s
# Warmup Iteration  29: 5022208.487 ops/s
# Warmup Iteration  30: 5271573.243 ops/s
Iteration   1: 5121256.505 ops/s
Iteration   2: 5014408.049 ops/s
Iteration   3: 5172808.540 ops/s
Iteration   4: 5341853.203 ops/s
Iteration   5: 4978461.217 ops/s
Iteration   6: 5334620.051 ops/s
Iteration   7: 5226262.393 ops/s
Iteration   8: 5009280.362 ops/s
Iteration   9: 5360029.800 ops/s
Iteration  10: 5078901.940 ops/s
Iteration  11: 5067620.645 ops/s
Iteration  12: 5232412.720 ops/s
Iteration  13: 5111080.420 ops/s
Iteration  14: 4849654.289 ops/s
Iteration  15: 5249423.806 ops/s
Iteration  16: 5326375.019 ops/s
Iteration  17: 5036331.600 ops/s
Iteration  18: 5274795.876 ops/s
Iteration  19: 5018339.189 ops/s
Iteration  20: 5301974.565 ops/s
Iteration  21: 4956756.202 ops/s
Iteration  22: 5083241.070 ops/s
Iteration  23: 5364249.561 ops/s
Iteration  24: 4941549.957 ops/s
Iteration  25: 5359871.299 ops/s
Iteration  26: 5006392.977 ops/s
Iteration  27: 5206716.290 ops/s
Iteration  28: 5048741.733 ops/s
Iteration  29: 5132918.820 ops/s
Iteration  30: 5150665.719 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFilterTest._Benchmark.benchmark_syncNoneFused":
  5145233.127 ±(99.9%) 97607.070 ops/s [Average]
  (min, avg, max) = (4849654.289, 5145233.127, 5364249.561), stdev = 146093.678
  CI (99.9%): [5047626.058, 5242840.197] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
FlowableFilterTest._Benchmark.benchmark_syncNoneFused  thrpt   30  5145233.127 ± 97607.070  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeTest._Benchmark.benchmark_conditionalSlowPathCancel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeTest._Benchmark.benchmark_conditionalSlowPathCancel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 591782.669 ops/s
# Warmup Iteration   2: 2083992.672 ops/s
# Warmup Iteration   3: 2746772.694 ops/s
# Warmup Iteration   4: 3323976.089 ops/s
# Warmup Iteration   5: 3428992.870 ops/s
# Warmup Iteration   6: 3387878.636 ops/s
# Warmup Iteration   7: 3246222.076 ops/s
# Warmup Iteration   8: 3396032.904 ops/s
# Warmup Iteration   9: 3422417.349 ops/s
# Warmup Iteration  10: 3260712.831 ops/s
# Warmup Iteration  11: 3500286.636 ops/s
# Warmup Iteration  12: 3153512.597 ops/s
# Warmup Iteration  13: 3474675.376 ops/s
# Warmup Iteration  14: 3391247.330 ops/s
# Warmup Iteration  15: 3370353.468 ops/s
# Warmup Iteration  16: 3327631.731 ops/s
# Warmup Iteration  17: 3369654.425 ops/s
# Warmup Iteration  18: 3424895.731 ops/s
# Warmup Iteration  19: 3423075.617 ops/s
# Warmup Iteration  20: 3268073.350 ops/s
# Warmup Iteration  21: 3502403.888 ops/s
# Warmup Iteration  22: 3345159.917 ops/s
# Warmup Iteration  23: 3565558.086 ops/s
# Warmup Iteration  24: 3331158.090 ops/s
# Warmup Iteration  25: 3363946.724 ops/s
# Warmup Iteration  26: 3474797.626 ops/s
# Warmup Iteration  27: 3323817.236 ops/s
# Warmup Iteration  28: 3439474.570 ops/s
# Warmup Iteration  29: 3323458.119 ops/s
# Warmup Iteration  30: 3504070.670 ops/s
Iteration   1: 3337418.034 ops/s
Iteration   2: 3400138.089 ops/s
Iteration   3: 3456357.218 ops/s
Iteration   4: 3303603.991 ops/s
Iteration   5: 3505249.593 ops/s
Iteration   6: 3270715.944 ops/s
Iteration   7: 3404224.798 ops/s
Iteration   8: 3436219.717 ops/s
Iteration   9: 3383931.622 ops/s
Iteration  10: 3411497.019 ops/s
Iteration  11: 3233391.027 ops/s
Iteration  12: 3450318.215 ops/s
Iteration  13: 3365628.566 ops/s
Iteration  14: 3361233.538 ops/s
Iteration  15: 3426300.182 ops/s
Iteration  16: 3335687.282 ops/s
Iteration  17: 3369411.169 ops/s
Iteration  18: 3458691.743 ops/s
Iteration  19: 3359770.087 ops/s
Iteration  20: 3460883.648 ops/s
Iteration  21: 3415170.030 ops/s
Iteration  22: 3406891.762 ops/s
Iteration  23: 3411916.930 ops/s
Iteration  24: 3321638.623 ops/s
Iteration  25: 3391273.804 ops/s
Iteration  26: 3461026.780 ops/s
Iteration  27: 3323041.072 ops/s
Iteration  28: 3500692.854 ops/s
Iteration  29: 3251639.184 ops/s
Iteration  30: 3356349.011 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeTest._Benchmark.benchmark_conditionalSlowPathCancel":
  3385677.051 ±(99.9%) 46019.619 ops/s [Average]
  (min, avg, max) = (3233391.027, 3385677.051, 3505249.593), stdev = 68880.005
  CI (99.9%): [3339657.432, 3431696.670] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
FlowableRangeTest._Benchmark.benchmark_conditionalSlowPathCancel  thrpt   30  3385677.051 ± 46019.619  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeTest._Benchmark.benchmark_conditionalFastPatchCancelBeforeComplete$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeTest._Benchmark.benchmark_conditionalFastPatchCancelBeforeComplete

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 527328.999 ops/s
# Warmup Iteration   2: 2278152.388 ops/s
# Warmup Iteration   3: 2831809.230 ops/s
# Warmup Iteration   4: 3420567.872 ops/s
# Warmup Iteration   5: 3236730.917 ops/s
# Warmup Iteration   6: 3348724.583 ops/s
# Warmup Iteration   7: 3408796.683 ops/s
# Warmup Iteration   8: 3309021.862 ops/s
# Warmup Iteration   9: 3259292.527 ops/s
# Warmup Iteration  10: 3459422.356 ops/s
# Warmup Iteration  11: 3343963.338 ops/s
# Warmup Iteration  12: 3178868.170 ops/s
# Warmup Iteration  13: 3476495.987 ops/s
# Warmup Iteration  14: 3274590.741 ops/s
# Warmup Iteration  15: 3263338.986 ops/s
# Warmup Iteration  16: 3371679.046 ops/s
# Warmup Iteration  17: 3170729.028 ops/s
# Warmup Iteration  18: 2526559.402 ops/s
# Warmup Iteration  19: 3411474.287 ops/s
# Warmup Iteration  20: 3267050.334 ops/s
# Warmup Iteration  21: 3305404.080 ops/s
# Warmup Iteration  22: 3257191.002 ops/s
# Warmup Iteration  23: 3316763.150 ops/s
# Warmup Iteration  24: 3349997.373 ops/s
# Warmup Iteration  25: 3227531.110 ops/s
# Warmup Iteration  26: 3334236.770 ops/s
# Warmup Iteration  27: 3392841.843 ops/s
# Warmup Iteration  28: 3234564.726 ops/s
# Warmup Iteration  29: 3432368.127 ops/s
# Warmup Iteration  30: 3284699.396 ops/s
Iteration   1: 3227714.129 ops/s
Iteration   2: 3433005.295 ops/s
Iteration   3: 3280071.216 ops/s
Iteration   4: 3434166.152 ops/s
Iteration   5: 3187206.636 ops/s
Iteration   6: 3426993.391 ops/s
Iteration   7: 3303610.929 ops/s
Iteration   8: 3307712.647 ops/s
Iteration   9: 3445333.116 ops/s
Iteration  10: 3166686.257 ops/s
Iteration  11: 3341606.416 ops/s
Iteration  12: 3291135.168 ops/s
Iteration  13: 3213824.600 ops/s
Iteration  14: 3341385.227 ops/s
Iteration  15: 3316105.734 ops/s
Iteration  16: 3311311.963 ops/s
Iteration  17: 3454288.323 ops/s
Iteration  18: 3168557.717 ops/s
Iteration  19: 3387481.237 ops/s
Iteration  20: 3465006.122 ops/s
Iteration  21: 3221954.506 ops/s
Iteration  22: 3427210.262 ops/s
Iteration  23: 3355198.713 ops/s
Iteration  24: 3663427.575 ops/s
Iteration  25: 3280027.432 ops/s
Iteration  26: 3330811.835 ops/s
Iteration  27: 3265156.807 ops/s
Iteration  28: 3291128.283 ops/s
Iteration  29: 3235779.229 ops/s
Iteration  30: 3315178.090 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeTest._Benchmark.benchmark_conditionalFastPatchCancelBeforeComplete":
  3329635.834 ±(99.9%) 71751.783 ops/s [Average]
  (min, avg, max) = (3166686.257, 3329635.834, 3663427.575), stdev = 107394.700
  CI (99.9%): [3257884.050, 3401387.617] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt        Score       Error  Units
FlowableRangeTest._Benchmark.benchmark_conditionalFastPatchCancelBeforeComplete  thrpt   30  3329635.834 ± 71751.783  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNextTest._Benchmark.benchmark_asyncFusedRejectedConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNextTest._Benchmark.benchmark_asyncFusedRejectedConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 212403.675 ops/s
# Warmup Iteration   2: 500325.641 ops/s
# Warmup Iteration   3: 1651814.412 ops/s
# Warmup Iteration   4: 1826237.943 ops/s
# Warmup Iteration   5: 2005479.857 ops/s
# Warmup Iteration   6: 1980620.595 ops/s
# Warmup Iteration   7: 1942292.470 ops/s
# Warmup Iteration   8: 2009496.311 ops/s
# Warmup Iteration   9: 1935963.252 ops/s
# Warmup Iteration  10: 2014372.433 ops/s
# Warmup Iteration  11: 2000546.020 ops/s
# Warmup Iteration  12: 1993341.703 ops/s
# Warmup Iteration  13: 2050437.420 ops/s
# Warmup Iteration  14: 1906948.683 ops/s
# Warmup Iteration  15: 2046153.857 ops/s
# Warmup Iteration  16: 2017860.042 ops/s
# Warmup Iteration  17: 1954970.145 ops/s
# Warmup Iteration  18: 2027619.598 ops/s
# Warmup Iteration  19: 1930839.147 ops/s
# Warmup Iteration  20: 1976108.958 ops/s
# Warmup Iteration  21: 1988787.937 ops/s
# Warmup Iteration  22: 1872910.764 ops/s
# Warmup Iteration  23: 2084553.606 ops/s
# Warmup Iteration  24: 1972483.258 ops/s
# Warmup Iteration  25: 1992844.572 ops/s
# Warmup Iteration  26: 2038551.191 ops/s
# Warmup Iteration  27: 1957576.899 ops/s
# Warmup Iteration  28: 1969344.136 ops/s
# Warmup Iteration  29: 1983622.880 ops/s
# Warmup Iteration  30: 1978122.156 ops/s
Iteration   1: 2001091.488 ops/s
Iteration   2: 1947462.040 ops/s
Iteration   3: 1927884.515 ops/s
Iteration   4: 1987308.236 ops/s
Iteration   5: 1926466.238 ops/s
Iteration   6: 1966195.472 ops/s
Iteration   7: 2031043.494 ops/s
Iteration   8: 1978740.344 ops/s
Iteration   9: 1935216.208 ops/s
Iteration  10: 2012438.036 ops/s
Iteration  11: 1940876.080 ops/s
Iteration  12: 2006609.000 ops/s
Iteration  13: 2046464.461 ops/s
Iteration  14: 1965406.938 ops/s
Iteration  15: 1988727.487 ops/s
Iteration  16: 1934759.592 ops/s
Iteration  17: 2024053.600 ops/s
Iteration  18: 1942615.129 ops/s
Iteration  19: 2058287.113 ops/s
Iteration  20: 1951790.031 ops/s
Iteration  21: 2021998.727 ops/s
Iteration  22: 1967886.428 ops/s
Iteration  23: 1971727.076 ops/s
Iteration  24: 2063974.286 ops/s
Iteration  25: 1922465.983 ops/s
Iteration  26: 2065098.521 ops/s
Iteration  27: 1962905.002 ops/s
Iteration  28: 2032565.976 ops/s
Iteration  29: 1983913.623 ops/s
Iteration  30: 1890035.909 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNextTest._Benchmark.benchmark_asyncFusedRejectedConditional":
  1981866.901 ±(99.9%) 31113.416 ops/s [Average]
  (min, avg, max) = (1890035.909, 1981866.901, 2065098.521), stdev = 46569.100
  CI (99.9%): [1950753.485, 2012980.317] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score       Error  Units
FlowableDoAfterNextTest._Benchmark.benchmark_asyncFusedRejectedConditional  thrpt   30  1981866.901 ± 31113.416  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeTest._Benchmark.benchmark_slowPathTakeExact$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeTest._Benchmark.benchmark_slowPathTakeExact

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 839438.660 ops/s
# Warmup Iteration   2: 2335019.635 ops/s
# Warmup Iteration   3: 2795474.794 ops/s
# Warmup Iteration   4: 3052796.909 ops/s
# Warmup Iteration   5: 3237990.065 ops/s
# Warmup Iteration   6: 3041561.385 ops/s
# Warmup Iteration   7: 3190234.035 ops/s
# Warmup Iteration   8: 3147048.169 ops/s
# Warmup Iteration   9: 3148688.226 ops/s
# Warmup Iteration  10: 3277992.436 ops/s
# Warmup Iteration  11: 3048002.639 ops/s
# Warmup Iteration  12: 3281328.383 ops/s
# Warmup Iteration  13: 2455598.167 ops/s
# Warmup Iteration  14: 3033393.603 ops/s
# Warmup Iteration  15: 3122877.482 ops/s
# Warmup Iteration  16: 3125151.781 ops/s
# Warmup Iteration  17: 3067129.834 ops/s
# Warmup Iteration  18: 3229593.029 ops/s
# Warmup Iteration  19: 3234311.593 ops/s
# Warmup Iteration  20: 3107407.750 ops/s
# Warmup Iteration  21: 3180325.075 ops/s
# Warmup Iteration  22: 3116011.159 ops/s
# Warmup Iteration  23: 3090721.385 ops/s
# Warmup Iteration  24: 3187556.058 ops/s
# Warmup Iteration  25: 3104431.101 ops/s
# Warmup Iteration  26: 3267721.638 ops/s
# Warmup Iteration  27: 3159453.629 ops/s
# Warmup Iteration  28: 3101805.182 ops/s
# Warmup Iteration  29: 3248259.424 ops/s
# Warmup Iteration  30: 3041796.391 ops/s
Iteration   1: 3274710.265 ops/s
Iteration   2: 3284713.036 ops/s
Iteration   3: 3160023.400 ops/s
Iteration   4: 3165736.235 ops/s
Iteration   5: 3159971.089 ops/s
Iteration   6: 3276907.357 ops/s
Iteration   7: 3136174.881 ops/s
Iteration   8: 3201309.136 ops/s
Iteration   9: 3143089.320 ops/s
Iteration  10: 3221608.602 ops/s
Iteration  11: 3147716.464 ops/s
Iteration  12: 3159810.392 ops/s
Iteration  13: 3200098.363 ops/s
Iteration  14: 3140558.818 ops/s
Iteration  15: 3155956.402 ops/s
Iteration  16: 3086815.540 ops/s
Iteration  17: 3173137.620 ops/s
Iteration  18: 3194634.609 ops/s
Iteration  19: 3142954.153 ops/s
Iteration  20: 3194357.377 ops/s
Iteration  21: 3136385.257 ops/s
Iteration  22: 3311267.333 ops/s
Iteration  23: 3244629.480 ops/s
Iteration  24: 3075662.955 ops/s
Iteration  25: 3095523.625 ops/s
Iteration  26: 3169709.900 ops/s
Iteration  27: 3096711.939 ops/s
Iteration  28: 3046931.436 ops/s
Iteration  29: 3204884.842 ops/s
Iteration  30: 3106937.149 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeTest._Benchmark.benchmark_slowPathTakeExact":
  3170297.566 ±(99.9%) 42892.342 ops/s [Average]
  (min, avg, max) = (3046931.436, 3170297.566, 3311267.333), stdev = 64199.244
  CI (99.9%): [3127405.223, 3213189.908] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
FlowableRangeTest._Benchmark.benchmark_slowPathTakeExact  thrpt   30  3170297.566 ± 42892.342  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeTest._Benchmark.benchmark_conditionalSlowPathTakeExact$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeTest._Benchmark.benchmark_conditionalSlowPathTakeExact

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 534336.816 ops/s
# Warmup Iteration   2: 2350866.970 ops/s
# Warmup Iteration   3: 2637042.049 ops/s
# Warmup Iteration   4: 3239718.943 ops/s
# Warmup Iteration   5: 3175447.623 ops/s
# Warmup Iteration   6: 3226772.549 ops/s
# Warmup Iteration   7: 3091478.520 ops/s
# Warmup Iteration   8: 3184617.016 ops/s
# Warmup Iteration   9: 3181821.195 ops/s
# Warmup Iteration  10: 3176484.151 ops/s
# Warmup Iteration  11: 3127252.678 ops/s
# Warmup Iteration  12: 3139369.536 ops/s
# Warmup Iteration  13: 3295924.360 ops/s
# Warmup Iteration  14: 3276395.926 ops/s
# Warmup Iteration  15: 3145332.090 ops/s
# Warmup Iteration  16: 3358990.419 ops/s
# Warmup Iteration  17: 3091337.170 ops/s
# Warmup Iteration  18: 3161757.410 ops/s
# Warmup Iteration  19: 3245933.417 ops/s
# Warmup Iteration  20: 3133080.930 ops/s
# Warmup Iteration  21: 3233096.719 ops/s
# Warmup Iteration  22: 3123511.651 ops/s
# Warmup Iteration  23: 3180235.430 ops/s
# Warmup Iteration  24: 3204061.703 ops/s
# Warmup Iteration  25: 3338922.464 ops/s
# Warmup Iteration  26: 3132460.363 ops/s
# Warmup Iteration  27: 3173232.211 ops/s
# Warmup Iteration  28: 3103205.681 ops/s
# Warmup Iteration  29: 3200929.604 ops/s
# Warmup Iteration  30: 3226988.606 ops/s
Iteration   1: 3253342.591 ops/s
Iteration   2: 3269999.343 ops/s
Iteration   3: 3162378.805 ops/s
Iteration   4: 3316631.214 ops/s
Iteration   5: 3096103.246 ops/s
Iteration   6: 3245387.492 ops/s
Iteration   7: 3141104.096 ops/s
Iteration   8: 3108005.763 ops/s
Iteration   9: 3335541.440 ops/s
Iteration  10: 3126563.969 ops/s
Iteration  11: 3273222.900 ops/s
Iteration  12: 3087772.813 ops/s
Iteration  13: 3310038.894 ops/s
Iteration  14: 3191393.324 ops/s
Iteration  15: 3205454.594 ops/s
Iteration  16: 3233653.674 ops/s
Iteration  17: 3148223.514 ops/s
Iteration  18: 3178766.996 ops/s
Iteration  19: 3305095.643 ops/s
Iteration  20: 3164726.374 ops/s
Iteration  21: 3281571.775 ops/s
Iteration  22: 3298098.092 ops/s
Iteration  23: 3200344.397 ops/s
Iteration  24: 3170639.203 ops/s
Iteration  25: 3287643.385 ops/s
Iteration  26: 3141853.038 ops/s
Iteration  27: 3199847.689 ops/s
Iteration  28: 3199497.874 ops/s
Iteration  29: 3196760.165 ops/s
Iteration  30: 3245057.596 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeTest._Benchmark.benchmark_conditionalSlowPathTakeExact":
  3212490.663 ±(99.9%) 47013.899 ops/s [Average]
  (min, avg, max) = (3087772.813, 3212490.663, 3335541.440), stdev = 70368.196
  CI (99.9%): [3165476.764, 3259504.562] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
FlowableRangeTest._Benchmark.benchmark_conditionalSlowPathTakeExact  thrpt   30  3212490.663 ± 47013.899  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_fusedCrashDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_fusedCrashDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 77661.085 ops/s
# Warmup Iteration   2: 330640.583 ops/s
# Warmup Iteration   3: 374660.756 ops/s
# Warmup Iteration   4: 384453.180 ops/s
# Warmup Iteration   5: 338536.450 ops/s
# Warmup Iteration   6: 403975.779 ops/s
# Warmup Iteration   7: 403716.785 ops/s
# Warmup Iteration   8: 340136.891 ops/s
# Warmup Iteration   9: 404483.617 ops/s
# Warmup Iteration  10: 421668.706 ops/s
# Warmup Iteration  11: 393076.155 ops/s
# Warmup Iteration  12: 427566.508 ops/s
# Warmup Iteration  13: 396773.501 ops/s
# Warmup Iteration  14: 407422.717 ops/s
# Warmup Iteration  15: 403844.832 ops/s
# Warmup Iteration  16: 403631.289 ops/s
# Warmup Iteration  17: 484781.332 ops/s
# Warmup Iteration  18: 471325.141 ops/s
# Warmup Iteration  19: 482599.185 ops/s
# Warmup Iteration  20: 488505.270 ops/s
# Warmup Iteration  21: 476714.078 ops/s
# Warmup Iteration  22: 474211.610 ops/s
# Warmup Iteration  23: 492826.733 ops/s
# Warmup Iteration  24: 461310.016 ops/s
# Warmup Iteration  25: 477221.683 ops/s
# Warmup Iteration  26: 479065.174 ops/s
# Warmup Iteration  27: 478886.499 ops/s
# Warmup Iteration  28: 484700.694 ops/s
# Warmup Iteration  29: 489853.411 ops/s
# Warmup Iteration  30: 473222.553 ops/s
Iteration   1: 462991.136 ops/s
Iteration   2: 499375.873 ops/s
Iteration   3: 474069.712 ops/s
Iteration   4: 477032.436 ops/s
Iteration   5: 491625.335 ops/s
Iteration   6: 470211.281 ops/s
Iteration   7: 457935.726 ops/s
Iteration   8: 492039.584 ops/s
Iteration   9: 469239.220 ops/s
Iteration  10: 479873.694 ops/s
Iteration  11: 488200.259 ops/s
Iteration  12: 469835.946 ops/s
Iteration  13: 485513.621 ops/s
Iteration  14: 465825.873 ops/s
Iteration  15: 476736.556 ops/s
Iteration  16: 483110.828 ops/s
Iteration  17: 479566.962 ops/s
Iteration  18: 465497.283 ops/s
Iteration  19: 493171.091 ops/s
Iteration  20: 474945.823 ops/s
Iteration  21: 499327.984 ops/s
Iteration  22: 471786.085 ops/s
Iteration  23: 488167.495 ops/s
Iteration  24: 468668.509 ops/s
Iteration  25: 488027.930 ops/s
Iteration  26: 477229.075 ops/s
Iteration  27: 478922.488 ops/s
Iteration  28: 481931.141 ops/s
Iteration  29: 477991.989 ops/s
Iteration  30: 472171.301 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_fusedCrashDelayError":
  478700.741 ±(99.9%) 7069.370 ops/s [Average]
  (min, avg, max) = (457935.726, 478700.741, 499375.873), stdev = 10581.100
  CI (99.9%): [471631.372, 485770.111] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score      Error  Units
FlowableConcatMapSchedulerTest._Benchmark.benchmark_fusedCrashDelayError  thrpt   30  478700.741 ± 7069.370  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_fusedCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_fusedCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 55900.246 ops/s
# Warmup Iteration   2: 327173.992 ops/s
# Warmup Iteration   3: 392395.185 ops/s
# Warmup Iteration   4: 376227.072 ops/s
# Warmup Iteration   5: 413249.705 ops/s
# Warmup Iteration   6: 359670.229 ops/s
# Warmup Iteration   7: 388181.779 ops/s
# Warmup Iteration   8: 398608.752 ops/s
# Warmup Iteration   9: 419519.566 ops/s
# Warmup Iteration  10: 397189.350 ops/s
# Warmup Iteration  11: 386169.247 ops/s
# Warmup Iteration  12: 412154.107 ops/s
# Warmup Iteration  13: 382342.082 ops/s
# Warmup Iteration  14: 400479.496 ops/s
# Warmup Iteration  15: 398332.736 ops/s
# Warmup Iteration  16: 386130.944 ops/s
# Warmup Iteration  17: 458145.867 ops/s
# Warmup Iteration  18: 469765.976 ops/s
# Warmup Iteration  19: 477823.769 ops/s
# Warmup Iteration  20: 466245.304 ops/s
# Warmup Iteration  21: 480498.377 ops/s
# Warmup Iteration  22: 463817.106 ops/s
# Warmup Iteration  23: 464572.105 ops/s
# Warmup Iteration  24: 468562.047 ops/s
# Warmup Iteration  25: 456089.770 ops/s
# Warmup Iteration  26: 484732.550 ops/s
# Warmup Iteration  27: 467058.108 ops/s
# Warmup Iteration  28: 473898.417 ops/s
# Warmup Iteration  29: 468699.280 ops/s
# Warmup Iteration  30: 475248.778 ops/s
Iteration   1: 483801.624 ops/s
Iteration   2: 463780.916 ops/s
Iteration   3: 462602.277 ops/s
Iteration   4: 471451.437 ops/s
Iteration   5: 483815.937 ops/s
Iteration   6: 460846.797 ops/s
Iteration   7: 482903.841 ops/s
Iteration   8: 469573.620 ops/s
Iteration   9: 462023.705 ops/s
Iteration  10: 489001.347 ops/s
Iteration  11: 456903.952 ops/s
Iteration  12: 471027.122 ops/s
Iteration  13: 485388.455 ops/s
Iteration  14: 456798.992 ops/s
Iteration  15: 455890.983 ops/s
Iteration  16: 474606.816 ops/s
Iteration  17: 442524.585 ops/s
Iteration  18: 484412.675 ops/s
Iteration  19: 457655.880 ops/s
Iteration  20: 485831.501 ops/s
Iteration  21: 485798.150 ops/s
Iteration  22: 458579.592 ops/s
Iteration  23: 476123.942 ops/s
Iteration  24: 472009.862 ops/s
Iteration  25: 485139.329 ops/s
Iteration  26: 468169.860 ops/s
Iteration  27: 471833.637 ops/s
Iteration  28: 462279.191 ops/s
Iteration  29: 474628.519 ops/s
Iteration  30: 482413.566 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_fusedCrash":
  471260.604 ±(99.9%) 8008.224 ops/s [Average]
  (min, avg, max) = (442524.585, 471260.604, 489001.347), stdev = 11986.334
  CI (99.9%): [463252.379, 479268.828] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
FlowableConcatMapSchedulerTest._Benchmark.benchmark_fusedCrash  thrpt   30  471260.604 ± 8008.224  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableDoAfterNextTest._Benchmark.benchmark_ifFunctionThrowsThatNoMoreEventsAreProcessed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableDoAfterNextTest._Benchmark.benchmark_ifFunctionThrowsThatNoMoreEventsAreProcessed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 81694.876 ops/s
# Warmup Iteration   2: 291615.117 ops/s
# Warmup Iteration   3: 534413.914 ops/s
# Warmup Iteration   4: 514485.596 ops/s
# Warmup Iteration   5: 522640.500 ops/s
# Warmup Iteration   6: 564729.204 ops/s
# Warmup Iteration   7: 568516.919 ops/s
# Warmup Iteration   8: 589676.517 ops/s
# Warmup Iteration   9: 588487.175 ops/s
# Warmup Iteration  10: 572351.355 ops/s
# Warmup Iteration  11: 578492.382 ops/s
# Warmup Iteration  12: 592845.138 ops/s
# Warmup Iteration  13: 573302.946 ops/s
# Warmup Iteration  14: 595116.980 ops/s
# Warmup Iteration  15: 573228.747 ops/s
# Warmup Iteration  16: 578680.624 ops/s
# Warmup Iteration  17: 631551.998 ops/s
# Warmup Iteration  18: 591298.727 ops/s
# Warmup Iteration  19: 622302.167 ops/s
# Warmup Iteration  20: 623112.941 ops/s
# Warmup Iteration  21: 588529.498 ops/s
# Warmup Iteration  22: 630779.314 ops/s
# Warmup Iteration  23: 599785.630 ops/s
# Warmup Iteration  24: 604386.467 ops/s
# Warmup Iteration  25: 620794.284 ops/s
# Warmup Iteration  26: 618539.274 ops/s
# Warmup Iteration  27: 600966.399 ops/s
# Warmup Iteration  28: 588456.910 ops/s
# Warmup Iteration  29: 595743.379 ops/s
# Warmup Iteration  30: 630764.408 ops/s
Iteration   1: 616585.399 ops/s
Iteration   2: 606023.364 ops/s
Iteration   3: 602101.861 ops/s
Iteration   4: 616512.093 ops/s
Iteration   5: 624607.506 ops/s
Iteration   6: 592962.284 ops/s
Iteration   7: 618164.249 ops/s
Iteration   8: 610565.593 ops/s
Iteration   9: 606728.045 ops/s
Iteration  10: 629504.594 ops/s
Iteration  11: 588868.905 ops/s
Iteration  12: 634632.838 ops/s
Iteration  13: 631995.224 ops/s
Iteration  14: 610822.812 ops/s
Iteration  15: 591808.527 ops/s
Iteration  16: 623919.259 ops/s
Iteration  17: 599399.250 ops/s
Iteration  18: 628111.227 ops/s
Iteration  19: 593751.028 ops/s
Iteration  20: 617893.923 ops/s
Iteration  21: 614387.762 ops/s
Iteration  22: 601154.729 ops/s
Iteration  23: 626281.134 ops/s
Iteration  24: 594845.448 ops/s
Iteration  25: 613146.886 ops/s
Iteration  26: 617971.280 ops/s
Iteration  27: 623173.669 ops/s
Iteration  28: 590895.023 ops/s
Iteration  29: 608299.029 ops/s
Iteration  30: 620845.144 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableDoAfterNextTest._Benchmark.benchmark_ifFunctionThrowsThatNoMoreEventsAreProcessed":
  611865.269 ±(99.9%) 8925.188 ops/s [Average]
  (min, avg, max) = (588868.905, 611865.269, 634632.838), stdev = 13358.802
  CI (99.9%): [602940.082, 620790.457] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                   Mode  Cnt       Score      Error  Units
FlowableDoAfterNextTest._Benchmark.benchmark_ifFunctionThrowsThatNoMoreEventsAreProcessed  thrpt   30  611865.269 ± 8925.188  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinallyTest._Benchmark.benchmark_normalEmptyConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinallyTest._Benchmark.benchmark_normalEmptyConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 869980.570 ops/s
# Warmup Iteration   2: 4266829.891 ops/s
# Warmup Iteration   3: 4707554.168 ops/s
# Warmup Iteration   4: 5316110.162 ops/s
# Warmup Iteration   5: 5657274.969 ops/s
# Warmup Iteration   6: 5361248.659 ops/s
# Warmup Iteration   7: 5455620.849 ops/s
# Warmup Iteration   8: 5630567.562 ops/s
# Warmup Iteration   9: 5299680.395 ops/s
# Warmup Iteration  10: 5413019.951 ops/s
# Warmup Iteration  11: 5308826.302 ops/s
# Warmup Iteration  12: 5318898.726 ops/s
# Warmup Iteration  13: 5614845.123 ops/s
# Warmup Iteration  14: 5351278.028 ops/s
# Warmup Iteration  15: 5421140.397 ops/s
# Warmup Iteration  16: 5438514.200 ops/s
# Warmup Iteration  17: 5466167.891 ops/s
# Warmup Iteration  18: 5613383.658 ops/s
# Warmup Iteration  19: 5400962.447 ops/s
# Warmup Iteration  20: 5459063.052 ops/s
# Warmup Iteration  21: 5335938.379 ops/s
# Warmup Iteration  22: 5508615.079 ops/s
# Warmup Iteration  23: 5532097.344 ops/s
# Warmup Iteration  24: 5323782.675 ops/s
# Warmup Iteration  25: 5612292.733 ops/s
# Warmup Iteration  26: 5493514.551 ops/s
# Warmup Iteration  27: 5324279.552 ops/s
# Warmup Iteration  28: 5723565.449 ops/s
# Warmup Iteration  29: 5360177.067 ops/s
# Warmup Iteration  30: 5545076.649 ops/s
Iteration   1: 5300194.918 ops/s
Iteration   2: 5569801.096 ops/s
Iteration   3: 5554536.637 ops/s
Iteration   4: 5437201.181 ops/s
Iteration   5: 5465390.842 ops/s
Iteration   6: 5571385.311 ops/s
Iteration   7: 5517478.873 ops/s
Iteration   8: 5499843.086 ops/s
Iteration   9: 5362799.937 ops/s
Iteration  10: 5429848.313 ops/s
Iteration  11: 5826110.409 ops/s
Iteration  12: 5497880.877 ops/s
Iteration  13: 5307823.312 ops/s
Iteration  14: 5648687.325 ops/s
Iteration  15: 5336962.366 ops/s
Iteration  16: 5527978.475 ops/s
Iteration  17: 5405023.013 ops/s
Iteration  18: 5336038.994 ops/s
Iteration  19: 5660413.613 ops/s
Iteration  20: 5283718.990 ops/s
Iteration  21: 5523404.953 ops/s
Iteration  22: 5574356.084 ops/s
Iteration  23: 5412389.380 ops/s
Iteration  24: 5721151.345 ops/s
Iteration  25: 5384321.373 ops/s
Iteration  26: 5622532.354 ops/s
Iteration  27: 5365031.510 ops/s
Iteration  28: 5469505.099 ops/s
Iteration  29: 4646948.590 ops/s
Iteration  30: 5383024.017 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinallyTest._Benchmark.benchmark_normalEmptyConditional":
  5454726.076 ±(99.9%) 134387.410 ops/s [Average]
  (min, avg, max) = (4646948.590, 5454726.076, 5826110.409), stdev = 201144.763
  CI (99.9%): [5320338.666, 5589113.485] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score        Error  Units
FlowableDoFinallyTest._Benchmark.benchmark_normalEmptyConditional  thrpt   30  5454726.076 ± 134387.410  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinallyTest._Benchmark.benchmark_normalTakeConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinallyTest._Benchmark.benchmark_normalTakeConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 304107.685 ops/s
# Warmup Iteration   2: 1678620.155 ops/s
# Warmup Iteration   3: 2617654.364 ops/s
# Warmup Iteration   4: 2724295.356 ops/s
# Warmup Iteration   5: 2778764.036 ops/s
# Warmup Iteration   6: 2807911.831 ops/s
# Warmup Iteration   7: 2708534.370 ops/s
# Warmup Iteration   8: 2700533.463 ops/s
# Warmup Iteration   9: 2859408.146 ops/s
# Warmup Iteration  10: 2673501.389 ops/s
# Warmup Iteration  11: 2790548.352 ops/s
# Warmup Iteration  12: 2687997.815 ops/s
# Warmup Iteration  13: 2823142.174 ops/s
# Warmup Iteration  14: 2783946.252 ops/s
# Warmup Iteration  15: 2621514.632 ops/s
# Warmup Iteration  16: 2693784.262 ops/s
# Warmup Iteration  17: 2859235.086 ops/s
# Warmup Iteration  18: 2722590.221 ops/s
# Warmup Iteration  19: 2845573.812 ops/s
# Warmup Iteration  20: 2840987.112 ops/s
# Warmup Iteration  21: 2798555.309 ops/s
# Warmup Iteration  22: 2869084.333 ops/s
# Warmup Iteration  23: 2657121.436 ops/s
# Warmup Iteration  24: 2703678.514 ops/s
# Warmup Iteration  25: 2740007.364 ops/s
# Warmup Iteration  26: 2904739.129 ops/s
# Warmup Iteration  27: 2735848.720 ops/s
# Warmup Iteration  28: 2830160.519 ops/s
# Warmup Iteration  29: 2729390.721 ops/s
# Warmup Iteration  30: 2892328.801 ops/s
Iteration   1: 2851553.742 ops/s
Iteration   2: 2739204.504 ops/s
Iteration   3: 2829553.984 ops/s
Iteration   4: 2951151.791 ops/s
Iteration   5: 2677567.829 ops/s
Iteration   6: 2857167.577 ops/s
Iteration   7: 2749135.604 ops/s
Iteration   8: 2823011.255 ops/s
Iteration   9: 2883551.362 ops/s
Iteration  10: 2759357.326 ops/s
Iteration  11: 2881357.798 ops/s
Iteration  12: 2759145.503 ops/s
Iteration  13: 2741359.231 ops/s
Iteration  14: 2808376.609 ops/s
Iteration  15: 2732026.922 ops/s
Iteration  16: 2771398.815 ops/s
Iteration  17: 2722707.870 ops/s
Iteration  18: 2821774.387 ops/s
Iteration  19: 2719006.134 ops/s
Iteration  20: 2898067.972 ops/s
Iteration  21: 2699429.100 ops/s
Iteration  22: 2779680.121 ops/s
Iteration  23: 2837282.311 ops/s
Iteration  24: 2775346.014 ops/s
Iteration  25: 2851506.386 ops/s
Iteration  26: 2739666.048 ops/s
Iteration  27: 2829825.571 ops/s
Iteration  28: 2810150.862 ops/s
Iteration  29: 2763871.333 ops/s
Iteration  30: 2844427.281 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinallyTest._Benchmark.benchmark_normalTakeConditional":
  2796922.041 ±(99.9%) 43466.847 ops/s [Average]
  (min, avg, max) = (2677567.829, 2796922.041, 2951151.791), stdev = 65059.135
  CI (99.9%): [2753455.195, 2840388.888] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
FlowableDoFinallyTest._Benchmark.benchmark_normalTakeConditional  thrpt   30  2796922.041 ± 43466.847  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLongTest._Benchmark.benchmark_conditionalFastPathCancelBeforeComplete$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLongTest._Benchmark.benchmark_conditionalFastPathCancelBeforeComplete

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 560948.729 ops/s
# Warmup Iteration   2: 2161058.030 ops/s
# Warmup Iteration   3: 2799148.477 ops/s
# Warmup Iteration   4: 3309610.852 ops/s
# Warmup Iteration   5: 3395415.770 ops/s
# Warmup Iteration   6: 3329311.700 ops/s
# Warmup Iteration   7: 3372790.227 ops/s
# Warmup Iteration   8: 3147444.036 ops/s
# Warmup Iteration   9: 3328998.282 ops/s
# Warmup Iteration  10: 3433329.592 ops/s
# Warmup Iteration  11: 3293157.507 ops/s
# Warmup Iteration  12: 3385235.539 ops/s
# Warmup Iteration  13: 3334986.160 ops/s
# Warmup Iteration  14: 3488314.584 ops/s
# Warmup Iteration  15: 3368251.598 ops/s
# Warmup Iteration  16: 3346874.526 ops/s
# Warmup Iteration  17: 3314022.135 ops/s
# Warmup Iteration  18: 3353286.234 ops/s
# Warmup Iteration  19: 3335739.125 ops/s
# Warmup Iteration  20: 3154767.000 ops/s
# Warmup Iteration  21: 3391761.271 ops/s
# Warmup Iteration  22: 3288987.564 ops/s
# Warmup Iteration  23: 3175167.196 ops/s
# Warmup Iteration  24: 3356925.682 ops/s
# Warmup Iteration  25: 3245801.720 ops/s
# Warmup Iteration  26: 3392236.991 ops/s
# Warmup Iteration  27: 3386759.571 ops/s
# Warmup Iteration  28: 3239411.269 ops/s
# Warmup Iteration  29: 3342496.158 ops/s
# Warmup Iteration  30: 3351830.958 ops/s
Iteration   1: 3349567.397 ops/s
Iteration   2: 3322466.421 ops/s
Iteration   3: 3212994.991 ops/s
Iteration   4: 3411158.055 ops/s
Iteration   5: 3256215.320 ops/s
Iteration   6: 3373860.458 ops/s
Iteration   7: 3351801.585 ops/s
Iteration   8: 3314747.244 ops/s
Iteration   9: 3399757.653 ops/s
Iteration  10: 3307529.342 ops/s
Iteration  11: 3259241.897 ops/s
Iteration  12: 3454900.985 ops/s
Iteration  13: 3244952.670 ops/s
Iteration  14: 3273042.817 ops/s
Iteration  15: 3244384.952 ops/s
Iteration  16: 3377482.847 ops/s
Iteration  17: 3300301.663 ops/s
Iteration  18: 3232494.443 ops/s
Iteration  19: 3426056.060 ops/s
Iteration  20: 3315738.306 ops/s
Iteration  21: 3363819.836 ops/s
Iteration  22: 3256611.227 ops/s
Iteration  23: 3328979.097 ops/s
Iteration  24: 2822957.856 ops/s
Iteration  25: 3245745.248 ops/s
Iteration  26: 3231393.845 ops/s
Iteration  27: 3369956.678 ops/s
Iteration  28: 3146841.055 ops/s
Iteration  29: 3350868.674 ops/s
Iteration  30: 3445135.309 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLongTest._Benchmark.benchmark_conditionalFastPathCancelBeforeComplete":
  3299700.131 ±(99.9%) 78110.899 ops/s [Average]
  (min, avg, max) = (2822957.856, 3299700.131, 3454900.985), stdev = 116912.726
  CI (99.9%): [3221589.232, 3377811.030] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            Mode  Cnt        Score       Error  Units
FlowableRangeLongTest._Benchmark.benchmark_conditionalFastPathCancelBeforeComplete  thrpt   30  3299700.131 ± 78110.899  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeTest._Benchmark.benchmark_takeEmitsErrors$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeTest._Benchmark.benchmark_takeEmitsErrors

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 166737.135 ops/s
# Warmup Iteration   2: 607728.374 ops/s
# Warmup Iteration   3: 675913.027 ops/s
# Warmup Iteration   4: 643585.022 ops/s
# Warmup Iteration   5: 662802.016 ops/s
# Warmup Iteration   6: 645780.126 ops/s
# Warmup Iteration   7: 637213.785 ops/s
# Warmup Iteration   8: 669972.033 ops/s
# Warmup Iteration   9: 681227.850 ops/s
# Warmup Iteration  10: 661096.184 ops/s
# Warmup Iteration  11: 662441.384 ops/s
# Warmup Iteration  12: 681639.295 ops/s
# Warmup Iteration  13: 654475.056 ops/s
# Warmup Iteration  14: 675828.698 ops/s
# Warmup Iteration  15: 671170.504 ops/s
# Warmup Iteration  16: 667773.755 ops/s
# Warmup Iteration  17: 729009.040 ops/s
# Warmup Iteration  18: 698701.684 ops/s
# Warmup Iteration  19: 687545.423 ops/s
# Warmup Iteration  20: 706518.257 ops/s
# Warmup Iteration  21: 713351.439 ops/s
# Warmup Iteration  22: 697472.644 ops/s
# Warmup Iteration  23: 719927.566 ops/s
# Warmup Iteration  24: 677860.809 ops/s
# Warmup Iteration  25: 729185.059 ops/s
# Warmup Iteration  26: 686418.348 ops/s
# Warmup Iteration  27: 704726.932 ops/s
# Warmup Iteration  28: 734404.068 ops/s
# Warmup Iteration  29: 688242.516 ops/s
# Warmup Iteration  30: 704518.735 ops/s
Iteration   1: 706583.101 ops/s
Iteration   2: 672455.401 ops/s
Iteration   3: 733889.013 ops/s
Iteration   4: 711389.940 ops/s
Iteration   5: 699795.160 ops/s
Iteration   6: 718905.285 ops/s
Iteration   7: 747693.448 ops/s
Iteration   8: 661808.166 ops/s
Iteration   9: 723251.034 ops/s
Iteration  10: 705508.875 ops/s
Iteration  11: 718521.825 ops/s
Iteration  12: 708014.438 ops/s
Iteration  13: 707255.763 ops/s
Iteration  14: 718839.807 ops/s
Iteration  15: 697066.114 ops/s
Iteration  16: 720930.459 ops/s
Iteration  17: 702952.648 ops/s
Iteration  18: 720272.938 ops/s
Iteration  19: 735333.085 ops/s
Iteration  20: 705614.524 ops/s
Iteration  21: 697442.810 ops/s
Iteration  22: 718094.492 ops/s
Iteration  23: 699152.049 ops/s
Iteration  24: 720610.023 ops/s
Iteration  25: 724619.600 ops/s
Iteration  26: 699838.776 ops/s
Iteration  27: 736649.174 ops/s
Iteration  28: 694424.613 ops/s
Iteration  29: 702198.745 ops/s
Iteration  30: 715580.146 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeTest._Benchmark.benchmark_takeEmitsErrors":
  710823.048 ±(99.9%) 11884.679 ops/s [Average]
  (min, avg, max) = (661808.166, 710823.048, 747693.448), stdev = 17788.429
  CI (99.9%): [698938.370, 722707.727] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score       Error  Units
FlowableTakeTest._Benchmark.benchmark_takeEmitsErrors  thrpt   30  710823.048 ± 11884.679  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLongTest._Benchmark.benchmark_conditionalSlowPathTake$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLongTest._Benchmark.benchmark_conditionalSlowPathTake

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 466572.357 ops/s
# Warmup Iteration   2: 2126612.136 ops/s
# Warmup Iteration   3: 2799653.163 ops/s
# Warmup Iteration   4: 3265963.807 ops/s
# Warmup Iteration   5: 3250399.539 ops/s
# Warmup Iteration   6: 3293745.975 ops/s
# Warmup Iteration   7: 3204844.225 ops/s
# Warmup Iteration   8: 3223814.215 ops/s
# Warmup Iteration   9: 3323583.474 ops/s
# Warmup Iteration  10: 3245865.849 ops/s
# Warmup Iteration  11: 3381738.563 ops/s
# Warmup Iteration  12: 3087730.490 ops/s
# Warmup Iteration  13: 3300461.112 ops/s
# Warmup Iteration  14: 3389997.893 ops/s
# Warmup Iteration  15: 3278013.992 ops/s
# Warmup Iteration  16: 3281251.996 ops/s
# Warmup Iteration  17: 3355408.525 ops/s
# Warmup Iteration  18: 3134076.241 ops/s
# Warmup Iteration  19: 3426869.860 ops/s
# Warmup Iteration  20: 3252001.519 ops/s
# Warmup Iteration  21: 3260035.860 ops/s
# Warmup Iteration  22: 3393688.633 ops/s
# Warmup Iteration  23: 3322946.953 ops/s
# Warmup Iteration  24: 3177254.411 ops/s
# Warmup Iteration  25: 3107891.373 ops/s
# Warmup Iteration  26: 3363297.469 ops/s
# Warmup Iteration  27: 3251443.651 ops/s
# Warmup Iteration  28: 3299282.172 ops/s
# Warmup Iteration  29: 3190676.817 ops/s
# Warmup Iteration  30: 3260509.040 ops/s
Iteration   1: 3373297.728 ops/s
Iteration   2: 3175401.091 ops/s
Iteration   3: 3287660.362 ops/s
Iteration   4: 3213753.132 ops/s
Iteration   5: 3249482.276 ops/s
Iteration   6: 3239399.965 ops/s
Iteration   7: 3201460.642 ops/s
Iteration   8: 3336812.636 ops/s
Iteration   9: 3207812.503 ops/s
Iteration  10: 3218896.981 ops/s
Iteration  11: 3098667.957 ops/s
Iteration  12: 3270917.483 ops/s
Iteration  13: 3263761.216 ops/s
Iteration  14: 3187583.387 ops/s
Iteration  15: 3261681.424 ops/s
Iteration  16: 3350844.748 ops/s
Iteration  17: 3209327.835 ops/s
Iteration  18: 2970176.136 ops/s
Iteration  19: 2750905.942 ops/s
Iteration  20: 3133416.219 ops/s
Iteration  21: 3303642.532 ops/s
Iteration  22: 3115426.117 ops/s
Iteration  23: 3160999.385 ops/s
Iteration  24: 3380083.838 ops/s
Iteration  25: 3160474.362 ops/s
Iteration  26: 3230725.283 ops/s
Iteration  27: 3326367.627 ops/s
Iteration  28: 3208096.459 ops/s
Iteration  29: 3279695.125 ops/s
Iteration  30: 3287240.998 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLongTest._Benchmark.benchmark_conditionalSlowPathTake":
  3215133.713 ±(99.9%) 82690.167 ops/s [Average]
  (min, avg, max) = (2750905.942, 3215133.713, 3380083.838), stdev = 123766.758
  CI (99.9%): [3132443.546, 3297823.880] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
FlowableRangeLongTest._Benchmark.benchmark_conditionalSlowPathTake  thrpt   30  3215133.713 ± 82690.167  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDematerializeTest._Benchmark.benchmark_notificationInstanceAfterDispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDematerializeTest._Benchmark.benchmark_notificationInstanceAfterDispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1718807.508 ops/s
# Warmup Iteration   2: 4848927.989 ops/s
# Warmup Iteration   3: 6927486.409 ops/s
# Warmup Iteration   4: 6772922.977 ops/s
# Warmup Iteration   5: 6605965.694 ops/s
# Warmup Iteration   6: 6859157.218 ops/s
# Warmup Iteration   7: 6687924.689 ops/s
# Warmup Iteration   8: 6803249.739 ops/s
# Warmup Iteration   9: 6996170.131 ops/s
# Warmup Iteration  10: 6722519.369 ops/s
# Warmup Iteration  11: 6934376.487 ops/s
# Warmup Iteration  12: 6795385.805 ops/s
# Warmup Iteration  13: 6927185.653 ops/s
# Warmup Iteration  14: 6981566.599 ops/s
# Warmup Iteration  15: 6689465.134 ops/s
# Warmup Iteration  16: 6871478.905 ops/s
# Warmup Iteration  17: 6756095.220 ops/s
# Warmup Iteration  18: 6950624.653 ops/s
# Warmup Iteration  19: 7110415.768 ops/s
# Warmup Iteration  20: 6824965.396 ops/s
# Warmup Iteration  21: 7106968.901 ops/s
# Warmup Iteration  22: 6966139.695 ops/s
# Warmup Iteration  23: 6697567.372 ops/s
# Warmup Iteration  24: 6745524.229 ops/s
# Warmup Iteration  25: 7078305.312 ops/s
# Warmup Iteration  26: 6655071.951 ops/s
# Warmup Iteration  27: 6839593.080 ops/s
# Warmup Iteration  28: 6800917.385 ops/s
# Warmup Iteration  29: 6709910.615 ops/s
# Warmup Iteration  30: 7021185.382 ops/s
Iteration   1: 6545910.572 ops/s
Iteration   2: 6764014.034 ops/s
Iteration   3: 7014104.169 ops/s
Iteration   4: 6593564.004 ops/s
Iteration   5: 7208492.514 ops/s
Iteration   6: 6899089.802 ops/s
Iteration   7: 6901293.296 ops/s
Iteration   8: 7118853.206 ops/s
Iteration   9: 6980882.434 ops/s
Iteration  10: 6767764.814 ops/s
Iteration  11: 6732112.473 ops/s
Iteration  12: 6988091.192 ops/s
Iteration  13: 6722285.238 ops/s
Iteration  14: 6938588.284 ops/s
Iteration  15: 6857239.324 ops/s
Iteration  16: 6731479.821 ops/s
Iteration  17: 7028369.447 ops/s
Iteration  18: 6772770.350 ops/s
Iteration  19: 7107443.537 ops/s
Iteration  20: 6757772.242 ops/s
Iteration  21: 6952156.101 ops/s
Iteration  22: 6734494.523 ops/s
Iteration  23: 6839659.795 ops/s
Iteration  24: 6970221.200 ops/s
Iteration  25: 6522085.637 ops/s
Iteration  26: 7149646.837 ops/s
Iteration  27: 6704349.051 ops/s
Iteration  28: 6908752.944 ops/s
Iteration  29: 6832064.186 ops/s
Iteration  30: 6947563.623 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableDematerializeTest._Benchmark.benchmark_notificationInstanceAfterDispose":
  6866370.488 ±(99.9%) 115600.412 ops/s [Average]
  (min, avg, max) = (6522085.637, 6866370.488, 7208492.514), stdev = 173025.268
  CI (99.9%): [6750770.076, 6981970.901] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt        Score        Error  Units
FlowableDematerializeTest._Benchmark.benchmark_notificationInstanceAfterDispose  thrpt   30  6866370.488 ± 115600.412  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableMapOptionalTest._Benchmark.benchmark_crashDropsOnNexts$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableMapOptionalTest._Benchmark.benchmark_crashDropsOnNexts

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 210615.004 ops/s
# Warmup Iteration   2: 456904.694 ops/s
# Warmup Iteration   3: 546462.091 ops/s
# Warmup Iteration   4: 541556.061 ops/s
# Warmup Iteration   5: 538993.556 ops/s
# Warmup Iteration   6: 530775.437 ops/s
# Warmup Iteration   7: 556655.524 ops/s
# Warmup Iteration   8: 564558.426 ops/s
# Warmup Iteration   9: 556430.310 ops/s
# Warmup Iteration  10: 562961.899 ops/s
# Warmup Iteration  11: 564165.944 ops/s
# Warmup Iteration  12: 552706.817 ops/s
# Warmup Iteration  13: 552690.717 ops/s
# Warmup Iteration  14: 566767.870 ops/s
# Warmup Iteration  15: 498430.834 ops/s
# Warmup Iteration  16: 559770.584 ops/s
# Warmup Iteration  17: 583522.816 ops/s
# Warmup Iteration  18: 591012.593 ops/s
# Warmup Iteration  19: 585537.983 ops/s
# Warmup Iteration  20: 572680.622 ops/s
# Warmup Iteration  21: 611239.026 ops/s
# Warmup Iteration  22: 589088.671 ops/s
# Warmup Iteration  23: 594615.975 ops/s
# Warmup Iteration  24: 582028.440 ops/s
# Warmup Iteration  25: 603727.320 ops/s
# Warmup Iteration  26: 613122.582 ops/s
# Warmup Iteration  27: 570260.153 ops/s
# Warmup Iteration  28: 604376.558 ops/s
# Warmup Iteration  29: 569885.688 ops/s
# Warmup Iteration  30: 599859.133 ops/s
Iteration   1: 581080.107 ops/s
Iteration   2: 578784.305 ops/s
Iteration   3: 599432.345 ops/s
Iteration   4: 565877.948 ops/s
Iteration   5: 603665.265 ops/s
Iteration   6: 573910.556 ops/s
Iteration   7: 598239.505 ops/s
Iteration   8: 582978.192 ops/s
Iteration   9: 584203.798 ops/s
Iteration  10: 595678.877 ops/s
Iteration  11: 576145.030 ops/s
Iteration  12: 607544.408 ops/s
Iteration  13: 521493.310 ops/s
Iteration  14: 550895.583 ops/s
Iteration  15: 583864.017 ops/s
Iteration  16: 586945.651 ops/s
Iteration  17: 598634.308 ops/s
Iteration  18: 568830.969 ops/s
Iteration  19: 606118.351 ops/s
Iteration  20: 604081.724 ops/s
Iteration  21: 550918.087 ops/s
Iteration  22: 591947.143 ops/s
Iteration  23: 605396.880 ops/s
Iteration  24: 564778.616 ops/s
Iteration  25: 585500.437 ops/s
Iteration  26: 591986.899 ops/s
Iteration  27: 580084.091 ops/s
Iteration  28: 563632.510 ops/s
Iteration  29: 604209.423 ops/s
Iteration  30: 597717.704 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableMapOptionalTest._Benchmark.benchmark_crashDropsOnNexts":
  583485.868 ±(99.9%) 13284.437 ops/s [Average]
  (min, avg, max) = (521493.310, 583485.868, 607544.408), stdev = 19883.522
  CI (99.9%): [570201.431, 596770.305] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score       Error  Units
FlowableMapOptionalTest._Benchmark.benchmark_crashDropsOnNexts  thrpt   30  583485.868 ± 13284.437  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_pollThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_pollThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 81841.587 ops/s
# Warmup Iteration   2: 314901.615 ops/s
# Warmup Iteration   3: 377730.049 ops/s
# Warmup Iteration   4: 409736.398 ops/s
# Warmup Iteration   5: 384421.388 ops/s
# Warmup Iteration   6: 392642.345 ops/s
# Warmup Iteration   7: 391774.925 ops/s
# Warmup Iteration   8: 369139.524 ops/s
# Warmup Iteration   9: 388679.383 ops/s
# Warmup Iteration  10: 388091.498 ops/s
# Warmup Iteration  11: 395287.168 ops/s
# Warmup Iteration  12: 410572.933 ops/s
# Warmup Iteration  13: 385966.137 ops/s
# Warmup Iteration  14: 410166.416 ops/s
# Warmup Iteration  15: 401942.032 ops/s
# Warmup Iteration  16: 404840.190 ops/s
# Warmup Iteration  17: 405402.319 ops/s
# Warmup Iteration  18: 406427.058 ops/s
# Warmup Iteration  19: 410847.363 ops/s
# Warmup Iteration  20: 391589.490 ops/s
# Warmup Iteration  21: 415833.613 ops/s
# Warmup Iteration  22: 399061.579 ops/s
# Warmup Iteration  23: 419711.255 ops/s
# Warmup Iteration  24: 408577.847 ops/s
# Warmup Iteration  25: 415163.471 ops/s
# Warmup Iteration  26: 418364.961 ops/s
# Warmup Iteration  27: 408294.382 ops/s
# Warmup Iteration  28: 401129.035 ops/s
# Warmup Iteration  29: 422876.179 ops/s
# Warmup Iteration  30: 410473.262 ops/s
Iteration   1: 414958.256 ops/s
Iteration   2: 419960.081 ops/s
Iteration   3: 400026.022 ops/s
Iteration   4: 423370.119 ops/s
Iteration   5: 421036.152 ops/s
Iteration   6: 405221.135 ops/s
Iteration   7: 411822.599 ops/s
Iteration   8: 416931.051 ops/s
Iteration   9: 417905.098 ops/s
Iteration  10: 412532.569 ops/s
Iteration  11: 406270.802 ops/s
Iteration  12: 424762.824 ops/s
Iteration  13: 405340.522 ops/s
Iteration  14: 424457.931 ops/s
Iteration  15: 405905.668 ops/s
Iteration  16: 418231.657 ops/s
Iteration  17: 409695.452 ops/s
Iteration  18: 413050.723 ops/s
Iteration  19: 398048.297 ops/s
Iteration  20: 408903.025 ops/s
Iteration  21: 418900.278 ops/s
Iteration  22: 399478.499 ops/s
Iteration  23: 414469.424 ops/s
Iteration  24: 397077.094 ops/s
Iteration  25: 422518.946 ops/s
Iteration  26: 429347.597 ops/s
Iteration  27: 388725.435 ops/s
Iteration  28: 424437.669 ops/s
Iteration  29: 408704.286 ops/s
Iteration  30: 396638.842 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_pollThrows":
  411957.602 ±(99.9%) 6797.295 ops/s [Average]
  (min, avg, max) = (388725.435, 411957.602, 429347.597), stdev = 10173.872
  CI (99.9%): [405160.307, 418754.897] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
FlowableConcatMapSchedulerTest._Benchmark.benchmark_pollThrows  thrpt   30  411957.602 ± 6797.295  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_pollThrowsDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_pollThrowsDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 52674.107 ops/s
# Warmup Iteration   2: 146628.097 ops/s
# Warmup Iteration   3: 406923.168 ops/s
# Warmup Iteration   4: 399863.314 ops/s
# Warmup Iteration   5: 401707.895 ops/s
# Warmup Iteration   6: 384797.185 ops/s
# Warmup Iteration   7: 381658.659 ops/s
# Warmup Iteration   8: 391248.650 ops/s
# Warmup Iteration   9: 404316.328 ops/s
# Warmup Iteration  10: 406879.732 ops/s
# Warmup Iteration  11: 407488.682 ops/s
# Warmup Iteration  12: 396383.580 ops/s
# Warmup Iteration  13: 409933.467 ops/s
# Warmup Iteration  14: 421763.125 ops/s
# Warmup Iteration  15: 418562.975 ops/s
# Warmup Iteration  16: 397275.990 ops/s
# Warmup Iteration  17: 419494.680 ops/s
# Warmup Iteration  18: 415095.401 ops/s
# Warmup Iteration  19: 411610.286 ops/s
# Warmup Iteration  20: 414811.395 ops/s
# Warmup Iteration  21: 410668.191 ops/s
# Warmup Iteration  22: 425607.667 ops/s
# Warmup Iteration  23: 411997.163 ops/s
# Warmup Iteration  24: 417054.296 ops/s
# Warmup Iteration  25: 413908.764 ops/s
# Warmup Iteration  26: 424770.880 ops/s
# Warmup Iteration  27: 412470.417 ops/s
# Warmup Iteration  28: 415645.502 ops/s
# Warmup Iteration  29: 428375.822 ops/s
# Warmup Iteration  30: 426122.942 ops/s
Iteration   1: 395697.923 ops/s
Iteration   2: 422199.384 ops/s
Iteration   3: 384887.568 ops/s
Iteration   4: 425794.799 ops/s
Iteration   5: 429736.963 ops/s
Iteration   6: 402678.652 ops/s
Iteration   7: 417693.897 ops/s
Iteration   8: 363357.282 ops/s
Iteration   9: 420972.855 ops/s
Iteration  10: 411551.151 ops/s
Iteration  11: 421724.893 ops/s
Iteration  12: 414005.517 ops/s
Iteration  13: 422098.028 ops/s
Iteration  14: 407222.908 ops/s
Iteration  15: 408769.234 ops/s
Iteration  16: 421415.934 ops/s
Iteration  17: 427855.754 ops/s
Iteration  18: 416162.795 ops/s
Iteration  19: 403783.205 ops/s
Iteration  20: 432642.097 ops/s
Iteration  21: 402412.548 ops/s
Iteration  22: 412859.598 ops/s
Iteration  23: 434214.113 ops/s
Iteration  24: 401021.368 ops/s
Iteration  25: 424576.638 ops/s
Iteration  26: 410236.564 ops/s
Iteration  27: 419655.458 ops/s
Iteration  28: 413759.380 ops/s
Iteration  29: 412898.201 ops/s
Iteration  30: 403023.675 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_pollThrowsDelayError":
  412830.279 ±(99.9%) 9809.074 ops/s [Average]
  (min, avg, max) = (363357.282, 412830.279, 434214.113), stdev = 14681.761
  CI (99.9%): [403021.205, 422639.353] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score      Error  Units
FlowableConcatMapSchedulerTest._Benchmark.benchmark_pollThrowsDelayError  thrpt   30  412830.279 ± 9809.074  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableMapOptionalTest._Benchmark.benchmark_mapperNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableMapOptionalTest._Benchmark.benchmark_mapperNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 109830.559 ops/s
# Warmup Iteration   2: 350311.278 ops/s
# Warmup Iteration   3: 459338.746 ops/s
# Warmup Iteration   4: 435489.636 ops/s
# Warmup Iteration   5: 489880.081 ops/s
# Warmup Iteration   6: 501973.001 ops/s
# Warmup Iteration   7: 485543.487 ops/s
# Warmup Iteration   8: 495360.898 ops/s
# Warmup Iteration   9: 507917.302 ops/s
# Warmup Iteration  10: 479698.682 ops/s
# Warmup Iteration  11: 452993.206 ops/s
# Warmup Iteration  12: 473877.284 ops/s
# Warmup Iteration  13: 497801.090 ops/s
# Warmup Iteration  14: 502400.269 ops/s
# Warmup Iteration  15: 492209.184 ops/s
# Warmup Iteration  16: 511741.597 ops/s
# Warmup Iteration  17: 498541.527 ops/s
# Warmup Iteration  18: 535798.744 ops/s
# Warmup Iteration  19: 528105.158 ops/s
# Warmup Iteration  20: 506202.164 ops/s
# Warmup Iteration  21: 518820.435 ops/s
# Warmup Iteration  22: 512126.180 ops/s
# Warmup Iteration  23: 523239.387 ops/s
# Warmup Iteration  24: 517590.353 ops/s
# Warmup Iteration  25: 499193.815 ops/s
# Warmup Iteration  26: 489506.770 ops/s
# Warmup Iteration  27: 516958.681 ops/s
# Warmup Iteration  28: 523752.758 ops/s
# Warmup Iteration  29: 513557.474 ops/s
# Warmup Iteration  30: 504802.528 ops/s
Iteration   1: 514409.853 ops/s
Iteration   2: 498517.740 ops/s
Iteration   3: 515436.789 ops/s
Iteration   4: 518083.911 ops/s
Iteration   5: 518976.193 ops/s
Iteration   6: 499399.422 ops/s
Iteration   7: 532732.125 ops/s
Iteration   8: 503456.755 ops/s
Iteration   9: 540382.253 ops/s
Iteration  10: 502565.245 ops/s
Iteration  11: 527427.115 ops/s
Iteration  12: 516284.823 ops/s
Iteration  13: 500667.129 ops/s
Iteration  14: 510129.457 ops/s
Iteration  15: 522879.446 ops/s
Iteration  16: 521322.477 ops/s
Iteration  17: 521487.646 ops/s
Iteration  18: 498396.820 ops/s
Iteration  19: 532902.993 ops/s
Iteration  20: 502563.364 ops/s
Iteration  21: 524537.220 ops/s
Iteration  22: 514796.694 ops/s
Iteration  23: 526666.301 ops/s
Iteration  24: 509555.594 ops/s
Iteration  25: 507197.185 ops/s
Iteration  26: 536462.754 ops/s
Iteration  27: 498005.631 ops/s
Iteration  28: 528114.573 ops/s
Iteration  29: 502386.058 ops/s
Iteration  30: 513487.307 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableMapOptionalTest._Benchmark.benchmark_mapperNull":
  515307.696 ±(99.9%) 8290.447 ops/s [Average]
  (min, avg, max) = (498005.631, 515307.696, 540382.253), stdev = 12408.751
  CI (99.9%): [507017.249, 523598.142] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score      Error  Units
FlowableMapOptionalTest._Benchmark.benchmark_mapperNull  thrpt   30  515307.696 ± 8290.447  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinallyTest._Benchmark.benchmark_actionThrowsConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinallyTest._Benchmark.benchmark_actionThrowsConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 25581.232 ops/s
# Warmup Iteration   2: 107399.685 ops/s
# Warmup Iteration   3: 170604.805 ops/s
# Warmup Iteration   4: 164433.244 ops/s
# Warmup Iteration   5: 186327.890 ops/s
# Warmup Iteration   6: 189346.598 ops/s
# Warmup Iteration   7: 187212.133 ops/s
# Warmup Iteration   8: 177779.972 ops/s
# Warmup Iteration   9: 191916.244 ops/s
# Warmup Iteration  10: 178253.358 ops/s
# Warmup Iteration  11: 187348.740 ops/s
# Warmup Iteration  12: 182195.317 ops/s
# Warmup Iteration  13: 171572.712 ops/s
# Warmup Iteration  14: 190845.121 ops/s
# Warmup Iteration  15: 177932.834 ops/s
# Warmup Iteration  16: 186381.372 ops/s
# Warmup Iteration  17: 192279.431 ops/s
# Warmup Iteration  18: 185850.859 ops/s
# Warmup Iteration  19: 196809.873 ops/s
# Warmup Iteration  20: 188357.819 ops/s
# Warmup Iteration  21: 194477.812 ops/s
# Warmup Iteration  22: 190001.662 ops/s
# Warmup Iteration  23: 191805.157 ops/s
# Warmup Iteration  24: 194998.381 ops/s
# Warmup Iteration  25: 185675.640 ops/s
# Warmup Iteration  26: 188298.115 ops/s
# Warmup Iteration  27: 184986.161 ops/s
# Warmup Iteration  28: 195397.313 ops/s
# Warmup Iteration  29: 191926.587 ops/s
# Warmup Iteration  30: 184626.877 ops/s
Iteration   1: 199088.982 ops/s
Iteration   2: 182391.304 ops/s
Iteration   3: 164210.777 ops/s
Iteration   4: 188504.614 ops/s
Iteration   5: 189337.948 ops/s
Iteration   6: 187194.644 ops/s
Iteration   7: 185817.344 ops/s
Iteration   8: 196601.612 ops/s
Iteration   9: 189105.388 ops/s
Iteration  10: 192646.054 ops/s
Iteration  11: 198829.631 ops/s
Iteration  12: 185095.859 ops/s
Iteration  13: 191774.300 ops/s
Iteration  14: 194173.268 ops/s
Iteration  15: 186629.694 ops/s
Iteration  16: 186909.943 ops/s
Iteration  17: 198392.012 ops/s
Iteration  18: 185062.024 ops/s
Iteration  19: 199895.695 ops/s
Iteration  20: 185925.185 ops/s
Iteration  21: 194829.501 ops/s
Iteration  22: 189283.564 ops/s
Iteration  23: 190119.736 ops/s
Iteration  24: 197581.862 ops/s
Iteration  25: 184040.776 ops/s
Iteration  26: 191539.726 ops/s
Iteration  27: 194253.753 ops/s
Iteration  28: 190717.692 ops/s
Iteration  29: 197206.446 ops/s
Iteration  30: 183412.009 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinallyTest._Benchmark.benchmark_actionThrowsConditional":
  190019.045 ±(99.9%) 4758.333 ops/s [Average]
  (min, avg, max) = (164210.777, 190019.045, 199895.695), stdev = 7122.049
  CI (99.9%): [185260.712, 194777.377] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score      Error  Units
FlowableDoFinallyTest._Benchmark.benchmark_actionThrowsConditional  thrpt   30  190019.045 ± 4758.333  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableMapOptionalTest._Benchmark.benchmark_mapperChash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableMapOptionalTest._Benchmark.benchmark_mapperChash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 49194.845 ops/s
# Warmup Iteration   2: 423990.980 ops/s
# Warmup Iteration   3: 456174.627 ops/s
# Warmup Iteration   4: 488034.393 ops/s
# Warmup Iteration   5: 487290.750 ops/s
# Warmup Iteration   6: 452248.915 ops/s
# Warmup Iteration   7: 522978.161 ops/s
# Warmup Iteration   8: 527192.401 ops/s
# Warmup Iteration   9: 496727.216 ops/s
# Warmup Iteration  10: 510648.830 ops/s
# Warmup Iteration  11: 499739.029 ops/s
# Warmup Iteration  12: 500356.619 ops/s
# Warmup Iteration  13: 517580.087 ops/s
# Warmup Iteration  14: 521592.029 ops/s
# Warmup Iteration  15: 502241.327 ops/s
# Warmup Iteration  16: 506560.360 ops/s
# Warmup Iteration  17: 529463.304 ops/s
# Warmup Iteration  18: 514246.908 ops/s
# Warmup Iteration  19: 526294.322 ops/s
# Warmup Iteration  20: 532305.951 ops/s
# Warmup Iteration  21: 507507.335 ops/s
# Warmup Iteration  22: 534133.193 ops/s
# Warmup Iteration  23: 531393.410 ops/s
# Warmup Iteration  24: 509724.656 ops/s
# Warmup Iteration  25: 523935.690 ops/s
# Warmup Iteration  26: 535282.339 ops/s
# Warmup Iteration  27: 517874.086 ops/s
# Warmup Iteration  28: 546913.764 ops/s
# Warmup Iteration  29: 544771.413 ops/s
# Warmup Iteration  30: 505659.847 ops/s
Iteration   1: 537908.206 ops/s
Iteration   2: 509411.740 ops/s
Iteration   3: 521699.708 ops/s
Iteration   4: 537848.944 ops/s
Iteration   5: 506941.470 ops/s
Iteration   6: 551254.474 ops/s
Iteration   7: 552632.073 ops/s
Iteration   8: 497557.117 ops/s
Iteration   9: 531727.265 ops/s
Iteration  10: 513523.157 ops/s
Iteration  11: 539171.221 ops/s
Iteration  12: 509698.783 ops/s
Iteration  13: 516801.375 ops/s
Iteration  14: 538673.218 ops/s
Iteration  15: 521172.066 ops/s
Iteration  16: 515720.554 ops/s
Iteration  17: 521933.367 ops/s
Iteration  18: 531000.844 ops/s
Iteration  19: 501407.685 ops/s
Iteration  20: 526248.821 ops/s
Iteration  21: 539769.599 ops/s
Iteration  22: 520163.103 ops/s
Iteration  23: 507564.148 ops/s
Iteration  24: 530845.816 ops/s
Iteration  25: 506162.952 ops/s
Iteration  26: 512344.409 ops/s
Iteration  27: 501929.998 ops/s
Iteration  28: 530511.718 ops/s
Iteration  29: 529144.141 ops/s
Iteration  30: 520151.647 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableMapOptionalTest._Benchmark.benchmark_mapperChash":
  522697.321 ±(99.9%) 9790.185 ops/s [Average]
  (min, avg, max) = (497557.117, 522697.321, 552632.073), stdev = 14653.489
  CI (99.9%): [512907.136, 532487.506] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score      Error  Units
FlowableMapOptionalTest._Benchmark.benchmark_mapperChash  thrpt   30  522697.321 ± 9790.185  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFilterTest._Benchmark.benchmark_mapCrashesBeforeFilter$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFilterTest._Benchmark.benchmark_mapCrashesBeforeFilter

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 29719.821 ops/s
# Warmup Iteration   2: 129815.157 ops/s
# Warmup Iteration   3: 144483.894 ops/s
# Warmup Iteration   4: 157401.313 ops/s
# Warmup Iteration   5: 163740.595 ops/s
# Warmup Iteration   6: 158808.579 ops/s
# Warmup Iteration   7: 161208.745 ops/s
# Warmup Iteration   8: 160229.414 ops/s
# Warmup Iteration   9: 157267.091 ops/s
# Warmup Iteration  10: 164430.099 ops/s
# Warmup Iteration  11: 156537.134 ops/s
# Warmup Iteration  12: 164407.653 ops/s
# Warmup Iteration  13: 158629.820 ops/s
# Warmup Iteration  14: 161596.405 ops/s
# Warmup Iteration  15: 164061.382 ops/s
# Warmup Iteration  16: 157785.603 ops/s
# Warmup Iteration  17: 168438.989 ops/s
# Warmup Iteration  18: 171287.911 ops/s
# Warmup Iteration  19: 163502.288 ops/s
# Warmup Iteration  20: 167590.753 ops/s
# Warmup Iteration  21: 167399.725 ops/s
# Warmup Iteration  22: 160963.518 ops/s
# Warmup Iteration  23: 172128.668 ops/s
# Warmup Iteration  24: 164329.829 ops/s
# Warmup Iteration  25: 159128.852 ops/s
# Warmup Iteration  26: 171133.565 ops/s
# Warmup Iteration  27: 136258.334 ops/s
# Warmup Iteration  28: 168928.550 ops/s
# Warmup Iteration  29: 171111.248 ops/s
# Warmup Iteration  30: 165607.322 ops/s
Iteration   1: 173747.705 ops/s
Iteration   2: 167011.718 ops/s
Iteration   3: 167525.750 ops/s
Iteration   4: 171698.919 ops/s
Iteration   5: 164564.258 ops/s
Iteration   6: 168097.160 ops/s
Iteration   7: 167425.231 ops/s
Iteration   8: 170029.859 ops/s
Iteration   9: 165742.183 ops/s
Iteration  10: 168783.701 ops/s
Iteration  11: 161908.780 ops/s
Iteration  12: 167093.417 ops/s
Iteration  13: 162901.303 ops/s
Iteration  14: 169431.025 ops/s
Iteration  15: 164007.083 ops/s
Iteration  16: 173177.578 ops/s
Iteration  17: 161107.971 ops/s
Iteration  18: 165441.794 ops/s
Iteration  19: 174852.684 ops/s
Iteration  20: 163428.357 ops/s
Iteration  21: 174806.253 ops/s
Iteration  22: 165582.643 ops/s
Iteration  23: 171252.830 ops/s
Iteration  24: 167164.936 ops/s
Iteration  25: 170587.940 ops/s
Iteration  26: 170290.701 ops/s
Iteration  27: 168170.624 ops/s
Iteration  28: 168577.694 ops/s
Iteration  29: 168671.783 ops/s
Iteration  30: 170761.187 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFilterTest._Benchmark.benchmark_mapCrashesBeforeFilter":
  168128.102 ±(99.9%) 2430.725 ops/s [Average]
  (min, avg, max) = (161107.971, 168128.102, 174852.684), stdev = 3638.196
  CI (99.9%): [165697.377, 170558.828] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
FlowableFilterTest._Benchmark.benchmark_mapCrashesBeforeFilter  thrpt   30  168128.102 ± 2430.725  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayTest._Benchmark.benchmark_createBufferFactoryCrashOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayTest._Benchmark.benchmark_createBufferFactoryCrashOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 204862.553 ops/s
# Warmup Iteration   2: 555085.835 ops/s
# Warmup Iteration   3: 590011.031 ops/s
# Warmup Iteration   4: 622493.507 ops/s
# Warmup Iteration   5: 540875.798 ops/s
# Warmup Iteration   6: 663881.603 ops/s
# Warmup Iteration   7: 657953.361 ops/s
# Warmup Iteration   8: 625514.201 ops/s
# Warmup Iteration   9: 640422.199 ops/s
# Warmup Iteration  10: 641908.237 ops/s
# Warmup Iteration  11: 628157.720 ops/s
# Warmup Iteration  12: 655599.089 ops/s
# Warmup Iteration  13: 644549.282 ops/s
# Warmup Iteration  14: 630611.731 ops/s
# Warmup Iteration  15: 643175.708 ops/s
# Warmup Iteration  16: 630473.431 ops/s
# Warmup Iteration  17: 671845.783 ops/s
# Warmup Iteration  18: 697728.209 ops/s
# Warmup Iteration  19: 663092.332 ops/s
# Warmup Iteration  20: 694466.941 ops/s
# Warmup Iteration  21: 681980.584 ops/s
# Warmup Iteration  22: 656587.658 ops/s
# Warmup Iteration  23: 659459.947 ops/s
# Warmup Iteration  24: 676548.164 ops/s
# Warmup Iteration  25: 680863.262 ops/s
# Warmup Iteration  26: 649094.439 ops/s
# Warmup Iteration  27: 665247.626 ops/s
# Warmup Iteration  28: 689001.741 ops/s
# Warmup Iteration  29: 650888.950 ops/s
# Warmup Iteration  30: 676086.739 ops/s
Iteration   1: 692207.523 ops/s
Iteration   2: 675393.487 ops/s
Iteration   3: 695126.793 ops/s
Iteration   4: 671579.643 ops/s
Iteration   5: 653513.105 ops/s
Iteration   6: 670217.048 ops/s
Iteration   7: 695001.823 ops/s
Iteration   8: 647972.738 ops/s
Iteration   9: 687630.526 ops/s
Iteration  10: 667157.716 ops/s
Iteration  11: 692881.445 ops/s
Iteration  12: 634623.649 ops/s
Iteration  13: 637041.010 ops/s
Iteration  14: 710238.346 ops/s
Iteration  15: 664707.924 ops/s
Iteration  16: 667059.844 ops/s
Iteration  17: 681516.969 ops/s
Iteration  18: 667619.596 ops/s
Iteration  19: 694421.422 ops/s
Iteration  20: 665985.126 ops/s
Iteration  21: 697643.072 ops/s
Iteration  22: 689907.381 ops/s
Iteration  23: 687351.562 ops/s
Iteration  24: 685685.207 ops/s
Iteration  25: 660159.784 ops/s
Iteration  26: 690913.944 ops/s
Iteration  27: 671424.010 ops/s
Iteration  28: 685034.035 ops/s
Iteration  29: 695529.003 ops/s
Iteration  30: 674313.610 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayTest._Benchmark.benchmark_createBufferFactoryCrashOnSubscribe":
  676995.245 ±(99.9%) 12280.152 ops/s [Average]
  (min, avg, max) = (634623.649, 676995.245, 710238.346), stdev = 18380.355
  CI (99.9%): [664715.092, 689275.397] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt       Score       Error  Units
FlowableReplayTest._Benchmark.benchmark_createBufferFactoryCrashOnSubscribe  thrpt   30  676995.245 ± 12280.152  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFilterTest._Benchmark.benchmark_sourceIgnoresCancelConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFilterTest._Benchmark.benchmark_sourceIgnoresCancelConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 30163.339 ops/s
# Warmup Iteration   2: 118011.771 ops/s
# Warmup Iteration   3: 155059.190 ops/s
# Warmup Iteration   4: 147180.797 ops/s
# Warmup Iteration   5: 153703.970 ops/s
# Warmup Iteration   6: 168883.973 ops/s
# Warmup Iteration   7: 141112.036 ops/s
# Warmup Iteration   8: 165836.995 ops/s
# Warmup Iteration   9: 161420.564 ops/s
# Warmup Iteration  10: 162871.422 ops/s
# Warmup Iteration  11: 161582.943 ops/s
# Warmup Iteration  12: 159085.376 ops/s
# Warmup Iteration  13: 165019.322 ops/s
# Warmup Iteration  14: 158949.138 ops/s
# Warmup Iteration  15: 167347.811 ops/s
# Warmup Iteration  16: 162924.316 ops/s
# Warmup Iteration  17: 161148.003 ops/s
# Warmup Iteration  18: 175657.995 ops/s
# Warmup Iteration  19: 163866.064 ops/s
# Warmup Iteration  20: 169713.250 ops/s
# Warmup Iteration  21: 167088.236 ops/s
# Warmup Iteration  22: 135894.244 ops/s
# Warmup Iteration  23: 166487.342 ops/s
# Warmup Iteration  24: 165002.306 ops/s
# Warmup Iteration  25: 169459.724 ops/s
# Warmup Iteration  26: 167298.547 ops/s
# Warmup Iteration  27: 169021.025 ops/s
# Warmup Iteration  28: 169366.880 ops/s
# Warmup Iteration  29: 167360.794 ops/s
# Warmup Iteration  30: 171080.895 ops/s
Iteration   1: 163584.429 ops/s
Iteration   2: 165854.514 ops/s
Iteration   3: 176345.848 ops/s
Iteration   4: 164164.942 ops/s
Iteration   5: 169818.472 ops/s
Iteration   6: 164712.113 ops/s
Iteration   7: 174632.811 ops/s
Iteration   8: 175534.619 ops/s
Iteration   9: 162104.969 ops/s
Iteration  10: 170164.880 ops/s
Iteration  11: 167431.180 ops/s
Iteration  12: 171883.835 ops/s
Iteration  13: 162889.619 ops/s
Iteration  14: 170892.585 ops/s
Iteration  15: 167582.930 ops/s
Iteration  16: 164565.557 ops/s
Iteration  17: 173179.435 ops/s
Iteration  18: 161302.751 ops/s
Iteration  19: 172121.189 ops/s
Iteration  20: 159728.654 ops/s
Iteration  21: 166158.943 ops/s
Iteration  22: 169180.266 ops/s
Iteration  23: 167529.250 ops/s
Iteration  24: 169633.293 ops/s
Iteration  25: 163228.001 ops/s
Iteration  26: 164945.420 ops/s
Iteration  27: 170058.637 ops/s
Iteration  28: 158168.423 ops/s
Iteration  29: 170917.574 ops/s
Iteration  30: 175509.729 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFilterTest._Benchmark.benchmark_sourceIgnoresCancelConditional":
  167794.162 ±(99.9%) 3249.543 ops/s [Average]
  (min, avg, max) = (158168.423, 167794.162, 176345.848), stdev = 4863.763
  CI (99.9%): [164544.620, 171043.705] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score      Error  Units
FlowableFilterTest._Benchmark.benchmark_sourceIgnoresCancelConditional  thrpt   30  167794.162 ± 3249.543  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithFlowableTest._Benchmark.benchmark_windowAbandonmentCancelsUpstream$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithFlowableTest._Benchmark.benchmark_windowAbandonmentCancelsUpstream

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 115703.115 ops/s
# Warmup Iteration   2: 227525.052 ops/s
# Warmup Iteration   3: 429423.341 ops/s
# Warmup Iteration   4: 854071.472 ops/s
# Warmup Iteration   5: 788957.701 ops/s
# Warmup Iteration   6: 856964.065 ops/s
# Warmup Iteration   7: 840864.722 ops/s
# Warmup Iteration   8: 798424.341 ops/s
# Warmup Iteration   9: 870279.779 ops/s
# Warmup Iteration  10: 853170.772 ops/s
# Warmup Iteration  11: 836864.225 ops/s
# Warmup Iteration  12: 882641.084 ops/s
# Warmup Iteration  13: 854422.505 ops/s
# Warmup Iteration  14: 869645.940 ops/s
# Warmup Iteration  15: 885117.388 ops/s
# Warmup Iteration  16: 869762.106 ops/s
# Warmup Iteration  17: 863073.731 ops/s
# Warmup Iteration  18: 870234.607 ops/s
# Warmup Iteration  19: 892623.817 ops/s
# Warmup Iteration  20: 846513.154 ops/s
# Warmup Iteration  21: 894140.394 ops/s
# Warmup Iteration  22: 860535.931 ops/s
# Warmup Iteration  23: 867902.355 ops/s
# Warmup Iteration  24: 849390.297 ops/s
# Warmup Iteration  25: 873301.722 ops/s
# Warmup Iteration  26: 862616.924 ops/s
# Warmup Iteration  27: 865335.614 ops/s
# Warmup Iteration  28: 859638.687 ops/s
# Warmup Iteration  29: 851466.887 ops/s
# Warmup Iteration  30: 853875.895 ops/s
Iteration   1: 866657.215 ops/s
Iteration   2: 835847.165 ops/s
Iteration   3: 868026.284 ops/s
Iteration   4: 849796.793 ops/s
Iteration   5: 894124.449 ops/s
Iteration   6: 866815.565 ops/s
Iteration   7: 834634.044 ops/s
Iteration   8: 869642.318 ops/s
Iteration   9: 836105.520 ops/s
Iteration  10: 877720.010 ops/s
Iteration  11: 865715.805 ops/s
Iteration  12: 860146.213 ops/s
Iteration  13: 911649.572 ops/s
Iteration  14: 851484.478 ops/s
Iteration  15: 863163.090 ops/s
Iteration  16: 873412.590 ops/s
Iteration  17: 864358.964 ops/s
Iteration  18: 859303.679 ops/s
Iteration  19: 893280.994 ops/s
Iteration  20: 866792.589 ops/s
Iteration  21: 870598.974 ops/s
Iteration  22: 867462.891 ops/s
Iteration  23: 892382.895 ops/s
Iteration  24: 854330.452 ops/s
Iteration  25: 865035.745 ops/s
Iteration  26: 891718.305 ops/s
Iteration  27: 833917.344 ops/s
Iteration  28: 887966.696 ops/s
Iteration  29: 855253.231 ops/s
Iteration  30: 845446.155 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithFlowableTest._Benchmark.benchmark_windowAbandonmentCancelsUpstream":
  865759.667 ±(99.9%) 12861.186 ops/s [Average]
  (min, avg, max) = (833917.344, 865759.667, 911649.572), stdev = 19250.019
  CI (99.9%): [852898.481, 878620.854] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              Mode  Cnt       Score       Error  Units
FlowableWindowWithFlowableTest._Benchmark.benchmark_windowAbandonmentCancelsUpstream  thrpt   30  865759.667 ± 12861.186  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapTest._Benchmark.benchmark_mergeScalarError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapTest._Benchmark.benchmark_mergeScalarError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 90110.651 ops/s
# Warmup Iteration   2: 362009.945 ops/s
# Warmup Iteration   3: 501370.493 ops/s
# Warmup Iteration   4: 517548.933 ops/s
# Warmup Iteration   5: 473993.820 ops/s
# Warmup Iteration   6: 476689.708 ops/s
# Warmup Iteration   7: 519167.616 ops/s
# Warmup Iteration   8: 527218.040 ops/s
# Warmup Iteration   9: 519291.901 ops/s
# Warmup Iteration  10: 502567.124 ops/s
# Warmup Iteration  11: 516801.328 ops/s
# Warmup Iteration  12: 503404.081 ops/s
# Warmup Iteration  13: 511078.865 ops/s
# Warmup Iteration  14: 504469.761 ops/s
# Warmup Iteration  15: 516907.182 ops/s
# Warmup Iteration  16: 510849.281 ops/s
# Warmup Iteration  17: 450501.665 ops/s
# Warmup Iteration  18: 528906.529 ops/s
# Warmup Iteration  19: 520958.277 ops/s
# Warmup Iteration  20: 528697.328 ops/s
# Warmup Iteration  21: 536782.776 ops/s
# Warmup Iteration  22: 530225.309 ops/s
# Warmup Iteration  23: 546028.384 ops/s
# Warmup Iteration  24: 525593.562 ops/s
# Warmup Iteration  25: 521175.358 ops/s
# Warmup Iteration  26: 538856.359 ops/s
# Warmup Iteration  27: 527875.130 ops/s
# Warmup Iteration  28: 543123.252 ops/s
# Warmup Iteration  29: 523836.047 ops/s
# Warmup Iteration  30: 559899.085 ops/s
Iteration   1: 524960.083 ops/s
Iteration   2: 532417.061 ops/s
Iteration   3: 517757.477 ops/s
Iteration   4: 544085.196 ops/s
Iteration   5: 534178.099 ops/s
Iteration   6: 533889.642 ops/s
Iteration   7: 530549.097 ops/s
Iteration   8: 547945.164 ops/s
Iteration   9: 547318.678 ops/s
Iteration  10: 523450.320 ops/s
Iteration  11: 534651.612 ops/s
Iteration  12: 543839.744 ops/s
Iteration  13: 529633.216 ops/s
Iteration  14: 532176.371 ops/s
Iteration  15: 550105.323 ops/s
Iteration  16: 515357.496 ops/s
Iteration  17: 544859.413 ops/s
Iteration  18: 525969.768 ops/s
Iteration  19: 558276.471 ops/s
Iteration  20: 502883.826 ops/s
Iteration  21: 539766.849 ops/s
Iteration  22: 561158.395 ops/s
Iteration  23: 497306.608 ops/s
Iteration  24: 536108.428 ops/s
Iteration  25: 511418.749 ops/s
Iteration  26: 540069.021 ops/s
Iteration  27: 547971.992 ops/s
Iteration  28: 532488.677 ops/s
Iteration  29: 546754.266 ops/s
Iteration  30: 527610.096 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapTest._Benchmark.benchmark_mergeScalarError":
  533831.905 ±(99.9%) 9987.064 ops/s [Average]
  (min, avg, max) = (497306.608, 533831.905, 561158.395), stdev = 14948.169
  CI (99.9%): [523844.840, 543818.969] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
ObservableFlatMapTest._Benchmark.benchmark_mergeScalarError  thrpt   30  533831.905 ± 9987.064  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_flatMapNotificationOnCompleteReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_flatMapNotificationOnCompleteReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 189475.755 ops/s
# Warmup Iteration   2: 468977.547 ops/s
# Warmup Iteration   3: 508439.901 ops/s
# Warmup Iteration   4: 482147.753 ops/s
# Warmup Iteration   5: 550003.888 ops/s
# Warmup Iteration   6: 467268.812 ops/s
# Warmup Iteration   7: 534752.243 ops/s
# Warmup Iteration   8: 525352.010 ops/s
# Warmup Iteration   9: 538919.200 ops/s
# Warmup Iteration  10: 547906.115 ops/s
# Warmup Iteration  11: 512273.671 ops/s
# Warmup Iteration  12: 551255.315 ops/s
# Warmup Iteration  13: 536449.231 ops/s
# Warmup Iteration  14: 540128.539 ops/s
# Warmup Iteration  15: 513781.121 ops/s
# Warmup Iteration  16: 526126.506 ops/s
# Warmup Iteration  17: 570796.024 ops/s
# Warmup Iteration  18: 539363.488 ops/s
# Warmup Iteration  19: 558765.473 ops/s
# Warmup Iteration  20: 562888.835 ops/s
# Warmup Iteration  21: 554415.807 ops/s
# Warmup Iteration  22: 567002.967 ops/s
# Warmup Iteration  23: 575990.167 ops/s
# Warmup Iteration  24: 543881.086 ops/s
# Warmup Iteration  25: 566282.611 ops/s
# Warmup Iteration  26: 542342.867 ops/s
# Warmup Iteration  27: 553213.689 ops/s
# Warmup Iteration  28: 578487.078 ops/s
# Warmup Iteration  29: 541842.314 ops/s
# Warmup Iteration  30: 571731.055 ops/s
Iteration   1: 545782.047 ops/s
Iteration   2: 567644.409 ops/s
Iteration   3: 562014.431 ops/s
Iteration   4: 552154.516 ops/s
Iteration   5: 556332.992 ops/s
Iteration   6: 543355.460 ops/s
Iteration   7: 559082.803 ops/s
Iteration   8: 561379.170 ops/s
Iteration   9: 532929.142 ops/s
Iteration  10: 571261.370 ops/s
Iteration  11: 534894.139 ops/s
Iteration  12: 554965.945 ops/s
Iteration  13: 574747.811 ops/s
Iteration  14: 540841.627 ops/s
Iteration  15: 535782.953 ops/s
Iteration  16: 564207.315 ops/s
Iteration  17: 553852.112 ops/s
Iteration  18: 541827.266 ops/s
Iteration  19: 572183.211 ops/s
Iteration  20: 554910.268 ops/s
Iteration  21: 562505.985 ops/s
Iteration  22: 582330.876 ops/s
Iteration  23: 540939.674 ops/s
Iteration  24: 572177.812 ops/s
Iteration  25: 543797.153 ops/s
Iteration  26: 564436.238 ops/s
Iteration  27: 555567.930 ops/s
Iteration  28: 551423.933 ops/s
Iteration  29: 566897.524 ops/s
Iteration  30: 555774.625 ops/s


Result "io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_flatMapNotificationOnCompleteReturnsNull":
  555866.691 ±(99.9%) 8605.048 ops/s [Average]
  (min, avg, max) = (532929.142, 555866.691, 582330.876), stdev = 12879.632
  CI (99.9%): [547261.643, 564471.739] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           Mode  Cnt       Score      Error  Units
ObservableNullTests._Benchmark.benchmark_flatMapNotificationOnCompleteReturnsNull  thrpt   30  555866.691 ± 8605.048  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtTest._Benchmark.benchmark_elementAt$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtTest._Benchmark.benchmark_elementAt

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2602767.145 ops/s
# Warmup Iteration   2: 6938750.350 ops/s
# Warmup Iteration   3: 10870581.100 ops/s
# Warmup Iteration   4: 10679311.378 ops/s
# Warmup Iteration   5: 10832319.293 ops/s
# Warmup Iteration   6: 10811379.683 ops/s
# Warmup Iteration   7: 10512896.018 ops/s
# Warmup Iteration   8: 10475638.675 ops/s
# Warmup Iteration   9: 10917176.744 ops/s
# Warmup Iteration  10: 10446332.935 ops/s
# Warmup Iteration  11: 9956462.099 ops/s
# Warmup Iteration  12: 9637065.552 ops/s
# Warmup Iteration  13: 10838424.377 ops/s
# Warmup Iteration  14: 10738544.462 ops/s
# Warmup Iteration  15: 11174981.913 ops/s
# Warmup Iteration  16: 10308651.773 ops/s
# Warmup Iteration  17: 10883282.143 ops/s
# Warmup Iteration  18: 10811096.367 ops/s
# Warmup Iteration  19: 10568062.292 ops/s
# Warmup Iteration  20: 10648328.867 ops/s
# Warmup Iteration  21: 10416364.420 ops/s
# Warmup Iteration  22: 10573415.710 ops/s
# Warmup Iteration  23: 10948299.866 ops/s
# Warmup Iteration  24: 10267511.099 ops/s
# Warmup Iteration  25: 10752966.137 ops/s
# Warmup Iteration  26: 10483820.558 ops/s
# Warmup Iteration  27: 10739509.889 ops/s
# Warmup Iteration  28: 10523526.022 ops/s
# Warmup Iteration  29: 10807588.649 ops/s
# Warmup Iteration  30: 10430477.200 ops/s
Iteration   1: 10437667.537 ops/s
Iteration   2: 11119293.052 ops/s
Iteration   3: 10257294.361 ops/s
Iteration   4: 10809931.433 ops/s
Iteration   5: 10489959.617 ops/s
Iteration   6: 10699271.290 ops/s
Iteration   7: 10485594.867 ops/s
Iteration   8: 10338614.675 ops/s
Iteration   9: 11228267.158 ops/s
Iteration  10: 10551111.518 ops/s
Iteration  11: 10707482.553 ops/s
Iteration  12: 11006744.404 ops/s
Iteration  13: 10093433.396 ops/s
Iteration  14: 11061159.157 ops/s
Iteration  15: 10329011.450 ops/s
Iteration  16: 10449127.079 ops/s
Iteration  17: 10865390.213 ops/s
Iteration  18: 10509974.553 ops/s
Iteration  19: 11140850.077 ops/s
Iteration  20: 10951797.215 ops/s
Iteration  21: 10408345.077 ops/s
Iteration  22: 10802531.148 ops/s
Iteration  23: 10340628.957 ops/s
Iteration  24: 10439837.796 ops/s
Iteration  25: 10945431.267 ops/s
Iteration  26: 10526057.490 ops/s
Iteration  27: 10830900.366 ops/s
Iteration  28: 10412566.692 ops/s
Iteration  29: 10711419.044 ops/s
Iteration  30: 10371995.765 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtTest._Benchmark.benchmark_elementAt":
  10644056.307 ±(99.9%) 199486.608 ops/s [Average]
  (min, avg, max) = (10093433.396, 10644056.307, 11228267.158), stdev = 298582.187
  CI (99.9%): [10444569.698, 10843542.915] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt         Score        Error  Units
ObservableElementAtTest._Benchmark.benchmark_elementAt  thrpt   30  10644056.307 ± 199486.608  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_delayBothItemSupplierReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_delayBothItemSupplierReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 89423.645 ops/s
# Warmup Iteration   2: 283030.069 ops/s
# Warmup Iteration   3: 371584.517 ops/s
# Warmup Iteration   4: 383892.715 ops/s
# Warmup Iteration   5: 367551.796 ops/s
# Warmup Iteration   6: 352210.572 ops/s
# Warmup Iteration   7: 359468.902 ops/s
# Warmup Iteration   8: 368077.182 ops/s
# Warmup Iteration   9: 365514.304 ops/s
# Warmup Iteration  10: 374537.743 ops/s
# Warmup Iteration  11: 383419.045 ops/s
# Warmup Iteration  12: 370326.339 ops/s
# Warmup Iteration  13: 381608.159 ops/s
# Warmup Iteration  14: 372899.715 ops/s
# Warmup Iteration  15: 381832.899 ops/s
# Warmup Iteration  16: 384490.985 ops/s
# Warmup Iteration  17: 382816.722 ops/s
# Warmup Iteration  18: 409747.270 ops/s
# Warmup Iteration  19: 378340.434 ops/s
# Warmup Iteration  20: 395611.571 ops/s
# Warmup Iteration  21: 381946.768 ops/s
# Warmup Iteration  22: 390260.692 ops/s
# Warmup Iteration  23: 391762.364 ops/s
# Warmup Iteration  24: 376047.868 ops/s
# Warmup Iteration  25: 386837.276 ops/s
# Warmup Iteration  26: 402894.427 ops/s
# Warmup Iteration  27: 384228.105 ops/s
# Warmup Iteration  28: 365187.977 ops/s
# Warmup Iteration  29: 402857.835 ops/s
# Warmup Iteration  30: 383686.393 ops/s
Iteration   1: 394597.295 ops/s
Iteration   2: 389630.643 ops/s
Iteration   3: 390378.650 ops/s
Iteration   4: 400558.749 ops/s
Iteration   5: 392873.069 ops/s
Iteration   6: 394243.575 ops/s
Iteration   7: 376757.963 ops/s
Iteration   8: 403199.775 ops/s
Iteration   9: 377878.899 ops/s
Iteration  10: 387914.745 ops/s
Iteration  11: 395978.209 ops/s
Iteration  12: 380569.174 ops/s
Iteration  13: 405365.073 ops/s
Iteration  14: 372971.387 ops/s
Iteration  15: 387377.151 ops/s
Iteration  16: 404657.115 ops/s
Iteration  17: 376574.816 ops/s
Iteration  18: 400657.173 ops/s
Iteration  19: 407022.637 ops/s
Iteration  20: 380093.031 ops/s
Iteration  21: 391945.864 ops/s
Iteration  22: 398745.381 ops/s
Iteration  23: 382237.893 ops/s
Iteration  24: 379036.092 ops/s
Iteration  25: 388264.497 ops/s
Iteration  26: 402578.215 ops/s
Iteration  27: 385778.394 ops/s
Iteration  28: 388481.448 ops/s
Iteration  29: 387856.477 ops/s
Iteration  30: 391949.910 ops/s


Result "io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_delayBothItemSupplierReturnsNull":
  390539.110 ±(99.9%) 6393.829 ops/s [Average]
  (min, avg, max) = (372971.387, 390539.110, 407022.637), stdev = 9569.982
  CI (99.9%): [384145.281, 396932.939] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score      Error  Units
ObservableNullTests._Benchmark.benchmark_delayBothItemSupplierReturnsNull  thrpt   30  390539.110 ± 6393.829  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatTest._Benchmark.benchmark_concatReportsDisposedOnCompleteDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatTest._Benchmark.benchmark_concatReportsDisposedOnCompleteDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1264828.029 ops/s
# Warmup Iteration   2: 4961586.534 ops/s
# Warmup Iteration   3: 6350558.088 ops/s
# Warmup Iteration   4: 6943592.472 ops/s
# Warmup Iteration   5: 7154760.960 ops/s
# Warmup Iteration   6: 6860999.773 ops/s
# Warmup Iteration   7: 5728890.466 ops/s
# Warmup Iteration   8: 7057415.240 ops/s
# Warmup Iteration   9: 7228465.921 ops/s
# Warmup Iteration  10: 6922099.231 ops/s
# Warmup Iteration  11: 7075484.387 ops/s
# Warmup Iteration  12: 7271765.157 ops/s
# Warmup Iteration  13: 6996215.271 ops/s
# Warmup Iteration  14: 7093375.534 ops/s
# Warmup Iteration  15: 6828450.632 ops/s
# Warmup Iteration  16: 7303859.318 ops/s
# Warmup Iteration  17: 6741374.543 ops/s
# Warmup Iteration  18: 6890090.825 ops/s
# Warmup Iteration  19: 6990195.977 ops/s
# Warmup Iteration  20: 6982706.460 ops/s
# Warmup Iteration  21: 6899462.206 ops/s
# Warmup Iteration  22: 7105245.218 ops/s
# Warmup Iteration  23: 6822999.319 ops/s
# Warmup Iteration  24: 6859306.052 ops/s
# Warmup Iteration  25: 7190127.294 ops/s
# Warmup Iteration  26: 6691877.725 ops/s
# Warmup Iteration  27: 7093223.932 ops/s
# Warmup Iteration  28: 6840491.368 ops/s
# Warmup Iteration  29: 7266483.132 ops/s
# Warmup Iteration  30: 6890416.353 ops/s
Iteration   1: 6846625.490 ops/s
Iteration   2: 6843664.445 ops/s
Iteration   3: 6994700.585 ops/s
Iteration   4: 6714179.435 ops/s
Iteration   5: 6860306.417 ops/s
Iteration   6: 6807179.186 ops/s
Iteration   7: 6909675.567 ops/s
Iteration   8: 6914180.930 ops/s
Iteration   9: 6887352.110 ops/s
Iteration  10: 7292652.803 ops/s
Iteration  11: 6692889.001 ops/s
Iteration  12: 7086289.613 ops/s
Iteration  13: 7070148.938 ops/s
Iteration  14: 6748486.284 ops/s
Iteration  15: 6867700.188 ops/s
Iteration  16: 7353211.122 ops/s
Iteration  17: 6625058.383 ops/s
Iteration  18: 7072671.068 ops/s
Iteration  19: 6742580.411 ops/s
Iteration  20: 7109075.951 ops/s
Iteration  21: 6763481.016 ops/s
Iteration  22: 7008533.549 ops/s
Iteration  23: 7179093.463 ops/s
Iteration  24: 6858774.870 ops/s
Iteration  25: 7081694.038 ops/s
Iteration  26: 6781059.018 ops/s
Iteration  27: 7071166.718 ops/s
Iteration  28: 7104075.544 ops/s
Iteration  29: 6869891.784 ops/s
Iteration  30: 6867875.842 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatTest._Benchmark.benchmark_concatReportsDisposedOnCompleteDelayError":
  6934142.459 ±(99.9%) 118952.499 ops/s [Average]
  (min, avg, max) = (6625058.383, 6934142.459, 7353211.122), stdev = 178042.514
  CI (99.9%): [6815189.960, 7053094.958] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             Mode  Cnt        Score        Error  Units
ObservableConcatTest._Benchmark.benchmark_concatReportsDisposedOnCompleteDelayError  thrpt   30  6934142.459 ± 118952.499  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctTest._Benchmark.benchmark_fusedClear$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctTest._Benchmark.benchmark_fusedClear

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.885 ops/s
# Warmup Iteration   2: 76671.199 ops/s
# Warmup Iteration   3: 191377.281 ops/s
# Warmup Iteration   4: 273676.455 ops/s
# Warmup Iteration   5: 248404.825 ops/s
# Warmup Iteration   6: 640971.438 ops/s
# Warmup Iteration   7: 812093.796 ops/s
# Warmup Iteration   8: 810832.186 ops/s
# Warmup Iteration   9: 849706.425 ops/s
# Warmup Iteration  10: 844419.437 ops/s
# Warmup Iteration  11: 852967.298 ops/s
# Warmup Iteration  12: 838911.370 ops/s
# Warmup Iteration  13: 833831.075 ops/s
# Warmup Iteration  14: 891066.541 ops/s
# Warmup Iteration  15: 855079.815 ops/s
# Warmup Iteration  16: 824207.784 ops/s
# Warmup Iteration  17: 859568.302 ops/s
# Warmup Iteration  18: 862590.841 ops/s
# Warmup Iteration  19: 847254.439 ops/s
# Warmup Iteration  20: 872885.781 ops/s
# Warmup Iteration  21: 811271.424 ops/s
# Warmup Iteration  22: 859728.324 ops/s
# Warmup Iteration  23: 836163.802 ops/s
# Warmup Iteration  24: 850597.417 ops/s
# Warmup Iteration  25: 890228.908 ops/s
# Warmup Iteration  26: 873296.681 ops/s
# Warmup Iteration  27: 856886.598 ops/s
# Warmup Iteration  28: 841476.019 ops/s
# Warmup Iteration  29: 897030.077 ops/s
# Warmup Iteration  30: 842119.515 ops/s
Iteration   1: 839063.272 ops/s
Iteration   2: 835011.098 ops/s
Iteration   3: 835325.317 ops/s
Iteration   4: 861631.100 ops/s
Iteration   5: 854007.946 ops/s
Iteration   6: 841760.340 ops/s
Iteration   7: 859839.120 ops/s
Iteration   8: 840737.963 ops/s
Iteration   9: 838030.206 ops/s
Iteration  10: 833429.888 ops/s
Iteration  11: 846874.959 ops/s
Iteration  12: 863030.167 ops/s
Iteration  13: 822426.221 ops/s
Iteration  14: 879884.608 ops/s
Iteration  15: 831435.077 ops/s
Iteration  16: 850389.731 ops/s
Iteration  17: 856300.602 ops/s
Iteration  18: 842818.042 ops/s
Iteration  19: 882365.544 ops/s
Iteration  20: 823188.149 ops/s
Iteration  21: 817215.944 ops/s
Iteration  22: 877178.329 ops/s
Iteration  23: 863421.979 ops/s
Iteration  24: 854206.196 ops/s
Iteration  25: 840016.584 ops/s
Iteration  26: 875852.943 ops/s
Iteration  27: 831383.633 ops/s
Iteration  28: 850798.598 ops/s
Iteration  29: 834181.910 ops/s
Iteration  30: 853675.197 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctTest._Benchmark.benchmark_fusedClear":
  847849.355 ±(99.9%) 11549.590 ops/s [Average]
  (min, avg, max) = (817215.944, 847849.355, 882365.544), stdev = 17286.884
  CI (99.9%): [836299.765, 859398.946] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score       Error  Units
ObservableDistinctTest._Benchmark.benchmark_fusedClear  thrpt   30  847849.355 ± 11549.590  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableGroupByTest._Benchmark.benchmark_innerEscapeCompleted$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableGroupByTest._Benchmark.benchmark_innerEscapeCompleted

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 41356.001 ops/s
# Warmup Iteration   2: 139255.300 ops/s
# Warmup Iteration   3: 337912.279 ops/s
# Warmup Iteration   4: 809189.616 ops/s
# Warmup Iteration   5: 916979.345 ops/s
# Warmup Iteration   6: 986195.679 ops/s
# Warmup Iteration   7: 980745.629 ops/s
# Warmup Iteration   8: 998418.539 ops/s
# Warmup Iteration   9: 972212.926 ops/s
# Warmup Iteration  10: 963805.483 ops/s
# Warmup Iteration  11: 1015763.931 ops/s
# Warmup Iteration  12: 1056280.516 ops/s
# Warmup Iteration  13: 952845.856 ops/s
# Warmup Iteration  14: 1043382.263 ops/s
# Warmup Iteration  15: 1001783.902 ops/s
# Warmup Iteration  16: 959131.700 ops/s
# Warmup Iteration  17: 1004030.776 ops/s
# Warmup Iteration  18: 999162.854 ops/s
# Warmup Iteration  19: 1014303.755 ops/s
# Warmup Iteration  20: 984572.572 ops/s
# Warmup Iteration  21: 1004298.281 ops/s
# Warmup Iteration  22: 978665.057 ops/s
# Warmup Iteration  23: 1021451.818 ops/s
# Warmup Iteration  24: 970657.059 ops/s
# Warmup Iteration  25: 994400.973 ops/s
# Warmup Iteration  26: 1012295.348 ops/s
# Warmup Iteration  27: 972490.198 ops/s
# Warmup Iteration  28: 1011502.072 ops/s
# Warmup Iteration  29: 983201.483 ops/s
# Warmup Iteration  30: 1008427.004 ops/s
Iteration   1: 981479.580 ops/s
Iteration   2: 981298.300 ops/s
Iteration   3: 1005184.529 ops/s
Iteration   4: 979587.194 ops/s
Iteration   5: 1010917.816 ops/s
Iteration   6: 956728.347 ops/s
Iteration   7: 1036500.293 ops/s
Iteration   8: 988629.905 ops/s
Iteration   9: 989261.877 ops/s
Iteration  10: 985404.475 ops/s
Iteration  11: 994250.156 ops/s
Iteration  12: 983885.738 ops/s
Iteration  13: 1022062.228 ops/s
Iteration  14: 992303.111 ops/s
Iteration  15: 1001016.713 ops/s
Iteration  16: 1007197.831 ops/s
Iteration  17: 987279.538 ops/s
Iteration  18: 990715.825 ops/s
Iteration  19: 959762.077 ops/s
Iteration  20: 1029858.900 ops/s
Iteration  21: 960677.562 ops/s
Iteration  22: 1013274.619 ops/s
Iteration  23: 1026877.628 ops/s
Iteration  24: 970692.229 ops/s
Iteration  25: 1016362.883 ops/s
Iteration  26: 995801.135 ops/s
Iteration  27: 1014116.611 ops/s
Iteration  28: 992376.236 ops/s
Iteration  29: 989524.585 ops/s
Iteration  30: 988025.968 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableGroupByTest._Benchmark.benchmark_innerEscapeCompleted":
  995035.130 ±(99.9%) 13550.004 ops/s [Average]
  (min, avg, max) = (956728.347, 995035.130, 1036500.293), stdev = 20281.009
  CI (99.9%): [981485.126, 1008585.133] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score       Error  Units
ObservableGroupByTest._Benchmark.benchmark_innerEscapeCompleted  thrpt   30  995035.130 ± 13550.004  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapTest._Benchmark.benchmark_undeliverableUponCancel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapTest._Benchmark.benchmark_undeliverableUponCancel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 23031.241 ops/s
# Warmup Iteration   2: 143819.048 ops/s
# Warmup Iteration   3: 175871.890 ops/s
# Warmup Iteration   4: 197492.798 ops/s
# Warmup Iteration   5: 180050.795 ops/s
# Warmup Iteration   6: 213453.958 ops/s
# Warmup Iteration   7: 199367.274 ops/s
# Warmup Iteration   8: 211315.157 ops/s
# Warmup Iteration   9: 202506.848 ops/s
# Warmup Iteration  10: 212067.972 ops/s
# Warmup Iteration  11: 212731.656 ops/s
# Warmup Iteration  12: 217622.923 ops/s
# Warmup Iteration  13: 203207.020 ops/s
# Warmup Iteration  14: 202348.192 ops/s
# Warmup Iteration  15: 209826.263 ops/s
# Warmup Iteration  16: 203370.132 ops/s
# Warmup Iteration  17: 210353.486 ops/s
# Warmup Iteration  18: 206477.306 ops/s
# Warmup Iteration  19: 209986.425 ops/s
# Warmup Iteration  20: 206653.457 ops/s
# Warmup Iteration  21: 208602.508 ops/s
# Warmup Iteration  22: 211085.074 ops/s
# Warmup Iteration  23: 202942.297 ops/s
# Warmup Iteration  24: 209353.329 ops/s
# Warmup Iteration  25: 212866.402 ops/s
# Warmup Iteration  26: 202837.309 ops/s
# Warmup Iteration  27: 215929.153 ops/s
# Warmup Iteration  28: 209009.246 ops/s
# Warmup Iteration  29: 207532.403 ops/s
# Warmup Iteration  30: 217223.135 ops/s
Iteration   1: 205825.323 ops/s
Iteration   2: 212344.230 ops/s
Iteration   3: 201806.403 ops/s
Iteration   4: 219174.029 ops/s
Iteration   5: 205018.302 ops/s
Iteration   6: 210257.691 ops/s
Iteration   7: 214607.166 ops/s
Iteration   8: 202749.262 ops/s
Iteration   9: 215350.051 ops/s
Iteration  10: 208227.021 ops/s
Iteration  11: 208842.307 ops/s
Iteration  12: 219480.518 ops/s
Iteration  13: 204825.685 ops/s
Iteration  14: 199023.441 ops/s
Iteration  15: 208345.749 ops/s
Iteration  16: 214855.172 ops/s
Iteration  17: 209393.099 ops/s
Iteration  18: 212752.030 ops/s
Iteration  19: 207584.047 ops/s
Iteration  20: 214484.639 ops/s
Iteration  21: 206962.194 ops/s
Iteration  22: 211710.712 ops/s
Iteration  23: 209366.502 ops/s
Iteration  24: 213386.260 ops/s
Iteration  25: 209041.913 ops/s
Iteration  26: 207045.601 ops/s
Iteration  27: 212771.067 ops/s
Iteration  28: 170766.090 ops/s
Iteration  29: 205614.714 ops/s
Iteration  30: 218114.976 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapTest._Benchmark.benchmark_undeliverableUponCancel":
  208657.540 ±(99.9%) 5839.009 ops/s [Average]
  (min, avg, max) = (170766.090, 208657.540, 219480.518), stdev = 8739.555
  CI (99.9%): [202818.530, 214496.549] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score      Error  Units
ObservableFlatMapTest._Benchmark.benchmark_undeliverableUponCancel  thrpt   30  208657.540 ± 5839.009  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapTest._Benchmark.benchmark_undeliverableUponCancelDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapTest._Benchmark.benchmark_undeliverableUponCancelDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 39060.188 ops/s
# Warmup Iteration   2: 160210.309 ops/s
# Warmup Iteration   3: 184145.053 ops/s
# Warmup Iteration   4: 193527.274 ops/s
# Warmup Iteration   5: 192082.546 ops/s
# Warmup Iteration   6: 207681.194 ops/s
# Warmup Iteration   7: 217605.805 ops/s
# Warmup Iteration   8: 204602.861 ops/s
# Warmup Iteration   9: 214574.419 ops/s
# Warmup Iteration  10: 205988.266 ops/s
# Warmup Iteration  11: 215286.896 ops/s
# Warmup Iteration  12: 208744.005 ops/s
# Warmup Iteration  13: 216164.644 ops/s
# Warmup Iteration  14: 210937.422 ops/s
# Warmup Iteration  15: 210382.374 ops/s
# Warmup Iteration  16: 208787.380 ops/s
# Warmup Iteration  17: 217825.605 ops/s
# Warmup Iteration  18: 220087.055 ops/s
# Warmup Iteration  19: 212535.915 ops/s
# Warmup Iteration  20: 218091.791 ops/s
# Warmup Iteration  21: 216549.090 ops/s
# Warmup Iteration  22: 218301.312 ops/s
# Warmup Iteration  23: 221150.596 ops/s
# Warmup Iteration  24: 215530.588 ops/s
# Warmup Iteration  25: 214308.741 ops/s
# Warmup Iteration  26: 209884.259 ops/s
# Warmup Iteration  27: 213978.263 ops/s
# Warmup Iteration  28: 220825.202 ops/s
# Warmup Iteration  29: 217194.989 ops/s
# Warmup Iteration  30: 220907.316 ops/s
Iteration   1: 217773.459 ops/s
Iteration   2: 212760.927 ops/s
Iteration   3: 224400.170 ops/s
Iteration   4: 220599.142 ops/s
Iteration   5: 207921.541 ops/s
Iteration   6: 223176.317 ops/s
Iteration   7: 220094.343 ops/s
Iteration   8: 214218.212 ops/s
Iteration   9: 222310.177 ops/s
Iteration  10: 212348.737 ops/s
Iteration  11: 223270.722 ops/s
Iteration  12: 213866.193 ops/s
Iteration  13: 218859.378 ops/s
Iteration  14: 217512.008 ops/s
Iteration  15: 224324.969 ops/s
Iteration  16: 210199.337 ops/s
Iteration  17: 226791.818 ops/s
Iteration  18: 213126.105 ops/s
Iteration  19: 220969.793 ops/s
Iteration  20: 221710.929 ops/s
Iteration  21: 213301.530 ops/s
Iteration  22: 218221.773 ops/s
Iteration  23: 221053.049 ops/s
Iteration  24: 215876.764 ops/s
Iteration  25: 221982.209 ops/s
Iteration  26: 210773.418 ops/s
Iteration  27: 219864.881 ops/s
Iteration  28: 223766.797 ops/s
Iteration  29: 210400.545 ops/s
Iteration  30: 221367.242 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapTest._Benchmark.benchmark_undeliverableUponCancelDelayError":
  218094.749 ±(99.9%) 3403.832 ops/s [Average]
  (min, avg, max) = (207921.541, 218094.749, 226791.818), stdev = 5094.696
  CI (99.9%): [214690.918, 221498.581] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt       Score      Error  Units
ObservableFlatMapTest._Benchmark.benchmark_undeliverableUponCancelDelayError  thrpt   30  218094.749 ± 3403.832  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapTest._Benchmark.benchmark_mergeScalar$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapTest._Benchmark.benchmark_mergeScalar

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 865420.295 ops/s
# Warmup Iteration   2: 4685065.008 ops/s
# Warmup Iteration   3: 5304373.973 ops/s
# Warmup Iteration   4: 5868715.907 ops/s
# Warmup Iteration   5: 6253072.725 ops/s
# Warmup Iteration   6: 6098967.501 ops/s
# Warmup Iteration   7: 6279218.371 ops/s
# Warmup Iteration   8: 5962342.620 ops/s
# Warmup Iteration   9: 6119763.298 ops/s
# Warmup Iteration  10: 5895859.850 ops/s
# Warmup Iteration  11: 5928567.846 ops/s
# Warmup Iteration  12: 6173159.877 ops/s
# Warmup Iteration  13: 5909883.701 ops/s
# Warmup Iteration  14: 6165277.093 ops/s
# Warmup Iteration  15: 5876585.886 ops/s
# Warmup Iteration  16: 6318193.058 ops/s
# Warmup Iteration  17: 6170226.250 ops/s
# Warmup Iteration  18: 6068695.918 ops/s
# Warmup Iteration  19: 5975536.737 ops/s
# Warmup Iteration  20: 6200035.420 ops/s
# Warmup Iteration  21: 5873799.036 ops/s
# Warmup Iteration  22: 6028405.541 ops/s
# Warmup Iteration  23: 6154493.834 ops/s
# Warmup Iteration  24: 6050589.975 ops/s
# Warmup Iteration  25: 6170941.747 ops/s
# Warmup Iteration  26: 6236624.280 ops/s
# Warmup Iteration  27: 6053322.159 ops/s
# Warmup Iteration  28: 6287048.917 ops/s
# Warmup Iteration  29: 6112455.118 ops/s
# Warmup Iteration  30: 6136619.234 ops/s
Iteration   1: 6276669.659 ops/s
Iteration   2: 6026673.091 ops/s
Iteration   3: 6248322.640 ops/s
Iteration   4: 6111910.601 ops/s
Iteration   5: 6056137.758 ops/s
Iteration   6: 6321401.181 ops/s
Iteration   7: 5868453.575 ops/s
Iteration   8: 6480242.940 ops/s
Iteration   9: 6285303.280 ops/s
Iteration  10: 6022544.665 ops/s
Iteration  11: 6198142.282 ops/s
Iteration  12: 6320467.534 ops/s
Iteration  13: 6100535.703 ops/s
Iteration  14: 5923412.025 ops/s
Iteration  15: 6144293.657 ops/s
Iteration  16: 6217649.790 ops/s
Iteration  17: 6293371.117 ops/s
Iteration  18: 6289485.959 ops/s
Iteration  19: 6107268.631 ops/s
Iteration  20: 6250442.414 ops/s
Iteration  21: 5947404.315 ops/s
Iteration  22: 5700908.437 ops/s
Iteration  23: 5478510.336 ops/s
Iteration  24: 6055694.519 ops/s
Iteration  25: 6223978.366 ops/s
Iteration  26: 5959698.773 ops/s
Iteration  27: 6290161.070 ops/s
Iteration  28: 6107781.012 ops/s
Iteration  29: 6248970.971 ops/s
Iteration  30: 5982497.546 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapTest._Benchmark.benchmark_mergeScalar":
  6117944.462 ±(99.9%) 136911.361 ops/s [Average]
  (min, avg, max) = (5478510.336, 6117944.462, 6480242.940), stdev = 204922.496
  CI (99.9%): [5981033.100, 6254855.823] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score        Error  Units
ObservableFlatMapTest._Benchmark.benchmark_mergeScalar  thrpt   30  6117944.462 ± 136911.361  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapTest._Benchmark.benchmark_scalarInnerEmptyDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapTest._Benchmark.benchmark_scalarInnerEmptyDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 190896.720 ops/s
# Warmup Iteration   2: 1568741.783 ops/s
# Warmup Iteration   3: 1868852.464 ops/s
# Warmup Iteration   4: 2206908.247 ops/s
# Warmup Iteration   5: 2294048.962 ops/s
# Warmup Iteration   6: 2222295.438 ops/s
# Warmup Iteration   7: 2222363.132 ops/s
# Warmup Iteration   8: 2168709.781 ops/s
# Warmup Iteration   9: 2254515.120 ops/s
# Warmup Iteration  10: 2247922.366 ops/s
# Warmup Iteration  11: 2194022.434 ops/s
# Warmup Iteration  12: 2207926.905 ops/s
# Warmup Iteration  13: 2301672.189 ops/s
# Warmup Iteration  14: 2147874.947 ops/s
# Warmup Iteration  15: 2241552.674 ops/s
# Warmup Iteration  16: 2220805.451 ops/s
# Warmup Iteration  17: 2203254.115 ops/s
# Warmup Iteration  18: 2201641.561 ops/s
# Warmup Iteration  19: 2142339.180 ops/s
# Warmup Iteration  20: 2210492.631 ops/s
# Warmup Iteration  21: 2127343.211 ops/s
# Warmup Iteration  22: 2186249.251 ops/s
# Warmup Iteration  23: 2244014.106 ops/s
# Warmup Iteration  24: 2205577.424 ops/s
# Warmup Iteration  25: 2154361.118 ops/s
# Warmup Iteration  26: 2294389.606 ops/s
# Warmup Iteration  27: 2167359.273 ops/s
# Warmup Iteration  28: 2194068.523 ops/s
# Warmup Iteration  29: 2328121.439 ops/s
# Warmup Iteration  30: 2187155.152 ops/s
Iteration   1: 2172076.251 ops/s
Iteration   2: 2271471.000 ops/s
Iteration   3: 2107813.349 ops/s
Iteration   4: 2255462.654 ops/s
Iteration   5: 2184859.765 ops/s
Iteration   6: 2224494.970 ops/s
Iteration   7: 2208506.436 ops/s
Iteration   8: 2200268.662 ops/s
Iteration   9: 2276495.981 ops/s
Iteration  10: 2143753.179 ops/s
Iteration  11: 2237550.981 ops/s
Iteration  12: 2175040.119 ops/s
Iteration  13: 2145250.878 ops/s
Iteration  14: 2156294.833 ops/s
Iteration  15: 2193344.496 ops/s
Iteration  16: 2253021.282 ops/s
Iteration  17: 2098494.929 ops/s
Iteration  18: 2216120.425 ops/s
Iteration  19: 2208632.155 ops/s
Iteration  20: 2127956.544 ops/s
Iteration  21: 2288538.582 ops/s
Iteration  22: 2154864.897 ops/s
Iteration  23: 2223413.706 ops/s
Iteration  24: 2125910.022 ops/s
Iteration  25: 2287570.467 ops/s
Iteration  26: 2197060.965 ops/s
Iteration  27: 2172927.889 ops/s
Iteration  28: 2287731.285 ops/s
Iteration  29: 2197034.772 ops/s
Iteration  30: 2153341.864 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapTest._Benchmark.benchmark_scalarInnerEmptyDelayError":
  2198176.778 ±(99.9%) 36617.222 ops/s [Average]
  (min, avg, max) = (2098494.929, 2198176.778, 2288538.582), stdev = 54806.939
  CI (99.9%): [2161559.555, 2234794.000] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score       Error  Units
ObservableConcatMapTest._Benchmark.benchmark_scalarInnerEmptyDelayError  thrpt   30  2198176.778 ± 36617.222  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapTest._Benchmark.benchmark_innerErrorDelayError2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapTest._Benchmark.benchmark_innerErrorDelayError2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 53025.343 ops/s
# Warmup Iteration   2: 361234.919 ops/s
# Warmup Iteration   3: 382439.832 ops/s
# Warmup Iteration   4: 420970.984 ops/s
# Warmup Iteration   5: 385384.883 ops/s
# Warmup Iteration   6: 437723.009 ops/s
# Warmup Iteration   7: 458359.232 ops/s
# Warmup Iteration   8: 443820.340 ops/s
# Warmup Iteration   9: 445608.925 ops/s
# Warmup Iteration  10: 437702.650 ops/s
# Warmup Iteration  11: 452762.873 ops/s
# Warmup Iteration  12: 430028.760 ops/s
# Warmup Iteration  13: 457959.166 ops/s
# Warmup Iteration  14: 434015.554 ops/s
# Warmup Iteration  15: 454204.009 ops/s
# Warmup Iteration  16: 447058.077 ops/s
# Warmup Iteration  17: 451284.553 ops/s
# Warmup Iteration  18: 475534.903 ops/s
# Warmup Iteration  19: 450095.463 ops/s
# Warmup Iteration  20: 473520.343 ops/s
# Warmup Iteration  21: 452954.587 ops/s
# Warmup Iteration  22: 468606.306 ops/s
# Warmup Iteration  23: 474684.483 ops/s
# Warmup Iteration  24: 448911.747 ops/s
# Warmup Iteration  25: 463103.488 ops/s
# Warmup Iteration  26: 452193.770 ops/s
# Warmup Iteration  27: 465543.880 ops/s
# Warmup Iteration  28: 467069.189 ops/s
# Warmup Iteration  29: 476271.289 ops/s
# Warmup Iteration  30: 445760.775 ops/s
Iteration   1: 466933.003 ops/s
Iteration   2: 469154.495 ops/s
Iteration   3: 457155.940 ops/s
Iteration   4: 477204.466 ops/s
Iteration   5: 435466.861 ops/s
Iteration   6: 451955.234 ops/s
Iteration   7: 471950.726 ops/s
Iteration   8: 450172.933 ops/s
Iteration   9: 453275.576 ops/s
Iteration  10: 445352.196 ops/s
Iteration  11: 481737.523 ops/s
Iteration  12: 443224.624 ops/s
Iteration  13: 447251.889 ops/s
Iteration  14: 459844.033 ops/s
Iteration  15: 453129.178 ops/s
Iteration  16: 470528.443 ops/s
Iteration  17: 412101.467 ops/s
Iteration  18: 405035.488 ops/s
Iteration  19: 471383.961 ops/s
Iteration  20: 443001.878 ops/s
Iteration  21: 477928.201 ops/s
Iteration  22: 448311.766 ops/s
Iteration  23: 449701.908 ops/s
Iteration  24: 476259.900 ops/s
Iteration  25: 454580.682 ops/s
Iteration  26: 464928.114 ops/s
Iteration  27: 457051.168 ops/s
Iteration  28: 470307.338 ops/s
Iteration  29: 449397.947 ops/s
Iteration  30: 467061.993 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapTest._Benchmark.benchmark_innerErrorDelayError2":
  456046.298 ±(99.9%) 11835.431 ops/s [Average]
  (min, avg, max) = (405035.488, 456046.298, 481737.523), stdev = 17714.717
  CI (99.9%): [444210.867, 467881.728] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score       Error  Units
ObservableConcatMapTest._Benchmark.benchmark_innerErrorDelayError2  thrpt   30  456046.298 ± 11835.431  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromTest._Benchmark.benchmark_with4Others$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromTest._Benchmark.benchmark_with4Others

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 157265.285 ops/s
# Warmup Iteration   2: 603593.968 ops/s
# Warmup Iteration   3: 1437415.896 ops/s
# Warmup Iteration   4: 1338587.058 ops/s
# Warmup Iteration   5: 1585662.482 ops/s
# Warmup Iteration   6: 1592901.802 ops/s
# Warmup Iteration   7: 1559674.045 ops/s
# Warmup Iteration   8: 1549315.153 ops/s
# Warmup Iteration   9: 1623959.616 ops/s
# Warmup Iteration  10: 1605950.291 ops/s
# Warmup Iteration  11: 1508380.667 ops/s
# Warmup Iteration  12: 1598315.721 ops/s
# Warmup Iteration  13: 1618213.219 ops/s
# Warmup Iteration  14: 1589544.272 ops/s
# Warmup Iteration  15: 1595386.922 ops/s
# Warmup Iteration  16: 1684097.990 ops/s
# Warmup Iteration  17: 1593996.670 ops/s
# Warmup Iteration  18: 1586718.408 ops/s
# Warmup Iteration  19: 1593827.236 ops/s
# Warmup Iteration  20: 1561515.895 ops/s
# Warmup Iteration  21: 1626396.970 ops/s
# Warmup Iteration  22: 1535079.545 ops/s
# Warmup Iteration  23: 1637484.431 ops/s
# Warmup Iteration  24: 1562014.919 ops/s
# Warmup Iteration  25: 1587983.885 ops/s
# Warmup Iteration  26: 1529867.937 ops/s
# Warmup Iteration  27: 1641157.299 ops/s
# Warmup Iteration  28: 1571976.864 ops/s
# Warmup Iteration  29: 1623551.663 ops/s
# Warmup Iteration  30: 1561896.718 ops/s
Iteration   1: 1603819.287 ops/s
Iteration   2: 1579203.156 ops/s
Iteration   3: 1569870.926 ops/s
Iteration   4: 1656595.580 ops/s
Iteration   5: 1538388.225 ops/s
Iteration   6: 1639837.157 ops/s
Iteration   7: 1665392.002 ops/s
Iteration   8: 1560748.442 ops/s
Iteration   9: 1679650.886 ops/s
Iteration  10: 1570428.490 ops/s
Iteration  11: 1636888.671 ops/s
Iteration  12: 1656952.840 ops/s
Iteration  13: 1565884.241 ops/s
Iteration  14: 1577421.257 ops/s
Iteration  15: 1618063.634 ops/s
Iteration  16: 1589195.971 ops/s
Iteration  17: 1573191.350 ops/s
Iteration  18: 1643499.084 ops/s
Iteration  19: 1569424.896 ops/s
Iteration  20: 1658330.145 ops/s
Iteration  21: 1636186.299 ops/s
Iteration  22: 1559667.451 ops/s
Iteration  23: 1662025.762 ops/s
Iteration  24: 1506508.285 ops/s
Iteration  25: 1579410.970 ops/s
Iteration  26: 1605349.617 ops/s
Iteration  27: 1628145.167 ops/s
Iteration  28: 1574395.962 ops/s
Iteration  29: 1543549.149 ops/s
Iteration  30: 1605669.426 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromTest._Benchmark.benchmark_with4Others":
  1601789.811 ±(99.9%) 29670.253 ops/s [Average]
  (min, avg, max) = (1506508.285, 1601789.811, 1679650.886), stdev = 44409.042
  CI (99.9%): [1572119.558, 1631460.064] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
ObservableWithLatestFromTest._Benchmark.benchmark_with4Others  thrpt   30  1601789.811 ± 29670.253  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapTest._Benchmark.benchmark_mapperThrowsDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapTest._Benchmark.benchmark_mapperThrowsDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 68985.750 ops/s
# Warmup Iteration   2: 325303.485 ops/s
# Warmup Iteration   3: 448340.998 ops/s
# Warmup Iteration   4: 461281.654 ops/s
# Warmup Iteration   5: 461800.431 ops/s
# Warmup Iteration   6: 468142.479 ops/s
# Warmup Iteration   7: 469995.509 ops/s
# Warmup Iteration   8: 443919.253 ops/s
# Warmup Iteration   9: 450185.284 ops/s
# Warmup Iteration  10: 456875.891 ops/s
# Warmup Iteration  11: 458289.396 ops/s
# Warmup Iteration  12: 473396.625 ops/s
# Warmup Iteration  13: 468827.661 ops/s
# Warmup Iteration  14: 448839.935 ops/s
# Warmup Iteration  15: 476424.801 ops/s
# Warmup Iteration  16: 439570.492 ops/s
# Warmup Iteration  17: 473316.978 ops/s
# Warmup Iteration  18: 484926.906 ops/s
# Warmup Iteration  19: 457213.895 ops/s
# Warmup Iteration  20: 466218.726 ops/s
# Warmup Iteration  21: 491162.957 ops/s
# Warmup Iteration  22: 449552.236 ops/s
# Warmup Iteration  23: 489157.342 ops/s
# Warmup Iteration  24: 477808.629 ops/s
# Warmup Iteration  25: 464415.666 ops/s
# Warmup Iteration  26: 486284.642 ops/s
# Warmup Iteration  27: 468148.840 ops/s
# Warmup Iteration  28: 466980.941 ops/s
# Warmup Iteration  29: 494335.668 ops/s
# Warmup Iteration  30: 460453.659 ops/s
Iteration   1: 469712.822 ops/s
Iteration   2: 468166.604 ops/s
Iteration   3: 470295.987 ops/s
Iteration   4: 485422.914 ops/s
Iteration   5: 466570.721 ops/s
Iteration   6: 496602.498 ops/s
Iteration   7: 474129.639 ops/s
Iteration   8: 491768.540 ops/s
Iteration   9: 458949.111 ops/s
Iteration  10: 495495.692 ops/s
Iteration  11: 469930.264 ops/s
Iteration  12: 388324.041 ops/s
Iteration  13: 473805.185 ops/s
Iteration  14: 457780.043 ops/s
Iteration  15: 468374.690 ops/s
Iteration  16: 454733.792 ops/s
Iteration  17: 466002.084 ops/s
Iteration  18: 468722.331 ops/s
Iteration  19: 490110.478 ops/s
Iteration  20: 483612.393 ops/s
Iteration  21: 475346.230 ops/s
Iteration  22: 464939.109 ops/s
Iteration  23: 495147.765 ops/s
Iteration  24: 480953.567 ops/s
Iteration  25: 468526.432 ops/s
Iteration  26: 486420.645 ops/s
Iteration  27: 473371.254 ops/s
Iteration  28: 483532.279 ops/s
Iteration  29: 466464.192 ops/s
Iteration  30: 482127.681 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapTest._Benchmark.benchmark_mapperThrowsDelayError":
  472511.299 ±(99.9%) 13097.580 ops/s [Average]
  (min, avg, max) = (388324.041, 472511.299, 496602.498), stdev = 19603.843
  CI (99.9%): [459413.719, 485608.880] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score       Error  Units
ObservableConcatMapTest._Benchmark.benchmark_mapperThrowsDelayError  thrpt   30  472511.299 ± 13097.580  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromTest._Benchmark.benchmark_withMainError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromTest._Benchmark.benchmark_withMainError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 115521.419 ops/s
# Warmup Iteration   2: 407199.039 ops/s
# Warmup Iteration   3: 545851.155 ops/s
# Warmup Iteration   4: 541017.539 ops/s
# Warmup Iteration   5: 521866.218 ops/s
# Warmup Iteration   6: 597752.013 ops/s
# Warmup Iteration   7: 574015.090 ops/s
# Warmup Iteration   8: 612433.949 ops/s
# Warmup Iteration   9: 568891.848 ops/s
# Warmup Iteration  10: 599068.795 ops/s
# Warmup Iteration  11: 585485.656 ops/s
# Warmup Iteration  12: 585838.216 ops/s
# Warmup Iteration  13: 624647.146 ops/s
# Warmup Iteration  14: 567658.174 ops/s
# Warmup Iteration  15: 600823.169 ops/s
# Warmup Iteration  16: 603003.689 ops/s
# Warmup Iteration  17: 597263.346 ops/s
# Warmup Iteration  18: 640721.338 ops/s
# Warmup Iteration  19: 629638.339 ops/s
# Warmup Iteration  20: 598959.979 ops/s
# Warmup Iteration  21: 630153.608 ops/s
# Warmup Iteration  22: 609947.854 ops/s
# Warmup Iteration  23: 618913.810 ops/s
# Warmup Iteration  24: 645858.427 ops/s
# Warmup Iteration  25: 604758.255 ops/s
# Warmup Iteration  26: 607079.749 ops/s
# Warmup Iteration  27: 635407.251 ops/s
# Warmup Iteration  28: 603468.896 ops/s
# Warmup Iteration  29: 631422.462 ops/s
# Warmup Iteration  30: 644351.029 ops/s
Iteration   1: 612166.484 ops/s
Iteration   2: 645974.714 ops/s
Iteration   3: 596173.997 ops/s
Iteration   4: 638984.765 ops/s
Iteration   5: 626064.329 ops/s
Iteration   6: 608022.259 ops/s
Iteration   7: 623483.616 ops/s
Iteration   8: 624718.280 ops/s
Iteration   9: 616684.046 ops/s
Iteration  10: 615759.494 ops/s
Iteration  11: 632877.272 ops/s
Iteration  12: 632795.309 ops/s
Iteration  13: 614581.881 ops/s
Iteration  14: 629589.666 ops/s
Iteration  15: 608388.483 ops/s
Iteration  16: 619329.331 ops/s
Iteration  17: 630728.985 ops/s
Iteration  18: 625230.153 ops/s
Iteration  19: 627816.135 ops/s
Iteration  20: 606714.779 ops/s
Iteration  21: 647560.219 ops/s
Iteration  22: 604009.068 ops/s
Iteration  23: 632629.651 ops/s
Iteration  24: 624085.831 ops/s
Iteration  25: 618108.204 ops/s
Iteration  26: 633601.220 ops/s
Iteration  27: 617142.026 ops/s
Iteration  28: 619666.770 ops/s
Iteration  29: 622647.091 ops/s
Iteration  30: 613723.022 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromTest._Benchmark.benchmark_withMainError":
  622308.569 ±(99.9%) 7991.214 ops/s [Average]
  (min, avg, max) = (596173.997, 622308.569, 647560.219), stdev = 11960.873
  CI (99.9%): [614317.356, 630299.783] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score      Error  Units
ObservableWithLatestFromTest._Benchmark.benchmark_withMainError  thrpt   30  622308.569 ± 7991.214  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapTest._Benchmark.benchmark_asyncFusedDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapTest._Benchmark.benchmark_asyncFusedDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 157315.694 ops/s
# Warmup Iteration   2: 588817.193 ops/s
# Warmup Iteration   3: 1198466.858 ops/s
# Warmup Iteration   4: 1468543.199 ops/s
# Warmup Iteration   5: 1512184.238 ops/s
# Warmup Iteration   6: 1559810.257 ops/s
# Warmup Iteration   7: 1455195.837 ops/s
# Warmup Iteration   8: 1527222.608 ops/s
# Warmup Iteration   9: 1521754.015 ops/s
# Warmup Iteration  10: 1533878.953 ops/s
# Warmup Iteration  11: 1439204.629 ops/s
# Warmup Iteration  12: 1547161.421 ops/s
# Warmup Iteration  13: 1493214.377 ops/s
# Warmup Iteration  14: 1558015.814 ops/s
# Warmup Iteration  15: 1490744.115 ops/s
# Warmup Iteration  16: 1516423.349 ops/s
# Warmup Iteration  17: 1491656.612 ops/s
# Warmup Iteration  18: 1492451.988 ops/s
# Warmup Iteration  19: 1535640.896 ops/s
# Warmup Iteration  20: 1523255.250 ops/s
# Warmup Iteration  21: 1528820.216 ops/s
# Warmup Iteration  22: 1548652.741 ops/s
# Warmup Iteration  23: 1468419.457 ops/s
# Warmup Iteration  24: 1553856.390 ops/s
# Warmup Iteration  25: 1490671.160 ops/s
# Warmup Iteration  26: 1502780.631 ops/s
# Warmup Iteration  27: 1540621.117 ops/s
# Warmup Iteration  28: 1478229.757 ops/s
# Warmup Iteration  29: 1516009.058 ops/s
# Warmup Iteration  30: 1508790.262 ops/s
Iteration   1: 1514088.786 ops/s
Iteration   2: 1564211.233 ops/s
Iteration   3: 1448035.522 ops/s
Iteration   4: 1510537.646 ops/s
Iteration   5: 1526672.205 ops/s
Iteration   6: 1434275.593 ops/s
Iteration   7: 1187922.211 ops/s
Iteration   8: 1509509.107 ops/s
Iteration   9: 1527968.937 ops/s
Iteration  10: 1542589.066 ops/s
Iteration  11: 1469205.142 ops/s
Iteration  12: 1547671.632 ops/s
Iteration  13: 1427061.185 ops/s
Iteration  14: 1525358.556 ops/s
Iteration  15: 1536920.345 ops/s
Iteration  16: 1565486.678 ops/s
Iteration  17: 1480832.246 ops/s
Iteration  18: 1576396.421 ops/s
Iteration  19: 1486413.164 ops/s
Iteration  20: 1460539.996 ops/s
Iteration  21: 1533346.228 ops/s
Iteration  22: 1570848.605 ops/s
Iteration  23: 1475761.910 ops/s
Iteration  24: 1519566.781 ops/s
Iteration  25: 1521769.003 ops/s
Iteration  26: 1511057.808 ops/s
Iteration  27: 1522369.457 ops/s
Iteration  28: 1488080.805 ops/s
Iteration  29: 1545312.101 ops/s
Iteration  30: 1499458.626 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapTest._Benchmark.benchmark_asyncFusedDelayError":
  1500975.566 ±(99.9%) 47306.148 ops/s [Average]
  (min, avg, max) = (1187922.211, 1500975.566, 1576396.421), stdev = 70805.621
  CI (99.9%): [1453669.418, 1548281.715] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
ObservableConcatMapTest._Benchmark.benchmark_asyncFusedDelayError  thrpt   30  1500975.566 ± 47306.148  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableCombineLatestTest._Benchmark.benchmark_cancelWhileSubscribing$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableCombineLatestTest._Benchmark.benchmark_cancelWhileSubscribing

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 218418.323 ops/s
# Warmup Iteration   2: 1039278.157 ops/s
# Warmup Iteration   3: 1487228.446 ops/s
# Warmup Iteration   4: 1669298.944 ops/s
# Warmup Iteration   5: 1768872.704 ops/s
# Warmup Iteration   6: 1665137.799 ops/s
# Warmup Iteration   7: 1639228.918 ops/s
# Warmup Iteration   8: 1758043.045 ops/s
# Warmup Iteration   9: 1739545.819 ops/s
# Warmup Iteration  10: 1737618.164 ops/s
# Warmup Iteration  11: 1679037.855 ops/s
# Warmup Iteration  12: 1726407.842 ops/s
# Warmup Iteration  13: 1601613.760 ops/s
# Warmup Iteration  14: 1697817.969 ops/s
# Warmup Iteration  15: 1702110.909 ops/s
# Warmup Iteration  16: 1737655.716 ops/s
# Warmup Iteration  17: 1686722.025 ops/s
# Warmup Iteration  18: 1730403.325 ops/s
# Warmup Iteration  19: 1696289.410 ops/s
# Warmup Iteration  20: 1741927.003 ops/s
# Warmup Iteration  21: 1639611.552 ops/s
# Warmup Iteration  22: 1689174.858 ops/s
# Warmup Iteration  23: 1738952.783 ops/s
# Warmup Iteration  24: 1643709.591 ops/s
# Warmup Iteration  25: 1705641.057 ops/s
# Warmup Iteration  26: 1718278.218 ops/s
# Warmup Iteration  27: 1691319.765 ops/s
# Warmup Iteration  28: 1758020.462 ops/s
# Warmup Iteration  29: 1669285.914 ops/s
# Warmup Iteration  30: 1699023.130 ops/s
Iteration   1: 1706755.422 ops/s
Iteration   2: 1691122.711 ops/s
Iteration   3: 1705850.981 ops/s
Iteration   4: 1640412.116 ops/s
Iteration   5: 1754482.642 ops/s
Iteration   6: 1649575.995 ops/s
Iteration   7: 1699922.109 ops/s
Iteration   8: 1744491.965 ops/s
Iteration   9: 1641508.573 ops/s
Iteration  10: 1765171.207 ops/s
Iteration  11: 1644803.688 ops/s
Iteration  12: 1732199.667 ops/s
Iteration  13: 1774700.167 ops/s
Iteration  14: 1618208.069 ops/s
Iteration  15: 1677391.491 ops/s
Iteration  16: 1769405.681 ops/s
Iteration  17: 1667598.346 ops/s
Iteration  18: 1783369.028 ops/s
Iteration  19: 1642404.583 ops/s
Iteration  20: 1732191.561 ops/s
Iteration  21: 1647615.512 ops/s
Iteration  22: 1682207.550 ops/s
Iteration  23: 1703083.801 ops/s
Iteration  24: 1727729.471 ops/s
Iteration  25: 1758501.022 ops/s
Iteration  26: 1623584.945 ops/s
Iteration  27: 1771529.373 ops/s
Iteration  28: 1692789.808 ops/s
Iteration  29: 1685419.189 ops/s
Iteration  30: 1716261.130 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableCombineLatestTest._Benchmark.benchmark_cancelWhileSubscribing":
  1701676.260 ±(99.9%) 33189.748 ops/s [Average]
  (min, avg, max) = (1618208.069, 1701676.260, 1783369.028), stdev = 49676.856
  CI (99.9%): [1668486.512, 1734866.008] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score       Error  Units
ObservableCombineLatestTest._Benchmark.benchmark_cancelWhileSubscribing  thrpt   30  1701676.260 ± 33189.748  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_concatMapEmptyDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_concatMapEmptyDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 948132.500 ops/s
# Warmup Iteration   2: 2823330.835 ops/s
# Warmup Iteration   3: 3366368.389 ops/s
# Warmup Iteration   4: 3649807.045 ops/s
# Warmup Iteration   5: 3674464.824 ops/s
# Warmup Iteration   6: 3814256.863 ops/s
# Warmup Iteration   7: 3685206.587 ops/s
# Warmup Iteration   8: 3755673.612 ops/s
# Warmup Iteration   9: 3760658.104 ops/s
# Warmup Iteration  10: 3707614.998 ops/s
# Warmup Iteration  11: 3656410.593 ops/s
# Warmup Iteration  12: 3715858.519 ops/s
# Warmup Iteration  13: 3750131.020 ops/s
# Warmup Iteration  14: 3722505.970 ops/s
# Warmup Iteration  15: 3742109.862 ops/s
# Warmup Iteration  16: 3808544.508 ops/s
# Warmup Iteration  17: 3620644.047 ops/s
# Warmup Iteration  18: 3911524.628 ops/s
# Warmup Iteration  19: 3597042.569 ops/s
# Warmup Iteration  20: 3719604.958 ops/s
# Warmup Iteration  21: 3696149.467 ops/s
# Warmup Iteration  22: 3702158.914 ops/s
# Warmup Iteration  23: 3866188.278 ops/s
# Warmup Iteration  24: 3544008.633 ops/s
# Warmup Iteration  25: 3652571.738 ops/s
# Warmup Iteration  26: 3837796.947 ops/s
# Warmup Iteration  27: 3727920.768 ops/s
# Warmup Iteration  28: 3753391.739 ops/s
# Warmup Iteration  29: 3747068.114 ops/s
# Warmup Iteration  30: 3722088.367 ops/s
Iteration   1: 3069873.973 ops/s
Iteration   2: 3509804.767 ops/s
Iteration   3: 3663519.763 ops/s
Iteration   4: 3721228.055 ops/s
Iteration   5: 3867433.001 ops/s
Iteration   6: 3625591.427 ops/s
Iteration   7: 3664133.054 ops/s
Iteration   8: 3726689.090 ops/s
Iteration   9: 3749321.460 ops/s
Iteration  10: 3779799.932 ops/s
Iteration  11: 3631315.269 ops/s
Iteration  12: 3784106.649 ops/s
Iteration  13: 3725414.919 ops/s
Iteration  14: 3552359.423 ops/s
Iteration  15: 3673845.367 ops/s
Iteration  16: 3809352.904 ops/s
Iteration  17: 3620030.821 ops/s
Iteration  18: 3842176.647 ops/s
Iteration  19: 3708964.458 ops/s
Iteration  20: 3734399.925 ops/s
Iteration  21: 3727374.559 ops/s
Iteration  22: 3650431.541 ops/s
Iteration  23: 3901841.758 ops/s
Iteration  24: 3623871.885 ops/s
Iteration  25: 3823646.937 ops/s
Iteration  26: 3615967.814 ops/s
Iteration  27: 3695830.871 ops/s
Iteration  28: 3728880.973 ops/s
Iteration  29: 3650743.038 ops/s
Iteration  30: 3714817.218 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_concatMapEmptyDelayError":
  3686425.583 ±(99.9%) 98019.234 ops/s [Average]
  (min, avg, max) = (3069873.973, 3686425.583, 3901841.758), stdev = 146710.587
  CI (99.9%): [3588406.349, 3784444.818] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt        Score       Error  Units
ObservableConcatMapSchedulerTest._Benchmark.benchmark_concatMapEmptyDelayError  thrpt   30  3686425.583 ± 98019.234  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_concatMapJustSourceDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_concatMapJustSourceDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 491586.096 ops/s
# Warmup Iteration   2: 2588579.083 ops/s
# Warmup Iteration   3: 2902597.299 ops/s
# Warmup Iteration   4: 3432241.370 ops/s
# Warmup Iteration   5: 3252537.536 ops/s
# Warmup Iteration   6: 3386606.126 ops/s
# Warmup Iteration   7: 3432756.054 ops/s
# Warmup Iteration   8: 3343507.069 ops/s
# Warmup Iteration   9: 3380222.429 ops/s
# Warmup Iteration  10: 3488006.777 ops/s
# Warmup Iteration  11: 3440992.328 ops/s
# Warmup Iteration  12: 3314487.318 ops/s
# Warmup Iteration  13: 3465186.735 ops/s
# Warmup Iteration  14: 3290394.932 ops/s
# Warmup Iteration  15: 3395233.794 ops/s
# Warmup Iteration  16: 3430780.369 ops/s
# Warmup Iteration  17: 3274588.956 ops/s
# Warmup Iteration  18: 3397885.389 ops/s
# Warmup Iteration  19: 3298068.542 ops/s
# Warmup Iteration  20: 3377958.024 ops/s
# Warmup Iteration  21: 3469826.546 ops/s
# Warmup Iteration  22: 3308674.675 ops/s
# Warmup Iteration  23: 3457941.946 ops/s
# Warmup Iteration  24: 3311427.720 ops/s
# Warmup Iteration  25: 3583908.500 ops/s
# Warmup Iteration  26: 3216660.374 ops/s
# Warmup Iteration  27: 3452529.180 ops/s
# Warmup Iteration  28: 3355536.703 ops/s
# Warmup Iteration  29: 3488428.977 ops/s
# Warmup Iteration  30: 3287720.747 ops/s
Iteration   1: 3242617.491 ops/s
Iteration   2: 3545171.252 ops/s
Iteration   3: 3351347.422 ops/s
Iteration   4: 3395022.668 ops/s
Iteration   5: 3503910.621 ops/s
Iteration   6: 3298622.796 ops/s
Iteration   7: 3343596.284 ops/s
Iteration   8: 3336835.928 ops/s
Iteration   9: 3494959.553 ops/s
Iteration  10: 3275761.638 ops/s
Iteration  11: 3336040.613 ops/s
Iteration  12: 3418887.830 ops/s
Iteration  13: 3229057.939 ops/s
Iteration  14: 3454389.937 ops/s
Iteration  15: 3420105.312 ops/s
Iteration  16: 3471593.548 ops/s
Iteration  17: 3316417.952 ops/s
Iteration  18: 3474508.289 ops/s
Iteration  19: 3259882.174 ops/s
Iteration  20: 3351923.358 ops/s
Iteration  21: 3463227.880 ops/s
Iteration  22: 3259077.115 ops/s
Iteration  23: 3413407.027 ops/s
Iteration  24: 3372213.376 ops/s
Iteration  25: 3483483.738 ops/s
Iteration  26: 3285540.079 ops/s
Iteration  27: 3433137.537 ops/s
Iteration  28: 3394816.974 ops/s
Iteration  29: 3336073.845 ops/s
Iteration  30: 3384330.473 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_concatMapJustSourceDelayError":
  3378198.688 ±(99.9%) 57345.945 ops/s [Average]
  (min, avg, max) = (3229057.939, 3378198.688, 3545171.252), stdev = 85832.717
  CI (99.9%): [3320852.744, 3435544.633] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             Mode  Cnt        Score       Error  Units
ObservableConcatMapSchedulerTest._Benchmark.benchmark_concatMapJustSourceDelayError  thrpt   30  3378198.688 ± 57345.945  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatTest._Benchmark.benchmark_noCancelPreviousRepeatWhen$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatTest._Benchmark.benchmark_noCancelPreviousRepeatWhen

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 123848.496 ops/s
# Warmup Iteration   2: 392210.267 ops/s
# Warmup Iteration   3: 697427.619 ops/s
# Warmup Iteration   4: 873721.423 ops/s
# Warmup Iteration   5: 808892.169 ops/s
# Warmup Iteration   6: 947874.333 ops/s
# Warmup Iteration   7: 1013224.206 ops/s
# Warmup Iteration   8: 975811.340 ops/s
# Warmup Iteration   9: 950668.247 ops/s
# Warmup Iteration  10: 1016639.653 ops/s
# Warmup Iteration  11: 920979.123 ops/s
# Warmup Iteration  12: 967147.577 ops/s
# Warmup Iteration  13: 986903.126 ops/s
# Warmup Iteration  14: 928762.884 ops/s
# Warmup Iteration  15: 958119.396 ops/s
# Warmup Iteration  16: 932032.091 ops/s
# Warmup Iteration  17: 949522.441 ops/s
# Warmup Iteration  18: 945123.465 ops/s
# Warmup Iteration  19: 989785.008 ops/s
# Warmup Iteration  20: 973186.129 ops/s
# Warmup Iteration  21: 926803.026 ops/s
# Warmup Iteration  22: 964920.498 ops/s
# Warmup Iteration  23: 955673.450 ops/s
# Warmup Iteration  24: 965149.913 ops/s
# Warmup Iteration  25: 940877.940 ops/s
# Warmup Iteration  26: 814617.324 ops/s
# Warmup Iteration  27: 954654.560 ops/s
# Warmup Iteration  28: 956482.726 ops/s
# Warmup Iteration  29: 995690.875 ops/s
# Warmup Iteration  30: 958003.908 ops/s
Iteration   1: 918971.899 ops/s
Iteration   2: 963418.323 ops/s
Iteration   3: 938528.985 ops/s
Iteration   4: 991279.813 ops/s
Iteration   5: 955880.604 ops/s
Iteration   6: 963057.741 ops/s
Iteration   7: 977944.226 ops/s
Iteration   8: 950462.486 ops/s
Iteration   9: 977532.851 ops/s
Iteration  10: 928569.069 ops/s
Iteration  11: 995597.429 ops/s
Iteration  12: 952673.998 ops/s
Iteration  13: 957329.213 ops/s
Iteration  14: 947591.729 ops/s
Iteration  15: 929120.973 ops/s
Iteration  16: 993714.724 ops/s
Iteration  17: 897416.793 ops/s
Iteration  18: 968360.217 ops/s
Iteration  19: 913980.097 ops/s
Iteration  20: 995067.947 ops/s
Iteration  21: 941608.420 ops/s
Iteration  22: 959275.163 ops/s
Iteration  23: 987236.094 ops/s
Iteration  24: 938880.667 ops/s
Iteration  25: 982793.374 ops/s
Iteration  26: 943174.978 ops/s
Iteration  27: 983890.431 ops/s
Iteration  28: 960290.136 ops/s
Iteration  29: 946248.260 ops/s
Iteration  30: 950744.179 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatTest._Benchmark.benchmark_noCancelPreviousRepeatWhen":
  957021.361 ±(99.9%) 16958.419 ops/s [Average]
  (min, avg, max) = (897416.793, 957021.361, 995597.429), stdev = 25382.566
  CI (99.9%): [940062.941, 973979.780] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score       Error  Units
ObservableRepeatTest._Benchmark.benchmark_noCancelPreviousRepeatWhen  thrpt   30  957021.361 ± 16958.419  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_innerError2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_innerError2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 57057.034 ops/s
# Warmup Iteration   2: 276070.630 ops/s
# Warmup Iteration   3: 423619.527 ops/s
# Warmup Iteration   4: 428723.966 ops/s
# Warmup Iteration   5: 452006.307 ops/s
# Warmup Iteration   6: 419513.489 ops/s
# Warmup Iteration   7: 432491.111 ops/s
# Warmup Iteration   8: 422829.415 ops/s
# Warmup Iteration   9: 439157.199 ops/s
# Warmup Iteration  10: 435377.335 ops/s
# Warmup Iteration  11: 401439.812 ops/s
# Warmup Iteration  12: 424832.264 ops/s
# Warmup Iteration  13: 434082.023 ops/s
# Warmup Iteration  14: 423424.985 ops/s
# Warmup Iteration  15: 415633.620 ops/s
# Warmup Iteration  16: 409660.725 ops/s
# Warmup Iteration  17: 458683.706 ops/s
# Warmup Iteration  18: 437472.155 ops/s
# Warmup Iteration  19: 464469.961 ops/s
# Warmup Iteration  20: 440980.320 ops/s
# Warmup Iteration  21: 471234.910 ops/s
# Warmup Iteration  22: 443972.643 ops/s
# Warmup Iteration  23: 443854.643 ops/s
# Warmup Iteration  24: 448988.508 ops/s
# Warmup Iteration  25: 440870.095 ops/s
# Warmup Iteration  26: 437862.170 ops/s
# Warmup Iteration  27: 445760.065 ops/s
# Warmup Iteration  28: 457642.872 ops/s
# Warmup Iteration  29: 457182.578 ops/s
# Warmup Iteration  30: 444658.215 ops/s
Iteration   1: 458990.505 ops/s
Iteration   2: 453948.708 ops/s
Iteration   3: 445664.554 ops/s
Iteration   4: 456150.547 ops/s
Iteration   5: 459912.661 ops/s
Iteration   6: 439977.314 ops/s
Iteration   7: 449378.462 ops/s
Iteration   8: 445785.184 ops/s
Iteration   9: 451350.577 ops/s
Iteration  10: 465348.335 ops/s
Iteration  11: 441208.888 ops/s
Iteration  12: 443052.239 ops/s
Iteration  13: 447084.866 ops/s
Iteration  14: 460054.101 ops/s
Iteration  15: 449947.553 ops/s
Iteration  16: 444874.123 ops/s
Iteration  17: 450036.451 ops/s
Iteration  18: 455555.048 ops/s
Iteration  19: 446427.557 ops/s
Iteration  20: 461274.354 ops/s
Iteration  21: 435477.674 ops/s
Iteration  22: 465080.280 ops/s
Iteration  23: 440454.315 ops/s
Iteration  24: 464285.203 ops/s
Iteration  25: 438451.966 ops/s
Iteration  26: 457247.521 ops/s
Iteration  27: 466499.601 ops/s
Iteration  28: 430354.220 ops/s
Iteration  29: 451296.951 ops/s
Iteration  30: 458370.453 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_innerError2":
  451118.007 ±(99.9%) 6388.205 ops/s [Average]
  (min, avg, max) = (430354.220, 451118.007, 466499.601), stdev = 9561.565
  CI (99.9%): [444729.802, 457506.212] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
ObservableConcatMapEagerTest._Benchmark.benchmark_innerError2  thrpt   30  451118.007 ± 6388.205  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapTest._Benchmark.benchmark_badInnerDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapTest._Benchmark.benchmark_badInnerDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 28809.646 ops/s
# Warmup Iteration   2: 101651.614 ops/s
# Warmup Iteration   3: 197014.748 ops/s
# Warmup Iteration   4: 209511.447 ops/s
# Warmup Iteration   5: 229206.668 ops/s
# Warmup Iteration   6: 229329.355 ops/s
# Warmup Iteration   7: 225790.604 ops/s
# Warmup Iteration   8: 236292.032 ops/s
# Warmup Iteration   9: 243049.773 ops/s
# Warmup Iteration  10: 234649.786 ops/s
# Warmup Iteration  11: 227633.467 ops/s
# Warmup Iteration  12: 237827.142 ops/s
# Warmup Iteration  13: 233152.276 ops/s
# Warmup Iteration  14: 237439.269 ops/s
# Warmup Iteration  15: 232753.386 ops/s
# Warmup Iteration  16: 229063.504 ops/s
# Warmup Iteration  17: 241108.868 ops/s
# Warmup Iteration  18: 237911.354 ops/s
# Warmup Iteration  19: 237570.801 ops/s
# Warmup Iteration  20: 220194.358 ops/s
# Warmup Iteration  21: 214309.048 ops/s
# Warmup Iteration  22: 231151.846 ops/s
# Warmup Iteration  23: 242328.516 ops/s
# Warmup Iteration  24: 239456.068 ops/s
# Warmup Iteration  25: 233783.389 ops/s
# Warmup Iteration  26: 242021.485 ops/s
# Warmup Iteration  27: 236622.738 ops/s
# Warmup Iteration  28: 242388.666 ops/s
# Warmup Iteration  29: 250097.995 ops/s
# Warmup Iteration  30: 245893.993 ops/s
Iteration   1: 234606.715 ops/s
Iteration   2: 247305.229 ops/s
Iteration   3: 238824.247 ops/s
Iteration   4: 244662.069 ops/s
Iteration   5: 238453.841 ops/s
Iteration   6: 235518.277 ops/s
Iteration   7: 248970.308 ops/s
Iteration   8: 245586.325 ops/s
Iteration   9: 240446.570 ops/s
Iteration  10: 240419.327 ops/s
Iteration  11: 239457.762 ops/s
Iteration  12: 249295.690 ops/s
Iteration  13: 243388.600 ops/s
Iteration  14: 236413.956 ops/s
Iteration  15: 255385.619 ops/s
Iteration  16: 231004.517 ops/s
Iteration  17: 242997.440 ops/s
Iteration  18: 241162.679 ops/s
Iteration  19: 237792.613 ops/s
Iteration  20: 241947.684 ops/s
Iteration  21: 238131.942 ops/s
Iteration  22: 243751.756 ops/s
Iteration  23: 244478.840 ops/s
Iteration  24: 245372.940 ops/s
Iteration  25: 236726.798 ops/s
Iteration  26: 248135.492 ops/s
Iteration  27: 231347.657 ops/s
Iteration  28: 238680.900 ops/s
Iteration  29: 242580.852 ops/s
Iteration  30: 242321.935 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapTest._Benchmark.benchmark_badInnerDelayError":
  241505.619 ±(99.9%) 3620.976 ops/s [Average]
  (min, avg, max) = (231004.517, 241505.619, 255385.619), stdev = 5419.707
  CI (99.9%): [237884.643, 245126.595] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score      Error  Units
ObservableConcatMapTest._Benchmark.benchmark_badInnerDelayError  thrpt   30  241505.619 ± 3620.976  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybeTest._Benchmark.benchmark_simple$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybeTest._Benchmark.benchmark_simple

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 187844.011 ops/s
# Warmup Iteration   2: 1120821.873 ops/s
# Warmup Iteration   3: 1473163.318 ops/s
# Warmup Iteration   4: 1431019.827 ops/s
# Warmup Iteration   5: 1377939.680 ops/s
# Warmup Iteration   6: 1337560.433 ops/s
# Warmup Iteration   7: 1439851.660 ops/s
# Warmup Iteration   8: 1501467.399 ops/s
# Warmup Iteration   9: 1428946.665 ops/s
# Warmup Iteration  10: 1478568.585 ops/s
# Warmup Iteration  11: 1470518.780 ops/s
# Warmup Iteration  12: 1468832.664 ops/s
# Warmup Iteration  13: 1505788.040 ops/s
# Warmup Iteration  14: 1451985.245 ops/s
# Warmup Iteration  15: 1444580.631 ops/s
# Warmup Iteration  16: 1549658.496 ops/s
# Warmup Iteration  17: 1428310.122 ops/s
# Warmup Iteration  18: 1476751.569 ops/s
# Warmup Iteration  19: 1416776.788 ops/s
# Warmup Iteration  20: 1429712.551 ops/s
# Warmup Iteration  21: 1514697.262 ops/s
# Warmup Iteration  22: 1467441.923 ops/s
# Warmup Iteration  23: 1489488.507 ops/s
# Warmup Iteration  24: 1469811.645 ops/s
# Warmup Iteration  25: 1440412.342 ops/s
# Warmup Iteration  26: 1559309.558 ops/s
# Warmup Iteration  27: 1372653.072 ops/s
# Warmup Iteration  28: 1467993.293 ops/s
# Warmup Iteration  29: 1511116.631 ops/s
# Warmup Iteration  30: 1465511.855 ops/s
Iteration   1: 1475771.275 ops/s
Iteration   2: 1508765.538 ops/s
Iteration   3: 1525767.558 ops/s
Iteration   4: 1498879.094 ops/s
Iteration   5: 1505386.625 ops/s
Iteration   6: 1433593.958 ops/s
Iteration   7: 1519637.703 ops/s
Iteration   8: 1487386.223 ops/s
Iteration   9: 1472630.312 ops/s
Iteration  10: 1501503.445 ops/s
Iteration  11: 1462403.207 ops/s
Iteration  12: 1491012.440 ops/s
Iteration  13: 1503581.127 ops/s
Iteration  14: 1488718.877 ops/s
Iteration  15: 1488565.200 ops/s
Iteration  16: 1418177.781 ops/s
Iteration  17: 1509900.838 ops/s
Iteration  18: 1440301.139 ops/s
Iteration  19: 1489554.045 ops/s
Iteration  20: 1516279.507 ops/s
Iteration  21: 1473579.482 ops/s
Iteration  22: 1491149.132 ops/s
Iteration  23: 1445649.633 ops/s
Iteration  24: 1523107.047 ops/s
Iteration  25: 1498961.388 ops/s
Iteration  26: 1432126.684 ops/s
Iteration  27: 1512787.360 ops/s
Iteration  28: 1518357.110 ops/s
Iteration  29: 1443131.527 ops/s
Iteration  30: 1504194.145 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybeTest._Benchmark.benchmark_simple":
  1486028.647 ±(99.9%) 20130.898 ops/s [Average]
  (min, avg, max) = (1418177.781, 1486028.647, 1525767.558), stdev = 30130.982
  CI (99.9%): [1465897.749, 1506159.544] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
ObservableConcatMapMaybeTest._Benchmark.benchmark_simple  thrpt   30  1486028.647 ± 20130.898  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybeTest._Benchmark.benchmark_basicSyncFused$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybeTest._Benchmark.benchmark_basicSyncFused

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 257425.146 ops/s
# Warmup Iteration   2: 1165596.335 ops/s
# Warmup Iteration   3: 1185859.291 ops/s
# Warmup Iteration   4: 1496582.777 ops/s
# Warmup Iteration   5: 1392185.473 ops/s
# Warmup Iteration   6: 1240356.093 ops/s
# Warmup Iteration   7: 1535282.611 ops/s
# Warmup Iteration   8: 1367382.935 ops/s
# Warmup Iteration   9: 1479817.229 ops/s
# Warmup Iteration  10: 1487191.992 ops/s
# Warmup Iteration  11: 1468525.814 ops/s
# Warmup Iteration  12: 1433055.725 ops/s
# Warmup Iteration  13: 1460375.660 ops/s
# Warmup Iteration  14: 1423931.484 ops/s
# Warmup Iteration  15: 1209784.689 ops/s
# Warmup Iteration  16: 1455361.043 ops/s
# Warmup Iteration  17: 1388283.045 ops/s
# Warmup Iteration  18: 1401426.452 ops/s
# Warmup Iteration  19: 1383081.165 ops/s
# Warmup Iteration  20: 1372059.854 ops/s
# Warmup Iteration  21: 1329500.186 ops/s
# Warmup Iteration  22: 1414229.083 ops/s
# Warmup Iteration  23: 1459773.483 ops/s
# Warmup Iteration  24: 1385809.320 ops/s
# Warmup Iteration  25: 1385171.343 ops/s
# Warmup Iteration  26: 1386125.352 ops/s
# Warmup Iteration  27: 1408566.378 ops/s
# Warmup Iteration  28: 1391172.343 ops/s
# Warmup Iteration  29: 1386592.845 ops/s
# Warmup Iteration  30: 1437608.254 ops/s
Iteration   1: 1338822.907 ops/s
Iteration   2: 1430656.251 ops/s
Iteration   3: 1380441.104 ops/s
Iteration   4: 1426280.292 ops/s
Iteration   5: 1384976.991 ops/s
Iteration   6: 1439978.591 ops/s
Iteration   7: 1477984.472 ops/s
Iteration   8: 1391708.870 ops/s
Iteration   9: 1383984.163 ops/s
Iteration  10: 1461302.559 ops/s
Iteration  11: 1422836.685 ops/s
Iteration  12: 1433051.958 ops/s
Iteration  13: 1380391.215 ops/s
Iteration  14: 1408581.661 ops/s
Iteration  15: 1356645.984 ops/s
Iteration  16: 1384074.243 ops/s
Iteration  17: 1442032.247 ops/s
Iteration  18: 1339482.026 ops/s
Iteration  19: 1428515.682 ops/s
Iteration  20: 1377723.386 ops/s
Iteration  21: 1440570.232 ops/s
Iteration  22: 1383649.348 ops/s
Iteration  23: 1417613.912 ops/s
Iteration  24: 1416953.514 ops/s
Iteration  25: 1367671.723 ops/s
Iteration  26: 1422451.496 ops/s
Iteration  27: 1350191.992 ops/s
Iteration  28: 1397182.987 ops/s
Iteration  29: 1374352.147 ops/s
Iteration  30: 1390838.936 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybeTest._Benchmark.benchmark_basicSyncFused":
  1401698.252 ±(99.9%) 23504.563 ops/s [Average]
  (min, avg, max) = (1338822.907, 1401698.252, 1477984.472), stdev = 35180.527
  CI (99.9%): [1378193.689, 1425202.816] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
ObservableConcatMapMaybeTest._Benchmark.benchmark_basicSyncFused  thrpt   30  1401698.252 ± 23504.563  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybeTest._Benchmark.benchmark_mixed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybeTest._Benchmark.benchmark_mixed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 230682.580 ops/s
# Warmup Iteration   2: 751215.067 ops/s
# Warmup Iteration   3: 861738.832 ops/s
# Warmup Iteration   4: 745801.735 ops/s
# Warmup Iteration   5: 856938.868 ops/s
# Warmup Iteration   6: 813846.537 ops/s
# Warmup Iteration   7: 880248.186 ops/s
# Warmup Iteration   8: 928315.392 ops/s
# Warmup Iteration   9: 888614.355 ops/s
# Warmup Iteration  10: 912413.142 ops/s
# Warmup Iteration  11: 908879.455 ops/s
# Warmup Iteration  12: 846462.054 ops/s
# Warmup Iteration  13: 943154.424 ops/s
# Warmup Iteration  14: 864023.052 ops/s
# Warmup Iteration  15: 908999.382 ops/s
# Warmup Iteration  16: 915734.313 ops/s
# Warmup Iteration  17: 868742.113 ops/s
# Warmup Iteration  18: 897685.897 ops/s
# Warmup Iteration  19: 885764.163 ops/s
# Warmup Iteration  20: 889148.226 ops/s
# Warmup Iteration  21: 904471.469 ops/s
# Warmup Iteration  22: 869623.417 ops/s
# Warmup Iteration  23: 904032.733 ops/s
# Warmup Iteration  24: 893839.730 ops/s
# Warmup Iteration  25: 869801.934 ops/s
# Warmup Iteration  26: 903065.157 ops/s
# Warmup Iteration  27: 854721.090 ops/s
# Warmup Iteration  28: 897428.587 ops/s
# Warmup Iteration  29: 878122.466 ops/s
# Warmup Iteration  30: 880004.217 ops/s
Iteration   1: 921051.732 ops/s
Iteration   2: 875841.454 ops/s
Iteration   3: 904015.673 ops/s
Iteration   4: 870065.715 ops/s
Iteration   5: 862436.797 ops/s
Iteration   6: 909968.796 ops/s
Iteration   7: 872027.364 ops/s
Iteration   8: 900751.181 ops/s
Iteration   9: 899646.110 ops/s
Iteration  10: 836339.578 ops/s
Iteration  11: 903129.989 ops/s
Iteration  12: 861165.977 ops/s
Iteration  13: 907655.592 ops/s
Iteration  14: 901458.651 ops/s
Iteration  15: 884735.797 ops/s
Iteration  16: 888204.178 ops/s
Iteration  17: 871081.811 ops/s
Iteration  18: 929060.682 ops/s
Iteration  19: 849132.507 ops/s
Iteration  20: 920719.139 ops/s
Iteration  21: 910795.229 ops/s
Iteration  22: 878160.802 ops/s
Iteration  23: 906241.514 ops/s
Iteration  24: 857312.262 ops/s
Iteration  25: 884009.741 ops/s
Iteration  26: 878246.202 ops/s
Iteration  27: 864802.280 ops/s
Iteration  28: 888204.973 ops/s
Iteration  29: 878669.302 ops/s
Iteration  30: 897786.651 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybeTest._Benchmark.benchmark_mixed":
  887090.589 ±(99.9%) 15172.252 ops/s [Average]
  (min, avg, max) = (836339.578, 887090.589, 929060.682), stdev = 22709.115
  CI (99.9%): [871918.337, 902262.842] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score       Error  Units
ObservableConcatMapMaybeTest._Benchmark.benchmark_mixed  thrpt   30  887090.589 ± 15172.252  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybeTest._Benchmark.benchmark_checkUnboundedInnerQueue$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybeTest._Benchmark.benchmark_checkUnboundedInnerQueue

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 204094.639 ops/s
# Warmup Iteration   2: 780288.623 ops/s
# Warmup Iteration   3: 1288463.023 ops/s
# Warmup Iteration   4: 1320409.369 ops/s
# Warmup Iteration   5: 1344921.948 ops/s
# Warmup Iteration   6: 1141166.284 ops/s
# Warmup Iteration   7: 1266246.965 ops/s
# Warmup Iteration   8: 1297290.252 ops/s
# Warmup Iteration   9: 1352677.677 ops/s
# Warmup Iteration  10: 1072814.660 ops/s
# Warmup Iteration  11: 1247930.194 ops/s
# Warmup Iteration  12: 1337756.343 ops/s
# Warmup Iteration  13: 1361178.846 ops/s
# Warmup Iteration  14: 1281877.442 ops/s
# Warmup Iteration  15: 1387706.393 ops/s
# Warmup Iteration  16: 1339311.133 ops/s
# Warmup Iteration  17: 1296275.104 ops/s
# Warmup Iteration  18: 1320854.050 ops/s
# Warmup Iteration  19: 1348085.771 ops/s
# Warmup Iteration  20: 1315803.354 ops/s
# Warmup Iteration  21: 1370342.380 ops/s
# Warmup Iteration  22: 1359515.708 ops/s
# Warmup Iteration  23: 1282914.535 ops/s
# Warmup Iteration  24: 1360399.596 ops/s
# Warmup Iteration  25: 1271599.909 ops/s
# Warmup Iteration  26: 1344008.092 ops/s
# Warmup Iteration  27: 1279490.383 ops/s
# Warmup Iteration  28: 1288689.147 ops/s
# Warmup Iteration  29: 1366831.649 ops/s
# Warmup Iteration  30: 1303584.999 ops/s
Iteration   1: 1336861.273 ops/s
Iteration   2: 1326300.278 ops/s
Iteration   3: 1315018.144 ops/s
Iteration   4: 1360528.652 ops/s
Iteration   5: 1286039.463 ops/s
Iteration   6: 1348955.846 ops/s
Iteration   7: 1283810.989 ops/s
Iteration   8: 1373049.073 ops/s
Iteration   9: 1342938.911 ops/s
Iteration  10: 1303244.089 ops/s
Iteration  11: 1335883.251 ops/s
Iteration  12: 1255776.040 ops/s
Iteration  13: 1351128.420 ops/s
Iteration  14: 1358646.856 ops/s
Iteration  15: 1282575.605 ops/s
Iteration  16: 1278830.019 ops/s
Iteration  17: 1364313.037 ops/s
Iteration  18: 1291026.050 ops/s
Iteration  19: 1337589.207 ops/s
Iteration  20: 1271127.996 ops/s
Iteration  21: 1340289.685 ops/s
Iteration  22: 1289205.719 ops/s
Iteration  23: 1338567.762 ops/s
Iteration  24: 1340620.136 ops/s
Iteration  25: 1305095.018 ops/s
Iteration  26: 1350491.398 ops/s
Iteration  27: 1304123.564 ops/s
Iteration  28: 1260078.756 ops/s
Iteration  29: 1341468.575 ops/s
Iteration  30: 1296129.728 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybeTest._Benchmark.benchmark_checkUnboundedInnerQueue":
  1318990.451 ±(99.9%) 22357.464 ops/s [Average]
  (min, avg, max) = (1255776.040, 1318990.451, 1373049.073), stdev = 33463.602
  CI (99.9%): [1296632.987, 1341347.915] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score       Error  Units
ObservableConcatMapMaybeTest._Benchmark.benchmark_checkUnboundedInnerQueue  thrpt   30  1318990.451 ± 22357.464  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybeTest._Benchmark.benchmark_empty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybeTest._Benchmark.benchmark_empty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 555666.677 ops/s
# Warmup Iteration   2: 1080048.811 ops/s
# Warmup Iteration   3: 1209326.791 ops/s
# Warmup Iteration   4: 1217955.650 ops/s
# Warmup Iteration   5: 1224506.056 ops/s
# Warmup Iteration   6: 1218804.596 ops/s
# Warmup Iteration   7: 1268404.323 ops/s
# Warmup Iteration   8: 1231533.336 ops/s
# Warmup Iteration   9: 1233839.604 ops/s
# Warmup Iteration  10: 1215441.979 ops/s
# Warmup Iteration  11: 1245017.841 ops/s
# Warmup Iteration  12: 1217281.020 ops/s
# Warmup Iteration  13: 1201626.183 ops/s
# Warmup Iteration  14: 1229697.969 ops/s
# Warmup Iteration  15: 1187797.129 ops/s
# Warmup Iteration  16: 1208936.167 ops/s
# Warmup Iteration  17: 1257175.809 ops/s
# Warmup Iteration  18: 1258830.222 ops/s
# Warmup Iteration  19: 1291186.840 ops/s
# Warmup Iteration  20: 1290881.994 ops/s
# Warmup Iteration  21: 1300588.886 ops/s
# Warmup Iteration  22: 1259118.194 ops/s
# Warmup Iteration  23: 1334499.951 ops/s
# Warmup Iteration  24: 1256634.619 ops/s
# Warmup Iteration  25: 1305268.051 ops/s
# Warmup Iteration  26: 1302082.997 ops/s
# Warmup Iteration  27: 1290337.750 ops/s
# Warmup Iteration  28: 1271509.609 ops/s
# Warmup Iteration  29: 1349733.213 ops/s
# Warmup Iteration  30: 1231457.409 ops/s
Iteration   1: 1338820.536 ops/s
Iteration   2: 1231882.656 ops/s
Iteration   3: 1283407.346 ops/s
Iteration   4: 1253909.952 ops/s
Iteration   5: 1288983.466 ops/s
Iteration   6: 1297944.585 ops/s
Iteration   7: 1242729.259 ops/s
Iteration   8: 1333841.201 ops/s
Iteration   9: 1350945.964 ops/s
Iteration  10: 1233098.127 ops/s
Iteration  11: 1314571.262 ops/s
Iteration  12: 1264181.530 ops/s
Iteration  13: 1324762.335 ops/s
Iteration  14: 1266502.959 ops/s
Iteration  15: 1309378.288 ops/s
Iteration  16: 1297040.557 ops/s
Iteration  17: 1349434.181 ops/s
Iteration  18: 1294184.857 ops/s
Iteration  19: 1321705.030 ops/s
Iteration  20: 1225975.528 ops/s
Iteration  21: 1312435.566 ops/s
Iteration  22: 1353398.133 ops/s
Iteration  23: 1335384.435 ops/s
Iteration  24: 1265779.535 ops/s
Iteration  25: 1278121.692 ops/s
Iteration  26: 1302102.652 ops/s
Iteration  27: 1272235.321 ops/s
Iteration  28: 1228820.042 ops/s
Iteration  29: 1313484.687 ops/s
Iteration  30: 1301206.707 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybeTest._Benchmark.benchmark_empty":
  1292875.613 ±(99.9%) 25526.887 ops/s [Average]
  (min, avg, max) = (1225975.528, 1292875.613, 1353398.133), stdev = 38207.446
  CI (99.9%): [1267348.726, 1318402.500] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
ObservableConcatMapMaybeTest._Benchmark.benchmark_empty  thrpt   30  1292875.613 ± 25526.887  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybeTest._Benchmark.benchmark_take$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybeTest._Benchmark.benchmark_take

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 210811.840 ops/s
# Warmup Iteration   2: 1238294.148 ops/s
# Warmup Iteration   3: 1433877.255 ops/s
# Warmup Iteration   4: 1247807.214 ops/s
# Warmup Iteration   5: 1534375.986 ops/s
# Warmup Iteration   6: 1601739.328 ops/s
# Warmup Iteration   7: 1692173.378 ops/s
# Warmup Iteration   8: 1625478.052 ops/s
# Warmup Iteration   9: 1639916.084 ops/s
# Warmup Iteration  10: 1694223.731 ops/s
# Warmup Iteration  11: 1650335.600 ops/s
# Warmup Iteration  12: 1676549.990 ops/s
# Warmup Iteration  13: 1703121.430 ops/s
# Warmup Iteration  14: 1623748.731 ops/s
# Warmup Iteration  15: 1716937.152 ops/s
# Warmup Iteration  16: 1635809.121 ops/s
# Warmup Iteration  17: 1655037.169 ops/s
# Warmup Iteration  18: 1709507.566 ops/s
# Warmup Iteration  19: 1619788.545 ops/s
# Warmup Iteration  20: 1668358.704 ops/s
# Warmup Iteration  21: 1742621.740 ops/s
# Warmup Iteration  22: 1651932.124 ops/s
# Warmup Iteration  23: 1643593.399 ops/s
# Warmup Iteration  24: 1711394.445 ops/s
# Warmup Iteration  25: 1636114.264 ops/s
# Warmup Iteration  26: 1679120.177 ops/s
# Warmup Iteration  27: 1695130.312 ops/s
# Warmup Iteration  28: 1725786.585 ops/s
# Warmup Iteration  29: 1729048.083 ops/s
# Warmup Iteration  30: 1648860.407 ops/s
Iteration   1: 1745942.280 ops/s
Iteration   2: 1636699.113 ops/s
Iteration   3: 1641196.366 ops/s
Iteration   4: 1713087.230 ops/s
Iteration   5: 1720854.497 ops/s
Iteration   6: 1675872.709 ops/s
Iteration   7: 1668454.012 ops/s
Iteration   8: 1753428.092 ops/s
Iteration   9: 1647025.263 ops/s
Iteration  10: 1710530.043 ops/s
Iteration  11: 1756668.218 ops/s
Iteration  12: 1595273.808 ops/s
Iteration  13: 1743311.098 ops/s
Iteration  14: 1653841.221 ops/s
Iteration  15: 1667007.344 ops/s
Iteration  16: 1669812.918 ops/s
Iteration  17: 1756807.492 ops/s
Iteration  18: 1627810.428 ops/s
Iteration  19: 1713441.141 ops/s
Iteration  20: 1673802.753 ops/s
Iteration  21: 1732424.956 ops/s
Iteration  22: 1678041.171 ops/s
Iteration  23: 1707473.852 ops/s
Iteration  24: 1648723.228 ops/s
Iteration  25: 1668220.848 ops/s
Iteration  26: 1704727.424 ops/s
Iteration  27: 1639297.934 ops/s
Iteration  28: 1720845.514 ops/s
Iteration  29: 1610670.147 ops/s
Iteration  30: 1740450.824 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybeTest._Benchmark.benchmark_take":
  1687391.398 ±(99.9%) 30701.713 ops/s [Average]
  (min, avg, max) = (1595273.808, 1687391.398, 1756807.492), stdev = 45952.883
  CI (99.9%): [1656689.684, 1718093.111] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
ObservableConcatMapMaybeTest._Benchmark.benchmark_take  thrpt   30  1687391.398 ± 30701.713  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybeTest._Benchmark.benchmark_basicNonFused$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybeTest._Benchmark.benchmark_basicNonFused

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 159323.336 ops/s
# Warmup Iteration   2: 695308.797 ops/s
# Warmup Iteration   3: 958685.368 ops/s
# Warmup Iteration   4: 1040217.797 ops/s
# Warmup Iteration   5: 1012919.074 ops/s
# Warmup Iteration   6: 1071167.835 ops/s
# Warmup Iteration   7: 1025988.375 ops/s
# Warmup Iteration   8: 1048150.020 ops/s
# Warmup Iteration   9: 1033848.691 ops/s
# Warmup Iteration  10: 1016797.810 ops/s
# Warmup Iteration  11: 1012320.835 ops/s
# Warmup Iteration  12: 1025362.485 ops/s
# Warmup Iteration  13: 1011916.370 ops/s
# Warmup Iteration  14: 1070279.092 ops/s
# Warmup Iteration  15: 1075345.203 ops/s
# Warmup Iteration  16: 991772.496 ops/s
# Warmup Iteration  17: 1000771.618 ops/s
# Warmup Iteration  18: 1024932.684 ops/s
# Warmup Iteration  19: 975045.201 ops/s
# Warmup Iteration  20: 1048632.186 ops/s
# Warmup Iteration  21: 988656.767 ops/s
# Warmup Iteration  22: 1086441.569 ops/s
# Warmup Iteration  23: 988474.820 ops/s
# Warmup Iteration  24: 1041418.784 ops/s
# Warmup Iteration  25: 1025755.587 ops/s
# Warmup Iteration  26: 1020777.191 ops/s
# Warmup Iteration  27: 1042128.849 ops/s
# Warmup Iteration  28: 1040589.785 ops/s
# Warmup Iteration  29: 1042292.675 ops/s
# Warmup Iteration  30: 1074631.766 ops/s
Iteration   1: 1025187.519 ops/s
Iteration   2: 1048982.651 ops/s
Iteration   3: 1081886.931 ops/s
Iteration   4: 1020152.518 ops/s
Iteration   5: 1012452.297 ops/s
Iteration   6: 1044417.292 ops/s
Iteration   7: 1015699.575 ops/s
Iteration   8: 1061886.889 ops/s
Iteration   9: 1066483.060 ops/s
Iteration  10: 1013259.931 ops/s
Iteration  11: 1032174.294 ops/s
Iteration  12: 1037067.429 ops/s
Iteration  13: 1050621.813 ops/s
Iteration  14: 1016069.987 ops/s
Iteration  15: 1005667.395 ops/s
Iteration  16: 1090251.047 ops/s
Iteration  17: 1016489.523 ops/s
Iteration  18: 1050455.206 ops/s
Iteration  19: 1048887.191 ops/s
Iteration  20: 1043944.633 ops/s
Iteration  21: 1038635.910 ops/s
Iteration  22: 1042771.872 ops/s
Iteration  23: 1059525.515 ops/s
Iteration  24: 1017928.749 ops/s
Iteration  25: 1077030.577 ops/s
Iteration  26: 1043726.386 ops/s
Iteration  27: 1040098.721 ops/s
Iteration  28: 1037922.462 ops/s
Iteration  29: 1054674.653 ops/s
Iteration  30: 1085239.986 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybeTest._Benchmark.benchmark_basicNonFused":
  1042653.067 ±(99.9%) 15319.395 ops/s [Average]
  (min, avg, max) = (1005667.395, 1042653.067, 1090251.047), stdev = 22929.352
  CI (99.9%): [1027333.672, 1057972.463] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
ObservableConcatMapMaybeTest._Benchmark.benchmark_basicNonFused  thrpt   30  1042653.067 ± 15319.395  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybeTest._Benchmark.benchmark_disposeBeforeSwitchInOnNext$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybeTest._Benchmark.benchmark_disposeBeforeSwitchInOnNext

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1702204.970 ops/s
# Warmup Iteration   2: 5152325.272 ops/s
# Warmup Iteration   3: 7686598.851 ops/s
# Warmup Iteration   4: 7767401.376 ops/s
# Warmup Iteration   5: 7723665.682 ops/s
# Warmup Iteration   6: 7634523.583 ops/s
# Warmup Iteration   7: 7907404.700 ops/s
# Warmup Iteration   8: 7541107.210 ops/s
# Warmup Iteration   9: 7940208.838 ops/s
# Warmup Iteration  10: 7942783.042 ops/s
# Warmup Iteration  11: 7702214.118 ops/s
# Warmup Iteration  12: 7518813.584 ops/s
# Warmup Iteration  13: 7948578.591 ops/s
# Warmup Iteration  14: 7321306.762 ops/s
# Warmup Iteration  15: 7899157.065 ops/s
# Warmup Iteration  16: 7518440.373 ops/s
# Warmup Iteration  17: 7595407.010 ops/s
# Warmup Iteration  18: 7566767.115 ops/s
# Warmup Iteration  19: 7643383.148 ops/s
# Warmup Iteration  20: 7653139.750 ops/s
# Warmup Iteration  21: 7541726.497 ops/s
# Warmup Iteration  22: 7708067.161 ops/s
# Warmup Iteration  23: 7786928.987 ops/s
# Warmup Iteration  24: 7739863.501 ops/s
# Warmup Iteration  25: 7888741.115 ops/s
# Warmup Iteration  26: 7660500.578 ops/s
# Warmup Iteration  27: 7434772.087 ops/s
# Warmup Iteration  28: 7723847.507 ops/s
# Warmup Iteration  29: 7662263.455 ops/s
# Warmup Iteration  30: 7727773.667 ops/s
Iteration   1: 8027025.019 ops/s
Iteration   2: 7710614.806 ops/s
Iteration   3: 7544629.273 ops/s
Iteration   4: 7964457.037 ops/s
Iteration   5: 7517573.037 ops/s
Iteration   6: 7676766.031 ops/s
Iteration   7: 7855931.697 ops/s
Iteration   8: 7673850.256 ops/s
Iteration   9: 7852056.073 ops/s
Iteration  10: 7531527.679 ops/s
Iteration  11: 7987634.079 ops/s
Iteration  12: 7312872.074 ops/s
Iteration  13: 7924499.609 ops/s
Iteration  14: 7668094.342 ops/s
Iteration  15: 7533687.648 ops/s
Iteration  16: 7740691.123 ops/s
Iteration  17: 7973666.164 ops/s
Iteration  18: 7649306.525 ops/s
Iteration  19: 7898783.295 ops/s
Iteration  20: 7491723.617 ops/s
Iteration  21: 7887379.416 ops/s
Iteration  22: 7578157.379 ops/s
Iteration  23: 7838797.111 ops/s
Iteration  24: 7438733.823 ops/s
Iteration  25: 7637222.430 ops/s
Iteration  26: 7719322.458 ops/s
Iteration  27: 7307739.244 ops/s
Iteration  28: 7802098.900 ops/s
Iteration  29: 7629819.340 ops/s
Iteration  30: 7646704.600 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybeTest._Benchmark.benchmark_disposeBeforeSwitchInOnNext":
  7700712.136 ±(99.9%) 130061.088 ops/s [Average]
  (min, avg, max) = (7307739.244, 7700712.136, 8027025.019), stdev = 194669.328
  CI (99.9%): [7570651.048, 7830773.224] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt        Score        Error  Units
ObservableSwitchMapMaybeTest._Benchmark.benchmark_disposeBeforeSwitchInOnNext  thrpt   30  7700712.136 ± 130061.088  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybeTest._Benchmark.benchmark_basicAsyncFused$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybeTest._Benchmark.benchmark_basicAsyncFused

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 97779.130 ops/s
# Warmup Iteration   2: 430719.085 ops/s
# Warmup Iteration   3: 803680.835 ops/s
# Warmup Iteration   4: 922540.856 ops/s
# Warmup Iteration   5: 903622.524 ops/s
# Warmup Iteration   6: 922563.392 ops/s
# Warmup Iteration   7: 898567.180 ops/s
# Warmup Iteration   8: 902451.284 ops/s
# Warmup Iteration   9: 951961.827 ops/s
# Warmup Iteration  10: 913923.555 ops/s
# Warmup Iteration  11: 915224.846 ops/s
# Warmup Iteration  12: 885881.061 ops/s
# Warmup Iteration  13: 915419.487 ops/s
# Warmup Iteration  14: 894634.022 ops/s
# Warmup Iteration  15: 893313.471 ops/s
# Warmup Iteration  16: 930699.157 ops/s
# Warmup Iteration  17: 828519.405 ops/s
# Warmup Iteration  18: 958710.663 ops/s
# Warmup Iteration  19: 870340.318 ops/s
# Warmup Iteration  20: 877366.879 ops/s
# Warmup Iteration  21: 942230.855 ops/s
# Warmup Iteration  22: 873095.216 ops/s
# Warmup Iteration  23: 923350.265 ops/s
# Warmup Iteration  24: 914278.112 ops/s
# Warmup Iteration  25: 877250.648 ops/s
# Warmup Iteration  26: 872419.553 ops/s
# Warmup Iteration  27: 873797.279 ops/s
# Warmup Iteration  28: 930864.332 ops/s
# Warmup Iteration  29: 929040.347 ops/s
# Warmup Iteration  30: 887903.507 ops/s
Iteration   1: 928653.929 ops/s
Iteration   2: 883499.980 ops/s
Iteration   3: 939200.577 ops/s
Iteration   4: 901768.224 ops/s
Iteration   5: 862299.022 ops/s
Iteration   6: 922857.928 ops/s
Iteration   7: 882918.498 ops/s
Iteration   8: 929668.994 ops/s
Iteration   9: 865682.799 ops/s
Iteration  10: 925409.796 ops/s
Iteration  11: 870421.390 ops/s
Iteration  12: 869635.341 ops/s
Iteration  13: 917595.194 ops/s
Iteration  14: 901970.361 ops/s
Iteration  15: 874445.079 ops/s
Iteration  16: 901063.247 ops/s
Iteration  17: 942706.864 ops/s
Iteration  18: 904192.694 ops/s
Iteration  19: 905773.599 ops/s
Iteration  20: 898382.955 ops/s
Iteration  21: 918501.698 ops/s
Iteration  22: 916095.653 ops/s
Iteration  23: 864350.283 ops/s
Iteration  24: 926125.014 ops/s
Iteration  25: 789932.536 ops/s
Iteration  26: 840812.845 ops/s
Iteration  27: 893009.596 ops/s
Iteration  28: 911938.234 ops/s
Iteration  29: 930371.191 ops/s
Iteration  30: 883496.374 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybeTest._Benchmark.benchmark_basicAsyncFused":
  896759.330 ±(99.9%) 22004.804 ops/s [Average]
  (min, avg, max) = (789932.536, 896759.330, 942706.864), stdev = 32935.756
  CI (99.9%): [874754.526, 918764.133] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score       Error  Units
ObservableConcatMapMaybeTest._Benchmark.benchmark_basicAsyncFused  thrpt   30  896759.330 ± 22004.804  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybeTest._Benchmark.benchmark_fusedPollCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybeTest._Benchmark.benchmark_fusedPollCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 36030.081 ops/s
# Warmup Iteration   2: 314577.386 ops/s
# Warmup Iteration   3: 352436.641 ops/s
# Warmup Iteration   4: 355510.821 ops/s
# Warmup Iteration   5: 336683.754 ops/s
# Warmup Iteration   6: 380699.315 ops/s
# Warmup Iteration   7: 389882.606 ops/s
# Warmup Iteration   8: 391570.364 ops/s
# Warmup Iteration   9: 386813.942 ops/s
# Warmup Iteration  10: 382614.472 ops/s
# Warmup Iteration  11: 396199.391 ops/s
# Warmup Iteration  12: 380055.546 ops/s
# Warmup Iteration  13: 398296.990 ops/s
# Warmup Iteration  14: 383538.771 ops/s
# Warmup Iteration  15: 399415.620 ops/s
# Warmup Iteration  16: 404427.471 ops/s
# Warmup Iteration  17: 400997.011 ops/s
# Warmup Iteration  18: 419873.534 ops/s
# Warmup Iteration  19: 411852.370 ops/s
# Warmup Iteration  20: 387878.244 ops/s
# Warmup Iteration  21: 419335.618 ops/s
# Warmup Iteration  22: 404014.138 ops/s
# Warmup Iteration  23: 408403.167 ops/s
# Warmup Iteration  24: 412091.138 ops/s
# Warmup Iteration  25: 400987.555 ops/s
# Warmup Iteration  26: 417280.580 ops/s
# Warmup Iteration  27: 415874.675 ops/s
# Warmup Iteration  28: 391824.371 ops/s
# Warmup Iteration  29: 413552.169 ops/s
# Warmup Iteration  30: 399330.941 ops/s
Iteration   1: 400576.764 ops/s
Iteration   2: 403169.036 ops/s
Iteration   3: 388673.005 ops/s
Iteration   4: 423390.558 ops/s
Iteration   5: 403932.433 ops/s
Iteration   6: 392924.582 ops/s
Iteration   7: 399435.030 ops/s
Iteration   8: 401662.023 ops/s
Iteration   9: 395400.431 ops/s
Iteration  10: 420976.228 ops/s
Iteration  11: 402086.168 ops/s
Iteration  12: 387233.283 ops/s
Iteration  13: 417188.094 ops/s
Iteration  14: 413555.744 ops/s
Iteration  15: 384793.728 ops/s
Iteration  16: 415057.449 ops/s
Iteration  17: 401843.006 ops/s
Iteration  18: 405211.969 ops/s
Iteration  19: 383665.422 ops/s
Iteration  20: 405608.281 ops/s
Iteration  21: 393116.345 ops/s
Iteration  22: 409241.616 ops/s
Iteration  23: 399126.708 ops/s
Iteration  24: 400580.777 ops/s
Iteration  25: 397489.202 ops/s
Iteration  26: 393312.920 ops/s
Iteration  27: 408198.923 ops/s
Iteration  28: 397562.336 ops/s
Iteration  29: 391074.943 ops/s
Iteration  30: 410008.696 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybeTest._Benchmark.benchmark_fusedPollCrash":
  401536.523 ±(99.9%) 6813.397 ops/s [Average]
  (min, avg, max) = (383665.422, 401536.523, 423390.558), stdev = 10197.973
  CI (99.9%): [394723.126, 408349.921] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
ObservableConcatMapMaybeTest._Benchmark.benchmark_fusedPollCrash  thrpt   30  401536.523 ± 6813.397  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybeTest._Benchmark.benchmark_cancel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybeTest._Benchmark.benchmark_cancel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 69355.946 ops/s
# Warmup Iteration   2: 270657.672 ops/s
# Warmup Iteration   3: 654765.983 ops/s
# Warmup Iteration   4: 659597.181 ops/s
# Warmup Iteration   5: 816159.911 ops/s
# Warmup Iteration   6: 744459.261 ops/s
# Warmup Iteration   7: 762905.569 ops/s
# Warmup Iteration   8: 820227.920 ops/s
# Warmup Iteration   9: 796415.624 ops/s
# Warmup Iteration  10: 808794.255 ops/s
# Warmup Iteration  11: 831752.575 ops/s
# Warmup Iteration  12: 793570.133 ops/s
# Warmup Iteration  13: 841850.191 ops/s
# Warmup Iteration  14: 801087.985 ops/s
# Warmup Iteration  15: 813123.098 ops/s
# Warmup Iteration  16: 797590.255 ops/s
# Warmup Iteration  17: 760114.678 ops/s
# Warmup Iteration  18: 827501.084 ops/s
# Warmup Iteration  19: 785313.175 ops/s
# Warmup Iteration  20: 816404.610 ops/s
# Warmup Iteration  21: 779024.136 ops/s
# Warmup Iteration  22: 816578.366 ops/s
# Warmup Iteration  23: 807528.455 ops/s
# Warmup Iteration  24: 783609.039 ops/s
# Warmup Iteration  25: 828217.583 ops/s
# Warmup Iteration  26: 792186.472 ops/s
# Warmup Iteration  27: 792384.685 ops/s
# Warmup Iteration  28: 809107.441 ops/s
# Warmup Iteration  29: 810439.787 ops/s
# Warmup Iteration  30: 785362.716 ops/s
Iteration   1: 858134.399 ops/s
Iteration   2: 799315.864 ops/s
Iteration   3: 831428.924 ops/s
Iteration   4: 781134.977 ops/s
Iteration   5: 812704.600 ops/s
Iteration   6: 844561.534 ops/s
Iteration   7: 778322.757 ops/s
Iteration   8: 800753.191 ops/s
Iteration   9: 786334.250 ops/s
Iteration  10: 803714.206 ops/s
Iteration  11: 823819.174 ops/s
Iteration  12: 783731.844 ops/s
Iteration  13: 832903.072 ops/s
Iteration  14: 786837.250 ops/s
Iteration  15: 814661.703 ops/s
Iteration  16: 804165.561 ops/s
Iteration  17: 799015.516 ops/s
Iteration  18: 831620.848 ops/s
Iteration  19: 779334.766 ops/s
Iteration  20: 696688.766 ops/s
Iteration  21: 789083.689 ops/s
Iteration  22: 798627.063 ops/s
Iteration  23: 822204.739 ops/s
Iteration  24: 795972.906 ops/s
Iteration  25: 776627.982 ops/s
Iteration  26: 796029.132 ops/s
Iteration  27: 818166.993 ops/s
Iteration  28: 781610.310 ops/s
Iteration  29: 842473.392 ops/s
Iteration  30: 783562.894 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybeTest._Benchmark.benchmark_cancel":
  801784.743 ±(99.9%) 19928.776 ops/s [Average]
  (min, avg, max) = (696688.766, 801784.743, 858134.399), stdev = 29828.457
  CI (99.9%): [781855.967, 821713.520] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score       Error  Units
ObservableConcatMapMaybeTest._Benchmark.benchmark_cancel  thrpt   30  801784.743 ± 19928.776  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybeTest._Benchmark.benchmark_mainBoundaryErrorInnerSuccess$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybeTest._Benchmark.benchmark_mainBoundaryErrorInnerSuccess

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 24550.445 ops/s
# Warmup Iteration   2: 139678.005 ops/s
# Warmup Iteration   3: 486239.515 ops/s
# Warmup Iteration   4: 450568.665 ops/s
# Warmup Iteration   5: 513857.670 ops/s
# Warmup Iteration   6: 460083.618 ops/s
# Warmup Iteration   7: 472597.842 ops/s
# Warmup Iteration   8: 527033.273 ops/s
# Warmup Iteration   9: 500743.239 ops/s
# Warmup Iteration  10: 519307.483 ops/s
# Warmup Iteration  11: 499504.622 ops/s
# Warmup Iteration  12: 513774.314 ops/s
# Warmup Iteration  13: 512299.992 ops/s
# Warmup Iteration  14: 522280.876 ops/s
# Warmup Iteration  15: 508780.164 ops/s
# Warmup Iteration  16: 498993.355 ops/s
# Warmup Iteration  17: 541629.416 ops/s
# Warmup Iteration  18: 505236.317 ops/s
# Warmup Iteration  19: 551606.421 ops/s
# Warmup Iteration  20: 527943.703 ops/s
# Warmup Iteration  21: 546697.192 ops/s
# Warmup Iteration  22: 530574.399 ops/s
# Warmup Iteration  23: 539405.440 ops/s
# Warmup Iteration  24: 542253.709 ops/s
# Warmup Iteration  25: 525100.796 ops/s
# Warmup Iteration  26: 524749.464 ops/s
# Warmup Iteration  27: 544930.298 ops/s
# Warmup Iteration  28: 524517.242 ops/s
# Warmup Iteration  29: 539660.615 ops/s
# Warmup Iteration  30: 525822.060 ops/s
Iteration   1: 533232.130 ops/s
Iteration   2: 537561.309 ops/s
Iteration   3: 514017.733 ops/s
Iteration   4: 548878.656 ops/s
Iteration   5: 475253.900 ops/s
Iteration   6: 568790.810 ops/s
Iteration   7: 529818.515 ops/s
Iteration   8: 529866.993 ops/s
Iteration   9: 551980.564 ops/s
Iteration  10: 526111.352 ops/s
Iteration  11: 535385.498 ops/s
Iteration  12: 538478.538 ops/s
Iteration  13: 540189.604 ops/s
Iteration  14: 533111.520 ops/s
Iteration  15: 530805.537 ops/s
Iteration  16: 558030.451 ops/s
Iteration  17: 520008.231 ops/s
Iteration  18: 537780.766 ops/s
Iteration  19: 533272.103 ops/s
Iteration  20: 544752.358 ops/s
Iteration  21: 522162.357 ops/s
Iteration  22: 532855.192 ops/s
Iteration  23: 554200.355 ops/s
Iteration  24: 542221.547 ops/s
Iteration  25: 525669.916 ops/s
Iteration  26: 553819.427 ops/s
Iteration  27: 531569.271 ops/s
Iteration  28: 539142.719 ops/s
Iteration  29: 534477.137 ops/s
Iteration  30: 547331.475 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybeTest._Benchmark.benchmark_mainBoundaryErrorInnerSuccess":
  535692.532 ±(99.9%) 11023.097 ops/s [Average]
  (min, avg, max) = (475253.900, 535692.532, 568790.810), stdev = 16498.853
  CI (99.9%): [524669.435, 546715.629] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt       Score       Error  Units
ObservableConcatMapMaybeTest._Benchmark.benchmark_mainBoundaryErrorInnerSuccess  thrpt   30  535692.532 ± 11023.097  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybeTest._Benchmark.benchmark_mapperCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybeTest._Benchmark.benchmark_mapperCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 52358.094 ops/s
# Warmup Iteration   2: 446501.928 ops/s
# Warmup Iteration   3: 490585.228 ops/s
# Warmup Iteration   4: 539709.030 ops/s
# Warmup Iteration   5: 528579.209 ops/s
# Warmup Iteration   6: 548587.455 ops/s
# Warmup Iteration   7: 520356.157 ops/s
# Warmup Iteration   8: 529999.442 ops/s
# Warmup Iteration   9: 525480.660 ops/s
# Warmup Iteration  10: 513288.934 ops/s
# Warmup Iteration  11: 520483.469 ops/s
# Warmup Iteration  12: 550608.302 ops/s
# Warmup Iteration  13: 532293.396 ops/s
# Warmup Iteration  14: 547990.111 ops/s
# Warmup Iteration  15: 529809.183 ops/s
# Warmup Iteration  16: 552068.109 ops/s
# Warmup Iteration  17: 561895.781 ops/s
# Warmup Iteration  18: 559027.976 ops/s
# Warmup Iteration  19: 576547.188 ops/s
# Warmup Iteration  20: 540849.985 ops/s
# Warmup Iteration  21: 589994.894 ops/s
# Warmup Iteration  22: 551506.588 ops/s
# Warmup Iteration  23: 556975.950 ops/s
# Warmup Iteration  24: 573949.121 ops/s
# Warmup Iteration  25: 545668.472 ops/s
# Warmup Iteration  26: 555461.828 ops/s
# Warmup Iteration  27: 576581.512 ops/s
# Warmup Iteration  28: 565169.025 ops/s
# Warmup Iteration  29: 556736.978 ops/s
# Warmup Iteration  30: 586510.131 ops/s
Iteration   1: 556061.861 ops/s
Iteration   2: 571009.801 ops/s
Iteration   3: 555361.781 ops/s
Iteration   4: 551540.388 ops/s
Iteration   5: 550320.565 ops/s
Iteration   6: 549000.520 ops/s
Iteration   7: 579654.464 ops/s
Iteration   8: 558461.950 ops/s
Iteration   9: 562795.461 ops/s
Iteration  10: 561819.412 ops/s
Iteration  11: 567832.097 ops/s
Iteration  12: 565324.396 ops/s
Iteration  13: 563248.569 ops/s
Iteration  14: 556107.887 ops/s
Iteration  15: 475880.412 ops/s
Iteration  16: 536876.505 ops/s
Iteration  17: 562281.304 ops/s
Iteration  18: 564000.041 ops/s
Iteration  19: 572660.445 ops/s
Iteration  20: 582030.930 ops/s
Iteration  21: 543733.468 ops/s
Iteration  22: 586506.511 ops/s
Iteration  23: 561063.236 ops/s
Iteration  24: 575808.890 ops/s
Iteration  25: 548442.078 ops/s
Iteration  26: 562680.337 ops/s
Iteration  27: 575060.999 ops/s
Iteration  28: 549758.825 ops/s
Iteration  29: 582307.561 ops/s
Iteration  30: 549847.076 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybeTest._Benchmark.benchmark_mapperCrash":
  559249.259 ±(99.9%) 13311.391 ops/s [Average]
  (min, avg, max) = (475880.412, 559249.259, 586506.511), stdev = 19923.865
  CI (99.9%): [545937.868, 572560.650] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score       Error  Units
ObservableConcatMapMaybeTest._Benchmark.benchmark_mapperCrash  thrpt   30  559249.259 ± 13311.391  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybeTest._Benchmark.benchmark_scalarEmptySource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybeTest._Benchmark.benchmark_scalarEmptySource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1646806.407 ops/s
# Warmup Iteration   2: 6078809.716 ops/s
# Warmup Iteration   3: 7828039.612 ops/s
# Warmup Iteration   4: 8662423.387 ops/s
# Warmup Iteration   5: 8948266.550 ops/s
# Warmup Iteration   6: 8783035.968 ops/s
# Warmup Iteration   7: 8476345.273 ops/s
# Warmup Iteration   8: 8877593.736 ops/s
# Warmup Iteration   9: 8209225.207 ops/s
# Warmup Iteration  10: 8846453.002 ops/s
# Warmup Iteration  11: 8276872.756 ops/s
# Warmup Iteration  12: 8532765.973 ops/s
# Warmup Iteration  13: 8440162.348 ops/s
# Warmup Iteration  14: 8479358.344 ops/s
# Warmup Iteration  15: 8882293.637 ops/s
# Warmup Iteration  16: 8377931.515 ops/s
# Warmup Iteration  17: 8669953.062 ops/s
# Warmup Iteration  18: 8468245.936 ops/s
# Warmup Iteration  19: 8607048.637 ops/s
# Warmup Iteration  20: 8539404.879 ops/s
# Warmup Iteration  21: 8637681.846 ops/s
# Warmup Iteration  22: 8284700.977 ops/s
# Warmup Iteration  23: 8633378.966 ops/s
# Warmup Iteration  24: 8609613.678 ops/s
# Warmup Iteration  25: 8197927.807 ops/s
# Warmup Iteration  26: 8639309.444 ops/s
# Warmup Iteration  27: 8419379.166 ops/s
# Warmup Iteration  28: 8518964.895 ops/s
# Warmup Iteration  29: 8720445.071 ops/s
# Warmup Iteration  30: 8594797.800 ops/s
Iteration   1: 8237526.021 ops/s
Iteration   2: 8493585.633 ops/s
Iteration   3: 8794454.382 ops/s
Iteration   4: 8289920.839 ops/s
Iteration   5: 8425276.288 ops/s
Iteration   6: 8732277.374 ops/s
Iteration   7: 8733321.903 ops/s
Iteration   8: 8311542.410 ops/s
Iteration   9: 8676446.254 ops/s
Iteration  10: 8365764.962 ops/s
Iteration  11: 8439005.918 ops/s
Iteration  12: 8742910.771 ops/s
Iteration  13: 8509794.519 ops/s
Iteration  14: 8578985.447 ops/s
Iteration  15: 8307159.160 ops/s
Iteration  16: 8617926.722 ops/s
Iteration  17: 8214638.825 ops/s
Iteration  18: 8606474.387 ops/s
Iteration  19: 8944696.748 ops/s
Iteration  20: 8258186.414 ops/s
Iteration  21: 8761303.101 ops/s
Iteration  22: 8418517.611 ops/s
Iteration  23: 8678534.197 ops/s
Iteration  24: 8545429.251 ops/s
Iteration  25: 8526500.185 ops/s
Iteration  26: 8938138.816 ops/s
Iteration  27: 8172933.540 ops/s
Iteration  28: 8634082.341 ops/s
Iteration  29: 8406367.683 ops/s
Iteration  30: 8621190.288 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybeTest._Benchmark.benchmark_scalarEmptySource":
  8532763.066 ±(99.9%) 140653.951 ops/s [Average]
  (min, avg, max) = (8172933.540, 8532763.066, 8944696.748), stdev = 210524.229
  CI (99.9%): [8392109.115, 8673417.018] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score        Error  Units
ObservableConcatMapMaybeTest._Benchmark.benchmark_scalarEmptySource  thrpt   30  8532763.066 ± 140653.951  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybeTest._Benchmark.benchmark_innerErrorAfterMainError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybeTest._Benchmark.benchmark_innerErrorAfterMainError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 20250.567 ops/s
# Warmup Iteration   2: 104303.464 ops/s
# Warmup Iteration   3: 153338.054 ops/s
# Warmup Iteration   4: 180090.091 ops/s
# Warmup Iteration   5: 183376.595 ops/s
# Warmup Iteration   6: 162702.738 ops/s
# Warmup Iteration   7: 171058.323 ops/s
# Warmup Iteration   8: 173945.846 ops/s
# Warmup Iteration   9: 181271.536 ops/s
# Warmup Iteration  10: 166059.816 ops/s
# Warmup Iteration  11: 182624.528 ops/s
# Warmup Iteration  12: 180514.976 ops/s
# Warmup Iteration  13: 180431.646 ops/s
# Warmup Iteration  14: 174108.104 ops/s
# Warmup Iteration  15: 180477.257 ops/s
# Warmup Iteration  16: 184917.260 ops/s
# Warmup Iteration  17: 179657.836 ops/s
# Warmup Iteration  18: 197140.480 ops/s
# Warmup Iteration  19: 189451.201 ops/s
# Warmup Iteration  20: 183091.294 ops/s
# Warmup Iteration  21: 186933.187 ops/s
# Warmup Iteration  22: 186587.156 ops/s
# Warmup Iteration  23: 180643.641 ops/s
# Warmup Iteration  24: 182733.631 ops/s
# Warmup Iteration  25: 189511.991 ops/s
# Warmup Iteration  26: 182018.067 ops/s
# Warmup Iteration  27: 193344.500 ops/s
# Warmup Iteration  28: 182442.108 ops/s
# Warmup Iteration  29: 181071.066 ops/s
# Warmup Iteration  30: 196091.247 ops/s
Iteration   1: 184040.857 ops/s
Iteration   2: 189391.739 ops/s
Iteration   3: 182648.212 ops/s
Iteration   4: 191255.618 ops/s
Iteration   5: 186111.097 ops/s
Iteration   6: 181185.782 ops/s
Iteration   7: 194164.122 ops/s
Iteration   8: 187291.567 ops/s
Iteration   9: 187989.104 ops/s
Iteration  10: 161659.054 ops/s
Iteration  11: 186028.975 ops/s
Iteration  12: 183465.637 ops/s
Iteration  13: 185339.169 ops/s
Iteration  14: 188299.851 ops/s
Iteration  15: 182060.578 ops/s
Iteration  16: 195355.485 ops/s
Iteration  17: 181675.447 ops/s
Iteration  18: 186914.504 ops/s
Iteration  19: 187467.175 ops/s
Iteration  20: 189218.383 ops/s
Iteration  21: 188014.163 ops/s
Iteration  22: 191689.784 ops/s
Iteration  23: 184427.789 ops/s
Iteration  24: 191588.151 ops/s
Iteration  25: 180999.733 ops/s
Iteration  26: 189083.030 ops/s
Iteration  27: 184157.245 ops/s
Iteration  28: 185437.759 ops/s
Iteration  29: 191260.421 ops/s
Iteration  30: 185370.703 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybeTest._Benchmark.benchmark_innerErrorAfterMainError":
  186119.704 ±(99.9%) 3972.762 ops/s [Average]
  (min, avg, max) = (161659.054, 186119.704, 195355.485), stdev = 5946.244
  CI (99.9%): [182146.942, 190092.466] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score      Error  Units
ObservableConcatMapMaybeTest._Benchmark.benchmark_innerErrorAfterMainError  thrpt   30  186119.704 ± 3972.762  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybeTest._Benchmark.benchmark_cancelNoConcurrentClean$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybeTest._Benchmark.benchmark_cancelNoConcurrentClean

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 521693.048 ops/s
# Warmup Iteration   2: 2303140.402 ops/s
# Warmup Iteration   3: 2824007.823 ops/s
# Warmup Iteration   4: 3268355.317 ops/s
# Warmup Iteration   5: 3048554.430 ops/s
# Warmup Iteration   6: 3354467.321 ops/s
# Warmup Iteration   7: 3130729.160 ops/s
# Warmup Iteration   8: 3180541.484 ops/s
# Warmup Iteration   9: 3130248.873 ops/s
# Warmup Iteration  10: 3283439.804 ops/s
# Warmup Iteration  11: 3233434.514 ops/s
# Warmup Iteration  12: 3138695.383 ops/s
# Warmup Iteration  13: 3337349.334 ops/s
# Warmup Iteration  14: 3175705.568 ops/s
# Warmup Iteration  15: 3314562.951 ops/s
# Warmup Iteration  16: 3142698.577 ops/s
# Warmup Iteration  17: 3119072.313 ops/s
# Warmup Iteration  18: 3280369.202 ops/s
# Warmup Iteration  19: 3335931.470 ops/s
# Warmup Iteration  20: 3152287.404 ops/s
# Warmup Iteration  21: 3195597.927 ops/s
# Warmup Iteration  22: 3145222.921 ops/s
# Warmup Iteration  23: 3358387.114 ops/s
# Warmup Iteration  24: 3082116.166 ops/s
# Warmup Iteration  25: 3208323.698 ops/s
# Warmup Iteration  26: 3229871.605 ops/s
# Warmup Iteration  27: 3268733.299 ops/s
# Warmup Iteration  28: 3152988.603 ops/s
# Warmup Iteration  29: 3168173.313 ops/s
# Warmup Iteration  30: 3205772.641 ops/s
Iteration   1: 3248696.169 ops/s
Iteration   2: 3107484.482 ops/s
Iteration   3: 3213322.613 ops/s
Iteration   4: 3306108.843 ops/s
Iteration   5: 3165947.782 ops/s
Iteration   6: 3153370.270 ops/s
Iteration   7: 3203139.478 ops/s
Iteration   8: 3186192.463 ops/s
Iteration   9: 3208596.370 ops/s
Iteration  10: 3212950.467 ops/s
Iteration  11: 3296465.552 ops/s
Iteration  12: 3112532.099 ops/s
Iteration  13: 3264075.997 ops/s
Iteration  14: 3128042.939 ops/s
Iteration  15: 3223847.143 ops/s
Iteration  16: 3146870.166 ops/s
Iteration  17: 3225653.514 ops/s
Iteration  18: 3197393.200 ops/s
Iteration  19: 3252026.069 ops/s
Iteration  20: 3177341.685 ops/s
Iteration  21: 3245318.658 ops/s
Iteration  22: 3258998.099 ops/s
Iteration  23: 3130944.428 ops/s
Iteration  24: 3276139.424 ops/s
Iteration  25: 3108763.176 ops/s
Iteration  26: 3227231.251 ops/s
Iteration  27: 3334418.694 ops/s
Iteration  28: 3137893.867 ops/s
Iteration  29: 3105916.469 ops/s
Iteration  30: 3317835.495 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybeTest._Benchmark.benchmark_cancelNoConcurrentClean":
  3205783.895 ±(99.9%) 44470.895 ops/s [Average]
  (min, avg, max) = (3105916.469, 3205783.895, 3334418.694), stdev = 66561.947
  CI (99.9%): [3161313.001, 3250254.790] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score       Error  Units
ObservableConcatMapMaybeTest._Benchmark.benchmark_cancelNoConcurrentClean  thrpt   30  3205783.895 ± 44470.895  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_observerDelayErrorMaxConcurrency$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_observerDelayErrorMaxConcurrency

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 93455.076 ops/s
# Warmup Iteration   2: 384288.282 ops/s
# Warmup Iteration   3: 458240.155 ops/s
# Warmup Iteration   4: 426107.669 ops/s
# Warmup Iteration   5: 464824.952 ops/s
# Warmup Iteration   6: 497957.296 ops/s
# Warmup Iteration   7: 500784.776 ops/s
# Warmup Iteration   8: 500053.114 ops/s
# Warmup Iteration   9: 503510.854 ops/s
# Warmup Iteration  10: 485498.622 ops/s
# Warmup Iteration  11: 495264.720 ops/s
# Warmup Iteration  12: 491565.336 ops/s
# Warmup Iteration  13: 507418.917 ops/s
# Warmup Iteration  14: 486547.184 ops/s
# Warmup Iteration  15: 489147.093 ops/s
# Warmup Iteration  16: 494941.119 ops/s
# Warmup Iteration  17: 515962.444 ops/s
# Warmup Iteration  18: 514241.228 ops/s
# Warmup Iteration  19: 499784.449 ops/s
# Warmup Iteration  20: 521017.775 ops/s
# Warmup Iteration  21: 517412.240 ops/s
# Warmup Iteration  22: 507348.493 ops/s
# Warmup Iteration  23: 516696.687 ops/s
# Warmup Iteration  24: 515028.269 ops/s
# Warmup Iteration  25: 511931.027 ops/s
# Warmup Iteration  26: 515629.915 ops/s
# Warmup Iteration  27: 503667.575 ops/s
# Warmup Iteration  28: 546942.669 ops/s
# Warmup Iteration  29: 494784.754 ops/s
# Warmup Iteration  30: 524998.500 ops/s
Iteration   1: 512637.630 ops/s
Iteration   2: 501293.345 ops/s
Iteration   3: 534591.171 ops/s
Iteration   4: 451778.105 ops/s
Iteration   5: 478348.555 ops/s
Iteration   6: 507232.182 ops/s
Iteration   7: 507569.292 ops/s
Iteration   8: 519484.425 ops/s
Iteration   9: 509422.573 ops/s
Iteration  10: 532325.513 ops/s
Iteration  11: 536669.884 ops/s
Iteration  12: 511720.419 ops/s
Iteration  13: 524696.216 ops/s
Iteration  14: 499346.024 ops/s
Iteration  15: 502924.024 ops/s
Iteration  16: 531394.488 ops/s
Iteration  17: 513489.414 ops/s
Iteration  18: 522327.820 ops/s
Iteration  19: 503176.520 ops/s
Iteration  20: 520970.505 ops/s
Iteration  21: 513620.280 ops/s
Iteration  22: 503178.090 ops/s
Iteration  23: 519861.111 ops/s
Iteration  24: 517703.994 ops/s
Iteration  25: 525753.245 ops/s
Iteration  26: 521857.978 ops/s
Iteration  27: 526948.657 ops/s
Iteration  28: 517056.319 ops/s
Iteration  29: 523406.637 ops/s
Iteration  30: 503324.230 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_observerDelayErrorMaxConcurrency":
  513136.955 ±(99.9%) 11394.528 ops/s [Average]
  (min, avg, max) = (451778.105, 513136.955, 536669.884), stdev = 17054.794
  CI (99.9%): [501742.427, 524531.483] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            Mode  Cnt       Score       Error  Units
ObservableConcatMapEagerTest._Benchmark.benchmark_observerDelayErrorMaxConcurrency  thrpt   30  513136.955 ± 11394.528  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybeTest._Benchmark.benchmark_undeliverableUponCancelDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybeTest._Benchmark.benchmark_undeliverableUponCancelDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 18841.767 ops/s
# Warmup Iteration   2: 137392.930 ops/s
# Warmup Iteration   3: 169007.071 ops/s
# Warmup Iteration   4: 194645.931 ops/s
# Warmup Iteration   5: 181462.491 ops/s
# Warmup Iteration   6: 208229.246 ops/s
# Warmup Iteration   7: 205777.698 ops/s
# Warmup Iteration   8: 199146.962 ops/s
# Warmup Iteration   9: 215565.751 ops/s
# Warmup Iteration  10: 198255.111 ops/s
# Warmup Iteration  11: 211367.156 ops/s
# Warmup Iteration  12: 203544.886 ops/s
# Warmup Iteration  13: 210102.295 ops/s
# Warmup Iteration  14: 204880.511 ops/s
# Warmup Iteration  15: 205692.878 ops/s
# Warmup Iteration  16: 209352.459 ops/s
# Warmup Iteration  17: 208889.955 ops/s
# Warmup Iteration  18: 214322.331 ops/s
# Warmup Iteration  19: 210110.002 ops/s
# Warmup Iteration  20: 214005.781 ops/s
# Warmup Iteration  21: 204200.368 ops/s
# Warmup Iteration  22: 210528.519 ops/s
# Warmup Iteration  23: 207772.373 ops/s
# Warmup Iteration  24: 209026.782 ops/s
# Warmup Iteration  25: 214832.590 ops/s
# Warmup Iteration  26: 208643.895 ops/s
# Warmup Iteration  27: 214541.774 ops/s
# Warmup Iteration  28: 208216.616 ops/s
# Warmup Iteration  29: 215655.102 ops/s
# Warmup Iteration  30: 208363.680 ops/s
Iteration   1: 212584.600 ops/s
Iteration   2: 210450.060 ops/s
Iteration   3: 210670.290 ops/s
Iteration   4: 215040.837 ops/s
Iteration   5: 211568.189 ops/s
Iteration   6: 210568.707 ops/s
Iteration   7: 214645.842 ops/s
Iteration   8: 208415.237 ops/s
Iteration   9: 216898.282 ops/s
Iteration  10: 207461.482 ops/s
Iteration  11: 214033.948 ops/s
Iteration  12: 207957.898 ops/s
Iteration  13: 218413.698 ops/s
Iteration  14: 211707.158 ops/s
Iteration  15: 207575.588 ops/s
Iteration  16: 217749.730 ops/s
Iteration  17: 208097.953 ops/s
Iteration  18: 214316.929 ops/s
Iteration  19: 208776.152 ops/s
Iteration  20: 212589.102 ops/s
Iteration  21: 210419.578 ops/s
Iteration  22: 209054.525 ops/s
Iteration  23: 214513.631 ops/s
Iteration  24: 211595.429 ops/s
Iteration  25: 217309.276 ops/s
Iteration  26: 205662.833 ops/s
Iteration  27: 209566.076 ops/s
Iteration  28: 218787.650 ops/s
Iteration  29: 209383.437 ops/s
Iteration  30: 208618.445 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybeTest._Benchmark.benchmark_undeliverableUponCancelDelayError":
  211814.419 ±(99.9%) 2422.774 ops/s [Average]
  (min, avg, max) = (205662.833, 211814.419, 218787.650), stdev = 3626.294
  CI (99.9%): [209391.645, 214237.192] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             Mode  Cnt       Score      Error  Units
ObservableConcatMapMaybeTest._Benchmark.benchmark_undeliverableUponCancelDelayError  thrpt   30  211814.419 ± 2422.774  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatTest._Benchmark.benchmark_repeatUntilError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatTest._Benchmark.benchmark_repeatUntilError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 204437.056 ops/s
# Warmup Iteration   2: 591690.148 ops/s
# Warmup Iteration   3: 698411.601 ops/s
# Warmup Iteration   4: 638364.020 ops/s
# Warmup Iteration   5: 668587.710 ops/s
# Warmup Iteration   6: 603065.731 ops/s
# Warmup Iteration   7: 707467.547 ops/s
# Warmup Iteration   8: 707119.009 ops/s
# Warmup Iteration   9: 683592.480 ops/s
# Warmup Iteration  10: 720222.421 ops/s
# Warmup Iteration  11: 723158.503 ops/s
# Warmup Iteration  12: 706950.759 ops/s
# Warmup Iteration  13: 684509.887 ops/s
# Warmup Iteration  14: 709302.158 ops/s
# Warmup Iteration  15: 715844.666 ops/s
# Warmup Iteration  16: 674547.853 ops/s
# Warmup Iteration  17: 751992.812 ops/s
# Warmup Iteration  18: 727701.398 ops/s
# Warmup Iteration  19: 748743.414 ops/s
# Warmup Iteration  20: 716118.407 ops/s
# Warmup Iteration  21: 752733.111 ops/s
# Warmup Iteration  22: 725661.097 ops/s
# Warmup Iteration  23: 724891.050 ops/s
# Warmup Iteration  24: 754764.349 ops/s
# Warmup Iteration  25: 728748.281 ops/s
# Warmup Iteration  26: 740071.656 ops/s
# Warmup Iteration  27: 724800.933 ops/s
# Warmup Iteration  28: 743269.743 ops/s
# Warmup Iteration  29: 734559.054 ops/s
# Warmup Iteration  30: 569110.457 ops/s
Iteration   1: 761577.350 ops/s
Iteration   2: 749115.633 ops/s
Iteration   3: 733283.667 ops/s
Iteration   4: 759950.281 ops/s
Iteration   5: 720864.147 ops/s
Iteration   6: 740690.865 ops/s
Iteration   7: 757113.918 ops/s
Iteration   8: 732821.094 ops/s
Iteration   9: 744433.955 ops/s
Iteration  10: 753441.974 ops/s
Iteration  11: 748933.511 ops/s
Iteration  12: 734256.659 ops/s
Iteration  13: 754311.114 ops/s
Iteration  14: 715125.109 ops/s
Iteration  15: 725182.577 ops/s
Iteration  16: 754412.624 ops/s
Iteration  17: 729618.506 ops/s
Iteration  18: 753601.237 ops/s
Iteration  19: 729151.814 ops/s
Iteration  20: 761159.480 ops/s
Iteration  21: 723066.850 ops/s
Iteration  22: 723014.237 ops/s
Iteration  23: 717179.762 ops/s
Iteration  24: 742618.767 ops/s
Iteration  25: 720204.997 ops/s
Iteration  26: 726057.927 ops/s
Iteration  27: 771653.698 ops/s
Iteration  28: 740392.438 ops/s
Iteration  29: 753387.649 ops/s
Iteration  30: 722003.999 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatTest._Benchmark.benchmark_repeatUntilError":
  739954.195 ±(99.9%) 10614.138 ops/s [Average]
  (min, avg, max) = (715125.109, 739954.195, 771653.698), stdev = 15886.744
  CI (99.9%): [729340.056, 750568.333] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score       Error  Units
ObservableRepeatTest._Benchmark.benchmark_repeatUntilError  thrpt   30  739954.195 ± 10614.138  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_arrayDelayErrorMaxConcurrencyErrorDelayed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_arrayDelayErrorMaxConcurrencyErrorDelayed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 31826.775 ops/s
# Warmup Iteration   2: 129232.396 ops/s
# Warmup Iteration   3: 140081.390 ops/s
# Warmup Iteration   4: 341872.566 ops/s
# Warmup Iteration   5: 351473.708 ops/s
# Warmup Iteration   6: 359856.740 ops/s
# Warmup Iteration   7: 393254.724 ops/s
# Warmup Iteration   8: 368813.114 ops/s
# Warmup Iteration   9: 390163.733 ops/s
# Warmup Iteration  10: 378708.653 ops/s
# Warmup Iteration  11: 380478.368 ops/s
# Warmup Iteration  12: 385472.349 ops/s
# Warmup Iteration  13: 372134.676 ops/s
# Warmup Iteration  14: 402023.646 ops/s
# Warmup Iteration  15: 391876.959 ops/s
# Warmup Iteration  16: 378123.745 ops/s
# Warmup Iteration  17: 386555.329 ops/s
# Warmup Iteration  18: 406367.163 ops/s
# Warmup Iteration  19: 380949.196 ops/s
# Warmup Iteration  20: 413617.050 ops/s
# Warmup Iteration  21: 393762.348 ops/s
# Warmup Iteration  22: 389647.245 ops/s
# Warmup Iteration  23: 407996.859 ops/s
# Warmup Iteration  24: 384961.517 ops/s
# Warmup Iteration  25: 387276.815 ops/s
# Warmup Iteration  26: 407359.792 ops/s
# Warmup Iteration  27: 368705.886 ops/s
# Warmup Iteration  28: 398169.482 ops/s
# Warmup Iteration  29: 393246.723 ops/s
# Warmup Iteration  30: 386539.485 ops/s
Iteration   1: 401469.776 ops/s
Iteration   2: 378224.763 ops/s
Iteration   3: 395063.030 ops/s
Iteration   4: 394659.291 ops/s
Iteration   5: 389762.439 ops/s
Iteration   6: 396845.299 ops/s
Iteration   7: 393362.161 ops/s
Iteration   8: 394439.794 ops/s
Iteration   9: 393854.443 ops/s
Iteration  10: 397545.328 ops/s
Iteration  11: 409917.873 ops/s
Iteration  12: 379972.106 ops/s
Iteration  13: 400349.272 ops/s
Iteration  14: 384885.157 ops/s
Iteration  15: 393449.016 ops/s
Iteration  16: 397147.050 ops/s
Iteration  17: 393505.212 ops/s
Iteration  18: 406360.242 ops/s
Iteration  19: 376559.395 ops/s
Iteration  20: 409014.986 ops/s
Iteration  21: 384271.526 ops/s
Iteration  22: 393776.247 ops/s
Iteration  23: 404320.615 ops/s
Iteration  24: 384486.618 ops/s
Iteration  25: 412661.494 ops/s
Iteration  26: 389156.994 ops/s
Iteration  27: 411867.599 ops/s
Iteration  28: 398510.713 ops/s
Iteration  29: 392555.912 ops/s
Iteration  30: 411929.512 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_arrayDelayErrorMaxConcurrencyErrorDelayed":
  395664.129 ±(99.9%) 6629.508 ops/s [Average]
  (min, avg, max) = (376559.395, 395664.129, 412661.494), stdev = 9922.736
  CI (99.9%): [389034.621, 402293.636] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                     Mode  Cnt       Score      Error  Units
ObservableConcatMapEagerTest._Benchmark.benchmark_arrayDelayErrorMaxConcurrencyErrorDelayed  thrpt   30  395664.129 ± 6629.508  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrDefaultTest._Benchmark.benchmark_singleCompletableManualCompleteExceptionallyCancels$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrDefaultTest._Benchmark.benchmark_singleCompletableManualCompleteExceptionallyCancels

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 177178.452 ops/s
# Warmup Iteration   2: 319565.898 ops/s
# Warmup Iteration   3: 343180.980 ops/s
# Warmup Iteration   4: 315774.586 ops/s
# Warmup Iteration   5: 376493.315 ops/s
# Warmup Iteration   6: 330033.857 ops/s
# Warmup Iteration   7: 333493.630 ops/s
# Warmup Iteration   8: 364342.579 ops/s
# Warmup Iteration   9: 362712.031 ops/s
# Warmup Iteration  10: 368079.099 ops/s
# Warmup Iteration  11: 358602.835 ops/s
# Warmup Iteration  12: 356307.189 ops/s
# Warmup Iteration  13: 375543.501 ops/s
# Warmup Iteration  14: 379023.494 ops/s
# Warmup Iteration  15: 356056.745 ops/s
# Warmup Iteration  16: 368207.572 ops/s
# Warmup Iteration  17: 379180.530 ops/s
# Warmup Iteration  18: 382945.577 ops/s
# Warmup Iteration  19: 391658.729 ops/s
# Warmup Iteration  20: 384834.254 ops/s
# Warmup Iteration  21: 385151.018 ops/s
# Warmup Iteration  22: 379384.620 ops/s
# Warmup Iteration  23: 371514.311 ops/s
# Warmup Iteration  24: 326151.538 ops/s
# Warmup Iteration  25: 377879.294 ops/s
# Warmup Iteration  26: 388596.504 ops/s
# Warmup Iteration  27: 381132.331 ops/s
# Warmup Iteration  28: 382028.958 ops/s
# Warmup Iteration  29: 387267.386 ops/s
# Warmup Iteration  30: 377558.009 ops/s
Iteration   1: 392804.041 ops/s
Iteration   2: 377104.660 ops/s
Iteration   3: 393634.236 ops/s
Iteration   4: 380561.588 ops/s
Iteration   5: 374176.897 ops/s
Iteration   6: 396473.984 ops/s
Iteration   7: 376932.138 ops/s
Iteration   8: 381205.156 ops/s
Iteration   9: 398328.342 ops/s
Iteration  10: 377144.843 ops/s
Iteration  11: 391682.718 ops/s
Iteration  12: 389298.157 ops/s
Iteration  13: 374398.426 ops/s
Iteration  14: 390345.290 ops/s
Iteration  15: 396318.015 ops/s
Iteration  16: 401156.471 ops/s
Iteration  17: 366568.746 ops/s
Iteration  18: 405816.053 ops/s
Iteration  19: 381558.866 ops/s
Iteration  20: 390593.000 ops/s
Iteration  21: 390903.597 ops/s
Iteration  22: 373470.191 ops/s
Iteration  23: 386710.625 ops/s
Iteration  24: 394577.081 ops/s
Iteration  25: 374107.136 ops/s
Iteration  26: 387499.768 ops/s
Iteration  27: 389565.008 ops/s
Iteration  28: 372303.300 ops/s
Iteration  29: 387322.867 ops/s
Iteration  30: 373600.079 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrDefaultTest._Benchmark.benchmark_singleCompletableManualCompleteExceptionallyCancels":
  385538.709 ±(99.9%) 6670.202 ops/s [Average]
  (min, avg, max) = (366568.746, 385538.709, 405816.053), stdev = 9983.645
  CI (99.9%): [378868.507, 392208.911] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                                       Mode  Cnt       Score      Error  Units
FlowableStageSubscriberOrDefaultTest._Benchmark.benchmark_singleCompletableManualCompleteExceptionallyCancels  thrpt   30  385538.709 ± 6670.202  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableAutoConnectTest._Benchmark.benchmark_autoConnectImmediately$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableAutoConnectTest._Benchmark.benchmark_autoConnectImmediately

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 907343.590 ops/s
# Warmup Iteration   2: 2038367.484 ops/s
# Warmup Iteration   3: 3131831.609 ops/s
# Warmup Iteration   4: 2987558.128 ops/s
# Warmup Iteration   5: 3157490.804 ops/s
# Warmup Iteration   6: 3056284.971 ops/s
# Warmup Iteration   7: 2982212.187 ops/s
# Warmup Iteration   8: 2976273.779 ops/s
# Warmup Iteration   9: 2956190.149 ops/s
# Warmup Iteration  10: 3130087.524 ops/s
# Warmup Iteration  11: 3010770.937 ops/s
# Warmup Iteration  12: 3081136.981 ops/s
# Warmup Iteration  13: 2986340.832 ops/s
# Warmup Iteration  14: 3082418.710 ops/s
# Warmup Iteration  15: 2956793.787 ops/s
# Warmup Iteration  16: 3123924.958 ops/s
# Warmup Iteration  17: 3031283.854 ops/s
# Warmup Iteration  18: 3019302.481 ops/s
# Warmup Iteration  19: 3127638.383 ops/s
# Warmup Iteration  20: 3001920.302 ops/s
# Warmup Iteration  21: 3027009.191 ops/s
# Warmup Iteration  22: 3081333.966 ops/s
# Warmup Iteration  23: 2924222.500 ops/s
# Warmup Iteration  24: 3043214.663 ops/s
# Warmup Iteration  25: 3171518.155 ops/s
# Warmup Iteration  26: 3045459.561 ops/s
# Warmup Iteration  27: 2912926.863 ops/s
# Warmup Iteration  28: 3187832.698 ops/s
# Warmup Iteration  29: 2997080.616 ops/s
# Warmup Iteration  30: 3003266.066 ops/s
Iteration   1: 2988294.585 ops/s
Iteration   2: 3014431.430 ops/s
Iteration   3: 3082083.212 ops/s
Iteration   4: 2956696.214 ops/s
Iteration   5: 3146228.492 ops/s
Iteration   6: 3058253.591 ops/s
Iteration   7: 2993139.830 ops/s
Iteration   8: 3215674.619 ops/s
Iteration   9: 2907620.784 ops/s
Iteration  10: 3082455.299 ops/s
Iteration  11: 3037383.453 ops/s
Iteration  12: 3092592.220 ops/s
Iteration  13: 3079921.118 ops/s
Iteration  14: 2957476.741 ops/s
Iteration  15: 3054904.330 ops/s
Iteration  16: 3072338.439 ops/s
Iteration  17: 2966193.339 ops/s
Iteration  18: 3174752.544 ops/s
Iteration  19: 2924051.956 ops/s
Iteration  20: 3172669.853 ops/s
Iteration  21: 3100406.493 ops/s
Iteration  22: 2953293.442 ops/s
Iteration  23: 3075775.871 ops/s
Iteration  24: 3061560.214 ops/s
Iteration  25: 3098755.330 ops/s
Iteration  26: 3079624.193 ops/s
Iteration  27: 3074092.962 ops/s
Iteration  28: 3055017.925 ops/s
Iteration  29: 3035711.361 ops/s
Iteration  30: 3111203.611 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableAutoConnectTest._Benchmark.benchmark_autoConnectImmediately":
  3054086.782 ±(99.9%) 49872.466 ops/s [Average]
  (min, avg, max) = (2907620.784, 3054086.782, 3215674.619), stdev = 74646.764
  CI (99.9%): [3004214.316, 3103959.247] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
FlowableAutoConnectTest._Benchmark.benchmark_autoConnectImmediately  thrpt   30  3054086.782 ± 49872.466  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableSubscriberTest._Benchmark.benchmark_methodTestCancelled$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableSubscriberTest._Benchmark.benchmark_methodTestCancelled

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2375355.566 ops/s
# Warmup Iteration   2: 4382902.033 ops/s
# Warmup Iteration   3: 5286831.508 ops/s
# Warmup Iteration   4: 5369458.199 ops/s
# Warmup Iteration   5: 5663644.392 ops/s
# Warmup Iteration   6: 5157689.995 ops/s
# Warmup Iteration   7: 5547825.214 ops/s
# Warmup Iteration   8: 5510844.138 ops/s
# Warmup Iteration   9: 5296728.622 ops/s
# Warmup Iteration  10: 5660688.398 ops/s
# Warmup Iteration  11: 5755087.083 ops/s
# Warmup Iteration  12: 5365669.889 ops/s
# Warmup Iteration  13: 5587948.395 ops/s
# Warmup Iteration  14: 5449915.648 ops/s
# Warmup Iteration  15: 5562376.550 ops/s
# Warmup Iteration  16: 5562986.711 ops/s
# Warmup Iteration  17: 5509569.084 ops/s
# Warmup Iteration  18: 5369391.075 ops/s
# Warmup Iteration  19: 4532373.381 ops/s
# Warmup Iteration  20: 5626825.653 ops/s
# Warmup Iteration  21: 5329052.811 ops/s
# Warmup Iteration  22: 5575828.571 ops/s
# Warmup Iteration  23: 5415963.353 ops/s
# Warmup Iteration  24: 5357092.117 ops/s
# Warmup Iteration  25: 5536168.769 ops/s
# Warmup Iteration  26: 5366279.015 ops/s
# Warmup Iteration  27: 5605880.723 ops/s
# Warmup Iteration  28: 5661077.350 ops/s
# Warmup Iteration  29: 5237746.839 ops/s
# Warmup Iteration  30: 5673103.480 ops/s
Iteration   1: 5426942.748 ops/s
Iteration   2: 5533619.663 ops/s
Iteration   3: 5438841.016 ops/s
Iteration   4: 5557440.734 ops/s
Iteration   5: 5557466.193 ops/s
Iteration   6: 5280836.544 ops/s
Iteration   7: 5662915.911 ops/s
Iteration   8: 5499127.458 ops/s
Iteration   9: 5308141.317 ops/s
Iteration  10: 5683221.291 ops/s
Iteration  11: 5321914.100 ops/s
Iteration  12: 5526134.037 ops/s
Iteration  13: 5683284.495 ops/s
Iteration  14: 5351784.097 ops/s
Iteration  15: 5278465.606 ops/s
Iteration  16: 5608027.231 ops/s
Iteration  17: 5263649.937 ops/s
Iteration  18: 5633672.053 ops/s
Iteration  19: 5263308.618 ops/s
Iteration  20: 5510938.818 ops/s
Iteration  21: 5760380.896 ops/s
Iteration  22: 5544932.666 ops/s
Iteration  23: 5363169.656 ops/s
Iteration  24: 5711303.583 ops/s
Iteration  25: 5508220.128 ops/s
Iteration  26: 5699418.986 ops/s
Iteration  27: 5440681.230 ops/s
Iteration  28: 5339459.140 ops/s
Iteration  29: 5689549.719 ops/s
Iteration  30: 5476152.114 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableSubscriberTest._Benchmark.benchmark_methodTestCancelled":
  5497433.333 ±(99.9%) 102228.685 ops/s [Average]
  (min, avg, max) = (5263308.618, 5497433.333, 5760380.896), stdev = 153011.094
  CI (99.9%): [5395204.648, 5599662.018] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score        Error  Units
FlowableSubscriberTest._Benchmark.benchmark_methodTestCancelled  thrpt   30  5497433.333 ± 102228.685  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableToIteratorTest._Benchmark.benchmark_disposedIteratorHasNextReturns$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableToIteratorTest._Benchmark.benchmark_disposedIteratorHasNextReturns

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 296437.485 ops/s
# Warmup Iteration   2: 537125.451 ops/s
# Warmup Iteration   3: 597047.851 ops/s
# Warmup Iteration   4: 547226.475 ops/s
# Warmup Iteration   5: 597991.019 ops/s
# Warmup Iteration   6: 575234.830 ops/s
# Warmup Iteration   7: 614514.395 ops/s
# Warmup Iteration   8: 587755.403 ops/s
# Warmup Iteration   9: 586894.814 ops/s
# Warmup Iteration  10: 585398.897 ops/s
# Warmup Iteration  11: 569915.161 ops/s
# Warmup Iteration  12: 592355.880 ops/s
# Warmup Iteration  13: 585000.070 ops/s
# Warmup Iteration  14: 618818.484 ops/s
# Warmup Iteration  15: 583826.895 ops/s
# Warmup Iteration  16: 595140.740 ops/s
# Warmup Iteration  17: 644087.034 ops/s
# Warmup Iteration  18: 594722.331 ops/s
# Warmup Iteration  19: 633070.735 ops/s
# Warmup Iteration  20: 613661.473 ops/s
# Warmup Iteration  21: 630034.056 ops/s
# Warmup Iteration  22: 636743.691 ops/s
# Warmup Iteration  23: 613986.207 ops/s
# Warmup Iteration  24: 621982.218 ops/s
# Warmup Iteration  25: 633123.136 ops/s
# Warmup Iteration  26: 607433.681 ops/s
# Warmup Iteration  27: 625704.899 ops/s
# Warmup Iteration  28: 602797.597 ops/s
# Warmup Iteration  29: 643619.354 ops/s
# Warmup Iteration  30: 613177.614 ops/s
Iteration   1: 607304.961 ops/s
Iteration   2: 627435.912 ops/s
Iteration   3: 595343.958 ops/s
Iteration   4: 622108.858 ops/s
Iteration   5: 646935.541 ops/s
Iteration   6: 619900.823 ops/s
Iteration   7: 619671.088 ops/s
Iteration   8: 631898.545 ops/s
Iteration   9: 602786.236 ops/s
Iteration  10: 648189.382 ops/s
Iteration  11: 623771.242 ops/s
Iteration  12: 634568.451 ops/s
Iteration  13: 628393.785 ops/s
Iteration  14: 623395.693 ops/s
Iteration  15: 649753.611 ops/s
Iteration  16: 644131.323 ops/s
Iteration  17: 619753.729 ops/s
Iteration  18: 630905.638 ops/s
Iteration  19: 627666.900 ops/s
Iteration  20: 650349.600 ops/s
Iteration  21: 618339.409 ops/s
Iteration  22: 630735.153 ops/s
Iteration  23: 625581.728 ops/s
Iteration  24: 638992.670 ops/s
Iteration  25: 625740.887 ops/s
Iteration  26: 626400.491 ops/s
Iteration  27: 649503.417 ops/s
Iteration  28: 616220.171 ops/s
Iteration  29: 644301.043 ops/s
Iteration  30: 618984.516 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableToIteratorTest._Benchmark.benchmark_disposedIteratorHasNextReturns":
  628302.159 ±(99.9%) 9329.073 ops/s [Average]
  (min, avg, max) = (595343.958, 628302.159, 650349.600), stdev = 13963.318
  CI (99.9%): [618973.086, 637631.232] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            Mode  Cnt       Score      Error  Units
BlockingFlowableToIteratorTest._Benchmark.benchmark_disposedIteratorHasNextReturns  thrpt   30  628302.159 ± 9329.073  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeCacheTest._Benchmark.benchmark_doubleDispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeCacheTest._Benchmark.benchmark_doubleDispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1554414.009 ops/s
# Warmup Iteration   2: 3775249.022 ops/s
# Warmup Iteration   3: 4038107.158 ops/s
# Warmup Iteration   4: 4644803.740 ops/s
# Warmup Iteration   5: 4915563.006 ops/s
# Warmup Iteration   6: 4651499.634 ops/s
# Warmup Iteration   7: 4699019.905 ops/s
# Warmup Iteration   8: 4752076.092 ops/s
# Warmup Iteration   9: 4720173.844 ops/s
# Warmup Iteration  10: 4866431.562 ops/s
# Warmup Iteration  11: 4728660.703 ops/s
# Warmup Iteration  12: 4731844.326 ops/s
# Warmup Iteration  13: 4950953.965 ops/s
# Warmup Iteration  14: 3740252.954 ops/s
# Warmup Iteration  15: 4814528.516 ops/s
# Warmup Iteration  16: 4751279.003 ops/s
# Warmup Iteration  17: 4795374.897 ops/s
# Warmup Iteration  18: 4719483.723 ops/s
# Warmup Iteration  19: 4710448.867 ops/s
# Warmup Iteration  20: 4894105.499 ops/s
# Warmup Iteration  21: 4692458.386 ops/s
# Warmup Iteration  22: 4695467.686 ops/s
# Warmup Iteration  23: 4829090.115 ops/s
# Warmup Iteration  24: 4694813.141 ops/s
# Warmup Iteration  25: 4725030.510 ops/s
# Warmup Iteration  26: 4908057.478 ops/s
# Warmup Iteration  27: 4683322.390 ops/s
# Warmup Iteration  28: 4837643.824 ops/s
# Warmup Iteration  29: 4746137.383 ops/s
# Warmup Iteration  30: 4848840.927 ops/s
Iteration   1: 4644231.846 ops/s
Iteration   2: 4833228.423 ops/s
Iteration   3: 4629704.214 ops/s
Iteration   4: 4728167.313 ops/s
Iteration   5: 4979710.693 ops/s
Iteration   6: 4700966.257 ops/s
Iteration   7: 4776662.603 ops/s
Iteration   8: 4789289.308 ops/s
Iteration   9: 4878899.544 ops/s
Iteration  10: 4781151.317 ops/s
Iteration  11: 4689271.774 ops/s
Iteration  12: 4954203.738 ops/s
Iteration  13: 4690419.508 ops/s
Iteration  14: 4768583.064 ops/s
Iteration  15: 4926752.490 ops/s
Iteration  16: 4890347.529 ops/s
Iteration  17: 4661293.925 ops/s
Iteration  18: 4924742.477 ops/s
Iteration  19: 4738180.293 ops/s
Iteration  20: 4887999.783 ops/s
Iteration  21: 4709708.987 ops/s
Iteration  22: 4793637.019 ops/s
Iteration  23: 4647097.178 ops/s
Iteration  24: 4884346.700 ops/s
Iteration  25: 4674944.166 ops/s
Iteration  26: 4817277.788 ops/s
Iteration  27: 4959222.915 ops/s
Iteration  28: 4753821.946 ops/s
Iteration  29: 4848125.567 ops/s
Iteration  30: 4822248.797 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeCacheTest._Benchmark.benchmark_doubleDispose":
  4792807.905 ±(99.9%) 69284.588 ops/s [Average]
  (min, avg, max) = (4629704.214, 4792807.905, 4979710.693), stdev = 103701.918
  CI (99.9%): [4723523.317, 4862092.493] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score       Error  Units
MaybeCacheTest._Benchmark.benchmark_doubleDispose  thrpt   30  4792807.905 ± 69284.588  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorCompleteTest._Benchmark.benchmark_cancel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorCompleteTest._Benchmark.benchmark_cancel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1716888.582 ops/s
# Warmup Iteration   2: 3670841.309 ops/s
# Warmup Iteration   3: 3767264.439 ops/s
# Warmup Iteration   4: 4496256.289 ops/s
# Warmup Iteration   5: 4306792.145 ops/s
# Warmup Iteration   6: 4485537.357 ops/s
# Warmup Iteration   7: 4485972.157 ops/s
# Warmup Iteration   8: 4431153.765 ops/s
# Warmup Iteration   9: 4545559.357 ops/s
# Warmup Iteration  10: 4629948.673 ops/s
# Warmup Iteration  11: 4313921.578 ops/s
# Warmup Iteration  12: 4540891.509 ops/s
# Warmup Iteration  13: 4456922.777 ops/s
# Warmup Iteration  14: 4572908.918 ops/s
# Warmup Iteration  15: 4407162.124 ops/s
# Warmup Iteration  16: 4434601.754 ops/s
# Warmup Iteration  17: 4526412.632 ops/s
# Warmup Iteration  18: 4462544.334 ops/s
# Warmup Iteration  19: 4525253.903 ops/s
# Warmup Iteration  20: 4444270.556 ops/s
# Warmup Iteration  21: 4443801.646 ops/s
# Warmup Iteration  22: 4456846.309 ops/s
# Warmup Iteration  23: 4414548.725 ops/s
# Warmup Iteration  24: 4593319.713 ops/s
# Warmup Iteration  25: 4411135.822 ops/s
# Warmup Iteration  26: 4446665.346 ops/s
# Warmup Iteration  27: 4577058.011 ops/s
# Warmup Iteration  28: 4400916.011 ops/s
# Warmup Iteration  29: 4415572.094 ops/s
# Warmup Iteration  30: 4618264.987 ops/s
Iteration   1: 4437635.519 ops/s
Iteration   2: 4549413.817 ops/s
Iteration   3: 4354002.370 ops/s
Iteration   4: 4441300.831 ops/s
Iteration   5: 4550077.601 ops/s
Iteration   6: 4471306.218 ops/s
Iteration   7: 4492044.104 ops/s
Iteration   8: 4430037.205 ops/s
Iteration   9: 4567554.844 ops/s
Iteration  10: 4493848.169 ops/s
Iteration  11: 4436850.137 ops/s
Iteration  12: 4457757.142 ops/s
Iteration  13: 4411255.482 ops/s
Iteration  14: 4374786.256 ops/s
Iteration  15: 4409001.526 ops/s
Iteration  16: 4457440.762 ops/s
Iteration  17: 4462236.992 ops/s
Iteration  18: 4647559.774 ops/s
Iteration  19: 4304767.867 ops/s
Iteration  20: 4540568.682 ops/s
Iteration  21: 4389380.178 ops/s
Iteration  22: 4610142.071 ops/s
Iteration  23: 4643107.648 ops/s
Iteration  24: 4370056.051 ops/s
Iteration  25: 4424180.697 ops/s
Iteration  26: 4406472.669 ops/s
Iteration  27: 4443698.050 ops/s
Iteration  28: 4578556.402 ops/s
Iteration  29: 4399735.272 ops/s
Iteration  30: 4594621.209 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorCompleteTest._Benchmark.benchmark_cancel":
  4471646.518 ±(99.9%) 59087.102 ops/s [Average]
  (min, avg, max) = (4304767.867, 4471646.518, 4647559.774), stdev = 88438.799
  CI (99.9%): [4412559.417, 4530733.620] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
FlowableOnErrorCompleteTest._Benchmark.benchmark_cancel  thrpt   30  4471646.518 ± 59087.102  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableLatestTest._Benchmark.benchmark_fasterSource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableLatestTest._Benchmark.benchmark_fasterSource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 305352.433 ops/s
# Warmup Iteration   2: 597040.114 ops/s
# Warmup Iteration   3: 804547.763 ops/s
# Warmup Iteration   4: 1503477.841 ops/s
# Warmup Iteration   5: 1882270.640 ops/s
# Warmup Iteration   6: 1913881.975 ops/s
# Warmup Iteration   7: 1925802.989 ops/s
# Warmup Iteration   8: 2009399.421 ops/s
# Warmup Iteration   9: 1815115.924 ops/s
# Warmup Iteration  10: 2002010.041 ops/s
# Warmup Iteration  11: 2080584.403 ops/s
# Warmup Iteration  12: 1986329.657 ops/s
# Warmup Iteration  13: 2141086.290 ops/s
# Warmup Iteration  14: 1967804.559 ops/s
# Warmup Iteration  15: 2015353.760 ops/s
# Warmup Iteration  16: 2109344.782 ops/s
# Warmup Iteration  17: 1991521.329 ops/s
# Warmup Iteration  18: 2017728.217 ops/s
# Warmup Iteration  19: 2065833.243 ops/s
# Warmup Iteration  20: 2021155.060 ops/s
# Warmup Iteration  21: 2023361.604 ops/s
# Warmup Iteration  22: 2022137.649 ops/s
# Warmup Iteration  23: 2025237.351 ops/s
# Warmup Iteration  24: 2009890.767 ops/s
# Warmup Iteration  25: 2154653.271 ops/s
# Warmup Iteration  26: 2092812.589 ops/s
# Warmup Iteration  27: 1984737.184 ops/s
# Warmup Iteration  28: 2084840.424 ops/s
# Warmup Iteration  29: 2006295.237 ops/s
# Warmup Iteration  30: 2060871.023 ops/s
Iteration   1: 1999216.707 ops/s
Iteration   2: 2051419.787 ops/s
Iteration   3: 2101249.699 ops/s
Iteration   4: 2066260.785 ops/s
Iteration   5: 1961738.252 ops/s
Iteration   6: 2030585.371 ops/s
Iteration   7: 1970782.027 ops/s
Iteration   8: 2017237.810 ops/s
Iteration   9: 2019521.429 ops/s
Iteration  10: 1985252.296 ops/s
Iteration  11: 2085463.741 ops/s
Iteration  12: 2183646.796 ops/s
Iteration  13: 1985920.367 ops/s
Iteration  14: 2041693.255 ops/s
Iteration  15: 2050247.053 ops/s
Iteration  16: 2032928.837 ops/s
Iteration  17: 2020371.078 ops/s
Iteration  18: 2060121.225 ops/s
Iteration  19: 2008585.762 ops/s
Iteration  20: 2116861.471 ops/s
Iteration  21: 1996693.528 ops/s
Iteration  22: 2064376.093 ops/s
Iteration  23: 1998209.131 ops/s
Iteration  24: 2103601.956 ops/s
Iteration  25: 2028461.908 ops/s
Iteration  26: 2061391.109 ops/s
Iteration  27: 1994134.918 ops/s
Iteration  28: 2058263.229 ops/s
Iteration  29: 2109804.255 ops/s
Iteration  30: 2020489.219 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableLatestTest._Benchmark.benchmark_fasterSource":
  2040817.636 ±(99.9%) 33096.717 ops/s [Average]
  (min, avg, max) = (1961738.252, 2040817.636, 2183646.796), stdev = 49537.612
  CI (99.9%): [2007720.920, 2073914.353] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
BlockingFlowableLatestTest._Benchmark.benchmark_fasterSource  thrpt   30  2040817.636 ± 33096.717  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorReturnTest._Benchmark.benchmark_normalBackpressure$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorReturnTest._Benchmark.benchmark_normalBackpressure

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 131009.108 ops/s
# Warmup Iteration   2: 507686.381 ops/s
# Warmup Iteration   3: 564261.708 ops/s
# Warmup Iteration   4: 569296.274 ops/s
# Warmup Iteration   5: 642802.338 ops/s
# Warmup Iteration   6: 616265.484 ops/s
# Warmup Iteration   7: 632368.289 ops/s
# Warmup Iteration   8: 607932.290 ops/s
# Warmup Iteration   9: 620017.666 ops/s
# Warmup Iteration  10: 643562.246 ops/s
# Warmup Iteration  11: 617564.038 ops/s
# Warmup Iteration  12: 608471.737 ops/s
# Warmup Iteration  13: 633851.421 ops/s
# Warmup Iteration  14: 604874.675 ops/s
# Warmup Iteration  15: 623260.354 ops/s
# Warmup Iteration  16: 630418.657 ops/s
# Warmup Iteration  17: 629856.157 ops/s
# Warmup Iteration  18: 665221.555 ops/s
# Warmup Iteration  19: 633847.582 ops/s
# Warmup Iteration  20: 661327.512 ops/s
# Warmup Iteration  21: 645103.883 ops/s
# Warmup Iteration  22: 662280.194 ops/s
# Warmup Iteration  23: 632630.485 ops/s
# Warmup Iteration  24: 632099.581 ops/s
# Warmup Iteration  25: 660745.804 ops/s
# Warmup Iteration  26: 643458.455 ops/s
# Warmup Iteration  27: 653176.900 ops/s
# Warmup Iteration  28: 663864.994 ops/s
# Warmup Iteration  29: 629145.472 ops/s
# Warmup Iteration  30: 671510.001 ops/s
Iteration   1: 638822.830 ops/s
Iteration   2: 658518.619 ops/s
Iteration   3: 638353.155 ops/s
Iteration   4: 662737.264 ops/s
Iteration   5: 658673.900 ops/s
Iteration   6: 651016.323 ops/s
Iteration   7: 642972.351 ops/s
Iteration   8: 675756.048 ops/s
Iteration   9: 643671.584 ops/s
Iteration  10: 673218.315 ops/s
Iteration  11: 636693.122 ops/s
Iteration  12: 652020.062 ops/s
Iteration  13: 630960.031 ops/s
Iteration  14: 641237.507 ops/s
Iteration  15: 605265.097 ops/s
Iteration  16: 643802.038 ops/s
Iteration  17: 646005.047 ops/s
Iteration  18: 661885.135 ops/s
Iteration  19: 641316.796 ops/s
Iteration  20: 645015.075 ops/s
Iteration  21: 663529.177 ops/s
Iteration  22: 647535.749 ops/s
Iteration  23: 659321.811 ops/s
Iteration  24: 686619.113 ops/s
Iteration  25: 630434.378 ops/s
Iteration  26: 669847.574 ops/s
Iteration  27: 639923.827 ops/s
Iteration  28: 664968.026 ops/s
Iteration  29: 631357.175 ops/s
Iteration  30: 651083.227 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorReturnTest._Benchmark.benchmark_normalBackpressure":
  649752.012 ±(99.9%) 10990.308 ops/s [Average]
  (min, avg, max) = (605265.097, 649752.012, 686619.113), stdev = 16449.777
  CI (99.9%): [638761.704, 660742.320] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score       Error  Units
FlowableOnErrorReturnTest._Benchmark.benchmark_normalBackpressure  thrpt   30  649752.012 ± 10990.308  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.BlockingObservableMostRecentTest._Benchmark.benchmark_mostRecentWithException$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.BlockingObservableMostRecentTest._Benchmark.benchmark_mostRecentWithException

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 304245.517 ops/s
# Warmup Iteration   2: 668620.327 ops/s
# Warmup Iteration   3: 709028.543 ops/s
# Warmup Iteration   4: 488902.996 ops/s
# Warmup Iteration   5: 764303.057 ops/s
# Warmup Iteration   6: 576167.610 ops/s
# Warmup Iteration   7: 742411.672 ops/s
# Warmup Iteration   8: 759566.357 ops/s
# Warmup Iteration   9: 724625.633 ops/s
# Warmup Iteration  10: 757152.220 ops/s
# Warmup Iteration  11: 722880.063 ops/s
# Warmup Iteration  12: 731225.358 ops/s
# Warmup Iteration  13: 749985.831 ops/s
# Warmup Iteration  14: 724804.160 ops/s
# Warmup Iteration  15: 755371.005 ops/s
# Warmup Iteration  16: 726282.121 ops/s
# Warmup Iteration  17: 785856.283 ops/s
# Warmup Iteration  18: 823165.371 ops/s
# Warmup Iteration  19: 773236.025 ops/s
# Warmup Iteration  20: 804247.610 ops/s
# Warmup Iteration  21: 773329.972 ops/s
# Warmup Iteration  22: 781453.658 ops/s
# Warmup Iteration  23: 783322.008 ops/s
# Warmup Iteration  24: 781259.434 ops/s
# Warmup Iteration  25: 791724.985 ops/s
# Warmup Iteration  26: 763173.454 ops/s
# Warmup Iteration  27: 790644.870 ops/s
# Warmup Iteration  28: 789045.719 ops/s
# Warmup Iteration  29: 809460.252 ops/s
# Warmup Iteration  30: 807674.199 ops/s
Iteration   1: 761873.841 ops/s
Iteration   2: 802777.750 ops/s
Iteration   3: 793773.738 ops/s
Iteration   4: 766140.903 ops/s
Iteration   5: 777611.573 ops/s
Iteration   6: 791167.351 ops/s
Iteration   7: 790776.262 ops/s
Iteration   8: 780623.924 ops/s
Iteration   9: 761447.431 ops/s
Iteration  10: 790784.278 ops/s
Iteration  11: 769967.030 ops/s
Iteration  12: 797392.499 ops/s
Iteration  13: 796646.506 ops/s
Iteration  14: 760143.877 ops/s
Iteration  15: 791604.970 ops/s
Iteration  16: 790914.281 ops/s
Iteration  17: 791305.106 ops/s
Iteration  18: 767319.053 ops/s
Iteration  19: 771335.375 ops/s
Iteration  20: 809763.797 ops/s
Iteration  21: 778666.941 ops/s
Iteration  22: 795798.547 ops/s
Iteration  23: 742356.197 ops/s
Iteration  24: 803492.917 ops/s
Iteration  25: 748649.326 ops/s
Iteration  26: 805764.450 ops/s
Iteration  27: 755622.959 ops/s
Iteration  28: 786120.505 ops/s
Iteration  29: 818013.987 ops/s
Iteration  30: 760361.349 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.BlockingObservableMostRecentTest._Benchmark.benchmark_mostRecentWithException":
  781940.557 ±(99.9%) 12851.999 ops/s [Average]
  (min, avg, max) = (742356.197, 781940.557, 818013.987), stdev = 19236.268
  CI (99.9%): [769088.558, 794792.556] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt       Score       Error  Units
BlockingObservableMostRecentTest._Benchmark.benchmark_mostRecentWithException  thrpt   30  781940.557 ± 12851.999  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorResumeNextViaFlowableTest._Benchmark.benchmark_normalBackpressure$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorResumeNextViaFlowableTest._Benchmark.benchmark_normalBackpressure

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 71498.689 ops/s
# Warmup Iteration   2: 310396.465 ops/s
# Warmup Iteration   3: 490736.927 ops/s
# Warmup Iteration   4: 488877.866 ops/s
# Warmup Iteration   5: 509117.271 ops/s
# Warmup Iteration   6: 484529.986 ops/s
# Warmup Iteration   7: 553160.531 ops/s
# Warmup Iteration   8: 528759.977 ops/s
# Warmup Iteration   9: 552300.828 ops/s
# Warmup Iteration  10: 535436.346 ops/s
# Warmup Iteration  11: 536832.122 ops/s
# Warmup Iteration  12: 551359.982 ops/s
# Warmup Iteration  13: 527555.098 ops/s
# Warmup Iteration  14: 548966.180 ops/s
# Warmup Iteration  15: 530938.563 ops/s
# Warmup Iteration  16: 547997.487 ops/s
# Warmup Iteration  17: 567063.097 ops/s
# Warmup Iteration  18: 561078.369 ops/s
# Warmup Iteration  19: 564440.544 ops/s
# Warmup Iteration  20: 560399.601 ops/s
# Warmup Iteration  21: 591561.212 ops/s
# Warmup Iteration  22: 579307.463 ops/s
# Warmup Iteration  23: 563465.087 ops/s
# Warmup Iteration  24: 554327.572 ops/s
# Warmup Iteration  25: 566155.699 ops/s
# Warmup Iteration  26: 557877.705 ops/s
# Warmup Iteration  27: 584446.210 ops/s
# Warmup Iteration  28: 566819.742 ops/s
# Warmup Iteration  29: 558681.688 ops/s
# Warmup Iteration  30: 591449.181 ops/s
Iteration   1: 554982.341 ops/s
Iteration   2: 571631.168 ops/s
Iteration   3: 557103.006 ops/s
Iteration   4: 582960.652 ops/s
Iteration   5: 561102.999 ops/s
Iteration   6: 553880.303 ops/s
Iteration   7: 570924.698 ops/s
Iteration   8: 561426.126 ops/s
Iteration   9: 589594.329 ops/s
Iteration  10: 543592.208 ops/s
Iteration  11: 563725.874 ops/s
Iteration  12: 583616.676 ops/s
Iteration  13: 545888.653 ops/s
Iteration  14: 572491.287 ops/s
Iteration  15: 564140.253 ops/s
Iteration  16: 556274.255 ops/s
Iteration  17: 579404.049 ops/s
Iteration  18: 564581.981 ops/s
Iteration  19: 568171.014 ops/s
Iteration  20: 569169.148 ops/s
Iteration  21: 559472.790 ops/s
Iteration  22: 565780.391 ops/s
Iteration  23: 561811.515 ops/s
Iteration  24: 578300.654 ops/s
Iteration  25: 551521.913 ops/s
Iteration  26: 563486.484 ops/s
Iteration  27: 559970.435 ops/s
Iteration  28: 583052.818 ops/s
Iteration  29: 553246.416 ops/s
Iteration  30: 510511.415 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorResumeNextViaFlowableTest._Benchmark.benchmark_normalBackpressure":
  563393.862 ±(99.9%) 10112.541 ops/s [Average]
  (min, avg, max) = (510511.415, 563393.862, 589594.329), stdev = 15135.976
  CI (99.9%): [553281.321, 573506.403] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt       Score       Error  Units
FlowableOnErrorResumeNextViaFlowableTest._Benchmark.benchmark_normalBackpressure  thrpt   30  563393.862 ± 10112.541  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromTest._Benchmark.benchmark_unsubscription$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromTest._Benchmark.benchmark_unsubscription

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 196860.770 ops/s
# Warmup Iteration   2: 1191085.983 ops/s
# Warmup Iteration   3: 1661784.531 ops/s
# Warmup Iteration   4: 1858505.156 ops/s
# Warmup Iteration   5: 2085580.030 ops/s
# Warmup Iteration   6: 2142150.480 ops/s
# Warmup Iteration   7: 2056304.166 ops/s
# Warmup Iteration   8: 2138736.373 ops/s
# Warmup Iteration   9: 2042621.958 ops/s
# Warmup Iteration  10: 2105710.976 ops/s
# Warmup Iteration  11: 2125939.669 ops/s
# Warmup Iteration  12: 2096499.399 ops/s
# Warmup Iteration  13: 2204417.304 ops/s
# Warmup Iteration  14: 2067886.195 ops/s
# Warmup Iteration  15: 2028121.840 ops/s
# Warmup Iteration  16: 2123925.766 ops/s
# Warmup Iteration  17: 2087452.389 ops/s
# Warmup Iteration  18: 2160221.470 ops/s
# Warmup Iteration  19: 2108070.295 ops/s
# Warmup Iteration  20: 2108628.585 ops/s
# Warmup Iteration  21: 2147000.228 ops/s
# Warmup Iteration  22: 2108608.377 ops/s
# Warmup Iteration  23: 2179064.422 ops/s
# Warmup Iteration  24: 2067565.572 ops/s
# Warmup Iteration  25: 2126319.099 ops/s
# Warmup Iteration  26: 2115138.825 ops/s
# Warmup Iteration  27: 2176025.431 ops/s
# Warmup Iteration  28: 2102254.410 ops/s
# Warmup Iteration  29: 2083073.294 ops/s
# Warmup Iteration  30: 2136385.890 ops/s
Iteration   1: 2101713.812 ops/s
Iteration   2: 2150886.840 ops/s
Iteration   3: 2091843.511 ops/s
Iteration   4: 2129950.050 ops/s
Iteration   5: 2141293.513 ops/s
Iteration   6: 2095030.551 ops/s
Iteration   7: 2233573.862 ops/s
Iteration   8: 2185251.734 ops/s
Iteration   9: 2112839.328 ops/s
Iteration  10: 2061783.601 ops/s
Iteration  11: 2158994.706 ops/s
Iteration  12: 2069772.536 ops/s
Iteration  13: 2136893.176 ops/s
Iteration  14: 2033624.866 ops/s
Iteration  15: 2194093.061 ops/s
Iteration  16: 2100721.280 ops/s
Iteration  17: 2071748.820 ops/s
Iteration  18: 2220587.956 ops/s
Iteration  19: 2044996.578 ops/s
Iteration  20: 2119065.127 ops/s
Iteration  21: 2108503.727 ops/s
Iteration  22: 2138327.819 ops/s
Iteration  23: 2096246.638 ops/s
Iteration  24: 2089109.630 ops/s
Iteration  25: 2147952.621 ops/s
Iteration  26: 2031880.272 ops/s
Iteration  27: 2098167.735 ops/s
Iteration  28: 2106188.568 ops/s
Iteration  29: 2065642.623 ops/s
Iteration  30: 2074623.647 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromTest._Benchmark.benchmark_unsubscription":
  2113710.273 ±(99.9%) 33887.119 ops/s [Average]
  (min, avg, max) = (2031880.272, 2113710.273, 2233573.862), stdev = 50720.649
  CI (99.9%): [2079823.154, 2147597.392] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
FlowableWithLatestFromTest._Benchmark.benchmark_unsubscription  thrpt   30  2113710.273 ± 33887.119  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeCacheTest._Benchmark.benchmark_onlineSuccess$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeCacheTest._Benchmark.benchmark_onlineSuccess

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 212955.904 ops/s
# Warmup Iteration   2: 457890.835 ops/s
# Warmup Iteration   3: 954930.386 ops/s
# Warmup Iteration   4: 1125170.547 ops/s
# Warmup Iteration   5: 1278278.055 ops/s
# Warmup Iteration   6: 1284057.634 ops/s
# Warmup Iteration   7: 1246467.124 ops/s
# Warmup Iteration   8: 1302432.080 ops/s
# Warmup Iteration   9: 1254714.203 ops/s
# Warmup Iteration  10: 1248701.097 ops/s
# Warmup Iteration  11: 1284457.237 ops/s
# Warmup Iteration  12: 1257521.755 ops/s
# Warmup Iteration  13: 1294566.576 ops/s
# Warmup Iteration  14: 1251548.340 ops/s
# Warmup Iteration  15: 1303314.921 ops/s
# Warmup Iteration  16: 1235376.384 ops/s
# Warmup Iteration  17: 1276264.683 ops/s
# Warmup Iteration  18: 1261398.682 ops/s
# Warmup Iteration  19: 1277924.002 ops/s
# Warmup Iteration  20: 1319374.113 ops/s
# Warmup Iteration  21: 1191396.504 ops/s
# Warmup Iteration  22: 1313111.873 ops/s
# Warmup Iteration  23: 1295704.469 ops/s
# Warmup Iteration  24: 1223027.039 ops/s
# Warmup Iteration  25: 1268321.691 ops/s
# Warmup Iteration  26: 1287594.513 ops/s
# Warmup Iteration  27: 1230931.919 ops/s
# Warmup Iteration  28: 1262985.940 ops/s
# Warmup Iteration  29: 1296658.450 ops/s
# Warmup Iteration  30: 1239227.169 ops/s
Iteration   1: 1299532.039 ops/s
Iteration   2: 1239416.845 ops/s
Iteration   3: 1299199.206 ops/s
Iteration   4: 1292149.959 ops/s
Iteration   5: 1245568.706 ops/s
Iteration   6: 1316117.675 ops/s
Iteration   7: 1225430.009 ops/s
Iteration   8: 1328565.714 ops/s
Iteration   9: 1278378.237 ops/s
Iteration  10: 1244513.671 ops/s
Iteration  11: 1308008.060 ops/s
Iteration  12: 1261472.553 ops/s
Iteration  13: 1318789.286 ops/s
Iteration  14: 1228046.438 ops/s
Iteration  15: 1297236.091 ops/s
Iteration  16: 1261520.196 ops/s
Iteration  17: 1263580.389 ops/s
Iteration  18: 1305936.255 ops/s
Iteration  19: 1245583.165 ops/s
Iteration  20: 1287814.037 ops/s
Iteration  21: 1264839.031 ops/s
Iteration  22: 1307897.613 ops/s
Iteration  23: 1198990.796 ops/s
Iteration  24: 1247749.150 ops/s
Iteration  25: 1090154.239 ops/s
Iteration  26: 1276319.734 ops/s
Iteration  27: 1231400.581 ops/s
Iteration  28: 1297505.272 ops/s
Iteration  29: 1277982.126 ops/s
Iteration  30: 1265465.863 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeCacheTest._Benchmark.benchmark_onlineSuccess":
  1266838.764 ±(99.9%) 30927.879 ops/s [Average]
  (min, avg, max) = (1090154.239, 1266838.764, 1328565.714), stdev = 46291.396
  CI (99.9%): [1235910.886, 1297766.643] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score       Error  Units
MaybeCacheTest._Benchmark.benchmark_onlineSuccess  thrpt   30  1266838.764 ± 30927.879  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleTakeUntilTest._Benchmark.benchmark_otherOnNextPublisher$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleTakeUntilTest._Benchmark.benchmark_otherOnNextPublisher

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 108481.015 ops/s
# Warmup Iteration   2: 405843.379 ops/s
# Warmup Iteration   3: 532193.323 ops/s
# Warmup Iteration   4: 561220.214 ops/s
# Warmup Iteration   5: 578043.631 ops/s
# Warmup Iteration   6: 563511.676 ops/s
# Warmup Iteration   7: 563464.185 ops/s
# Warmup Iteration   8: 579142.191 ops/s
# Warmup Iteration   9: 548218.196 ops/s
# Warmup Iteration  10: 543155.805 ops/s
# Warmup Iteration  11: 561729.626 ops/s
# Warmup Iteration  12: 524171.126 ops/s
# Warmup Iteration  13: 575541.539 ops/s
# Warmup Iteration  14: 563187.653 ops/s
# Warmup Iteration  15: 572643.490 ops/s
# Warmup Iteration  16: 602226.848 ops/s
# Warmup Iteration  17: 613627.836 ops/s
# Warmup Iteration  18: 584237.153 ops/s
# Warmup Iteration  19: 591850.932 ops/s
# Warmup Iteration  20: 607450.154 ops/s
# Warmup Iteration  21: 594009.450 ops/s
# Warmup Iteration  22: 602103.252 ops/s
# Warmup Iteration  23: 579235.564 ops/s
# Warmup Iteration  24: 582055.025 ops/s
# Warmup Iteration  25: 612173.181 ops/s
# Warmup Iteration  26: 573475.430 ops/s
# Warmup Iteration  27: 605975.621 ops/s
# Warmup Iteration  28: 582328.697 ops/s
# Warmup Iteration  29: 605177.246 ops/s
# Warmup Iteration  30: 597645.146 ops/s
Iteration   1: 567789.618 ops/s
Iteration   2: 606409.243 ops/s
Iteration   3: 574302.249 ops/s
Iteration   4: 610564.551 ops/s
Iteration   5: 587333.633 ops/s
Iteration   6: 572746.772 ops/s
Iteration   7: 616362.597 ops/s
Iteration   8: 570921.794 ops/s
Iteration   9: 598391.855 ops/s
Iteration  10: 576148.509 ops/s
Iteration  11: 612153.383 ops/s
Iteration  12: 600274.418 ops/s
Iteration  13: 574708.302 ops/s
Iteration  14: 581486.345 ops/s
Iteration  15: 587999.131 ops/s
Iteration  16: 584388.674 ops/s
Iteration  17: 585644.339 ops/s
Iteration  18: 608807.512 ops/s
Iteration  19: 569345.383 ops/s
Iteration  20: 622990.145 ops/s
Iteration  21: 585977.413 ops/s
Iteration  22: 580059.261 ops/s
Iteration  23: 541737.836 ops/s
Iteration  24: 604093.470 ops/s
Iteration  25: 602152.285 ops/s
Iteration  26: 607671.093 ops/s
Iteration  27: 573413.678 ops/s
Iteration  28: 594580.328 ops/s
Iteration  29: 620276.193 ops/s
Iteration  30: 572772.515 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntilTest._Benchmark.benchmark_otherOnNextPublisher":
  589716.751 ±(99.9%) 12709.076 ops/s [Average]
  (min, avg, max) = (541737.836, 589716.751, 622990.145), stdev = 19022.348
  CI (99.9%): [577007.675, 602425.827] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score       Error  Units
SingleTakeUntilTest._Benchmark.benchmark_otherOnNextPublisher  thrpt   30  589716.751 ± 12709.076  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.BlockingObservableToIteratorTest._Benchmark.benchmark_disposedIteratorHasNextReturns$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.BlockingObservableToIteratorTest._Benchmark.benchmark_disposedIteratorHasNextReturns

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 177598.934 ops/s
# Warmup Iteration   2: 500117.831 ops/s
# Warmup Iteration   3: 509452.145 ops/s
# Warmup Iteration   4: 586792.042 ops/s
# Warmup Iteration   5: 624771.813 ops/s
# Warmup Iteration   6: 592868.026 ops/s
# Warmup Iteration   7: 583494.181 ops/s
# Warmup Iteration   8: 597041.640 ops/s
# Warmup Iteration   9: 608420.567 ops/s
# Warmup Iteration  10: 584679.556 ops/s
# Warmup Iteration  11: 591587.619 ops/s
# Warmup Iteration  12: 618638.116 ops/s
# Warmup Iteration  13: 572251.180 ops/s
# Warmup Iteration  14: 613203.597 ops/s
# Warmup Iteration  15: 593977.286 ops/s
# Warmup Iteration  16: 602452.870 ops/s
# Warmup Iteration  17: 618249.586 ops/s
# Warmup Iteration  18: 617856.290 ops/s
# Warmup Iteration  19: 634136.034 ops/s
# Warmup Iteration  20: 633275.494 ops/s
# Warmup Iteration  21: 618297.998 ops/s
# Warmup Iteration  22: 631863.488 ops/s
# Warmup Iteration  23: 627819.607 ops/s
# Warmup Iteration  24: 620043.248 ops/s
# Warmup Iteration  25: 632605.300 ops/s
# Warmup Iteration  26: 602324.549 ops/s
# Warmup Iteration  27: 645571.178 ops/s
# Warmup Iteration  28: 609927.055 ops/s
# Warmup Iteration  29: 629812.098 ops/s
# Warmup Iteration  30: 632929.633 ops/s
Iteration   1: 613644.951 ops/s
Iteration   2: 619856.214 ops/s
Iteration   3: 629316.220 ops/s
Iteration   4: 620431.838 ops/s
Iteration   5: 622531.621 ops/s
Iteration   6: 599201.474 ops/s
Iteration   7: 619550.302 ops/s
Iteration   8: 647286.144 ops/s
Iteration   9: 606444.901 ops/s
Iteration  10: 652776.248 ops/s
Iteration  11: 607071.950 ops/s
Iteration  12: 644173.654 ops/s
Iteration  13: 618995.379 ops/s
Iteration  14: 620977.990 ops/s
Iteration  15: 627207.191 ops/s
Iteration  16: 641281.434 ops/s
Iteration  17: 640744.108 ops/s
Iteration  18: 597714.053 ops/s
Iteration  19: 628298.642 ops/s
Iteration  20: 493574.560 ops/s
Iteration  21: 618346.888 ops/s
Iteration  22: 631260.086 ops/s
Iteration  23: 611024.026 ops/s
Iteration  24: 617404.656 ops/s
Iteration  25: 597740.028 ops/s
Iteration  26: 631315.423 ops/s
Iteration  27: 610496.922 ops/s
Iteration  28: 623106.338 ops/s
Iteration  29: 648742.240 ops/s
Iteration  30: 608439.070 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.BlockingObservableToIteratorTest._Benchmark.benchmark_disposedIteratorHasNextReturns":
  618298.485 ±(99.9%) 18659.348 ops/s [Average]
  (min, avg, max) = (493574.560, 618298.485, 652776.248), stdev = 27928.436
  CI (99.9%): [599639.137, 636957.833] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              Mode  Cnt       Score       Error  Units
BlockingObservableToIteratorTest._Benchmark.benchmark_disposedIteratorHasNextReturns  thrpt   30  618298.485 ± 18659.348  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_cancelWithoutWindowSkip$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_cancelWithoutWindowSkip

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 642882.941 ops/s
# Warmup Iteration   2: 2358593.430 ops/s
# Warmup Iteration   3: 2995963.997 ops/s
# Warmup Iteration   4: 3406358.534 ops/s
# Warmup Iteration   5: 3517955.240 ops/s
# Warmup Iteration   6: 3339327.678 ops/s
# Warmup Iteration   7: 3439269.453 ops/s
# Warmup Iteration   8: 3482949.051 ops/s
# Warmup Iteration   9: 3378669.760 ops/s
# Warmup Iteration  10: 3521307.097 ops/s
# Warmup Iteration  11: 3515407.796 ops/s
# Warmup Iteration  12: 3338148.391 ops/s
# Warmup Iteration  13: 3510241.638 ops/s
# Warmup Iteration  14: 3413156.484 ops/s
# Warmup Iteration  15: 3403394.791 ops/s
# Warmup Iteration  16: 3580320.279 ops/s
# Warmup Iteration  17: 3385153.371 ops/s
# Warmup Iteration  18: 3508931.219 ops/s
# Warmup Iteration  19: 3407363.912 ops/s
# Warmup Iteration  20: 3597954.943 ops/s
# Warmup Iteration  21: 3398422.193 ops/s
# Warmup Iteration  22: 3482284.975 ops/s
# Warmup Iteration  23: 3496075.267 ops/s
# Warmup Iteration  24: 3380052.303 ops/s
# Warmup Iteration  25: 3473088.205 ops/s
# Warmup Iteration  26: 3448478.165 ops/s
# Warmup Iteration  27: 3239649.148 ops/s
# Warmup Iteration  28: 3472922.704 ops/s
# Warmup Iteration  29: 3468746.821 ops/s
# Warmup Iteration  30: 3495593.856 ops/s
Iteration   1: 3417331.617 ops/s
Iteration   2: 3438373.088 ops/s
Iteration   3: 3601444.072 ops/s
Iteration   4: 3350748.273 ops/s
Iteration   5: 3448122.193 ops/s
Iteration   6: 3534545.462 ops/s
Iteration   7: 3389366.363 ops/s
Iteration   8: 3521677.338 ops/s
Iteration   9: 3331141.438 ops/s
Iteration  10: 3457344.394 ops/s
Iteration  11: 3524958.436 ops/s
Iteration  12: 3317396.199 ops/s
Iteration  13: 3554489.696 ops/s
Iteration  14: 3359807.483 ops/s
Iteration  15: 3441661.446 ops/s
Iteration  16: 3480850.038 ops/s
Iteration  17: 3480703.833 ops/s
Iteration  18: 3552549.934 ops/s
Iteration  19: 3362548.576 ops/s
Iteration  20: 3540771.992 ops/s
Iteration  21: 3349462.811 ops/s
Iteration  22: 3542218.217 ops/s
Iteration  23: 3399812.618 ops/s
Iteration  24: 3532585.633 ops/s
Iteration  25: 3489118.391 ops/s
Iteration  26: 3379497.228 ops/s
Iteration  27: 3466392.474 ops/s
Iteration  28: 3505235.620 ops/s
Iteration  29: 3281906.099 ops/s
Iteration  30: 3479428.791 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_cancelWithoutWindowSkip":
  3451049.658 ±(99.9%) 55707.843 ops/s [Average]
  (min, avg, max) = (3281906.099, 3451049.658, 3601444.072), stdev = 83380.883
  CI (99.9%): [3395341.815, 3506757.502] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score       Error  Units
FlowableWindowWithSizeTest._Benchmark.benchmark_cancelWithoutWindowSkip  thrpt   30  3451049.658 ± 55707.843  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSourceTest._Benchmark.benchmark_completeInlineExactLatest$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSourceTest._Benchmark.benchmark_completeInlineExactLatest

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 282805.299 ops/s
# Warmup Iteration   2: 1591972.015 ops/s
# Warmup Iteration   3: 2054448.818 ops/s
# Warmup Iteration   4: 2415828.397 ops/s
# Warmup Iteration   5: 2414900.308 ops/s
# Warmup Iteration   6: 2462538.380 ops/s
# Warmup Iteration   7: 2367611.458 ops/s
# Warmup Iteration   8: 2467908.288 ops/s
# Warmup Iteration   9: 2516018.689 ops/s
# Warmup Iteration  10: 2392852.859 ops/s
# Warmup Iteration  11: 2400069.775 ops/s
# Warmup Iteration  12: 2472256.780 ops/s
# Warmup Iteration  13: 2327757.121 ops/s
# Warmup Iteration  14: 2480438.864 ops/s
# Warmup Iteration  15: 2396043.454 ops/s
# Warmup Iteration  16: 2433323.589 ops/s
# Warmup Iteration  17: 2503499.271 ops/s
# Warmup Iteration  18: 2463863.600 ops/s
# Warmup Iteration  19: 2552428.324 ops/s
# Warmup Iteration  20: 2371631.948 ops/s
# Warmup Iteration  21: 2475294.511 ops/s
# Warmup Iteration  22: 2386346.144 ops/s
# Warmup Iteration  23: 2526320.428 ops/s
# Warmup Iteration  24: 2309013.069 ops/s
# Warmup Iteration  25: 2481067.350 ops/s
# Warmup Iteration  26: 2430768.298 ops/s
# Warmup Iteration  27: 2526353.545 ops/s
# Warmup Iteration  28: 2550189.499 ops/s
# Warmup Iteration  29: 2470096.659 ops/s
# Warmup Iteration  30: 2533682.978 ops/s
Iteration   1: 2348014.498 ops/s
Iteration   2: 2513152.075 ops/s
Iteration   3: 2473653.187 ops/s
Iteration   4: 2449535.296 ops/s
Iteration   5: 2480716.918 ops/s
Iteration   6: 2469035.849 ops/s
Iteration   7: 2534338.451 ops/s
Iteration   8: 2447742.250 ops/s
Iteration   9: 2427996.862 ops/s
Iteration  10: 2486065.238 ops/s
Iteration  11: 2524460.802 ops/s
Iteration  12: 2511685.580 ops/s
Iteration  13: 2421889.041 ops/s
Iteration  14: 2569281.614 ops/s
Iteration  15: 1985091.555 ops/s
Iteration  16: 2516104.615 ops/s
Iteration  17: 2421430.364 ops/s
Iteration  18: 2559319.999 ops/s
Iteration  19: 2508492.466 ops/s
Iteration  20: 2412578.805 ops/s
Iteration  21: 2465655.603 ops/s
Iteration  22: 2522600.547 ops/s
Iteration  23: 2544405.902 ops/s
Iteration  24: 2431172.689 ops/s
Iteration  25: 2450567.539 ops/s
Iteration  26: 2555834.336 ops/s
Iteration  27: 2435684.132 ops/s
Iteration  28: 2430361.394 ops/s
Iteration  29: 2559332.278 ops/s
Iteration  30: 2463765.227 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSourceTest._Benchmark.benchmark_completeInlineExactLatest":
  2463998.837 ±(99.9%) 70232.747 ops/s [Average]
  (min, avg, max) = (1985091.555, 2463998.837, 2569281.614), stdev = 105121.077
  CI (99.9%): [2393766.090, 2534231.584] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
FlowableFromSourceTest._Benchmark.benchmark_completeInlineExactLatest  thrpt   30  2463998.837 ± 70232.747  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherTest._Benchmark.benchmark_errorWithOnNext$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherTest._Benchmark.benchmark_errorWithOnNext

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 75152.657 ops/s
# Warmup Iteration   2: 339631.171 ops/s
# Warmup Iteration   3: 565720.225 ops/s
# Warmup Iteration   4: 638847.388 ops/s
# Warmup Iteration   5: 643470.037 ops/s
# Warmup Iteration   6: 636454.565 ops/s
# Warmup Iteration   7: 637413.305 ops/s
# Warmup Iteration   8: 639850.265 ops/s
# Warmup Iteration   9: 638048.082 ops/s
# Warmup Iteration  10: 595982.552 ops/s
# Warmup Iteration  11: 627790.840 ops/s
# Warmup Iteration  12: 595430.856 ops/s
# Warmup Iteration  13: 630111.750 ops/s
# Warmup Iteration  14: 653329.244 ops/s
# Warmup Iteration  15: 638834.796 ops/s
# Warmup Iteration  16: 657776.529 ops/s
# Warmup Iteration  17: 652537.311 ops/s
# Warmup Iteration  18: 677101.942 ops/s
# Warmup Iteration  19: 674565.815 ops/s
# Warmup Iteration  20: 671432.888 ops/s
# Warmup Iteration  21: 673146.543 ops/s
# Warmup Iteration  22: 652904.194 ops/s
# Warmup Iteration  23: 702174.141 ops/s
# Warmup Iteration  24: 672481.124 ops/s
# Warmup Iteration  25: 658197.502 ops/s
# Warmup Iteration  26: 664072.886 ops/s
# Warmup Iteration  27: 680670.079 ops/s
# Warmup Iteration  28: 659395.017 ops/s
# Warmup Iteration  29: 706710.577 ops/s
# Warmup Iteration  30: 687678.273 ops/s
Iteration   1: 661037.105 ops/s
Iteration   2: 711153.933 ops/s
Iteration   3: 656701.800 ops/s
Iteration   4: 654467.616 ops/s
Iteration   5: 684371.831 ops/s
Iteration   6: 653147.369 ops/s
Iteration   7: 677700.385 ops/s
Iteration   8: 692894.473 ops/s
Iteration   9: 667712.997 ops/s
Iteration  10: 680536.476 ops/s
Iteration  11: 673365.933 ops/s
Iteration  12: 687867.118 ops/s
Iteration  13: 639511.921 ops/s
Iteration  14: 677405.179 ops/s
Iteration  15: 697350.457 ops/s
Iteration  16: 686393.203 ops/s
Iteration  17: 648658.490 ops/s
Iteration  18: 676650.241 ops/s
Iteration  19: 681222.299 ops/s
Iteration  20: 674837.026 ops/s
Iteration  21: 698346.396 ops/s
Iteration  22: 668422.773 ops/s
Iteration  23: 679538.234 ops/s
Iteration  24: 679015.046 ops/s
Iteration  25: 685321.190 ops/s
Iteration  26: 673871.191 ops/s
Iteration  27: 669427.220 ops/s
Iteration  28: 673460.028 ops/s
Iteration  29: 640347.601 ops/s
Iteration  30: 678249.426 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherTest._Benchmark.benchmark_errorWithOnNext":
  674299.499 ±(99.9%) 11094.042 ops/s [Average]
  (min, avg, max) = (639511.921, 674299.499, 711153.933), stdev = 16605.042
  CI (99.9%): [663205.456, 685393.541] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score       Error  Units
MaybeDelayOtherTest._Benchmark.benchmark_errorWithOnNext  thrpt   30  674299.499 ± 11094.042  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSourceTest._Benchmark.benchmark_completeInlineLatest$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSourceTest._Benchmark.benchmark_completeInlineLatest

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 347225.032 ops/s
# Warmup Iteration   2: 1521229.318 ops/s
# Warmup Iteration   3: 2004173.647 ops/s
# Warmup Iteration   4: 2306450.470 ops/s
# Warmup Iteration   5: 2477616.747 ops/s
# Warmup Iteration   6: 2361182.018 ops/s
# Warmup Iteration   7: 2279550.426 ops/s
# Warmup Iteration   8: 2491686.034 ops/s
# Warmup Iteration   9: 2411316.970 ops/s
# Warmup Iteration  10: 2346442.658 ops/s
# Warmup Iteration  11: 2347508.119 ops/s
# Warmup Iteration  12: 2441944.658 ops/s
# Warmup Iteration  13: 2352175.924 ops/s
# Warmup Iteration  14: 2487887.710 ops/s
# Warmup Iteration  15: 2354060.524 ops/s
# Warmup Iteration  16: 2435288.167 ops/s
# Warmup Iteration  17: 2424323.902 ops/s
# Warmup Iteration  18: 2426213.857 ops/s
# Warmup Iteration  19: 2508340.431 ops/s
# Warmup Iteration  20: 2403895.363 ops/s
# Warmup Iteration  21: 2467570.906 ops/s
# Warmup Iteration  22: 2459290.421 ops/s
# Warmup Iteration  23: 2446593.841 ops/s
# Warmup Iteration  24: 2365753.287 ops/s
# Warmup Iteration  25: 2497600.975 ops/s
# Warmup Iteration  26: 2405461.959 ops/s
# Warmup Iteration  27: 2493535.592 ops/s
# Warmup Iteration  28: 2352425.668 ops/s
# Warmup Iteration  29: 2531465.707 ops/s
# Warmup Iteration  30: 2392605.682 ops/s
Iteration   1: 2497730.259 ops/s
Iteration   2: 2448470.576 ops/s
Iteration   3: 2434096.874 ops/s
Iteration   4: 2481798.467 ops/s
Iteration   5: 2384061.579 ops/s
Iteration   6: 2507344.993 ops/s
Iteration   7: 2461382.076 ops/s
Iteration   8: 2365056.002 ops/s
Iteration   9: 2276908.800 ops/s
Iteration  10: 2141770.461 ops/s
Iteration  11: 2478842.430 ops/s
Iteration  12: 2475889.218 ops/s
Iteration  13: 2501970.168 ops/s
Iteration  14: 2387007.064 ops/s
Iteration  15: 2479559.454 ops/s
Iteration  16: 2472816.359 ops/s
Iteration  17: 2430068.250 ops/s
Iteration  18: 2491151.461 ops/s
Iteration  19: 2450503.520 ops/s
Iteration  20: 2540837.545 ops/s
Iteration  21: 2405737.646 ops/s
Iteration  22: 2434091.149 ops/s
Iteration  23: 2397318.792 ops/s
Iteration  24: 2433048.001 ops/s
Iteration  25: 2539742.651 ops/s
Iteration  26: 2372142.658 ops/s
Iteration  27: 2515506.959 ops/s
Iteration  28: 2358216.315 ops/s
Iteration  29: 2492496.661 ops/s
Iteration  30: 2411399.873 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSourceTest._Benchmark.benchmark_completeInlineLatest":
  2435565.542 ±(99.9%) 54440.710 ops/s [Average]
  (min, avg, max) = (2141770.461, 2435565.542, 2540837.545), stdev = 81484.298
  CI (99.9%): [2381124.832, 2490006.252] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
FlowableFromSourceTest._Benchmark.benchmark_completeInlineLatest  thrpt   30  2435565.542 ± 54440.710  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilTest._Benchmark.benchmark_backpressure$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilTest._Benchmark.benchmark_backpressure

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 322102.861 ops/s
# Warmup Iteration   2: 1236332.728 ops/s
# Warmup Iteration   3: 2198537.773 ops/s
# Warmup Iteration   4: 2333002.101 ops/s
# Warmup Iteration   5: 2196656.270 ops/s
# Warmup Iteration   6: 2076792.737 ops/s
# Warmup Iteration   7: 2078448.379 ops/s
# Warmup Iteration   8: 2115680.153 ops/s
# Warmup Iteration   9: 2297396.942 ops/s
# Warmup Iteration  10: 2303021.707 ops/s
# Warmup Iteration  11: 2276468.818 ops/s
# Warmup Iteration  12: 2297904.899 ops/s
# Warmup Iteration  13: 2370924.901 ops/s
# Warmup Iteration  14: 2288419.483 ops/s
# Warmup Iteration  15: 2323294.654 ops/s
# Warmup Iteration  16: 2243568.686 ops/s
# Warmup Iteration  17: 2361307.699 ops/s
# Warmup Iteration  18: 2355189.043 ops/s
# Warmup Iteration  19: 2286172.588 ops/s
# Warmup Iteration  20: 2391496.522 ops/s
# Warmup Iteration  21: 2405484.351 ops/s
# Warmup Iteration  22: 2395856.676 ops/s
# Warmup Iteration  23: 2271895.198 ops/s
# Warmup Iteration  24: 2303486.523 ops/s
# Warmup Iteration  25: 2295134.608 ops/s
# Warmup Iteration  26: 2270390.493 ops/s
# Warmup Iteration  27: 2260576.534 ops/s
# Warmup Iteration  28: 2360593.145 ops/s
# Warmup Iteration  29: 2319755.323 ops/s
# Warmup Iteration  30: 2350717.568 ops/s
Iteration   1: 2264323.037 ops/s
Iteration   2: 2338007.003 ops/s
Iteration   3: 2407313.944 ops/s
Iteration   4: 2300855.185 ops/s
Iteration   5: 2291402.526 ops/s
Iteration   6: 2327229.655 ops/s
Iteration   7: 2229979.239 ops/s
Iteration   8: 2343373.448 ops/s
Iteration   9: 2258555.144 ops/s
Iteration  10: 2362221.458 ops/s
Iteration  11: 2239229.437 ops/s
Iteration  12: 2398549.422 ops/s
Iteration  13: 2327888.874 ops/s
Iteration  14: 2266687.071 ops/s
Iteration  15: 2317125.624 ops/s
Iteration  16: 2401659.633 ops/s
Iteration  17: 2288241.184 ops/s
Iteration  18: 2371317.329 ops/s
Iteration  19: 2309697.755 ops/s
Iteration  20: 2300156.815 ops/s
Iteration  21: 2324585.669 ops/s
Iteration  22: 2270270.389 ops/s
Iteration  23: 2455452.504 ops/s
Iteration  24: 2249015.815 ops/s
Iteration  25: 2397695.884 ops/s
Iteration  26: 2276135.094 ops/s
Iteration  27: 2407078.873 ops/s
Iteration  28: 2273053.222 ops/s
Iteration  29: 2342232.877 ops/s
Iteration  30: 2359268.116 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilTest._Benchmark.benchmark_backpressure":
  2323286.741 ±(99.9%) 38888.044 ops/s [Average]
  (min, avg, max) = (2229979.239, 2323286.741, 2455452.504), stdev = 58205.799
  CI (99.9%): [2284398.697, 2362174.785] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
FlowableTakeUntilTest._Benchmark.benchmark_backpressure  thrpt   30  2323286.741 ± 38888.044  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorXTest._Benchmark.benchmark_onErrorReturnDispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorXTest._Benchmark.benchmark_onErrorReturnDispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 929573.003 ops/s
# Warmup Iteration   2: 4343610.868 ops/s
# Warmup Iteration   3: 5031999.468 ops/s
# Warmup Iteration   4: 5752289.617 ops/s
# Warmup Iteration   5: 5930623.308 ops/s
# Warmup Iteration   6: 5772621.034 ops/s
# Warmup Iteration   7: 5879790.776 ops/s
# Warmup Iteration   8: 6187591.972 ops/s
# Warmup Iteration   9: 5744348.679 ops/s
# Warmup Iteration  10: 6254495.792 ops/s
# Warmup Iteration  11: 5856774.912 ops/s
# Warmup Iteration  12: 5891159.933 ops/s
# Warmup Iteration  13: 5993550.262 ops/s
# Warmup Iteration  14: 5905204.318 ops/s
# Warmup Iteration  15: 5949576.761 ops/s
# Warmup Iteration  16: 5961933.116 ops/s
# Warmup Iteration  17: 5672944.953 ops/s
# Warmup Iteration  18: 6075535.875 ops/s
# Warmup Iteration  19: 5634021.762 ops/s
# Warmup Iteration  20: 5996038.762 ops/s
# Warmup Iteration  21: 5930988.745 ops/s
# Warmup Iteration  22: 5791760.946 ops/s
# Warmup Iteration  23: 6010624.668 ops/s
# Warmup Iteration  24: 5867488.894 ops/s
# Warmup Iteration  25: 5723906.034 ops/s
# Warmup Iteration  26: 6026993.613 ops/s
# Warmup Iteration  27: 5862239.844 ops/s
# Warmup Iteration  28: 5832088.438 ops/s
# Warmup Iteration  29: 5858233.495 ops/s
# Warmup Iteration  30: 5967226.285 ops/s
Iteration   1: 5850118.203 ops/s
Iteration   2: 5898347.480 ops/s
Iteration   3: 6205331.448 ops/s
Iteration   4: 4674728.172 ops/s
Iteration   5: 5690841.911 ops/s
Iteration   6: 5892321.143 ops/s
Iteration   7: 5953922.252 ops/s
Iteration   8: 5774357.916 ops/s
Iteration   9: 5900501.681 ops/s
Iteration  10: 6103082.955 ops/s
Iteration  11: 5644455.501 ops/s
Iteration  12: 6113110.720 ops/s
Iteration  13: 5849586.322 ops/s
Iteration  14: 5871711.488 ops/s
Iteration  15: 5941619.812 ops/s
Iteration  16: 5998994.960 ops/s
Iteration  17: 5809506.561 ops/s
Iteration  18: 6002430.564 ops/s
Iteration  19: 5707382.276 ops/s
Iteration  20: 6032874.859 ops/s
Iteration  21: 6104271.579 ops/s
Iteration  22: 5798835.317 ops/s
Iteration  23: 6016141.907 ops/s
Iteration  24: 5792919.707 ops/s
Iteration  25: 5950274.719 ops/s
Iteration  26: 6150607.992 ops/s
Iteration  27: 5702000.590 ops/s
Iteration  28: 5925575.129 ops/s
Iteration  29: 5689266.175 ops/s
Iteration  30: 5935962.887 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorXTest._Benchmark.benchmark_onErrorReturnDispose":
  5866036.074 ±(99.9%) 179487.380 ops/s [Average]
  (min, avg, max) = (4674728.172, 5866036.074, 6205331.448), stdev = 268648.282
  CI (99.9%): [5686548.694, 6045523.455] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score        Error  Units
MaybeOnErrorXTest._Benchmark.benchmark_onErrorReturnDispose  thrpt   30  5866036.074 ± 179487.380  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStreamTest._Benchmark.benchmark_mapperThrowsWhenUpstreamErrors$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStreamTest._Benchmark.benchmark_mapperThrowsWhenUpstreamErrors

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 19947.405 ops/s
# Warmup Iteration   2: 81534.811 ops/s
# Warmup Iteration   3: 140259.783 ops/s
# Warmup Iteration   4: 137769.530 ops/s
# Warmup Iteration   5: 133410.580 ops/s
# Warmup Iteration   6: 148968.267 ops/s
# Warmup Iteration   7: 153464.296 ops/s
# Warmup Iteration   8: 158407.574 ops/s
# Warmup Iteration   9: 144049.268 ops/s
# Warmup Iteration  10: 155432.987 ops/s
# Warmup Iteration  11: 147283.387 ops/s
# Warmup Iteration  12: 158158.177 ops/s
# Warmup Iteration  13: 149136.162 ops/s
# Warmup Iteration  14: 149109.289 ops/s
# Warmup Iteration  15: 158739.736 ops/s
# Warmup Iteration  16: 156210.193 ops/s
# Warmup Iteration  17: 151976.277 ops/s
# Warmup Iteration  18: 166845.852 ops/s
# Warmup Iteration  19: 162892.633 ops/s
# Warmup Iteration  20: 151768.774 ops/s
# Warmup Iteration  21: 159883.687 ops/s
# Warmup Iteration  22: 153613.320 ops/s
# Warmup Iteration  23: 156118.604 ops/s
# Warmup Iteration  24: 152722.110 ops/s
# Warmup Iteration  25: 153024.764 ops/s
# Warmup Iteration  26: 157977.645 ops/s
# Warmup Iteration  27: 153893.637 ops/s
# Warmup Iteration  28: 154914.656 ops/s
# Warmup Iteration  29: 160572.403 ops/s
# Warmup Iteration  30: 155404.457 ops/s
Iteration   1: 156371.421 ops/s
Iteration   2: 156234.302 ops/s
Iteration   3: 159639.398 ops/s
Iteration   4: 157815.517 ops/s
Iteration   5: 152115.299 ops/s
Iteration   6: 160605.436 ops/s
Iteration   7: 152260.400 ops/s
Iteration   8: 154769.456 ops/s
Iteration   9: 163525.369 ops/s
Iteration  10: 148631.144 ops/s
Iteration  11: 161288.863 ops/s
Iteration  12: 158920.340 ops/s
Iteration  13: 155829.328 ops/s
Iteration  14: 154650.323 ops/s
Iteration  15: 153012.620 ops/s
Iteration  16: 163913.601 ops/s
Iteration  17: 147271.428 ops/s
Iteration  18: 155664.669 ops/s
Iteration  19: 152733.821 ops/s
Iteration  20: 152641.686 ops/s
Iteration  21: 155446.183 ops/s
Iteration  22: 151461.599 ops/s
Iteration  23: 151703.034 ops/s
Iteration  24: 154447.340 ops/s
Iteration  25: 159725.892 ops/s
Iteration  26: 158289.213 ops/s
Iteration  27: 146049.589 ops/s
Iteration  28: 158742.195 ops/s
Iteration  29: 156758.861 ops/s
Iteration  30: 155443.010 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStreamTest._Benchmark.benchmark_mapperThrowsWhenUpstreamErrors":
  155532.045 ±(99.9%) 2907.901 ops/s [Average]
  (min, avg, max) = (146049.589, 155532.045, 163913.601), stdev = 4352.410
  CI (99.9%): [152624.143, 158439.946] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt       Score      Error  Units
FlowableFlatMapStreamTest._Benchmark.benchmark_mapperThrowsWhenUpstreamErrors  thrpt   30  155532.045 ± 2907.901  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_overlapMoreWorkAfterOnNext$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_overlapMoreWorkAfterOnNext

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 43954.621 ops/s
# Warmup Iteration   2: 125745.048 ops/s
# Warmup Iteration   3: 202147.938 ops/s
# Warmup Iteration   4: 397602.293 ops/s
# Warmup Iteration   5: 487812.741 ops/s
# Warmup Iteration   6: 539128.946 ops/s
# Warmup Iteration   7: 514120.556 ops/s
# Warmup Iteration   8: 501468.573 ops/s
# Warmup Iteration   9: 523291.411 ops/s
# Warmup Iteration  10: 495767.509 ops/s
# Warmup Iteration  11: 500815.134 ops/s
# Warmup Iteration  12: 515472.276 ops/s
# Warmup Iteration  13: 525394.697 ops/s
# Warmup Iteration  14: 500445.799 ops/s
# Warmup Iteration  15: 532073.330 ops/s
# Warmup Iteration  16: 526765.057 ops/s
# Warmup Iteration  17: 495659.690 ops/s
# Warmup Iteration  18: 524527.287 ops/s
# Warmup Iteration  19: 528125.769 ops/s
# Warmup Iteration  20: 499389.619 ops/s
# Warmup Iteration  21: 521265.656 ops/s
# Warmup Iteration  22: 490670.736 ops/s
# Warmup Iteration  23: 513688.875 ops/s
# Warmup Iteration  24: 502524.019 ops/s
# Warmup Iteration  25: 501469.253 ops/s
# Warmup Iteration  26: 535457.897 ops/s
# Warmup Iteration  27: 501523.609 ops/s
# Warmup Iteration  28: 525535.165 ops/s
# Warmup Iteration  29: 393742.484 ops/s
# Warmup Iteration  30: 517585.686 ops/s
Iteration   1: 516121.284 ops/s
Iteration   2: 502460.561 ops/s
Iteration   3: 513323.793 ops/s
Iteration   4: 511081.839 ops/s
Iteration   5: 518817.605 ops/s
Iteration   6: 507612.448 ops/s
Iteration   7: 509130.601 ops/s
Iteration   8: 526182.448 ops/s
Iteration   9: 493521.598 ops/s
Iteration  10: 523066.006 ops/s
Iteration  11: 516733.107 ops/s
Iteration  12: 521967.437 ops/s
Iteration  13: 514047.265 ops/s
Iteration  14: 511278.091 ops/s
Iteration  15: 517398.794 ops/s
Iteration  16: 503704.714 ops/s
Iteration  17: 513341.591 ops/s
Iteration  18: 529948.574 ops/s
Iteration  19: 500767.862 ops/s
Iteration  20: 528731.182 ops/s
Iteration  21: 510556.112 ops/s
Iteration  22: 510286.504 ops/s
Iteration  23: 523327.084 ops/s
Iteration  24: 510823.803 ops/s
Iteration  25: 528110.554 ops/s
Iteration  26: 510523.243 ops/s
Iteration  27: 514339.882 ops/s
Iteration  28: 505444.838 ops/s
Iteration  29: 501191.118 ops/s
Iteration  30: 526108.753 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_overlapMoreWorkAfterOnNext":
  513998.290 ±(99.9%) 6134.707 ops/s [Average]
  (min, avg, max) = (493521.598, 513998.290, 529948.574), stdev = 9182.141
  CI (99.9%): [507863.583, 520132.997] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score      Error  Units
FlowableWindowWithSizeTest._Benchmark.benchmark_overlapMoreWorkAfterOnNext  thrpt   30  513998.290 ± 6134.707  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_concatIterableBackpressuredNonEager$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_concatIterableBackpressuredNonEager

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 147925.465 ops/s
# Warmup Iteration   2: 527531.763 ops/s
# Warmup Iteration   3: 1533689.126 ops/s
# Warmup Iteration   4: 1654797.370 ops/s
# Warmup Iteration   5: 1574416.454 ops/s
# Warmup Iteration   6: 1532419.925 ops/s
# Warmup Iteration   7: 1595311.763 ops/s
# Warmup Iteration   8: 1762714.006 ops/s
# Warmup Iteration   9: 1663879.509 ops/s
# Warmup Iteration  10: 1728885.230 ops/s
# Warmup Iteration  11: 1707869.723 ops/s
# Warmup Iteration  12: 1640294.674 ops/s
# Warmup Iteration  13: 1765010.673 ops/s
# Warmup Iteration  14: 1661238.170 ops/s
# Warmup Iteration  15: 1763269.515 ops/s
# Warmup Iteration  16: 1702315.141 ops/s
# Warmup Iteration  17: 1614705.704 ops/s
# Warmup Iteration  18: 1699292.186 ops/s
# Warmup Iteration  19: 1687943.703 ops/s
# Warmup Iteration  20: 1723013.115 ops/s
# Warmup Iteration  21: 1662985.395 ops/s
# Warmup Iteration  22: 1667737.272 ops/s
# Warmup Iteration  23: 1721797.635 ops/s
# Warmup Iteration  24: 1626413.675 ops/s
# Warmup Iteration  25: 1681099.509 ops/s
# Warmup Iteration  26: 1758370.962 ops/s
# Warmup Iteration  27: 1787973.035 ops/s
# Warmup Iteration  28: 1727191.925 ops/s
# Warmup Iteration  29: 1672446.648 ops/s
# Warmup Iteration  30: 1736329.570 ops/s
Iteration   1: 1755128.470 ops/s
Iteration   2: 1632709.112 ops/s
Iteration   3: 1766535.215 ops/s
Iteration   4: 1663491.989 ops/s
Iteration   5: 1715408.433 ops/s
Iteration   6: 1694629.452 ops/s
Iteration   7: 1626994.816 ops/s
Iteration   8: 1721303.631 ops/s
Iteration   9: 1693738.103 ops/s
Iteration  10: 1717574.386 ops/s
Iteration  11: 1648147.976 ops/s
Iteration  12: 1705755.707 ops/s
Iteration  13: 1687697.761 ops/s
Iteration  14: 1674443.920 ops/s
Iteration  15: 1701773.032 ops/s
Iteration  16: 1679323.436 ops/s
Iteration  17: 1726860.073 ops/s
Iteration  18: 1754693.567 ops/s
Iteration  19: 1660782.526 ops/s
Iteration  20: 1789358.676 ops/s
Iteration  21: 1667423.983 ops/s
Iteration  22: 1726612.257 ops/s
Iteration  23: 1717503.260 ops/s
Iteration  24: 1678323.633 ops/s
Iteration  25: 1755283.418 ops/s
Iteration  26: 1679802.419 ops/s
Iteration  27: 1765175.321 ops/s
Iteration  28: 1699231.194 ops/s
Iteration  29: 1728959.961 ops/s
Iteration  30: 1745390.751 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_concatIterableBackpressuredNonEager":
  1706001.883 ±(99.9%) 27461.434 ops/s [Average]
  (min, avg, max) = (1626994.816, 1706001.883, 1789358.676), stdev = 41102.984
  CI (99.9%): [1678540.449, 1733463.316] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
MaybeTest._Benchmark.benchmark_concatIterableBackpressuredNonEager  thrpt   30  1706001.883 ± 27461.434  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_windowAbandonmentCancelsUpstreamSize$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_windowAbandonmentCancelsUpstreamSize

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 106366.996 ops/s
# Warmup Iteration   2: 320188.865 ops/s
# Warmup Iteration   3: 800593.687 ops/s
# Warmup Iteration   4: 968505.580 ops/s
# Warmup Iteration   5: 1118465.804 ops/s
# Warmup Iteration   6: 1091836.976 ops/s
# Warmup Iteration   7: 1122842.570 ops/s
# Warmup Iteration   8: 1063737.956 ops/s
# Warmup Iteration   9: 1077781.798 ops/s
# Warmup Iteration  10: 1151370.120 ops/s
# Warmup Iteration  11: 1146873.504 ops/s
# Warmup Iteration  12: 1097960.136 ops/s
# Warmup Iteration  13: 1129940.110 ops/s
# Warmup Iteration  14: 1082820.444 ops/s
# Warmup Iteration  15: 1143539.127 ops/s
# Warmup Iteration  16: 1091757.175 ops/s
# Warmup Iteration  17: 1090957.627 ops/s
# Warmup Iteration  18: 1159146.463 ops/s
# Warmup Iteration  19: 1072486.901 ops/s
# Warmup Iteration  20: 1174838.040 ops/s
# Warmup Iteration  21: 1060293.946 ops/s
# Warmup Iteration  22: 1092675.637 ops/s
# Warmup Iteration  23: 1064163.958 ops/s
# Warmup Iteration  24: 935381.581 ops/s
# Warmup Iteration  25: 1130124.675 ops/s
# Warmup Iteration  26: 1097673.528 ops/s
# Warmup Iteration  27: 1085261.734 ops/s
# Warmup Iteration  28: 1122935.547 ops/s
# Warmup Iteration  29: 1069120.274 ops/s
# Warmup Iteration  30: 1136074.836 ops/s
Iteration   1: 1102902.929 ops/s
Iteration   2: 1098525.185 ops/s
Iteration   3: 1101375.151 ops/s
Iteration   4: 1096684.909 ops/s
Iteration   5: 1145448.799 ops/s
Iteration   6: 1084551.257 ops/s
Iteration   7: 1164652.564 ops/s
Iteration   8: 1120066.100 ops/s
Iteration   9: 1094743.141 ops/s
Iteration  10: 1114227.348 ops/s
Iteration  11: 1078407.574 ops/s
Iteration  12: 1127709.462 ops/s
Iteration  13: 1092743.359 ops/s
Iteration  14: 1121305.001 ops/s
Iteration  15: 1106190.490 ops/s
Iteration  16: 1099947.648 ops/s
Iteration  17: 1091665.219 ops/s
Iteration  18: 1084834.714 ops/s
Iteration  19: 1110947.537 ops/s
Iteration  20: 1117623.638 ops/s
Iteration  21: 1084049.569 ops/s
Iteration  22: 1090299.001 ops/s
Iteration  23: 1119347.745 ops/s
Iteration  24: 1111379.423 ops/s
Iteration  25: 1091313.024 ops/s
Iteration  26: 1134612.414 ops/s
Iteration  27: 1090143.764 ops/s
Iteration  28: 1093348.603 ops/s
Iteration  29: 1133559.538 ops/s
Iteration  30: 1091194.544 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_windowAbandonmentCancelsUpstreamSize":
  1106459.988 ±(99.9%) 13515.893 ops/s [Average]
  (min, avg, max) = (1078407.574, 1106459.988, 1164652.564), stdev = 20229.954
  CI (99.9%): [1092944.095, 1119975.882] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              Mode  Cnt        Score       Error  Units
FlowableWindowWithSizeTest._Benchmark.benchmark_windowAbandonmentCancelsUpstreamSize  thrpt   30  1106459.988 ± 13515.893  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_concat2BackpressuredNonEager$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_concat2BackpressuredNonEager

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 234529.428 ops/s
# Warmup Iteration   2: 927934.359 ops/s
# Warmup Iteration   3: 1591137.286 ops/s
# Warmup Iteration   4: 1939091.498 ops/s
# Warmup Iteration   5: 1850140.137 ops/s
# Warmup Iteration   6: 1894123.512 ops/s
# Warmup Iteration   7: 1766319.698 ops/s
# Warmup Iteration   8: 1699792.255 ops/s
# Warmup Iteration   9: 1895460.867 ops/s
# Warmup Iteration  10: 1903529.883 ops/s
# Warmup Iteration  11: 1846433.823 ops/s
# Warmup Iteration  12: 1864618.305 ops/s
# Warmup Iteration  13: 1930713.029 ops/s
# Warmup Iteration  14: 1845880.008 ops/s
# Warmup Iteration  15: 1927174.411 ops/s
# Warmup Iteration  16: 1936064.252 ops/s
# Warmup Iteration  17: 1956573.240 ops/s
# Warmup Iteration  18: 1881486.641 ops/s
# Warmup Iteration  19: 1818025.880 ops/s
# Warmup Iteration  20: 1901852.206 ops/s
# Warmup Iteration  21: 1831317.662 ops/s
# Warmup Iteration  22: 1876532.513 ops/s
# Warmup Iteration  23: 1932404.666 ops/s
# Warmup Iteration  24: 1908474.508 ops/s
# Warmup Iteration  25: 1878371.929 ops/s
# Warmup Iteration  26: 1869276.026 ops/s
# Warmup Iteration  27: 1924139.865 ops/s
# Warmup Iteration  28: 1816314.716 ops/s
# Warmup Iteration  29: 1954900.754 ops/s
# Warmup Iteration  30: 1869905.250 ops/s
Iteration   1: 1861778.354 ops/s
Iteration   2: 1837568.029 ops/s
Iteration   3: 1950034.457 ops/s
Iteration   4: 1899391.030 ops/s
Iteration   5: 1856406.371 ops/s
Iteration   6: 1935487.619 ops/s
Iteration   7: 1838679.802 ops/s
Iteration   8: 1899156.112 ops/s
Iteration   9: 1827687.933 ops/s
Iteration  10: 1819058.279 ops/s
Iteration  11: 1930142.923 ops/s
Iteration  12: 1814114.744 ops/s
Iteration  13: 1909424.491 ops/s
Iteration  14: 1815592.994 ops/s
Iteration  15: 1913918.812 ops/s
Iteration  16: 1908090.223 ops/s
Iteration  17: 1900500.330 ops/s
Iteration  18: 1943968.812 ops/s
Iteration  19: 1810647.716 ops/s
Iteration  20: 1899194.642 ops/s
Iteration  21: 1857670.252 ops/s
Iteration  22: 1896628.925 ops/s
Iteration  23: 1926297.299 ops/s
Iteration  24: 1854138.276 ops/s
Iteration  25: 1845029.560 ops/s
Iteration  26: 1972652.709 ops/s
Iteration  27: 1836510.585 ops/s
Iteration  28: 1889624.605 ops/s
Iteration  29: 1814067.003 ops/s
Iteration  30: 1917609.697 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_concat2BackpressuredNonEager":
  1879369.086 ±(99.9%) 31435.698 ops/s [Average]
  (min, avg, max) = (1810647.716, 1879369.086, 1972652.709), stdev = 47051.477
  CI (99.9%): [1847933.388, 1910804.784] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
MaybeTest._Benchmark.benchmark_concat2BackpressuredNonEager  thrpt   30  1879369.086 ± 31435.698  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableZipTests._Benchmark.benchmark_nonBlockingObservable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableZipTests._Benchmark.benchmark_nonBlockingObservable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 408022.410 ops/s
# Warmup Iteration   2: 645369.860 ops/s
# Warmup Iteration   3: 706414.171 ops/s
# Warmup Iteration   4: 721035.143 ops/s
# Warmup Iteration   5: 740547.945 ops/s
# Warmup Iteration   6: 709753.352 ops/s
# Warmup Iteration   7: 756597.699 ops/s
# Warmup Iteration   8: 707635.046 ops/s
# Warmup Iteration   9: 696122.722 ops/s
# Warmup Iteration  10: 760352.679 ops/s
# Warmup Iteration  11: 719027.770 ops/s
# Warmup Iteration  12: 733551.553 ops/s
# Warmup Iteration  13: 746551.907 ops/s
# Warmup Iteration  14: 722341.686 ops/s
# Warmup Iteration  15: 727222.171 ops/s
# Warmup Iteration  16: 749232.022 ops/s
# Warmup Iteration  17: 722480.452 ops/s
# Warmup Iteration  18: 692924.144 ops/s
# Warmup Iteration  19: 770181.948 ops/s
# Warmup Iteration  20: 791273.887 ops/s
# Warmup Iteration  21: 791366.444 ops/s
# Warmup Iteration  22: 796549.647 ops/s
# Warmup Iteration  23: 763842.676 ops/s
# Warmup Iteration  24: 785863.045 ops/s
# Warmup Iteration  25: 758805.920 ops/s
# Warmup Iteration  26: 755951.765 ops/s
# Warmup Iteration  27: 783834.596 ops/s
# Warmup Iteration  28: 766059.522 ops/s
# Warmup Iteration  29: 810727.963 ops/s
# Warmup Iteration  30: 789140.057 ops/s
Iteration   1: 736449.584 ops/s
Iteration   2: 782350.905 ops/s
Iteration   3: 763736.850 ops/s
Iteration   4: 796985.511 ops/s
Iteration   5: 765488.102 ops/s
Iteration   6: 755930.763 ops/s
Iteration   7: 788353.150 ops/s
Iteration   8: 774261.632 ops/s
Iteration   9: 774082.602 ops/s
Iteration  10: 769860.931 ops/s
Iteration  11: 789962.418 ops/s
Iteration  12: 768510.021 ops/s
Iteration  13: 776794.388 ops/s
Iteration  14: 808731.695 ops/s
Iteration  15: 749319.745 ops/s
Iteration  16: 779375.210 ops/s
Iteration  17: 787214.328 ops/s
Iteration  18: 754276.120 ops/s
Iteration  19: 820975.141 ops/s
Iteration  20: 751958.797 ops/s
Iteration  21: 794759.016 ops/s
Iteration  22: 803681.664 ops/s
Iteration  23: 739761.026 ops/s
Iteration  24: 808639.330 ops/s
Iteration  25: 763273.327 ops/s
Iteration  26: 786175.317 ops/s
Iteration  27: 787263.132 ops/s
Iteration  28: 743958.834 ops/s
Iteration  29: 769115.196 ops/s
Iteration  30: 743708.248 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableZipTests._Benchmark.benchmark_nonBlockingObservable":
  774498.433 ±(99.9%) 14725.994 ops/s [Average]
  (min, avg, max) = (736449.584, 774498.433, 820975.141), stdev = 22041.177
  CI (99.9%): [759772.439, 789224.427] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score       Error  Units
FlowableZipTests._Benchmark.benchmark_nonBlockingObservable  thrpt   30  774498.433 ± 14725.994  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableBlockingTest._Benchmark.benchmark_blockingLastEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableBlockingTest._Benchmark.benchmark_blockingLastEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 385996.982 ops/s
# Warmup Iteration   2: 609514.391 ops/s
# Warmup Iteration   3: 736884.816 ops/s
# Warmup Iteration   4: 770126.840 ops/s
# Warmup Iteration   5: 701338.979 ops/s
# Warmup Iteration   6: 737529.932 ops/s
# Warmup Iteration   7: 774380.458 ops/s
# Warmup Iteration   8: 761401.668 ops/s
# Warmup Iteration   9: 762289.337 ops/s
# Warmup Iteration  10: 748507.334 ops/s
# Warmup Iteration  11: 755196.912 ops/s
# Warmup Iteration  12: 783361.348 ops/s
# Warmup Iteration  13: 749201.990 ops/s
# Warmup Iteration  14: 754409.753 ops/s
# Warmup Iteration  15: 754959.711 ops/s
# Warmup Iteration  16: 774214.861 ops/s
# Warmup Iteration  17: 791813.553 ops/s
# Warmup Iteration  18: 795808.059 ops/s
# Warmup Iteration  19: 802389.541 ops/s
# Warmup Iteration  20: 777704.106 ops/s
# Warmup Iteration  21: 804018.896 ops/s
# Warmup Iteration  22: 836082.724 ops/s
# Warmup Iteration  23: 794846.197 ops/s
# Warmup Iteration  24: 800621.970 ops/s
# Warmup Iteration  25: 838127.874 ops/s
# Warmup Iteration  26: 776093.066 ops/s
# Warmup Iteration  27: 839654.277 ops/s
# Warmup Iteration  28: 831403.150 ops/s
# Warmup Iteration  29: 776113.061 ops/s
# Warmup Iteration  30: 845411.799 ops/s
Iteration   1: 792158.678 ops/s
Iteration   2: 791734.851 ops/s
Iteration   3: 818639.818 ops/s
Iteration   4: 787308.582 ops/s
Iteration   5: 822849.862 ops/s
Iteration   6: 836146.434 ops/s
Iteration   7: 780804.848 ops/s
Iteration   8: 818465.147 ops/s
Iteration   9: 793505.442 ops/s
Iteration  10: 806812.418 ops/s
Iteration  11: 838650.211 ops/s
Iteration  12: 768114.017 ops/s
Iteration  13: 810571.380 ops/s
Iteration  14: 786126.994 ops/s
Iteration  15: 795201.684 ops/s
Iteration  16: 811829.724 ops/s
Iteration  17: 765233.381 ops/s
Iteration  18: 801596.753 ops/s
Iteration  19: 814286.986 ops/s
Iteration  20: 804172.061 ops/s
Iteration  21: 818492.093 ops/s
Iteration  22: 794915.850 ops/s
Iteration  23: 825925.556 ops/s
Iteration  24: 792615.303 ops/s
Iteration  25: 804510.078 ops/s
Iteration  26: 824473.657 ops/s
Iteration  27: 790902.715 ops/s
Iteration  28: 832498.341 ops/s
Iteration  29: 827661.784 ops/s
Iteration  30: 801376.029 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableBlockingTest._Benchmark.benchmark_blockingLastEmpty":
  805252.689 ±(99.9%) 12693.265 ops/s [Average]
  (min, avg, max) = (765233.381, 805252.689, 838650.211), stdev = 18998.683
  CI (99.9%): [792559.424, 817945.954] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score       Error  Units
FlowableBlockingTest._Benchmark.benchmark_blockingLastEmpty  thrpt   30  805252.689 ± 12693.265  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromTest._Benchmark.benchmark_fromPublisherDispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromTest._Benchmark.benchmark_fromPublisherDispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2237290.846 ops/s
# Warmup Iteration   2: 7355618.883 ops/s
# Warmup Iteration   3: 9192057.231 ops/s
# Warmup Iteration   4: 10128826.255 ops/s
# Warmup Iteration   5: 10438792.471 ops/s
# Warmup Iteration   6: 10162431.374 ops/s
# Warmup Iteration   7: 9853936.992 ops/s
# Warmup Iteration   8: 10332636.108 ops/s
# Warmup Iteration   9: 9866497.797 ops/s
# Warmup Iteration  10: 10101193.624 ops/s
# Warmup Iteration  11: 10264156.526 ops/s
# Warmup Iteration  12: 8071990.665 ops/s
# Warmup Iteration  13: 10346941.905 ops/s
# Warmup Iteration  14: 10489214.800 ops/s
# Warmup Iteration  15: 10139418.491 ops/s
# Warmup Iteration  16: 10529520.406 ops/s
# Warmup Iteration  17: 9876814.327 ops/s
# Warmup Iteration  18: 10573695.974 ops/s
# Warmup Iteration  19: 10244755.489 ops/s
# Warmup Iteration  20: 10087942.703 ops/s
# Warmup Iteration  21: 10500621.611 ops/s
# Warmup Iteration  22: 10032561.442 ops/s
# Warmup Iteration  23: 10133944.119 ops/s
# Warmup Iteration  24: 10212091.139 ops/s
# Warmup Iteration  25: 10396245.185 ops/s
# Warmup Iteration  26: 10042743.954 ops/s
# Warmup Iteration  27: 10258219.040 ops/s
# Warmup Iteration  28: 10269336.518 ops/s
# Warmup Iteration  29: 10088777.154 ops/s
# Warmup Iteration  30: 10451955.378 ops/s
Iteration   1: 10240954.500 ops/s
Iteration   2: 10355128.104 ops/s
Iteration   3: 10741072.530 ops/s
Iteration   4: 9677437.103 ops/s
Iteration   5: 10195611.716 ops/s
Iteration   6: 10503314.055 ops/s
Iteration   7: 10137387.172 ops/s
Iteration   8: 10624821.099 ops/s
Iteration   9: 10023110.083 ops/s
Iteration  10: 10187525.046 ops/s
Iteration  11: 10029039.101 ops/s
Iteration  12: 10303390.817 ops/s
Iteration  13: 10312860.182 ops/s
Iteration  14: 10073078.240 ops/s
Iteration  15: 10449176.873 ops/s
Iteration  16: 10029327.715 ops/s
Iteration  17: 10208150.275 ops/s
Iteration  18: 9951649.698 ops/s
Iteration  19: 10130096.486 ops/s
Iteration  20: 10456231.479 ops/s
Iteration  21: 9884402.604 ops/s
Iteration  22: 10526197.940 ops/s
Iteration  23: 10036125.162 ops/s
Iteration  24: 10480047.764 ops/s
Iteration  25: 10033728.498 ops/s
Iteration  26: 9974482.342 ops/s
Iteration  27: 10472642.060 ops/s
Iteration  28: 9779543.579 ops/s
Iteration  29: 10435144.409 ops/s
Iteration  30: 10110946.976 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFromTest._Benchmark.benchmark_fromPublisherDispose":
  10212087.454 ±(99.9%) 170627.158 ops/s [Average]
  (min, avg, max) = (9677437.103, 10212087.454, 10741072.530), stdev = 255386.717
  CI (99.9%): [10041460.296, 10382714.612] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt         Score        Error  Units
ObservableFromTest._Benchmark.benchmark_fromPublisherDispose  thrpt   30  10212087.454 ± 170627.158  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableBlockingTest._Benchmark.benchmark_blockingFirstEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableBlockingTest._Benchmark.benchmark_blockingFirstEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 373613.239 ops/s
# Warmup Iteration   2: 631750.292 ops/s
# Warmup Iteration   3: 717981.959 ops/s
# Warmup Iteration   4: 674196.454 ops/s
# Warmup Iteration   5: 770410.322 ops/s
# Warmup Iteration   6: 633960.257 ops/s
# Warmup Iteration   7: 774671.128 ops/s
# Warmup Iteration   8: 740100.027 ops/s
# Warmup Iteration   9: 753570.021 ops/s
# Warmup Iteration  10: 777576.316 ops/s
# Warmup Iteration  11: 735885.430 ops/s
# Warmup Iteration  12: 793128.486 ops/s
# Warmup Iteration  13: 793990.337 ops/s
# Warmup Iteration  14: 730403.641 ops/s
# Warmup Iteration  15: 765699.788 ops/s
# Warmup Iteration  16: 780104.034 ops/s
# Warmup Iteration  17: 770665.088 ops/s
# Warmup Iteration  18: 838673.330 ops/s
# Warmup Iteration  19: 788122.867 ops/s
# Warmup Iteration  20: 828099.360 ops/s
# Warmup Iteration  21: 788039.216 ops/s
# Warmup Iteration  22: 823528.871 ops/s
# Warmup Iteration  23: 788156.579 ops/s
# Warmup Iteration  24: 816446.896 ops/s
# Warmup Iteration  25: 821140.469 ops/s
# Warmup Iteration  26: 787179.759 ops/s
# Warmup Iteration  27: 810831.275 ops/s
# Warmup Iteration  28: 774135.730 ops/s
# Warmup Iteration  29: 813683.399 ops/s
# Warmup Iteration  30: 791652.251 ops/s
Iteration   1: 794939.545 ops/s
Iteration   2: 807419.557 ops/s
Iteration   3: 785636.777 ops/s
Iteration   4: 828753.126 ops/s
Iteration   5: 800023.668 ops/s
Iteration   6: 779400.955 ops/s
Iteration   7: 831894.613 ops/s
Iteration   8: 806025.840 ops/s
Iteration   9: 808333.468 ops/s
Iteration  10: 796490.816 ops/s
Iteration  11: 790416.887 ops/s
Iteration  12: 819589.427 ops/s
Iteration  13: 786952.847 ops/s
Iteration  14: 794009.764 ops/s
Iteration  15: 801738.862 ops/s
Iteration  16: 800418.331 ops/s
Iteration  17: 793231.699 ops/s
Iteration  18: 801051.378 ops/s
Iteration  19: 831653.226 ops/s
Iteration  20: 781073.658 ops/s
Iteration  21: 853711.226 ops/s
Iteration  22: 816747.663 ops/s
Iteration  23: 783275.390 ops/s
Iteration  24: 824797.832 ops/s
Iteration  25: 800308.553 ops/s
Iteration  26: 801635.383 ops/s
Iteration  27: 799781.186 ops/s
Iteration  28: 805328.599 ops/s
Iteration  29: 812873.809 ops/s
Iteration  30: 800719.710 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableBlockingTest._Benchmark.benchmark_blockingFirstEmpty":
  804607.793 ±(99.9%) 11361.197 ops/s [Average]
  (min, avg, max) = (779400.955, 804607.793, 853711.226), stdev = 17004.907
  CI (99.9%): [793246.596, 815968.991] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score       Error  Units
FlowableBlockingTest._Benchmark.benchmark_blockingFirstEmpty  thrpt   30  804607.793 ± 11361.197  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsTest._Benchmark.benchmark_fusedAPICalls$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsTest._Benchmark.benchmark_fusedAPICalls

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 147567.515 ops/s
# Warmup Iteration   2: 259336.840 ops/s
# Warmup Iteration   3: 321025.301 ops/s
# Warmup Iteration   4: 295591.059 ops/s
# Warmup Iteration   5: 318485.806 ops/s
# Warmup Iteration   6: 295288.339 ops/s
# Warmup Iteration   7: 290263.020 ops/s
# Warmup Iteration   8: 263724.740 ops/s
# Warmup Iteration   9: 305741.057 ops/s
# Warmup Iteration  10: 322766.589 ops/s
# Warmup Iteration  11: 307203.520 ops/s
# Warmup Iteration  12: 317418.394 ops/s
# Warmup Iteration  13: 313702.804 ops/s
# Warmup Iteration  14: 317488.238 ops/s
# Warmup Iteration  15: 324779.415 ops/s
# Warmup Iteration  16: 310077.403 ops/s
# Warmup Iteration  17: 339320.816 ops/s
# Warmup Iteration  18: 329064.816 ops/s
# Warmup Iteration  19: 333215.189 ops/s
# Warmup Iteration  20: 333412.177 ops/s
# Warmup Iteration  21: 342286.231 ops/s
# Warmup Iteration  22: 331341.186 ops/s
# Warmup Iteration  23: 328136.892 ops/s
# Warmup Iteration  24: 328835.673 ops/s
# Warmup Iteration  25: 341715.094 ops/s
# Warmup Iteration  26: 327809.893 ops/s
# Warmup Iteration  27: 342277.816 ops/s
# Warmup Iteration  28: 322435.772 ops/s
# Warmup Iteration  29: 334361.870 ops/s
# Warmup Iteration  30: 336661.483 ops/s
Iteration   1: 326765.109 ops/s
Iteration   2: 339080.031 ops/s
Iteration   3: 328604.801 ops/s
Iteration   4: 333853.975 ops/s
Iteration   5: 333626.534 ops/s
Iteration   6: 343745.024 ops/s
Iteration   7: 333786.466 ops/s
Iteration   8: 328493.748 ops/s
Iteration   9: 335115.524 ops/s
Iteration  10: 327526.441 ops/s
Iteration  11: 343011.060 ops/s
Iteration  12: 338442.032 ops/s
Iteration  13: 326940.494 ops/s
Iteration  14: 321526.566 ops/s
Iteration  15: 334480.877 ops/s
Iteration  16: 329558.579 ops/s
Iteration  17: 331588.022 ops/s
Iteration  18: 336898.179 ops/s
Iteration  19: 333053.019 ops/s
Iteration  20: 345313.561 ops/s
Iteration  21: 323765.123 ops/s
Iteration  22: 326907.887 ops/s
Iteration  23: 340480.083 ops/s
Iteration  24: 338155.913 ops/s
Iteration  25: 334469.436 ops/s
Iteration  26: 332709.846 ops/s
Iteration  27: 331117.961 ops/s
Iteration  28: 326383.004 ops/s
Iteration  29: 339420.846 ops/s
Iteration  30: 334636.041 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsTest._Benchmark.benchmark_fusedAPICalls":
  333315.206 ±(99.9%) 4007.848 ops/s [Average]
  (min, avg, max) = (321526.566, 333315.206, 345313.561), stdev = 5998.758
  CI (99.9%): [329307.358, 337323.054] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
FlowableIgnoreElementsTest._Benchmark.benchmark_fusedAPICalls  thrpt   30  333315.206 ± 4007.848  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_deferFunctionReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_deferFunctionReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 328322.792 ops/s
# Warmup Iteration   2: 636523.431 ops/s
# Warmup Iteration   3: 660857.560 ops/s
# Warmup Iteration   4: 678219.525 ops/s
# Warmup Iteration   5: 719994.512 ops/s
# Warmup Iteration   6: 700862.244 ops/s
# Warmup Iteration   7: 669750.422 ops/s
# Warmup Iteration   8: 721250.403 ops/s
# Warmup Iteration   9: 649887.288 ops/s
# Warmup Iteration  10: 697671.038 ops/s
# Warmup Iteration  11: 700653.653 ops/s
# Warmup Iteration  12: 695765.281 ops/s
# Warmup Iteration  13: 702625.391 ops/s
# Warmup Iteration  14: 694368.733 ops/s
# Warmup Iteration  15: 715205.425 ops/s
# Warmup Iteration  16: 703279.248 ops/s
# Warmup Iteration  17: 726886.273 ops/s
# Warmup Iteration  18: 763003.806 ops/s
# Warmup Iteration  19: 740358.743 ops/s
# Warmup Iteration  20: 749996.120 ops/s
# Warmup Iteration  21: 718095.569 ops/s
# Warmup Iteration  22: 770808.331 ops/s
# Warmup Iteration  23: 713963.350 ops/s
# Warmup Iteration  24: 740082.473 ops/s
# Warmup Iteration  25: 740492.756 ops/s
# Warmup Iteration  26: 714845.792 ops/s
# Warmup Iteration  27: 730798.165 ops/s
# Warmup Iteration  28: 746065.659 ops/s
# Warmup Iteration  29: 724506.402 ops/s
# Warmup Iteration  30: 737370.425 ops/s
Iteration   1: 750269.958 ops/s
Iteration   2: 730526.910 ops/s
Iteration   3: 742976.850 ops/s
Iteration   4: 717290.149 ops/s
Iteration   5: 761729.267 ops/s
Iteration   6: 715509.355 ops/s
Iteration   7: 757213.593 ops/s
Iteration   8: 736619.266 ops/s
Iteration   9: 748353.969 ops/s
Iteration  10: 739384.109 ops/s
Iteration  11: 732674.864 ops/s
Iteration  12: 755258.345 ops/s
Iteration  13: 717081.004 ops/s
Iteration  14: 763797.744 ops/s
Iteration  15: 730049.773 ops/s
Iteration  16: 723804.364 ops/s
Iteration  17: 776257.004 ops/s
Iteration  18: 736114.504 ops/s
Iteration  19: 743959.533 ops/s
Iteration  20: 727119.623 ops/s
Iteration  21: 762136.569 ops/s
Iteration  22: 727284.257 ops/s
Iteration  23: 728422.810 ops/s
Iteration  24: 758559.058 ops/s
Iteration  25: 713061.649 ops/s
Iteration  26: 757225.683 ops/s
Iteration  27: 727361.470 ops/s
Iteration  28: 751607.711 ops/s
Iteration  29: 723913.344 ops/s
Iteration  30: 721396.737 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_deferFunctionReturnsNull":
  739231.982 ±(99.9%) 11407.638 ops/s [Average]
  (min, avg, max) = (713061.649, 739231.982, 776257.004), stdev = 17074.417
  CI (99.9%): [727824.344, 750639.620] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score       Error  Units
FlowableNullTests._Benchmark.benchmark_deferFunctionReturnsNull  thrpt   30  739231.982 ± 11407.638  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_fromCallableReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_fromCallableReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 183691.090 ops/s
# Warmup Iteration   2: 581070.338 ops/s
# Warmup Iteration   3: 645254.548 ops/s
# Warmup Iteration   4: 603304.158 ops/s
# Warmup Iteration   5: 706940.271 ops/s
# Warmup Iteration   6: 634074.941 ops/s
# Warmup Iteration   7: 631696.349 ops/s
# Warmup Iteration   8: 697845.246 ops/s
# Warmup Iteration   9: 669372.358 ops/s
# Warmup Iteration  10: 687396.863 ops/s
# Warmup Iteration  11: 702572.370 ops/s
# Warmup Iteration  12: 685644.009 ops/s
# Warmup Iteration  13: 708603.243 ops/s
# Warmup Iteration  14: 700952.176 ops/s
# Warmup Iteration  15: 677509.073 ops/s
# Warmup Iteration  16: 694394.535 ops/s
# Warmup Iteration  17: 705768.857 ops/s
# Warmup Iteration  18: 705229.494 ops/s
# Warmup Iteration  19: 721293.230 ops/s
# Warmup Iteration  20: 700136.029 ops/s
# Warmup Iteration  21: 725856.919 ops/s
# Warmup Iteration  22: 691102.580 ops/s
# Warmup Iteration  23: 733758.936 ops/s
# Warmup Iteration  24: 687206.378 ops/s
# Warmup Iteration  25: 723525.548 ops/s
# Warmup Iteration  26: 705790.078 ops/s
# Warmup Iteration  27: 683097.291 ops/s
# Warmup Iteration  28: 720080.099 ops/s
# Warmup Iteration  29: 701339.784 ops/s
# Warmup Iteration  30: 725318.954 ops/s
Iteration   1: 677447.627 ops/s
Iteration   2: 721951.813 ops/s
Iteration   3: 694235.765 ops/s
Iteration   4: 717473.311 ops/s
Iteration   5: 704959.601 ops/s
Iteration   6: 730734.076 ops/s
Iteration   7: 685126.955 ops/s
Iteration   8: 737949.804 ops/s
Iteration   9: 708870.051 ops/s
Iteration  10: 686735.237 ops/s
Iteration  11: 719255.011 ops/s
Iteration  12: 687365.778 ops/s
Iteration  13: 726313.540 ops/s
Iteration  14: 710809.848 ops/s
Iteration  15: 704507.302 ops/s
Iteration  16: 726622.941 ops/s
Iteration  17: 691549.866 ops/s
Iteration  18: 722550.912 ops/s
Iteration  19: 708137.230 ops/s
Iteration  20: 717911.330 ops/s
Iteration  21: 701337.164 ops/s
Iteration  22: 697260.902 ops/s
Iteration  23: 715397.989 ops/s
Iteration  24: 702467.350 ops/s
Iteration  25: 727217.560 ops/s
Iteration  26: 707440.600 ops/s
Iteration  27: 686793.808 ops/s
Iteration  28: 705085.238 ops/s
Iteration  29: 705205.574 ops/s
Iteration  30: 695833.971 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_fromCallableReturnsNull":
  707484.938 ±(99.9%) 10277.663 ops/s [Average]
  (min, avg, max) = (677447.627, 707484.938, 737949.804), stdev = 15383.124
  CI (99.9%): [697207.275, 717762.602] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score       Error  Units
FlowableNullTests._Benchmark.benchmark_fromCallableReturnsNull  thrpt   30  707484.938 ± 10277.663  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableToSingleTest._Benchmark.benchmark_shouldUseUnsafeSubscribeInternallyNotSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableToSingleTest._Benchmark.benchmark_shouldUseUnsafeSubscribeInternallyNotSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 595148.173 ops/s
# Warmup Iteration   2: 3080987.357 ops/s
# Warmup Iteration   3: 4088413.237 ops/s
# Warmup Iteration   4: 4808429.441 ops/s
# Warmup Iteration   5: 4626255.252 ops/s
# Warmup Iteration   6: 4787284.689 ops/s
# Warmup Iteration   7: 4629299.129 ops/s
# Warmup Iteration   8: 4707071.950 ops/s
# Warmup Iteration   9: 4631305.086 ops/s
# Warmup Iteration  10: 4725560.008 ops/s
# Warmup Iteration  11: 4838309.418 ops/s
# Warmup Iteration  12: 4749142.266 ops/s
# Warmup Iteration  13: 4788537.535 ops/s
# Warmup Iteration  14: 4707372.393 ops/s
# Warmup Iteration  15: 4942645.492 ops/s
# Warmup Iteration  16: 4842917.086 ops/s
# Warmup Iteration  17: 4595309.916 ops/s
# Warmup Iteration  18: 4645999.229 ops/s
# Warmup Iteration  19: 4954382.977 ops/s
# Warmup Iteration  20: 4631012.577 ops/s
# Warmup Iteration  21: 4807404.808 ops/s
# Warmup Iteration  22: 4773398.873 ops/s
# Warmup Iteration  23: 4752468.722 ops/s
# Warmup Iteration  24: 4733963.148 ops/s
# Warmup Iteration  25: 4621339.041 ops/s
# Warmup Iteration  26: 4897070.365 ops/s
# Warmup Iteration  27: 4818856.861 ops/s
# Warmup Iteration  28: 4638524.214 ops/s
# Warmup Iteration  29: 4954728.307 ops/s
# Warmup Iteration  30: 4665972.262 ops/s
Iteration   1: 4876434.154 ops/s
Iteration   2: 4736236.437 ops/s
Iteration   3: 4705385.091 ops/s
Iteration   4: 4876562.617 ops/s
Iteration   5: 4646312.781 ops/s
Iteration   6: 4711231.073 ops/s
Iteration   7: 4763325.920 ops/s
Iteration   8: 4609439.319 ops/s
Iteration   9: 4724582.039 ops/s
Iteration  10: 4807445.138 ops/s
Iteration  11: 4627881.253 ops/s
Iteration  12: 4802846.719 ops/s
Iteration  13: 4758123.007 ops/s
Iteration  14: 4728186.106 ops/s
Iteration  15: 4828155.411 ops/s
Iteration  16: 4833065.605 ops/s
Iteration  17: 4650525.074 ops/s
Iteration  18: 4904793.207 ops/s
Iteration  19: 4702808.609 ops/s
Iteration  20: 4862594.178 ops/s
Iteration  21: 4897191.374 ops/s
Iteration  22: 4781117.299 ops/s
Iteration  23: 4818257.704 ops/s
Iteration  24: 4724412.784 ops/s
Iteration  25: 4950147.729 ops/s
Iteration  26: 4587280.735 ops/s
Iteration  27: 4798384.273 ops/s
Iteration  28: 3464864.439 ops/s
Iteration  29: 4412493.467 ops/s
Iteration  30: 4769536.987 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableToSingleTest._Benchmark.benchmark_shouldUseUnsafeSubscribeInternallyNotSubscribe":
  4711987.351 ±(99.9%) 174119.883 ops/s [Average]
  (min, avg, max) = (3464864.439, 4711987.351, 4950147.729), stdev = 260614.463
  CI (99.9%): [4537867.468, 4886107.234] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                  Mode  Cnt        Score        Error  Units
FlowableToSingleTest._Benchmark.benchmark_shouldUseUnsafeSubscribeInternallyNotSubscribe  thrpt   30  4711987.351 ± 174119.883  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableAnyTest._Benchmark.benchmark_predicateThrowsExceptionAndValueInCauseMessage$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableAnyTest._Benchmark.benchmark_predicateThrowsExceptionAndValueInCauseMessage

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 250189.106 ops/s
# Warmup Iteration   2: 583476.425 ops/s
# Warmup Iteration   3: 712442.840 ops/s
# Warmup Iteration   4: 692029.115 ops/s
# Warmup Iteration   5: 718919.129 ops/s
# Warmup Iteration   6: 699232.080 ops/s
# Warmup Iteration   7: 695448.310 ops/s
# Warmup Iteration   8: 687000.895 ops/s
# Warmup Iteration   9: 676642.808 ops/s
# Warmup Iteration  10: 678861.315 ops/s
# Warmup Iteration  11: 656728.059 ops/s
# Warmup Iteration  12: 718449.639 ops/s
# Warmup Iteration  13: 692527.344 ops/s
# Warmup Iteration  14: 701231.845 ops/s
# Warmup Iteration  15: 710384.405 ops/s
# Warmup Iteration  16: 698792.095 ops/s
# Warmup Iteration  17: 735994.868 ops/s
# Warmup Iteration  18: 767227.370 ops/s
# Warmup Iteration  19: 699902.742 ops/s
# Warmup Iteration  20: 755730.797 ops/s
# Warmup Iteration  21: 730599.127 ops/s
# Warmup Iteration  22: 720464.984 ops/s
# Warmup Iteration  23: 769616.037 ops/s
# Warmup Iteration  24: 734352.175 ops/s
# Warmup Iteration  25: 748920.494 ops/s
# Warmup Iteration  26: 723676.946 ops/s
# Warmup Iteration  27: 757255.333 ops/s
# Warmup Iteration  28: 762987.439 ops/s
# Warmup Iteration  29: 729271.032 ops/s
# Warmup Iteration  30: 743861.285 ops/s
Iteration   1: 726306.828 ops/s
Iteration   2: 732108.319 ops/s
Iteration   3: 784678.428 ops/s
Iteration   4: 704925.462 ops/s
Iteration   5: 739250.630 ops/s
Iteration   6: 760124.803 ops/s
Iteration   7: 725013.908 ops/s
Iteration   8: 784013.851 ops/s
Iteration   9: 716424.352 ops/s
Iteration  10: 749857.883 ops/s
Iteration  11: 771237.836 ops/s
Iteration  12: 712507.632 ops/s
Iteration  13: 761460.278 ops/s
Iteration  14: 722750.870 ops/s
Iteration  15: 720713.103 ops/s
Iteration  16: 746553.663 ops/s
Iteration  17: 748944.642 ops/s
Iteration  18: 731421.075 ops/s
Iteration  19: 718721.799 ops/s
Iteration  20: 753943.692 ops/s
Iteration  21: 694882.203 ops/s
Iteration  22: 735546.785 ops/s
Iteration  23: 738651.229 ops/s
Iteration  24: 735282.388 ops/s
Iteration  25: 758888.247 ops/s
Iteration  26: 737493.527 ops/s
Iteration  27: 737439.466 ops/s
Iteration  28: 752154.277 ops/s
Iteration  29: 752875.952 ops/s
Iteration  30: 725596.966 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableAnyTest._Benchmark.benchmark_predicateThrowsExceptionAndValueInCauseMessage":
  739325.670 ±(99.9%) 14339.311 ops/s [Average]
  (min, avg, max) = (694882.203, 739325.670, 784678.428), stdev = 21462.407
  CI (99.9%): [724986.359, 753664.980] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             Mode  Cnt       Score       Error  Units
FlowableAnyTest._Benchmark.benchmark_predicateThrowsExceptionAndValueInCauseMessage  thrpt   30  739325.670 ± 14339.311  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableAllTest._Benchmark.benchmark_predicateThrowsExceptionAndValueInCauseMessageFlowable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableAllTest._Benchmark.benchmark_predicateThrowsExceptionAndValueInCauseMessageFlowable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 153564.889 ops/s
# Warmup Iteration   2: 546085.990 ops/s
# Warmup Iteration   3: 596490.361 ops/s
# Warmup Iteration   4: 612673.794 ops/s
# Warmup Iteration   5: 655299.090 ops/s
# Warmup Iteration   6: 666600.043 ops/s
# Warmup Iteration   7: 694247.878 ops/s
# Warmup Iteration   8: 640224.302 ops/s
# Warmup Iteration   9: 686487.455 ops/s
# Warmup Iteration  10: 666200.961 ops/s
# Warmup Iteration  11: 670752.781 ops/s
# Warmup Iteration  12: 658269.317 ops/s
# Warmup Iteration  13: 685950.193 ops/s
# Warmup Iteration  14: 634472.463 ops/s
# Warmup Iteration  15: 686404.557 ops/s
# Warmup Iteration  16: 683121.239 ops/s
# Warmup Iteration  17: 690087.868 ops/s
# Warmup Iteration  18: 701427.129 ops/s
# Warmup Iteration  19: 720659.537 ops/s
# Warmup Iteration  20: 702011.439 ops/s
# Warmup Iteration  21: 720681.876 ops/s
# Warmup Iteration  22: 691095.097 ops/s
# Warmup Iteration  23: 709944.913 ops/s
# Warmup Iteration  24: 719417.506 ops/s
# Warmup Iteration  25: 671314.181 ops/s
# Warmup Iteration  26: 694805.011 ops/s
# Warmup Iteration  27: 727990.199 ops/s
# Warmup Iteration  28: 693993.405 ops/s
# Warmup Iteration  29: 690857.471 ops/s
# Warmup Iteration  30: 719211.147 ops/s
Iteration   1: 702814.550 ops/s
Iteration   2: 716840.434 ops/s
Iteration   3: 680920.852 ops/s
Iteration   4: 701357.171 ops/s
Iteration   5: 694577.719 ops/s
Iteration   6: 700368.669 ops/s
Iteration   7: 728671.278 ops/s
Iteration   8: 693471.334 ops/s
Iteration   9: 679423.754 ops/s
Iteration  10: 703653.622 ops/s
Iteration  11: 718252.974 ops/s
Iteration  12: 694734.315 ops/s
Iteration  13: 701961.852 ops/s
Iteration  14: 728651.249 ops/s
Iteration  15: 717102.409 ops/s
Iteration  16: 701751.566 ops/s
Iteration  17: 701350.350 ops/s
Iteration  18: 714038.323 ops/s
Iteration  19: 690747.633 ops/s
Iteration  20: 718710.379 ops/s
Iteration  21: 725285.747 ops/s
Iteration  22: 695424.744 ops/s
Iteration  23: 577380.361 ops/s
Iteration  24: 679950.072 ops/s
Iteration  25: 706520.822 ops/s
Iteration  26: 691037.619 ops/s
Iteration  27: 690792.962 ops/s
Iteration  28: 686934.287 ops/s
Iteration  29: 712713.451 ops/s
Iteration  30: 687751.860 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableAllTest._Benchmark.benchmark_predicateThrowsExceptionAndValueInCauseMessageFlowable":
  698106.412 ±(99.9%) 17886.254 ops/s [Average]
  (min, avg, max) = (577380.361, 698106.412, 728671.278), stdev = 26771.304
  CI (99.9%): [680220.158, 715992.665] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                     Mode  Cnt       Score       Error  Units
FlowableAllTest._Benchmark.benchmark_predicateThrowsExceptionAndValueInCauseMessageFlowable  thrpt   30  698106.412 ± 17886.254  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_combineLatestDelayErrorIterableOneIsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_combineLatestDelayErrorIterableOneIsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 321931.167 ops/s
# Warmup Iteration   2: 586383.554 ops/s
# Warmup Iteration   3: 658857.516 ops/s
# Warmup Iteration   4: 687871.348 ops/s
# Warmup Iteration   5: 675506.001 ops/s
# Warmup Iteration   6: 689378.391 ops/s
# Warmup Iteration   7: 665697.931 ops/s
# Warmup Iteration   8: 652092.042 ops/s
# Warmup Iteration   9: 699323.473 ops/s
# Warmup Iteration  10: 647039.288 ops/s
# Warmup Iteration  11: 687928.274 ops/s
# Warmup Iteration  12: 681212.697 ops/s
# Warmup Iteration  13: 698142.131 ops/s
# Warmup Iteration  14: 695630.534 ops/s
# Warmup Iteration  15: 644950.841 ops/s
# Warmup Iteration  16: 681419.963 ops/s
# Warmup Iteration  17: 713880.451 ops/s
# Warmup Iteration  18: 719298.896 ops/s
# Warmup Iteration  19: 741163.367 ops/s
# Warmup Iteration  20: 669251.663 ops/s
# Warmup Iteration  21: 723458.317 ops/s
# Warmup Iteration  22: 734031.737 ops/s
# Warmup Iteration  23: 727596.217 ops/s
# Warmup Iteration  24: 698857.311 ops/s
# Warmup Iteration  25: 742528.191 ops/s
# Warmup Iteration  26: 715225.388 ops/s
# Warmup Iteration  27: 723321.953 ops/s
# Warmup Iteration  28: 750867.461 ops/s
# Warmup Iteration  29: 703748.563 ops/s
# Warmup Iteration  30: 727917.837 ops/s
Iteration   1: 711467.213 ops/s
Iteration   2: 728765.128 ops/s
Iteration   3: 731607.870 ops/s
Iteration   4: 713024.898 ops/s
Iteration   5: 741925.929 ops/s
Iteration   6: 718175.048 ops/s
Iteration   7: 718169.827 ops/s
Iteration   8: 725254.273 ops/s
Iteration   9: 721819.748 ops/s
Iteration  10: 728690.284 ops/s
Iteration  11: 725611.641 ops/s
Iteration  12: 713866.309 ops/s
Iteration  13: 703891.585 ops/s
Iteration  14: 721314.657 ops/s
Iteration  15: 733216.483 ops/s
Iteration  16: 694998.644 ops/s
Iteration  17: 742617.585 ops/s
Iteration  18: 734830.516 ops/s
Iteration  19: 708428.022 ops/s
Iteration  20: 744079.371 ops/s
Iteration  21: 701591.888 ops/s
Iteration  22: 727278.893 ops/s
Iteration  23: 702558.415 ops/s
Iteration  24: 715674.157 ops/s
Iteration  25: 740021.687 ops/s
Iteration  26: 693473.848 ops/s
Iteration  27: 714271.952 ops/s
Iteration  28: 728131.172 ops/s
Iteration  29: 725971.919 ops/s
Iteration  30: 738553.758 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_combineLatestDelayErrorIterableOneIsNull":
  721642.757 ±(99.9%) 9382.604 ops/s [Average]
  (min, avg, max) = (693473.848, 721642.757, 744079.371), stdev = 14043.440
  CI (99.9%): [712260.154, 731025.361] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt       Score      Error  Units
FlowableNullTests._Benchmark.benchmark_combineLatestDelayErrorIterableOneIsNull  thrpt   30  721642.757 ± 9382.604  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeWhileTest._Benchmark.benchmark_takeWhileDoesntLeakErrors$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeWhileTest._Benchmark.benchmark_takeWhileDoesntLeakErrors

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 82655.840 ops/s
# Warmup Iteration   2: 208493.513 ops/s
# Warmup Iteration   3: 248470.752 ops/s
# Warmup Iteration   4: 241060.192 ops/s
# Warmup Iteration   5: 237116.488 ops/s
# Warmup Iteration   6: 241063.420 ops/s
# Warmup Iteration   7: 244852.351 ops/s
# Warmup Iteration   8: 231682.389 ops/s
# Warmup Iteration   9: 238616.590 ops/s
# Warmup Iteration  10: 243961.331 ops/s
# Warmup Iteration  11: 242685.572 ops/s
# Warmup Iteration  12: 253475.635 ops/s
# Warmup Iteration  13: 241822.368 ops/s
# Warmup Iteration  14: 254354.732 ops/s
# Warmup Iteration  15: 242703.968 ops/s
# Warmup Iteration  16: 242202.286 ops/s
# Warmup Iteration  17: 245184.493 ops/s
# Warmup Iteration  18: 249859.565 ops/s
# Warmup Iteration  19: 245065.608 ops/s
# Warmup Iteration  20: 255760.002 ops/s
# Warmup Iteration  21: 262853.026 ops/s
# Warmup Iteration  22: 251275.466 ops/s
# Warmup Iteration  23: 257772.720 ops/s
# Warmup Iteration  24: 259152.189 ops/s
# Warmup Iteration  25: 255813.232 ops/s
# Warmup Iteration  26: 265932.411 ops/s
# Warmup Iteration  27: 253308.899 ops/s
# Warmup Iteration  28: 261770.250 ops/s
# Warmup Iteration  29: 251246.645 ops/s
# Warmup Iteration  30: 260609.146 ops/s
Iteration   1: 255733.109 ops/s
Iteration   2: 251208.189 ops/s
Iteration   3: 258140.160 ops/s
Iteration   4: 254983.738 ops/s
Iteration   5: 264766.176 ops/s
Iteration   6: 254837.271 ops/s
Iteration   7: 254200.306 ops/s
Iteration   8: 252835.824 ops/s
Iteration   9: 267726.500 ops/s
Iteration  10: 245979.282 ops/s
Iteration  11: 262003.282 ops/s
Iteration  12: 256072.456 ops/s
Iteration  13: 258159.718 ops/s
Iteration  14: 253149.860 ops/s
Iteration  15: 258579.159 ops/s
Iteration  16: 250685.118 ops/s
Iteration  17: 254382.748 ops/s
Iteration  18: 207093.465 ops/s
Iteration  19: 263175.638 ops/s
Iteration  20: 256509.043 ops/s
Iteration  21: 257767.616 ops/s
Iteration  22: 266867.163 ops/s
Iteration  23: 249305.249 ops/s
Iteration  24: 258985.867 ops/s
Iteration  25: 254686.307 ops/s
Iteration  26: 260889.531 ops/s
Iteration  27: 257914.341 ops/s
Iteration  28: 264087.350 ops/s
Iteration  29: 263487.583 ops/s
Iteration  30: 245488.858 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeWhileTest._Benchmark.benchmark_takeWhileDoesntLeakErrors":
  255323.364 ±(99.9%) 7138.279 ops/s [Average]
  (min, avg, max) = (207093.465, 255323.364, 267726.500), stdev = 10684.241
  CI (99.9%): [248185.085, 262461.643] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score      Error  Units
FlowableTakeWhileTest._Benchmark.benchmark_takeWhileDoesntLeakErrors  thrpt   30  255323.364 ± 7138.279  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithSingleTest._Benchmark.benchmark_mainError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithSingleTest._Benchmark.benchmark_mainError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 209490.787 ops/s
# Warmup Iteration   2: 566387.561 ops/s
# Warmup Iteration   3: 579232.325 ops/s
# Warmup Iteration   4: 666443.463 ops/s
# Warmup Iteration   5: 715409.374 ops/s
# Warmup Iteration   6: 690595.027 ops/s
# Warmup Iteration   7: 690695.955 ops/s
# Warmup Iteration   8: 694598.480 ops/s
# Warmup Iteration   9: 701964.389 ops/s
# Warmup Iteration  10: 708197.488 ops/s
# Warmup Iteration  11: 680396.613 ops/s
# Warmup Iteration  12: 703661.200 ops/s
# Warmup Iteration  13: 694373.700 ops/s
# Warmup Iteration  14: 715590.929 ops/s
# Warmup Iteration  15: 713133.345 ops/s
# Warmup Iteration  16: 674407.943 ops/s
# Warmup Iteration  17: 763364.067 ops/s
# Warmup Iteration  18: 729860.447 ops/s
# Warmup Iteration  19: 757723.578 ops/s
# Warmup Iteration  20: 732820.402 ops/s
# Warmup Iteration  21: 739188.895 ops/s
# Warmup Iteration  22: 759235.637 ops/s
# Warmup Iteration  23: 719046.538 ops/s
# Warmup Iteration  24: 755148.252 ops/s
# Warmup Iteration  25: 721032.447 ops/s
# Warmup Iteration  26: 769222.248 ops/s
# Warmup Iteration  27: 745523.365 ops/s
# Warmup Iteration  28: 739316.207 ops/s
# Warmup Iteration  29: 756564.049 ops/s
# Warmup Iteration  30: 759976.322 ops/s
Iteration   1: 727013.958 ops/s
Iteration   2: 735739.914 ops/s
Iteration   3: 753029.200 ops/s
Iteration   4: 740995.296 ops/s
Iteration   5: 756557.535 ops/s
Iteration   6: 717233.031 ops/s
Iteration   7: 709250.359 ops/s
Iteration   8: 741314.633 ops/s
Iteration   9: 740271.870 ops/s
Iteration  10: 761400.246 ops/s
Iteration  11: 732172.862 ops/s
Iteration  12: 775400.346 ops/s
Iteration  13: 715313.432 ops/s
Iteration  14: 747563.790 ops/s
Iteration  15: 748039.682 ops/s
Iteration  16: 717298.518 ops/s
Iteration  17: 761063.426 ops/s
Iteration  18: 721679.881 ops/s
Iteration  19: 745657.184 ops/s
Iteration  20: 727844.747 ops/s
Iteration  21: 755465.695 ops/s
Iteration  22: 739411.160 ops/s
Iteration  23: 741048.377 ops/s
Iteration  24: 773376.903 ops/s
Iteration  25: 728576.275 ops/s
Iteration  26: 764098.215 ops/s
Iteration  27: 763662.006 ops/s
Iteration  28: 723986.065 ops/s
Iteration  29: 746866.911 ops/s
Iteration  30: 737348.483 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithSingleTest._Benchmark.benchmark_mainError":
  741622.667 ±(99.9%) 11725.906 ops/s [Average]
  (min, avg, max) = (709250.359, 741622.667, 775400.346), stdev = 17550.785
  CI (99.9%): [729896.761, 753348.572] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score       Error  Units
FlowableConcatWithSingleTest._Benchmark.benchmark_mainError  thrpt   30  741622.667 ± 11725.906  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDelayTest._Benchmark.benchmark_withPublisherError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDelayTest._Benchmark.benchmark_withPublisherError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 107976.257 ops/s
# Warmup Iteration   2: 618058.615 ops/s
# Warmup Iteration   3: 633349.608 ops/s
# Warmup Iteration   4: 655997.702 ops/s
# Warmup Iteration   5: 717269.653 ops/s
# Warmup Iteration   6: 692025.155 ops/s
# Warmup Iteration   7: 710779.778 ops/s
# Warmup Iteration   8: 727677.524 ops/s
# Warmup Iteration   9: 694055.236 ops/s
# Warmup Iteration  10: 649748.370 ops/s
# Warmup Iteration  11: 697778.256 ops/s
# Warmup Iteration  12: 694477.643 ops/s
# Warmup Iteration  13: 674204.090 ops/s
# Warmup Iteration  14: 734595.522 ops/s
# Warmup Iteration  15: 695638.984 ops/s
# Warmup Iteration  16: 732914.802 ops/s
# Warmup Iteration  17: 754202.302 ops/s
# Warmup Iteration  18: 691428.670 ops/s
# Warmup Iteration  19: 730444.720 ops/s
# Warmup Iteration  20: 778402.846 ops/s
# Warmup Iteration  21: 743138.421 ops/s
# Warmup Iteration  22: 764654.514 ops/s
# Warmup Iteration  23: 739584.250 ops/s
# Warmup Iteration  24: 759520.800 ops/s
# Warmup Iteration  25: 741690.659 ops/s
# Warmup Iteration  26: 754366.724 ops/s
# Warmup Iteration  27: 760141.261 ops/s
# Warmup Iteration  28: 727172.224 ops/s
# Warmup Iteration  29: 772853.341 ops/s
# Warmup Iteration  30: 733537.461 ops/s
Iteration   1: 766319.539 ops/s
Iteration   2: 731444.659 ops/s
Iteration   3: 746125.802 ops/s
Iteration   4: 771379.685 ops/s
Iteration   5: 712934.923 ops/s
Iteration   6: 759906.873 ops/s
Iteration   7: 750824.263 ops/s
Iteration   8: 759375.333 ops/s
Iteration   9: 742529.452 ops/s
Iteration  10: 737760.612 ops/s
Iteration  11: 784547.340 ops/s
Iteration  12: 730461.295 ops/s
Iteration  13: 621688.112 ops/s
Iteration  14: 749708.208 ops/s
Iteration  15: 735635.635 ops/s
Iteration  16: 751951.003 ops/s
Iteration  17: 757910.313 ops/s
Iteration  18: 718701.349 ops/s
Iteration  19: 766094.187 ops/s
Iteration  20: 729364.526 ops/s
Iteration  21: 770787.279 ops/s
Iteration  22: 748336.174 ops/s
Iteration  23: 737099.712 ops/s
Iteration  24: 765504.906 ops/s
Iteration  25: 726859.688 ops/s
Iteration  26: 757685.663 ops/s
Iteration  27: 782416.380 ops/s
Iteration  28: 749322.606 ops/s
Iteration  29: 735077.149 ops/s
Iteration  30: 761822.059 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleDelayTest._Benchmark.benchmark_withPublisherError":
  745319.158 ±(99.9%) 19623.539 ops/s [Average]
  (min, avg, max) = (621688.112, 745319.158, 784547.340), stdev = 29371.591
  CI (99.9%): [725695.619, 764942.696] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score       Error  Units
SingleDelayTest._Benchmark.benchmark_withPublisherError  thrpt   30  745319.158 ± 19623.539  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtTest._Benchmark.benchmark_elementAtIndex1WithDefaultOnEmptySource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtTest._Benchmark.benchmark_elementAtIndex1WithDefaultOnEmptySource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 823973.507 ops/s
# Warmup Iteration   2: 4589418.356 ops/s
# Warmup Iteration   3: 6310820.830 ops/s
# Warmup Iteration   4: 7128474.904 ops/s
# Warmup Iteration   5: 7494586.740 ops/s
# Warmup Iteration   6: 7068232.007 ops/s
# Warmup Iteration   7: 7169640.117 ops/s
# Warmup Iteration   8: 7023818.620 ops/s
# Warmup Iteration   9: 7291585.480 ops/s
# Warmup Iteration  10: 7293231.184 ops/s
# Warmup Iteration  11: 7053380.972 ops/s
# Warmup Iteration  12: 7117468.771 ops/s
# Warmup Iteration  13: 7456056.424 ops/s
# Warmup Iteration  14: 7346540.311 ops/s
# Warmup Iteration  15: 6872713.094 ops/s
# Warmup Iteration  16: 7606749.736 ops/s
# Warmup Iteration  17: 7258544.295 ops/s
# Warmup Iteration  18: 7448204.023 ops/s
# Warmup Iteration  19: 7369619.636 ops/s
# Warmup Iteration  20: 7434279.020 ops/s
# Warmup Iteration  21: 7465896.913 ops/s
# Warmup Iteration  22: 7279615.366 ops/s
# Warmup Iteration  23: 7216916.775 ops/s
# Warmup Iteration  24: 7122003.782 ops/s
# Warmup Iteration  25: 7542453.638 ops/s
# Warmup Iteration  26: 7269275.354 ops/s
# Warmup Iteration  27: 7364322.133 ops/s
# Warmup Iteration  28: 7306383.481 ops/s
# Warmup Iteration  29: 7602712.963 ops/s
# Warmup Iteration  30: 7218638.193 ops/s
Iteration   1: 7428822.725 ops/s
Iteration   2: 7228769.176 ops/s
Iteration   3: 7367803.218 ops/s
Iteration   4: 7498076.190 ops/s
Iteration   5: 7113171.473 ops/s
Iteration   6: 7306841.913 ops/s
Iteration   7: 7519120.440 ops/s
Iteration   8: 7097112.204 ops/s
Iteration   9: 7571022.318 ops/s
Iteration  10: 7257436.122 ops/s
Iteration  11: 7341038.321 ops/s
Iteration  12: 7140945.967 ops/s
Iteration  13: 7333065.288 ops/s
Iteration  14: 7500478.941 ops/s
Iteration  15: 7406134.662 ops/s
Iteration  16: 7072323.710 ops/s
Iteration  17: 7446723.051 ops/s
Iteration  18: 7235910.712 ops/s
Iteration  19: 7248252.611 ops/s
Iteration  20: 7595740.748 ops/s
Iteration  21: 7222354.347 ops/s
Iteration  22: 7618478.300 ops/s
Iteration  23: 7090437.114 ops/s
Iteration  24: 7445235.340 ops/s
Iteration  25: 7155278.249 ops/s
Iteration  26: 7323266.324 ops/s
Iteration  27: 7490314.469 ops/s
Iteration  28: 7355754.392 ops/s
Iteration  29: 7038191.146 ops/s
Iteration  30: 7444385.819 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtTest._Benchmark.benchmark_elementAtIndex1WithDefaultOnEmptySource":
  7329749.510 ±(99.9%) 111531.972 ops/s [Average]
  (min, avg, max) = (7038191.146, 7329749.510, 7618478.300), stdev = 166935.818
  CI (99.9%): [7218217.537, 7441281.482] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            Mode  Cnt        Score        Error  Units
FlowableElementAtTest._Benchmark.benchmark_elementAtIndex1WithDefaultOnEmptySource  thrpt   30  7329749.510 ± 111531.972  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtTest._Benchmark.benchmark_elementAtIndex0WithDefaultOnEmptySource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtTest._Benchmark.benchmark_elementAtIndex0WithDefaultOnEmptySource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1520362.780 ops/s
# Warmup Iteration   2: 4611002.176 ops/s
# Warmup Iteration   3: 7466280.638 ops/s
# Warmup Iteration   4: 6954429.906 ops/s
# Warmup Iteration   5: 7399372.769 ops/s
# Warmup Iteration   6: 7029429.109 ops/s
# Warmup Iteration   7: 7304666.091 ops/s
# Warmup Iteration   8: 7402398.014 ops/s
# Warmup Iteration   9: 6882005.141 ops/s
# Warmup Iteration  10: 7402835.881 ops/s
# Warmup Iteration  11: 7513144.780 ops/s
# Warmup Iteration  12: 7362817.178 ops/s
# Warmup Iteration  13: 7009978.736 ops/s
# Warmup Iteration  14: 7529041.016 ops/s
# Warmup Iteration  15: 7116576.545 ops/s
# Warmup Iteration  16: 7393449.062 ops/s
# Warmup Iteration  17: 7244250.416 ops/s
# Warmup Iteration  18: 7483017.378 ops/s
# Warmup Iteration  19: 7228139.959 ops/s
# Warmup Iteration  20: 7375440.830 ops/s
# Warmup Iteration  21: 7398176.817 ops/s
# Warmup Iteration  22: 7124391.914 ops/s
# Warmup Iteration  23: 7379562.861 ops/s
# Warmup Iteration  24: 7301234.518 ops/s
# Warmup Iteration  25: 7094377.299 ops/s
# Warmup Iteration  26: 7397688.445 ops/s
# Warmup Iteration  27: 7188228.319 ops/s
# Warmup Iteration  28: 7381139.361 ops/s
# Warmup Iteration  29: 7424936.507 ops/s
# Warmup Iteration  30: 7189611.949 ops/s
Iteration   1: 7338531.057 ops/s
Iteration   2: 7203590.219 ops/s
Iteration   3: 7436989.497 ops/s
Iteration   4: 7487724.589 ops/s
Iteration   5: 7208042.129 ops/s
Iteration   6: 7272155.835 ops/s
Iteration   7: 7089664.989 ops/s
Iteration   8: 6518492.280 ops/s
Iteration   9: 7253913.987 ops/s
Iteration  10: 7200524.085 ops/s
Iteration  11: 7289367.588 ops/s
Iteration  12: 7146679.503 ops/s
Iteration  13: 7310595.344 ops/s
Iteration  14: 7262313.157 ops/s
Iteration  15: 7650518.348 ops/s
Iteration  16: 7225287.593 ops/s
Iteration  17: 7334242.119 ops/s
Iteration  18: 7283527.306 ops/s
Iteration  19: 7348625.798 ops/s
Iteration  20: 7450638.933 ops/s
Iteration  21: 7205773.390 ops/s
Iteration  22: 7361702.974 ops/s
Iteration  23: 6932707.097 ops/s
Iteration  24: 7640869.796 ops/s
Iteration  25: 7433334.558 ops/s
Iteration  26: 7048504.534 ops/s
Iteration  27: 7206196.092 ops/s
Iteration  28: 7327186.024 ops/s
Iteration  29: 7305082.015 ops/s
Iteration  30: 7350272.636 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtTest._Benchmark.benchmark_elementAtIndex0WithDefaultOnEmptySource":
  7270768.449 ±(99.9%) 138842.356 ops/s [Average]
  (min, avg, max) = (6518492.280, 7270768.449, 7650518.348), stdev = 207812.718
  CI (99.9%): [7131926.093, 7409610.805] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            Mode  Cnt        Score        Error  Units
FlowableElementAtTest._Benchmark.benchmark_elementAtIndex0WithDefaultOnEmptySource  thrpt   30  7270768.449 ± 138842.356  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_distinctFunctionReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_distinctFunctionReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 236131.709 ops/s
# Warmup Iteration   2: 405608.820 ops/s
# Warmup Iteration   3: 429572.289 ops/s
# Warmup Iteration   4: 456072.730 ops/s
# Warmup Iteration   5: 413664.876 ops/s
# Warmup Iteration   6: 465015.403 ops/s
# Warmup Iteration   7: 478503.079 ops/s
# Warmup Iteration   8: 473817.679 ops/s
# Warmup Iteration   9: 487049.333 ops/s
# Warmup Iteration  10: 463229.692 ops/s
# Warmup Iteration  11: 478316.203 ops/s
# Warmup Iteration  12: 471175.448 ops/s
# Warmup Iteration  13: 478433.356 ops/s
# Warmup Iteration  14: 474490.927 ops/s
# Warmup Iteration  15: 459974.158 ops/s
# Warmup Iteration  16: 485548.426 ops/s
# Warmup Iteration  17: 481498.603 ops/s
# Warmup Iteration  18: 486382.142 ops/s
# Warmup Iteration  19: 510599.344 ops/s
# Warmup Iteration  20: 481459.102 ops/s
# Warmup Iteration  21: 487727.324 ops/s
# Warmup Iteration  22: 512488.145 ops/s
# Warmup Iteration  23: 476484.673 ops/s
# Warmup Iteration  24: 480644.582 ops/s
# Warmup Iteration  25: 501147.901 ops/s
# Warmup Iteration  26: 486770.742 ops/s
# Warmup Iteration  27: 491325.851 ops/s
# Warmup Iteration  28: 500612.711 ops/s
# Warmup Iteration  29: 487775.956 ops/s
# Warmup Iteration  30: 504801.580 ops/s
Iteration   1: 487398.036 ops/s
Iteration   2: 485962.073 ops/s
Iteration   3: 511375.241 ops/s
Iteration   4: 482335.689 ops/s
Iteration   5: 492835.211 ops/s
Iteration   6: 499095.084 ops/s
Iteration   7: 487699.509 ops/s
Iteration   8: 511237.289 ops/s
Iteration   9: 469868.668 ops/s
Iteration  10: 513401.174 ops/s
Iteration  11: 476780.978 ops/s
Iteration  12: 499978.827 ops/s
Iteration  13: 485763.531 ops/s
Iteration  14: 485699.820 ops/s
Iteration  15: 500334.771 ops/s
Iteration  16: 489672.415 ops/s
Iteration  17: 489321.259 ops/s
Iteration  18: 497878.529 ops/s
Iteration  19: 492498.536 ops/s
Iteration  20: 509519.493 ops/s
Iteration  21: 480828.246 ops/s
Iteration  22: 500994.963 ops/s
Iteration  23: 479445.250 ops/s
Iteration  24: 500621.087 ops/s
Iteration  25: 491916.947 ops/s
Iteration  26: 490432.462 ops/s
Iteration  27: 495340.127 ops/s
Iteration  28: 488257.847 ops/s
Iteration  29: 480996.505 ops/s
Iteration  30: 494475.041 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_distinctFunctionReturnsNull":
  492398.820 ±(99.9%) 7126.184 ops/s [Average]
  (min, avg, max) = (469868.668, 492398.820, 513401.174), stdev = 10666.138
  CI (99.9%): [485272.636, 499525.005] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score      Error  Units
FlowableNullTests._Benchmark.benchmark_distinctFunctionReturnsNull  thrpt   30  492398.820 ± 7126.184  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycleTest._Benchmark.benchmark_requestCrashed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycleTest._Benchmark.benchmark_requestCrashed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 44785.805 ops/s
# Warmup Iteration   2: 198345.755 ops/s
# Warmup Iteration   3: 199896.999 ops/s
# Warmup Iteration   4: 195831.292 ops/s
# Warmup Iteration   5: 230340.910 ops/s
# Warmup Iteration   6: 228819.981 ops/s
# Warmup Iteration   7: 226013.164 ops/s
# Warmup Iteration   8: 234502.318 ops/s
# Warmup Iteration   9: 224034.216 ops/s
# Warmup Iteration  10: 230516.696 ops/s
# Warmup Iteration  11: 229085.176 ops/s
# Warmup Iteration  12: 236454.260 ops/s
# Warmup Iteration  13: 220867.651 ops/s
# Warmup Iteration  14: 239342.031 ops/s
# Warmup Iteration  15: 221753.095 ops/s
# Warmup Iteration  16: 229129.831 ops/s
# Warmup Iteration  17: 237746.394 ops/s
# Warmup Iteration  18: 234073.522 ops/s
# Warmup Iteration  19: 246630.292 ops/s
# Warmup Iteration  20: 232422.230 ops/s
# Warmup Iteration  21: 235403.972 ops/s
# Warmup Iteration  22: 232536.495 ops/s
# Warmup Iteration  23: 240266.893 ops/s
# Warmup Iteration  24: 238636.587 ops/s
# Warmup Iteration  25: 238242.240 ops/s
# Warmup Iteration  26: 234705.406 ops/s
# Warmup Iteration  27: 244105.200 ops/s
# Warmup Iteration  28: 235549.581 ops/s
# Warmup Iteration  29: 237980.855 ops/s
# Warmup Iteration  30: 228209.878 ops/s
Iteration   1: 241393.288 ops/s
Iteration   2: 174571.734 ops/s
Iteration   3: 228167.679 ops/s
Iteration   4: 237158.243 ops/s
Iteration   5: 235314.942 ops/s
Iteration   6: 242785.069 ops/s
Iteration   7: 230675.935 ops/s
Iteration   8: 239600.400 ops/s
Iteration   9: 242990.779 ops/s
Iteration  10: 231138.500 ops/s
Iteration  11: 242180.312 ops/s
Iteration  12: 234075.396 ops/s
Iteration  13: 230083.181 ops/s
Iteration  14: 243913.574 ops/s
Iteration  15: 234135.463 ops/s
Iteration  16: 238395.750 ops/s
Iteration  17: 232246.811 ops/s
Iteration  18: 236913.930 ops/s
Iteration  19: 246920.221 ops/s
Iteration  20: 230822.554 ops/s
Iteration  21: 240774.806 ops/s
Iteration  22: 239183.229 ops/s
Iteration  23: 240888.553 ops/s
Iteration  24: 236950.796 ops/s
Iteration  25: 230708.782 ops/s
Iteration  26: 244508.073 ops/s
Iteration  27: 230941.085 ops/s
Iteration  28: 238441.761 ops/s
Iteration  29: 229550.590 ops/s
Iteration  30: 238226.623 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycleTest._Benchmark.benchmark_requestCrashed":
  234788.602 ±(99.9%) 8347.914 ops/s [Average]
  (min, avg, max) = (174571.734, 234788.602, 246920.221), stdev = 12494.766
  CI (99.9%): [226440.688, 243136.516] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
FlowableDoOnLifecycleTest._Benchmark.benchmark_requestCrashed  thrpt   30  234788.602 ± 8347.914  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFromStreamTest._Benchmark.benchmark_fusedPoll$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFromStreamTest._Benchmark.benchmark_fusedPoll

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1356814.704 ops/s
# Warmup Iteration   2: 5853943.900 ops/s
# Warmup Iteration   3: 6496243.804 ops/s
# Warmup Iteration   4: 7235124.288 ops/s
# Warmup Iteration   5: 7687693.925 ops/s
# Warmup Iteration   6: 7433541.829 ops/s
# Warmup Iteration   7: 7535224.361 ops/s
# Warmup Iteration   8: 7548833.779 ops/s
# Warmup Iteration   9: 7528562.445 ops/s
# Warmup Iteration  10: 7639647.768 ops/s
# Warmup Iteration  11: 7665640.287 ops/s
# Warmup Iteration  12: 7769813.113 ops/s
# Warmup Iteration  13: 7234263.543 ops/s
# Warmup Iteration  14: 7575497.385 ops/s
# Warmup Iteration  15: 7480720.425 ops/s
# Warmup Iteration  16: 7633253.087 ops/s
# Warmup Iteration  17: 7584111.727 ops/s
# Warmup Iteration  18: 7383768.768 ops/s
# Warmup Iteration  19: 7540978.548 ops/s
# Warmup Iteration  20: 7484708.782 ops/s
# Warmup Iteration  21: 7650632.745 ops/s
# Warmup Iteration  22: 7175760.391 ops/s
# Warmup Iteration  23: 7603609.222 ops/s
# Warmup Iteration  24: 7497542.529 ops/s
# Warmup Iteration  25: 7226734.010 ops/s
# Warmup Iteration  26: 7520415.575 ops/s
# Warmup Iteration  27: 7197811.658 ops/s
# Warmup Iteration  28: 7536165.059 ops/s
# Warmup Iteration  29: 7442771.218 ops/s
# Warmup Iteration  30: 7371412.320 ops/s
Iteration   1: 7640000.955 ops/s
Iteration   2: 7132692.598 ops/s
Iteration   3: 7830600.853 ops/s
Iteration   4: 7651072.490 ops/s
Iteration   5: 7407785.044 ops/s
Iteration   6: 7944843.381 ops/s
Iteration   7: 7504753.641 ops/s
Iteration   8: 7011670.109 ops/s
Iteration   9: 7583747.140 ops/s
Iteration  10: 7458213.387 ops/s
Iteration  11: 7701233.536 ops/s
Iteration  12: 7259602.863 ops/s
Iteration  13: 7665161.162 ops/s
Iteration  14: 7505362.939 ops/s
Iteration  15: 7127723.405 ops/s
Iteration  16: 7797232.141 ops/s
Iteration  17: 7639323.902 ops/s
Iteration  18: 7177584.842 ops/s
Iteration  19: 7692714.255 ops/s
Iteration  20: 7254817.516 ops/s
Iteration  21: 7477379.059 ops/s
Iteration  22: 7302395.631 ops/s
Iteration  23: 7569468.157 ops/s
Iteration  24: 7300147.789 ops/s
Iteration  25: 7541258.386 ops/s
Iteration  26: 7493361.149 ops/s
Iteration  27: 7439255.152 ops/s
Iteration  28: 7635034.734 ops/s
Iteration  29: 7381003.290 ops/s
Iteration  30: 7405750.574 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableFromStreamTest._Benchmark.benchmark_fusedPoll":
  7484373.003 ±(99.9%) 148730.181 ops/s [Average]
  (min, avg, max) = (7011670.109, 7484373.003, 7944843.381), stdev = 222612.350
  CI (99.9%): [7335642.821, 7633103.184] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score        Error  Units
FlowableFromStreamTest._Benchmark.benchmark_fusedPoll  thrpt   30  7484373.003 ± 148730.181  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_concatMapDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_concatMapDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 866587.312 ops/s
# Warmup Iteration   2: 2211231.655 ops/s
# Warmup Iteration   3: 2473570.347 ops/s
# Warmup Iteration   4: 2804759.987 ops/s
# Warmup Iteration   5: 2873004.478 ops/s
# Warmup Iteration   6: 2876347.937 ops/s
# Warmup Iteration   7: 2961607.449 ops/s
# Warmup Iteration   8: 2819620.356 ops/s
# Warmup Iteration   9: 2895137.359 ops/s
# Warmup Iteration  10: 2921749.884 ops/s
# Warmup Iteration  11: 2848842.883 ops/s
# Warmup Iteration  12: 2848818.388 ops/s
# Warmup Iteration  13: 2857737.542 ops/s
# Warmup Iteration  14: 2865069.419 ops/s
# Warmup Iteration  15: 2974757.042 ops/s
# Warmup Iteration  16: 2868772.120 ops/s
# Warmup Iteration  17: 2838568.680 ops/s
# Warmup Iteration  18: 2923801.802 ops/s
# Warmup Iteration  19: 2847893.567 ops/s
# Warmup Iteration  20: 2984525.705 ops/s
# Warmup Iteration  21: 2829738.036 ops/s
# Warmup Iteration  22: 2960791.758 ops/s
# Warmup Iteration  23: 2957609.857 ops/s
# Warmup Iteration  24: 2857306.590 ops/s
# Warmup Iteration  25: 2852552.639 ops/s
# Warmup Iteration  26: 2789801.060 ops/s
# Warmup Iteration  27: 2419621.453 ops/s
# Warmup Iteration  28: 3040708.604 ops/s
# Warmup Iteration  29: 2794398.248 ops/s
# Warmup Iteration  30: 2961058.965 ops/s
Iteration   1: 2840795.383 ops/s
Iteration   2: 2960221.256 ops/s
Iteration   3: 2916678.912 ops/s
Iteration   4: 2971010.114 ops/s
Iteration   5: 2866103.734 ops/s
Iteration   6: 2977081.245 ops/s
Iteration   7: 2832926.416 ops/s
Iteration   8: 2844459.805 ops/s
Iteration   9: 2969283.034 ops/s
Iteration  10: 2813713.097 ops/s
Iteration  11: 2916731.282 ops/s
Iteration  12: 2859313.791 ops/s
Iteration  13: 2956716.832 ops/s
Iteration  14: 2828650.320 ops/s
Iteration  15: 2853283.448 ops/s
Iteration  16: 2920762.928 ops/s
Iteration  17: 2826245.215 ops/s
Iteration  18: 2870631.108 ops/s
Iteration  19: 2826131.906 ops/s
Iteration  20: 2884749.477 ops/s
Iteration  21: 2897674.790 ops/s
Iteration  22: 2985912.676 ops/s
Iteration  23: 2821563.538 ops/s
Iteration  24: 2922530.911 ops/s
Iteration  25: 2846065.184 ops/s
Iteration  26: 2958694.001 ops/s
Iteration  27: 2867204.108 ops/s
Iteration  28: 2888024.266 ops/s
Iteration  29: 2860813.527 ops/s
Iteration  30: 2877694.226 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_concatMapDelayError":
  2888722.218 ±(99.9%) 35969.685 ops/s [Average]
  (min, avg, max) = (2813713.097, 2888722.218, 2985912.676), stdev = 53837.735
  CI (99.9%): [2852752.533, 2924691.903] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
FlowableConcatTest._Benchmark.benchmark_concatMapDelayError  thrpt   30  2888722.218 ± 35969.685  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_concatObservableDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_concatObservableDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 377194.254 ops/s
# Warmup Iteration   2: 1958025.163 ops/s
# Warmup Iteration   3: 2576772.595 ops/s
# Warmup Iteration   4: 2579293.085 ops/s
# Warmup Iteration   5: 2783018.429 ops/s
# Warmup Iteration   6: 2717650.250 ops/s
# Warmup Iteration   7: 2754037.962 ops/s
# Warmup Iteration   8: 2827588.337 ops/s
# Warmup Iteration   9: 2660931.365 ops/s
# Warmup Iteration  10: 2812171.245 ops/s
# Warmup Iteration  11: 2450078.491 ops/s
# Warmup Iteration  12: 2570242.717 ops/s
# Warmup Iteration  13: 2834446.968 ops/s
# Warmup Iteration  14: 2779855.383 ops/s
# Warmup Iteration  15: 2745719.245 ops/s
# Warmup Iteration  16: 2820720.977 ops/s
# Warmup Iteration  17: 2901351.695 ops/s
# Warmup Iteration  18: 2745172.008 ops/s
# Warmup Iteration  19: 2827528.185 ops/s
# Warmup Iteration  20: 2728213.732 ops/s
# Warmup Iteration  21: 2813954.636 ops/s
# Warmup Iteration  22: 2862209.215 ops/s
# Warmup Iteration  23: 2863790.161 ops/s
# Warmup Iteration  24: 2712301.642 ops/s
# Warmup Iteration  25: 2783536.134 ops/s
# Warmup Iteration  26: 2725084.776 ops/s
# Warmup Iteration  27: 2856582.437 ops/s
# Warmup Iteration  28: 2901428.183 ops/s
# Warmup Iteration  29: 2683987.775 ops/s
# Warmup Iteration  30: 2833774.925 ops/s
Iteration   1: 2711973.832 ops/s
Iteration   2: 2753102.581 ops/s
Iteration   3: 2820534.756 ops/s
Iteration   4: 2721286.261 ops/s
Iteration   5: 2797524.725 ops/s
Iteration   6: 2731719.220 ops/s
Iteration   7: 2820583.223 ops/s
Iteration   8: 2840695.561 ops/s
Iteration   9: 2872547.154 ops/s
Iteration  10: 2708817.201 ops/s
Iteration  11: 2856082.473 ops/s
Iteration  12: 2787583.180 ops/s
Iteration  13: 2766896.351 ops/s
Iteration  14: 2828415.012 ops/s
Iteration  15: 2731474.840 ops/s
Iteration  16: 2784330.795 ops/s
Iteration  17: 2845838.471 ops/s
Iteration  18: 2747546.891 ops/s
Iteration  19: 2770677.779 ops/s
Iteration  20: 2830128.013 ops/s
Iteration  21: 2661042.184 ops/s
Iteration  22: 2799622.449 ops/s
Iteration  23: 2692261.504 ops/s
Iteration  24: 2866918.887 ops/s
Iteration  25: 2709711.498 ops/s
Iteration  26: 2855340.939 ops/s
Iteration  27: 2896505.740 ops/s
Iteration  28: 2706343.399 ops/s
Iteration  29: 2816994.353 ops/s
Iteration  30: 2752769.772 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_concatObservableDelayError":
  2782842.302 ±(99.9%) 41527.204 ops/s [Average]
  (min, avg, max) = (2661042.184, 2782842.302, 2896505.740), stdev = 62155.968
  CI (99.9%): [2741315.098, 2824369.505] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
FlowableConcatTest._Benchmark.benchmark_concatObservableDelayError  thrpt   30  2782842.302 ± 41527.204  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_concatMapEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_concatMapEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 505263.922 ops/s
# Warmup Iteration   2: 2076887.824 ops/s
# Warmup Iteration   3: 2337994.129 ops/s
# Warmup Iteration   4: 2561603.129 ops/s
# Warmup Iteration   5: 2750762.533 ops/s
# Warmup Iteration   6: 2584234.908 ops/s
# Warmup Iteration   7: 2691544.348 ops/s
# Warmup Iteration   8: 2620632.743 ops/s
# Warmup Iteration   9: 2819899.779 ops/s
# Warmup Iteration  10: 2633829.546 ops/s
# Warmup Iteration  11: 2614814.919 ops/s
# Warmup Iteration  12: 2707384.195 ops/s
# Warmup Iteration  13: 2739213.420 ops/s
# Warmup Iteration  14: 2687254.867 ops/s
# Warmup Iteration  15: 2661242.503 ops/s
# Warmup Iteration  16: 2595847.840 ops/s
# Warmup Iteration  17: 2712171.766 ops/s
# Warmup Iteration  18: 2587263.848 ops/s
# Warmup Iteration  19: 2615491.739 ops/s
# Warmup Iteration  20: 2632209.175 ops/s
# Warmup Iteration  21: 2635832.918 ops/s
# Warmup Iteration  22: 2063129.558 ops/s
# Warmup Iteration  23: 2620537.522 ops/s
# Warmup Iteration  24: 2621624.677 ops/s
# Warmup Iteration  25: 2753734.284 ops/s
# Warmup Iteration  26: 2643905.489 ops/s
# Warmup Iteration  27: 2666935.736 ops/s
# Warmup Iteration  28: 2654437.588 ops/s
# Warmup Iteration  29: 2703529.570 ops/s
# Warmup Iteration  30: 2692235.662 ops/s
Iteration   1: 2616803.080 ops/s
Iteration   2: 2679404.092 ops/s
Iteration   3: 2596145.137 ops/s
Iteration   4: 2607024.757 ops/s
Iteration   5: 2624499.067 ops/s
Iteration   6: 2608267.460 ops/s
Iteration   7: 2712716.992 ops/s
Iteration   8: 2776308.946 ops/s
Iteration   9: 2579966.559 ops/s
Iteration  10: 2743715.178 ops/s
Iteration  11: 2603930.229 ops/s
Iteration  12: 2639739.748 ops/s
Iteration  13: 2728497.408 ops/s
Iteration  14: 2702747.676 ops/s
Iteration  15: 2754387.299 ops/s
Iteration  16: 2688318.054 ops/s
Iteration  17: 2613281.340 ops/s
Iteration  18: 2679232.762 ops/s
Iteration  19: 2599615.210 ops/s
Iteration  20: 2696646.495 ops/s
Iteration  21: 2613133.372 ops/s
Iteration  22: 2657462.249 ops/s
Iteration  23: 2708356.793 ops/s
Iteration  24: 2705166.121 ops/s
Iteration  25: 2643637.396 ops/s
Iteration  26: 2741920.219 ops/s
Iteration  27: 2651731.301 ops/s
Iteration  28: 2721767.344 ops/s
Iteration  29: 2610765.487 ops/s
Iteration  30: 2704964.532 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_concatMapEmpty":
  2667005.077 ±(99.9%) 37328.405 ops/s [Average]
  (min, avg, max) = (2579966.559, 2667005.077, 2776308.946), stdev = 55871.403
  CI (99.9%): [2629676.672, 2704333.481] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
FlowableConcatTest._Benchmark.benchmark_concatMapEmpty  thrpt   30  2667005.077 ± 37328.405  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_concatMapJustSource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_concatMapJustSource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 310846.093 ops/s
# Warmup Iteration   2: 1256412.869 ops/s
# Warmup Iteration   3: 2150840.566 ops/s
# Warmup Iteration   4: 1962301.094 ops/s
# Warmup Iteration   5: 2421510.052 ops/s
# Warmup Iteration   6: 2410320.300 ops/s
# Warmup Iteration   7: 2243155.205 ops/s
# Warmup Iteration   8: 2436771.200 ops/s
# Warmup Iteration   9: 2355613.461 ops/s
# Warmup Iteration  10: 2406534.401 ops/s
# Warmup Iteration  11: 2321725.068 ops/s
# Warmup Iteration  12: 2405516.862 ops/s
# Warmup Iteration  13: 2358944.869 ops/s
# Warmup Iteration  14: 2450121.938 ops/s
# Warmup Iteration  15: 2310476.336 ops/s
# Warmup Iteration  16: 2402421.539 ops/s
# Warmup Iteration  17: 2358127.247 ops/s
# Warmup Iteration  18: 2326761.363 ops/s
# Warmup Iteration  19: 2418728.530 ops/s
# Warmup Iteration  20: 2305010.292 ops/s
# Warmup Iteration  21: 2402500.536 ops/s
# Warmup Iteration  22: 2310557.647 ops/s
# Warmup Iteration  23: 2339533.346 ops/s
# Warmup Iteration  24: 2387254.080 ops/s
# Warmup Iteration  25: 2337456.343 ops/s
# Warmup Iteration  26: 2424092.651 ops/s
# Warmup Iteration  27: 2332901.433 ops/s
# Warmup Iteration  28: 2283217.444 ops/s
# Warmup Iteration  29: 2455990.660 ops/s
# Warmup Iteration  30: 2321176.050 ops/s
Iteration   1: 2413251.364 ops/s
Iteration   2: 2368577.974 ops/s
Iteration   3: 2339051.515 ops/s
Iteration   4: 2455836.179 ops/s
Iteration   5: 2279581.885 ops/s
Iteration   6: 2313977.864 ops/s
Iteration   7: 2337543.703 ops/s
Iteration   8: 2444202.913 ops/s
Iteration   9: 2319636.180 ops/s
Iteration  10: 2424900.252 ops/s
Iteration  11: 2454270.401 ops/s
Iteration  12: 2295059.782 ops/s
Iteration  13: 2456871.725 ops/s
Iteration  14: 2429007.637 ops/s
Iteration  15: 2301977.268 ops/s
Iteration  16: 2412681.958 ops/s
Iteration  17: 2341386.695 ops/s
Iteration  18: 2291097.501 ops/s
Iteration  19: 2438458.573 ops/s
Iteration  20: 2316880.199 ops/s
Iteration  21: 2457067.376 ops/s
Iteration  22: 2313033.085 ops/s
Iteration  23: 2381204.729 ops/s
Iteration  24: 2325287.511 ops/s
Iteration  25: 2320745.984 ops/s
Iteration  26: 2420239.909 ops/s
Iteration  27: 2319801.884 ops/s
Iteration  28: 2450438.118 ops/s
Iteration  29: 2398728.172 ops/s
Iteration  30: 2367377.210 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_concatMapJustSource":
  2372939.185 ±(99.9%) 40361.102 ops/s [Average]
  (min, avg, max) = (2279581.885, 2372939.185, 2457067.376), stdev = 60410.602
  CI (99.9%): [2332578.083, 2413300.287] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
FlowableConcatTest._Benchmark.benchmark_concatMapJustSource  thrpt   30  2372939.185 ± 40361.102  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_mapperThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_mapperThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 207522.522 ops/s
# Warmup Iteration   2: 427788.393 ops/s
# Warmup Iteration   3: 532515.588 ops/s
# Warmup Iteration   4: 505336.833 ops/s
# Warmup Iteration   5: 535717.150 ops/s
# Warmup Iteration   6: 438882.581 ops/s
# Warmup Iteration   7: 505566.396 ops/s
# Warmup Iteration   8: 540654.042 ops/s
# Warmup Iteration   9: 492834.301 ops/s
# Warmup Iteration  10: 523649.203 ops/s
# Warmup Iteration  11: 535736.352 ops/s
# Warmup Iteration  12: 515567.675 ops/s
# Warmup Iteration  13: 535446.127 ops/s
# Warmup Iteration  14: 500258.419 ops/s
# Warmup Iteration  15: 521711.180 ops/s
# Warmup Iteration  16: 536088.267 ops/s
# Warmup Iteration  17: 372472.025 ops/s
# Warmup Iteration  18: 536676.081 ops/s
# Warmup Iteration  19: 547785.952 ops/s
# Warmup Iteration  20: 534741.499 ops/s
# Warmup Iteration  21: 544320.576 ops/s
# Warmup Iteration  22: 533617.556 ops/s
# Warmup Iteration  23: 553063.590 ops/s
# Warmup Iteration  24: 544036.220 ops/s
# Warmup Iteration  25: 547357.031 ops/s
# Warmup Iteration  26: 555012.904 ops/s
# Warmup Iteration  27: 542032.982 ops/s
# Warmup Iteration  28: 562860.504 ops/s
# Warmup Iteration  29: 550864.379 ops/s
# Warmup Iteration  30: 528770.937 ops/s
Iteration   1: 568603.806 ops/s
Iteration   2: 537743.347 ops/s
Iteration   3: 544495.422 ops/s
Iteration   4: 553163.187 ops/s
Iteration   5: 528311.740 ops/s
Iteration   6: 551338.013 ops/s
Iteration   7: 550826.051 ops/s
Iteration   8: 545766.601 ops/s
Iteration   9: 564196.687 ops/s
Iteration  10: 539711.326 ops/s
Iteration  11: 570158.338 ops/s
Iteration  12: 538444.606 ops/s
Iteration  13: 546556.790 ops/s
Iteration  14: 547869.457 ops/s
Iteration  15: 531826.253 ops/s
Iteration  16: 530855.637 ops/s
Iteration  17: 535924.769 ops/s
Iteration  18: 543263.840 ops/s
Iteration  19: 571223.498 ops/s
Iteration  20: 535314.107 ops/s
Iteration  21: 550708.859 ops/s
Iteration  22: 546889.172 ops/s
Iteration  23: 559612.954 ops/s
Iteration  24: 543115.815 ops/s
Iteration  25: 558528.226 ops/s
Iteration  26: 538320.244 ops/s
Iteration  27: 559494.056 ops/s
Iteration  28: 542346.436 ops/s
Iteration  29: 545034.665 ops/s
Iteration  30: 556160.571 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_mapperThrows":
  547860.149 ±(99.9%) 7778.185 ops/s [Average]
  (min, avg, max) = (528311.740, 547860.149, 571223.498), stdev = 11642.023
  CI (99.9%): [540081.964, 555638.334] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score      Error  Units
FlowableConcatTest._Benchmark.benchmark_mapperThrows  thrpt   30  547860.149 ± 7778.185  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapTest._Benchmark.benchmark_delayErrorCallableEager$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapTest._Benchmark.benchmark_delayErrorCallableEager

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 92116.158 ops/s
# Warmup Iteration   2: 362169.555 ops/s
# Warmup Iteration   3: 481997.194 ops/s
# Warmup Iteration   4: 446983.869 ops/s
# Warmup Iteration   5: 452798.929 ops/s
# Warmup Iteration   6: 452231.156 ops/s
# Warmup Iteration   7: 473871.353 ops/s
# Warmup Iteration   8: 449364.627 ops/s
# Warmup Iteration   9: 434833.519 ops/s
# Warmup Iteration  10: 466314.436 ops/s
# Warmup Iteration  11: 441017.682 ops/s
# Warmup Iteration  12: 483218.238 ops/s
# Warmup Iteration  13: 449770.721 ops/s
# Warmup Iteration  14: 481319.695 ops/s
# Warmup Iteration  15: 456404.041 ops/s
# Warmup Iteration  16: 459647.008 ops/s
# Warmup Iteration  17: 502714.399 ops/s
# Warmup Iteration  18: 475009.047 ops/s
# Warmup Iteration  19: 487321.793 ops/s
# Warmup Iteration  20: 483133.723 ops/s
# Warmup Iteration  21: 472845.404 ops/s
# Warmup Iteration  22: 478455.199 ops/s
# Warmup Iteration  23: 466106.725 ops/s
# Warmup Iteration  24: 491219.417 ops/s
# Warmup Iteration  25: 481048.020 ops/s
# Warmup Iteration  26: 498481.431 ops/s
# Warmup Iteration  27: 478615.627 ops/s
# Warmup Iteration  28: 488139.863 ops/s
# Warmup Iteration  29: 505080.682 ops/s
# Warmup Iteration  30: 483848.600 ops/s
Iteration   1: 501613.611 ops/s
Iteration   2: 474402.624 ops/s
Iteration   3: 495080.062 ops/s
Iteration   4: 481923.196 ops/s
Iteration   5: 490863.619 ops/s
Iteration   6: 506988.713 ops/s
Iteration   7: 489823.077 ops/s
Iteration   8: 499174.776 ops/s
Iteration   9: 471232.489 ops/s
Iteration  10: 496231.569 ops/s
Iteration  11: 495422.504 ops/s
Iteration  12: 475936.356 ops/s
Iteration  13: 489239.332 ops/s
Iteration  14: 508694.005 ops/s
Iteration  15: 480527.711 ops/s
Iteration  16: 496429.111 ops/s
Iteration  17: 497123.116 ops/s
Iteration  18: 495623.196 ops/s
Iteration  19: 498666.193 ops/s
Iteration  20: 469546.143 ops/s
Iteration  21: 497212.420 ops/s
Iteration  22: 488783.181 ops/s
Iteration  23: 496010.915 ops/s
Iteration  24: 466521.011 ops/s
Iteration  25: 486256.285 ops/s
Iteration  26: 507656.350 ops/s
Iteration  27: 480014.749 ops/s
Iteration  28: 499551.121 ops/s
Iteration  29: 468125.303 ops/s
Iteration  30: 496798.776 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapTest._Benchmark.benchmark_delayErrorCallableEager":
  490049.050 ±(99.9%) 8040.523 ops/s [Average]
  (min, avg, max) = (466521.011, 490049.050, 508694.005), stdev = 12034.678
  CI (99.9%): [482008.527, 498089.574] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score      Error  Units
FlowableConcatMapTest._Benchmark.benchmark_delayErrorCallableEager  thrpt   30  490049.050 ± 8040.523  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapTest._Benchmark.benchmark_pollThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapTest._Benchmark.benchmark_pollThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 65021.597 ops/s
# Warmup Iteration   2: 305779.590 ops/s
# Warmup Iteration   3: 366938.634 ops/s
# Warmup Iteration   4: 361162.555 ops/s
# Warmup Iteration   5: 341839.898 ops/s
# Warmup Iteration   6: 405859.398 ops/s
# Warmup Iteration   7: 386712.891 ops/s
# Warmup Iteration   8: 418536.852 ops/s
# Warmup Iteration   9: 409327.625 ops/s
# Warmup Iteration  10: 399656.720 ops/s
# Warmup Iteration  11: 374615.249 ops/s
# Warmup Iteration  12: 330785.051 ops/s
# Warmup Iteration  13: 385574.336 ops/s
# Warmup Iteration  14: 407882.007 ops/s
# Warmup Iteration  15: 386741.647 ops/s
# Warmup Iteration  16: 403478.723 ops/s
# Warmup Iteration  17: 403453.419 ops/s
# Warmup Iteration  18: 407311.868 ops/s
# Warmup Iteration  19: 407519.959 ops/s
# Warmup Iteration  20: 409597.586 ops/s
# Warmup Iteration  21: 417308.691 ops/s
# Warmup Iteration  22: 401981.599 ops/s
# Warmup Iteration  23: 418266.435 ops/s
# Warmup Iteration  24: 404118.660 ops/s
# Warmup Iteration  25: 406811.422 ops/s
# Warmup Iteration  26: 413654.059 ops/s
# Warmup Iteration  27: 403421.353 ops/s
# Warmup Iteration  28: 406892.151 ops/s
# Warmup Iteration  29: 414078.274 ops/s
# Warmup Iteration  30: 403801.192 ops/s
Iteration   1: 409124.224 ops/s
Iteration   2: 385491.252 ops/s
Iteration   3: 412878.359 ops/s
Iteration   4: 414983.395 ops/s
Iteration   5: 397609.274 ops/s
Iteration   6: 402722.269 ops/s
Iteration   7: 409828.064 ops/s
Iteration   8: 400780.810 ops/s
Iteration   9: 417028.407 ops/s
Iteration  10: 421814.830 ops/s
Iteration  11: 399441.351 ops/s
Iteration  12: 420277.725 ops/s
Iteration  13: 400955.434 ops/s
Iteration  14: 407471.896 ops/s
Iteration  15: 399519.430 ops/s
Iteration  16: 398308.926 ops/s
Iteration  17: 421272.561 ops/s
Iteration  18: 394851.422 ops/s
Iteration  19: 413864.650 ops/s
Iteration  20: 400871.806 ops/s
Iteration  21: 426843.749 ops/s
Iteration  22: 404950.280 ops/s
Iteration  23: 406991.412 ops/s
Iteration  24: 408553.704 ops/s
Iteration  25: 422730.904 ops/s
Iteration  26: 422319.819 ops/s
Iteration  27: 402668.672 ops/s
Iteration  28: 413300.958 ops/s
Iteration  29: 411404.796 ops/s
Iteration  30: 413201.735 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapTest._Benchmark.benchmark_pollThrows":
  408735.404 ±(99.9%) 6547.106 ops/s [Average]
  (min, avg, max) = (385491.252, 408735.404, 426843.749), stdev = 9799.401
  CI (99.9%): [402188.298, 415282.510] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score      Error  Units
FlowableConcatMapTest._Benchmark.benchmark_pollThrows  thrpt   30  408735.404 ± 6547.106  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatDelayErrorTest._Benchmark.benchmark_concatDelayErrorIterable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatDelayErrorTest._Benchmark.benchmark_concatDelayErrorIterable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 312755.732 ops/s
# Warmup Iteration   2: 1675886.262 ops/s
# Warmup Iteration   3: 2108504.349 ops/s
# Warmup Iteration   4: 2344458.249 ops/s
# Warmup Iteration   5: 2500363.898 ops/s
# Warmup Iteration   6: 2325767.662 ops/s
# Warmup Iteration   7: 2384025.595 ops/s
# Warmup Iteration   8: 2515531.375 ops/s
# Warmup Iteration   9: 2356012.073 ops/s
# Warmup Iteration  10: 2501991.547 ops/s
# Warmup Iteration  11: 2488819.289 ops/s
# Warmup Iteration  12: 2350605.261 ops/s
# Warmup Iteration  13: 2395214.904 ops/s
# Warmup Iteration  14: 2343018.404 ops/s
# Warmup Iteration  15: 2425236.536 ops/s
# Warmup Iteration  16: 2321622.965 ops/s
# Warmup Iteration  17: 2361009.315 ops/s
# Warmup Iteration  18: 2419335.344 ops/s
# Warmup Iteration  19: 2366553.716 ops/s
# Warmup Iteration  20: 2473517.127 ops/s
# Warmup Iteration  21: 2521775.119 ops/s
# Warmup Iteration  22: 2442840.944 ops/s
# Warmup Iteration  23: 2412342.988 ops/s
# Warmup Iteration  24: 2407086.651 ops/s
# Warmup Iteration  25: 2470890.814 ops/s
# Warmup Iteration  26: 2360328.367 ops/s
# Warmup Iteration  27: 2346240.711 ops/s
# Warmup Iteration  28: 2368129.787 ops/s
# Warmup Iteration  29: 2449091.436 ops/s
# Warmup Iteration  30: 2381773.052 ops/s
Iteration   1: 2464237.027 ops/s
Iteration   2: 2349997.315 ops/s
Iteration   3: 2433558.913 ops/s
Iteration   4: 2375688.849 ops/s
Iteration   5: 2380141.912 ops/s
Iteration   6: 2473260.200 ops/s
Iteration   7: 2377721.346 ops/s
Iteration   8: 2484191.307 ops/s
Iteration   9: 2354540.425 ops/s
Iteration  10: 2401163.901 ops/s
Iteration  11: 2530337.862 ops/s
Iteration  12: 2387245.913 ops/s
Iteration  13: 2396123.233 ops/s
Iteration  14: 2453448.757 ops/s
Iteration  15: 2398662.968 ops/s
Iteration  16: 2374965.390 ops/s
Iteration  17: 2489416.927 ops/s
Iteration  18: 2345897.375 ops/s
Iteration  19: 2442888.930 ops/s
Iteration  20: 2506206.263 ops/s
Iteration  21: 2328573.665 ops/s
Iteration  22: 2513861.973 ops/s
Iteration  23: 2468870.032 ops/s
Iteration  24: 2376547.152 ops/s
Iteration  25: 2466546.330 ops/s
Iteration  26: 2387283.953 ops/s
Iteration  27: 2498068.857 ops/s
Iteration  28: 2469044.568 ops/s
Iteration  29: 2377728.912 ops/s
Iteration  30: 2489647.394 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatDelayErrorTest._Benchmark.benchmark_concatDelayErrorIterable":
  2426528.922 ±(99.9%) 38878.971 ops/s [Average]
  (min, avg, max) = (2328573.665, 2426528.922, 2530337.862), stdev = 58192.218
  CI (99.9%): [2387649.951, 2465407.893] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score       Error  Units
FlowableConcatDelayErrorTest._Benchmark.benchmark_concatDelayErrorIterable  thrpt   30  2426528.922 ± 38878.971  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchIfEmptyTest._Benchmark.benchmark_backpressureNoRequest$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchIfEmptyTest._Benchmark.benchmark_backpressureNoRequest

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 640424.726 ops/s
# Warmup Iteration   2: 2845946.528 ops/s
# Warmup Iteration   3: 3496080.060 ops/s
# Warmup Iteration   4: 3846734.351 ops/s
# Warmup Iteration   5: 4100472.630 ops/s
# Warmup Iteration   6: 3861099.917 ops/s
# Warmup Iteration   7: 3370763.583 ops/s
# Warmup Iteration   8: 3969341.148 ops/s
# Warmup Iteration   9: 3949325.167 ops/s
# Warmup Iteration  10: 4052548.625 ops/s
# Warmup Iteration  11: 3977318.075 ops/s
# Warmup Iteration  12: 4124265.966 ops/s
# Warmup Iteration  13: 3952319.050 ops/s
# Warmup Iteration  14: 4114857.771 ops/s
# Warmup Iteration  15: 4059137.498 ops/s
# Warmup Iteration  16: 4097519.773 ops/s
# Warmup Iteration  17: 4004301.613 ops/s
# Warmup Iteration  18: 4080389.705 ops/s
# Warmup Iteration  19: 3916334.242 ops/s
# Warmup Iteration  20: 4176458.838 ops/s
# Warmup Iteration  21: 3994671.561 ops/s
# Warmup Iteration  22: 3943287.445 ops/s
# Warmup Iteration  23: 4149382.176 ops/s
# Warmup Iteration  24: 3804861.060 ops/s
# Warmup Iteration  25: 4113633.628 ops/s
# Warmup Iteration  26: 4129499.852 ops/s
# Warmup Iteration  27: 3950231.413 ops/s
# Warmup Iteration  28: 4229920.680 ops/s
# Warmup Iteration  29: 4105107.403 ops/s
# Warmup Iteration  30: 3977469.512 ops/s
Iteration   1: 4147177.826 ops/s
Iteration   2: 4054461.539 ops/s
Iteration   3: 3893777.154 ops/s
Iteration   4: 4101268.804 ops/s
Iteration   5: 4016560.273 ops/s
Iteration   6: 4062764.403 ops/s
Iteration   7: 3969579.061 ops/s
Iteration   8: 4058251.318 ops/s
Iteration   9: 4000356.102 ops/s
Iteration  10: 3937452.986 ops/s
Iteration  11: 4206957.458 ops/s
Iteration  12: 3882032.803 ops/s
Iteration  13: 4213474.019 ops/s
Iteration  14: 3841180.035 ops/s
Iteration  15: 4004755.049 ops/s
Iteration  16: 3998448.068 ops/s
Iteration  17: 3994521.654 ops/s
Iteration  18: 4222296.136 ops/s
Iteration  19: 3923965.395 ops/s
Iteration  20: 4067485.134 ops/s
Iteration  21: 3925749.996 ops/s
Iteration  22: 4164054.839 ops/s
Iteration  23: 3934144.573 ops/s
Iteration  24: 4052202.669 ops/s
Iteration  25: 3932909.907 ops/s
Iteration  26: 4063555.923 ops/s
Iteration  27: 3986997.906 ops/s
Iteration  28: 3968234.546 ops/s
Iteration  29: 4089174.350 ops/s
Iteration  30: 3980804.314 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchIfEmptyTest._Benchmark.benchmark_backpressureNoRequest":
  4023153.141 ±(99.9%) 66511.740 ops/s [Average]
  (min, avg, max) = (3841180.035, 4023153.141, 4222296.136), stdev = 99551.649
  CI (99.9%): [3956641.401, 4089664.881] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
FlowableSwitchIfEmptyTest._Benchmark.benchmark_backpressureNoRequest  thrpt   30  4023153.141 ± 66511.740  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_concatIterableOneIsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_concatIterableOneIsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 164516.629 ops/s
# Warmup Iteration   2: 457619.859 ops/s
# Warmup Iteration   3: 495705.161 ops/s
# Warmup Iteration   4: 449577.106 ops/s
# Warmup Iteration   5: 523879.594 ops/s
# Warmup Iteration   6: 432159.481 ops/s
# Warmup Iteration   7: 514213.934 ops/s
# Warmup Iteration   8: 527556.735 ops/s
# Warmup Iteration   9: 515006.416 ops/s
# Warmup Iteration  10: 492942.223 ops/s
# Warmup Iteration  11: 528398.533 ops/s
# Warmup Iteration  12: 537425.127 ops/s
# Warmup Iteration  13: 507365.969 ops/s
# Warmup Iteration  14: 523073.874 ops/s
# Warmup Iteration  15: 540918.858 ops/s
# Warmup Iteration  16: 506577.532 ops/s
# Warmup Iteration  17: 523603.153 ops/s
# Warmup Iteration  18: 532206.597 ops/s
# Warmup Iteration  19: 535486.027 ops/s
# Warmup Iteration  20: 521217.566 ops/s
# Warmup Iteration  21: 545518.249 ops/s
# Warmup Iteration  22: 548512.024 ops/s
# Warmup Iteration  23: 527290.027 ops/s
# Warmup Iteration  24: 542320.199 ops/s
# Warmup Iteration  25: 528547.860 ops/s
# Warmup Iteration  26: 546953.738 ops/s
# Warmup Iteration  27: 514954.977 ops/s
# Warmup Iteration  28: 541305.564 ops/s
# Warmup Iteration  29: 528231.595 ops/s
# Warmup Iteration  30: 529281.979 ops/s
Iteration   1: 565916.747 ops/s
Iteration   2: 522300.559 ops/s
Iteration   3: 555937.663 ops/s
Iteration   4: 516894.274 ops/s
Iteration   5: 544994.377 ops/s
Iteration   6: 531770.069 ops/s
Iteration   7: 541469.913 ops/s
Iteration   8: 550501.933 ops/s
Iteration   9: 522539.452 ops/s
Iteration  10: 554093.215 ops/s
Iteration  11: 523463.368 ops/s
Iteration  12: 551959.569 ops/s
Iteration  13: 526361.202 ops/s
Iteration  14: 528265.568 ops/s
Iteration  15: 553867.056 ops/s
Iteration  16: 537299.457 ops/s
Iteration  17: 543166.969 ops/s
Iteration  18: 529871.205 ops/s
Iteration  19: 538952.785 ops/s
Iteration  20: 537404.495 ops/s
Iteration  21: 535221.663 ops/s
Iteration  22: 545713.362 ops/s
Iteration  23: 536870.941 ops/s
Iteration  24: 541672.299 ops/s
Iteration  25: 550161.366 ops/s
Iteration  26: 530516.075 ops/s
Iteration  27: 544639.653 ops/s
Iteration  28: 519087.174 ops/s
Iteration  29: 541778.605 ops/s
Iteration  30: 548875.280 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_concatIterableOneIsNull":
  539052.210 ±(99.9%) 8151.407 ops/s [Average]
  (min, avg, max) = (516894.274, 539052.210, 565916.747), stdev = 12200.643
  CI (99.9%): [530900.803, 547203.617] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
FlowableNullTests._Benchmark.benchmark_concatIterableOneIsNull  thrpt   30  539052.210 ± 8151.407  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_composeIfNotEmptyIsEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_composeIfNotEmptyIsEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 144214.192 ops/s
# Warmup Iteration   2: 860521.220 ops/s
# Warmup Iteration   3: 1088607.811 ops/s
# Warmup Iteration   4: 1369845.106 ops/s
# Warmup Iteration   5: 1337447.128 ops/s
# Warmup Iteration   6: 1294234.474 ops/s
# Warmup Iteration   7: 1344409.715 ops/s
# Warmup Iteration   8: 1331225.104 ops/s
# Warmup Iteration   9: 1378968.705 ops/s
# Warmup Iteration  10: 1360454.634 ops/s
# Warmup Iteration  11: 1300781.167 ops/s
# Warmup Iteration  12: 1396344.380 ops/s
# Warmup Iteration  13: 1340353.350 ops/s
# Warmup Iteration  14: 1346211.411 ops/s
# Warmup Iteration  15: 1319902.863 ops/s
# Warmup Iteration  16: 1315544.354 ops/s
# Warmup Iteration  17: 1324919.310 ops/s
# Warmup Iteration  18: 1293536.261 ops/s
# Warmup Iteration  19: 1325943.211 ops/s
# Warmup Iteration  20: 1267400.678 ops/s
# Warmup Iteration  21: 1316094.147 ops/s
# Warmup Iteration  22: 1335247.529 ops/s
# Warmup Iteration  23: 1304261.010 ops/s
# Warmup Iteration  24: 1332543.574 ops/s
# Warmup Iteration  25: 1301197.296 ops/s
# Warmup Iteration  26: 1347168.273 ops/s
# Warmup Iteration  27: 1345263.474 ops/s
# Warmup Iteration  28: 1358471.495 ops/s
# Warmup Iteration  29: 1286633.761 ops/s
# Warmup Iteration  30: 1359083.202 ops/s
Iteration   1: 1287603.708 ops/s
Iteration   2: 1374278.657 ops/s
Iteration   3: 1302875.063 ops/s
Iteration   4: 1327344.640 ops/s
Iteration   5: 1385230.255 ops/s
Iteration   6: 1276289.886 ops/s
Iteration   7: 1368467.680 ops/s
Iteration   8: 1350831.601 ops/s
Iteration   9: 1293585.554 ops/s
Iteration  10: 1357319.096 ops/s
Iteration  11: 1347935.585 ops/s
Iteration  12: 1344564.567 ops/s
Iteration  13: 1305051.020 ops/s
Iteration  14: 1366790.926 ops/s
Iteration  15: 1358107.453 ops/s
Iteration  16: 1300674.273 ops/s
Iteration  17: 1341760.407 ops/s
Iteration  18: 1349748.100 ops/s
Iteration  19: 1319311.713 ops/s
Iteration  20: 1312365.067 ops/s
Iteration  21: 1341388.197 ops/s
Iteration  22: 1311934.350 ops/s
Iteration  23: 1318523.246 ops/s
Iteration  24: 1291174.865 ops/s
Iteration  25: 1265549.448 ops/s
Iteration  26: 1376631.813 ops/s
Iteration  27: 1292575.000 ops/s
Iteration  28: 1373010.418 ops/s
Iteration  29: 1290722.728 ops/s
Iteration  30: 1391193.005 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_composeIfNotEmptyIsEmpty":
  1330761.277 ±(99.9%) 23696.001 ops/s [Average]
  (min, avg, max) = (1265549.448, 1330761.277, 1391193.005), stdev = 35467.061
  CI (99.9%): [1307065.277, 1354457.278] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
FlowablePublishTest._Benchmark.benchmark_composeIfNotEmptyIsEmpty  thrpt   30  1330761.277 ± 23696.001  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_immediateInnerNextOuterError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_immediateInnerNextOuterError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 42142.006 ops/s
# Warmup Iteration   2: 249974.541 ops/s
# Warmup Iteration   3: 429956.067 ops/s
# Warmup Iteration   4: 441300.884 ops/s
# Warmup Iteration   5: 463096.103 ops/s
# Warmup Iteration   6: 417519.098 ops/s
# Warmup Iteration   7: 490281.206 ops/s
# Warmup Iteration   8: 474072.603 ops/s
# Warmup Iteration   9: 485742.796 ops/s
# Warmup Iteration  10: 498052.041 ops/s
# Warmup Iteration  11: 463534.349 ops/s
# Warmup Iteration  12: 468703.173 ops/s
# Warmup Iteration  13: 497158.719 ops/s
# Warmup Iteration  14: 474960.396 ops/s
# Warmup Iteration  15: 484286.553 ops/s
# Warmup Iteration  16: 478200.754 ops/s
# Warmup Iteration  17: 498993.927 ops/s
# Warmup Iteration  18: 489981.918 ops/s
# Warmup Iteration  19: 494781.054 ops/s
# Warmup Iteration  20: 509395.132 ops/s
# Warmup Iteration  21: 502015.723 ops/s
# Warmup Iteration  22: 489999.635 ops/s
# Warmup Iteration  23: 483903.439 ops/s
# Warmup Iteration  24: 513498.155 ops/s
# Warmup Iteration  25: 513794.982 ops/s
# Warmup Iteration  26: 489991.077 ops/s
# Warmup Iteration  27: 510371.614 ops/s
# Warmup Iteration  28: 493171.308 ops/s
# Warmup Iteration  29: 509551.737 ops/s
# Warmup Iteration  30: 489769.322 ops/s
Iteration   1: 494770.014 ops/s
Iteration   2: 507784.640 ops/s
Iteration   3: 513348.456 ops/s
Iteration   4: 505608.972 ops/s
Iteration   5: 498645.206 ops/s
Iteration   6: 495811.213 ops/s
Iteration   7: 517360.979 ops/s
Iteration   8: 469527.417 ops/s
Iteration   9: 504625.485 ops/s
Iteration  10: 523224.236 ops/s
Iteration  11: 484319.143 ops/s
Iteration  12: 497711.936 ops/s
Iteration  13: 512457.120 ops/s
Iteration  14: 496674.907 ops/s
Iteration  15: 520019.240 ops/s
Iteration  16: 487279.298 ops/s
Iteration  17: 500541.550 ops/s
Iteration  18: 492828.380 ops/s
Iteration  19: 512737.796 ops/s
Iteration  20: 498198.839 ops/s
Iteration  21: 487738.622 ops/s
Iteration  22: 509281.704 ops/s
Iteration  23: 498825.664 ops/s
Iteration  24: 512228.191 ops/s
Iteration  25: 479767.270 ops/s
Iteration  26: 503850.613 ops/s
Iteration  27: 505459.156 ops/s
Iteration  28: 417912.310 ops/s
Iteration  29: 491776.213 ops/s
Iteration  30: 485531.910 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_immediateInnerNextOuterError":
  497528.216 ±(99.9%) 12999.272 ops/s [Average]
  (min, avg, max) = (417912.310, 497528.216, 523224.236), stdev = 19456.700
  CI (99.9%): [484528.944, 510527.488] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score       Error  Units
FlowableConcatTest._Benchmark.benchmark_immediateInnerNextOuterError  thrpt   30  497528.216 ± 12999.272  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_ignoreBackpressure$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_ignoreBackpressure

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 120938.916 ops/s
# Warmup Iteration   2: 413250.129 ops/s
# Warmup Iteration   3: 443498.949 ops/s
# Warmup Iteration   4: 434202.509 ops/s
# Warmup Iteration   5: 464895.812 ops/s
# Warmup Iteration   6: 393431.306 ops/s
# Warmup Iteration   7: 468634.265 ops/s
# Warmup Iteration   8: 480099.883 ops/s
# Warmup Iteration   9: 454471.932 ops/s
# Warmup Iteration  10: 481261.727 ops/s
# Warmup Iteration  11: 482719.758 ops/s
# Warmup Iteration  12: 456279.563 ops/s
# Warmup Iteration  13: 494188.304 ops/s
# Warmup Iteration  14: 447889.868 ops/s
# Warmup Iteration  15: 477789.948 ops/s
# Warmup Iteration  16: 469318.691 ops/s
# Warmup Iteration  17: 482620.867 ops/s
# Warmup Iteration  18: 520891.145 ops/s
# Warmup Iteration  19: 495863.721 ops/s
# Warmup Iteration  20: 468271.527 ops/s
# Warmup Iteration  21: 509773.608 ops/s
# Warmup Iteration  22: 474353.477 ops/s
# Warmup Iteration  23: 488253.625 ops/s
# Warmup Iteration  24: 497696.253 ops/s
# Warmup Iteration  25: 465112.291 ops/s
# Warmup Iteration  26: 495168.779 ops/s
# Warmup Iteration  27: 482049.049 ops/s
# Warmup Iteration  28: 491132.154 ops/s
# Warmup Iteration  29: 489219.757 ops/s
# Warmup Iteration  30: 497158.359 ops/s
Iteration   1: 497254.317 ops/s
Iteration   2: 474435.942 ops/s
Iteration   3: 468588.607 ops/s
Iteration   4: 492731.199 ops/s
Iteration   5: 488929.926 ops/s
Iteration   6: 465220.960 ops/s
Iteration   7: 478411.431 ops/s
Iteration   8: 501623.768 ops/s
Iteration   9: 479266.672 ops/s
Iteration  10: 494998.480 ops/s
Iteration  11: 469372.143 ops/s
Iteration  12: 493202.668 ops/s
Iteration  13: 473470.802 ops/s
Iteration  14: 484343.466 ops/s
Iteration  15: 482897.410 ops/s
Iteration  16: 480782.123 ops/s
Iteration  17: 486181.159 ops/s
Iteration  18: 471188.662 ops/s
Iteration  19: 481238.602 ops/s
Iteration  20: 486926.058 ops/s
Iteration  21: 466575.010 ops/s
Iteration  22: 498003.602 ops/s
Iteration  23: 477244.795 ops/s
Iteration  24: 493489.052 ops/s
Iteration  25: 485219.500 ops/s
Iteration  26: 481329.736 ops/s
Iteration  27: 495059.477 ops/s
Iteration  28: 475967.025 ops/s
Iteration  29: 495972.213 ops/s
Iteration  30: 467451.741 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_ignoreBackpressure":
  482912.552 ±(99.9%) 7085.763 ops/s [Average]
  (min, avg, max) = (465220.960, 482912.552, 501623.768), stdev = 10605.638
  CI (99.9%): [475826.788, 489998.315] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score      Error  Units
FlowableConcatTest._Benchmark.benchmark_ignoreBackpressure  thrpt   30  482912.552 ± 7085.763  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_notVeryEnd$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_notVeryEnd

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 148643.256 ops/s
# Warmup Iteration   2: 472583.039 ops/s
# Warmup Iteration   3: 541451.455 ops/s
# Warmup Iteration   4: 598235.682 ops/s
# Warmup Iteration   5: 558648.691 ops/s
# Warmup Iteration   6: 563549.818 ops/s
# Warmup Iteration   7: 561310.350 ops/s
# Warmup Iteration   8: 550891.719 ops/s
# Warmup Iteration   9: 579031.290 ops/s
# Warmup Iteration  10: 568486.103 ops/s
# Warmup Iteration  11: 555410.090 ops/s
# Warmup Iteration  12: 555749.605 ops/s
# Warmup Iteration  13: 565576.677 ops/s
# Warmup Iteration  14: 583113.668 ops/s
# Warmup Iteration  15: 563552.840 ops/s
# Warmup Iteration  16: 583312.369 ops/s
# Warmup Iteration  17: 596936.336 ops/s
# Warmup Iteration  18: 606008.839 ops/s
# Warmup Iteration  19: 613383.685 ops/s
# Warmup Iteration  20: 584946.735 ops/s
# Warmup Iteration  21: 630125.941 ops/s
# Warmup Iteration  22: 600435.829 ops/s
# Warmup Iteration  23: 563044.950 ops/s
# Warmup Iteration  24: 591920.575 ops/s
# Warmup Iteration  25: 616825.326 ops/s
# Warmup Iteration  26: 587927.965 ops/s
# Warmup Iteration  27: 628586.075 ops/s
# Warmup Iteration  28: 588328.595 ops/s
# Warmup Iteration  29: 620736.492 ops/s
# Warmup Iteration  30: 580208.158 ops/s
Iteration   1: 612210.947 ops/s
Iteration   2: 592802.582 ops/s
Iteration   3: 604426.985 ops/s
Iteration   4: 613701.470 ops/s
Iteration   5: 582198.438 ops/s
Iteration   6: 596465.202 ops/s
Iteration   7: 591591.977 ops/s
Iteration   8: 591314.719 ops/s
Iteration   9: 586559.298 ops/s
Iteration  10: 591150.493 ops/s
Iteration  11: 613337.586 ops/s
Iteration  12: 604932.454 ops/s
Iteration  13: 576116.363 ops/s
Iteration  14: 582901.739 ops/s
Iteration  15: 605473.736 ops/s
Iteration  16: 627947.903 ops/s
Iteration  17: 591454.271 ops/s
Iteration  18: 637918.402 ops/s
Iteration  19: 606130.735 ops/s
Iteration  20: 607695.179 ops/s
Iteration  21: 603784.343 ops/s
Iteration  22: 591947.123 ops/s
Iteration  23: 521699.153 ops/s
Iteration  24: 583676.014 ops/s
Iteration  25: 615874.638 ops/s
Iteration  26: 592752.919 ops/s
Iteration  27: 604184.684 ops/s
Iteration  28: 592192.221 ops/s
Iteration  29: 614803.810 ops/s
Iteration  30: 595674.166 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_notVeryEnd":
  597763.985 ±(99.9%) 13347.241 ops/s [Average]
  (min, avg, max) = (521699.153, 597763.985, 637918.402), stdev = 19977.523
  CI (99.9%): [584416.744, 611111.226] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score       Error  Units
FlowableConcatTest._Benchmark.benchmark_notVeryEnd  thrpt   30  597763.985 ± 13347.241  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_concatMapInnerErrorDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_concatMapInnerErrorDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 61113.981 ops/s
# Warmup Iteration   2: 423769.321 ops/s
# Warmup Iteration   3: 511611.325 ops/s
# Warmup Iteration   4: 482170.695 ops/s
# Warmup Iteration   5: 558020.205 ops/s
# Warmup Iteration   6: 561418.248 ops/s
# Warmup Iteration   7: 542301.231 ops/s
# Warmup Iteration   8: 548725.185 ops/s
# Warmup Iteration   9: 539632.308 ops/s
# Warmup Iteration  10: 552088.253 ops/s
# Warmup Iteration  11: 561919.504 ops/s
# Warmup Iteration  12: 536744.802 ops/s
# Warmup Iteration  13: 556516.756 ops/s
# Warmup Iteration  14: 536103.543 ops/s
# Warmup Iteration  15: 560541.937 ops/s
# Warmup Iteration  16: 536082.795 ops/s
# Warmup Iteration  17: 569816.103 ops/s
# Warmup Iteration  18: 580246.145 ops/s
# Warmup Iteration  19: 548880.391 ops/s
# Warmup Iteration  20: 592840.628 ops/s
# Warmup Iteration  21: 551309.533 ops/s
# Warmup Iteration  22: 594560.880 ops/s
# Warmup Iteration  23: 559186.868 ops/s
# Warmup Iteration  24: 600242.142 ops/s
# Warmup Iteration  25: 600721.256 ops/s
# Warmup Iteration  26: 579636.709 ops/s
# Warmup Iteration  27: 572762.278 ops/s
# Warmup Iteration  28: 586676.361 ops/s
# Warmup Iteration  29: 578051.116 ops/s
# Warmup Iteration  30: 593455.143 ops/s
Iteration   1: 559704.134 ops/s
Iteration   2: 589889.899 ops/s
Iteration   3: 561149.015 ops/s
Iteration   4: 582330.054 ops/s
Iteration   5: 592824.651 ops/s
Iteration   6: 563742.296 ops/s
Iteration   7: 586046.287 ops/s
Iteration   8: 538445.624 ops/s
Iteration   9: 604203.576 ops/s
Iteration  10: 567848.779 ops/s
Iteration  11: 599332.519 ops/s
Iteration  12: 575982.132 ops/s
Iteration  13: 569785.736 ops/s
Iteration  14: 583911.477 ops/s
Iteration  15: 573943.089 ops/s
Iteration  16: 565121.952 ops/s
Iteration  17: 602707.410 ops/s
Iteration  18: 574631.593 ops/s
Iteration  19: 574162.672 ops/s
Iteration  20: 598268.922 ops/s
Iteration  21: 560696.268 ops/s
Iteration  22: 593014.683 ops/s
Iteration  23: 568014.695 ops/s
Iteration  24: 598569.945 ops/s
Iteration  25: 558277.206 ops/s
Iteration  26: 592268.100 ops/s
Iteration  27: 603857.623 ops/s
Iteration  28: 563972.467 ops/s
Iteration  29: 574772.060 ops/s
Iteration  30: 594273.136 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_concatMapInnerErrorDelayError":
  579058.267 ±(99.9%) 11206.716 ops/s [Average]
  (min, avg, max) = (538445.624, 579058.267, 604203.576), stdev = 16773.686
  CI (99.9%): [567851.551, 590264.983] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score       Error  Units
FlowableConcatTest._Benchmark.benchmark_concatMapInnerErrorDelayError  thrpt   30  579058.267 ± 11206.716  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapTest._Benchmark.benchmark_undeliverableUponCancel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapTest._Benchmark.benchmark_undeliverableUponCancel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 31898.268 ops/s
# Warmup Iteration   2: 120085.661 ops/s
# Warmup Iteration   3: 140103.675 ops/s
# Warmup Iteration   4: 158677.467 ops/s
# Warmup Iteration   5: 160348.129 ops/s
# Warmup Iteration   6: 168907.233 ops/s
# Warmup Iteration   7: 179815.085 ops/s
# Warmup Iteration   8: 163122.186 ops/s
# Warmup Iteration   9: 170986.175 ops/s
# Warmup Iteration  10: 167867.953 ops/s
# Warmup Iteration  11: 169478.562 ops/s
# Warmup Iteration  12: 173719.311 ops/s
# Warmup Iteration  13: 171399.568 ops/s
# Warmup Iteration  14: 169420.313 ops/s
# Warmup Iteration  15: 176693.998 ops/s
# Warmup Iteration  16: 165377.223 ops/s
# Warmup Iteration  17: 175166.742 ops/s
# Warmup Iteration  18: 179072.318 ops/s
# Warmup Iteration  19: 173384.657 ops/s
# Warmup Iteration  20: 182786.441 ops/s
# Warmup Iteration  21: 170329.429 ops/s
# Warmup Iteration  22: 174406.213 ops/s
# Warmup Iteration  23: 171270.056 ops/s
# Warmup Iteration  24: 173642.219 ops/s
# Warmup Iteration  25: 178345.752 ops/s
# Warmup Iteration  26: 168223.441 ops/s
# Warmup Iteration  27: 177655.583 ops/s
# Warmup Iteration  28: 177834.290 ops/s
# Warmup Iteration  29: 168755.733 ops/s
# Warmup Iteration  30: 176479.254 ops/s
Iteration   1: 167644.338 ops/s
Iteration   2: 180863.826 ops/s
Iteration   3: 181194.084 ops/s
Iteration   4: 171735.819 ops/s
Iteration   5: 173451.890 ops/s
Iteration   6: 183965.316 ops/s
Iteration   7: 170747.234 ops/s
Iteration   8: 178322.118 ops/s
Iteration   9: 179092.491 ops/s
Iteration  10: 176557.520 ops/s
Iteration  11: 178150.459 ops/s
Iteration  12: 169739.627 ops/s
Iteration  13: 174141.566 ops/s
Iteration  14: 179445.193 ops/s
Iteration  15: 171231.256 ops/s
Iteration  16: 178405.764 ops/s
Iteration  17: 164658.919 ops/s
Iteration  18: 144958.787 ops/s
Iteration  19: 184764.588 ops/s
Iteration  20: 167735.682 ops/s
Iteration  21: 183517.910 ops/s
Iteration  22: 165996.445 ops/s
Iteration  23: 174038.813 ops/s
Iteration  24: 177148.648 ops/s
Iteration  25: 170942.770 ops/s
Iteration  26: 178747.905 ops/s
Iteration  27: 170958.219 ops/s
Iteration  28: 175993.148 ops/s
Iteration  29: 174924.554 ops/s
Iteration  30: 176236.689 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapTest._Benchmark.benchmark_undeliverableUponCancel":
  174177.053 ±(99.9%) 5112.664 ops/s [Average]
  (min, avg, max) = (144958.787, 174177.053, 184764.588), stdev = 7652.396
  CI (99.9%): [169064.388, 179289.717] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score      Error  Units
FlowableConcatMapTest._Benchmark.benchmark_undeliverableUponCancel  thrpt   30  174177.053 ± 5112.664  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapTest._Benchmark.benchmark_undeliverableUponCancelDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapTest._Benchmark.benchmark_undeliverableUponCancelDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 26468.097 ops/s
# Warmup Iteration   2: 109141.172 ops/s
# Warmup Iteration   3: 162165.810 ops/s
# Warmup Iteration   4: 171052.774 ops/s
# Warmup Iteration   5: 170911.899 ops/s
# Warmup Iteration   6: 166754.871 ops/s
# Warmup Iteration   7: 166771.415 ops/s
# Warmup Iteration   8: 165738.119 ops/s
# Warmup Iteration   9: 177941.232 ops/s
# Warmup Iteration  10: 181601.647 ops/s
# Warmup Iteration  11: 175322.523 ops/s
# Warmup Iteration  12: 172180.616 ops/s
# Warmup Iteration  13: 177644.146 ops/s
# Warmup Iteration  14: 169424.800 ops/s
# Warmup Iteration  15: 171216.219 ops/s
# Warmup Iteration  16: 182004.361 ops/s
# Warmup Iteration  17: 170262.772 ops/s
# Warmup Iteration  18: 182738.836 ops/s
# Warmup Iteration  19: 166892.153 ops/s
# Warmup Iteration  20: 179191.064 ops/s
# Warmup Iteration  21: 176888.639 ops/s
# Warmup Iteration  22: 175142.152 ops/s
# Warmup Iteration  23: 182123.586 ops/s
# Warmup Iteration  24: 168076.050 ops/s
# Warmup Iteration  25: 185777.184 ops/s
# Warmup Iteration  26: 181611.328 ops/s
# Warmup Iteration  27: 173728.463 ops/s
# Warmup Iteration  28: 183601.598 ops/s
# Warmup Iteration  29: 175481.896 ops/s
# Warmup Iteration  30: 175738.333 ops/s
Iteration   1: 173518.721 ops/s
Iteration   2: 170744.714 ops/s
Iteration   3: 185800.829 ops/s
Iteration   4: 177741.648 ops/s
Iteration   5: 175249.687 ops/s
Iteration   6: 182739.337 ops/s
Iteration   7: 173347.073 ops/s
Iteration   8: 178460.433 ops/s
Iteration   9: 184925.100 ops/s
Iteration  10: 167658.102 ops/s
Iteration  11: 182185.084 ops/s
Iteration  12: 180662.030 ops/s
Iteration  13: 174372.504 ops/s
Iteration  14: 179287.423 ops/s
Iteration  15: 186791.728 ops/s
Iteration  16: 174007.457 ops/s
Iteration  17: 174151.192 ops/s
Iteration  18: 182860.846 ops/s
Iteration  19: 175054.215 ops/s
Iteration  20: 174365.599 ops/s
Iteration  21: 187851.532 ops/s
Iteration  22: 174366.567 ops/s
Iteration  23: 181880.462 ops/s
Iteration  24: 174737.247 ops/s
Iteration  25: 174227.110 ops/s
Iteration  26: 185958.348 ops/s
Iteration  27: 171155.774 ops/s
Iteration  28: 179496.857 ops/s
Iteration  29: 184598.835 ops/s
Iteration  30: 170927.660 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapTest._Benchmark.benchmark_undeliverableUponCancelDelayError":
  177970.804 ±(99.9%) 3700.332 ops/s [Average]
  (min, avg, max) = (167658.102, 177970.804, 187851.532), stdev = 5538.483
  CI (99.9%): [174270.472, 181671.136] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt       Score      Error  Units
FlowableConcatMapTest._Benchmark.benchmark_undeliverableUponCancelDelayError  thrpt   30  177970.804 ± 3700.332  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWithPredicateTest._Benchmark.benchmark_backpressure$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWithPredicateTest._Benchmark.benchmark_backpressure

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 69311.140 ops/s
# Warmup Iteration   2: 214289.316 ops/s
# Warmup Iteration   3: 335566.168 ops/s
# Warmup Iteration   4: 347072.848 ops/s
# Warmup Iteration   5: 346530.627 ops/s
# Warmup Iteration   6: 368794.495 ops/s
# Warmup Iteration   7: 366529.594 ops/s
# Warmup Iteration   8: 383430.612 ops/s
# Warmup Iteration   9: 368558.204 ops/s
# Warmup Iteration  10: 376851.872 ops/s
# Warmup Iteration  11: 379439.389 ops/s
# Warmup Iteration  12: 376468.988 ops/s
# Warmup Iteration  13: 369748.472 ops/s
# Warmup Iteration  14: 376822.622 ops/s
# Warmup Iteration  15: 382020.279 ops/s
# Warmup Iteration  16: 379337.242 ops/s
# Warmup Iteration  17: 382669.731 ops/s
# Warmup Iteration  18: 399954.928 ops/s
# Warmup Iteration  19: 400558.477 ops/s
# Warmup Iteration  20: 370547.864 ops/s
# Warmup Iteration  21: 388454.389 ops/s
# Warmup Iteration  22: 395594.010 ops/s
# Warmup Iteration  23: 385252.641 ops/s
# Warmup Iteration  24: 383988.856 ops/s
# Warmup Iteration  25: 380294.404 ops/s
# Warmup Iteration  26: 390009.914 ops/s
# Warmup Iteration  27: 376871.334 ops/s
# Warmup Iteration  28: 376471.939 ops/s
# Warmup Iteration  29: 390286.426 ops/s
# Warmup Iteration  30: 380717.749 ops/s
Iteration   1: 392789.110 ops/s
Iteration   2: 398966.990 ops/s
Iteration   3: 387954.943 ops/s
Iteration   4: 380759.304 ops/s
Iteration   5: 384151.551 ops/s
Iteration   6: 399995.994 ops/s
Iteration   7: 383006.399 ops/s
Iteration   8: 402606.075 ops/s
Iteration   9: 374683.088 ops/s
Iteration  10: 399311.537 ops/s
Iteration  11: 385271.646 ops/s
Iteration  12: 333395.008 ops/s
Iteration  13: 368437.016 ops/s
Iteration  14: 393835.318 ops/s
Iteration  15: 383649.604 ops/s
Iteration  16: 382965.311 ops/s
Iteration  17: 386927.241 ops/s
Iteration  18: 395877.722 ops/s
Iteration  19: 379826.722 ops/s
Iteration  20: 388295.757 ops/s
Iteration  21: 402391.289 ops/s
Iteration  22: 376877.918 ops/s
Iteration  23: 393391.002 ops/s
Iteration  24: 377347.907 ops/s
Iteration  25: 400880.634 ops/s
Iteration  26: 388296.036 ops/s
Iteration  27: 394509.885 ops/s
Iteration  28: 387180.666 ops/s
Iteration  29: 395200.792 ops/s
Iteration  30: 382401.924 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWithPredicateTest._Benchmark.benchmark_backpressure":
  386706.146 ±(99.9%) 8940.944 ops/s [Average]
  (min, avg, max) = (333395.008, 386706.146, 402606.075), stdev = 13382.386
  CI (99.9%): [377765.202, 395647.091] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
FlowableRetryWithPredicateTest._Benchmark.benchmark_backpressure  thrpt   30  386706.146 ± 8940.944  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorResumeNextViaFunctionTest._Benchmark.benchmark_badOtherSource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorResumeNextViaFunctionTest._Benchmark.benchmark_badOtherSource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 17290.691 ops/s
# Warmup Iteration   2: 84122.391 ops/s
# Warmup Iteration   3: 150974.957 ops/s
# Warmup Iteration   4: 161297.939 ops/s
# Warmup Iteration   5: 167456.618 ops/s
# Warmup Iteration   6: 162668.873 ops/s
# Warmup Iteration   7: 161978.344 ops/s
# Warmup Iteration   8: 165745.642 ops/s
# Warmup Iteration   9: 162516.722 ops/s
# Warmup Iteration  10: 164839.344 ops/s
# Warmup Iteration  11: 157631.213 ops/s
# Warmup Iteration  12: 168133.880 ops/s
# Warmup Iteration  13: 157522.401 ops/s
# Warmup Iteration  14: 169320.925 ops/s
# Warmup Iteration  15: 164432.882 ops/s
# Warmup Iteration  16: 161510.870 ops/s
# Warmup Iteration  17: 172609.225 ops/s
# Warmup Iteration  18: 172197.743 ops/s
# Warmup Iteration  19: 165306.234 ops/s
# Warmup Iteration  20: 171767.150 ops/s
# Warmup Iteration  21: 167476.246 ops/s
# Warmup Iteration  22: 171446.765 ops/s
# Warmup Iteration  23: 161210.649 ops/s
# Warmup Iteration  24: 165215.034 ops/s
# Warmup Iteration  25: 174379.062 ops/s
# Warmup Iteration  26: 163766.894 ops/s
# Warmup Iteration  27: 170581.368 ops/s
# Warmup Iteration  28: 169650.199 ops/s
# Warmup Iteration  29: 175747.824 ops/s
# Warmup Iteration  30: 170760.104 ops/s
Iteration   1: 169365.792 ops/s
Iteration   2: 168751.624 ops/s
Iteration   3: 175130.014 ops/s
Iteration   4: 165976.893 ops/s
Iteration   5: 179811.749 ops/s
Iteration   6: 165904.955 ops/s
Iteration   7: 172806.499 ops/s
Iteration   8: 175077.540 ops/s
Iteration   9: 168216.748 ops/s
Iteration  10: 179112.980 ops/s
Iteration  11: 167830.965 ops/s
Iteration  12: 175036.357 ops/s
Iteration  13: 171769.585 ops/s
Iteration  14: 167905.758 ops/s
Iteration  15: 177873.345 ops/s
Iteration  16: 173451.786 ops/s
Iteration  17: 162128.535 ops/s
Iteration  18: 171869.455 ops/s
Iteration  19: 172708.233 ops/s
Iteration  20: 171092.169 ops/s
Iteration  21: 174597.916 ops/s
Iteration  22: 168110.630 ops/s
Iteration  23: 173173.254 ops/s
Iteration  24: 168610.678 ops/s
Iteration  25: 176133.905 ops/s
Iteration  26: 164519.568 ops/s
Iteration  27: 172619.736 ops/s
Iteration  28: 176537.604 ops/s
Iteration  29: 161509.129 ops/s
Iteration  30: 171775.768 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorResumeNextViaFunctionTest._Benchmark.benchmark_badOtherSource":
  171313.639 ±(99.9%) 3139.402 ops/s [Average]
  (min, avg, max) = (161509.129, 171313.639, 179811.749), stdev = 4698.910
  CI (99.9%): [168174.237, 174453.041] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt       Score      Error  Units
FlowableOnErrorResumeNextViaFunctionTest._Benchmark.benchmark_badOtherSource  thrpt   30  171313.639 ± 3139.402  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_immediateInnerNextOuterError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_immediateInnerNextOuterError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 30858.712 ops/s
# Warmup Iteration   2: 166768.486 ops/s
# Warmup Iteration   3: 426083.830 ops/s
# Warmup Iteration   4: 470660.493 ops/s
# Warmup Iteration   5: 489749.057 ops/s
# Warmup Iteration   6: 425025.680 ops/s
# Warmup Iteration   7: 431378.707 ops/s
# Warmup Iteration   8: 497751.555 ops/s
# Warmup Iteration   9: 465602.785 ops/s
# Warmup Iteration  10: 486749.627 ops/s
# Warmup Iteration  11: 463618.736 ops/s
# Warmup Iteration  12: 485649.009 ops/s
# Warmup Iteration  13: 472396.300 ops/s
# Warmup Iteration  14: 488638.347 ops/s
# Warmup Iteration  15: 481172.406 ops/s
# Warmup Iteration  16: 463800.715 ops/s
# Warmup Iteration  17: 488189.347 ops/s
# Warmup Iteration  18: 511614.804 ops/s
# Warmup Iteration  19: 478960.048 ops/s
# Warmup Iteration  20: 500641.297 ops/s
# Warmup Iteration  21: 502907.064 ops/s
# Warmup Iteration  22: 478801.555 ops/s
# Warmup Iteration  23: 488772.190 ops/s
# Warmup Iteration  24: 486897.951 ops/s
# Warmup Iteration  25: 491028.001 ops/s
# Warmup Iteration  26: 516795.219 ops/s
# Warmup Iteration  27: 481403.807 ops/s
# Warmup Iteration  28: 438526.231 ops/s
# Warmup Iteration  29: 516003.628 ops/s
# Warmup Iteration  30: 505327.530 ops/s
Iteration   1: 490359.970 ops/s
Iteration   2: 502920.501 ops/s
Iteration   3: 488134.305 ops/s
Iteration   4: 500788.264 ops/s
Iteration   5: 498704.016 ops/s
Iteration   6: 480710.531 ops/s
Iteration   7: 417221.635 ops/s
Iteration   8: 510493.341 ops/s
Iteration   9: 480438.657 ops/s
Iteration  10: 514600.067 ops/s
Iteration  11: 510772.827 ops/s
Iteration  12: 479611.070 ops/s
Iteration  13: 514894.766 ops/s
Iteration  14: 497817.878 ops/s
Iteration  15: 492048.926 ops/s
Iteration  16: 475819.996 ops/s
Iteration  17: 502758.081 ops/s
Iteration  18: 490613.185 ops/s
Iteration  19: 484647.388 ops/s
Iteration  20: 508057.477 ops/s
Iteration  21: 487799.395 ops/s
Iteration  22: 505734.344 ops/s
Iteration  23: 488241.978 ops/s
Iteration  24: 487410.773 ops/s
Iteration  25: 508806.497 ops/s
Iteration  26: 479316.148 ops/s
Iteration  27: 512446.663 ops/s
Iteration  28: 488669.972 ops/s
Iteration  29: 505115.881 ops/s
Iteration  30: 489674.011 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_immediateInnerNextOuterError":
  493154.285 ±(99.9%) 12388.826 ops/s [Average]
  (min, avg, max) = (417221.635, 493154.285, 514894.766), stdev = 18543.012
  CI (99.9%): [480765.459, 505543.110] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt       Score       Error  Units
FlowableConcatMapSchedulerTest._Benchmark.benchmark_immediateInnerNextOuterError  thrpt   30  493154.285 ± 12388.826  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybeTest._Benchmark.benchmark_simple$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybeTest._Benchmark.benchmark_simple

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 291832.573 ops/s
# Warmup Iteration   2: 1103918.870 ops/s
# Warmup Iteration   3: 1291299.725 ops/s
# Warmup Iteration   4: 1376671.314 ops/s
# Warmup Iteration   5: 1364589.422 ops/s
# Warmup Iteration   6: 1369066.765 ops/s
# Warmup Iteration   7: 1423630.905 ops/s
# Warmup Iteration   8: 1338489.769 ops/s
# Warmup Iteration   9: 1406811.247 ops/s
# Warmup Iteration  10: 1295880.450 ops/s
# Warmup Iteration  11: 1251226.592 ops/s
# Warmup Iteration  12: 1446690.110 ops/s
# Warmup Iteration  13: 1306250.296 ops/s
# Warmup Iteration  14: 1359163.564 ops/s
# Warmup Iteration  15: 1408787.799 ops/s
# Warmup Iteration  16: 1397338.235 ops/s
# Warmup Iteration  17: 1411234.791 ops/s
# Warmup Iteration  18: 1365213.778 ops/s
# Warmup Iteration  19: 1355598.694 ops/s
# Warmup Iteration  20: 1365793.038 ops/s
# Warmup Iteration  21: 1299738.738 ops/s
# Warmup Iteration  22: 1397823.638 ops/s
# Warmup Iteration  23: 1361623.838 ops/s
# Warmup Iteration  24: 1359887.077 ops/s
# Warmup Iteration  25: 1363674.104 ops/s
# Warmup Iteration  26: 1327483.820 ops/s
# Warmup Iteration  27: 1376061.228 ops/s
# Warmup Iteration  28: 1378338.655 ops/s
# Warmup Iteration  29: 1336137.579 ops/s
# Warmup Iteration  30: 1344366.276 ops/s
Iteration   1: 1401018.653 ops/s
Iteration   2: 1308210.517 ops/s
Iteration   3: 1390114.772 ops/s
Iteration   4: 1318713.508 ops/s
Iteration   5: 1408910.903 ops/s
Iteration   6: 1328904.099 ops/s
Iteration   7: 1367574.409 ops/s
Iteration   8: 1343349.096 ops/s
Iteration   9: 1394804.480 ops/s
Iteration  10: 1408384.012 ops/s
Iteration  11: 1292572.085 ops/s
Iteration  12: 1430283.056 ops/s
Iteration  13: 1314506.122 ops/s
Iteration  14: 1362589.797 ops/s
Iteration  15: 1343497.604 ops/s
Iteration  16: 1358165.126 ops/s
Iteration  17: 1371200.701 ops/s
Iteration  18: 1361064.816 ops/s
Iteration  19: 1398708.634 ops/s
Iteration  20: 1321656.767 ops/s
Iteration  21: 1351052.821 ops/s
Iteration  22: 1379104.590 ops/s
Iteration  23: 1330441.612 ops/s
Iteration  24: 1397289.786 ops/s
Iteration  25: 1368386.038 ops/s
Iteration  26: 1374414.925 ops/s
Iteration  27: 1409963.106 ops/s
Iteration  28: 1316792.253 ops/s
Iteration  29: 1374047.015 ops/s
Iteration  30: 1427520.576 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybeTest._Benchmark.benchmark_simple":
  1365108.063 ±(99.9%) 24961.534 ops/s [Average]
  (min, avg, max) = (1292572.085, 1365108.063, 1430283.056), stdev = 37361.252
  CI (99.9%): [1340146.528, 1390069.597] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
FlowableConcatMapMaybeTest._Benchmark.benchmark_simple  thrpt   30  1365108.063 ± 24961.534  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybeTest._Benchmark.benchmark_mixed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybeTest._Benchmark.benchmark_mixed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 227862.609 ops/s
# Warmup Iteration   2: 695304.158 ops/s
# Warmup Iteration   3: 805289.336 ops/s
# Warmup Iteration   4: 827610.822 ops/s
# Warmup Iteration   5: 712978.218 ops/s
# Warmup Iteration   6: 849781.914 ops/s
# Warmup Iteration   7: 879645.349 ops/s
# Warmup Iteration   8: 876652.654 ops/s
# Warmup Iteration   9: 812137.122 ops/s
# Warmup Iteration  10: 882402.740 ops/s
# Warmup Iteration  11: 867485.458 ops/s
# Warmup Iteration  12: 845052.702 ops/s
# Warmup Iteration  13: 858276.182 ops/s
# Warmup Iteration  14: 833004.420 ops/s
# Warmup Iteration  15: 865683.341 ops/s
# Warmup Iteration  16: 882506.111 ops/s
# Warmup Iteration  17: 819737.499 ops/s
# Warmup Iteration  18: 854444.626 ops/s
# Warmup Iteration  19: 858531.038 ops/s
# Warmup Iteration  20: 850075.862 ops/s
# Warmup Iteration  21: 862927.585 ops/s
# Warmup Iteration  22: 835933.529 ops/s
# Warmup Iteration  23: 879736.232 ops/s
# Warmup Iteration  24: 852117.360 ops/s
# Warmup Iteration  25: 827195.435 ops/s
# Warmup Iteration  26: 888286.790 ops/s
# Warmup Iteration  27: 845986.699 ops/s
# Warmup Iteration  28: 854042.990 ops/s
# Warmup Iteration  29: 852260.302 ops/s
# Warmup Iteration  30: 874844.159 ops/s
Iteration   1: 829867.988 ops/s
Iteration   2: 691061.497 ops/s
Iteration   3: 898304.256 ops/s
Iteration   4: 833532.876 ops/s
Iteration   5: 848592.306 ops/s
Iteration   6: 856315.781 ops/s
Iteration   7: 830194.116 ops/s
Iteration   8: 858620.027 ops/s
Iteration   9: 851978.379 ops/s
Iteration  10: 852128.676 ops/s
Iteration  11: 876613.934 ops/s
Iteration  12: 818960.662 ops/s
Iteration  13: 879694.881 ops/s
Iteration  14: 825863.132 ops/s
Iteration  15: 846080.376 ops/s
Iteration  16: 832405.154 ops/s
Iteration  17: 844885.510 ops/s
Iteration  18: 861555.523 ops/s
Iteration  19: 840439.898 ops/s
Iteration  20: 852486.688 ops/s
Iteration  21: 898922.050 ops/s
Iteration  22: 808527.762 ops/s
Iteration  23: 883253.640 ops/s
Iteration  24: 825757.336 ops/s
Iteration  25: 854324.792 ops/s
Iteration  26: 815896.052 ops/s
Iteration  27: 838765.477 ops/s
Iteration  28: 874008.460 ops/s
Iteration  29: 832719.443 ops/s
Iteration  30: 868814.446 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybeTest._Benchmark.benchmark_mixed":
  844352.371 ±(99.9%) 24780.001 ops/s [Average]
  (min, avg, max) = (691061.497, 844352.371, 898922.050), stdev = 37089.542
  CI (99.9%): [819572.369, 869132.372] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score       Error  Units
FlowableConcatMapMaybeTest._Benchmark.benchmark_mixed  thrpt   30  844352.371 ± 24780.001  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybeTest._Benchmark.benchmark_basicSyncFused$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybeTest._Benchmark.benchmark_basicSyncFused

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 207647.033 ops/s
# Warmup Iteration   2: 996065.333 ops/s
# Warmup Iteration   3: 1198461.290 ops/s
# Warmup Iteration   4: 1303607.772 ops/s
# Warmup Iteration   5: 1230804.042 ops/s
# Warmup Iteration   6: 1346979.438 ops/s
# Warmup Iteration   7: 1343595.243 ops/s
# Warmup Iteration   8: 1380907.536 ops/s
# Warmup Iteration   9: 1443568.082 ops/s
# Warmup Iteration  10: 1404946.699 ops/s
# Warmup Iteration  11: 1350194.717 ops/s
# Warmup Iteration  12: 1371495.769 ops/s
# Warmup Iteration  13: 1346960.622 ops/s
# Warmup Iteration  14: 1378886.944 ops/s
# Warmup Iteration  15: 1364523.534 ops/s
# Warmup Iteration  16: 1336654.591 ops/s
# Warmup Iteration  17: 1326706.768 ops/s
# Warmup Iteration  18: 1363223.261 ops/s
# Warmup Iteration  19: 1314922.502 ops/s
# Warmup Iteration  20: 1340657.026 ops/s
# Warmup Iteration  21: 1304923.862 ops/s
# Warmup Iteration  22: 1389800.510 ops/s
# Warmup Iteration  23: 1341302.224 ops/s
# Warmup Iteration  24: 1340994.518 ops/s
# Warmup Iteration  25: 1279264.908 ops/s
# Warmup Iteration  26: 1353339.239 ops/s
# Warmup Iteration  27: 1336716.269 ops/s
# Warmup Iteration  28: 1350607.106 ops/s
# Warmup Iteration  29: 1388151.542 ops/s
# Warmup Iteration  30: 1329718.201 ops/s
Iteration   1: 1357062.875 ops/s
Iteration   2: 1387817.832 ops/s
Iteration   3: 1306162.869 ops/s
Iteration   4: 1357611.889 ops/s
Iteration   5: 1372811.627 ops/s
Iteration   6: 1377483.674 ops/s
Iteration   7: 1297766.348 ops/s
Iteration   8: 1368194.821 ops/s
Iteration   9: 1326322.111 ops/s
Iteration  10: 1372181.034 ops/s
Iteration  11: 1305338.761 ops/s
Iteration  12: 1311014.616 ops/s
Iteration  13: 1339845.855 ops/s
Iteration  14: 1360799.860 ops/s
Iteration  15: 1258268.270 ops/s
Iteration  16: 1354379.166 ops/s
Iteration  17: 1354111.898 ops/s
Iteration  18: 1360569.949 ops/s
Iteration  19: 1309427.606 ops/s
Iteration  20: 1334287.909 ops/s
Iteration  21: 1381774.502 ops/s
Iteration  22: 1269674.157 ops/s
Iteration  23: 1360194.806 ops/s
Iteration  24: 1314347.411 ops/s
Iteration  25: 1345640.757 ops/s
Iteration  26: 1336277.454 ops/s
Iteration  27: 1325905.206 ops/s
Iteration  28: 1363438.523 ops/s
Iteration  29: 1324011.813 ops/s
Iteration  30: 1377278.349 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybeTest._Benchmark.benchmark_basicSyncFused":
  1340333.398 ±(99.9%) 22005.021 ops/s [Average]
  (min, avg, max) = (1258268.270, 1340333.398, 1387817.832), stdev = 32936.082
  CI (99.9%): [1318328.377, 1362338.419] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
FlowableConcatMapMaybeTest._Benchmark.benchmark_basicSyncFused  thrpt   30  1340333.398 ± 22005.021  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybeTest._Benchmark.benchmark_empty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybeTest._Benchmark.benchmark_empty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 439726.480 ops/s
# Warmup Iteration   2: 1001702.896 ops/s
# Warmup Iteration   3: 1159460.719 ops/s
# Warmup Iteration   4: 1207594.776 ops/s
# Warmup Iteration   5: 1115509.698 ops/s
# Warmup Iteration   6: 1206079.210 ops/s
# Warmup Iteration   7: 1200472.813 ops/s
# Warmup Iteration   8: 1279720.865 ops/s
# Warmup Iteration   9: 1200086.402 ops/s
# Warmup Iteration  10: 1281577.347 ops/s
# Warmup Iteration  11: 1282053.789 ops/s
# Warmup Iteration  12: 1214563.329 ops/s
# Warmup Iteration  13: 1239618.818 ops/s
# Warmup Iteration  14: 1236295.605 ops/s
# Warmup Iteration  15: 1260064.867 ops/s
# Warmup Iteration  16: 1269067.964 ops/s
# Warmup Iteration  17: 1223728.865 ops/s
# Warmup Iteration  18: 1226378.770 ops/s
# Warmup Iteration  19: 1208405.768 ops/s
# Warmup Iteration  20: 1184165.331 ops/s
# Warmup Iteration  21: 1193050.445 ops/s
# Warmup Iteration  22: 1250033.733 ops/s
# Warmup Iteration  23: 1159302.021 ops/s
# Warmup Iteration  24: 1212455.691 ops/s
# Warmup Iteration  25: 1217667.829 ops/s
# Warmup Iteration  26: 890367.431 ops/s
# Warmup Iteration  27: 1219488.422 ops/s
# Warmup Iteration  28: 1131274.642 ops/s
# Warmup Iteration  29: 1206304.531 ops/s
# Warmup Iteration  30: 1249691.801 ops/s
Iteration   1: 1167685.559 ops/s
Iteration   2: 1168911.592 ops/s
Iteration   3: 1191198.282 ops/s
Iteration   4: 1189848.010 ops/s
Iteration   5: 1208715.630 ops/s
Iteration   6: 1153493.416 ops/s
Iteration   7: 1225908.537 ops/s
Iteration   8: 1192437.824 ops/s
Iteration   9: 1167743.509 ops/s
Iteration  10: 1246697.987 ops/s
Iteration  11: 1204044.203 ops/s
Iteration  12: 1244970.970 ops/s
Iteration  13: 1164777.787 ops/s
Iteration  14: 1163452.880 ops/s
Iteration  15: 1181124.447 ops/s
Iteration  16: 1236731.597 ops/s
Iteration  17: 1167164.571 ops/s
Iteration  18: 1200442.382 ops/s
Iteration  19: 1147795.144 ops/s
Iteration  20: 1228676.949 ops/s
Iteration  21: 1223456.411 ops/s
Iteration  22: 1166541.811 ops/s
Iteration  23: 1202326.677 ops/s
Iteration  24: 1179304.635 ops/s
Iteration  25: 1241762.658 ops/s
Iteration  26: 1168781.357 ops/s
Iteration  27: 1164295.660 ops/s
Iteration  28: 1218838.802 ops/s
Iteration  29: 1186726.641 ops/s
Iteration  30: 1204708.305 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybeTest._Benchmark.benchmark_empty":
  1193618.808 ±(99.9%) 19520.055 ops/s [Average]
  (min, avg, max) = (1147795.144, 1193618.808, 1246697.987), stdev = 29216.702
  CI (99.9%): [1174098.752, 1213138.863] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
FlowableConcatMapMaybeTest._Benchmark.benchmark_empty  thrpt   30  1193618.808 ± 19520.055  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybeTest._Benchmark.benchmark_cancel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybeTest._Benchmark.benchmark_cancel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 230165.324 ops/s
# Warmup Iteration   2: 1008169.027 ops/s
# Warmup Iteration   3: 1402612.068 ops/s
# Warmup Iteration   4: 1452462.869 ops/s
# Warmup Iteration   5: 1530789.205 ops/s
# Warmup Iteration   6: 1553887.166 ops/s
# Warmup Iteration   7: 1453274.233 ops/s
# Warmup Iteration   8: 1400806.661 ops/s
# Warmup Iteration   9: 1537112.484 ops/s
# Warmup Iteration  10: 1422280.368 ops/s
# Warmup Iteration  11: 1547191.103 ops/s
# Warmup Iteration  12: 1445225.680 ops/s
# Warmup Iteration  13: 1446352.923 ops/s
# Warmup Iteration  14: 1546732.778 ops/s
# Warmup Iteration  15: 1451019.310 ops/s
# Warmup Iteration  16: 1493533.102 ops/s
# Warmup Iteration  17: 1431686.844 ops/s
# Warmup Iteration  18: 1462284.613 ops/s
# Warmup Iteration  19: 1483552.344 ops/s
# Warmup Iteration  20: 1429837.189 ops/s
# Warmup Iteration  21: 1469137.340 ops/s
# Warmup Iteration  22: 1451042.375 ops/s
# Warmup Iteration  23: 1467725.907 ops/s
# Warmup Iteration  24: 1493712.898 ops/s
# Warmup Iteration  25: 1547319.551 ops/s
# Warmup Iteration  26: 1435435.748 ops/s
# Warmup Iteration  27: 1549290.304 ops/s
# Warmup Iteration  28: 1480357.357 ops/s
# Warmup Iteration  29: 1456015.994 ops/s
# Warmup Iteration  30: 1529060.026 ops/s
Iteration   1: 1489586.992 ops/s
Iteration   2: 1453508.003 ops/s
Iteration   3: 1519993.294 ops/s
Iteration   4: 1496931.041 ops/s
Iteration   5: 1418816.205 ops/s
Iteration   6: 1513083.335 ops/s
Iteration   7: 1455930.479 ops/s
Iteration   8: 1505887.944 ops/s
Iteration   9: 1547524.862 ops/s
Iteration  10: 1478782.340 ops/s
Iteration  11: 1499238.452 ops/s
Iteration  12: 1419672.296 ops/s
Iteration  13: 1519170.168 ops/s
Iteration  14: 1559187.900 ops/s
Iteration  15: 1504470.228 ops/s
Iteration  16: 1490119.466 ops/s
Iteration  17: 1558656.156 ops/s
Iteration  18: 1465415.774 ops/s
Iteration  19: 1492127.061 ops/s
Iteration  20: 1568061.403 ops/s
Iteration  21: 1463968.156 ops/s
Iteration  22: 1477593.918 ops/s
Iteration  23: 1448079.401 ops/s
Iteration  24: 1542237.446 ops/s
Iteration  25: 1505659.447 ops/s
Iteration  26: 1432031.111 ops/s
Iteration  27: 1540756.906 ops/s
Iteration  28: 1480822.802 ops/s
Iteration  29: 1469008.633 ops/s
Iteration  30: 1532887.832 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybeTest._Benchmark.benchmark_cancel":
  1494973.635 ±(99.9%) 27222.106 ops/s [Average]
  (min, avg, max) = (1418816.205, 1494973.635, 1568061.403), stdev = 40744.770
  CI (99.9%): [1467751.529, 1522195.742] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
FlowableConcatMapMaybeTest._Benchmark.benchmark_cancel  thrpt   30  1494973.635 ± 27222.106  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybeTest._Benchmark.benchmark_innerError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybeTest._Benchmark.benchmark_innerError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 138775.084 ops/s
# Warmup Iteration   2: 491662.947 ops/s
# Warmup Iteration   3: 573827.661 ops/s
# Warmup Iteration   4: 584688.452 ops/s
# Warmup Iteration   5: 644891.783 ops/s
# Warmup Iteration   6: 597509.273 ops/s
# Warmup Iteration   7: 609348.236 ops/s
# Warmup Iteration   8: 613201.596 ops/s
# Warmup Iteration   9: 624433.118 ops/s
# Warmup Iteration  10: 610057.295 ops/s
# Warmup Iteration  11: 613233.462 ops/s
# Warmup Iteration  12: 592619.944 ops/s
# Warmup Iteration  13: 618000.340 ops/s
# Warmup Iteration  14: 603759.536 ops/s
# Warmup Iteration  15: 601108.983 ops/s
# Warmup Iteration  16: 619584.507 ops/s
# Warmup Iteration  17: 629025.587 ops/s
# Warmup Iteration  18: 632413.156 ops/s
# Warmup Iteration  19: 668290.908 ops/s
# Warmup Iteration  20: 655735.485 ops/s
# Warmup Iteration  21: 517308.037 ops/s
# Warmup Iteration  22: 608458.026 ops/s
# Warmup Iteration  23: 626056.013 ops/s
# Warmup Iteration  24: 624413.178 ops/s
# Warmup Iteration  25: 662542.506 ops/s
# Warmup Iteration  26: 652448.580 ops/s
# Warmup Iteration  27: 659883.212 ops/s
# Warmup Iteration  28: 640417.020 ops/s
# Warmup Iteration  29: 643854.188 ops/s
# Warmup Iteration  30: 673286.433 ops/s
Iteration   1: 618715.153 ops/s
Iteration   2: 660179.656 ops/s
Iteration   3: 659021.041 ops/s
Iteration   4: 645672.781 ops/s
Iteration   5: 659724.457 ops/s
Iteration   6: 658515.814 ops/s
Iteration   7: 634287.507 ops/s
Iteration   8: 657819.435 ops/s
Iteration   9: 640908.552 ops/s
Iteration  10: 636566.688 ops/s
Iteration  11: 659344.293 ops/s
Iteration  12: 627666.182 ops/s
Iteration  13: 668987.825 ops/s
Iteration  14: 648066.816 ops/s
Iteration  15: 639483.719 ops/s
Iteration  16: 660030.106 ops/s
Iteration  17: 656196.939 ops/s
Iteration  18: 667591.957 ops/s
Iteration  19: 634756.391 ops/s
Iteration  20: 646922.389 ops/s
Iteration  21: 670760.891 ops/s
Iteration  22: 653650.238 ops/s
Iteration  23: 642668.691 ops/s
Iteration  24: 667185.189 ops/s
Iteration  25: 642538.412 ops/s
Iteration  26: 665558.456 ops/s
Iteration  27: 628309.737 ops/s
Iteration  28: 647693.296 ops/s
Iteration  29: 650170.362 ops/s
Iteration  30: 640126.727 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybeTest._Benchmark.benchmark_innerError":
  649637.323 ±(99.9%) 9059.755 ops/s [Average]
  (min, avg, max) = (618715.153, 649637.323, 670760.891), stdev = 13560.216
  CI (99.9%): [640577.568, 658697.078] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score      Error  Units
FlowableConcatMapMaybeTest._Benchmark.benchmark_innerError  thrpt   30  649637.323 ± 9059.755  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybeTest._Benchmark.benchmark_limit$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybeTest._Benchmark.benchmark_limit

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 294027.260 ops/s
# Warmup Iteration   2: 1215968.496 ops/s
# Warmup Iteration   3: 1394374.580 ops/s
# Warmup Iteration   4: 1251095.783 ops/s
# Warmup Iteration   5: 1506738.027 ops/s
# Warmup Iteration   6: 1554850.577 ops/s
# Warmup Iteration   7: 1590799.762 ops/s
# Warmup Iteration   8: 1482481.985 ops/s
# Warmup Iteration   9: 1503980.690 ops/s
# Warmup Iteration  10: 1555323.631 ops/s
# Warmup Iteration  11: 1530459.249 ops/s
# Warmup Iteration  12: 1468460.695 ops/s
# Warmup Iteration  13: 1562264.278 ops/s
# Warmup Iteration  14: 1466376.366 ops/s
# Warmup Iteration  15: 1559696.671 ops/s
# Warmup Iteration  16: 1539350.346 ops/s
# Warmup Iteration  17: 1489266.981 ops/s
# Warmup Iteration  18: 1482411.060 ops/s
# Warmup Iteration  19: 1542380.810 ops/s
# Warmup Iteration  20: 1484220.947 ops/s
# Warmup Iteration  21: 1546252.390 ops/s
# Warmup Iteration  22: 1497653.895 ops/s
# Warmup Iteration  23: 1510617.650 ops/s
# Warmup Iteration  24: 1493033.721 ops/s
# Warmup Iteration  25: 1521318.782 ops/s
# Warmup Iteration  26: 1507481.730 ops/s
# Warmup Iteration  27: 1540031.159 ops/s
# Warmup Iteration  28: 1564608.040 ops/s
# Warmup Iteration  29: 1526811.520 ops/s
# Warmup Iteration  30: 1543771.354 ops/s
Iteration   1: 1490856.852 ops/s
Iteration   2: 1573656.046 ops/s
Iteration   3: 1479819.428 ops/s
Iteration   4: 1510350.202 ops/s
Iteration   5: 1517631.108 ops/s
Iteration   6: 1536520.994 ops/s
Iteration   7: 1448787.533 ops/s
Iteration   8: 1512689.663 ops/s
Iteration   9: 1502975.887 ops/s
Iteration  10: 1580175.428 ops/s
Iteration  11: 1529396.733 ops/s
Iteration  12: 1480573.830 ops/s
Iteration  13: 1584374.621 ops/s
Iteration  14: 1482873.562 ops/s
Iteration  15: 1475459.923 ops/s
Iteration  16: 1593513.044 ops/s
Iteration  17: 1500282.796 ops/s
Iteration  18: 1454584.090 ops/s
Iteration  19: 1551942.897 ops/s
Iteration  20: 1471487.075 ops/s
Iteration  21: 1524702.375 ops/s
Iteration  22: 1467536.641 ops/s
Iteration  23: 1525705.451 ops/s
Iteration  24: 1484619.495 ops/s
Iteration  25: 1449671.583 ops/s
Iteration  26: 1530071.845 ops/s
Iteration  27: 1454900.889 ops/s
Iteration  28: 1548772.437 ops/s
Iteration  29: 1518428.232 ops/s
Iteration  30: 1489472.902 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybeTest._Benchmark.benchmark_limit":
  1509061.119 ±(99.9%) 27424.292 ops/s [Average]
  (min, avg, max) = (1448787.533, 1509061.119, 1593513.044), stdev = 41047.392
  CI (99.9%): [1481636.827, 1536485.411] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
FlowableConcatMapMaybeTest._Benchmark.benchmark_limit  thrpt   30  1509061.119 ± 27424.292  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybeTest._Benchmark.benchmark_basicFusionRejected$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybeTest._Benchmark.benchmark_basicFusionRejected

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1097217.231 ops/s
# Warmup Iteration   2: 3422402.641 ops/s
# Warmup Iteration   3: 4562097.134 ops/s
# Warmup Iteration   4: 4765987.504 ops/s
# Warmup Iteration   5: 4776171.449 ops/s
# Warmup Iteration   6: 4495006.328 ops/s
# Warmup Iteration   7: 4845874.923 ops/s
# Warmup Iteration   8: 4880172.290 ops/s
# Warmup Iteration   9: 4704938.839 ops/s
# Warmup Iteration  10: 4746078.855 ops/s
# Warmup Iteration  11: 4789602.599 ops/s
# Warmup Iteration  12: 4622699.819 ops/s
# Warmup Iteration  13: 4831496.140 ops/s
# Warmup Iteration  14: 4672410.455 ops/s
# Warmup Iteration  15: 4544824.139 ops/s
# Warmup Iteration  16: 3769663.277 ops/s
# Warmup Iteration  17: 4805585.797 ops/s
# Warmup Iteration  18: 4962681.873 ops/s
# Warmup Iteration  19: 4594681.712 ops/s
# Warmup Iteration  20: 4647968.186 ops/s
# Warmup Iteration  21: 4925279.772 ops/s
# Warmup Iteration  22: 4592473.785 ops/s
# Warmup Iteration  23: 4884502.572 ops/s
# Warmup Iteration  24: 4625532.114 ops/s
# Warmup Iteration  25: 4754653.192 ops/s
# Warmup Iteration  26: 4905878.244 ops/s
# Warmup Iteration  27: 4475722.835 ops/s
# Warmup Iteration  28: 4724757.745 ops/s
# Warmup Iteration  29: 4895968.754 ops/s
# Warmup Iteration  30: 4609698.730 ops/s
Iteration   1: 4923048.718 ops/s
Iteration   2: 4563104.065 ops/s
Iteration   3: 4892317.165 ops/s
Iteration   4: 4536318.826 ops/s
Iteration   5: 4774273.636 ops/s
Iteration   6: 4756885.729 ops/s
Iteration   7: 4754190.375 ops/s
Iteration   8: 4717237.109 ops/s
Iteration   9: 4647874.374 ops/s
Iteration  10: 4950370.332 ops/s
Iteration  11: 4599718.460 ops/s
Iteration  12: 4717884.843 ops/s
Iteration  13: 4756421.993 ops/s
Iteration  14: 4681582.463 ops/s
Iteration  15: 4866778.834 ops/s
Iteration  16: 4692273.440 ops/s
Iteration  17: 4666198.137 ops/s
Iteration  18: 4723791.501 ops/s
Iteration  19: 4619427.048 ops/s
Iteration  20: 4739833.840 ops/s
Iteration  21: 4819122.271 ops/s
Iteration  22: 4626320.311 ops/s
Iteration  23: 4906350.304 ops/s
Iteration  24: 4612806.527 ops/s
Iteration  25: 4956183.974 ops/s
Iteration  26: 4640146.559 ops/s
Iteration  27: 4685868.055 ops/s
Iteration  28: 4841003.922 ops/s
Iteration  29: 4595924.759 ops/s
Iteration  30: 4880061.092 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybeTest._Benchmark.benchmark_basicFusionRejected":
  4738110.622 ±(99.9%) 80403.211 ops/s [Average]
  (min, avg, max) = (4536318.826, 4738110.622, 4956183.974), stdev = 120343.751
  CI (99.9%): [4657707.411, 4818513.833] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
FlowableConcatMapMaybeTest._Benchmark.benchmark_basicFusionRejected  thrpt   30  4738110.622 ± 80403.211  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybeTest._Benchmark.benchmark_basicNonFused$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybeTest._Benchmark.benchmark_basicNonFused

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 94629.160 ops/s
# Warmup Iteration   2: 311445.663 ops/s
# Warmup Iteration   3: 862016.595 ops/s
# Warmup Iteration   4: 821513.687 ops/s
# Warmup Iteration   5: 757833.274 ops/s
# Warmup Iteration   6: 888713.275 ops/s
# Warmup Iteration   7: 952099.911 ops/s
# Warmup Iteration   8: 870667.634 ops/s
# Warmup Iteration   9: 882141.722 ops/s
# Warmup Iteration  10: 907473.622 ops/s
# Warmup Iteration  11: 886865.275 ops/s
# Warmup Iteration  12: 948057.702 ops/s
# Warmup Iteration  13: 923610.624 ops/s
# Warmup Iteration  14: 854664.111 ops/s
# Warmup Iteration  15: 923569.145 ops/s
# Warmup Iteration  16: 881065.721 ops/s
# Warmup Iteration  17: 912726.410 ops/s
# Warmup Iteration  18: 918604.394 ops/s
# Warmup Iteration  19: 939784.511 ops/s
# Warmup Iteration  20: 925302.030 ops/s
# Warmup Iteration  21: 901692.513 ops/s
# Warmup Iteration  22: 907853.579 ops/s
# Warmup Iteration  23: 886267.037 ops/s
# Warmup Iteration  24: 940974.831 ops/s
# Warmup Iteration  25: 949309.635 ops/s
# Warmup Iteration  26: 883967.429 ops/s
# Warmup Iteration  27: 941239.283 ops/s
# Warmup Iteration  28: 916241.551 ops/s
# Warmup Iteration  29: 878082.101 ops/s
# Warmup Iteration  30: 944259.427 ops/s
Iteration   1: 900663.593 ops/s
Iteration   2: 896257.595 ops/s
Iteration   3: 919555.354 ops/s
Iteration   4: 905421.669 ops/s
Iteration   5: 914207.178 ops/s
Iteration   6: 882361.671 ops/s
Iteration   7: 922925.085 ops/s
Iteration   8: 937479.225 ops/s
Iteration   9: 881920.122 ops/s
Iteration  10: 931686.497 ops/s
Iteration  11: 885267.173 ops/s
Iteration  12: 962399.622 ops/s
Iteration  13: 905994.350 ops/s
Iteration  14: 947214.076 ops/s
Iteration  15: 891798.213 ops/s
Iteration  16: 900291.279 ops/s
Iteration  17: 944116.000 ops/s
Iteration  18: 911666.994 ops/s
Iteration  19: 931033.177 ops/s
Iteration  20: 912792.969 ops/s
Iteration  21: 938487.721 ops/s
Iteration  22: 909675.852 ops/s
Iteration  23: 904537.873 ops/s
Iteration  24: 928892.224 ops/s
Iteration  25: 915428.084 ops/s
Iteration  26: 915586.592 ops/s
Iteration  27: 949162.904 ops/s
Iteration  28: 910325.179 ops/s
Iteration  29: 921429.447 ops/s
Iteration  30: 892014.643 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybeTest._Benchmark.benchmark_basicNonFused":
  915686.412 ±(99.9%) 13831.259 ops/s [Average]
  (min, avg, max) = (881920.122, 915686.412, 962399.622), stdev = 20701.979
  CI (99.9%): [901855.153, 929517.671] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score       Error  Units
FlowableConcatMapMaybeTest._Benchmark.benchmark_basicNonFused  thrpt   30  915686.412 ± 13831.259  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterableTest._Benchmark.benchmark_noSubsequentSubscriptionDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterableTest._Benchmark.benchmark_noSubsequentSubscriptionDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 259739.808 ops/s
# Warmup Iteration   2: 1478699.554 ops/s
# Warmup Iteration   3: 2082425.866 ops/s
# Warmup Iteration   4: 2157387.971 ops/s
# Warmup Iteration   5: 2230303.621 ops/s
# Warmup Iteration   6: 2092091.262 ops/s
# Warmup Iteration   7: 1887634.325 ops/s
# Warmup Iteration   8: 2157044.577 ops/s
# Warmup Iteration   9: 2150141.106 ops/s
# Warmup Iteration  10: 1990604.943 ops/s
# Warmup Iteration  11: 2058565.448 ops/s
# Warmup Iteration  12: 2124884.135 ops/s
# Warmup Iteration  13: 2179327.505 ops/s
# Warmup Iteration  14: 2222039.750 ops/s
# Warmup Iteration  15: 2176039.372 ops/s
# Warmup Iteration  16: 2233452.762 ops/s
# Warmup Iteration  17: 2235902.282 ops/s
# Warmup Iteration  18: 2128698.104 ops/s
# Warmup Iteration  19: 2213260.314 ops/s
# Warmup Iteration  20: 2153098.384 ops/s
# Warmup Iteration  21: 2216317.004 ops/s
# Warmup Iteration  22: 2127176.679 ops/s
# Warmup Iteration  23: 2166680.619 ops/s
# Warmup Iteration  24: 2182295.860 ops/s
# Warmup Iteration  25: 2175859.758 ops/s
# Warmup Iteration  26: 2154276.975 ops/s
# Warmup Iteration  27: 2214230.949 ops/s
# Warmup Iteration  28: 2132256.117 ops/s
# Warmup Iteration  29: 2221577.336 ops/s
# Warmup Iteration  30: 2320649.635 ops/s
Iteration   1: 2075532.079 ops/s
Iteration   2: 2296128.279 ops/s
Iteration   3: 2129484.940 ops/s
Iteration   4: 2242458.229 ops/s
Iteration   5: 2144825.176 ops/s
Iteration   6: 2183700.212 ops/s
Iteration   7: 2237752.714 ops/s
Iteration   8: 2111177.264 ops/s
Iteration   9: 2255138.385 ops/s
Iteration  10: 2107067.042 ops/s
Iteration  11: 2219460.422 ops/s
Iteration  12: 2244781.762 ops/s
Iteration  13: 2159233.651 ops/s
Iteration  14: 2249627.964 ops/s
Iteration  15: 2152824.317 ops/s
Iteration  16: 2131074.792 ops/s
Iteration  17: 2234647.197 ops/s
Iteration  18: 2106440.463 ops/s
Iteration  19: 2214284.599 ops/s
Iteration  20: 2192757.012 ops/s
Iteration  21: 2209407.268 ops/s
Iteration  22: 2140640.124 ops/s
Iteration  23: 2136448.767 ops/s
Iteration  24: 2213266.539 ops/s
Iteration  25: 2164038.826 ops/s
Iteration  26: 2160075.779 ops/s
Iteration  27: 2223090.769 ops/s
Iteration  28: 2172075.262 ops/s
Iteration  29: 2248483.102 ops/s
Iteration  30: 2125336.238 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterableTest._Benchmark.benchmark_noSubsequentSubscriptionDelayError":
  2182708.639 ±(99.9%) 37320.298 ops/s [Average]
  (min, avg, max) = (2075532.079, 2182708.639, 2296128.279), stdev = 55859.269
  CI (99.9%): [2145388.341, 2220028.937] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt        Score       Error  Units
MaybeConcatIterableTest._Benchmark.benchmark_noSubsequentSubscriptionDelayError  thrpt   30  2182708.639 ± 37320.298  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybeTest._Benchmark.benchmark_fusedPollCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybeTest._Benchmark.benchmark_fusedPollCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 18967.301 ops/s
# Warmup Iteration   2: 271618.647 ops/s
# Warmup Iteration   3: 333909.170 ops/s
# Warmup Iteration   4: 298016.891 ops/s
# Warmup Iteration   5: 357216.949 ops/s
# Warmup Iteration   6: 332904.216 ops/s
# Warmup Iteration   7: 364888.063 ops/s
# Warmup Iteration   8: 366184.227 ops/s
# Warmup Iteration   9: 363710.758 ops/s
# Warmup Iteration  10: 379958.490 ops/s
# Warmup Iteration  11: 346181.446 ops/s
# Warmup Iteration  12: 361986.810 ops/s
# Warmup Iteration  13: 373966.305 ops/s
# Warmup Iteration  14: 351475.995 ops/s
# Warmup Iteration  15: 364422.499 ops/s
# Warmup Iteration  16: 360850.230 ops/s
# Warmup Iteration  17: 377814.059 ops/s
# Warmup Iteration  18: 375979.298 ops/s
# Warmup Iteration  19: 367702.866 ops/s
# Warmup Iteration  20: 387305.767 ops/s
# Warmup Iteration  21: 374442.712 ops/s
# Warmup Iteration  22: 369468.634 ops/s
# Warmup Iteration  23: 383482.908 ops/s
# Warmup Iteration  24: 373180.459 ops/s
# Warmup Iteration  25: 381265.981 ops/s
# Warmup Iteration  26: 371624.292 ops/s
# Warmup Iteration  27: 373070.461 ops/s
# Warmup Iteration  28: 379347.491 ops/s
# Warmup Iteration  29: 363376.802 ops/s
# Warmup Iteration  30: 369733.569 ops/s
Iteration   1: 374740.863 ops/s
Iteration   2: 373963.100 ops/s
Iteration   3: 382098.286 ops/s
Iteration   4: 362809.899 ops/s
Iteration   5: 389272.527 ops/s
Iteration   6: 387559.873 ops/s
Iteration   7: 375953.734 ops/s
Iteration   8: 378117.461 ops/s
Iteration   9: 371651.636 ops/s
Iteration  10: 394518.617 ops/s
Iteration  11: 370251.139 ops/s
Iteration  12: 371683.798 ops/s
Iteration  13: 392371.675 ops/s
Iteration  14: 392758.164 ops/s
Iteration  15: 377736.374 ops/s
Iteration  16: 369587.700 ops/s
Iteration  17: 366901.511 ops/s
Iteration  18: 383428.092 ops/s
Iteration  19: 361492.720 ops/s
Iteration  20: 385442.511 ops/s
Iteration  21: 373496.627 ops/s
Iteration  22: 373059.602 ops/s
Iteration  23: 389621.842 ops/s
Iteration  24: 364179.216 ops/s
Iteration  25: 398476.857 ops/s
Iteration  26: 374687.866 ops/s
Iteration  27: 373530.748 ops/s
Iteration  28: 377328.594 ops/s
Iteration  29: 362808.431 ops/s
Iteration  30: 380704.394 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybeTest._Benchmark.benchmark_fusedPollCrash":
  377674.462 ±(99.9%) 6729.693 ops/s [Average]
  (min, avg, max) = (361492.720, 377674.462, 398476.857), stdev = 10072.688
  CI (99.9%): [370944.769, 384404.155] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
FlowableConcatMapMaybeTest._Benchmark.benchmark_fusedPollCrash  thrpt   30  377674.462 ± 6729.693  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_concatPublisherPrefetch$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_concatPublisherPrefetch

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 242885.194 ops/s
# Warmup Iteration   2: 1589824.562 ops/s
# Warmup Iteration   3: 1857224.807 ops/s
# Warmup Iteration   4: 2336705.614 ops/s
# Warmup Iteration   5: 1869277.845 ops/s
# Warmup Iteration   6: 2326751.544 ops/s
# Warmup Iteration   7: 2250677.283 ops/s
# Warmup Iteration   8: 2289953.776 ops/s
# Warmup Iteration   9: 2232029.563 ops/s
# Warmup Iteration  10: 2186352.018 ops/s
# Warmup Iteration  11: 2352106.170 ops/s
# Warmup Iteration  12: 2235444.798 ops/s
# Warmup Iteration  13: 2278951.902 ops/s
# Warmup Iteration  14: 2228435.718 ops/s
# Warmup Iteration  15: 2284151.899 ops/s
# Warmup Iteration  16: 2331670.690 ops/s
# Warmup Iteration  17: 2096163.315 ops/s
# Warmup Iteration  18: 2185695.934 ops/s
# Warmup Iteration  19: 2328601.034 ops/s
# Warmup Iteration  20: 2209947.227 ops/s
# Warmup Iteration  21: 2247535.089 ops/s
# Warmup Iteration  22: 2217869.964 ops/s
# Warmup Iteration  23: 2263811.366 ops/s
# Warmup Iteration  24: 2235782.922 ops/s
# Warmup Iteration  25: 2226269.726 ops/s
# Warmup Iteration  26: 2245791.347 ops/s
# Warmup Iteration  27: 2281240.399 ops/s
# Warmup Iteration  28: 2232990.553 ops/s
# Warmup Iteration  29: 2246523.470 ops/s
# Warmup Iteration  30: 2233500.616 ops/s
Iteration   1: 2322265.879 ops/s
Iteration   2: 2236160.024 ops/s
Iteration   3: 2143115.330 ops/s
Iteration   4: 2231119.021 ops/s
Iteration   5: 2275014.932 ops/s
Iteration   6: 2166188.992 ops/s
Iteration   7: 2266629.056 ops/s
Iteration   8: 2179063.040 ops/s
Iteration   9: 2207499.696 ops/s
Iteration  10: 2290824.752 ops/s
Iteration  11: 2213153.055 ops/s
Iteration  12: 2236749.689 ops/s
Iteration  13: 2293538.591 ops/s
Iteration  14: 2171762.833 ops/s
Iteration  15: 2361137.624 ops/s
Iteration  16: 2212678.224 ops/s
Iteration  17: 2183896.658 ops/s
Iteration  18: 2269702.608 ops/s
Iteration  19: 2241487.590 ops/s
Iteration  20: 2252102.772 ops/s
Iteration  21: 2189895.075 ops/s
Iteration  22: 2220754.046 ops/s
Iteration  23: 2284438.445 ops/s
Iteration  24: 2187686.972 ops/s
Iteration  25: 2327943.467 ops/s
Iteration  26: 2157976.095 ops/s
Iteration  27: 2318985.993 ops/s
Iteration  28: 2197099.909 ops/s
Iteration  29: 2329624.542 ops/s
Iteration  30: 2187155.026 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_concatPublisherPrefetch":
  2238521.665 ±(99.9%) 39180.004 ops/s [Average]
  (min, avg, max) = (2143115.330, 2238521.665, 2361137.624), stdev = 58642.790
  CI (99.9%): [2199341.660, 2277701.669] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
MaybeTest._Benchmark.benchmark_concatPublisherPrefetch  thrpt   30  2238521.665 ± 39180.004  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_concatPublisher$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_concatPublisher

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 279902.481 ops/s
# Warmup Iteration   2: 1440668.842 ops/s
# Warmup Iteration   3: 2129606.954 ops/s
# Warmup Iteration   4: 2312003.911 ops/s
# Warmup Iteration   5: 2249980.378 ops/s
# Warmup Iteration   6: 2027780.077 ops/s
# Warmup Iteration   7: 2212283.305 ops/s
# Warmup Iteration   8: 2334322.750 ops/s
# Warmup Iteration   9: 2223763.804 ops/s
# Warmup Iteration  10: 2242327.971 ops/s
# Warmup Iteration  11: 2262065.600 ops/s
# Warmup Iteration  12: 2280117.088 ops/s
# Warmup Iteration  13: 2356256.556 ops/s
# Warmup Iteration  14: 2215232.678 ops/s
# Warmup Iteration  15: 2357626.775 ops/s
# Warmup Iteration  16: 2344160.103 ops/s
# Warmup Iteration  17: 2169539.028 ops/s
# Warmup Iteration  18: 2325477.178 ops/s
# Warmup Iteration  19: 2208681.226 ops/s
# Warmup Iteration  20: 2327161.300 ops/s
# Warmup Iteration  21: 2207953.041 ops/s
# Warmup Iteration  22: 2180487.196 ops/s
# Warmup Iteration  23: 2322478.384 ops/s
# Warmup Iteration  24: 2352122.244 ops/s
# Warmup Iteration  25: 2252408.308 ops/s
# Warmup Iteration  26: 2273813.918 ops/s
# Warmup Iteration  27: 2241729.123 ops/s
# Warmup Iteration  28: 2310321.117 ops/s
# Warmup Iteration  29: 2160061.218 ops/s
# Warmup Iteration  30: 2280716.680 ops/s
Iteration   1: 2163809.309 ops/s
Iteration   2: 2246208.752 ops/s
Iteration   3: 2318492.063 ops/s
Iteration   4: 2203541.362 ops/s
Iteration   5: 2292483.844 ops/s
Iteration   6: 2251283.010 ops/s
Iteration   7: 2228027.143 ops/s
Iteration   8: 2311950.752 ops/s
Iteration   9: 2200770.015 ops/s
Iteration  10: 2228252.933 ops/s
Iteration  11: 2336059.297 ops/s
Iteration  12: 2151027.840 ops/s
Iteration  13: 2299393.158 ops/s
Iteration  14: 2216402.319 ops/s
Iteration  15: 2230263.757 ops/s
Iteration  16: 2334616.523 ops/s
Iteration  17: 2141408.956 ops/s
Iteration  18: 2260860.789 ops/s
Iteration  19: 2250256.009 ops/s
Iteration  20: 2320972.915 ops/s
Iteration  21: 2218457.844 ops/s
Iteration  22: 2295794.218 ops/s
Iteration  23: 2294145.561 ops/s
Iteration  24: 2209272.691 ops/s
Iteration  25: 2296997.218 ops/s
Iteration  26: 2186735.205 ops/s
Iteration  27: 2236054.070 ops/s
Iteration  28: 2208945.930 ops/s
Iteration  29: 2175820.995 ops/s
Iteration  30: 2237982.220 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_concatPublisher":
  2244876.223 ±(99.9%) 36852.533 ops/s [Average]
  (min, avg, max) = (2141408.956, 2244876.223, 2336059.297), stdev = 55159.141
  CI (99.9%): [2208023.690, 2281728.756] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt        Score       Error  Units
MaybeTest._Benchmark.benchmark_concatPublisher  thrpt   30  2244876.223 ± 36852.533  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_concatPublisherDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_concatPublisherDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 24508.740 ops/s
# Warmup Iteration   2: 106834.367 ops/s
# Warmup Iteration   3: 231812.883 ops/s
# Warmup Iteration   4: 223927.162 ops/s
# Warmup Iteration   5: 265529.261 ops/s
# Warmup Iteration   6: 225948.059 ops/s
# Warmup Iteration   7: 246838.293 ops/s
# Warmup Iteration   8: 262267.923 ops/s
# Warmup Iteration   9: 251843.187 ops/s
# Warmup Iteration  10: 257566.685 ops/s
# Warmup Iteration  11: 255445.879 ops/s
# Warmup Iteration  12: 248133.082 ops/s
# Warmup Iteration  13: 263818.958 ops/s
# Warmup Iteration  14: 244165.411 ops/s
# Warmup Iteration  15: 261592.326 ops/s
# Warmup Iteration  16: 255124.594 ops/s
# Warmup Iteration  17: 265167.780 ops/s
# Warmup Iteration  18: 259009.201 ops/s
# Warmup Iteration  19: 274137.731 ops/s
# Warmup Iteration  20: 255095.946 ops/s
# Warmup Iteration  21: 273004.380 ops/s
# Warmup Iteration  22: 264340.959 ops/s
# Warmup Iteration  23: 258656.650 ops/s
# Warmup Iteration  24: 271829.747 ops/s
# Warmup Iteration  25: 264636.091 ops/s
# Warmup Iteration  26: 259648.804 ops/s
# Warmup Iteration  27: 270025.883 ops/s
# Warmup Iteration  28: 266000.406 ops/s
# Warmup Iteration  29: 264758.649 ops/s
# Warmup Iteration  30: 261255.066 ops/s
Iteration   1: 269247.182 ops/s
Iteration   2: 262654.933 ops/s
Iteration   3: 264393.573 ops/s
Iteration   4: 273656.442 ops/s
Iteration   5: 258325.144 ops/s
Iteration   6: 263297.677 ops/s
Iteration   7: 270949.053 ops/s
Iteration   8: 261607.897 ops/s
Iteration   9: 275606.698 ops/s
Iteration  10: 259208.329 ops/s
Iteration  11: 258840.960 ops/s
Iteration  12: 269675.128 ops/s
Iteration  13: 264119.471 ops/s
Iteration  14: 276221.131 ops/s
Iteration  15: 260583.407 ops/s
Iteration  16: 276260.657 ops/s
Iteration  17: 259391.292 ops/s
Iteration  18: 263754.952 ops/s
Iteration  19: 275620.825 ops/s
Iteration  20: 255486.504 ops/s
Iteration  21: 274730.689 ops/s
Iteration  22: 256537.284 ops/s
Iteration  23: 267685.190 ops/s
Iteration  24: 260507.344 ops/s
Iteration  25: 259986.960 ops/s
Iteration  26: 266268.854 ops/s
Iteration  27: 266001.219 ops/s
Iteration  28: 269998.677 ops/s
Iteration  29: 256983.317 ops/s
Iteration  30: 264700.726 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_concatPublisherDelayError":
  265410.050 ±(99.9%) 4322.892 ops/s [Average]
  (min, avg, max) = (255486.504, 265410.050, 276260.657), stdev = 6470.302
  CI (99.9%): [261087.158, 269732.942] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score      Error  Units
MaybeTest._Benchmark.benchmark_concatPublisherDelayError  thrpt   30  265410.050 ± 4322.892  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_concatIterableDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_concatIterableDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 45700.583 ops/s
# Warmup Iteration   2: 208317.163 ops/s
# Warmup Iteration   3: 240641.926 ops/s
# Warmup Iteration   4: 216086.345 ops/s
# Warmup Iteration   5: 256969.719 ops/s
# Warmup Iteration   6: 264638.609 ops/s
# Warmup Iteration   7: 253885.126 ops/s
# Warmup Iteration   8: 260068.730 ops/s
# Warmup Iteration   9: 259273.355 ops/s
# Warmup Iteration  10: 263634.293 ops/s
# Warmup Iteration  11: 259826.369 ops/s
# Warmup Iteration  12: 257847.727 ops/s
# Warmup Iteration  13: 264145.320 ops/s
# Warmup Iteration  14: 265118.365 ops/s
# Warmup Iteration  15: 252606.958 ops/s
# Warmup Iteration  16: 259631.231 ops/s
# Warmup Iteration  17: 261335.340 ops/s
# Warmup Iteration  18: 261131.025 ops/s
# Warmup Iteration  19: 278184.723 ops/s
# Warmup Iteration  20: 262905.392 ops/s
# Warmup Iteration  21: 264836.563 ops/s
# Warmup Iteration  22: 264567.770 ops/s
# Warmup Iteration  23: 273351.099 ops/s
# Warmup Iteration  24: 254002.808 ops/s
# Warmup Iteration  25: 283813.353 ops/s
# Warmup Iteration  26: 272529.881 ops/s
# Warmup Iteration  27: 262900.862 ops/s
# Warmup Iteration  28: 264335.944 ops/s
# Warmup Iteration  29: 270407.352 ops/s
# Warmup Iteration  30: 272093.386 ops/s
Iteration   1: 265431.026 ops/s
Iteration   2: 278062.033 ops/s
Iteration   3: 262810.976 ops/s
Iteration   4: 272708.422 ops/s
Iteration   5: 273544.494 ops/s
Iteration   6: 266320.250 ops/s
Iteration   7: 279321.874 ops/s
Iteration   8: 264817.565 ops/s
Iteration   9: 261310.825 ops/s
Iteration  10: 270972.959 ops/s
Iteration  11: 270149.818 ops/s
Iteration  12: 281260.425 ops/s
Iteration  13: 268518.826 ops/s
Iteration  14: 266307.741 ops/s
Iteration  15: 282408.735 ops/s
Iteration  16: 262175.914 ops/s
Iteration  17: 277913.252 ops/s
Iteration  18: 263853.202 ops/s
Iteration  19: 271593.225 ops/s
Iteration  20: 272615.431 ops/s
Iteration  21: 260580.632 ops/s
Iteration  22: 271448.385 ops/s
Iteration  23: 262424.028 ops/s
Iteration  24: 274985.995 ops/s
Iteration  25: 260338.074 ops/s
Iteration  26: 205863.603 ops/s
Iteration  27: 265079.094 ops/s
Iteration  28: 267938.071 ops/s
Iteration  29: 279335.313 ops/s
Iteration  30: 265962.826 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_concatIterableDelayError":
  267535.101 ±(99.9%) 8910.601 ops/s [Average]
  (min, avg, max) = (205863.603, 267535.101, 282408.735), stdev = 13336.969
  CI (99.9%): [258624.500, 276445.701] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score      Error  Units
MaybeTest._Benchmark.benchmark_concatIterableDelayError  thrpt   30  267535.101 ± 8910.601  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybeTest._Benchmark.benchmark_queueOverflow$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybeTest._Benchmark.benchmark_queueOverflow

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 16398.583 ops/s
# Warmup Iteration   2: 70266.180 ops/s
# Warmup Iteration   3: 160410.181 ops/s
# Warmup Iteration   4: 161255.899 ops/s
# Warmup Iteration   5: 172097.020 ops/s
# Warmup Iteration   6: 170941.040 ops/s
# Warmup Iteration   7: 157224.328 ops/s
# Warmup Iteration   8: 160895.759 ops/s
# Warmup Iteration   9: 161224.776 ops/s
# Warmup Iteration  10: 162538.030 ops/s
# Warmup Iteration  11: 167271.654 ops/s
# Warmup Iteration  12: 168043.215 ops/s
# Warmup Iteration  13: 173076.100 ops/s
# Warmup Iteration  14: 164522.428 ops/s
# Warmup Iteration  15: 170031.831 ops/s
# Warmup Iteration  16: 169573.962 ops/s
# Warmup Iteration  17: 174413.887 ops/s
# Warmup Iteration  18: 171337.108 ops/s
# Warmup Iteration  19: 180241.778 ops/s
# Warmup Iteration  20: 171010.992 ops/s
# Warmup Iteration  21: 169630.115 ops/s
# Warmup Iteration  22: 180568.650 ops/s
# Warmup Iteration  23: 168428.498 ops/s
# Warmup Iteration  24: 176148.619 ops/s
# Warmup Iteration  25: 173804.261 ops/s
# Warmup Iteration  26: 178165.014 ops/s
# Warmup Iteration  27: 176558.013 ops/s
# Warmup Iteration  28: 173764.165 ops/s
# Warmup Iteration  29: 175097.178 ops/s
# Warmup Iteration  30: 172638.348 ops/s
Iteration   1: 170729.059 ops/s
Iteration   2: 171719.477 ops/s
Iteration   3: 170545.822 ops/s
Iteration   4: 171206.253 ops/s
Iteration   5: 171011.455 ops/s
Iteration   6: 173418.483 ops/s
Iteration   7: 174803.553 ops/s
Iteration   8: 166323.233 ops/s
Iteration   9: 174566.122 ops/s
Iteration  10: 170707.561 ops/s
Iteration  11: 171357.834 ops/s
Iteration  12: 177271.497 ops/s
Iteration  13: 166271.200 ops/s
Iteration  14: 172002.175 ops/s
Iteration  15: 167774.021 ops/s
Iteration  16: 174230.839 ops/s
Iteration  17: 179295.130 ops/s
Iteration  18: 167960.898 ops/s
Iteration  19: 182245.068 ops/s
Iteration  20: 174705.284 ops/s
Iteration  21: 180296.416 ops/s
Iteration  22: 171099.073 ops/s
Iteration  23: 181619.327 ops/s
Iteration  24: 166689.793 ops/s
Iteration  25: 173463.960 ops/s
Iteration  26: 173579.778 ops/s
Iteration  27: 171448.085 ops/s
Iteration  28: 180735.389 ops/s
Iteration  29: 171206.443 ops/s
Iteration  30: 172499.542 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybeTest._Benchmark.benchmark_queueOverflow":
  173026.092 ±(99.9%) 2942.088 ops/s [Average]
  (min, avg, max) = (166271.200, 173026.092, 182245.068), stdev = 4403.579
  CI (99.9%): [170084.004, 175968.180] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
FlowableConcatMapMaybeTest._Benchmark.benchmark_queueOverflow  thrpt   30  173026.092 ± 2942.088  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybeTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybeTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 106825.258 ops/s
# Warmup Iteration   2: 387809.408 ops/s
# Warmup Iteration   3: 482538.068 ops/s
# Warmup Iteration   4: 471771.638 ops/s
# Warmup Iteration   5: 493273.926 ops/s
# Warmup Iteration   6: 466534.369 ops/s
# Warmup Iteration   7: 476180.925 ops/s
# Warmup Iteration   8: 494271.726 ops/s
# Warmup Iteration   9: 478181.424 ops/s
# Warmup Iteration  10: 479602.305 ops/s
# Warmup Iteration  11: 475835.480 ops/s
# Warmup Iteration  12: 495587.430 ops/s
# Warmup Iteration  13: 489065.977 ops/s
# Warmup Iteration  14: 506437.928 ops/s
# Warmup Iteration  15: 483849.251 ops/s
# Warmup Iteration  16: 488846.417 ops/s
# Warmup Iteration  17: 494958.085 ops/s
# Warmup Iteration  18: 491746.962 ops/s
# Warmup Iteration  19: 525224.400 ops/s
# Warmup Iteration  20: 509097.574 ops/s
# Warmup Iteration  21: 534917.224 ops/s
# Warmup Iteration  22: 502510.471 ops/s
# Warmup Iteration  23: 514684.020 ops/s
# Warmup Iteration  24: 506043.443 ops/s
# Warmup Iteration  25: 508937.158 ops/s
# Warmup Iteration  26: 529650.053 ops/s
# Warmup Iteration  27: 495079.120 ops/s
# Warmup Iteration  28: 522908.447 ops/s
# Warmup Iteration  29: 494652.572 ops/s
# Warmup Iteration  30: 514195.102 ops/s
Iteration   1: 511230.556 ops/s
Iteration   2: 514724.718 ops/s
Iteration   3: 507876.725 ops/s
Iteration   4: 510408.305 ops/s
Iteration   5: 525122.052 ops/s
Iteration   6: 505173.167 ops/s
Iteration   7: 530144.178 ops/s
Iteration   8: 519626.559 ops/s
Iteration   9: 497568.621 ops/s
Iteration  10: 528067.783 ops/s
Iteration  11: 499904.428 ops/s
Iteration  12: 516468.230 ops/s
Iteration  13: 509247.065 ops/s
Iteration  14: 528795.154 ops/s
Iteration  15: 506183.500 ops/s
Iteration  16: 502488.441 ops/s
Iteration  17: 518535.467 ops/s
Iteration  18: 490184.629 ops/s
Iteration  19: 519719.422 ops/s
Iteration  20: 439561.901 ops/s
Iteration  21: 482332.295 ops/s
Iteration  22: 522725.198 ops/s
Iteration  23: 500131.020 ops/s
Iteration  24: 533229.746 ops/s
Iteration  25: 531211.288 ops/s
Iteration  26: 506456.393 ops/s
Iteration  27: 493465.051 ops/s
Iteration  28: 521425.740 ops/s
Iteration  29: 477749.756 ops/s
Iteration  30: 529406.544 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybeTest._Benchmark.benchmark_doubleOnSubscribe":
  509305.464 ±(99.9%) 13119.942 ops/s [Average]
  (min, avg, max) = (439561.901, 509305.464, 533229.746), stdev = 19637.313
  CI (99.9%): [496185.523, 522425.406] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score       Error  Units
FlowableConcatMapMaybeTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  509305.464 ± 13119.942  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArrayTest._Benchmark.benchmark_requestBeforeSuccessDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArrayTest._Benchmark.benchmark_requestBeforeSuccessDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 328182.260 ops/s
# Warmup Iteration   2: 1446018.929 ops/s
# Warmup Iteration   3: 1863957.434 ops/s
# Warmup Iteration   4: 2339485.647 ops/s
# Warmup Iteration   5: 2455730.863 ops/s
# Warmup Iteration   6: 2318997.372 ops/s
# Warmup Iteration   7: 2330311.166 ops/s
# Warmup Iteration   8: 2407465.677 ops/s
# Warmup Iteration   9: 2302963.765 ops/s
# Warmup Iteration  10: 2431402.358 ops/s
# Warmup Iteration  11: 2403310.074 ops/s
# Warmup Iteration  12: 2304766.668 ops/s
# Warmup Iteration  13: 2329157.761 ops/s
# Warmup Iteration  14: 2375015.493 ops/s
# Warmup Iteration  15: 2455095.770 ops/s
# Warmup Iteration  16: 2297126.570 ops/s
# Warmup Iteration  17: 2373433.002 ops/s
# Warmup Iteration  18: 2402561.988 ops/s
# Warmup Iteration  19: 2351078.986 ops/s
# Warmup Iteration  20: 2438501.397 ops/s
# Warmup Iteration  21: 2353391.910 ops/s
# Warmup Iteration  22: 2411145.819 ops/s
# Warmup Iteration  23: 2302859.593 ops/s
# Warmup Iteration  24: 2342799.970 ops/s
# Warmup Iteration  25: 2461051.294 ops/s
# Warmup Iteration  26: 2335426.799 ops/s
# Warmup Iteration  27: 2433957.505 ops/s
# Warmup Iteration  28: 2336289.706 ops/s
# Warmup Iteration  29: 2403026.875 ops/s
# Warmup Iteration  30: 2383499.665 ops/s
Iteration   1: 2363899.699 ops/s
Iteration   2: 2355702.330 ops/s
Iteration   3: 2366476.212 ops/s
Iteration   4: 2359437.002 ops/s
Iteration   5: 2344655.176 ops/s
Iteration   6: 2460706.439 ops/s
Iteration   7: 2397550.220 ops/s
Iteration   8: 2336988.334 ops/s
Iteration   9: 2381511.682 ops/s
Iteration  10: 2317545.497 ops/s
Iteration  11: 2415632.216 ops/s
Iteration  12: 2273781.600 ops/s
Iteration  13: 2363544.477 ops/s
Iteration  14: 2304489.843 ops/s
Iteration  15: 2336288.024 ops/s
Iteration  16: 2410808.864 ops/s
Iteration  17: 2273365.790 ops/s
Iteration  18: 2452444.489 ops/s
Iteration  19: 2482967.966 ops/s
Iteration  20: 2302928.169 ops/s
Iteration  21: 2415823.047 ops/s
Iteration  22: 2277499.864 ops/s
Iteration  23: 2386726.190 ops/s
Iteration  24: 2461914.280 ops/s
Iteration  25: 2469129.122 ops/s
Iteration  26: 2300398.929 ops/s
Iteration  27: 2450486.543 ops/s
Iteration  28: 2289991.265 ops/s
Iteration  29: 2362817.885 ops/s
Iteration  30: 2433097.658 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArrayTest._Benchmark.benchmark_requestBeforeSuccessDelayError":
  2371620.294 ±(99.9%) 42387.559 ops/s [Average]
  (min, avg, max) = (2273365.790, 2371620.294, 2482967.966), stdev = 63443.707
  CI (99.9%): [2329232.735, 2414007.852] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score       Error  Units
MaybeConcatArrayTest._Benchmark.benchmark_requestBeforeSuccessDelayError  thrpt   30  2371620.294 ± 42387.559  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArrayTest._Benchmark.benchmark_noSubsequentSubscriptionDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArrayTest._Benchmark.benchmark_noSubsequentSubscriptionDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 450097.254 ops/s
# Warmup Iteration   2: 1723656.691 ops/s
# Warmup Iteration   3: 2586864.142 ops/s
# Warmup Iteration   4: 3089218.834 ops/s
# Warmup Iteration   5: 3220704.416 ops/s
# Warmup Iteration   6: 3038912.075 ops/s
# Warmup Iteration   7: 3090631.283 ops/s
# Warmup Iteration   8: 3188310.702 ops/s
# Warmup Iteration   9: 3098551.728 ops/s
# Warmup Iteration  10: 3069847.629 ops/s
# Warmup Iteration  11: 3050601.047 ops/s
# Warmup Iteration  12: 3065952.286 ops/s
# Warmup Iteration  13: 3135448.645 ops/s
# Warmup Iteration  14: 3031557.912 ops/s
# Warmup Iteration  15: 3197038.241 ops/s
# Warmup Iteration  16: 2967742.785 ops/s
# Warmup Iteration  17: 3173637.792 ops/s
# Warmup Iteration  18: 3178902.488 ops/s
# Warmup Iteration  19: 2999345.048 ops/s
# Warmup Iteration  20: 3098832.066 ops/s
# Warmup Iteration  21: 3128281.725 ops/s
# Warmup Iteration  22: 3092914.420 ops/s
# Warmup Iteration  23: 3184811.393 ops/s
# Warmup Iteration  24: 3056356.905 ops/s
# Warmup Iteration  25: 3255981.884 ops/s
# Warmup Iteration  26: 3073289.837 ops/s
# Warmup Iteration  27: 3130898.663 ops/s
# Warmup Iteration  28: 3107018.625 ops/s
# Warmup Iteration  29: 3238265.218 ops/s
# Warmup Iteration  30: 3219437.735 ops/s
Iteration   1: 3173389.109 ops/s
Iteration   2: 3046504.918 ops/s
Iteration   3: 3207404.514 ops/s
Iteration   4: 3091457.678 ops/s
Iteration   5: 3076078.856 ops/s
Iteration   6: 3304906.994 ops/s
Iteration   7: 3226872.604 ops/s
Iteration   8: 3095288.643 ops/s
Iteration   9: 3141980.427 ops/s
Iteration  10: 3051492.573 ops/s
Iteration  11: 3196829.283 ops/s
Iteration  12: 3155033.470 ops/s
Iteration  13: 3082147.542 ops/s
Iteration  14: 3173917.310 ops/s
Iteration  15: 2641781.566 ops/s
Iteration  16: 3045425.860 ops/s
Iteration  17: 3203239.541 ops/s
Iteration  18: 3208084.384 ops/s
Iteration  19: 3170181.547 ops/s
Iteration  20: 3078913.985 ops/s
Iteration  21: 3288586.758 ops/s
Iteration  22: 3033495.219 ops/s
Iteration  23: 3090980.796 ops/s
Iteration  24: 3205679.286 ops/s
Iteration  25: 3087483.357 ops/s
Iteration  26: 3177711.298 ops/s
Iteration  27: 3008512.643 ops/s
Iteration  28: 3125615.343 ops/s
Iteration  29: 3112889.732 ops/s
Iteration  30: 3037284.314 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArrayTest._Benchmark.benchmark_noSubsequentSubscriptionDelayError":
  3117972.318 ±(99.9%) 78696.847 ops/s [Average]
  (min, avg, max) = (2641781.566, 3117972.318, 3304906.994), stdev = 117789.744
  CI (99.9%): [3039275.472, 3196669.165] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score       Error  Units
MaybeConcatArrayTest._Benchmark.benchmark_noSubsequentSubscriptionDelayError  thrpt   30  3117972.318 ± 78696.847  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_concatMapDelayErrorJustJust$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_concatMapDelayErrorJustJust

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 445951.416 ops/s
# Warmup Iteration   2: 2337675.088 ops/s
# Warmup Iteration   3: 3256307.057 ops/s
# Warmup Iteration   4: 3489560.078 ops/s
# Warmup Iteration   5: 3557092.940 ops/s
# Warmup Iteration   6: 3573252.732 ops/s
# Warmup Iteration   7: 3510369.890 ops/s
# Warmup Iteration   8: 3644202.117 ops/s
# Warmup Iteration   9: 3493002.996 ops/s
# Warmup Iteration  10: 3535980.439 ops/s
# Warmup Iteration  11: 3622074.554 ops/s
# Warmup Iteration  12: 3436734.627 ops/s
# Warmup Iteration  13: 3549497.850 ops/s
# Warmup Iteration  14: 3485486.581 ops/s
# Warmup Iteration  15: 3746022.274 ops/s
# Warmup Iteration  16: 3705912.180 ops/s
# Warmup Iteration  17: 3465049.915 ops/s
# Warmup Iteration  18: 3599889.997 ops/s
# Warmup Iteration  19: 3496288.274 ops/s
# Warmup Iteration  20: 3528186.159 ops/s
# Warmup Iteration  21: 3670739.224 ops/s
# Warmup Iteration  22: 3373594.980 ops/s
# Warmup Iteration  23: 3607736.504 ops/s
# Warmup Iteration  24: 3504436.551 ops/s
# Warmup Iteration  25: 3551271.231 ops/s
# Warmup Iteration  26: 3501116.923 ops/s
# Warmup Iteration  27: 3587641.831 ops/s
# Warmup Iteration  28: 3446034.746 ops/s
# Warmup Iteration  29: 3643733.151 ops/s
# Warmup Iteration  30: 3548417.021 ops/s
Iteration   1: 3491626.579 ops/s
Iteration   2: 3607173.908 ops/s
Iteration   3: 3479128.306 ops/s
Iteration   4: 3469133.158 ops/s
Iteration   5: 3514079.647 ops/s
Iteration   6: 3467397.235 ops/s
Iteration   7: 3571620.513 ops/s
Iteration   8: 3419674.271 ops/s
Iteration   9: 3644655.564 ops/s
Iteration  10: 3465971.733 ops/s
Iteration  11: 3611613.919 ops/s
Iteration  12: 3438704.017 ops/s
Iteration  13: 3634416.344 ops/s
Iteration  14: 3512541.294 ops/s
Iteration  15: 3432111.462 ops/s
Iteration  16: 3511051.882 ops/s
Iteration  17: 3594192.865 ops/s
Iteration  18: 3508856.624 ops/s
Iteration  19: 3488768.293 ops/s
Iteration  20: 3574783.003 ops/s
Iteration  21: 3470777.426 ops/s
Iteration  22: 3475047.659 ops/s
Iteration  23: 3580071.715 ops/s
Iteration  24: 3479571.874 ops/s
Iteration  25: 3607788.407 ops/s
Iteration  26: 3432674.774 ops/s
Iteration  27: 3567321.662 ops/s
Iteration  28: 3442299.600 ops/s
Iteration  29: 3570775.972 ops/s
Iteration  30: 3670240.872 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_concatMapDelayErrorJustJust":
  3524469.019 ±(99.9%) 48059.667 ops/s [Average]
  (min, avg, max) = (3419674.271, 3524469.019, 3670240.872), stdev = 71933.453
  CI (99.9%): [3476409.352, 3572528.686] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt        Score       Error  Units
FlowableConcatMapSchedulerTest._Benchmark.benchmark_concatMapDelayErrorJustJust  thrpt   30  3524469.019 ± 48059.667  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_concatMapDelayErrorJustSource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_concatMapDelayErrorJustSource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 507484.333 ops/s
# Warmup Iteration   2: 2537328.645 ops/s
# Warmup Iteration   3: 3169548.974 ops/s
# Warmup Iteration   4: 3907428.759 ops/s
# Warmup Iteration   5: 3949245.644 ops/s
# Warmup Iteration   6: 3966102.806 ops/s
# Warmup Iteration   7: 3635508.640 ops/s
# Warmup Iteration   8: 4010449.077 ops/s
# Warmup Iteration   9: 3789578.979 ops/s
# Warmup Iteration  10: 3811646.840 ops/s
# Warmup Iteration  11: 3924631.848 ops/s
# Warmup Iteration  12: 3781985.178 ops/s
# Warmup Iteration  13: 3918878.519 ops/s
# Warmup Iteration  14: 3959269.610 ops/s
# Warmup Iteration  15: 3755638.230 ops/s
# Warmup Iteration  16: 3866952.242 ops/s
# Warmup Iteration  17: 3826766.798 ops/s
# Warmup Iteration  18: 4025675.793 ops/s
# Warmup Iteration  19: 3959237.149 ops/s
# Warmup Iteration  20: 3625106.406 ops/s
# Warmup Iteration  21: 3933162.273 ops/s
# Warmup Iteration  22: 3809987.684 ops/s
# Warmup Iteration  23: 3884483.998 ops/s
# Warmup Iteration  24: 3843404.906 ops/s
# Warmup Iteration  25: 3843006.495 ops/s
# Warmup Iteration  26: 3925772.875 ops/s
# Warmup Iteration  27: 3965754.808 ops/s
# Warmup Iteration  28: 3771574.404 ops/s
# Warmup Iteration  29: 3923631.761 ops/s
# Warmup Iteration  30: 3886681.435 ops/s
Iteration   1: 3917856.860 ops/s
Iteration   2: 3926788.128 ops/s
Iteration   3: 3929055.866 ops/s
Iteration   4: 3854638.747 ops/s
Iteration   5: 3861892.668 ops/s
Iteration   6: 3870842.825 ops/s
Iteration   7: 3817001.141 ops/s
Iteration   8: 4042320.378 ops/s
Iteration   9: 3797056.932 ops/s
Iteration  10: 3173412.431 ops/s
Iteration  11: 3866483.575 ops/s
Iteration  12: 3743926.692 ops/s
Iteration  13: 4098737.596 ops/s
Iteration  14: 3761051.548 ops/s
Iteration  15: 3849593.350 ops/s
Iteration  16: 3952299.788 ops/s
Iteration  17: 3945085.421 ops/s
Iteration  18: 3780284.976 ops/s
Iteration  19: 3909749.363 ops/s
Iteration  20: 3913880.283 ops/s
Iteration  21: 3890914.153 ops/s
Iteration  22: 3824759.664 ops/s
Iteration  23: 3880501.839 ops/s
Iteration  24: 3970361.759 ops/s
Iteration  25: 3766511.132 ops/s
Iteration  26: 3846922.875 ops/s
Iteration  27: 4042002.969 ops/s
Iteration  28: 3851002.371 ops/s
Iteration  29: 3771923.655 ops/s
Iteration  30: 3963190.576 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_concatMapDelayErrorJustSource":
  3860668.319 ±(99.9%) 104273.221 ops/s [Average]
  (min, avg, max) = (3173412.431, 3860668.319, 4098737.596), stdev = 156071.261
  CI (99.9%): [3756395.097, 3964941.540] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           Mode  Cnt        Score        Error  Units
FlowableConcatMapSchedulerTest._Benchmark.benchmark_concatMapDelayErrorJustSource  thrpt   30  3860668.319 ± 104273.221  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybeTest._Benchmark.benchmark_undeliverableUponCancelDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybeTest._Benchmark.benchmark_undeliverableUponCancelDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 22812.692 ops/s
# Warmup Iteration   2: 116676.861 ops/s
# Warmup Iteration   3: 161135.388 ops/s
# Warmup Iteration   4: 169121.911 ops/s
# Warmup Iteration   5: 179014.265 ops/s
# Warmup Iteration   6: 174735.684 ops/s
# Warmup Iteration   7: 167090.011 ops/s
# Warmup Iteration   8: 172637.681 ops/s
# Warmup Iteration   9: 172218.609 ops/s
# Warmup Iteration  10: 163754.070 ops/s
# Warmup Iteration  11: 176218.839 ops/s
# Warmup Iteration  12: 167823.150 ops/s
# Warmup Iteration  13: 172466.323 ops/s
# Warmup Iteration  14: 181083.394 ops/s
# Warmup Iteration  15: 174454.670 ops/s
# Warmup Iteration  16: 179182.509 ops/s
# Warmup Iteration  17: 176684.518 ops/s
# Warmup Iteration  18: 185195.640 ops/s
# Warmup Iteration  19: 187559.047 ops/s
# Warmup Iteration  20: 182812.443 ops/s
# Warmup Iteration  21: 192727.618 ops/s
# Warmup Iteration  22: 186753.749 ops/s
# Warmup Iteration  23: 194571.800 ops/s
# Warmup Iteration  24: 190576.332 ops/s
# Warmup Iteration  25: 190090.468 ops/s
# Warmup Iteration  26: 188110.245 ops/s
# Warmup Iteration  27: 196857.972 ops/s
# Warmup Iteration  28: 183336.971 ops/s
# Warmup Iteration  29: 192130.660 ops/s
# Warmup Iteration  30: 187318.587 ops/s
Iteration   1: 191093.295 ops/s
Iteration   2: 190188.854 ops/s
Iteration   3: 184476.955 ops/s
Iteration   4: 195762.739 ops/s
Iteration   5: 192534.494 ops/s
Iteration   6: 185232.299 ops/s
Iteration   7: 198753.928 ops/s
Iteration   8: 183690.112 ops/s
Iteration   9: 188383.108 ops/s
Iteration  10: 195749.873 ops/s
Iteration  11: 185817.832 ops/s
Iteration  12: 182775.693 ops/s
Iteration  13: 191442.671 ops/s
Iteration  14: 190048.041 ops/s
Iteration  15: 181847.554 ops/s
Iteration  16: 188824.684 ops/s
Iteration  17: 188574.435 ops/s
Iteration  18: 188613.762 ops/s
Iteration  19: 192213.674 ops/s
Iteration  20: 192180.353 ops/s
Iteration  21: 185104.427 ops/s
Iteration  22: 193468.261 ops/s
Iteration  23: 186326.515 ops/s
Iteration  24: 189794.632 ops/s
Iteration  25: 183742.610 ops/s
Iteration  26: 196629.068 ops/s
Iteration  27: 188238.856 ops/s
Iteration  28: 191390.918 ops/s
Iteration  29: 189751.196 ops/s
Iteration  30: 188477.306 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybeTest._Benchmark.benchmark_undeliverableUponCancelDelayError":
  189370.938 ±(99.9%) 2849.764 ops/s [Average]
  (min, avg, max) = (181847.554, 189370.938, 198753.928), stdev = 4265.392
  CI (99.9%): [186521.175, 192220.702] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           Mode  Cnt       Score      Error  Units
FlowableConcatMapMaybeTest._Benchmark.benchmark_undeliverableUponCancelDelayError  thrpt   30  189370.938 ± 2849.764  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_innerThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_innerThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 49666.539 ops/s
# Warmup Iteration   2: 324887.774 ops/s
# Warmup Iteration   3: 357598.336 ops/s
# Warmup Iteration   4: 397540.143 ops/s
# Warmup Iteration   5: 339375.520 ops/s
# Warmup Iteration   6: 409014.312 ops/s
# Warmup Iteration   7: 397101.075 ops/s
# Warmup Iteration   8: 411032.707 ops/s
# Warmup Iteration   9: 407055.924 ops/s
# Warmup Iteration  10: 390911.126 ops/s
# Warmup Iteration  11: 414648.464 ops/s
# Warmup Iteration  12: 400702.808 ops/s
# Warmup Iteration  13: 418866.142 ops/s
# Warmup Iteration  14: 395324.532 ops/s
# Warmup Iteration  15: 409758.236 ops/s
# Warmup Iteration  16: 400056.437 ops/s
# Warmup Iteration  17: 398587.974 ops/s
# Warmup Iteration  18: 417417.045 ops/s
# Warmup Iteration  19: 380848.804 ops/s
# Warmup Iteration  20: 417303.841 ops/s
# Warmup Iteration  21: 388497.776 ops/s
# Warmup Iteration  22: 399140.123 ops/s
# Warmup Iteration  23: 399068.485 ops/s
# Warmup Iteration  24: 384144.387 ops/s
# Warmup Iteration  25: 419579.623 ops/s
# Warmup Iteration  26: 392402.888 ops/s
# Warmup Iteration  27: 419315.681 ops/s
# Warmup Iteration  28: 413998.659 ops/s
# Warmup Iteration  29: 396220.177 ops/s
# Warmup Iteration  30: 404847.343 ops/s
Iteration   1: 396048.144 ops/s
Iteration   2: 398606.847 ops/s
Iteration   3: 418177.293 ops/s
Iteration   4: 397533.491 ops/s
Iteration   5: 327328.908 ops/s
Iteration   6: 392869.940 ops/s
Iteration   7: 409549.179 ops/s
Iteration   8: 411504.209 ops/s
Iteration   9: 399118.947 ops/s
Iteration  10: 392972.278 ops/s
Iteration  11: 412429.279 ops/s
Iteration  12: 390002.226 ops/s
Iteration  13: 400282.075 ops/s
Iteration  14: 408434.052 ops/s
Iteration  15: 394390.074 ops/s
Iteration  16: 396554.307 ops/s
Iteration  17: 407694.599 ops/s
Iteration  18: 393074.938 ops/s
Iteration  19: 407170.498 ops/s
Iteration  20: 397652.595 ops/s
Iteration  21: 408096.444 ops/s
Iteration  22: 394995.061 ops/s
Iteration  23: 391053.227 ops/s
Iteration  24: 410499.480 ops/s
Iteration  25: 387347.613 ops/s
Iteration  26: 392871.797 ops/s
Iteration  27: 410047.170 ops/s
Iteration  28: 401061.443 ops/s
Iteration  29: 402976.915 ops/s
Iteration  30: 411693.829 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_innerThrows":
  398734.562 ±(99.9%) 10515.737 ops/s [Average]
  (min, avg, max) = (327328.908, 398734.562, 418177.293), stdev = 15739.461
  CI (99.9%): [388218.825, 409250.299] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score       Error  Units
FlowableConcatMapSchedulerTest._Benchmark.benchmark_innerThrows  thrpt   30  398734.562 ± 10515.737  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybeTest._Benchmark.benchmark_innerErrorAfterMainError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybeTest._Benchmark.benchmark_innerErrorAfterMainError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 18324.685 ops/s
# Warmup Iteration   2: 72333.031 ops/s
# Warmup Iteration   3: 77461.149 ops/s
# Warmup Iteration   4: 161040.733 ops/s
# Warmup Iteration   5: 156897.132 ops/s
# Warmup Iteration   6: 168747.264 ops/s
# Warmup Iteration   7: 172303.675 ops/s
# Warmup Iteration   8: 181275.728 ops/s
# Warmup Iteration   9: 168753.980 ops/s
# Warmup Iteration  10: 173419.771 ops/s
# Warmup Iteration  11: 173549.639 ops/s
# Warmup Iteration  12: 172878.564 ops/s
# Warmup Iteration  13: 173993.446 ops/s
# Warmup Iteration  14: 178384.364 ops/s
# Warmup Iteration  15: 175337.413 ops/s
# Warmup Iteration  16: 178252.926 ops/s
# Warmup Iteration  17: 181629.336 ops/s
# Warmup Iteration  18: 181588.539 ops/s
# Warmup Iteration  19: 187809.070 ops/s
# Warmup Iteration  20: 178820.047 ops/s
# Warmup Iteration  21: 185684.822 ops/s
# Warmup Iteration  22: 181228.136 ops/s
# Warmup Iteration  23: 188144.914 ops/s
# Warmup Iteration  24: 182496.288 ops/s
# Warmup Iteration  25: 180850.519 ops/s
# Warmup Iteration  26: 189763.637 ops/s
# Warmup Iteration  27: 179552.175 ops/s
# Warmup Iteration  28: 179062.635 ops/s
# Warmup Iteration  29: 190587.383 ops/s
# Warmup Iteration  30: 177767.060 ops/s
Iteration   1: 185951.830 ops/s
Iteration   2: 179661.622 ops/s
Iteration   3: 178515.724 ops/s
Iteration   4: 188208.199 ops/s
Iteration   5: 176376.856 ops/s
Iteration   6: 181312.014 ops/s
Iteration   7: 180905.138 ops/s
Iteration   8: 187397.747 ops/s
Iteration   9: 180758.910 ops/s
Iteration  10: 183838.376 ops/s
Iteration  11: 183209.899 ops/s
Iteration  12: 180412.969 ops/s
Iteration  13: 190373.134 ops/s
Iteration  14: 178329.885 ops/s
Iteration  15: 179793.065 ops/s
Iteration  16: 188866.179 ops/s
Iteration  17: 176087.585 ops/s
Iteration  18: 187902.410 ops/s
Iteration  19: 174836.763 ops/s
Iteration  20: 182507.755 ops/s
Iteration  21: 188652.851 ops/s
Iteration  22: 176339.733 ops/s
Iteration  23: 187795.785 ops/s
Iteration  24: 177182.006 ops/s
Iteration  25: 187833.661 ops/s
Iteration  26: 184166.489 ops/s
Iteration  27: 181392.056 ops/s
Iteration  28: 184307.115 ops/s
Iteration  29: 179720.544 ops/s
Iteration  30: 187671.126 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybeTest._Benchmark.benchmark_innerErrorAfterMainError":
  182676.914 ±(99.9%) 3041.977 ops/s [Average]
  (min, avg, max) = (174836.763, 182676.914, 190373.134), stdev = 4553.089
  CI (99.9%): [179634.937, 185718.891] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score      Error  Units
FlowableConcatMapMaybeTest._Benchmark.benchmark_innerErrorAfterMainError  thrpt   30  182676.914 ± 3041.977  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_concatIterableBackpressured$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_concatIterableBackpressured

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 482424.513 ops/s
# Warmup Iteration   2: 1697883.147 ops/s
# Warmup Iteration   3: 2383761.480 ops/s
# Warmup Iteration   4: 2694268.228 ops/s
# Warmup Iteration   5: 2828731.255 ops/s
# Warmup Iteration   6: 2728029.950 ops/s
# Warmup Iteration   7: 2717036.065 ops/s
# Warmup Iteration   8: 2783430.123 ops/s
# Warmup Iteration   9: 2661663.809 ops/s
# Warmup Iteration  10: 2771745.801 ops/s
# Warmup Iteration  11: 2700655.325 ops/s
# Warmup Iteration  12: 2681464.095 ops/s
# Warmup Iteration  13: 2866940.121 ops/s
# Warmup Iteration  14: 2718538.795 ops/s
# Warmup Iteration  15: 2659509.221 ops/s
# Warmup Iteration  16: 2814104.230 ops/s
# Warmup Iteration  17: 2722760.904 ops/s
# Warmup Iteration  18: 2671827.336 ops/s
# Warmup Iteration  19: 2765912.350 ops/s
# Warmup Iteration  20: 2743459.840 ops/s
# Warmup Iteration  21: 2816208.028 ops/s
# Warmup Iteration  22: 2675125.181 ops/s
# Warmup Iteration  23: 2784768.023 ops/s
# Warmup Iteration  24: 2764678.031 ops/s
# Warmup Iteration  25: 2674043.055 ops/s
# Warmup Iteration  26: 2787321.245 ops/s
# Warmup Iteration  27: 2686327.687 ops/s
# Warmup Iteration  28: 2744813.816 ops/s
# Warmup Iteration  29: 2591367.062 ops/s
# Warmup Iteration  30: 2444829.820 ops/s
Iteration   1: 2766143.810 ops/s
Iteration   2: 2724089.276 ops/s
Iteration   3: 2756111.516 ops/s
Iteration   4: 2762755.142 ops/s
Iteration   5: 2718348.972 ops/s
Iteration   6: 2767364.574 ops/s
Iteration   7: 2635437.847 ops/s
Iteration   8: 2733608.825 ops/s
Iteration   9: 2685841.707 ops/s
Iteration  10: 2695709.191 ops/s
Iteration  11: 2741148.397 ops/s
Iteration  12: 2759786.856 ops/s
Iteration  13: 2779518.802 ops/s
Iteration  14: 2740565.375 ops/s
Iteration  15: 2663674.716 ops/s
Iteration  16: 2833510.454 ops/s
Iteration  17: 2652691.947 ops/s
Iteration  18: 2736120.910 ops/s
Iteration  19: 2773444.983 ops/s
Iteration  20: 2701493.768 ops/s
Iteration  21: 2764543.326 ops/s
Iteration  22: 2680099.019 ops/s
Iteration  23: 2800895.400 ops/s
Iteration  24: 2815404.643 ops/s
Iteration  25: 2734458.160 ops/s
Iteration  26: 2787840.753 ops/s
Iteration  27: 2744539.173 ops/s
Iteration  28: 2754344.886 ops/s
Iteration  29: 2711983.117 ops/s
Iteration  30: 2740825.114 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_concatIterableBackpressured":
  2738743.355 ±(99.9%) 30999.704 ops/s [Average]
  (min, avg, max) = (2635437.847, 2738743.355, 2833510.454), stdev = 46398.901
  CI (99.9%): [2707743.651, 2769743.060] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
MaybeTest._Benchmark.benchmark_concatIterableBackpressured  thrpt   30  2738743.355 ± 30999.704  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_concat2Backpressured$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_concat2Backpressured

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 522091.907 ops/s
# Warmup Iteration   2: 1787527.559 ops/s
# Warmup Iteration   3: 2906552.558 ops/s
# Warmup Iteration   4: 2818806.000 ops/s
# Warmup Iteration   5: 3034642.282 ops/s
# Warmup Iteration   6: 2882932.104 ops/s
# Warmup Iteration   7: 2920150.344 ops/s
# Warmup Iteration   8: 2779828.770 ops/s
# Warmup Iteration   9: 2688298.841 ops/s
# Warmup Iteration  10: 2890330.430 ops/s
# Warmup Iteration  11: 2917358.787 ops/s
# Warmup Iteration  12: 3015060.687 ops/s
# Warmup Iteration  13: 2857957.841 ops/s
# Warmup Iteration  14: 3030550.915 ops/s
# Warmup Iteration  15: 3072519.588 ops/s
# Warmup Iteration  16: 2835021.702 ops/s
# Warmup Iteration  17: 2952821.233 ops/s
# Warmup Iteration  18: 3065258.536 ops/s
# Warmup Iteration  19: 2903458.036 ops/s
# Warmup Iteration  20: 2974520.868 ops/s
# Warmup Iteration  21: 2867054.302 ops/s
# Warmup Iteration  22: 2989118.668 ops/s
# Warmup Iteration  23: 3031465.407 ops/s
# Warmup Iteration  24: 2879869.072 ops/s
# Warmup Iteration  25: 2984825.691 ops/s
# Warmup Iteration  26: 2960269.664 ops/s
# Warmup Iteration  27: 2924140.484 ops/s
# Warmup Iteration  28: 2978407.418 ops/s
# Warmup Iteration  29: 2890676.492 ops/s
# Warmup Iteration  30: 2951275.833 ops/s
Iteration   1: 2825632.346 ops/s
Iteration   2: 2969570.373 ops/s
Iteration   3: 2982804.109 ops/s
Iteration   4: 2887448.873 ops/s
Iteration   5: 3090139.653 ops/s
Iteration   6: 2872058.046 ops/s
Iteration   7: 2942076.491 ops/s
Iteration   8: 2927436.960 ops/s
Iteration   9: 2871857.630 ops/s
Iteration  10: 3004390.581 ops/s
Iteration  11: 2861152.608 ops/s
Iteration  12: 3001073.984 ops/s
Iteration  13: 2930341.390 ops/s
Iteration  14: 3021802.972 ops/s
Iteration  15: 2906392.512 ops/s
Iteration  16: 2982216.699 ops/s
Iteration  17: 2959291.669 ops/s
Iteration  18: 2848565.269 ops/s
Iteration  19: 2918907.811 ops/s
Iteration  20: 2962101.924 ops/s
Iteration  21: 2916256.915 ops/s
Iteration  22: 2982191.551 ops/s
Iteration  23: 2895298.342 ops/s
Iteration  24: 3027622.594 ops/s
Iteration  25: 2972343.821 ops/s
Iteration  26: 2915749.861 ops/s
Iteration  27: 2960718.573 ops/s
Iteration  28: 2952750.909 ops/s
Iteration  29: 3039037.727 ops/s
Iteration  30: 2791999.598 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_concat2Backpressured":
  2940641.060 ±(99.9%) 44717.552 ops/s [Average]
  (min, avg, max) = (2791999.598, 2940641.060, 3090139.653), stdev = 66931.132
  CI (99.9%): [2895923.507, 2985358.612] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score       Error  Units
MaybeTest._Benchmark.benchmark_concat2Backpressured  thrpt   30  2940641.060 ± 44717.552  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_concat3Backpressured$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_concat3Backpressured

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 420122.117 ops/s
# Warmup Iteration   2: 1839228.337 ops/s
# Warmup Iteration   3: 2312523.759 ops/s
# Warmup Iteration   4: 2631976.271 ops/s
# Warmup Iteration   5: 2774045.250 ops/s
# Warmup Iteration   6: 2689016.088 ops/s
# Warmup Iteration   7: 2697084.048 ops/s
# Warmup Iteration   8: 2761055.674 ops/s
# Warmup Iteration   9: 2584908.851 ops/s
# Warmup Iteration  10: 2750295.899 ops/s
# Warmup Iteration  11: 2534222.897 ops/s
# Warmup Iteration  12: 2629330.798 ops/s
# Warmup Iteration  13: 2677173.684 ops/s
# Warmup Iteration  14: 2620227.289 ops/s
# Warmup Iteration  15: 2671359.358 ops/s
# Warmup Iteration  16: 2737558.262 ops/s
# Warmup Iteration  17: 2650151.138 ops/s
# Warmup Iteration  18: 2658626.908 ops/s
# Warmup Iteration  19: 2774203.039 ops/s
# Warmup Iteration  20: 2580670.738 ops/s
# Warmup Iteration  21: 2759443.121 ops/s
# Warmup Iteration  22: 2601851.675 ops/s
# Warmup Iteration  23: 2825126.053 ops/s
# Warmup Iteration  24: 2172837.542 ops/s
# Warmup Iteration  25: 2625746.469 ops/s
# Warmup Iteration  26: 2727986.598 ops/s
# Warmup Iteration  27: 2801412.467 ops/s
# Warmup Iteration  28: 2610653.193 ops/s
# Warmup Iteration  29: 2622944.374 ops/s
# Warmup Iteration  30: 2641207.403 ops/s
Iteration   1: 2648162.125 ops/s
Iteration   2: 2716896.842 ops/s
Iteration   3: 2568328.969 ops/s
Iteration   4: 2789124.693 ops/s
Iteration   5: 2778961.303 ops/s
Iteration   6: 2613647.933 ops/s
Iteration   7: 2698788.261 ops/s
Iteration   8: 2618524.276 ops/s
Iteration   9: 2760097.463 ops/s
Iteration  10: 2640740.236 ops/s
Iteration  11: 2585234.018 ops/s
Iteration  12: 2704604.241 ops/s
Iteration  13: 2737810.519 ops/s
Iteration  14: 2589831.801 ops/s
Iteration  15: 2688797.107 ops/s
Iteration  16: 2642858.054 ops/s
Iteration  17: 2675806.923 ops/s
Iteration  18: 2698822.351 ops/s
Iteration  19: 2668176.599 ops/s
Iteration  20: 2748818.610 ops/s
Iteration  21: 2676653.080 ops/s
Iteration  22: 2681489.023 ops/s
Iteration  23: 2784436.154 ops/s
Iteration  24: 2659614.628 ops/s
Iteration  25: 2785907.943 ops/s
Iteration  26: 2643623.520 ops/s
Iteration  27: 2700735.590 ops/s
Iteration  28: 2822025.133 ops/s
Iteration  29: 2616173.227 ops/s
Iteration  30: 2716900.013 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_concat3Backpressured":
  2688719.688 ±(99.9%) 44461.997 ops/s [Average]
  (min, avg, max) = (2568328.969, 2688719.688, 2822025.133), stdev = 66548.630
  CI (99.9%): [2644257.690, 2733181.685] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score       Error  Units
MaybeTest._Benchmark.benchmark_concat3Backpressured  thrpt   30  2688719.688 ± 44461.997  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_onCompleteAvailableUntilReset$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_onCompleteAvailableUntilReset

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 213012.041 ops/s
# Warmup Iteration   2: 763265.586 ops/s
# Warmup Iteration   3: 1189990.908 ops/s
# Warmup Iteration   4: 1137801.061 ops/s
# Warmup Iteration   5: 1195070.002 ops/s
# Warmup Iteration   6: 993208.143 ops/s
# Warmup Iteration   7: 1134358.057 ops/s
# Warmup Iteration   8: 1175707.646 ops/s
# Warmup Iteration   9: 1152048.427 ops/s
# Warmup Iteration  10: 1210583.870 ops/s
# Warmup Iteration  11: 1154379.281 ops/s
# Warmup Iteration  12: 1184754.704 ops/s
# Warmup Iteration  13: 1206019.626 ops/s
# Warmup Iteration  14: 1155523.142 ops/s
# Warmup Iteration  15: 1218981.325 ops/s
# Warmup Iteration  16: 1153324.814 ops/s
# Warmup Iteration  17: 1150531.524 ops/s
# Warmup Iteration  18: 1213771.453 ops/s
# Warmup Iteration  19: 1159654.674 ops/s
# Warmup Iteration  20: 1149487.843 ops/s
# Warmup Iteration  21: 1228986.932 ops/s
# Warmup Iteration  22: 1171704.736 ops/s
# Warmup Iteration  23: 1170320.032 ops/s
# Warmup Iteration  24: 1152050.420 ops/s
# Warmup Iteration  25: 1204967.870 ops/s
# Warmup Iteration  26: 1184219.689 ops/s
# Warmup Iteration  27: 1108087.009 ops/s
# Warmup Iteration  28: 1177847.584 ops/s
# Warmup Iteration  29: 1206779.638 ops/s
# Warmup Iteration  30: 1163000.797 ops/s
Iteration   1: 1205749.373 ops/s
Iteration   2: 1130490.643 ops/s
Iteration   3: 1221576.056 ops/s
Iteration   4: 1139359.470 ops/s
Iteration   5: 1148679.177 ops/s
Iteration   6: 1199380.668 ops/s
Iteration   7: 1166541.018 ops/s
Iteration   8: 1192587.627 ops/s
Iteration   9: 1149694.952 ops/s
Iteration  10: 1195147.469 ops/s
Iteration  11: 1230065.008 ops/s
Iteration  12: 1154505.523 ops/s
Iteration  13: 1169300.825 ops/s
Iteration  14: 1152651.966 ops/s
Iteration  15: 1141505.117 ops/s
Iteration  16: 1207779.410 ops/s
Iteration  17: 1128926.471 ops/s
Iteration  18: 1213235.787 ops/s
Iteration  19: 1189646.984 ops/s
Iteration  20: 1165657.607 ops/s
Iteration  21: 1220211.367 ops/s
Iteration  22: 1165652.766 ops/s
Iteration  23: 1189337.566 ops/s
Iteration  24: 1210020.281 ops/s
Iteration  25: 1107269.461 ops/s
Iteration  26: 1207630.461 ops/s
Iteration  27: 1142804.270 ops/s
Iteration  28: 1198618.013 ops/s
Iteration  29: 1172836.481 ops/s
Iteration  30: 1186603.056 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_onCompleteAvailableUntilReset":
  1176782.162 ±(99.9%) 21489.333 ops/s [Average]
  (min, avg, max) = (1107269.461, 1176782.162, 1230065.008), stdev = 32164.225
  CI (99.9%): [1155292.829, 1198271.495] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score       Error  Units
FlowablePublishTest._Benchmark.benchmark_onCompleteAvailableUntilReset  thrpt   30  1176782.162 ± 21489.333  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_emptyConcatWithError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_emptyConcatWithError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 92739.200 ops/s
# Warmup Iteration   2: 487040.195 ops/s
# Warmup Iteration   3: 602473.652 ops/s
# Warmup Iteration   4: 577521.290 ops/s
# Warmup Iteration   5: 667263.002 ops/s
# Warmup Iteration   6: 631296.834 ops/s
# Warmup Iteration   7: 639797.133 ops/s
# Warmup Iteration   8: 647036.614 ops/s
# Warmup Iteration   9: 639436.820 ops/s
# Warmup Iteration  10: 640403.181 ops/s
# Warmup Iteration  11: 663174.134 ops/s
# Warmup Iteration  12: 660287.314 ops/s
# Warmup Iteration  13: 628079.243 ops/s
# Warmup Iteration  14: 648904.397 ops/s
# Warmup Iteration  15: 630001.006 ops/s
# Warmup Iteration  16: 663054.497 ops/s
# Warmup Iteration  17: 673973.248 ops/s
# Warmup Iteration  18: 682101.005 ops/s
# Warmup Iteration  19: 556513.595 ops/s
# Warmup Iteration  20: 669902.578 ops/s
# Warmup Iteration  21: 720696.004 ops/s
# Warmup Iteration  22: 679746.194 ops/s
# Warmup Iteration  23: 659557.689 ops/s
# Warmup Iteration  24: 691341.667 ops/s
# Warmup Iteration  25: 669007.643 ops/s
# Warmup Iteration  26: 681560.573 ops/s
# Warmup Iteration  27: 677221.495 ops/s
# Warmup Iteration  28: 622424.569 ops/s
# Warmup Iteration  29: 679630.257 ops/s
# Warmup Iteration  30: 650980.877 ops/s
Iteration   1: 709949.683 ops/s
Iteration   2: 666345.367 ops/s
Iteration   3: 673604.708 ops/s
Iteration   4: 724040.515 ops/s
Iteration   5: 671112.543 ops/s
Iteration   6: 680211.673 ops/s
Iteration   7: 686723.318 ops/s
Iteration   8: 674872.580 ops/s
Iteration   9: 706687.595 ops/s
Iteration  10: 666541.216 ops/s
Iteration  11: 676735.148 ops/s
Iteration  12: 712953.271 ops/s
Iteration  13: 658602.759 ops/s
Iteration  14: 695688.041 ops/s
Iteration  15: 693543.269 ops/s
Iteration  16: 667250.514 ops/s
Iteration  17: 673774.555 ops/s
Iteration  18: 684246.189 ops/s
Iteration  19: 670933.648 ops/s
Iteration  20: 683327.462 ops/s
Iteration  21: 697041.923 ops/s
Iteration  22: 670614.501 ops/s
Iteration  23: 699352.811 ops/s
Iteration  24: 680316.054 ops/s
Iteration  25: 667230.299 ops/s
Iteration  26: 707093.512 ops/s
Iteration  27: 680091.074 ops/s
Iteration  28: 704273.176 ops/s
Iteration  29: 674341.460 ops/s
Iteration  30: 674745.000 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_emptyConcatWithError":
  684408.129 ±(99.9%) 11180.013 ops/s [Average]
  (min, avg, max) = (658602.759, 684408.129, 724040.515), stdev = 16733.718
  CI (99.9%): [673228.116, 695588.142] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score       Error  Units
MaybeTest._Benchmark.benchmark_emptyConcatWithError  thrpt   30  684408.129 ± 11180.013  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_normal$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_normal

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 346161.368 ops/s
# Warmup Iteration   2: 1275369.507 ops/s
# Warmup Iteration   3: 1326893.981 ops/s
# Warmup Iteration   4: 1576920.813 ops/s
# Warmup Iteration   5: 1631940.530 ops/s
# Warmup Iteration   6: 1556159.459 ops/s
# Warmup Iteration   7: 1598550.211 ops/s
# Warmup Iteration   8: 1643354.468 ops/s
# Warmup Iteration   9: 1570522.968 ops/s
# Warmup Iteration  10: 1574431.775 ops/s
# Warmup Iteration  11: 1623442.253 ops/s
# Warmup Iteration  12: 1550697.171 ops/s
# Warmup Iteration  13: 1610737.333 ops/s
# Warmup Iteration  14: 1585029.373 ops/s
# Warmup Iteration  15: 1598100.398 ops/s
# Warmup Iteration  16: 1602970.939 ops/s
# Warmup Iteration  17: 1550184.179 ops/s
# Warmup Iteration  18: 1549617.379 ops/s
# Warmup Iteration  19: 1622964.913 ops/s
# Warmup Iteration  20: 1592730.982 ops/s
# Warmup Iteration  21: 1585490.357 ops/s
# Warmup Iteration  22: 1633214.199 ops/s
# Warmup Iteration  23: 1565518.909 ops/s
# Warmup Iteration  24: 1592373.615 ops/s
# Warmup Iteration  25: 1653590.823 ops/s
# Warmup Iteration  26: 1578061.145 ops/s
# Warmup Iteration  27: 1590357.712 ops/s
# Warmup Iteration  28: 1631618.977 ops/s
# Warmup Iteration  29: 1573115.317 ops/s
# Warmup Iteration  30: 1606813.712 ops/s
Iteration   1: 1557103.926 ops/s
Iteration   2: 1604996.355 ops/s
Iteration   3: 1631213.256 ops/s
Iteration   4: 1508673.388 ops/s
Iteration   5: 1597447.298 ops/s
Iteration   6: 1551816.810 ops/s
Iteration   7: 1592200.018 ops/s
Iteration   8: 1597552.029 ops/s
Iteration   9: 1604808.089 ops/s
Iteration  10: 1639087.572 ops/s
Iteration  11: 1602709.778 ops/s
Iteration  12: 1621160.276 ops/s
Iteration  13: 1647810.038 ops/s
Iteration  14: 1532955.574 ops/s
Iteration  15: 1655750.625 ops/s
Iteration  16: 1578220.230 ops/s
Iteration  17: 1624965.336 ops/s
Iteration  18: 1577459.506 ops/s
Iteration  19: 1629727.096 ops/s
Iteration  20: 1620072.614 ops/s
Iteration  21: 1563822.251 ops/s
Iteration  22: 1656515.179 ops/s
Iteration  23: 1673732.051 ops/s
Iteration  24: 1488837.034 ops/s
Iteration  25: 1624646.419 ops/s
Iteration  26: 1536616.058 ops/s
Iteration  27: 1614091.139 ops/s
Iteration  28: 1560441.633 ops/s
Iteration  29: 1621777.277 ops/s
Iteration  30: 1542468.863 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_normal":
  1595289.257 ±(99.9%) 30431.521 ops/s [Average]
  (min, avg, max) = (1488837.034, 1595289.257, 1673732.051), stdev = 45548.472
  CI (99.9%): [1564857.736, 1625720.778] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
FlowableFlattenIterableTest._Benchmark.benchmark_normal  thrpt   30  1595289.257 ± 30431.521  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_manyEmptyInnerThenSingleBackpressured$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_manyEmptyInnerThenSingleBackpressured

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 39934.643 ops/s
# Warmup Iteration   2: 84620.491 ops/s
# Warmup Iteration   3: 95095.083 ops/s
# Warmup Iteration   4: 108574.569 ops/s
# Warmup Iteration   5: 110826.326 ops/s
# Warmup Iteration   6: 106179.081 ops/s
# Warmup Iteration   7: 112917.239 ops/s
# Warmup Iteration   8: 109776.411 ops/s
# Warmup Iteration   9: 107505.791 ops/s
# Warmup Iteration  10: 110023.369 ops/s
# Warmup Iteration  11: 108143.397 ops/s
# Warmup Iteration  12: 109907.370 ops/s
# Warmup Iteration  13: 104372.524 ops/s
# Warmup Iteration  14: 98882.605 ops/s
# Warmup Iteration  15: 111234.130 ops/s
# Warmup Iteration  16: 112203.132 ops/s
# Warmup Iteration  17: 105960.630 ops/s
# Warmup Iteration  18: 115742.477 ops/s
# Warmup Iteration  19: 108531.488 ops/s
# Warmup Iteration  20: 110684.786 ops/s
# Warmup Iteration  21: 113637.283 ops/s
# Warmup Iteration  22: 113711.880 ops/s
# Warmup Iteration  23: 109469.988 ops/s
# Warmup Iteration  24: 112766.602 ops/s
# Warmup Iteration  25: 109558.482 ops/s
# Warmup Iteration  26: 112020.821 ops/s
# Warmup Iteration  27: 115512.817 ops/s
# Warmup Iteration  28: 109131.026 ops/s
# Warmup Iteration  29: 109948.744 ops/s
# Warmup Iteration  30: 112081.200 ops/s
Iteration   1: 111752.442 ops/s
Iteration   2: 112722.163 ops/s
Iteration   3: 107699.375 ops/s
Iteration   4: 115081.850 ops/s
Iteration   5: 109614.956 ops/s
Iteration   6: 110610.895 ops/s
Iteration   7: 116225.587 ops/s
Iteration   8: 107384.560 ops/s
Iteration   9: 114258.793 ops/s
Iteration  10: 109385.317 ops/s
Iteration  11: 112541.863 ops/s
Iteration  12: 111160.888 ops/s
Iteration  13: 108882.863 ops/s
Iteration  14: 114199.986 ops/s
Iteration  15: 110723.657 ops/s
Iteration  16: 110456.580 ops/s
Iteration  17: 116211.245 ops/s
Iteration  18: 107739.537 ops/s
Iteration  19: 113202.840 ops/s
Iteration  20: 111060.103 ops/s
Iteration  21: 115023.585 ops/s
Iteration  22: 114919.363 ops/s
Iteration  23: 108411.752 ops/s
Iteration  24: 117383.953 ops/s
Iteration  25: 107514.602 ops/s
Iteration  26: 111985.007 ops/s
Iteration  27: 108247.744 ops/s
Iteration  28: 111145.778 ops/s
Iteration  29: 113717.392 ops/s
Iteration  30: 109834.128 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_manyEmptyInnerThenSingleBackpressured":
  111636.627 ±(99.9%) 1934.812 ops/s [Average]
  (min, avg, max) = (107384.560, 111636.627, 117383.953), stdev = 2895.936
  CI (99.9%): [109701.814, 113571.439] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                Mode  Cnt       Score      Error  Units
FlowableFlattenIterableTest._Benchmark.benchmark_manyEmptyInnerThenSingleBackpressured  thrpt   30  111636.627 ± 1934.812  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_emptyInnerThenSingleBackpressured$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_emptyInnerThenSingleBackpressured

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 879190.773 ops/s
# Warmup Iteration   2: 2530463.667 ops/s
# Warmup Iteration   3: 3024447.339 ops/s
# Warmup Iteration   4: 3467604.110 ops/s
# Warmup Iteration   5: 3371416.126 ops/s
# Warmup Iteration   6: 3481490.936 ops/s
# Warmup Iteration   7: 3434730.780 ops/s
# Warmup Iteration   8: 3331907.895 ops/s
# Warmup Iteration   9: 3480819.138 ops/s
# Warmup Iteration  10: 3307733.024 ops/s
# Warmup Iteration  11: 3419213.861 ops/s
# Warmup Iteration  12: 3404601.416 ops/s
# Warmup Iteration  13: 3540721.144 ops/s
# Warmup Iteration  14: 3487643.864 ops/s
# Warmup Iteration  15: 3362268.765 ops/s
# Warmup Iteration  16: 3433865.553 ops/s
# Warmup Iteration  17: 3408115.150 ops/s
# Warmup Iteration  18: 3371143.772 ops/s
# Warmup Iteration  19: 3584293.690 ops/s
# Warmup Iteration  20: 3338794.193 ops/s
# Warmup Iteration  21: 3436930.586 ops/s
# Warmup Iteration  22: 3401788.032 ops/s
# Warmup Iteration  23: 3349405.543 ops/s
# Warmup Iteration  24: 3455284.082 ops/s
# Warmup Iteration  25: 3435318.673 ops/s
# Warmup Iteration  26: 3430095.154 ops/s
# Warmup Iteration  27: 3505966.263 ops/s
# Warmup Iteration  28: 3333813.681 ops/s
# Warmup Iteration  29: 3506551.862 ops/s
# Warmup Iteration  30: 3378490.441 ops/s
Iteration   1: 3479299.718 ops/s
Iteration   2: 3433022.150 ops/s
Iteration   3: 3372745.251 ops/s
Iteration   4: 3539273.460 ops/s
Iteration   5: 3347723.749 ops/s
Iteration   6: 3476782.448 ops/s
Iteration   7: 3537713.597 ops/s
Iteration   8: 3420718.893 ops/s
Iteration   9: 3487517.596 ops/s
Iteration  10: 3407992.426 ops/s
Iteration  11: 3564042.217 ops/s
Iteration  12: 3394723.963 ops/s
Iteration  13: 3449474.650 ops/s
Iteration  14: 3525665.522 ops/s
Iteration  15: 3413126.979 ops/s
Iteration  16: 3532956.260 ops/s
Iteration  17: 3435920.261 ops/s
Iteration  18: 3486763.461 ops/s
Iteration  19: 3359132.507 ops/s
Iteration  20: 3522776.910 ops/s
Iteration  21: 3427843.816 ops/s
Iteration  22: 3460088.289 ops/s
Iteration  23: 3406930.694 ops/s
Iteration  24: 3455063.291 ops/s
Iteration  25: 3427347.405 ops/s
Iteration  26: 3435710.133 ops/s
Iteration  27: 3571083.317 ops/s
Iteration  28: 3638984.040 ops/s
Iteration  29: 3322716.025 ops/s
Iteration  30: 3607291.004 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_emptyInnerThenSingleBackpressured":
  3464681.001 ±(99.9%) 51327.629 ops/s [Average]
  (min, avg, max) = (3322716.025, 3464681.001, 3638984.040), stdev = 76824.784
  CI (99.9%): [3413353.372, 3516008.630] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            Mode  Cnt        Score       Error  Units
FlowableFlattenIterableTest._Benchmark.benchmark_emptyInnerThenSingleBackpressured  thrpt   30  3464681.001 ± 51327.629  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_just$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_just

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 608687.912 ops/s
# Warmup Iteration   2: 2852318.483 ops/s
# Warmup Iteration   3: 3482083.192 ops/s
# Warmup Iteration   4: 4203644.596 ops/s
# Warmup Iteration   5: 4276006.952 ops/s
# Warmup Iteration   6: 4136955.606 ops/s
# Warmup Iteration   7: 4213935.239 ops/s
# Warmup Iteration   8: 3855806.134 ops/s
# Warmup Iteration   9: 4107751.996 ops/s
# Warmup Iteration  10: 4235271.943 ops/s
# Warmup Iteration  11: 4321103.686 ops/s
# Warmup Iteration  12: 4066270.452 ops/s
# Warmup Iteration  13: 4281796.484 ops/s
# Warmup Iteration  14: 4237134.138 ops/s
# Warmup Iteration  15: 4360703.225 ops/s
# Warmup Iteration  16: 4136988.400 ops/s
# Warmup Iteration  17: 4183431.534 ops/s
# Warmup Iteration  18: 4213574.302 ops/s
# Warmup Iteration  19: 4291700.755 ops/s
# Warmup Iteration  20: 4130428.487 ops/s
# Warmup Iteration  21: 4154940.956 ops/s
# Warmup Iteration  22: 4224583.957 ops/s
# Warmup Iteration  23: 4174160.491 ops/s
# Warmup Iteration  24: 4119900.121 ops/s
# Warmup Iteration  25: 4132545.981 ops/s
# Warmup Iteration  26: 4360757.429 ops/s
# Warmup Iteration  27: 4113679.408 ops/s
# Warmup Iteration  28: 4358348.428 ops/s
# Warmup Iteration  29: 4231424.349 ops/s
# Warmup Iteration  30: 4174561.039 ops/s
Iteration   1: 4325576.641 ops/s
Iteration   2: 4157105.923 ops/s
Iteration   3: 4203160.565 ops/s
Iteration   4: 4345641.990 ops/s
Iteration   5: 4091098.647 ops/s
Iteration   6: 4379665.728 ops/s
Iteration   7: 4213571.860 ops/s
Iteration   8: 4155399.717 ops/s
Iteration   9: 4203855.852 ops/s
Iteration  10: 4184588.024 ops/s
Iteration  11: 4348584.350 ops/s
Iteration  12: 4256043.730 ops/s
Iteration  13: 4130124.319 ops/s
Iteration  14: 4331948.256 ops/s
Iteration  15: 4229527.548 ops/s
Iteration  16: 4147652.910 ops/s
Iteration  17: 4340135.020 ops/s
Iteration  18: 4198857.746 ops/s
Iteration  19: 4150561.973 ops/s
Iteration  20: 4419324.001 ops/s
Iteration  21: 4092223.940 ops/s
Iteration  22: 4240275.112 ops/s
Iteration  23: 4371937.937 ops/s
Iteration  24: 4176122.032 ops/s
Iteration  25: 4228518.033 ops/s
Iteration  26: 4256630.365 ops/s
Iteration  27: 4213232.647 ops/s
Iteration  28: 4368980.790 ops/s
Iteration  29: 4133124.443 ops/s
Iteration  30: 4164070.980 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_just":
  4235251.369 ±(99.9%) 62194.973 ops/s [Average]
  (min, avg, max) = (4091098.647, 4235251.369, 4419324.001), stdev = 93090.515
  CI (99.9%): [4173056.396, 4297446.342] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
FlowableFlattenIterableTest._Benchmark.benchmark_just  thrpt   30  4235251.369 ± 62194.973  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_normalBackpressured$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_normalBackpressured

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 185735.737 ops/s
# Warmup Iteration   2: 959635.373 ops/s
# Warmup Iteration   3: 1441244.517 ops/s
# Warmup Iteration   4: 1263462.979 ops/s
# Warmup Iteration   5: 1331126.567 ops/s
# Warmup Iteration   6: 1263999.919 ops/s
# Warmup Iteration   7: 1446456.197 ops/s
# Warmup Iteration   8: 1449409.526 ops/s
# Warmup Iteration   9: 1415274.590 ops/s
# Warmup Iteration  10: 1427301.053 ops/s
# Warmup Iteration  11: 1384356.334 ops/s
# Warmup Iteration  12: 1410585.863 ops/s
# Warmup Iteration  13: 1428177.906 ops/s
# Warmup Iteration  14: 1423176.512 ops/s
# Warmup Iteration  15: 1461881.725 ops/s
# Warmup Iteration  16: 1348956.965 ops/s
# Warmup Iteration  17: 1421624.114 ops/s
# Warmup Iteration  18: 1452116.324 ops/s
# Warmup Iteration  19: 1361234.961 ops/s
# Warmup Iteration  20: 1396954.322 ops/s
# Warmup Iteration  21: 1458771.195 ops/s
# Warmup Iteration  22: 1389741.468 ops/s
# Warmup Iteration  23: 1337391.081 ops/s
# Warmup Iteration  24: 1445816.819 ops/s
# Warmup Iteration  25: 1362515.315 ops/s
# Warmup Iteration  26: 1407435.891 ops/s
# Warmup Iteration  27: 1431915.010 ops/s
# Warmup Iteration  28: 1427990.003 ops/s
# Warmup Iteration  29: 1479208.692 ops/s
# Warmup Iteration  30: 1465959.932 ops/s
Iteration   1: 1406548.537 ops/s
Iteration   2: 1414820.606 ops/s
Iteration   3: 1485067.189 ops/s
Iteration   4: 1409445.241 ops/s
Iteration   5: 1435123.657 ops/s
Iteration   6: 1410759.206 ops/s
Iteration   7: 1406335.576 ops/s
Iteration   8: 1466983.449 ops/s
Iteration   9: 1400460.506 ops/s
Iteration  10: 1447150.117 ops/s
Iteration  11: 1441835.494 ops/s
Iteration  12: 1361057.472 ops/s
Iteration  13: 1463038.741 ops/s
Iteration  14: 1384457.242 ops/s
Iteration  15: 1383501.316 ops/s
Iteration  16: 1408501.723 ops/s
Iteration  17: 1400215.403 ops/s
Iteration  18: 1474784.631 ops/s
Iteration  19: 1422100.114 ops/s
Iteration  20: 1416110.579 ops/s
Iteration  21: 1475178.098 ops/s
Iteration  22: 1401689.030 ops/s
Iteration  23: 1492832.623 ops/s
Iteration  24: 1425988.981 ops/s
Iteration  25: 1408044.314 ops/s
Iteration  26: 1475007.165 ops/s
Iteration  27: 1422130.921 ops/s
Iteration  28: 1384159.677 ops/s
Iteration  29: 1464740.433 ops/s
Iteration  30: 1426946.391 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_normalBackpressured":
  1427167.148 ±(99.9%) 22880.076 ops/s [Average]
  (min, avg, max) = (1361057.472, 1427167.148, 1492832.623), stdev = 34245.824
  CI (99.9%): [1404287.071, 1450047.224] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
FlowableFlattenIterableTest._Benchmark.benchmark_normalBackpressured  thrpt   30  1427167.148 ± 22880.076  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_error$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_error

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 65387.892 ops/s
# Warmup Iteration   2: 243974.983 ops/s
# Warmup Iteration   3: 401732.924 ops/s
# Warmup Iteration   4: 482363.648 ops/s
# Warmup Iteration   5: 507712.057 ops/s
# Warmup Iteration   6: 501023.875 ops/s
# Warmup Iteration   7: 479276.447 ops/s
# Warmup Iteration   8: 496689.749 ops/s
# Warmup Iteration   9: 471398.952 ops/s
# Warmup Iteration  10: 484016.607 ops/s
# Warmup Iteration  11: 484296.330 ops/s
# Warmup Iteration  12: 487890.486 ops/s
# Warmup Iteration  13: 488580.730 ops/s
# Warmup Iteration  14: 479100.772 ops/s
# Warmup Iteration  15: 488040.816 ops/s
# Warmup Iteration  16: 488226.074 ops/s
# Warmup Iteration  17: 504799.693 ops/s
# Warmup Iteration  18: 523086.913 ops/s
# Warmup Iteration  19: 502894.480 ops/s
# Warmup Iteration  20: 525431.235 ops/s
# Warmup Iteration  21: 493296.269 ops/s
# Warmup Iteration  22: 523313.893 ops/s
# Warmup Iteration  23: 521891.968 ops/s
# Warmup Iteration  24: 474705.395 ops/s
# Warmup Iteration  25: 513736.850 ops/s
# Warmup Iteration  26: 516745.548 ops/s
# Warmup Iteration  27: 510582.692 ops/s
# Warmup Iteration  28: 524189.713 ops/s
# Warmup Iteration  29: 505198.834 ops/s
# Warmup Iteration  30: 501702.064 ops/s
Iteration   1: 524477.920 ops/s
Iteration   2: 498158.188 ops/s
Iteration   3: 522650.762 ops/s
Iteration   4: 507001.298 ops/s
Iteration   5: 520111.545 ops/s
Iteration   6: 524481.473 ops/s
Iteration   7: 513764.602 ops/s
Iteration   8: 516214.466 ops/s
Iteration   9: 533755.721 ops/s
Iteration  10: 509715.274 ops/s
Iteration  11: 522738.336 ops/s
Iteration  12: 523140.912 ops/s
Iteration  13: 508598.351 ops/s
Iteration  14: 522590.006 ops/s
Iteration  15: 531057.118 ops/s
Iteration  16: 499912.063 ops/s
Iteration  17: 532528.805 ops/s
Iteration  18: 504283.706 ops/s
Iteration  19: 506838.895 ops/s
Iteration  20: 525726.731 ops/s
Iteration  21: 517670.746 ops/s
Iteration  22: 508865.497 ops/s
Iteration  23: 508759.147 ops/s
Iteration  24: 536016.652 ops/s
Iteration  25: 495029.979 ops/s
Iteration  26: 525847.603 ops/s
Iteration  27: 506944.968 ops/s
Iteration  28: 535927.562 ops/s
Iteration  29: 497829.483 ops/s
Iteration  30: 528698.049 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_error":
  516977.862 ±(99.9%) 8058.094 ops/s [Average]
  (min, avg, max) = (495029.979, 516977.862, 536016.652), stdev = 12060.976
  CI (99.9%): [508919.768, 525035.956] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
FlowableFlattenIterableTest._Benchmark.benchmark_error  thrpt   30  516977.862 ± 8058.094  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_oneByOne$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_oneByOne

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 58729.330 ops/s
# Warmup Iteration   2: 366317.089 ops/s
# Warmup Iteration   3: 828663.207 ops/s
# Warmup Iteration   4: 859636.538 ops/s
# Warmup Iteration   5: 890763.115 ops/s
# Warmup Iteration   6: 984216.326 ops/s
# Warmup Iteration   7: 968810.969 ops/s
# Warmup Iteration   8: 960850.678 ops/s
# Warmup Iteration   9: 1006449.146 ops/s
# Warmup Iteration  10: 963599.618 ops/s
# Warmup Iteration  11: 992223.300 ops/s
# Warmup Iteration  12: 983063.051 ops/s
# Warmup Iteration  13: 969472.376 ops/s
# Warmup Iteration  14: 1030818.639 ops/s
# Warmup Iteration  15: 979035.461 ops/s
# Warmup Iteration  16: 970581.642 ops/s
# Warmup Iteration  17: 957046.793 ops/s
# Warmup Iteration  18: 1003698.414 ops/s
# Warmup Iteration  19: 960003.589 ops/s
# Warmup Iteration  20: 1011750.440 ops/s
# Warmup Iteration  21: 962551.985 ops/s
# Warmup Iteration  22: 975055.801 ops/s
# Warmup Iteration  23: 1016332.653 ops/s
# Warmup Iteration  24: 958213.733 ops/s
# Warmup Iteration  25: 990300.222 ops/s
# Warmup Iteration  26: 973238.996 ops/s
# Warmup Iteration  27: 983251.576 ops/s
# Warmup Iteration  28: 944257.436 ops/s
# Warmup Iteration  29: 975917.888 ops/s
# Warmup Iteration  30: 1029163.161 ops/s
Iteration   1: 944611.484 ops/s
Iteration   2: 997027.758 ops/s
Iteration   3: 946478.074 ops/s
Iteration   4: 960576.655 ops/s
Iteration   5: 1008056.033 ops/s
Iteration   6: 932631.856 ops/s
Iteration   7: 1022060.256 ops/s
Iteration   8: 1001738.463 ops/s
Iteration   9: 928809.065 ops/s
Iteration  10: 1015271.176 ops/s
Iteration  11: 963447.265 ops/s
Iteration  12: 944145.047 ops/s
Iteration  13: 982699.431 ops/s
Iteration  14: 960829.131 ops/s
Iteration  15: 956225.369 ops/s
Iteration  16: 1006014.925 ops/s
Iteration  17: 942894.540 ops/s
Iteration  18: 1023086.257 ops/s
Iteration  19: 934046.868 ops/s
Iteration  20: 963785.836 ops/s
Iteration  21: 955273.897 ops/s
Iteration  22: 970663.522 ops/s
Iteration  23: 956731.923 ops/s
Iteration  24: 980129.350 ops/s
Iteration  25: 974288.994 ops/s
Iteration  26: 958016.613 ops/s
Iteration  27: 998920.205 ops/s
Iteration  28: 1002291.734 ops/s
Iteration  29: 764354.387 ops/s
Iteration  30: 936370.478 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_oneByOne":
  964382.553 ±(99.9%) 31548.931 ops/s [Average]
  (min, avg, max) = (764354.387, 964382.553, 1023086.257), stdev = 47220.959
  CI (99.9%): [932833.622, 995931.484] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score       Error  Units
FlowableFlattenIterableTest._Benchmark.benchmark_oneByOne  thrpt   30  964382.553 ± 31548.931  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_fusedCurrentIteratorEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_fusedCurrentIteratorEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 570677.998 ops/s
# Warmup Iteration   2: 1639068.899 ops/s
# Warmup Iteration   3: 2642977.228 ops/s
# Warmup Iteration   4: 2631891.439 ops/s
# Warmup Iteration   5: 2726097.555 ops/s
# Warmup Iteration   6: 2594089.235 ops/s
# Warmup Iteration   7: 2648822.507 ops/s
# Warmup Iteration   8: 2678975.082 ops/s
# Warmup Iteration   9: 2549885.008 ops/s
# Warmup Iteration  10: 2598142.945 ops/s
# Warmup Iteration  11: 2642362.407 ops/s
# Warmup Iteration  12: 2637000.826 ops/s
# Warmup Iteration  13: 2590256.401 ops/s
# Warmup Iteration  14: 2686655.402 ops/s
# Warmup Iteration  15: 2585012.247 ops/s
# Warmup Iteration  16: 2655970.431 ops/s
# Warmup Iteration  17: 2655700.770 ops/s
# Warmup Iteration  18: 2699396.064 ops/s
# Warmup Iteration  19: 2683932.019 ops/s
# Warmup Iteration  20: 2560790.074 ops/s
# Warmup Iteration  21: 2684382.409 ops/s
# Warmup Iteration  22: 2638839.712 ops/s
# Warmup Iteration  23: 2667194.597 ops/s
# Warmup Iteration  24: 2634149.642 ops/s
# Warmup Iteration  25: 2718956.163 ops/s
# Warmup Iteration  26: 2629782.209 ops/s
# Warmup Iteration  27: 2617945.777 ops/s
# Warmup Iteration  28: 2543831.083 ops/s
# Warmup Iteration  29: 2745084.069 ops/s
# Warmup Iteration  30: 2593726.303 ops/s
Iteration   1: 2715700.927 ops/s
Iteration   2: 2701516.373 ops/s
Iteration   3: 2579316.747 ops/s
Iteration   4: 2669179.742 ops/s
Iteration   5: 2727062.450 ops/s
Iteration   6: 2584665.679 ops/s
Iteration   7: 2774490.666 ops/s
Iteration   8: 2555840.533 ops/s
Iteration   9: 2581468.416 ops/s
Iteration  10: 2737314.024 ops/s
Iteration  11: 2638376.515 ops/s
Iteration  12: 2704296.863 ops/s
Iteration  13: 2539752.237 ops/s
Iteration  14: 2632858.068 ops/s
Iteration  15: 2669169.932 ops/s
Iteration  16: 2604763.853 ops/s
Iteration  17: 2712444.629 ops/s
Iteration  18: 2633260.243 ops/s
Iteration  19: 2654848.653 ops/s
Iteration  20: 2633995.141 ops/s
Iteration  21: 2672198.432 ops/s
Iteration  22: 2616445.678 ops/s
Iteration  23: 2643885.506 ops/s
Iteration  24: 2662458.498 ops/s
Iteration  25: 2610805.584 ops/s
Iteration  26: 2784388.389 ops/s
Iteration  27: 2543359.089 ops/s
Iteration  28: 2631004.035 ops/s
Iteration  29: 2729130.392 ops/s
Iteration  30: 2587807.859 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_fusedCurrentIteratorEmpty":
  2651060.172 ±(99.9%) 43840.463 ops/s [Average]
  (min, avg, max) = (2539752.237, 2651060.172, 2784388.389), stdev = 65618.347
  CI (99.9%): [2607219.708, 2694900.635] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score       Error  Units
FlowableFlattenIterableTest._Benchmark.benchmark_fusedCurrentIteratorEmpty  thrpt   30  2651060.172 ± 43840.463  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterableTest._Benchmark.benchmark_disposeWhileIteratorNextConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterableTest._Benchmark.benchmark_disposeWhileIteratorNextConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1407159.850 ops/s
# Warmup Iteration   2: 3480467.242 ops/s
# Warmup Iteration   3: 4461409.683 ops/s
# Warmup Iteration   4: 4610106.489 ops/s
# Warmup Iteration   5: 4846129.861 ops/s
# Warmup Iteration   6: 4757991.061 ops/s
# Warmup Iteration   7: 4608814.454 ops/s
# Warmup Iteration   8: 4701135.954 ops/s
# Warmup Iteration   9: 4876805.230 ops/s
# Warmup Iteration  10: 4745729.594 ops/s
# Warmup Iteration  11: 4497347.707 ops/s
# Warmup Iteration  12: 4695896.824 ops/s
# Warmup Iteration  13: 4816241.033 ops/s
# Warmup Iteration  14: 4521095.999 ops/s
# Warmup Iteration  15: 4706580.599 ops/s
# Warmup Iteration  16: 4718463.731 ops/s
# Warmup Iteration  17: 4684982.002 ops/s
# Warmup Iteration  18: 4772557.099 ops/s
# Warmup Iteration  19: 4726232.342 ops/s
# Warmup Iteration  20: 4828044.812 ops/s
# Warmup Iteration  21: 4598673.198 ops/s
# Warmup Iteration  22: 4899444.635 ops/s
# Warmup Iteration  23: 4839652.265 ops/s
# Warmup Iteration  24: 4493637.138 ops/s
# Warmup Iteration  25: 4744878.123 ops/s
# Warmup Iteration  26: 4740199.372 ops/s
# Warmup Iteration  27: 4752952.083 ops/s
# Warmup Iteration  28: 4782208.425 ops/s
# Warmup Iteration  29: 4592570.571 ops/s
# Warmup Iteration  30: 4875482.972 ops/s
Iteration   1: 4606311.520 ops/s
Iteration   2: 4667055.030 ops/s
Iteration   3: 4694535.652 ops/s
Iteration   4: 4759010.217 ops/s
Iteration   5: 4675335.281 ops/s
Iteration   6: 4637003.689 ops/s
Iteration   7: 4938898.529 ops/s
Iteration   8: 4573592.503 ops/s
Iteration   9: 4826066.122 ops/s
Iteration  10: 4535661.462 ops/s
Iteration  11: 4698405.526 ops/s
Iteration  12: 4569421.318 ops/s
Iteration  13: 4767956.456 ops/s
Iteration  14: 4589595.227 ops/s
Iteration  15: 4716807.885 ops/s
Iteration  16: 4634972.818 ops/s
Iteration  17: 4745841.668 ops/s
Iteration  18: 4696379.903 ops/s
Iteration  19: 4854732.181 ops/s
Iteration  20: 4767211.600 ops/s
Iteration  21: 4625656.428 ops/s
Iteration  22: 4861465.004 ops/s
Iteration  23: 4889785.577 ops/s
Iteration  24: 3458201.104 ops/s
Iteration  25: 4961840.087 ops/s
Iteration  26: 4637368.624 ops/s
Iteration  27: 4697067.449 ops/s
Iteration  28: 4801353.729 ops/s
Iteration  29: 4547961.083 ops/s
Iteration  30: 4603195.622 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterableTest._Benchmark.benchmark_disposeWhileIteratorNextConditional":
  4667956.310 ±(99.9%) 170876.311 ops/s [Average]
  (min, avg, max) = (3458201.104, 4667956.310, 4961840.087), stdev = 255759.637
  CI (99.9%): [4497079.999, 4838832.621] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           Mode  Cnt        Score        Error  Units
FlowableFromIterableTest._Benchmark.benchmark_disposeWhileIteratorNextConditional  thrpt   30  4667956.310 ± 170876.311  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeTest._Benchmark.benchmark_takeWithError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeTest._Benchmark.benchmark_takeWithError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 107208.453 ops/s
# Warmup Iteration   2: 342348.764 ops/s
# Warmup Iteration   3: 390213.095 ops/s
# Warmup Iteration   4: 370660.380 ops/s
# Warmup Iteration   5: 367452.306 ops/s
# Warmup Iteration   6: 408162.876 ops/s
# Warmup Iteration   7: 399153.492 ops/s
# Warmup Iteration   8: 416948.698 ops/s
# Warmup Iteration   9: 407395.470 ops/s
# Warmup Iteration  10: 405264.334 ops/s
# Warmup Iteration  11: 406126.241 ops/s
# Warmup Iteration  12: 387499.942 ops/s
# Warmup Iteration  13: 421839.264 ops/s
# Warmup Iteration  14: 390795.669 ops/s
# Warmup Iteration  15: 402583.958 ops/s
# Warmup Iteration  16: 411283.956 ops/s
# Warmup Iteration  17: 419103.566 ops/s
# Warmup Iteration  18: 420058.137 ops/s
# Warmup Iteration  19: 410952.269 ops/s
# Warmup Iteration  20: 428704.789 ops/s
# Warmup Iteration  21: 426903.794 ops/s
# Warmup Iteration  22: 418544.468 ops/s
# Warmup Iteration  23: 405964.301 ops/s
# Warmup Iteration  24: 435822.548 ops/s
# Warmup Iteration  25: 403019.803 ops/s
# Warmup Iteration  26: 418587.268 ops/s
# Warmup Iteration  27: 425124.699 ops/s
# Warmup Iteration  28: 409435.075 ops/s
# Warmup Iteration  29: 423404.830 ops/s
# Warmup Iteration  30: 402449.452 ops/s
Iteration   1: 436911.775 ops/s
Iteration   2: 422080.947 ops/s
Iteration   3: 408766.705 ops/s
Iteration   4: 427439.439 ops/s
Iteration   5: 423179.799 ops/s
Iteration   6: 418691.038 ops/s
Iteration   7: 425932.724 ops/s
Iteration   8: 414122.981 ops/s
Iteration   9: 406404.335 ops/s
Iteration  10: 431711.021 ops/s
Iteration  11: 411308.077 ops/s
Iteration  12: 421514.080 ops/s
Iteration  13: 409452.657 ops/s
Iteration  14: 421978.630 ops/s
Iteration  15: 405185.041 ops/s
Iteration  16: 425867.174 ops/s
Iteration  17: 412026.532 ops/s
Iteration  18: 425386.769 ops/s
Iteration  19: 418077.116 ops/s
Iteration  20: 430540.643 ops/s
Iteration  21: 426695.165 ops/s
Iteration  22: 408089.138 ops/s
Iteration  23: 424063.981 ops/s
Iteration  24: 418856.944 ops/s
Iteration  25: 418985.009 ops/s
Iteration  26: 416600.970 ops/s
Iteration  27: 420497.779 ops/s
Iteration  28: 409244.087 ops/s
Iteration  29: 426179.680 ops/s
Iteration  30: 411461.707 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeTest._Benchmark.benchmark_takeWithError":
  419241.731 ±(99.9%) 5487.856 ops/s [Average]
  (min, avg, max) = (405185.041, 419241.731, 436911.775), stdev = 8213.965
  CI (99.9%): [413753.876, 424729.587] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score      Error  Units
FlowableTakeTest._Benchmark.benchmark_takeWithError  thrpt   30  419241.731 ± 5487.856  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterableTest._Benchmark.benchmark_hasNext2Throws$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterableTest._Benchmark.benchmark_hasNext2Throws

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 100601.204 ops/s
# Warmup Iteration   2: 461306.148 ops/s
# Warmup Iteration   3: 527486.108 ops/s
# Warmup Iteration   4: 513543.020 ops/s
# Warmup Iteration   5: 522397.633 ops/s
# Warmup Iteration   6: 502919.996 ops/s
# Warmup Iteration   7: 526592.322 ops/s
# Warmup Iteration   8: 496999.117 ops/s
# Warmup Iteration   9: 487119.725 ops/s
# Warmup Iteration  10: 515191.802 ops/s
# Warmup Iteration  11: 511240.603 ops/s
# Warmup Iteration  12: 525761.324 ops/s
# Warmup Iteration  13: 524029.406 ops/s
# Warmup Iteration  14: 527222.226 ops/s
# Warmup Iteration  15: 496839.967 ops/s
# Warmup Iteration  16: 518289.226 ops/s
# Warmup Iteration  17: 543338.861 ops/s
# Warmup Iteration  18: 529770.328 ops/s
# Warmup Iteration  19: 542761.654 ops/s
# Warmup Iteration  20: 552076.770 ops/s
# Warmup Iteration  21: 531326.382 ops/s
# Warmup Iteration  22: 560661.227 ops/s
# Warmup Iteration  23: 529964.071 ops/s
# Warmup Iteration  24: 538274.318 ops/s
# Warmup Iteration  25: 542318.647 ops/s
# Warmup Iteration  26: 529061.847 ops/s
# Warmup Iteration  27: 549051.072 ops/s
# Warmup Iteration  28: 530309.902 ops/s
# Warmup Iteration  29: 550833.806 ops/s
# Warmup Iteration  30: 548163.040 ops/s
Iteration   1: 527271.896 ops/s
Iteration   2: 539151.386 ops/s
Iteration   3: 546900.629 ops/s
Iteration   4: 545874.063 ops/s
Iteration   5: 528832.598 ops/s
Iteration   6: 530580.884 ops/s
Iteration   7: 556008.690 ops/s
Iteration   8: 538482.144 ops/s
Iteration   9: 559326.443 ops/s
Iteration  10: 520623.740 ops/s
Iteration  11: 548424.019 ops/s
Iteration  12: 499091.043 ops/s
Iteration  13: 544571.703 ops/s
Iteration  14: 567366.263 ops/s
Iteration  15: 552565.852 ops/s
Iteration  16: 534810.285 ops/s
Iteration  17: 549783.595 ops/s
Iteration  18: 533175.910 ops/s
Iteration  19: 398631.908 ops/s
Iteration  20: 561201.764 ops/s
Iteration  21: 518363.536 ops/s
Iteration  22: 560740.921 ops/s
Iteration  23: 521186.352 ops/s
Iteration  24: 543050.693 ops/s
Iteration  25: 539251.479 ops/s
Iteration  26: 540969.827 ops/s
Iteration  27: 552749.885 ops/s
Iteration  28: 511096.992 ops/s
Iteration  29: 551225.864 ops/s
Iteration  30: 548759.992 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterableTest._Benchmark.benchmark_hasNext2Throws":
  535669.012 ±(99.9%) 20250.721 ops/s [Average]
  (min, avg, max) = (398631.908, 535669.012, 567366.263), stdev = 30310.329
  CI (99.9%): [515418.291, 555919.733] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score       Error  Units
FlowableFromIterableTest._Benchmark.benchmark_hasNext2Throws  thrpt   30  535669.012 ± 20250.721  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterableTest._Benchmark.benchmark_hasNextCancelsAndCompletesFastPathConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterableTest._Benchmark.benchmark_hasNextCancelsAndCompletesFastPathConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 939774.341 ops/s
# Warmup Iteration   2: 3113748.521 ops/s
# Warmup Iteration   3: 3548139.365 ops/s
# Warmup Iteration   4: 4019291.750 ops/s
# Warmup Iteration   5: 4039578.562 ops/s
# Warmup Iteration   6: 4220372.411 ops/s
# Warmup Iteration   7: 3878305.801 ops/s
# Warmup Iteration   8: 4136786.440 ops/s
# Warmup Iteration   9: 4057639.490 ops/s
# Warmup Iteration  10: 4123749.341 ops/s
# Warmup Iteration  11: 4167600.007 ops/s
# Warmup Iteration  12: 4012640.105 ops/s
# Warmup Iteration  13: 4269528.676 ops/s
# Warmup Iteration  14: 3962375.488 ops/s
# Warmup Iteration  15: 4150216.414 ops/s
# Warmup Iteration  16: 4045494.999 ops/s
# Warmup Iteration  17: 4092318.605 ops/s
# Warmup Iteration  18: 4069165.134 ops/s
# Warmup Iteration  19: 4144981.666 ops/s
# Warmup Iteration  20: 4193358.859 ops/s
# Warmup Iteration  21: 4011724.393 ops/s
# Warmup Iteration  22: 4079510.368 ops/s
# Warmup Iteration  23: 3994005.805 ops/s
# Warmup Iteration  24: 4030862.735 ops/s
# Warmup Iteration  25: 4107569.537 ops/s
# Warmup Iteration  26: 3973267.460 ops/s
# Warmup Iteration  27: 4098547.381 ops/s
# Warmup Iteration  28: 4267931.337 ops/s
# Warmup Iteration  29: 4021629.528 ops/s
# Warmup Iteration  30: 4134471.999 ops/s
Iteration   1: 4022738.262 ops/s
Iteration   2: 4037132.671 ops/s
Iteration   3: 4258360.084 ops/s
Iteration   4: 3943097.459 ops/s
Iteration   5: 4159193.440 ops/s
Iteration   6: 3946765.999 ops/s
Iteration   7: 4059347.552 ops/s
Iteration   8: 4026284.298 ops/s
Iteration   9: 4105852.873 ops/s
Iteration  10: 4270002.246 ops/s
Iteration  11: 4161632.943 ops/s
Iteration  12: 3938885.579 ops/s
Iteration  13: 4194443.848 ops/s
Iteration  14: 4136183.067 ops/s
Iteration  15: 3960208.780 ops/s
Iteration  16: 4000887.422 ops/s
Iteration  17: 4307485.621 ops/s
Iteration  18: 4218701.904 ops/s
Iteration  19: 4054963.858 ops/s
Iteration  20: 4208701.286 ops/s
Iteration  21: 3995364.075 ops/s
Iteration  22: 4144213.659 ops/s
Iteration  23: 4153047.974 ops/s
Iteration  24: 3990131.425 ops/s
Iteration  25: 4194569.663 ops/s
Iteration  26: 4070638.506 ops/s
Iteration  27: 4183237.906 ops/s
Iteration  28: 3898690.509 ops/s
Iteration  29: 4192082.306 ops/s
Iteration  30: 3976150.212 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterableTest._Benchmark.benchmark_hasNextCancelsAndCompletesFastPathConditional":
  4093633.181 ±(99.9%) 75528.164 ops/s [Average]
  (min, avg, max) = (3898690.509, 4093633.181, 4307485.621), stdev = 113047.009
  CI (99.9%): [4018105.017, 4169161.345] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                     Mode  Cnt        Score       Error  Units
FlowableFromIterableTest._Benchmark.benchmark_hasNextCancelsAndCompletesFastPathConditional  thrpt   30  4093633.181 ± 75528.164  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterableTest._Benchmark.benchmark_normalConditionalCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterableTest._Benchmark.benchmark_normalConditionalCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 128673.466 ops/s
# Warmup Iteration   2: 418357.356 ops/s
# Warmup Iteration   3: 504007.341 ops/s
# Warmup Iteration   4: 536100.597 ops/s
# Warmup Iteration   5: 522427.267 ops/s
# Warmup Iteration   6: 505193.352 ops/s
# Warmup Iteration   7: 519572.926 ops/s
# Warmup Iteration   8: 511374.077 ops/s
# Warmup Iteration   9: 500112.354 ops/s
# Warmup Iteration  10: 526014.820 ops/s
# Warmup Iteration  11: 488992.874 ops/s
# Warmup Iteration  12: 496310.313 ops/s
# Warmup Iteration  13: 521175.810 ops/s
# Warmup Iteration  14: 516889.670 ops/s
# Warmup Iteration  15: 528958.218 ops/s
# Warmup Iteration  16: 518142.281 ops/s
# Warmup Iteration  17: 556619.182 ops/s
# Warmup Iteration  18: 539769.109 ops/s
# Warmup Iteration  19: 541954.543 ops/s
# Warmup Iteration  20: 556194.356 ops/s
# Warmup Iteration  21: 542530.814 ops/s
# Warmup Iteration  22: 548631.196 ops/s
# Warmup Iteration  23: 537008.643 ops/s
# Warmup Iteration  24: 558832.550 ops/s
# Warmup Iteration  25: 549463.837 ops/s
# Warmup Iteration  26: 536483.244 ops/s
# Warmup Iteration  27: 532795.697 ops/s
# Warmup Iteration  28: 564153.499 ops/s
# Warmup Iteration  29: 541419.865 ops/s
# Warmup Iteration  30: 538398.947 ops/s
Iteration   1: 539190.417 ops/s
Iteration   2: 535496.266 ops/s
Iteration   3: 548105.548 ops/s
Iteration   4: 540520.230 ops/s
Iteration   5: 525870.933 ops/s
Iteration   6: 562578.213 ops/s
Iteration   7: 528331.352 ops/s
Iteration   8: 567966.036 ops/s
Iteration   9: 530990.952 ops/s
Iteration  10: 551765.863 ops/s
Iteration  11: 546070.360 ops/s
Iteration  12: 548936.413 ops/s
Iteration  13: 514963.167 ops/s
Iteration  14: 452858.875 ops/s
Iteration  15: 564731.366 ops/s
Iteration  16: 530922.789 ops/s
Iteration  17: 542357.907 ops/s
Iteration  18: 555978.125 ops/s
Iteration  19: 533419.952 ops/s
Iteration  20: 553820.904 ops/s
Iteration  21: 571882.978 ops/s
Iteration  22: 534161.835 ops/s
Iteration  23: 539020.946 ops/s
Iteration  24: 544717.254 ops/s
Iteration  25: 556963.165 ops/s
Iteration  26: 554635.077 ops/s
Iteration  27: 528234.569 ops/s
Iteration  28: 533097.600 ops/s
Iteration  29: 553007.648 ops/s
Iteration  30: 525327.681 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterableTest._Benchmark.benchmark_normalConditionalCrash":
  540530.814 ±(99.9%) 14467.518 ops/s [Average]
  (min, avg, max) = (452858.875, 540530.814, 571882.978), stdev = 21654.302
  CI (99.9%): [526063.296, 554998.332] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score       Error  Units
FlowableFromIterableTest._Benchmark.benchmark_normalConditionalCrash  thrpt   30  540530.814 ± 14467.518  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterableTest._Benchmark.benchmark_normalConditionalCrash2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterableTest._Benchmark.benchmark_normalConditionalCrash2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 100901.114 ops/s
# Warmup Iteration   2: 382649.389 ops/s
# Warmup Iteration   3: 442315.638 ops/s
# Warmup Iteration   4: 409974.502 ops/s
# Warmup Iteration   5: 422459.302 ops/s
# Warmup Iteration   6: 440569.539 ops/s
# Warmup Iteration   7: 417223.338 ops/s
# Warmup Iteration   8: 442830.188 ops/s
# Warmup Iteration   9: 459351.807 ops/s
# Warmup Iteration  10: 458639.566 ops/s
# Warmup Iteration  11: 444660.600 ops/s
# Warmup Iteration  12: 458539.043 ops/s
# Warmup Iteration  13: 453332.228 ops/s
# Warmup Iteration  14: 465523.239 ops/s
# Warmup Iteration  15: 448644.436 ops/s
# Warmup Iteration  16: 466324.705 ops/s
# Warmup Iteration  17: 481550.233 ops/s
# Warmup Iteration  18: 449869.874 ops/s
# Warmup Iteration  19: 479758.345 ops/s
# Warmup Iteration  20: 454302.804 ops/s
# Warmup Iteration  21: 477497.105 ops/s
# Warmup Iteration  22: 488642.932 ops/s
# Warmup Iteration  23: 444938.606 ops/s
# Warmup Iteration  24: 463484.315 ops/s
# Warmup Iteration  25: 489133.536 ops/s
# Warmup Iteration  26: 455507.924 ops/s
# Warmup Iteration  27: 477715.705 ops/s
# Warmup Iteration  28: 464886.398 ops/s
# Warmup Iteration  29: 478479.804 ops/s
# Warmup Iteration  30: 477305.244 ops/s
Iteration   1: 458718.775 ops/s
Iteration   2: 478964.922 ops/s
Iteration   3: 457570.646 ops/s
Iteration   4: 460501.984 ops/s
Iteration   5: 476465.014 ops/s
Iteration   6: 456912.528 ops/s
Iteration   7: 467306.860 ops/s
Iteration   8: 476484.311 ops/s
Iteration   9: 454433.434 ops/s
Iteration  10: 468755.206 ops/s
Iteration  11: 465515.245 ops/s
Iteration  12: 477425.508 ops/s
Iteration  13: 467710.205 ops/s
Iteration  14: 456824.795 ops/s
Iteration  15: 462678.206 ops/s
Iteration  16: 471271.431 ops/s
Iteration  17: 485061.349 ops/s
Iteration  18: 462190.120 ops/s
Iteration  19: 469850.834 ops/s
Iteration  20: 460194.462 ops/s
Iteration  21: 459645.190 ops/s
Iteration  22: 483963.651 ops/s
Iteration  23: 467779.433 ops/s
Iteration  24: 469745.057 ops/s
Iteration  25: 466447.733 ops/s
Iteration  26: 465001.537 ops/s
Iteration  27: 488802.760 ops/s
Iteration  28: 456779.812 ops/s
Iteration  29: 482635.836 ops/s
Iteration  30: 470541.758 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterableTest._Benchmark.benchmark_normalConditionalCrash2":
  468205.953 ±(99.9%) 6312.016 ops/s [Average]
  (min, avg, max) = (454433.434, 468205.953, 488802.760), stdev = 9447.530
  CI (99.9%): [461893.937, 474517.970] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score      Error  Units
FlowableFromIterableTest._Benchmark.benchmark_normalConditionalCrash2  thrpt   30  468205.953 ± 6312.016  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterableTest._Benchmark.benchmark_normalConditionalCrashBackpressured$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterableTest._Benchmark.benchmark_normalConditionalCrashBackpressured

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 118982.881 ops/s
# Warmup Iteration   2: 442608.688 ops/s
# Warmup Iteration   3: 478570.587 ops/s
# Warmup Iteration   4: 528090.584 ops/s
# Warmup Iteration   5: 522479.327 ops/s
# Warmup Iteration   6: 513358.536 ops/s
# Warmup Iteration   7: 530920.126 ops/s
# Warmup Iteration   8: 519374.856 ops/s
# Warmup Iteration   9: 517960.040 ops/s
# Warmup Iteration  10: 546796.421 ops/s
# Warmup Iteration  11: 492092.590 ops/s
# Warmup Iteration  12: 528390.668 ops/s
# Warmup Iteration  13: 522271.010 ops/s
# Warmup Iteration  14: 524173.677 ops/s
# Warmup Iteration  15: 549710.812 ops/s
# Warmup Iteration  16: 512482.399 ops/s
# Warmup Iteration  17: 540775.184 ops/s
# Warmup Iteration  18: 542420.629 ops/s
# Warmup Iteration  19: 550265.588 ops/s
# Warmup Iteration  20: 558853.064 ops/s
# Warmup Iteration  21: 539195.402 ops/s
# Warmup Iteration  22: 562002.225 ops/s
# Warmup Iteration  23: 539733.705 ops/s
# Warmup Iteration  24: 535361.662 ops/s
# Warmup Iteration  25: 556527.637 ops/s
# Warmup Iteration  26: 532344.208 ops/s
# Warmup Iteration  27: 548390.080 ops/s
# Warmup Iteration  28: 545402.012 ops/s
# Warmup Iteration  29: 533359.888 ops/s
# Warmup Iteration  30: 555421.396 ops/s
Iteration   1: 519110.742 ops/s
Iteration   2: 538963.919 ops/s
Iteration   3: 546684.384 ops/s
Iteration   4: 549505.836 ops/s
Iteration   5: 563410.349 ops/s
Iteration   6: 538693.253 ops/s
Iteration   7: 554376.003 ops/s
Iteration   8: 466591.863 ops/s
Iteration   9: 516867.811 ops/s
Iteration  10: 522145.259 ops/s
Iteration  11: 507337.734 ops/s
Iteration  12: 557617.487 ops/s
Iteration  13: 530196.798 ops/s
Iteration  14: 553585.308 ops/s
Iteration  15: 559422.668 ops/s
Iteration  16: 524814.162 ops/s
Iteration  17: 566746.978 ops/s
Iteration  18: 536762.066 ops/s
Iteration  19: 563376.527 ops/s
Iteration  20: 537836.922 ops/s
Iteration  21: 546134.764 ops/s
Iteration  22: 566291.189 ops/s
Iteration  23: 551251.159 ops/s
Iteration  24: 539980.877 ops/s
Iteration  25: 566062.738 ops/s
Iteration  26: 524010.408 ops/s
Iteration  27: 572249.287 ops/s
Iteration  28: 564807.433 ops/s
Iteration  29: 527145.371 ops/s
Iteration  30: 549421.285 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterableTest._Benchmark.benchmark_normalConditionalCrashBackpressured":
  542046.686 ±(99.9%) 15036.213 ops/s [Average]
  (min, avg, max) = (466591.863, 542046.686, 572249.287), stdev = 22505.497
  CI (99.9%): [527010.473, 557082.899] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           Mode  Cnt       Score       Error  Units
FlowableFromIterableTest._Benchmark.benchmark_normalConditionalCrashBackpressured  thrpt   30  542046.686 ± 15036.213  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterableTest._Benchmark.benchmark_normalConditionalCrashBackpressured2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterableTest._Benchmark.benchmark_normalConditionalCrashBackpressured2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 115990.057 ops/s
# Warmup Iteration   2: 401404.961 ops/s
# Warmup Iteration   3: 451404.998 ops/s
# Warmup Iteration   4: 373323.839 ops/s
# Warmup Iteration   5: 488120.126 ops/s
# Warmup Iteration   6: 462828.431 ops/s
# Warmup Iteration   7: 440359.842 ops/s
# Warmup Iteration   8: 473454.974 ops/s
# Warmup Iteration   9: 471804.237 ops/s
# Warmup Iteration  10: 463631.679 ops/s
# Warmup Iteration  11: 472055.787 ops/s
# Warmup Iteration  12: 467715.715 ops/s
# Warmup Iteration  13: 469552.678 ops/s
# Warmup Iteration  14: 479720.117 ops/s
# Warmup Iteration  15: 448568.043 ops/s
# Warmup Iteration  16: 472982.063 ops/s
# Warmup Iteration  17: 484909.271 ops/s
# Warmup Iteration  18: 487804.689 ops/s
# Warmup Iteration  19: 481114.443 ops/s
# Warmup Iteration  20: 490111.553 ops/s
# Warmup Iteration  21: 477859.189 ops/s
# Warmup Iteration  22: 483062.490 ops/s
# Warmup Iteration  23: 495367.688 ops/s
# Warmup Iteration  24: 469116.429 ops/s
# Warmup Iteration  25: 486532.444 ops/s
# Warmup Iteration  26: 503165.241 ops/s
# Warmup Iteration  27: 469807.892 ops/s
# Warmup Iteration  28: 509730.945 ops/s
# Warmup Iteration  29: 475517.814 ops/s
# Warmup Iteration  30: 501491.236 ops/s
Iteration   1: 471441.467 ops/s
Iteration   2: 485627.779 ops/s
Iteration   3: 487209.201 ops/s
Iteration   4: 486775.353 ops/s
Iteration   5: 496099.001 ops/s
Iteration   6: 473844.407 ops/s
Iteration   7: 501688.141 ops/s
Iteration   8: 479772.589 ops/s
Iteration   9: 489638.696 ops/s
Iteration  10: 476052.328 ops/s
Iteration  11: 484565.528 ops/s
Iteration  12: 491139.066 ops/s
Iteration  13: 475770.980 ops/s
Iteration  14: 481806.901 ops/s
Iteration  15: 473483.290 ops/s
Iteration  16: 484169.325 ops/s
Iteration  17: 495939.265 ops/s
Iteration  18: 472314.722 ops/s
Iteration  19: 493258.117 ops/s
Iteration  20: 484786.195 ops/s
Iteration  21: 501619.270 ops/s
Iteration  22: 474954.183 ops/s
Iteration  23: 491015.994 ops/s
Iteration  24: 490404.907 ops/s
Iteration  25: 492845.612 ops/s
Iteration  26: 502183.276 ops/s
Iteration  27: 471092.160 ops/s
Iteration  28: 489982.773 ops/s
Iteration  29: 474772.591 ops/s
Iteration  30: 493141.262 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterableTest._Benchmark.benchmark_normalConditionalCrashBackpressured2":
  485579.813 ±(99.9%) 6375.908 ops/s [Average]
  (min, avg, max) = (471092.160, 485579.813, 502183.276), stdev = 9543.160
  CI (99.9%): [479203.905, 491955.721] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            Mode  Cnt       Score      Error  Units
FlowableFromIterableTest._Benchmark.benchmark_normalConditionalCrashBackpressured2  thrpt   30  485579.813 ± 6375.908  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeWhileTest._Benchmark.benchmark_badSource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeWhileTest._Benchmark.benchmark_badSource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1637268.612 ops/s
# Warmup Iteration   2: 4643621.771 ops/s
# Warmup Iteration   3: 7025402.404 ops/s
# Warmup Iteration   4: 6691830.346 ops/s
# Warmup Iteration   5: 7109603.837 ops/s
# Warmup Iteration   6: 6615249.693 ops/s
# Warmup Iteration   7: 7005451.250 ops/s
# Warmup Iteration   8: 6719488.384 ops/s
# Warmup Iteration   9: 6745681.438 ops/s
# Warmup Iteration  10: 7144260.983 ops/s
# Warmup Iteration  11: 6587720.442 ops/s
# Warmup Iteration  12: 7035923.205 ops/s
# Warmup Iteration  13: 6819440.468 ops/s
# Warmup Iteration  14: 6952240.716 ops/s
# Warmup Iteration  15: 6767270.114 ops/s
# Warmup Iteration  16: 6815614.296 ops/s
# Warmup Iteration  17: 7060300.506 ops/s
# Warmup Iteration  18: 7074191.717 ops/s
# Warmup Iteration  19: 6906752.376 ops/s
# Warmup Iteration  20: 7048510.126 ops/s
# Warmup Iteration  21: 6895694.142 ops/s
# Warmup Iteration  22: 6874071.367 ops/s
# Warmup Iteration  23: 6701990.918 ops/s
# Warmup Iteration  24: 6711167.841 ops/s
# Warmup Iteration  25: 7071660.652 ops/s
# Warmup Iteration  26: 6719113.068 ops/s
# Warmup Iteration  27: 7113235.291 ops/s
# Warmup Iteration  28: 6643186.360 ops/s
# Warmup Iteration  29: 6859412.949 ops/s
# Warmup Iteration  30: 7260811.468 ops/s
Iteration   1: 6668016.893 ops/s
Iteration   2: 6970683.675 ops/s
Iteration   3: 6275163.005 ops/s
Iteration   4: 6266055.513 ops/s
Iteration   5: 6673908.376 ops/s
Iteration   6: 7111789.417 ops/s
Iteration   7: 6973664.689 ops/s
Iteration   8: 6783371.158 ops/s
Iteration   9: 6969860.295 ops/s
Iteration  10: 6919619.634 ops/s
Iteration  11: 6943143.579 ops/s
Iteration  12: 6937715.627 ops/s
Iteration  13: 6868811.211 ops/s
Iteration  14: 6940141.534 ops/s
Iteration  15: 6634521.577 ops/s
Iteration  16: 7102356.278 ops/s
Iteration  17: 6910604.972 ops/s
Iteration  18: 7021580.226 ops/s
Iteration  19: 6611256.424 ops/s
Iteration  20: 7116437.178 ops/s
Iteration  21: 6991889.156 ops/s
Iteration  22: 6603767.530 ops/s
Iteration  23: 7010790.218 ops/s
Iteration  24: 6930677.123 ops/s
Iteration  25: 6727837.698 ops/s
Iteration  26: 6926659.521 ops/s
Iteration  27: 6767826.601 ops/s
Iteration  28: 6956601.612 ops/s
Iteration  29: 6743023.312 ops/s
Iteration  30: 6673571.206 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeWhileTest._Benchmark.benchmark_badSource":
  6834378.175 ±(99.9%) 143667.277 ops/s [Average]
  (min, avg, max) = (6266055.513, 6834378.175, 7116437.178), stdev = 215034.433
  CI (99.9%): [6690710.898, 6978045.452] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score        Error  Units
FlowableTakeWhileTest._Benchmark.benchmark_badSource  thrpt   30  6834378.175 ± 143667.277  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDematerializeTest._Benchmark.benchmark_nonNotificationInstanceAfterDispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDematerializeTest._Benchmark.benchmark_nonNotificationInstanceAfterDispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1240920.217 ops/s
# Warmup Iteration   2: 4680306.375 ops/s
# Warmup Iteration   3: 7084550.673 ops/s
# Warmup Iteration   4: 6645134.688 ops/s
# Warmup Iteration   5: 6903250.620 ops/s
# Warmup Iteration   6: 6695545.971 ops/s
# Warmup Iteration   7: 6564785.954 ops/s
# Warmup Iteration   8: 6830397.664 ops/s
# Warmup Iteration   9: 6620535.486 ops/s
# Warmup Iteration  10: 7010048.510 ops/s
# Warmup Iteration  11: 6866412.298 ops/s
# Warmup Iteration  12: 6666772.833 ops/s
# Warmup Iteration  13: 6782537.271 ops/s
# Warmup Iteration  14: 6851660.365 ops/s
# Warmup Iteration  15: 6590261.062 ops/s
# Warmup Iteration  16: 6978559.716 ops/s
# Warmup Iteration  17: 6717921.035 ops/s
# Warmup Iteration  18: 6846484.535 ops/s
# Warmup Iteration  19: 7009255.145 ops/s
# Warmup Iteration  20: 6746750.167 ops/s
# Warmup Iteration  21: 7012067.509 ops/s
# Warmup Iteration  22: 6901446.967 ops/s
# Warmup Iteration  23: 7011094.950 ops/s
# Warmup Iteration  24: 6812829.188 ops/s
# Warmup Iteration  25: 6883666.288 ops/s
# Warmup Iteration  26: 6894867.778 ops/s
# Warmup Iteration  27: 6883938.131 ops/s
# Warmup Iteration  28: 6873937.964 ops/s
# Warmup Iteration  29: 6858090.861 ops/s
# Warmup Iteration  30: 6921954.276 ops/s
Iteration   1: 6768450.026 ops/s
Iteration   2: 6934121.996 ops/s
Iteration   3: 7030487.758 ops/s
Iteration   4: 6579226.342 ops/s
Iteration   5: 6917402.141 ops/s
Iteration   6: 6705379.422 ops/s
Iteration   7: 6854824.307 ops/s
Iteration   8: 6965433.864 ops/s
Iteration   9: 6713956.680 ops/s
Iteration  10: 6839140.008 ops/s
Iteration  11: 6763918.396 ops/s
Iteration  12: 6875557.916 ops/s
Iteration  13: 6726450.693 ops/s
Iteration  14: 6970331.969 ops/s
Iteration  15: 6966556.277 ops/s
Iteration  16: 6606807.727 ops/s
Iteration  17: 7104071.511 ops/s
Iteration  18: 6907750.094 ops/s
Iteration  19: 6823049.916 ops/s
Iteration  20: 6920108.590 ops/s
Iteration  21: 6682684.867 ops/s
Iteration  22: 7073665.444 ops/s
Iteration  23: 6707221.767 ops/s
Iteration  24: 6829803.820 ops/s
Iteration  25: 6975503.993 ops/s
Iteration  26: 6857180.082 ops/s
Iteration  27: 6863049.592 ops/s
Iteration  28: 6918269.260 ops/s
Iteration  29: 6893737.826 ops/s
Iteration  30: 6953784.969 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableDematerializeTest._Benchmark.benchmark_nonNotificationInstanceAfterDispose":
  6857597.575 ±(99.9%) 86980.232 ops/s [Average]
  (min, avg, max) = (6579226.342, 6857597.575, 7104071.511), stdev = 130187.927
  CI (99.9%): [6770617.343, 6944577.807] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            Mode  Cnt        Score       Error  Units
FlowableDematerializeTest._Benchmark.benchmark_nonNotificationInstanceAfterDispose  thrpt   30  6857597.575 ± 86980.232  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_veryLongTake$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_veryLongTake

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 371589.099 ops/s
# Warmup Iteration   2: 1397422.603 ops/s
# Warmup Iteration   3: 1702569.413 ops/s
# Warmup Iteration   4: 1706802.450 ops/s
# Warmup Iteration   5: 2084217.972 ops/s
# Warmup Iteration   6: 1950490.639 ops/s
# Warmup Iteration   7: 2000748.951 ops/s
# Warmup Iteration   8: 2050061.135 ops/s
# Warmup Iteration   9: 1964476.392 ops/s
# Warmup Iteration  10: 2078085.062 ops/s
# Warmup Iteration  11: 2017269.321 ops/s
# Warmup Iteration  12: 1969858.111 ops/s
# Warmup Iteration  13: 2005388.042 ops/s
# Warmup Iteration  14: 2005826.245 ops/s
# Warmup Iteration  15: 2064499.322 ops/s
# Warmup Iteration  16: 1989523.378 ops/s
# Warmup Iteration  17: 1976714.471 ops/s
# Warmup Iteration  18: 2114157.250 ops/s
# Warmup Iteration  19: 2066165.712 ops/s
# Warmup Iteration  20: 1974189.760 ops/s
# Warmup Iteration  21: 2055437.924 ops/s
# Warmup Iteration  22: 1989768.160 ops/s
# Warmup Iteration  23: 2079139.412 ops/s
# Warmup Iteration  24: 2085703.398 ops/s
# Warmup Iteration  25: 1924667.391 ops/s
# Warmup Iteration  26: 2011545.309 ops/s
# Warmup Iteration  27: 2085897.980 ops/s
# Warmup Iteration  28: 1682148.416 ops/s
# Warmup Iteration  29: 1875438.084 ops/s
# Warmup Iteration  30: 2061451.627 ops/s
Iteration   1: 1969588.926 ops/s
Iteration   2: 2081569.234 ops/s
Iteration   3: 1957060.734 ops/s
Iteration   4: 2007104.838 ops/s
Iteration   5: 2076244.499 ops/s
Iteration   6: 1951987.108 ops/s
Iteration   7: 2058630.492 ops/s
Iteration   8: 1999824.757 ops/s
Iteration   9: 2024034.927 ops/s
Iteration  10: 1951275.308 ops/s
Iteration  11: 2022896.754 ops/s
Iteration  12: 2025631.471 ops/s
Iteration  13: 1983067.373 ops/s
Iteration  14: 2002788.056 ops/s
Iteration  15: 2020187.368 ops/s
Iteration  16: 1886989.933 ops/s
Iteration  17: 2033492.774 ops/s
Iteration  18: 1906217.621 ops/s
Iteration  19: 2076083.739 ops/s
Iteration  20: 2042551.325 ops/s
Iteration  21: 1953924.610 ops/s
Iteration  22: 2060641.469 ops/s
Iteration  23: 1986820.944 ops/s
Iteration  24: 1984400.166 ops/s
Iteration  25: 2077154.672 ops/s
Iteration  26: 1957450.261 ops/s
Iteration  27: 2043388.131 ops/s
Iteration  28: 2000053.698 ops/s
Iteration  29: 2004369.692 ops/s
Iteration  30: 2012305.840 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_veryLongTake":
  2005257.891 ±(99.9%) 33140.946 ops/s [Average]
  (min, avg, max) = (1886989.933, 2005257.891, 2081569.234), stdev = 49603.811
  CI (99.9%): [1972116.945, 2038398.836] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
FlowableConcatTest._Benchmark.benchmark_veryLongTake  thrpt   30  2005257.891 ± 33140.946  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLongTest._Benchmark.benchmark_slowPathCancelBeforeComplete$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLongTest._Benchmark.benchmark_slowPathCancelBeforeComplete

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 660034.125 ops/s
# Warmup Iteration   2: 2637216.922 ops/s
# Warmup Iteration   3: 3791384.498 ops/s
# Warmup Iteration   4: 3518076.310 ops/s
# Warmup Iteration   5: 3762452.012 ops/s
# Warmup Iteration   6: 3656346.968 ops/s
# Warmup Iteration   7: 3512971.327 ops/s
# Warmup Iteration   8: 3220286.895 ops/s
# Warmup Iteration   9: 3711190.714 ops/s
# Warmup Iteration  10: 3640080.732 ops/s
# Warmup Iteration  11: 3777085.694 ops/s
# Warmup Iteration  12: 3615814.301 ops/s
# Warmup Iteration  13: 3752615.983 ops/s
# Warmup Iteration  14: 3682685.238 ops/s
# Warmup Iteration  15: 3823175.646 ops/s
# Warmup Iteration  16: 3700120.621 ops/s
# Warmup Iteration  17: 3589058.800 ops/s
# Warmup Iteration  18: 3812944.515 ops/s
# Warmup Iteration  19: 3635342.626 ops/s
# Warmup Iteration  20: 3655597.861 ops/s
# Warmup Iteration  21: 3702502.599 ops/s
# Warmup Iteration  22: 3564955.992 ops/s
# Warmup Iteration  23: 3804138.186 ops/s
# Warmup Iteration  24: 3558514.490 ops/s
# Warmup Iteration  25: 3529340.353 ops/s
# Warmup Iteration  26: 3701937.042 ops/s
# Warmup Iteration  27: 3778806.556 ops/s
# Warmup Iteration  28: 3552884.650 ops/s
# Warmup Iteration  29: 3876155.999 ops/s
# Warmup Iteration  30: 3724757.784 ops/s
Iteration   1: 3702837.055 ops/s
Iteration   2: 3769775.893 ops/s
Iteration   3: 3672734.552 ops/s
Iteration   4: 3777627.617 ops/s
Iteration   5: 3794260.251 ops/s
Iteration   6: 3618795.108 ops/s
Iteration   7: 3783576.429 ops/s
Iteration   8: 3566496.344 ops/s
Iteration   9: 3793248.698 ops/s
Iteration  10: 3813468.299 ops/s
Iteration  11: 3555614.941 ops/s
Iteration  12: 3833390.753 ops/s
Iteration  13: 3642207.386 ops/s
Iteration  14: 3653486.271 ops/s
Iteration  15: 3603246.312 ops/s
Iteration  16: 3645022.071 ops/s
Iteration  17: 3813426.475 ops/s
Iteration  18: 3609754.456 ops/s
Iteration  19: 3725453.364 ops/s
Iteration  20: 3825349.032 ops/s
Iteration  21: 3593818.166 ops/s
Iteration  22: 3732727.552 ops/s
Iteration  23: 3709091.682 ops/s
Iteration  24: 3779061.325 ops/s
Iteration  25: 3677807.654 ops/s
Iteration  26: 3682823.530 ops/s
Iteration  27: 3762701.351 ops/s
Iteration  28: 3552440.259 ops/s
Iteration  29: 3811545.680 ops/s
Iteration  30: 3799395.304 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLongTest._Benchmark.benchmark_slowPathCancelBeforeComplete":
  3710039.460 ±(99.9%) 59741.300 ops/s [Average]
  (min, avg, max) = (3552440.259, 3710039.460, 3833390.753), stdev = 89417.972
  CI (99.9%): [3650298.160, 3769780.760] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score       Error  Units
FlowableRangeLongTest._Benchmark.benchmark_slowPathCancelBeforeComplete  thrpt   30  3710039.460 ± 59741.300  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerateTest._Benchmark.benchmark_statefulBiconsumer$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerateTest._Benchmark.benchmark_statefulBiconsumer

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 770105.109 ops/s
# Warmup Iteration   2: 2854758.257 ops/s
# Warmup Iteration   3: 2996201.055 ops/s
# Warmup Iteration   4: 3439808.285 ops/s
# Warmup Iteration   5: 3461194.202 ops/s
# Warmup Iteration   6: 3522215.538 ops/s
# Warmup Iteration   7: 3336332.427 ops/s
# Warmup Iteration   8: 3455181.787 ops/s
# Warmup Iteration   9: 3379084.246 ops/s
# Warmup Iteration  10: 3531986.329 ops/s
# Warmup Iteration  11: 3345355.794 ops/s
# Warmup Iteration  12: 3568539.598 ops/s
# Warmup Iteration  13: 3411594.852 ops/s
# Warmup Iteration  14: 3566638.483 ops/s
# Warmup Iteration  15: 3377844.946 ops/s
# Warmup Iteration  16: 3529139.745 ops/s
# Warmup Iteration  17: 3471775.605 ops/s
# Warmup Iteration  18: 3352930.717 ops/s
# Warmup Iteration  19: 3512834.058 ops/s
# Warmup Iteration  20: 3432463.783 ops/s
# Warmup Iteration  21: 3513898.374 ops/s
# Warmup Iteration  22: 3507297.778 ops/s
# Warmup Iteration  23: 2817219.040 ops/s
# Warmup Iteration  24: 3342108.423 ops/s
# Warmup Iteration  25: 3570645.419 ops/s
# Warmup Iteration  26: 3383920.961 ops/s
# Warmup Iteration  27: 3515036.235 ops/s
# Warmup Iteration  28: 3390658.342 ops/s
# Warmup Iteration  29: 3498321.793 ops/s
# Warmup Iteration  30: 3449980.973 ops/s
Iteration   1: 3343237.769 ops/s
Iteration   2: 3476870.192 ops/s
Iteration   3: 3436839.428 ops/s
Iteration   4: 3606765.949 ops/s
Iteration   5: 3372117.941 ops/s
Iteration   6: 3640428.344 ops/s
Iteration   7: 3385282.404 ops/s
Iteration   8: 3499893.748 ops/s
Iteration   9: 3589395.213 ops/s
Iteration  10: 3484159.475 ops/s
Iteration  11: 3470839.897 ops/s
Iteration  12: 3413147.602 ops/s
Iteration  13: 3386725.723 ops/s
Iteration  14: 3654155.483 ops/s
Iteration  15: 3461347.508 ops/s
Iteration  16: 3466306.487 ops/s
Iteration  17: 3417660.604 ops/s
Iteration  18: 3595407.191 ops/s
Iteration  19: 3453451.395 ops/s
Iteration  20: 3589790.684 ops/s
Iteration  21: 3382294.043 ops/s
Iteration  22: 3484758.410 ops/s
Iteration  23: 3551877.647 ops/s
Iteration  24: 3365359.045 ops/s
Iteration  25: 3491192.583 ops/s
Iteration  26: 3616059.312 ops/s
Iteration  27: 3395737.512 ops/s
Iteration  28: 3440924.386 ops/s
Iteration  29: 3446985.634 ops/s
Iteration  30: 3501618.256 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerateTest._Benchmark.benchmark_statefulBiconsumer":
  3480687.662 ±(99.9%) 58998.569 ops/s [Average]
  (min, avg, max) = (3343237.769, 3480687.662, 3654155.483), stdev = 88306.287
  CI (99.9%): [3421689.093, 3539686.231] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
FlowableGenerateTest._Benchmark.benchmark_statefulBiconsumer  thrpt   30  3480687.662 ± 58998.569  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLongTest._Benchmark.benchmark_conditionalFastPathCancelExact$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLongTest._Benchmark.benchmark_conditionalFastPathCancelExact

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 954945.578 ops/s
# Warmup Iteration   2: 3087921.752 ops/s
# Warmup Iteration   3: 3537451.331 ops/s
# Warmup Iteration   4: 3992841.109 ops/s
# Warmup Iteration   5: 4083457.533 ops/s
# Warmup Iteration   6: 3932497.269 ops/s
# Warmup Iteration   7: 4081993.370 ops/s
# Warmup Iteration   8: 3989086.996 ops/s
# Warmup Iteration   9: 4015572.932 ops/s
# Warmup Iteration  10: 4014116.747 ops/s
# Warmup Iteration  11: 3851068.524 ops/s
# Warmup Iteration  12: 4132142.351 ops/s
# Warmup Iteration  13: 3853930.916 ops/s
# Warmup Iteration  14: 4088481.261 ops/s
# Warmup Iteration  15: 4042820.565 ops/s
# Warmup Iteration  16: 4019682.094 ops/s
# Warmup Iteration  17: 4107415.165 ops/s
# Warmup Iteration  18: 3957820.903 ops/s
# Warmup Iteration  19: 3989556.550 ops/s
# Warmup Iteration  20: 3939208.646 ops/s
# Warmup Iteration  21: 3976886.379 ops/s
# Warmup Iteration  22: 4052896.815 ops/s
# Warmup Iteration  23: 3951213.489 ops/s
# Warmup Iteration  24: 3910290.010 ops/s
# Warmup Iteration  25: 4079257.648 ops/s
# Warmup Iteration  26: 3971796.108 ops/s
# Warmup Iteration  27: 4143387.635 ops/s
# Warmup Iteration  28: 3930107.780 ops/s
# Warmup Iteration  29: 4009048.396 ops/s
# Warmup Iteration  30: 3984162.382 ops/s
Iteration   1: 3961852.925 ops/s
Iteration   2: 3911134.531 ops/s
Iteration   3: 4085981.054 ops/s
Iteration   4: 3963954.823 ops/s
Iteration   5: 4020849.022 ops/s
Iteration   6: 3995419.650 ops/s
Iteration   7: 4101107.549 ops/s
Iteration   8: 3938486.254 ops/s
Iteration   9: 3975571.168 ops/s
Iteration  10: 4124222.698 ops/s
Iteration  11: 3960393.057 ops/s
Iteration  12: 4038788.412 ops/s
Iteration  13: 3934574.888 ops/s
Iteration  14: 3882530.777 ops/s
Iteration  15: 4153320.241 ops/s
Iteration  16: 4004476.578 ops/s
Iteration  17: 3935245.233 ops/s
Iteration  18: 4129309.983 ops/s
Iteration  19: 3942026.407 ops/s
Iteration  20: 3965576.517 ops/s
Iteration  21: 3987174.011 ops/s
Iteration  22: 3986148.015 ops/s
Iteration  23: 4080190.120 ops/s
Iteration  24: 3909804.696 ops/s
Iteration  25: 4106296.284 ops/s
Iteration  26: 4073136.917 ops/s
Iteration  27: 3914135.761 ops/s
Iteration  28: 4078875.701 ops/s
Iteration  29: 3898412.175 ops/s
Iteration  30: 3869432.041 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLongTest._Benchmark.benchmark_conditionalFastPathCancelExact":
  3997614.250 ±(99.9%) 54226.108 ops/s [Average]
  (min, avg, max) = (3869432.041, 3997614.250, 4153320.241), stdev = 81163.092
  CI (99.9%): [3943388.142, 4051840.358] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score       Error  Units
FlowableRangeLongTest._Benchmark.benchmark_conditionalFastPathCancelExact  thrpt   30  3997614.250 ± 54226.108  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFromStreamTest._Benchmark.benchmark_take$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFromStreamTest._Benchmark.benchmark_take

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 217617.583 ops/s
# Warmup Iteration   2: 801148.069 ops/s
# Warmup Iteration   3: 1897938.954 ops/s
# Warmup Iteration   4: 1953317.029 ops/s
# Warmup Iteration   5: 1931000.605 ops/s
# Warmup Iteration   6: 1702188.572 ops/s
# Warmup Iteration   7: 1981227.914 ops/s
# Warmup Iteration   8: 1946143.946 ops/s
# Warmup Iteration   9: 2046240.909 ops/s
# Warmup Iteration  10: 1985877.025 ops/s
# Warmup Iteration  11: 2025191.796 ops/s
# Warmup Iteration  12: 1999320.160 ops/s
# Warmup Iteration  13: 1917582.947 ops/s
# Warmup Iteration  14: 2080494.844 ops/s
# Warmup Iteration  15: 1974374.705 ops/s
# Warmup Iteration  16: 2001359.297 ops/s
# Warmup Iteration  17: 2021127.090 ops/s
# Warmup Iteration  18: 1615158.746 ops/s
# Warmup Iteration  19: 2006482.933 ops/s
# Warmup Iteration  20: 2003729.734 ops/s
# Warmup Iteration  21: 2001662.345 ops/s
# Warmup Iteration  22: 1982593.721 ops/s
# Warmup Iteration  23: 2014789.447 ops/s
# Warmup Iteration  24: 2018933.514 ops/s
# Warmup Iteration  25: 1987133.856 ops/s
# Warmup Iteration  26: 1999205.635 ops/s
# Warmup Iteration  27: 1965373.592 ops/s
# Warmup Iteration  28: 1985435.795 ops/s
# Warmup Iteration  29: 2103205.168 ops/s
# Warmup Iteration  30: 1994966.925 ops/s
Iteration   1: 2019080.944 ops/s
Iteration   2: 1891923.122 ops/s
Iteration   3: 2034135.574 ops/s
Iteration   4: 2056945.873 ops/s
Iteration   5: 1958873.225 ops/s
Iteration   6: 1992416.411 ops/s
Iteration   7: 2003013.921 ops/s
Iteration   8: 2008385.506 ops/s
Iteration   9: 2007614.021 ops/s
Iteration  10: 1989441.055 ops/s
Iteration  11: 2100409.693 ops/s
Iteration  12: 1929797.555 ops/s
Iteration  13: 2003839.048 ops/s
Iteration  14: 1966162.727 ops/s
Iteration  15: 1950444.014 ops/s
Iteration  16: 2026918.570 ops/s
Iteration  17: 2003129.422 ops/s
Iteration  18: 2028025.202 ops/s
Iteration  19: 1964695.825 ops/s
Iteration  20: 2014704.201 ops/s
Iteration  21: 2002994.994 ops/s
Iteration  22: 1995308.546 ops/s
Iteration  23: 2050754.910 ops/s
Iteration  24: 1993587.846 ops/s
Iteration  25: 1922698.084 ops/s
Iteration  26: 2092232.378 ops/s
Iteration  27: 2032074.459 ops/s
Iteration  28: 1974729.017 ops/s
Iteration  29: 2042527.529 ops/s
Iteration  30: 1958596.001 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableFromStreamTest._Benchmark.benchmark_take":
  2000515.322 ±(99.9%) 30984.539 ops/s [Average]
  (min, avg, max) = (1891923.122, 2000515.322, 2100409.693), stdev = 46376.202
  CI (99.9%): [1969530.784, 2031499.861] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score       Error  Units
FlowableFromStreamTest._Benchmark.benchmark_take  thrpt   30  2000515.322 ± 30984.539  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_onErrorLate$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_onErrorLate

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 41654.921 ops/s
# Warmup Iteration   2: 146459.640 ops/s
# Warmup Iteration   3: 177259.308 ops/s
# Warmup Iteration   4: 175000.908 ops/s
# Warmup Iteration   5: 184450.704 ops/s
# Warmup Iteration   6: 172491.575 ops/s
# Warmup Iteration   7: 174325.273 ops/s
# Warmup Iteration   8: 177764.851 ops/s
# Warmup Iteration   9: 166046.443 ops/s
# Warmup Iteration  10: 175195.385 ops/s
# Warmup Iteration  11: 173726.573 ops/s
# Warmup Iteration  12: 185309.993 ops/s
# Warmup Iteration  13: 178183.398 ops/s
# Warmup Iteration  14: 180210.206 ops/s
# Warmup Iteration  15: 188830.513 ops/s
# Warmup Iteration  16: 179279.745 ops/s
# Warmup Iteration  17: 182266.368 ops/s
# Warmup Iteration  18: 191673.400 ops/s
# Warmup Iteration  19: 182382.048 ops/s
# Warmup Iteration  20: 193123.340 ops/s
# Warmup Iteration  21: 189784.324 ops/s
# Warmup Iteration  22: 191204.182 ops/s
# Warmup Iteration  23: 184736.482 ops/s
# Warmup Iteration  24: 188691.881 ops/s
# Warmup Iteration  25: 191293.617 ops/s
# Warmup Iteration  26: 194116.857 ops/s
# Warmup Iteration  27: 184904.237 ops/s
# Warmup Iteration  28: 181123.098 ops/s
# Warmup Iteration  29: 174690.419 ops/s
# Warmup Iteration  30: 190681.083 ops/s
Iteration   1: 193255.302 ops/s
Iteration   2: 189720.101 ops/s
Iteration   3: 198421.872 ops/s
Iteration   4: 183561.449 ops/s
Iteration   5: 185342.070 ops/s
Iteration   6: 192653.024 ops/s
Iteration   7: 184358.775 ops/s
Iteration   8: 194686.436 ops/s
Iteration   9: 186647.522 ops/s
Iteration  10: 198465.682 ops/s
Iteration  11: 185101.019 ops/s
Iteration  12: 193574.098 ops/s
Iteration  13: 196767.893 ops/s
Iteration  14: 185039.261 ops/s
Iteration  15: 193296.578 ops/s
Iteration  16: 184942.848 ops/s
Iteration  17: 194407.364 ops/s
Iteration  18: 193101.251 ops/s
Iteration  19: 184662.897 ops/s
Iteration  20: 191170.485 ops/s
Iteration  21: 187088.888 ops/s
Iteration  22: 191883.132 ops/s
Iteration  23: 185196.774 ops/s
Iteration  24: 190271.091 ops/s
Iteration  25: 183990.120 ops/s
Iteration  26: 194546.566 ops/s
Iteration  27: 187059.944 ops/s
Iteration  28: 184995.720 ops/s
Iteration  29: 195746.876 ops/s
Iteration  30: 183548.380 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_onErrorLate":
  189783.447 ±(99.9%) 3258.692 ops/s [Average]
  (min, avg, max) = (183548.380, 189783.447, 198465.682), stdev = 4877.457
  CI (99.9%): [186524.755, 193042.139] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
FlowableFlattenIterableTest._Benchmark.benchmark_onErrorLate  thrpt   30  189783.447 ± 3258.692  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_pollThrowsNoSubscribers$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_pollThrowsNoSubscribers

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 274613.710 ops/s
# Warmup Iteration   2: 1236546.600 ops/s
# Warmup Iteration   3: 1429107.015 ops/s
# Warmup Iteration   4: 1935449.355 ops/s
# Warmup Iteration   5: 1829604.505 ops/s
# Warmup Iteration   6: 1909580.316 ops/s
# Warmup Iteration   7: 1882516.428 ops/s
# Warmup Iteration   8: 1843646.162 ops/s
# Warmup Iteration   9: 1927864.062 ops/s
# Warmup Iteration  10: 1878829.951 ops/s
# Warmup Iteration  11: 1847386.416 ops/s
# Warmup Iteration  12: 1994871.122 ops/s
# Warmup Iteration  13: 1462896.322 ops/s
# Warmup Iteration  14: 1909529.116 ops/s
# Warmup Iteration  15: 1807518.502 ops/s
# Warmup Iteration  16: 1903763.672 ops/s
# Warmup Iteration  17: 1909160.858 ops/s
# Warmup Iteration  18: 1937160.060 ops/s
# Warmup Iteration  19: 1911149.061 ops/s
# Warmup Iteration  20: 1864893.371 ops/s
# Warmup Iteration  21: 1877192.083 ops/s
# Warmup Iteration  22: 1854743.412 ops/s
# Warmup Iteration  23: 1879333.515 ops/s
# Warmup Iteration  24: 1878273.938 ops/s
# Warmup Iteration  25: 1948425.839 ops/s
# Warmup Iteration  26: 1847618.132 ops/s
# Warmup Iteration  27: 1948029.035 ops/s
# Warmup Iteration  28: 1905099.670 ops/s
# Warmup Iteration  29: 1904857.603 ops/s
# Warmup Iteration  30: 1904395.777 ops/s
Iteration   1: 1872001.588 ops/s
Iteration   2: 1837847.658 ops/s
Iteration   3: 1981622.190 ops/s
Iteration   4: 1784599.455 ops/s
Iteration   5: 1928333.776 ops/s
Iteration   6: 1968841.608 ops/s
Iteration   7: 1809704.598 ops/s
Iteration   8: 1909837.242 ops/s
Iteration   9: 1895717.673 ops/s
Iteration  10: 1879029.606 ops/s
Iteration  11: 1914399.969 ops/s
Iteration  12: 1888987.251 ops/s
Iteration  13: 1824266.663 ops/s
Iteration  14: 1906394.520 ops/s
Iteration  15: 1891750.530 ops/s
Iteration  16: 1914240.107 ops/s
Iteration  17: 1903170.943 ops/s
Iteration  18: 1861151.752 ops/s
Iteration  19: 1931885.626 ops/s
Iteration  20: 1813377.927 ops/s
Iteration  21: 1845474.595 ops/s
Iteration  22: 1888010.574 ops/s
Iteration  23: 1910779.218 ops/s
Iteration  24: 1866558.883 ops/s
Iteration  25: 1897644.200 ops/s
Iteration  26: 1877317.613 ops/s
Iteration  27: 1931441.222 ops/s
Iteration  28: 1826544.477 ops/s
Iteration  29: 1909092.237 ops/s
Iteration  30: 1930117.679 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_pollThrowsNoSubscribers":
  1886671.379 ±(99.9%) 30943.664 ops/s [Average]
  (min, avg, max) = (1784599.455, 1886671.379, 1981622.190), stdev = 46315.023
  CI (99.9%): [1855727.715, 1917615.044] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
FlowablePublishTest._Benchmark.benchmark_pollThrowsNoSubscribers  thrpt   30  1886671.379 ± 30943.664  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFromStreamTest._Benchmark.benchmark_manyBackpressuredConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFromStreamTest._Benchmark.benchmark_manyBackpressuredConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 230991.053 ops/s
# Warmup Iteration   2: 1495704.197 ops/s
# Warmup Iteration   3: 2348071.844 ops/s
# Warmup Iteration   4: 2018591.309 ops/s
# Warmup Iteration   5: 2408562.243 ops/s
# Warmup Iteration   6: 2507344.767 ops/s
# Warmup Iteration   7: 2399306.988 ops/s
# Warmup Iteration   8: 2520440.916 ops/s
# Warmup Iteration   9: 2493225.012 ops/s
# Warmup Iteration  10: 2490844.502 ops/s
# Warmup Iteration  11: 2416285.016 ops/s
# Warmup Iteration  12: 2462587.217 ops/s
# Warmup Iteration  13: 2576159.148 ops/s
# Warmup Iteration  14: 2520927.906 ops/s
# Warmup Iteration  15: 2406341.040 ops/s
# Warmup Iteration  16: 2578772.057 ops/s
# Warmup Iteration  17: 2326578.216 ops/s
# Warmup Iteration  18: 2573690.008 ops/s
# Warmup Iteration  19: 2397637.529 ops/s
# Warmup Iteration  20: 2491046.241 ops/s
# Warmup Iteration  21: 2605837.486 ops/s
# Warmup Iteration  22: 2514247.361 ops/s
# Warmup Iteration  23: 2580559.809 ops/s
# Warmup Iteration  24: 2383516.037 ops/s
# Warmup Iteration  25: 2523454.620 ops/s
# Warmup Iteration  26: 2432146.634 ops/s
# Warmup Iteration  27: 2425439.179 ops/s
# Warmup Iteration  28: 2484832.612 ops/s
# Warmup Iteration  29: 2469242.029 ops/s
# Warmup Iteration  30: 2499701.130 ops/s
Iteration   1: 2430849.784 ops/s
Iteration   2: 2442078.115 ops/s
Iteration   3: 2461320.057 ops/s
Iteration   4: 2435537.191 ops/s
Iteration   5: 2507914.326 ops/s
Iteration   6: 2418478.893 ops/s
Iteration   7: 2489130.568 ops/s
Iteration   8: 2496458.674 ops/s
Iteration   9: 2433784.711 ops/s
Iteration  10: 2467053.475 ops/s
Iteration  11: 2440539.018 ops/s
Iteration  12: 2538935.031 ops/s
Iteration  13: 2572223.585 ops/s
Iteration  14: 2399264.581 ops/s
Iteration  15: 2459314.989 ops/s
Iteration  16: 2539884.512 ops/s
Iteration  17: 2431048.921 ops/s
Iteration  18: 2496729.711 ops/s
Iteration  19: 2430508.598 ops/s
Iteration  20: 2570408.867 ops/s
Iteration  21: 2462588.180 ops/s
Iteration  22: 2441192.639 ops/s
Iteration  23: 2541254.533 ops/s
Iteration  24: 2470250.564 ops/s
Iteration  25: 2424469.176 ops/s
Iteration  26: 2541706.133 ops/s
Iteration  27: 2415521.053 ops/s
Iteration  28: 2464875.863 ops/s
Iteration  29: 2456064.577 ops/s
Iteration  30: 2507293.515 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableFromStreamTest._Benchmark.benchmark_manyBackpressuredConditional":
  2472889.328 ±(99.9%) 32234.006 ops/s [Average]
  (min, avg, max) = (2399264.581, 2472889.328, 2572223.585), stdev = 48246.347
  CI (99.9%): [2440655.321, 2505123.334] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score       Error  Units
FlowableFromStreamTest._Benchmark.benchmark_manyBackpressuredConditional  thrpt   30  2472889.328 ± 32234.006  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFromStreamTest._Benchmark.benchmark_takeConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFromStreamTest._Benchmark.benchmark_takeConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 130937.658 ops/s
# Warmup Iteration   2: 913843.663 ops/s
# Warmup Iteration   3: 1451626.957 ops/s
# Warmup Iteration   4: 1959115.970 ops/s
# Warmup Iteration   5: 1967642.724 ops/s
# Warmup Iteration   6: 2037257.195 ops/s
# Warmup Iteration   7: 2029896.451 ops/s
# Warmup Iteration   8: 1628269.562 ops/s
# Warmup Iteration   9: 1994059.143 ops/s
# Warmup Iteration  10: 2028123.289 ops/s
# Warmup Iteration  11: 2042523.434 ops/s
# Warmup Iteration  12: 1946548.343 ops/s
# Warmup Iteration  13: 2047225.448 ops/s
# Warmup Iteration  14: 1962530.663 ops/s
# Warmup Iteration  15: 2074288.212 ops/s
# Warmup Iteration  16: 2008713.810 ops/s
# Warmup Iteration  17: 1982751.664 ops/s
# Warmup Iteration  18: 2055762.912 ops/s
# Warmup Iteration  19: 1953154.103 ops/s
# Warmup Iteration  20: 2058131.452 ops/s
# Warmup Iteration  21: 1963305.782 ops/s
# Warmup Iteration  22: 1993651.606 ops/s
# Warmup Iteration  23: 2079263.849 ops/s
# Warmup Iteration  24: 1980818.034 ops/s
# Warmup Iteration  25: 1952559.070 ops/s
# Warmup Iteration  26: 2106256.206 ops/s
# Warmup Iteration  27: 1957333.504 ops/s
# Warmup Iteration  28: 2086769.462 ops/s
# Warmup Iteration  29: 2021727.555 ops/s
# Warmup Iteration  30: 1991928.438 ops/s
Iteration   1: 1985274.785 ops/s
Iteration   2: 2013864.409 ops/s
Iteration   3: 2079514.986 ops/s
Iteration   4: 1985117.704 ops/s
Iteration   5: 2058515.675 ops/s
Iteration   6: 2059985.530 ops/s
Iteration   7: 1961876.664 ops/s
Iteration   8: 2041153.706 ops/s
Iteration   9: 1996949.562 ops/s
Iteration  10: 2061129.278 ops/s
Iteration  11: 1945608.218 ops/s
Iteration  12: 2034531.429 ops/s
Iteration  13: 2038694.088 ops/s
Iteration  14: 1982638.220 ops/s
Iteration  15: 1995769.467 ops/s
Iteration  16: 2067591.944 ops/s
Iteration  17: 2100109.225 ops/s
Iteration  18: 2006423.699 ops/s
Iteration  19: 2014557.986 ops/s
Iteration  20: 2002454.438 ops/s
Iteration  21: 2061437.454 ops/s
Iteration  22: 1977877.866 ops/s
Iteration  23: 1975990.058 ops/s
Iteration  24: 2062211.993 ops/s
Iteration  25: 1957263.138 ops/s
Iteration  26: 2111104.745 ops/s
Iteration  27: 1960966.682 ops/s
Iteration  28: 2040819.576 ops/s
Iteration  29: 2021624.750 ops/s
Iteration  30: 1989920.098 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableFromStreamTest._Benchmark.benchmark_takeConditional":
  2019699.246 ±(99.9%) 29538.144 ops/s [Average]
  (min, avg, max) = (1945608.218, 2019699.246, 2111104.745), stdev = 44211.307
  CI (99.9%): [1990161.101, 2049237.390] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
FlowableFromStreamTest._Benchmark.benchmark_takeConditional  thrpt   30  2019699.246 ± 29538.144  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFromStreamTest._Benchmark.benchmark_closeCalledOnCancelConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFromStreamTest._Benchmark.benchmark_closeCalledOnCancelConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 400659.627 ops/s
# Warmup Iteration   2: 1537939.971 ops/s
# Warmup Iteration   3: 2462314.468 ops/s
# Warmup Iteration   4: 2693419.842 ops/s
# Warmup Iteration   5: 2832646.318 ops/s
# Warmup Iteration   6: 2711715.100 ops/s
# Warmup Iteration   7: 2772045.409 ops/s
# Warmup Iteration   8: 2797621.666 ops/s
# Warmup Iteration   9: 2740054.846 ops/s
# Warmup Iteration  10: 2833475.314 ops/s
# Warmup Iteration  11: 2773989.420 ops/s
# Warmup Iteration  12: 2757158.023 ops/s
# Warmup Iteration  13: 2845133.313 ops/s
# Warmup Iteration  14: 2760004.543 ops/s
# Warmup Iteration  15: 2796050.116 ops/s
# Warmup Iteration  16: 2707227.338 ops/s
# Warmup Iteration  17: 2831358.600 ops/s
# Warmup Iteration  18: 2889642.373 ops/s
# Warmup Iteration  19: 2763213.680 ops/s
# Warmup Iteration  20: 2819036.677 ops/s
# Warmup Iteration  21: 2838437.692 ops/s
# Warmup Iteration  22: 2808774.764 ops/s
# Warmup Iteration  23: 2864418.437 ops/s
# Warmup Iteration  24: 2874677.583 ops/s
# Warmup Iteration  25: 2710551.157 ops/s
# Warmup Iteration  26: 2864264.705 ops/s
# Warmup Iteration  27: 2774966.174 ops/s
# Warmup Iteration  28: 2865580.521 ops/s
# Warmup Iteration  29: 2754299.433 ops/s
# Warmup Iteration  30: 2787340.956 ops/s
Iteration   1: 2877954.163 ops/s
Iteration   2: 2835067.261 ops/s
Iteration   3: 2692984.062 ops/s
Iteration   4: 2910712.019 ops/s
Iteration   5: 2881866.072 ops/s
Iteration   6: 2794107.823 ops/s
Iteration   7: 2923819.422 ops/s
Iteration   8: 2752744.371 ops/s
Iteration   9: 2838740.983 ops/s
Iteration  10: 2698952.341 ops/s
Iteration  11: 2863112.612 ops/s
Iteration  12: 2919674.177 ops/s
Iteration  13: 2723254.274 ops/s
Iteration  14: 2826833.399 ops/s
Iteration  15: 2874719.867 ops/s
Iteration  16: 2784463.369 ops/s
Iteration  17: 2839461.558 ops/s
Iteration  18: 2707776.318 ops/s
Iteration  19: 2864479.947 ops/s
Iteration  20: 2835688.739 ops/s
Iteration  21: 2773430.476 ops/s
Iteration  22: 2913659.979 ops/s
Iteration  23: 2769225.410 ops/s
Iteration  24: 2867867.558 ops/s
Iteration  25: 2791929.109 ops/s
Iteration  26: 2740743.809 ops/s
Iteration  27: 2838710.751 ops/s
Iteration  28: 2765442.427 ops/s
Iteration  29: 2819568.067 ops/s
Iteration  30: 2761775.833 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableFromStreamTest._Benchmark.benchmark_closeCalledOnCancelConditional":
  2816292.206 ±(99.9%) 45175.791 ops/s [Average]
  (min, avg, max) = (2692984.062, 2816292.206, 2923819.422), stdev = 67617.002
  CI (99.9%): [2771116.415, 2861467.997] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score       Error  Units
FlowableFromStreamTest._Benchmark.benchmark_closeCalledOnCancelConditional  thrpt   30  2816292.206 ± 45175.791  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFromStreamTest._Benchmark.benchmark_manyBackpressured$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFromStreamTest._Benchmark.benchmark_manyBackpressured

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 344371.885 ops/s
# Warmup Iteration   2: 1261612.815 ops/s
# Warmup Iteration   3: 2174922.182 ops/s
# Warmup Iteration   4: 2305220.379 ops/s
# Warmup Iteration   5: 2690313.585 ops/s
# Warmup Iteration   6: 2635135.326 ops/s
# Warmup Iteration   7: 2784877.240 ops/s
# Warmup Iteration   8: 2712011.239 ops/s
# Warmup Iteration   9: 2694208.205 ops/s
# Warmup Iteration  10: 2762539.627 ops/s
# Warmup Iteration  11: 2614453.670 ops/s
# Warmup Iteration  12: 2841115.233 ops/s
# Warmup Iteration  13: 2808987.419 ops/s
# Warmup Iteration  14: 2675048.296 ops/s
# Warmup Iteration  15: 2827834.943 ops/s
# Warmup Iteration  16: 2651397.449 ops/s
# Warmup Iteration  17: 2723995.160 ops/s
# Warmup Iteration  18: 2786778.373 ops/s
# Warmup Iteration  19: 2685875.483 ops/s
# Warmup Iteration  20: 2726381.905 ops/s
# Warmup Iteration  21: 2811987.734 ops/s
# Warmup Iteration  22: 2655767.948 ops/s
# Warmup Iteration  23: 2841727.693 ops/s
# Warmup Iteration  24: 2644811.584 ops/s
# Warmup Iteration  25: 2687811.931 ops/s
# Warmup Iteration  26: 2824718.166 ops/s
# Warmup Iteration  27: 2748816.542 ops/s
# Warmup Iteration  28: 2648676.564 ops/s
# Warmup Iteration  29: 2801645.643 ops/s
# Warmup Iteration  30: 2675709.410 ops/s
Iteration   1: 2742475.546 ops/s
Iteration   2: 2743574.531 ops/s
Iteration   3: 2797528.845 ops/s
Iteration   4: 2706173.650 ops/s
Iteration   5: 2779701.372 ops/s
Iteration   6: 2723487.715 ops/s
Iteration   7: 2747796.313 ops/s
Iteration   8: 2740468.295 ops/s
Iteration   9: 2848196.812 ops/s
Iteration  10: 2669720.582 ops/s
Iteration  11: 2862996.955 ops/s
Iteration  12: 2824239.772 ops/s
Iteration  13: 2692876.407 ops/s
Iteration  14: 2830968.572 ops/s
Iteration  15: 2782279.532 ops/s
Iteration  16: 2659565.699 ops/s
Iteration  17: 2845107.372 ops/s
Iteration  18: 2789231.266 ops/s
Iteration  19: 2672307.793 ops/s
Iteration  20: 2904434.618 ops/s
Iteration  21: 2678987.273 ops/s
Iteration  22: 2860178.914 ops/s
Iteration  23: 2746388.218 ops/s
Iteration  24: 2766656.387 ops/s
Iteration  25: 2667789.916 ops/s
Iteration  26: 2748327.679 ops/s
Iteration  27: 2812468.545 ops/s
Iteration  28: 2643987.327 ops/s
Iteration  29: 2809938.824 ops/s
Iteration  30: 2703831.919 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableFromStreamTest._Benchmark.benchmark_manyBackpressured":
  2760056.222 ±(99.9%) 46735.138 ops/s [Average]
  (min, avg, max) = (2643987.327, 2760056.222, 2904434.618), stdev = 69950.960
  CI (99.9%): [2713321.083, 2806791.360] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
FlowableFromStreamTest._Benchmark.benchmark_manyBackpressured  thrpt   30  2760056.222 ± 46735.138  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLongTest._Benchmark.benchmark_fusedClearIsEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLongTest._Benchmark.benchmark_fusedClearIsEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2586687.373 ops/s
# Warmup Iteration   2: 7074644.609 ops/s
# Warmup Iteration   3: 7196739.618 ops/s
# Warmup Iteration   4: 9093347.885 ops/s
# Warmup Iteration   5: 8746007.612 ops/s
# Warmup Iteration   6: 8895331.201 ops/s
# Warmup Iteration   7: 8588387.700 ops/s
# Warmup Iteration   8: 8998688.196 ops/s
# Warmup Iteration   9: 8888336.160 ops/s
# Warmup Iteration  10: 8509259.449 ops/s
# Warmup Iteration  11: 8692601.906 ops/s
# Warmup Iteration  12: 8647812.872 ops/s
# Warmup Iteration  13: 8519135.755 ops/s
# Warmup Iteration  14: 8983225.458 ops/s
# Warmup Iteration  15: 8576494.882 ops/s
# Warmup Iteration  16: 8835773.965 ops/s
# Warmup Iteration  17: 8550666.161 ops/s
# Warmup Iteration  18: 8721138.649 ops/s
# Warmup Iteration  19: 9141738.554 ops/s
# Warmup Iteration  20: 8486981.005 ops/s
# Warmup Iteration  21: 8993768.479 ops/s
# Warmup Iteration  22: 8444691.796 ops/s
# Warmup Iteration  23: 8586818.821 ops/s
# Warmup Iteration  24: 8641399.980 ops/s
# Warmup Iteration  25: 8589608.601 ops/s
# Warmup Iteration  26: 8558331.891 ops/s
# Warmup Iteration  27: 9059250.803 ops/s
# Warmup Iteration  28: 8823658.425 ops/s
# Warmup Iteration  29: 8615253.703 ops/s
# Warmup Iteration  30: 9039822.137 ops/s
Iteration   1: 8494721.886 ops/s
Iteration   2: 8961137.651 ops/s
Iteration   3: 8410773.133 ops/s
Iteration   4: 8685516.666 ops/s
Iteration   5: 8782326.837 ops/s
Iteration   6: 8710541.203 ops/s
Iteration   7: 9125454.628 ops/s
Iteration   8: 8688932.298 ops/s
Iteration   9: 8472644.157 ops/s
Iteration  10: 8912612.349 ops/s
Iteration  11: 8570356.002 ops/s
Iteration  12: 8962588.789 ops/s
Iteration  13: 8641932.222 ops/s
Iteration  14: 8664591.414 ops/s
Iteration  15: 8682790.852 ops/s
Iteration  16: 8571838.416 ops/s
Iteration  17: 8788231.343 ops/s
Iteration  18: 8903785.025 ops/s
Iteration  19: 8656247.976 ops/s
Iteration  20: 8823439.741 ops/s
Iteration  21: 8992337.493 ops/s
Iteration  22: 8406693.255 ops/s
Iteration  23: 8938161.940 ops/s
Iteration  24: 8573497.860 ops/s
Iteration  25: 8565196.979 ops/s
Iteration  26: 8919872.606 ops/s
Iteration  27: 8541365.704 ops/s
Iteration  28: 8772372.569 ops/s
Iteration  29: 6741421.914 ops/s
Iteration  30: 8251307.410 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLongTest._Benchmark.benchmark_fusedClearIsEmpty":
  8640423.011 ±(99.9%) 275321.525 ops/s [Average]
  (min, avg, max) = (6741421.914, 8640423.011, 9125454.628), stdev = 412088.329
  CI (99.9%): [8365101.485, 8915744.536] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score        Error  Units
FlowableRangeLongTest._Benchmark.benchmark_fusedClearIsEmpty  thrpt   30  8640423.011 ± 275321.525  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLongTest._Benchmark.benchmark_conditionalSlowPathTakeExact$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLongTest._Benchmark.benchmark_conditionalSlowPathTakeExact

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 443001.319 ops/s
# Warmup Iteration   2: 2055595.590 ops/s
# Warmup Iteration   3: 2639827.010 ops/s
# Warmup Iteration   4: 3265429.767 ops/s
# Warmup Iteration   5: 3328604.332 ops/s
# Warmup Iteration   6: 3172950.425 ops/s
# Warmup Iteration   7: 3270398.389 ops/s
# Warmup Iteration   8: 3394851.912 ops/s
# Warmup Iteration   9: 3162929.587 ops/s
# Warmup Iteration  10: 3336243.179 ops/s
# Warmup Iteration  11: 3221245.812 ops/s
# Warmup Iteration  12: 3272028.492 ops/s
# Warmup Iteration  13: 3388743.632 ops/s
# Warmup Iteration  14: 3234231.204 ops/s
# Warmup Iteration  15: 3336127.851 ops/s
# Warmup Iteration  16: 3299460.937 ops/s
# Warmup Iteration  17: 3267675.199 ops/s
# Warmup Iteration  18: 3351382.053 ops/s
# Warmup Iteration  19: 3205446.281 ops/s
# Warmup Iteration  20: 3338411.584 ops/s
# Warmup Iteration  21: 3383507.063 ops/s
# Warmup Iteration  22: 3254659.723 ops/s
# Warmup Iteration  23: 3332104.392 ops/s
# Warmup Iteration  24: 3237842.194 ops/s
# Warmup Iteration  25: 3343217.472 ops/s
# Warmup Iteration  26: 3379154.875 ops/s
# Warmup Iteration  27: 3197929.632 ops/s
# Warmup Iteration  28: 3307843.768 ops/s
# Warmup Iteration  29: 3252726.048 ops/s
# Warmup Iteration  30: 3348078.041 ops/s
Iteration   1: 3225929.503 ops/s
Iteration   2: 3256238.612 ops/s
Iteration   3: 3380564.606 ops/s
Iteration   4: 3298800.189 ops/s
Iteration   5: 3180911.010 ops/s
Iteration   6: 3186074.067 ops/s
Iteration   7: 3369510.856 ops/s
Iteration   8: 3215833.583 ops/s
Iteration   9: 3312003.424 ops/s
Iteration  10: 3282987.240 ops/s
Iteration  11: 3412960.347 ops/s
Iteration  12: 3400868.910 ops/s
Iteration  13: 3159732.653 ops/s
Iteration  14: 3305376.039 ops/s
Iteration  15: 3208511.499 ops/s
Iteration  16: 3321785.611 ops/s
Iteration  17: 3263234.584 ops/s
Iteration  18: 3243518.600 ops/s
Iteration  19: 3366173.529 ops/s
Iteration  20: 3308197.688 ops/s
Iteration  21: 3269204.747 ops/s
Iteration  22: 3279516.161 ops/s
Iteration  23: 3340063.966 ops/s
Iteration  24: 3417150.913 ops/s
Iteration  25: 3199239.587 ops/s
Iteration  26: 3347494.309 ops/s
Iteration  27: 3289420.095 ops/s
Iteration  28: 3401164.889 ops/s
Iteration  29: 3203897.763 ops/s
Iteration  30: 3224488.999 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLongTest._Benchmark.benchmark_conditionalSlowPathTakeExact":
  3289028.466 ±(99.9%) 50342.704 ops/s [Average]
  (min, avg, max) = (3159732.653, 3289028.466, 3417150.913), stdev = 75350.596
  CI (99.9%): [3238685.762, 3339371.170] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score       Error  Units
FlowableRangeLongTest._Benchmark.benchmark_conditionalSlowPathTakeExact  thrpt   30  3289028.466 ± 50342.704  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLongTest._Benchmark.benchmark_slowPathTakeExact$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLongTest._Benchmark.benchmark_slowPathTakeExact

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 546231.330 ops/s
# Warmup Iteration   2: 2381068.101 ops/s
# Warmup Iteration   3: 2675845.282 ops/s
# Warmup Iteration   4: 3017247.066 ops/s
# Warmup Iteration   5: 3096081.957 ops/s
# Warmup Iteration   6: 3228782.039 ops/s
# Warmup Iteration   7: 3019207.829 ops/s
# Warmup Iteration   8: 3033574.441 ops/s
# Warmup Iteration   9: 3157269.009 ops/s
# Warmup Iteration  10: 3035439.436 ops/s
# Warmup Iteration  11: 3077843.966 ops/s
# Warmup Iteration  12: 3135388.222 ops/s
# Warmup Iteration  13: 3082460.758 ops/s
# Warmup Iteration  14: 3092067.633 ops/s
# Warmup Iteration  15: 3163353.835 ops/s
# Warmup Iteration  16: 3017687.938 ops/s
# Warmup Iteration  17: 3153700.626 ops/s
# Warmup Iteration  18: 3161794.208 ops/s
# Warmup Iteration  19: 3044407.177 ops/s
# Warmup Iteration  20: 3164877.269 ops/s
# Warmup Iteration  21: 3119021.955 ops/s
# Warmup Iteration  22: 3170607.172 ops/s
# Warmup Iteration  23: 3192640.920 ops/s
# Warmup Iteration  24: 3184985.964 ops/s
# Warmup Iteration  25: 3011848.234 ops/s
# Warmup Iteration  26: 3228774.490 ops/s
# Warmup Iteration  27: 3003974.017 ops/s
# Warmup Iteration  28: 3109949.210 ops/s
# Warmup Iteration  29: 3155749.274 ops/s
# Warmup Iteration  30: 3016469.015 ops/s
Iteration   1: 3058390.013 ops/s
Iteration   2: 3179471.869 ops/s
Iteration   3: 3053540.188 ops/s
Iteration   4: 3185064.151 ops/s
Iteration   5: 3125624.921 ops/s
Iteration   6: 3081496.844 ops/s
Iteration   7: 3244812.768 ops/s
Iteration   8: 3051993.665 ops/s
Iteration   9: 3094939.090 ops/s
Iteration  10: 3101798.058 ops/s
Iteration  11: 3173865.080 ops/s
Iteration  12: 3152983.522 ops/s
Iteration  13: 3169631.521 ops/s
Iteration  14: 3063808.286 ops/s
Iteration  15: 3093511.743 ops/s
Iteration  16: 3181523.272 ops/s
Iteration  17: 3111186.342 ops/s
Iteration  18: 3168913.995 ops/s
Iteration  19: 3219076.182 ops/s
Iteration  20: 3011255.447 ops/s
Iteration  21: 3238957.443 ops/s
Iteration  22: 3074558.094 ops/s
Iteration  23: 3244761.036 ops/s
Iteration  24: 2411327.482 ops/s
Iteration  25: 3106314.571 ops/s
Iteration  26: 3161856.600 ops/s
Iteration  27: 3083785.476 ops/s
Iteration  28: 3092102.140 ops/s
Iteration  29: 3235031.366 ops/s
Iteration  30: 3064329.471 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLongTest._Benchmark.benchmark_slowPathTakeExact":
  3107863.688 ±(99.9%) 98224.099 ops/s [Average]
  (min, avg, max) = (2411327.482, 3107863.688, 3244812.768), stdev = 147017.218
  CI (99.9%): [3009639.589, 3206087.787] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
FlowableRangeLongTest._Benchmark.benchmark_slowPathTakeExact  thrpt   30  3107863.688 ± 98224.099  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerateTest._Benchmark.benchmark_multipleOnNext$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerateTest._Benchmark.benchmark_multipleOnNext

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 161176.186 ops/s
# Warmup Iteration   2: 487238.207 ops/s
# Warmup Iteration   3: 534838.997 ops/s
# Warmup Iteration   4: 512053.829 ops/s
# Warmup Iteration   5: 503971.977 ops/s
# Warmup Iteration   6: 529117.164 ops/s
# Warmup Iteration   7: 558597.973 ops/s
# Warmup Iteration   8: 576741.462 ops/s
# Warmup Iteration   9: 559227.850 ops/s
# Warmup Iteration  10: 564606.070 ops/s
# Warmup Iteration  11: 579016.390 ops/s
# Warmup Iteration  12: 541935.197 ops/s
# Warmup Iteration  13: 586109.631 ops/s
# Warmup Iteration  14: 540830.474 ops/s
# Warmup Iteration  15: 548516.148 ops/s
# Warmup Iteration  16: 575204.144 ops/s
# Warmup Iteration  17: 561497.127 ops/s
# Warmup Iteration  18: 584491.531 ops/s
# Warmup Iteration  19: 573107.935 ops/s
# Warmup Iteration  20: 597718.817 ops/s
# Warmup Iteration  21: 578642.752 ops/s
# Warmup Iteration  22: 598199.345 ops/s
# Warmup Iteration  23: 577001.639 ops/s
# Warmup Iteration  24: 561846.665 ops/s
# Warmup Iteration  25: 592721.498 ops/s
# Warmup Iteration  26: 577640.581 ops/s
# Warmup Iteration  27: 588430.825 ops/s
# Warmup Iteration  28: 575643.105 ops/s
# Warmup Iteration  29: 590957.999 ops/s
# Warmup Iteration  30: 574971.382 ops/s
Iteration   1: 584328.352 ops/s
Iteration   2: 591922.681 ops/s
Iteration   3: 549461.636 ops/s
Iteration   4: 583256.254 ops/s
Iteration   5: 592691.118 ops/s
Iteration   6: 546699.274 ops/s
Iteration   7: 596070.806 ops/s
Iteration   8: 570167.816 ops/s
Iteration   9: 594080.154 ops/s
Iteration  10: 560984.864 ops/s
Iteration  11: 593372.699 ops/s
Iteration  12: 584236.000 ops/s
Iteration  13: 575314.507 ops/s
Iteration  14: 592410.339 ops/s
Iteration  15: 567211.952 ops/s
Iteration  16: 596596.119 ops/s
Iteration  17: 575104.627 ops/s
Iteration  18: 578248.172 ops/s
Iteration  19: 572067.374 ops/s
Iteration  20: 591046.232 ops/s
Iteration  21: 595154.888 ops/s
Iteration  22: 563771.496 ops/s
Iteration  23: 599805.870 ops/s
Iteration  24: 573601.993 ops/s
Iteration  25: 601038.734 ops/s
Iteration  26: 572605.746 ops/s
Iteration  27: 583486.906 ops/s
Iteration  28: 577879.231 ops/s
Iteration  29: 589185.124 ops/s
Iteration  30: 578249.115 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerateTest._Benchmark.benchmark_multipleOnNext":
  581001.669 ±(99.9%) 9456.744 ops/s [Average]
  (min, avg, max) = (546699.274, 581001.669, 601038.734), stdev = 14154.410
  CI (99.9%): [571544.925, 590458.413] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score      Error  Units
FlowableGenerateTest._Benchmark.benchmark_multipleOnNext  thrpt   30  581001.669 ± 9456.744  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_fusionRejected$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_fusionRejected

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 158579.822 ops/s
# Warmup Iteration   2: 744444.855 ops/s
# Warmup Iteration   3: 1110613.903 ops/s
# Warmup Iteration   4: 1306095.432 ops/s
# Warmup Iteration   5: 1329521.242 ops/s
# Warmup Iteration   6: 1261730.055 ops/s
# Warmup Iteration   7: 1295417.711 ops/s
# Warmup Iteration   8: 1294965.093 ops/s
# Warmup Iteration   9: 1267219.533 ops/s
# Warmup Iteration  10: 1303885.701 ops/s
# Warmup Iteration  11: 1310730.295 ops/s
# Warmup Iteration  12: 1306557.033 ops/s
# Warmup Iteration  13: 1324599.886 ops/s
# Warmup Iteration  14: 1358128.770 ops/s
# Warmup Iteration  15: 1303054.019 ops/s
# Warmup Iteration  16: 1341974.252 ops/s
# Warmup Iteration  17: 1274773.854 ops/s
# Warmup Iteration  18: 1265827.039 ops/s
# Warmup Iteration  19: 1347727.334 ops/s
# Warmup Iteration  20: 1263798.467 ops/s
# Warmup Iteration  21: 1282561.775 ops/s
# Warmup Iteration  22: 1343994.092 ops/s
# Warmup Iteration  23: 1379571.444 ops/s
# Warmup Iteration  24: 1312723.433 ops/s
# Warmup Iteration  25: 1281013.939 ops/s
# Warmup Iteration  26: 1312340.853 ops/s
# Warmup Iteration  27: 1305869.929 ops/s
# Warmup Iteration  28: 1270737.835 ops/s
# Warmup Iteration  29: 1360502.473 ops/s
# Warmup Iteration  30: 1268074.495 ops/s
Iteration   1: 1320048.028 ops/s
Iteration   2: 1246753.261 ops/s
Iteration   3: 1314080.260 ops/s
Iteration   4: 1305309.134 ops/s
Iteration   5: 1275617.643 ops/s
Iteration   6: 1326273.336 ops/s
Iteration   7: 1267938.189 ops/s
Iteration   8: 1314264.962 ops/s
Iteration   9: 1341865.457 ops/s
Iteration  10: 1285833.866 ops/s
Iteration  11: 1303643.857 ops/s
Iteration  12: 1263614.978 ops/s
Iteration  13: 1382063.180 ops/s
Iteration  14: 1303537.136 ops/s
Iteration  15: 1256715.213 ops/s
Iteration  16: 1299553.007 ops/s
Iteration  17: 1368574.982 ops/s
Iteration  18: 1269128.236 ops/s
Iteration  19: 1126780.370 ops/s
Iteration  20: 1331406.859 ops/s
Iteration  21: 1235374.428 ops/s
Iteration  22: 1310341.974 ops/s
Iteration  23: 1229966.920 ops/s
Iteration  24: 1302742.402 ops/s
Iteration  25: 1250117.742 ops/s
Iteration  26: 1310752.216 ops/s
Iteration  27: 1264735.294 ops/s
Iteration  28: 1283821.614 ops/s
Iteration  29: 1348308.645 ops/s
Iteration  30: 1300896.827 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_fusionRejected":
  1291335.334 ±(99.9%) 32334.473 ops/s [Average]
  (min, avg, max) = (1126780.370, 1291335.334, 1382063.180), stdev = 48396.720
  CI (99.9%): [1259000.861, 1323669.807] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
FlowableFlattenIterableTest._Benchmark.benchmark_fusionRejected  thrpt   30  1291335.334 ± 32334.473  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_justHidden$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_justHidden

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 392332.955 ops/s
# Warmup Iteration   2: 1729974.779 ops/s
# Warmup Iteration   3: 1987730.491 ops/s
# Warmup Iteration   4: 2262661.155 ops/s
# Warmup Iteration   5: 2419712.711 ops/s
# Warmup Iteration   6: 2304582.828 ops/s
# Warmup Iteration   7: 2344583.650 ops/s
# Warmup Iteration   8: 2304413.187 ops/s
# Warmup Iteration   9: 2362732.025 ops/s
# Warmup Iteration  10: 2322399.710 ops/s
# Warmup Iteration  11: 2314959.547 ops/s
# Warmup Iteration  12: 2268565.758 ops/s
# Warmup Iteration  13: 2357066.046 ops/s
# Warmup Iteration  14: 2254882.111 ops/s
# Warmup Iteration  15: 2416399.233 ops/s
# Warmup Iteration  16: 2384759.764 ops/s
# Warmup Iteration  17: 2345540.590 ops/s
# Warmup Iteration  18: 2423694.225 ops/s
# Warmup Iteration  19: 2330421.043 ops/s
# Warmup Iteration  20: 2367175.918 ops/s
# Warmup Iteration  21: 2344804.418 ops/s
# Warmup Iteration  22: 2351937.007 ops/s
# Warmup Iteration  23: 2416689.753 ops/s
# Warmup Iteration  24: 2380107.931 ops/s
# Warmup Iteration  25: 2263703.905 ops/s
# Warmup Iteration  26: 2385886.665 ops/s
# Warmup Iteration  27: 2468468.586 ops/s
# Warmup Iteration  28: 2390584.340 ops/s
# Warmup Iteration  29: 2312925.053 ops/s
# Warmup Iteration  30: 2452630.865 ops/s
Iteration   1: 2300549.718 ops/s
Iteration   2: 2423164.859 ops/s
Iteration   3: 2279125.858 ops/s
Iteration   4: 2467335.419 ops/s
Iteration   5: 2399789.858 ops/s
Iteration   6: 2313228.800 ops/s
Iteration   7: 2447125.806 ops/s
Iteration   8: 2433020.891 ops/s
Iteration   9: 2262998.546 ops/s
Iteration  10: 2455755.170 ops/s
Iteration  11: 2382275.767 ops/s
Iteration  12: 2338076.328 ops/s
Iteration  13: 2407690.313 ops/s
Iteration  14: 2331990.256 ops/s
Iteration  15: 2376865.791 ops/s
Iteration  16: 2413257.678 ops/s
Iteration  17: 2368253.485 ops/s
Iteration  18: 2438716.931 ops/s
Iteration  19: 2355978.270 ops/s
Iteration  20: 2381607.554 ops/s
Iteration  21: 2303019.655 ops/s
Iteration  22: 2437796.656 ops/s
Iteration  23: 2316532.773 ops/s
Iteration  24: 2294443.207 ops/s
Iteration  25: 2421734.960 ops/s
Iteration  26: 2279103.499 ops/s
Iteration  27: 2456817.209 ops/s
Iteration  28: 2490981.339 ops/s
Iteration  29: 2343883.324 ops/s
Iteration  30: 2394965.190 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_justHidden":
  2377202.837 ±(99.9%) 42930.473 ops/s [Average]
  (min, avg, max) = (2262998.546, 2377202.837, 2490981.339), stdev = 64256.316
  CI (99.9%): [2334272.364, 2420133.310] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
FlowableFlattenIterableTest._Benchmark.benchmark_justHidden  thrpt   30  2377202.837 ± 42930.473  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_mixedInnerSource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_mixedInnerSource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 648349.093 ops/s
# Warmup Iteration   2: 2089523.404 ops/s
# Warmup Iteration   3: 2627590.759 ops/s
# Warmup Iteration   4: 2809456.976 ops/s
# Warmup Iteration   5: 2922526.405 ops/s
# Warmup Iteration   6: 2890419.231 ops/s
# Warmup Iteration   7: 2794268.191 ops/s
# Warmup Iteration   8: 2925477.764 ops/s
# Warmup Iteration   9: 2797779.808 ops/s
# Warmup Iteration  10: 2813769.047 ops/s
# Warmup Iteration  11: 2956429.606 ops/s
# Warmup Iteration  12: 2865703.617 ops/s
# Warmup Iteration  13: 2868748.441 ops/s
# Warmup Iteration  14: 2876055.696 ops/s
# Warmup Iteration  15: 2878023.763 ops/s
# Warmup Iteration  16: 2972287.796 ops/s
# Warmup Iteration  17: 2842703.251 ops/s
# Warmup Iteration  18: 2971388.407 ops/s
# Warmup Iteration  19: 2977453.168 ops/s
# Warmup Iteration  20: 2810612.499 ops/s
# Warmup Iteration  21: 2947311.142 ops/s
# Warmup Iteration  22: 2895617.872 ops/s
# Warmup Iteration  23: 2909567.841 ops/s
# Warmup Iteration  24: 2846692.217 ops/s
# Warmup Iteration  25: 2880842.776 ops/s
# Warmup Iteration  26: 2892392.763 ops/s
# Warmup Iteration  27: 2979326.217 ops/s
# Warmup Iteration  28: 2848867.269 ops/s
# Warmup Iteration  29: 2940079.176 ops/s
# Warmup Iteration  30: 2811960.101 ops/s
Iteration   1: 2947452.377 ops/s
Iteration   2: 3009979.799 ops/s
Iteration   3: 2823256.042 ops/s
Iteration   4: 2928325.333 ops/s
Iteration   5: 2743614.079 ops/s
Iteration   6: 2970791.777 ops/s
Iteration   7: 2790368.719 ops/s
Iteration   8: 2898174.156 ops/s
Iteration   9: 3062479.369 ops/s
Iteration  10: 2827943.809 ops/s
Iteration  11: 2987559.020 ops/s
Iteration  12: 2846472.823 ops/s
Iteration  13: 2914807.595 ops/s
Iteration  14: 2349711.389 ops/s
Iteration  15: 2897658.408 ops/s
Iteration  16: 2937148.700 ops/s
Iteration  17: 2864045.506 ops/s
Iteration  18: 2974334.619 ops/s
Iteration  19: 2829579.377 ops/s
Iteration  20: 2864207.873 ops/s
Iteration  21: 2991141.426 ops/s
Iteration  22: 2855370.805 ops/s
Iteration  23: 2866187.505 ops/s
Iteration  24: 2959815.872 ops/s
Iteration  25: 2854122.059 ops/s
Iteration  26: 2972886.626 ops/s
Iteration  27: 2807506.691 ops/s
Iteration  28: 2868766.340 ops/s
Iteration  29: 2860270.279 ops/s
Iteration  30: 2829301.177 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_mixedInnerSource":
  2877775.985 ±(99.9%) 82842.000 ops/s [Average]
  (min, avg, max) = (2349711.389, 2877775.985, 3062479.369), stdev = 123994.015
  CI (99.9%): [2794933.985, 2960617.985] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
FlowableFlattenIterableTest._Benchmark.benchmark_mixedInnerSource  thrpt   30  2877775.985 ± 82842.000  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_mixedInnerSource2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_mixedInnerSource2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 420102.081 ops/s
# Warmup Iteration   2: 1977360.127 ops/s
# Warmup Iteration   3: 2626546.432 ops/s
# Warmup Iteration   4: 3174150.148 ops/s
# Warmup Iteration   5: 3229275.199 ops/s
# Warmup Iteration   6: 3079464.502 ops/s
# Warmup Iteration   7: 3268193.753 ops/s
# Warmup Iteration   8: 3145944.875 ops/s
# Warmup Iteration   9: 3244513.111 ops/s
# Warmup Iteration  10: 3240782.176 ops/s
# Warmup Iteration  11: 3191408.996 ops/s
# Warmup Iteration  12: 3141130.473 ops/s
# Warmup Iteration  13: 3229208.462 ops/s
# Warmup Iteration  14: 3082083.967 ops/s
# Warmup Iteration  15: 3269161.417 ops/s
# Warmup Iteration  16: 3126246.304 ops/s
# Warmup Iteration  17: 3184220.899 ops/s
# Warmup Iteration  18: 3186309.096 ops/s
# Warmup Iteration  19: 3078334.124 ops/s
# Warmup Iteration  20: 3254795.020 ops/s
# Warmup Iteration  21: 3094331.835 ops/s
# Warmup Iteration  22: 3139556.933 ops/s
# Warmup Iteration  23: 3323088.557 ops/s
# Warmup Iteration  24: 2987334.309 ops/s
# Warmup Iteration  25: 3265582.090 ops/s
# Warmup Iteration  26: 3122605.291 ops/s
# Warmup Iteration  27: 3279549.144 ops/s
# Warmup Iteration  28: 3098756.085 ops/s
# Warmup Iteration  29: 3207006.375 ops/s
# Warmup Iteration  30: 3271846.136 ops/s
Iteration   1: 3031572.048 ops/s
Iteration   2: 3285458.169 ops/s
Iteration   3: 3075709.110 ops/s
Iteration   4: 3200037.410 ops/s
Iteration   5: 3095017.902 ops/s
Iteration   6: 3201031.739 ops/s
Iteration   7: 3234465.095 ops/s
Iteration   8: 3169028.446 ops/s
Iteration   9: 3273130.084 ops/s
Iteration  10: 3147089.460 ops/s
Iteration  11: 3214662.573 ops/s
Iteration  12: 3085225.740 ops/s
Iteration  13: 3182106.067 ops/s
Iteration  14: 3274650.722 ops/s
Iteration  15: 3103031.772 ops/s
Iteration  16: 3119071.354 ops/s
Iteration  17: 3340372.051 ops/s
Iteration  18: 3124565.859 ops/s
Iteration  19: 3102883.969 ops/s
Iteration  20: 3282615.636 ops/s
Iteration  21: 3181478.336 ops/s
Iteration  22: 3250378.797 ops/s
Iteration  23: 3187611.624 ops/s
Iteration  24: 3268049.962 ops/s
Iteration  25: 3331828.603 ops/s
Iteration  26: 3130491.152 ops/s
Iteration  27: 3300319.020 ops/s
Iteration  28: 3154794.890 ops/s
Iteration  29: 3107494.349 ops/s
Iteration  30: 3203901.719 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_mixedInnerSource2":
  3188602.455 ±(99.9%) 54923.236 ops/s [Average]
  (min, avg, max) = (3031572.048, 3188602.455, 3340372.051), stdev = 82206.520
  CI (99.9%): [3133679.219, 3243525.691] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
FlowableFlattenIterableTest._Benchmark.benchmark_mixedInnerSource2  thrpt   30  3188602.455 ± 54923.236  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_normal0$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_normal0

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 302921.886 ops/s
# Warmup Iteration   2: 1475817.168 ops/s
# Warmup Iteration   3: 2317952.837 ops/s
# Warmup Iteration   4: 2366416.665 ops/s
# Warmup Iteration   5: 2468682.302 ops/s
# Warmup Iteration   6: 2412899.641 ops/s
# Warmup Iteration   7: 2310904.019 ops/s
# Warmup Iteration   8: 2103784.151 ops/s
# Warmup Iteration   9: 2500397.340 ops/s
# Warmup Iteration  10: 2413932.559 ops/s
# Warmup Iteration  11: 2533323.611 ops/s
# Warmup Iteration  12: 2415749.583 ops/s
# Warmup Iteration  13: 2387328.017 ops/s
# Warmup Iteration  14: 2525483.392 ops/s
# Warmup Iteration  15: 2382377.241 ops/s
# Warmup Iteration  16: 2528177.408 ops/s
# Warmup Iteration  17: 2422030.007 ops/s
# Warmup Iteration  18: 2440235.936 ops/s
# Warmup Iteration  19: 2405329.732 ops/s
# Warmup Iteration  20: 2443862.939 ops/s
# Warmup Iteration  21: 2429840.336 ops/s
# Warmup Iteration  22: 2447452.997 ops/s
# Warmup Iteration  23: 2465529.906 ops/s
# Warmup Iteration  24: 2411835.881 ops/s
# Warmup Iteration  25: 2368706.433 ops/s
# Warmup Iteration  26: 2499194.066 ops/s
# Warmup Iteration  27: 2360920.466 ops/s
# Warmup Iteration  28: 2367289.457 ops/s
# Warmup Iteration  29: 2437613.291 ops/s
# Warmup Iteration  30: 2414899.314 ops/s
Iteration   1: 2361559.269 ops/s
Iteration   2: 2459394.288 ops/s
Iteration   3: 2397659.621 ops/s
Iteration   4: 2403730.669 ops/s
Iteration   5: 2440990.946 ops/s
Iteration   6: 2404265.140 ops/s
Iteration   7: 2410962.200 ops/s
Iteration   8: 2177952.996 ops/s
Iteration   9: 2303397.060 ops/s
Iteration  10: 2403282.593 ops/s
Iteration  11: 2464088.833 ops/s
Iteration  12: 2359131.372 ops/s
Iteration  13: 2419986.985 ops/s
Iteration  14: 2421802.235 ops/s
Iteration  15: 2387167.448 ops/s
Iteration  16: 2523267.400 ops/s
Iteration  17: 2335329.623 ops/s
Iteration  18: 2457597.320 ops/s
Iteration  19: 2421947.651 ops/s
Iteration  20: 2434272.175 ops/s
Iteration  21: 2373690.809 ops/s
Iteration  22: 2426003.060 ops/s
Iteration  23: 2390963.811 ops/s
Iteration  24: 2367480.678 ops/s
Iteration  25: 2396852.487 ops/s
Iteration  26: 2336345.352 ops/s
Iteration  27: 2387318.094 ops/s
Iteration  28: 2426024.065 ops/s
Iteration  29: 2385622.796 ops/s
Iteration  30: 2482858.059 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_normal0":
  2398698.168 ±(99.9%) 41350.817 ops/s [Average]
  (min, avg, max) = (2177952.996, 2398698.168, 2523267.400), stdev = 61891.961
  CI (99.9%): [2357347.350, 2440048.985] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
FlowableFlattenIterableTest._Benchmark.benchmark_normal0  thrpt   30  2398698.168 ± 41350.817  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableToSortedListTest._Benchmark.benchmark_sortedComparator$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableToSortedListTest._Benchmark.benchmark_sortedComparator

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 106882.673 ops/s
# Warmup Iteration   2: 804339.509 ops/s
# Warmup Iteration   3: 1301339.724 ops/s
# Warmup Iteration   4: 1620813.636 ops/s
# Warmup Iteration   5: 1404115.300 ops/s
# Warmup Iteration   6: 1565812.439 ops/s
# Warmup Iteration   7: 1621723.082 ops/s
# Warmup Iteration   8: 1558498.175 ops/s
# Warmup Iteration   9: 1660311.696 ops/s
# Warmup Iteration  10: 1582316.924 ops/s
# Warmup Iteration  11: 1572037.017 ops/s
# Warmup Iteration  12: 1592383.782 ops/s
# Warmup Iteration  13: 1588250.077 ops/s
# Warmup Iteration  14: 1622672.044 ops/s
# Warmup Iteration  15: 1525054.232 ops/s
# Warmup Iteration  16: 1564093.884 ops/s
# Warmup Iteration  17: 1600287.323 ops/s
# Warmup Iteration  18: 1557360.744 ops/s
# Warmup Iteration  19: 1622167.162 ops/s
# Warmup Iteration  20: 1590281.985 ops/s
# Warmup Iteration  21: 1627228.775 ops/s
# Warmup Iteration  22: 1649516.149 ops/s
# Warmup Iteration  23: 1637848.389 ops/s
# Warmup Iteration  24: 1537558.999 ops/s
# Warmup Iteration  25: 1631599.081 ops/s
# Warmup Iteration  26: 1603382.334 ops/s
# Warmup Iteration  27: 1608656.060 ops/s
# Warmup Iteration  28: 1596970.790 ops/s
# Warmup Iteration  29: 1531812.138 ops/s
# Warmup Iteration  30: 1637865.273 ops/s
Iteration   1: 1587027.562 ops/s
Iteration   2: 1654837.203 ops/s
Iteration   3: 1531380.874 ops/s
Iteration   4: 1650696.240 ops/s
Iteration   5: 1642032.797 ops/s
Iteration   6: 1569015.778 ops/s
Iteration   7: 1604133.342 ops/s
Iteration   8: 1609812.328 ops/s
Iteration   9: 1634290.536 ops/s
Iteration  10: 1581826.662 ops/s
Iteration  11: 1568738.222 ops/s
Iteration  12: 1576798.913 ops/s
Iteration  13: 1606372.274 ops/s
Iteration  14: 1566519.353 ops/s
Iteration  15: 1566797.832 ops/s
Iteration  16: 1600366.340 ops/s
Iteration  17: 1574849.023 ops/s
Iteration  18: 1588602.031 ops/s
Iteration  19: 1654681.877 ops/s
Iteration  20: 1552151.966 ops/s
Iteration  21: 1645519.217 ops/s
Iteration  22: 1529424.736 ops/s
Iteration  23: 1642639.485 ops/s
Iteration  24: 1561392.763 ops/s
Iteration  25: 1591024.445 ops/s
Iteration  26: 1589962.266 ops/s
Iteration  27: 1596545.530 ops/s
Iteration  28: 1569786.114 ops/s
Iteration  29: 1665975.882 ops/s
Iteration  30: 1581927.080 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableToSortedListTest._Benchmark.benchmark_sortedComparator":
  1596504.289 ±(99.9%) 24937.629 ops/s [Average]
  (min, avg, max) = (1529424.736, 1596504.289, 1665975.882), stdev = 37325.472
  CI (99.9%): [1571566.660, 1621441.918] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
FlowableToSortedListTest._Benchmark.benchmark_sortedComparator  thrpt   30  1596504.289 ± 24937.629  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableToSortedListTest._Benchmark.benchmark_sorted$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableToSortedListTest._Benchmark.benchmark_sorted

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 107756.370 ops/s
# Warmup Iteration   2: 519565.643 ops/s
# Warmup Iteration   3: 1460897.041 ops/s
# Warmup Iteration   4: 1517902.568 ops/s
# Warmup Iteration   5: 1537138.015 ops/s
# Warmup Iteration   6: 1510753.050 ops/s
# Warmup Iteration   7: 1527132.623 ops/s
# Warmup Iteration   8: 1560931.978 ops/s
# Warmup Iteration   9: 1578988.264 ops/s
# Warmup Iteration  10: 1418171.368 ops/s
# Warmup Iteration  11: 1487193.382 ops/s
# Warmup Iteration  12: 1618202.904 ops/s
# Warmup Iteration  13: 1552531.689 ops/s
# Warmup Iteration  14: 1453647.921 ops/s
# Warmup Iteration  15: 1426903.105 ops/s
# Warmup Iteration  16: 1506565.504 ops/s
# Warmup Iteration  17: 1584130.171 ops/s
# Warmup Iteration  18: 1551514.450 ops/s
# Warmup Iteration  19: 1432536.298 ops/s
# Warmup Iteration  20: 1589095.514 ops/s
# Warmup Iteration  21: 1558488.126 ops/s
# Warmup Iteration  22: 1555693.584 ops/s
# Warmup Iteration  23: 1513732.167 ops/s
# Warmup Iteration  24: 1579055.896 ops/s
# Warmup Iteration  25: 1525939.211 ops/s
# Warmup Iteration  26: 1555609.901 ops/s
# Warmup Iteration  27: 1570279.289 ops/s
# Warmup Iteration  28: 1558470.921 ops/s
# Warmup Iteration  29: 1501491.229 ops/s
# Warmup Iteration  30: 1585679.885 ops/s
Iteration   1: 1517854.992 ops/s
Iteration   2: 1569959.692 ops/s
Iteration   3: 1453789.442 ops/s
Iteration   4: 1450262.045 ops/s
Iteration   5: 1520545.576 ops/s
Iteration   6: 1547486.997 ops/s
Iteration   7: 1595356.291 ops/s
Iteration   8: 1517692.434 ops/s
Iteration   9: 1599360.427 ops/s
Iteration  10: 1534270.104 ops/s
Iteration  11: 1633309.108 ops/s
Iteration  12: 1541891.372 ops/s
Iteration  13: 1524034.703 ops/s
Iteration  14: 1600815.554 ops/s
Iteration  15: 1517320.942 ops/s
Iteration  16: 1552996.240 ops/s
Iteration  17: 1580191.492 ops/s
Iteration  18: 1536641.711 ops/s
Iteration  19: 1592929.495 ops/s
Iteration  20: 1499850.443 ops/s
Iteration  21: 1543875.578 ops/s
Iteration  22: 1467107.931 ops/s
Iteration  23: 1583424.725 ops/s
Iteration  24: 1609178.597 ops/s
Iteration  25: 1525065.198 ops/s
Iteration  26: 1551915.624 ops/s
Iteration  27: 1590672.048 ops/s
Iteration  28: 1563494.659 ops/s
Iteration  29: 1546354.147 ops/s
Iteration  30: 1602835.359 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableToSortedListTest._Benchmark.benchmark_sorted":
  1549016.098 ±(99.9%) 30603.554 ops/s [Average]
  (min, avg, max) = (1450262.045, 1549016.098, 1633309.108), stdev = 45805.962
  CI (99.9%): [1518412.544, 1579619.651] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
FlowableToSortedListTest._Benchmark.benchmark_sorted  thrpt   30  1549016.098 ± 30603.554  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterableTest._Benchmark.benchmark_doesNotCallIteratorHasNextMoreThanRequiredFastPath$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterableTest._Benchmark.benchmark_doesNotCallIteratorHasNextMoreThanRequiredFastPath

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3557611.418 ops/s
# Warmup Iteration   2: 7997073.202 ops/s
# Warmup Iteration   3: 9420174.495 ops/s
# Warmup Iteration   4: 9824228.326 ops/s
# Warmup Iteration   5: 10132563.812 ops/s
# Warmup Iteration   6: 10091174.643 ops/s
# Warmup Iteration   7: 9516523.464 ops/s
# Warmup Iteration   8: 10410613.810 ops/s
# Warmup Iteration   9: 9738429.464 ops/s
# Warmup Iteration  10: 10227966.317 ops/s
# Warmup Iteration  11: 9976334.203 ops/s
# Warmup Iteration  12: 9645328.674 ops/s
# Warmup Iteration  13: 10467929.110 ops/s
# Warmup Iteration  14: 9773821.176 ops/s
# Warmup Iteration  15: 10120566.601 ops/s
# Warmup Iteration  16: 10078537.409 ops/s
# Warmup Iteration  17: 9738663.052 ops/s
# Warmup Iteration  18: 10310117.250 ops/s
# Warmup Iteration  19: 10250861.324 ops/s
# Warmup Iteration  20: 9665291.602 ops/s
# Warmup Iteration  21: 10483360.526 ops/s
# Warmup Iteration  22: 9854412.912 ops/s
# Warmup Iteration  23: 9982988.600 ops/s
# Warmup Iteration  24: 10096425.554 ops/s
# Warmup Iteration  25: 10001041.609 ops/s
# Warmup Iteration  26: 9966188.424 ops/s
# Warmup Iteration  27: 9926355.814 ops/s
# Warmup Iteration  28: 10102981.799 ops/s
# Warmup Iteration  29: 9920658.614 ops/s
# Warmup Iteration  30: 10172092.081 ops/s
Iteration   1: 9865879.544 ops/s
Iteration   2: 9837571.906 ops/s
Iteration   3: 10565767.623 ops/s
Iteration   4: 10212805.026 ops/s
Iteration   5: 9829778.050 ops/s
Iteration   6: 10294161.893 ops/s
Iteration   7: 10338761.646 ops/s
Iteration   8: 9575499.220 ops/s
Iteration   9: 10167754.850 ops/s
Iteration  10: 9962442.386 ops/s
Iteration  11: 10062464.983 ops/s
Iteration  12: 9943931.387 ops/s
Iteration  13: 10271349.999 ops/s
Iteration  14: 10272662.570 ops/s
Iteration  15: 9879370.155 ops/s
Iteration  16: 10109958.688 ops/s
Iteration  17: 9681084.415 ops/s
Iteration  18: 10158965.820 ops/s
Iteration  19: 10451167.915 ops/s
Iteration  20: 9835776.775 ops/s
Iteration  21: 10461735.147 ops/s
Iteration  22: 9630793.859 ops/s
Iteration  23: 10073382.583 ops/s
Iteration  24: 10107376.758 ops/s
Iteration  25: 9825279.585 ops/s
Iteration  26: 10383598.683 ops/s
Iteration  27: 9938185.830 ops/s
Iteration  28: 10178851.030 ops/s
Iteration  29: 9925293.242 ops/s
Iteration  30: 9955895.707 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterableTest._Benchmark.benchmark_doesNotCallIteratorHasNextMoreThanRequiredFastPath":
  10059918.243 ±(99.9%) 169596.329 ops/s [Average]
  (min, avg, max) = (9575499.220, 10059918.243, 10565767.623), stdev = 253843.820
  CI (99.9%): [9890321.914, 10229514.571] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                          Mode  Cnt         Score        Error  Units
FlowableFromIterableTest._Benchmark.benchmark_doesNotCallIteratorHasNextMoreThanRequiredFastPath  thrpt   30  10059918.243 ± 169596.329  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_take$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_take

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 408689.266 ops/s
# Warmup Iteration   2: 1739408.317 ops/s
# Warmup Iteration   3: 2999115.846 ops/s
# Warmup Iteration   4: 2724516.638 ops/s
# Warmup Iteration   5: 2922305.500 ops/s
# Warmup Iteration   6: 2842540.795 ops/s
# Warmup Iteration   7: 2633494.166 ops/s
# Warmup Iteration   8: 2929941.225 ops/s
# Warmup Iteration   9: 2793911.439 ops/s
# Warmup Iteration  10: 2925471.076 ops/s
# Warmup Iteration  11: 2787193.171 ops/s
# Warmup Iteration  12: 2878523.565 ops/s
# Warmup Iteration  13: 2966091.658 ops/s
# Warmup Iteration  14: 2817001.139 ops/s
# Warmup Iteration  15: 2904796.166 ops/s
# Warmup Iteration  16: 2840643.519 ops/s
# Warmup Iteration  17: 2902072.470 ops/s
# Warmup Iteration  18: 2877291.336 ops/s
# Warmup Iteration  19: 2874393.987 ops/s
# Warmup Iteration  20: 2909818.158 ops/s
# Warmup Iteration  21: 2836757.778 ops/s
# Warmup Iteration  22: 2832984.027 ops/s
# Warmup Iteration  23: 3013129.174 ops/s
# Warmup Iteration  24: 2824064.775 ops/s
# Warmup Iteration  25: 2830547.213 ops/s
# Warmup Iteration  26: 2955638.628 ops/s
# Warmup Iteration  27: 2878989.681 ops/s
# Warmup Iteration  28: 2608891.237 ops/s
# Warmup Iteration  29: 2575846.054 ops/s
# Warmup Iteration  30: 2856059.700 ops/s
Iteration   1: 2951698.798 ops/s
Iteration   2: 2925813.099 ops/s
Iteration   3: 2880176.433 ops/s
Iteration   4: 2856898.279 ops/s
Iteration   5: 2984917.875 ops/s
Iteration   6: 2915308.955 ops/s
Iteration   7: 2816272.196 ops/s
Iteration   8: 2983502.178 ops/s
Iteration   9: 2796928.011 ops/s
Iteration  10: 2972879.920 ops/s
Iteration  11: 2786778.436 ops/s
Iteration  12: 2799746.706 ops/s
Iteration  13: 2873752.222 ops/s
Iteration  14: 2807271.187 ops/s
Iteration  15: 2968058.563 ops/s
Iteration  16: 2816998.896 ops/s
Iteration  17: 2888487.371 ops/s
Iteration  18: 2959822.144 ops/s
Iteration  19: 2802187.865 ops/s
Iteration  20: 2867813.850 ops/s
Iteration  21: 3001502.704 ops/s
Iteration  22: 2799117.030 ops/s
Iteration  23: 2996893.525 ops/s
Iteration  24: 2841442.633 ops/s
Iteration  25: 2860224.566 ops/s
Iteration  26: 2960998.723 ops/s
Iteration  27: 2876881.293 ops/s
Iteration  28: 2991576.848 ops/s
Iteration  29: 2800454.339 ops/s
Iteration  30: 2795366.313 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_take":
  2885992.365 ±(99.9%) 50156.642 ops/s [Average]
  (min, avg, max) = (2786778.436, 2885992.365, 3001502.704), stdev = 75072.107
  CI (99.9%): [2835835.723, 2936149.008] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
FlowableFlattenIterableTest._Benchmark.benchmark_take  thrpt   30  2885992.365 ± 50156.642  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_iteratorHasNextThrowsSecondCall$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_iteratorHasNextThrowsSecondCall

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 162978.188 ops/s
# Warmup Iteration   2: 448450.957 ops/s
# Warmup Iteration   3: 526049.210 ops/s
# Warmup Iteration   4: 506040.639 ops/s
# Warmup Iteration   5: 522025.517 ops/s
# Warmup Iteration   6: 511707.015 ops/s
# Warmup Iteration   7: 525621.958 ops/s
# Warmup Iteration   8: 518168.463 ops/s
# Warmup Iteration   9: 504263.358 ops/s
# Warmup Iteration  10: 516592.216 ops/s
# Warmup Iteration  11: 483308.510 ops/s
# Warmup Iteration  12: 517076.853 ops/s
# Warmup Iteration  13: 537772.796 ops/s
# Warmup Iteration  14: 508110.145 ops/s
# Warmup Iteration  15: 537897.896 ops/s
# Warmup Iteration  16: 514963.607 ops/s
# Warmup Iteration  17: 550873.409 ops/s
# Warmup Iteration  18: 537671.239 ops/s
# Warmup Iteration  19: 535607.108 ops/s
# Warmup Iteration  20: 547689.897 ops/s
# Warmup Iteration  21: 516776.616 ops/s
# Warmup Iteration  22: 543982.342 ops/s
# Warmup Iteration  23: 538686.866 ops/s
# Warmup Iteration  24: 525141.265 ops/s
# Warmup Iteration  25: 555210.251 ops/s
# Warmup Iteration  26: 520376.295 ops/s
# Warmup Iteration  27: 543066.771 ops/s
# Warmup Iteration  28: 517429.728 ops/s
# Warmup Iteration  29: 542756.850 ops/s
# Warmup Iteration  30: 567836.797 ops/s
Iteration   1: 523763.640 ops/s
Iteration   2: 534427.628 ops/s
Iteration   3: 526292.815 ops/s
Iteration   4: 540621.908 ops/s
Iteration   5: 523431.040 ops/s
Iteration   6: 547768.177 ops/s
Iteration   7: 546064.978 ops/s
Iteration   8: 533500.947 ops/s
Iteration   9: 557357.796 ops/s
Iteration  10: 526745.224 ops/s
Iteration  11: 546581.866 ops/s
Iteration  12: 542955.413 ops/s
Iteration  13: 554421.453 ops/s
Iteration  14: 561460.696 ops/s
Iteration  15: 519450.743 ops/s
Iteration  16: 518169.430 ops/s
Iteration  17: 552029.306 ops/s
Iteration  18: 535035.895 ops/s
Iteration  19: 554766.084 ops/s
Iteration  20: 540991.230 ops/s
Iteration  21: 547348.930 ops/s
Iteration  22: 532389.653 ops/s
Iteration  23: 545451.669 ops/s
Iteration  24: 540874.459 ops/s
Iteration  25: 535107.178 ops/s
Iteration  26: 541570.757 ops/s
Iteration  27: 537508.818 ops/s
Iteration  28: 530438.772 ops/s
Iteration  29: 542098.351 ops/s
Iteration  30: 554905.189 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_iteratorHasNextThrowsSecondCall":
  539784.335 ±(99.9%) 7721.260 ops/s [Average]
  (min, avg, max) = (518169.430, 539784.335, 561460.696), stdev = 11556.820
  CI (99.9%): [532063.075, 547505.595] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt       Score      Error  Units
FlowableFlattenIterableTest._Benchmark.benchmark_iteratorHasNextThrowsSecondCall  thrpt   30  539784.335 ± 7721.260  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableFuseableTest._Benchmark.benchmark_syncIterableHidden$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableFuseableTest._Benchmark.benchmark_syncIterableHidden

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 527942.742 ops/s
# Warmup Iteration   2: 1703915.103 ops/s
# Warmup Iteration   3: 1917905.549 ops/s
# Warmup Iteration   4: 2209678.485 ops/s
# Warmup Iteration   5: 2250527.936 ops/s
# Warmup Iteration   6: 2175245.505 ops/s
# Warmup Iteration   7: 2248329.579 ops/s
# Warmup Iteration   8: 2185786.006 ops/s
# Warmup Iteration   9: 2206039.932 ops/s
# Warmup Iteration  10: 2285681.752 ops/s
# Warmup Iteration  11: 2171912.762 ops/s
# Warmup Iteration  12: 2223264.615 ops/s
# Warmup Iteration  13: 2275212.632 ops/s
# Warmup Iteration  14: 2141907.754 ops/s
# Warmup Iteration  15: 2173095.318 ops/s
# Warmup Iteration  16: 2245317.328 ops/s
# Warmup Iteration  17: 2174637.844 ops/s
# Warmup Iteration  18: 2266506.411 ops/s
# Warmup Iteration  19: 2139619.981 ops/s
# Warmup Iteration  20: 2242350.152 ops/s
# Warmup Iteration  21: 2323301.906 ops/s
# Warmup Iteration  22: 2136880.888 ops/s
# Warmup Iteration  23: 1920057.454 ops/s
# Warmup Iteration  24: 2215583.766 ops/s
# Warmup Iteration  25: 2163111.428 ops/s
# Warmup Iteration  26: 2233231.539 ops/s
# Warmup Iteration  27: 2288652.746 ops/s
# Warmup Iteration  28: 2096540.161 ops/s
# Warmup Iteration  29: 2286459.631 ops/s
# Warmup Iteration  30: 2274363.690 ops/s
Iteration   1: 2200650.268 ops/s
Iteration   2: 2239746.212 ops/s
Iteration   3: 2222402.889 ops/s
Iteration   4: 2249300.490 ops/s
Iteration   5: 2157604.417 ops/s
Iteration   6: 2215163.951 ops/s
Iteration   7: 2258072.537 ops/s
Iteration   8: 2154342.988 ops/s
Iteration   9: 2284703.796 ops/s
Iteration  10: 2200996.280 ops/s
Iteration  11: 2246606.029 ops/s
Iteration  12: 2216985.160 ops/s
Iteration  13: 2245089.957 ops/s
Iteration  14: 2174113.590 ops/s
Iteration  15: 2156824.306 ops/s
Iteration  16: 2228903.185 ops/s
Iteration  17: 2243087.003 ops/s
Iteration  18: 2279770.191 ops/s
Iteration  19: 2102508.150 ops/s
Iteration  20: 2190906.004 ops/s
Iteration  21: 2165103.052 ops/s
Iteration  22: 2207343.260 ops/s
Iteration  23: 2196463.382 ops/s
Iteration  24: 2130558.710 ops/s
Iteration  25: 2288186.473 ops/s
Iteration  26: 2200888.182 ops/s
Iteration  27: 2185228.588 ops/s
Iteration  28: 2290296.479 ops/s
Iteration  29: 2157995.730 ops/s
Iteration  30: 2265899.999 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableFuseableTest._Benchmark.benchmark_syncIterableHidden":
  2211858.042 ±(99.9%) 32586.384 ops/s [Average]
  (min, avg, max) = (2102508.150, 2211858.042, 2290296.479), stdev = 48773.769
  CI (99.9%): [2179271.658, 2244444.426] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
FlowableFuseableTest._Benchmark.benchmark_syncIterableHidden  thrpt   30  2211858.042 ± 32586.384  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_iteratorNextThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_iteratorNextThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 107712.285 ops/s
# Warmup Iteration   2: 441045.214 ops/s
# Warmup Iteration   3: 512586.443 ops/s
# Warmup Iteration   4: 476613.626 ops/s
# Warmup Iteration   5: 487701.935 ops/s
# Warmup Iteration   6: 476008.597 ops/s
# Warmup Iteration   7: 553240.702 ops/s
# Warmup Iteration   8: 512776.705 ops/s
# Warmup Iteration   9: 541466.587 ops/s
# Warmup Iteration  10: 526498.108 ops/s
# Warmup Iteration  11: 519566.395 ops/s
# Warmup Iteration  12: 547227.300 ops/s
# Warmup Iteration  13: 524033.490 ops/s
# Warmup Iteration  14: 545830.195 ops/s
# Warmup Iteration  15: 523692.917 ops/s
# Warmup Iteration  16: 533171.654 ops/s
# Warmup Iteration  17: 557178.924 ops/s
# Warmup Iteration  18: 546375.265 ops/s
# Warmup Iteration  19: 554256.280 ops/s
# Warmup Iteration  20: 566176.260 ops/s
# Warmup Iteration  21: 545994.098 ops/s
# Warmup Iteration  22: 577180.194 ops/s
# Warmup Iteration  23: 564023.664 ops/s
# Warmup Iteration  24: 560740.131 ops/s
# Warmup Iteration  25: 539354.041 ops/s
# Warmup Iteration  26: 575822.974 ops/s
# Warmup Iteration  27: 555195.994 ops/s
# Warmup Iteration  28: 536674.748 ops/s
# Warmup Iteration  29: 558624.888 ops/s
# Warmup Iteration  30: 546307.590 ops/s
Iteration   1: 567703.348 ops/s
Iteration   2: 526441.379 ops/s
Iteration   3: 543658.440 ops/s
Iteration   4: 565451.276 ops/s
Iteration   5: 523047.037 ops/s
Iteration   6: 551292.668 ops/s
Iteration   7: 527904.871 ops/s
Iteration   8: 552899.582 ops/s
Iteration   9: 542767.566 ops/s
Iteration  10: 538443.941 ops/s
Iteration  11: 564158.589 ops/s
Iteration  12: 536606.591 ops/s
Iteration  13: 564281.873 ops/s
Iteration  14: 529381.940 ops/s
Iteration  15: 552547.228 ops/s
Iteration  16: 566156.310 ops/s
Iteration  17: 537775.677 ops/s
Iteration  18: 556048.816 ops/s
Iteration  19: 548280.646 ops/s
Iteration  20: 561188.431 ops/s
Iteration  21: 543996.057 ops/s
Iteration  22: 556189.509 ops/s
Iteration  23: 549672.610 ops/s
Iteration  24: 556355.498 ops/s
Iteration  25: 560006.376 ops/s
Iteration  26: 531643.532 ops/s
Iteration  27: 549725.798 ops/s
Iteration  28: 564025.020 ops/s
Iteration  29: 534599.982 ops/s
Iteration  30: 573755.827 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_iteratorNextThrows":
  549200.214 ±(99.9%) 9349.952 ops/s [Average]
  (min, avg, max) = (523047.037, 549200.214, 573755.827), stdev = 13994.569
  CI (99.9%): [539850.262, 558550.166] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score      Error  Units
FlowableFlattenIterableTest._Benchmark.benchmark_iteratorNextThrows  thrpt   30  549200.214 ± 9349.952  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableToListTest._Benchmark.benchmark_listWithBlockingFirstFlowable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableToListTest._Benchmark.benchmark_listWithBlockingFirstFlowable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 309881.687 ops/s
# Warmup Iteration   2: 2217090.562 ops/s
# Warmup Iteration   3: 3083784.553 ops/s
# Warmup Iteration   4: 3984617.955 ops/s
# Warmup Iteration   5: 4082949.530 ops/s
# Warmup Iteration   6: 3874199.984 ops/s
# Warmup Iteration   7: 3996511.698 ops/s
# Warmup Iteration   8: 3880868.600 ops/s
# Warmup Iteration   9: 3985700.924 ops/s
# Warmup Iteration  10: 3881367.934 ops/s
# Warmup Iteration  11: 3899500.957 ops/s
# Warmup Iteration  12: 4014407.576 ops/s
# Warmup Iteration  13: 3918557.238 ops/s
# Warmup Iteration  14: 4079465.471 ops/s
# Warmup Iteration  15: 3994721.642 ops/s
# Warmup Iteration  16: 4062580.253 ops/s
# Warmup Iteration  17: 3865456.106 ops/s
# Warmup Iteration  18: 3373361.373 ops/s
# Warmup Iteration  19: 3905504.079 ops/s
# Warmup Iteration  20: 4020804.620 ops/s
# Warmup Iteration  21: 3949059.136 ops/s
# Warmup Iteration  22: 4022413.592 ops/s
# Warmup Iteration  23: 3905372.619 ops/s
# Warmup Iteration  24: 3928136.095 ops/s
# Warmup Iteration  25: 4153001.015 ops/s
# Warmup Iteration  26: 3884469.598 ops/s
# Warmup Iteration  27: 3888391.029 ops/s
# Warmup Iteration  28: 4033882.245 ops/s
# Warmup Iteration  29: 3882642.105 ops/s
# Warmup Iteration  30: 4053456.713 ops/s
Iteration   1: 3819037.712 ops/s
Iteration   2: 4130304.772 ops/s
Iteration   3: 3964782.407 ops/s
Iteration   4: 4043008.612 ops/s
Iteration   5: 4063372.996 ops/s
Iteration   6: 3882659.694 ops/s
Iteration   7: 4026156.342 ops/s
Iteration   8: 3924085.588 ops/s
Iteration   9: 4192550.539 ops/s
Iteration  10: 3805612.229 ops/s
Iteration  11: 4025281.885 ops/s
Iteration  12: 3941343.385 ops/s
Iteration  13: 4045565.581 ops/s
Iteration  14: 4002386.775 ops/s
Iteration  15: 4092092.196 ops/s
Iteration  16: 4002543.251 ops/s
Iteration  17: 3916857.116 ops/s
Iteration  18: 4067136.737 ops/s
Iteration  19: 3930594.980 ops/s
Iteration  20: 4164293.815 ops/s
Iteration  21: 3847427.566 ops/s
Iteration  22: 4013694.471 ops/s
Iteration  23: 4126230.110 ops/s
Iteration  24: 3853131.970 ops/s
Iteration  25: 4034668.779 ops/s
Iteration  26: 3945718.373 ops/s
Iteration  27: 3957536.274 ops/s
Iteration  28: 4045692.119 ops/s
Iteration  29: 3508528.840 ops/s
Iteration  30: 3940688.164 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableToListTest._Benchmark.benchmark_listWithBlockingFirstFlowable":
  3977099.443 ±(99.9%) 88437.696 ops/s [Average]
  (min, avg, max) = (3508528.840, 3977099.443, 4192550.539), stdev = 132369.391
  CI (99.9%): [3888661.746, 4065537.139] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
FlowableToListTest._Benchmark.benchmark_listWithBlockingFirstFlowable  thrpt   30  3977099.443 ± 88437.696  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_smallPrefetch2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_smallPrefetch2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 385577.937 ops/s
# Warmup Iteration   2: 1461857.336 ops/s
# Warmup Iteration   3: 1592085.803 ops/s
# Warmup Iteration   4: 1923839.337 ops/s
# Warmup Iteration   5: 1960092.254 ops/s
# Warmup Iteration   6: 1954168.609 ops/s
# Warmup Iteration   7: 2000315.437 ops/s
# Warmup Iteration   8: 1943532.827 ops/s
# Warmup Iteration   9: 1894859.658 ops/s
# Warmup Iteration  10: 1979794.966 ops/s
# Warmup Iteration  11: 2008205.972 ops/s
# Warmup Iteration  12: 1943934.479 ops/s
# Warmup Iteration  13: 1911301.339 ops/s
# Warmup Iteration  14: 1973259.284 ops/s
# Warmup Iteration  15: 1974055.719 ops/s
# Warmup Iteration  16: 2054031.656 ops/s
# Warmup Iteration  17: 1955067.671 ops/s
# Warmup Iteration  18: 1889040.171 ops/s
# Warmup Iteration  19: 1995759.447 ops/s
# Warmup Iteration  20: 1982856.721 ops/s
# Warmup Iteration  21: 1956900.665 ops/s
# Warmup Iteration  22: 2010584.589 ops/s
# Warmup Iteration  23: 1889230.467 ops/s
# Warmup Iteration  24: 1960686.840 ops/s
# Warmup Iteration  25: 1996262.052 ops/s
# Warmup Iteration  26: 1890007.441 ops/s
# Warmup Iteration  27: 1975100.216 ops/s
# Warmup Iteration  28: 1879418.548 ops/s
# Warmup Iteration  29: 1983412.244 ops/s
# Warmup Iteration  30: 1932571.614 ops/s
Iteration   1: 1906807.825 ops/s
Iteration   2: 1937708.232 ops/s
Iteration   3: 1884406.658 ops/s
Iteration   4: 1985384.316 ops/s
Iteration   5: 1864068.680 ops/s
Iteration   6: 1967260.954 ops/s
Iteration   7: 1963049.266 ops/s
Iteration   8: 2000473.644 ops/s
Iteration   9: 1997062.873 ops/s
Iteration  10: 1890588.094 ops/s
Iteration  11: 2017256.734 ops/s
Iteration  12: 1877014.437 ops/s
Iteration  13: 1951055.364 ops/s
Iteration  14: 1969944.284 ops/s
Iteration  15: 1923529.427 ops/s
Iteration  16: 1895216.478 ops/s
Iteration  17: 1977549.923 ops/s
Iteration  18: 1932673.426 ops/s
Iteration  19: 1843078.480 ops/s
Iteration  20: 1985464.367 ops/s
Iteration  21: 1925475.772 ops/s
Iteration  22: 2012455.291 ops/s
Iteration  23: 1925467.794 ops/s
Iteration  24: 1977611.487 ops/s
Iteration  25: 1956659.795 ops/s
Iteration  26: 1916912.332 ops/s
Iteration  27: 1971828.641 ops/s
Iteration  28: 1962132.860 ops/s
Iteration  29: 1999761.773 ops/s
Iteration  30: 1972484.284 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_smallPrefetch2":
  1946346.116 ±(99.9%) 30798.886 ops/s [Average]
  (min, avg, max) = (1843078.480, 1946346.116, 2017256.734), stdev = 46098.326
  CI (99.9%): [1915547.230, 1977145.002] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
FlowableFlattenIterableTest._Benchmark.benchmark_smallPrefetch2  thrpt   30  1946346.116 ± 30798.886  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_flatMapIterableCombinerReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_flatMapIterableCombinerReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 140010.055 ops/s
# Warmup Iteration   2: 345959.463 ops/s
# Warmup Iteration   3: 391064.372 ops/s
# Warmup Iteration   4: 363300.494 ops/s
# Warmup Iteration   5: 401602.674 ops/s
# Warmup Iteration   6: 421272.657 ops/s
# Warmup Iteration   7: 397442.768 ops/s
# Warmup Iteration   8: 402789.826 ops/s
# Warmup Iteration   9: 405708.670 ops/s
# Warmup Iteration  10: 404598.294 ops/s
# Warmup Iteration  11: 423105.783 ops/s
# Warmup Iteration  12: 406551.794 ops/s
# Warmup Iteration  13: 328715.626 ops/s
# Warmup Iteration  14: 403196.884 ops/s
# Warmup Iteration  15: 415827.437 ops/s
# Warmup Iteration  16: 405894.681 ops/s
# Warmup Iteration  17: 408789.662 ops/s
# Warmup Iteration  18: 419720.256 ops/s
# Warmup Iteration  19: 421823.723 ops/s
# Warmup Iteration  20: 409070.111 ops/s
# Warmup Iteration  21: 425223.117 ops/s
# Warmup Iteration  22: 405773.172 ops/s
# Warmup Iteration  23: 417567.117 ops/s
# Warmup Iteration  24: 429693.633 ops/s
# Warmup Iteration  25: 412137.106 ops/s
# Warmup Iteration  26: 407539.869 ops/s
# Warmup Iteration  27: 434219.501 ops/s
# Warmup Iteration  28: 406967.340 ops/s
# Warmup Iteration  29: 438960.267 ops/s
# Warmup Iteration  30: 418148.020 ops/s
Iteration   1: 412526.201 ops/s
Iteration   2: 438588.670 ops/s
Iteration   3: 403653.307 ops/s
Iteration   4: 410060.021 ops/s
Iteration   5: 437718.240 ops/s
Iteration   6: 408753.756 ops/s
Iteration   7: 428848.959 ops/s
Iteration   8: 420512.446 ops/s
Iteration   9: 416453.812 ops/s
Iteration  10: 426063.745 ops/s
Iteration  11: 420548.224 ops/s
Iteration  12: 397299.238 ops/s
Iteration  13: 414909.562 ops/s
Iteration  14: 425057.900 ops/s
Iteration  15: 433845.278 ops/s
Iteration  16: 429687.210 ops/s
Iteration  17: 403083.406 ops/s
Iteration  18: 433968.665 ops/s
Iteration  19: 412648.018 ops/s
Iteration  20: 428496.978 ops/s
Iteration  21: 410583.765 ops/s
Iteration  22: 429718.885 ops/s
Iteration  23: 425640.996 ops/s
Iteration  24: 414833.204 ops/s
Iteration  25: 434319.435 ops/s
Iteration  26: 401859.544 ops/s
Iteration  27: 419771.967 ops/s
Iteration  28: 414878.896 ops/s
Iteration  29: 417648.319 ops/s
Iteration  30: 428062.673 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_flatMapIterableCombinerReturnsNull":
  420001.377 ±(99.9%) 7514.428 ops/s [Average]
  (min, avg, max) = (397299.238, 420001.377, 438588.670), stdev = 11247.243
  CI (99.9%): [412486.949, 427515.805] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score      Error  Units
FlowableNullTests._Benchmark.benchmark_flatMapIterableCombinerReturnsNull  thrpt   30  420001.377 ± 7514.428  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterableTest._Benchmark.benchmark_hasNextCancelsAndCompletesSlowPathConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterableTest._Benchmark.benchmark_hasNextCancelsAndCompletesSlowPathConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 629964.220 ops/s
# Warmup Iteration   2: 3179047.189 ops/s
# Warmup Iteration   3: 3306787.247 ops/s
# Warmup Iteration   4: 4123790.742 ops/s
# Warmup Iteration   5: 4118994.027 ops/s
# Warmup Iteration   6: 4134022.393 ops/s
# Warmup Iteration   7: 3897403.481 ops/s
# Warmup Iteration   8: 4284554.953 ops/s
# Warmup Iteration   9: 3906497.702 ops/s
# Warmup Iteration  10: 4123850.780 ops/s
# Warmup Iteration  11: 4082786.557 ops/s
# Warmup Iteration  12: 4028880.297 ops/s
# Warmup Iteration  13: 4019793.177 ops/s
# Warmup Iteration  14: 3986064.375 ops/s
# Warmup Iteration  15: 4258515.373 ops/s
# Warmup Iteration  16: 3907019.059 ops/s
# Warmup Iteration  17: 4247955.692 ops/s
# Warmup Iteration  18: 4041020.289 ops/s
# Warmup Iteration  19: 4076291.521 ops/s
# Warmup Iteration  20: 4213265.290 ops/s
# Warmup Iteration  21: 3920233.070 ops/s
# Warmup Iteration  22: 4091977.982 ops/s
# Warmup Iteration  23: 4174501.377 ops/s
# Warmup Iteration  24: 3999347.946 ops/s
# Warmup Iteration  25: 3989626.712 ops/s
# Warmup Iteration  26: 4161582.667 ops/s
# Warmup Iteration  27: 4056448.496 ops/s
# Warmup Iteration  28: 4140351.016 ops/s
# Warmup Iteration  29: 4085037.230 ops/s
# Warmup Iteration  30: 3965547.143 ops/s
Iteration   1: 4209648.056 ops/s
Iteration   2: 4095794.821 ops/s
Iteration   3: 3982123.103 ops/s
Iteration   4: 4016128.956 ops/s
Iteration   5: 4226889.603 ops/s
Iteration   6: 3995286.396 ops/s
Iteration   7: 4080150.286 ops/s
Iteration   8: 4180611.636 ops/s
Iteration   9: 4008027.057 ops/s
Iteration  10: 4166579.825 ops/s
Iteration  11: 4013941.808 ops/s
Iteration  12: 4103284.711 ops/s
Iteration  13: 4099997.580 ops/s
Iteration  14: 4086444.530 ops/s
Iteration  15: 3984869.259 ops/s
Iteration  16: 4194280.735 ops/s
Iteration  17: 4046340.997 ops/s
Iteration  18: 4025597.239 ops/s
Iteration  19: 4261038.463 ops/s
Iteration  20: 3939710.421 ops/s
Iteration  21: 4033759.621 ops/s
Iteration  22: 4149639.336 ops/s
Iteration  23: 3902746.072 ops/s
Iteration  24: 4120447.547 ops/s
Iteration  25: 4042358.939 ops/s
Iteration  26: 4061046.579 ops/s
Iteration  27: 4248692.682 ops/s
Iteration  28: 4047807.132 ops/s
Iteration  29: 3927315.446 ops/s
Iteration  30: 4188917.600 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterableTest._Benchmark.benchmark_hasNextCancelsAndCompletesSlowPathConditional":
  4081315.881 ±(99.9%) 64789.180 ops/s [Average]
  (min, avg, max) = (3902746.072, 4081315.881, 4261038.463), stdev = 96973.402
  CI (99.9%): [4016526.701, 4146105.061] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                     Mode  Cnt        Score       Error  Units
FlowableFromIterableTest._Benchmark.benchmark_hasNextCancelsAndCompletesSlowPathConditional  thrpt   30  4081315.881 ± 64789.180  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterableTest._Benchmark.benchmark_emptyConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterableTest._Benchmark.benchmark_emptyConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 724478.161 ops/s
# Warmup Iteration   2: 2796175.232 ops/s
# Warmup Iteration   3: 3142250.645 ops/s
# Warmup Iteration   4: 3726179.660 ops/s
# Warmup Iteration   5: 3613656.348 ops/s
# Warmup Iteration   6: 3777933.825 ops/s
# Warmup Iteration   7: 2845175.351 ops/s
# Warmup Iteration   8: 3519723.721 ops/s
# Warmup Iteration   9: 3810827.630 ops/s
# Warmup Iteration  10: 3641021.847 ops/s
# Warmup Iteration  11: 3767339.501 ops/s
# Warmup Iteration  12: 3595723.917 ops/s
# Warmup Iteration  13: 3738528.281 ops/s
# Warmup Iteration  14: 3671150.657 ops/s
# Warmup Iteration  15: 3626675.766 ops/s
# Warmup Iteration  16: 3730450.940 ops/s
# Warmup Iteration  17: 3695739.532 ops/s
# Warmup Iteration  18: 3713280.096 ops/s
# Warmup Iteration  19: 3683679.451 ops/s
# Warmup Iteration  20: 3667463.290 ops/s
# Warmup Iteration  21: 3788346.237 ops/s
# Warmup Iteration  22: 3600453.581 ops/s
# Warmup Iteration  23: 3779413.168 ops/s
# Warmup Iteration  24: 3545152.304 ops/s
# Warmup Iteration  25: 3596939.715 ops/s
# Warmup Iteration  26: 3753475.658 ops/s
# Warmup Iteration  27: 3597307.264 ops/s
# Warmup Iteration  28: 3697098.410 ops/s
# Warmup Iteration  29: 3801184.422 ops/s
# Warmup Iteration  30: 3696212.157 ops/s
Iteration   1: 3644213.278 ops/s
Iteration   2: 3794161.781 ops/s
Iteration   3: 3602802.370 ops/s
Iteration   4: 3849991.306 ops/s
Iteration   5: 3732395.328 ops/s
Iteration   6: 3683852.558 ops/s
Iteration   7: 3818345.643 ops/s
Iteration   8: 3802440.048 ops/s
Iteration   9: 3662663.975 ops/s
Iteration  10: 3765483.927 ops/s
Iteration  11: 3554029.217 ops/s
Iteration  12: 3699498.711 ops/s
Iteration  13: 3637468.561 ops/s
Iteration  14: 3665247.680 ops/s
Iteration  15: 3775705.038 ops/s
Iteration  16: 3639304.593 ops/s
Iteration  17: 3789348.028 ops/s
Iteration  18: 3622681.094 ops/s
Iteration  19: 3727219.903 ops/s
Iteration  20: 3824761.200 ops/s
Iteration  21: 3628113.952 ops/s
Iteration  22: 3818674.921 ops/s
Iteration  23: 3615814.097 ops/s
Iteration  24: 3604164.473 ops/s
Iteration  25: 3847777.510 ops/s
Iteration  26: 3590609.673 ops/s
Iteration  27: 3600808.622 ops/s
Iteration  28: 3744776.938 ops/s
Iteration  29: 3693106.634 ops/s
Iteration  30: 3761562.300 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterableTest._Benchmark.benchmark_emptyConditional":
  3706567.445 ±(99.9%) 58880.606 ops/s [Average]
  (min, avg, max) = (3554029.217, 3706567.445, 3849991.306), stdev = 88129.726
  CI (99.9%): [3647686.839, 3765448.052] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
FlowableFromIterableTest._Benchmark.benchmark_emptyConditional  thrpt   30  3706567.445 ± 58880.606  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleMergeTest._Benchmark.benchmark_mergeDelayErrorIterable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleMergeTest._Benchmark.benchmark_mergeDelayErrorIterable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 69951.751 ops/s
# Warmup Iteration   2: 320636.792 ops/s
# Warmup Iteration   3: 428601.382 ops/s
# Warmup Iteration   4: 451974.148 ops/s
# Warmup Iteration   5: 475995.191 ops/s
# Warmup Iteration   6: 479085.059 ops/s
# Warmup Iteration   7: 444924.479 ops/s
# Warmup Iteration   8: 476333.416 ops/s
# Warmup Iteration   9: 436169.893 ops/s
# Warmup Iteration  10: 460792.422 ops/s
# Warmup Iteration  11: 454566.491 ops/s
# Warmup Iteration  12: 448112.238 ops/s
# Warmup Iteration  13: 472068.923 ops/s
# Warmup Iteration  14: 458669.299 ops/s
# Warmup Iteration  15: 473427.393 ops/s
# Warmup Iteration  16: 440369.573 ops/s
# Warmup Iteration  17: 461017.374 ops/s
# Warmup Iteration  18: 489657.579 ops/s
# Warmup Iteration  19: 513931.961 ops/s
# Warmup Iteration  20: 480167.009 ops/s
# Warmup Iteration  21: 493525.089 ops/s
# Warmup Iteration  22: 472045.404 ops/s
# Warmup Iteration  23: 495935.351 ops/s
# Warmup Iteration  24: 469172.380 ops/s
# Warmup Iteration  25: 482453.770 ops/s
# Warmup Iteration  26: 503721.901 ops/s
# Warmup Iteration  27: 489808.102 ops/s
# Warmup Iteration  28: 488025.741 ops/s
# Warmup Iteration  29: 486926.206 ops/s
# Warmup Iteration  30: 497528.383 ops/s
Iteration   1: 477392.533 ops/s
Iteration   2: 497279.767 ops/s
Iteration   3: 482439.915 ops/s
Iteration   4: 488004.158 ops/s
Iteration   5: 487316.277 ops/s
Iteration   6: 489150.955 ops/s
Iteration   7: 511591.340 ops/s
Iteration   8: 482735.251 ops/s
Iteration   9: 487111.025 ops/s
Iteration  10: 489707.846 ops/s
Iteration  11: 470512.381 ops/s
Iteration  12: 497638.097 ops/s
Iteration  13: 503393.880 ops/s
Iteration  14: 470711.584 ops/s
Iteration  15: 488857.805 ops/s
Iteration  16: 512229.751 ops/s
Iteration  17: 472777.295 ops/s
Iteration  18: 486805.608 ops/s
Iteration  19: 493179.225 ops/s
Iteration  20: 476528.395 ops/s
Iteration  21: 490631.670 ops/s
Iteration  22: 477553.816 ops/s
Iteration  23: 494059.828 ops/s
Iteration  24: 484676.838 ops/s
Iteration  25: 481290.531 ops/s
Iteration  26: 497718.262 ops/s
Iteration  27: 474556.748 ops/s
Iteration  28: 489003.181 ops/s
Iteration  29: 481334.035 ops/s
Iteration  30: 487090.520 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleMergeTest._Benchmark.benchmark_mergeDelayErrorIterable":
  487442.617 ±(99.9%) 7077.416 ops/s [Average]
  (min, avg, max) = (470512.381, 487442.617, 512229.751), stdev = 10593.144
  CI (99.9%): [480365.201, 494520.033] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
SingleMergeTest._Benchmark.benchmark_mergeDelayErrorIterable  thrpt   30  487442.617 ± 7077.416  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterableTest._Benchmark.benchmark_deadOnArrival$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterableTest._Benchmark.benchmark_deadOnArrival

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1391063.607 ops/s
# Warmup Iteration   2: 3627331.201 ops/s
# Warmup Iteration   3: 4844371.671 ops/s
# Warmup Iteration   4: 5372476.850 ops/s
# Warmup Iteration   5: 5688006.509 ops/s
# Warmup Iteration   6: 5541894.782 ops/s
# Warmup Iteration   7: 5505927.407 ops/s
# Warmup Iteration   8: 5655891.046 ops/s
# Warmup Iteration   9: 5434678.553 ops/s
# Warmup Iteration  10: 5754210.614 ops/s
# Warmup Iteration  11: 5523540.897 ops/s
# Warmup Iteration  12: 5584756.534 ops/s
# Warmup Iteration  13: 5697650.134 ops/s
# Warmup Iteration  14: 5383554.909 ops/s
# Warmup Iteration  15: 5696702.700 ops/s
# Warmup Iteration  16: 5571859.342 ops/s
# Warmup Iteration  17: 5543410.321 ops/s
# Warmup Iteration  18: 5853372.528 ops/s
# Warmup Iteration  19: 5429274.011 ops/s
# Warmup Iteration  20: 5692819.730 ops/s
# Warmup Iteration  21: 5296911.104 ops/s
# Warmup Iteration  22: 5665289.286 ops/s
# Warmup Iteration  23: 5619993.153 ops/s
# Warmup Iteration  24: 5460802.654 ops/s
# Warmup Iteration  25: 5605117.993 ops/s
# Warmup Iteration  26: 5469277.519 ops/s
# Warmup Iteration  27: 5711799.268 ops/s
# Warmup Iteration  28: 5456875.238 ops/s
# Warmup Iteration  29: 5661108.190 ops/s
# Warmup Iteration  30: 5633148.917 ops/s
Iteration   1: 5546035.263 ops/s
Iteration   2: 5736026.461 ops/s
Iteration   3: 5720619.999 ops/s
Iteration   4: 5321711.136 ops/s
Iteration   5: 5699621.503 ops/s
Iteration   6: 5484444.601 ops/s
Iteration   7: 5702490.187 ops/s
Iteration   8: 5773345.725 ops/s
Iteration   9: 5424755.576 ops/s
Iteration  10: 5833378.530 ops/s
Iteration  11: 5629712.927 ops/s
Iteration  12: 5420698.564 ops/s
Iteration  13: 5686085.435 ops/s
Iteration  14: 5540298.175 ops/s
Iteration  15: 5569694.054 ops/s
Iteration  16: 5489468.494 ops/s
Iteration  17: 5673611.385 ops/s
Iteration  18: 5276618.095 ops/s
Iteration  19: 5687103.645 ops/s
Iteration  20: 5754367.055 ops/s
Iteration  21: 5504888.700 ops/s
Iteration  22: 5689118.675 ops/s
Iteration  23: 5420174.534 ops/s
Iteration  24: 5660370.506 ops/s
Iteration  25: 5518585.174 ops/s
Iteration  26: 5754254.163 ops/s
Iteration  27: 5431183.202 ops/s
Iteration  28: 5481766.879 ops/s
Iteration  29: 5658369.425 ops/s
Iteration  30: 5390595.244 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterableTest._Benchmark.benchmark_deadOnArrival":
  5582646.444 ±(99.9%) 98087.302 ops/s [Average]
  (min, avg, max) = (5276618.095, 5582646.444, 5833378.530), stdev = 146812.467
  CI (99.9%): [5484559.142, 5680733.745] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
FlowableFromIterableTest._Benchmark.benchmark_deadOnArrival  thrpt   30  5582646.444 ± 98087.302  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFromStreamTest._Benchmark.benchmark_justConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFromStreamTest._Benchmark.benchmark_justConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 605792.429 ops/s
# Warmup Iteration   2: 2937803.153 ops/s
# Warmup Iteration   3: 3157511.878 ops/s
# Warmup Iteration   4: 3819289.020 ops/s
# Warmup Iteration   5: 3749113.446 ops/s
# Warmup Iteration   6: 3623858.887 ops/s
# Warmup Iteration   7: 3849315.075 ops/s
# Warmup Iteration   8: 3613931.085 ops/s
# Warmup Iteration   9: 3773437.711 ops/s
# Warmup Iteration  10: 3739003.862 ops/s
# Warmup Iteration  11: 3716522.342 ops/s
# Warmup Iteration  12: 3869494.289 ops/s
# Warmup Iteration  13: 3736950.891 ops/s
# Warmup Iteration  14: 3818975.421 ops/s
# Warmup Iteration  15: 3734207.340 ops/s
# Warmup Iteration  16: 3818085.896 ops/s
# Warmup Iteration  17: 3858428.977 ops/s
# Warmup Iteration  18: 3688336.802 ops/s
# Warmup Iteration  19: 3851441.227 ops/s
# Warmup Iteration  20: 3843562.999 ops/s
# Warmup Iteration  21: 3710121.362 ops/s
# Warmup Iteration  22: 3769040.632 ops/s
# Warmup Iteration  23: 3669953.486 ops/s
# Warmup Iteration  24: 3751929.330 ops/s
# Warmup Iteration  25: 3765451.072 ops/s
# Warmup Iteration  26: 3706753.673 ops/s
# Warmup Iteration  27: 3936084.786 ops/s
# Warmup Iteration  28: 3686739.896 ops/s
# Warmup Iteration  29: 3837640.485 ops/s
# Warmup Iteration  30: 3734765.686 ops/s
Iteration   1: 3863157.679 ops/s
Iteration   2: 3736141.017 ops/s
Iteration   3: 3860938.521 ops/s
Iteration   4: 3727377.397 ops/s
Iteration   5: 3805467.935 ops/s
Iteration   6: 3697111.360 ops/s
Iteration   7: 3715892.600 ops/s
Iteration   8: 3870308.706 ops/s
Iteration   9: 3703586.951 ops/s
Iteration  10: 3866678.707 ops/s
Iteration  11: 3745578.492 ops/s
Iteration  12: 3779557.240 ops/s
Iteration  13: 3825985.965 ops/s
Iteration  14: 3595306.325 ops/s
Iteration  15: 3707957.930 ops/s
Iteration  16: 3853132.892 ops/s
Iteration  17: 3682241.047 ops/s
Iteration  18: 3700157.515 ops/s
Iteration  19: 3821366.094 ops/s
Iteration  20: 3659350.350 ops/s
Iteration  21: 3789792.347 ops/s
Iteration  22: 3682272.703 ops/s
Iteration  23: 3899386.711 ops/s
Iteration  24: 3917900.438 ops/s
Iteration  25: 3954457.958 ops/s
Iteration  26: 3596442.811 ops/s
Iteration  27: 3903971.362 ops/s
Iteration  28: 3663134.465 ops/s
Iteration  29: 3103932.708 ops/s
Iteration  30: 3753471.784 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableFromStreamTest._Benchmark.benchmark_justConditional":
  3749401.934 ±(99.9%) 103592.778 ops/s [Average]
  (min, avg, max) = (3103932.708, 3749401.934, 3954457.958), stdev = 155052.805
  CI (99.9%): [3645809.156, 3852994.712] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score        Error  Units
FlowableFromStreamTest._Benchmark.benchmark_justConditional  thrpt   30  3749401.934 ± 103592.778  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStreamTest._Benchmark.benchmark_badRequest$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStreamTest._Benchmark.benchmark_badRequest

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 58055.778 ops/s
# Warmup Iteration   2: 126703.553 ops/s
# Warmup Iteration   3: 333637.894 ops/s
# Warmup Iteration   4: 343206.000 ops/s
# Warmup Iteration   5: 359876.345 ops/s
# Warmup Iteration   6: 362522.559 ops/s
# Warmup Iteration   7: 379334.437 ops/s
# Warmup Iteration   8: 400291.003 ops/s
# Warmup Iteration   9: 389704.661 ops/s
# Warmup Iteration  10: 389624.725 ops/s
# Warmup Iteration  11: 386381.724 ops/s
# Warmup Iteration  12: 405056.202 ops/s
# Warmup Iteration  13: 374208.019 ops/s
# Warmup Iteration  14: 405678.921 ops/s
# Warmup Iteration  15: 373543.752 ops/s
# Warmup Iteration  16: 384883.097 ops/s
# Warmup Iteration  17: 400971.635 ops/s
# Warmup Iteration  18: 388726.130 ops/s
# Warmup Iteration  19: 399666.124 ops/s
# Warmup Iteration  20: 405832.548 ops/s
# Warmup Iteration  21: 398805.891 ops/s
# Warmup Iteration  22: 405657.386 ops/s
# Warmup Iteration  23: 395245.467 ops/s
# Warmup Iteration  24: 411421.894 ops/s
# Warmup Iteration  25: 383630.064 ops/s
# Warmup Iteration  26: 400744.910 ops/s
# Warmup Iteration  27: 416678.468 ops/s
# Warmup Iteration  28: 390171.357 ops/s
# Warmup Iteration  29: 412934.903 ops/s
# Warmup Iteration  30: 409655.281 ops/s
Iteration   1: 396780.268 ops/s
Iteration   2: 400219.394 ops/s
Iteration   3: 407340.820 ops/s
Iteration   4: 388075.080 ops/s
Iteration   5: 397303.905 ops/s
Iteration   6: 412743.731 ops/s
Iteration   7: 390504.976 ops/s
Iteration   8: 415260.195 ops/s
Iteration   9: 391193.378 ops/s
Iteration  10: 408258.955 ops/s
Iteration  11: 416879.653 ops/s
Iteration  12: 405545.798 ops/s
Iteration  13: 392703.450 ops/s
Iteration  14: 402434.403 ops/s
Iteration  15: 404416.444 ops/s
Iteration  16: 396011.150 ops/s
Iteration  17: 416524.965 ops/s
Iteration  18: 390368.903 ops/s
Iteration  19: 403174.657 ops/s
Iteration  20: 407773.893 ops/s
Iteration  21: 395093.797 ops/s
Iteration  22: 413859.037 ops/s
Iteration  23: 384176.960 ops/s
Iteration  24: 405337.678 ops/s
Iteration  25: 396622.911 ops/s
Iteration  26: 396556.415 ops/s
Iteration  27: 417253.082 ops/s
Iteration  28: 396006.240 ops/s
Iteration  29: 387998.200 ops/s
Iteration  30: 411470.068 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStreamTest._Benchmark.benchmark_badRequest":
  401596.280 ±(99.9%) 6473.585 ops/s [Average]
  (min, avg, max) = (384176.960, 401596.280, 417253.082), stdev = 9689.358
  CI (99.9%): [395122.695, 408069.865] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
FlowableFlatMapStreamTest._Benchmark.benchmark_badRequest  thrpt   30  401596.280 ± 6473.585  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFromStreamTest._Benchmark.benchmark_closeCalledOnCancel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFromStreamTest._Benchmark.benchmark_closeCalledOnCancel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 340015.523 ops/s
# Warmup Iteration   2: 2068343.199 ops/s
# Warmup Iteration   3: 2677228.504 ops/s
# Warmup Iteration   4: 3055196.824 ops/s
# Warmup Iteration   5: 3114144.385 ops/s
# Warmup Iteration   6: 3121521.910 ops/s
# Warmup Iteration   7: 3182365.950 ops/s
# Warmup Iteration   8: 3115149.629 ops/s
# Warmup Iteration   9: 3085348.787 ops/s
# Warmup Iteration  10: 3114089.034 ops/s
# Warmup Iteration  11: 3024821.467 ops/s
# Warmup Iteration  12: 3128366.610 ops/s
# Warmup Iteration  13: 3021722.486 ops/s
# Warmup Iteration  14: 3091279.598 ops/s
# Warmup Iteration  15: 3133822.916 ops/s
# Warmup Iteration  16: 3146769.370 ops/s
# Warmup Iteration  17: 3147425.214 ops/s
# Warmup Iteration  18: 2968274.897 ops/s
# Warmup Iteration  19: 3115185.925 ops/s
# Warmup Iteration  20: 3077335.150 ops/s
# Warmup Iteration  21: 3052546.720 ops/s
# Warmup Iteration  22: 3120115.304 ops/s
# Warmup Iteration  23: 3224613.959 ops/s
# Warmup Iteration  24: 3197278.106 ops/s
# Warmup Iteration  25: 3029084.875 ops/s
# Warmup Iteration  26: 3293251.359 ops/s
# Warmup Iteration  27: 3126500.826 ops/s
# Warmup Iteration  28: 3045858.008 ops/s
# Warmup Iteration  29: 3236729.195 ops/s
# Warmup Iteration  30: 2975075.400 ops/s
Iteration   1: 3143046.683 ops/s
Iteration   2: 2990589.774 ops/s
Iteration   3: 3124348.414 ops/s
Iteration   4: 3165640.315 ops/s
Iteration   5: 3080600.620 ops/s
Iteration   6: 3222596.699 ops/s
Iteration   7: 3212743.304 ops/s
Iteration   8: 3070286.117 ops/s
Iteration   9: 3245858.235 ops/s
Iteration  10: 3030792.711 ops/s
Iteration  11: 3159436.015 ops/s
Iteration  12: 3086204.727 ops/s
Iteration  13: 3101116.460 ops/s
Iteration  14: 3108895.538 ops/s
Iteration  15: 3079615.589 ops/s
Iteration  16: 3061590.277 ops/s
Iteration  17: 3153552.544 ops/s
Iteration  18: 3145985.857 ops/s
Iteration  19: 3233392.637 ops/s
Iteration  20: 3025982.283 ops/s
Iteration  21: 3213174.458 ops/s
Iteration  22: 3014729.138 ops/s
Iteration  23: 3128798.409 ops/s
Iteration  24: 2260845.536 ops/s
Iteration  25: 3122738.951 ops/s
Iteration  26: 3133939.786 ops/s
Iteration  27: 3137011.113 ops/s
Iteration  28: 3158036.689 ops/s
Iteration  29: 3134915.873 ops/s
Iteration  30: 3053162.209 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableFromStreamTest._Benchmark.benchmark_closeCalledOnCancel":
  3093320.899 ±(99.9%) 113796.450 ops/s [Average]
  (min, avg, max) = (2260845.536, 3093320.899, 3245858.235), stdev = 170325.182
  CI (99.9%): [2979524.449, 3207117.349] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score        Error  Units
FlowableFromStreamTest._Benchmark.benchmark_closeCalledOnCancel  thrpt   30  3093320.899 ± 113796.450  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFromStreamTest._Benchmark.benchmark_manyConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFromStreamTest._Benchmark.benchmark_manyConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 476033.855 ops/s
# Warmup Iteration   2: 1882212.954 ops/s
# Warmup Iteration   3: 2935199.007 ops/s
# Warmup Iteration   4: 2836732.805 ops/s
# Warmup Iteration   5: 2835794.482 ops/s
# Warmup Iteration   6: 2746004.945 ops/s
# Warmup Iteration   7: 2488430.405 ops/s
# Warmup Iteration   8: 2694318.289 ops/s
# Warmup Iteration   9: 2913376.896 ops/s
# Warmup Iteration  10: 2909928.350 ops/s
# Warmup Iteration  11: 2789307.739 ops/s
# Warmup Iteration  12: 3036727.680 ops/s
# Warmup Iteration  13: 2863833.245 ops/s
# Warmup Iteration  14: 2984896.016 ops/s
# Warmup Iteration  15: 2977718.399 ops/s
# Warmup Iteration  16: 2807794.745 ops/s
# Warmup Iteration  17: 2919257.369 ops/s
# Warmup Iteration  18: 2877139.639 ops/s
# Warmup Iteration  19: 2861640.908 ops/s
# Warmup Iteration  20: 3025251.628 ops/s
# Warmup Iteration  21: 3018061.173 ops/s
# Warmup Iteration  22: 2944279.103 ops/s
# Warmup Iteration  23: 2839127.877 ops/s
# Warmup Iteration  24: 2892060.454 ops/s
# Warmup Iteration  25: 2835040.732 ops/s
# Warmup Iteration  26: 2789261.486 ops/s
# Warmup Iteration  27: 2922339.002 ops/s
# Warmup Iteration  28: 2859916.429 ops/s
# Warmup Iteration  29: 2980059.679 ops/s
# Warmup Iteration  30: 2866068.551 ops/s
Iteration   1: 2883369.369 ops/s
Iteration   2: 2953061.467 ops/s
Iteration   3: 2847812.378 ops/s
Iteration   4: 2938423.620 ops/s
Iteration   5: 2855298.401 ops/s
Iteration   6: 2913752.199 ops/s
Iteration   7: 3058987.562 ops/s
Iteration   8: 2771881.581 ops/s
Iteration   9: 3014756.811 ops/s
Iteration  10: 2833399.437 ops/s
Iteration  11: 2897065.316 ops/s
Iteration  12: 2878074.104 ops/s
Iteration  13: 2891114.944 ops/s
Iteration  14: 2894217.940 ops/s
Iteration  15: 2822575.528 ops/s
Iteration  16: 2894729.202 ops/s
Iteration  17: 3019389.139 ops/s
Iteration  18: 2843173.611 ops/s
Iteration  19: 2958261.791 ops/s
Iteration  20: 2914542.047 ops/s
Iteration  21: 2793724.326 ops/s
Iteration  22: 2921608.075 ops/s
Iteration  23: 2833510.457 ops/s
Iteration  24: 2907952.548 ops/s
Iteration  25: 2862628.796 ops/s
Iteration  26: 2855632.972 ops/s
Iteration  27: 2920855.863 ops/s
Iteration  28: 2827384.104 ops/s
Iteration  29: 2939503.786 ops/s
Iteration  30: 2830112.827 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableFromStreamTest._Benchmark.benchmark_manyConditional":
  2892560.007 ±(99.9%) 44142.071 ops/s [Average]
  (min, avg, max) = (2771881.581, 2892560.007, 3058987.562), stdev = 66069.778
  CI (99.9%): [2848417.936, 2936702.078] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
FlowableFromStreamTest._Benchmark.benchmark_manyConditional  thrpt   30  2892560.007 ± 44142.071  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFromStreamTest._Benchmark.benchmark_manyConditionalSkip$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFromStreamTest._Benchmark.benchmark_manyConditionalSkip

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 140898.799 ops/s
# Warmup Iteration   2: 797153.286 ops/s
# Warmup Iteration   3: 1276099.759 ops/s
# Warmup Iteration   4: 1536002.103 ops/s
# Warmup Iteration   5: 1577640.836 ops/s
# Warmup Iteration   6: 1459445.973 ops/s
# Warmup Iteration   7: 1584495.885 ops/s
# Warmup Iteration   8: 1512144.879 ops/s
# Warmup Iteration   9: 1516411.713 ops/s
# Warmup Iteration  10: 1434769.483 ops/s
# Warmup Iteration  11: 1468781.185 ops/s
# Warmup Iteration  12: 1554687.841 ops/s
# Warmup Iteration  13: 1531269.912 ops/s
# Warmup Iteration  14: 1550294.661 ops/s
# Warmup Iteration  15: 1574825.583 ops/s
# Warmup Iteration  16: 1560066.554 ops/s
# Warmup Iteration  17: 1488057.306 ops/s
# Warmup Iteration  18: 1590814.049 ops/s
# Warmup Iteration  19: 1533310.553 ops/s
# Warmup Iteration  20: 1503307.365 ops/s
# Warmup Iteration  21: 1580992.321 ops/s
# Warmup Iteration  22: 1510400.432 ops/s
# Warmup Iteration  23: 1556580.575 ops/s
# Warmup Iteration  24: 1540488.474 ops/s
# Warmup Iteration  25: 1514036.732 ops/s
# Warmup Iteration  26: 1559228.751 ops/s
# Warmup Iteration  27: 1517288.268 ops/s
# Warmup Iteration  28: 1564169.208 ops/s
# Warmup Iteration  29: 1517207.456 ops/s
# Warmup Iteration  30: 1535117.088 ops/s
Iteration   1: 1569656.634 ops/s
Iteration   2: 1523700.147 ops/s
Iteration   3: 1613700.748 ops/s
Iteration   4: 1605759.414 ops/s
Iteration   5: 1502509.027 ops/s
Iteration   6: 1516791.889 ops/s
Iteration   7: 1595533.190 ops/s
Iteration   8: 1529031.549 ops/s
Iteration   9: 1535001.843 ops/s
Iteration  10: 1546137.421 ops/s
Iteration  11: 1499970.222 ops/s
Iteration  12: 1566242.267 ops/s
Iteration  13: 1503848.861 ops/s
Iteration  14: 1543839.264 ops/s
Iteration  15: 1478782.643 ops/s
Iteration  16: 1506026.955 ops/s
Iteration  17: 1586665.599 ops/s
Iteration  18: 1479542.661 ops/s
Iteration  19: 1268223.421 ops/s
Iteration  20: 1555161.742 ops/s
Iteration  21: 1508937.310 ops/s
Iteration  22: 1576340.262 ops/s
Iteration  23: 1554321.024 ops/s
Iteration  24: 1511408.886 ops/s
Iteration  25: 1548776.384 ops/s
Iteration  26: 1531748.157 ops/s
Iteration  27: 1549369.249 ops/s
Iteration  28: 1566296.989 ops/s
Iteration  29: 1504780.590 ops/s
Iteration  30: 1597151.510 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableFromStreamTest._Benchmark.benchmark_manyConditionalSkip":
  1532508.529 ±(99.9%) 41447.419 ops/s [Average]
  (min, avg, max) = (1268223.421, 1532508.529, 1613700.748), stdev = 62036.550
  CI (99.9%): [1491061.110, 1573955.948] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
FlowableFromStreamTest._Benchmark.benchmark_manyConditionalSkip  thrpt   30  1532508.529 ± 41447.419  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLongTest._Benchmark.benchmark_conditionalRequestOneByOne$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLongTest._Benchmark.benchmark_conditionalRequestOneByOne

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 412845.683 ops/s
# Warmup Iteration   2: 2535325.754 ops/s
# Warmup Iteration   3: 2809800.361 ops/s
# Warmup Iteration   4: 3506125.700 ops/s
# Warmup Iteration   5: 3464659.331 ops/s
# Warmup Iteration   6: 3377943.998 ops/s
# Warmup Iteration   7: 3513038.652 ops/s
# Warmup Iteration   8: 3410701.350 ops/s
# Warmup Iteration   9: 3449980.439 ops/s
# Warmup Iteration  10: 3488473.747 ops/s
# Warmup Iteration  11: 3401230.851 ops/s
# Warmup Iteration  12: 3496004.940 ops/s
# Warmup Iteration  13: 3436573.497 ops/s
# Warmup Iteration  14: 3549993.963 ops/s
# Warmup Iteration  15: 3528471.530 ops/s
# Warmup Iteration  16: 3324949.470 ops/s
# Warmup Iteration  17: 3603360.727 ops/s
# Warmup Iteration  18: 3615516.202 ops/s
# Warmup Iteration  19: 3424872.688 ops/s
# Warmup Iteration  20: 3488972.014 ops/s
# Warmup Iteration  21: 3398344.255 ops/s
# Warmup Iteration  22: 3465912.691 ops/s
# Warmup Iteration  23: 3421958.455 ops/s
# Warmup Iteration  24: 3316600.443 ops/s
# Warmup Iteration  25: 3529657.713 ops/s
# Warmup Iteration  26: 3431746.035 ops/s
# Warmup Iteration  27: 3489235.913 ops/s
# Warmup Iteration  28: 3579370.807 ops/s
# Warmup Iteration  29: 3428898.802 ops/s
# Warmup Iteration  30: 3527473.280 ops/s
Iteration   1: 3520732.146 ops/s
Iteration   2: 3444795.753 ops/s
Iteration   3: 3590576.303 ops/s
Iteration   4: 3362890.690 ops/s
Iteration   5: 3533124.454 ops/s
Iteration   6: 3478427.299 ops/s
Iteration   7: 3394878.939 ops/s
Iteration   8: 3402657.592 ops/s
Iteration   9: 3565043.580 ops/s
Iteration  10: 3409920.516 ops/s
Iteration  11: 3550503.718 ops/s
Iteration  12: 3479163.907 ops/s
Iteration  13: 3557248.384 ops/s
Iteration  14: 3468797.164 ops/s
Iteration  15: 3555944.420 ops/s
Iteration  16: 3333337.342 ops/s
Iteration  17: 3597699.600 ops/s
Iteration  18: 3489551.357 ops/s
Iteration  19: 3355926.360 ops/s
Iteration  20: 3625432.275 ops/s
Iteration  21: 3367256.576 ops/s
Iteration  22: 3560017.723 ops/s
Iteration  23: 3387200.878 ops/s
Iteration  24: 3575523.143 ops/s
Iteration  25: 3430761.062 ops/s
Iteration  26: 3473518.278 ops/s
Iteration  27: 3553379.888 ops/s
Iteration  28: 3379415.631 ops/s
Iteration  29: 3430169.630 ops/s
Iteration  30: 3611340.706 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLongTest._Benchmark.benchmark_conditionalRequestOneByOne":
  3482841.177 ±(99.9%) 58215.218 ops/s [Average]
  (min, avg, max) = (3333337.342, 3482841.177, 3625432.275), stdev = 87133.804
  CI (99.9%): [3424625.959, 3541056.395] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
FlowableRangeLongTest._Benchmark.benchmark_conditionalRequestOneByOne  thrpt   30  3482841.177 ± 58215.218  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableCollectTest._Benchmark.benchmark_collectorFailureDoesNotResultInErrorAndCompletedEmissionsFlowable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableCollectTest._Benchmark.benchmark_collectorFailureDoesNotResultInErrorAndCompletedEmissionsFlowable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 86964.650 ops/s
# Warmup Iteration   2: 279298.274 ops/s
# Warmup Iteration   3: 583177.900 ops/s
# Warmup Iteration   4: 623597.202 ops/s
# Warmup Iteration   5: 636418.480 ops/s
# Warmup Iteration   6: 601101.489 ops/s
# Warmup Iteration   7: 564111.627 ops/s
# Warmup Iteration   8: 626463.922 ops/s
# Warmup Iteration   9: 552279.106 ops/s
# Warmup Iteration  10: 653098.617 ops/s
# Warmup Iteration  11: 638302.354 ops/s
# Warmup Iteration  12: 615808.721 ops/s
# Warmup Iteration  13: 647217.887 ops/s
# Warmup Iteration  14: 610642.040 ops/s
# Warmup Iteration  15: 630474.099 ops/s
# Warmup Iteration  16: 636837.578 ops/s
# Warmup Iteration  17: 663681.851 ops/s
# Warmup Iteration  18: 635501.187 ops/s
# Warmup Iteration  19: 688541.321 ops/s
# Warmup Iteration  20: 641744.502 ops/s
# Warmup Iteration  21: 661683.181 ops/s
# Warmup Iteration  22: 647275.026 ops/s
# Warmup Iteration  23: 696675.372 ops/s
# Warmup Iteration  24: 647514.588 ops/s
# Warmup Iteration  25: 611927.720 ops/s
# Warmup Iteration  26: 663988.944 ops/s
# Warmup Iteration  27: 653442.470 ops/s
# Warmup Iteration  28: 650934.271 ops/s
# Warmup Iteration  29: 674859.387 ops/s
# Warmup Iteration  30: 640117.337 ops/s
Iteration   1: 687306.625 ops/s
Iteration   2: 635578.075 ops/s
Iteration   3: 666313.836 ops/s
Iteration   4: 668835.198 ops/s
Iteration   5: 653400.604 ops/s
Iteration   6: 657946.288 ops/s
Iteration   7: 644375.425 ops/s
Iteration   8: 669151.754 ops/s
Iteration   9: 644295.690 ops/s
Iteration  10: 683662.575 ops/s
Iteration  11: 649589.536 ops/s
Iteration  12: 660927.680 ops/s
Iteration  13: 597496.008 ops/s
Iteration  14: 619757.839 ops/s
Iteration  15: 659769.978 ops/s
Iteration  16: 649038.636 ops/s
Iteration  17: 670813.193 ops/s
Iteration  18: 645302.054 ops/s
Iteration  19: 659421.842 ops/s
Iteration  20: 677897.151 ops/s
Iteration  21: 656175.448 ops/s
Iteration  22: 688703.094 ops/s
Iteration  23: 637624.095 ops/s
Iteration  24: 659763.286 ops/s
Iteration  25: 670003.001 ops/s
Iteration  26: 668345.267 ops/s
Iteration  27: 676684.056 ops/s
Iteration  28: 630873.076 ops/s
Iteration  29: 662882.498 ops/s
Iteration  30: 693798.016 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableCollectTest._Benchmark.benchmark_collectorFailureDoesNotResultInErrorAndCompletedEmissionsFlowable":
  658191.061 ±(99.9%) 14003.214 ops/s [Average]
  (min, avg, max) = (597496.008, 658191.061, 693798.016), stdev = 20959.353
  CI (99.9%): [644187.847, 672194.275] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                                    Mode  Cnt       Score       Error  Units
FlowableCollectTest._Benchmark.benchmark_collectorFailureDoesNotResultInErrorAndCompletedEmissionsFlowable  thrpt   30  658191.061 ± 14003.214  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorReturnTest._Benchmark.benchmark_doubleOnError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorReturnTest._Benchmark.benchmark_doubleOnError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 93626.064 ops/s
# Warmup Iteration   2: 277839.903 ops/s
# Warmup Iteration   3: 310436.806 ops/s
# Warmup Iteration   4: 287325.771 ops/s
# Warmup Iteration   5: 328237.472 ops/s
# Warmup Iteration   6: 315535.305 ops/s
# Warmup Iteration   7: 327124.928 ops/s
# Warmup Iteration   8: 307631.882 ops/s
# Warmup Iteration   9: 324934.844 ops/s
# Warmup Iteration  10: 311139.143 ops/s
# Warmup Iteration  11: 323774.551 ops/s
# Warmup Iteration  12: 315633.951 ops/s
# Warmup Iteration  13: 319502.667 ops/s
# Warmup Iteration  14: 320607.559 ops/s
# Warmup Iteration  15: 319003.593 ops/s
# Warmup Iteration  16: 320653.335 ops/s
# Warmup Iteration  17: 320146.951 ops/s
# Warmup Iteration  18: 325339.686 ops/s
# Warmup Iteration  19: 334749.120 ops/s
# Warmup Iteration  20: 321815.194 ops/s
# Warmup Iteration  21: 329696.610 ops/s
# Warmup Iteration  22: 328836.676 ops/s
# Warmup Iteration  23: 330667.862 ops/s
# Warmup Iteration  24: 340034.732 ops/s
# Warmup Iteration  25: 337161.507 ops/s
# Warmup Iteration  26: 322863.816 ops/s
# Warmup Iteration  27: 342782.432 ops/s
# Warmup Iteration  28: 317433.108 ops/s
# Warmup Iteration  29: 337788.927 ops/s
# Warmup Iteration  30: 342164.581 ops/s
Iteration   1: 324836.246 ops/s
Iteration   2: 325809.595 ops/s
Iteration   3: 350892.129 ops/s
Iteration   4: 321593.201 ops/s
Iteration   5: 329639.672 ops/s
Iteration   6: 324742.162 ops/s
Iteration   7: 329832.089 ops/s
Iteration   8: 330154.951 ops/s
Iteration   9: 344575.401 ops/s
Iteration  10: 330654.903 ops/s
Iteration  11: 335734.724 ops/s
Iteration  12: 340722.178 ops/s
Iteration  13: 326276.046 ops/s
Iteration  14: 330666.934 ops/s
Iteration  15: 335800.865 ops/s
Iteration  16: 332157.857 ops/s
Iteration  17: 331920.625 ops/s
Iteration  18: 338136.910 ops/s
Iteration  19: 333072.531 ops/s
Iteration  20: 333484.690 ops/s
Iteration  21: 334526.541 ops/s
Iteration  22: 324805.350 ops/s
Iteration  23: 343465.005 ops/s
Iteration  24: 323096.837 ops/s
Iteration  25: 341833.555 ops/s
Iteration  26: 331151.114 ops/s
Iteration  27: 324631.649 ops/s
Iteration  28: 346912.602 ops/s
Iteration  29: 330787.571 ops/s
Iteration  30: 321769.166 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorReturnTest._Benchmark.benchmark_doubleOnError":
  332456.103 ±(99.9%) 5121.471 ops/s [Average]
  (min, avg, max) = (321593.201, 332456.103, 350892.129), stdev = 7665.577
  CI (99.9%): [327334.633, 337577.574] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
FlowableOnErrorReturnTest._Benchmark.benchmark_doubleOnError  thrpt   30  332456.103 ± 5121.471  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFromStreamTest._Benchmark.benchmark_hasNextCrashConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFromStreamTest._Benchmark.benchmark_hasNextCrashConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 91306.455 ops/s
# Warmup Iteration   2: 319256.520 ops/s
# Warmup Iteration   3: 413708.674 ops/s
# Warmup Iteration   4: 422183.237 ops/s
# Warmup Iteration   5: 408745.890 ops/s
# Warmup Iteration   6: 430808.107 ops/s
# Warmup Iteration   7: 424946.901 ops/s
# Warmup Iteration   8: 437635.886 ops/s
# Warmup Iteration   9: 426669.466 ops/s
# Warmup Iteration  10: 454316.175 ops/s
# Warmup Iteration  11: 443330.073 ops/s
# Warmup Iteration  12: 425296.848 ops/s
# Warmup Iteration  13: 444600.906 ops/s
# Warmup Iteration  14: 440052.466 ops/s
# Warmup Iteration  15: 442228.736 ops/s
# Warmup Iteration  16: 437960.997 ops/s
# Warmup Iteration  17: 469654.278 ops/s
# Warmup Iteration  18: 462822.083 ops/s
# Warmup Iteration  19: 445647.254 ops/s
# Warmup Iteration  20: 415984.168 ops/s
# Warmup Iteration  21: 478327.878 ops/s
# Warmup Iteration  22: 463458.882 ops/s
# Warmup Iteration  23: 446520.277 ops/s
# Warmup Iteration  24: 437182.691 ops/s
# Warmup Iteration  25: 377592.639 ops/s
# Warmup Iteration  26: 435152.082 ops/s
# Warmup Iteration  27: 465776.186 ops/s
# Warmup Iteration  28: 480840.854 ops/s
# Warmup Iteration  29: 441602.530 ops/s
# Warmup Iteration  30: 464891.035 ops/s
Iteration   1: 444914.202 ops/s
Iteration   2: 482107.081 ops/s
Iteration   3: 469515.007 ops/s
Iteration   4: 442512.694 ops/s
Iteration   5: 470679.664 ops/s
Iteration   6: 475306.367 ops/s
Iteration   7: 443867.589 ops/s
Iteration   8: 471646.257 ops/s
Iteration   9: 455037.460 ops/s
Iteration  10: 466881.525 ops/s
Iteration  11: 464005.138 ops/s
Iteration  12: 445465.024 ops/s
Iteration  13: 463986.332 ops/s
Iteration  14: 464663.018 ops/s
Iteration  15: 463898.538 ops/s
Iteration  16: 440725.078 ops/s
Iteration  17: 462998.120 ops/s
Iteration  18: 440034.439 ops/s
Iteration  19: 459766.670 ops/s
Iteration  20: 468782.564 ops/s
Iteration  21: 442452.053 ops/s
Iteration  22: 476678.053 ops/s
Iteration  23: 444057.449 ops/s
Iteration  24: 464700.420 ops/s
Iteration  25: 470068.385 ops/s
Iteration  26: 446118.877 ops/s
Iteration  27: 458519.285 ops/s
Iteration  28: 456808.847 ops/s
Iteration  29: 457265.398 ops/s
Iteration  30: 466202.420 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableFromStreamTest._Benchmark.benchmark_hasNextCrashConditional":
  459322.132 ±(99.9%) 8103.539 ops/s [Average]
  (min, avg, max) = (440034.439, 459322.132, 482107.081), stdev = 12128.996
  CI (99.9%): [451218.593, 467425.671] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score      Error  Units
FlowableFromStreamTest._Benchmark.benchmark_hasNextCrashConditional  thrpt   30  459322.132 ± 8103.539  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFromStreamTest._Benchmark.benchmark_closeCalledOnItemCrashConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFromStreamTest._Benchmark.benchmark_closeCalledOnItemCrashConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 81701.920 ops/s
# Warmup Iteration   2: 370064.101 ops/s
# Warmup Iteration   3: 416733.443 ops/s
# Warmup Iteration   4: 383593.907 ops/s
# Warmup Iteration   5: 451080.624 ops/s
# Warmup Iteration   6: 453084.782 ops/s
# Warmup Iteration   7: 472334.370 ops/s
# Warmup Iteration   8: 437134.134 ops/s
# Warmup Iteration   9: 477488.962 ops/s
# Warmup Iteration  10: 460275.085 ops/s
# Warmup Iteration  11: 444662.469 ops/s
# Warmup Iteration  12: 472187.517 ops/s
# Warmup Iteration  13: 444969.027 ops/s
# Warmup Iteration  14: 473254.322 ops/s
# Warmup Iteration  15: 443943.172 ops/s
# Warmup Iteration  16: 458294.842 ops/s
# Warmup Iteration  17: 464390.292 ops/s
# Warmup Iteration  18: 468465.521 ops/s
# Warmup Iteration  19: 479058.636 ops/s
# Warmup Iteration  20: 465013.078 ops/s
# Warmup Iteration  21: 466433.363 ops/s
# Warmup Iteration  22: 479960.586 ops/s
# Warmup Iteration  23: 456842.058 ops/s
# Warmup Iteration  24: 463279.652 ops/s
# Warmup Iteration  25: 492547.710 ops/s
# Warmup Iteration  26: 460120.144 ops/s
# Warmup Iteration  27: 471154.746 ops/s
# Warmup Iteration  28: 468207.104 ops/s
# Warmup Iteration  29: 493803.521 ops/s
# Warmup Iteration  30: 466520.689 ops/s
Iteration   1: 469169.486 ops/s
Iteration   2: 477285.445 ops/s
Iteration   3: 476015.230 ops/s
Iteration   4: 459299.424 ops/s
Iteration   5: 423269.227 ops/s
Iteration   6: 451579.631 ops/s
Iteration   7: 472753.125 ops/s
Iteration   8: 477080.818 ops/s
Iteration   9: 447609.392 ops/s
Iteration  10: 474158.799 ops/s
Iteration  11: 469110.981 ops/s
Iteration  12: 470641.587 ops/s
Iteration  13: 488556.276 ops/s
Iteration  14: 475150.378 ops/s
Iteration  15: 458295.821 ops/s
Iteration  16: 481096.749 ops/s
Iteration  17: 461760.517 ops/s
Iteration  18: 470899.193 ops/s
Iteration  19: 485273.348 ops/s
Iteration  20: 462130.339 ops/s
Iteration  21: 486669.663 ops/s
Iteration  22: 462339.709 ops/s
Iteration  23: 486990.806 ops/s
Iteration  24: 459927.496 ops/s
Iteration  25: 468669.417 ops/s
Iteration  26: 484133.482 ops/s
Iteration  27: 461223.011 ops/s
Iteration  28: 471109.395 ops/s
Iteration  29: 475302.118 ops/s
Iteration  30: 454438.657 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableFromStreamTest._Benchmark.benchmark_closeCalledOnItemCrashConditional":
  468731.317 ±(99.9%) 9224.705 ops/s [Average]
  (min, avg, max) = (423269.227, 468731.317, 488556.276), stdev = 13807.105
  CI (99.9%): [459506.613, 477956.022] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt       Score      Error  Units
FlowableFromStreamTest._Benchmark.benchmark_closeCalledOnItemCrashConditional  thrpt   30  468731.317 ± 9224.705  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFromStreamTest._Benchmark.benchmark_noOfferNoCrashAfterClear$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFromStreamTest._Benchmark.benchmark_noOfferNoCrashAfterClear

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 105571.558 ops/s
# Warmup Iteration   2: 297085.454 ops/s
# Warmup Iteration   3: 334727.173 ops/s
# Warmup Iteration   4: 324403.976 ops/s
# Warmup Iteration   5: 328201.745 ops/s
# Warmup Iteration   6: 326568.370 ops/s
# Warmup Iteration   7: 332070.954 ops/s
# Warmup Iteration   8: 335716.299 ops/s
# Warmup Iteration   9: 328757.625 ops/s
# Warmup Iteration  10: 325560.302 ops/s
# Warmup Iteration  11: 330893.851 ops/s
# Warmup Iteration  12: 321035.121 ops/s
# Warmup Iteration  13: 338877.393 ops/s
# Warmup Iteration  14: 344217.353 ops/s
# Warmup Iteration  15: 341533.478 ops/s
# Warmup Iteration  16: 325517.332 ops/s
# Warmup Iteration  17: 361630.327 ops/s
# Warmup Iteration  18: 339496.643 ops/s
# Warmup Iteration  19: 349919.840 ops/s
# Warmup Iteration  20: 359922.399 ops/s
# Warmup Iteration  21: 335158.046 ops/s
# Warmup Iteration  22: 364052.308 ops/s
# Warmup Iteration  23: 359963.976 ops/s
# Warmup Iteration  24: 345389.205 ops/s
# Warmup Iteration  25: 360557.398 ops/s
# Warmup Iteration  26: 350635.487 ops/s
# Warmup Iteration  27: 349044.286 ops/s
# Warmup Iteration  28: 365244.621 ops/s
# Warmup Iteration  29: 341950.453 ops/s
# Warmup Iteration  30: 357857.913 ops/s
Iteration   1: 348327.194 ops/s
Iteration   2: 341739.877 ops/s
Iteration   3: 367509.785 ops/s
Iteration   4: 347570.326 ops/s
Iteration   5: 363410.109 ops/s
Iteration   6: 348637.393 ops/s
Iteration   7: 339547.945 ops/s
Iteration   8: 362988.534 ops/s
Iteration   9: 340947.644 ops/s
Iteration  10: 353239.570 ops/s
Iteration  11: 351120.765 ops/s
Iteration  12: 351087.102 ops/s
Iteration  13: 358368.151 ops/s
Iteration  14: 348773.938 ops/s
Iteration  15: 342183.500 ops/s
Iteration  16: 358379.646 ops/s
Iteration  17: 348805.644 ops/s
Iteration  18: 353229.808 ops/s
Iteration  19: 354551.878 ops/s
Iteration  20: 348168.543 ops/s
Iteration  21: 359801.057 ops/s
Iteration  22: 349777.810 ops/s
Iteration  23: 356862.394 ops/s
Iteration  24: 358376.759 ops/s
Iteration  25: 340863.641 ops/s
Iteration  26: 367318.894 ops/s
Iteration  27: 351269.155 ops/s
Iteration  28: 353730.428 ops/s
Iteration  29: 365730.362 ops/s
Iteration  30: 335530.321 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableFromStreamTest._Benchmark.benchmark_noOfferNoCrashAfterClear":
  352261.606 ±(99.9%) 5675.233 ops/s [Average]
  (min, avg, max) = (335530.321, 352261.606, 367509.785), stdev = 8494.422
  CI (99.9%): [346586.373, 357936.839] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score      Error  Units
FlowableFromStreamTest._Benchmark.benchmark_noOfferNoCrashAfterClear  thrpt   30  352261.606 ± 5675.233  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferTest._Benchmark.benchmark_fusedError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferTest._Benchmark.benchmark_fusedError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 183381.258 ops/s
# Warmup Iteration   2: 476299.797 ops/s
# Warmup Iteration   3: 523990.664 ops/s
# Warmup Iteration   4: 497757.775 ops/s
# Warmup Iteration   5: 512441.697 ops/s
# Warmup Iteration   6: 556693.238 ops/s
# Warmup Iteration   7: 540874.586 ops/s
# Warmup Iteration   8: 560314.222 ops/s
# Warmup Iteration   9: 419124.715 ops/s
# Warmup Iteration  10: 569601.513 ops/s
# Warmup Iteration  11: 556610.328 ops/s
# Warmup Iteration  12: 528896.903 ops/s
# Warmup Iteration  13: 566622.019 ops/s
# Warmup Iteration  14: 535233.541 ops/s
# Warmup Iteration  15: 555744.319 ops/s
# Warmup Iteration  16: 539736.244 ops/s
# Warmup Iteration  17: 555353.936 ops/s
# Warmup Iteration  18: 607253.057 ops/s
# Warmup Iteration  19: 553569.694 ops/s
# Warmup Iteration  20: 585106.249 ops/s
# Warmup Iteration  21: 566126.379 ops/s
# Warmup Iteration  22: 588296.280 ops/s
# Warmup Iteration  23: 584952.453 ops/s
# Warmup Iteration  24: 556831.623 ops/s
# Warmup Iteration  25: 593339.288 ops/s
# Warmup Iteration  26: 560029.043 ops/s
# Warmup Iteration  27: 589718.796 ops/s
# Warmup Iteration  28: 565952.076 ops/s
# Warmup Iteration  29: 578993.187 ops/s
# Warmup Iteration  30: 588447.219 ops/s
Iteration   1: 590223.144 ops/s
Iteration   2: 576251.922 ops/s
Iteration   3: 587639.673 ops/s
Iteration   4: 568241.676 ops/s
Iteration   5: 569883.585 ops/s
Iteration   6: 596766.419 ops/s
Iteration   7: 557172.362 ops/s
Iteration   8: 589548.065 ops/s
Iteration   9: 570119.909 ops/s
Iteration  10: 604137.285 ops/s
Iteration  11: 557537.296 ops/s
Iteration  12: 591662.359 ops/s
Iteration  13: 571063.972 ops/s
Iteration  14: 561704.099 ops/s
Iteration  15: 582666.680 ops/s
Iteration  16: 566365.981 ops/s
Iteration  17: 566064.069 ops/s
Iteration  18: 594180.597 ops/s
Iteration  19: 571795.777 ops/s
Iteration  20: 584678.522 ops/s
Iteration  21: 603970.363 ops/s
Iteration  22: 562744.008 ops/s
Iteration  23: 597852.706 ops/s
Iteration  24: 561751.221 ops/s
Iteration  25: 585106.745 ops/s
Iteration  26: 590931.590 ops/s
Iteration  27: 561921.469 ops/s
Iteration  28: 583146.836 ops/s
Iteration  29: 575415.700 ops/s
Iteration  30: 577536.842 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferTest._Benchmark.benchmark_fusedError":
  578602.696 ±(99.9%) 9365.675 ops/s [Average]
  (min, avg, max) = (557172.362, 578602.696, 604137.285), stdev = 14018.103
  CI (99.9%): [569237.021, 587968.371] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
FlowableOnBackpressureBufferTest._Benchmark.benchmark_fusedError  thrpt   30  578602.696 ± 9365.675  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableLastTest._Benchmark.benchmark_lastOrErrorMultipleElements$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableLastTest._Benchmark.benchmark_lastOrErrorMultipleElements

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1077951.979 ops/s
# Warmup Iteration   2: 3819316.651 ops/s
# Warmup Iteration   3: 4561607.468 ops/s
# Warmup Iteration   4: 5240405.667 ops/s
# Warmup Iteration   5: 5191114.377 ops/s
# Warmup Iteration   6: 4991263.483 ops/s
# Warmup Iteration   7: 5136569.327 ops/s
# Warmup Iteration   8: 5406587.012 ops/s
# Warmup Iteration   9: 4982314.019 ops/s
# Warmup Iteration  10: 5255116.019 ops/s
# Warmup Iteration  11: 5135834.397 ops/s
# Warmup Iteration  12: 5061419.497 ops/s
# Warmup Iteration  13: 5153942.014 ops/s
# Warmup Iteration  14: 5041163.095 ops/s
# Warmup Iteration  15: 5214979.414 ops/s
# Warmup Iteration  16: 5041678.481 ops/s
# Warmup Iteration  17: 5086956.762 ops/s
# Warmup Iteration  18: 5255510.417 ops/s
# Warmup Iteration  19: 5043158.040 ops/s
# Warmup Iteration  20: 5332847.217 ops/s
# Warmup Iteration  21: 4985978.984 ops/s
# Warmup Iteration  22: 5128830.576 ops/s
# Warmup Iteration  23: 5316260.930 ops/s
# Warmup Iteration  24: 5091203.496 ops/s
# Warmup Iteration  25: 5063212.971 ops/s
# Warmup Iteration  26: 5291363.978 ops/s
# Warmup Iteration  27: 5055956.712 ops/s
# Warmup Iteration  28: 3955793.191 ops/s
# Warmup Iteration  29: 5080018.373 ops/s
# Warmup Iteration  30: 5071734.769 ops/s
Iteration   1: 5155548.004 ops/s
Iteration   2: 5131519.004 ops/s
Iteration   3: 5282638.296 ops/s
Iteration   4: 5078693.538 ops/s
Iteration   5: 5129650.288 ops/s
Iteration   6: 5352199.498 ops/s
Iteration   7: 5013173.522 ops/s
Iteration   8: 5151235.526 ops/s
Iteration   9: 5056150.199 ops/s
Iteration  10: 5101806.739 ops/s
Iteration  11: 5299322.010 ops/s
Iteration  12: 5151655.715 ops/s
Iteration  13: 5249230.777 ops/s
Iteration  14: 4914257.121 ops/s
Iteration  15: 5070867.732 ops/s
Iteration  16: 5322894.679 ops/s
Iteration  17: 4985199.172 ops/s
Iteration  18: 5176363.255 ops/s
Iteration  19: 5165627.195 ops/s
Iteration  20: 5254029.543 ops/s
Iteration  21: 4990467.289 ops/s
Iteration  22: 5159532.978 ops/s
Iteration  23: 5320418.043 ops/s
Iteration  24: 5176944.459 ops/s
Iteration  25: 5194011.338 ops/s
Iteration  26: 5108079.852 ops/s
Iteration  27: 5013401.237 ops/s
Iteration  28: 5244108.331 ops/s
Iteration  29: 5022709.277 ops/s
Iteration  30: 5256492.324 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableLastTest._Benchmark.benchmark_lastOrErrorMultipleElements":
  5150940.898 ±(99.9%) 75571.562 ops/s [Average]
  (min, avg, max) = (4914257.121, 5150940.898, 5352199.498), stdev = 113111.965
  CI (99.9%): [5075369.336, 5226512.460] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
FlowableLastTest._Benchmark.benchmark_lastOrErrorMultipleElements  thrpt   30  5150940.898 ± 75571.562  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsTest._Benchmark.benchmark_withNonEmptyFlowable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsTest._Benchmark.benchmark_withNonEmptyFlowable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2010591.869 ops/s
# Warmup Iteration   2: 5499136.413 ops/s
# Warmup Iteration   3: 6499137.257 ops/s
# Warmup Iteration   4: 6965640.290 ops/s
# Warmup Iteration   5: 7435704.432 ops/s
# Warmup Iteration   6: 6983589.013 ops/s
# Warmup Iteration   7: 6907846.947 ops/s
# Warmup Iteration   8: 7556418.858 ops/s
# Warmup Iteration   9: 7301339.572 ops/s
# Warmup Iteration  10: 7112411.482 ops/s
# Warmup Iteration  11: 7264823.932 ops/s
# Warmup Iteration  12: 7051050.416 ops/s
# Warmup Iteration  13: 7240132.118 ops/s
# Warmup Iteration  14: 7526278.277 ops/s
# Warmup Iteration  15: 7069712.583 ops/s
# Warmup Iteration  16: 7137899.910 ops/s
# Warmup Iteration  17: 7137356.731 ops/s
# Warmup Iteration  18: 7163792.173 ops/s
# Warmup Iteration  19: 7345158.904 ops/s
# Warmup Iteration  20: 7019743.528 ops/s
# Warmup Iteration  21: 7542256.875 ops/s
# Warmup Iteration  22: 7337442.291 ops/s
# Warmup Iteration  23: 6794978.925 ops/s
# Warmup Iteration  24: 7187611.935 ops/s
# Warmup Iteration  25: 7044581.652 ops/s
# Warmup Iteration  26: 7222241.005 ops/s
# Warmup Iteration  27: 7014919.561 ops/s
# Warmup Iteration  28: 7045462.921 ops/s
# Warmup Iteration  29: 7512980.279 ops/s
# Warmup Iteration  30: 7029498.621 ops/s
Iteration   1: 7304120.414 ops/s
Iteration   2: 7224433.737 ops/s
Iteration   3: 7254553.431 ops/s
Iteration   4: 7117341.723 ops/s
Iteration   5: 6957714.218 ops/s
Iteration   6: 7478885.780 ops/s
Iteration   7: 7058416.281 ops/s
Iteration   8: 7156194.847 ops/s
Iteration   9: 7400492.548 ops/s
Iteration  10: 6877823.942 ops/s
Iteration  11: 7160350.903 ops/s
Iteration  12: 7034417.950 ops/s
Iteration  13: 7340347.787 ops/s
Iteration  14: 7147917.638 ops/s
Iteration  15: 7072365.959 ops/s
Iteration  16: 7365515.046 ops/s
Iteration  17: 7023867.549 ops/s
Iteration  18: 7352109.492 ops/s
Iteration  19: 7030327.493 ops/s
Iteration  20: 7128218.040 ops/s
Iteration  21: 7252102.178 ops/s
Iteration  22: 6814290.568 ops/s
Iteration  23: 7559957.565 ops/s
Iteration  24: 7059787.058 ops/s
Iteration  25: 7286217.778 ops/s
Iteration  26: 7037635.097 ops/s
Iteration  27: 7571638.123 ops/s
Iteration  28: 7357041.138 ops/s
Iteration  29: 6859856.987 ops/s
Iteration  30: 7284738.830 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsTest._Benchmark.benchmark_withNonEmptyFlowable":
  7185622.670 ±(99.9%) 131347.594 ops/s [Average]
  (min, avg, max) = (6814290.568, 7185622.670, 7571638.123), stdev = 196594.910
  CI (99.9%): [7054275.076, 7316970.264] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score        Error  Units
FlowableIgnoreElementsTest._Benchmark.benchmark_withNonEmptyFlowable  thrpt   30  7185622.670 ± 131347.594  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableStartWithTest._Benchmark.benchmark_justFlowableJust$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableStartWithTest._Benchmark.benchmark_justFlowableJust

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 438964.664 ops/s
# Warmup Iteration   2: 1260642.546 ops/s
# Warmup Iteration   3: 2123565.336 ops/s
# Warmup Iteration   4: 2006864.307 ops/s
# Warmup Iteration   5: 2283595.307 ops/s
# Warmup Iteration   6: 2225263.809 ops/s
# Warmup Iteration   7: 2205472.492 ops/s
# Warmup Iteration   8: 2356304.309 ops/s
# Warmup Iteration   9: 2255955.652 ops/s
# Warmup Iteration  10: 2362059.746 ops/s
# Warmup Iteration  11: 2204228.498 ops/s
# Warmup Iteration  12: 2336087.699 ops/s
# Warmup Iteration  13: 2315864.931 ops/s
# Warmup Iteration  14: 2233485.513 ops/s
# Warmup Iteration  15: 2344540.843 ops/s
# Warmup Iteration  16: 2239019.516 ops/s
# Warmup Iteration  17: 2366202.851 ops/s
# Warmup Iteration  18: 2264359.057 ops/s
# Warmup Iteration  19: 2315976.973 ops/s
# Warmup Iteration  20: 2380039.781 ops/s
# Warmup Iteration  21: 2274545.431 ops/s
# Warmup Iteration  22: 2069672.692 ops/s
# Warmup Iteration  23: 2136984.390 ops/s
# Warmup Iteration  24: 2171158.997 ops/s
# Warmup Iteration  25: 2354454.252 ops/s
# Warmup Iteration  26: 2314876.029 ops/s
# Warmup Iteration  27: 2213950.282 ops/s
# Warmup Iteration  28: 2372630.451 ops/s
# Warmup Iteration  29: 2268659.817 ops/s
# Warmup Iteration  30: 2288391.646 ops/s
Iteration   1: 2272597.259 ops/s
Iteration   2: 2219448.017 ops/s
Iteration   3: 2415802.336 ops/s
Iteration   4: 2226327.826 ops/s
Iteration   5: 2298318.159 ops/s
Iteration   6: 2411400.105 ops/s
Iteration   7: 2256703.548 ops/s
Iteration   8: 2395727.128 ops/s
Iteration   9: 2279792.598 ops/s
Iteration  10: 2338498.170 ops/s
Iteration  11: 2286137.302 ops/s
Iteration  12: 2362070.145 ops/s
Iteration  13: 2375592.079 ops/s
Iteration  14: 2207783.773 ops/s
Iteration  15: 2328278.884 ops/s
Iteration  16: 2297735.965 ops/s
Iteration  17: 2371209.744 ops/s
Iteration  18: 2313391.456 ops/s
Iteration  19: 2234109.308 ops/s
Iteration  20: 2323581.058 ops/s
Iteration  21: 2327487.924 ops/s
Iteration  22: 2397436.645 ops/s
Iteration  23: 2203485.401 ops/s
Iteration  24: 2376783.950 ops/s
Iteration  25: 2306176.274 ops/s
Iteration  26: 2286562.210 ops/s
Iteration  27: 2251112.632 ops/s
Iteration  28: 2304148.031 ops/s
Iteration  29: 2406538.301 ops/s
Iteration  30: 2198057.554 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableStartWithTest._Benchmark.benchmark_justFlowableJust":
  2309076.459 ±(99.9%) 44385.577 ops/s [Average]
  (min, avg, max) = (2198057.554, 2309076.459, 2415802.336), stdev = 66434.248
  CI (99.9%): [2264690.882, 2353462.037] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
FlowableStartWithTest._Benchmark.benchmark_justFlowableJust  thrpt   30  2309076.459 ± 44385.577  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtTest._Benchmark.benchmark_elementAtOrDefault$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtTest._Benchmark.benchmark_elementAtOrDefault

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2309174.561 ops/s
# Warmup Iteration   2: 5379540.663 ops/s
# Warmup Iteration   3: 6232185.993 ops/s
# Warmup Iteration   4: 6995426.062 ops/s
# Warmup Iteration   5: 6826602.189 ops/s
# Warmup Iteration   6: 7092874.445 ops/s
# Warmup Iteration   7: 6577329.020 ops/s
# Warmup Iteration   8: 6803444.420 ops/s
# Warmup Iteration   9: 6879790.270 ops/s
# Warmup Iteration  10: 6885703.515 ops/s
# Warmup Iteration  11: 6998685.945 ops/s
# Warmup Iteration  12: 7087358.084 ops/s
# Warmup Iteration  13: 6708960.996 ops/s
# Warmup Iteration  14: 7178626.114 ops/s
# Warmup Iteration  15: 6864506.106 ops/s
# Warmup Iteration  16: 7122285.675 ops/s
# Warmup Iteration  17: 6983953.936 ops/s
# Warmup Iteration  18: 6811423.016 ops/s
# Warmup Iteration  19: 6895924.919 ops/s
# Warmup Iteration  20: 6920209.702 ops/s
# Warmup Iteration  21: 7112927.520 ops/s
# Warmup Iteration  22: 6654034.877 ops/s
# Warmup Iteration  23: 7011047.333 ops/s
# Warmup Iteration  24: 7078102.881 ops/s
# Warmup Iteration  25: 6760071.134 ops/s
# Warmup Iteration  26: 6907881.222 ops/s
# Warmup Iteration  27: 6686633.109 ops/s
# Warmup Iteration  28: 6900675.731 ops/s
# Warmup Iteration  29: 7037010.377 ops/s
# Warmup Iteration  30: 6664115.362 ops/s
Iteration   1: 7146428.656 ops/s
Iteration   2: 7136434.969 ops/s
Iteration   3: 6649260.813 ops/s
Iteration   4: 7054261.612 ops/s
Iteration   5: 6778215.438 ops/s
Iteration   6: 6821819.370 ops/s
Iteration   7: 6649641.433 ops/s
Iteration   8: 7019768.739 ops/s
Iteration   9: 7257023.409 ops/s
Iteration  10: 6795470.952 ops/s
Iteration  11: 7023128.204 ops/s
Iteration  12: 6848255.285 ops/s
Iteration  13: 6907049.879 ops/s
Iteration  14: 6777172.508 ops/s
Iteration  15: 6875848.407 ops/s
Iteration  16: 7027069.991 ops/s
Iteration  17: 6619852.819 ops/s
Iteration  18: 7121818.022 ops/s
Iteration  19: 6620660.286 ops/s
Iteration  20: 6964790.809 ops/s
Iteration  21: 6787376.555 ops/s
Iteration  22: 6987853.969 ops/s
Iteration  23: 7203056.756 ops/s
Iteration  24: 6813524.726 ops/s
Iteration  25: 6998085.267 ops/s
Iteration  26: 6765521.525 ops/s
Iteration  27: 7019013.772 ops/s
Iteration  28: 6670245.553 ops/s
Iteration  29: 6872930.902 ops/s
Iteration  30: 6826526.458 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtTest._Benchmark.benchmark_elementAtOrDefault":
  6901270.236 ±(99.9%) 118982.368 ops/s [Average]
  (min, avg, max) = (6619852.819, 6901270.236, 7257023.409), stdev = 178087.221
  CI (99.9%): [6782287.868, 7020252.604] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score        Error  Units
FlowableElementAtTest._Benchmark.benchmark_elementAtOrDefault  thrpt   30  6901270.236 ± 118982.368  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtTest._Benchmark.benchmark_elementAtOrDefaultWithIndexOutOfBounds$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtTest._Benchmark.benchmark_elementAtOrDefaultWithIndexOutOfBounds

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2604896.199 ops/s
# Warmup Iteration   2: 6035435.281 ops/s
# Warmup Iteration   3: 7166830.685 ops/s
# Warmup Iteration   4: 8098915.092 ops/s
# Warmup Iteration   5: 8281424.818 ops/s
# Warmup Iteration   6: 8093715.602 ops/s
# Warmup Iteration   7: 7962139.857 ops/s
# Warmup Iteration   8: 8243546.191 ops/s
# Warmup Iteration   9: 7746513.960 ops/s
# Warmup Iteration  10: 8359542.969 ops/s
# Warmup Iteration  11: 7916296.134 ops/s
# Warmup Iteration  12: 7947572.245 ops/s
# Warmup Iteration  13: 8310403.459 ops/s
# Warmup Iteration  14: 7858137.977 ops/s
# Warmup Iteration  15: 8188344.325 ops/s
# Warmup Iteration  16: 7971950.066 ops/s
# Warmup Iteration  17: 7085275.563 ops/s
# Warmup Iteration  18: 7392627.422 ops/s
# Warmup Iteration  19: 8044407.320 ops/s
# Warmup Iteration  20: 8463230.837 ops/s
# Warmup Iteration  21: 7922657.717 ops/s
# Warmup Iteration  22: 8298406.969 ops/s
# Warmup Iteration  23: 8281927.862 ops/s
# Warmup Iteration  24: 8100509.592 ops/s
# Warmup Iteration  25: 8005840.839 ops/s
# Warmup Iteration  26: 8426061.383 ops/s
# Warmup Iteration  27: 8070535.893 ops/s
# Warmup Iteration  28: 8138473.165 ops/s
# Warmup Iteration  29: 8046339.157 ops/s
# Warmup Iteration  30: 8241878.450 ops/s
Iteration   1: 8210250.474 ops/s
Iteration   2: 7970995.063 ops/s
Iteration   3: 8418863.189 ops/s
Iteration   4: 8141077.858 ops/s
Iteration   5: 8291617.585 ops/s
Iteration   6: 8099398.668 ops/s
Iteration   7: 7989366.200 ops/s
Iteration   8: 8071108.320 ops/s
Iteration   9: 8094353.851 ops/s
Iteration  10: 8058428.141 ops/s
Iteration  11: 8528765.734 ops/s
Iteration  12: 7955602.223 ops/s
Iteration  13: 8114193.522 ops/s
Iteration  14: 8525749.854 ops/s
Iteration  15: 7763904.506 ops/s
Iteration  16: 8375867.253 ops/s
Iteration  17: 8180230.116 ops/s
Iteration  18: 8104273.289 ops/s
Iteration  19: 8415905.063 ops/s
Iteration  20: 8078033.310 ops/s
Iteration  21: 8389533.424 ops/s
Iteration  22: 7840676.170 ops/s
Iteration  23: 8315228.771 ops/s
Iteration  24: 8041743.780 ops/s
Iteration  25: 7971339.202 ops/s
Iteration  26: 8394612.454 ops/s
Iteration  27: 8035619.436 ops/s
Iteration  28: 8032769.295 ops/s
Iteration  29: 8463670.487 ops/s
Iteration  30: 7755602.791 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtTest._Benchmark.benchmark_elementAtOrDefaultWithIndexOutOfBounds":
  8154292.668 ±(99.9%) 143664.795 ops/s [Average]
  (min, avg, max) = (7755602.791, 8154292.668, 8528765.734), stdev = 215030.719
  CI (99.9%): [8010627.872, 8297957.463] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           Mode  Cnt        Score        Error  Units
FlowableElementAtTest._Benchmark.benchmark_elementAtOrDefaultWithIndexOutOfBounds  thrpt   30  8154292.668 ± 143664.795  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableConcatTests._Benchmark.benchmark_concatSimple$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableConcatTests._Benchmark.benchmark_concatSimple

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 466362.005 ops/s
# Warmup Iteration   2: 1959168.235 ops/s
# Warmup Iteration   3: 2349018.598 ops/s
# Warmup Iteration   4: 2578243.212 ops/s
# Warmup Iteration   5: 2721495.731 ops/s
# Warmup Iteration   6: 2617990.654 ops/s
# Warmup Iteration   7: 2616810.637 ops/s
# Warmup Iteration   8: 2766020.102 ops/s
# Warmup Iteration   9: 2670419.175 ops/s
# Warmup Iteration  10: 2697427.670 ops/s
# Warmup Iteration  11: 2682926.886 ops/s
# Warmup Iteration  12: 2625524.923 ops/s
# Warmup Iteration  13: 2736335.575 ops/s
# Warmup Iteration  14: 2617644.956 ops/s
# Warmup Iteration  15: 2607445.092 ops/s
# Warmup Iteration  16: 2697326.101 ops/s
# Warmup Iteration  17: 2599240.691 ops/s
# Warmup Iteration  18: 2678879.773 ops/s
# Warmup Iteration  19: 2692934.966 ops/s
# Warmup Iteration  20: 2700199.222 ops/s
# Warmup Iteration  21: 2646692.682 ops/s
# Warmup Iteration  22: 2599823.689 ops/s
# Warmup Iteration  23: 2762766.015 ops/s
# Warmup Iteration  24: 2577775.828 ops/s
# Warmup Iteration  25: 2684518.157 ops/s
# Warmup Iteration  26: 2622618.651 ops/s
# Warmup Iteration  27: 2586410.318 ops/s
# Warmup Iteration  28: 2705938.945 ops/s
# Warmup Iteration  29: 2631933.571 ops/s
# Warmup Iteration  30: 2727607.324 ops/s
Iteration   1: 2643027.368 ops/s
Iteration   2: 2735488.814 ops/s
Iteration   3: 2733993.075 ops/s
Iteration   4: 2635557.086 ops/s
Iteration   5: 2666637.094 ops/s
Iteration   6: 2653203.907 ops/s
Iteration   7: 2750170.657 ops/s
Iteration   8: 2670323.871 ops/s
Iteration   9: 2575922.660 ops/s
Iteration  10: 2719017.043 ops/s
Iteration  11: 2625650.473 ops/s
Iteration  12: 2721150.069 ops/s
Iteration  13: 2613729.276 ops/s
Iteration  14: 2664478.350 ops/s
Iteration  15: 2720151.908 ops/s
Iteration  16: 2552474.218 ops/s
Iteration  17: 2673606.171 ops/s
Iteration  18: 2680273.346 ops/s
Iteration  19: 2577509.108 ops/s
Iteration  20: 2681499.282 ops/s
Iteration  21: 2619260.419 ops/s
Iteration  22: 2671371.993 ops/s
Iteration  23: 2581455.567 ops/s
Iteration  24: 2693055.231 ops/s
Iteration  25: 2747888.813 ops/s
Iteration  26: 2612919.044 ops/s
Iteration  27: 2731409.142 ops/s
Iteration  28: 2580979.049 ops/s
Iteration  29: 2720707.576 ops/s
Iteration  30: 2667671.212 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableConcatTests._Benchmark.benchmark_concatSimple":
  2664019.394 ±(99.9%) 38170.482 ops/s [Average]
  (min, avg, max) = (2552474.218, 2664019.394, 2750170.657), stdev = 57131.785
  CI (99.9%): [2625848.912, 2702189.876] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
FlowableConcatTests._Benchmark.benchmark_concatSimple  thrpt   30  2664019.394 ± 38170.482  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDelayTest._Benchmark.benchmark_withPublisherDispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDelayTest._Benchmark.benchmark_withPublisherDispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 967026.481 ops/s
# Warmup Iteration   2: 5586934.887 ops/s
# Warmup Iteration   3: 5978358.726 ops/s
# Warmup Iteration   4: 7370091.449 ops/s
# Warmup Iteration   5: 6960499.859 ops/s
# Warmup Iteration   6: 7225664.194 ops/s
# Warmup Iteration   7: 7308968.536 ops/s
# Warmup Iteration   8: 7047184.968 ops/s
# Warmup Iteration   9: 7480220.653 ops/s
# Warmup Iteration  10: 7163993.346 ops/s
# Warmup Iteration  11: 7029313.715 ops/s
# Warmup Iteration  12: 6793998.854 ops/s
# Warmup Iteration  13: 6297118.391 ops/s
# Warmup Iteration  14: 7002537.233 ops/s
# Warmup Iteration  15: 7281606.436 ops/s
# Warmup Iteration  16: 7219325.686 ops/s
# Warmup Iteration  17: 7167178.953 ops/s
# Warmup Iteration  18: 7107037.003 ops/s
# Warmup Iteration  19: 7283447.194 ops/s
# Warmup Iteration  20: 7253845.288 ops/s
# Warmup Iteration  21: 7225186.104 ops/s
# Warmup Iteration  22: 7509925.952 ops/s
# Warmup Iteration  23: 7109168.070 ops/s
# Warmup Iteration  24: 7099053.771 ops/s
# Warmup Iteration  25: 7459226.798 ops/s
# Warmup Iteration  26: 7155164.661 ops/s
# Warmup Iteration  27: 7455681.340 ops/s
# Warmup Iteration  28: 7420693.559 ops/s
# Warmup Iteration  29: 7332309.012 ops/s
# Warmup Iteration  30: 7253787.770 ops/s
Iteration   1: 6899140.668 ops/s
Iteration   2: 7162419.436 ops/s
Iteration   3: 7393000.383 ops/s
Iteration   4: 7050592.717 ops/s
Iteration   5: 7221995.219 ops/s
Iteration   6: 7284267.933 ops/s
Iteration   7: 7121274.452 ops/s
Iteration   8: 7309332.895 ops/s
Iteration   9: 7184647.143 ops/s
Iteration  10: 7522341.019 ops/s
Iteration  11: 7078002.823 ops/s
Iteration  12: 7232630.515 ops/s
Iteration  13: 7364775.517 ops/s
Iteration  14: 7243510.776 ops/s
Iteration  15: 7098281.923 ops/s
Iteration  16: 7629142.458 ops/s
Iteration  17: 7034306.989 ops/s
Iteration  18: 7352239.631 ops/s
Iteration  19: 7176390.957 ops/s
Iteration  20: 7340760.126 ops/s
Iteration  21: 7389685.758 ops/s
Iteration  22: 7086191.339 ops/s
Iteration  23: 7392421.006 ops/s
Iteration  24: 7189287.088 ops/s
Iteration  25: 7262660.814 ops/s
Iteration  26: 7302539.639 ops/s
Iteration  27: 7256285.593 ops/s
Iteration  28: 7486244.702 ops/s
Iteration  29: 7042125.774 ops/s
Iteration  30: 7237714.966 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleDelayTest._Benchmark.benchmark_withPublisherDispose":
  7244807.009 ±(99.9%) 106985.512 ops/s [Average]
  (min, avg, max) = (6899140.668, 7244807.009, 7629142.458), stdev = 160130.890
  CI (99.9%): [7137821.497, 7351792.521] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score        Error  Units
SingleDelayTest._Benchmark.benchmark_withPublisherDispose  thrpt   30  7244807.009 ± 106985.512  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFromPublisherTest._Benchmark.benchmark_isDisposed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFromPublisherTest._Benchmark.benchmark_isDisposed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3100235.182 ops/s
# Warmup Iteration   2: 8846517.730 ops/s
# Warmup Iteration   3: 10407905.395 ops/s
# Warmup Iteration   4: 11036705.404 ops/s
# Warmup Iteration   5: 11794774.958 ops/s
# Warmup Iteration   6: 11080209.305 ops/s
# Warmup Iteration   7: 11532538.516 ops/s
# Warmup Iteration   8: 11054072.891 ops/s
# Warmup Iteration   9: 11471929.741 ops/s
# Warmup Iteration  10: 10979153.704 ops/s
# Warmup Iteration  11: 11369516.623 ops/s
# Warmup Iteration  12: 11417389.446 ops/s
# Warmup Iteration  13: 11359824.166 ops/s
# Warmup Iteration  14: 11716933.158 ops/s
# Warmup Iteration  15: 10976673.989 ops/s
# Warmup Iteration  16: 11586851.790 ops/s
# Warmup Iteration  17: 11129056.551 ops/s
# Warmup Iteration  18: 11410276.909 ops/s
# Warmup Iteration  19: 11865523.238 ops/s
# Warmup Iteration  20: 11069436.452 ops/s
# Warmup Iteration  21: 11496761.396 ops/s
# Warmup Iteration  22: 11142758.591 ops/s
# Warmup Iteration  23: 11704424.545 ops/s
# Warmup Iteration  24: 11091601.321 ops/s
# Warmup Iteration  25: 11021872.156 ops/s
# Warmup Iteration  26: 11840101.971 ops/s
# Warmup Iteration  27: 11144514.509 ops/s
# Warmup Iteration  28: 11115958.622 ops/s
# Warmup Iteration  29: 11328559.638 ops/s
# Warmup Iteration  30: 11249553.944 ops/s
Iteration   1: 11282759.168 ops/s
Iteration   2: 11702061.278 ops/s
Iteration   3: 11066245.580 ops/s
Iteration   4: 11593461.875 ops/s
Iteration   5: 11055976.228 ops/s
Iteration   6: 11594082.228 ops/s
Iteration   7: 11398054.316 ops/s
Iteration   8: 11213733.433 ops/s
Iteration   9: 11644635.410 ops/s
Iteration  10: 11226891.814 ops/s
Iteration  11: 11878485.959 ops/s
Iteration  12: 10997090.076 ops/s
Iteration  13: 11670959.383 ops/s
Iteration  14: 11493916.452 ops/s
Iteration  15: 10883360.467 ops/s
Iteration  16: 11747844.916 ops/s
Iteration  17: 11473596.011 ops/s
Iteration  18: 11171787.265 ops/s
Iteration  19: 11721676.841 ops/s
Iteration  20: 11213850.428 ops/s
Iteration  21: 11787235.156 ops/s
Iteration  22: 11763072.274 ops/s
Iteration  23: 11169699.183 ops/s
Iteration  24: 11210237.986 ops/s
Iteration  25: 11618341.665 ops/s
Iteration  26: 11213170.098 ops/s
Iteration  27: 11698202.679 ops/s
Iteration  28: 11526866.405 ops/s
Iteration  29: 11566586.148 ops/s
Iteration  30: 11649255.113 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleFromPublisherTest._Benchmark.benchmark_isDisposed":
  11441104.528 ±(99.9%) 183558.632 ops/s [Average]
  (min, avg, max) = (10883360.467, 11441104.528, 11878485.959), stdev = 274741.940
  CI (99.9%): [11257545.896, 11624663.160] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt         Score        Error  Units
SingleFromPublisherTest._Benchmark.benchmark_isDisposed  thrpt   30  11441104.528 ± 183558.632  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArrayTest._Benchmark.benchmark_badRequest$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArrayTest._Benchmark.benchmark_badRequest

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 146707.753 ops/s
# Warmup Iteration   2: 423309.026 ops/s
# Warmup Iteration   3: 436585.263 ops/s
# Warmup Iteration   4: 433651.701 ops/s
# Warmup Iteration   5: 522897.019 ops/s
# Warmup Iteration   6: 493572.690 ops/s
# Warmup Iteration   7: 509957.106 ops/s
# Warmup Iteration   8: 434703.704 ops/s
# Warmup Iteration   9: 513597.717 ops/s
# Warmup Iteration  10: 495516.968 ops/s
# Warmup Iteration  11: 519900.902 ops/s
# Warmup Iteration  12: 501494.396 ops/s
# Warmup Iteration  13: 521839.857 ops/s
# Warmup Iteration  14: 494380.972 ops/s
# Warmup Iteration  15: 530120.419 ops/s
# Warmup Iteration  16: 505795.623 ops/s
# Warmup Iteration  17: 510793.225 ops/s
# Warmup Iteration  18: 529809.068 ops/s
# Warmup Iteration  19: 529508.884 ops/s
# Warmup Iteration  20: 521846.129 ops/s
# Warmup Iteration  21: 520411.625 ops/s
# Warmup Iteration  22: 535632.689 ops/s
# Warmup Iteration  23: 537992.362 ops/s
# Warmup Iteration  24: 515218.016 ops/s
# Warmup Iteration  25: 546487.690 ops/s
# Warmup Iteration  26: 514016.202 ops/s
# Warmup Iteration  27: 553580.395 ops/s
# Warmup Iteration  28: 537005.522 ops/s
# Warmup Iteration  29: 531040.121 ops/s
# Warmup Iteration  30: 532040.892 ops/s
Iteration   1: 528795.737 ops/s
Iteration   2: 526852.224 ops/s
Iteration   3: 541869.020 ops/s
Iteration   4: 514000.818 ops/s
Iteration   5: 543717.988 ops/s
Iteration   6: 528752.239 ops/s
Iteration   7: 528436.488 ops/s
Iteration   8: 550433.766 ops/s
Iteration   9: 522507.651 ops/s
Iteration  10: 545757.705 ops/s
Iteration  11: 509210.645 ops/s
Iteration  12: 534673.816 ops/s
Iteration  13: 553462.412 ops/s
Iteration  14: 513521.036 ops/s
Iteration  15: 522391.010 ops/s
Iteration  16: 528820.283 ops/s
Iteration  17: 533622.524 ops/s
Iteration  18: 529712.351 ops/s
Iteration  19: 530679.981 ops/s
Iteration  20: 531281.016 ops/s
Iteration  21: 531150.776 ops/s
Iteration  22: 526287.892 ops/s
Iteration  23: 559874.056 ops/s
Iteration  24: 546378.510 ops/s
Iteration  25: 534323.186 ops/s
Iteration  26: 537125.321 ops/s
Iteration  27: 541255.016 ops/s
Iteration  28: 517422.602 ops/s
Iteration  29: 537784.059 ops/s
Iteration  30: 529613.859 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArrayTest._Benchmark.benchmark_badRequest":
  532657.133 ±(99.9%) 7897.549 ops/s [Average]
  (min, avg, max) = (509210.645, 532657.133, 559874.056), stdev = 11820.680
  CI (99.9%): [524759.584, 540554.681] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score      Error  Units
FlowableFromArrayTest._Benchmark.benchmark_badRequest  thrpt   30  532657.133 ± 7897.549  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableConcatTests._Benchmark.benchmark_concatCovariance3$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableConcatTests._Benchmark.benchmark_concatCovariance3

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 442799.547 ops/s
# Warmup Iteration   2: 1888466.724 ops/s
# Warmup Iteration   3: 2456541.110 ops/s
# Warmup Iteration   4: 2439895.888 ops/s
# Warmup Iteration   5: 2440321.376 ops/s
# Warmup Iteration   6: 2184293.501 ops/s
# Warmup Iteration   7: 2407209.282 ops/s
# Warmup Iteration   8: 2480142.529 ops/s
# Warmup Iteration   9: 2516579.903 ops/s
# Warmup Iteration  10: 2569026.638 ops/s
# Warmup Iteration  11: 2461818.945 ops/s
# Warmup Iteration  12: 2438421.299 ops/s
# Warmup Iteration  13: 2540658.199 ops/s
# Warmup Iteration  14: 2400062.236 ops/s
# Warmup Iteration  15: 2516931.496 ops/s
# Warmup Iteration  16: 2479226.802 ops/s
# Warmup Iteration  17: 2320851.726 ops/s
# Warmup Iteration  18: 2580697.677 ops/s
# Warmup Iteration  19: 2460266.942 ops/s
# Warmup Iteration  20: 2605131.191 ops/s
# Warmup Iteration  21: 2498638.726 ops/s
# Warmup Iteration  22: 2526166.079 ops/s
# Warmup Iteration  23: 2516202.863 ops/s
# Warmup Iteration  24: 2483598.481 ops/s
# Warmup Iteration  25: 2530488.431 ops/s
# Warmup Iteration  26: 2446244.799 ops/s
# Warmup Iteration  27: 2467539.472 ops/s
# Warmup Iteration  28: 2574385.318 ops/s
# Warmup Iteration  29: 2487464.727 ops/s
# Warmup Iteration  30: 2596719.741 ops/s
Iteration   1: 2572043.922 ops/s
Iteration   2: 2591578.919 ops/s
Iteration   3: 2501615.759 ops/s
Iteration   4: 2479935.051 ops/s
Iteration   5: 2426947.747 ops/s
Iteration   6: 2509595.118 ops/s
Iteration   7: 2634355.544 ops/s
Iteration   8: 2406746.368 ops/s
Iteration   9: 2635399.817 ops/s
Iteration  10: 2531504.079 ops/s
Iteration  11: 2574067.260 ops/s
Iteration  12: 2444705.616 ops/s
Iteration  13: 2547880.777 ops/s
Iteration  14: 2441456.075 ops/s
Iteration  15: 2447281.306 ops/s
Iteration  16: 2567501.398 ops/s
Iteration  17: 2460743.019 ops/s
Iteration  18: 2591101.963 ops/s
Iteration  19: 2375873.262 ops/s
Iteration  20: 2534534.165 ops/s
Iteration  21: 2521240.495 ops/s
Iteration  22: 2529467.335 ops/s
Iteration  23: 2595212.351 ops/s
Iteration  24: 2577381.105 ops/s
Iteration  25: 2462050.490 ops/s
Iteration  26: 2620854.174 ops/s
Iteration  27: 2435761.813 ops/s
Iteration  28: 2562585.922 ops/s
Iteration  29: 2483418.651 ops/s
Iteration  30: 2475761.707 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableConcatTests._Benchmark.benchmark_concatCovariance3":
  2517953.374 ±(99.9%) 47271.851 ops/s [Average]
  (min, avg, max) = (2375873.262, 2517953.374, 2635399.817), stdev = 70754.286
  CI (99.9%): [2470681.523, 2565225.225] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
FlowableConcatTests._Benchmark.benchmark_concatCovariance3  thrpt   30  2517953.374 ± 47271.851  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFromPublisherTest._Benchmark.benchmark_just$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFromPublisherTest._Benchmark.benchmark_just

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 449460.412 ops/s
# Warmup Iteration   2: 2509262.587 ops/s
# Warmup Iteration   3: 4810563.803 ops/s
# Warmup Iteration   4: 5923443.077 ops/s
# Warmup Iteration   5: 6279690.910 ops/s
# Warmup Iteration   6: 5690195.952 ops/s
# Warmup Iteration   7: 6068997.080 ops/s
# Warmup Iteration   8: 5931066.574 ops/s
# Warmup Iteration   9: 6054143.733 ops/s
# Warmup Iteration  10: 5837113.706 ops/s
# Warmup Iteration  11: 6078829.215 ops/s
# Warmup Iteration  12: 6188509.093 ops/s
# Warmup Iteration  13: 5915654.172 ops/s
# Warmup Iteration  14: 6370415.457 ops/s
# Warmup Iteration  15: 6001492.178 ops/s
# Warmup Iteration  16: 6183583.060 ops/s
# Warmup Iteration  17: 6063194.770 ops/s
# Warmup Iteration  18: 5987080.239 ops/s
# Warmup Iteration  19: 6327638.080 ops/s
# Warmup Iteration  20: 6026222.380 ops/s
# Warmup Iteration  21: 6141137.408 ops/s
# Warmup Iteration  22: 6320712.131 ops/s
# Warmup Iteration  23: 5975818.097 ops/s
# Warmup Iteration  24: 6037054.007 ops/s
# Warmup Iteration  25: 6279403.857 ops/s
# Warmup Iteration  26: 6047895.947 ops/s
# Warmup Iteration  27: 6105371.817 ops/s
# Warmup Iteration  28: 6150909.804 ops/s
# Warmup Iteration  29: 6118173.991 ops/s
# Warmup Iteration  30: 6016911.327 ops/s
Iteration   1: 6094376.879 ops/s
Iteration   2: 6431034.922 ops/s
Iteration   3: 5961495.195 ops/s
Iteration   4: 6209812.665 ops/s
Iteration   5: 5999785.898 ops/s
Iteration   6: 6233185.352 ops/s
Iteration   7: 6023388.249 ops/s
Iteration   8: 6072736.939 ops/s
Iteration   9: 6433716.664 ops/s
Iteration  10: 5864055.696 ops/s
Iteration  11: 6304045.624 ops/s
Iteration  12: 5887601.964 ops/s
Iteration  13: 6314297.900 ops/s
Iteration  14: 5982528.165 ops/s
Iteration  15: 5876538.020 ops/s
Iteration  16: 6220026.294 ops/s
Iteration  17: 6361262.517 ops/s
Iteration  18: 5987069.418 ops/s
Iteration  19: 6125662.861 ops/s
Iteration  20: 6099819.990 ops/s
Iteration  21: 6201790.409 ops/s
Iteration  22: 6061252.497 ops/s
Iteration  23: 6306831.722 ops/s
Iteration  24: 5919175.002 ops/s
Iteration  25: 6138139.043 ops/s
Iteration  26: 6267834.172 ops/s
Iteration  27: 5971660.685 ops/s
Iteration  28: 6213576.250 ops/s
Iteration  29: 5929376.483 ops/s
Iteration  30: 6003154.095 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleFromPublisherTest._Benchmark.benchmark_just":
  6116507.719 ±(99.9%) 111756.762 ops/s [Average]
  (min, avg, max) = (5864055.696, 6116507.719, 6433716.664), stdev = 167272.272
  CI (99.9%): [6004750.957, 6228264.481] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score        Error  Units
SingleFromPublisherTest._Benchmark.benchmark_just  thrpt   30  6116507.719 ± 111756.762  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableCollectTest._Benchmark.benchmark_collectInto$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableCollectTest._Benchmark.benchmark_collectInto

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 144714.843 ops/s
# Warmup Iteration   2: 474011.643 ops/s
# Warmup Iteration   3: 1714556.275 ops/s
# Warmup Iteration   4: 1814677.060 ops/s
# Warmup Iteration   5: 2196238.052 ops/s
# Warmup Iteration   6: 2043486.059 ops/s
# Warmup Iteration   7: 2143165.705 ops/s
# Warmup Iteration   8: 2108003.094 ops/s
# Warmup Iteration   9: 2109623.481 ops/s
# Warmup Iteration  10: 2149445.079 ops/s
# Warmup Iteration  11: 2045735.282 ops/s
# Warmup Iteration  12: 2122392.786 ops/s
# Warmup Iteration  13: 2177838.531 ops/s
# Warmup Iteration  14: 2083553.195 ops/s
# Warmup Iteration  15: 2186522.622 ops/s
# Warmup Iteration  16: 2124225.840 ops/s
# Warmup Iteration  17: 2095337.945 ops/s
# Warmup Iteration  18: 2209868.024 ops/s
# Warmup Iteration  19: 2079314.494 ops/s
# Warmup Iteration  20: 2167955.152 ops/s
# Warmup Iteration  21: 2036124.781 ops/s
# Warmup Iteration  22: 2177142.638 ops/s
# Warmup Iteration  23: 2100930.619 ops/s
# Warmup Iteration  24: 2081113.663 ops/s
# Warmup Iteration  25: 2174782.298 ops/s
# Warmup Iteration  26: 2098084.372 ops/s
# Warmup Iteration  27: 2155124.816 ops/s
# Warmup Iteration  28: 2129985.474 ops/s
# Warmup Iteration  29: 2173728.266 ops/s
# Warmup Iteration  30: 2105445.450 ops/s
Iteration   1: 2128575.363 ops/s
Iteration   2: 2188145.240 ops/s
Iteration   3: 2113463.023 ops/s
Iteration   4: 2160414.176 ops/s
Iteration   5: 2079205.834 ops/s
Iteration   6: 2087811.706 ops/s
Iteration   7: 2163277.117 ops/s
Iteration   8: 2062989.918 ops/s
Iteration   9: 2128605.069 ops/s
Iteration  10: 2128354.647 ops/s
Iteration  11: 2183038.996 ops/s
Iteration  12: 2026620.735 ops/s
Iteration  13: 2112062.662 ops/s
Iteration  14: 2131999.071 ops/s
Iteration  15: 2178037.956 ops/s
Iteration  16: 2186213.983 ops/s
Iteration  17: 2071580.002 ops/s
Iteration  18: 2112274.340 ops/s
Iteration  19: 2183340.682 ops/s
Iteration  20: 2072615.781 ops/s
Iteration  21: 2157752.657 ops/s
Iteration  22: 2133497.846 ops/s
Iteration  23: 2164840.538 ops/s
Iteration  24: 2140252.618 ops/s
Iteration  25: 2081380.116 ops/s
Iteration  26: 2135366.222 ops/s
Iteration  27: 2102193.957 ops/s
Iteration  28: 2171079.836 ops/s
Iteration  29: 1789650.543 ops/s
Iteration  30: 2099170.236 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableCollectTest._Benchmark.benchmark_collectInto":
  2115793.696 ±(99.9%) 49841.469 ops/s [Average]
  (min, avg, max) = (1789650.543, 2115793.696, 2188145.240), stdev = 74600.370
  CI (99.9%): [2065952.227, 2165635.165] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
FlowableCollectTest._Benchmark.benchmark_collectInto  thrpt   30  2115793.696 ± 49841.469  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableConcatTests._Benchmark.benchmark_concatCovariance4$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableConcatTests._Benchmark.benchmark_concatCovariance4

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 328096.134 ops/s
# Warmup Iteration   2: 2019750.623 ops/s
# Warmup Iteration   3: 3204297.421 ops/s
# Warmup Iteration   4: 3078891.578 ops/s
# Warmup Iteration   5: 3238010.299 ops/s
# Warmup Iteration   6: 3043104.073 ops/s
# Warmup Iteration   7: 3288335.280 ops/s
# Warmup Iteration   8: 3109456.777 ops/s
# Warmup Iteration   9: 3107219.574 ops/s
# Warmup Iteration  10: 3179423.948 ops/s
# Warmup Iteration  11: 3052685.097 ops/s
# Warmup Iteration  12: 3224389.840 ops/s
# Warmup Iteration  13: 3272789.391 ops/s
# Warmup Iteration  14: 2884832.934 ops/s
# Warmup Iteration  15: 3314209.844 ops/s
# Warmup Iteration  16: 3170262.539 ops/s
# Warmup Iteration  17: 3150184.105 ops/s
# Warmup Iteration  18: 3107476.620 ops/s
# Warmup Iteration  19: 3200112.726 ops/s
# Warmup Iteration  20: 3233165.663 ops/s
# Warmup Iteration  21: 3128768.093 ops/s
# Warmup Iteration  22: 3210155.838 ops/s
# Warmup Iteration  23: 3326379.717 ops/s
# Warmup Iteration  24: 3351356.063 ops/s
# Warmup Iteration  25: 3290566.399 ops/s
# Warmup Iteration  26: 3146470.308 ops/s
# Warmup Iteration  27: 3131348.618 ops/s
# Warmup Iteration  28: 3242964.746 ops/s
# Warmup Iteration  29: 3147965.742 ops/s
# Warmup Iteration  30: 3194417.344 ops/s
Iteration   1: 3100872.822 ops/s
Iteration   2: 3186543.167 ops/s
Iteration   3: 3233376.594 ops/s
Iteration   4: 3166706.124 ops/s
Iteration   5: 3150083.621 ops/s
Iteration   6: 3234913.407 ops/s
Iteration   7: 3211476.204 ops/s
Iteration   8: 3189861.001 ops/s
Iteration   9: 3252166.616 ops/s
Iteration  10: 3072609.126 ops/s
Iteration  11: 3291036.042 ops/s
Iteration  12: 3216597.782 ops/s
Iteration  13: 3160232.890 ops/s
Iteration  14: 3273664.483 ops/s
Iteration  15: 3076160.627 ops/s
Iteration  16: 3281052.255 ops/s
Iteration  17: 3163710.941 ops/s
Iteration  18: 3197830.060 ops/s
Iteration  19: 3268685.073 ops/s
Iteration  20: 3172287.572 ops/s
Iteration  21: 3261014.427 ops/s
Iteration  22: 3194903.541 ops/s
Iteration  23: 3224635.309 ops/s
Iteration  24: 3321950.343 ops/s
Iteration  25: 3135905.398 ops/s
Iteration  26: 3298375.307 ops/s
Iteration  27: 3159394.849 ops/s
Iteration  28: 3231285.649 ops/s
Iteration  29: 3180121.226 ops/s
Iteration  30: 3111921.132 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableConcatTests._Benchmark.benchmark_concatCovariance4":
  3200645.786 ±(99.9%) 43545.012 ops/s [Average]
  (min, avg, max) = (3072609.126, 3200645.786, 3321950.343), stdev = 65176.128
  CI (99.9%): [3157100.775, 3244190.798] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
FlowableConcatTests._Benchmark.benchmark_concatCovariance4  thrpt   30  3200645.786 ± 43545.012  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrErrorTest._Benchmark.benchmark_firstJust$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrErrorTest._Benchmark.benchmark_firstJust

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 4468000.188 ops/s
# Warmup Iteration   2: 9476534.936 ops/s
# Warmup Iteration   3: 10711493.294 ops/s
# Warmup Iteration   4: 11937553.087 ops/s
# Warmup Iteration   5: 12684353.664 ops/s
# Warmup Iteration   6: 12778933.526 ops/s
# Warmup Iteration   7: 11917370.921 ops/s
# Warmup Iteration   8: 12571631.144 ops/s
# Warmup Iteration   9: 12082127.444 ops/s
# Warmup Iteration  10: 12458391.904 ops/s
# Warmup Iteration  11: 12158051.417 ops/s
# Warmup Iteration  12: 12073341.178 ops/s
# Warmup Iteration  13: 12847802.254 ops/s
# Warmup Iteration  14: 11983636.576 ops/s
# Warmup Iteration  15: 12415007.721 ops/s
# Warmup Iteration  16: 11867896.999 ops/s
# Warmup Iteration  17: 12068641.520 ops/s
# Warmup Iteration  18: 12821801.872 ops/s
# Warmup Iteration  19: 11606023.594 ops/s
# Warmup Iteration  20: 12729553.554 ops/s
# Warmup Iteration  21: 12100075.038 ops/s
# Warmup Iteration  22: 12203881.734 ops/s
# Warmup Iteration  23: 12575569.252 ops/s
# Warmup Iteration  24: 12129145.455 ops/s
# Warmup Iteration  25: 12283216.762 ops/s
# Warmup Iteration  26: 12601390.963 ops/s
# Warmup Iteration  27: 12585078.247 ops/s
# Warmup Iteration  28: 12047263.324 ops/s
# Warmup Iteration  29: 12472528.026 ops/s
# Warmup Iteration  30: 11979236.090 ops/s
Iteration   1: 12045456.563 ops/s
Iteration   2: 12257397.883 ops/s
Iteration   3: 11878165.471 ops/s
Iteration   4: 12932090.104 ops/s
Iteration   5: 12453912.670 ops/s
Iteration   6: 12237711.195 ops/s
Iteration   7: 12540383.188 ops/s
Iteration   8: 12661672.186 ops/s
Iteration   9: 12111934.946 ops/s
Iteration  10: 12077745.770 ops/s
Iteration  11: 12342554.572 ops/s
Iteration  12: 12085528.029 ops/s
Iteration  13: 12240111.721 ops/s
Iteration  14: 12603253.734 ops/s
Iteration  15: 12503315.163 ops/s
Iteration  16: 12157359.326 ops/s
Iteration  17: 12550093.111 ops/s
Iteration  18: 12245673.252 ops/s
Iteration  19: 12042007.292 ops/s
Iteration  20: 12590921.810 ops/s
Iteration  21: 12228892.668 ops/s
Iteration  22: 12834832.698 ops/s
Iteration  23: 11979619.202 ops/s
Iteration  24: 10286876.847 ops/s
Iteration  25: 12086203.280 ops/s
Iteration  26: 12538115.356 ops/s
Iteration  27: 11664282.630 ops/s
Iteration  28: 12048013.574 ops/s
Iteration  29: 12391229.968 ops/s
Iteration  30: 12223152.997 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrErrorTest._Benchmark.benchmark_firstJust":
  12227950.240 ±(99.9%) 309957.519 ops/s [Average]
  (min, avg, max) = (10286876.847, 12227950.240, 12932090.104), stdev = 463929.858
  CI (99.9%): [11917992.721, 12537907.759] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt         Score        Error  Units
FlowableStageSubscriberOrErrorTest._Benchmark.benchmark_firstJust  thrpt   30  12227950.240 ± 309957.519  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrDefaultTest._Benchmark.benchmark_firstJust$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrDefaultTest._Benchmark.benchmark_firstJust

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 4344719.675 ops/s
# Warmup Iteration   2: 9455755.771 ops/s
# Warmup Iteration   3: 10194958.842 ops/s
# Warmup Iteration   4: 12280270.838 ops/s
# Warmup Iteration   5: 12555105.068 ops/s
# Warmup Iteration   6: 11911021.517 ops/s
# Warmup Iteration   7: 12571904.653 ops/s
# Warmup Iteration   8: 11958774.984 ops/s
# Warmup Iteration   9: 12476718.610 ops/s
# Warmup Iteration  10: 12165841.020 ops/s
# Warmup Iteration  11: 12206215.040 ops/s
# Warmup Iteration  12: 12787360.121 ops/s
# Warmup Iteration  13: 11784421.462 ops/s
# Warmup Iteration  14: 12239918.307 ops/s
# Warmup Iteration  15: 12997276.408 ops/s
# Warmup Iteration  16: 12203241.096 ops/s
# Warmup Iteration  17: 12258676.426 ops/s
# Warmup Iteration  18: 12819903.295 ops/s
# Warmup Iteration  19: 11825401.220 ops/s
# Warmup Iteration  20: 12545584.282 ops/s
# Warmup Iteration  21: 11778291.852 ops/s
# Warmup Iteration  22: 11838644.302 ops/s
# Warmup Iteration  23: 12638797.476 ops/s
# Warmup Iteration  24: 12174299.971 ops/s
# Warmup Iteration  25: 12389786.179 ops/s
# Warmup Iteration  26: 12640174.416 ops/s
# Warmup Iteration  27: 12127678.178 ops/s
# Warmup Iteration  28: 12177933.428 ops/s
# Warmup Iteration  29: 12316368.297 ops/s
# Warmup Iteration  30: 12210024.577 ops/s
Iteration   1: 12351065.475 ops/s
Iteration   2: 12145577.309 ops/s
Iteration   3: 12245212.451 ops/s
Iteration   4: 12740023.221 ops/s
Iteration   5: 11825853.214 ops/s
Iteration   6: 12302805.114 ops/s
Iteration   7: 12543606.766 ops/s
Iteration   8: 11937816.397 ops/s
Iteration   9: 12559593.805 ops/s
Iteration  10: 12203672.441 ops/s
Iteration  11: 12456625.485 ops/s
Iteration  12: 12088756.197 ops/s
Iteration  13: 12548689.863 ops/s
Iteration  14: 12103375.132 ops/s
Iteration  15: 12643164.787 ops/s
Iteration  16: 12667560.762 ops/s
Iteration  17: 12074642.120 ops/s
Iteration  18: 12568960.256 ops/s
Iteration  19: 11783647.482 ops/s
Iteration  20: 12525586.794 ops/s
Iteration  21: 11982510.213 ops/s
Iteration  22: 12405228.596 ops/s
Iteration  23: 12642534.603 ops/s
Iteration  24: 12032882.724 ops/s
Iteration  25: 12366321.795 ops/s
Iteration  26: 12736510.760 ops/s
Iteration  27: 12086254.945 ops/s
Iteration  28: 12571122.826 ops/s
Iteration  29: 12207742.131 ops/s
Iteration  30: 12541471.001 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrDefaultTest._Benchmark.benchmark_firstJust":
  12329627.155 ±(99.9%) 185411.480 ops/s [Average]
  (min, avg, max) = (11783647.482, 12329627.155, 12740023.221), stdev = 277515.195
  CI (99.9%): [12144215.676, 12515038.635] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt         Score        Error  Units
FlowableStageSubscriberOrDefaultTest._Benchmark.benchmark_firstJust  thrpt   30  12329627.155 ± 185411.480  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrErrorTest._Benchmark.benchmark_lastJust$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrErrorTest._Benchmark.benchmark_lastJust

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 4237045.669 ops/s
# Warmup Iteration   2: 8550482.728 ops/s
# Warmup Iteration   3: 10721424.513 ops/s
# Warmup Iteration   4: 12376679.277 ops/s
# Warmup Iteration   5: 12879255.061 ops/s
# Warmup Iteration   6: 12763154.372 ops/s
# Warmup Iteration   7: 12366628.805 ops/s
# Warmup Iteration   8: 12724091.078 ops/s
# Warmup Iteration   9: 12078452.157 ops/s
# Warmup Iteration  10: 12580700.770 ops/s
# Warmup Iteration  11: 12618127.279 ops/s
# Warmup Iteration  12: 12565824.978 ops/s
# Warmup Iteration  13: 13025946.040 ops/s
# Warmup Iteration  14: 12400111.752 ops/s
# Warmup Iteration  15: 12895875.270 ops/s
# Warmup Iteration  16: 12664747.661 ops/s
# Warmup Iteration  17: 12459647.681 ops/s
# Warmup Iteration  18: 12891040.648 ops/s
# Warmup Iteration  19: 12186842.379 ops/s
# Warmup Iteration  20: 12606376.984 ops/s
# Warmup Iteration  21: 12606711.255 ops/s
# Warmup Iteration  22: 12814495.482 ops/s
# Warmup Iteration  23: 13215174.723 ops/s
# Warmup Iteration  24: 12156428.150 ops/s
# Warmup Iteration  25: 12567703.917 ops/s
# Warmup Iteration  26: 12525385.191 ops/s
# Warmup Iteration  27: 12668546.154 ops/s
# Warmup Iteration  28: 12173486.469 ops/s
# Warmup Iteration  29: 12555034.968 ops/s
# Warmup Iteration  30: 12772450.463 ops/s
Iteration   1: 12495097.583 ops/s
Iteration   2: 12761017.319 ops/s
Iteration   3: 12243536.835 ops/s
Iteration   4: 13054255.226 ops/s
Iteration   5: 12028531.113 ops/s
Iteration   6: 12701917.070 ops/s
Iteration   7: 12843960.563 ops/s
Iteration   8: 12148618.511 ops/s
Iteration   9: 12654880.797 ops/s
Iteration  10: 12336396.174 ops/s
Iteration  11: 12652899.058 ops/s
Iteration  12: 12022469.973 ops/s
Iteration  13: 12942976.037 ops/s
Iteration  14: 12490840.873 ops/s
Iteration  15: 12384603.887 ops/s
Iteration  16: 12999119.767 ops/s
Iteration  17: 12571530.267 ops/s
Iteration  18: 10133179.363 ops/s
Iteration  19: 12204588.080 ops/s
Iteration  20: 13150097.920 ops/s
Iteration  21: 12152507.809 ops/s
Iteration  22: 12652096.294 ops/s
Iteration  23: 12479743.801 ops/s
Iteration  24: 12529368.766 ops/s
Iteration  25: 13049645.640 ops/s
Iteration  26: 12269090.784 ops/s
Iteration  27: 12861383.643 ops/s
Iteration  28: 12234047.286 ops/s
Iteration  29: 12634739.973 ops/s
Iteration  30: 12734715.283 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrErrorTest._Benchmark.benchmark_lastJust":
  12480595.190 ±(99.9%) 363568.722 ops/s [Average]
  (min, avg, max) = (10133179.363, 12480595.190, 13150097.920), stdev = 544172.588
  CI (99.9%): [12117026.468, 12844163.911] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt         Score        Error  Units
FlowableStageSubscriberOrErrorTest._Benchmark.benchmark_lastJust  thrpt   30  12480595.190 ± 363568.722  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrDefaultTest._Benchmark.benchmark_lastJust$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrDefaultTest._Benchmark.benchmark_lastJust

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 4374978.795 ops/s
# Warmup Iteration   2: 9445965.622 ops/s
# Warmup Iteration   3: 10838696.848 ops/s
# Warmup Iteration   4: 12374877.491 ops/s
# Warmup Iteration   5: 12908034.563 ops/s
# Warmup Iteration   6: 12423755.463 ops/s
# Warmup Iteration   7: 12313187.718 ops/s
# Warmup Iteration   8: 12850481.644 ops/s
# Warmup Iteration   9: 12509353.564 ops/s
# Warmup Iteration  10: 12698455.240 ops/s
# Warmup Iteration  11: 12332585.863 ops/s
# Warmup Iteration  12: 12645164.211 ops/s
# Warmup Iteration  13: 12970236.851 ops/s
# Warmup Iteration  14: 12430006.101 ops/s
# Warmup Iteration  15: 12704540.574 ops/s
# Warmup Iteration  16: 12224825.324 ops/s
# Warmup Iteration  17: 12835116.779 ops/s
# Warmup Iteration  18: 12507286.118 ops/s
# Warmup Iteration  19: 12962576.786 ops/s
# Warmup Iteration  20: 12333478.494 ops/s
# Warmup Iteration  21: 12548552.880 ops/s
# Warmup Iteration  22: 13224542.010 ops/s
# Warmup Iteration  23: 12186325.331 ops/s
# Warmup Iteration  24: 12267880.133 ops/s
# Warmup Iteration  25: 12767285.478 ops/s
# Warmup Iteration  26: 12544696.078 ops/s
# Warmup Iteration  27: 12756871.460 ops/s
# Warmup Iteration  28: 12929503.722 ops/s
# Warmup Iteration  29: 12141690.695 ops/s
# Warmup Iteration  30: 13193787.631 ops/s
Iteration   1: 12241861.894 ops/s
Iteration   2: 13040109.048 ops/s
Iteration   3: 12760978.176 ops/s
Iteration   4: 12523011.875 ops/s
Iteration   5: 12640665.883 ops/s
Iteration   6: 12263482.756 ops/s
Iteration   7: 12867085.473 ops/s
Iteration   8: 12518289.621 ops/s
Iteration   9: 12678335.533 ops/s
Iteration  10: 12806003.712 ops/s
Iteration  11: 12621906.224 ops/s
Iteration  12: 12937785.137 ops/s
Iteration  13: 12282724.745 ops/s
Iteration  14: 12547486.984 ops/s
Iteration  15: 12885661.883 ops/s
Iteration  16: 12826857.128 ops/s
Iteration  17: 12375341.036 ops/s
Iteration  18: 12736282.366 ops/s
Iteration  19: 12762469.090 ops/s
Iteration  20: 12123390.642 ops/s
Iteration  21: 13002926.177 ops/s
Iteration  22: 12143454.342 ops/s
Iteration  23: 12923987.151 ops/s
Iteration  24: 12310351.793 ops/s
Iteration  25: 12848410.938 ops/s
Iteration  26: 12812282.059 ops/s
Iteration  27: 12645169.282 ops/s
Iteration  28: 13061931.971 ops/s
Iteration  29: 12100903.501 ops/s
Iteration  30: 12783128.928 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrDefaultTest._Benchmark.benchmark_lastJust":
  12635742.512 ±(99.9%) 192004.852 ops/s [Average]
  (min, avg, max) = (12100903.501, 12635742.512, 13061931.971), stdev = 287383.846
  CI (99.9%): [12443737.659, 12827747.364] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt         Score        Error  Units
FlowableStageSubscriberOrDefaultTest._Benchmark.benchmark_lastJust  thrpt   30  12635742.512 ± 192004.852  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_reduceSeedFunctionReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_reduceSeedFunctionReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 249397.014 ops/s
# Warmup Iteration   2: 456858.867 ops/s
# Warmup Iteration   3: 522349.526 ops/s
# Warmup Iteration   4: 525575.979 ops/s
# Warmup Iteration   5: 475769.296 ops/s
# Warmup Iteration   6: 509851.847 ops/s
# Warmup Iteration   7: 534181.923 ops/s
# Warmup Iteration   8: 507320.032 ops/s
# Warmup Iteration   9: 524106.517 ops/s
# Warmup Iteration  10: 517980.817 ops/s
# Warmup Iteration  11: 516323.813 ops/s
# Warmup Iteration  12: 522807.077 ops/s
# Warmup Iteration  13: 518683.231 ops/s
# Warmup Iteration  14: 530227.051 ops/s
# Warmup Iteration  15: 525761.822 ops/s
# Warmup Iteration  16: 479599.557 ops/s
# Warmup Iteration  17: 534680.277 ops/s
# Warmup Iteration  18: 563006.672 ops/s
# Warmup Iteration  19: 535476.851 ops/s
# Warmup Iteration  20: 544060.969 ops/s
# Warmup Iteration  21: 568455.334 ops/s
# Warmup Iteration  22: 562286.763 ops/s
# Warmup Iteration  23: 522831.796 ops/s
# Warmup Iteration  24: 560353.563 ops/s
# Warmup Iteration  25: 546606.483 ops/s
# Warmup Iteration  26: 538724.860 ops/s
# Warmup Iteration  27: 562005.529 ops/s
# Warmup Iteration  28: 550192.872 ops/s
# Warmup Iteration  29: 540709.158 ops/s
# Warmup Iteration  30: 566429.620 ops/s
Iteration   1: 533214.701 ops/s
Iteration   2: 572018.124 ops/s
Iteration   3: 544531.804 ops/s
Iteration   4: 544471.360 ops/s
Iteration   5: 553532.067 ops/s
Iteration   6: 530767.231 ops/s
Iteration   7: 570546.218 ops/s
Iteration   8: 556427.905 ops/s
Iteration   9: 531331.272 ops/s
Iteration  10: 551816.952 ops/s
Iteration  11: 554994.473 ops/s
Iteration  12: 542466.455 ops/s
Iteration  13: 461963.413 ops/s
Iteration  14: 528936.598 ops/s
Iteration  15: 534621.176 ops/s
Iteration  16: 564527.455 ops/s
Iteration  17: 544298.717 ops/s
Iteration  18: 533761.052 ops/s
Iteration  19: 535768.965 ops/s
Iteration  20: 549555.830 ops/s
Iteration  21: 552083.026 ops/s
Iteration  22: 548066.520 ops/s
Iteration  23: 561659.750 ops/s
Iteration  24: 538953.754 ops/s
Iteration  25: 561690.262 ops/s
Iteration  26: 572427.772 ops/s
Iteration  27: 529588.554 ops/s
Iteration  28: 554484.272 ops/s
Iteration  29: 561703.819 ops/s
Iteration  30: 524501.567 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_reduceSeedFunctionReturnsNull":
  544823.702 ±(99.9%) 13911.240 ops/s [Average]
  (min, avg, max) = (461963.413, 544823.702, 572427.772), stdev = 20821.690
  CI (99.9%): [530912.462, 558734.942] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score       Error  Units
FlowableNullTests._Benchmark.benchmark_reduceSeedFunctionReturnsNull  thrpt   30  544823.702 ± 13911.240  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableLastTest._Benchmark.benchmark_lastOrErrorOneElement$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableLastTest._Benchmark.benchmark_lastOrErrorOneElement

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1134969.814 ops/s
# Warmup Iteration   2: 4190222.065 ops/s
# Warmup Iteration   3: 6043640.836 ops/s
# Warmup Iteration   4: 6125688.450 ops/s
# Warmup Iteration   5: 6399174.122 ops/s
# Warmup Iteration   6: 6025261.957 ops/s
# Warmup Iteration   7: 6360214.756 ops/s
# Warmup Iteration   8: 6058293.694 ops/s
# Warmup Iteration   9: 6335400.951 ops/s
# Warmup Iteration  10: 6156442.658 ops/s
# Warmup Iteration  11: 6094463.328 ops/s
# Warmup Iteration  12: 6262780.806 ops/s
# Warmup Iteration  13: 6421513.019 ops/s
# Warmup Iteration  14: 6058601.926 ops/s
# Warmup Iteration  15: 6230614.658 ops/s
# Warmup Iteration  16: 6472160.364 ops/s
# Warmup Iteration  17: 6148666.190 ops/s
# Warmup Iteration  18: 6420771.259 ops/s
# Warmup Iteration  19: 6035560.911 ops/s
# Warmup Iteration  20: 6178485.605 ops/s
# Warmup Iteration  21: 6285051.756 ops/s
# Warmup Iteration  22: 6165673.678 ops/s
# Warmup Iteration  23: 6479626.643 ops/s
# Warmup Iteration  24: 5895137.452 ops/s
# Warmup Iteration  25: 6304995.890 ops/s
# Warmup Iteration  26: 6308958.365 ops/s
# Warmup Iteration  27: 6251092.356 ops/s
# Warmup Iteration  28: 6128043.483 ops/s
# Warmup Iteration  29: 6419705.785 ops/s
# Warmup Iteration  30: 6401821.626 ops/s
Iteration   1: 6077490.478 ops/s
Iteration   2: 6208313.011 ops/s
Iteration   3: 6494667.013 ops/s
Iteration   4: 6133002.502 ops/s
Iteration   5: 6246423.160 ops/s
Iteration   6: 6228029.147 ops/s
Iteration   7: 6428092.998 ops/s
Iteration   8: 6102260.236 ops/s
Iteration   9: 6501686.441 ops/s
Iteration  10: 6246695.212 ops/s
Iteration  11: 6104357.203 ops/s
Iteration  12: 6270258.848 ops/s
Iteration  13: 6118349.114 ops/s
Iteration  14: 6416440.884 ops/s
Iteration  15: 6335499.814 ops/s
Iteration  16: 5976070.751 ops/s
Iteration  17: 6321582.396 ops/s
Iteration  18: 6367760.221 ops/s
Iteration  19: 6214742.138 ops/s
Iteration  20: 6220761.742 ops/s
Iteration  21: 5928017.210 ops/s
Iteration  22: 6215734.997 ops/s
Iteration  23: 6215032.892 ops/s
Iteration  24: 6379180.566 ops/s
Iteration  25: 6186406.368 ops/s
Iteration  26: 6138079.404 ops/s
Iteration  27: 6548192.555 ops/s
Iteration  28: 6189249.288 ops/s
Iteration  29: 6021260.623 ops/s
Iteration  30: 6439980.206 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableLastTest._Benchmark.benchmark_lastOrErrorOneElement":
  6242453.914 ±(99.9%) 104626.321 ops/s [Average]
  (min, avg, max) = (5928017.210, 6242453.914, 6548192.555), stdev = 156599.764
  CI (99.9%): [6137827.593, 6347080.235] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score        Error  Units
FlowableLastTest._Benchmark.benchmark_lastOrErrorOneElement  thrpt   30  6242453.914 ± 104626.321  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrDefaultTest._Benchmark.benchmark_singleJust$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrDefaultTest._Benchmark.benchmark_singleJust

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 4879539.901 ops/s
# Warmup Iteration   2: 9850289.006 ops/s
# Warmup Iteration   3: 11289266.121 ops/s
# Warmup Iteration   4: 12730994.433 ops/s
# Warmup Iteration   5: 12798266.590 ops/s
# Warmup Iteration   6: 12368963.814 ops/s
# Warmup Iteration   7: 12179556.155 ops/s
# Warmup Iteration   8: 12941394.478 ops/s
# Warmup Iteration   9: 12431326.841 ops/s
# Warmup Iteration  10: 12921402.949 ops/s
# Warmup Iteration  11: 12849776.123 ops/s
# Warmup Iteration  12: 12566434.206 ops/s
# Warmup Iteration  13: 12928816.511 ops/s
# Warmup Iteration  14: 12347141.249 ops/s
# Warmup Iteration  15: 13157231.714 ops/s
# Warmup Iteration  16: 13001655.832 ops/s
# Warmup Iteration  17: 12756436.658 ops/s
# Warmup Iteration  18: 12186277.178 ops/s
# Warmup Iteration  19: 12939588.701 ops/s
# Warmup Iteration  20: 12221360.036 ops/s
# Warmup Iteration  21: 12335969.879 ops/s
# Warmup Iteration  22: 13001534.735 ops/s
# Warmup Iteration  23: 12138254.431 ops/s
# Warmup Iteration  24: 12409017.338 ops/s
# Warmup Iteration  25: 12571185.277 ops/s
# Warmup Iteration  26: 12248157.018 ops/s
# Warmup Iteration  27: 12802527.432 ops/s
# Warmup Iteration  28: 12569746.923 ops/s
# Warmup Iteration  29: 12673149.607 ops/s
# Warmup Iteration  30: 12715216.440 ops/s
Iteration   1: 12455249.984 ops/s
Iteration   2: 13172945.121 ops/s
Iteration   3: 12424556.230 ops/s
Iteration   4: 12735407.214 ops/s
Iteration   5: 13201038.673 ops/s
Iteration   6: 12304385.671 ops/s
Iteration   7: 12689432.491 ops/s
Iteration   8: 10369129.437 ops/s
Iteration   9: 12716910.657 ops/s
Iteration  10: 12437547.159 ops/s
Iteration  11: 12968998.345 ops/s
Iteration  12: 12622060.859 ops/s
Iteration  13: 12651590.977 ops/s
Iteration  14: 12822722.722 ops/s
Iteration  15: 12805504.325 ops/s
Iteration  16: 12784239.266 ops/s
Iteration  17: 12907784.242 ops/s
Iteration  18: 12360975.339 ops/s
Iteration  19: 12565296.212 ops/s
Iteration  20: 12433559.341 ops/s
Iteration  21: 13416219.498 ops/s
Iteration  22: 12697782.814 ops/s
Iteration  23: 12519253.970 ops/s
Iteration  24: 12915455.730 ops/s
Iteration  25: 12767228.150 ops/s
Iteration  26: 12901217.223 ops/s
Iteration  27: 12406955.238 ops/s
Iteration  28: 12680822.592 ops/s
Iteration  29: 12766408.901 ops/s
Iteration  30: 12749070.477 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrDefaultTest._Benchmark.benchmark_singleJust":
  12641658.295 ±(99.9%) 334282.741 ops/s [Average]
  (min, avg, max) = (10369129.437, 12641658.295, 13416219.498), stdev = 500338.708
  CI (99.9%): [12307375.554, 12975941.036] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt         Score        Error  Units
FlowableStageSubscriberOrDefaultTest._Benchmark.benchmark_singleJust  thrpt   30  12641658.295 ± 334282.741  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrErrorTest._Benchmark.benchmark_singleJust$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrErrorTest._Benchmark.benchmark_singleJust

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 4725564.447 ops/s
# Warmup Iteration   2: 9979868.803 ops/s
# Warmup Iteration   3: 10506681.770 ops/s
# Warmup Iteration   4: 12524800.197 ops/s
# Warmup Iteration   5: 12990678.915 ops/s
# Warmup Iteration   6: 12936569.753 ops/s
# Warmup Iteration   7: 12583116.546 ops/s
# Warmup Iteration   8: 12952332.698 ops/s
# Warmup Iteration   9: 12348624.715 ops/s
# Warmup Iteration  10: 13140866.061 ops/s
# Warmup Iteration  11: 12554231.994 ops/s
# Warmup Iteration  12: 12600971.856 ops/s
# Warmup Iteration  13: 12780894.516 ops/s
# Warmup Iteration  14: 12948293.466 ops/s
# Warmup Iteration  15: 12043466.886 ops/s
# Warmup Iteration  16: 12874223.019 ops/s
# Warmup Iteration  17: 12750317.797 ops/s
# Warmup Iteration  18: 13029388.112 ops/s
# Warmup Iteration  19: 12555711.030 ops/s
# Warmup Iteration  20: 12441058.260 ops/s
# Warmup Iteration  21: 13300738.467 ops/s
# Warmup Iteration  22: 12645044.540 ops/s
# Warmup Iteration  23: 12501030.684 ops/s
# Warmup Iteration  24: 13388358.092 ops/s
# Warmup Iteration  25: 12424778.551 ops/s
# Warmup Iteration  26: 12496166.660 ops/s
# Warmup Iteration  27: 12945675.703 ops/s
# Warmup Iteration  28: 12188848.347 ops/s
# Warmup Iteration  29: 12710470.373 ops/s
# Warmup Iteration  30: 12265312.007 ops/s
Iteration   1: 12794815.574 ops/s
Iteration   2: 12548897.270 ops/s
Iteration   3: 13031291.796 ops/s
Iteration   4: 12665853.683 ops/s
Iteration   5: 13015176.034 ops/s
Iteration   6: 12374272.985 ops/s
Iteration   7: 12804448.168 ops/s
Iteration   8: 12359499.925 ops/s
Iteration   9: 12930980.937 ops/s
Iteration  10: 12803668.648 ops/s
Iteration  11: 12429071.300 ops/s
Iteration  12: 13080092.541 ops/s
Iteration  13: 13137592.941 ops/s
Iteration  14: 12246887.624 ops/s
Iteration  15: 13160303.888 ops/s
Iteration  16: 13066933.407 ops/s
Iteration  17: 12966080.309 ops/s
Iteration  18: 12688511.404 ops/s
Iteration  19: 13117504.201 ops/s
Iteration  20: 13386931.686 ops/s
Iteration  21: 12467273.386 ops/s
Iteration  22: 12354287.526 ops/s
Iteration  23: 13426011.630 ops/s
Iteration  24: 11917414.315 ops/s
Iteration  25: 13351898.852 ops/s
Iteration  26: 12641763.987 ops/s
Iteration  27: 12895760.681 ops/s
Iteration  28: 12456128.993 ops/s
Iteration  29: 12626222.661 ops/s
Iteration  30: 12680995.292 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrErrorTest._Benchmark.benchmark_singleJust":
  12780885.722 ±(99.9%) 243949.779 ops/s [Average]
  (min, avg, max) = (11917414.315, 12780885.722, 13426011.630), stdev = 365132.572
  CI (99.9%): [12536935.943, 13024835.500] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt         Score        Error  Units
FlowableStageSubscriberOrErrorTest._Benchmark.benchmark_singleJust  thrpt   30  12780885.722 ± 243949.779  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleTest._Benchmark.benchmark_singleOrErrorMultipleElements$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleTest._Benchmark.benchmark_singleOrErrorMultipleElements

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 232618.999 ops/s
# Warmup Iteration   2: 530683.208 ops/s
# Warmup Iteration   3: 616751.267 ops/s
# Warmup Iteration   4: 619566.191 ops/s
# Warmup Iteration   5: 583438.302 ops/s
# Warmup Iteration   6: 602574.177 ops/s
# Warmup Iteration   7: 586830.099 ops/s
# Warmup Iteration   8: 608922.938 ops/s
# Warmup Iteration   9: 633112.675 ops/s
# Warmup Iteration  10: 586616.164 ops/s
# Warmup Iteration  11: 580749.616 ops/s
# Warmup Iteration  12: 594708.224 ops/s
# Warmup Iteration  13: 603981.176 ops/s
# Warmup Iteration  14: 635161.071 ops/s
# Warmup Iteration  15: 619756.132 ops/s
# Warmup Iteration  16: 574378.716 ops/s
# Warmup Iteration  17: 635877.182 ops/s
# Warmup Iteration  18: 637262.531 ops/s
# Warmup Iteration  19: 617956.085 ops/s
# Warmup Iteration  20: 655040.400 ops/s
# Warmup Iteration  21: 610109.803 ops/s
# Warmup Iteration  22: 621463.455 ops/s
# Warmup Iteration  23: 616252.414 ops/s
# Warmup Iteration  24: 616591.809 ops/s
# Warmup Iteration  25: 653870.263 ops/s
# Warmup Iteration  26: 594204.170 ops/s
# Warmup Iteration  27: 638269.583 ops/s
# Warmup Iteration  28: 614786.589 ops/s
# Warmup Iteration  29: 665138.054 ops/s
# Warmup Iteration  30: 697471.035 ops/s
Iteration   1: 652800.004 ops/s
Iteration   2: 621245.122 ops/s
Iteration   3: 625800.969 ops/s
Iteration   4: 605840.680 ops/s
Iteration   5: 633976.676 ops/s
Iteration   6: 612437.809 ops/s
Iteration   7: 622742.831 ops/s
Iteration   8: 623100.505 ops/s
Iteration   9: 619722.989 ops/s
Iteration  10: 603240.564 ops/s
Iteration  11: 589768.191 ops/s
Iteration  12: 651580.870 ops/s
Iteration  13: 606257.979 ops/s
Iteration  14: 632044.619 ops/s
Iteration  15: 619737.697 ops/s
Iteration  16: 635530.187 ops/s
Iteration  17: 614902.575 ops/s
Iteration  18: 600295.799 ops/s
Iteration  19: 644008.639 ops/s
Iteration  20: 638855.407 ops/s
Iteration  21: 601514.725 ops/s
Iteration  22: 655228.666 ops/s
Iteration  23: 650523.771 ops/s
Iteration  24: 609738.300 ops/s
Iteration  25: 645187.220 ops/s
Iteration  26: 624295.051 ops/s
Iteration  27: 599354.881 ops/s
Iteration  28: 629804.989 ops/s
Iteration  29: 597275.263 ops/s
Iteration  30: 631922.124 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleTest._Benchmark.benchmark_singleOrErrorMultipleElements":
  623291.170 ±(99.9%) 12296.498 ops/s [Average]
  (min, avg, max) = (589768.191, 623291.170, 655228.666), stdev = 18404.821
  CI (99.9%): [610994.672, 635587.669] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score       Error  Units
FlowableSingleTest._Benchmark.benchmark_singleOrErrorMultipleElements  thrpt   30  623291.170 ± 12296.498  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReduceWithSingleTest._Benchmark.benchmark_normal$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReduceWithSingleTest._Benchmark.benchmark_normal

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1555426.683 ops/s
# Warmup Iteration   2: 3607887.889 ops/s
# Warmup Iteration   3: 5218610.379 ops/s
# Warmup Iteration   4: 5127176.613 ops/s
# Warmup Iteration   5: 5223495.835 ops/s
# Warmup Iteration   6: 5290460.748 ops/s
# Warmup Iteration   7: 5336920.999 ops/s
# Warmup Iteration   8: 4896601.259 ops/s
# Warmup Iteration   9: 5186990.139 ops/s
# Warmup Iteration  10: 5154607.207 ops/s
# Warmup Iteration  11: 5088040.353 ops/s
# Warmup Iteration  12: 5337633.129 ops/s
# Warmup Iteration  13: 5079258.203 ops/s
# Warmup Iteration  14: 5239141.936 ops/s
# Warmup Iteration  15: 5138561.156 ops/s
# Warmup Iteration  16: 5500472.468 ops/s
# Warmup Iteration  17: 5378999.038 ops/s
# Warmup Iteration  18: 5208779.245 ops/s
# Warmup Iteration  19: 5334644.007 ops/s
# Warmup Iteration  20: 5108329.444 ops/s
# Warmup Iteration  21: 5249331.870 ops/s
# Warmup Iteration  22: 5134851.868 ops/s
# Warmup Iteration  23: 5369467.511 ops/s
# Warmup Iteration  24: 5175366.984 ops/s
# Warmup Iteration  25: 5137746.709 ops/s
# Warmup Iteration  26: 5211057.943 ops/s
# Warmup Iteration  27: 5229598.407 ops/s
# Warmup Iteration  28: 5259988.524 ops/s
# Warmup Iteration  29: 5009189.934 ops/s
# Warmup Iteration  30: 5309073.075 ops/s
Iteration   1: 5183614.381 ops/s
Iteration   2: 5339248.021 ops/s
Iteration   3: 5229755.734 ops/s
Iteration   4: 5139131.858 ops/s
Iteration   5: 5444904.947 ops/s
Iteration   6: 5155946.499 ops/s
Iteration   7: 5442386.249 ops/s
Iteration   8: 5410287.395 ops/s
Iteration   9: 5102793.975 ops/s
Iteration  10: 5355643.356 ops/s
Iteration  11: 5112446.332 ops/s
Iteration  12: 5139003.308 ops/s
Iteration  13: 5381056.173 ops/s
Iteration  14: 5078303.810 ops/s
Iteration  15: 5088357.959 ops/s
Iteration  16: 5283606.852 ops/s
Iteration  17: 5217165.946 ops/s
Iteration  18: 5322267.636 ops/s
Iteration  19: 5091114.870 ops/s
Iteration  20: 5346820.674 ops/s
Iteration  21: 5142570.465 ops/s
Iteration  22: 5095960.074 ops/s
Iteration  23: 5259076.263 ops/s
Iteration  24: 5046656.168 ops/s
Iteration  25: 5331969.638 ops/s
Iteration  26: 5013920.249 ops/s
Iteration  27: 5241733.099 ops/s
Iteration  28: 5084374.656 ops/s
Iteration  29: 5086341.447 ops/s
Iteration  30: 5218098.900 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableReduceWithSingleTest._Benchmark.benchmark_normal":
  5212818.564 ±(99.9%) 84737.459 ops/s [Average]
  (min, avg, max) = (5013920.249, 5212818.564, 5444904.947), stdev = 126831.050
  CI (99.9%): [5128081.105, 5297556.024] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
FlowableReduceWithSingleTest._Benchmark.benchmark_normal  thrpt   30  5212818.564 ± 84737.459  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableAllTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableAllTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 732420.621 ops/s
# Warmup Iteration   2: 2933883.774 ops/s
# Warmup Iteration   3: 4396845.371 ops/s
# Warmup Iteration   4: 4283916.839 ops/s
# Warmup Iteration   5: 4359177.489 ops/s
# Warmup Iteration   6: 4313858.824 ops/s
# Warmup Iteration   7: 4466899.741 ops/s
# Warmup Iteration   8: 4356360.714 ops/s
# Warmup Iteration   9: 4345699.976 ops/s
# Warmup Iteration  10: 4456895.239 ops/s
# Warmup Iteration  11: 4454982.796 ops/s
# Warmup Iteration  12: 4265687.464 ops/s
# Warmup Iteration  13: 4505712.877 ops/s
# Warmup Iteration  14: 4307887.847 ops/s
# Warmup Iteration  15: 4491201.304 ops/s
# Warmup Iteration  16: 4396236.934 ops/s
# Warmup Iteration  17: 4445950.139 ops/s
# Warmup Iteration  18: 4603650.585 ops/s
# Warmup Iteration  19: 4287635.467 ops/s
# Warmup Iteration  20: 4492412.553 ops/s
# Warmup Iteration  21: 4316146.223 ops/s
# Warmup Iteration  22: 4390103.958 ops/s
# Warmup Iteration  23: 4710465.189 ops/s
# Warmup Iteration  24: 4397178.001 ops/s
# Warmup Iteration  25: 4404849.629 ops/s
# Warmup Iteration  26: 4376934.906 ops/s
# Warmup Iteration  27: 3549538.161 ops/s
# Warmup Iteration  28: 4305752.474 ops/s
# Warmup Iteration  29: 4510651.803 ops/s
# Warmup Iteration  30: 4534117.129 ops/s
Iteration   1: 4607879.330 ops/s
Iteration   2: 4363661.886 ops/s
Iteration   3: 4366784.602 ops/s
Iteration   4: 4485377.870 ops/s
Iteration   5: 4285488.056 ops/s
Iteration   6: 4528977.474 ops/s
Iteration   7: 4341240.732 ops/s
Iteration   8: 4523673.006 ops/s
Iteration   9: 4356681.857 ops/s
Iteration  10: 4400022.993 ops/s
Iteration  11: 4455257.063 ops/s
Iteration  12: 4358076.396 ops/s
Iteration  13: 4609846.158 ops/s
Iteration  14: 4559225.032 ops/s
Iteration  15: 4529880.314 ops/s
Iteration  16: 4296816.699 ops/s
Iteration  17: 4476659.001 ops/s
Iteration  18: 4243931.625 ops/s
Iteration  19: 4561085.176 ops/s
Iteration  20: 4517858.427 ops/s
Iteration  21: 4336719.699 ops/s
Iteration  22: 4473270.332 ops/s
Iteration  23: 4265784.743 ops/s
Iteration  24: 4636891.789 ops/s
Iteration  25: 4304761.562 ops/s
Iteration  26: 4487757.076 ops/s
Iteration  27: 4461804.960 ops/s
Iteration  28: 4299848.687 ops/s
Iteration  29: 4534813.550 ops/s
Iteration  30: 4496120.019 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableAllTest._Benchmark.benchmark_dispose":
  4438873.204 ±(99.9%) 75597.814 ops/s [Average]
  (min, avg, max) = (4243931.625, 4438873.204, 4636891.789), stdev = 113151.258
  CI (99.9%): [4363275.389, 4514471.018] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt        Score       Error  Units
FlowableAllTest._Benchmark.benchmark_dispose  thrpt   30  4438873.204 ± 75597.814  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableAnyTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableAnyTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 249319.756 ops/s
# Warmup Iteration   2: 2491792.842 ops/s
# Warmup Iteration   3: 3739396.815 ops/s
# Warmup Iteration   4: 4475670.670 ops/s
# Warmup Iteration   5: 4606076.996 ops/s
# Warmup Iteration   6: 4563983.900 ops/s
# Warmup Iteration   7: 4359219.565 ops/s
# Warmup Iteration   8: 4363717.041 ops/s
# Warmup Iteration   9: 4458448.633 ops/s
# Warmup Iteration  10: 4634980.703 ops/s
# Warmup Iteration  11: 4239471.257 ops/s
# Warmup Iteration  12: 4500474.006 ops/s
# Warmup Iteration  13: 4356783.263 ops/s
# Warmup Iteration  14: 4568665.149 ops/s
# Warmup Iteration  15: 4324798.042 ops/s
# Warmup Iteration  16: 4433924.562 ops/s
# Warmup Iteration  17: 4716349.993 ops/s
# Warmup Iteration  18: 4406154.707 ops/s
# Warmup Iteration  19: 4576932.369 ops/s
# Warmup Iteration  20: 4541242.681 ops/s
# Warmup Iteration  21: 4428161.881 ops/s
# Warmup Iteration  22: 4436089.478 ops/s
# Warmup Iteration  23: 4655223.371 ops/s
# Warmup Iteration  24: 4375032.889 ops/s
# Warmup Iteration  25: 4402708.931 ops/s
# Warmup Iteration  26: 4567231.837 ops/s
# Warmup Iteration  27: 4333753.584 ops/s
# Warmup Iteration  28: 4566564.001 ops/s
# Warmup Iteration  29: 4467101.150 ops/s
# Warmup Iteration  30: 4457144.548 ops/s
Iteration   1: 4443099.366 ops/s
Iteration   2: 4404553.003 ops/s
Iteration   3: 4586031.201 ops/s
Iteration   4: 4298798.345 ops/s
Iteration   5: 4467583.410 ops/s
Iteration   6: 4546566.277 ops/s
Iteration   7: 4396833.730 ops/s
Iteration   8: 4659489.191 ops/s
Iteration   9: 4316102.658 ops/s
Iteration  10: 4567271.134 ops/s
Iteration  11: 4493180.879 ops/s
Iteration  12: 4648296.435 ops/s
Iteration  13: 4353813.636 ops/s
Iteration  14: 4394783.417 ops/s
Iteration  15: 4652156.085 ops/s
Iteration  16: 4524199.138 ops/s
Iteration  17: 4420784.869 ops/s
Iteration  18: 4620957.151 ops/s
Iteration  19: 4447008.834 ops/s
Iteration  20: 4718402.118 ops/s
Iteration  21: 4376964.657 ops/s
Iteration  22: 4620457.295 ops/s
Iteration  23: 4514939.660 ops/s
Iteration  24: 4421599.961 ops/s
Iteration  25: 4648197.242 ops/s
Iteration  26: 4517950.190 ops/s
Iteration  27: 4403531.203 ops/s
Iteration  28: 4510977.662 ops/s
Iteration  29: 4611010.544 ops/s
Iteration  30: 4206496.602 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableAnyTest._Benchmark.benchmark_dispose":
  4493067.863 ±(99.9%) 83434.231 ops/s [Average]
  (min, avg, max) = (4206496.602, 4493067.863, 4718402.118), stdev = 124880.439
  CI (99.9%): [4409633.632, 4576502.094] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt        Score       Error  Units
FlowableAnyTest._Benchmark.benchmark_dispose  thrpt   30  4493067.863 ± 83434.231  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFromPublisherTest._Benchmark.benchmark_empty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFromPublisherTest._Benchmark.benchmark_empty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 227129.768 ops/s
# Warmup Iteration   2: 566212.021 ops/s
# Warmup Iteration   3: 583139.702 ops/s
# Warmup Iteration   4: 608502.546 ops/s
# Warmup Iteration   5: 553435.344 ops/s
# Warmup Iteration   6: 599658.193 ops/s
# Warmup Iteration   7: 592285.257 ops/s
# Warmup Iteration   8: 599191.856 ops/s
# Warmup Iteration   9: 608544.734 ops/s
# Warmup Iteration  10: 573293.230 ops/s
# Warmup Iteration  11: 605021.498 ops/s
# Warmup Iteration  12: 586088.822 ops/s
# Warmup Iteration  13: 607242.849 ops/s
# Warmup Iteration  14: 629514.604 ops/s
# Warmup Iteration  15: 587995.684 ops/s
# Warmup Iteration  16: 622922.762 ops/s
# Warmup Iteration  17: 662670.666 ops/s
# Warmup Iteration  18: 619737.320 ops/s
# Warmup Iteration  19: 627147.104 ops/s
# Warmup Iteration  20: 658126.827 ops/s
# Warmup Iteration  21: 604673.085 ops/s
# Warmup Iteration  22: 502343.959 ops/s
# Warmup Iteration  23: 646563.885 ops/s
# Warmup Iteration  24: 629829.653 ops/s
# Warmup Iteration  25: 632086.661 ops/s
# Warmup Iteration  26: 614917.617 ops/s
# Warmup Iteration  27: 615618.123 ops/s
# Warmup Iteration  28: 671363.825 ops/s
# Warmup Iteration  29: 591449.388 ops/s
# Warmup Iteration  30: 648997.295 ops/s
Iteration   1: 666713.826 ops/s
Iteration   2: 647357.764 ops/s
Iteration   3: 620830.207 ops/s
Iteration   4: 662274.537 ops/s
Iteration   5: 642609.773 ops/s
Iteration   6: 626571.067 ops/s
Iteration   7: 662281.475 ops/s
Iteration   8: 621271.771 ops/s
Iteration   9: 632152.356 ops/s
Iteration  10: 659857.730 ops/s
Iteration  11: 615547.280 ops/s
Iteration  12: 646525.063 ops/s
Iteration  13: 618823.173 ops/s
Iteration  14: 610215.565 ops/s
Iteration  15: 638639.727 ops/s
Iteration  16: 626483.544 ops/s
Iteration  17: 628487.358 ops/s
Iteration  18: 634946.240 ops/s
Iteration  19: 610830.775 ops/s
Iteration  20: 664456.757 ops/s
Iteration  21: 653414.988 ops/s
Iteration  22: 615673.971 ops/s
Iteration  23: 646351.035 ops/s
Iteration  24: 622879.682 ops/s
Iteration  25: 657773.682 ops/s
Iteration  26: 629465.118 ops/s
Iteration  27: 627927.936 ops/s
Iteration  28: 647975.043 ops/s
Iteration  29: 629558.376 ops/s
Iteration  30: 631578.449 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleFromPublisherTest._Benchmark.benchmark_empty":
  636649.142 ±(99.9%) 11420.657 ops/s [Average]
  (min, avg, max) = (610215.565, 636649.142, 666713.826), stdev = 17093.903
  CI (99.9%): [625228.485, 648069.799] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score       Error  Units
SingleFromPublisherTest._Benchmark.benchmark_empty  thrpt   30  636649.142 ± 11420.657  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableLastTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableLastTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 60461.735 ops/s
# Warmup Iteration   2: 327567.441 ops/s
# Warmup Iteration   3: 1071106.290 ops/s
# Warmup Iteration   4: 1248058.441 ops/s
# Warmup Iteration   5: 1119346.552 ops/s
# Warmup Iteration   6: 1145491.705 ops/s
# Warmup Iteration   7: 1325694.877 ops/s
# Warmup Iteration   8: 1205770.217 ops/s
# Warmup Iteration   9: 1212648.245 ops/s
# Warmup Iteration  10: 1252115.697 ops/s
# Warmup Iteration  11: 1200440.958 ops/s
# Warmup Iteration  12: 1303711.692 ops/s
# Warmup Iteration  13: 1249302.306 ops/s
# Warmup Iteration  14: 1267694.143 ops/s
# Warmup Iteration  15: 1288368.243 ops/s
# Warmup Iteration  16: 1218514.717 ops/s
# Warmup Iteration  17: 1243400.582 ops/s
# Warmup Iteration  18: 1272848.647 ops/s
# Warmup Iteration  19: 1221115.648 ops/s
# Warmup Iteration  20: 1256775.362 ops/s
# Warmup Iteration  21: 1212078.047 ops/s
# Warmup Iteration  22: 1254014.935 ops/s
# Warmup Iteration  23: 1270701.701 ops/s
# Warmup Iteration  24: 1241753.384 ops/s
# Warmup Iteration  25: 1225201.564 ops/s
# Warmup Iteration  26: 1269949.781 ops/s
# Warmup Iteration  27: 1182403.652 ops/s
# Warmup Iteration  28: 1253283.013 ops/s
# Warmup Iteration  29: 1265959.710 ops/s
# Warmup Iteration  30: 1242619.486 ops/s
Iteration   1: 1264051.445 ops/s
Iteration   2: 1242594.707 ops/s
Iteration   3: 1217430.325 ops/s
Iteration   4: 1263763.405 ops/s
Iteration   5: 1284065.825 ops/s
Iteration   6: 1225257.253 ops/s
Iteration   7: 1288341.252 ops/s
Iteration   8: 1206870.948 ops/s
Iteration   9: 1284284.885 ops/s
Iteration  10: 1228974.032 ops/s
Iteration  11: 1220607.945 ops/s
Iteration  12: 1259709.712 ops/s
Iteration  13: 1214729.619 ops/s
Iteration  14: 1222143.387 ops/s
Iteration  15: 1250736.764 ops/s
Iteration  16: 1278594.169 ops/s
Iteration  17: 1227987.601 ops/s
Iteration  18: 1320157.627 ops/s
Iteration  19: 1193360.827 ops/s
Iteration  20: 1267865.280 ops/s
Iteration  21: 1225978.403 ops/s
Iteration  22: 1221918.373 ops/s
Iteration  23: 1275609.107 ops/s
Iteration  24: 1187829.322 ops/s
Iteration  25: 1281348.376 ops/s
Iteration  26: 1219678.863 ops/s
Iteration  27: 1309957.163 ops/s
Iteration  28: 1220263.711 ops/s
Iteration  29: 1256429.692 ops/s
Iteration  30: 1234501.925 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableLastTest._Benchmark.benchmark_dispose":
  1246501.398 ±(99.9%) 22583.724 ops/s [Average]
  (min, avg, max) = (1187829.322, 1246501.398, 1320157.627), stdev = 33802.257
  CI (99.9%): [1223917.674, 1269085.122] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt        Score       Error  Units
FlowableLastTest._Benchmark.benchmark_dispose  thrpt   30  1246501.398 ± 22583.724  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableLastTest._Benchmark.benchmark_lastOrErrorNoElement$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableLastTest._Benchmark.benchmark_lastOrErrorNoElement

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 230518.697 ops/s
# Warmup Iteration   2: 539590.064 ops/s
# Warmup Iteration   3: 599566.052 ops/s
# Warmup Iteration   4: 608210.500 ops/s
# Warmup Iteration   5: 632168.893 ops/s
# Warmup Iteration   6: 596643.811 ops/s
# Warmup Iteration   7: 613915.448 ops/s
# Warmup Iteration   8: 617769.221 ops/s
# Warmup Iteration   9: 611354.657 ops/s
# Warmup Iteration  10: 636356.697 ops/s
# Warmup Iteration  11: 574116.148 ops/s
# Warmup Iteration  12: 630126.232 ops/s
# Warmup Iteration  13: 615429.562 ops/s
# Warmup Iteration  14: 614564.840 ops/s
# Warmup Iteration  15: 616776.144 ops/s
# Warmup Iteration  16: 496855.664 ops/s
# Warmup Iteration  17: 653726.011 ops/s
# Warmup Iteration  18: 643659.570 ops/s
# Warmup Iteration  19: 655143.769 ops/s
# Warmup Iteration  20: 641021.160 ops/s
# Warmup Iteration  21: 625304.479 ops/s
# Warmup Iteration  22: 646396.472 ops/s
# Warmup Iteration  23: 639792.154 ops/s
# Warmup Iteration  24: 640450.345 ops/s
# Warmup Iteration  25: 670159.678 ops/s
# Warmup Iteration  26: 648712.674 ops/s
# Warmup Iteration  27: 629002.483 ops/s
# Warmup Iteration  28: 668389.634 ops/s
# Warmup Iteration  29: 637742.773 ops/s
# Warmup Iteration  30: 657102.045 ops/s
Iteration   1: 637666.021 ops/s
Iteration   2: 641952.510 ops/s
Iteration   3: 649666.185 ops/s
Iteration   4: 632005.935 ops/s
Iteration   5: 640245.391 ops/s
Iteration   6: 676343.825 ops/s
Iteration   7: 660980.263 ops/s
Iteration   8: 646015.379 ops/s
Iteration   9: 662410.016 ops/s
Iteration  10: 645532.126 ops/s
Iteration  11: 651938.992 ops/s
Iteration  12: 672621.981 ops/s
Iteration  13: 648343.246 ops/s
Iteration  14: 633525.502 ops/s
Iteration  15: 645989.346 ops/s
Iteration  16: 642760.152 ops/s
Iteration  17: 661661.612 ops/s
Iteration  18: 659136.713 ops/s
Iteration  19: 626082.938 ops/s
Iteration  20: 678175.865 ops/s
Iteration  21: 625422.570 ops/s
Iteration  22: 671898.192 ops/s
Iteration  23: 634143.932 ops/s
Iteration  24: 648646.638 ops/s
Iteration  25: 665924.019 ops/s
Iteration  26: 619078.742 ops/s
Iteration  27: 667202.724 ops/s
Iteration  28: 642885.665 ops/s
Iteration  29: 654034.155 ops/s
Iteration  30: 658518.471 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableLastTest._Benchmark.benchmark_lastOrErrorNoElement":
  650026.970 ±(99.9%) 10428.723 ops/s [Average]
  (min, avg, max) = (619078.742, 650026.970, 678175.865), stdev = 15609.222
  CI (99.9%): [639598.247, 660455.693] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score       Error  Units
FlowableLastTest._Benchmark.benchmark_lastOrErrorNoElement  thrpt   30  650026.970 ± 10428.723  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableCollectWithCollectorTest._Benchmark.benchmark_empty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableCollectWithCollectorTest._Benchmark.benchmark_empty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1086199.957 ops/s
# Warmup Iteration   2: 4286659.058 ops/s
# Warmup Iteration   3: 6015072.264 ops/s
# Warmup Iteration   4: 6178969.427 ops/s
# Warmup Iteration   5: 6476277.838 ops/s
# Warmup Iteration   6: 6165111.453 ops/s
# Warmup Iteration   7: 6417877.707 ops/s
# Warmup Iteration   8: 6199129.683 ops/s
# Warmup Iteration   9: 6286320.639 ops/s
# Warmup Iteration  10: 6205102.063 ops/s
# Warmup Iteration  11: 6130625.902 ops/s
# Warmup Iteration  12: 6515148.386 ops/s
# Warmup Iteration  13: 6156360.718 ops/s
# Warmup Iteration  14: 6273275.333 ops/s
# Warmup Iteration  15: 6288243.900 ops/s
# Warmup Iteration  16: 6148531.835 ops/s
# Warmup Iteration  17: 6407510.577 ops/s
# Warmup Iteration  18: 6424387.983 ops/s
# Warmup Iteration  19: 6393421.028 ops/s
# Warmup Iteration  20: 6363678.247 ops/s
# Warmup Iteration  21: 6125126.586 ops/s
# Warmup Iteration  22: 6498478.814 ops/s
# Warmup Iteration  23: 6446571.382 ops/s
# Warmup Iteration  24: 6219859.519 ops/s
# Warmup Iteration  25: 6541433.496 ops/s
# Warmup Iteration  26: 6315977.463 ops/s
# Warmup Iteration  27: 6232887.328 ops/s
# Warmup Iteration  28: 6465885.499 ops/s
# Warmup Iteration  29: 6100847.638 ops/s
# Warmup Iteration  30: 6444515.718 ops/s
Iteration   1: 6461230.494 ops/s
Iteration   2: 6332115.254 ops/s
Iteration   3: 6411743.412 ops/s
Iteration   4: 6304445.817 ops/s
Iteration   5: 6364168.712 ops/s
Iteration   6: 6155913.840 ops/s
Iteration   7: 6292926.765 ops/s
Iteration   8: 6587166.454 ops/s
Iteration   9: 6329693.552 ops/s
Iteration  10: 6438944.736 ops/s
Iteration  11: 6285312.387 ops/s
Iteration  12: 6285491.388 ops/s
Iteration  13: 6476564.051 ops/s
Iteration  14: 6413985.912 ops/s
Iteration  15: 6195502.694 ops/s
Iteration  16: 6470049.087 ops/s
Iteration  17: 6251338.491 ops/s
Iteration  18: 6283336.161 ops/s
Iteration  19: 6448766.672 ops/s
Iteration  20: 6291402.519 ops/s
Iteration  21: 6358225.415 ops/s
Iteration  22: 6499065.004 ops/s
Iteration  23: 6252232.772 ops/s
Iteration  24: 6532433.237 ops/s
Iteration  25: 6436144.829 ops/s
Iteration  26: 6507622.321 ops/s
Iteration  27: 6223341.938 ops/s
Iteration  28: 6571546.363 ops/s
Iteration  29: 6399967.228 ops/s
Iteration  30: 6316985.162 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableCollectWithCollectorTest._Benchmark.benchmark_empty":
  6372588.756 ±(99.9%) 75382.720 ops/s [Average]
  (min, avg, max) = (6155913.840, 6372588.756, 6587166.454), stdev = 112829.315
  CI (99.9%): [6297206.036, 6447971.476] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
FlowableCollectWithCollectorTest._Benchmark.benchmark_empty  thrpt   30  6372588.756 ± 75382.720  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableAllTest._Benchmark.benchmark_backpressureIfOneRequestedOneShouldBeDelivered$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableAllTest._Benchmark.benchmark_backpressureIfOneRequestedOneShouldBeDelivered

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1223402.082 ops/s
# Warmup Iteration   2: 4558122.667 ops/s
# Warmup Iteration   3: 6484070.818 ops/s
# Warmup Iteration   4: 6444071.926 ops/s
# Warmup Iteration   5: 6936965.610 ops/s
# Warmup Iteration   6: 6584282.134 ops/s
# Warmup Iteration   7: 6476701.014 ops/s
# Warmup Iteration   8: 6691798.629 ops/s
# Warmup Iteration   9: 6590913.133 ops/s
# Warmup Iteration  10: 6797113.354 ops/s
# Warmup Iteration  11: 5591531.015 ops/s
# Warmup Iteration  12: 6329011.048 ops/s
# Warmup Iteration  13: 6686238.947 ops/s
# Warmup Iteration  14: 6807161.112 ops/s
# Warmup Iteration  15: 6853076.166 ops/s
# Warmup Iteration  16: 6356452.296 ops/s
# Warmup Iteration  17: 6843087.926 ops/s
# Warmup Iteration  18: 7023599.897 ops/s
# Warmup Iteration  19: 6467310.233 ops/s
# Warmup Iteration  20: 6765890.957 ops/s
# Warmup Iteration  21: 6727404.493 ops/s
# Warmup Iteration  22: 6880107.664 ops/s
# Warmup Iteration  23: 6669079.737 ops/s
# Warmup Iteration  24: 6615196.378 ops/s
# Warmup Iteration  25: 6932220.476 ops/s
# Warmup Iteration  26: 6602957.463 ops/s
# Warmup Iteration  27: 6713823.478 ops/s
# Warmup Iteration  28: 6793833.316 ops/s
# Warmup Iteration  29: 6638066.695 ops/s
# Warmup Iteration  30: 6810903.673 ops/s
Iteration   1: 6525551.514 ops/s
Iteration   2: 6804892.226 ops/s
Iteration   3: 6721706.122 ops/s
Iteration   4: 6841769.263 ops/s
Iteration   5: 6657418.400 ops/s
Iteration   6: 6748680.284 ops/s
Iteration   7: 6841332.692 ops/s
Iteration   8: 6509165.104 ops/s
Iteration   9: 6962548.176 ops/s
Iteration  10: 6613841.283 ops/s
Iteration  11: 6887992.750 ops/s
Iteration  12: 6760753.970 ops/s
Iteration  13: 6596688.837 ops/s
Iteration  14: 6893236.315 ops/s
Iteration  15: 6706001.605 ops/s
Iteration  16: 6752299.768 ops/s
Iteration  17: 6587831.660 ops/s
Iteration  18: 6573435.335 ops/s
Iteration  19: 6622047.922 ops/s
Iteration  20: 7026250.435 ops/s
Iteration  21: 6537777.452 ops/s
Iteration  22: 7008937.925 ops/s
Iteration  23: 6595178.290 ops/s
Iteration  24: 6728811.922 ops/s
Iteration  25: 6699146.749 ops/s
Iteration  26: 6568410.388 ops/s
Iteration  27: 6859232.150 ops/s
Iteration  28: 6597703.045 ops/s
Iteration  29: 6947563.533 ops/s
Iteration  30: 6887146.667 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableAllTest._Benchmark.benchmark_backpressureIfOneRequestedOneShouldBeDelivered":
  6735445.059 ±(99.9%) 101945.416 ops/s [Average]
  (min, avg, max) = (6509165.104, 6735445.059, 7026250.435), stdev = 152587.112
  CI (99.9%): [6633499.643, 6837390.476] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             Mode  Cnt        Score        Error  Units
FlowableAllTest._Benchmark.benchmark_backpressureIfOneRequestedOneShouldBeDelivered  thrpt   30  6735445.059 ± 101945.416  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleTakeUntilTest._Benchmark.benchmark_withPublisherDispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleTakeUntilTest._Benchmark.benchmark_withPublisherDispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1975929.461 ops/s
# Warmup Iteration   2: 4994783.284 ops/s
# Warmup Iteration   3: 6378486.115 ops/s
# Warmup Iteration   4: 7604006.600 ops/s
# Warmup Iteration   5: 7446453.046 ops/s
# Warmup Iteration   6: 7467482.090 ops/s
# Warmup Iteration   7: 7659324.533 ops/s
# Warmup Iteration   8: 7436137.937 ops/s
# Warmup Iteration   9: 7828905.729 ops/s
# Warmup Iteration  10: 7707383.477 ops/s
# Warmup Iteration  11: 7673670.951 ops/s
# Warmup Iteration  12: 7332200.056 ops/s
# Warmup Iteration  13: 7406322.284 ops/s
# Warmup Iteration  14: 7654008.911 ops/s
# Warmup Iteration  15: 7200400.779 ops/s
# Warmup Iteration  16: 7454118.496 ops/s
# Warmup Iteration  17: 7575014.649 ops/s
# Warmup Iteration  18: 7558693.595 ops/s
# Warmup Iteration  19: 7733691.805 ops/s
# Warmup Iteration  20: 7579347.211 ops/s
# Warmup Iteration  21: 7523158.996 ops/s
# Warmup Iteration  22: 7589687.480 ops/s
# Warmup Iteration  23: 7710986.644 ops/s
# Warmup Iteration  24: 7503890.976 ops/s
# Warmup Iteration  25: 7423366.261 ops/s
# Warmup Iteration  26: 7613085.267 ops/s
# Warmup Iteration  27: 7280458.306 ops/s
# Warmup Iteration  28: 7616193.090 ops/s
# Warmup Iteration  29: 7798831.087 ops/s
# Warmup Iteration  30: 7302996.939 ops/s
Iteration   1: 7518372.590 ops/s
Iteration   2: 7336540.862 ops/s
Iteration   3: 7684773.395 ops/s
Iteration   4: 7662846.535 ops/s
Iteration   5: 7566147.233 ops/s
Iteration   6: 7382012.977 ops/s
Iteration   7: 7575952.257 ops/s
Iteration   8: 7301853.233 ops/s
Iteration   9: 7620324.981 ops/s
Iteration  10: 7444736.270 ops/s
Iteration  11: 7567696.432 ops/s
Iteration  12: 7749969.599 ops/s
Iteration  13: 7515374.812 ops/s
Iteration  14: 7453800.317 ops/s
Iteration  15: 7670391.070 ops/s
Iteration  16: 7317893.444 ops/s
Iteration  17: 7586636.029 ops/s
Iteration  18: 7322071.655 ops/s
Iteration  19: 7772716.632 ops/s
Iteration  20: 7322546.143 ops/s
Iteration  21: 7705765.063 ops/s
Iteration  22: 7688710.582 ops/s
Iteration  23: 7544243.211 ops/s
Iteration  24: 7598680.778 ops/s
Iteration  25: 7215117.113 ops/s
Iteration  26: 7593947.614 ops/s
Iteration  27: 7346154.347 ops/s
Iteration  28: 7513587.317 ops/s
Iteration  29: 7664106.177 ops/s
Iteration  30: 7361356.620 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntilTest._Benchmark.benchmark_withPublisherDispose":
  7520144.176 ±(99.9%) 102510.046 ops/s [Average]
  (min, avg, max) = (7215117.113, 7520144.176, 7772716.632), stdev = 153432.222
  CI (99.9%): [7417634.130, 7622654.222] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score        Error  Units
SingleTakeUntilTest._Benchmark.benchmark_withPublisherDispose  thrpt   30  7520144.176 ± 102510.046  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFromPublisherTest._Benchmark.benchmark_error$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFromPublisherTest._Benchmark.benchmark_error

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 189666.112 ops/s
# Warmup Iteration   2: 576218.236 ops/s
# Warmup Iteration   3: 674218.548 ops/s
# Warmup Iteration   4: 683547.981 ops/s
# Warmup Iteration   5: 614758.981 ops/s
# Warmup Iteration   6: 589472.758 ops/s
# Warmup Iteration   7: 697065.821 ops/s
# Warmup Iteration   8: 733955.423 ops/s
# Warmup Iteration   9: 702387.585 ops/s
# Warmup Iteration  10: 739615.957 ops/s
# Warmup Iteration  11: 692475.207 ops/s
# Warmup Iteration  12: 696228.454 ops/s
# Warmup Iteration  13: 752115.666 ops/s
# Warmup Iteration  14: 705362.934 ops/s
# Warmup Iteration  15: 748751.147 ops/s
# Warmup Iteration  16: 702242.927 ops/s
# Warmup Iteration  17: 763951.407 ops/s
# Warmup Iteration  18: 792998.399 ops/s
# Warmup Iteration  19: 793917.445 ops/s
# Warmup Iteration  20: 743281.885 ops/s
# Warmup Iteration  21: 795675.149 ops/s
# Warmup Iteration  22: 741608.770 ops/s
# Warmup Iteration  23: 798572.982 ops/s
# Warmup Iteration  24: 745094.303 ops/s
# Warmup Iteration  25: 751503.524 ops/s
# Warmup Iteration  26: 778289.605 ops/s
# Warmup Iteration  27: 779254.543 ops/s
# Warmup Iteration  28: 742997.503 ops/s
# Warmup Iteration  29: 791852.532 ops/s
# Warmup Iteration  30: 749227.118 ops/s
Iteration   1: 783348.482 ops/s
Iteration   2: 753219.362 ops/s
Iteration   3: 794927.937 ops/s
Iteration   4: 762823.115 ops/s
Iteration   5: 770451.837 ops/s
Iteration   6: 767940.742 ops/s
Iteration   7: 764747.028 ops/s
Iteration   8: 795632.884 ops/s
Iteration   9: 772924.270 ops/s
Iteration  10: 739913.050 ops/s
Iteration  11: 793194.834 ops/s
Iteration  12: 737893.878 ops/s
Iteration  13: 759682.143 ops/s
Iteration  14: 757966.140 ops/s
Iteration  15: 774808.889 ops/s
Iteration  16: 742317.089 ops/s
Iteration  17: 784333.666 ops/s
Iteration  18: 761664.628 ops/s
Iteration  19: 770589.323 ops/s
Iteration  20: 760796.366 ops/s
Iteration  21: 748425.119 ops/s
Iteration  22: 776964.313 ops/s
Iteration  23: 743678.051 ops/s
Iteration  24: 753447.488 ops/s
Iteration  25: 770653.763 ops/s
Iteration  26: 754688.501 ops/s
Iteration  27: 770799.467 ops/s
Iteration  28: 742186.152 ops/s
Iteration  29: 747783.590 ops/s
Iteration  30: 788533.437 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleFromPublisherTest._Benchmark.benchmark_error":
  764877.851 ±(99.9%) 11265.363 ops/s [Average]
  (min, avg, max) = (737893.878, 764877.851, 795632.884), stdev = 16861.467
  CI (99.9%): [753612.488, 776143.215] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score       Error  Units
SingleFromPublisherTest._Benchmark.benchmark_error  thrpt   30  764877.851 ± 11265.363  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.SingleFlattenStreamAsFlowableTest._Benchmark.benchmark_fusedEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.SingleFlattenStreamAsFlowableTest._Benchmark.benchmark_fusedEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 557378.117 ops/s
# Warmup Iteration   2: 3022751.529 ops/s
# Warmup Iteration   3: 4040951.681 ops/s
# Warmup Iteration   4: 4943902.551 ops/s
# Warmup Iteration   5: 4694946.729 ops/s
# Warmup Iteration   6: 4733381.283 ops/s
# Warmup Iteration   7: 4967250.102 ops/s
# Warmup Iteration   8: 4734085.899 ops/s
# Warmup Iteration   9: 5054630.944 ops/s
# Warmup Iteration  10: 4833436.788 ops/s
# Warmup Iteration  11: 4804160.689 ops/s
# Warmup Iteration  12: 4795554.497 ops/s
# Warmup Iteration  13: 4766881.318 ops/s
# Warmup Iteration  14: 4709250.808 ops/s
# Warmup Iteration  15: 4858690.636 ops/s
# Warmup Iteration  16: 4911840.012 ops/s
# Warmup Iteration  17: 4764352.231 ops/s
# Warmup Iteration  18: 4988368.053 ops/s
# Warmup Iteration  19: 4623050.490 ops/s
# Warmup Iteration  20: 4885177.902 ops/s
# Warmup Iteration  21: 4893800.764 ops/s
# Warmup Iteration  22: 4648067.806 ops/s
# Warmup Iteration  23: 4817698.821 ops/s
# Warmup Iteration  24: 5037256.611 ops/s
# Warmup Iteration  25: 4997089.938 ops/s
# Warmup Iteration  26: 4734839.187 ops/s
# Warmup Iteration  27: 4926979.267 ops/s
# Warmup Iteration  28: 4812271.217 ops/s
# Warmup Iteration  29: 4857712.383 ops/s
# Warmup Iteration  30: 4802116.196 ops/s
Iteration   1: 4731747.442 ops/s
Iteration   2: 4919684.740 ops/s
Iteration   3: 4816702.742 ops/s
Iteration   4: 5010866.928 ops/s
Iteration   5: 4775990.300 ops/s
Iteration   6: 4875100.710 ops/s
Iteration   7: 4774074.558 ops/s
Iteration   8: 4884957.146 ops/s
Iteration   9: 4981308.669 ops/s
Iteration  10: 4746205.719 ops/s
Iteration  11: 4932683.757 ops/s
Iteration  12: 4725582.417 ops/s
Iteration  13: 4925688.557 ops/s
Iteration  14: 4954753.635 ops/s
Iteration  15: 4912025.672 ops/s
Iteration  16: 4798840.686 ops/s
Iteration  17: 4837835.989 ops/s
Iteration  18: 5034034.300 ops/s
Iteration  19: 4805715.397 ops/s
Iteration  20: 4923704.482 ops/s
Iteration  21: 4809000.335 ops/s
Iteration  22: 4899290.447 ops/s
Iteration  23: 4785989.951 ops/s
Iteration  24: 4915307.082 ops/s
Iteration  25: 4764587.505 ops/s
Iteration  26: 4730418.555 ops/s
Iteration  27: 4993610.564 ops/s
Iteration  28: 4728374.606 ops/s
Iteration  29: 5028698.786 ops/s
Iteration  30: 4658754.198 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.SingleFlattenStreamAsFlowableTest._Benchmark.benchmark_fusedEmpty":
  4856051.196 ±(99.9%) 69157.235 ops/s [Average]
  (min, avg, max) = (4658754.198, 4856051.196, 5034034.300), stdev = 103511.302
  CI (99.9%): [4786893.961, 4925208.431] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
SingleFlattenStreamAsFlowableTest._Benchmark.benchmark_fusedEmpty  thrpt   30  4856051.196 ± 69157.235  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatTest._Benchmark.benchmark_repeatUntilSupplierCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatTest._Benchmark.benchmark_repeatUntilSupplierCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 102030.838 ops/s
# Warmup Iteration   2: 447273.488 ops/s
# Warmup Iteration   3: 520644.888 ops/s
# Warmup Iteration   4: 445094.323 ops/s
# Warmup Iteration   5: 540982.350 ops/s
# Warmup Iteration   6: 470475.090 ops/s
# Warmup Iteration   7: 542325.731 ops/s
# Warmup Iteration   8: 540956.324 ops/s
# Warmup Iteration   9: 540566.716 ops/s
# Warmup Iteration  10: 548135.032 ops/s
# Warmup Iteration  11: 522317.665 ops/s
# Warmup Iteration  12: 552238.285 ops/s
# Warmup Iteration  13: 548655.525 ops/s
# Warmup Iteration  14: 530484.067 ops/s
# Warmup Iteration  15: 559668.109 ops/s
# Warmup Iteration  16: 535103.816 ops/s
# Warmup Iteration  17: 569136.657 ops/s
# Warmup Iteration  18: 554913.485 ops/s
# Warmup Iteration  19: 568279.172 ops/s
# Warmup Iteration  20: 574175.986 ops/s
# Warmup Iteration  21: 552839.409 ops/s
# Warmup Iteration  22: 587750.739 ops/s
# Warmup Iteration  23: 587956.986 ops/s
# Warmup Iteration  24: 578022.200 ops/s
# Warmup Iteration  25: 555276.346 ops/s
# Warmup Iteration  26: 575298.380 ops/s
# Warmup Iteration  27: 552923.192 ops/s
# Warmup Iteration  28: 576208.048 ops/s
# Warmup Iteration  29: 550310.182 ops/s
# Warmup Iteration  30: 565080.455 ops/s
Iteration   1: 582331.414 ops/s
Iteration   2: 557046.316 ops/s
Iteration   3: 570358.213 ops/s
Iteration   4: 589109.510 ops/s
Iteration   5: 545363.888 ops/s
Iteration   6: 573251.506 ops/s
Iteration   7: 554692.307 ops/s
Iteration   8: 563738.691 ops/s
Iteration   9: 580365.469 ops/s
Iteration  10: 555039.707 ops/s
Iteration  11: 564335.426 ops/s
Iteration  12: 553760.267 ops/s
Iteration  13: 541235.216 ops/s
Iteration  14: 567352.112 ops/s
Iteration  15: 574604.606 ops/s
Iteration  16: 540724.953 ops/s
Iteration  17: 581532.226 ops/s
Iteration  18: 555386.470 ops/s
Iteration  19: 570631.328 ops/s
Iteration  20: 566922.156 ops/s
Iteration  21: 558420.444 ops/s
Iteration  22: 583495.500 ops/s
Iteration  23: 558054.694 ops/s
Iteration  24: 577124.483 ops/s
Iteration  25: 549376.977 ops/s
Iteration  26: 575054.283 ops/s
Iteration  27: 563407.680 ops/s
Iteration  28: 556021.958 ops/s
Iteration  29: 581266.946 ops/s
Iteration  30: 550357.270 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatTest._Benchmark.benchmark_repeatUntilSupplierCrash":
  564678.734 ±(99.9%) 8890.408 ops/s [Average]
  (min, avg, max) = (540724.953, 564678.734, 589109.510), stdev = 13306.745
  CI (99.9%): [555788.326, 573569.141] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
FlowableRepeatTest._Benchmark.benchmark_repeatUntilSupplierCrash  thrpt   30  564678.734 ± 8890.408  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableCollectTest._Benchmark.benchmark_collectorFailureDoesNotResultInErrorAndCompletedEmissions$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableCollectTest._Benchmark.benchmark_collectorFailureDoesNotResultInErrorAndCompletedEmissions

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 126199.633 ops/s
# Warmup Iteration   2: 355648.583 ops/s
# Warmup Iteration   3: 651247.793 ops/s
# Warmup Iteration   4: 622615.257 ops/s
# Warmup Iteration   5: 656604.658 ops/s
# Warmup Iteration   6: 627672.933 ops/s
# Warmup Iteration   7: 612317.537 ops/s
# Warmup Iteration   8: 628585.600 ops/s
# Warmup Iteration   9: 648228.456 ops/s
# Warmup Iteration  10: 641707.364 ops/s
# Warmup Iteration  11: 625681.429 ops/s
# Warmup Iteration  12: 651461.482 ops/s
# Warmup Iteration  13: 659710.001 ops/s
# Warmup Iteration  14: 623265.549 ops/s
# Warmup Iteration  15: 664646.168 ops/s
# Warmup Iteration  16: 622662.783 ops/s
# Warmup Iteration  17: 678922.964 ops/s
# Warmup Iteration  18: 673304.033 ops/s
# Warmup Iteration  19: 713501.685 ops/s
# Warmup Iteration  20: 678896.306 ops/s
# Warmup Iteration  21: 656592.593 ops/s
# Warmup Iteration  22: 680179.967 ops/s
# Warmup Iteration  23: 674637.396 ops/s
# Warmup Iteration  24: 692261.141 ops/s
# Warmup Iteration  25: 683527.561 ops/s
# Warmup Iteration  26: 695579.408 ops/s
# Warmup Iteration  27: 678810.266 ops/s
# Warmup Iteration  28: 671635.542 ops/s
# Warmup Iteration  29: 689461.567 ops/s
# Warmup Iteration  30: 649227.546 ops/s
Iteration   1: 696817.233 ops/s
Iteration   2: 674537.215 ops/s
Iteration   3: 700378.222 ops/s
Iteration   4: 674998.517 ops/s
Iteration   5: 701771.842 ops/s
Iteration   6: 666459.904 ops/s
Iteration   7: 695620.155 ops/s
Iteration   8: 692833.528 ops/s
Iteration   9: 657264.262 ops/s
Iteration  10: 706648.596 ops/s
Iteration  11: 658997.208 ops/s
Iteration  12: 700093.337 ops/s
Iteration  13: 660596.520 ops/s
Iteration  14: 673329.832 ops/s
Iteration  15: 675795.577 ops/s
Iteration  16: 665888.042 ops/s
Iteration  17: 696498.365 ops/s
Iteration  18: 676126.000 ops/s
Iteration  19: 687761.685 ops/s
Iteration  20: 706006.588 ops/s
Iteration  21: 662828.174 ops/s
Iteration  22: 682938.455 ops/s
Iteration  23: 663363.364 ops/s
Iteration  24: 697778.219 ops/s
Iteration  25: 675500.694 ops/s
Iteration  26: 685756.229 ops/s
Iteration  27: 694213.387 ops/s
Iteration  28: 559210.874 ops/s
Iteration  29: 696976.071 ops/s
Iteration  30: 682612.158 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableCollectTest._Benchmark.benchmark_collectorFailureDoesNotResultInErrorAndCompletedEmissions":
  678986.675 ±(99.9%) 18216.286 ops/s [Average]
  (min, avg, max) = (559210.874, 678986.675, 706648.596), stdev = 27265.282
  CI (99.9%): [660770.389, 697202.961] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                            Mode  Cnt       Score       Error  Units
FlowableCollectTest._Benchmark.benchmark_collectorFailureDoesNotResultInErrorAndCompletedEmissions  thrpt   30  678986.675 ± 18216.286  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtTest._Benchmark.benchmark_elementAtOrErrorNoElement$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtTest._Benchmark.benchmark_elementAtOrErrorNoElement

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 263805.391 ops/s
# Warmup Iteration   2: 533499.735 ops/s
# Warmup Iteration   3: 612201.542 ops/s
# Warmup Iteration   4: 650057.635 ops/s
# Warmup Iteration   5: 629899.247 ops/s
# Warmup Iteration   6: 606455.839 ops/s
# Warmup Iteration   7: 637507.817 ops/s
# Warmup Iteration   8: 615735.808 ops/s
# Warmup Iteration   9: 644372.187 ops/s
# Warmup Iteration  10: 601734.037 ops/s
# Warmup Iteration  11: 610877.375 ops/s
# Warmup Iteration  12: 630057.229 ops/s
# Warmup Iteration  13: 590264.420 ops/s
# Warmup Iteration  14: 627326.035 ops/s
# Warmup Iteration  15: 619827.999 ops/s
# Warmup Iteration  16: 639386.959 ops/s
# Warmup Iteration  17: 682528.105 ops/s
# Warmup Iteration  18: 648344.021 ops/s
# Warmup Iteration  19: 679996.118 ops/s
# Warmup Iteration  20: 676604.927 ops/s
# Warmup Iteration  21: 663267.553 ops/s
# Warmup Iteration  22: 673864.421 ops/s
# Warmup Iteration  23: 646840.775 ops/s
# Warmup Iteration  24: 662662.261 ops/s
# Warmup Iteration  25: 674190.847 ops/s
# Warmup Iteration  26: 647962.839 ops/s
# Warmup Iteration  27: 684076.222 ops/s
# Warmup Iteration  28: 674477.092 ops/s
# Warmup Iteration  29: 660408.925 ops/s
# Warmup Iteration  30: 675421.693 ops/s
Iteration   1: 665550.283 ops/s
Iteration   2: 674067.044 ops/s
Iteration   3: 656726.850 ops/s
Iteration   4: 654249.886 ops/s
Iteration   5: 633778.366 ops/s
Iteration   6: 652551.303 ops/s
Iteration   7: 661644.296 ops/s
Iteration   8: 701906.660 ops/s
Iteration   9: 638043.593 ops/s
Iteration  10: 673955.218 ops/s
Iteration  11: 661927.300 ops/s
Iteration  12: 666311.940 ops/s
Iteration  13: 686740.796 ops/s
Iteration  14: 680167.843 ops/s
Iteration  15: 664960.813 ops/s
Iteration  16: 653360.885 ops/s
Iteration  17: 692206.487 ops/s
Iteration  18: 644324.974 ops/s
Iteration  19: 659321.246 ops/s
Iteration  20: 687681.513 ops/s
Iteration  21: 651461.249 ops/s
Iteration  22: 670289.506 ops/s
Iteration  23: 656831.217 ops/s
Iteration  24: 655853.761 ops/s
Iteration  25: 696811.032 ops/s
Iteration  26: 655281.316 ops/s
Iteration  27: 659647.085 ops/s
Iteration  28: 657505.540 ops/s
Iteration  29: 652547.972 ops/s
Iteration  30: 697003.861 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtTest._Benchmark.benchmark_elementAtOrErrorNoElement":
  665423.661 ±(99.9%) 11682.584 ops/s [Average]
  (min, avg, max) = (633778.366, 665423.661, 701906.660), stdev = 17485.944
  CI (99.9%): [653741.077, 677106.246] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score       Error  Units
FlowableElementAtTest._Benchmark.benchmark_elementAtOrErrorNoElement  thrpt   30  665423.661 ± 11682.584  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableCollectTest._Benchmark.benchmark_collectorFailureDoesNotResultInErrorAndOnNextEmissions$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableCollectTest._Benchmark.benchmark_collectorFailureDoesNotResultInErrorAndOnNextEmissions

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 78832.925 ops/s
# Warmup Iteration   2: 441336.824 ops/s
# Warmup Iteration   3: 563705.811 ops/s
# Warmup Iteration   4: 586512.236 ops/s
# Warmup Iteration   5: 543005.219 ops/s
# Warmup Iteration   6: 660439.942 ops/s
# Warmup Iteration   7: 639336.060 ops/s
# Warmup Iteration   8: 649832.809 ops/s
# Warmup Iteration   9: 677942.938 ops/s
# Warmup Iteration  10: 622819.629 ops/s
# Warmup Iteration  11: 666653.558 ops/s
# Warmup Iteration  12: 631781.536 ops/s
# Warmup Iteration  13: 649297.012 ops/s
# Warmup Iteration  14: 682605.781 ops/s
# Warmup Iteration  15: 635659.946 ops/s
# Warmup Iteration  16: 665721.130 ops/s
# Warmup Iteration  17: 673059.102 ops/s
# Warmup Iteration  18: 683321.951 ops/s
# Warmup Iteration  19: 708097.462 ops/s
# Warmup Iteration  20: 679211.532 ops/s
# Warmup Iteration  21: 700291.985 ops/s
# Warmup Iteration  22: 672720.681 ops/s
# Warmup Iteration  23: 682527.385 ops/s
# Warmup Iteration  24: 699369.171 ops/s
# Warmup Iteration  25: 695142.478 ops/s
# Warmup Iteration  26: 667855.916 ops/s
# Warmup Iteration  27: 697771.747 ops/s
# Warmup Iteration  28: 719039.833 ops/s
# Warmup Iteration  29: 682672.134 ops/s
# Warmup Iteration  30: 707117.948 ops/s
Iteration   1: 686223.593 ops/s
Iteration   2: 676539.428 ops/s
Iteration   3: 682303.736 ops/s
Iteration   4: 676540.732 ops/s
Iteration   5: 676902.595 ops/s
Iteration   6: 694379.835 ops/s
Iteration   7: 709517.495 ops/s
Iteration   8: 672553.300 ops/s
Iteration   9: 703978.503 ops/s
Iteration  10: 685801.464 ops/s
Iteration  11: 694360.188 ops/s
Iteration  12: 699509.090 ops/s
Iteration  13: 678990.921 ops/s
Iteration  14: 695109.881 ops/s
Iteration  15: 695524.269 ops/s
Iteration  16: 681411.921 ops/s
Iteration  17: 718237.394 ops/s
Iteration  18: 680495.695 ops/s
Iteration  19: 686096.446 ops/s
Iteration  20: 695991.509 ops/s
Iteration  21: 672774.123 ops/s
Iteration  22: 677730.215 ops/s
Iteration  23: 582963.964 ops/s
Iteration  24: 688467.162 ops/s
Iteration  25: 716938.735 ops/s
Iteration  26: 673906.087 ops/s
Iteration  27: 686424.034 ops/s
Iteration  28: 695417.888 ops/s
Iteration  29: 685783.389 ops/s
Iteration  30: 698421.740 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableCollectTest._Benchmark.benchmark_collectorFailureDoesNotResultInErrorAndOnNextEmissions":
  685643.178 ±(99.9%) 15334.600 ops/s [Average]
  (min, avg, max) = (582963.964, 685643.178, 718237.394), stdev = 22952.109
  CI (99.9%): [670308.578, 700977.777] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                         Mode  Cnt       Score       Error  Units
FlowableCollectTest._Benchmark.benchmark_collectorFailureDoesNotResultInErrorAndOnNextEmissions  thrpt   30  685643.178 ± 15334.600  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleTest._Benchmark.benchmark_singleOrErrorNoElement$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleTest._Benchmark.benchmark_singleOrErrorNoElement

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 295077.993 ops/s
# Warmup Iteration   2: 528935.304 ops/s
# Warmup Iteration   3: 619519.817 ops/s
# Warmup Iteration   4: 598873.920 ops/s
# Warmup Iteration   5: 645070.532 ops/s
# Warmup Iteration   6: 618760.488 ops/s
# Warmup Iteration   7: 608375.984 ops/s
# Warmup Iteration   8: 633973.360 ops/s
# Warmup Iteration   9: 603819.381 ops/s
# Warmup Iteration  10: 596424.320 ops/s
# Warmup Iteration  11: 620343.003 ops/s
# Warmup Iteration  12: 624767.143 ops/s
# Warmup Iteration  13: 632813.049 ops/s
# Warmup Iteration  14: 610130.524 ops/s
# Warmup Iteration  15: 615258.901 ops/s
# Warmup Iteration  16: 646320.572 ops/s
# Warmup Iteration  17: 638937.784 ops/s
# Warmup Iteration  18: 664049.269 ops/s
# Warmup Iteration  19: 647607.307 ops/s
# Warmup Iteration  20: 646963.295 ops/s
# Warmup Iteration  21: 684365.684 ops/s
# Warmup Iteration  22: 633994.313 ops/s
# Warmup Iteration  23: 677583.543 ops/s
# Warmup Iteration  24: 663314.629 ops/s
# Warmup Iteration  25: 606374.347 ops/s
# Warmup Iteration  26: 677699.761 ops/s
# Warmup Iteration  27: 611329.326 ops/s
# Warmup Iteration  28: 668546.132 ops/s
# Warmup Iteration  29: 642019.979 ops/s
# Warmup Iteration  30: 667245.415 ops/s
Iteration   1: 632144.883 ops/s
Iteration   2: 647795.359 ops/s
Iteration   3: 664557.178 ops/s
Iteration   4: 634359.720 ops/s
Iteration   5: 663274.579 ops/s
Iteration   6: 651685.394 ops/s
Iteration   7: 680904.162 ops/s
Iteration   8: 631854.674 ops/s
Iteration   9: 639594.046 ops/s
Iteration  10: 678793.884 ops/s
Iteration  11: 629972.568 ops/s
Iteration  12: 667931.437 ops/s
Iteration  13: 613062.036 ops/s
Iteration  14: 652035.693 ops/s
Iteration  15: 650197.596 ops/s
Iteration  16: 692564.284 ops/s
Iteration  17: 640925.533 ops/s
Iteration  18: 658007.588 ops/s
Iteration  19: 653502.917 ops/s
Iteration  20: 658226.639 ops/s
Iteration  21: 642241.354 ops/s
Iteration  22: 660031.970 ops/s
Iteration  23: 656167.144 ops/s
Iteration  24: 654006.078 ops/s
Iteration  25: 667429.789 ops/s
Iteration  26: 649315.840 ops/s
Iteration  27: 665104.001 ops/s
Iteration  28: 647186.401 ops/s
Iteration  29: 644097.797 ops/s
Iteration  30: 660566.681 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleTest._Benchmark.benchmark_singleOrErrorNoElement":
  652917.908 ±(99.9%) 11066.613 ops/s [Average]
  (min, avg, max) = (613062.036, 652917.908, 692564.284), stdev = 16563.987
  CI (99.9%): [641851.294, 663984.521] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score       Error  Units
FlowableSingleTest._Benchmark.benchmark_singleOrErrorNoElement  thrpt   30  652917.908 ± 11066.613  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableLastTest._Benchmark.benchmark_lastOrErrorError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableLastTest._Benchmark.benchmark_lastOrErrorError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 233724.549 ops/s
# Warmup Iteration   2: 581619.145 ops/s
# Warmup Iteration   3: 647497.670 ops/s
# Warmup Iteration   4: 699182.458 ops/s
# Warmup Iteration   5: 597873.573 ops/s
# Warmup Iteration   6: 707461.309 ops/s
# Warmup Iteration   7: 709236.398 ops/s
# Warmup Iteration   8: 714918.012 ops/s
# Warmup Iteration   9: 697317.949 ops/s
# Warmup Iteration  10: 717935.998 ops/s
# Warmup Iteration  11: 721902.145 ops/s
# Warmup Iteration  12: 704199.386 ops/s
# Warmup Iteration  13: 732206.723 ops/s
# Warmup Iteration  14: 711646.293 ops/s
# Warmup Iteration  15: 724334.541 ops/s
# Warmup Iteration  16: 708237.024 ops/s
# Warmup Iteration  17: 747783.707 ops/s
# Warmup Iteration  18: 775532.754 ops/s
# Warmup Iteration  19: 730180.251 ops/s
# Warmup Iteration  20: 783672.801 ops/s
# Warmup Iteration  21: 751179.187 ops/s
# Warmup Iteration  22: 755339.265 ops/s
# Warmup Iteration  23: 748314.564 ops/s
# Warmup Iteration  24: 744048.193 ops/s
# Warmup Iteration  25: 760190.778 ops/s
# Warmup Iteration  26: 722912.231 ops/s
# Warmup Iteration  27: 753008.253 ops/s
# Warmup Iteration  28: 785000.574 ops/s
# Warmup Iteration  29: 780882.113 ops/s
# Warmup Iteration  30: 732653.857 ops/s
Iteration   1: 769466.678 ops/s
Iteration   2: 747524.567 ops/s
Iteration   3: 767132.612 ops/s
Iteration   4: 786340.368 ops/s
Iteration   5: 735129.631 ops/s
Iteration   6: 753157.573 ops/s
Iteration   7: 776589.485 ops/s
Iteration   8: 745233.304 ops/s
Iteration   9: 776421.251 ops/s
Iteration  10: 752313.091 ops/s
Iteration  11: 741740.220 ops/s
Iteration  12: 756553.622 ops/s
Iteration  13: 756314.465 ops/s
Iteration  14: 773998.041 ops/s
Iteration  15: 772837.469 ops/s
Iteration  16: 733462.909 ops/s
Iteration  17: 771602.452 ops/s
Iteration  18: 572425.599 ops/s
Iteration  19: 749698.937 ops/s
Iteration  20: 785581.077 ops/s
Iteration  21: 737376.683 ops/s
Iteration  22: 798096.713 ops/s
Iteration  23: 775447.821 ops/s
Iteration  24: 745686.061 ops/s
Iteration  25: 791633.571 ops/s
Iteration  26: 743016.966 ops/s
Iteration  27: 744630.702 ops/s
Iteration  28: 777099.298 ops/s
Iteration  29: 742959.672 ops/s
Iteration  30: 762857.857 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableLastTest._Benchmark.benchmark_lastOrErrorError":
  754744.290 ±(99.9%) 25927.809 ops/s [Average]
  (min, avg, max) = (572425.599, 754744.290, 798096.713), stdev = 38807.527
  CI (99.9%): [728816.481, 780672.099] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score       Error  Units
FlowableLastTest._Benchmark.benchmark_lastOrErrorError  thrpt   30  754744.290 ± 25927.809  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualTest._Benchmark.benchmark_fusionRejected$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualTest._Benchmark.benchmark_fusionRejected

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 541003.900 ops/s
# Warmup Iteration   2: 2042584.492 ops/s
# Warmup Iteration   3: 2967498.696 ops/s
# Warmup Iteration   4: 2998747.119 ops/s
# Warmup Iteration   5: 3123296.162 ops/s
# Warmup Iteration   6: 2951182.166 ops/s
# Warmup Iteration   7: 2966612.705 ops/s
# Warmup Iteration   8: 3087886.644 ops/s
# Warmup Iteration   9: 3057750.057 ops/s
# Warmup Iteration  10: 2926779.515 ops/s
# Warmup Iteration  11: 3130544.919 ops/s
# Warmup Iteration  12: 2878533.160 ops/s
# Warmup Iteration  13: 3032027.268 ops/s
# Warmup Iteration  14: 3105074.215 ops/s
# Warmup Iteration  15: 2898989.561 ops/s
# Warmup Iteration  16: 3142767.996 ops/s
# Warmup Iteration  17: 3011894.635 ops/s
# Warmup Iteration  18: 2958858.664 ops/s
# Warmup Iteration  19: 3119225.088 ops/s
# Warmup Iteration  20: 2964790.645 ops/s
# Warmup Iteration  21: 3033587.772 ops/s
# Warmup Iteration  22: 3043324.614 ops/s
# Warmup Iteration  23: 2927458.757 ops/s
# Warmup Iteration  24: 2976690.322 ops/s
# Warmup Iteration  25: 3145278.592 ops/s
# Warmup Iteration  26: 2958405.954 ops/s
# Warmup Iteration  27: 3152044.797 ops/s
# Warmup Iteration  28: 2913352.351 ops/s
# Warmup Iteration  29: 3130599.668 ops/s
# Warmup Iteration  30: 3092006.344 ops/s
Iteration   1: 2952362.214 ops/s
Iteration   2: 3145136.220 ops/s
Iteration   3: 2884370.956 ops/s
Iteration   4: 3021463.822 ops/s
Iteration   5: 3083600.766 ops/s
Iteration   6: 2975940.778 ops/s
Iteration   7: 3121934.892 ops/s
Iteration   8: 3129484.086 ops/s
Iteration   9: 3008585.142 ops/s
Iteration  10: 3002145.543 ops/s
Iteration  11: 2953079.439 ops/s
Iteration  12: 3035771.250 ops/s
Iteration  13: 2986560.165 ops/s
Iteration  14: 2862188.617 ops/s
Iteration  15: 3036655.219 ops/s
Iteration  16: 2927535.902 ops/s
Iteration  17: 3115981.421 ops/s
Iteration  18: 2945244.972 ops/s
Iteration  19: 2926129.119 ops/s
Iteration  20: 3031910.275 ops/s
Iteration  21: 2973235.562 ops/s
Iteration  22: 3104776.828 ops/s
Iteration  23: 3107929.285 ops/s
Iteration  24: 3037132.112 ops/s
Iteration  25: 2998677.261 ops/s
Iteration  26: 2942858.272 ops/s
Iteration  27: 3147356.107 ops/s
Iteration  28: 2913047.662 ops/s
Iteration  29: 3108829.270 ops/s
Iteration  30: 3012703.642 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualTest._Benchmark.benchmark_fusionRejected":
  3016420.893 ±(99.9%) 54050.095 ops/s [Average]
  (min, avg, max) = (2862188.617, 3016420.893, 3147356.107), stdev = 80899.643
  CI (99.9%): [2962370.799, 3070470.988] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
FlowableSequenceEqualTest._Benchmark.benchmark_fusionRejected  thrpt   30  3016420.893 ± 54050.095  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCountTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCountTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 53332.560 ops/s
# Warmup Iteration   2: 196619.857 ops/s
# Warmup Iteration   3: 234642.901 ops/s
# Warmup Iteration   4: 246048.428 ops/s
# Warmup Iteration   5: 261601.033 ops/s
# Warmup Iteration   6: 248032.728 ops/s
# Warmup Iteration   7: 256916.403 ops/s
# Warmup Iteration   8: 255622.973 ops/s
# Warmup Iteration   9: 266488.795 ops/s
# Warmup Iteration  10: 237291.738 ops/s
# Warmup Iteration  11: 255965.079 ops/s
# Warmup Iteration  12: 266626.436 ops/s
# Warmup Iteration  13: 247279.394 ops/s
# Warmup Iteration  14: 267281.203 ops/s
# Warmup Iteration  15: 260158.144 ops/s
# Warmup Iteration  16: 264624.174 ops/s
# Warmup Iteration  17: 264401.328 ops/s
# Warmup Iteration  18: 261716.068 ops/s
# Warmup Iteration  19: 271503.914 ops/s
# Warmup Iteration  20: 267556.009 ops/s
# Warmup Iteration  21: 270227.955 ops/s
# Warmup Iteration  22: 268424.356 ops/s
# Warmup Iteration  23: 270794.216 ops/s
# Warmup Iteration  24: 271243.019 ops/s
# Warmup Iteration  25: 275416.548 ops/s
# Warmup Iteration  26: 272387.713 ops/s
# Warmup Iteration  27: 269076.638 ops/s
# Warmup Iteration  28: 273605.044 ops/s
# Warmup Iteration  29: 264628.861 ops/s
# Warmup Iteration  30: 271461.575 ops/s
Iteration   1: 266688.435 ops/s
Iteration   2: 267737.059 ops/s
Iteration   3: 275160.580 ops/s
Iteration   4: 271513.347 ops/s
Iteration   5: 279904.307 ops/s
Iteration   6: 269693.848 ops/s
Iteration   7: 256675.175 ops/s
Iteration   8: 275461.545 ops/s
Iteration   9: 263122.883 ops/s
Iteration  10: 275110.501 ops/s
Iteration  11: 274268.480 ops/s
Iteration  12: 243244.364 ops/s
Iteration  13: 253888.197 ops/s
Iteration  14: 271039.557 ops/s
Iteration  15: 257279.750 ops/s
Iteration  16: 278829.791 ops/s
Iteration  17: 260230.001 ops/s
Iteration  18: 280346.188 ops/s
Iteration  19: 264601.835 ops/s
Iteration  20: 270174.887 ops/s
Iteration  21: 262478.130 ops/s
Iteration  22: 278419.383 ops/s
Iteration  23: 268895.502 ops/s
Iteration  24: 276541.452 ops/s
Iteration  25: 269578.090 ops/s
Iteration  26: 267397.514 ops/s
Iteration  27: 277061.338 ops/s
Iteration  28: 264843.826 ops/s
Iteration  29: 271879.965 ops/s
Iteration  30: 264951.544 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableCountTest._Benchmark.benchmark_doubleOnSubscribe":
  268567.249 ±(99.9%) 5702.281 ops/s [Average]
  (min, avg, max) = (243244.364, 268567.249, 280346.188), stdev = 8534.906
  CI (99.9%): [262864.968, 274269.530] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score      Error  Units
FlowableCountTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  268567.249 ± 5702.281  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDelayTest._Benchmark.benchmark_withPublisherDoubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDelayTest._Benchmark.benchmark_withPublisherDoubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 65065.816 ops/s
# Warmup Iteration   2: 371919.683 ops/s
# Warmup Iteration   3: 475485.754 ops/s
# Warmup Iteration   4: 479572.851 ops/s
# Warmup Iteration   5: 537670.469 ops/s
# Warmup Iteration   6: 468717.272 ops/s
# Warmup Iteration   7: 522920.590 ops/s
# Warmup Iteration   8: 545270.113 ops/s
# Warmup Iteration   9: 529020.409 ops/s
# Warmup Iteration  10: 553074.998 ops/s
# Warmup Iteration  11: 535481.599 ops/s
# Warmup Iteration  12: 555910.834 ops/s
# Warmup Iteration  13: 515472.680 ops/s
# Warmup Iteration  14: 542178.673 ops/s
# Warmup Iteration  15: 523705.764 ops/s
# Warmup Iteration  16: 543858.638 ops/s
# Warmup Iteration  17: 544327.366 ops/s
# Warmup Iteration  18: 565895.584 ops/s
# Warmup Iteration  19: 547556.458 ops/s
# Warmup Iteration  20: 545807.873 ops/s
# Warmup Iteration  21: 574282.933 ops/s
# Warmup Iteration  22: 529357.296 ops/s
# Warmup Iteration  23: 546672.256 ops/s
# Warmup Iteration  24: 541993.968 ops/s
# Warmup Iteration  25: 562409.389 ops/s
# Warmup Iteration  26: 565634.894 ops/s
# Warmup Iteration  27: 541920.247 ops/s
# Warmup Iteration  28: 547387.679 ops/s
# Warmup Iteration  29: 533332.178 ops/s
# Warmup Iteration  30: 543639.984 ops/s
Iteration   1: 551572.783 ops/s
Iteration   2: 554708.673 ops/s
Iteration   3: 545273.040 ops/s
Iteration   4: 563384.843 ops/s
Iteration   5: 546127.307 ops/s
Iteration   6: 559231.489 ops/s
Iteration   7: 545395.818 ops/s
Iteration   8: 557357.121 ops/s
Iteration   9: 537399.743 ops/s
Iteration  10: 553448.539 ops/s
Iteration  11: 558244.481 ops/s
Iteration  12: 549152.155 ops/s
Iteration  13: 538698.897 ops/s
Iteration  14: 541789.595 ops/s
Iteration  15: 570546.898 ops/s
Iteration  16: 540245.848 ops/s
Iteration  17: 565719.433 ops/s
Iteration  18: 558870.013 ops/s
Iteration  19: 550102.242 ops/s
Iteration  20: 555964.824 ops/s
Iteration  21: 550472.861 ops/s
Iteration  22: 557727.867 ops/s
Iteration  23: 548930.409 ops/s
Iteration  24: 549779.428 ops/s
Iteration  25: 564410.992 ops/s
Iteration  26: 525948.984 ops/s
Iteration  27: 564043.969 ops/s
Iteration  28: 558931.900 ops/s
Iteration  29: 543678.103 ops/s
Iteration  30: 538613.908 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleDelayTest._Benchmark.benchmark_withPublisherDoubleOnSubscribe":
  551525.739 ±(99.9%) 6725.786 ops/s [Average]
  (min, avg, max) = (525948.984, 551525.739, 570546.898), stdev = 10066.841
  CI (99.9%): [544799.953, 558251.525] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score      Error  Units
SingleDelayTest._Benchmark.benchmark_withPublisherDoubleOnSubscribe  thrpt   30  551525.739 ± 6725.786  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableCollectWithCollectorTest._Benchmark.benchmark_collectorAccumulatorCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableCollectWithCollectorTest._Benchmark.benchmark_collectorAccumulatorCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 95271.144 ops/s
# Warmup Iteration   2: 446662.514 ops/s
# Warmup Iteration   3: 514379.145 ops/s
# Warmup Iteration   4: 517823.587 ops/s
# Warmup Iteration   5: 545151.083 ops/s
# Warmup Iteration   6: 529723.002 ops/s
# Warmup Iteration   7: 534071.347 ops/s
# Warmup Iteration   8: 524521.557 ops/s
# Warmup Iteration   9: 543797.084 ops/s
# Warmup Iteration  10: 522217.150 ops/s
# Warmup Iteration  11: 515421.925 ops/s
# Warmup Iteration  12: 531840.982 ops/s
# Warmup Iteration  13: 538306.078 ops/s
# Warmup Iteration  14: 536279.380 ops/s
# Warmup Iteration  15: 525211.893 ops/s
# Warmup Iteration  16: 552711.810 ops/s
# Warmup Iteration  17: 532495.395 ops/s
# Warmup Iteration  18: 554173.888 ops/s
# Warmup Iteration  19: 563993.257 ops/s
# Warmup Iteration  20: 540014.601 ops/s
# Warmup Iteration  21: 568661.412 ops/s
# Warmup Iteration  22: 535135.611 ops/s
# Warmup Iteration  23: 539645.816 ops/s
# Warmup Iteration  24: 551815.341 ops/s
# Warmup Iteration  25: 565832.621 ops/s
# Warmup Iteration  26: 554308.516 ops/s
# Warmup Iteration  27: 550283.353 ops/s
# Warmup Iteration  28: 562336.195 ops/s
# Warmup Iteration  29: 544174.982 ops/s
# Warmup Iteration  30: 560071.604 ops/s
Iteration   1: 565625.223 ops/s
Iteration   2: 551128.620 ops/s
Iteration   3: 551198.072 ops/s
Iteration   4: 555158.427 ops/s
Iteration   5: 562006.967 ops/s
Iteration   6: 548776.113 ops/s
Iteration   7: 458591.996 ops/s
Iteration   8: 570841.667 ops/s
Iteration   9: 540024.478 ops/s
Iteration  10: 555215.855 ops/s
Iteration  11: 561954.759 ops/s
Iteration  12: 554917.957 ops/s
Iteration  13: 576095.412 ops/s
Iteration  14: 556567.424 ops/s
Iteration  15: 551753.009 ops/s
Iteration  16: 568922.691 ops/s
Iteration  17: 561386.727 ops/s
Iteration  18: 548129.784 ops/s
Iteration  19: 563841.415 ops/s
Iteration  20: 548849.040 ops/s
Iteration  21: 571263.587 ops/s
Iteration  22: 541350.701 ops/s
Iteration  23: 557064.381 ops/s
Iteration  24: 564577.283 ops/s
Iteration  25: 538586.671 ops/s
Iteration  26: 569755.586 ops/s
Iteration  27: 547651.215 ops/s
Iteration  28: 568441.127 ops/s
Iteration  29: 554953.367 ops/s
Iteration  30: 535071.150 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableCollectWithCollectorTest._Benchmark.benchmark_collectorAccumulatorCrash":
  553323.357 ±(99.9%) 13862.955 ops/s [Average]
  (min, avg, max) = (458591.996, 553323.357, 576095.412), stdev = 20749.419
  CI (99.9%): [539460.402, 567186.311] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt       Score       Error  Units
FlowableCollectWithCollectorTest._Benchmark.benchmark_collectorAccumulatorCrash  thrpt   30  553323.357 ± 13862.955  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingleTest._Benchmark.benchmark_emissionQueueTrigger$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingleTest._Benchmark.benchmark_emissionQueueTrigger

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 62249.260 ops/s
# Warmup Iteration   2: 338873.545 ops/s
# Warmup Iteration   3: 826279.314 ops/s
# Warmup Iteration   4: 1247540.518 ops/s
# Warmup Iteration   5: 1252954.641 ops/s
# Warmup Iteration   6: 1152531.700 ops/s
# Warmup Iteration   7: 1181680.356 ops/s
# Warmup Iteration   8: 1257533.482 ops/s
# Warmup Iteration   9: 1257452.051 ops/s
# Warmup Iteration  10: 1287416.148 ops/s
# Warmup Iteration  11: 1212453.036 ops/s
# Warmup Iteration  12: 1336829.314 ops/s
# Warmup Iteration  13: 1337998.559 ops/s
# Warmup Iteration  14: 1227734.504 ops/s
# Warmup Iteration  15: 1325778.323 ops/s
# Warmup Iteration  16: 1254247.770 ops/s
# Warmup Iteration  17: 1256855.032 ops/s
# Warmup Iteration  18: 1280048.792 ops/s
# Warmup Iteration  19: 1306447.995 ops/s
# Warmup Iteration  20: 1246242.637 ops/s
# Warmup Iteration  21: 1255182.879 ops/s
# Warmup Iteration  22: 1290601.304 ops/s
# Warmup Iteration  23: 1300483.945 ops/s
# Warmup Iteration  24: 1247708.459 ops/s
# Warmup Iteration  25: 1263646.786 ops/s
# Warmup Iteration  26: 1293245.461 ops/s
# Warmup Iteration  27: 1248267.256 ops/s
# Warmup Iteration  28: 1268726.968 ops/s
# Warmup Iteration  29: 1273017.194 ops/s
# Warmup Iteration  30: 1224826.576 ops/s
Iteration   1: 1305254.456 ops/s
Iteration   2: 1240842.764 ops/s
Iteration   3: 1297822.731 ops/s
Iteration   4: 1329278.441 ops/s
Iteration   5: 1248295.444 ops/s
Iteration   6: 1315419.645 ops/s
Iteration   7: 1286089.543 ops/s
Iteration   8: 1249010.842 ops/s
Iteration   9: 1329570.774 ops/s
Iteration  10: 1268164.016 ops/s
Iteration  11: 1291468.556 ops/s
Iteration  12: 1246269.454 ops/s
Iteration  13: 1282811.596 ops/s
Iteration  14: 1295697.711 ops/s
Iteration  15: 1234807.005 ops/s
Iteration  16: 1310807.156 ops/s
Iteration  17: 1245103.608 ops/s
Iteration  18: 1291260.325 ops/s
Iteration  19: 1280799.820 ops/s
Iteration  20: 1259333.071 ops/s
Iteration  21: 1289981.659 ops/s
Iteration  22: 1244651.833 ops/s
Iteration  23: 1292550.898 ops/s
Iteration  24: 1255011.836 ops/s
Iteration  25: 1294426.685 ops/s
Iteration  26: 1309485.253 ops/s
Iteration  27: 1244136.958 ops/s
Iteration  28: 1284993.381 ops/s
Iteration  29: 1255296.430 ops/s
Iteration  30: 1272290.331 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingleTest._Benchmark.benchmark_emissionQueueTrigger":
  1278364.407 ±(99.9%) 18472.049 ops/s [Average]
  (min, avg, max) = (1234807.005, 1278364.407, 1329570.774), stdev = 27648.095
  CI (99.9%): [1259892.358, 1296836.456] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
ObservableFlatMapSingleTest._Benchmark.benchmark_emissionQueueTrigger  thrpt   30  1278364.407 ± 18472.049  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingleTest._Benchmark.benchmark_disposeInner$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingleTest._Benchmark.benchmark_disposeInner

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 485400.142 ops/s
# Warmup Iteration   2: 1675330.901 ops/s
# Warmup Iteration   3: 2101162.836 ops/s
# Warmup Iteration   4: 2631010.188 ops/s
# Warmup Iteration   5: 2668581.677 ops/s
# Warmup Iteration   6: 2612392.214 ops/s
# Warmup Iteration   7: 2633958.658 ops/s
# Warmup Iteration   8: 2594686.027 ops/s
# Warmup Iteration   9: 2622277.898 ops/s
# Warmup Iteration  10: 2699551.626 ops/s
# Warmup Iteration  11: 2526894.212 ops/s
# Warmup Iteration  12: 2643524.250 ops/s
# Warmup Iteration  13: 2732266.638 ops/s
# Warmup Iteration  14: 2533843.704 ops/s
# Warmup Iteration  15: 2684701.651 ops/s
# Warmup Iteration  16: 2556347.553 ops/s
# Warmup Iteration  17: 2581477.274 ops/s
# Warmup Iteration  18: 2727758.952 ops/s
# Warmup Iteration  19: 2564067.573 ops/s
# Warmup Iteration  20: 2746088.049 ops/s
# Warmup Iteration  21: 2636907.457 ops/s
# Warmup Iteration  22: 2562318.255 ops/s
# Warmup Iteration  23: 2685930.247 ops/s
# Warmup Iteration  24: 2582490.289 ops/s
# Warmup Iteration  25: 2452811.947 ops/s
# Warmup Iteration  26: 2718499.787 ops/s
# Warmup Iteration  27: 2557383.899 ops/s
# Warmup Iteration  28: 2602196.713 ops/s
# Warmup Iteration  29: 2704969.055 ops/s
# Warmup Iteration  30: 2558898.054 ops/s
Iteration   1: 2769953.206 ops/s
Iteration   2: 2142696.910 ops/s
Iteration   3: 2569428.007 ops/s
Iteration   4: 2637103.020 ops/s
Iteration   5: 2594621.859 ops/s
Iteration   6: 2680686.632 ops/s
Iteration   7: 2572761.810 ops/s
Iteration   8: 2573065.816 ops/s
Iteration   9: 2727912.026 ops/s
Iteration  10: 2630667.363 ops/s
Iteration  11: 2646110.847 ops/s
Iteration  12: 2617367.307 ops/s
Iteration  13: 2580725.343 ops/s
Iteration  14: 2612007.203 ops/s
Iteration  15: 2580631.398 ops/s
Iteration  16: 2652180.634 ops/s
Iteration  17: 2577405.450 ops/s
Iteration  18: 2669793.209 ops/s
Iteration  19: 2542463.877 ops/s
Iteration  20: 2770232.935 ops/s
Iteration  21: 2561848.763 ops/s
Iteration  22: 2578595.084 ops/s
Iteration  23: 2714224.307 ops/s
Iteration  24: 2544896.746 ops/s
Iteration  25: 2647237.771 ops/s
Iteration  26: 2655823.368 ops/s
Iteration  27: 2541960.989 ops/s
Iteration  28: 2707198.818 ops/s
Iteration  29: 2532170.393 ops/s
Iteration  30: 2586646.373 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingleTest._Benchmark.benchmark_disposeInner":
  2607280.582 ±(99.9%) 73475.328 ops/s [Average]
  (min, avg, max) = (2142696.910, 2607280.582, 2770232.935), stdev = 109974.420
  CI (99.9%): [2533805.254, 2680755.910] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
ObservableFlatMapSingleTest._Benchmark.benchmark_disposeInner  thrpt   30  2607280.582 ± 73475.328  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingleTest._Benchmark.benchmark_onNextDrainCancel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingleTest._Benchmark.benchmark_onNextDrainCancel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 67079.886 ops/s
# Warmup Iteration   2: 228117.115 ops/s
# Warmup Iteration   3: 721546.783 ops/s
# Warmup Iteration   4: 1078012.159 ops/s
# Warmup Iteration   5: 1079393.529 ops/s
# Warmup Iteration   6: 1085639.518 ops/s
# Warmup Iteration   7: 1070623.287 ops/s
# Warmup Iteration   8: 1120739.854 ops/s
# Warmup Iteration   9: 1107924.570 ops/s
# Warmup Iteration  10: 1120962.132 ops/s
# Warmup Iteration  11: 1112531.264 ops/s
# Warmup Iteration  12: 1086160.066 ops/s
# Warmup Iteration  13: 1082406.001 ops/s
# Warmup Iteration  14: 1135165.339 ops/s
# Warmup Iteration  15: 1001459.658 ops/s
# Warmup Iteration  16: 1028215.238 ops/s
# Warmup Iteration  17: 1144979.461 ops/s
# Warmup Iteration  18: 1103861.438 ops/s
# Warmup Iteration  19: 1145643.159 ops/s
# Warmup Iteration  20: 1107510.502 ops/s
# Warmup Iteration  21: 1145134.362 ops/s
# Warmup Iteration  22: 1072598.534 ops/s
# Warmup Iteration  23: 1095131.910 ops/s
# Warmup Iteration  24: 1121418.214 ops/s
# Warmup Iteration  25: 1146059.875 ops/s
# Warmup Iteration  26: 1064814.145 ops/s
# Warmup Iteration  27: 1164280.350 ops/s
# Warmup Iteration  28: 1113149.434 ops/s
# Warmup Iteration  29: 1139568.191 ops/s
# Warmup Iteration  30: 1148290.294 ops/s
Iteration   1: 1077971.534 ops/s
Iteration   2: 1142517.759 ops/s
Iteration   3: 1111942.377 ops/s
Iteration   4: 1131030.967 ops/s
Iteration   5: 1136581.929 ops/s
Iteration   6: 1109302.985 ops/s
Iteration   7: 1193211.525 ops/s
Iteration   8: 1156547.719 ops/s
Iteration   9: 1145284.109 ops/s
Iteration  10: 1083133.949 ops/s
Iteration  11: 1118744.880 ops/s
Iteration  12: 1096863.883 ops/s
Iteration  13: 1168731.384 ops/s
Iteration  14: 1145464.809 ops/s
Iteration  15: 1085239.161 ops/s
Iteration  16: 1155025.575 ops/s
Iteration  17: 1103723.800 ops/s
Iteration  18: 1117334.620 ops/s
Iteration  19: 1179231.563 ops/s
Iteration  20: 1095219.783 ops/s
Iteration  21: 1144919.665 ops/s
Iteration  22: 1061249.910 ops/s
Iteration  23: 1156611.020 ops/s
Iteration  24: 1095327.693 ops/s
Iteration  25: 1100847.386 ops/s
Iteration  26: 1136421.260 ops/s
Iteration  27: 1069081.006 ops/s
Iteration  28: 1129916.925 ops/s
Iteration  29: 1136556.060 ops/s
Iteration  30: 1126508.981 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingleTest._Benchmark.benchmark_onNextDrainCancel":
  1123684.807 ±(99.9%) 21911.332 ops/s [Average]
  (min, avg, max) = (1061249.910, 1123684.807, 1193211.525), stdev = 32795.853
  CI (99.9%): [1101773.475, 1145596.139] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
ObservableFlatMapSingleTest._Benchmark.benchmark_onNextDrainCancel  thrpt   30  1123684.807 ± 21911.332  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.schedulers.IoSchedulerInternalTest._Benchmark.benchmark_expiredWorkerRemoved$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.schedulers.IoSchedulerInternalTest._Benchmark.benchmark_expiredWorkerRemoved

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 89699.674 ops/s
# Warmup Iteration   2: 96544.443 ops/s
# Warmup Iteration   3: 260975.794 ops/s
# Warmup Iteration   4: 333507.496 ops/s
# Warmup Iteration   5: 291071.887 ops/s
# Warmup Iteration   6: 388632.596 ops/s
# Warmup Iteration   7: 329520.584 ops/s
# Warmup Iteration   8: 348681.519 ops/s
# Warmup Iteration   9: 337113.844 ops/s
# Warmup Iteration  10: 330481.854 ops/s
# Warmup Iteration  11: 310922.665 ops/s
# Warmup Iteration  12: 435332.199 ops/s
# Warmup Iteration  13: 283265.117 ops/s
# Warmup Iteration  14: 320903.300 ops/s
# Warmup Iteration  15: 390400.695 ops/s
# Warmup Iteration  16: 312585.627 ops/s
# Warmup Iteration  17: 324373.017 ops/s
# Warmup Iteration  18: 312567.129 ops/s
# Warmup Iteration  19: 399447.111 ops/s
# Warmup Iteration  20: 364617.277 ops/s
# Warmup Iteration  21: 306155.305 ops/s
# Warmup Iteration  22: 315500.584 ops/s
# Warmup Iteration  23: 341886.609 ops/s
# Warmup Iteration  24: 281529.606 ops/s
# Warmup Iteration  25: 383844.490 ops/s
# Warmup Iteration  26: 375202.566 ops/s
# Warmup Iteration  27: 409287.048 ops/s
# Warmup Iteration  28: 280150.281 ops/s
# Warmup Iteration  29: 349583.858 ops/s
# Warmup Iteration  30: 347998.493 ops/s
Iteration   1: 357612.996 ops/s
Iteration   2: 365082.349 ops/s
Iteration   3: 382023.073 ops/s
Iteration   4: 369498.551 ops/s
Iteration   5: 348510.999 ops/s
Iteration   6: 345544.862 ops/s
Iteration   7: 358025.001 ops/s
Iteration   8: 276823.165 ops/s
Iteration   9: 329592.905 ops/s
Iteration  10: 348595.253 ops/s
Iteration  11: 325421.854 ops/s
Iteration  12: 330384.719 ops/s
Iteration  13: 350199.458 ops/s
Iteration  14: 347919.110 ops/s
Iteration  15: 334413.340 ops/s
Iteration  16: 357355.339 ops/s
Iteration  17: 338986.703 ops/s
Iteration  18: 342698.646 ops/s
Iteration  19: 342644.394 ops/s
Iteration  20: 343880.169 ops/s
Iteration  21: 327830.111 ops/s
Iteration  22: 342287.076 ops/s
Iteration  23: 366010.075 ops/s
Iteration  24: 391816.936 ops/s
Iteration  25: 306823.138 ops/s
Iteration  26: 361874.318 ops/s
Iteration  27: 372892.171 ops/s
Iteration  28: 339985.979 ops/s
Iteration  29: 321293.785 ops/s
Iteration  30: 344515.998 ops/s


Result "io.reactivex.rxjava3.internal.schedulers.IoSchedulerInternalTest._Benchmark.benchmark_expiredWorkerRemoved":
  345684.749 ±(99.9%) 14984.871 ops/s [Average]
  (min, avg, max) = (276823.165, 345684.749, 391816.936), stdev = 22428.651
  CI (99.9%): [330699.878, 360669.620] (assumes normal distribution)


# Run complete. Total time: 00:01:06

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score       Error  Units
IoSchedulerInternalTest._Benchmark.benchmark_expiredWorkerRemoved  thrpt   30  345684.749 ± 14984.871  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.disposables.CompositeDisposableTest._Benchmark.benchmark_tryRemoveIfNotIn$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.disposables.CompositeDisposableTest._Benchmark.benchmark_tryRemoveIfNotIn

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2417260.333 ops/s
# Warmup Iteration   2: 3176208.416 ops/s
# Warmup Iteration   3: 3261998.264 ops/s
# Warmup Iteration   4: 4265191.484 ops/s
# Warmup Iteration   5: 4796538.335 ops/s
# Warmup Iteration   6: 4632806.647 ops/s
# Warmup Iteration   7: 4554338.603 ops/s
# Warmup Iteration   8: 4821077.108 ops/s
# Warmup Iteration   9: 4505406.902 ops/s
# Warmup Iteration  10: 4656534.622 ops/s
# Warmup Iteration  11: 4592219.918 ops/s
# Warmup Iteration  12: 4667465.027 ops/s
# Warmup Iteration  13: 4809387.405 ops/s
# Warmup Iteration  14: 4496163.325 ops/s
# Warmup Iteration  15: 4657018.614 ops/s
# Warmup Iteration  16: 4578151.200 ops/s
# Warmup Iteration  17: 4656505.961 ops/s
# Warmup Iteration  18: 4882154.490 ops/s
# Warmup Iteration  19: 4581194.706 ops/s
# Warmup Iteration  20: 4807677.512 ops/s
# Warmup Iteration  21: 4612306.714 ops/s
# Warmup Iteration  22: 4918900.746 ops/s
# Warmup Iteration  23: 4784785.153 ops/s
# Warmup Iteration  24: 4531632.385 ops/s
# Warmup Iteration  25: 4703901.468 ops/s
# Warmup Iteration  26: 4741674.077 ops/s
# Warmup Iteration  27: 4720091.364 ops/s
# Warmup Iteration  28: 4834377.096 ops/s
# Warmup Iteration  29: 4452817.332 ops/s
# Warmup Iteration  30: 4828179.227 ops/s
Iteration   1: 4732962.646 ops/s
Iteration   2: 4665920.762 ops/s
Iteration   3: 4719123.729 ops/s
Iteration   4: 4605816.953 ops/s
Iteration   5: 4872644.056 ops/s
Iteration   6: 4737367.157 ops/s
Iteration   7: 4631614.283 ops/s
Iteration   8: 4861748.701 ops/s
Iteration   9: 4816270.985 ops/s
Iteration  10: 4678047.430 ops/s
Iteration  11: 4751704.241 ops/s
Iteration  12: 4596517.198 ops/s
Iteration  13: 4805207.548 ops/s
Iteration  14: 4578668.786 ops/s
Iteration  15: 4724251.719 ops/s
Iteration  16: 4628922.019 ops/s
Iteration  17: 4772137.656 ops/s
Iteration  18: 4682063.059 ops/s
Iteration  19: 4839658.036 ops/s
Iteration  20: 4802676.897 ops/s
Iteration  21: 4582121.455 ops/s
Iteration  22: 4894296.105 ops/s
Iteration  23: 4617834.341 ops/s
Iteration  24: 4845130.234 ops/s
Iteration  25: 4800949.735 ops/s
Iteration  26: 4682605.937 ops/s
Iteration  27: 4834082.447 ops/s
Iteration  28: 4636565.716 ops/s
Iteration  29: 4887015.703 ops/s
Iteration  30: 4745458.625 ops/s


Result "io.reactivex.rxjava3.disposables.CompositeDisposableTest._Benchmark.benchmark_tryRemoveIfNotIn":
  4734312.805 ±(99.9%) 65835.062 ops/s [Average]
  (min, avg, max) = (4578668.786, 4734312.805, 4894296.105), stdev = 98538.829
  CI (99.9%): [4668477.744, 4800147.867] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
CompositeDisposableTest._Benchmark.benchmark_tryRemoveIfNotIn  thrpt   30  4734312.805 ± 65835.062  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingleTest._Benchmark.benchmark_successError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingleTest._Benchmark.benchmark_successError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 51211.461 ops/s
# Warmup Iteration   2: 122357.472 ops/s
# Warmup Iteration   3: 314614.980 ops/s
# Warmup Iteration   4: 409878.493 ops/s
# Warmup Iteration   5: 417208.937 ops/s
# Warmup Iteration   6: 381277.434 ops/s
# Warmup Iteration   7: 443267.028 ops/s
# Warmup Iteration   8: 493456.152 ops/s
# Warmup Iteration   9: 450935.094 ops/s
# Warmup Iteration  10: 465225.700 ops/s
# Warmup Iteration  11: 443934.142 ops/s
# Warmup Iteration  12: 451347.887 ops/s
# Warmup Iteration  13: 461752.574 ops/s
# Warmup Iteration  14: 450415.835 ops/s
# Warmup Iteration  15: 450715.562 ops/s
# Warmup Iteration  16: 461896.105 ops/s
# Warmup Iteration  17: 357835.360 ops/s
# Warmup Iteration  18: 467423.206 ops/s
# Warmup Iteration  19: 477338.740 ops/s
# Warmup Iteration  20: 464228.639 ops/s
# Warmup Iteration  21: 483866.611 ops/s
# Warmup Iteration  22: 449330.714 ops/s
# Warmup Iteration  23: 484764.311 ops/s
# Warmup Iteration  24: 463952.623 ops/s
# Warmup Iteration  25: 468229.544 ops/s
# Warmup Iteration  26: 457981.800 ops/s
# Warmup Iteration  27: 470296.189 ops/s
# Warmup Iteration  28: 486028.452 ops/s
# Warmup Iteration  29: 467760.764 ops/s
# Warmup Iteration  30: 470203.482 ops/s
Iteration   1: 485501.790 ops/s
Iteration   2: 448657.697 ops/s
Iteration   3: 464601.648 ops/s
Iteration   4: 460865.725 ops/s
Iteration   5: 477670.461 ops/s
Iteration   6: 471457.215 ops/s
Iteration   7: 460926.662 ops/s
Iteration   8: 469661.652 ops/s
Iteration   9: 485853.208 ops/s
Iteration  10: 468277.399 ops/s
Iteration  11: 474284.784 ops/s
Iteration  12: 467098.031 ops/s
Iteration  13: 477305.385 ops/s
Iteration  14: 466291.645 ops/s
Iteration  15: 448846.597 ops/s
Iteration  16: 489619.957 ops/s
Iteration  17: 458608.570 ops/s
Iteration  18: 496256.160 ops/s
Iteration  19: 461370.572 ops/s
Iteration  20: 474936.723 ops/s
Iteration  21: 459112.396 ops/s
Iteration  22: 479144.508 ops/s
Iteration  23: 461671.162 ops/s
Iteration  24: 467235.756 ops/s
Iteration  25: 476871.759 ops/s
Iteration  26: 470514.549 ops/s
Iteration  27: 484476.570 ops/s
Iteration  28: 459506.989 ops/s
Iteration  29: 481721.134 ops/s
Iteration  30: 474107.081 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingleTest._Benchmark.benchmark_successError":
  470748.460 ±(99.9%) 7682.193 ops/s [Average]
  (min, avg, max) = (448657.697, 470748.460, 496256.160), stdev = 11498.346
  CI (99.9%): [463066.266, 478430.653] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
ObservableFlatMapSingleTest._Benchmark.benchmark_successError  thrpt   30  470748.460 ± 7682.193  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableTest._Benchmark.benchmark_normalDelayErrorObservable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableTest._Benchmark.benchmark_normalDelayErrorObservable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 149211.204 ops/s
# Warmup Iteration   2: 611164.018 ops/s
# Warmup Iteration   3: 681918.206 ops/s
# Warmup Iteration   4: 722435.856 ops/s
# Warmup Iteration   5: 786323.804 ops/s
# Warmup Iteration   6: 850829.984 ops/s
# Warmup Iteration   7: 842228.460 ops/s
# Warmup Iteration   8: 858021.754 ops/s
# Warmup Iteration   9: 846262.107 ops/s
# Warmup Iteration  10: 836908.583 ops/s
# Warmup Iteration  11: 841325.349 ops/s
# Warmup Iteration  12: 856472.831 ops/s
# Warmup Iteration  13: 876486.526 ops/s
# Warmup Iteration  14: 845073.727 ops/s
# Warmup Iteration  15: 844937.358 ops/s
# Warmup Iteration  16: 838417.851 ops/s
# Warmup Iteration  17: 852622.344 ops/s
# Warmup Iteration  18: 831197.822 ops/s
# Warmup Iteration  19: 833482.816 ops/s
# Warmup Iteration  20: 850834.699 ops/s
# Warmup Iteration  21: 828617.826 ops/s
# Warmup Iteration  22: 888316.197 ops/s
# Warmup Iteration  23: 883128.469 ops/s
# Warmup Iteration  24: 821824.760 ops/s
# Warmup Iteration  25: 833956.109 ops/s
# Warmup Iteration  26: 879626.297 ops/s
# Warmup Iteration  27: 831913.220 ops/s
# Warmup Iteration  28: 833437.008 ops/s
# Warmup Iteration  29: 855099.511 ops/s
# Warmup Iteration  30: 848006.117 ops/s
Iteration   1: 871494.517 ops/s
Iteration   2: 847369.002 ops/s
Iteration   3: 839055.379 ops/s
Iteration   4: 857715.815 ops/s
Iteration   5: 827663.230 ops/s
Iteration   6: 822336.243 ops/s
Iteration   7: 873504.150 ops/s
Iteration   8: 817358.260 ops/s
Iteration   9: 865226.271 ops/s
Iteration  10: 810701.194 ops/s
Iteration  11: 823796.854 ops/s
Iteration  12: 824455.674 ops/s
Iteration  13: 845515.768 ops/s
Iteration  14: 850294.254 ops/s
Iteration  15: 783509.714 ops/s
Iteration  16: 845722.184 ops/s
Iteration  17: 878241.022 ops/s
Iteration  18: 830301.083 ops/s
Iteration  19: 848626.125 ops/s
Iteration  20: 830988.775 ops/s
Iteration  21: 859850.486 ops/s
Iteration  22: 842534.000 ops/s
Iteration  23: 841139.820 ops/s
Iteration  24: 853893.742 ops/s
Iteration  25: 813694.462 ops/s
Iteration  26: 860312.745 ops/s
Iteration  27: 835494.824 ops/s
Iteration  28: 860553.171 ops/s
Iteration  29: 852060.357 ops/s
Iteration  30: 844747.446 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableTest._Benchmark.benchmark_normalDelayErrorObservable":
  841938.552 ±(99.9%) 13997.419 ops/s [Average]
  (min, avg, max) = (783509.714, 841938.552, 878241.022), stdev = 20950.680
  CI (99.9%): [827941.133, 855935.971] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt       Score       Error  Units
ObservableFlatMapCompletableTest._Benchmark.benchmark_normalDelayErrorObservable  thrpt   30  841938.552 ± 13997.419  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.schedulers.ScheduledRunnableTest._Benchmark.benchmark_disposeRun$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.schedulers.ScheduledRunnableTest._Benchmark.benchmark_disposeRun

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2957228.296 ops/s
# Warmup Iteration   2: 5931582.932 ops/s
# Warmup Iteration   3: 6538598.819 ops/s
# Warmup Iteration   4: 7269255.585 ops/s
# Warmup Iteration   5: 7933148.144 ops/s
# Warmup Iteration   6: 7671424.692 ops/s
# Warmup Iteration   7: 7591001.186 ops/s
# Warmup Iteration   8: 7755346.902 ops/s
# Warmup Iteration   9: 7413432.308 ops/s
# Warmup Iteration  10: 7662643.738 ops/s
# Warmup Iteration  11: 7623547.214 ops/s
# Warmup Iteration  12: 6242745.333 ops/s
# Warmup Iteration  13: 7892104.412 ops/s
# Warmup Iteration  14: 7329024.430 ops/s
# Warmup Iteration  15: 7981832.698 ops/s
# Warmup Iteration  16: 7453672.113 ops/s
# Warmup Iteration  17: 7630345.843 ops/s
# Warmup Iteration  18: 7470009.551 ops/s
# Warmup Iteration  19: 7553604.763 ops/s
# Warmup Iteration  20: 7722461.204 ops/s
# Warmup Iteration  21: 7599124.697 ops/s
# Warmup Iteration  22: 7362442.550 ops/s
# Warmup Iteration  23: 7796360.758 ops/s
# Warmup Iteration  24: 7285180.002 ops/s
# Warmup Iteration  25: 7522411.782 ops/s
# Warmup Iteration  26: 7575379.058 ops/s
# Warmup Iteration  27: 7891170.523 ops/s
# Warmup Iteration  28: 7837050.258 ops/s
# Warmup Iteration  29: 7529659.110 ops/s
# Warmup Iteration  30: 7734593.251 ops/s
Iteration   1: 7538486.814 ops/s
Iteration   2: 7528444.233 ops/s
Iteration   3: 7952539.225 ops/s
Iteration   4: 7505531.649 ops/s
Iteration   5: 7547282.216 ops/s
Iteration   6: 7833196.223 ops/s
Iteration   7: 7453578.180 ops/s
Iteration   8: 7635303.644 ops/s
Iteration   9: 7552852.331 ops/s
Iteration  10: 7772878.939 ops/s
Iteration  11: 7631671.842 ops/s
Iteration  12: 7314081.662 ops/s
Iteration  13: 7701805.797 ops/s
Iteration  14: 7280425.044 ops/s
Iteration  15: 7693473.382 ops/s
Iteration  16: 7547356.629 ops/s
Iteration  17: 7504400.136 ops/s
Iteration  18: 7646061.743 ops/s
Iteration  19: 7579057.527 ops/s
Iteration  20: 7546633.961 ops/s
Iteration  21: 7517455.740 ops/s
Iteration  22: 7497563.788 ops/s
Iteration  23: 7664694.034 ops/s
Iteration  24: 7270440.618 ops/s
Iteration  25: 7745256.361 ops/s
Iteration  26: 7436881.508 ops/s
Iteration  27: 7519108.796 ops/s
Iteration  28: 7893332.592 ops/s
Iteration  29: 7471430.539 ops/s
Iteration  30: 7696873.878 ops/s


Result "io.reactivex.rxjava3.internal.schedulers.ScheduledRunnableTest._Benchmark.benchmark_disposeRun":
  7582603.301 ±(99.9%) 108342.596 ops/s [Average]
  (min, avg, max) = (7270440.618, 7582603.301, 7952539.225), stdev = 162162.109
  CI (99.9%): [7474260.705, 7690945.897] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score        Error  Units
ScheduledRunnableTest._Benchmark.benchmark_disposeRun  thrpt   30  7582603.301 ± 108342.596  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleAmbTest._Benchmark.benchmark_manySources$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleAmbTest._Benchmark.benchmark_manySources

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 202899.240 ops/s
# Warmup Iteration   2: 417414.123 ops/s
# Warmup Iteration   3: 462266.289 ops/s
# Warmup Iteration   4: 722640.478 ops/s
# Warmup Iteration   5: 1089143.946 ops/s
# Warmup Iteration   6: 1030209.454 ops/s
# Warmup Iteration   7: 1078762.752 ops/s
# Warmup Iteration   8: 1043336.492 ops/s
# Warmup Iteration   9: 1097331.785 ops/s
# Warmup Iteration  10: 1047966.509 ops/s
# Warmup Iteration  11: 1060733.328 ops/s
# Warmup Iteration  12: 1086396.605 ops/s
# Warmup Iteration  13: 1050503.598 ops/s
# Warmup Iteration  14: 1063262.974 ops/s
# Warmup Iteration  15: 1057142.605 ops/s
# Warmup Iteration  16: 1070300.391 ops/s
# Warmup Iteration  17: 1050659.875 ops/s
# Warmup Iteration  18: 1102376.157 ops/s
# Warmup Iteration  19: 1044020.301 ops/s
# Warmup Iteration  20: 1074593.821 ops/s
# Warmup Iteration  21: 1093548.013 ops/s
# Warmup Iteration  22: 1052609.145 ops/s
# Warmup Iteration  23: 1051518.245 ops/s
# Warmup Iteration  24: 1108624.457 ops/s
# Warmup Iteration  25: 1046318.221 ops/s
# Warmup Iteration  26: 1061639.341 ops/s
# Warmup Iteration  27: 1082791.699 ops/s
# Warmup Iteration  28: 1018770.480 ops/s
# Warmup Iteration  29: 1095826.803 ops/s
# Warmup Iteration  30: 1056540.627 ops/s
Iteration   1: 1050683.263 ops/s
Iteration   2: 1069122.215 ops/s
Iteration   3: 1022330.567 ops/s
Iteration   4: 1027645.513 ops/s
Iteration   5: 1070341.399 ops/s
Iteration   6: 1056899.028 ops/s
Iteration   7: 1112049.173 ops/s
Iteration   8: 1086387.062 ops/s
Iteration   9: 1047408.414 ops/s
Iteration  10: 1112632.411 ops/s
Iteration  11: 1014565.989 ops/s
Iteration  12: 1089478.219 ops/s
Iteration  13: 1043728.666 ops/s
Iteration  14: 1059378.111 ops/s
Iteration  15: 1028209.273 ops/s
Iteration  16: 1049695.386 ops/s
Iteration  17: 1073483.356 ops/s
Iteration  18: 1047320.155 ops/s
Iteration  19: 1060600.909 ops/s
Iteration  20: 1048045.935 ops/s
Iteration  21: 1067869.629 ops/s
Iteration  22: 1072616.117 ops/s
Iteration  23: 1069231.673 ops/s
Iteration  24: 1083706.196 ops/s
Iteration  25: 1023395.735 ops/s
Iteration  26: 1037230.161 ops/s
Iteration  27: 1093370.123 ops/s
Iteration  28: 1065003.401 ops/s
Iteration  29: 1073122.121 ops/s
Iteration  30: 1100803.787 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleAmbTest._Benchmark.benchmark_manySources":
  1061878.466 ±(99.9%) 17317.707 ops/s [Average]
  (min, avg, max) = (1014565.989, 1061878.466, 1112632.411), stdev = 25920.331
  CI (99.9%): [1044560.759, 1079196.174] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt        Score       Error  Units
SingleAmbTest._Benchmark.benchmark_manySources  thrpt   30  1061878.466 ± 17317.707  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleEqualsTest._Benchmark.benchmark_bothSucceedNotEqual$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleEqualsTest._Benchmark.benchmark_bothSucceedNotEqual

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 600091.361 ops/s
# Warmup Iteration   2: 3326596.032 ops/s
# Warmup Iteration   3: 3627541.935 ops/s
# Warmup Iteration   4: 4769701.539 ops/s
# Warmup Iteration   5: 4981325.221 ops/s
# Warmup Iteration   6: 5004617.426 ops/s
# Warmup Iteration   7: 4071793.617 ops/s
# Warmup Iteration   8: 4831876.534 ops/s
# Warmup Iteration   9: 5122841.419 ops/s
# Warmup Iteration  10: 4775169.535 ops/s
# Warmup Iteration  11: 5099903.144 ops/s
# Warmup Iteration  12: 4916565.326 ops/s
# Warmup Iteration  13: 4962767.598 ops/s
# Warmup Iteration  14: 5107840.885 ops/s
# Warmup Iteration  15: 4885590.498 ops/s
# Warmup Iteration  16: 5047465.922 ops/s
# Warmup Iteration  17: 5113136.524 ops/s
# Warmup Iteration  18: 4896899.053 ops/s
# Warmup Iteration  19: 5166207.151 ops/s
# Warmup Iteration  20: 5018129.417 ops/s
# Warmup Iteration  21: 5040433.323 ops/s
# Warmup Iteration  22: 5031594.935 ops/s
# Warmup Iteration  23: 5056365.356 ops/s
# Warmup Iteration  24: 4911194.815 ops/s
# Warmup Iteration  25: 5166625.225 ops/s
# Warmup Iteration  26: 4794681.622 ops/s
# Warmup Iteration  27: 4951823.091 ops/s
# Warmup Iteration  28: 4899148.173 ops/s
# Warmup Iteration  29: 5129169.244 ops/s
# Warmup Iteration  30: 4909549.531 ops/s
Iteration   1: 5155237.933 ops/s
Iteration   2: 5036436.574 ops/s
Iteration   3: 4890031.756 ops/s
Iteration   4: 5163114.032 ops/s
Iteration   5: 4924902.810 ops/s
Iteration   6: 5015718.612 ops/s
Iteration   7: 4955534.951 ops/s
Iteration   8: 5135125.868 ops/s
Iteration   9: 5007393.233 ops/s
Iteration  10: 5016412.401 ops/s
Iteration  11: 5043534.289 ops/s
Iteration  12: 4890216.863 ops/s
Iteration  13: 5101246.840 ops/s
Iteration  14: 5027809.437 ops/s
Iteration  15: 4940901.608 ops/s
Iteration  16: 5192687.838 ops/s
Iteration  17: 5022806.362 ops/s
Iteration  18: 4929424.582 ops/s
Iteration  19: 5219393.405 ops/s
Iteration  20: 4950251.841 ops/s
Iteration  21: 5068079.935 ops/s
Iteration  22: 4929441.745 ops/s
Iteration  23: 5122522.926 ops/s
Iteration  24: 4914902.096 ops/s
Iteration  25: 4956598.079 ops/s
Iteration  26: 5069835.705 ops/s
Iteration  27: 4926093.205 ops/s
Iteration  28: 5168253.859 ops/s
Iteration  29: 4996272.926 ops/s
Iteration  30: 4937689.465 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleEqualsTest._Benchmark.benchmark_bothSucceedNotEqual":
  5023595.706 ±(99.9%) 64688.906 ops/s [Average]
  (min, avg, max) = (4890031.756, 5023595.706, 5219393.405), stdev = 96823.317
  CI (99.9%): [4958906.800, 5088284.612] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
SingleEqualsTest._Benchmark.benchmark_bothSucceedNotEqual  thrpt   30  5023595.706 ± 64688.906  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleEqualsTest._Benchmark.benchmark_bothSucceedEqual$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleEqualsTest._Benchmark.benchmark_bothSucceedEqual

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1210285.680 ops/s
# Warmup Iteration   2: 3012122.240 ops/s
# Warmup Iteration   3: 4269734.740 ops/s
# Warmup Iteration   4: 4719567.383 ops/s
# Warmup Iteration   5: 5106217.380 ops/s
# Warmup Iteration   6: 4804222.768 ops/s
# Warmup Iteration   7: 5074500.565 ops/s
# Warmup Iteration   8: 4815772.499 ops/s
# Warmup Iteration   9: 4940439.888 ops/s
# Warmup Iteration  10: 5035227.805 ops/s
# Warmup Iteration  11: 4984492.868 ops/s
# Warmup Iteration  12: 4906260.849 ops/s
# Warmup Iteration  13: 5210942.170 ops/s
# Warmup Iteration  14: 4826816.977 ops/s
# Warmup Iteration  15: 5167043.250 ops/s
# Warmup Iteration  16: 4991757.637 ops/s
# Warmup Iteration  17: 4994771.839 ops/s
# Warmup Iteration  18: 5007005.670 ops/s
# Warmup Iteration  19: 4962637.393 ops/s
# Warmup Iteration  20: 5062889.353 ops/s
# Warmup Iteration  21: 4743193.893 ops/s
# Warmup Iteration  22: 5041353.931 ops/s
# Warmup Iteration  23: 5033320.537 ops/s
# Warmup Iteration  24: 4881960.895 ops/s
# Warmup Iteration  25: 5125793.063 ops/s
# Warmup Iteration  26: 4879761.564 ops/s
# Warmup Iteration  27: 4942256.449 ops/s
# Warmup Iteration  28: 4987222.667 ops/s
# Warmup Iteration  29: 5294978.222 ops/s
# Warmup Iteration  30: 4970960.724 ops/s
Iteration   1: 4935334.079 ops/s
Iteration   2: 5057002.327 ops/s
Iteration   3: 5204543.380 ops/s
Iteration   4: 5044802.478 ops/s
Iteration   5: 4924472.651 ops/s
Iteration   6: 5139533.666 ops/s
Iteration   7: 5032592.424 ops/s
Iteration   8: 5192961.256 ops/s
Iteration   9: 4971145.578 ops/s
Iteration  10: 5077106.754 ops/s
Iteration  11: 4971212.196 ops/s
Iteration  12: 4969113.937 ops/s
Iteration  13: 5057554.507 ops/s
Iteration  14: 4862342.383 ops/s
Iteration  15: 4989610.707 ops/s
Iteration  16: 5212594.414 ops/s
Iteration  17: 4912301.361 ops/s
Iteration  18: 5096518.413 ops/s
Iteration  19: 5020685.096 ops/s
Iteration  20: 5168219.222 ops/s
Iteration  21: 5245666.129 ops/s
Iteration  22: 4855447.263 ops/s
Iteration  23: 5064151.549 ops/s
Iteration  24: 4959743.217 ops/s
Iteration  25: 5104140.093 ops/s
Iteration  26: 4937779.130 ops/s
Iteration  27: 5085311.412 ops/s
Iteration  28: 5026018.112 ops/s
Iteration  29: 4844249.217 ops/s
Iteration  30: 5057452.204 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleEqualsTest._Benchmark.benchmark_bothSucceedEqual":
  5033986.839 ±(99.9%) 72253.294 ops/s [Average]
  (min, avg, max) = (4844249.217, 5033986.839, 5245666.129), stdev = 108145.337
  CI (99.9%): [4961733.544, 5106240.133] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
SingleEqualsTest._Benchmark.benchmark_bothSucceedEqual  thrpt   30  5033986.839 ± 72253.294  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleAmbTest._Benchmark.benchmark_ambWithOrder$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleAmbTest._Benchmark.benchmark_ambWithOrder

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 252461.188 ops/s
# Warmup Iteration   2: 434820.999 ops/s
# Warmup Iteration   3: 580779.623 ops/s
# Warmup Iteration   4: 645113.367 ops/s
# Warmup Iteration   5: 574635.977 ops/s
# Warmup Iteration   6: 649041.490 ops/s
# Warmup Iteration   7: 684704.521 ops/s
# Warmup Iteration   8: 640985.482 ops/s
# Warmup Iteration   9: 661607.816 ops/s
# Warmup Iteration  10: 677203.559 ops/s
# Warmup Iteration  11: 649215.499 ops/s
# Warmup Iteration  12: 667670.470 ops/s
# Warmup Iteration  13: 687360.051 ops/s
# Warmup Iteration  14: 644749.086 ops/s
# Warmup Iteration  15: 685996.537 ops/s
# Warmup Iteration  16: 642114.515 ops/s
# Warmup Iteration  17: 695346.075 ops/s
# Warmup Iteration  18: 701386.390 ops/s
# Warmup Iteration  19: 717850.017 ops/s
# Warmup Iteration  20: 685777.997 ops/s
# Warmup Iteration  21: 718008.636 ops/s
# Warmup Iteration  22: 693488.894 ops/s
# Warmup Iteration  23: 684857.251 ops/s
# Warmup Iteration  24: 723933.669 ops/s
# Warmup Iteration  25: 721104.073 ops/s
# Warmup Iteration  26: 690797.644 ops/s
# Warmup Iteration  27: 710101.930 ops/s
# Warmup Iteration  28: 705134.610 ops/s
# Warmup Iteration  29: 708454.941 ops/s
# Warmup Iteration  30: 685146.349 ops/s
Iteration   1: 711961.620 ops/s
Iteration   2: 715292.468 ops/s
Iteration   3: 669694.023 ops/s
Iteration   4: 711280.949 ops/s
Iteration   5: 704600.483 ops/s
Iteration   6: 674085.368 ops/s
Iteration   7: 721804.464 ops/s
Iteration   8: 681609.514 ops/s
Iteration   9: 724942.750 ops/s
Iteration  10: 726231.891 ops/s
Iteration  11: 668235.494 ops/s
Iteration  12: 721362.277 ops/s
Iteration  13: 663366.243 ops/s
Iteration  14: 703926.855 ops/s
Iteration  15: 692361.068 ops/s
Iteration  16: 711140.455 ops/s
Iteration  17: 706172.355 ops/s
Iteration  18: 691632.273 ops/s
Iteration  19: 692975.668 ops/s
Iteration  20: 723851.058 ops/s
Iteration  21: 689075.996 ops/s
Iteration  22: 718197.373 ops/s
Iteration  23: 686490.880 ops/s
Iteration  24: 706440.946 ops/s
Iteration  25: 705305.631 ops/s
Iteration  26: 695159.967 ops/s
Iteration  27: 713246.144 ops/s
Iteration  28: 701159.893 ops/s
Iteration  29: 690486.823 ops/s
Iteration  30: 714854.035 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleAmbTest._Benchmark.benchmark_ambWithOrder":
  701231.499 ±(99.9%) 11860.648 ops/s [Average]
  (min, avg, max) = (663366.243, 701231.499, 726231.891), stdev = 17752.461
  CI (99.9%): [689370.851, 713092.147] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt       Score       Error  Units
SingleAmbTest._Benchmark.benchmark_ambWithOrder  thrpt   30  701231.499 ± 11860.648  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleAmbTest._Benchmark.benchmark_ambIterableOrder$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleAmbTest._Benchmark.benchmark_ambIterableOrder

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 113762.337 ops/s
# Warmup Iteration   2: 484568.950 ops/s
# Warmup Iteration   3: 629912.149 ops/s
# Warmup Iteration   4: 618332.210 ops/s
# Warmup Iteration   5: 662449.707 ops/s
# Warmup Iteration   6: 619244.771 ops/s
# Warmup Iteration   7: 620290.644 ops/s
# Warmup Iteration   8: 664031.895 ops/s
# Warmup Iteration   9: 624163.506 ops/s
# Warmup Iteration  10: 637487.899 ops/s
# Warmup Iteration  11: 660117.734 ops/s
# Warmup Iteration  12: 626672.094 ops/s
# Warmup Iteration  13: 623475.163 ops/s
# Warmup Iteration  14: 645647.938 ops/s
# Warmup Iteration  15: 623164.652 ops/s
# Warmup Iteration  16: 662923.949 ops/s
# Warmup Iteration  17: 692082.834 ops/s
# Warmup Iteration  18: 676272.305 ops/s
# Warmup Iteration  19: 678352.826 ops/s
# Warmup Iteration  20: 642822.177 ops/s
# Warmup Iteration  21: 707733.579 ops/s
# Warmup Iteration  22: 653547.960 ops/s
# Warmup Iteration  23: 696535.977 ops/s
# Warmup Iteration  24: 688996.853 ops/s
# Warmup Iteration  25: 653877.965 ops/s
# Warmup Iteration  26: 664136.853 ops/s
# Warmup Iteration  27: 643909.409 ops/s
# Warmup Iteration  28: 657658.165 ops/s
# Warmup Iteration  29: 653438.746 ops/s
# Warmup Iteration  30: 577897.750 ops/s
Iteration   1: 644217.409 ops/s
Iteration   2: 661460.522 ops/s
Iteration   3: 668602.445 ops/s
Iteration   4: 664180.024 ops/s
Iteration   5: 687959.126 ops/s
Iteration   6: 671226.097 ops/s
Iteration   7: 670551.344 ops/s
Iteration   8: 696870.559 ops/s
Iteration   9: 673597.545 ops/s
Iteration  10: 690168.056 ops/s
Iteration  11: 685202.813 ops/s
Iteration  12: 667698.410 ops/s
Iteration  13: 715445.435 ops/s
Iteration  14: 657075.054 ops/s
Iteration  15: 668791.091 ops/s
Iteration  16: 704433.765 ops/s
Iteration  17: 669008.192 ops/s
Iteration  18: 698048.544 ops/s
Iteration  19: 654610.769 ops/s
Iteration  20: 680358.267 ops/s
Iteration  21: 697534.997 ops/s
Iteration  22: 675753.441 ops/s
Iteration  23: 698132.541 ops/s
Iteration  24: 673190.237 ops/s
Iteration  25: 643102.908 ops/s
Iteration  26: 703594.508 ops/s
Iteration  27: 643142.400 ops/s
Iteration  28: 680045.205 ops/s
Iteration  29: 676849.286 ops/s
Iteration  30: 659835.365 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleAmbTest._Benchmark.benchmark_ambIterableOrder":
  676022.878 ±(99.9%) 12625.719 ops/s [Average]
  (min, avg, max) = (643102.908, 676022.878, 715445.435), stdev = 18897.584
  CI (99.9%): [663397.159, 688648.598] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score       Error  Units
SingleAmbTest._Benchmark.benchmark_ambIterableOrder  thrpt   30  676022.878 ± 12625.719  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleMiscTest._Benchmark.benchmark_equals$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleMiscTest._Benchmark.benchmark_equals

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 370479.904 ops/s
# Warmup Iteration   2: 727367.075 ops/s
# Warmup Iteration   3: 1716781.708 ops/s
# Warmup Iteration   4: 2075918.184 ops/s
# Warmup Iteration   5: 2282888.633 ops/s
# Warmup Iteration   6: 2053232.740 ops/s
# Warmup Iteration   7: 2214776.937 ops/s
# Warmup Iteration   8: 2228816.253 ops/s
# Warmup Iteration   9: 2157034.121 ops/s
# Warmup Iteration  10: 2234679.012 ops/s
# Warmup Iteration  11: 2103134.292 ops/s
# Warmup Iteration  12: 2246711.228 ops/s
# Warmup Iteration  13: 2165494.040 ops/s
# Warmup Iteration  14: 2170879.046 ops/s
# Warmup Iteration  15: 2162735.724 ops/s
# Warmup Iteration  16: 2184840.499 ops/s
# Warmup Iteration  17: 2313139.663 ops/s
# Warmup Iteration  18: 2193173.417 ops/s
# Warmup Iteration  19: 2231523.320 ops/s
# Warmup Iteration  20: 2130259.386 ops/s
# Warmup Iteration  21: 2240143.064 ops/s
# Warmup Iteration  22: 2205525.292 ops/s
# Warmup Iteration  23: 2141005.304 ops/s
# Warmup Iteration  24: 2204051.063 ops/s
# Warmup Iteration  25: 2307237.653 ops/s
# Warmup Iteration  26: 2117933.090 ops/s
# Warmup Iteration  27: 2242311.824 ops/s
# Warmup Iteration  28: 2126163.242 ops/s
# Warmup Iteration  29: 2202646.615 ops/s
# Warmup Iteration  30: 1784227.910 ops/s
Iteration   1: 2186733.386 ops/s
Iteration   2: 2204873.684 ops/s
Iteration   3: 2102820.761 ops/s
Iteration   4: 2238330.288 ops/s
Iteration   5: 2126817.137 ops/s
Iteration   6: 2261153.877 ops/s
Iteration   7: 2273241.856 ops/s
Iteration   8: 2143699.608 ops/s
Iteration   9: 2311496.882 ops/s
Iteration  10: 2088903.180 ops/s
Iteration  11: 2246768.072 ops/s
Iteration  12: 2169059.508 ops/s
Iteration  13: 2215036.695 ops/s
Iteration  14: 2174549.817 ops/s
Iteration  15: 2108340.178 ops/s
Iteration  16: 2235983.117 ops/s
Iteration  17: 2177877.182 ops/s
Iteration  18: 2254837.376 ops/s
Iteration  19: 2111967.766 ops/s
Iteration  20: 2151583.193 ops/s
Iteration  21: 2315647.425 ops/s
Iteration  22: 2093614.118 ops/s
Iteration  23: 2226508.254 ops/s
Iteration  24: 2171028.867 ops/s
Iteration  25: 2140104.014 ops/s
Iteration  26: 2250873.817 ops/s
Iteration  27: 2139271.521 ops/s
Iteration  28: 2172229.665 ops/s
Iteration  29: 2149813.720 ops/s
Iteration  30: 2201122.857 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleMiscTest._Benchmark.benchmark_equals":
  2188142.927 ±(99.9%) 42253.876 ops/s [Average]
  (min, avg, max) = (2088903.180, 2188142.927, 2315647.425), stdev = 63243.617
  CI (99.9%): [2145889.052, 2230396.803] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                    Mode  Cnt        Score       Error  Units
SingleMiscTest._Benchmark.benchmark_equals  thrpt   30  2188142.927 ± 42253.876  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleAmbTest._Benchmark.benchmark_error$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleAmbTest._Benchmark.benchmark_error

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 126643.187 ops/s
# Warmup Iteration   2: 454974.673 ops/s
# Warmup Iteration   3: 622085.358 ops/s
# Warmup Iteration   4: 622961.605 ops/s
# Warmup Iteration   5: 636095.884 ops/s
# Warmup Iteration   6: 589257.020 ops/s
# Warmup Iteration   7: 638715.041 ops/s
# Warmup Iteration   8: 679938.042 ops/s
# Warmup Iteration   9: 663851.643 ops/s
# Warmup Iteration  10: 610585.645 ops/s
# Warmup Iteration  11: 614776.998 ops/s
# Warmup Iteration  12: 616660.614 ops/s
# Warmup Iteration  13: 671523.536 ops/s
# Warmup Iteration  14: 655751.454 ops/s
# Warmup Iteration  15: 651730.736 ops/s
# Warmup Iteration  16: 636170.387 ops/s
# Warmup Iteration  17: 687707.676 ops/s
# Warmup Iteration  18: 718114.082 ops/s
# Warmup Iteration  19: 670754.604 ops/s
# Warmup Iteration  20: 697238.058 ops/s
# Warmup Iteration  21: 727658.085 ops/s
# Warmup Iteration  22: 672307.073 ops/s
# Warmup Iteration  23: 694024.792 ops/s
# Warmup Iteration  24: 700174.305 ops/s
# Warmup Iteration  25: 683620.247 ops/s
# Warmup Iteration  26: 681633.963 ops/s
# Warmup Iteration  27: 698421.474 ops/s
# Warmup Iteration  28: 660385.958 ops/s
# Warmup Iteration  29: 698851.807 ops/s
# Warmup Iteration  30: 658285.354 ops/s
Iteration   1: 707998.208 ops/s
Iteration   2: 601107.208 ops/s
Iteration   3: 698971.217 ops/s
Iteration   4: 670769.528 ops/s
Iteration   5: 709808.064 ops/s
Iteration   6: 681443.580 ops/s
Iteration   7: 715177.544 ops/s
Iteration   8: 679646.719 ops/s
Iteration   9: 716083.603 ops/s
Iteration  10: 732544.720 ops/s
Iteration  11: 680441.640 ops/s
Iteration  12: 660766.680 ops/s
Iteration  13: 726392.612 ops/s
Iteration  14: 683128.098 ops/s
Iteration  15: 672363.511 ops/s
Iteration  16: 701313.630 ops/s
Iteration  17: 674217.483 ops/s
Iteration  18: 693137.625 ops/s
Iteration  19: 694522.202 ops/s
Iteration  20: 714117.367 ops/s
Iteration  21: 697188.318 ops/s
Iteration  22: 663417.903 ops/s
Iteration  23: 702961.585 ops/s
Iteration  24: 693804.671 ops/s
Iteration  25: 718021.689 ops/s
Iteration  26: 709834.496 ops/s
Iteration  27: 673531.834 ops/s
Iteration  28: 723714.902 ops/s
Iteration  29: 725761.664 ops/s
Iteration  30: 674035.379 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleAmbTest._Benchmark.benchmark_error":
  693207.456 ±(99.9%) 17868.575 ops/s [Average]
  (min, avg, max) = (601107.208, 693207.456, 732544.720), stdev = 26744.843
  CI (99.9%): [675338.881, 711076.031] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                  Mode  Cnt       Score       Error  Units
SingleAmbTest._Benchmark.benchmark_error  thrpt   30  693207.456 ± 17868.575  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableSequenceEqualTest._Benchmark.benchmark_firstFails$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableSequenceEqualTest._Benchmark.benchmark_firstFails

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 132533.948 ops/s
# Warmup Iteration   2: 519531.532 ops/s
# Warmup Iteration   3: 631457.208 ops/s
# Warmup Iteration   4: 612741.144 ops/s
# Warmup Iteration   5: 619309.946 ops/s
# Warmup Iteration   6: 630730.384 ops/s
# Warmup Iteration   7: 623256.905 ops/s
# Warmup Iteration   8: 614129.290 ops/s
# Warmup Iteration   9: 593991.784 ops/s
# Warmup Iteration  10: 626173.953 ops/s
# Warmup Iteration  11: 644928.693 ops/s
# Warmup Iteration  12: 619271.896 ops/s
# Warmup Iteration  13: 613275.123 ops/s
# Warmup Iteration  14: 627999.145 ops/s
# Warmup Iteration  15: 644330.435 ops/s
# Warmup Iteration  16: 615201.347 ops/s
# Warmup Iteration  17: 679063.859 ops/s
# Warmup Iteration  18: 656481.637 ops/s
# Warmup Iteration  19: 663367.512 ops/s
# Warmup Iteration  20: 683119.342 ops/s
# Warmup Iteration  21: 662143.556 ops/s
# Warmup Iteration  22: 668204.519 ops/s
# Warmup Iteration  23: 660773.157 ops/s
# Warmup Iteration  24: 656589.410 ops/s
# Warmup Iteration  25: 678223.819 ops/s
# Warmup Iteration  26: 647654.022 ops/s
# Warmup Iteration  27: 677933.087 ops/s
# Warmup Iteration  28: 651628.057 ops/s
# Warmup Iteration  29: 681890.743 ops/s
# Warmup Iteration  30: 680691.066 ops/s
Iteration   1: 659224.734 ops/s
Iteration   2: 660716.081 ops/s
Iteration   3: 686263.749 ops/s
Iteration   4: 637629.215 ops/s
Iteration   5: 671234.376 ops/s
Iteration   6: 642234.068 ops/s
Iteration   7: 682119.437 ops/s
Iteration   8: 678009.481 ops/s
Iteration   9: 656727.422 ops/s
Iteration  10: 642631.904 ops/s
Iteration  11: 655902.065 ops/s
Iteration  12: 679031.233 ops/s
Iteration  13: 649552.245 ops/s
Iteration  14: 670766.143 ops/s
Iteration  15: 689112.672 ops/s
Iteration  16: 663130.344 ops/s
Iteration  17: 650338.214 ops/s
Iteration  18: 687294.897 ops/s
Iteration  19: 652797.630 ops/s
Iteration  20: 641085.041 ops/s
Iteration  21: 593658.530 ops/s
Iteration  22: 650509.302 ops/s
Iteration  23: 670583.054 ops/s
Iteration  24: 640511.278 ops/s
Iteration  25: 666228.165 ops/s
Iteration  26: 631219.302 ops/s
Iteration  27: 682912.849 ops/s
Iteration  28: 676182.378 ops/s
Iteration  29: 640209.024 ops/s
Iteration  30: 642693.189 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableSequenceEqualTest._Benchmark.benchmark_firstFails":
  658350.267 ±(99.9%) 13989.824 ops/s [Average]
  (min, avg, max) = (593658.530, 658350.267, 689112.672), stdev = 20939.311
  CI (99.9%): [644360.444, 672340.091] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score       Error  Units
CompletableSequenceEqualTest._Benchmark.benchmark_firstFails  thrpt   30  658350.267 ± 13989.824  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingleTest._Benchmark.benchmark_normalBackpressured$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingleTest._Benchmark.benchmark_normalBackpressured

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 43268.695 ops/s
# Warmup Iteration   2: 143994.314 ops/s
# Warmup Iteration   3: 328210.806 ops/s
# Warmup Iteration   4: 366009.812 ops/s
# Warmup Iteration   5: 396319.174 ops/s
# Warmup Iteration   6: 373520.783 ops/s
# Warmup Iteration   7: 380432.480 ops/s
# Warmup Iteration   8: 404649.847 ops/s
# Warmup Iteration   9: 378414.319 ops/s
# Warmup Iteration  10: 399360.184 ops/s
# Warmup Iteration  11: 393456.897 ops/s
# Warmup Iteration  12: 373060.018 ops/s
# Warmup Iteration  13: 383709.841 ops/s
# Warmup Iteration  14: 378991.933 ops/s
# Warmup Iteration  15: 373954.610 ops/s
# Warmup Iteration  16: 391912.031 ops/s
# Warmup Iteration  17: 377971.477 ops/s
# Warmup Iteration  18: 369599.739 ops/s
# Warmup Iteration  19: 396517.581 ops/s
# Warmup Iteration  20: 379283.782 ops/s
# Warmup Iteration  21: 398216.012 ops/s
# Warmup Iteration  22: 369671.593 ops/s
# Warmup Iteration  23: 397028.980 ops/s
# Warmup Iteration  24: 386790.502 ops/s
# Warmup Iteration  25: 366827.484 ops/s
# Warmup Iteration  26: 389387.940 ops/s
# Warmup Iteration  27: 395369.574 ops/s
# Warmup Iteration  28: 383894.207 ops/s
# Warmup Iteration  29: 392799.040 ops/s
# Warmup Iteration  30: 384565.893 ops/s
Iteration   1: 395676.678 ops/s
Iteration   2: 395379.749 ops/s
Iteration   3: 386089.879 ops/s
Iteration   4: 390457.130 ops/s
Iteration   5: 385255.010 ops/s
Iteration   6: 376819.783 ops/s
Iteration   7: 391844.280 ops/s
Iteration   8: 375515.149 ops/s
Iteration   9: 367884.540 ops/s
Iteration  10: 396219.754 ops/s
Iteration  11: 373700.506 ops/s
Iteration  12: 390824.570 ops/s
Iteration  13: 369091.276 ops/s
Iteration  14: 371034.400 ops/s
Iteration  15: 381803.247 ops/s
Iteration  16: 379093.637 ops/s
Iteration  17: 387427.430 ops/s
Iteration  18: 374074.988 ops/s
Iteration  19: 391240.454 ops/s
Iteration  20: 372411.652 ops/s
Iteration  21: 397056.285 ops/s
Iteration  22: 388539.842 ops/s
Iteration  23: 395243.051 ops/s
Iteration  24: 393830.639 ops/s
Iteration  25: 379970.754 ops/s
Iteration  26: 391186.350 ops/s
Iteration  27: 384400.463 ops/s
Iteration  28: 384870.454 ops/s
Iteration  29: 385000.772 ops/s
Iteration  30: 393493.897 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingleTest._Benchmark.benchmark_normalBackpressured":
  384847.887 ±(99.9%) 5987.334 ops/s [Average]
  (min, avg, max) = (367884.540, 384847.887, 397056.285), stdev = 8961.561
  CI (99.9%): [378860.553, 390835.222] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score      Error  Units
FlowableFlatMapSingleTest._Benchmark.benchmark_normalBackpressured  thrpt   30  384847.887 ± 5987.334  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingleTest._Benchmark.benchmark_normalMaxConcurrent2Backpressured$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingleTest._Benchmark.benchmark_normalMaxConcurrent2Backpressured

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 36335.426 ops/s
# Warmup Iteration   2: 128219.540 ops/s
# Warmup Iteration   3: 301202.630 ops/s
# Warmup Iteration   4: 341429.176 ops/s
# Warmup Iteration   5: 327524.196 ops/s
# Warmup Iteration   6: 362834.658 ops/s
# Warmup Iteration   7: 345480.592 ops/s
# Warmup Iteration   8: 358064.097 ops/s
# Warmup Iteration   9: 370623.236 ops/s
# Warmup Iteration  10: 347194.431 ops/s
# Warmup Iteration  11: 364088.409 ops/s
# Warmup Iteration  12: 368942.561 ops/s
# Warmup Iteration  13: 345879.696 ops/s
# Warmup Iteration  14: 338855.800 ops/s
# Warmup Iteration  15: 353029.763 ops/s
# Warmup Iteration  16: 353341.554 ops/s
# Warmup Iteration  17: 357095.716 ops/s
# Warmup Iteration  18: 326481.595 ops/s
# Warmup Iteration  19: 369367.430 ops/s
# Warmup Iteration  20: 355184.595 ops/s
# Warmup Iteration  21: 380113.336 ops/s
# Warmup Iteration  22: 359189.003 ops/s
# Warmup Iteration  23: 348467.893 ops/s
# Warmup Iteration  24: 368231.779 ops/s
# Warmup Iteration  25: 347181.195 ops/s
# Warmup Iteration  26: 373139.161 ops/s
# Warmup Iteration  27: 350750.864 ops/s
# Warmup Iteration  28: 365841.372 ops/s
# Warmup Iteration  29: 364196.492 ops/s
# Warmup Iteration  30: 357991.160 ops/s
Iteration   1: 361451.159 ops/s
Iteration   2: 359621.931 ops/s
Iteration   3: 358509.779 ops/s
Iteration   4: 365941.533 ops/s
Iteration   5: 348497.395 ops/s
Iteration   6: 365100.359 ops/s
Iteration   7: 354796.250 ops/s
Iteration   8: 373609.880 ops/s
Iteration   9: 353562.796 ops/s
Iteration  10: 347219.514 ops/s
Iteration  11: 361532.955 ops/s
Iteration  12: 347080.255 ops/s
Iteration  13: 353529.478 ops/s
Iteration  14: 360937.973 ops/s
Iteration  15: 322446.128 ops/s
Iteration  16: 314490.657 ops/s
Iteration  17: 347965.991 ops/s
Iteration  18: 381802.965 ops/s
Iteration  19: 345973.514 ops/s
Iteration  20: 368706.691 ops/s
Iteration  21: 343772.123 ops/s
Iteration  22: 360840.873 ops/s
Iteration  23: 369022.113 ops/s
Iteration  24: 346213.121 ops/s
Iteration  25: 364897.460 ops/s
Iteration  26: 374074.248 ops/s
Iteration  27: 341637.144 ops/s
Iteration  28: 375432.900 ops/s
Iteration  29: 360691.748 ops/s
Iteration  30: 356269.367 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingleTest._Benchmark.benchmark_normalMaxConcurrent2Backpressured":
  356187.610 ±(99.9%) 9699.871 ops/s [Average]
  (min, avg, max) = (314490.657, 356187.610, 381802.965), stdev = 14518.312
  CI (99.9%): [346487.739, 365887.481] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt       Score      Error  Units
FlowableFlatMapSingleTest._Benchmark.benchmark_normalMaxConcurrent2Backpressured  thrpt   30  356187.610 ± 9699.871  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingleTest._Benchmark.benchmark_undeliverableUponCancel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingleTest._Benchmark.benchmark_undeliverableUponCancel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 28781.132 ops/s
# Warmup Iteration   2: 158035.573 ops/s
# Warmup Iteration   3: 183878.397 ops/s
# Warmup Iteration   4: 197889.548 ops/s
# Warmup Iteration   5: 190529.985 ops/s
# Warmup Iteration   6: 201638.900 ops/s
# Warmup Iteration   7: 215113.069 ops/s
# Warmup Iteration   8: 209523.778 ops/s
# Warmup Iteration   9: 209548.679 ops/s
# Warmup Iteration  10: 215352.388 ops/s
# Warmup Iteration  11: 207407.041 ops/s
# Warmup Iteration  12: 207493.924 ops/s
# Warmup Iteration  13: 215910.129 ops/s
# Warmup Iteration  14: 203255.634 ops/s
# Warmup Iteration  15: 220805.321 ops/s
# Warmup Iteration  16: 209513.435 ops/s
# Warmup Iteration  17: 215134.690 ops/s
# Warmup Iteration  18: 224577.603 ops/s
# Warmup Iteration  19: 214289.261 ops/s
# Warmup Iteration  20: 214689.277 ops/s
# Warmup Iteration  21: 211993.720 ops/s
# Warmup Iteration  22: 217210.574 ops/s
# Warmup Iteration  23: 223010.451 ops/s
# Warmup Iteration  24: 217797.889 ops/s
# Warmup Iteration  25: 216529.787 ops/s
# Warmup Iteration  26: 216497.482 ops/s
# Warmup Iteration  27: 218223.486 ops/s
# Warmup Iteration  28: 216906.924 ops/s
# Warmup Iteration  29: 215321.337 ops/s
# Warmup Iteration  30: 218170.311 ops/s
Iteration   1: 218662.581 ops/s
Iteration   2: 215527.155 ops/s
Iteration   3: 215544.339 ops/s
Iteration   4: 215558.018 ops/s
Iteration   5: 214488.442 ops/s
Iteration   6: 214535.211 ops/s
Iteration   7: 222988.913 ops/s
Iteration   8: 210705.557 ops/s
Iteration   9: 221559.645 ops/s
Iteration  10: 213588.564 ops/s
Iteration  11: 214439.025 ops/s
Iteration  12: 216644.772 ops/s
Iteration  13: 219451.807 ops/s
Iteration  14: 215352.116 ops/s
Iteration  15: 212635.356 ops/s
Iteration  16: 223186.684 ops/s
Iteration  17: 219890.952 ops/s
Iteration  18: 210526.563 ops/s
Iteration  19: 217985.803 ops/s
Iteration  20: 219411.176 ops/s
Iteration  21: 205380.968 ops/s
Iteration  22: 221293.925 ops/s
Iteration  23: 202799.538 ops/s
Iteration  24: 215566.805 ops/s
Iteration  25: 214595.617 ops/s
Iteration  26: 221401.437 ops/s
Iteration  27: 218715.890 ops/s
Iteration  28: 209199.042 ops/s
Iteration  29: 224370.114 ops/s
Iteration  30: 220638.771 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingleTest._Benchmark.benchmark_undeliverableUponCancel":
  216221.493 ±(99.9%) 3408.285 ops/s [Average]
  (min, avg, max) = (202799.538, 216221.493, 224370.114), stdev = 5101.360
  CI (99.9%): [212813.208, 219629.778] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score      Error  Units
ObservableFlatMapSingleTest._Benchmark.benchmark_undeliverableUponCancel  thrpt   30  216221.493 ± 3408.285  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingleTest._Benchmark.benchmark_undeliverableUponCancelDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingleTest._Benchmark.benchmark_undeliverableUponCancelDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 52516.185 ops/s
# Warmup Iteration   2: 173412.129 ops/s
# Warmup Iteration   3: 204602.575 ops/s
# Warmup Iteration   4: 201929.595 ops/s
# Warmup Iteration   5: 208971.797 ops/s
# Warmup Iteration   6: 197477.218 ops/s
# Warmup Iteration   7: 205060.747 ops/s
# Warmup Iteration   8: 213691.936 ops/s
# Warmup Iteration   9: 218064.740 ops/s
# Warmup Iteration  10: 219693.857 ops/s
# Warmup Iteration  11: 211680.903 ops/s
# Warmup Iteration  12: 210175.170 ops/s
# Warmup Iteration  13: 209560.401 ops/s
# Warmup Iteration  14: 209779.777 ops/s
# Warmup Iteration  15: 215048.213 ops/s
# Warmup Iteration  16: 215722.147 ops/s
# Warmup Iteration  17: 219233.815 ops/s
# Warmup Iteration  18: 212867.888 ops/s
# Warmup Iteration  19: 225890.673 ops/s
# Warmup Iteration  20: 209865.249 ops/s
# Warmup Iteration  21: 220564.958 ops/s
# Warmup Iteration  22: 214263.546 ops/s
# Warmup Iteration  23: 219318.454 ops/s
# Warmup Iteration  24: 205249.155 ops/s
# Warmup Iteration  25: 225311.881 ops/s
# Warmup Iteration  26: 216475.849 ops/s
# Warmup Iteration  27: 223317.231 ops/s
# Warmup Iteration  28: 215786.327 ops/s
# Warmup Iteration  29: 211519.726 ops/s
# Warmup Iteration  30: 225070.587 ops/s
Iteration   1: 217432.116 ops/s
Iteration   2: 213335.429 ops/s
Iteration   3: 228644.281 ops/s
Iteration   4: 208726.986 ops/s
Iteration   5: 220344.760 ops/s
Iteration   6: 219198.498 ops/s
Iteration   7: 224137.705 ops/s
Iteration   8: 213349.527 ops/s
Iteration   9: 217493.120 ops/s
Iteration  10: 201453.486 ops/s
Iteration  11: 203697.709 ops/s
Iteration  12: 212388.942 ops/s
Iteration  13: 224952.825 ops/s
Iteration  14: 211864.407 ops/s
Iteration  15: 219837.456 ops/s
Iteration  16: 227502.252 ops/s
Iteration  17: 211730.333 ops/s
Iteration  18: 219347.054 ops/s
Iteration  19: 212383.960 ops/s
Iteration  20: 223048.818 ops/s
Iteration  21: 218475.200 ops/s
Iteration  22: 216932.930 ops/s
Iteration  23: 222986.213 ops/s
Iteration  24: 212895.482 ops/s
Iteration  25: 220369.068 ops/s
Iteration  26: 214726.745 ops/s
Iteration  27: 223097.161 ops/s
Iteration  28: 214294.415 ops/s
Iteration  29: 214854.980 ops/s
Iteration  30: 223397.335 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingleTest._Benchmark.benchmark_undeliverableUponCancelDelayError":
  217096.640 ±(99.9%) 4294.814 ops/s [Average]
  (min, avg, max) = (201453.486, 217096.640, 228644.281), stdev = 6428.275
  CI (99.9%): [212801.826, 221391.453] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            Mode  Cnt       Score      Error  Units
ObservableFlatMapSingleTest._Benchmark.benchmark_undeliverableUponCancelDelayError  thrpt   30  217096.640 ± 4294.814  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_undeliverableUponCancel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_undeliverableUponCancel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 23421.054 ops/s
# Warmup Iteration   2: 127683.221 ops/s
# Warmup Iteration   3: 171701.078 ops/s
# Warmup Iteration   4: 200947.136 ops/s
# Warmup Iteration   5: 180061.921 ops/s
# Warmup Iteration   6: 206388.609 ops/s
# Warmup Iteration   7: 206027.739 ops/s
# Warmup Iteration   8: 211270.915 ops/s
# Warmup Iteration   9: 211817.261 ops/s
# Warmup Iteration  10: 200434.660 ops/s
# Warmup Iteration  11: 209024.453 ops/s
# Warmup Iteration  12: 200751.333 ops/s
# Warmup Iteration  13: 207433.089 ops/s
# Warmup Iteration  14: 212340.174 ops/s
# Warmup Iteration  15: 203336.206 ops/s
# Warmup Iteration  16: 211310.894 ops/s
# Warmup Iteration  17: 200918.099 ops/s
# Warmup Iteration  18: 214847.661 ops/s
# Warmup Iteration  19: 202892.634 ops/s
# Warmup Iteration  20: 211311.566 ops/s
# Warmup Iteration  21: 208477.388 ops/s
# Warmup Iteration  22: 212237.372 ops/s
# Warmup Iteration  23: 201168.770 ops/s
# Warmup Iteration  24: 216792.067 ops/s
# Warmup Iteration  25: 212903.229 ops/s
# Warmup Iteration  26: 212211.137 ops/s
# Warmup Iteration  27: 212031.434 ops/s
# Warmup Iteration  28: 210832.485 ops/s
# Warmup Iteration  29: 214327.796 ops/s
# Warmup Iteration  30: 217474.931 ops/s
Iteration   1: 209372.762 ops/s
Iteration   2: 215840.178 ops/s
Iteration   3: 207519.220 ops/s
Iteration   4: 217784.285 ops/s
Iteration   5: 215953.477 ops/s
Iteration   6: 207441.487 ops/s
Iteration   7: 214350.729 ops/s
Iteration   8: 210623.645 ops/s
Iteration   9: 209675.132 ops/s
Iteration  10: 213411.054 ops/s
Iteration  11: 219303.572 ops/s
Iteration  12: 214213.828 ops/s
Iteration  13: 208223.081 ops/s
Iteration  14: 218576.116 ops/s
Iteration  15: 206860.408 ops/s
Iteration  16: 216733.229 ops/s
Iteration  17: 205503.216 ops/s
Iteration  18: 211616.131 ops/s
Iteration  19: 219568.028 ops/s
Iteration  20: 209395.493 ops/s
Iteration  21: 212594.378 ops/s
Iteration  22: 208063.828 ops/s
Iteration  23: 215133.678 ops/s
Iteration  24: 209831.540 ops/s
Iteration  25: 213068.315 ops/s
Iteration  26: 214610.753 ops/s
Iteration  27: 205229.541 ops/s
Iteration  28: 219855.834 ops/s
Iteration  29: 204336.895 ops/s
Iteration  30: 214894.691 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_undeliverableUponCancel":
  212319.484 ±(99.9%) 3057.445 ops/s [Average]
  (min, avg, max) = (204336.895, 212319.484, 219855.834), stdev = 4576.241
  CI (99.9%): [209262.039, 215376.930] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score      Error  Units
ObservableConcatMapEagerTest._Benchmark.benchmark_undeliverableUponCancel  thrpt   30  212319.484 ± 3057.445  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDelayTest._Benchmark.benchmark_withObservableError2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDelayTest._Benchmark.benchmark_withObservableError2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 42172.372 ops/s
# Warmup Iteration   2: 202012.046 ops/s
# Warmup Iteration   3: 196804.998 ops/s
# Warmup Iteration   4: 208292.415 ops/s
# Warmup Iteration   5: 239059.537 ops/s
# Warmup Iteration   6: 231446.054 ops/s
# Warmup Iteration   7: 244589.115 ops/s
# Warmup Iteration   8: 236307.532 ops/s
# Warmup Iteration   9: 245340.582 ops/s
# Warmup Iteration  10: 233391.317 ops/s
# Warmup Iteration  11: 233168.006 ops/s
# Warmup Iteration  12: 250301.554 ops/s
# Warmup Iteration  13: 231435.826 ops/s
# Warmup Iteration  14: 243534.950 ops/s
# Warmup Iteration  15: 237601.063 ops/s
# Warmup Iteration  16: 243219.651 ops/s
# Warmup Iteration  17: 248406.842 ops/s
# Warmup Iteration  18: 237818.078 ops/s
# Warmup Iteration  19: 256104.361 ops/s
# Warmup Iteration  20: 255969.652 ops/s
# Warmup Iteration  21: 234625.604 ops/s
# Warmup Iteration  22: 248329.575 ops/s
# Warmup Iteration  23: 245211.927 ops/s
# Warmup Iteration  24: 248440.559 ops/s
# Warmup Iteration  25: 241243.567 ops/s
# Warmup Iteration  26: 247316.686 ops/s
# Warmup Iteration  27: 246332.157 ops/s
# Warmup Iteration  28: 247419.443 ops/s
# Warmup Iteration  29: 243588.139 ops/s
# Warmup Iteration  30: 245646.775 ops/s
Iteration   1: 243959.715 ops/s
Iteration   2: 246829.779 ops/s
Iteration   3: 242856.625 ops/s
Iteration   4: 231925.076 ops/s
Iteration   5: 202614.861 ops/s
Iteration   6: 245283.388 ops/s
Iteration   7: 245559.549 ops/s
Iteration   8: 250071.415 ops/s
Iteration   9: 242460.137 ops/s
Iteration  10: 246637.536 ops/s
Iteration  11: 253742.161 ops/s
Iteration  12: 235810.729 ops/s
Iteration  13: 243814.664 ops/s
Iteration  14: 255257.329 ops/s
Iteration  15: 247208.997 ops/s
Iteration  16: 238365.912 ops/s
Iteration  17: 242622.292 ops/s
Iteration  18: 245110.763 ops/s
Iteration  19: 249334.282 ops/s
Iteration  20: 256984.126 ops/s
Iteration  21: 234173.760 ops/s
Iteration  22: 254735.822 ops/s
Iteration  23: 241921.217 ops/s
Iteration  24: 256122.950 ops/s
Iteration  25: 240527.065 ops/s
Iteration  26: 249979.883 ops/s
Iteration  27: 242994.629 ops/s
Iteration  28: 244203.089 ops/s
Iteration  29: 251048.885 ops/s
Iteration  30: 242918.194 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleDelayTest._Benchmark.benchmark_withObservableError2":
  244169.161 ±(99.9%) 6693.835 ops/s [Average]
  (min, avg, max) = (202614.861, 244169.161, 256984.126), stdev = 10019.017
  CI (99.9%): [237475.326, 250862.996] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
SingleDelayTest._Benchmark.benchmark_withObservableError2  thrpt   30  244169.161 ± 6693.835  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableToFutureTest._Benchmark.benchmark_toFutureWithException$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableToFutureTest._Benchmark.benchmark_toFutureWithException

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 183520.407 ops/s
# Warmup Iteration   2: 288082.786 ops/s
# Warmup Iteration   3: 353333.143 ops/s
# Warmup Iteration   4: 338665.105 ops/s
# Warmup Iteration   5: 373681.283 ops/s
# Warmup Iteration   6: 369101.816 ops/s
# Warmup Iteration   7: 369385.193 ops/s
# Warmup Iteration   8: 383809.137 ops/s
# Warmup Iteration   9: 365982.883 ops/s
# Warmup Iteration  10: 388647.876 ops/s
# Warmup Iteration  11: 360510.602 ops/s
# Warmup Iteration  12: 340203.917 ops/s
# Warmup Iteration  13: 378608.840 ops/s
# Warmup Iteration  14: 365056.317 ops/s
# Warmup Iteration  15: 390017.727 ops/s
# Warmup Iteration  16: 371372.024 ops/s
# Warmup Iteration  17: 387770.922 ops/s
# Warmup Iteration  18: 405659.234 ops/s
# Warmup Iteration  19: 394970.424 ops/s
# Warmup Iteration  20: 398363.477 ops/s
# Warmup Iteration  21: 415633.259 ops/s
# Warmup Iteration  22: 378732.808 ops/s
# Warmup Iteration  23: 410359.753 ops/s
# Warmup Iteration  24: 394428.315 ops/s
# Warmup Iteration  25: 389240.051 ops/s
# Warmup Iteration  26: 402265.185 ops/s
# Warmup Iteration  27: 395310.841 ops/s
# Warmup Iteration  28: 399309.871 ops/s
# Warmup Iteration  29: 389741.300 ops/s
# Warmup Iteration  30: 399284.702 ops/s
Iteration   1: 387875.178 ops/s
Iteration   2: 382781.988 ops/s
Iteration   3: 400615.609 ops/s
Iteration   4: 411938.999 ops/s
Iteration   5: 391571.036 ops/s
Iteration   6: 384346.111 ops/s
Iteration   7: 400509.759 ops/s
Iteration   8: 393605.577 ops/s
Iteration   9: 412881.039 ops/s
Iteration  10: 404878.249 ops/s
Iteration  11: 381500.193 ops/s
Iteration  12: 399188.987 ops/s
Iteration  13: 388897.353 ops/s
Iteration  14: 400283.578 ops/s
Iteration  15: 390746.075 ops/s
Iteration  16: 395921.062 ops/s
Iteration  17: 405820.333 ops/s
Iteration  18: 379508.122 ops/s
Iteration  19: 402704.510 ops/s
Iteration  20: 391010.998 ops/s
Iteration  21: 400313.253 ops/s
Iteration  22: 392548.662 ops/s
Iteration  23: 395562.705 ops/s
Iteration  24: 398833.703 ops/s
Iteration  25: 391014.247 ops/s
Iteration  26: 405426.259 ops/s
Iteration  27: 390985.814 ops/s
Iteration  28: 391191.752 ops/s
Iteration  29: 405892.501 ops/s
Iteration  30: 386078.135 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableToFutureTest._Benchmark.benchmark_toFutureWithException":
  395481.060 ±(99.9%) 5826.317 ops/s [Average]
  (min, avg, max) = (379508.122, 395481.060, 412881.039), stdev = 8720.557
  CI (99.9%): [389654.743, 401307.376] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score      Error  Units
BlockingFlowableToFutureTest._Benchmark.benchmark_toFutureWithException  thrpt   30  395481.060 ± 5826.317  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.subscribers.BoundedSubscriberTest._Benchmark.benchmark_onNextThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.subscribers.BoundedSubscriberTest._Benchmark.benchmark_onNextThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 200949.198 ops/s
# Warmup Iteration   2: 469921.189 ops/s
# Warmup Iteration   3: 459201.868 ops/s
# Warmup Iteration   4: 448201.747 ops/s
# Warmup Iteration   5: 510812.352 ops/s
# Warmup Iteration   6: 514647.679 ops/s
# Warmup Iteration   7: 520609.130 ops/s
# Warmup Iteration   8: 499005.650 ops/s
# Warmup Iteration   9: 491456.356 ops/s
# Warmup Iteration  10: 439908.816 ops/s
# Warmup Iteration  11: 500767.764 ops/s
# Warmup Iteration  12: 531520.297 ops/s
# Warmup Iteration  13: 500970.836 ops/s
# Warmup Iteration  14: 528393.890 ops/s
# Warmup Iteration  15: 534963.906 ops/s
# Warmup Iteration  16: 499491.800 ops/s
# Warmup Iteration  17: 540239.472 ops/s
# Warmup Iteration  18: 540722.691 ops/s
# Warmup Iteration  19: 542218.323 ops/s
# Warmup Iteration  20: 534085.370 ops/s
# Warmup Iteration  21: 532533.692 ops/s
# Warmup Iteration  22: 542929.006 ops/s
# Warmup Iteration  23: 543315.161 ops/s
# Warmup Iteration  24: 520125.192 ops/s
# Warmup Iteration  25: 551806.947 ops/s
# Warmup Iteration  26: 528652.822 ops/s
# Warmup Iteration  27: 526050.774 ops/s
# Warmup Iteration  28: 542752.870 ops/s
# Warmup Iteration  29: 532250.527 ops/s
# Warmup Iteration  30: 543814.152 ops/s
Iteration   1: 543217.971 ops/s
Iteration   2: 534152.764 ops/s
Iteration   3: 556137.808 ops/s
Iteration   4: 532411.223 ops/s
Iteration   5: 533558.422 ops/s
Iteration   6: 531623.162 ops/s
Iteration   7: 552276.202 ops/s
Iteration   8: 510037.982 ops/s
Iteration   9: 549935.360 ops/s
Iteration  10: 531662.811 ops/s
Iteration  11: 533080.001 ops/s
Iteration  12: 551100.318 ops/s
Iteration  13: 523341.231 ops/s
Iteration  14: 543298.980 ops/s
Iteration  15: 553997.076 ops/s
Iteration  16: 517297.147 ops/s
Iteration  17: 549252.787 ops/s
Iteration  18: 518645.030 ops/s
Iteration  19: 538298.454 ops/s
Iteration  20: 527605.649 ops/s
Iteration  21: 541006.741 ops/s
Iteration  22: 530783.825 ops/s
Iteration  23: 522387.009 ops/s
Iteration  24: 537587.249 ops/s
Iteration  25: 535105.725 ops/s
Iteration  26: 555868.973 ops/s
Iteration  27: 552950.930 ops/s
Iteration  28: 546057.508 ops/s
Iteration  29: 514596.300 ops/s
Iteration  30: 527831.860 ops/s


Result "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriberTest._Benchmark.benchmark_onNextThrows":
  536503.550 ±(99.9%) 8656.822 ops/s [Average]
  (min, avg, max) = (510037.982, 536503.550, 556137.808), stdev = 12957.124
  CI (99.9%): [527846.728, 545160.372] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score      Error  Units
BoundedSubscriberTest._Benchmark.benchmark_onNextThrows  thrpt   30  536503.550 ± 8656.822  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSupplierTest._Benchmark.benchmark_fusedFlatMapExecution$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSupplierTest._Benchmark.benchmark_fusedFlatMapExecution

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1478687.499 ops/s
# Warmup Iteration   2: 3707132.869 ops/s
# Warmup Iteration   3: 5763941.396 ops/s
# Warmup Iteration   4: 5512337.605 ops/s
# Warmup Iteration   5: 5790864.932 ops/s
# Warmup Iteration   6: 5446108.284 ops/s
# Warmup Iteration   7: 5634682.069 ops/s
# Warmup Iteration   8: 5717173.210 ops/s
# Warmup Iteration   9: 5474734.534 ops/s
# Warmup Iteration  10: 5740653.645 ops/s
# Warmup Iteration  11: 5399974.196 ops/s
# Warmup Iteration  12: 5661251.672 ops/s
# Warmup Iteration  13: 5720314.060 ops/s
# Warmup Iteration  14: 5540379.948 ops/s
# Warmup Iteration  15: 5725435.590 ops/s
# Warmup Iteration  16: 5621994.833 ops/s
# Warmup Iteration  17: 5884172.439 ops/s
# Warmup Iteration  18: 5470546.244 ops/s
# Warmup Iteration  19: 5767685.079 ops/s
# Warmup Iteration  20: 5557335.769 ops/s
# Warmup Iteration  21: 5719173.974 ops/s
# Warmup Iteration  22: 5794381.504 ops/s
# Warmup Iteration  23: 5585675.229 ops/s
# Warmup Iteration  24: 5730165.017 ops/s
# Warmup Iteration  25: 5560873.591 ops/s
# Warmup Iteration  26: 5788385.712 ops/s
# Warmup Iteration  27: 5664382.306 ops/s
# Warmup Iteration  28: 4633631.083 ops/s
# Warmup Iteration  29: 5669435.547 ops/s
# Warmup Iteration  30: 5740035.999 ops/s
Iteration   1: 5692798.479 ops/s
Iteration   2: 5650591.214 ops/s
Iteration   3: 5853727.753 ops/s
Iteration   4: 5482523.102 ops/s
Iteration   5: 5869045.982 ops/s
Iteration   6: 5631974.437 ops/s
Iteration   7: 5427024.414 ops/s
Iteration   8: 5940168.593 ops/s
Iteration   9: 5609015.713 ops/s
Iteration  10: 5641785.738 ops/s
Iteration  11: 5793026.949 ops/s
Iteration  12: 5665718.555 ops/s
Iteration  13: 5880108.051 ops/s
Iteration  14: 5465573.534 ops/s
Iteration  15: 5669126.610 ops/s
Iteration  16: 5903774.143 ops/s
Iteration  17: 5792867.254 ops/s
Iteration  18: 5641458.777 ops/s
Iteration  19: 5757916.419 ops/s
Iteration  20: 5507264.890 ops/s
Iteration  21: 5926225.024 ops/s
Iteration  22: 5547402.756 ops/s
Iteration  23: 5791202.162 ops/s
Iteration  24: 5849183.694 ops/s
Iteration  25: 5546776.076 ops/s
Iteration  26: 5876087.990 ops/s
Iteration  27: 5587894.797 ops/s
Iteration  28: 5499612.585 ops/s
Iteration  29: 5909630.967 ops/s
Iteration  30: 5589278.776 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSupplierTest._Benchmark.benchmark_fusedFlatMapExecution":
  5699959.514 ±(99.9%) 104627.088 ops/s [Average]
  (min, avg, max) = (5427024.414, 5699959.514, 5940168.593), stdev = 156600.912
  CI (99.9%): [5595332.426, 5804586.603] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score        Error  Units
FlowableFromSupplierTest._Benchmark.benchmark_fusedFlatMapExecution  thrpt   30  5699959.514 ± 104627.088  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCallableTest._Benchmark.benchmark_fusedFlatMapExecution$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCallableTest._Benchmark.benchmark_fusedFlatMapExecution

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1353581.462 ops/s
# Warmup Iteration   2: 3820445.495 ops/s
# Warmup Iteration   3: 6109122.379 ops/s
# Warmup Iteration   4: 5856682.871 ops/s
# Warmup Iteration   5: 6200951.524 ops/s
# Warmup Iteration   6: 5771571.163 ops/s
# Warmup Iteration   7: 5910832.868 ops/s
# Warmup Iteration   8: 6019107.820 ops/s
# Warmup Iteration   9: 5721227.595 ops/s
# Warmup Iteration  10: 5966634.804 ops/s
# Warmup Iteration  11: 5793782.019 ops/s
# Warmup Iteration  12: 5921942.546 ops/s
# Warmup Iteration  13: 6224156.644 ops/s
# Warmup Iteration  14: 5880911.322 ops/s
# Warmup Iteration  15: 6054981.452 ops/s
# Warmup Iteration  16: 5762711.339 ops/s
# Warmup Iteration  17: 6173709.312 ops/s
# Warmup Iteration  18: 6001744.051 ops/s
# Warmup Iteration  19: 5861473.812 ops/s
# Warmup Iteration  20: 6369420.033 ops/s
# Warmup Iteration  21: 5860791.119 ops/s
# Warmup Iteration  22: 6050953.911 ops/s
# Warmup Iteration  23: 5964438.934 ops/s
# Warmup Iteration  24: 5946461.145 ops/s
# Warmup Iteration  25: 6125758.103 ops/s
# Warmup Iteration  26: 5854145.154 ops/s
# Warmup Iteration  27: 6056043.761 ops/s
# Warmup Iteration  28: 6002681.589 ops/s
# Warmup Iteration  29: 5999299.151 ops/s
# Warmup Iteration  30: 6107972.725 ops/s
Iteration   1: 5965307.225 ops/s
Iteration   2: 6042253.050 ops/s
Iteration   3: 6211269.206 ops/s
Iteration   4: 6045605.894 ops/s
Iteration   5: 5948004.204 ops/s
Iteration   6: 5934588.666 ops/s
Iteration   7: 6156506.189 ops/s
Iteration   8: 5834563.313 ops/s
Iteration   9: 6105697.949 ops/s
Iteration  10: 5860509.204 ops/s
Iteration  11: 6055344.760 ops/s
Iteration  12: 6078542.265 ops/s
Iteration  13: 5968110.644 ops/s
Iteration  14: 6161729.939 ops/s
Iteration  15: 5914227.026 ops/s
Iteration  16: 6149165.937 ops/s
Iteration  17: 5844149.219 ops/s
Iteration  18: 6112039.684 ops/s
Iteration  19: 5912385.642 ops/s
Iteration  20: 6247329.745 ops/s
Iteration  21: 6005382.838 ops/s
Iteration  22: 5983384.261 ops/s
Iteration  23: 6029837.937 ops/s
Iteration  24: 5985076.914 ops/s
Iteration  25: 6211371.900 ops/s
Iteration  26: 5925481.533 ops/s
Iteration  27: 6120278.311 ops/s
Iteration  28: 5946034.488 ops/s
Iteration  29: 5975554.347 ops/s
Iteration  30: 6119932.497 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCallableTest._Benchmark.benchmark_fusedFlatMapExecution":
  6028322.160 ±(99.9%) 75550.440 ops/s [Average]
  (min, avg, max) = (5834563.313, 6028322.160, 6247329.745), stdev = 113080.350
  CI (99.9%): [5952771.720, 6103872.599] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
FlowableFromCallableTest._Benchmark.benchmark_fusedFlatMapExecution  thrpt   30  6028322.160 ± 75550.440  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableScanTest._Benchmark.benchmark_scanNoSeed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableScanTest._Benchmark.benchmark_scanNoSeed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 592901.226 ops/s
# Warmup Iteration   2: 2533380.296 ops/s
# Warmup Iteration   3: 3431841.547 ops/s
# Warmup Iteration   4: 3743492.638 ops/s
# Warmup Iteration   5: 3839490.746 ops/s
# Warmup Iteration   6: 4059774.234 ops/s
# Warmup Iteration   7: 3810281.479 ops/s
# Warmup Iteration   8: 3978689.168 ops/s
# Warmup Iteration   9: 3875338.865 ops/s
# Warmup Iteration  10: 3845796.755 ops/s
# Warmup Iteration  11: 4029126.874 ops/s
# Warmup Iteration  12: 3948220.854 ops/s
# Warmup Iteration  13: 3769965.001 ops/s
# Warmup Iteration  14: 3963877.788 ops/s
# Warmup Iteration  15: 3780913.613 ops/s
# Warmup Iteration  16: 3899111.185 ops/s
# Warmup Iteration  17: 3814236.981 ops/s
# Warmup Iteration  18: 3870187.635 ops/s
# Warmup Iteration  19: 4011438.620 ops/s
# Warmup Iteration  20: 3915115.539 ops/s
# Warmup Iteration  21: 3983817.071 ops/s
# Warmup Iteration  22: 3365599.742 ops/s
# Warmup Iteration  23: 3587575.365 ops/s
# Warmup Iteration  24: 3772118.023 ops/s
# Warmup Iteration  25: 3981878.359 ops/s
# Warmup Iteration  26: 4117160.697 ops/s
# Warmup Iteration  27: 3936041.662 ops/s
# Warmup Iteration  28: 3876175.066 ops/s
# Warmup Iteration  29: 4007048.955 ops/s
# Warmup Iteration  30: 3808648.095 ops/s
Iteration   1: 3923216.231 ops/s
Iteration   2: 3922143.279 ops/s
Iteration   3: 3925289.205 ops/s
Iteration   4: 3960591.066 ops/s
Iteration   5: 3918730.940 ops/s
Iteration   6: 3859853.850 ops/s
Iteration   7: 4050592.481 ops/s
Iteration   8: 3832223.485 ops/s
Iteration   9: 3920056.965 ops/s
Iteration  10: 3753683.097 ops/s
Iteration  11: 4080551.494 ops/s
Iteration  12: 3692114.952 ops/s
Iteration  13: 3905294.547 ops/s
Iteration  14: 4003987.774 ops/s
Iteration  15: 4070500.575 ops/s
Iteration  16: 3974295.950 ops/s
Iteration  17: 3792282.044 ops/s
Iteration  18: 4014460.867 ops/s
Iteration  19: 3886405.869 ops/s
Iteration  20: 3965395.110 ops/s
Iteration  21: 3876167.580 ops/s
Iteration  22: 3962135.808 ops/s
Iteration  23: 4116905.665 ops/s
Iteration  24: 3904077.007 ops/s
Iteration  25: 3940755.221 ops/s
Iteration  26: 3847086.832 ops/s
Iteration  27: 3841477.375 ops/s
Iteration  28: 4054925.557 ops/s
Iteration  29: 3825687.794 ops/s
Iteration  30: 4008314.764 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableScanTest._Benchmark.benchmark_scanNoSeed":
  3927640.113 ±(99.9%) 66176.360 ops/s [Average]
  (min, avg, max) = (3692114.952, 3927640.113, 4116905.665), stdev = 99049.668
  CI (99.9%): [3861463.753, 3993816.473] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score       Error  Units
FlowableScanTest._Benchmark.benchmark_scanNoSeed  thrpt   30  3927640.113 ± 66176.360  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDropTest._Benchmark.benchmark_badRequest$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDropTest._Benchmark.benchmark_badRequest

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 105764.930 ops/s
# Warmup Iteration   2: 225682.110 ops/s
# Warmup Iteration   3: 473154.469 ops/s
# Warmup Iteration   4: 463012.994 ops/s
# Warmup Iteration   5: 485693.909 ops/s
# Warmup Iteration   6: 474715.190 ops/s
# Warmup Iteration   7: 488710.127 ops/s
# Warmup Iteration   8: 475109.603 ops/s
# Warmup Iteration   9: 491551.607 ops/s
# Warmup Iteration  10: 502387.244 ops/s
# Warmup Iteration  11: 458307.432 ops/s
# Warmup Iteration  12: 480724.054 ops/s
# Warmup Iteration  13: 470332.328 ops/s
# Warmup Iteration  14: 471729.823 ops/s
# Warmup Iteration  15: 494532.177 ops/s
# Warmup Iteration  16: 503386.712 ops/s
# Warmup Iteration  17: 509713.417 ops/s
# Warmup Iteration  18: 532152.336 ops/s
# Warmup Iteration  19: 481493.815 ops/s
# Warmup Iteration  20: 524825.831 ops/s
# Warmup Iteration  21: 510543.590 ops/s
# Warmup Iteration  22: 512979.042 ops/s
# Warmup Iteration  23: 530914.250 ops/s
# Warmup Iteration  24: 497550.216 ops/s
# Warmup Iteration  25: 516944.724 ops/s
# Warmup Iteration  26: 514379.643 ops/s
# Warmup Iteration  27: 513876.532 ops/s
# Warmup Iteration  28: 526370.780 ops/s
# Warmup Iteration  29: 496860.995 ops/s
# Warmup Iteration  30: 534657.943 ops/s
Iteration   1: 498279.935 ops/s
Iteration   2: 505151.523 ops/s
Iteration   3: 530594.605 ops/s
Iteration   4: 512350.636 ops/s
Iteration   5: 513404.649 ops/s
Iteration   6: 529077.252 ops/s
Iteration   7: 510603.437 ops/s
Iteration   8: 536900.113 ops/s
Iteration   9: 500743.185 ops/s
Iteration  10: 511991.453 ops/s
Iteration  11: 510741.696 ops/s
Iteration  12: 507277.689 ops/s
Iteration  13: 519010.560 ops/s
Iteration  14: 512477.725 ops/s
Iteration  15: 502164.838 ops/s
Iteration  16: 536915.384 ops/s
Iteration  17: 539643.776 ops/s
Iteration  18: 499879.060 ops/s
Iteration  19: 512993.145 ops/s
Iteration  20: 523066.489 ops/s
Iteration  21: 494970.757 ops/s
Iteration  22: 518807.090 ops/s
Iteration  23: 510981.013 ops/s
Iteration  24: 526021.058 ops/s
Iteration  25: 507911.564 ops/s
Iteration  26: 487615.618 ops/s
Iteration  27: 524824.528 ops/s
Iteration  28: 501440.622 ops/s
Iteration  29: 522758.155 ops/s
Iteration  30: 510975.252 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDropTest._Benchmark.benchmark_badRequest":
  513985.760 ±(99.9%) 8656.497 ops/s [Average]
  (min, avg, max) = (487615.618, 513985.760, 539643.776), stdev = 12956.639
  CI (99.9%): [505329.263, 522642.258] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
FlowableOnBackpressureDropTest._Benchmark.benchmark_badRequest  thrpt   30  513985.760 ± 8656.497  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableBlockingStreamTest._Benchmark.benchmark_just$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableBlockingStreamTest._Benchmark.benchmark_just

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 140266.283 ops/s
# Warmup Iteration   2: 687788.249 ops/s
# Warmup Iteration   3: 1259720.231 ops/s
# Warmup Iteration   4: 2360557.328 ops/s
# Warmup Iteration   5: 2520483.800 ops/s
# Warmup Iteration   6: 2329592.009 ops/s
# Warmup Iteration   7: 2500199.059 ops/s
# Warmup Iteration   8: 2428819.772 ops/s
# Warmup Iteration   9: 2520348.175 ops/s
# Warmup Iteration  10: 2326999.243 ops/s
# Warmup Iteration  11: 2461552.520 ops/s
# Warmup Iteration  12: 2445898.518 ops/s
# Warmup Iteration  13: 2447629.362 ops/s
# Warmup Iteration  14: 2524424.558 ops/s
# Warmup Iteration  15: 2374237.193 ops/s
# Warmup Iteration  16: 2405057.454 ops/s
# Warmup Iteration  17: 2047157.658 ops/s
# Warmup Iteration  18: 2448690.845 ops/s
# Warmup Iteration  19: 2378392.712 ops/s
# Warmup Iteration  20: 2497978.223 ops/s
# Warmup Iteration  21: 2390762.424 ops/s
# Warmup Iteration  22: 2449952.510 ops/s
# Warmup Iteration  23: 2446655.736 ops/s
# Warmup Iteration  24: 2338634.600 ops/s
# Warmup Iteration  25: 2478273.052 ops/s
# Warmup Iteration  26: 2480930.963 ops/s
# Warmup Iteration  27: 2374209.155 ops/s
# Warmup Iteration  28: 2471847.422 ops/s
# Warmup Iteration  29: 2408910.516 ops/s
# Warmup Iteration  30: 2424402.830 ops/s
Iteration   1: 2463004.687 ops/s
Iteration   2: 2377913.434 ops/s
Iteration   3: 2535984.509 ops/s
Iteration   4: 2496894.621 ops/s
Iteration   5: 2346205.262 ops/s
Iteration   6: 2436387.424 ops/s
Iteration   7: 2395979.551 ops/s
Iteration   8: 2483883.254 ops/s
Iteration   9: 2483968.966 ops/s
Iteration  10: 2435350.735 ops/s
Iteration  11: 2516159.298 ops/s
Iteration  12: 2536608.081 ops/s
Iteration  13: 2429893.650 ops/s
Iteration  14: 2433243.965 ops/s
Iteration  15: 2498568.672 ops/s
Iteration  16: 2411076.918 ops/s
Iteration  17: 2481133.564 ops/s
Iteration  18: 2337567.480 ops/s
Iteration  19: 2492852.995 ops/s
Iteration  20: 2494480.367 ops/s
Iteration  21: 2395909.665 ops/s
Iteration  22: 2507246.752 ops/s
Iteration  23: 2440184.454 ops/s
Iteration  24: 2540553.994 ops/s
Iteration  25: 2400028.917 ops/s
Iteration  26: 2469171.226 ops/s
Iteration  27: 2425990.249 ops/s
Iteration  28: 2522983.740 ops/s
Iteration  29: 2403079.527 ops/s
Iteration  30: 2471554.070 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableBlockingStreamTest._Benchmark.benchmark_just":
  2455462.001 ±(99.9%) 37271.675 ops/s [Average]
  (min, avg, max) = (2337567.480, 2455462.001, 2540553.994), stdev = 55786.492
  CI (99.9%): [2418190.326, 2492733.676] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
FlowableBlockingStreamTest._Benchmark.benchmark_just  thrpt   30  2455462.001 ± 37271.675  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastOneTest._Benchmark.benchmark_lastWithBackpressure$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastOneTest._Benchmark.benchmark_lastWithBackpressure

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3156274.473 ops/s
# Warmup Iteration   2: 6127627.888 ops/s
# Warmup Iteration   3: 8544729.814 ops/s
# Warmup Iteration   4: 8161758.028 ops/s
# Warmup Iteration   5: 8660944.513 ops/s
# Warmup Iteration   6: 8556270.378 ops/s
# Warmup Iteration   7: 8206544.576 ops/s
# Warmup Iteration   8: 8420810.010 ops/s
# Warmup Iteration   9: 8261054.314 ops/s
# Warmup Iteration  10: 8642217.808 ops/s
# Warmup Iteration  11: 8549853.038 ops/s
# Warmup Iteration  12: 8270842.935 ops/s
# Warmup Iteration  13: 8617296.049 ops/s
# Warmup Iteration  14: 8323109.807 ops/s
# Warmup Iteration  15: 8689918.033 ops/s
# Warmup Iteration  16: 8180095.554 ops/s
# Warmup Iteration  17: 8754918.576 ops/s
# Warmup Iteration  18: 8830163.805 ops/s
# Warmup Iteration  19: 8288170.415 ops/s
# Warmup Iteration  20: 8546635.730 ops/s
# Warmup Iteration  21: 8589458.453 ops/s
# Warmup Iteration  22: 8505841.942 ops/s
# Warmup Iteration  23: 8634155.727 ops/s
# Warmup Iteration  24: 8258154.507 ops/s
# Warmup Iteration  25: 8216825.424 ops/s
# Warmup Iteration  26: 8727424.038 ops/s
# Warmup Iteration  27: 8617077.284 ops/s
# Warmup Iteration  28: 8323423.857 ops/s
# Warmup Iteration  29: 8674628.016 ops/s
# Warmup Iteration  30: 8464350.134 ops/s
Iteration   1: 8484086.457 ops/s
Iteration   2: 8741653.695 ops/s
Iteration   3: 8261692.158 ops/s
Iteration   4: 8599370.063 ops/s
Iteration   5: 8364224.794 ops/s
Iteration   6: 8412592.175 ops/s
Iteration   7: 8365374.274 ops/s
Iteration   8: 8206872.611 ops/s
Iteration   9: 8451602.810 ops/s
Iteration  10: 8801647.243 ops/s
Iteration  11: 8334598.020 ops/s
Iteration  12: 8760750.049 ops/s
Iteration  13: 8353929.118 ops/s
Iteration  14: 8654224.442 ops/s
Iteration  15: 8724328.869 ops/s
Iteration  16: 8234644.048 ops/s
Iteration  17: 8801907.041 ops/s
Iteration  18: 8274521.270 ops/s
Iteration  19: 8583485.962 ops/s
Iteration  20: 8394803.959 ops/s
Iteration  21: 8460436.155 ops/s
Iteration  22: 8482472.934 ops/s
Iteration  23: 8777543.241 ops/s
Iteration  24: 9015718.829 ops/s
Iteration  25: 8058229.502 ops/s
Iteration  26: 8800982.663 ops/s
Iteration  27: 8192903.599 ops/s
Iteration  28: 8512572.430 ops/s
Iteration  29: 8637683.198 ops/s
Iteration  30: 8622024.423 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastOneTest._Benchmark.benchmark_lastWithBackpressure":
  8512229.201 ±(99.9%) 153181.885 ops/s [Average]
  (min, avg, max) = (8058229.502, 8512229.201, 9015718.829), stdev = 229275.451
  CI (99.9%): [8359047.316, 8665411.086] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score        Error  Units
FlowableTakeLastOneTest._Benchmark.benchmark_lastWithBackpressure  thrpt   30  8512229.201 ± 153181.885  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatTest._Benchmark.benchmark_shouldDisposeInnerObservable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatTest._Benchmark.benchmark_shouldDisposeInnerObservable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 92855.087 ops/s
# Warmup Iteration   2: 262675.922 ops/s
# Warmup Iteration   3: 653590.923 ops/s
# Warmup Iteration   4: 737072.217 ops/s
# Warmup Iteration   5: 941488.234 ops/s
# Warmup Iteration   6: 899689.116 ops/s
# Warmup Iteration   7: 926955.645 ops/s
# Warmup Iteration   8: 902932.459 ops/s
# Warmup Iteration   9: 917380.508 ops/s
# Warmup Iteration  10: 953608.914 ops/s
# Warmup Iteration  11: 863993.807 ops/s
# Warmup Iteration  12: 798095.889 ops/s
# Warmup Iteration  13: 919355.148 ops/s
# Warmup Iteration  14: 908493.679 ops/s
# Warmup Iteration  15: 926873.246 ops/s
# Warmup Iteration  16: 894211.966 ops/s
# Warmup Iteration  17: 918665.244 ops/s
# Warmup Iteration  18: 937379.624 ops/s
# Warmup Iteration  19: 947905.540 ops/s
# Warmup Iteration  20: 924824.191 ops/s
# Warmup Iteration  21: 916844.997 ops/s
# Warmup Iteration  22: 959848.850 ops/s
# Warmup Iteration  23: 888206.452 ops/s
# Warmup Iteration  24: 906691.822 ops/s
# Warmup Iteration  25: 946818.437 ops/s
# Warmup Iteration  26: 911899.730 ops/s
# Warmup Iteration  27: 885400.805 ops/s
# Warmup Iteration  28: 961915.956 ops/s
# Warmup Iteration  29: 937084.674 ops/s
# Warmup Iteration  30: 905768.646 ops/s
Iteration   1: 936919.336 ops/s
Iteration   2: 942972.017 ops/s
Iteration   3: 922958.383 ops/s
Iteration   4: 921522.212 ops/s
Iteration   5: 948039.662 ops/s
Iteration   6: 939445.808 ops/s
Iteration   7: 921902.980 ops/s
Iteration   8: 907941.027 ops/s
Iteration   9: 945456.484 ops/s
Iteration  10: 917837.524 ops/s
Iteration  11: 898485.098 ops/s
Iteration  12: 950128.400 ops/s
Iteration  13: 945320.690 ops/s
Iteration  14: 905923.812 ops/s
Iteration  15: 937137.002 ops/s
Iteration  16: 950389.137 ops/s
Iteration  17: 894900.155 ops/s
Iteration  18: 902504.934 ops/s
Iteration  19: 939208.544 ops/s
Iteration  20: 890353.926 ops/s
Iteration  21: 943467.838 ops/s
Iteration  22: 872987.693 ops/s
Iteration  23: 921610.034 ops/s
Iteration  24: 925800.683 ops/s
Iteration  25: 928667.660 ops/s
Iteration  26: 964095.663 ops/s
Iteration  27: 899312.377 ops/s
Iteration  28: 922995.248 ops/s
Iteration  29: 919845.101 ops/s
Iteration  30: 917000.329 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatTest._Benchmark.benchmark_shouldDisposeInnerObservable":
  924504.325 ±(99.9%) 14176.157 ops/s [Average]
  (min, avg, max) = (872987.693, 924504.325, 964095.663), stdev = 21218.205
  CI (99.9%): [910328.169, 938680.482] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score       Error  Units
FlowableRepeatTest._Benchmark.benchmark_shouldDisposeInnerObservable  thrpt   30  924504.325 ± 14176.157  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableBlockingTest._Benchmark.benchmark_disposeUpFront$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableBlockingTest._Benchmark.benchmark_disposeUpFront

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 472933.806 ops/s
# Warmup Iteration   2: 1566328.057 ops/s
# Warmup Iteration   3: 2005659.696 ops/s
# Warmup Iteration   4: 2398459.275 ops/s
# Warmup Iteration   5: 2535436.114 ops/s
# Warmup Iteration   6: 2303087.223 ops/s
# Warmup Iteration   7: 2422157.948 ops/s
# Warmup Iteration   8: 2476025.565 ops/s
# Warmup Iteration   9: 2369184.290 ops/s
# Warmup Iteration  10: 2429403.977 ops/s
# Warmup Iteration  11: 2311291.738 ops/s
# Warmup Iteration  12: 2349757.342 ops/s
# Warmup Iteration  13: 2502350.484 ops/s
# Warmup Iteration  14: 2265367.098 ops/s
# Warmup Iteration  15: 2530124.144 ops/s
# Warmup Iteration  16: 2417670.521 ops/s
# Warmup Iteration  17: 2477117.976 ops/s
# Warmup Iteration  18: 2490174.509 ops/s
# Warmup Iteration  19: 2583161.980 ops/s
# Warmup Iteration  20: 2322688.579 ops/s
# Warmup Iteration  21: 2432879.088 ops/s
# Warmup Iteration  22: 2401608.978 ops/s
# Warmup Iteration  23: 2369956.409 ops/s
# Warmup Iteration  24: 2423316.341 ops/s
# Warmup Iteration  25: 2325983.237 ops/s
# Warmup Iteration  26: 2428689.881 ops/s
# Warmup Iteration  27: 2385517.270 ops/s
# Warmup Iteration  28: 2409999.866 ops/s
# Warmup Iteration  29: 2530682.586 ops/s
# Warmup Iteration  30: 2487450.101 ops/s
Iteration   1: 2380856.623 ops/s
Iteration   2: 2437948.076 ops/s
Iteration   3: 2499597.243 ops/s
Iteration   4: 2352494.296 ops/s
Iteration   5: 2483091.685 ops/s
Iteration   6: 2298355.666 ops/s
Iteration   7: 2479890.985 ops/s
Iteration   8: 2389622.524 ops/s
Iteration   9: 2507472.395 ops/s
Iteration  10: 2467571.639 ops/s
Iteration  11: 2413471.593 ops/s
Iteration  12: 2480226.274 ops/s
Iteration  13: 2393757.488 ops/s
Iteration  14: 2403265.812 ops/s
Iteration  15: 2468406.729 ops/s
Iteration  16: 2395790.035 ops/s
Iteration  17: 2426863.557 ops/s
Iteration  18: 2467571.255 ops/s
Iteration  19: 2431298.526 ops/s
Iteration  20: 2445778.601 ops/s
Iteration  21: 2465778.832 ops/s
Iteration  22: 2504204.035 ops/s
Iteration  23: 2600694.262 ops/s
Iteration  24: 2428003.868 ops/s
Iteration  25: 2496889.060 ops/s
Iteration  26: 2353626.272 ops/s
Iteration  27: 2493117.550 ops/s
Iteration  28: 2508424.971 ops/s
Iteration  29: 2368355.485 ops/s
Iteration  30: 2531335.684 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableBlockingTest._Benchmark.benchmark_disposeUpFront":
  2445792.034 ±(99.9%) 42456.557 ops/s [Average]
  (min, avg, max) = (2298355.666, 2445792.034, 2600694.262), stdev = 63546.980
  CI (99.9%): [2403335.478, 2488248.591] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
FlowableBlockingTest._Benchmark.benchmark_disposeUpFront  thrpt   30  2445792.034 ± 42456.557  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnRequestTest._Benchmark.benchmark_unsubscribeHappensAgainstParent$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnRequestTest._Benchmark.benchmark_unsubscribeHappensAgainstParent

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 611680.953 ops/s
# Warmup Iteration   2: 2173603.885 ops/s
# Warmup Iteration   3: 2631218.714 ops/s
# Warmup Iteration   4: 2863961.844 ops/s
# Warmup Iteration   5: 3024266.053 ops/s
# Warmup Iteration   6: 2597903.928 ops/s
# Warmup Iteration   7: 2734966.740 ops/s
# Warmup Iteration   8: 2829654.135 ops/s
# Warmup Iteration   9: 2990288.981 ops/s
# Warmup Iteration  10: 3013975.713 ops/s
# Warmup Iteration  11: 2861910.911 ops/s
# Warmup Iteration  12: 3068267.269 ops/s
# Warmup Iteration  13: 2930942.901 ops/s
# Warmup Iteration  14: 2958644.849 ops/s
# Warmup Iteration  15: 3011974.537 ops/s
# Warmup Iteration  16: 3045669.828 ops/s
# Warmup Iteration  17: 2942087.813 ops/s
# Warmup Iteration  18: 3131513.908 ops/s
# Warmup Iteration  19: 2877042.311 ops/s
# Warmup Iteration  20: 3002514.005 ops/s
# Warmup Iteration  21: 2983391.779 ops/s
# Warmup Iteration  22: 2905251.300 ops/s
# Warmup Iteration  23: 3006214.799 ops/s
# Warmup Iteration  24: 3040310.353 ops/s
# Warmup Iteration  25: 2968347.409 ops/s
# Warmup Iteration  26: 2837008.435 ops/s
# Warmup Iteration  27: 2980822.260 ops/s
# Warmup Iteration  28: 2979829.413 ops/s
# Warmup Iteration  29: 3022252.843 ops/s
# Warmup Iteration  30: 2930645.314 ops/s
Iteration   1: 2941222.530 ops/s
Iteration   2: 3072076.407 ops/s
Iteration   3: 2931578.285 ops/s
Iteration   4: 2907670.394 ops/s
Iteration   5: 3035011.944 ops/s
Iteration   6: 2870549.753 ops/s
Iteration   7: 3119466.600 ops/s
Iteration   8: 2889392.941 ops/s
Iteration   9: 2964728.167 ops/s
Iteration  10: 2924295.443 ops/s
Iteration  11: 3079942.411 ops/s
Iteration  12: 2949010.905 ops/s
Iteration  13: 2996587.397 ops/s
Iteration  14: 3089648.127 ops/s
Iteration  15: 2953114.668 ops/s
Iteration  16: 2917680.972 ops/s
Iteration  17: 3077429.422 ops/s
Iteration  18: 2800315.440 ops/s
Iteration  19: 3032451.344 ops/s
Iteration  20: 2906105.565 ops/s
Iteration  21: 2900568.920 ops/s
Iteration  22: 3059609.945 ops/s
Iteration  23: 2850477.935 ops/s
Iteration  24: 3130761.317 ops/s
Iteration  25: 2899767.925 ops/s
Iteration  26: 3075798.516 ops/s
Iteration  27: 2969818.217 ops/s
Iteration  28: 2925470.950 ops/s
Iteration  29: 3012473.942 ops/s
Iteration  30: 2931868.302 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnRequestTest._Benchmark.benchmark_unsubscribeHappensAgainstParent":
  2973829.823 ±(99.9%) 57456.753 ops/s [Average]
  (min, avg, max) = (2800315.440, 2973829.823, 3130761.317), stdev = 85998.569
  CI (99.9%): [2916373.070, 3031286.575] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score       Error  Units
FlowableDoOnRequestTest._Benchmark.benchmark_unsubscribeHappensAgainstParent  thrpt   30  2973829.823 ± 57456.753  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatTest._Benchmark.benchmark_repeatUntilCancel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatTest._Benchmark.benchmark_repeatUntilCancel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2104341.383 ops/s
# Warmup Iteration   2: 4761552.860 ops/s
# Warmup Iteration   3: 6211969.427 ops/s
# Warmup Iteration   4: 5899572.835 ops/s
# Warmup Iteration   5: 5936398.460 ops/s
# Warmup Iteration   6: 6362871.702 ops/s
# Warmup Iteration   7: 6108702.858 ops/s
# Warmup Iteration   8: 6306405.184 ops/s
# Warmup Iteration   9: 6004074.999 ops/s
# Warmup Iteration  10: 6161851.815 ops/s
# Warmup Iteration  11: 6279063.405 ops/s
# Warmup Iteration  12: 6159044.549 ops/s
# Warmup Iteration  13: 6210425.461 ops/s
# Warmup Iteration  14: 6284595.647 ops/s
# Warmup Iteration  15: 5985874.432 ops/s
# Warmup Iteration  16: 6181664.033 ops/s
# Warmup Iteration  17: 6114190.140 ops/s
# Warmup Iteration  18: 6149401.076 ops/s
# Warmup Iteration  19: 6235297.806 ops/s
# Warmup Iteration  20: 6071377.318 ops/s
# Warmup Iteration  21: 6273352.428 ops/s
# Warmup Iteration  22: 6089897.014 ops/s
# Warmup Iteration  23: 6028789.528 ops/s
# Warmup Iteration  24: 6234482.602 ops/s
# Warmup Iteration  25: 5940293.178 ops/s
# Warmup Iteration  26: 6229283.130 ops/s
# Warmup Iteration  27: 5919156.041 ops/s
# Warmup Iteration  28: 6316386.000 ops/s
# Warmup Iteration  29: 6181305.757 ops/s
# Warmup Iteration  30: 6069475.360 ops/s
Iteration   1: 6141185.909 ops/s
Iteration   2: 6112656.110 ops/s
Iteration   3: 6178490.033 ops/s
Iteration   4: 6197505.763 ops/s
Iteration   5: 6214518.647 ops/s
Iteration   6: 6067559.153 ops/s
Iteration   7: 6244469.362 ops/s
Iteration   8: 6210970.471 ops/s
Iteration   9: 6033049.345 ops/s
Iteration  10: 6260564.686 ops/s
Iteration  11: 6347055.009 ops/s
Iteration  12: 6324137.502 ops/s
Iteration  13: 6155010.723 ops/s
Iteration  14: 6042970.781 ops/s
Iteration  15: 6108399.274 ops/s
Iteration  16: 6044431.104 ops/s
Iteration  17: 6206574.299 ops/s
Iteration  18: 6225277.150 ops/s
Iteration  19: 5972823.407 ops/s
Iteration  20: 6094615.168 ops/s
Iteration  21: 6102523.682 ops/s
Iteration  22: 6015413.267 ops/s
Iteration  23: 6132761.988 ops/s
Iteration  24: 5991471.564 ops/s
Iteration  25: 6334686.848 ops/s
Iteration  26: 5960780.046 ops/s
Iteration  27: 6258680.235 ops/s
Iteration  28: 6080482.787 ops/s
Iteration  29: 6218386.392 ops/s
Iteration  30: 6264364.250 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatTest._Benchmark.benchmark_repeatUntilCancel":
  6151393.832 ±(99.9%) 72440.992 ops/s [Average]
  (min, avg, max) = (5960780.046, 6151393.832, 6347055.009), stdev = 108426.274
  CI (99.9%): [6078952.840, 6223834.823] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
FlowableRepeatTest._Benchmark.benchmark_repeatUntilCancel  thrpt   30  6151393.832 ± 72440.992  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromActionTest._Benchmark.benchmark_cancelWhileRunning$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromActionTest._Benchmark.benchmark_cancelWhileRunning

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 853011.396 ops/s
# Warmup Iteration   2: 5021401.042 ops/s
# Warmup Iteration   3: 6183791.609 ops/s
# Warmup Iteration   4: 5600402.900 ops/s
# Warmup Iteration   5: 6678220.174 ops/s
# Warmup Iteration   6: 6278651.371 ops/s
# Warmup Iteration   7: 6418302.574 ops/s
# Warmup Iteration   8: 6575694.003 ops/s
# Warmup Iteration   9: 6300525.462 ops/s
# Warmup Iteration  10: 6760354.224 ops/s
# Warmup Iteration  11: 6579455.412 ops/s
# Warmup Iteration  12: 6584924.857 ops/s
# Warmup Iteration  13: 6353561.245 ops/s
# Warmup Iteration  14: 6618572.238 ops/s
# Warmup Iteration  15: 6462321.426 ops/s
# Warmup Iteration  16: 6713771.150 ops/s
# Warmup Iteration  17: 6286782.014 ops/s
# Warmup Iteration  18: 6445896.834 ops/s
# Warmup Iteration  19: 6401174.126 ops/s
# Warmup Iteration  20: 6587946.360 ops/s
# Warmup Iteration  21: 6677915.400 ops/s
# Warmup Iteration  22: 6270499.348 ops/s
# Warmup Iteration  23: 6490204.339 ops/s
# Warmup Iteration  24: 6576276.574 ops/s
# Warmup Iteration  25: 6329865.249 ops/s
# Warmup Iteration  26: 6770300.353 ops/s
# Warmup Iteration  27: 6411272.555 ops/s
# Warmup Iteration  28: 6655819.603 ops/s
# Warmup Iteration  29: 6391251.363 ops/s
# Warmup Iteration  30: 6375265.903 ops/s
Iteration   1: 6606787.590 ops/s
Iteration   2: 6180311.789 ops/s
Iteration   3: 6766182.675 ops/s
Iteration   4: 6494301.629 ops/s
Iteration   5: 6379963.349 ops/s
Iteration   6: 6708529.491 ops/s
Iteration   7: 6775450.397 ops/s
Iteration   8: 6160254.996 ops/s
Iteration   9: 6699312.505 ops/s
Iteration  10: 6243520.007 ops/s
Iteration  11: 6450296.702 ops/s
Iteration  12: 6316822.216 ops/s
Iteration  13: 6512416.890 ops/s
Iteration  14: 6700609.648 ops/s
Iteration  15: 6232113.428 ops/s
Iteration  16: 6484063.853 ops/s
Iteration  17: 6487266.210 ops/s
Iteration  18: 6162561.701 ops/s
Iteration  19: 6796229.759 ops/s
Iteration  20: 6780086.674 ops/s
Iteration  21: 6705220.155 ops/s
Iteration  22: 6688035.718 ops/s
Iteration  23: 6404431.370 ops/s
Iteration  24: 6739268.091 ops/s
Iteration  25: 6517390.232 ops/s
Iteration  26: 6347177.854 ops/s
Iteration  27: 6612031.951 ops/s
Iteration  28: 6441985.860 ops/s
Iteration  29: 6588596.250 ops/s
Iteration  30: 6237586.816 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromActionTest._Benchmark.benchmark_cancelWhileRunning":
  6507293.527 ±(99.9%) 137393.787 ops/s [Average]
  (min, avg, max) = (6160254.996, 6507293.527, 6796229.759), stdev = 205644.568
  CI (99.9%): [6369899.740, 6644687.314] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score        Error  Units
FlowableFromActionTest._Benchmark.benchmark_cancelWhileRunning  thrpt   30  6507293.527 ± 137393.787  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromRunnableTest._Benchmark.benchmark_cancelWhileRunning$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromRunnableTest._Benchmark.benchmark_cancelWhileRunning

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2662471.101 ops/s
# Warmup Iteration   2: 5150810.120 ops/s
# Warmup Iteration   3: 7552637.828 ops/s
# Warmup Iteration   4: 7234564.826 ops/s
# Warmup Iteration   5: 7579489.329 ops/s
# Warmup Iteration   6: 7437037.966 ops/s
# Warmup Iteration   7: 7329745.371 ops/s
# Warmup Iteration   8: 7167985.977 ops/s
# Warmup Iteration   9: 7534686.570 ops/s
# Warmup Iteration  10: 7479435.601 ops/s
# Warmup Iteration  11: 7091048.074 ops/s
# Warmup Iteration  12: 7559059.626 ops/s
# Warmup Iteration  13: 7253943.727 ops/s
# Warmup Iteration  14: 7624784.271 ops/s
# Warmup Iteration  15: 7478118.702 ops/s
# Warmup Iteration  16: 7406594.343 ops/s
# Warmup Iteration  17: 7477331.516 ops/s
# Warmup Iteration  18: 7295399.881 ops/s
# Warmup Iteration  19: 7333894.320 ops/s
# Warmup Iteration  20: 7453358.862 ops/s
# Warmup Iteration  21: 7414634.764 ops/s
# Warmup Iteration  22: 7382312.302 ops/s
# Warmup Iteration  23: 7407668.733 ops/s
# Warmup Iteration  24: 7097261.881 ops/s
# Warmup Iteration  25: 7692483.639 ops/s
# Warmup Iteration  26: 7171364.032 ops/s
# Warmup Iteration  27: 7298150.604 ops/s
# Warmup Iteration  28: 7287877.611 ops/s
# Warmup Iteration  29: 7427109.783 ops/s
# Warmup Iteration  30: 7181370.815 ops/s
Iteration   1: 7187556.637 ops/s
Iteration   2: 7513059.883 ops/s
Iteration   3: 7235414.123 ops/s
Iteration   4: 7527072.865 ops/s
Iteration   5: 7326427.431 ops/s
Iteration   6: 7327962.617 ops/s
Iteration   7: 7732879.287 ops/s
Iteration   8: 6958527.324 ops/s
Iteration   9: 7501859.224 ops/s
Iteration  10: 7128823.596 ops/s
Iteration  11: 7513002.767 ops/s
Iteration  12: 7556306.379 ops/s
Iteration  13: 7245101.795 ops/s
Iteration  14: 7513936.456 ops/s
Iteration  15: 7602805.205 ops/s
Iteration  16: 7233377.318 ops/s
Iteration  17: 7103724.101 ops/s
Iteration  18: 7504977.973 ops/s
Iteration  19: 7335765.761 ops/s
Iteration  20: 7540455.215 ops/s
Iteration  21: 7052618.950 ops/s
Iteration  22: 7413816.456 ops/s
Iteration  23: 7173320.679 ops/s
Iteration  24: 7449318.185 ops/s
Iteration  25: 7183551.379 ops/s
Iteration  26: 7380675.059 ops/s
Iteration  27: 7656106.283 ops/s
Iteration  28: 5613061.014 ops/s
Iteration  29: 7346989.200 ops/s
Iteration  30: 7630962.876 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromRunnableTest._Benchmark.benchmark_cancelWhileRunning":
  7316315.201 ±(99.9%) 251023.354 ops/s [Average]
  (min, avg, max) = (5613061.014, 7316315.201, 7732879.287), stdev = 375719.967
  CI (99.9%): [7065291.847, 7567338.555] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score        Error  Units
FlowableFromRunnableTest._Benchmark.benchmark_cancelWhileRunning  thrpt   30  7316315.201 ± 251023.354  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableZipTests._Benchmark.benchmark_zipWithDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableZipTests._Benchmark.benchmark_zipWithDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 523958.781 ops/s
# Warmup Iteration   2: 1640308.553 ops/s
# Warmup Iteration   3: 1997487.658 ops/s
# Warmup Iteration   4: 2143077.289 ops/s
# Warmup Iteration   5: 2260154.503 ops/s
# Warmup Iteration   6: 2189247.332 ops/s
# Warmup Iteration   7: 2231775.602 ops/s
# Warmup Iteration   8: 2202453.891 ops/s
# Warmup Iteration   9: 2188937.682 ops/s
# Warmup Iteration  10: 2216565.679 ops/s
# Warmup Iteration  11: 2162664.890 ops/s
# Warmup Iteration  12: 2250519.110 ops/s
# Warmup Iteration  13: 2199154.176 ops/s
# Warmup Iteration  14: 2231479.323 ops/s
# Warmup Iteration  15: 2177922.963 ops/s
# Warmup Iteration  16: 2200546.112 ops/s
# Warmup Iteration  17: 2227966.493 ops/s
# Warmup Iteration  18: 2255931.708 ops/s
# Warmup Iteration  19: 2084572.897 ops/s
# Warmup Iteration  20: 2306716.220 ops/s
# Warmup Iteration  21: 2206516.279 ops/s
# Warmup Iteration  22: 2167197.941 ops/s
# Warmup Iteration  23: 2302542.280 ops/s
# Warmup Iteration  24: 2155926.656 ops/s
# Warmup Iteration  25: 2228422.188 ops/s
# Warmup Iteration  26: 2263503.175 ops/s
# Warmup Iteration  27: 2180506.413 ops/s
# Warmup Iteration  28: 2163436.542 ops/s
# Warmup Iteration  29: 2254805.292 ops/s
# Warmup Iteration  30: 2202286.564 ops/s
Iteration   1: 2313300.043 ops/s
Iteration   2: 2266951.539 ops/s
Iteration   3: 2149943.314 ops/s
Iteration   4: 2317524.428 ops/s
Iteration   5: 2152117.058 ops/s
Iteration   6: 2159415.343 ops/s
Iteration   7: 2268314.627 ops/s
Iteration   8: 2188903.008 ops/s
Iteration   9: 2267485.197 ops/s
Iteration  10: 2186177.817 ops/s
Iteration  11: 2282391.832 ops/s
Iteration  12: 2160315.755 ops/s
Iteration  13: 2228037.240 ops/s
Iteration  14: 2247518.203 ops/s
Iteration  15: 2250416.016 ops/s
Iteration  16: 2118077.920 ops/s
Iteration  17: 2241056.596 ops/s
Iteration  18: 2234083.782 ops/s
Iteration  19: 2203333.298 ops/s
Iteration  20: 2298392.803 ops/s
Iteration  21: 2149385.918 ops/s
Iteration  22: 2327006.307 ops/s
Iteration  23: 2106951.536 ops/s
Iteration  24: 2227601.654 ops/s
Iteration  25: 2186395.308 ops/s
Iteration  26: 2255813.519 ops/s
Iteration  27: 2287798.910 ops/s
Iteration  28: 2162147.626 ops/s
Iteration  29: 2160743.366 ops/s
Iteration  30: 2231964.534 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableZipTests._Benchmark.benchmark_zipWithDelayError":
  2220985.483 ±(99.9%) 41188.471 ops/s [Average]
  (min, avg, max) = (2106951.536, 2220985.483, 2327006.307), stdev = 61648.969
  CI (99.9%): [2179797.013, 2262173.954] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
FlowableZipTests._Benchmark.benchmark_zipWithDelayError  thrpt   30  2220985.483 ± 41188.471  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryTest._Benchmark.benchmark_shouldDisposeInnerFlowable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryTest._Benchmark.benchmark_shouldDisposeInnerFlowable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 54404.072 ops/s
# Warmup Iteration   2: 179528.489 ops/s
# Warmup Iteration   3: 353439.412 ops/s
# Warmup Iteration   4: 351071.212 ops/s
# Warmup Iteration   5: 339111.354 ops/s
# Warmup Iteration   6: 386149.964 ops/s
# Warmup Iteration   7: 364591.894 ops/s
# Warmup Iteration   8: 397069.877 ops/s
# Warmup Iteration   9: 381607.998 ops/s
# Warmup Iteration  10: 393420.127 ops/s
# Warmup Iteration  11: 392688.037 ops/s
# Warmup Iteration  12: 374075.802 ops/s
# Warmup Iteration  13: 406511.377 ops/s
# Warmup Iteration  14: 372125.041 ops/s
# Warmup Iteration  15: 403634.686 ops/s
# Warmup Iteration  16: 373583.355 ops/s
# Warmup Iteration  17: 407134.027 ops/s
# Warmup Iteration  18: 389176.805 ops/s
# Warmup Iteration  19: 402248.728 ops/s
# Warmup Iteration  20: 416417.227 ops/s
# Warmup Iteration  21: 398679.413 ops/s
# Warmup Iteration  22: 402718.141 ops/s
# Warmup Iteration  23: 420370.137 ops/s
# Warmup Iteration  24: 379901.943 ops/s
# Warmup Iteration  25: 417057.262 ops/s
# Warmup Iteration  26: 389902.540 ops/s
# Warmup Iteration  27: 396398.341 ops/s
# Warmup Iteration  28: 410868.383 ops/s
# Warmup Iteration  29: 394009.156 ops/s
# Warmup Iteration  30: 416298.582 ops/s
Iteration   1: 414057.560 ops/s
Iteration   2: 382718.988 ops/s
Iteration   3: 402440.950 ops/s
Iteration   4: 396086.840 ops/s
Iteration   5: 396324.114 ops/s
Iteration   6: 414924.700 ops/s
Iteration   7: 388760.398 ops/s
Iteration   8: 418021.332 ops/s
Iteration   9: 403373.098 ops/s
Iteration  10: 390746.823 ops/s
Iteration  11: 407666.714 ops/s
Iteration  12: 399561.003 ops/s
Iteration  13: 391589.820 ops/s
Iteration  14: 393437.425 ops/s
Iteration  15: 404414.974 ops/s
Iteration  16: 413377.956 ops/s
Iteration  17: 391313.880 ops/s
Iteration  18: 407027.080 ops/s
Iteration  19: 395701.878 ops/s
Iteration  20: 396715.191 ops/s
Iteration  21: 404407.071 ops/s
Iteration  22: 390356.057 ops/s
Iteration  23: 322395.009 ops/s
Iteration  24: 408197.068 ops/s
Iteration  25: 396558.670 ops/s
Iteration  26: 407516.587 ops/s
Iteration  27: 397290.115 ops/s
Iteration  28: 396234.762 ops/s
Iteration  29: 403886.677 ops/s
Iteration  30: 391501.686 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryTest._Benchmark.benchmark_shouldDisposeInnerFlowable":
  397553.481 ±(99.9%) 11115.446 ops/s [Average]
  (min, avg, max) = (322395.009, 397553.481, 418021.332), stdev = 16637.078
  CI (99.9%): [386438.034, 408668.927] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score       Error  Units
FlowableRetryTest._Benchmark.benchmark_shouldDisposeInnerFlowable  thrpt   30  397553.481 ± 11115.446  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableZipTests._Benchmark.benchmark_zipWithDelayErrorBufferSize$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableZipTests._Benchmark.benchmark_zipWithDelayErrorBufferSize

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 365567.515 ops/s
# Warmup Iteration   2: 1747972.417 ops/s
# Warmup Iteration   3: 2148258.570 ops/s
# Warmup Iteration   4: 2251879.200 ops/s
# Warmup Iteration   5: 1984912.600 ops/s
# Warmup Iteration   6: 2054598.230 ops/s
# Warmup Iteration   7: 2271141.658 ops/s
# Warmup Iteration   8: 2247872.959 ops/s
# Warmup Iteration   9: 2263742.024 ops/s
# Warmup Iteration  10: 2288803.197 ops/s
# Warmup Iteration  11: 2214486.118 ops/s
# Warmup Iteration  12: 2239742.075 ops/s
# Warmup Iteration  13: 2203242.398 ops/s
# Warmup Iteration  14: 2241479.777 ops/s
# Warmup Iteration  15: 2257886.295 ops/s
# Warmup Iteration  16: 2241591.918 ops/s
# Warmup Iteration  17: 2294858.678 ops/s
# Warmup Iteration  18: 2171543.456 ops/s
# Warmup Iteration  19: 2214408.549 ops/s
# Warmup Iteration  20: 2265029.806 ops/s
# Warmup Iteration  21: 2177012.240 ops/s
# Warmup Iteration  22: 2272848.367 ops/s
# Warmup Iteration  23: 2187710.168 ops/s
# Warmup Iteration  24: 2202456.953 ops/s
# Warmup Iteration  25: 2196265.941 ops/s
# Warmup Iteration  26: 2202011.713 ops/s
# Warmup Iteration  27: 2313320.335 ops/s
# Warmup Iteration  28: 2235612.834 ops/s
# Warmup Iteration  29: 2275492.669 ops/s
# Warmup Iteration  30: 2181025.914 ops/s
Iteration   1: 2252769.405 ops/s
Iteration   2: 2219045.463 ops/s
Iteration   3: 2196285.779 ops/s
Iteration   4: 2239369.979 ops/s
Iteration   5: 2332982.512 ops/s
Iteration   6: 2281418.781 ops/s
Iteration   7: 2137317.210 ops/s
Iteration   8: 2282314.927 ops/s
Iteration   9: 2256887.797 ops/s
Iteration  10: 2173200.817 ops/s
Iteration  11: 2293578.053 ops/s
Iteration  12: 2230285.418 ops/s
Iteration  13: 2146123.718 ops/s
Iteration  14: 2203747.036 ops/s
Iteration  15: 2346453.963 ops/s
Iteration  16: 2211159.609 ops/s
Iteration  17: 2190072.430 ops/s
Iteration  18: 2244295.683 ops/s
Iteration  19: 2210604.195 ops/s
Iteration  20: 2284320.154 ops/s
Iteration  21: 2112508.847 ops/s
Iteration  22: 2224126.902 ops/s
Iteration  23: 2292688.800 ops/s
Iteration  24: 2172358.206 ops/s
Iteration  25: 2309931.501 ops/s
Iteration  26: 2236052.428 ops/s
Iteration  27: 2295576.723 ops/s
Iteration  28: 2284881.959 ops/s
Iteration  29: 2178207.184 ops/s
Iteration  30: 2299368.611 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableZipTests._Benchmark.benchmark_zipWithDelayErrorBufferSize":
  2237931.136 ±(99.9%) 39552.062 ops/s [Average]
  (min, avg, max) = (2112508.847, 2237931.136, 2346453.963), stdev = 59199.669
  CI (99.9%): [2198379.074, 2277483.199] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
FlowableZipTests._Benchmark.benchmark_zipWithDelayErrorBufferSize  thrpt   30  2237931.136 ± 39552.062  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromTest._Benchmark.benchmark_withEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromTest._Benchmark.benchmark_withEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 679574.373 ops/s
# Warmup Iteration   2: 2480360.767 ops/s
# Warmup Iteration   3: 2851941.578 ops/s
# Warmup Iteration   4: 3289295.787 ops/s
# Warmup Iteration   5: 3309772.046 ops/s
# Warmup Iteration   6: 3224409.783 ops/s
# Warmup Iteration   7: 3330303.932 ops/s
# Warmup Iteration   8: 3202620.837 ops/s
# Warmup Iteration   9: 3313021.637 ops/s
# Warmup Iteration  10: 3313282.943 ops/s
# Warmup Iteration  11: 3290532.060 ops/s
# Warmup Iteration  12: 3326930.096 ops/s
# Warmup Iteration  13: 3410551.032 ops/s
# Warmup Iteration  14: 3166321.365 ops/s
# Warmup Iteration  15: 3425845.240 ops/s
# Warmup Iteration  16: 3431295.575 ops/s
# Warmup Iteration  17: 3262921.376 ops/s
# Warmup Iteration  18: 3230356.954 ops/s
# Warmup Iteration  19: 3436447.946 ops/s
# Warmup Iteration  20: 3276265.171 ops/s
# Warmup Iteration  21: 3343821.726 ops/s
# Warmup Iteration  22: 3403257.673 ops/s
# Warmup Iteration  23: 3210940.938 ops/s
# Warmup Iteration  24: 3272384.962 ops/s
# Warmup Iteration  25: 3446992.570 ops/s
# Warmup Iteration  26: 3213508.223 ops/s
# Warmup Iteration  27: 3357787.350 ops/s
# Warmup Iteration  28: 3292660.371 ops/s
# Warmup Iteration  29: 3254260.482 ops/s
# Warmup Iteration  30: 3436687.464 ops/s
Iteration   1: 3214410.857 ops/s
Iteration   2: 3263718.786 ops/s
Iteration   3: 3365294.793 ops/s
Iteration   4: 3373419.013 ops/s
Iteration   5: 3180828.725 ops/s
Iteration   6: 3329472.089 ops/s
Iteration   7: 3159469.378 ops/s
Iteration   8: 3313776.063 ops/s
Iteration   9: 3377150.132 ops/s
Iteration  10: 3157812.648 ops/s
Iteration  11: 3276590.909 ops/s
Iteration  12: 3238921.209 ops/s
Iteration  13: 3299273.455 ops/s
Iteration  14: 3322281.446 ops/s
Iteration  15: 3282827.006 ops/s
Iteration  16: 3182435.222 ops/s
Iteration  17: 3363123.145 ops/s
Iteration  18: 2744225.574 ops/s
Iteration  19: 3372802.219 ops/s
Iteration  20: 3186631.862 ops/s
Iteration  21: 3334334.298 ops/s
Iteration  22: 3236445.723 ops/s
Iteration  23: 3254750.571 ops/s
Iteration  24: 3261668.811 ops/s
Iteration  25: 3318696.541 ops/s
Iteration  26: 3356095.390 ops/s
Iteration  27: 3257043.863 ops/s
Iteration  28: 3268166.726 ops/s
Iteration  29: 3300684.650 ops/s
Iteration  30: 3303747.803 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromTest._Benchmark.benchmark_withEmpty":
  3263203.297 ±(99.9%) 78844.784 ops/s [Average]
  (min, avg, max) = (2744225.574, 3263203.297, 3377150.132), stdev = 118011.170
  CI (99.9%): [3184358.513, 3342048.081] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
FlowableWithLatestFromTest._Benchmark.benchmark_withEmpty  thrpt   30  3263203.297 ± 78844.784  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrDefaultTest._Benchmark.benchmark_firstCancels$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrDefaultTest._Benchmark.benchmark_firstCancels

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 798326.373 ops/s
# Warmup Iteration   2: 2102741.418 ops/s
# Warmup Iteration   3: 3347595.257 ops/s
# Warmup Iteration   4: 3596377.149 ops/s
# Warmup Iteration   5: 3611059.506 ops/s
# Warmup Iteration   6: 3650877.715 ops/s
# Warmup Iteration   7: 4029574.066 ops/s
# Warmup Iteration   8: 3709690.708 ops/s
# Warmup Iteration   9: 3784625.348 ops/s
# Warmup Iteration  10: 3798182.542 ops/s
# Warmup Iteration  11: 3834447.174 ops/s
# Warmup Iteration  12: 4017853.549 ops/s
# Warmup Iteration  13: 3795630.403 ops/s
# Warmup Iteration  14: 3721710.403 ops/s
# Warmup Iteration  15: 3942014.151 ops/s
# Warmup Iteration  16: 3678748.548 ops/s
# Warmup Iteration  17: 3950211.144 ops/s
# Warmup Iteration  18: 3918713.209 ops/s
# Warmup Iteration  19: 3902315.125 ops/s
# Warmup Iteration  20: 3874423.853 ops/s
# Warmup Iteration  21: 3847006.967 ops/s
# Warmup Iteration  22: 3900601.519 ops/s
# Warmup Iteration  23: 3790819.255 ops/s
# Warmup Iteration  24: 3916564.812 ops/s
# Warmup Iteration  25: 3953475.193 ops/s
# Warmup Iteration  26: 3706350.585 ops/s
# Warmup Iteration  27: 3935617.618 ops/s
# Warmup Iteration  28: 3871600.454 ops/s
# Warmup Iteration  29: 3906495.993 ops/s
# Warmup Iteration  30: 4019442.447 ops/s
Iteration   1: 3798092.606 ops/s
Iteration   2: 3960707.806 ops/s
Iteration   3: 3717971.748 ops/s
Iteration   4: 3860871.044 ops/s
Iteration   5: 3747169.399 ops/s
Iteration   6: 3936949.855 ops/s
Iteration   7: 3913276.350 ops/s
Iteration   8: 3812463.812 ops/s
Iteration   9: 3840639.765 ops/s
Iteration  10: 3874421.223 ops/s
Iteration  11: 3881716.101 ops/s
Iteration  12: 4030332.944 ops/s
Iteration  13: 3762064.968 ops/s
Iteration  14: 3744676.036 ops/s
Iteration  15: 3945358.248 ops/s
Iteration  16: 3888132.218 ops/s
Iteration  17: 4031513.968 ops/s
Iteration  18: 3790554.883 ops/s
Iteration  19: 3841890.243 ops/s
Iteration  20: 3915294.618 ops/s
Iteration  21: 3928621.451 ops/s
Iteration  22: 3877327.892 ops/s
Iteration  23: 3935092.054 ops/s
Iteration  24: 3729155.739 ops/s
Iteration  25: 3860064.427 ops/s
Iteration  26: 3836026.830 ops/s
Iteration  27: 4027669.091 ops/s
Iteration  28: 3802972.948 ops/s
Iteration  29: 3834002.519 ops/s
Iteration  30: 3926541.679 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrDefaultTest._Benchmark.benchmark_firstCancels":
  3868385.749 ±(99.9%) 58093.979 ops/s [Average]
  (min, avg, max) = (3717971.748, 3868385.749, 4031513.968), stdev = 86952.340
  CI (99.9%): [3810291.770, 3926479.728] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score       Error  Units
FlowableStageSubscriberOrDefaultTest._Benchmark.benchmark_firstCancels  thrpt   30  3868385.749 ± 58093.979  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrErrorTest._Benchmark.benchmark_firstCancels$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrErrorTest._Benchmark.benchmark_firstCancels

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 670145.456 ops/s
# Warmup Iteration   2: 2395195.566 ops/s
# Warmup Iteration   3: 3560608.123 ops/s
# Warmup Iteration   4: 3488045.892 ops/s
# Warmup Iteration   5: 3248829.418 ops/s
# Warmup Iteration   6: 3809998.000 ops/s
# Warmup Iteration   7: 3759419.043 ops/s
# Warmup Iteration   8: 3748714.753 ops/s
# Warmup Iteration   9: 3744394.330 ops/s
# Warmup Iteration  10: 3754897.273 ops/s
# Warmup Iteration  11: 3729501.869 ops/s
# Warmup Iteration  12: 3675609.461 ops/s
# Warmup Iteration  13: 3703030.161 ops/s
# Warmup Iteration  14: 3749892.584 ops/s
# Warmup Iteration  15: 3627849.822 ops/s
# Warmup Iteration  16: 3821483.423 ops/s
# Warmup Iteration  17: 3706769.689 ops/s
# Warmup Iteration  18: 3801222.459 ops/s
# Warmup Iteration  19: 3845915.859 ops/s
# Warmup Iteration  20: 3656552.676 ops/s
# Warmup Iteration  21: 3942869.564 ops/s
# Warmup Iteration  22: 3676431.973 ops/s
# Warmup Iteration  23: 3861583.083 ops/s
# Warmup Iteration  24: 3745631.553 ops/s
# Warmup Iteration  25: 3757767.850 ops/s
# Warmup Iteration  26: 3743464.412 ops/s
# Warmup Iteration  27: 3894605.174 ops/s
# Warmup Iteration  28: 3716999.352 ops/s
# Warmup Iteration  29: 3799110.694 ops/s
# Warmup Iteration  30: 3872561.103 ops/s
Iteration   1: 3711120.632 ops/s
Iteration   2: 3906381.352 ops/s
Iteration   3: 3716420.982 ops/s
Iteration   4: 3747358.095 ops/s
Iteration   5: 3706608.739 ops/s
Iteration   6: 3701180.866 ops/s
Iteration   7: 3835490.754 ops/s
Iteration   8: 3802190.200 ops/s
Iteration   9: 3904096.362 ops/s
Iteration  10: 3757220.264 ops/s
Iteration  11: 3831568.565 ops/s
Iteration  12: 3713543.677 ops/s
Iteration  13: 3149641.746 ops/s
Iteration  14: 3854742.774 ops/s
Iteration  15: 3755257.285 ops/s
Iteration  16: 3802126.243 ops/s
Iteration  17: 3778942.858 ops/s
Iteration  18: 3768665.605 ops/s
Iteration  19: 3882577.492 ops/s
Iteration  20: 3977538.785 ops/s
Iteration  21: 3628962.949 ops/s
Iteration  22: 3723693.026 ops/s
Iteration  23: 3857372.906 ops/s
Iteration  24: 3615514.547 ops/s
Iteration  25: 3947140.994 ops/s
Iteration  26: 3764808.034 ops/s
Iteration  27: 3847108.117 ops/s
Iteration  28: 3881060.713 ops/s
Iteration  29: 3741299.685 ops/s
Iteration  30: 4008434.212 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrErrorTest._Benchmark.benchmark_firstCancels":
  3777268.949 ±(99.9%) 101784.110 ops/s [Average]
  (min, avg, max) = (3149641.746, 3777268.949, 4008434.212), stdev = 152345.676
  CI (99.9%): [3675484.839, 3879053.059] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score        Error  Units
FlowableStageSubscriberOrErrorTest._Benchmark.benchmark_firstCancels  thrpt   30  3777268.949 ± 101784.110  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableAmbTest._Benchmark.benchmark_ambArrayOrder$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableAmbTest._Benchmark.benchmark_ambArrayOrder

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 110887.981 ops/s
# Warmup Iteration   2: 417185.910 ops/s
# Warmup Iteration   3: 581449.082 ops/s
# Warmup Iteration   4: 572814.188 ops/s
# Warmup Iteration   5: 595271.222 ops/s
# Warmup Iteration   6: 549132.638 ops/s
# Warmup Iteration   7: 582265.295 ops/s
# Warmup Iteration   8: 558352.390 ops/s
# Warmup Iteration   9: 546259.530 ops/s
# Warmup Iteration  10: 557880.060 ops/s
# Warmup Iteration  11: 574651.845 ops/s
# Warmup Iteration  12: 585689.888 ops/s
# Warmup Iteration  13: 572717.538 ops/s
# Warmup Iteration  14: 595081.595 ops/s
# Warmup Iteration  15: 548581.622 ops/s
# Warmup Iteration  16: 589690.902 ops/s
# Warmup Iteration  17: 593826.626 ops/s
# Warmup Iteration  18: 608594.630 ops/s
# Warmup Iteration  19: 614170.925 ops/s
# Warmup Iteration  20: 607142.868 ops/s
# Warmup Iteration  21: 626151.408 ops/s
# Warmup Iteration  22: 590172.788 ops/s
# Warmup Iteration  23: 609134.401 ops/s
# Warmup Iteration  24: 588841.924 ops/s
# Warmup Iteration  25: 604210.495 ops/s
# Warmup Iteration  26: 603324.881 ops/s
# Warmup Iteration  27: 571358.857 ops/s
# Warmup Iteration  28: 598432.366 ops/s
# Warmup Iteration  29: 625083.189 ops/s
# Warmup Iteration  30: 606590.123 ops/s
Iteration   1: 589044.642 ops/s
Iteration   2: 600293.058 ops/s
Iteration   3: 615584.877 ops/s
Iteration   4: 626657.284 ops/s
Iteration   5: 605653.911 ops/s
Iteration   6: 624698.837 ops/s
Iteration   7: 594630.841 ops/s
Iteration   8: 624547.394 ops/s
Iteration   9: 599707.451 ops/s
Iteration  10: 630354.702 ops/s
Iteration  11: 566114.444 ops/s
Iteration  12: 609496.228 ops/s
Iteration  13: 608966.799 ops/s
Iteration  14: 611346.846 ops/s
Iteration  15: 636794.602 ops/s
Iteration  16: 593009.648 ops/s
Iteration  17: 613449.594 ops/s
Iteration  18: 612250.260 ops/s
Iteration  19: 615671.873 ops/s
Iteration  20: 610269.261 ops/s
Iteration  21: 605315.812 ops/s
Iteration  22: 625420.257 ops/s
Iteration  23: 600440.465 ops/s
Iteration  24: 623787.667 ops/s
Iteration  25: 576376.085 ops/s
Iteration  26: 593415.274 ops/s
Iteration  27: 615385.681 ops/s
Iteration  28: 586094.014 ops/s
Iteration  29: 614006.553 ops/s
Iteration  30: 590587.064 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableAmbTest._Benchmark.benchmark_ambArrayOrder":
  607312.381 ±(99.9%) 10924.451 ops/s [Average]
  (min, avg, max) = (566114.444, 607312.381, 636794.602), stdev = 16351.205
  CI (99.9%): [596387.930, 618236.831] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score       Error  Units
FlowableAmbTest._Benchmark.benchmark_ambArrayOrder  thrpt   30  607312.381 ± 10924.451  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStreamTest._Benchmark.benchmark_justHidden$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStreamTest._Benchmark.benchmark_justHidden

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 183684.443 ops/s
# Warmup Iteration   2: 871425.989 ops/s
# Warmup Iteration   3: 1343618.249 ops/s
# Warmup Iteration   4: 1557392.436 ops/s
# Warmup Iteration   5: 1609563.411 ops/s
# Warmup Iteration   6: 1595152.203 ops/s
# Warmup Iteration   7: 1546091.154 ops/s
# Warmup Iteration   8: 1552904.158 ops/s
# Warmup Iteration   9: 1552293.332 ops/s
# Warmup Iteration  10: 1626117.044 ops/s
# Warmup Iteration  11: 1527544.880 ops/s
# Warmup Iteration  12: 1562584.824 ops/s
# Warmup Iteration  13: 1619801.556 ops/s
# Warmup Iteration  14: 1513586.932 ops/s
# Warmup Iteration  15: 1666044.210 ops/s
# Warmup Iteration  16: 1544408.602 ops/s
# Warmup Iteration  17: 1621622.596 ops/s
# Warmup Iteration  18: 1532503.106 ops/s
# Warmup Iteration  19: 1590972.070 ops/s
# Warmup Iteration  20: 1622567.418 ops/s
# Warmup Iteration  21: 1547203.505 ops/s
# Warmup Iteration  22: 1566625.555 ops/s
# Warmup Iteration  23: 1601895.294 ops/s
# Warmup Iteration  24: 1611802.255 ops/s
# Warmup Iteration  25: 1543069.184 ops/s
# Warmup Iteration  26: 1566731.176 ops/s
# Warmup Iteration  27: 1588413.679 ops/s
# Warmup Iteration  28: 1538632.032 ops/s
# Warmup Iteration  29: 1582154.293 ops/s
# Warmup Iteration  30: 1542395.845 ops/s
Iteration   1: 1546638.135 ops/s
Iteration   2: 1604814.392 ops/s
Iteration   3: 1604874.336 ops/s
Iteration   4: 1598107.297 ops/s
Iteration   5: 1555136.401 ops/s
Iteration   6: 1550400.265 ops/s
Iteration   7: 1513539.582 ops/s
Iteration   8: 1410636.067 ops/s
Iteration   9: 1531698.210 ops/s
Iteration  10: 1576241.261 ops/s
Iteration  11: 1547802.119 ops/s
Iteration  12: 1582293.695 ops/s
Iteration  13: 1618944.872 ops/s
Iteration  14: 1523944.213 ops/s
Iteration  15: 1592780.252 ops/s
Iteration  16: 1630293.054 ops/s
Iteration  17: 1509715.310 ops/s
Iteration  18: 1610222.749 ops/s
Iteration  19: 1494364.626 ops/s
Iteration  20: 1537894.304 ops/s
Iteration  21: 1592322.637 ops/s
Iteration  22: 1581375.757 ops/s
Iteration  23: 1634667.386 ops/s
Iteration  24: 1574990.876 ops/s
Iteration  25: 1571146.872 ops/s
Iteration  26: 1529667.290 ops/s
Iteration  27: 1575634.886 ops/s
Iteration  28: 1532674.859 ops/s
Iteration  29: 1598649.131 ops/s
Iteration  30: 1627798.454 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStreamTest._Benchmark.benchmark_justHidden":
  1565308.976 ±(99.9%) 32153.513 ops/s [Average]
  (min, avg, max) = (1410636.067, 1565308.976, 1634667.386), stdev = 48125.868
  CI (99.9%): [1533155.463, 1597462.489] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
FlowableFlatMapStreamTest._Benchmark.benchmark_justHidden  thrpt   30  1565308.976 ± 32153.513  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableAmbTest._Benchmark.benchmark_ambWithOrder$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableAmbTest._Benchmark.benchmark_ambWithOrder

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 142335.260 ops/s
# Warmup Iteration   2: 503868.787 ops/s
# Warmup Iteration   3: 510072.233 ops/s
# Warmup Iteration   4: 527041.429 ops/s
# Warmup Iteration   5: 604205.637 ops/s
# Warmup Iteration   6: 604127.855 ops/s
# Warmup Iteration   7: 589179.565 ops/s
# Warmup Iteration   8: 602818.904 ops/s
# Warmup Iteration   9: 581763.226 ops/s
# Warmup Iteration  10: 588822.864 ops/s
# Warmup Iteration  11: 589103.841 ops/s
# Warmup Iteration  12: 613141.273 ops/s
# Warmup Iteration  13: 588006.705 ops/s
# Warmup Iteration  14: 609917.228 ops/s
# Warmup Iteration  15: 573612.602 ops/s
# Warmup Iteration  16: 603897.290 ops/s
# Warmup Iteration  17: 632698.525 ops/s
# Warmup Iteration  18: 611207.589 ops/s
# Warmup Iteration  19: 627343.061 ops/s
# Warmup Iteration  20: 632125.714 ops/s
# Warmup Iteration  21: 624418.034 ops/s
# Warmup Iteration  22: 637365.984 ops/s
# Warmup Iteration  23: 601788.038 ops/s
# Warmup Iteration  24: 634988.205 ops/s
# Warmup Iteration  25: 627428.371 ops/s
# Warmup Iteration  26: 622414.959 ops/s
# Warmup Iteration  27: 647949.440 ops/s
# Warmup Iteration  28: 604255.566 ops/s
# Warmup Iteration  29: 636854.837 ops/s
# Warmup Iteration  30: 617430.183 ops/s
Iteration   1: 629748.876 ops/s
Iteration   2: 620157.415 ops/s
Iteration   3: 630637.785 ops/s
Iteration   4: 636312.154 ops/s
Iteration   5: 612090.012 ops/s
Iteration   6: 642726.657 ops/s
Iteration   7: 648230.292 ops/s
Iteration   8: 605451.359 ops/s
Iteration   9: 653494.272 ops/s
Iteration  10: 630960.797 ops/s
Iteration  11: 609637.777 ops/s
Iteration  12: 657666.591 ops/s
Iteration  13: 608125.201 ops/s
Iteration  14: 634384.501 ops/s
Iteration  15: 627123.762 ops/s
Iteration  16: 626761.842 ops/s
Iteration  17: 627784.014 ops/s
Iteration  18: 620473.275 ops/s
Iteration  19: 620594.914 ops/s
Iteration  20: 662647.014 ops/s
Iteration  21: 599550.495 ops/s
Iteration  22: 630992.666 ops/s
Iteration  23: 642907.282 ops/s
Iteration  24: 606363.003 ops/s
Iteration  25: 652022.291 ops/s
Iteration  26: 640193.096 ops/s
Iteration  27: 619861.226 ops/s
Iteration  28: 624956.748 ops/s
Iteration  29: 616157.603 ops/s
Iteration  30: 649979.430 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableAmbTest._Benchmark.benchmark_ambWithOrder":
  629599.745 ±(99.9%) 11104.285 ops/s [Average]
  (min, avg, max) = (599550.495, 629599.745, 662647.014), stdev = 16620.372
  CI (99.9%): [618495.460, 640704.030] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt       Score       Error  Units
FlowableAmbTest._Benchmark.benchmark_ambWithOrder  thrpt   30  629599.745 ± 11104.285  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOnTest._Benchmark.benchmark_cancelBeforeActualSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOnTest._Benchmark.benchmark_cancelBeforeActualSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 503490.709 ops/s
# Warmup Iteration   2: 2360239.618 ops/s
# Warmup Iteration   3: 3606754.342 ops/s
# Warmup Iteration   4: 3803435.058 ops/s
# Warmup Iteration   5: 4099344.939 ops/s
# Warmup Iteration   6: 3991339.897 ops/s
# Warmup Iteration   7: 3921602.277 ops/s
# Warmup Iteration   8: 3972518.121 ops/s
# Warmup Iteration   9: 3950676.558 ops/s
# Warmup Iteration  10: 3917712.782 ops/s
# Warmup Iteration  11: 3832658.350 ops/s
# Warmup Iteration  12: 4065888.023 ops/s
# Warmup Iteration  13: 3883406.465 ops/s
# Warmup Iteration  14: 4062422.630 ops/s
# Warmup Iteration  15: 3889327.863 ops/s
# Warmup Iteration  16: 3928088.623 ops/s
# Warmup Iteration  17: 4000729.589 ops/s
# Warmup Iteration  18: 3832756.663 ops/s
# Warmup Iteration  19: 3824483.263 ops/s
# Warmup Iteration  20: 3905201.855 ops/s
# Warmup Iteration  21: 3923383.372 ops/s
# Warmup Iteration  22: 3945649.818 ops/s
# Warmup Iteration  23: 3834252.336 ops/s
# Warmup Iteration  24: 3786469.678 ops/s
# Warmup Iteration  25: 3992149.397 ops/s
# Warmup Iteration  26: 3797586.854 ops/s
# Warmup Iteration  27: 3880719.657 ops/s
# Warmup Iteration  28: 3980203.466 ops/s
# Warmup Iteration  29: 3866049.353 ops/s
# Warmup Iteration  30: 4068796.034 ops/s
Iteration   1: 4002529.889 ops/s
Iteration   2: 3275949.284 ops/s
Iteration   3: 3949348.847 ops/s
Iteration   4: 3810822.067 ops/s
Iteration   5: 3957891.353 ops/s
Iteration   6: 3774038.925 ops/s
Iteration   7: 3907665.249 ops/s
Iteration   8: 3952515.920 ops/s
Iteration   9: 3852300.996 ops/s
Iteration  10: 4025216.605 ops/s
Iteration  11: 3762209.747 ops/s
Iteration  12: 4052210.399 ops/s
Iteration  13: 3862158.744 ops/s
Iteration  14: 3759276.735 ops/s
Iteration  15: 4020643.857 ops/s
Iteration  16: 3945295.880 ops/s
Iteration  17: 3817301.772 ops/s
Iteration  18: 3971014.595 ops/s
Iteration  19: 3931724.814 ops/s
Iteration  20: 3753632.021 ops/s
Iteration  21: 4163436.525 ops/s
Iteration  22: 3719367.319 ops/s
Iteration  23: 3933925.578 ops/s
Iteration  24: 3796360.915 ops/s
Iteration  25: 4062123.783 ops/s
Iteration  26: 3767841.849 ops/s
Iteration  27: 4018259.869 ops/s
Iteration  28: 3923598.811 ops/s
Iteration  29: 3854253.176 ops/s
Iteration  30: 3895654.902 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOnTest._Benchmark.benchmark_cancelBeforeActualSubscribe":
  3883952.348 ±(99.9%) 106091.071 ops/s [Average]
  (min, avg, max) = (3275949.284, 3883952.348, 4163436.525), stdev = 158792.133
  CI (99.9%): [3777861.277, 3990043.419] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score        Error  Units
FlowableSubscribeOnTest._Benchmark.benchmark_cancelBeforeActualSubscribe  thrpt   30  3883952.348 ± 106091.071  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualTest._Benchmark.benchmark_simpleInequal$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualTest._Benchmark.benchmark_simpleInequal

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 545052.908 ops/s
# Warmup Iteration   2: 2166325.028 ops/s
# Warmup Iteration   3: 2885618.405 ops/s
# Warmup Iteration   4: 3258034.073 ops/s
# Warmup Iteration   5: 3527202.988 ops/s
# Warmup Iteration   6: 3330797.059 ops/s
# Warmup Iteration   7: 3401148.009 ops/s
# Warmup Iteration   8: 3428440.597 ops/s
# Warmup Iteration   9: 3383136.090 ops/s
# Warmup Iteration  10: 3399834.118 ops/s
# Warmup Iteration  11: 3470829.522 ops/s
# Warmup Iteration  12: 3402583.643 ops/s
# Warmup Iteration  13: 3540449.583 ops/s
# Warmup Iteration  14: 3502312.607 ops/s
# Warmup Iteration  15: 3295327.952 ops/s
# Warmup Iteration  16: 3471806.289 ops/s
# Warmup Iteration  17: 3311434.644 ops/s
# Warmup Iteration  18: 3455866.043 ops/s
# Warmup Iteration  19: 3368378.429 ops/s
# Warmup Iteration  20: 3564985.565 ops/s
# Warmup Iteration  21: 3386087.640 ops/s
# Warmup Iteration  22: 3349916.789 ops/s
# Warmup Iteration  23: 3505508.248 ops/s
# Warmup Iteration  24: 3266059.192 ops/s
# Warmup Iteration  25: 3591118.303 ops/s
# Warmup Iteration  26: 3341134.608 ops/s
# Warmup Iteration  27: 3315032.317 ops/s
# Warmup Iteration  28: 3534309.481 ops/s
# Warmup Iteration  29: 3524906.047 ops/s
# Warmup Iteration  30: 3393724.012 ops/s
Iteration   1: 3423243.242 ops/s
Iteration   2: 3390382.946 ops/s
Iteration   3: 3539269.394 ops/s
Iteration   4: 3348768.216 ops/s
Iteration   5: 3305656.928 ops/s
Iteration   6: 3370214.582 ops/s
Iteration   7: 3350323.340 ops/s
Iteration   8: 3298112.448 ops/s
Iteration   9: 3428768.534 ops/s
Iteration  10: 3418514.506 ops/s
Iteration  11: 3449713.979 ops/s
Iteration  12: 3486563.072 ops/s
Iteration  13: 3358683.747 ops/s
Iteration  14: 3527991.625 ops/s
Iteration  15: 3370549.820 ops/s
Iteration  16: 3415013.207 ops/s
Iteration  17: 3301615.820 ops/s
Iteration  18: 3366512.691 ops/s
Iteration  19: 3515075.320 ops/s
Iteration  20: 3317920.937 ops/s
Iteration  21: 3500192.257 ops/s
Iteration  22: 3302733.842 ops/s
Iteration  23: 3548186.025 ops/s
Iteration  24: 3323920.131 ops/s
Iteration  25: 3397681.481 ops/s
Iteration  26: 3510238.227 ops/s
Iteration  27: 3413209.729 ops/s
Iteration  28: 3444719.868 ops/s
Iteration  29: 3365234.027 ops/s
Iteration  30: 3447967.726 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualTest._Benchmark.benchmark_simpleInequal":
  3407899.256 ±(99.9%) 51093.747 ops/s [Average]
  (min, avg, max) = (3298112.448, 3407899.256, 3548186.025), stdev = 76474.721
  CI (99.9%): [3356805.509, 3458993.002] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
FlowableSequenceEqualTest._Benchmark.benchmark_simpleInequal  thrpt   30  3407899.256 ± 51093.747  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableBlockingTest._Benchmark.benchmark_interrupt$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableBlockingTest._Benchmark.benchmark_interrupt

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 115681.935 ops/s
# Warmup Iteration   2: 406081.706 ops/s
# Warmup Iteration   3: 507815.760 ops/s
# Warmup Iteration   4: 496457.862 ops/s
# Warmup Iteration   5: 481634.490 ops/s
# Warmup Iteration   6: 519304.833 ops/s
# Warmup Iteration   7: 527369.017 ops/s
# Warmup Iteration   8: 527751.105 ops/s
# Warmup Iteration   9: 525277.584 ops/s
# Warmup Iteration  10: 525751.768 ops/s
# Warmup Iteration  11: 530906.448 ops/s
# Warmup Iteration  12: 528554.360 ops/s
# Warmup Iteration  13: 537497.054 ops/s
# Warmup Iteration  14: 529931.822 ops/s
# Warmup Iteration  15: 529926.211 ops/s
# Warmup Iteration  16: 542365.396 ops/s
# Warmup Iteration  17: 544206.806 ops/s
# Warmup Iteration  18: 535876.783 ops/s
# Warmup Iteration  19: 563055.304 ops/s
# Warmup Iteration  20: 540038.704 ops/s
# Warmup Iteration  21: 576735.276 ops/s
# Warmup Iteration  22: 566321.867 ops/s
# Warmup Iteration  23: 540943.469 ops/s
# Warmup Iteration  24: 577778.570 ops/s
# Warmup Iteration  25: 544324.308 ops/s
# Warmup Iteration  26: 509754.131 ops/s
# Warmup Iteration  27: 522047.030 ops/s
# Warmup Iteration  28: 491526.972 ops/s
# Warmup Iteration  29: 551044.914 ops/s
# Warmup Iteration  30: 574204.479 ops/s
Iteration   1: 552409.023 ops/s
Iteration   2: 563351.195 ops/s
Iteration   3: 555712.706 ops/s
Iteration   4: 551808.473 ops/s
Iteration   5: 560075.723 ops/s
Iteration   6: 542578.125 ops/s
Iteration   7: 577927.307 ops/s
Iteration   8: 586815.981 ops/s
Iteration   9: 572422.488 ops/s
Iteration  10: 552550.631 ops/s
Iteration  11: 552045.408 ops/s
Iteration  12: 564415.346 ops/s
Iteration  13: 563223.227 ops/s
Iteration  14: 548764.041 ops/s
Iteration  15: 545774.928 ops/s
Iteration  16: 578545.387 ops/s
Iteration  17: 539194.340 ops/s
Iteration  18: 557344.650 ops/s
Iteration  19: 556750.603 ops/s
Iteration  20: 544063.950 ops/s
Iteration  21: 566986.153 ops/s
Iteration  22: 566909.552 ops/s
Iteration  23: 564317.720 ops/s
Iteration  24: 563927.791 ops/s
Iteration  25: 541857.764 ops/s
Iteration  26: 589591.630 ops/s
Iteration  27: 535433.215 ops/s
Iteration  28: 557296.517 ops/s
Iteration  29: 552108.930 ops/s
Iteration  30: 568873.392 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableBlockingTest._Benchmark.benchmark_interrupt":
  559102.540 ±(99.9%) 8982.026 ops/s [Average]
  (min, avg, max) = (535433.215, 559102.540, 589591.630), stdev = 13443.875
  CI (99.9%): [550120.514, 568084.566] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score      Error  Units
FlowableBlockingTest._Benchmark.benchmark_interrupt  thrpt   30  559102.540 ± 8982.026  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishFunctionTest._Benchmark.benchmark_fusedInputCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishFunctionTest._Benchmark.benchmark_fusedInputCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 125279.278 ops/s
# Warmup Iteration   2: 408051.268 ops/s
# Warmup Iteration   3: 493639.207 ops/s
# Warmup Iteration   4: 483274.252 ops/s
# Warmup Iteration   5: 485196.616 ops/s
# Warmup Iteration   6: 458377.978 ops/s
# Warmup Iteration   7: 478300.510 ops/s
# Warmup Iteration   8: 441916.557 ops/s
# Warmup Iteration   9: 494076.644 ops/s
# Warmup Iteration  10: 470850.134 ops/s
# Warmup Iteration  11: 467953.270 ops/s
# Warmup Iteration  12: 483322.292 ops/s
# Warmup Iteration  13: 470723.046 ops/s
# Warmup Iteration  14: 501822.046 ops/s
# Warmup Iteration  15: 463603.320 ops/s
# Warmup Iteration  16: 483926.743 ops/s
# Warmup Iteration  17: 485953.830 ops/s
# Warmup Iteration  18: 502522.717 ops/s
# Warmup Iteration  19: 479812.652 ops/s
# Warmup Iteration  20: 499428.114 ops/s
# Warmup Iteration  21: 505043.023 ops/s
# Warmup Iteration  22: 478029.232 ops/s
# Warmup Iteration  23: 518366.550 ops/s
# Warmup Iteration  24: 518075.892 ops/s
# Warmup Iteration  25: 480068.059 ops/s
# Warmup Iteration  26: 490362.141 ops/s
# Warmup Iteration  27: 483009.188 ops/s
# Warmup Iteration  28: 513787.682 ops/s
# Warmup Iteration  29: 501196.430 ops/s
# Warmup Iteration  30: 501439.665 ops/s
Iteration   1: 458635.659 ops/s
Iteration   2: 515695.536 ops/s
Iteration   3: 511786.429 ops/s
Iteration   4: 511106.451 ops/s
Iteration   5: 493586.178 ops/s
Iteration   6: 507663.137 ops/s
Iteration   7: 485978.529 ops/s
Iteration   8: 492231.243 ops/s
Iteration   9: 516599.639 ops/s
Iteration  10: 487400.951 ops/s
Iteration  11: 520864.067 ops/s
Iteration  12: 491608.328 ops/s
Iteration  13: 489319.620 ops/s
Iteration  14: 504837.408 ops/s
Iteration  15: 483236.321 ops/s
Iteration  16: 494569.333 ops/s
Iteration  17: 501839.581 ops/s
Iteration  18: 515036.254 ops/s
Iteration  19: 488885.868 ops/s
Iteration  20: 513045.388 ops/s
Iteration  21: 520104.457 ops/s
Iteration  22: 478773.827 ops/s
Iteration  23: 514207.465 ops/s
Iteration  24: 489547.062 ops/s
Iteration  25: 501553.651 ops/s
Iteration  26: 496396.455 ops/s
Iteration  27: 507563.621 ops/s
Iteration  28: 485430.955 ops/s
Iteration  29: 501846.537 ops/s
Iteration  30: 506428.131 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishFunctionTest._Benchmark.benchmark_fusedInputCrash":
  499525.936 ±(99.9%) 9591.096 ops/s [Average]
  (min, avg, max) = (458635.659, 499525.936, 520864.067), stdev = 14355.503
  CI (99.9%): [489934.840, 509117.032] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
FlowablePublishFunctionTest._Benchmark.benchmark_fusedInputCrash  thrpt   30  499525.936 ± 9591.096  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 354484.719 ops/s
# Warmup Iteration   2: 1574971.369 ops/s
# Warmup Iteration   3: 2179312.302 ops/s
# Warmup Iteration   4: 2264929.557 ops/s
# Warmup Iteration   5: 2411884.825 ops/s
# Warmup Iteration   6: 2298586.509 ops/s
# Warmup Iteration   7: 2363251.842 ops/s
# Warmup Iteration   8: 2219951.917 ops/s
# Warmup Iteration   9: 2256840.736 ops/s
# Warmup Iteration  10: 2411542.864 ops/s
# Warmup Iteration  11: 2255203.253 ops/s
# Warmup Iteration  12: 2313184.443 ops/s
# Warmup Iteration  13: 2441842.521 ops/s
# Warmup Iteration  14: 2280468.539 ops/s
# Warmup Iteration  15: 2377186.132 ops/s
# Warmup Iteration  16: 2212220.361 ops/s
# Warmup Iteration  17: 2320600.747 ops/s
# Warmup Iteration  18: 2316616.866 ops/s
# Warmup Iteration  19: 2256022.974 ops/s
# Warmup Iteration  20: 2313036.479 ops/s
# Warmup Iteration  21: 2262064.286 ops/s
# Warmup Iteration  22: 1895211.069 ops/s
# Warmup Iteration  23: 2381958.666 ops/s
# Warmup Iteration  24: 2251012.006 ops/s
# Warmup Iteration  25: 2216424.564 ops/s
# Warmup Iteration  26: 2400187.647 ops/s
# Warmup Iteration  27: 2310653.440 ops/s
# Warmup Iteration  28: 2295286.452 ops/s
# Warmup Iteration  29: 2363535.628 ops/s
# Warmup Iteration  30: 2270309.602 ops/s
Iteration   1: 2345436.038 ops/s
Iteration   2: 2381379.058 ops/s
Iteration   3: 2269895.205 ops/s
Iteration   4: 2356380.569 ops/s
Iteration   5: 2276071.587 ops/s
Iteration   6: 2271377.157 ops/s
Iteration   7: 2372058.065 ops/s
Iteration   8: 2189393.843 ops/s
Iteration   9: 2334085.615 ops/s
Iteration  10: 2294713.712 ops/s
Iteration  11: 2336497.902 ops/s
Iteration  12: 2251868.054 ops/s
Iteration  13: 2259436.914 ops/s
Iteration  14: 2318730.337 ops/s
Iteration  15: 2255993.290 ops/s
Iteration  16: 2301404.552 ops/s
Iteration  17: 2323848.845 ops/s
Iteration  18: 2305310.369 ops/s
Iteration  19: 2369339.383 ops/s
Iteration  20: 2247906.618 ops/s
Iteration  21: 2334510.619 ops/s
Iteration  22: 2344945.886 ops/s
Iteration  23: 2250191.801 ops/s
Iteration  24: 2380763.600 ops/s
Iteration  25: 2247852.992 ops/s
Iteration  26: 2401793.316 ops/s
Iteration  27: 2216845.444 ops/s
Iteration  28: 2357000.731 ops/s
Iteration  29: 2314729.733 ops/s
Iteration  30: 2283263.376 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromTest._Benchmark.benchmark_dispose":
  2306434.154 ±(99.9%) 35785.245 ops/s [Average]
  (min, avg, max) = (2189393.843, 2306434.154, 2401793.316), stdev = 53561.674
  CI (99.9%): [2270648.909, 2342219.399] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
FlowableWithLatestFromTest._Benchmark.benchmark_dispose  thrpt   30  2306434.154 ± 35785.245  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_connectIsIdempotent$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_connectIsIdempotent

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 441461.433 ops/s
# Warmup Iteration   2: 1118167.281 ops/s
# Warmup Iteration   3: 1503918.846 ops/s
# Warmup Iteration   4: 1433276.582 ops/s
# Warmup Iteration   5: 1509514.401 ops/s
# Warmup Iteration   6: 1447817.055 ops/s
# Warmup Iteration   7: 1444844.195 ops/s
# Warmup Iteration   8: 1455287.837 ops/s
# Warmup Iteration   9: 1475392.493 ops/s
# Warmup Iteration  10: 1441513.912 ops/s
# Warmup Iteration  11: 1492123.640 ops/s
# Warmup Iteration  12: 1496895.840 ops/s
# Warmup Iteration  13: 1420644.410 ops/s
# Warmup Iteration  14: 1492205.545 ops/s
# Warmup Iteration  15: 1455954.669 ops/s
# Warmup Iteration  16: 1436715.322 ops/s
# Warmup Iteration  17: 1489482.161 ops/s
# Warmup Iteration  18: 1418918.783 ops/s
# Warmup Iteration  19: 1516289.065 ops/s
# Warmup Iteration  20: 1506393.475 ops/s
# Warmup Iteration  21: 1464731.504 ops/s
# Warmup Iteration  22: 1438214.061 ops/s
# Warmup Iteration  23: 1514121.169 ops/s
# Warmup Iteration  24: 1463719.861 ops/s
# Warmup Iteration  25: 1499358.155 ops/s
# Warmup Iteration  26: 1424270.418 ops/s
# Warmup Iteration  27: 1527436.642 ops/s
# Warmup Iteration  28: 1506416.815 ops/s
# Warmup Iteration  29: 1386166.006 ops/s
# Warmup Iteration  30: 1533146.257 ops/s
Iteration   1: 1441731.713 ops/s
Iteration   2: 1456304.317 ops/s
Iteration   3: 1517581.394 ops/s
Iteration   4: 1431636.957 ops/s
Iteration   5: 1520337.417 ops/s
Iteration   6: 1463029.198 ops/s
Iteration   7: 1475810.406 ops/s
Iteration   8: 1505131.926 ops/s
Iteration   9: 1432661.144 ops/s
Iteration  10: 1503946.888 ops/s
Iteration  11: 1493904.759 ops/s
Iteration  12: 1447312.371 ops/s
Iteration  13: 1477522.153 ops/s
Iteration  14: 1492424.813 ops/s
Iteration  15: 1432523.770 ops/s
Iteration  16: 1433328.160 ops/s
Iteration  17: 1467986.892 ops/s
Iteration  18: 1447530.829 ops/s
Iteration  19: 1455270.074 ops/s
Iteration  20: 1445767.531 ops/s
Iteration  21: 1435127.994 ops/s
Iteration  22: 1475645.135 ops/s
Iteration  23: 1445459.316 ops/s
Iteration  24: 1516607.648 ops/s
Iteration  25: 1446713.106 ops/s
Iteration  26: 1499761.869 ops/s
Iteration  27: 1434426.088 ops/s
Iteration  28: 1497374.815 ops/s
Iteration  29: 1490054.025 ops/s
Iteration  30: 1446138.129 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_connectIsIdempotent":
  1467635.028 ±(99.9%) 19654.320 ops/s [Average]
  (min, avg, max) = (1431636.957, 1467635.028, 1520337.417), stdev = 29417.663
  CI (99.9%): [1447980.708, 1487289.348] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
FlowablePublishTest._Benchmark.benchmark_connectIsIdempotent  thrpt   30  1467635.028 ± 19654.320  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStreamTest._Benchmark.benchmark_streamNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStreamTest._Benchmark.benchmark_streamNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 63864.855 ops/s
# Warmup Iteration   2: 238759.662 ops/s
# Warmup Iteration   3: 331748.602 ops/s
# Warmup Iteration   4: 338502.919 ops/s
# Warmup Iteration   5: 338172.734 ops/s
# Warmup Iteration   6: 376259.896 ops/s
# Warmup Iteration   7: 357315.909 ops/s
# Warmup Iteration   8: 367737.698 ops/s
# Warmup Iteration   9: 367156.063 ops/s
# Warmup Iteration  10: 359818.375 ops/s
# Warmup Iteration  11: 366164.731 ops/s
# Warmup Iteration  12: 378979.795 ops/s
# Warmup Iteration  13: 349266.825 ops/s
# Warmup Iteration  14: 371742.317 ops/s
# Warmup Iteration  15: 360332.520 ops/s
# Warmup Iteration  16: 369987.296 ops/s
# Warmup Iteration  17: 309766.199 ops/s
# Warmup Iteration  18: 362687.768 ops/s
# Warmup Iteration  19: 380212.736 ops/s
# Warmup Iteration  20: 359889.668 ops/s
# Warmup Iteration  21: 378313.914 ops/s
# Warmup Iteration  22: 365613.083 ops/s
# Warmup Iteration  23: 374697.831 ops/s
# Warmup Iteration  24: 369951.493 ops/s
# Warmup Iteration  25: 360153.913 ops/s
# Warmup Iteration  26: 388139.904 ops/s
# Warmup Iteration  27: 368614.004 ops/s
# Warmup Iteration  28: 374154.245 ops/s
# Warmup Iteration  29: 363102.526 ops/s
# Warmup Iteration  30: 403099.969 ops/s
Iteration   1: 372641.317 ops/s
Iteration   2: 360412.216 ops/s
Iteration   3: 375174.814 ops/s
Iteration   4: 365208.517 ops/s
Iteration   5: 369070.735 ops/s
Iteration   6: 380427.456 ops/s
Iteration   7: 362832.344 ops/s
Iteration   8: 380221.688 ops/s
Iteration   9: 367858.283 ops/s
Iteration  10: 379667.753 ops/s
Iteration  11: 378537.916 ops/s
Iteration  12: 373910.858 ops/s
Iteration  13: 370466.352 ops/s
Iteration  14: 376159.566 ops/s
Iteration  15: 370795.142 ops/s
Iteration  16: 363592.524 ops/s
Iteration  17: 383171.239 ops/s
Iteration  18: 365542.393 ops/s
Iteration  19: 362421.996 ops/s
Iteration  20: 377573.030 ops/s
Iteration  21: 357127.042 ops/s
Iteration  22: 375796.341 ops/s
Iteration  23: 355602.235 ops/s
Iteration  24: 363832.439 ops/s
Iteration  25: 369292.864 ops/s
Iteration  26: 367036.996 ops/s
Iteration  27: 375825.882 ops/s
Iteration  28: 361911.779 ops/s
Iteration  29: 371203.163 ops/s
Iteration  30: 382316.559 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStreamTest._Benchmark.benchmark_streamNull":
  370521.048 ±(99.9%) 5095.143 ops/s [Average]
  (min, avg, max) = (355602.235, 370521.048, 383171.239), stdev = 7626.170
  CI (99.9%): [365425.905, 375616.191] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
FlowableFlatMapStreamTest._Benchmark.benchmark_streamNull  thrpt   30  370521.048 ± 5095.143  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_FlowableSourcesInIterable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_FlowableSourcesInIterable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 160799.024 ops/s
# Warmup Iteration   2: 713731.833 ops/s
# Warmup Iteration   3: 1208068.036 ops/s
# Warmup Iteration   4: 1440299.958 ops/s
# Warmup Iteration   5: 1582717.433 ops/s
# Warmup Iteration   6: 1614921.040 ops/s
# Warmup Iteration   7: 1584744.542 ops/s
# Warmup Iteration   8: 1581372.254 ops/s
# Warmup Iteration   9: 1541611.365 ops/s
# Warmup Iteration  10: 1586193.538 ops/s
# Warmup Iteration  11: 1586217.023 ops/s
# Warmup Iteration  12: 1505327.467 ops/s
# Warmup Iteration  13: 1555822.838 ops/s
# Warmup Iteration  14: 1566292.188 ops/s
# Warmup Iteration  15: 1543417.999 ops/s
# Warmup Iteration  16: 1658749.025 ops/s
# Warmup Iteration  17: 1591963.470 ops/s
# Warmup Iteration  18: 1509590.058 ops/s
# Warmup Iteration  19: 1579447.649 ops/s
# Warmup Iteration  20: 1602862.297 ops/s
# Warmup Iteration  21: 1561467.121 ops/s
# Warmup Iteration  22: 1611945.093 ops/s
# Warmup Iteration  23: 1575212.321 ops/s
# Warmup Iteration  24: 1557728.359 ops/s
# Warmup Iteration  25: 1624029.447 ops/s
# Warmup Iteration  26: 1516350.228 ops/s
# Warmup Iteration  27: 1587072.471 ops/s
# Warmup Iteration  28: 1677277.199 ops/s
# Warmup Iteration  29: 1496847.991 ops/s
# Warmup Iteration  30: 1634689.329 ops/s
Iteration   1: 1565971.539 ops/s
Iteration   2: 1565428.427 ops/s
Iteration   3: 1581853.648 ops/s
Iteration   4: 1576986.921 ops/s
Iteration   5: 1602675.347 ops/s
Iteration   6: 1565604.852 ops/s
Iteration   7: 1629988.821 ops/s
Iteration   8: 1632031.330 ops/s
Iteration   9: 1521631.705 ops/s
Iteration  10: 1582680.106 ops/s
Iteration  11: 1664980.575 ops/s
Iteration  12: 1580873.730 ops/s
Iteration  13: 1588177.995 ops/s
Iteration  14: 1538959.192 ops/s
Iteration  15: 1667236.456 ops/s
Iteration  16: 1642158.046 ops/s
Iteration  17: 1569017.528 ops/s
Iteration  18: 1629731.051 ops/s
Iteration  19: 1546899.135 ops/s
Iteration  20: 1623513.379 ops/s
Iteration  21: 1564493.134 ops/s
Iteration  22: 1615586.549 ops/s
Iteration  23: 1551956.640 ops/s
Iteration  24: 1593275.518 ops/s
Iteration  25: 1576305.154 ops/s
Iteration  26: 1527758.116 ops/s
Iteration  27: 1588436.725 ops/s
Iteration  28: 1632032.579 ops/s
Iteration  29: 1571723.909 ops/s
Iteration  30: 1679869.556 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_FlowableSourcesInIterable":
  1592594.589 ±(99.9%) 27482.186 ops/s [Average]
  (min, avg, max) = (1521631.705, 1592594.589, 1679869.556), stdev = 41134.046
  CI (99.9%): [1565112.402, 1620076.775] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score       Error  Units
FlowableCombineLatestTest._Benchmark.benchmark_FlowableSourcesInIterable  thrpt   30  1592594.589 ± 27482.186  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_publishersInIterable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_publishersInIterable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 115136.857 ops/s
# Warmup Iteration   2: 427806.363 ops/s
# Warmup Iteration   3: 1387814.208 ops/s
# Warmup Iteration   4: 1366284.693 ops/s
# Warmup Iteration   5: 1632216.553 ops/s
# Warmup Iteration   6: 1542437.717 ops/s
# Warmup Iteration   7: 1537588.867 ops/s
# Warmup Iteration   8: 1607195.128 ops/s
# Warmup Iteration   9: 1601981.908 ops/s
# Warmup Iteration  10: 1444183.471 ops/s
# Warmup Iteration  11: 1520200.044 ops/s
# Warmup Iteration  12: 1300196.825 ops/s
# Warmup Iteration  13: 1601271.333 ops/s
# Warmup Iteration  14: 1662785.613 ops/s
# Warmup Iteration  15: 1571275.251 ops/s
# Warmup Iteration  16: 1560148.409 ops/s
# Warmup Iteration  17: 1576268.113 ops/s
# Warmup Iteration  18: 1616847.818 ops/s
# Warmup Iteration  19: 1534493.306 ops/s
# Warmup Iteration  20: 1612859.615 ops/s
# Warmup Iteration  21: 1580155.738 ops/s
# Warmup Iteration  22: 1613478.121 ops/s
# Warmup Iteration  23: 1589756.918 ops/s
# Warmup Iteration  24: 1524214.028 ops/s
# Warmup Iteration  25: 1639038.445 ops/s
# Warmup Iteration  26: 1655665.308 ops/s
# Warmup Iteration  27: 1595230.489 ops/s
# Warmup Iteration  28: 1569904.451 ops/s
# Warmup Iteration  29: 1546174.290 ops/s
# Warmup Iteration  30: 1661393.963 ops/s
Iteration   1: 1581502.685 ops/s
Iteration   2: 1629280.902 ops/s
Iteration   3: 1580973.693 ops/s
Iteration   4: 1637442.529 ops/s
Iteration   5: 1636826.879 ops/s
Iteration   6: 1528313.775 ops/s
Iteration   7: 1645773.999 ops/s
Iteration   8: 1510158.772 ops/s
Iteration   9: 1681544.407 ops/s
Iteration  10: 1564986.666 ops/s
Iteration  11: 1634143.676 ops/s
Iteration  12: 1545433.136 ops/s
Iteration  13: 1610487.397 ops/s
Iteration  14: 1643235.376 ops/s
Iteration  15: 1636908.224 ops/s
Iteration  16: 1551953.011 ops/s
Iteration  17: 1640318.355 ops/s
Iteration  18: 1568022.064 ops/s
Iteration  19: 1565194.862 ops/s
Iteration  20: 1617002.369 ops/s
Iteration  21: 1523572.923 ops/s
Iteration  22: 1632709.086 ops/s
Iteration  23: 1577855.899 ops/s
Iteration  24: 1642324.258 ops/s
Iteration  25: 1622064.544 ops/s
Iteration  26: 1567325.847 ops/s
Iteration  27: 1625474.964 ops/s
Iteration  28: 1622394.239 ops/s
Iteration  29: 1540212.971 ops/s
Iteration  30: 1618293.136 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_publishersInIterable":
  1599391.021 ±(99.9%) 29682.077 ops/s [Average]
  (min, avg, max) = (1510158.772, 1599391.021, 1681544.407), stdev = 44426.739
  CI (99.9%): [1569708.944, 1629073.099] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
FlowableCombineLatestTest._Benchmark.benchmark_publishersInIterable  thrpt   30  1599391.021 ± 29682.077  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_fusedCombinerCrashError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_fusedCombinerCrashError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 42729.151 ops/s
# Warmup Iteration   2: 156851.886 ops/s
# Warmup Iteration   3: 315800.207 ops/s
# Warmup Iteration   4: 311893.616 ops/s
# Warmup Iteration   5: 305529.084 ops/s
# Warmup Iteration   6: 363970.295 ops/s
# Warmup Iteration   7: 354512.063 ops/s
# Warmup Iteration   8: 346248.028 ops/s
# Warmup Iteration   9: 359605.739 ops/s
# Warmup Iteration  10: 348037.005 ops/s
# Warmup Iteration  11: 333953.274 ops/s
# Warmup Iteration  12: 362292.643 ops/s
# Warmup Iteration  13: 341764.604 ops/s
# Warmup Iteration  14: 345726.868 ops/s
# Warmup Iteration  15: 363157.202 ops/s
# Warmup Iteration  16: 347563.461 ops/s
# Warmup Iteration  17: 352816.728 ops/s
# Warmup Iteration  18: 368658.319 ops/s
# Warmup Iteration  19: 358771.145 ops/s
# Warmup Iteration  20: 368965.859 ops/s
# Warmup Iteration  21: 361993.901 ops/s
# Warmup Iteration  22: 356281.119 ops/s
# Warmup Iteration  23: 376197.469 ops/s
# Warmup Iteration  24: 376795.604 ops/s
# Warmup Iteration  25: 351623.278 ops/s
# Warmup Iteration  26: 369465.575 ops/s
# Warmup Iteration  27: 360077.276 ops/s
# Warmup Iteration  28: 365767.631 ops/s
# Warmup Iteration  29: 362188.987 ops/s
# Warmup Iteration  30: 364731.330 ops/s
Iteration   1: 374958.626 ops/s
Iteration   2: 347765.265 ops/s
Iteration   3: 371559.093 ops/s
Iteration   4: 362685.482 ops/s
Iteration   5: 361712.421 ops/s
Iteration   6: 364692.613 ops/s
Iteration   7: 360172.061 ops/s
Iteration   8: 362054.496 ops/s
Iteration   9: 358792.223 ops/s
Iteration  10: 367843.181 ops/s
Iteration  11: 347745.754 ops/s
Iteration  12: 358850.472 ops/s
Iteration  13: 363204.093 ops/s
Iteration  14: 353616.861 ops/s
Iteration  15: 356602.733 ops/s
Iteration  16: 355064.467 ops/s
Iteration  17: 364947.703 ops/s
Iteration  18: 368464.934 ops/s
Iteration  19: 351671.995 ops/s
Iteration  20: 373022.075 ops/s
Iteration  21: 359439.935 ops/s
Iteration  22: 372216.268 ops/s
Iteration  23: 361277.226 ops/s
Iteration  24: 362522.369 ops/s
Iteration  25: 367130.309 ops/s
Iteration  26: 356970.654 ops/s
Iteration  27: 367847.930 ops/s
Iteration  28: 356930.775 ops/s
Iteration  29: 374976.269 ops/s
Iteration  30: 348765.825 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_fusedCombinerCrashError":
  361783.470 ±(99.9%) 5150.676 ops/s [Average]
  (min, avg, max) = (347745.754, 361783.470, 374976.269), stdev = 7709.290
  CI (99.9%): [356632.794, 366934.146] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score      Error  Units
FlowableCombineLatestTest._Benchmark.benchmark_fusedCombinerCrashError  thrpt   30  361783.470 ± 5150.676  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_fusedError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_fusedError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 81700.208 ops/s
# Warmup Iteration   2: 296148.682 ops/s
# Warmup Iteration   3: 424375.380 ops/s
# Warmup Iteration   4: 433436.340 ops/s
# Warmup Iteration   5: 484032.570 ops/s
# Warmup Iteration   6: 493234.882 ops/s
# Warmup Iteration   7: 377110.736 ops/s
# Warmup Iteration   8: 499238.657 ops/s
# Warmup Iteration   9: 493042.712 ops/s
# Warmup Iteration  10: 475667.466 ops/s
# Warmup Iteration  11: 485277.389 ops/s
# Warmup Iteration  12: 483731.468 ops/s
# Warmup Iteration  13: 488602.387 ops/s
# Warmup Iteration  14: 504709.888 ops/s
# Warmup Iteration  15: 477491.247 ops/s
# Warmup Iteration  16: 498184.242 ops/s
# Warmup Iteration  17: 493759.122 ops/s
# Warmup Iteration  18: 515087.190 ops/s
# Warmup Iteration  19: 525813.558 ops/s
# Warmup Iteration  20: 487942.017 ops/s
# Warmup Iteration  21: 538429.981 ops/s
# Warmup Iteration  22: 497910.686 ops/s
# Warmup Iteration  23: 512962.137 ops/s
# Warmup Iteration  24: 508742.976 ops/s
# Warmup Iteration  25: 491120.104 ops/s
# Warmup Iteration  26: 520177.431 ops/s
# Warmup Iteration  27: 518795.561 ops/s
# Warmup Iteration  28: 520923.847 ops/s
# Warmup Iteration  29: 504099.376 ops/s
# Warmup Iteration  30: 510457.921 ops/s
Iteration   1: 512361.096 ops/s
Iteration   2: 522641.199 ops/s
Iteration   3: 516996.837 ops/s
Iteration   4: 498622.644 ops/s
Iteration   5: 522399.177 ops/s
Iteration   6: 494440.705 ops/s
Iteration   7: 515891.216 ops/s
Iteration   8: 504468.871 ops/s
Iteration   9: 527488.157 ops/s
Iteration  10: 520692.425 ops/s
Iteration  11: 490781.451 ops/s
Iteration  12: 504450.605 ops/s
Iteration  13: 514883.054 ops/s
Iteration  14: 500934.235 ops/s
Iteration  15: 494930.958 ops/s
Iteration  16: 500006.190 ops/s
Iteration  17: 510208.968 ops/s
Iteration  18: 506467.493 ops/s
Iteration  19: 504614.847 ops/s
Iteration  20: 525388.164 ops/s
Iteration  21: 493967.440 ops/s
Iteration  22: 516970.566 ops/s
Iteration  23: 497677.450 ops/s
Iteration  24: 502927.526 ops/s
Iteration  25: 493042.630 ops/s
Iteration  26: 499872.316 ops/s
Iteration  27: 531550.926 ops/s
Iteration  28: 491675.696 ops/s
Iteration  29: 525591.678 ops/s
Iteration  30: 504620.250 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_fusedError":
  508218.826 ±(99.9%) 8051.099 ops/s [Average]
  (min, avg, max) = (490781.451, 508218.826, 531550.926), stdev = 12050.506
  CI (99.9%): [500167.727, 516269.924] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
FlowableCombineLatestTest._Benchmark.benchmark_fusedError  thrpt   30  508218.826 ± 8051.099  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_fusedNullCheck$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_fusedNullCheck

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 36990.607 ops/s
# Warmup Iteration   2: 111986.027 ops/s
# Warmup Iteration   3: 320444.444 ops/s
# Warmup Iteration   4: 342826.268 ops/s
# Warmup Iteration   5: 365536.743 ops/s
# Warmup Iteration   6: 339987.228 ops/s
# Warmup Iteration   7: 355372.750 ops/s
# Warmup Iteration   8: 373562.206 ops/s
# Warmup Iteration   9: 351500.316 ops/s
# Warmup Iteration  10: 365508.262 ops/s
# Warmup Iteration  11: 361597.402 ops/s
# Warmup Iteration  12: 340216.441 ops/s
# Warmup Iteration  13: 371240.133 ops/s
# Warmup Iteration  14: 361887.528 ops/s
# Warmup Iteration  15: 351562.849 ops/s
# Warmup Iteration  16: 372395.588 ops/s
# Warmup Iteration  17: 370975.105 ops/s
# Warmup Iteration  18: 363497.166 ops/s
# Warmup Iteration  19: 382231.169 ops/s
# Warmup Iteration  20: 374329.393 ops/s
# Warmup Iteration  21: 397418.254 ops/s
# Warmup Iteration  22: 373128.227 ops/s
# Warmup Iteration  23: 357459.600 ops/s
# Warmup Iteration  24: 382991.989 ops/s
# Warmup Iteration  25: 378998.139 ops/s
# Warmup Iteration  26: 374618.490 ops/s
# Warmup Iteration  27: 377330.635 ops/s
# Warmup Iteration  28: 388867.540 ops/s
# Warmup Iteration  29: 365637.430 ops/s
# Warmup Iteration  30: 365841.511 ops/s
Iteration   1: 392081.196 ops/s
Iteration   2: 362187.258 ops/s
Iteration   3: 361205.592 ops/s
Iteration   4: 380480.953 ops/s
Iteration   5: 391506.336 ops/s
Iteration   6: 366137.699 ops/s
Iteration   7: 371266.175 ops/s
Iteration   8: 390243.623 ops/s
Iteration   9: 374786.372 ops/s
Iteration  10: 383782.091 ops/s
Iteration  11: 373309.993 ops/s
Iteration  12: 377289.411 ops/s
Iteration  13: 385144.756 ops/s
Iteration  14: 373438.266 ops/s
Iteration  15: 368301.014 ops/s
Iteration  16: 382472.960 ops/s
Iteration  17: 368064.463 ops/s
Iteration  18: 387098.449 ops/s
Iteration  19: 370361.236 ops/s
Iteration  20: 379477.091 ops/s
Iteration  21: 380494.343 ops/s
Iteration  22: 387523.817 ops/s
Iteration  23: 373761.416 ops/s
Iteration  24: 372575.353 ops/s
Iteration  25: 386945.292 ops/s
Iteration  26: 368377.419 ops/s
Iteration  27: 392109.295 ops/s
Iteration  28: 368047.044 ops/s
Iteration  29: 378229.115 ops/s
Iteration  30: 369983.288 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_fusedNullCheck":
  377222.710 ±(99.9%) 6091.094 ops/s [Average]
  (min, avg, max) = (361205.592, 377222.710, 392109.295), stdev = 9116.864
  CI (99.9%): [371131.616, 383313.805] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
FlowableCombineLatestTest._Benchmark.benchmark_fusedNullCheck  thrpt   30  377222.710 ± 6091.094  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCountTest._Benchmark.benchmark_disposed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCountTest._Benchmark.benchmark_disposed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 130474.576 ops/s
# Warmup Iteration   2: 948277.649 ops/s
# Warmup Iteration   3: 1873146.548 ops/s
# Warmup Iteration   4: 2272146.315 ops/s
# Warmup Iteration   5: 2439759.071 ops/s
# Warmup Iteration   6: 2414225.014 ops/s
# Warmup Iteration   7: 2400731.185 ops/s
# Warmup Iteration   8: 2426923.768 ops/s
# Warmup Iteration   9: 2530305.056 ops/s
# Warmup Iteration  10: 2239207.824 ops/s
# Warmup Iteration  11: 2307173.850 ops/s
# Warmup Iteration  12: 2539748.144 ops/s
# Warmup Iteration  13: 2442493.824 ops/s
# Warmup Iteration  14: 2397404.166 ops/s
# Warmup Iteration  15: 2486505.978 ops/s
# Warmup Iteration  16: 2406334.209 ops/s
# Warmup Iteration  17: 2508486.751 ops/s
# Warmup Iteration  18: 2473625.201 ops/s
# Warmup Iteration  19: 2279570.186 ops/s
# Warmup Iteration  20: 2427751.875 ops/s
# Warmup Iteration  21: 2393612.756 ops/s
# Warmup Iteration  22: 2437379.793 ops/s
# Warmup Iteration  23: 2536280.655 ops/s
# Warmup Iteration  24: 2394436.524 ops/s
# Warmup Iteration  25: 2355090.689 ops/s
# Warmup Iteration  26: 2483434.855 ops/s
# Warmup Iteration  27: 2405114.370 ops/s
# Warmup Iteration  28: 2473630.177 ops/s
# Warmup Iteration  29: 2462435.881 ops/s
# Warmup Iteration  30: 2371092.132 ops/s
Iteration   1: 2493243.209 ops/s
Iteration   2: 2357652.984 ops/s
Iteration   3: 2428192.824 ops/s
Iteration   4: 2500634.141 ops/s
Iteration   5: 2349093.877 ops/s
Iteration   6: 2472768.702 ops/s
Iteration   7: 2325476.977 ops/s
Iteration   8: 2407831.081 ops/s
Iteration   9: 2425693.678 ops/s
Iteration  10: 2366879.703 ops/s
Iteration  11: 2458732.734 ops/s
Iteration  12: 2382191.006 ops/s
Iteration  13: 2532900.647 ops/s
Iteration  14: 2445525.486 ops/s
Iteration  15: 2349119.765 ops/s
Iteration  16: 2479681.799 ops/s
Iteration  17: 2272398.437 ops/s
Iteration  18: 2359910.842 ops/s
Iteration  19: 2501835.697 ops/s
Iteration  20: 2321178.027 ops/s
Iteration  21: 2486163.274 ops/s
Iteration  22: 2378434.984 ops/s
Iteration  23: 2451102.266 ops/s
Iteration  24: 2403867.386 ops/s
Iteration  25: 2469700.249 ops/s
Iteration  26: 2431987.453 ops/s
Iteration  27: 2430189.931 ops/s
Iteration  28: 2443863.791 ops/s
Iteration  29: 2330939.926 ops/s
Iteration  30: 2466731.859 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCountTest._Benchmark.benchmark_disposed":
  2417464.091 ±(99.9%) 43491.260 ops/s [Average]
  (min, avg, max) = (2272398.437, 2417464.091, 2532900.647), stdev = 65095.676
  CI (99.9%): [2373972.831, 2460955.352] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score       Error  Units
FlowableRefCountTest._Benchmark.benchmark_disposed  thrpt   30  2417464.091 ± 43491.260  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatTest._Benchmark.benchmark_noCancelPreviousRepeatWhen$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatTest._Benchmark.benchmark_noCancelPreviousRepeatWhen

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 57363.032 ops/s
# Warmup Iteration   2: 161093.127 ops/s
# Warmup Iteration   3: 403508.540 ops/s
# Warmup Iteration   4: 556281.433 ops/s
# Warmup Iteration   5: 633689.694 ops/s
# Warmup Iteration   6: 658863.841 ops/s
# Warmup Iteration   7: 721463.589 ops/s
# Warmup Iteration   8: 690166.513 ops/s
# Warmup Iteration   9: 706410.595 ops/s
# Warmup Iteration  10: 687242.529 ops/s
# Warmup Iteration  11: 656433.946 ops/s
# Warmup Iteration  12: 676629.509 ops/s
# Warmup Iteration  13: 681518.755 ops/s
# Warmup Iteration  14: 699114.642 ops/s
# Warmup Iteration  15: 667796.421 ops/s
# Warmup Iteration  16: 680776.212 ops/s
# Warmup Iteration  17: 706419.671 ops/s
# Warmup Iteration  18: 669929.607 ops/s
# Warmup Iteration  19: 688252.842 ops/s
# Warmup Iteration  20: 676597.310 ops/s
# Warmup Iteration  21: 681738.088 ops/s
# Warmup Iteration  22: 708915.110 ops/s
# Warmup Iteration  23: 681045.223 ops/s
# Warmup Iteration  24: 663504.722 ops/s
# Warmup Iteration  25: 725583.293 ops/s
# Warmup Iteration  26: 642693.467 ops/s
# Warmup Iteration  27: 667503.219 ops/s
# Warmup Iteration  28: 680247.000 ops/s
# Warmup Iteration  29: 691508.843 ops/s
# Warmup Iteration  30: 662990.080 ops/s
Iteration   1: 698166.633 ops/s
Iteration   2: 706212.453 ops/s
Iteration   3: 679998.522 ops/s
Iteration   4: 698601.570 ops/s
Iteration   5: 718450.693 ops/s
Iteration   6: 668512.551 ops/s
Iteration   7: 701325.729 ops/s
Iteration   8: 680243.679 ops/s
Iteration   9: 705815.276 ops/s
Iteration  10: 715243.929 ops/s
Iteration  11: 684933.272 ops/s
Iteration  12: 669987.331 ops/s
Iteration  13: 690537.986 ops/s
Iteration  14: 658552.703 ops/s
Iteration  15: 694592.738 ops/s
Iteration  16: 674537.884 ops/s
Iteration  17: 688096.348 ops/s
Iteration  18: 707875.805 ops/s
Iteration  19: 676924.634 ops/s
Iteration  20: 677549.756 ops/s
Iteration  21: 683594.614 ops/s
Iteration  22: 710557.338 ops/s
Iteration  23: 690595.500 ops/s
Iteration  24: 694340.141 ops/s
Iteration  25: 697962.114 ops/s
Iteration  26: 661524.660 ops/s
Iteration  27: 715357.042 ops/s
Iteration  28: 590231.110 ops/s
Iteration  29: 672710.728 ops/s
Iteration  30: 704669.287 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatTest._Benchmark.benchmark_noCancelPreviousRepeatWhen":
  687256.734 ±(99.9%) 16390.015 ops/s [Average]
  (min, avg, max) = (590231.110, 687256.734, 718450.693), stdev = 24531.805
  CI (99.9%): [670866.719, 703646.749] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score       Error  Units
FlowableRepeatTest._Benchmark.benchmark_noCancelPreviousRepeatWhen  thrpt   30  687256.734 ± 16390.015  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrErrorTest._Benchmark.benchmark_firstSourceIgnoresCancel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrErrorTest._Benchmark.benchmark_firstSourceIgnoresCancel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 31124.302 ops/s
# Warmup Iteration   2: 202071.266 ops/s
# Warmup Iteration   3: 192471.028 ops/s
# Warmup Iteration   4: 246458.027 ops/s
# Warmup Iteration   5: 217289.715 ops/s
# Warmup Iteration   6: 237872.615 ops/s
# Warmup Iteration   7: 245961.113 ops/s
# Warmup Iteration   8: 240849.782 ops/s
# Warmup Iteration   9: 245894.387 ops/s
# Warmup Iteration  10: 240427.880 ops/s
# Warmup Iteration  11: 236340.466 ops/s
# Warmup Iteration  12: 251197.131 ops/s
# Warmup Iteration  13: 233805.097 ops/s
# Warmup Iteration  14: 241745.961 ops/s
# Warmup Iteration  15: 245776.122 ops/s
# Warmup Iteration  16: 238669.748 ops/s
# Warmup Iteration  17: 257923.177 ops/s
# Warmup Iteration  18: 250525.058 ops/s
# Warmup Iteration  19: 251909.824 ops/s
# Warmup Iteration  20: 257281.065 ops/s
# Warmup Iteration  21: 243215.982 ops/s
# Warmup Iteration  22: 261319.068 ops/s
# Warmup Iteration  23: 246700.393 ops/s
# Warmup Iteration  24: 245240.298 ops/s
# Warmup Iteration  25: 253920.362 ops/s
# Warmup Iteration  26: 248377.511 ops/s
# Warmup Iteration  27: 254186.308 ops/s
# Warmup Iteration  28: 250013.253 ops/s
# Warmup Iteration  29: 260595.745 ops/s
# Warmup Iteration  30: 248981.345 ops/s
Iteration   1: 245157.979 ops/s
Iteration   2: 258013.819 ops/s
Iteration   3: 248672.380 ops/s
Iteration   4: 257088.921 ops/s
Iteration   5: 259133.017 ops/s
Iteration   6: 249755.944 ops/s
Iteration   7: 249119.684 ops/s
Iteration   8: 246284.814 ops/s
Iteration   9: 247430.143 ops/s
Iteration  10: 254606.415 ops/s
Iteration  11: 252907.507 ops/s
Iteration  12: 254083.892 ops/s
Iteration  13: 247004.339 ops/s
Iteration  14: 251253.209 ops/s
Iteration  15: 253847.968 ops/s
Iteration  16: 248084.007 ops/s
Iteration  17: 253846.375 ops/s
Iteration  18: 246214.985 ops/s
Iteration  19: 249772.549 ops/s
Iteration  20: 244001.091 ops/s
Iteration  21: 254107.676 ops/s
Iteration  22: 261354.784 ops/s
Iteration  23: 256629.628 ops/s
Iteration  24: 243908.096 ops/s
Iteration  25: 263854.388 ops/s
Iteration  26: 245623.969 ops/s
Iteration  27: 253804.073 ops/s
Iteration  28: 242551.775 ops/s
Iteration  29: 247075.990 ops/s
Iteration  30: 253183.618 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrErrorTest._Benchmark.benchmark_firstSourceIgnoresCancel":
  251279.101 ±(99.9%) 3643.341 ops/s [Average]
  (min, avg, max) = (242551.775, 251279.101, 263854.388), stdev = 5453.181
  CI (99.9%): [247635.760, 254922.442] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt       Score      Error  Units
FlowableStageSubscriberOrErrorTest._Benchmark.benchmark_firstSourceIgnoresCancel  thrpt   30  251279.101 ± 3643.341  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrDefaultTest._Benchmark.benchmark_firstSourceIgnoresCancel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrDefaultTest._Benchmark.benchmark_firstSourceIgnoresCancel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 73630.946 ops/s
# Warmup Iteration   2: 204192.573 ops/s
# Warmup Iteration   3: 236010.285 ops/s
# Warmup Iteration   4: 238889.557 ops/s
# Warmup Iteration   5: 247353.131 ops/s
# Warmup Iteration   6: 228271.498 ops/s
# Warmup Iteration   7: 245103.751 ops/s
# Warmup Iteration   8: 230294.782 ops/s
# Warmup Iteration   9: 238343.549 ops/s
# Warmup Iteration  10: 239409.459 ops/s
# Warmup Iteration  11: 227863.272 ops/s
# Warmup Iteration  12: 229070.142 ops/s
# Warmup Iteration  13: 241979.299 ops/s
# Warmup Iteration  14: 238865.814 ops/s
# Warmup Iteration  15: 243219.820 ops/s
# Warmup Iteration  16: 236577.805 ops/s
# Warmup Iteration  17: 250863.686 ops/s
# Warmup Iteration  18: 255905.852 ops/s
# Warmup Iteration  19: 241927.119 ops/s
# Warmup Iteration  20: 250894.651 ops/s
# Warmup Iteration  21: 246174.062 ops/s
# Warmup Iteration  22: 254786.831 ops/s
# Warmup Iteration  23: 237569.025 ops/s
# Warmup Iteration  24: 240344.033 ops/s
# Warmup Iteration  25: 249847.518 ops/s
# Warmup Iteration  26: 247867.209 ops/s
# Warmup Iteration  27: 252466.135 ops/s
# Warmup Iteration  28: 243937.344 ops/s
# Warmup Iteration  29: 252726.514 ops/s
# Warmup Iteration  30: 244430.040 ops/s
Iteration   1: 244328.866 ops/s
Iteration   2: 256989.632 ops/s
Iteration   3: 239666.025 ops/s
Iteration   4: 246993.270 ops/s
Iteration   5: 252367.684 ops/s
Iteration   6: 248015.826 ops/s
Iteration   7: 257320.664 ops/s
Iteration   8: 240783.206 ops/s
Iteration   9: 255628.938 ops/s
Iteration  10: 242847.873 ops/s
Iteration  11: 246455.054 ops/s
Iteration  12: 253142.255 ops/s
Iteration  13: 244833.418 ops/s
Iteration  14: 245009.792 ops/s
Iteration  15: 248659.271 ops/s
Iteration  16: 247082.230 ops/s
Iteration  17: 258524.560 ops/s
Iteration  18: 238493.941 ops/s
Iteration  19: 232762.725 ops/s
Iteration  20: 256091.152 ops/s
Iteration  21: 237158.174 ops/s
Iteration  22: 248888.185 ops/s
Iteration  23: 203647.211 ops/s
Iteration  24: 249814.716 ops/s
Iteration  25: 257483.784 ops/s
Iteration  26: 243313.118 ops/s
Iteration  27: 249032.077 ops/s
Iteration  28: 254999.686 ops/s
Iteration  29: 246020.206 ops/s
Iteration  30: 248130.636 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrDefaultTest._Benchmark.benchmark_firstSourceIgnoresCancel":
  246482.806 ±(99.9%) 6953.239 ops/s [Average]
  (min, avg, max) = (203647.211, 246482.806, 258524.560), stdev = 10407.281
  CI (99.9%): [239529.567, 253436.044] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            Mode  Cnt       Score      Error  Units
FlowableStageSubscriberOrDefaultTest._Benchmark.benchmark_firstSourceIgnoresCancel  thrpt   30  246482.806 ± 6953.239  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromMaybeTest._Benchmark.benchmark_asyncFusion$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromMaybeTest._Benchmark.benchmark_asyncFusion

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1221810.275 ops/s
# Warmup Iteration   2: 4421931.038 ops/s
# Warmup Iteration   3: 5916681.444 ops/s
# Warmup Iteration   4: 6073229.519 ops/s
# Warmup Iteration   5: 6422851.512 ops/s
# Warmup Iteration   6: 6141902.267 ops/s
# Warmup Iteration   7: 6215673.136 ops/s
# Warmup Iteration   8: 6133195.573 ops/s
# Warmup Iteration   9: 6322210.955 ops/s
# Warmup Iteration  10: 6234204.765 ops/s
# Warmup Iteration  11: 6114243.015 ops/s
# Warmup Iteration  12: 6238807.611 ops/s
# Warmup Iteration  13: 6067859.649 ops/s
# Warmup Iteration  14: 6484951.277 ops/s
# Warmup Iteration  15: 6027501.088 ops/s
# Warmup Iteration  16: 6197852.434 ops/s
# Warmup Iteration  17: 6524151.915 ops/s
# Warmup Iteration  18: 6095021.420 ops/s
# Warmup Iteration  19: 6594911.366 ops/s
# Warmup Iteration  20: 6124559.230 ops/s
# Warmup Iteration  21: 6256291.962 ops/s
# Warmup Iteration  22: 6445344.315 ops/s
# Warmup Iteration  23: 6113150.775 ops/s
# Warmup Iteration  24: 6292850.050 ops/s
# Warmup Iteration  25: 6366911.237 ops/s
# Warmup Iteration  26: 6117914.572 ops/s
# Warmup Iteration  27: 6376949.947 ops/s
# Warmup Iteration  28: 6131841.749 ops/s
# Warmup Iteration  29: 6420935.610 ops/s
# Warmup Iteration  30: 6345950.746 ops/s
Iteration   1: 6150940.590 ops/s
Iteration   2: 6469484.794 ops/s
Iteration   3: 6110278.797 ops/s
Iteration   4: 6334221.129 ops/s
Iteration   5: 6476752.134 ops/s
Iteration   6: 6185652.152 ops/s
Iteration   7: 6390444.547 ops/s
Iteration   8: 6429355.741 ops/s
Iteration   9: 6287485.530 ops/s
Iteration  10: 6470506.923 ops/s
Iteration  11: 6081931.138 ops/s
Iteration  12: 6328027.583 ops/s
Iteration  13: 6223990.245 ops/s
Iteration  14: 6294493.079 ops/s
Iteration  15: 6189211.900 ops/s
Iteration  16: 6261819.277 ops/s
Iteration  17: 6332313.038 ops/s
Iteration  18: 6465218.325 ops/s
Iteration  19: 6183219.404 ops/s
Iteration  20: 6453301.828 ops/s
Iteration  21: 6089599.489 ops/s
Iteration  22: 6582462.808 ops/s
Iteration  23: 6359638.176 ops/s
Iteration  24: 6124614.294 ops/s
Iteration  25: 6438314.501 ops/s
Iteration  26: 6103933.863 ops/s
Iteration  27: 6335947.377 ops/s
Iteration  28: 6153494.656 ops/s
Iteration  29: 6140222.763 ops/s
Iteration  30: 6547134.895 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFromMaybeTest._Benchmark.benchmark_asyncFusion":
  6299800.366 ±(99.9%) 99657.090 ops/s [Average]
  (min, avg, max) = (6081931.138, 6299800.366, 6582462.808), stdev = 149162.052
  CI (99.9%): [6200143.276, 6399457.456] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
ObservableFromMaybeTest._Benchmark.benchmark_asyncFusion  thrpt   30  6299800.366 ± 99657.090  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapTest._Benchmark.benchmark_fusedInnerThrows2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapTest._Benchmark.benchmark_fusedInnerThrows2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 13026.291 ops/s
# Warmup Iteration   2: 47332.784 ops/s
# Warmup Iteration   3: 112278.011 ops/s
# Warmup Iteration   4: 121968.198 ops/s
# Warmup Iteration   5: 115891.289 ops/s
# Warmup Iteration   6: 115332.829 ops/s
# Warmup Iteration   7: 120785.102 ops/s
# Warmup Iteration   8: 114768.534 ops/s
# Warmup Iteration   9: 116773.160 ops/s
# Warmup Iteration  10: 120839.647 ops/s
# Warmup Iteration  11: 112711.861 ops/s
# Warmup Iteration  12: 117531.578 ops/s
# Warmup Iteration  13: 124514.049 ops/s
# Warmup Iteration  14: 113322.132 ops/s
# Warmup Iteration  15: 120466.825 ops/s
# Warmup Iteration  16: 115003.758 ops/s
# Warmup Iteration  17: 122408.256 ops/s
# Warmup Iteration  18: 117375.031 ops/s
# Warmup Iteration  19: 123467.218 ops/s
# Warmup Iteration  20: 122935.324 ops/s
# Warmup Iteration  21: 117480.580 ops/s
# Warmup Iteration  22: 120671.010 ops/s
# Warmup Iteration  23: 124676.034 ops/s
# Warmup Iteration  24: 119781.200 ops/s
# Warmup Iteration  25: 126990.662 ops/s
# Warmup Iteration  26: 120920.019 ops/s
# Warmup Iteration  27: 120412.382 ops/s
# Warmup Iteration  28: 120065.836 ops/s
# Warmup Iteration  29: 123245.109 ops/s
# Warmup Iteration  30: 122064.057 ops/s
Iteration   1: 119908.315 ops/s
Iteration   2: 124149.801 ops/s
Iteration   3: 118103.556 ops/s
Iteration   4: 122765.866 ops/s
Iteration   5: 128267.480 ops/s
Iteration   6: 124128.870 ops/s
Iteration   7: 118962.796 ops/s
Iteration   8: 125564.181 ops/s
Iteration   9: 122423.367 ops/s
Iteration  10: 123010.062 ops/s
Iteration  11: 120020.575 ops/s
Iteration  12: 122423.436 ops/s
Iteration  13: 121139.669 ops/s
Iteration  14: 122863.385 ops/s
Iteration  15: 123653.405 ops/s
Iteration  16: 117688.619 ops/s
Iteration  17: 121968.271 ops/s
Iteration  18: 92615.242 ops/s
Iteration  19: 119149.877 ops/s
Iteration  20: 126399.509 ops/s
Iteration  21: 119699.432 ops/s
Iteration  22: 124764.307 ops/s
Iteration  23: 121876.884 ops/s
Iteration  24: 124860.405 ops/s
Iteration  25: 119334.651 ops/s
Iteration  26: 125136.774 ops/s
Iteration  27: 123996.080 ops/s
Iteration  28: 121620.694 ops/s
Iteration  29: 124990.052 ops/s
Iteration  30: 118400.001 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapTest._Benchmark.benchmark_fusedInnerThrows2":
  121329.519 ±(99.9%) 4039.606 ops/s [Average]
  (min, avg, max) = (92615.242, 121329.519, 128267.480), stdev = 6046.292
  CI (99.9%): [117289.913, 125369.125] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
ObservableFlatMapTest._Benchmark.benchmark_fusedInnerThrows2  thrpt   30  121329.519 ± 4039.606  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithTimeTest._Benchmark.benchmark_timespanTimeskipDefaultScheduler$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithTimeTest._Benchmark.benchmark_timespanTimeskipDefaultScheduler

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 7016.006 ops/s
# Warmup Iteration   2: 34587.484 ops/s
# Warmup Iteration   3: 111382.825 ops/s
# Warmup Iteration   4: 101955.835 ops/s
# Warmup Iteration   5: 111788.242 ops/s
# Warmup Iteration   6: 113313.685 ops/s
# Warmup Iteration   7: 113692.411 ops/s
# Warmup Iteration   8: 119754.013 ops/s
# Warmup Iteration   9: 138542.758 ops/s
# Warmup Iteration  10: 117761.086 ops/s
# Warmup Iteration  11: 118306.092 ops/s
# Warmup Iteration  12: 112922.059 ops/s
# Warmup Iteration  13: 115350.969 ops/s
# Warmup Iteration  14: 112189.170 ops/s
# Warmup Iteration  15: 124427.056 ops/s
# Warmup Iteration  16: 122319.906 ops/s
# Warmup Iteration  17: 113814.871 ops/s
# Warmup Iteration  18: 112392.447 ops/s
# Warmup Iteration  19: 130540.465 ops/s
# Warmup Iteration  20: 103843.562 ops/s
# Warmup Iteration  21: 123958.431 ops/s
# Warmup Iteration  22: 112924.679 ops/s
# Warmup Iteration  23: 122006.463 ops/s
# Warmup Iteration  24: 98906.914 ops/s
# Warmup Iteration  25: 126420.163 ops/s
# Warmup Iteration  26: 112101.752 ops/s
# Warmup Iteration  27: 104198.431 ops/s
# Warmup Iteration  28: 112953.690 ops/s
# Warmup Iteration  29: 122162.674 ops/s
# Warmup Iteration  30: 119636.379 ops/s
Iteration   1: 126678.942 ops/s
Iteration   2: 121043.706 ops/s
Iteration   3: 122873.272 ops/s
Iteration   4: 137011.243 ops/s
Iteration   5: 115378.231 ops/s
Iteration   6: 111069.992 ops/s
Iteration   7: 110095.587 ops/s
Iteration   8: 127584.007 ops/s
Iteration   9: 121323.405 ops/s
Iteration  10: 120467.251 ops/s
Iteration  11: 126676.921 ops/s
Iteration  12: 119693.344 ops/s
Iteration  13: 111786.673 ops/s
Iteration  14: 128037.260 ops/s
Iteration  15: 106697.889 ops/s
Iteration  16: 105401.006 ops/s
Iteration  17: 101445.705 ops/s
Iteration  18: 114930.361 ops/s
Iteration  19: 110214.198 ops/s
Iteration  20: 125285.137 ops/s
Iteration  21: 121613.792 ops/s
Iteration  22: 114277.561 ops/s
Iteration  23: 94858.378 ops/s
Iteration  24: 115129.720 ops/s
Iteration  25: 116991.922 ops/s
Iteration  26: 105502.304 ops/s
Iteration  27: 114509.845 ops/s
Iteration  28: 109762.060 ops/s
Iteration  29: 122661.226 ops/s
Iteration  30: 115934.213 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithTimeTest._Benchmark.benchmark_timespanTimeskipDefaultScheduler":
  116497.838 ±(99.9%) 6031.560 ops/s [Average]
  (min, avg, max) = (94858.378, 116497.838, 137011.243), stdev = 9027.756
  CI (99.9%): [110466.278, 122529.398] (assumes normal distribution)


# Run complete. Total time: 00:01:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            Mode  Cnt       Score      Error  Units
ObservableWindowWithTimeTest._Benchmark.benchmark_timespanTimeskipDefaultScheduler  thrpt   30  116497.838 ± 6031.560  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithTimeTest._Benchmark.benchmark_timespanDefaultSchedulerSize$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithTimeTest._Benchmark.benchmark_timespanDefaultSchedulerSize

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 5421.350 ops/s
# Warmup Iteration   2: 35024.008 ops/s
# Warmup Iteration   3: 49424.778 ops/s
# Warmup Iteration   4: 91885.611 ops/s
# Warmup Iteration   5: 92378.774 ops/s
# Warmup Iteration   6: 110086.652 ops/s
# Warmup Iteration   7: 85767.709 ops/s
# Warmup Iteration   8: 103393.635 ops/s
# Warmup Iteration   9: 97085.610 ops/s
# Warmup Iteration  10: 113686.690 ops/s
# Warmup Iteration  11: 119286.569 ops/s
# Warmup Iteration  12: 119629.958 ops/s
# Warmup Iteration  13: 114998.561 ops/s
# Warmup Iteration  14: 117779.520 ops/s
# Warmup Iteration  15: 117035.119 ops/s
# Warmup Iteration  16: 111858.600 ops/s
# Warmup Iteration  17: 105393.679 ops/s
# Warmup Iteration  18: 107078.543 ops/s
# Warmup Iteration  19: 112587.891 ops/s
# Warmup Iteration  20: 116129.374 ops/s
# Warmup Iteration  21: 121392.319 ops/s
# Warmup Iteration  22: 118414.857 ops/s
# Warmup Iteration  23: 115880.031 ops/s
# Warmup Iteration  24: 106029.432 ops/s
# Warmup Iteration  25: 118665.721 ops/s
# Warmup Iteration  26: 115806.251 ops/s
# Warmup Iteration  27: 105467.577 ops/s
# Warmup Iteration  28: 111510.487 ops/s
# Warmup Iteration  29: 126363.430 ops/s
# Warmup Iteration  30: 111911.282 ops/s
Iteration   1: 113541.895 ops/s
Iteration   2: 105804.125 ops/s
Iteration   3: 113756.305 ops/s
Iteration   4: 108680.681 ops/s
Iteration   5: 112614.725 ops/s
Iteration   6: 95144.798 ops/s
Iteration   7: 106549.029 ops/s
Iteration   8: 122009.533 ops/s
Iteration   9: 106788.630 ops/s
Iteration  10: 91385.817 ops/s
Iteration  11: 114018.872 ops/s
Iteration  12: 112864.064 ops/s
Iteration  13: 101523.272 ops/s
Iteration  14: 119075.817 ops/s
Iteration  15: 123929.352 ops/s
Iteration  16: 99876.404 ops/s
Iteration  17: 110389.073 ops/s
Iteration  18: 114040.367 ops/s
Iteration  19: 101109.454 ops/s
Iteration  20: 110275.101 ops/s
Iteration  21: 119538.647 ops/s
Iteration  22: 119810.080 ops/s
Iteration  23: 106850.883 ops/s
Iteration  24: 112336.460 ops/s
Iteration  25: 109237.753 ops/s
Iteration  26: 107002.470 ops/s
Iteration  27: 97840.976 ops/s
Iteration  28: 113140.103 ops/s
Iteration  29: 106696.619 ops/s
Iteration  30: 112366.633 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithTimeTest._Benchmark.benchmark_timespanDefaultSchedulerSize":
  109606.598 ±(99.9%) 5173.512 ops/s [Average]
  (min, avg, max) = (91385.817, 109606.598, 123929.352), stdev = 7743.470
  CI (99.9%): [104433.086, 114780.110] (assumes normal distribution)


# Run complete. Total time: 00:01:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt       Score      Error  Units
ObservableWindowWithTimeTest._Benchmark.benchmark_timespanDefaultSchedulerSize  thrpt   30  109606.598 ± 5173.512  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybeTest._Benchmark.benchmark_take$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybeTest._Benchmark.benchmark_take

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 458559.958 ops/s
# Warmup Iteration   2: 1636309.982 ops/s
# Warmup Iteration   3: 2077261.509 ops/s
# Warmup Iteration   4: 2419748.179 ops/s
# Warmup Iteration   5: 2587251.767 ops/s
# Warmup Iteration   6: 2450996.882 ops/s
# Warmup Iteration   7: 2512514.642 ops/s
# Warmup Iteration   8: 2585115.995 ops/s
# Warmup Iteration   9: 2490890.822 ops/s
# Warmup Iteration  10: 2491157.215 ops/s
# Warmup Iteration  11: 2426067.045 ops/s
# Warmup Iteration  12: 2498488.593 ops/s
# Warmup Iteration  13: 2548473.846 ops/s
# Warmup Iteration  14: 2548306.261 ops/s
# Warmup Iteration  15: 2575615.757 ops/s
# Warmup Iteration  16: 2441814.330 ops/s
# Warmup Iteration  17: 2542508.936 ops/s
# Warmup Iteration  18: 2545500.532 ops/s
# Warmup Iteration  19: 2532225.019 ops/s
# Warmup Iteration  20: 2586311.742 ops/s
# Warmup Iteration  21: 2528783.626 ops/s
# Warmup Iteration  22: 2555813.786 ops/s
# Warmup Iteration  23: 2513454.673 ops/s
# Warmup Iteration  24: 2479927.418 ops/s
# Warmup Iteration  25: 2579833.134 ops/s
# Warmup Iteration  26: 2515291.817 ops/s
# Warmup Iteration  27: 2607295.598 ops/s
# Warmup Iteration  28: 2458576.399 ops/s
# Warmup Iteration  29: 2520047.182 ops/s
# Warmup Iteration  30: 2591671.800 ops/s
Iteration   1: 2423845.312 ops/s
Iteration   2: 2536684.547 ops/s
Iteration   3: 2574860.530 ops/s
Iteration   4: 2522511.421 ops/s
Iteration   5: 2697868.226 ops/s
Iteration   6: 2494239.674 ops/s
Iteration   7: 2644423.159 ops/s
Iteration   8: 2479556.550 ops/s
Iteration   9: 2602026.162 ops/s
Iteration  10: 2503183.105 ops/s
Iteration  11: 2534413.308 ops/s
Iteration  12: 2536079.495 ops/s
Iteration  13: 2493766.269 ops/s
Iteration  14: 2509635.818 ops/s
Iteration  15: 2523869.924 ops/s
Iteration  16: 2535230.560 ops/s
Iteration  17: 2623732.589 ops/s
Iteration  18: 2473380.109 ops/s
Iteration  19: 2596519.331 ops/s
Iteration  20: 2502830.454 ops/s
Iteration  21: 2629647.318 ops/s
Iteration  22: 2456252.548 ops/s
Iteration  23: 2593958.193 ops/s
Iteration  24: 2501295.029 ops/s
Iteration  25: 2574341.442 ops/s
Iteration  26: 2506570.692 ops/s
Iteration  27: 2570322.050 ops/s
Iteration  28: 2520362.404 ops/s
Iteration  29: 2488533.069 ops/s
Iteration  30: 2566889.670 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybeTest._Benchmark.benchmark_take":
  2540560.965 ±(99.9%) 40703.936 ops/s [Average]
  (min, avg, max) = (2423845.312, 2540560.965, 2697868.226), stdev = 60923.740
  CI (99.9%): [2499857.029, 2581264.901] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
ObservableMergeWithMaybeTest._Benchmark.benchmark_take  thrpt   30  2540560.965 ± 40703.936  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotificationTest._Benchmark.benchmark_onSuccessError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotificationTest._Benchmark.benchmark_onSuccessError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 147776.447 ops/s
# Warmup Iteration   2: 560359.432 ops/s
# Warmup Iteration   3: 642865.446 ops/s
# Warmup Iteration   4: 638191.250 ops/s
# Warmup Iteration   5: 715906.449 ops/s
# Warmup Iteration   6: 680014.006 ops/s
# Warmup Iteration   7: 704608.381 ops/s
# Warmup Iteration   8: 728550.770 ops/s
# Warmup Iteration   9: 706716.366 ops/s
# Warmup Iteration  10: 686093.370 ops/s
# Warmup Iteration  11: 700526.492 ops/s
# Warmup Iteration  12: 705989.128 ops/s
# Warmup Iteration  13: 679067.728 ops/s
# Warmup Iteration  14: 706406.158 ops/s
# Warmup Iteration  15: 666203.563 ops/s
# Warmup Iteration  16: 703860.600 ops/s
# Warmup Iteration  17: 714642.640 ops/s
# Warmup Iteration  18: 739122.573 ops/s
# Warmup Iteration  19: 700547.901 ops/s
# Warmup Iteration  20: 746500.299 ops/s
# Warmup Iteration  21: 725574.142 ops/s
# Warmup Iteration  22: 730321.293 ops/s
# Warmup Iteration  23: 753694.747 ops/s
# Warmup Iteration  24: 714833.814 ops/s
# Warmup Iteration  25: 694044.058 ops/s
# Warmup Iteration  26: 724796.059 ops/s
# Warmup Iteration  27: 709877.223 ops/s
# Warmup Iteration  28: 758198.220 ops/s
# Warmup Iteration  29: 757493.950 ops/s
# Warmup Iteration  30: 721564.756 ops/s
Iteration   1: 778647.152 ops/s
Iteration   2: 742712.028 ops/s
Iteration   3: 731278.446 ops/s
Iteration   4: 590969.308 ops/s
Iteration   5: 711879.093 ops/s
Iteration   6: 765531.605 ops/s
Iteration   7: 748424.006 ops/s
Iteration   8: 714281.905 ops/s
Iteration   9: 752025.167 ops/s
Iteration  10: 718352.331 ops/s
Iteration  11: 769208.714 ops/s
Iteration  12: 764223.630 ops/s
Iteration  13: 720450.668 ops/s
Iteration  14: 756529.269 ops/s
Iteration  15: 743179.169 ops/s
Iteration  16: 709598.211 ops/s
Iteration  17: 749569.774 ops/s
Iteration  18: 732924.233 ops/s
Iteration  19: 762084.998 ops/s
Iteration  20: 734619.337 ops/s
Iteration  21: 752230.855 ops/s
Iteration  22: 727869.389 ops/s
Iteration  23: 755446.612 ops/s
Iteration  24: 762890.407 ops/s
Iteration  25: 718759.850 ops/s
Iteration  26: 749065.818 ops/s
Iteration  27: 724373.010 ops/s
Iteration  28: 741873.489 ops/s
Iteration  29: 741211.957 ops/s
Iteration  30: 738038.647 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotificationTest._Benchmark.benchmark_onSuccessError":
  736941.636 ±(99.9%) 22133.966 ops/s [Average]
  (min, avg, max) = (590969.308, 736941.636, 778647.152), stdev = 33129.081
  CI (99.9%): [714807.670, 759075.602] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score       Error  Units
MaybeFlatMapNotificationTest._Benchmark.benchmark_onSuccessError  thrpt   30  736941.636 ± 22133.966  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArrayTest._Benchmark.benchmark_bothSucceed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArrayTest._Benchmark.benchmark_bothSucceed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 852500.691 ops/s
# Warmup Iteration   2: 2237410.559 ops/s
# Warmup Iteration   3: 2955495.199 ops/s
# Warmup Iteration   4: 3100419.257 ops/s
# Warmup Iteration   5: 3253621.898 ops/s
# Warmup Iteration   6: 3149040.458 ops/s
# Warmup Iteration   7: 3144424.066 ops/s
# Warmup Iteration   8: 3182880.457 ops/s
# Warmup Iteration   9: 3168310.361 ops/s
# Warmup Iteration  10: 3101899.448 ops/s
# Warmup Iteration  11: 3079287.677 ops/s
# Warmup Iteration  12: 3274287.534 ops/s
# Warmup Iteration  13: 3119311.287 ops/s
# Warmup Iteration  14: 3273801.507 ops/s
# Warmup Iteration  15: 3086487.256 ops/s
# Warmup Iteration  16: 3239707.558 ops/s
# Warmup Iteration  17: 3130287.594 ops/s
# Warmup Iteration  18: 3211071.902 ops/s
# Warmup Iteration  19: 3160730.662 ops/s
# Warmup Iteration  20: 3106604.862 ops/s
# Warmup Iteration  21: 3159226.757 ops/s
# Warmup Iteration  22: 3188329.027 ops/s
# Warmup Iteration  23: 3136823.887 ops/s
# Warmup Iteration  24: 3218459.953 ops/s
# Warmup Iteration  25: 3158504.221 ops/s
# Warmup Iteration  26: 3205694.257 ops/s
# Warmup Iteration  27: 3128052.831 ops/s
# Warmup Iteration  28: 3260253.754 ops/s
# Warmup Iteration  29: 3107581.444 ops/s
# Warmup Iteration  30: 3286236.975 ops/s
Iteration   1: 3140556.419 ops/s
Iteration   2: 3171574.138 ops/s
Iteration   3: 3168865.722 ops/s
Iteration   4: 3192740.930 ops/s
Iteration   5: 3104371.092 ops/s
Iteration   6: 3257619.664 ops/s
Iteration   7: 3260369.280 ops/s
Iteration   8: 3107347.432 ops/s
Iteration   9: 3238242.200 ops/s
Iteration  10: 3229307.752 ops/s
Iteration  11: 3135298.287 ops/s
Iteration  12: 3183074.006 ops/s
Iteration  13: 3140730.707 ops/s
Iteration  14: 3211603.768 ops/s
Iteration  15: 3292133.754 ops/s
Iteration  16: 3055483.127 ops/s
Iteration  17: 3195192.249 ops/s
Iteration  18: 3151982.272 ops/s
Iteration  19: 3178533.117 ops/s
Iteration  20: 3235439.580 ops/s
Iteration  21: 3201476.709 ops/s
Iteration  22: 3193033.996 ops/s
Iteration  23: 3162405.675 ops/s
Iteration  24: 3291301.544 ops/s
Iteration  25: 3231941.706 ops/s
Iteration  26: 3049838.285 ops/s
Iteration  27: 3231672.768 ops/s
Iteration  28: 3011218.692 ops/s
Iteration  29: 3147933.562 ops/s
Iteration  30: 3240216.735 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArrayTest._Benchmark.benchmark_bothSucceed":
  3180383.506 ±(99.9%) 45872.855 ops/s [Average]
  (min, avg, max) = (3011218.692, 3180383.506, 3292133.754), stdev = 68660.334
  CI (99.9%): [3134510.651, 3226256.360] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score       Error  Units
MaybeZipArrayTest._Benchmark.benchmark_bothSucceed  thrpt   30  3180383.506 ± 45872.855  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapBiSelectorTest._Benchmark.benchmark_mapperReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapBiSelectorTest._Benchmark.benchmark_mapperReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 190166.107 ops/s
# Warmup Iteration   2: 501909.179 ops/s
# Warmup Iteration   3: 585191.155 ops/s
# Warmup Iteration   4: 542579.026 ops/s
# Warmup Iteration   5: 615327.336 ops/s
# Warmup Iteration   6: 540332.612 ops/s
# Warmup Iteration   7: 626108.594 ops/s
# Warmup Iteration   8: 628003.859 ops/s
# Warmup Iteration   9: 606698.432 ops/s
# Warmup Iteration  10: 633891.736 ops/s
# Warmup Iteration  11: 618610.193 ops/s
# Warmup Iteration  12: 595562.898 ops/s
# Warmup Iteration  13: 629875.616 ops/s
# Warmup Iteration  14: 607816.662 ops/s
# Warmup Iteration  15: 635504.484 ops/s
# Warmup Iteration  16: 612368.670 ops/s
# Warmup Iteration  17: 648041.491 ops/s
# Warmup Iteration  18: 652100.135 ops/s
# Warmup Iteration  19: 649486.316 ops/s
# Warmup Iteration  20: 664276.316 ops/s
# Warmup Iteration  21: 628005.624 ops/s
# Warmup Iteration  22: 656681.471 ops/s
# Warmup Iteration  23: 638928.051 ops/s
# Warmup Iteration  24: 652144.850 ops/s
# Warmup Iteration  25: 620119.758 ops/s
# Warmup Iteration  26: 670639.558 ops/s
# Warmup Iteration  27: 631751.368 ops/s
# Warmup Iteration  28: 650119.704 ops/s
# Warmup Iteration  29: 547169.315 ops/s
# Warmup Iteration  30: 635809.798 ops/s
Iteration   1: 660398.358 ops/s
Iteration   2: 633548.414 ops/s
Iteration   3: 647535.048 ops/s
Iteration   4: 673864.572 ops/s
Iteration   5: 630355.641 ops/s
Iteration   6: 668667.326 ops/s
Iteration   7: 636950.801 ops/s
Iteration   8: 679248.682 ops/s
Iteration   9: 655667.897 ops/s
Iteration  10: 626790.030 ops/s
Iteration  11: 674136.838 ops/s
Iteration  12: 614867.755 ops/s
Iteration  13: 672443.247 ops/s
Iteration  14: 647566.630 ops/s
Iteration  15: 628435.384 ops/s
Iteration  16: 655475.124 ops/s
Iteration  17: 619457.371 ops/s
Iteration  18: 656910.949 ops/s
Iteration  19: 630946.265 ops/s
Iteration  20: 654628.081 ops/s
Iteration  21: 646603.612 ops/s
Iteration  22: 653964.966 ops/s
Iteration  23: 642073.034 ops/s
Iteration  24: 668486.181 ops/s
Iteration  25: 667472.661 ops/s
Iteration  26: 626198.573 ops/s
Iteration  27: 665204.566 ops/s
Iteration  28: 617510.059 ops/s
Iteration  29: 645210.127 ops/s
Iteration  30: 673188.085 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapBiSelectorTest._Benchmark.benchmark_mapperReturnsNull":
  649126.876 ±(99.9%) 12773.366 ops/s [Average]
  (min, avg, max) = (614867.755, 649126.876, 679248.682), stdev = 19118.575
  CI (99.9%): [636353.510, 661900.242] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score       Error  Units
MaybeFlatMapBiSelectorTest._Benchmark.benchmark_mapperReturnsNull  thrpt   30  649126.876 ± 12773.366  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapBiSelectorTest._Benchmark.benchmark_mapperThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapBiSelectorTest._Benchmark.benchmark_mapperThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 291086.029 ops/s
# Warmup Iteration   2: 500160.606 ops/s
# Warmup Iteration   3: 576563.620 ops/s
# Warmup Iteration   4: 589641.533 ops/s
# Warmup Iteration   5: 623882.203 ops/s
# Warmup Iteration   6: 610153.672 ops/s
# Warmup Iteration   7: 599493.261 ops/s
# Warmup Iteration   8: 627747.558 ops/s
# Warmup Iteration   9: 605772.088 ops/s
# Warmup Iteration  10: 619360.063 ops/s
# Warmup Iteration  11: 589424.119 ops/s
# Warmup Iteration  12: 604153.842 ops/s
# Warmup Iteration  13: 621699.528 ops/s
# Warmup Iteration  14: 596831.251 ops/s
# Warmup Iteration  15: 604549.332 ops/s
# Warmup Iteration  16: 606402.731 ops/s
# Warmup Iteration  17: 644044.035 ops/s
# Warmup Iteration  18: 636880.977 ops/s
# Warmup Iteration  19: 671233.022 ops/s
# Warmup Iteration  20: 652938.522 ops/s
# Warmup Iteration  21: 626009.983 ops/s
# Warmup Iteration  22: 627335.003 ops/s
# Warmup Iteration  23: 638026.771 ops/s
# Warmup Iteration  24: 629442.089 ops/s
# Warmup Iteration  25: 657146.983 ops/s
# Warmup Iteration  26: 628967.897 ops/s
# Warmup Iteration  27: 650325.847 ops/s
# Warmup Iteration  28: 654787.246 ops/s
# Warmup Iteration  29: 619224.500 ops/s
# Warmup Iteration  30: 664180.201 ops/s
Iteration   1: 594142.466 ops/s
Iteration   2: 618687.143 ops/s
Iteration   3: 625767.349 ops/s
Iteration   4: 622787.277 ops/s
Iteration   5: 661531.873 ops/s
Iteration   6: 666255.596 ops/s
Iteration   7: 638897.389 ops/s
Iteration   8: 658809.081 ops/s
Iteration   9: 611530.267 ops/s
Iteration  10: 653984.323 ops/s
Iteration  11: 637614.889 ops/s
Iteration  12: 649355.723 ops/s
Iteration  13: 625995.893 ops/s
Iteration  14: 623886.678 ops/s
Iteration  15: 649782.378 ops/s
Iteration  16: 641740.430 ops/s
Iteration  17: 649209.899 ops/s
Iteration  18: 623287.255 ops/s
Iteration  19: 627805.808 ops/s
Iteration  20: 640829.008 ops/s
Iteration  21: 616819.666 ops/s
Iteration  22: 640189.019 ops/s
Iteration  23: 622305.257 ops/s
Iteration  24: 641202.355 ops/s
Iteration  25: 655253.019 ops/s
Iteration  26: 636648.629 ops/s
Iteration  27: 634346.110 ops/s
Iteration  28: 633683.942 ops/s
Iteration  29: 636775.667 ops/s
Iteration  30: 648607.806 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapBiSelectorTest._Benchmark.benchmark_mapperThrows":
  636257.740 ±(99.9%) 10789.625 ops/s [Average]
  (min, avg, max) = (594142.466, 636257.740, 666255.596), stdev = 16149.403
  CI (99.9%): [625468.115, 647047.364] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score       Error  Units
MaybeFlatMapBiSelectorTest._Benchmark.benchmark_mapperThrows  thrpt   30  636257.740 ± 10789.625  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDoFinallyTest._Benchmark.benchmark_eventOrdering$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDoFinallyTest._Benchmark.benchmark_eventOrdering

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 194579.363 ops/s
# Warmup Iteration   2: 571554.545 ops/s
# Warmup Iteration   3: 583451.799 ops/s
# Warmup Iteration   4: 634910.205 ops/s
# Warmup Iteration   5: 606536.602 ops/s
# Warmup Iteration   6: 672351.219 ops/s
# Warmup Iteration   7: 649154.703 ops/s
# Warmup Iteration   8: 671392.374 ops/s
# Warmup Iteration   9: 656665.191 ops/s
# Warmup Iteration  10: 678631.564 ops/s
# Warmup Iteration  11: 636716.095 ops/s
# Warmup Iteration  12: 654677.827 ops/s
# Warmup Iteration  13: 665871.088 ops/s
# Warmup Iteration  14: 649509.885 ops/s
# Warmup Iteration  15: 683832.851 ops/s
# Warmup Iteration  16: 642453.278 ops/s
# Warmup Iteration  17: 676349.531 ops/s
# Warmup Iteration  18: 715452.965 ops/s
# Warmup Iteration  19: 701949.073 ops/s
# Warmup Iteration  20: 683116.498 ops/s
# Warmup Iteration  21: 703846.489 ops/s
# Warmup Iteration  22: 674723.795 ops/s
# Warmup Iteration  23: 724371.882 ops/s
# Warmup Iteration  24: 600988.029 ops/s
# Warmup Iteration  25: 701605.779 ops/s
# Warmup Iteration  26: 683887.860 ops/s
# Warmup Iteration  27: 710373.104 ops/s
# Warmup Iteration  28: 698322.127 ops/s
# Warmup Iteration  29: 693297.540 ops/s
# Warmup Iteration  30: 720168.830 ops/s
Iteration   1: 677722.041 ops/s
Iteration   2: 702347.729 ops/s
Iteration   3: 690932.046 ops/s
Iteration   4: 678662.901 ops/s
Iteration   5: 685017.117 ops/s
Iteration   6: 721324.776 ops/s
Iteration   7: 674089.060 ops/s
Iteration   8: 708426.136 ops/s
Iteration   9: 694303.612 ops/s
Iteration  10: 710854.481 ops/s
Iteration  11: 719804.420 ops/s
Iteration  12: 685472.931 ops/s
Iteration  13: 692163.641 ops/s
Iteration  14: 691400.838 ops/s
Iteration  15: 696322.747 ops/s
Iteration  16: 695111.701 ops/s
Iteration  17: 694395.070 ops/s
Iteration  18: 721155.960 ops/s
Iteration  19: 663808.844 ops/s
Iteration  20: 722146.969 ops/s
Iteration  21: 676659.351 ops/s
Iteration  22: 707239.761 ops/s
Iteration  23: 705876.984 ops/s
Iteration  24: 670137.343 ops/s
Iteration  25: 695255.885 ops/s
Iteration  26: 725962.870 ops/s
Iteration  27: 687347.361 ops/s
Iteration  28: 686714.616 ops/s
Iteration  29: 724224.355 ops/s
Iteration  30: 677213.340 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableDoFinallyTest._Benchmark.benchmark_eventOrdering":
  696069.830 ±(99.9%) 11681.832 ops/s [Average]
  (min, avg, max) = (663808.844, 696069.830, 725962.870), stdev = 17484.818
  CI (99.9%): [684387.998, 707751.662] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score       Error  Units
ObservableDoFinallyTest._Benchmark.benchmark_eventOrdering  thrpt   30  696069.830 ± 11681.832  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingleElementTest._Benchmark.benchmark_flatMapSingleValueErrorThrown$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingleElementTest._Benchmark.benchmark_flatMapSingleValueErrorThrown

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 280157.183 ops/s
# Warmup Iteration   2: 488056.651 ops/s
# Warmup Iteration   3: 586657.165 ops/s
# Warmup Iteration   4: 578692.244 ops/s
# Warmup Iteration   5: 590111.895 ops/s
# Warmup Iteration   6: 563356.741 ops/s
# Warmup Iteration   7: 587749.169 ops/s
# Warmup Iteration   8: 583559.925 ops/s
# Warmup Iteration   9: 541199.048 ops/s
# Warmup Iteration  10: 562601.402 ops/s
# Warmup Iteration  11: 569158.379 ops/s
# Warmup Iteration  12: 582688.282 ops/s
# Warmup Iteration  13: 613672.290 ops/s
# Warmup Iteration  14: 563640.590 ops/s
# Warmup Iteration  15: 576597.552 ops/s
# Warmup Iteration  16: 598846.040 ops/s
# Warmup Iteration  17: 593070.364 ops/s
# Warmup Iteration  18: 617776.545 ops/s
# Warmup Iteration  19: 605703.645 ops/s
# Warmup Iteration  20: 606154.378 ops/s
# Warmup Iteration  21: 625973.950 ops/s
# Warmup Iteration  22: 610148.918 ops/s
# Warmup Iteration  23: 581126.572 ops/s
# Warmup Iteration  24: 597832.407 ops/s
# Warmup Iteration  25: 597357.650 ops/s
# Warmup Iteration  26: 588816.302 ops/s
# Warmup Iteration  27: 630038.563 ops/s
# Warmup Iteration  28: 638126.263 ops/s
# Warmup Iteration  29: 595037.286 ops/s
# Warmup Iteration  30: 585120.667 ops/s
Iteration   1: 601859.027 ops/s
Iteration   2: 625971.124 ops/s
Iteration   3: 592388.280 ops/s
Iteration   4: 619181.843 ops/s
Iteration   5: 602038.466 ops/s
Iteration   6: 630211.103 ops/s
Iteration   7: 588286.969 ops/s
Iteration   8: 616775.422 ops/s
Iteration   9: 600263.841 ops/s
Iteration  10: 616667.405 ops/s
Iteration  11: 579072.268 ops/s
Iteration  12: 608910.294 ops/s
Iteration  13: 602581.404 ops/s
Iteration  14: 603693.350 ops/s
Iteration  15: 603279.716 ops/s
Iteration  16: 621149.581 ops/s
Iteration  17: 591615.716 ops/s
Iteration  18: 593296.929 ops/s
Iteration  19: 637539.340 ops/s
Iteration  20: 589203.753 ops/s
Iteration  21: 635378.984 ops/s
Iteration  22: 595891.505 ops/s
Iteration  23: 628079.453 ops/s
Iteration  24: 621793.627 ops/s
Iteration  25: 591887.443 ops/s
Iteration  26: 619324.651 ops/s
Iteration  27: 592945.722 ops/s
Iteration  28: 619119.977 ops/s
Iteration  29: 596436.723 ops/s
Iteration  30: 604787.709 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingleElementTest._Benchmark.benchmark_flatMapSingleValueErrorThrown":
  607654.387 ±(99.9%) 10393.689 ops/s [Average]
  (min, avg, max) = (579072.268, 607654.387, 637539.340), stdev = 15556.786
  CI (99.9%): [597260.698, 618048.077] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt       Score       Error  Units
MaybeFlatMapSingleElementTest._Benchmark.benchmark_flatMapSingleValueErrorThrown  thrpt   30  607654.387 ± 10393.689  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybeTest._Benchmark.benchmark_onSuccessSlowPath$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybeTest._Benchmark.benchmark_onSuccessSlowPath

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 275279.461 ops/s
# Warmup Iteration   2: 1514062.273 ops/s
# Warmup Iteration   3: 1668470.017 ops/s
# Warmup Iteration   4: 2148712.308 ops/s
# Warmup Iteration   5: 2178172.627 ops/s
# Warmup Iteration   6: 2261737.782 ops/s
# Warmup Iteration   7: 2229051.978 ops/s
# Warmup Iteration   8: 2206218.522 ops/s
# Warmup Iteration   9: 2290309.661 ops/s
# Warmup Iteration  10: 2110570.062 ops/s
# Warmup Iteration  11: 2247275.146 ops/s
# Warmup Iteration  12: 2213467.375 ops/s
# Warmup Iteration  13: 2248944.523 ops/s
# Warmup Iteration  14: 2185446.550 ops/s
# Warmup Iteration  15: 2234154.380 ops/s
# Warmup Iteration  16: 2305970.552 ops/s
# Warmup Iteration  17: 2158779.192 ops/s
# Warmup Iteration  18: 2140812.400 ops/s
# Warmup Iteration  19: 1761795.016 ops/s
# Warmup Iteration  20: 2250279.097 ops/s
# Warmup Iteration  21: 2181887.579 ops/s
# Warmup Iteration  22: 2315374.235 ops/s
# Warmup Iteration  23: 2106250.416 ops/s
# Warmup Iteration  24: 2285552.632 ops/s
# Warmup Iteration  25: 2151444.239 ops/s
# Warmup Iteration  26: 2223584.768 ops/s
# Warmup Iteration  27: 2180140.445 ops/s
# Warmup Iteration  28: 2194814.158 ops/s
# Warmup Iteration  29: 2321067.719 ops/s
# Warmup Iteration  30: 2168103.586 ops/s
Iteration   1: 2289266.371 ops/s
Iteration   2: 2282101.513 ops/s
Iteration   3: 2107523.914 ops/s
Iteration   4: 2270872.753 ops/s
Iteration   5: 2211813.570 ops/s
Iteration   6: 2256661.339 ops/s
Iteration   7: 2208486.321 ops/s
Iteration   8: 2225078.930 ops/s
Iteration   9: 2218601.060 ops/s
Iteration  10: 2221335.679 ops/s
Iteration  11: 2211143.297 ops/s
Iteration  12: 2251527.553 ops/s
Iteration  13: 2189240.801 ops/s
Iteration  14: 2242993.125 ops/s
Iteration  15: 2269657.501 ops/s
Iteration  16: 2188338.825 ops/s
Iteration  17: 2223745.254 ops/s
Iteration  18: 2307445.732 ops/s
Iteration  19: 2102799.253 ops/s
Iteration  20: 2260010.731 ops/s
Iteration  21: 2230183.324 ops/s
Iteration  22: 2265327.700 ops/s
Iteration  23: 2230516.807 ops/s
Iteration  24: 2235448.142 ops/s
Iteration  25: 2202615.597 ops/s
Iteration  26: 2183399.313 ops/s
Iteration  27: 2367299.718 ops/s
Iteration  28: 2181859.990 ops/s
Iteration  29: 2180819.602 ops/s
Iteration  30: 2277641.854 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybeTest._Benchmark.benchmark_onSuccessSlowPath":
  2229791.852 ±(99.9%) 35906.655 ops/s [Average]
  (min, avg, max) = (2102799.253, 2229791.852, 2367299.718), stdev = 53743.395
  CI (99.9%): [2193885.198, 2265698.507] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
ObservableMergeWithMaybeTest._Benchmark.benchmark_onSuccessSlowPath  thrpt   30  2229791.852 ± 35906.655  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_innerCallableThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_innerCallableThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 54122.103 ops/s
# Warmup Iteration   2: 226930.479 ops/s
# Warmup Iteration   3: 372857.168 ops/s
# Warmup Iteration   4: 380053.936 ops/s
# Warmup Iteration   5: 374783.457 ops/s
# Warmup Iteration   6: 360735.612 ops/s
# Warmup Iteration   7: 346515.710 ops/s
# Warmup Iteration   8: 367848.709 ops/s
# Warmup Iteration   9: 388625.300 ops/s
# Warmup Iteration  10: 366169.170 ops/s
# Warmup Iteration  11: 372519.324 ops/s
# Warmup Iteration  12: 370085.728 ops/s
# Warmup Iteration  13: 370707.585 ops/s
# Warmup Iteration  14: 379693.747 ops/s
# Warmup Iteration  15: 363934.547 ops/s
# Warmup Iteration  16: 367715.401 ops/s
# Warmup Iteration  17: 442180.912 ops/s
# Warmup Iteration  18: 435094.059 ops/s
# Warmup Iteration  19: 443993.005 ops/s
# Warmup Iteration  20: 441440.441 ops/s
# Warmup Iteration  21: 437188.326 ops/s
# Warmup Iteration  22: 453211.489 ops/s
# Warmup Iteration  23: 442262.858 ops/s
# Warmup Iteration  24: 426738.245 ops/s
# Warmup Iteration  25: 420259.360 ops/s
# Warmup Iteration  26: 410495.181 ops/s
# Warmup Iteration  27: 452185.260 ops/s
# Warmup Iteration  28: 437380.539 ops/s
# Warmup Iteration  29: 429477.371 ops/s
# Warmup Iteration  30: 456958.063 ops/s
Iteration   1: 428480.067 ops/s
Iteration   2: 458446.126 ops/s
Iteration   3: 432031.150 ops/s
Iteration   4: 435112.196 ops/s
Iteration   5: 439303.948 ops/s
Iteration   6: 433361.050 ops/s
Iteration   7: 447391.904 ops/s
Iteration   8: 436729.493 ops/s
Iteration   9: 441164.340 ops/s
Iteration  10: 428760.608 ops/s
Iteration  11: 433214.256 ops/s
Iteration  12: 456660.066 ops/s
Iteration  13: 415842.095 ops/s
Iteration  14: 454610.961 ops/s
Iteration  15: 453495.937 ops/s
Iteration  16: 431458.171 ops/s
Iteration  17: 455573.195 ops/s
Iteration  18: 429393.938 ops/s
Iteration  19: 443984.794 ops/s
Iteration  20: 437740.712 ops/s
Iteration  21: 444542.854 ops/s
Iteration  22: 459366.864 ops/s
Iteration  23: 442551.167 ops/s
Iteration  24: 440436.821 ops/s
Iteration  25: 439599.511 ops/s
Iteration  26: 449559.251 ops/s
Iteration  27: 429791.083 ops/s
Iteration  28: 447769.301 ops/s
Iteration  29: 433620.517 ops/s
Iteration  30: 439878.871 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_innerCallableThrows":
  440662.375 ±(99.9%) 7057.363 ops/s [Average]
  (min, avg, max) = (415842.095, 440662.375, 459366.864), stdev = 10563.130
  CI (99.9%): [433605.012, 447719.738] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score      Error  Units
ObservableConcatMapEagerTest._Benchmark.benchmark_innerCallableThrows  thrpt   30  440662.375 ± 7057.363  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.observers.DeferredScalarObserverTest._Benchmark.benchmark_customFusionDontConsume$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.observers.DeferredScalarObserverTest._Benchmark.benchmark_customFusionDontConsume

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2040495.903 ops/s
# Warmup Iteration   2: 5249210.470 ops/s
# Warmup Iteration   3: 7516054.696 ops/s
# Warmup Iteration   4: 7295467.900 ops/s
# Warmup Iteration   5: 7771980.809 ops/s
# Warmup Iteration   6: 7344132.355 ops/s
# Warmup Iteration   7: 7373717.265 ops/s
# Warmup Iteration   8: 7421297.163 ops/s
# Warmup Iteration   9: 7351485.025 ops/s
# Warmup Iteration  10: 7594464.276 ops/s
# Warmup Iteration  11: 7058112.890 ops/s
# Warmup Iteration  12: 7417530.721 ops/s
# Warmup Iteration  13: 6370793.360 ops/s
# Warmup Iteration  14: 7131484.339 ops/s
# Warmup Iteration  15: 7509138.015 ops/s
# Warmup Iteration  16: 7210047.645 ops/s
# Warmup Iteration  17: 7579156.772 ops/s
# Warmup Iteration  18: 7197080.019 ops/s
# Warmup Iteration  19: 7405166.939 ops/s
# Warmup Iteration  20: 7396960.647 ops/s
# Warmup Iteration  21: 7414761.832 ops/s
# Warmup Iteration  22: 7418188.123 ops/s
# Warmup Iteration  23: 7471314.036 ops/s
# Warmup Iteration  24: 7228203.124 ops/s
# Warmup Iteration  25: 7306288.440 ops/s
# Warmup Iteration  26: 7347421.080 ops/s
# Warmup Iteration  27: 7656584.752 ops/s
# Warmup Iteration  28: 7116582.764 ops/s
# Warmup Iteration  29: 7601957.395 ops/s
# Warmup Iteration  30: 7443013.655 ops/s
Iteration   1: 7337476.250 ops/s
Iteration   2: 7295812.730 ops/s
Iteration   3: 7324710.336 ops/s
Iteration   4: 7391651.483 ops/s
Iteration   5: 7592013.012 ops/s
Iteration   6: 7262497.839 ops/s
Iteration   7: 7227147.575 ops/s
Iteration   8: 7568060.011 ops/s
Iteration   9: 7471099.955 ops/s
Iteration  10: 7345612.788 ops/s
Iteration  11: 7310850.460 ops/s
Iteration  12: 7325939.911 ops/s
Iteration  13: 7537887.792 ops/s
Iteration  14: 7227537.702 ops/s
Iteration  15: 7249056.285 ops/s
Iteration  16: 7419571.917 ops/s
Iteration  17: 7451760.623 ops/s
Iteration  18: 7511798.249 ops/s
Iteration  19: 7296129.038 ops/s
Iteration  20: 7587336.098 ops/s
Iteration  21: 7044932.708 ops/s
Iteration  22: 7533843.522 ops/s
Iteration  23: 7460697.819 ops/s
Iteration  24: 7470648.238 ops/s
Iteration  25: 7441550.210 ops/s
Iteration  26: 7509890.824 ops/s
Iteration  27: 7722347.594 ops/s
Iteration  28: 7118460.164 ops/s
Iteration  29: 7437667.385 ops/s
Iteration  30: 7367331.396 ops/s


Result "io.reactivex.rxjava3.internal.observers.DeferredScalarObserverTest._Benchmark.benchmark_customFusionDontConsume":
  7394710.664 ±(99.9%) 99261.320 ops/s [Average]
  (min, avg, max) = (7044932.708, 7394710.664, 7722347.594), stdev = 148569.682
  CI (99.9%): [7295449.344, 7493971.984] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score       Error  Units
DeferredScalarObserverTest._Benchmark.benchmark_customFusionDontConsume  thrpt   30  7394710.664 ± 99261.320  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybeTest._Benchmark.benchmark_onErrorMainOverflow$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybeTest._Benchmark.benchmark_onErrorMainOverflow

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 27905.591 ops/s
# Warmup Iteration   2: 116965.083 ops/s
# Warmup Iteration   3: 166862.258 ops/s
# Warmup Iteration   4: 184721.005 ops/s
# Warmup Iteration   5: 163298.419 ops/s
# Warmup Iteration   6: 197226.102 ops/s
# Warmup Iteration   7: 197363.446 ops/s
# Warmup Iteration   8: 184568.563 ops/s
# Warmup Iteration   9: 195565.292 ops/s
# Warmup Iteration  10: 188682.295 ops/s
# Warmup Iteration  11: 199900.510 ops/s
# Warmup Iteration  12: 185132.641 ops/s
# Warmup Iteration  13: 190775.877 ops/s
# Warmup Iteration  14: 199549.337 ops/s
# Warmup Iteration  15: 184169.244 ops/s
# Warmup Iteration  16: 190512.372 ops/s
# Warmup Iteration  17: 204202.167 ops/s
# Warmup Iteration  18: 198725.832 ops/s
# Warmup Iteration  19: 202927.854 ops/s
# Warmup Iteration  20: 198002.729 ops/s
# Warmup Iteration  21: 194669.996 ops/s
# Warmup Iteration  22: 207052.172 ops/s
# Warmup Iteration  23: 196865.188 ops/s
# Warmup Iteration  24: 200383.492 ops/s
# Warmup Iteration  25: 199855.981 ops/s
# Warmup Iteration  26: 197730.027 ops/s
# Warmup Iteration  27: 201248.302 ops/s
# Warmup Iteration  28: 198457.828 ops/s
# Warmup Iteration  29: 200455.103 ops/s
# Warmup Iteration  30: 197179.491 ops/s
Iteration   1: 204730.406 ops/s
Iteration   2: 203291.873 ops/s
Iteration   3: 198000.414 ops/s
Iteration   4: 208267.593 ops/s
Iteration   5: 192070.568 ops/s
Iteration   6: 206067.469 ops/s
Iteration   7: 201183.371 ops/s
Iteration   8: 199559.528 ops/s
Iteration   9: 199988.240 ops/s
Iteration  10: 194638.334 ops/s
Iteration  11: 206242.924 ops/s
Iteration  12: 205817.842 ops/s
Iteration  13: 193599.451 ops/s
Iteration  14: 198772.090 ops/s
Iteration  15: 207359.409 ops/s
Iteration  16: 199744.257 ops/s
Iteration  17: 204938.783 ops/s
Iteration  18: 196031.361 ops/s
Iteration  19: 206428.852 ops/s
Iteration  20: 199615.451 ops/s
Iteration  21: 199156.948 ops/s
Iteration  22: 198737.743 ops/s
Iteration  23: 193923.694 ops/s
Iteration  24: 206630.161 ops/s
Iteration  25: 200233.564 ops/s
Iteration  26: 195819.074 ops/s
Iteration  27: 204179.048 ops/s
Iteration  28: 197139.964 ops/s
Iteration  29: 205217.027 ops/s
Iteration  30: 205229.715 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybeTest._Benchmark.benchmark_onErrorMainOverflow":
  201087.172 ±(99.9%) 3119.478 ops/s [Average]
  (min, avg, max) = (192070.568, 201087.172, 208267.593), stdev = 4669.089
  CI (99.9%): [197967.693, 204206.650] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score      Error  Units
ObservableMergeWithMaybeTest._Benchmark.benchmark_onErrorMainOverflow  thrpt   30  201087.172 ± 3119.478  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservableTest._Benchmark.benchmark_fusedStreamAvailableLater$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservableTest._Benchmark.benchmark_fusedStreamAvailableLater

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 233877.761 ops/s
# Warmup Iteration   2: 1586408.363 ops/s
# Warmup Iteration   3: 2473847.289 ops/s
# Warmup Iteration   4: 3115894.325 ops/s
# Warmup Iteration   5: 3271776.139 ops/s
# Warmup Iteration   6: 3165534.600 ops/s
# Warmup Iteration   7: 3224650.589 ops/s
# Warmup Iteration   8: 2581442.983 ops/s
# Warmup Iteration   9: 3158865.201 ops/s
# Warmup Iteration  10: 3239137.112 ops/s
# Warmup Iteration  11: 3167001.805 ops/s
# Warmup Iteration  12: 3170475.032 ops/s
# Warmup Iteration  13: 3309090.829 ops/s
# Warmup Iteration  14: 3074857.335 ops/s
# Warmup Iteration  15: 3388590.561 ops/s
# Warmup Iteration  16: 3039490.734 ops/s
# Warmup Iteration  17: 3305137.371 ops/s
# Warmup Iteration  18: 3444364.201 ops/s
# Warmup Iteration  19: 3149117.255 ops/s
# Warmup Iteration  20: 3274915.678 ops/s
# Warmup Iteration  21: 3188968.206 ops/s
# Warmup Iteration  22: 3223231.393 ops/s
# Warmup Iteration  23: 3088500.071 ops/s
# Warmup Iteration  24: 3163077.498 ops/s
# Warmup Iteration  25: 3288380.831 ops/s
# Warmup Iteration  26: 3115296.548 ops/s
# Warmup Iteration  27: 3280401.723 ops/s
# Warmup Iteration  28: 3204541.284 ops/s
# Warmup Iteration  29: 3155176.966 ops/s
# Warmup Iteration  30: 3247639.577 ops/s
Iteration   1: 3229553.023 ops/s
Iteration   2: 3168886.631 ops/s
Iteration   3: 3325884.122 ops/s
Iteration   4: 3106472.087 ops/s
Iteration   5: 3290057.115 ops/s
Iteration   6: 3115658.640 ops/s
Iteration   7: 3154324.599 ops/s
Iteration   8: 3396000.139 ops/s
Iteration   9: 3091430.271 ops/s
Iteration  10: 3305075.693 ops/s
Iteration  11: 3255329.448 ops/s
Iteration  12: 3318422.369 ops/s
Iteration  13: 3291163.237 ops/s
Iteration  14: 3136206.851 ops/s
Iteration  15: 3307705.535 ops/s
Iteration  16: 3150165.453 ops/s
Iteration  17: 3200765.963 ops/s
Iteration  18: 3319847.158 ops/s
Iteration  19: 3193087.389 ops/s
Iteration  20: 3196691.582 ops/s
Iteration  21: 3267597.574 ops/s
Iteration  22: 3227419.786 ops/s
Iteration  23: 3264559.220 ops/s
Iteration  24: 3252380.516 ops/s
Iteration  25: 3124782.406 ops/s
Iteration  26: 3342172.052 ops/s
Iteration  27: 3309499.744 ops/s
Iteration  28: 3144994.862 ops/s
Iteration  29: 3117575.875 ops/s
Iteration  30: 3339519.426 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservableTest._Benchmark.benchmark_fusedStreamAvailableLater":
  3231440.959 ±(99.9%) 57216.207 ops/s [Average]
  (min, avg, max) = (3091430.271, 3231440.959, 3396000.139), stdev = 85638.531
  CI (99.9%): [3174224.752, 3288657.166] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           Mode  Cnt        Score       Error  Units
MaybeFlattenStreamAsObservableTest._Benchmark.benchmark_fusedStreamAvailableLater  thrpt   30  3231440.959 ± 57216.207  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableBlockingTest._Benchmark.benchmark_blockingFirstDefault$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableBlockingTest._Benchmark.benchmark_blockingFirstDefault

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 18788.473 ops/s
# Warmup Iteration   2: 28019.614 ops/s
# Warmup Iteration   3: 29732.640 ops/s
# Warmup Iteration   4: 20392.039 ops/s
# Warmup Iteration   5: 21382.615 ops/s
# Warmup Iteration   6: 20439.423 ops/s
# Warmup Iteration   7: 20763.182 ops/s
# Warmup Iteration   8: 21439.865 ops/s
# Warmup Iteration   9: 21834.335 ops/s
# Warmup Iteration  10: 20726.948 ops/s
# Warmup Iteration  11: 20353.222 ops/s
# Warmup Iteration  12: 20864.682 ops/s
# Warmup Iteration  13: 20575.891 ops/s
# Warmup Iteration  14: 21066.828 ops/s
# Warmup Iteration  15: 21357.712 ops/s
# Warmup Iteration  16: 21310.800 ops/s
# Warmup Iteration  17: 20680.484 ops/s
# Warmup Iteration  18: 21247.517 ops/s
# Warmup Iteration  19: 20332.212 ops/s
# Warmup Iteration  20: 21452.613 ops/s
# Warmup Iteration  21: 20611.991 ops/s
# Warmup Iteration  22: 21515.755 ops/s
# Warmup Iteration  23: 20621.588 ops/s
# Warmup Iteration  24: 20807.932 ops/s
# Warmup Iteration  25: 20546.190 ops/s
# Warmup Iteration  26: 25618.572 ops/s
# Warmup Iteration  27: 21523.904 ops/s
# Warmup Iteration  28: 21159.489 ops/s
# Warmup Iteration  29: 21038.344 ops/s
# Warmup Iteration  30: 20605.024 ops/s
Iteration   1: 21468.835 ops/s
Iteration   2: 20594.078 ops/s
Iteration   3: 20757.844 ops/s
Iteration   4: 21242.944 ops/s
Iteration   5: 20691.808 ops/s
Iteration   6: 20919.955 ops/s
Iteration   7: 21379.403 ops/s
Iteration   8: 21124.751 ops/s
Iteration   9: 20599.754 ops/s
Iteration  10: 21142.664 ops/s
Iteration  11: 20727.672 ops/s
Iteration  12: 21137.143 ops/s
Iteration  13: 20753.633 ops/s
Iteration  14: 20748.290 ops/s
Iteration  15: 20923.754 ops/s
Iteration  16: 21096.275 ops/s
Iteration  17: 20920.359 ops/s
Iteration  18: 21142.486 ops/s
Iteration  19: 21211.029 ops/s
Iteration  20: 21057.379 ops/s
Iteration  21: 21049.126 ops/s
Iteration  22: 21371.442 ops/s
Iteration  23: 20748.031 ops/s
Iteration  24: 21506.076 ops/s
Iteration  25: 21227.208 ops/s
Iteration  26: 20620.204 ops/s
Iteration  27: 21138.917 ops/s
Iteration  28: 20882.727 ops/s
Iteration  29: 20703.473 ops/s
Iteration  30: 20321.968 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableBlockingTest._Benchmark.benchmark_blockingFirstDefault":
  20973.641 ±(99.9%) 194.826 ops/s [Average]
  (min, avg, max) = (20321.968, 20973.641, 21506.076), stdev = 291.606
  CI (99.9%): [20778.815, 21168.467] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt      Score     Error  Units
FlowableBlockingTest._Benchmark.benchmark_blockingFirstDefault  thrpt   30  20973.641 ± 194.826  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatestTest._Benchmark.benchmark_disposed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatestTest._Benchmark.benchmark_disposed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 649903.451 ops/s
# Warmup Iteration   2: 2182889.121 ops/s
# Warmup Iteration   3: 2050098.578 ops/s
# Warmup Iteration   4: 3180627.489 ops/s
# Warmup Iteration   5: 3537155.596 ops/s
# Warmup Iteration   6: 3702861.171 ops/s
# Warmup Iteration   7: 3617382.365 ops/s
# Warmup Iteration   8: 3585605.546 ops/s
# Warmup Iteration   9: 3616975.521 ops/s
# Warmup Iteration  10: 3634931.580 ops/s
# Warmup Iteration  11: 3545369.777 ops/s
# Warmup Iteration  12: 3582038.091 ops/s
# Warmup Iteration  13: 3687372.864 ops/s
# Warmup Iteration  14: 3458171.142 ops/s
# Warmup Iteration  15: 3775984.739 ops/s
# Warmup Iteration  16: 3732899.512 ops/s
# Warmup Iteration  17: 3586310.973 ops/s
# Warmup Iteration  18: 3761500.098 ops/s
# Warmup Iteration  19: 3513162.381 ops/s
# Warmup Iteration  20: 3614717.153 ops/s
# Warmup Iteration  21: 3744140.559 ops/s
# Warmup Iteration  22: 3500360.064 ops/s
# Warmup Iteration  23: 3681931.963 ops/s
# Warmup Iteration  24: 3672859.830 ops/s
# Warmup Iteration  25: 3614980.639 ops/s
# Warmup Iteration  26: 3609480.444 ops/s
# Warmup Iteration  27: 3805185.545 ops/s
# Warmup Iteration  28: 3514863.455 ops/s
# Warmup Iteration  29: 3777972.205 ops/s
# Warmup Iteration  30: 3613409.159 ops/s
Iteration   1: 3670178.386 ops/s
Iteration   2: 3677892.596 ops/s
Iteration   3: 3526418.328 ops/s
Iteration   4: 3739837.247 ops/s
Iteration   5: 3616542.534 ops/s
Iteration   6: 3628932.687 ops/s
Iteration   7: 3676009.649 ops/s
Iteration   8: 3642142.603 ops/s
Iteration   9: 3679219.678 ops/s
Iteration  10: 3574349.731 ops/s
Iteration  11: 3726852.341 ops/s
Iteration  12: 3680971.241 ops/s
Iteration  13: 3608463.598 ops/s
Iteration  14: 3666394.798 ops/s
Iteration  15: 3724589.877 ops/s
Iteration  16: 3518614.330 ops/s
Iteration  17: 3782158.900 ops/s
Iteration  18: 3484177.923 ops/s
Iteration  19: 3725243.434 ops/s
Iteration  20: 3626626.544 ops/s
Iteration  21: 3699868.218 ops/s
Iteration  22: 3654013.119 ops/s
Iteration  23: 3632200.590 ops/s
Iteration  24: 3683997.427 ops/s
Iteration  25: 3560983.418 ops/s
Iteration  26: 3678411.597 ops/s
Iteration  27: 3538704.160 ops/s
Iteration  28: 3652898.254 ops/s
Iteration  29: 3607068.862 ops/s
Iteration  30: 3697332.199 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatestTest._Benchmark.benchmark_disposed":
  3646036.476 ±(99.9%) 47238.943 ops/s [Average]
  (min, avg, max) = (3484177.923, 3646036.476, 3782158.900), stdev = 70705.032
  CI (99.9%): [3598797.532, 3693275.419] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
ObservableThrottleLatestTest._Benchmark.benchmark_disposed  thrpt   30  3646036.476 ± 47238.943  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDebounceTest._Benchmark.benchmark_timedError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDebounceTest._Benchmark.benchmark_timedError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.762 ops/s
# Warmup Iteration   2: 26784.824 ops/s
# Warmup Iteration   3: 71165.961 ops/s
# Warmup Iteration   4: 117330.891 ops/s
# Warmup Iteration   5: 141521.182 ops/s
# Warmup Iteration   6: 118377.791 ops/s
# Warmup Iteration   7: 182166.361 ops/s
# Warmup Iteration   8: 307081.684 ops/s
# Warmup Iteration   9: 349460.433 ops/s
# Warmup Iteration  10: 345779.677 ops/s
# Warmup Iteration  11: 330300.802 ops/s
# Warmup Iteration  12: 354560.479 ops/s
# Warmup Iteration  13: 338645.247 ops/s
# Warmup Iteration  14: 347170.195 ops/s
# Warmup Iteration  15: 339521.676 ops/s
# Warmup Iteration  16: 352590.612 ops/s
# Warmup Iteration  17: 336946.973 ops/s
# Warmup Iteration  18: 345314.427 ops/s
# Warmup Iteration  19: 345975.159 ops/s
# Warmup Iteration  20: 339814.099 ops/s
# Warmup Iteration  21: 349766.077 ops/s
# Warmup Iteration  22: 355247.421 ops/s
# Warmup Iteration  23: 347244.660 ops/s
# Warmup Iteration  24: 335109.220 ops/s
# Warmup Iteration  25: 352263.352 ops/s
# Warmup Iteration  26: 337394.358 ops/s
# Warmup Iteration  27: 344308.001 ops/s
# Warmup Iteration  28: 350726.360 ops/s
# Warmup Iteration  29: 342212.006 ops/s
# Warmup Iteration  30: 360507.200 ops/s
Iteration   1: 326103.051 ops/s
Iteration   2: 346368.198 ops/s
Iteration   3: 359656.390 ops/s
Iteration   4: 345805.726 ops/s
Iteration   5: 352360.941 ops/s
Iteration   6: 351570.706 ops/s
Iteration   7: 357982.513 ops/s
Iteration   8: 341588.577 ops/s
Iteration   9: 354759.069 ops/s
Iteration  10: 337332.892 ops/s
Iteration  11: 348539.449 ops/s
Iteration  12: 348603.487 ops/s
Iteration  13: 328982.658 ops/s
Iteration  14: 343310.533 ops/s
Iteration  15: 350288.412 ops/s
Iteration  16: 337773.620 ops/s
Iteration  17: 346540.789 ops/s
Iteration  18: 355867.602 ops/s
Iteration  19: 341133.437 ops/s
Iteration  20: 350258.408 ops/s
Iteration  21: 348440.475 ops/s
Iteration  22: 347861.635 ops/s
Iteration  23: 343381.138 ops/s
Iteration  24: 342867.032 ops/s
Iteration  25: 351700.888 ops/s
Iteration  26: 343721.389 ops/s
Iteration  27: 354072.883 ops/s
Iteration  28: 356558.223 ops/s
Iteration  29: 337027.871 ops/s
Iteration  30: 292237.923 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableDebounceTest._Benchmark.benchmark_timedError":
  344756.531 ±(99.9%) 8477.799 ops/s [Average]
  (min, avg, max) = (292237.923, 344756.531, 359656.390), stdev = 12689.171
  CI (99.9%): [336278.732, 353234.329] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
ObservableDebounceTest._Benchmark.benchmark_timedError  thrpt   30  344756.531 ± 8477.799  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDebounceTest._Benchmark.benchmark_timedDisposedIgnoredBySource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDebounceTest._Benchmark.benchmark_timedDisposedIgnoredBySource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.693 ops/s
# Warmup Iteration   2: 40063.557 ops/s
# Warmup Iteration   3: 145871.034 ops/s
# Warmup Iteration   4: 207306.237 ops/s
# Warmup Iteration   5: 266172.274 ops/s
# Warmup Iteration   6: 424447.139 ops/s
# Warmup Iteration   7: 667617.254 ops/s
# Warmup Iteration   8: 715365.450 ops/s
# Warmup Iteration   9: 784510.100 ops/s
# Warmup Iteration  10: 746099.117 ops/s
# Warmup Iteration  11: 764454.168 ops/s
# Warmup Iteration  12: 784970.965 ops/s
# Warmup Iteration  13: 754076.988 ops/s
# Warmup Iteration  14: 759830.024 ops/s
# Warmup Iteration  15: 790489.765 ops/s
# Warmup Iteration  16: 760943.684 ops/s
# Warmup Iteration  17: 758538.451 ops/s
# Warmup Iteration  18: 795453.099 ops/s
# Warmup Iteration  19: 772087.243 ops/s
# Warmup Iteration  20: 774586.175 ops/s
# Warmup Iteration  21: 736953.653 ops/s
# Warmup Iteration  22: 773694.164 ops/s
# Warmup Iteration  23: 780541.941 ops/s
# Warmup Iteration  24: 761942.943 ops/s
# Warmup Iteration  25: 784300.340 ops/s
# Warmup Iteration  26: 755095.215 ops/s
# Warmup Iteration  27: 774091.435 ops/s
# Warmup Iteration  28: 754384.153 ops/s
# Warmup Iteration  29: 772509.258 ops/s
# Warmup Iteration  30: 789256.073 ops/s
Iteration   1: 764084.435 ops/s
Iteration   2: 781056.954 ops/s
Iteration   3: 764135.634 ops/s
Iteration   4: 775524.509 ops/s
Iteration   5: 765916.167 ops/s
Iteration   6: 754036.912 ops/s
Iteration   7: 792308.299 ops/s
Iteration   8: 754818.859 ops/s
Iteration   9: 781877.125 ops/s
Iteration  10: 776822.020 ops/s
Iteration  11: 750073.293 ops/s
Iteration  12: 781073.608 ops/s
Iteration  13: 763866.248 ops/s
Iteration  14: 781921.220 ops/s
Iteration  15: 761760.796 ops/s
Iteration  16: 749059.320 ops/s
Iteration  17: 790699.877 ops/s
Iteration  18: 737858.104 ops/s
Iteration  19: 777604.270 ops/s
Iteration  20: 763688.212 ops/s
Iteration  21: 772462.763 ops/s
Iteration  22: 801405.368 ops/s
Iteration  23: 758930.396 ops/s
Iteration  24: 780481.003 ops/s
Iteration  25: 794006.357 ops/s
Iteration  26: 756558.624 ops/s
Iteration  27: 783021.523 ops/s
Iteration  28: 755222.656 ops/s
Iteration  29: 762490.101 ops/s
Iteration  30: 806099.253 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableDebounceTest._Benchmark.benchmark_timedDisposedIgnoredBySource":
  771295.464 ±(99.9%) 10994.564 ops/s [Average]
  (min, avg, max) = (737858.104, 771295.464, 806099.253), stdev = 16456.148
  CI (99.9%): [760300.899, 782290.028] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score       Error  Units
ObservableDebounceTest._Benchmark.benchmark_timedDisposedIgnoredBySource  thrpt   30  771295.464 ± 10994.564  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDelayTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDelayTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.820 ops/s
# Warmup Iteration   2: 24136.403 ops/s
# Warmup Iteration   3: 56360.909 ops/s
# Warmup Iteration   4: 67044.771 ops/s
# Warmup Iteration   5: 178418.891 ops/s
# Warmup Iteration   6: 155229.243 ops/s
# Warmup Iteration   7: 281543.144 ops/s
# Warmup Iteration   8: 354675.003 ops/s
# Warmup Iteration   9: 409519.874 ops/s
# Warmup Iteration  10: 408480.280 ops/s
# Warmup Iteration  11: 424811.568 ops/s
# Warmup Iteration  12: 429921.985 ops/s
# Warmup Iteration  13: 408370.602 ops/s
# Warmup Iteration  14: 430440.628 ops/s
# Warmup Iteration  15: 420733.278 ops/s
# Warmup Iteration  16: 403003.505 ops/s
# Warmup Iteration  17: 443810.020 ops/s
# Warmup Iteration  18: 419783.099 ops/s
# Warmup Iteration  19: 439510.181 ops/s
# Warmup Iteration  20: 441080.890 ops/s
# Warmup Iteration  21: 412741.541 ops/s
# Warmup Iteration  22: 426100.978 ops/s
# Warmup Iteration  23: 428308.796 ops/s
# Warmup Iteration  24: 419688.405 ops/s
# Warmup Iteration  25: 449293.910 ops/s
# Warmup Iteration  26: 414455.298 ops/s
# Warmup Iteration  27: 434277.576 ops/s
# Warmup Iteration  28: 428336.658 ops/s
# Warmup Iteration  29: 423777.353 ops/s
# Warmup Iteration  30: 437198.667 ops/s
Iteration   1: 431141.789 ops/s
Iteration   2: 431336.676 ops/s
Iteration   3: 425044.580 ops/s
Iteration   4: 419534.820 ops/s
Iteration   5: 447893.290 ops/s
Iteration   6: 416801.644 ops/s
Iteration   7: 427859.789 ops/s
Iteration   8: 422005.813 ops/s
Iteration   9: 425904.923 ops/s
Iteration  10: 427408.367 ops/s
Iteration  11: 428915.346 ops/s
Iteration  12: 411900.486 ops/s
Iteration  13: 436380.788 ops/s
Iteration  14: 419562.378 ops/s
Iteration  15: 426402.688 ops/s
Iteration  16: 433638.471 ops/s
Iteration  17: 422478.058 ops/s
Iteration  18: 441513.794 ops/s
Iteration  19: 444308.387 ops/s
Iteration  20: 416179.227 ops/s
Iteration  21: 434597.231 ops/s
Iteration  22: 424479.244 ops/s
Iteration  23: 405222.072 ops/s
Iteration  24: 365154.675 ops/s
Iteration  25: 416491.987 ops/s
Iteration  26: 420130.682 ops/s
Iteration  27: 441612.997 ops/s
Iteration  28: 410670.324 ops/s
Iteration  29: 423285.916 ops/s
Iteration  30: 436940.766 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableDelayTest._Benchmark.benchmark_dispose":
  424493.240 ±(99.9%) 10121.314 ops/s [Average]
  (min, avg, max) = (365154.675, 424493.240, 447893.290), stdev = 15149.107
  CI (99.9%): [414371.926, 434614.554] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt       Score       Error  Units
ObservableDelayTest._Benchmark.benchmark_dispose  thrpt   30  424493.240 ± 10121.314  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_cancellingWindowCancelsUpstreamExactTimeSkip$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_cancellingWindowCancelsUpstreamExactTimeSkip

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 4673.340 ops/s
# Warmup Iteration   2: 23448.705 ops/s
# Warmup Iteration   3: 41467.225 ops/s
# Warmup Iteration   4: 43602.807 ops/s
# Warmup Iteration   5: 70759.140 ops/s
# Warmup Iteration   6: 68623.014 ops/s
# Warmup Iteration   7: 83982.404 ops/s
# Warmup Iteration   8: 75867.470 ops/s
# Warmup Iteration   9: 75060.004 ops/s
# Warmup Iteration  10: 81155.796 ops/s
# Warmup Iteration  11: 78064.073 ops/s
# Warmup Iteration  12: 74012.823 ops/s
# Warmup Iteration  13: 81285.151 ops/s
# Warmup Iteration  14: 83395.175 ops/s
# Warmup Iteration  15: 77413.041 ops/s
# Warmup Iteration  16: 83635.176 ops/s
# Warmup Iteration  17: 87796.871 ops/s
# Warmup Iteration  18: 74781.148 ops/s
# Warmup Iteration  19: 78975.361 ops/s
# Warmup Iteration  20: 69119.019 ops/s
# Warmup Iteration  21: 81230.057 ops/s
# Warmup Iteration  22: 88155.315 ops/s
# Warmup Iteration  23: 84334.885 ops/s
# Warmup Iteration  24: 89658.765 ops/s
# Warmup Iteration  25: 81851.412 ops/s
# Warmup Iteration  26: 92353.345 ops/s
# Warmup Iteration  27: 82944.546 ops/s
# Warmup Iteration  28: 81039.413 ops/s
# Warmup Iteration  29: 76910.408 ops/s
# Warmup Iteration  30: 77684.802 ops/s
Iteration   1: 81827.657 ops/s
Iteration   2: 83761.194 ops/s
Iteration   3: 86471.830 ops/s
Iteration   4: 87044.564 ops/s
Iteration   5: 86976.321 ops/s
Iteration   6: 83157.644 ops/s
Iteration   7: 84473.763 ops/s
Iteration   8: 78319.623 ops/s
Iteration   9: 72261.111 ops/s
Iteration  10: 81174.123 ops/s
Iteration  11: 86289.957 ops/s
Iteration  12: 81630.349 ops/s
Iteration  13: 77288.328 ops/s
Iteration  14: 88062.735 ops/s
Iteration  15: 71093.706 ops/s
Iteration  16: 82504.332 ops/s
Iteration  17: 88499.100 ops/s
Iteration  18: 77231.079 ops/s
Iteration  19: 85815.255 ops/s
Iteration  20: 83467.703 ops/s
Iteration  21: 85251.172 ops/s
Iteration  22: 83363.843 ops/s
Iteration  23: 85790.863 ops/s
Iteration  24: 76941.841 ops/s
Iteration  25: 74350.154 ops/s
Iteration  26: 82190.939 ops/s
Iteration  27: 81556.246 ops/s
Iteration  28: 81581.583 ops/s
Iteration  29: 85218.362 ops/s
Iteration  30: 89735.885 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_cancellingWindowCancelsUpstreamExactTimeSkip":
  82444.375 ±(99.9%) 3148.074 ops/s [Average]
  (min, avg, max) = (71093.706, 82444.375, 89735.885), stdev = 4711.889
  CI (99.9%): [79296.302, 85592.449] (assumes normal distribution)


# Run complete. Total time: 00:01:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                      Mode  Cnt      Score      Error  Units
FlowableWindowWithTimeTest._Benchmark.benchmark_cancellingWindowCancelsUpstreamExactTimeSkip  thrpt   30  82444.375 ± 3148.074  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.schedulers.ScheduledRunnableTest._Benchmark.benchmark_disposeAfterRun$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.schedulers.ScheduledRunnableTest._Benchmark.benchmark_disposeAfterRun

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 11434760.030 ops/s
# Warmup Iteration   2: 13442737.538 ops/s
# Warmup Iteration   3: 21351439.137 ops/s
# Warmup Iteration   4: 21345663.601 ops/s
# Warmup Iteration   5: 22368702.539 ops/s
# Warmup Iteration   6: 21767871.350 ops/s
# Warmup Iteration   7: 20738405.741 ops/s
# Warmup Iteration   8: 21663447.271 ops/s
# Warmup Iteration   9: 21583285.877 ops/s
# Warmup Iteration  10: 21326003.527 ops/s
# Warmup Iteration  11: 21306066.039 ops/s
# Warmup Iteration  12: 21105333.005 ops/s
# Warmup Iteration  13: 21883480.105 ops/s
# Warmup Iteration  14: 21110082.911 ops/s
# Warmup Iteration  15: 21425965.695 ops/s
# Warmup Iteration  16: 22343639.197 ops/s
# Warmup Iteration  17: 20810615.409 ops/s
# Warmup Iteration  18: 20864893.745 ops/s
# Warmup Iteration  19: 22707469.765 ops/s
# Warmup Iteration  20: 20972095.171 ops/s
# Warmup Iteration  21: 22474951.484 ops/s
# Warmup Iteration  22: 22132235.735 ops/s
# Warmup Iteration  23: 20663138.278 ops/s
# Warmup Iteration  24: 22110583.057 ops/s
# Warmup Iteration  25: 21426588.449 ops/s
# Warmup Iteration  26: 21493921.966 ops/s
# Warmup Iteration  27: 21061903.825 ops/s
# Warmup Iteration  28: 21013410.869 ops/s
# Warmup Iteration  29: 22387113.229 ops/s
# Warmup Iteration  30: 20719899.664 ops/s
Iteration   1: 21535062.953 ops/s
Iteration   2: 21358528.002 ops/s
Iteration   3: 21922783.516 ops/s
Iteration   4: 21350676.375 ops/s
Iteration   5: 21434162.150 ops/s
Iteration   6: 21173727.709 ops/s
Iteration   7: 21316413.232 ops/s
Iteration   8: 21975715.150 ops/s
Iteration   9: 21042048.157 ops/s
Iteration  10: 22440494.250 ops/s
Iteration  11: 21165556.646 ops/s
Iteration  12: 21601134.498 ops/s
Iteration  13: 21275474.076 ops/s
Iteration  14: 21520812.906 ops/s
Iteration  15: 21812736.257 ops/s
Iteration  16: 20458741.066 ops/s
Iteration  17: 18615894.343 ops/s
Iteration  18: 21189543.327 ops/s
Iteration  19: 21851310.772 ops/s
Iteration  20: 21727919.449 ops/s
Iteration  21: 20999640.942 ops/s
Iteration  22: 21462342.374 ops/s
Iteration  23: 21773325.658 ops/s
Iteration  24: 21904912.393 ops/s
Iteration  25: 21002554.141 ops/s
Iteration  26: 21823135.696 ops/s
Iteration  27: 21952853.422 ops/s
Iteration  28: 20771454.599 ops/s
Iteration  29: 22451853.820 ops/s
Iteration  30: 21324490.380 ops/s


Result "io.reactivex.rxjava3.internal.schedulers.ScheduledRunnableTest._Benchmark.benchmark_disposeAfterRun":
  21407843.275 ±(99.9%) 462421.476 ops/s [Average]
  (min, avg, max) = (18615894.343, 21407843.275, 22451853.820), stdev = 692130.748
  CI (99.9%): [20945421.799, 21870264.751] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score        Error  Units
ScheduledRunnableTest._Benchmark.benchmark_disposeAfterRun  thrpt   30  21407843.275 ± 462421.476  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayEagerTruncateTest._Benchmark.benchmark_replaySizeAndTime$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayEagerTruncateTest._Benchmark.benchmark_replaySizeAndTime

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 67394.253 ops/s
# Warmup Iteration   2: 235747.509 ops/s
# Warmup Iteration   3: 281281.460 ops/s
# Warmup Iteration   4: 254636.699 ops/s
# Warmup Iteration   5: 285489.770 ops/s
# Warmup Iteration   6: 260296.569 ops/s
# Warmup Iteration   7: 265460.648 ops/s
# Warmup Iteration   8: 287397.201 ops/s
# Warmup Iteration   9: 282838.349 ops/s
# Warmup Iteration  10: 286049.569 ops/s
# Warmup Iteration  11: 251873.807 ops/s
# Warmup Iteration  12: 294469.108 ops/s
# Warmup Iteration  13: 277426.994 ops/s
# Warmup Iteration  14: 287368.664 ops/s
# Warmup Iteration  15: 292293.478 ops/s
# Warmup Iteration  16: 281691.322 ops/s
# Warmup Iteration  17: 286362.033 ops/s
# Warmup Iteration  18: 284177.159 ops/s
# Warmup Iteration  19: 288646.556 ops/s
# Warmup Iteration  20: 281986.773 ops/s
# Warmup Iteration  21: 289312.877 ops/s
# Warmup Iteration  22: 281889.463 ops/s
# Warmup Iteration  23: 278572.054 ops/s
# Warmup Iteration  24: 284142.085 ops/s
# Warmup Iteration  25: 292133.869 ops/s
# Warmup Iteration  26: 271483.130 ops/s
# Warmup Iteration  27: 300313.780 ops/s
# Warmup Iteration  28: 291220.579 ops/s
# Warmup Iteration  29: 281045.138 ops/s
# Warmup Iteration  30: 287530.031 ops/s
Iteration   1: 281565.140 ops/s
Iteration   2: 290994.430 ops/s
Iteration   3: 281841.576 ops/s
Iteration   4: 292369.858 ops/s
Iteration   5: 281944.243 ops/s
Iteration   6: 281363.216 ops/s
Iteration   7: 290004.948 ops/s
Iteration   8: 283214.391 ops/s
Iteration   9: 284018.069 ops/s
Iteration  10: 286677.120 ops/s
Iteration  11: 294203.635 ops/s
Iteration  12: 296284.818 ops/s
Iteration  13: 277428.613 ops/s
Iteration  14: 284446.978 ops/s
Iteration  15: 285740.919 ops/s
Iteration  16: 280728.026 ops/s
Iteration  17: 292987.067 ops/s
Iteration  18: 287887.654 ops/s
Iteration  19: 279880.987 ops/s
Iteration  20: 286571.658 ops/s
Iteration  21: 279935.799 ops/s
Iteration  22: 286069.075 ops/s
Iteration  23: 281278.166 ops/s
Iteration  24: 281320.679 ops/s
Iteration  25: 287090.886 ops/s
Iteration  26: 287476.863 ops/s
Iteration  27: 291834.374 ops/s
Iteration  28: 272064.566 ops/s
Iteration  29: 292534.440 ops/s
Iteration  30: 286977.453 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayEagerTruncateTest._Benchmark.benchmark_replaySizeAndTime":
  285557.855 ±(99.9%) 3692.803 ops/s [Average]
  (min, avg, max) = (272064.566, 285557.855, 296284.818), stdev = 5527.213
  CI (99.9%): [281865.052, 289250.658] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score      Error  Units
FlowableReplayEagerTruncateTest._Benchmark.benchmark_replaySizeAndTime  thrpt   30  285557.855 ± 3692.803  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayEagerTruncateTest._Benchmark.benchmark_replayTime$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayEagerTruncateTest._Benchmark.benchmark_replayTime

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 77274.641 ops/s
# Warmup Iteration   2: 255882.049 ops/s
# Warmup Iteration   3: 268684.457 ops/s
# Warmup Iteration   4: 280747.737 ops/s
# Warmup Iteration   5: 241486.492 ops/s
# Warmup Iteration   6: 266675.560 ops/s
# Warmup Iteration   7: 274339.356 ops/s
# Warmup Iteration   8: 277835.985 ops/s
# Warmup Iteration   9: 281639.167 ops/s
# Warmup Iteration  10: 292612.914 ops/s
# Warmup Iteration  11: 275196.027 ops/s
# Warmup Iteration  12: 294555.116 ops/s
# Warmup Iteration  13: 296090.340 ops/s
# Warmup Iteration  14: 280684.852 ops/s
# Warmup Iteration  15: 294256.818 ops/s
# Warmup Iteration  16: 278022.380 ops/s
# Warmup Iteration  17: 288652.233 ops/s
# Warmup Iteration  18: 278953.354 ops/s
# Warmup Iteration  19: 286674.769 ops/s
# Warmup Iteration  20: 298413.894 ops/s
# Warmup Iteration  21: 270286.798 ops/s
# Warmup Iteration  22: 296353.237 ops/s
# Warmup Iteration  23: 291190.322 ops/s
# Warmup Iteration  24: 276411.586 ops/s
# Warmup Iteration  25: 282959.376 ops/s
# Warmup Iteration  26: 291946.445 ops/s
# Warmup Iteration  27: 280273.395 ops/s
# Warmup Iteration  28: 275760.480 ops/s
# Warmup Iteration  29: 297601.831 ops/s
# Warmup Iteration  30: 282785.627 ops/s
Iteration   1: 293535.424 ops/s
Iteration   2: 298754.638 ops/s
Iteration   3: 276828.660 ops/s
Iteration   4: 299825.829 ops/s
Iteration   5: 281749.332 ops/s
Iteration   6: 286766.552 ops/s
Iteration   7: 285880.494 ops/s
Iteration   8: 288313.111 ops/s
Iteration   9: 292451.802 ops/s
Iteration  10: 279359.664 ops/s
Iteration  11: 243399.154 ops/s
Iteration  12: 235708.476 ops/s
Iteration  13: 277842.336 ops/s
Iteration  14: 288812.161 ops/s
Iteration  15: 284055.286 ops/s
Iteration  16: 287534.389 ops/s
Iteration  17: 288721.968 ops/s
Iteration  18: 281229.752 ops/s
Iteration  19: 287527.517 ops/s
Iteration  20: 285377.021 ops/s
Iteration  21: 293037.134 ops/s
Iteration  22: 283495.757 ops/s
Iteration  23: 297240.850 ops/s
Iteration  24: 283460.566 ops/s
Iteration  25: 286759.589 ops/s
Iteration  26: 290140.713 ops/s
Iteration  27: 281888.791 ops/s
Iteration  28: 294697.413 ops/s
Iteration  29: 290874.575 ops/s
Iteration  30: 284737.134 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayEagerTruncateTest._Benchmark.benchmark_replayTime":
  284333.536 ±(99.9%) 9034.596 ops/s [Average]
  (min, avg, max) = (235708.476, 284333.536, 299825.829), stdev = 13522.559
  CI (99.9%): [275298.940, 293368.132] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score      Error  Units
FlowableReplayEagerTruncateTest._Benchmark.benchmark_replayTime  thrpt   30  284333.536 ± 9034.596  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayTest._Benchmark.benchmark_replayTime$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayTest._Benchmark.benchmark_replayTime

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 77836.432 ops/s
# Warmup Iteration   2: 216416.508 ops/s
# Warmup Iteration   3: 257926.945 ops/s
# Warmup Iteration   4: 287364.164 ops/s
# Warmup Iteration   5: 272739.119 ops/s
# Warmup Iteration   6: 281371.297 ops/s
# Warmup Iteration   7: 271073.535 ops/s
# Warmup Iteration   8: 286902.102 ops/s
# Warmup Iteration   9: 297465.769 ops/s
# Warmup Iteration  10: 283613.410 ops/s
# Warmup Iteration  11: 279699.860 ops/s
# Warmup Iteration  12: 291759.819 ops/s
# Warmup Iteration  13: 282593.833 ops/s
# Warmup Iteration  14: 294771.498 ops/s
# Warmup Iteration  15: 282597.711 ops/s
# Warmup Iteration  16: 284993.737 ops/s
# Warmup Iteration  17: 289424.079 ops/s
# Warmup Iteration  18: 274365.926 ops/s
# Warmup Iteration  19: 300015.048 ops/s
# Warmup Iteration  20: 282034.909 ops/s
# Warmup Iteration  21: 291290.489 ops/s
# Warmup Iteration  22: 288804.748 ops/s
# Warmup Iteration  23: 276203.591 ops/s
# Warmup Iteration  24: 282127.450 ops/s
# Warmup Iteration  25: 280819.717 ops/s
# Warmup Iteration  26: 288266.925 ops/s
# Warmup Iteration  27: 291900.620 ops/s
# Warmup Iteration  28: 273333.273 ops/s
# Warmup Iteration  29: 280534.813 ops/s
# Warmup Iteration  30: 296798.458 ops/s
Iteration   1: 280346.593 ops/s
Iteration   2: 292993.482 ops/s
Iteration   3: 291885.924 ops/s
Iteration   4: 281175.050 ops/s
Iteration   5: 290029.032 ops/s
Iteration   6: 280076.633 ops/s
Iteration   7: 288628.590 ops/s
Iteration   8: 283860.481 ops/s
Iteration   9: 288281.937 ops/s
Iteration  10: 282044.830 ops/s
Iteration  11: 284184.353 ops/s
Iteration  12: 295309.886 ops/s
Iteration  13: 278438.977 ops/s
Iteration  14: 286601.246 ops/s
Iteration  15: 289541.313 ops/s
Iteration  16: 285776.706 ops/s
Iteration  17: 288465.180 ops/s
Iteration  18: 284195.286 ops/s
Iteration  19: 288067.715 ops/s
Iteration  20: 286673.936 ops/s
Iteration  21: 283132.389 ops/s
Iteration  22: 290817.601 ops/s
Iteration  23: 284663.023 ops/s
Iteration  24: 295218.663 ops/s
Iteration  25: 280665.533 ops/s
Iteration  26: 293504.791 ops/s
Iteration  27: 281833.689 ops/s
Iteration  28: 284465.501 ops/s
Iteration  29: 290272.439 ops/s
Iteration  30: 279869.345 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayTest._Benchmark.benchmark_replayTime":
  286367.337 ±(99.9%) 3213.971 ops/s [Average]
  (min, avg, max) = (278438.977, 286367.337, 295309.886), stdev = 4810.521
  CI (99.9%): [283153.366, 289581.308] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score      Error  Units
FlowableReplayTest._Benchmark.benchmark_replayTime  thrpt   30  286367.337 ± 3213.971  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableScanTest._Benchmark.benchmark_scanErrorBackpressured$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableScanTest._Benchmark.benchmark_scanErrorBackpressured

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 77431.652 ops/s
# Warmup Iteration   2: 448630.664 ops/s
# Warmup Iteration   3: 531685.708 ops/s
# Warmup Iteration   4: 512613.686 ops/s
# Warmup Iteration   5: 589527.380 ops/s
# Warmup Iteration   6: 584907.193 ops/s
# Warmup Iteration   7: 611931.452 ops/s
# Warmup Iteration   8: 576413.238 ops/s
# Warmup Iteration   9: 615823.534 ops/s
# Warmup Iteration  10: 579694.145 ops/s
# Warmup Iteration  11: 583073.444 ops/s
# Warmup Iteration  12: 601100.484 ops/s
# Warmup Iteration  13: 575102.852 ops/s
# Warmup Iteration  14: 603733.533 ops/s
# Warmup Iteration  15: 586893.334 ops/s
# Warmup Iteration  16: 602317.660 ops/s
# Warmup Iteration  17: 619398.370 ops/s
# Warmup Iteration  18: 610399.784 ops/s
# Warmup Iteration  19: 634833.466 ops/s
# Warmup Iteration  20: 596456.936 ops/s
# Warmup Iteration  21: 643795.880 ops/s
# Warmup Iteration  22: 623014.894 ops/s
# Warmup Iteration  23: 605137.331 ops/s
# Warmup Iteration  24: 629267.086 ops/s
# Warmup Iteration  25: 614663.824 ops/s
# Warmup Iteration  26: 627408.420 ops/s
# Warmup Iteration  27: 635147.076 ops/s
# Warmup Iteration  28: 606912.201 ops/s
# Warmup Iteration  29: 663320.157 ops/s
# Warmup Iteration  30: 641350.275 ops/s
Iteration   1: 603535.500 ops/s
Iteration   2: 635880.452 ops/s
Iteration   3: 613835.851 ops/s
Iteration   4: 612742.880 ops/s
Iteration   5: 640655.048 ops/s
Iteration   6: 512758.709 ops/s
Iteration   7: 619094.466 ops/s
Iteration   8: 618493.003 ops/s
Iteration   9: 615484.046 ops/s
Iteration  10: 629669.826 ops/s
Iteration  11: 602882.162 ops/s
Iteration  12: 628096.239 ops/s
Iteration  13: 588918.480 ops/s
Iteration  14: 624393.303 ops/s
Iteration  15: 622957.539 ops/s
Iteration  16: 642094.808 ops/s
Iteration  17: 600495.942 ops/s
Iteration  18: 629344.370 ops/s
Iteration  19: 608421.661 ops/s
Iteration  20: 622942.093 ops/s
Iteration  21: 641219.974 ops/s
Iteration  22: 603139.970 ops/s
Iteration  23: 645659.918 ops/s
Iteration  24: 605498.681 ops/s
Iteration  25: 637861.089 ops/s
Iteration  26: 618036.748 ops/s
Iteration  27: 616580.110 ops/s
Iteration  28: 641853.578 ops/s
Iteration  29: 614079.391 ops/s
Iteration  30: 628119.545 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableScanTest._Benchmark.benchmark_scanErrorBackpressured":
  617491.513 ±(99.9%) 16382.825 ops/s [Average]
  (min, avg, max) = (512758.709, 617491.513, 645659.918), stdev = 24521.044
  CI (99.9%): [601108.688, 633874.338] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score       Error  Units
FlowableScanTest._Benchmark.benchmark_scanErrorBackpressured  thrpt   30  617491.513 ± 16382.825  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.observers.QueueDrainObserverTest._Benchmark.benchmark_orderedSlowPathNonEmptyQueue$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.observers.QueueDrainObserverTest._Benchmark.benchmark_orderedSlowPathNonEmptyQueue

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 671546.609 ops/s
# Warmup Iteration   2: 2199181.127 ops/s
# Warmup Iteration   3: 3616215.451 ops/s
# Warmup Iteration   4: 3918248.454 ops/s
# Warmup Iteration   5: 3851126.676 ops/s
# Warmup Iteration   6: 3740537.920 ops/s
# Warmup Iteration   7: 3845514.222 ops/s
# Warmup Iteration   8: 3695098.199 ops/s
# Warmup Iteration   9: 3903340.460 ops/s
# Warmup Iteration  10: 3801492.878 ops/s
# Warmup Iteration  11: 3765087.835 ops/s
# Warmup Iteration  12: 3868909.909 ops/s
# Warmup Iteration  13: 3690204.337 ops/s
# Warmup Iteration  14: 3943639.561 ops/s
# Warmup Iteration  15: 3747273.571 ops/s
# Warmup Iteration  16: 3872060.170 ops/s
# Warmup Iteration  17: 3810590.266 ops/s
# Warmup Iteration  18: 3922233.683 ops/s
# Warmup Iteration  19: 3745184.365 ops/s
# Warmup Iteration  20: 3694637.484 ops/s
# Warmup Iteration  21: 4019562.481 ops/s
# Warmup Iteration  22: 4033370.633 ops/s
# Warmup Iteration  23: 3668508.678 ops/s
# Warmup Iteration  24: 3746231.449 ops/s
# Warmup Iteration  25: 3894117.395 ops/s
# Warmup Iteration  26: 3716170.118 ops/s
# Warmup Iteration  27: 3800698.959 ops/s
# Warmup Iteration  28: 3686885.357 ops/s
# Warmup Iteration  29: 3834253.947 ops/s
# Warmup Iteration  30: 3990588.027 ops/s
Iteration   1: 3730392.286 ops/s
Iteration   2: 3960251.206 ops/s
Iteration   3: 3718015.270 ops/s
Iteration   4: 3776876.269 ops/s
Iteration   5: 3839846.690 ops/s
Iteration   6: 3861458.741 ops/s
Iteration   7: 3923630.143 ops/s
Iteration   8: 3692249.029 ops/s
Iteration   9: 3771176.018 ops/s
Iteration  10: 3924492.078 ops/s
Iteration  11: 3743206.540 ops/s
Iteration  12: 3916153.287 ops/s
Iteration  13: 3779443.747 ops/s
Iteration  14: 3842356.666 ops/s
Iteration  15: 3806196.211 ops/s
Iteration  16: 3798980.737 ops/s
Iteration  17: 3946918.455 ops/s
Iteration  18: 3784912.796 ops/s
Iteration  19: 3844455.217 ops/s
Iteration  20: 3757265.471 ops/s
Iteration  21: 3796488.432 ops/s
Iteration  22: 3800202.404 ops/s
Iteration  23: 3967500.706 ops/s
Iteration  24: 3690975.390 ops/s
Iteration  25: 3853638.119 ops/s
Iteration  26: 3844404.631 ops/s
Iteration  27: 3932217.489 ops/s
Iteration  28: 3768058.185 ops/s
Iteration  29: 3800271.610 ops/s
Iteration  30: 3735026.490 ops/s


Result "io.reactivex.rxjava3.internal.observers.QueueDrainObserverTest._Benchmark.benchmark_orderedSlowPathNonEmptyQueue":
  3820235.344 ±(99.9%) 53535.682 ops/s [Average]
  (min, avg, max) = (3690975.390, 3820235.344, 3967500.706), stdev = 80129.695
  CI (99.9%): [3766699.661, 3873771.026] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score       Error  Units
QueueDrainObserverTest._Benchmark.benchmark_orderedSlowPathNonEmptyQueue  thrpt   30  3820235.344 ± 53535.682  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriberTest._Benchmark.benchmark_orderedSlowPathNonEmptyQueue$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriberTest._Benchmark.benchmark_orderedSlowPathNonEmptyQueue

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 740518.427 ops/s
# Warmup Iteration   2: 2360386.957 ops/s
# Warmup Iteration   3: 3206118.580 ops/s
# Warmup Iteration   4: 3254501.265 ops/s
# Warmup Iteration   5: 3348498.458 ops/s
# Warmup Iteration   6: 3139993.031 ops/s
# Warmup Iteration   7: 3250171.772 ops/s
# Warmup Iteration   8: 3363525.793 ops/s
# Warmup Iteration   9: 3327841.342 ops/s
# Warmup Iteration  10: 3154292.262 ops/s
# Warmup Iteration  11: 3318077.199 ops/s
# Warmup Iteration  12: 3144520.767 ops/s
# Warmup Iteration  13: 3238527.504 ops/s
# Warmup Iteration  14: 3337482.691 ops/s
# Warmup Iteration  15: 3255788.049 ops/s
# Warmup Iteration  16: 3274524.562 ops/s
# Warmup Iteration  17: 3328451.687 ops/s
# Warmup Iteration  18: 3246234.401 ops/s
# Warmup Iteration  19: 3241229.931 ops/s
# Warmup Iteration  20: 3190437.343 ops/s
# Warmup Iteration  21: 3236002.088 ops/s
# Warmup Iteration  22: 3287761.412 ops/s
# Warmup Iteration  23: 3207811.221 ops/s
# Warmup Iteration  24: 3355795.430 ops/s
# Warmup Iteration  25: 3350809.236 ops/s
# Warmup Iteration  26: 3250754.250 ops/s
# Warmup Iteration  27: 3308147.382 ops/s
# Warmup Iteration  28: 3285033.657 ops/s
# Warmup Iteration  29: 3250680.216 ops/s
# Warmup Iteration  30: 3391606.435 ops/s
Iteration   1: 2568104.782 ops/s
Iteration   2: 3337611.272 ops/s
Iteration   3: 3192057.152 ops/s
Iteration   4: 3249523.948 ops/s
Iteration   5: 3286997.305 ops/s
Iteration   6: 3087489.351 ops/s
Iteration   7: 3270593.454 ops/s
Iteration   8: 3194261.548 ops/s
Iteration   9: 3274862.146 ops/s
Iteration  10: 3208391.290 ops/s
Iteration  11: 3222230.948 ops/s
Iteration  12: 3385722.262 ops/s
Iteration  13: 3162321.080 ops/s
Iteration  14: 3239315.484 ops/s
Iteration  15: 3353592.334 ops/s
Iteration  16: 3331451.861 ops/s
Iteration  17: 3236337.962 ops/s
Iteration  18: 3310804.663 ops/s
Iteration  19: 3330857.944 ops/s
Iteration  20: 3116765.500 ops/s
Iteration  21: 3381845.147 ops/s
Iteration  22: 3194427.060 ops/s
Iteration  23: 3229869.325 ops/s
Iteration  24: 3341283.552 ops/s
Iteration  25: 3374464.556 ops/s
Iteration  26: 3125263.816 ops/s
Iteration  27: 3324657.629 ops/s
Iteration  28: 3248973.867 ops/s
Iteration  29: 3238921.739 ops/s
Iteration  30: 3245077.480 ops/s


Result "io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriberTest._Benchmark.benchmark_orderedSlowPathNonEmptyQueue":
  3235469.215 ±(99.9%) 99395.948 ops/s [Average]
  (min, avg, max) = (2568104.782, 3235469.215, 3385722.262), stdev = 148771.187
  CI (99.9%): [3136073.267, 3334865.163] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score       Error  Units
QueueDrainSubscriberTest._Benchmark.benchmark_orderedSlowPathNonEmptyQueue  thrpt   30  3235469.215 ± 99395.948  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.util.QueueDrainHelperTest._Benchmark.benchmark_drainMaxLoopMissingBackpressure$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.util.QueueDrainHelperTest._Benchmark.benchmark_drainMaxLoopMissingBackpressure

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 317272.122 ops/s
# Warmup Iteration   2: 591372.593 ops/s
# Warmup Iteration   3: 627563.073 ops/s
# Warmup Iteration   4: 648618.873 ops/s
# Warmup Iteration   5: 654661.128 ops/s
# Warmup Iteration   6: 688071.838 ops/s
# Warmup Iteration   7: 655596.917 ops/s
# Warmup Iteration   8: 699952.161 ops/s
# Warmup Iteration   9: 687576.618 ops/s
# Warmup Iteration  10: 714254.455 ops/s
# Warmup Iteration  11: 691186.766 ops/s
# Warmup Iteration  12: 666214.891 ops/s
# Warmup Iteration  13: 717362.317 ops/s
# Warmup Iteration  14: 680106.270 ops/s
# Warmup Iteration  15: 709710.977 ops/s
# Warmup Iteration  16: 689994.706 ops/s
# Warmup Iteration  17: 738539.498 ops/s
# Warmup Iteration  18: 758930.261 ops/s
# Warmup Iteration  19: 723270.041 ops/s
# Warmup Iteration  20: 750659.592 ops/s
# Warmup Iteration  21: 732308.857 ops/s
# Warmup Iteration  22: 748251.937 ops/s
# Warmup Iteration  23: 714754.740 ops/s
# Warmup Iteration  24: 747107.291 ops/s
# Warmup Iteration  25: 757414.035 ops/s
# Warmup Iteration  26: 729034.026 ops/s
# Warmup Iteration  27: 749939.443 ops/s
# Warmup Iteration  28: 718307.992 ops/s
# Warmup Iteration  29: 742540.472 ops/s
# Warmup Iteration  30: 731688.708 ops/s
Iteration   1: 751181.026 ops/s
Iteration   2: 752548.180 ops/s
Iteration   3: 719547.312 ops/s
Iteration   4: 735117.516 ops/s
Iteration   5: 757689.480 ops/s
Iteration   6: 723125.494 ops/s
Iteration   7: 751477.441 ops/s
Iteration   8: 740735.152 ops/s
Iteration   9: 765450.883 ops/s
Iteration  10: 737535.301 ops/s
Iteration  11: 710950.781 ops/s
Iteration  12: 746566.545 ops/s
Iteration  13: 719492.479 ops/s
Iteration  14: 724645.542 ops/s
Iteration  15: 721902.141 ops/s
Iteration  16: 710614.386 ops/s
Iteration  17: 741732.948 ops/s
Iteration  18: 712073.755 ops/s
Iteration  19: 720795.666 ops/s
Iteration  20: 733689.359 ops/s
Iteration  21: 729040.117 ops/s
Iteration  22: 756985.493 ops/s
Iteration  23: 704483.536 ops/s
Iteration  24: 763390.300 ops/s
Iteration  25: 736027.568 ops/s
Iteration  26: 727038.207 ops/s
Iteration  27: 760331.993 ops/s
Iteration  28: 734064.581 ops/s
Iteration  29: 745820.495 ops/s
Iteration  30: 743720.864 ops/s


Result "io.reactivex.rxjava3.internal.util.QueueDrainHelperTest._Benchmark.benchmark_drainMaxLoopMissingBackpressure":
  735925.818 ±(99.9%) 11393.470 ops/s [Average]
  (min, avg, max) = (704483.536, 735925.818, 765450.883), stdev = 17053.210
  CI (99.9%): [724532.348, 747319.288] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score       Error  Units
QueueDrainHelperTest._Benchmark.benchmark_drainMaxLoopMissingBackpressure  thrpt   30  735925.818 ± 11393.470  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriberTest._Benchmark.benchmark_unorderedSlowPath$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriberTest._Benchmark.benchmark_unorderedSlowPath

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1183813.893 ops/s
# Warmup Iteration   2: 2835845.997 ops/s
# Warmup Iteration   3: 3745623.678 ops/s
# Warmup Iteration   4: 3982926.590 ops/s
# Warmup Iteration   5: 3916289.264 ops/s
# Warmup Iteration   6: 3778751.220 ops/s
# Warmup Iteration   7: 3712377.468 ops/s
# Warmup Iteration   8: 3877254.637 ops/s
# Warmup Iteration   9: 3743178.335 ops/s
# Warmup Iteration  10: 3840561.077 ops/s
# Warmup Iteration  11: 3673317.153 ops/s
# Warmup Iteration  12: 3825910.360 ops/s
# Warmup Iteration  13: 3884592.945 ops/s
# Warmup Iteration  14: 3815179.851 ops/s
# Warmup Iteration  15: 3788272.784 ops/s
# Warmup Iteration  16: 3687968.723 ops/s
# Warmup Iteration  17: 3904581.918 ops/s
# Warmup Iteration  18: 3780857.366 ops/s
# Warmup Iteration  19: 3966090.971 ops/s
# Warmup Iteration  20: 3923502.538 ops/s
# Warmup Iteration  21: 3712481.435 ops/s
# Warmup Iteration  22: 3870795.542 ops/s
# Warmup Iteration  23: 3711726.222 ops/s
# Warmup Iteration  24: 3788932.348 ops/s
# Warmup Iteration  25: 3863684.730 ops/s
# Warmup Iteration  26: 3164371.216 ops/s
# Warmup Iteration  27: 3690458.758 ops/s
# Warmup Iteration  28: 3995866.408 ops/s
# Warmup Iteration  29: 3711972.434 ops/s
# Warmup Iteration  30: 3766743.966 ops/s
Iteration   1: 3899303.449 ops/s
Iteration   2: 3735509.998 ops/s
Iteration   3: 3740942.439 ops/s
Iteration   4: 3907445.448 ops/s
Iteration   5: 3722749.444 ops/s
Iteration   6: 3919446.668 ops/s
Iteration   7: 3789191.042 ops/s
Iteration   8: 3728392.146 ops/s
Iteration   9: 3875016.442 ops/s
Iteration  10: 3798340.530 ops/s
Iteration  11: 3831764.672 ops/s
Iteration  12: 3689382.224 ops/s
Iteration  13: 3957427.320 ops/s
Iteration  14: 3728319.201 ops/s
Iteration  15: 3771843.455 ops/s
Iteration  16: 3646327.913 ops/s
Iteration  17: 3958117.561 ops/s
Iteration  18: 3885374.390 ops/s
Iteration  19: 3813527.742 ops/s
Iteration  20: 3971948.287 ops/s
Iteration  21: 3910731.170 ops/s
Iteration  22: 3683322.704 ops/s
Iteration  23: 4028535.369 ops/s
Iteration  24: 3693743.009 ops/s
Iteration  25: 3866089.719 ops/s
Iteration  26: 3735912.688 ops/s
Iteration  27: 3838249.444 ops/s
Iteration  28: 3852569.160 ops/s
Iteration  29: 3740714.882 ops/s
Iteration  30: 3803283.396 ops/s


Result "io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriberTest._Benchmark.benchmark_unorderedSlowPath":
  3817450.730 ±(99.9%) 66379.234 ops/s [Average]
  (min, avg, max) = (3646327.913, 3817450.730, 4028535.369), stdev = 99353.320
  CI (99.9%): [3751071.497, 3883829.964] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
QueueDrainSubscriberTest._Benchmark.benchmark_unorderedSlowPath  thrpt   30  3817450.730 ± 66379.234  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriberTest._Benchmark.benchmark_orderedSlowPath$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriberTest._Benchmark.benchmark_orderedSlowPath

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 866416.013 ops/s
# Warmup Iteration   2: 2550954.396 ops/s
# Warmup Iteration   3: 3469701.111 ops/s
# Warmup Iteration   4: 3436618.763 ops/s
# Warmup Iteration   5: 3442278.184 ops/s
# Warmup Iteration   6: 3435053.461 ops/s
# Warmup Iteration   7: 3466639.405 ops/s
# Warmup Iteration   8: 3500784.282 ops/s
# Warmup Iteration   9: 3383501.432 ops/s
# Warmup Iteration  10: 3536376.497 ops/s
# Warmup Iteration  11: 3319127.531 ops/s
# Warmup Iteration  12: 3389634.913 ops/s
# Warmup Iteration  13: 3584902.795 ops/s
# Warmup Iteration  14: 3350048.303 ops/s
# Warmup Iteration  15: 3505670.891 ops/s
# Warmup Iteration  16: 3336904.022 ops/s
# Warmup Iteration  17: 3537554.335 ops/s
# Warmup Iteration  18: 3396110.798 ops/s
# Warmup Iteration  19: 3505095.846 ops/s
# Warmup Iteration  20: 3439202.391 ops/s
# Warmup Iteration  21: 3448570.970 ops/s
# Warmup Iteration  22: 3571846.606 ops/s
# Warmup Iteration  23: 3316286.637 ops/s
# Warmup Iteration  24: 3347642.765 ops/s
# Warmup Iteration  25: 3594178.715 ops/s
# Warmup Iteration  26: 3402326.609 ops/s
# Warmup Iteration  27: 3458105.983 ops/s
# Warmup Iteration  28: 3382310.823 ops/s
# Warmup Iteration  29: 3409786.182 ops/s
# Warmup Iteration  30: 3517231.450 ops/s
Iteration   1: 3397775.921 ops/s
Iteration   2: 3591527.888 ops/s
Iteration   3: 3513966.905 ops/s
Iteration   4: 3415586.822 ops/s
Iteration   5: 3541940.965 ops/s
Iteration   6: 3536110.211 ops/s
Iteration   7: 3357098.991 ops/s
Iteration   8: 3491521.149 ops/s
Iteration   9: 3373208.520 ops/s
Iteration  10: 3523491.893 ops/s
Iteration  11: 3363366.675 ops/s
Iteration  12: 3446542.005 ops/s
Iteration  13: 3455502.641 ops/s
Iteration  14: 3306657.850 ops/s
Iteration  15: 3348106.691 ops/s
Iteration  16: 3501092.497 ops/s
Iteration  17: 3466142.038 ops/s
Iteration  18: 3430735.600 ops/s
Iteration  19: 3542683.810 ops/s
Iteration  20: 3382999.517 ops/s
Iteration  21: 3607673.770 ops/s
Iteration  22: 3309310.457 ops/s
Iteration  23: 3585545.601 ops/s
Iteration  24: 3366010.744 ops/s
Iteration  25: 3560029.907 ops/s
Iteration  26: 3401696.793 ops/s
Iteration  27: 3468628.559 ops/s
Iteration  28: 3489874.845 ops/s
Iteration  29: 3395308.565 ops/s
Iteration  30: 3617342.173 ops/s


Result "io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriberTest._Benchmark.benchmark_orderedSlowPath":
  3459582.667 ±(99.9%) 60149.408 ops/s [Average]
  (min, avg, max) = (3306657.850, 3459582.667, 3617342.173), stdev = 90028.809
  CI (99.9%): [3399433.259, 3519732.075] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
QueueDrainSubscriberTest._Benchmark.benchmark_orderedSlowPath  thrpt   30  3459582.667 ± 60149.408  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_callableCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_callableCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 47417.001 ops/s
# Warmup Iteration   2: 321197.987 ops/s
# Warmup Iteration   3: 387560.895 ops/s
# Warmup Iteration   4: 386801.569 ops/s
# Warmup Iteration   5: 399006.384 ops/s
# Warmup Iteration   6: 412737.543 ops/s
# Warmup Iteration   7: 356835.865 ops/s
# Warmup Iteration   8: 406717.885 ops/s
# Warmup Iteration   9: 392285.451 ops/s
# Warmup Iteration  10: 395968.816 ops/s
# Warmup Iteration  11: 406927.465 ops/s
# Warmup Iteration  12: 390548.184 ops/s
# Warmup Iteration  13: 406381.066 ops/s
# Warmup Iteration  14: 392696.395 ops/s
# Warmup Iteration  15: 396700.812 ops/s
# Warmup Iteration  16: 381213.389 ops/s
# Warmup Iteration  17: 403868.134 ops/s
# Warmup Iteration  18: 399498.322 ops/s
# Warmup Iteration  19: 405665.336 ops/s
# Warmup Iteration  20: 436687.352 ops/s
# Warmup Iteration  21: 353955.585 ops/s
# Warmup Iteration  22: 398432.126 ops/s
# Warmup Iteration  23: 432637.632 ops/s
# Warmup Iteration  24: 399988.562 ops/s
# Warmup Iteration  25: 408867.088 ops/s
# Warmup Iteration  26: 426739.535 ops/s
# Warmup Iteration  27: 403656.759 ops/s
# Warmup Iteration  28: 431477.453 ops/s
# Warmup Iteration  29: 404761.141 ops/s
# Warmup Iteration  30: 408253.420 ops/s
Iteration   1: 415779.112 ops/s
Iteration   2: 406537.088 ops/s
Iteration   3: 412329.623 ops/s
Iteration   4: 408693.091 ops/s
Iteration   5: 424981.224 ops/s
Iteration   6: 401641.012 ops/s
Iteration   7: 423137.166 ops/s
Iteration   8: 401818.024 ops/s
Iteration   9: 409546.896 ops/s
Iteration  10: 429433.368 ops/s
Iteration  11: 411641.534 ops/s
Iteration  12: 411428.446 ops/s
Iteration  13: 422267.579 ops/s
Iteration  14: 402813.307 ops/s
Iteration  15: 419366.739 ops/s
Iteration  16: 414817.083 ops/s
Iteration  17: 423280.399 ops/s
Iteration  18: 407972.732 ops/s
Iteration  19: 422813.626 ops/s
Iteration  20: 424156.862 ops/s
Iteration  21: 401979.836 ops/s
Iteration  22: 421304.669 ops/s
Iteration  23: 418482.227 ops/s
Iteration  24: 416644.270 ops/s
Iteration  25: 415897.530 ops/s
Iteration  26: 419211.100 ops/s
Iteration  27: 412782.687 ops/s
Iteration  28: 407237.024 ops/s
Iteration  29: 419445.251 ops/s
Iteration  30: 420561.259 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_callableCrash":
  414933.359 ±(99.9%) 5176.601 ops/s [Average]
  (min, avg, max) = (401641.012, 414933.359, 429433.368), stdev = 7748.093
  CI (99.9%): [409756.758, 420109.959] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score      Error  Units
FlowableConcatMapSchedulerTest._Benchmark.benchmark_callableCrash  thrpt   30  414933.359 ± 5176.601  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_scalarInnerEmptyDisposeDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_scalarInnerEmptyDisposeDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 404432.560 ops/s
# Warmup Iteration   2: 1547209.799 ops/s
# Warmup Iteration   3: 2303394.327 ops/s
# Warmup Iteration   4: 2683107.064 ops/s
# Warmup Iteration   5: 2579213.351 ops/s
# Warmup Iteration   6: 2574287.733 ops/s
# Warmup Iteration   7: 2752054.973 ops/s
# Warmup Iteration   8: 2555941.838 ops/s
# Warmup Iteration   9: 2626488.620 ops/s
# Warmup Iteration  10: 2608915.096 ops/s
# Warmup Iteration  11: 2595676.149 ops/s
# Warmup Iteration  12: 2695292.127 ops/s
# Warmup Iteration  13: 2610111.944 ops/s
# Warmup Iteration  14: 2695705.065 ops/s
# Warmup Iteration  15: 2567445.008 ops/s
# Warmup Iteration  16: 2700809.729 ops/s
# Warmup Iteration  17: 2563471.301 ops/s
# Warmup Iteration  18: 2568234.449 ops/s
# Warmup Iteration  19: 2663365.129 ops/s
# Warmup Iteration  20: 2570485.393 ops/s
# Warmup Iteration  21: 2721108.545 ops/s
# Warmup Iteration  22: 2591408.611 ops/s
# Warmup Iteration  23: 2683423.990 ops/s
# Warmup Iteration  24: 2599831.663 ops/s
# Warmup Iteration  25: 2521358.521 ops/s
# Warmup Iteration  26: 2744890.084 ops/s
# Warmup Iteration  27: 2550877.043 ops/s
# Warmup Iteration  28: 2680160.937 ops/s
# Warmup Iteration  29: 2630531.853 ops/s
# Warmup Iteration  30: 2599035.536 ops/s
Iteration   1: 2724089.713 ops/s
Iteration   2: 2572821.586 ops/s
Iteration   3: 2646337.231 ops/s
Iteration   4: 2658523.178 ops/s
Iteration   5: 2597084.802 ops/s
Iteration   6: 2634266.335 ops/s
Iteration   7: 2583871.848 ops/s
Iteration   8: 2673592.610 ops/s
Iteration   9: 2583481.115 ops/s
Iteration  10: 2649596.327 ops/s
Iteration  11: 2655064.175 ops/s
Iteration  12: 2578175.119 ops/s
Iteration  13: 2726821.153 ops/s
Iteration  14: 2577501.755 ops/s
Iteration  15: 2645106.971 ops/s
Iteration  16: 2665373.873 ops/s
Iteration  17: 2562793.420 ops/s
Iteration  18: 2701549.573 ops/s
Iteration  19: 2587485.585 ops/s
Iteration  20: 2680816.088 ops/s
Iteration  21: 2551439.606 ops/s
Iteration  22: 2697409.593 ops/s
Iteration  23: 2653940.144 ops/s
Iteration  24: 2606742.412 ops/s
Iteration  25: 2604596.590 ops/s
Iteration  26: 2543126.202 ops/s
Iteration  27: 2622158.933 ops/s
Iteration  28: 2579726.760 ops/s
Iteration  29: 2662574.827 ops/s
Iteration  30: 2687632.742 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_scalarInnerEmptyDisposeDelayError":
  2630456.676 ±(99.9%) 34830.756 ops/s [Average]
  (min, avg, max) = (2543126.202, 2630456.676, 2726821.153), stdev = 52133.039
  CI (99.9%): [2595625.920, 2665287.431] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               Mode  Cnt        Score       Error  Units
FlowableConcatMapSchedulerTest._Benchmark.benchmark_scalarInnerEmptyDisposeDelayError  thrpt   30  2630456.676 ± 34830.756  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptionalTest._Benchmark.benchmark_mapWrongParallelismConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptionalTest._Benchmark.benchmark_mapWrongParallelismConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 148258.964 ops/s
# Warmup Iteration   2: 427625.338 ops/s
# Warmup Iteration   3: 526573.457 ops/s
# Warmup Iteration   4: 504743.165 ops/s
# Warmup Iteration   5: 545779.528 ops/s
# Warmup Iteration   6: 555679.205 ops/s
# Warmup Iteration   7: 539513.417 ops/s
# Warmup Iteration   8: 598681.427 ops/s
# Warmup Iteration   9: 574350.661 ops/s
# Warmup Iteration  10: 547838.403 ops/s
# Warmup Iteration  11: 574890.940 ops/s
# Warmup Iteration  12: 554478.644 ops/s
# Warmup Iteration  13: 581541.789 ops/s
# Warmup Iteration  14: 588807.062 ops/s
# Warmup Iteration  15: 557043.189 ops/s
# Warmup Iteration  16: 462342.575 ops/s
# Warmup Iteration  17: 576614.585 ops/s
# Warmup Iteration  18: 617703.589 ops/s
# Warmup Iteration  19: 592777.200 ops/s
# Warmup Iteration  20: 593163.980 ops/s
# Warmup Iteration  21: 599994.448 ops/s
# Warmup Iteration  22: 592133.126 ops/s
# Warmup Iteration  23: 619681.865 ops/s
# Warmup Iteration  24: 591599.855 ops/s
# Warmup Iteration  25: 587828.100 ops/s
# Warmup Iteration  26: 627427.646 ops/s
# Warmup Iteration  27: 606386.221 ops/s
# Warmup Iteration  28: 578699.880 ops/s
# Warmup Iteration  29: 623349.295 ops/s
# Warmup Iteration  30: 589084.524 ops/s
Iteration   1: 589724.653 ops/s
Iteration   2: 608623.305 ops/s
Iteration   3: 578577.986 ops/s
Iteration   4: 615196.478 ops/s
Iteration   5: 587385.868 ops/s
Iteration   6: 581105.438 ops/s
Iteration   7: 621982.921 ops/s
Iteration   8: 577944.823 ops/s
Iteration   9: 603071.910 ops/s
Iteration  10: 597288.584 ops/s
Iteration  11: 607623.424 ops/s
Iteration  12: 591075.098 ops/s
Iteration  13: 579285.734 ops/s
Iteration  14: 607543.680 ops/s
Iteration  15: 589174.267 ops/s
Iteration  16: 606991.786 ops/s
Iteration  17: 603195.796 ops/s
Iteration  18: 596861.824 ops/s
Iteration  19: 611667.366 ops/s
Iteration  20: 584789.645 ops/s
Iteration  21: 612304.751 ops/s
Iteration  22: 588970.091 ops/s
Iteration  23: 606722.090 ops/s
Iteration  24: 591109.869 ops/s
Iteration  25: 614303.532 ops/s
Iteration  26: 604063.168 ops/s
Iteration  27: 585446.678 ops/s
Iteration  28: 621693.518 ops/s
Iteration  29: 581832.393 ops/s
Iteration  30: 593753.589 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptionalTest._Benchmark.benchmark_mapWrongParallelismConditional":
  597977.009 ±(99.9%) 8857.310 ops/s [Average]
  (min, avg, max) = (577944.823, 597977.009, 621982.921), stdev = 13257.206
  CI (99.9%): [589119.699, 606834.319] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt       Score      Error  Units
ParallelMapTryOptionalTest._Benchmark.benchmark_mapWrongParallelismConditional  thrpt   30  597977.009 ± 8857.310  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ParallelCollectorTest._Benchmark.benchmark_collectorAccumulatorCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ParallelCollectorTest._Benchmark.benchmark_collectorAccumulatorCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 21079.486 ops/s
# Warmup Iteration   2: 95376.455 ops/s
# Warmup Iteration   3: 254588.140 ops/s
# Warmup Iteration   4: 266935.214 ops/s
# Warmup Iteration   5: 277425.298 ops/s
# Warmup Iteration   6: 259434.368 ops/s
# Warmup Iteration   7: 262917.017 ops/s
# Warmup Iteration   8: 269227.940 ops/s
# Warmup Iteration   9: 259125.081 ops/s
# Warmup Iteration  10: 266450.745 ops/s
# Warmup Iteration  11: 275254.789 ops/s
# Warmup Iteration  12: 259319.256 ops/s
# Warmup Iteration  13: 267585.614 ops/s
# Warmup Iteration  14: 277523.332 ops/s
# Warmup Iteration  15: 265266.025 ops/s
# Warmup Iteration  16: 270625.181 ops/s
# Warmup Iteration  17: 267511.933 ops/s
# Warmup Iteration  18: 283887.754 ops/s
# Warmup Iteration  19: 272993.292 ops/s
# Warmup Iteration  20: 278696.035 ops/s
# Warmup Iteration  21: 268162.980 ops/s
# Warmup Iteration  22: 277107.594 ops/s
# Warmup Iteration  23: 280922.311 ops/s
# Warmup Iteration  24: 278480.998 ops/s
# Warmup Iteration  25: 278698.317 ops/s
# Warmup Iteration  26: 267914.367 ops/s
# Warmup Iteration  27: 277096.581 ops/s
# Warmup Iteration  28: 271185.052 ops/s
# Warmup Iteration  29: 282624.381 ops/s
# Warmup Iteration  30: 265597.498 ops/s
Iteration   1: 282627.699 ops/s
Iteration   2: 287093.918 ops/s
Iteration   3: 263383.701 ops/s
Iteration   4: 285472.703 ops/s
Iteration   5: 272266.978 ops/s
Iteration   6: 282609.626 ops/s
Iteration   7: 276134.850 ops/s
Iteration   8: 278290.390 ops/s
Iteration   9: 276306.616 ops/s
Iteration  10: 267236.773 ops/s
Iteration  11: 283268.438 ops/s
Iteration  12: 263694.051 ops/s
Iteration  13: 278899.068 ops/s
Iteration  14: 277077.292 ops/s
Iteration  15: 258522.253 ops/s
Iteration  16: 287038.945 ops/s
Iteration  17: 284816.986 ops/s
Iteration  18: 272916.205 ops/s
Iteration  19: 281547.664 ops/s
Iteration  20: 273112.439 ops/s
Iteration  21: 285257.601 ops/s
Iteration  22: 285334.133 ops/s
Iteration  23: 275989.570 ops/s
Iteration  24: 281269.873 ops/s
Iteration  25: 267070.845 ops/s
Iteration  26: 287553.911 ops/s
Iteration  27: 275078.293 ops/s
Iteration  28: 273801.220 ops/s
Iteration  29: 271096.952 ops/s
Iteration  30: 283285.506 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ParallelCollectorTest._Benchmark.benchmark_collectorAccumulatorCrash":
  277268.483 ±(99.9%) 5221.902 ops/s [Average]
  (min, avg, max) = (258522.253, 277268.483, 287553.911), stdev = 7815.898
  CI (99.9%): [272046.581, 282490.385] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score      Error  Units
ParallelCollectorTest._Benchmark.benchmark_collectorAccumulatorCrash  thrpt   30  277268.483 ± 5221.902  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStreamTest._Benchmark.benchmark_queueOverflow$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStreamTest._Benchmark.benchmark_queueOverflow

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 22042.956 ops/s
# Warmup Iteration   2: 123819.450 ops/s
# Warmup Iteration   3: 138386.188 ops/s
# Warmup Iteration   4: 146623.806 ops/s
# Warmup Iteration   5: 159634.940 ops/s
# Warmup Iteration   6: 143922.632 ops/s
# Warmup Iteration   7: 163713.220 ops/s
# Warmup Iteration   8: 161385.617 ops/s
# Warmup Iteration   9: 161734.765 ops/s
# Warmup Iteration  10: 153638.057 ops/s
# Warmup Iteration  11: 144221.547 ops/s
# Warmup Iteration  12: 162063.409 ops/s
# Warmup Iteration  13: 161302.710 ops/s
# Warmup Iteration  14: 166754.780 ops/s
# Warmup Iteration  15: 158384.790 ops/s
# Warmup Iteration  16: 160797.892 ops/s
# Warmup Iteration  17: 175939.106 ops/s
# Warmup Iteration  18: 166088.913 ops/s
# Warmup Iteration  19: 162725.964 ops/s
# Warmup Iteration  20: 174516.379 ops/s
# Warmup Iteration  21: 165135.171 ops/s
# Warmup Iteration  22: 165909.352 ops/s
# Warmup Iteration  23: 166581.440 ops/s
# Warmup Iteration  24: 165453.022 ops/s
# Warmup Iteration  25: 171244.307 ops/s
# Warmup Iteration  26: 166278.807 ops/s
# Warmup Iteration  27: 173158.672 ops/s
# Warmup Iteration  28: 165059.081 ops/s
# Warmup Iteration  29: 168118.116 ops/s
# Warmup Iteration  30: 169877.993 ops/s
Iteration   1: 170337.789 ops/s
Iteration   2: 170135.693 ops/s
Iteration   3: 164152.391 ops/s
Iteration   4: 170176.643 ops/s
Iteration   5: 171302.782 ops/s
Iteration   6: 165197.760 ops/s
Iteration   7: 169443.215 ops/s
Iteration   8: 164655.182 ops/s
Iteration   9: 172563.060 ops/s
Iteration  10: 163435.894 ops/s
Iteration  11: 168450.295 ops/s
Iteration  12: 168664.680 ops/s
Iteration  13: 164108.252 ops/s
Iteration  14: 172651.727 ops/s
Iteration  15: 171794.541 ops/s
Iteration  16: 165402.053 ops/s
Iteration  17: 165721.511 ops/s
Iteration  18: 173604.472 ops/s
Iteration  19: 162902.463 ops/s
Iteration  20: 175580.022 ops/s
Iteration  21: 162023.105 ops/s
Iteration  22: 169973.248 ops/s
Iteration  23: 168891.420 ops/s
Iteration  24: 171870.512 ops/s
Iteration  25: 162640.149 ops/s
Iteration  26: 167547.642 ops/s
Iteration  27: 172631.334 ops/s
Iteration  28: 163863.900 ops/s
Iteration  29: 174977.648 ops/s
Iteration  30: 161657.948 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStreamTest._Benchmark.benchmark_queueOverflow":
  168211.911 ±(99.9%) 2752.789 ops/s [Average]
  (min, avg, max) = (161657.948, 168211.911, 175580.022), stdev = 4120.245
  CI (99.9%): [165459.122, 170964.700] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
FlowableFlatMapStreamTest._Benchmark.benchmark_queueOverflow  thrpt   30  168211.911 ± 2752.789  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.util.QueueDrainHelperTest._Benchmark.benchmark_observerCheckTerminatedNonDelayErrorErrorResource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.util.QueueDrainHelperTest._Benchmark.benchmark_observerCheckTerminatedNonDelayErrorErrorResource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 118525.981 ops/s
# Warmup Iteration   2: 510999.932 ops/s
# Warmup Iteration   3: 629726.502 ops/s
# Warmup Iteration   4: 651676.207 ops/s
# Warmup Iteration   5: 629966.663 ops/s
# Warmup Iteration   6: 652985.124 ops/s
# Warmup Iteration   7: 636010.937 ops/s
# Warmup Iteration   8: 586423.586 ops/s
# Warmup Iteration   9: 660241.630 ops/s
# Warmup Iteration  10: 649366.913 ops/s
# Warmup Iteration  11: 657845.324 ops/s
# Warmup Iteration  12: 633494.081 ops/s
# Warmup Iteration  13: 638456.318 ops/s
# Warmup Iteration  14: 664115.878 ops/s
# Warmup Iteration  15: 645289.088 ops/s
# Warmup Iteration  16: 651382.775 ops/s
# Warmup Iteration  17: 674743.687 ops/s
# Warmup Iteration  18: 678399.489 ops/s
# Warmup Iteration  19: 685956.903 ops/s
# Warmup Iteration  20: 659803.212 ops/s
# Warmup Iteration  21: 715073.186 ops/s
# Warmup Iteration  22: 670150.682 ops/s
# Warmup Iteration  23: 668048.621 ops/s
# Warmup Iteration  24: 654706.409 ops/s
# Warmup Iteration  25: 693229.124 ops/s
# Warmup Iteration  26: 669059.939 ops/s
# Warmup Iteration  27: 693025.184 ops/s
# Warmup Iteration  28: 665467.632 ops/s
# Warmup Iteration  29: 692733.102 ops/s
# Warmup Iteration  30: 709109.249 ops/s
Iteration   1: 657449.492 ops/s
Iteration   2: 705388.526 ops/s
Iteration   3: 683457.064 ops/s
Iteration   4: 700393.223 ops/s
Iteration   5: 660151.095 ops/s
Iteration   6: 706500.507 ops/s
Iteration   7: 681546.548 ops/s
Iteration   8: 703445.780 ops/s
Iteration   9: 672486.029 ops/s
Iteration  10: 686246.827 ops/s
Iteration  11: 698137.539 ops/s
Iteration  12: 663982.803 ops/s
Iteration  13: 700986.816 ops/s
Iteration  14: 668473.728 ops/s
Iteration  15: 673346.635 ops/s
Iteration  16: 691252.169 ops/s
Iteration  17: 674710.950 ops/s
Iteration  18: 722687.248 ops/s
Iteration  19: 676180.587 ops/s
Iteration  20: 678060.643 ops/s
Iteration  21: 711779.052 ops/s
Iteration  22: 720548.376 ops/s
Iteration  23: 663734.837 ops/s
Iteration  24: 694467.569 ops/s
Iteration  25: 678164.296 ops/s
Iteration  26: 678034.230 ops/s
Iteration  27: 707886.873 ops/s
Iteration  28: 707849.813 ops/s
Iteration  29: 662853.689 ops/s
Iteration  30: 694452.715 ops/s


Result "io.reactivex.rxjava3.internal.util.QueueDrainHelperTest._Benchmark.benchmark_observerCheckTerminatedNonDelayErrorErrorResource":
  687488.522 ±(99.9%) 12426.382 ops/s [Average]
  (min, avg, max) = (657449.492, 687488.522, 722687.248), stdev = 18599.225
  CI (99.9%): [675062.140, 699914.904] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                     Mode  Cnt       Score       Error  Units
QueueDrainHelperTest._Benchmark.benchmark_observerCheckTerminatedNonDelayErrorErrorResource  thrpt   30  687488.522 ± 12426.382  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualTest._Benchmark.benchmark_doubleError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualTest._Benchmark.benchmark_doubleError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 18441.676 ops/s
# Warmup Iteration   2: 103700.267 ops/s
# Warmup Iteration   3: 146357.229 ops/s
# Warmup Iteration   4: 144025.826 ops/s
# Warmup Iteration   5: 129411.025 ops/s
# Warmup Iteration   6: 153152.142 ops/s
# Warmup Iteration   7: 161056.795 ops/s
# Warmup Iteration   8: 154906.083 ops/s
# Warmup Iteration   9: 163544.520 ops/s
# Warmup Iteration  10: 159019.479 ops/s
# Warmup Iteration  11: 159859.129 ops/s
# Warmup Iteration  12: 168186.436 ops/s
# Warmup Iteration  13: 161098.753 ops/s
# Warmup Iteration  14: 164781.773 ops/s
# Warmup Iteration  15: 160695.120 ops/s
# Warmup Iteration  16: 163893.350 ops/s
# Warmup Iteration  17: 166173.797 ops/s
# Warmup Iteration  18: 165972.719 ops/s
# Warmup Iteration  19: 171708.133 ops/s
# Warmup Iteration  20: 167342.740 ops/s
# Warmup Iteration  21: 173107.831 ops/s
# Warmup Iteration  22: 162873.541 ops/s
# Warmup Iteration  23: 167468.832 ops/s
# Warmup Iteration  24: 167125.854 ops/s
# Warmup Iteration  25: 166411.202 ops/s
# Warmup Iteration  26: 167277.388 ops/s
# Warmup Iteration  27: 171238.917 ops/s
# Warmup Iteration  28: 162094.930 ops/s
# Warmup Iteration  29: 175683.752 ops/s
# Warmup Iteration  30: 164600.540 ops/s
Iteration   1: 169808.533 ops/s
Iteration   2: 163233.373 ops/s
Iteration   3: 171215.671 ops/s
Iteration   4: 167928.158 ops/s
Iteration   5: 162269.052 ops/s
Iteration   6: 173493.290 ops/s
Iteration   7: 170858.324 ops/s
Iteration   8: 164116.753 ops/s
Iteration   9: 171575.395 ops/s
Iteration  10: 164802.606 ops/s
Iteration  11: 165357.661 ops/s
Iteration  12: 173315.785 ops/s
Iteration  13: 162921.414 ops/s
Iteration  14: 165539.265 ops/s
Iteration  15: 166750.806 ops/s
Iteration  16: 169323.382 ops/s
Iteration  17: 168772.715 ops/s
Iteration  18: 167850.527 ops/s
Iteration  19: 168963.563 ops/s
Iteration  20: 164917.536 ops/s
Iteration  21: 173065.864 ops/s
Iteration  22: 164467.439 ops/s
Iteration  23: 172706.823 ops/s
Iteration  24: 162352.866 ops/s
Iteration  25: 171548.765 ops/s
Iteration  26: 165266.728 ops/s
Iteration  27: 169444.456 ops/s
Iteration  28: 161790.034 ops/s
Iteration  29: 167383.969 ops/s
Iteration  30: 171480.128 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualTest._Benchmark.benchmark_doubleError":
  167750.696 ±(99.9%) 2451.945 ops/s [Average]
  (min, avg, max) = (161790.034, 167750.696, 173493.290), stdev = 3669.956
  CI (99.9%): [165298.751, 170202.641] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score      Error  Units
FlowableSequenceEqualTest._Benchmark.benchmark_doubleError  thrpt   30  167750.696 ± 2451.945  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriberTest._Benchmark.benchmark_orderedFastPathNoRequest$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriberTest._Benchmark.benchmark_orderedFastPathNoRequest

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 180253.333 ops/s
# Warmup Iteration   2: 494300.364 ops/s
# Warmup Iteration   3: 552808.969 ops/s
# Warmup Iteration   4: 584517.527 ops/s
# Warmup Iteration   5: 539503.421 ops/s
# Warmup Iteration   6: 544779.098 ops/s
# Warmup Iteration   7: 529942.065 ops/s
# Warmup Iteration   8: 587627.006 ops/s
# Warmup Iteration   9: 563442.983 ops/s
# Warmup Iteration  10: 552240.480 ops/s
# Warmup Iteration  11: 584553.584 ops/s
# Warmup Iteration  12: 570928.811 ops/s
# Warmup Iteration  13: 564263.149 ops/s
# Warmup Iteration  14: 572949.338 ops/s
# Warmup Iteration  15: 541680.792 ops/s
# Warmup Iteration  16: 585726.121 ops/s
# Warmup Iteration  17: 571819.503 ops/s
# Warmup Iteration  18: 604389.074 ops/s
# Warmup Iteration  19: 603344.624 ops/s
# Warmup Iteration  20: 624598.903 ops/s
# Warmup Iteration  21: 607361.735 ops/s
# Warmup Iteration  22: 598428.512 ops/s
# Warmup Iteration  23: 613395.744 ops/s
# Warmup Iteration  24: 600966.114 ops/s
# Warmup Iteration  25: 595247.061 ops/s
# Warmup Iteration  26: 606169.361 ops/s
# Warmup Iteration  27: 595440.420 ops/s
# Warmup Iteration  28: 605290.192 ops/s
# Warmup Iteration  29: 601251.979 ops/s
# Warmup Iteration  30: 601231.564 ops/s
Iteration   1: 620988.850 ops/s
Iteration   2: 589044.594 ops/s
Iteration   3: 624830.674 ops/s
Iteration   4: 615030.624 ops/s
Iteration   5: 592341.541 ops/s
Iteration   6: 610660.410 ops/s
Iteration   7: 602276.606 ops/s
Iteration   8: 625758.538 ops/s
Iteration   9: 610053.818 ops/s
Iteration  10: 605739.675 ops/s
Iteration  11: 604288.225 ops/s
Iteration  12: 586252.689 ops/s
Iteration  13: 616908.593 ops/s
Iteration  14: 588623.534 ops/s
Iteration  15: 580250.745 ops/s
Iteration  16: 609323.098 ops/s
Iteration  17: 579625.569 ops/s
Iteration  18: 607100.308 ops/s
Iteration  19: 617643.564 ops/s
Iteration  20: 577154.793 ops/s
Iteration  21: 594847.469 ops/s
Iteration  22: 586874.268 ops/s
Iteration  23: 622510.667 ops/s
Iteration  24: 589884.138 ops/s
Iteration  25: 573442.434 ops/s
Iteration  26: 604525.953 ops/s
Iteration  27: 604726.515 ops/s
Iteration  28: 609900.413 ops/s
Iteration  29: 630121.704 ops/s
Iteration  30: 580570.974 ops/s


Result "io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriberTest._Benchmark.benchmark_orderedFastPathNoRequest":
  602043.366 ±(99.9%) 10808.664 ops/s [Average]
  (min, avg, max) = (573442.434, 602043.366, 630121.704), stdev = 16177.901
  CI (99.9%): [591234.702, 612852.030] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score       Error  Units
QueueDrainSubscriberTest._Benchmark.benchmark_orderedFastPathNoRequest  thrpt   30  602043.366 ± 10808.664  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybeTest._Benchmark.benchmark_middleError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybeTest._Benchmark.benchmark_middleError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 37692.273 ops/s
# Warmup Iteration   2: 119126.869 ops/s
# Warmup Iteration   3: 316576.561 ops/s
# Warmup Iteration   4: 360167.915 ops/s
# Warmup Iteration   5: 350561.181 ops/s
# Warmup Iteration   6: 377635.508 ops/s
# Warmup Iteration   7: 354768.883 ops/s
# Warmup Iteration   8: 377150.074 ops/s
# Warmup Iteration   9: 373846.517 ops/s
# Warmup Iteration  10: 395202.189 ops/s
# Warmup Iteration  11: 379696.131 ops/s
# Warmup Iteration  12: 386226.277 ops/s
# Warmup Iteration  13: 379226.527 ops/s
# Warmup Iteration  14: 389715.954 ops/s
# Warmup Iteration  15: 382694.492 ops/s
# Warmup Iteration  16: 387144.710 ops/s
# Warmup Iteration  17: 403857.435 ops/s
# Warmup Iteration  18: 380253.920 ops/s
# Warmup Iteration  19: 410131.994 ops/s
# Warmup Iteration  20: 389032.480 ops/s
# Warmup Iteration  21: 395834.769 ops/s
# Warmup Iteration  22: 393109.497 ops/s
# Warmup Iteration  23: 402623.684 ops/s
# Warmup Iteration  24: 390143.854 ops/s
# Warmup Iteration  25: 389862.313 ops/s
# Warmup Iteration  26: 413150.987 ops/s
# Warmup Iteration  27: 392984.983 ops/s
# Warmup Iteration  28: 395444.443 ops/s
# Warmup Iteration  29: 406336.228 ops/s
# Warmup Iteration  30: 388379.953 ops/s
Iteration   1: 406477.145 ops/s
Iteration   2: 381605.702 ops/s
Iteration   3: 400168.814 ops/s
Iteration   4: 403905.301 ops/s
Iteration   5: 386143.458 ops/s
Iteration   6: 395257.265 ops/s
Iteration   7: 404242.868 ops/s
Iteration   8: 408338.815 ops/s
Iteration   9: 392487.204 ops/s
Iteration  10: 398168.202 ops/s
Iteration  11: 392848.000 ops/s
Iteration  12: 400022.197 ops/s
Iteration  13: 388382.511 ops/s
Iteration  14: 395023.471 ops/s
Iteration  15: 405350.505 ops/s
Iteration  16: 392672.278 ops/s
Iteration  17: 384002.011 ops/s
Iteration  18: 405224.136 ops/s
Iteration  19: 389668.017 ops/s
Iteration  20: 406080.578 ops/s
Iteration  21: 381358.388 ops/s
Iteration  22: 393962.250 ops/s
Iteration  23: 414742.066 ops/s
Iteration  24: 383462.168 ops/s
Iteration  25: 396949.195 ops/s
Iteration  26: 390679.710 ops/s
Iteration  27: 409378.870 ops/s
Iteration  28: 401136.392 ops/s
Iteration  29: 394449.776 ops/s
Iteration  30: 410285.128 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybeTest._Benchmark.benchmark_middleError":
  397082.414 ±(99.9%) 6101.972 ops/s [Average]
  (min, avg, max) = (381358.388, 397082.414, 414742.066), stdev = 9133.145
  CI (99.9%): [390980.442, 403184.386] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
ObservableFlatMapMaybeTest._Benchmark.benchmark_middleError  thrpt   30  397082.414 ± 6101.972  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybeTest._Benchmark.benchmark_take$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybeTest._Benchmark.benchmark_take

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 288681.768 ops/s
# Warmup Iteration   2: 1334149.265 ops/s
# Warmup Iteration   3: 1470614.831 ops/s
# Warmup Iteration   4: 1788396.178 ops/s
# Warmup Iteration   5: 1985734.324 ops/s
# Warmup Iteration   6: 2069835.209 ops/s
# Warmup Iteration   7: 1940114.697 ops/s
# Warmup Iteration   8: 1936942.755 ops/s
# Warmup Iteration   9: 1964298.791 ops/s
# Warmup Iteration  10: 1985825.213 ops/s
# Warmup Iteration  11: 1920343.030 ops/s
# Warmup Iteration  12: 1999059.342 ops/s
# Warmup Iteration  13: 1963617.654 ops/s
# Warmup Iteration  14: 1929543.228 ops/s
# Warmup Iteration  15: 1949116.056 ops/s
# Warmup Iteration  16: 1973184.176 ops/s
# Warmup Iteration  17: 1995107.638 ops/s
# Warmup Iteration  18: 1965663.379 ops/s
# Warmup Iteration  19: 2032513.518 ops/s
# Warmup Iteration  20: 2020312.790 ops/s
# Warmup Iteration  21: 2051247.654 ops/s
# Warmup Iteration  22: 1904735.820 ops/s
# Warmup Iteration  23: 2078583.329 ops/s
# Warmup Iteration  24: 2001230.095 ops/s
# Warmup Iteration  25: 1952110.399 ops/s
# Warmup Iteration  26: 2050778.318 ops/s
# Warmup Iteration  27: 1930138.890 ops/s
# Warmup Iteration  28: 2080586.204 ops/s
# Warmup Iteration  29: 1990332.281 ops/s
# Warmup Iteration  30: 2040515.511 ops/s
Iteration   1: 2019022.193 ops/s
Iteration   2: 1893108.468 ops/s
Iteration   3: 2020965.561 ops/s
Iteration   4: 1936023.771 ops/s
Iteration   5: 2074871.226 ops/s
Iteration   6: 1934540.758 ops/s
Iteration   7: 2000578.077 ops/s
Iteration   8: 1972430.775 ops/s
Iteration   9: 2004724.338 ops/s
Iteration  10: 2008193.189 ops/s
Iteration  11: 1950722.339 ops/s
Iteration  12: 2097453.944 ops/s
Iteration  13: 2014620.067 ops/s
Iteration  14: 1978521.211 ops/s
Iteration  15: 2052164.146 ops/s
Iteration  16: 1936799.764 ops/s
Iteration  17: 1992058.379 ops/s
Iteration  18: 2010178.861 ops/s
Iteration  19: 2002238.225 ops/s
Iteration  20: 1955846.292 ops/s
Iteration  21: 2040589.538 ops/s
Iteration  22: 1984244.401 ops/s
Iteration  23: 1969596.740 ops/s
Iteration  24: 2051891.179 ops/s
Iteration  25: 1971570.565 ops/s
Iteration  26: 1897016.365 ops/s
Iteration  27: 1613438.450 ops/s
Iteration  28: 1940557.847 ops/s
Iteration  29: 1996577.012 ops/s
Iteration  30: 1961013.205 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybeTest._Benchmark.benchmark_take":
  1976051.896 ±(99.9%) 55858.953 ops/s [Average]
  (min, avg, max) = (1613438.450, 1976051.896, 2097453.944), stdev = 83607.058
  CI (99.9%): [1920192.943, 2031910.850] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
ObservableFlatMapMaybeTest._Benchmark.benchmark_take  thrpt   30  1976051.896 ± 55858.953  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybeTest._Benchmark.benchmark_emissionQueueTrigger$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybeTest._Benchmark.benchmark_emissionQueueTrigger

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 80705.387 ops/s
# Warmup Iteration   2: 345146.037 ops/s
# Warmup Iteration   3: 903304.288 ops/s
# Warmup Iteration   4: 986652.733 ops/s
# Warmup Iteration   5: 1158514.101 ops/s
# Warmup Iteration   6: 1186012.886 ops/s
# Warmup Iteration   7: 1204286.552 ops/s
# Warmup Iteration   8: 1204259.199 ops/s
# Warmup Iteration   9: 1203240.087 ops/s
# Warmup Iteration  10: 1240472.049 ops/s
# Warmup Iteration  11: 1164271.676 ops/s
# Warmup Iteration  12: 1226037.868 ops/s
# Warmup Iteration  13: 1168230.943 ops/s
# Warmup Iteration  14: 1204355.296 ops/s
# Warmup Iteration  15: 1245435.758 ops/s
# Warmup Iteration  16: 1178617.008 ops/s
# Warmup Iteration  17: 1180176.774 ops/s
# Warmup Iteration  18: 1198663.077 ops/s
# Warmup Iteration  19: 1186171.338 ops/s
# Warmup Iteration  20: 1238947.767 ops/s
# Warmup Iteration  21: 1264658.993 ops/s
# Warmup Iteration  22: 1164326.911 ops/s
# Warmup Iteration  23: 1218064.230 ops/s
# Warmup Iteration  24: 1209541.493 ops/s
# Warmup Iteration  25: 1181965.803 ops/s
# Warmup Iteration  26: 1256744.635 ops/s
# Warmup Iteration  27: 1168633.086 ops/s
# Warmup Iteration  28: 1231369.386 ops/s
# Warmup Iteration  29: 1261493.343 ops/s
# Warmup Iteration  30: 1182604.537 ops/s
Iteration   1: 1228711.328 ops/s
Iteration   2: 1173260.505 ops/s
Iteration   3: 1275613.023 ops/s
Iteration   4: 1239838.792 ops/s
Iteration   5: 1210354.341 ops/s
Iteration   6: 1241178.141 ops/s
Iteration   7: 1178034.157 ops/s
Iteration   8: 1252596.730 ops/s
Iteration   9: 1222374.480 ops/s
Iteration  10: 1172136.001 ops/s
Iteration  11: 1209852.342 ops/s
Iteration  12: 1195408.587 ops/s
Iteration  13: 1208214.384 ops/s
Iteration  14: 1188288.211 ops/s
Iteration  15: 1196747.703 ops/s
Iteration  16: 1250032.036 ops/s
Iteration  17: 1195060.691 ops/s
Iteration  18: 1257363.505 ops/s
Iteration  19: 1163218.367 ops/s
Iteration  20: 1224253.164 ops/s
Iteration  21: 1161543.570 ops/s
Iteration  22: 1212472.061 ops/s
Iteration  23: 1243237.495 ops/s
Iteration  24: 1176277.455 ops/s
Iteration  25: 1226760.299 ops/s
Iteration  26: 1194762.045 ops/s
Iteration  27: 1232780.137 ops/s
Iteration  28: 1210251.376 ops/s
Iteration  29: 1232716.971 ops/s
Iteration  30: 1230302.981 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybeTest._Benchmark.benchmark_emissionQueueTrigger":
  1213454.696 ±(99.9%) 19932.845 ops/s [Average]
  (min, avg, max) = (1161543.570, 1213454.696, 1275613.023), stdev = 29834.547
  CI (99.9%): [1193521.851, 1233387.541] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
ObservableFlatMapMaybeTest._Benchmark.benchmark_emissionQueueTrigger  thrpt   30  1213454.696 ± 19932.845  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybeTest._Benchmark.benchmark_emissionQueueTrigger2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybeTest._Benchmark.benchmark_emissionQueueTrigger2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 28302.228 ops/s
# Warmup Iteration   2: 232127.153 ops/s
# Warmup Iteration   3: 670570.733 ops/s
# Warmup Iteration   4: 849171.015 ops/s
# Warmup Iteration   5: 980635.109 ops/s
# Warmup Iteration   6: 952469.876 ops/s
# Warmup Iteration   7: 954815.759 ops/s
# Warmup Iteration   8: 995852.535 ops/s
# Warmup Iteration   9: 1003907.185 ops/s
# Warmup Iteration  10: 942049.702 ops/s
# Warmup Iteration  11: 969753.332 ops/s
# Warmup Iteration  12: 947540.775 ops/s
# Warmup Iteration  13: 989389.847 ops/s
# Warmup Iteration  14: 972373.211 ops/s
# Warmup Iteration  15: 960653.005 ops/s
# Warmup Iteration  16: 988399.537 ops/s
# Warmup Iteration  17: 945396.561 ops/s
# Warmup Iteration  18: 949053.638 ops/s
# Warmup Iteration  19: 1031009.379 ops/s
# Warmup Iteration  20: 946033.878 ops/s
# Warmup Iteration  21: 972180.806 ops/s
# Warmup Iteration  22: 1009576.259 ops/s
# Warmup Iteration  23: 974417.326 ops/s
# Warmup Iteration  24: 963520.595 ops/s
# Warmup Iteration  25: 1001926.266 ops/s
# Warmup Iteration  26: 954605.994 ops/s
# Warmup Iteration  27: 973209.860 ops/s
# Warmup Iteration  28: 997150.010 ops/s
# Warmup Iteration  29: 944341.415 ops/s
# Warmup Iteration  30: 991413.983 ops/s
Iteration   1: 945908.868 ops/s
Iteration   2: 940760.129 ops/s
Iteration   3: 976516.893 ops/s
Iteration   4: 959810.139 ops/s
Iteration   5: 971507.418 ops/s
Iteration   6: 982092.169 ops/s
Iteration   7: 998766.263 ops/s
Iteration   8: 1005989.876 ops/s
Iteration   9: 934607.584 ops/s
Iteration  10: 978276.697 ops/s
Iteration  11: 969351.618 ops/s
Iteration  12: 943099.435 ops/s
Iteration  13: 990257.442 ops/s
Iteration  14: 957439.611 ops/s
Iteration  15: 1023139.870 ops/s
Iteration  16: 952829.733 ops/s
Iteration  17: 983287.263 ops/s
Iteration  18: 965431.699 ops/s
Iteration  19: 972607.045 ops/s
Iteration  20: 992627.201 ops/s
Iteration  21: 871234.175 ops/s
Iteration  22: 863952.234 ops/s
Iteration  23: 924427.064 ops/s
Iteration  24: 1008615.077 ops/s
Iteration  25: 974860.964 ops/s
Iteration  26: 957835.157 ops/s
Iteration  27: 971648.658 ops/s
Iteration  28: 960662.087 ops/s
Iteration  29: 980507.861 ops/s
Iteration  30: 983327.317 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybeTest._Benchmark.benchmark_emissionQueueTrigger2":
  964712.585 ±(99.9%) 23071.102 ops/s [Average]
  (min, avg, max) = (863952.234, 964712.585, 1023139.870), stdev = 34531.742
  CI (99.9%): [941641.483, 987783.687] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score       Error  Units
ObservableFlatMapMaybeTest._Benchmark.benchmark_emissionQueueTrigger2  thrpt   30  964712.585 ± 23071.102  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybeTest._Benchmark.benchmark_disposeInner$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybeTest._Benchmark.benchmark_disposeInner

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 365260.756 ops/s
# Warmup Iteration   2: 1858953.427 ops/s
# Warmup Iteration   3: 2093043.605 ops/s
# Warmup Iteration   4: 2534039.464 ops/s
# Warmup Iteration   5: 2276867.222 ops/s
# Warmup Iteration   6: 2568698.318 ops/s
# Warmup Iteration   7: 2534422.848 ops/s
# Warmup Iteration   8: 2489891.215 ops/s
# Warmup Iteration   9: 2495953.959 ops/s
# Warmup Iteration  10: 2539998.755 ops/s
# Warmup Iteration  11: 2418102.002 ops/s
# Warmup Iteration  12: 2466578.216 ops/s
# Warmup Iteration  13: 2620334.180 ops/s
# Warmup Iteration  14: 2392341.939 ops/s
# Warmup Iteration  15: 2615316.435 ops/s
# Warmup Iteration  16: 2570929.557 ops/s
# Warmup Iteration  17: 2438155.368 ops/s
# Warmup Iteration  18: 2566398.784 ops/s
# Warmup Iteration  19: 2471712.915 ops/s
# Warmup Iteration  20: 2530414.740 ops/s
# Warmup Iteration  21: 2516342.870 ops/s
# Warmup Iteration  22: 2520726.064 ops/s
# Warmup Iteration  23: 2538336.055 ops/s
# Warmup Iteration  24: 2483571.227 ops/s
# Warmup Iteration  25: 2486076.786 ops/s
# Warmup Iteration  26: 2567585.590 ops/s
# Warmup Iteration  27: 2448448.709 ops/s
# Warmup Iteration  28: 2590569.993 ops/s
# Warmup Iteration  29: 2510456.820 ops/s
# Warmup Iteration  30: 2415184.895 ops/s
Iteration   1: 2581334.473 ops/s
Iteration   2: 2420856.448 ops/s
Iteration   3: 2645696.629 ops/s
Iteration   4: 2413309.729 ops/s
Iteration   5: 2437136.080 ops/s
Iteration   6: 2600952.039 ops/s
Iteration   7: 2411060.810 ops/s
Iteration   8: 2431692.651 ops/s
Iteration   9: 2493897.301 ops/s
Iteration  10: 2570100.707 ops/s
Iteration  11: 2446079.794 ops/s
Iteration  12: 2573973.001 ops/s
Iteration  13: 2426268.338 ops/s
Iteration  14: 2527168.092 ops/s
Iteration  15: 2553504.060 ops/s
Iteration  16: 2456405.524 ops/s
Iteration  17: 2496216.408 ops/s
Iteration  18: 2519438.902 ops/s
Iteration  19: 2407911.349 ops/s
Iteration  20: 2499681.073 ops/s
Iteration  21: 2507448.091 ops/s
Iteration  22: 2488199.634 ops/s
Iteration  23: 2625891.030 ops/s
Iteration  24: 2486259.608 ops/s
Iteration  25: 2568017.868 ops/s
Iteration  26: 2547333.349 ops/s
Iteration  27: 2458166.905 ops/s
Iteration  28: 2603797.543 ops/s
Iteration  29: 2431805.554 ops/s
Iteration  30: 2591921.059 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybeTest._Benchmark.benchmark_disposeInner":
  2507384.135 ±(99.9%) 47820.598 ops/s [Average]
  (min, avg, max) = (2407911.349, 2507384.135, 2645696.629), stdev = 71575.626
  CI (99.9%): [2459563.537, 2555204.733] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
ObservableFlatMapMaybeTest._Benchmark.benchmark_disposeInner  thrpt   30  2507384.135 ± 47820.598  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybeTest._Benchmark.benchmark_completeError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybeTest._Benchmark.benchmark_completeError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 64480.520 ops/s
# Warmup Iteration   2: 159086.442 ops/s
# Warmup Iteration   3: 418766.299 ops/s
# Warmup Iteration   4: 447487.353 ops/s
# Warmup Iteration   5: 458284.635 ops/s
# Warmup Iteration   6: 437439.167 ops/s
# Warmup Iteration   7: 436386.165 ops/s
# Warmup Iteration   8: 434589.680 ops/s
# Warmup Iteration   9: 429207.970 ops/s
# Warmup Iteration  10: 455247.938 ops/s
# Warmup Iteration  11: 445094.028 ops/s
# Warmup Iteration  12: 468519.369 ops/s
# Warmup Iteration  13: 448483.548 ops/s
# Warmup Iteration  14: 477502.701 ops/s
# Warmup Iteration  15: 459947.292 ops/s
# Warmup Iteration  16: 458775.894 ops/s
# Warmup Iteration  17: 473701.577 ops/s
# Warmup Iteration  18: 439955.987 ops/s
# Warmup Iteration  19: 498743.534 ops/s
# Warmup Iteration  20: 477717.169 ops/s
# Warmup Iteration  21: 466840.722 ops/s
# Warmup Iteration  22: 483616.769 ops/s
# Warmup Iteration  23: 463749.067 ops/s
# Warmup Iteration  24: 482986.274 ops/s
# Warmup Iteration  25: 477285.964 ops/s
# Warmup Iteration  26: 471677.077 ops/s
# Warmup Iteration  27: 484905.512 ops/s
# Warmup Iteration  28: 466532.494 ops/s
# Warmup Iteration  29: 484026.332 ops/s
# Warmup Iteration  30: 496747.315 ops/s
Iteration   1: 461037.127 ops/s
Iteration   2: 482799.576 ops/s
Iteration   3: 469940.435 ops/s
Iteration   4: 487272.321 ops/s
Iteration   5: 474143.499 ops/s
Iteration   6: 476619.594 ops/s
Iteration   7: 487840.678 ops/s
Iteration   8: 476823.983 ops/s
Iteration   9: 481122.850 ops/s
Iteration  10: 489023.476 ops/s
Iteration  11: 472838.320 ops/s
Iteration  12: 484603.562 ops/s
Iteration  13: 463872.599 ops/s
Iteration  14: 497196.373 ops/s
Iteration  15: 468999.326 ops/s
Iteration  16: 418170.845 ops/s
Iteration  17: 443241.034 ops/s
Iteration  18: 494164.541 ops/s
Iteration  19: 473177.968 ops/s
Iteration  20: 474036.215 ops/s
Iteration  21: 458757.712 ops/s
Iteration  22: 478506.889 ops/s
Iteration  23: 479162.091 ops/s
Iteration  24: 479830.335 ops/s
Iteration  25: 478955.398 ops/s
Iteration  26: 486759.286 ops/s
Iteration  27: 473663.793 ops/s
Iteration  28: 476834.224 ops/s
Iteration  29: 474576.219 ops/s
Iteration  30: 474857.141 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybeTest._Benchmark.benchmark_completeError":
  474627.580 ±(99.9%) 10131.460 ops/s [Average]
  (min, avg, max) = (418170.845, 474627.580, 497196.373), stdev = 15164.294
  CI (99.9%): [464496.120, 484759.041] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score       Error  Units
ObservableFlatMapMaybeTest._Benchmark.benchmark_completeError  thrpt   30  474627.580 ± 10131.460  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableTest._Benchmark.benchmark_normalNonDelayErrorOuter$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableTest._Benchmark.benchmark_normalNonDelayErrorOuter

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 29758.101 ops/s
# Warmup Iteration   2: 97173.865 ops/s
# Warmup Iteration   3: 287629.014 ops/s
# Warmup Iteration   4: 297900.016 ops/s
# Warmup Iteration   5: 332875.899 ops/s
# Warmup Iteration   6: 319211.352 ops/s
# Warmup Iteration   7: 316957.061 ops/s
# Warmup Iteration   8: 325419.802 ops/s
# Warmup Iteration   9: 334401.049 ops/s
# Warmup Iteration  10: 336238.282 ops/s
# Warmup Iteration  11: 341826.200 ops/s
# Warmup Iteration  12: 328719.951 ops/s
# Warmup Iteration  13: 341331.311 ops/s
# Warmup Iteration  14: 325548.149 ops/s
# Warmup Iteration  15: 346839.987 ops/s
# Warmup Iteration  16: 336798.676 ops/s
# Warmup Iteration  17: 344819.268 ops/s
# Warmup Iteration  18: 357888.649 ops/s
# Warmup Iteration  19: 336535.993 ops/s
# Warmup Iteration  20: 360928.298 ops/s
# Warmup Iteration  21: 338119.582 ops/s
# Warmup Iteration  22: 350000.630 ops/s
# Warmup Iteration  23: 342916.241 ops/s
# Warmup Iteration  24: 337453.712 ops/s
# Warmup Iteration  25: 354750.695 ops/s
# Warmup Iteration  26: 342741.506 ops/s
# Warmup Iteration  27: 342939.988 ops/s
# Warmup Iteration  28: 342519.229 ops/s
# Warmup Iteration  29: 337012.761 ops/s
# Warmup Iteration  30: 361504.228 ops/s
Iteration   1: 337833.024 ops/s
Iteration   2: 355795.523 ops/s
Iteration   3: 347792.795 ops/s
Iteration   4: 347595.445 ops/s
Iteration   5: 356160.811 ops/s
Iteration   6: 340249.314 ops/s
Iteration   7: 357593.736 ops/s
Iteration   8: 344210.316 ops/s
Iteration   9: 354879.851 ops/s
Iteration  10: 339013.230 ops/s
Iteration  11: 353784.033 ops/s
Iteration  12: 345017.863 ops/s
Iteration  13: 338614.084 ops/s
Iteration  14: 362650.929 ops/s
Iteration  15: 334382.585 ops/s
Iteration  16: 350922.276 ops/s
Iteration  17: 352439.023 ops/s
Iteration  18: 349467.250 ops/s
Iteration  19: 354752.570 ops/s
Iteration  20: 345419.528 ops/s
Iteration  21: 329112.192 ops/s
Iteration  22: 349996.469 ops/s
Iteration  23: 349139.910 ops/s
Iteration  24: 357347.182 ops/s
Iteration  25: 334748.991 ops/s
Iteration  26: 367290.835 ops/s
Iteration  27: 340854.527 ops/s
Iteration  28: 354231.621 ops/s
Iteration  29: 361138.978 ops/s
Iteration  30: 339347.129 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableTest._Benchmark.benchmark_normalNonDelayErrorOuter":
  348392.734 ±(99.9%) 6164.182 ops/s [Average]
  (min, avg, max) = (329112.192, 348392.734, 367290.835), stdev = 9226.258
  CI (99.9%): [342228.552, 354556.916] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt       Score      Error  Units
ObservableFlatMapCompletableTest._Benchmark.benchmark_normalNonDelayErrorOuter  thrpt   30  348392.734 ± 6164.182  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.disposables.CompositeDisposableTest._Benchmark.benchmark_exception$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.disposables.CompositeDisposableTest._Benchmark.benchmark_exception

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 361237.395 ops/s
# Warmup Iteration   2: 524253.340 ops/s
# Warmup Iteration   3: 613488.640 ops/s
# Warmup Iteration   4: 584279.781 ops/s
# Warmup Iteration   5: 605912.308 ops/s
# Warmup Iteration   6: 573055.997 ops/s
# Warmup Iteration   7: 580642.419 ops/s
# Warmup Iteration   8: 587606.668 ops/s
# Warmup Iteration   9: 601163.833 ops/s
# Warmup Iteration  10: 578208.193 ops/s
# Warmup Iteration  11: 606022.221 ops/s
# Warmup Iteration  12: 607296.066 ops/s
# Warmup Iteration  13: 578730.418 ops/s
# Warmup Iteration  14: 628892.453 ops/s
# Warmup Iteration  15: 549290.721 ops/s
# Warmup Iteration  16: 619772.892 ops/s
# Warmup Iteration  17: 641827.159 ops/s
# Warmup Iteration  18: 611445.206 ops/s
# Warmup Iteration  19: 642287.575 ops/s
# Warmup Iteration  20: 618072.895 ops/s
# Warmup Iteration  21: 614474.717 ops/s
# Warmup Iteration  22: 624047.956 ops/s
# Warmup Iteration  23: 631813.248 ops/s
# Warmup Iteration  24: 625067.267 ops/s
# Warmup Iteration  25: 606451.474 ops/s
# Warmup Iteration  26: 627126.763 ops/s
# Warmup Iteration  27: 622110.799 ops/s
# Warmup Iteration  28: 624738.004 ops/s
# Warmup Iteration  29: 640260.483 ops/s
# Warmup Iteration  30: 610515.791 ops/s
Iteration   1: 635007.102 ops/s
Iteration   2: 609733.327 ops/s
Iteration   3: 633401.215 ops/s
Iteration   4: 613399.697 ops/s
Iteration   5: 615944.227 ops/s
Iteration   6: 626588.443 ops/s
Iteration   7: 609152.587 ops/s
Iteration   8: 635946.637 ops/s
Iteration   9: 639698.331 ops/s
Iteration  10: 625917.806 ops/s
Iteration  11: 488522.253 ops/s
Iteration  12: 628940.657 ops/s
Iteration  13: 589396.765 ops/s
Iteration  14: 645338.833 ops/s
Iteration  15: 611074.962 ops/s
Iteration  16: 627662.107 ops/s
Iteration  17: 643237.841 ops/s
Iteration  18: 610387.095 ops/s
Iteration  19: 631624.517 ops/s
Iteration  20: 623151.964 ops/s
Iteration  21: 645453.899 ops/s
Iteration  22: 604992.247 ops/s
Iteration  23: 620726.019 ops/s
Iteration  24: 641502.668 ops/s
Iteration  25: 606730.344 ops/s
Iteration  26: 642832.860 ops/s
Iteration  27: 649854.551 ops/s
Iteration  28: 605078.136 ops/s
Iteration  29: 650025.085 ops/s
Iteration  30: 603478.730 ops/s


Result "io.reactivex.rxjava3.disposables.CompositeDisposableTest._Benchmark.benchmark_exception":
  620493.364 ±(99.9%) 19844.260 ops/s [Average]
  (min, avg, max) = (488522.253, 620493.364, 650025.085), stdev = 29701.956
  CI (99.9%): [600649.104, 640337.623] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score       Error  Units
CompositeDisposableTest._Benchmark.benchmark_exception  thrpt   30  620493.364 ± 19844.260  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.disposables.CompositeDisposableTest._Benchmark.benchmark_disposeThrowsCheckedException$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.disposables.CompositeDisposableTest._Benchmark.benchmark_disposeThrowsCheckedException

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 201834.192 ops/s
# Warmup Iteration   2: 263901.067 ops/s
# Warmup Iteration   3: 284476.741 ops/s
# Warmup Iteration   4: 295601.501 ops/s
# Warmup Iteration   5: 307302.567 ops/s
# Warmup Iteration   6: 310115.214 ops/s
# Warmup Iteration   7: 276010.990 ops/s
# Warmup Iteration   8: 308931.389 ops/s
# Warmup Iteration   9: 317028.232 ops/s
# Warmup Iteration  10: 316409.890 ops/s
# Warmup Iteration  11: 319747.225 ops/s
# Warmup Iteration  12: 316539.561 ops/s
# Warmup Iteration  13: 314179.969 ops/s
# Warmup Iteration  14: 310722.783 ops/s
# Warmup Iteration  15: 320573.707 ops/s
# Warmup Iteration  16: 312058.065 ops/s
# Warmup Iteration  17: 325913.505 ops/s
# Warmup Iteration  18: 329222.383 ops/s
# Warmup Iteration  19: 326890.767 ops/s
# Warmup Iteration  20: 337915.153 ops/s
# Warmup Iteration  21: 327313.938 ops/s
# Warmup Iteration  22: 327728.718 ops/s
# Warmup Iteration  23: 332100.155 ops/s
# Warmup Iteration  24: 324799.112 ops/s
# Warmup Iteration  25: 342103.719 ops/s
# Warmup Iteration  26: 320976.132 ops/s
# Warmup Iteration  27: 333847.518 ops/s
# Warmup Iteration  28: 324172.999 ops/s
# Warmup Iteration  29: 327245.159 ops/s
# Warmup Iteration  30: 329621.219 ops/s
Iteration   1: 333340.873 ops/s
Iteration   2: 331969.802 ops/s
Iteration   3: 330460.810 ops/s
Iteration   4: 328114.482 ops/s
Iteration   5: 339325.197 ops/s
Iteration   6: 329377.738 ops/s
Iteration   7: 336798.722 ops/s
Iteration   8: 320591.463 ops/s
Iteration   9: 331465.770 ops/s
Iteration  10: 326280.254 ops/s
Iteration  11: 345763.025 ops/s
Iteration  12: 322602.295 ops/s
Iteration  13: 328297.587 ops/s
Iteration  14: 325644.853 ops/s
Iteration  15: 338645.216 ops/s
Iteration  16: 319453.810 ops/s
Iteration  17: 331033.337 ops/s
Iteration  18: 330651.337 ops/s
Iteration  19: 321906.418 ops/s
Iteration  20: 337300.780 ops/s
Iteration  21: 331213.015 ops/s
Iteration  22: 323491.983 ops/s
Iteration  23: 344898.071 ops/s
Iteration  24: 319807.003 ops/s
Iteration  25: 336142.888 ops/s
Iteration  26: 325239.855 ops/s
Iteration  27: 339687.492 ops/s
Iteration  28: 314335.970 ops/s
Iteration  29: 319470.063 ops/s
Iteration  30: 332083.317 ops/s


Result "io.reactivex.rxjava3.disposables.CompositeDisposableTest._Benchmark.benchmark_disposeThrowsCheckedException":
  329846.447 ±(99.9%) 5222.553 ops/s [Average]
  (min, avg, max) = (314335.970, 329846.447, 345763.025), stdev = 7816.871
  CI (99.9%): [324623.895, 335069.000] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score      Error  Units
CompositeDisposableTest._Benchmark.benchmark_disposeThrowsCheckedException  thrpt   30  329846.447 ± 5222.553  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArrayTest._Benchmark.benchmark_errorFused$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArrayTest._Benchmark.benchmark_errorFused

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 96185.370 ops/s
# Warmup Iteration   2: 430430.476 ops/s
# Warmup Iteration   3: 540547.518 ops/s
# Warmup Iteration   4: 579235.276 ops/s
# Warmup Iteration   5: 522621.766 ops/s
# Warmup Iteration   6: 619213.800 ops/s
# Warmup Iteration   7: 603178.349 ops/s
# Warmup Iteration   8: 615984.437 ops/s
# Warmup Iteration   9: 616740.129 ops/s
# Warmup Iteration  10: 624811.513 ops/s
# Warmup Iteration  11: 603587.488 ops/s
# Warmup Iteration  12: 598542.499 ops/s
# Warmup Iteration  13: 631949.749 ops/s
# Warmup Iteration  14: 641745.815 ops/s
# Warmup Iteration  15: 611545.783 ops/s
# Warmup Iteration  16: 617325.476 ops/s
# Warmup Iteration  17: 619787.877 ops/s
# Warmup Iteration  18: 671737.479 ops/s
# Warmup Iteration  19: 662695.099 ops/s
# Warmup Iteration  20: 611773.332 ops/s
# Warmup Iteration  21: 653397.342 ops/s
# Warmup Iteration  22: 605000.303 ops/s
# Warmup Iteration  23: 656821.000 ops/s
# Warmup Iteration  24: 661402.891 ops/s
# Warmup Iteration  25: 620106.968 ops/s
# Warmup Iteration  26: 656709.820 ops/s
# Warmup Iteration  27: 640180.753 ops/s
# Warmup Iteration  28: 656387.133 ops/s
# Warmup Iteration  29: 671851.664 ops/s
# Warmup Iteration  30: 624707.743 ops/s
Iteration   1: 657036.050 ops/s
Iteration   2: 647443.024 ops/s
Iteration   3: 616667.156 ops/s
Iteration   4: 670697.967 ops/s
Iteration   5: 652162.089 ops/s
Iteration   6: 549179.906 ops/s
Iteration   7: 617547.564 ops/s
Iteration   8: 630582.614 ops/s
Iteration   9: 641923.275 ops/s
Iteration  10: 653889.779 ops/s
Iteration  11: 630866.350 ops/s
Iteration  12: 653380.455 ops/s
Iteration  13: 640322.748 ops/s
Iteration  14: 624058.611 ops/s
Iteration  15: 660378.086 ops/s
Iteration  16: 645546.678 ops/s
Iteration  17: 666376.939 ops/s
Iteration  18: 647299.739 ops/s
Iteration  19: 630540.555 ops/s
Iteration  20: 658978.823 ops/s
Iteration  21: 628064.763 ops/s
Iteration  22: 647160.728 ops/s
Iteration  23: 678743.132 ops/s
Iteration  24: 614810.320 ops/s
Iteration  25: 661247.870 ops/s
Iteration  26: 622776.674 ops/s
Iteration  27: 657416.392 ops/s
Iteration  28: 621132.311 ops/s
Iteration  29: 652519.645 ops/s
Iteration  30: 647564.454 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArrayTest._Benchmark.benchmark_errorFused":
  640877.157 ±(99.9%) 16227.013 ops/s [Average]
  (min, avg, max) = (549179.906, 640877.157, 678743.132), stdev = 24287.832
  CI (99.9%): [624650.143, 657104.170] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score       Error  Units
MaybeMergeArrayTest._Benchmark.benchmark_errorFused  thrpt   30  640877.157 ± 16227.013  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_openCloseOpenCompletes$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_openCloseOpenCompletes

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.697 ops/s
# Warmup Iteration   2: 25456.445 ops/s
# Warmup Iteration   3: 115909.217 ops/s
# Warmup Iteration   4: 108990.106 ops/s
# Warmup Iteration   5: 148692.802 ops/s
# Warmup Iteration   6: 160531.186 ops/s
# Warmup Iteration   7: 220722.268 ops/s
# Warmup Iteration   8: 488728.606 ops/s
# Warmup Iteration   9: 508473.059 ops/s
# Warmup Iteration  10: 489106.100 ops/s
# Warmup Iteration  11: 490347.950 ops/s
# Warmup Iteration  12: 496782.311 ops/s
# Warmup Iteration  13: 476499.338 ops/s
# Warmup Iteration  14: 513121.708 ops/s
# Warmup Iteration  15: 482090.408 ops/s
# Warmup Iteration  16: 494670.411 ops/s
# Warmup Iteration  17: 488775.336 ops/s
# Warmup Iteration  18: 509776.509 ops/s
# Warmup Iteration  19: 503581.627 ops/s
# Warmup Iteration  20: 510337.232 ops/s
# Warmup Iteration  21: 513075.620 ops/s
# Warmup Iteration  22: 466831.076 ops/s
# Warmup Iteration  23: 507406.066 ops/s
# Warmup Iteration  24: 476535.042 ops/s
# Warmup Iteration  25: 494517.548 ops/s
# Warmup Iteration  26: 502114.446 ops/s
# Warmup Iteration  27: 488450.127 ops/s
# Warmup Iteration  28: 495996.857 ops/s
# Warmup Iteration  29: 492228.995 ops/s
# Warmup Iteration  30: 518867.747 ops/s
Iteration   1: 517184.994 ops/s
Iteration   2: 488371.160 ops/s
Iteration   3: 498304.790 ops/s
Iteration   4: 493914.009 ops/s
Iteration   5: 498018.621 ops/s
Iteration   6: 505395.312 ops/s
Iteration   7: 479682.039 ops/s
Iteration   8: 512909.348 ops/s
Iteration   9: 484459.842 ops/s
Iteration  10: 519507.404 ops/s
Iteration  11: 489416.694 ops/s
Iteration  12: 504855.667 ops/s
Iteration  13: 503342.392 ops/s
Iteration  14: 495831.023 ops/s
Iteration  15: 502112.081 ops/s
Iteration  16: 496085.083 ops/s
Iteration  17: 511619.603 ops/s
Iteration  18: 504264.822 ops/s
Iteration  19: 491582.327 ops/s
Iteration  20: 497492.219 ops/s
Iteration  21: 515338.773 ops/s
Iteration  22: 485495.748 ops/s
Iteration  23: 527238.747 ops/s
Iteration  24: 495362.908 ops/s
Iteration  25: 513187.818 ops/s
Iteration  26: 487767.634 ops/s
Iteration  27: 496595.415 ops/s
Iteration  28: 505615.298 ops/s
Iteration  29: 497894.796 ops/s
Iteration  30: 511750.798 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_openCloseOpenCompletes":
  501019.912 ±(99.9%) 7654.309 ops/s [Average]
  (min, avg, max) = (479682.039, 501019.912, 527238.747), stdev = 11456.610
  CI (99.9%): [493365.603, 508674.221] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
ObservableBufferTest._Benchmark.benchmark_openCloseOpenCompletes  thrpt   30  501019.912 ± 7654.309  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_openCloseOpenCompletesNoBuffers$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_openCloseOpenCompletesNoBuffers

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.848 ops/s
# Warmup Iteration   2: 11316.612 ops/s
# Warmup Iteration   3: 111491.881 ops/s
# Warmup Iteration   4: 197431.744 ops/s
# Warmup Iteration   5: 387801.950 ops/s
# Warmup Iteration   6: 429378.710 ops/s
# Warmup Iteration   7: 467783.356 ops/s
# Warmup Iteration   8: 506262.127 ops/s
# Warmup Iteration   9: 515348.652 ops/s
# Warmup Iteration  10: 522408.879 ops/s
# Warmup Iteration  11: 504327.476 ops/s
# Warmup Iteration  12: 520401.324 ops/s
# Warmup Iteration  13: 526049.648 ops/s
# Warmup Iteration  14: 522568.820 ops/s
# Warmup Iteration  15: 507073.840 ops/s
# Warmup Iteration  16: 517338.021 ops/s
# Warmup Iteration  17: 523792.994 ops/s
# Warmup Iteration  18: 528236.970 ops/s
# Warmup Iteration  19: 514054.734 ops/s
# Warmup Iteration  20: 545002.434 ops/s
# Warmup Iteration  21: 512305.651 ops/s
# Warmup Iteration  22: 517039.160 ops/s
# Warmup Iteration  23: 526653.347 ops/s
# Warmup Iteration  24: 497942.628 ops/s
# Warmup Iteration  25: 540736.782 ops/s
# Warmup Iteration  26: 525177.659 ops/s
# Warmup Iteration  27: 519398.544 ops/s
# Warmup Iteration  28: 516664.033 ops/s
# Warmup Iteration  29: 539127.459 ops/s
# Warmup Iteration  30: 437023.703 ops/s
Iteration   1: 477045.956 ops/s
Iteration   2: 520560.320 ops/s
Iteration   3: 497793.772 ops/s
Iteration   4: 517843.657 ops/s
Iteration   5: 499125.713 ops/s
Iteration   6: 515940.167 ops/s
Iteration   7: 512858.770 ops/s
Iteration   8: 506684.021 ops/s
Iteration   9: 536082.292 ops/s
Iteration  10: 505266.155 ops/s
Iteration  11: 523865.224 ops/s
Iteration  12: 504675.844 ops/s
Iteration  13: 525784.852 ops/s
Iteration  14: 510723.611 ops/s
Iteration  15: 515026.471 ops/s
Iteration  16: 509702.824 ops/s
Iteration  17: 508930.459 ops/s
Iteration  18: 530597.222 ops/s
Iteration  19: 517781.435 ops/s
Iteration  20: 530932.084 ops/s
Iteration  21: 543957.593 ops/s
Iteration  22: 514522.782 ops/s
Iteration  23: 536208.766 ops/s
Iteration  24: 512800.816 ops/s
Iteration  25: 517102.184 ops/s
Iteration  26: 541437.316 ops/s
Iteration  27: 503592.037 ops/s
Iteration  28: 527103.307 ops/s
Iteration  29: 511717.854 ops/s
Iteration  30: 519769.351 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_openCloseOpenCompletesNoBuffers":
  516514.428 ±(99.9%) 9423.285 ops/s [Average]
  (min, avg, max) = (477045.956, 516514.428, 543957.593), stdev = 14104.331
  CI (99.9%): [507091.143, 525937.714] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score      Error  Units
ObservableBufferTest._Benchmark.benchmark_openCloseOpenCompletesNoBuffers  thrpt   30  516514.428 ± 9423.285  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithStartEndObservableTest._Benchmark.benchmark_observableBasedOpenerAndCloser$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithStartEndObservableTest._Benchmark.benchmark_observableBasedOpenerAndCloser

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 13972.384 ops/s
# Warmup Iteration   2: 63198.740 ops/s
# Warmup Iteration   3: 100182.529 ops/s
# Warmup Iteration   4: 253616.284 ops/s
# Warmup Iteration   5: 252928.494 ops/s
# Warmup Iteration   6: 243025.065 ops/s
# Warmup Iteration   7: 261723.964 ops/s
# Warmup Iteration   8: 256779.356 ops/s
# Warmup Iteration   9: 245370.610 ops/s
# Warmup Iteration  10: 256813.419 ops/s
# Warmup Iteration  11: 239073.063 ops/s
# Warmup Iteration  12: 249070.685 ops/s
# Warmup Iteration  13: 263521.002 ops/s
# Warmup Iteration  14: 248694.389 ops/s
# Warmup Iteration  15: 263199.572 ops/s
# Warmup Iteration  16: 242703.779 ops/s
# Warmup Iteration  17: 254285.175 ops/s
# Warmup Iteration  18: 255507.762 ops/s
# Warmup Iteration  19: 246201.523 ops/s
# Warmup Iteration  20: 251775.785 ops/s
# Warmup Iteration  21: 235901.299 ops/s
# Warmup Iteration  22: 242394.535 ops/s
# Warmup Iteration  23: 255167.296 ops/s
# Warmup Iteration  24: 248699.951 ops/s
# Warmup Iteration  25: 254816.966 ops/s
# Warmup Iteration  26: 256391.627 ops/s
# Warmup Iteration  27: 240181.224 ops/s
# Warmup Iteration  28: 257979.734 ops/s
# Warmup Iteration  29: 238740.525 ops/s
# Warmup Iteration  30: 257717.824 ops/s
Iteration   1: 254606.759 ops/s
Iteration   2: 247821.760 ops/s
Iteration   3: 246651.729 ops/s
Iteration   4: 253058.129 ops/s
Iteration   5: 258049.301 ops/s
Iteration   6: 251258.199 ops/s
Iteration   7: 264018.023 ops/s
Iteration   8: 250066.208 ops/s
Iteration   9: 246839.011 ops/s
Iteration  10: 256749.293 ops/s
Iteration  11: 251485.129 ops/s
Iteration  12: 251617.336 ops/s
Iteration  13: 248512.356 ops/s
Iteration  14: 251091.994 ops/s
Iteration  15: 253462.302 ops/s
Iteration  16: 246468.214 ops/s
Iteration  17: 250528.557 ops/s
Iteration  18: 249236.290 ops/s
Iteration  19: 246648.002 ops/s
Iteration  20: 248478.799 ops/s
Iteration  21: 246633.660 ops/s
Iteration  22: 254136.603 ops/s
Iteration  23: 249328.312 ops/s
Iteration  24: 255172.261 ops/s
Iteration  25: 241374.749 ops/s
Iteration  26: 252834.316 ops/s
Iteration  27: 253488.930 ops/s
Iteration  28: 248179.405 ops/s
Iteration  29: 261059.892 ops/s
Iteration  30: 246390.434 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithStartEndObservableTest._Benchmark.benchmark_observableBasedOpenerAndCloser":
  251174.865 ±(99.9%) 3186.243 ops/s [Average]
  (min, avg, max) = (241374.749, 251174.865, 264018.023), stdev = 4769.019
  CI (99.9%): [247988.622, 254361.108] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                        Mode  Cnt       Score      Error  Units
ObservableWindowWithStartEndObservableTest._Benchmark.benchmark_observableBasedOpenerAndCloser  thrpt   30  251174.865 ± 3186.243  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_failingFusedInnerCancelsSource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_failingFusedInnerCancelsSource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 68722.475 ops/s
# Warmup Iteration   2: 210844.916 ops/s
# Warmup Iteration   3: 308881.938 ops/s
# Warmup Iteration   4: 320889.081 ops/s
# Warmup Iteration   5: 304713.438 ops/s
# Warmup Iteration   6: 272892.423 ops/s
# Warmup Iteration   7: 331626.235 ops/s
# Warmup Iteration   8: 327646.138 ops/s
# Warmup Iteration   9: 320128.350 ops/s
# Warmup Iteration  10: 336252.028 ops/s
# Warmup Iteration  11: 329249.840 ops/s
# Warmup Iteration  12: 334876.808 ops/s
# Warmup Iteration  13: 319511.360 ops/s
# Warmup Iteration  14: 343745.502 ops/s
# Warmup Iteration  15: 312683.390 ops/s
# Warmup Iteration  16: 325273.682 ops/s
# Warmup Iteration  17: 350687.560 ops/s
# Warmup Iteration  18: 331230.081 ops/s
# Warmup Iteration  19: 344911.688 ops/s
# Warmup Iteration  20: 336651.753 ops/s
# Warmup Iteration  21: 338832.584 ops/s
# Warmup Iteration  22: 333147.953 ops/s
# Warmup Iteration  23: 346741.303 ops/s
# Warmup Iteration  24: 327768.830 ops/s
# Warmup Iteration  25: 306595.459 ops/s
# Warmup Iteration  26: 309025.388 ops/s
# Warmup Iteration  27: 335438.416 ops/s
# Warmup Iteration  28: 342640.615 ops/s
# Warmup Iteration  29: 326496.408 ops/s
# Warmup Iteration  30: 345491.314 ops/s
Iteration   1: 350403.448 ops/s
Iteration   2: 329721.200 ops/s
Iteration   3: 336732.534 ops/s
Iteration   4: 352283.329 ops/s
Iteration   5: 334027.061 ops/s
Iteration   6: 343038.098 ops/s
Iteration   7: 338299.150 ops/s
Iteration   8: 336683.712 ops/s
Iteration   9: 348449.494 ops/s
Iteration  10: 325669.799 ops/s
Iteration  11: 347209.012 ops/s
Iteration  12: 340676.318 ops/s
Iteration  13: 327478.780 ops/s
Iteration  14: 338843.917 ops/s
Iteration  15: 333528.537 ops/s
Iteration  16: 344142.938 ops/s
Iteration  17: 338170.499 ops/s
Iteration  18: 331838.410 ops/s
Iteration  19: 342095.035 ops/s
Iteration  20: 334275.478 ops/s
Iteration  21: 337060.664 ops/s
Iteration  22: 338809.186 ops/s
Iteration  23: 333544.742 ops/s
Iteration  24: 352306.225 ops/s
Iteration  25: 336984.669 ops/s
Iteration  26: 336028.496 ops/s
Iteration  27: 353419.598 ops/s
Iteration  28: 332084.983 ops/s
Iteration  29: 340614.870 ops/s
Iteration  30: 338532.453 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_failingFusedInnerCancelsSource":
  339098.421 ±(99.9%) 4863.318 ops/s [Average]
  (min, avg, max) = (325669.799, 339098.421, 353419.598), stdev = 7279.185
  CI (99.9%): [334235.104, 343961.739] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score      Error  Units
FlowableFlatMapTest._Benchmark.benchmark_failingFusedInnerCancelsSource  thrpt   30  339098.421 ± 4863.318  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableStartWithTests._Benchmark.benchmark_startWithIterable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableStartWithTests._Benchmark.benchmark_startWithIterable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 230846.593 ops/s
# Warmup Iteration   2: 1141454.924 ops/s
# Warmup Iteration   3: 2016948.301 ops/s
# Warmup Iteration   4: 2139217.396 ops/s
# Warmup Iteration   5: 2437619.184 ops/s
# Warmup Iteration   6: 2305893.210 ops/s
# Warmup Iteration   7: 2389771.115 ops/s
# Warmup Iteration   8: 2421846.769 ops/s
# Warmup Iteration   9: 2336207.448 ops/s
# Warmup Iteration  10: 2319781.477 ops/s
# Warmup Iteration  11: 2382374.396 ops/s
# Warmup Iteration  12: 2361603.270 ops/s
# Warmup Iteration  13: 2348712.603 ops/s
# Warmup Iteration  14: 2433584.907 ops/s
# Warmup Iteration  15: 2355605.788 ops/s
# Warmup Iteration  16: 2457344.100 ops/s
# Warmup Iteration  17: 2379148.895 ops/s
# Warmup Iteration  18: 2310495.517 ops/s
# Warmup Iteration  19: 2432902.335 ops/s
# Warmup Iteration  20: 2342279.609 ops/s
# Warmup Iteration  21: 2397797.126 ops/s
# Warmup Iteration  22: 2348708.611 ops/s
# Warmup Iteration  23: 2376858.688 ops/s
# Warmup Iteration  24: 2267879.401 ops/s
# Warmup Iteration  25: 2422956.031 ops/s
# Warmup Iteration  26: 2294677.660 ops/s
# Warmup Iteration  27: 2381306.567 ops/s
# Warmup Iteration  28: 2375774.086 ops/s
# Warmup Iteration  29: 2355635.097 ops/s
# Warmup Iteration  30: 2451200.501 ops/s
Iteration   1: 2344418.734 ops/s
Iteration   2: 2405075.486 ops/s
Iteration   3: 2345058.198 ops/s
Iteration   4: 2497384.676 ops/s
Iteration   5: 2394097.283 ops/s
Iteration   6: 2372149.478 ops/s
Iteration   7: 2478299.871 ops/s
Iteration   8: 2355809.860 ops/s
Iteration   9: 2366795.515 ops/s
Iteration  10: 2488563.054 ops/s
Iteration  11: 2298836.864 ops/s
Iteration  12: 2349607.215 ops/s
Iteration  13: 2338243.196 ops/s
Iteration  14: 2346544.689 ops/s
Iteration  15: 2343271.704 ops/s
Iteration  16: 2352511.536 ops/s
Iteration  17: 2434881.016 ops/s
Iteration  18: 2288580.936 ops/s
Iteration  19: 2475988.922 ops/s
Iteration  20: 2372808.485 ops/s
Iteration  21: 2342001.458 ops/s
Iteration  22: 2475259.407 ops/s
Iteration  23: 2326401.785 ops/s
Iteration  24: 2432258.777 ops/s
Iteration  25: 2330738.254 ops/s
Iteration  26: 2355879.990 ops/s
Iteration  27: 2389236.202 ops/s
Iteration  28: 2348290.217 ops/s
Iteration  29: 2375691.781 ops/s
Iteration  30: 2372301.829 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableStartWithTests._Benchmark.benchmark_startWithIterable":
  2379899.547 ±(99.9%) 37789.289 ops/s [Average]
  (min, avg, max) = (2288580.936, 2379899.547, 2497384.676), stdev = 56561.233
  CI (99.9%): [2342110.258, 2417688.836] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
FlowableStartWithTests._Benchmark.benchmark_startWithIterable  thrpt   30  2379899.547 ± 37789.289  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableToIteratorTest._Benchmark.benchmark_toIterator$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableToIteratorTest._Benchmark.benchmark_toIterator

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 338761.810 ops/s
# Warmup Iteration   2: 1640319.008 ops/s
# Warmup Iteration   3: 2755830.895 ops/s
# Warmup Iteration   4: 2317677.823 ops/s
# Warmup Iteration   5: 2811456.253 ops/s
# Warmup Iteration   6: 2779763.897 ops/s
# Warmup Iteration   7: 2913108.013 ops/s
# Warmup Iteration   8: 2747373.477 ops/s
# Warmup Iteration   9: 2818973.046 ops/s
# Warmup Iteration  10: 2783984.477 ops/s
# Warmup Iteration  11: 2768985.715 ops/s
# Warmup Iteration  12: 2890372.218 ops/s
# Warmup Iteration  13: 2737898.013 ops/s
# Warmup Iteration  14: 2868875.833 ops/s
# Warmup Iteration  15: 2914446.602 ops/s
# Warmup Iteration  16: 2714370.974 ops/s
# Warmup Iteration  17: 2850258.271 ops/s
# Warmup Iteration  18: 2639225.835 ops/s
# Warmup Iteration  19: 2636013.146 ops/s
# Warmup Iteration  20: 2207191.255 ops/s
# Warmup Iteration  21: 2678291.540 ops/s
# Warmup Iteration  22: 2770012.704 ops/s
# Warmup Iteration  23: 2810301.017 ops/s
# Warmup Iteration  24: 2730582.855 ops/s
# Warmup Iteration  25: 2822274.623 ops/s
# Warmup Iteration  26: 2693145.491 ops/s
# Warmup Iteration  27: 2826661.035 ops/s
# Warmup Iteration  28: 2783789.535 ops/s
# Warmup Iteration  29: 2801377.730 ops/s
# Warmup Iteration  30: 2929886.258 ops/s
Iteration   1: 2758616.024 ops/s
Iteration   2: 2865804.626 ops/s
Iteration   3: 2876760.515 ops/s
Iteration   4: 2694549.421 ops/s
Iteration   5: 2857156.068 ops/s
Iteration   6: 2765147.334 ops/s
Iteration   7: 2803092.537 ops/s
Iteration   8: 2862908.916 ops/s
Iteration   9: 2673390.671 ops/s
Iteration  10: 2821430.467 ops/s
Iteration  11: 2832264.795 ops/s
Iteration  12: 2699982.307 ops/s
Iteration  13: 2823498.656 ops/s
Iteration  14: 2889756.269 ops/s
Iteration  15: 2821039.519 ops/s
Iteration  16: 2768075.070 ops/s
Iteration  17: 2729764.762 ops/s
Iteration  18: 2770054.843 ops/s
Iteration  19: 2774306.376 ops/s
Iteration  20: 2683923.924 ops/s
Iteration  21: 2844367.814 ops/s
Iteration  22: 2821502.101 ops/s
Iteration  23: 2740384.293 ops/s
Iteration  24: 2796673.278 ops/s
Iteration  25: 2762450.188 ops/s
Iteration  26: 2750812.274 ops/s
Iteration  27: 2794435.583 ops/s
Iteration  28: 2696659.689 ops/s
Iteration  29: 2910514.382 ops/s
Iteration  30: 2697340.253 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableToIteratorTest._Benchmark.benchmark_toIterator":
  2786222.098 ±(99.9%) 44154.767 ops/s [Average]
  (min, avg, max) = (2673390.671, 2786222.098, 2910514.382), stdev = 66088.781
  CI (99.9%): [2742067.332, 2830376.865] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
BlockingFlowableToIteratorTest._Benchmark.benchmark_toIterator  thrpt   30  2786222.098 ± 44154.767  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableStartWithTests._Benchmark.benchmark_startWithObservable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableStartWithTests._Benchmark.benchmark_startWithObservable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 162390.011 ops/s
# Warmup Iteration   2: 1402151.833 ops/s
# Warmup Iteration   3: 1985459.834 ops/s
# Warmup Iteration   4: 2451231.370 ops/s
# Warmup Iteration   5: 2515581.120 ops/s
# Warmup Iteration   6: 2534812.165 ops/s
# Warmup Iteration   7: 2548036.103 ops/s
# Warmup Iteration   8: 2562508.513 ops/s
# Warmup Iteration   9: 2547696.539 ops/s
# Warmup Iteration  10: 2483453.578 ops/s
# Warmup Iteration  11: 2598463.777 ops/s
# Warmup Iteration  12: 2481808.352 ops/s
# Warmup Iteration  13: 2490309.229 ops/s
# Warmup Iteration  14: 2568213.791 ops/s
# Warmup Iteration  15: 2535493.975 ops/s
# Warmup Iteration  16: 2618399.433 ops/s
# Warmup Iteration  17: 2548277.074 ops/s
# Warmup Iteration  18: 2570258.500 ops/s
# Warmup Iteration  19: 2510954.190 ops/s
# Warmup Iteration  20: 2601397.548 ops/s
# Warmup Iteration  21: 2701428.369 ops/s
# Warmup Iteration  22: 2550794.535 ops/s
# Warmup Iteration  23: 2505048.590 ops/s
# Warmup Iteration  24: 2500478.124 ops/s
# Warmup Iteration  25: 2582027.409 ops/s
# Warmup Iteration  26: 2489469.522 ops/s
# Warmup Iteration  27: 2598188.062 ops/s
# Warmup Iteration  28: 2551160.468 ops/s
# Warmup Iteration  29: 2545192.141 ops/s
# Warmup Iteration  30: 2618210.832 ops/s
Iteration   1: 2480082.146 ops/s
Iteration   2: 2664810.800 ops/s
Iteration   3: 2584612.505 ops/s
Iteration   4: 2450726.943 ops/s
Iteration   5: 2595319.691 ops/s
Iteration   6: 2576992.178 ops/s
Iteration   7: 2496557.965 ops/s
Iteration   8: 2609267.637 ops/s
Iteration   9: 2504326.194 ops/s
Iteration  10: 2550896.021 ops/s
Iteration  11: 2573654.206 ops/s
Iteration  12: 2493128.221 ops/s
Iteration  13: 2655541.513 ops/s
Iteration  14: 2575369.656 ops/s
Iteration  15: 2611778.664 ops/s
Iteration  16: 2474150.084 ops/s
Iteration  17: 2630947.359 ops/s
Iteration  18: 2572464.998 ops/s
Iteration  19: 2431704.896 ops/s
Iteration  20: 2625874.759 ops/s
Iteration  21: 2599125.683 ops/s
Iteration  22: 2520365.230 ops/s
Iteration  23: 2587559.118 ops/s
Iteration  24: 2479075.102 ops/s
Iteration  25: 2578447.283 ops/s
Iteration  26: 2576346.412 ops/s
Iteration  27: 2533375.592 ops/s
Iteration  28: 2549548.743 ops/s
Iteration  29: 2449823.674 ops/s
Iteration  30: 2555419.525 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableStartWithTests._Benchmark.benchmark_startWithObservable":
  2552909.760 ±(99.9%) 41822.880 ops/s [Average]
  (min, avg, max) = (2431704.896, 2552909.760, 2664810.800), stdev = 62598.523
  CI (99.9%): [2511086.880, 2594732.640] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
FlowableStartWithTests._Benchmark.benchmark_startWithObservable  thrpt   30  2552909.760 ± 41822.880  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterableTest._Benchmark.benchmark_fusedPoll$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterableTest._Benchmark.benchmark_fusedPoll

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3230441.188 ops/s
# Warmup Iteration   2: 7576359.254 ops/s
# Warmup Iteration   3: 10368755.479 ops/s
# Warmup Iteration   4: 10087590.825 ops/s
# Warmup Iteration   5: 10651650.625 ops/s
# Warmup Iteration   6: 10493630.853 ops/s
# Warmup Iteration   7: 10143602.133 ops/s
# Warmup Iteration   8: 10115560.036 ops/s
# Warmup Iteration   9: 10672969.446 ops/s
# Warmup Iteration  10: 10056416.755 ops/s
# Warmup Iteration  11: 9908918.021 ops/s
# Warmup Iteration  12: 10200474.552 ops/s
# Warmup Iteration  13: 10408198.156 ops/s
# Warmup Iteration  14: 9039030.137 ops/s
# Warmup Iteration  15: 9538098.124 ops/s
# Warmup Iteration  16: 9993688.032 ops/s
# Warmup Iteration  17: 10305935.298 ops/s
# Warmup Iteration  18: 10021367.731 ops/s
# Warmup Iteration  19: 10285775.107 ops/s
# Warmup Iteration  20: 10450858.029 ops/s
# Warmup Iteration  21: 10447810.470 ops/s
# Warmup Iteration  22: 10367883.861 ops/s
# Warmup Iteration  23: 10215360.744 ops/s
# Warmup Iteration  24: 10210335.177 ops/s
# Warmup Iteration  25: 10522563.811 ops/s
# Warmup Iteration  26: 9909111.480 ops/s
# Warmup Iteration  27: 10139120.642 ops/s
# Warmup Iteration  28: 10509641.200 ops/s
# Warmup Iteration  29: 9954682.920 ops/s
# Warmup Iteration  30: 10388757.184 ops/s
Iteration   1: 10582142.263 ops/s
Iteration   2: 10122120.393 ops/s
Iteration   3: 10452960.732 ops/s
Iteration   4: 10217846.023 ops/s
Iteration   5: 10244539.158 ops/s
Iteration   6: 10558856.375 ops/s
Iteration   7: 10061697.542 ops/s
Iteration   8: 10780570.101 ops/s
Iteration   9: 9878962.837 ops/s
Iteration  10: 10388374.649 ops/s
Iteration  11: 10677093.704 ops/s
Iteration  12: 10238428.516 ops/s
Iteration  13: 10598584.181 ops/s
Iteration  14: 10002149.456 ops/s
Iteration  15: 10051240.379 ops/s
Iteration  16: 10753156.272 ops/s
Iteration  17: 10096208.692 ops/s
Iteration  18: 10547221.544 ops/s
Iteration  19: 10026694.617 ops/s
Iteration  20: 10636131.729 ops/s
Iteration  21: 9886732.259 ops/s
Iteration  22: 10227388.574 ops/s
Iteration  23: 10272800.372 ops/s
Iteration  24: 10249099.534 ops/s
Iteration  25: 10568720.237 ops/s
Iteration  26: 10685086.939 ops/s
Iteration  27: 10175371.018 ops/s
Iteration  28: 10452621.964 ops/s
Iteration  29: 10543411.549 ops/s
Iteration  30: 10067043.872 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterableTest._Benchmark.benchmark_fusedPoll":
  10334775.183 ±(99.9%) 179001.644 ops/s [Average]
  (min, avg, max) = (9878962.837, 10334775.183, 10780570.101), stdev = 267921.255
  CI (99.9%): [10155773.538, 10513776.827] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt         Score        Error  Units
FlowableFromIterableTest._Benchmark.benchmark_fusedPoll  thrpt   30  10334775.183 ± 179001.644  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_badRequest$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_badRequest

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 82054.900 ops/s
# Warmup Iteration   2: 231940.976 ops/s
# Warmup Iteration   3: 446230.962 ops/s
# Warmup Iteration   4: 447769.448 ops/s
# Warmup Iteration   5: 447882.581 ops/s
# Warmup Iteration   6: 458796.985 ops/s
# Warmup Iteration   7: 434087.120 ops/s
# Warmup Iteration   8: 434885.641 ops/s
# Warmup Iteration   9: 425647.315 ops/s
# Warmup Iteration  10: 455170.481 ops/s
# Warmup Iteration  11: 434324.383 ops/s
# Warmup Iteration  12: 444586.407 ops/s
# Warmup Iteration  13: 473311.968 ops/s
# Warmup Iteration  14: 446462.815 ops/s
# Warmup Iteration  15: 453458.103 ops/s
# Warmup Iteration  16: 447289.279 ops/s
# Warmup Iteration  17: 468672.290 ops/s
# Warmup Iteration  18: 489274.551 ops/s
# Warmup Iteration  19: 475846.659 ops/s
# Warmup Iteration  20: 480668.909 ops/s
# Warmup Iteration  21: 470318.504 ops/s
# Warmup Iteration  22: 475829.622 ops/s
# Warmup Iteration  23: 483032.746 ops/s
# Warmup Iteration  24: 470929.396 ops/s
# Warmup Iteration  25: 473439.266 ops/s
# Warmup Iteration  26: 483311.217 ops/s
# Warmup Iteration  27: 476502.241 ops/s
# Warmup Iteration  28: 474511.190 ops/s
# Warmup Iteration  29: 468858.416 ops/s
# Warmup Iteration  30: 490076.607 ops/s
Iteration   1: 474367.241 ops/s
Iteration   2: 459992.002 ops/s
Iteration   3: 484139.950 ops/s
Iteration   4: 473139.667 ops/s
Iteration   5: 483719.128 ops/s
Iteration   6: 469033.882 ops/s
Iteration   7: 482614.264 ops/s
Iteration   8: 480398.431 ops/s
Iteration   9: 466549.581 ops/s
Iteration  10: 498047.136 ops/s
Iteration  11: 452686.194 ops/s
Iteration  12: 485527.846 ops/s
Iteration  13: 475938.049 ops/s
Iteration  14: 480023.512 ops/s
Iteration  15: 485096.670 ops/s
Iteration  16: 472157.194 ops/s
Iteration  17: 488624.692 ops/s
Iteration  18: 459541.274 ops/s
Iteration  19: 482656.220 ops/s
Iteration  20: 490838.404 ops/s
Iteration  21: 464814.433 ops/s
Iteration  22: 485991.215 ops/s
Iteration  23: 467238.781 ops/s
Iteration  24: 496149.307 ops/s
Iteration  25: 493257.992 ops/s
Iteration  26: 463902.804 ops/s
Iteration  27: 470004.132 ops/s
Iteration  28: 499630.673 ops/s
Iteration  29: 457154.236 ops/s
Iteration  30: 497556.383 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_badRequest":
  478026.376 ±(99.9%) 8742.542 ops/s [Average]
  (min, avg, max) = (452686.194, 478026.376, 499630.673), stdev = 13085.426
  CI (99.9%): [469283.835, 486768.918] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score      Error  Units
FlowableFlatMapTest._Benchmark.benchmark_badRequest  thrpt   30  478026.376 ± 8742.542  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchIfEmptyTest._Benchmark.benchmark_switchWhenEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchIfEmptyTest._Benchmark.benchmark_switchWhenEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 767676.189 ops/s
# Warmup Iteration   2: 3332937.921 ops/s
# Warmup Iteration   3: 3569387.777 ops/s
# Warmup Iteration   4: 4014205.967 ops/s
# Warmup Iteration   5: 4180020.833 ops/s
# Warmup Iteration   6: 4109659.653 ops/s
# Warmup Iteration   7: 4097783.483 ops/s
# Warmup Iteration   8: 4252518.255 ops/s
# Warmup Iteration   9: 3362405.249 ops/s
# Warmup Iteration  10: 4180362.870 ops/s
# Warmup Iteration  11: 4224252.124 ops/s
# Warmup Iteration  12: 4010196.364 ops/s
# Warmup Iteration  13: 4185758.461 ops/s
# Warmup Iteration  14: 4055404.037 ops/s
# Warmup Iteration  15: 4151909.687 ops/s
# Warmup Iteration  16: 3999241.540 ops/s
# Warmup Iteration  17: 4088687.728 ops/s
# Warmup Iteration  18: 4062232.014 ops/s
# Warmup Iteration  19: 4220505.727 ops/s
# Warmup Iteration  20: 4150450.802 ops/s
# Warmup Iteration  21: 4126433.430 ops/s
# Warmup Iteration  22: 4253107.088 ops/s
# Warmup Iteration  23: 4042675.634 ops/s
# Warmup Iteration  24: 4121902.388 ops/s
# Warmup Iteration  25: 4059259.389 ops/s
# Warmup Iteration  26: 3938152.637 ops/s
# Warmup Iteration  27: 4230888.586 ops/s
# Warmup Iteration  28: 4127830.972 ops/s
# Warmup Iteration  29: 4070004.858 ops/s
# Warmup Iteration  30: 4220974.914 ops/s
Iteration   1: 4064508.650 ops/s
Iteration   2: 4309688.269 ops/s
Iteration   3: 3938916.386 ops/s
Iteration   4: 4252029.056 ops/s
Iteration   5: 4244292.695 ops/s
Iteration   6: 4065306.578 ops/s
Iteration   7: 4102786.690 ops/s
Iteration   8: 4094626.316 ops/s
Iteration   9: 4138112.168 ops/s
Iteration  10: 4229918.956 ops/s
Iteration  11: 3928015.241 ops/s
Iteration  12: 4152717.679 ops/s
Iteration  13: 4037762.000 ops/s
Iteration  14: 4041413.630 ops/s
Iteration  15: 4164929.120 ops/s
Iteration  16: 3968438.597 ops/s
Iteration  17: 4279285.529 ops/s
Iteration  18: 4162697.611 ops/s
Iteration  19: 3918138.347 ops/s
Iteration  20: 4181404.843 ops/s
Iteration  21: 4102118.283 ops/s
Iteration  22: 4264646.651 ops/s
Iteration  23: 4104859.867 ops/s
Iteration  24: 4054538.759 ops/s
Iteration  25: 4191937.017 ops/s
Iteration  26: 4118363.020 ops/s
Iteration  27: 4133425.495 ops/s
Iteration  28: 4160922.954 ops/s
Iteration  29: 4238607.042 ops/s
Iteration  30: 4046069.069 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchIfEmptyTest._Benchmark.benchmark_switchWhenEmpty":
  4123015.884 ±(99.9%) 70258.167 ops/s [Average]
  (min, avg, max) = (3918138.347, 4123015.884, 4309688.269), stdev = 105159.124
  CI (99.9%): [4052757.717, 4193274.051] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
FlowableSwitchIfEmptyTest._Benchmark.benchmark_switchWhenEmpty  thrpt   30  4123015.884 ± 70258.167  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterableTest._Benchmark.benchmark_fusionClear$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterableTest._Benchmark.benchmark_fusionClear

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 4314450.195 ops/s
# Warmup Iteration   2: 9314344.927 ops/s
# Warmup Iteration   3: 13348571.129 ops/s
# Warmup Iteration   4: 12949760.446 ops/s
# Warmup Iteration   5: 13357871.268 ops/s
# Warmup Iteration   6: 13101932.438 ops/s
# Warmup Iteration   7: 12942259.234 ops/s
# Warmup Iteration   8: 13244795.985 ops/s
# Warmup Iteration   9: 12764944.876 ops/s
# Warmup Iteration  10: 12603678.288 ops/s
# Warmup Iteration  11: 13024954.582 ops/s
# Warmup Iteration  12: 13288106.995 ops/s
# Warmup Iteration  13: 13262651.227 ops/s
# Warmup Iteration  14: 13661642.004 ops/s
# Warmup Iteration  15: 12544766.607 ops/s
# Warmup Iteration  16: 13315785.286 ops/s
# Warmup Iteration  17: 12906453.280 ops/s
# Warmup Iteration  18: 13227120.693 ops/s
# Warmup Iteration  19: 13094583.140 ops/s
# Warmup Iteration  20: 13105422.244 ops/s
# Warmup Iteration  21: 13678916.969 ops/s
# Warmup Iteration  22: 12808140.934 ops/s
# Warmup Iteration  23: 13572295.949 ops/s
# Warmup Iteration  24: 13453443.133 ops/s
# Warmup Iteration  25: 12450870.820 ops/s
# Warmup Iteration  26: 13611262.340 ops/s
# Warmup Iteration  27: 12782899.259 ops/s
# Warmup Iteration  28: 13027131.847 ops/s
# Warmup Iteration  29: 13315620.464 ops/s
# Warmup Iteration  30: 12721412.157 ops/s
Iteration   1: 13356072.582 ops/s
Iteration   2: 12764190.039 ops/s
Iteration   3: 13453287.532 ops/s
Iteration   4: 13107917.891 ops/s
Iteration   5: 12973432.734 ops/s
Iteration   6: 13414247.292 ops/s
Iteration   7: 12804044.302 ops/s
Iteration   8: 13098752.719 ops/s
Iteration   9: 12926562.156 ops/s
Iteration  10: 13474751.304 ops/s
Iteration  11: 13159044.209 ops/s
Iteration  12: 12645289.810 ops/s
Iteration  13: 13160612.146 ops/s
Iteration  14: 12647890.543 ops/s
Iteration  15: 12757652.854 ops/s
Iteration  16: 13288097.501 ops/s
Iteration  17: 12561436.279 ops/s
Iteration  18: 13492025.673 ops/s
Iteration  19: 12878149.481 ops/s
Iteration  20: 13102640.540 ops/s
Iteration  21: 13340166.389 ops/s
Iteration  22: 12845578.442 ops/s
Iteration  23: 13381814.894 ops/s
Iteration  24: 13415070.070 ops/s
Iteration  25: 12520563.890 ops/s
Iteration  26: 13684288.383 ops/s
Iteration  27: 13668672.147 ops/s
Iteration  28: 13142883.489 ops/s
Iteration  29: 12643943.629 ops/s
Iteration  30: 13697258.818 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterableTest._Benchmark.benchmark_fusionClear":
  13113544.591 ±(99.9%) 235483.631 ops/s [Average]
  (min, avg, max) = (12520563.890, 13113544.591, 13697258.818), stdev = 352460.840
  CI (99.9%): [12878060.960, 13349028.222] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score        Error  Units
FlowableFromIterableTest._Benchmark.benchmark_fusionClear  thrpt   30  13113544.591 ± 235483.631  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_timeskipOverlapping$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_timeskipOverlapping

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 12466.709 ops/s
# Warmup Iteration   2: 39384.687 ops/s
# Warmup Iteration   3: 57943.682 ops/s
# Warmup Iteration   4: 85846.904 ops/s
# Warmup Iteration   5: 161578.664 ops/s
# Warmup Iteration   6: 157471.983 ops/s
# Warmup Iteration   7: 149349.690 ops/s
# Warmup Iteration   8: 160536.307 ops/s
# Warmup Iteration   9: 162610.408 ops/s
# Warmup Iteration  10: 169569.123 ops/s
# Warmup Iteration  11: 163736.449 ops/s
# Warmup Iteration  12: 168158.016 ops/s
# Warmup Iteration  13: 169614.201 ops/s
# Warmup Iteration  14: 168464.326 ops/s
# Warmup Iteration  15: 171081.734 ops/s
# Warmup Iteration  16: 166858.734 ops/s
# Warmup Iteration  17: 173608.877 ops/s
# Warmup Iteration  18: 172788.721 ops/s
# Warmup Iteration  19: 168024.885 ops/s
# Warmup Iteration  20: 171054.614 ops/s
# Warmup Iteration  21: 164770.859 ops/s
# Warmup Iteration  22: 166624.279 ops/s
# Warmup Iteration  23: 174475.980 ops/s
# Warmup Iteration  24: 160558.237 ops/s
# Warmup Iteration  25: 173931.633 ops/s
# Warmup Iteration  26: 167581.660 ops/s
# Warmup Iteration  27: 172770.394 ops/s
# Warmup Iteration  28: 162334.923 ops/s
# Warmup Iteration  29: 174713.232 ops/s
# Warmup Iteration  30: 169564.680 ops/s
Iteration   1: 168068.191 ops/s
Iteration   2: 168251.693 ops/s
Iteration   3: 166506.361 ops/s
Iteration   4: 169151.179 ops/s
Iteration   5: 170833.708 ops/s
Iteration   6: 167372.043 ops/s
Iteration   7: 168685.785 ops/s
Iteration   8: 170500.739 ops/s
Iteration   9: 172665.926 ops/s
Iteration  10: 166810.876 ops/s
Iteration  11: 167109.855 ops/s
Iteration  12: 169918.065 ops/s
Iteration  13: 165136.303 ops/s
Iteration  14: 171211.950 ops/s
Iteration  15: 168978.121 ops/s
Iteration  16: 167610.081 ops/s
Iteration  17: 164768.173 ops/s
Iteration  18: 171640.992 ops/s
Iteration  19: 169433.246 ops/s
Iteration  20: 170568.079 ops/s
Iteration  21: 168161.618 ops/s
Iteration  22: 167886.333 ops/s
Iteration  23: 168023.340 ops/s
Iteration  24: 174580.746 ops/s
Iteration  25: 162242.571 ops/s
Iteration  26: 171276.887 ops/s
Iteration  27: 166136.488 ops/s
Iteration  28: 173293.408 ops/s
Iteration  29: 164041.478 ops/s
Iteration  30: 176513.990 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_timeskipOverlapping":
  168912.608 ±(99.9%) 2077.133 ops/s [Average]
  (min, avg, max) = (162242.571, 168912.608, 176513.990), stdev = 3108.955
  CI (99.9%): [166835.474, 170989.741] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score      Error  Units
FlowableWindowWithTimeTest._Benchmark.benchmark_timeskipOverlapping  thrpt   30  168912.608 ± 2077.133  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithFlowableTest._Benchmark.benchmark_cancellingWindowCancelsUpstream$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithFlowableTest._Benchmark.benchmark_cancellingWindowCancelsUpstream

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 26083.565 ops/s
# Warmup Iteration   2: 111595.338 ops/s
# Warmup Iteration   3: 239237.749 ops/s
# Warmup Iteration   4: 377641.352 ops/s
# Warmup Iteration   5: 628736.893 ops/s
# Warmup Iteration   6: 677759.469 ops/s
# Warmup Iteration   7: 729902.903 ops/s
# Warmup Iteration   8: 725457.640 ops/s
# Warmup Iteration   9: 705959.702 ops/s
# Warmup Iteration  10: 728034.082 ops/s
# Warmup Iteration  11: 727440.051 ops/s
# Warmup Iteration  12: 718267.774 ops/s
# Warmup Iteration  13: 709697.953 ops/s
# Warmup Iteration  14: 726612.838 ops/s
# Warmup Iteration  15: 749994.000 ops/s
# Warmup Iteration  16: 718305.119 ops/s
# Warmup Iteration  17: 721141.250 ops/s
# Warmup Iteration  18: 763049.610 ops/s
# Warmup Iteration  19: 736241.528 ops/s
# Warmup Iteration  20: 739150.640 ops/s
# Warmup Iteration  21: 717811.585 ops/s
# Warmup Iteration  22: 739783.242 ops/s
# Warmup Iteration  23: 726618.143 ops/s
# Warmup Iteration  24: 719286.486 ops/s
# Warmup Iteration  25: 758360.504 ops/s
# Warmup Iteration  26: 728142.056 ops/s
# Warmup Iteration  27: 760782.705 ops/s
# Warmup Iteration  28: 731463.097 ops/s
# Warmup Iteration  29: 735632.513 ops/s
# Warmup Iteration  30: 760808.862 ops/s
Iteration   1: 719306.302 ops/s
Iteration   2: 766708.236 ops/s
Iteration   3: 703873.150 ops/s
Iteration   4: 748114.934 ops/s
Iteration   5: 741406.114 ops/s
Iteration   6: 718040.386 ops/s
Iteration   7: 761386.945 ops/s
Iteration   8: 761996.049 ops/s
Iteration   9: 717720.947 ops/s
Iteration  10: 762524.057 ops/s
Iteration  11: 717797.583 ops/s
Iteration  12: 738060.331 ops/s
Iteration  13: 744687.622 ops/s
Iteration  14: 727102.643 ops/s
Iteration  15: 699302.604 ops/s
Iteration  16: 728095.268 ops/s
Iteration  17: 750847.003 ops/s
Iteration  18: 704430.506 ops/s
Iteration  19: 732437.703 ops/s
Iteration  20: 754885.723 ops/s
Iteration  21: 722845.768 ops/s
Iteration  22: 754472.667 ops/s
Iteration  23: 702691.553 ops/s
Iteration  24: 756985.807 ops/s
Iteration  25: 732405.309 ops/s
Iteration  26: 715612.186 ops/s
Iteration  27: 740904.586 ops/s
Iteration  28: 727104.945 ops/s
Iteration  29: 739666.795 ops/s
Iteration  30: 760268.963 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithFlowableTest._Benchmark.benchmark_cancellingWindowCancelsUpstream":
  735056.090 ±(99.9%) 13458.504 ops/s [Average]
  (min, avg, max) = (699302.604, 735056.090, 766708.236), stdev = 20144.057
  CI (99.9%): [721597.585, 748514.594] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             Mode  Cnt       Score       Error  Units
FlowableWindowWithFlowableTest._Benchmark.benchmark_cancellingWindowCancelsUpstream  thrpt   30  735056.090 ± 13458.504  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithStartEndFlowableTest._Benchmark.benchmark_reentrant$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithStartEndFlowableTest._Benchmark.benchmark_reentrant

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 11430.170 ops/s
# Warmup Iteration   2: 73195.964 ops/s
# Warmup Iteration   3: 169381.084 ops/s
# Warmup Iteration   4: 217682.592 ops/s
# Warmup Iteration   5: 418488.491 ops/s
# Warmup Iteration   6: 518948.070 ops/s
# Warmup Iteration   7: 507640.975 ops/s
# Warmup Iteration   8: 518602.422 ops/s
# Warmup Iteration   9: 517544.743 ops/s
# Warmup Iteration  10: 510219.509 ops/s
# Warmup Iteration  11: 518424.669 ops/s
# Warmup Iteration  12: 511828.169 ops/s
# Warmup Iteration  13: 541265.781 ops/s
# Warmup Iteration  14: 506270.697 ops/s
# Warmup Iteration  15: 515202.389 ops/s
# Warmup Iteration  16: 499543.755 ops/s
# Warmup Iteration  17: 515454.141 ops/s
# Warmup Iteration  18: 499852.677 ops/s
# Warmup Iteration  19: 510459.728 ops/s
# Warmup Iteration  20: 513454.548 ops/s
# Warmup Iteration  21: 517084.982 ops/s
# Warmup Iteration  22: 539723.568 ops/s
# Warmup Iteration  23: 540597.559 ops/s
# Warmup Iteration  24: 518225.399 ops/s
# Warmup Iteration  25: 500914.120 ops/s
# Warmup Iteration  26: 543596.480 ops/s
# Warmup Iteration  27: 516309.807 ops/s
# Warmup Iteration  28: 505326.323 ops/s
# Warmup Iteration  29: 527686.889 ops/s
# Warmup Iteration  30: 508027.584 ops/s
Iteration   1: 517724.226 ops/s
Iteration   2: 511409.708 ops/s
Iteration   3: 528464.079 ops/s
Iteration   4: 486844.459 ops/s
Iteration   5: 519170.404 ops/s
Iteration   6: 521708.873 ops/s
Iteration   7: 518528.982 ops/s
Iteration   8: 534089.514 ops/s
Iteration   9: 508223.504 ops/s
Iteration  10: 545172.510 ops/s
Iteration  11: 501653.283 ops/s
Iteration  12: 518972.193 ops/s
Iteration  13: 506750.704 ops/s
Iteration  14: 532105.113 ops/s
Iteration  15: 501316.398 ops/s
Iteration  16: 504711.218 ops/s
Iteration  17: 519600.270 ops/s
Iteration  18: 513948.763 ops/s
Iteration  19: 526641.607 ops/s
Iteration  20: 507563.548 ops/s
Iteration  21: 518718.584 ops/s
Iteration  22: 512920.043 ops/s
Iteration  23: 521398.697 ops/s
Iteration  24: 535296.442 ops/s
Iteration  25: 504654.726 ops/s
Iteration  26: 522982.605 ops/s
Iteration  27: 497614.168 ops/s
Iteration  28: 526505.398 ops/s
Iteration  29: 504032.009 ops/s
Iteration  30: 513764.776 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithStartEndFlowableTest._Benchmark.benchmark_reentrant":
  516082.893 ±(99.9%) 8427.060 ops/s [Average]
  (min, avg, max) = (486844.459, 516082.893, 545172.510), stdev = 12613.227
  CI (99.9%): [507655.834, 524509.953] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score      Error  Units
FlowableWindowWithStartEndFlowableTest._Benchmark.benchmark_reentrant  thrpt   30  516082.893 ± 8427.060  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_cancellingWindowCancelsUpstreamExactTimeAndSize$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_cancellingWindowCancelsUpstreamExactTimeAndSize

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 4273.836 ops/s
# Warmup Iteration   2: 27992.395 ops/s
# Warmup Iteration   3: 34384.948 ops/s
# Warmup Iteration   4: 43272.153 ops/s
# Warmup Iteration   5: 71461.927 ops/s
# Warmup Iteration   6: 80977.408 ops/s
# Warmup Iteration   7: 72456.192 ops/s
# Warmup Iteration   8: 111328.099 ops/s
# Warmup Iteration   9: 114163.324 ops/s
# Warmup Iteration  10: 124806.809 ops/s
# Warmup Iteration  11: 107409.676 ops/s
# Warmup Iteration  12: 109116.068 ops/s
# Warmup Iteration  13: 112852.475 ops/s
# Warmup Iteration  14: 120925.143 ops/s
# Warmup Iteration  15: 109714.473 ops/s
# Warmup Iteration  16: 121807.648 ops/s
# Warmup Iteration  17: 104734.967 ops/s
# Warmup Iteration  18: 118067.720 ops/s
# Warmup Iteration  19: 122808.110 ops/s
# Warmup Iteration  20: 122154.903 ops/s
# Warmup Iteration  21: 119911.229 ops/s
# Warmup Iteration  22: 117761.292 ops/s
# Warmup Iteration  23: 136580.278 ops/s
# Warmup Iteration  24: 123255.501 ops/s
# Warmup Iteration  25: 114537.023 ops/s
# Warmup Iteration  26: 126240.142 ops/s
# Warmup Iteration  27: 125435.002 ops/s
# Warmup Iteration  28: 111698.680 ops/s
# Warmup Iteration  29: 113102.643 ops/s
# Warmup Iteration  30: 106500.072 ops/s
Iteration   1: 132628.223 ops/s
Iteration   2: 121995.292 ops/s
Iteration   3: 99348.807 ops/s
Iteration   4: 131691.372 ops/s
Iteration   5: 110575.499 ops/s
Iteration   6: 111882.341 ops/s
Iteration   7: 126294.668 ops/s
Iteration   8: 123135.123 ops/s
Iteration   9: 111295.391 ops/s
Iteration  10: 118117.734 ops/s
Iteration  11: 119293.760 ops/s
Iteration  12: 115037.684 ops/s
Iteration  13: 122432.881 ops/s
Iteration  14: 106500.988 ops/s
Iteration  15: 127057.406 ops/s
Iteration  16: 105515.947 ops/s
Iteration  17: 102172.631 ops/s
Iteration  18: 119323.080 ops/s
Iteration  19: 117416.508 ops/s
Iteration  20: 118257.960 ops/s
Iteration  21: 130868.470 ops/s
Iteration  22: 114673.417 ops/s
Iteration  23: 101110.111 ops/s
Iteration  24: 116878.470 ops/s
Iteration  25: 109998.093 ops/s
Iteration  26: 111234.944 ops/s
Iteration  27: 118834.912 ops/s
Iteration  28: 118079.563 ops/s
Iteration  29: 102739.777 ops/s
Iteration  30: 116918.727 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_cancellingWindowCancelsUpstreamExactTimeAndSize":
  116043.659 ±(99.9%) 6006.289 ops/s [Average]
  (min, avg, max) = (99348.807, 116043.659, 132628.223), stdev = 8989.931
  CI (99.9%): [110037.370, 122049.948] (assumes normal distribution)


# Run complete. Total time: 00:01:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                         Mode  Cnt       Score      Error  Units
FlowableWindowWithTimeTest._Benchmark.benchmark_cancellingWindowCancelsUpstreamExactTimeAndSize  thrpt   30  116043.659 ± 6006.289  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterableTest._Benchmark.benchmark_fusedAPICalls$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterableTest._Benchmark.benchmark_fusedAPICalls

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 195712.679 ops/s
# Warmup Iteration   2: 446073.208 ops/s
# Warmup Iteration   3: 486342.488 ops/s
# Warmup Iteration   4: 437667.330 ops/s
# Warmup Iteration   5: 490024.968 ops/s
# Warmup Iteration   6: 433235.011 ops/s
# Warmup Iteration   7: 492608.452 ops/s
# Warmup Iteration   8: 491798.752 ops/s
# Warmup Iteration   9: 517504.397 ops/s
# Warmup Iteration  10: 493077.881 ops/s
# Warmup Iteration  11: 510402.677 ops/s
# Warmup Iteration  12: 496911.386 ops/s
# Warmup Iteration  13: 503168.695 ops/s
# Warmup Iteration  14: 508391.240 ops/s
# Warmup Iteration  15: 493259.503 ops/s
# Warmup Iteration  16: 513125.327 ops/s
# Warmup Iteration  17: 506812.288 ops/s
# Warmup Iteration  18: 543408.027 ops/s
# Warmup Iteration  19: 538344.409 ops/s
# Warmup Iteration  20: 499722.107 ops/s
# Warmup Iteration  21: 545290.545 ops/s
# Warmup Iteration  22: 520080.207 ops/s
# Warmup Iteration  23: 519679.155 ops/s
# Warmup Iteration  24: 516621.588 ops/s
# Warmup Iteration  25: 533235.937 ops/s
# Warmup Iteration  26: 527307.715 ops/s
# Warmup Iteration  27: 525539.816 ops/s
# Warmup Iteration  28: 519175.896 ops/s
# Warmup Iteration  29: 523792.704 ops/s
# Warmup Iteration  30: 555146.254 ops/s
Iteration   1: 540957.501 ops/s
Iteration   2: 517530.832 ops/s
Iteration   3: 533793.528 ops/s
Iteration   4: 500065.751 ops/s
Iteration   5: 537892.567 ops/s
Iteration   6: 527027.913 ops/s
Iteration   7: 526662.339 ops/s
Iteration   8: 528788.732 ops/s
Iteration   9: 517511.375 ops/s
Iteration  10: 545536.153 ops/s
Iteration  11: 529391.299 ops/s
Iteration  12: 509799.504 ops/s
Iteration  13: 539466.454 ops/s
Iteration  14: 530365.451 ops/s
Iteration  15: 510330.582 ops/s
Iteration  16: 519991.470 ops/s
Iteration  17: 518019.222 ops/s
Iteration  18: 530271.555 ops/s
Iteration  19: 531359.353 ops/s
Iteration  20: 514803.824 ops/s
Iteration  21: 543415.201 ops/s
Iteration  22: 530134.924 ops/s
Iteration  23: 512709.764 ops/s
Iteration  24: 528831.024 ops/s
Iteration  25: 524283.514 ops/s
Iteration  26: 536669.462 ops/s
Iteration  27: 503637.343 ops/s
Iteration  28: 519958.527 ops/s
Iteration  29: 537486.394 ops/s
Iteration  30: 524668.009 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterableTest._Benchmark.benchmark_fusedAPICalls":
  525711.986 ±(99.9%) 7762.608 ops/s [Average]
  (min, avg, max) = (500065.751, 525711.986, 545536.153), stdev = 11618.707
  CI (99.9%): [517949.377, 533474.594] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
FlowableFromIterableTest._Benchmark.benchmark_fusedAPICalls  thrpt   30  525711.986 ± 7762.608  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_secondJustError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_secondJustError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 74848.581 ops/s
# Warmup Iteration   2: 343234.549 ops/s
# Warmup Iteration   3: 481222.645 ops/s
# Warmup Iteration   4: 437745.357 ops/s
# Warmup Iteration   5: 535496.248 ops/s
# Warmup Iteration   6: 520364.314 ops/s
# Warmup Iteration   7: 500368.481 ops/s
# Warmup Iteration   8: 533550.225 ops/s
# Warmup Iteration   9: 503670.037 ops/s
# Warmup Iteration  10: 541022.089 ops/s
# Warmup Iteration  11: 537099.458 ops/s
# Warmup Iteration  12: 537449.647 ops/s
# Warmup Iteration  13: 506630.271 ops/s
# Warmup Iteration  14: 537398.544 ops/s
# Warmup Iteration  15: 512234.947 ops/s
# Warmup Iteration  16: 533856.122 ops/s
# Warmup Iteration  17: 525059.622 ops/s
# Warmup Iteration  18: 562499.682 ops/s
# Warmup Iteration  19: 529956.688 ops/s
# Warmup Iteration  20: 545917.261 ops/s
# Warmup Iteration  21: 555400.740 ops/s
# Warmup Iteration  22: 529503.204 ops/s
# Warmup Iteration  23: 554067.093 ops/s
# Warmup Iteration  24: 518900.713 ops/s
# Warmup Iteration  25: 515550.033 ops/s
# Warmup Iteration  26: 569431.504 ops/s
# Warmup Iteration  27: 528092.620 ops/s
# Warmup Iteration  28: 530110.046 ops/s
# Warmup Iteration  29: 548028.545 ops/s
# Warmup Iteration  30: 539312.353 ops/s
Iteration   1: 549440.855 ops/s
Iteration   2: 529686.166 ops/s
Iteration   3: 531517.780 ops/s
Iteration   4: 552924.938 ops/s
Iteration   5: 518003.693 ops/s
Iteration   6: 559375.018 ops/s
Iteration   7: 568419.373 ops/s
Iteration   8: 530330.170 ops/s
Iteration   9: 546659.964 ops/s
Iteration  10: 538088.602 ops/s
Iteration  11: 560873.270 ops/s
Iteration  12: 526346.844 ops/s
Iteration  13: 534167.818 ops/s
Iteration  14: 556011.966 ops/s
Iteration  15: 546881.825 ops/s
Iteration  16: 528321.251 ops/s
Iteration  17: 541584.851 ops/s
Iteration  18: 454801.793 ops/s
Iteration  19: 535782.603 ops/s
Iteration  20: 538727.859 ops/s
Iteration  21: 558807.799 ops/s
Iteration  22: 557237.064 ops/s
Iteration  23: 528575.256 ops/s
Iteration  24: 550770.260 ops/s
Iteration  25: 532943.321 ops/s
Iteration  26: 548953.094 ops/s
Iteration  27: 553286.081 ops/s
Iteration  28: 535405.229 ops/s
Iteration  29: 549835.336 ops/s
Iteration  30: 539341.885 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_secondJustError":
  540103.399 ±(99.9%) 13557.589 ops/s [Average]
  (min, avg, max) = (454801.793, 540103.399, 568419.373), stdev = 20292.363
  CI (99.9%): [526545.810, 553660.988] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score       Error  Units
FlowableCombineLatestTest._Benchmark.benchmark_secondJustError  thrpt   30  540103.399 ± 13557.589  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.util.AtomicThrowableTest._Benchmark.benchmark_tryTerminateConsumerSubscriberNoError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.util.AtomicThrowableTest._Benchmark.benchmark_tryTerminateConsumerSubscriberNoError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3072374.690 ops/s
# Warmup Iteration   2: 6187122.286 ops/s
# Warmup Iteration   3: 8654847.920 ops/s
# Warmup Iteration   4: 8205988.213 ops/s
# Warmup Iteration   5: 8735347.900 ops/s
# Warmup Iteration   6: 8400677.929 ops/s
# Warmup Iteration   7: 8563561.638 ops/s
# Warmup Iteration   8: 8759077.778 ops/s
# Warmup Iteration   9: 8580420.105 ops/s
# Warmup Iteration  10: 8394360.496 ops/s
# Warmup Iteration  11: 8759377.827 ops/s
# Warmup Iteration  12: 8159898.235 ops/s
# Warmup Iteration  13: 8609861.465 ops/s
# Warmup Iteration  14: 8469936.023 ops/s
# Warmup Iteration  15: 8738337.418 ops/s
# Warmup Iteration  16: 8712968.030 ops/s
# Warmup Iteration  17: 8379322.288 ops/s
# Warmup Iteration  18: 8841668.119 ops/s
# Warmup Iteration  19: 8235240.305 ops/s
# Warmup Iteration  20: 8471157.984 ops/s
# Warmup Iteration  21: 8789800.015 ops/s
# Warmup Iteration  22: 8349713.837 ops/s
# Warmup Iteration  23: 8868717.513 ops/s
# Warmup Iteration  24: 8393863.625 ops/s
# Warmup Iteration  25: 8271973.929 ops/s
# Warmup Iteration  26: 8658574.811 ops/s
# Warmup Iteration  27: 8355383.690 ops/s
# Warmup Iteration  28: 8559735.321 ops/s
# Warmup Iteration  29: 8650578.886 ops/s
# Warmup Iteration  30: 8429776.429 ops/s
Iteration   1: 8759489.070 ops/s
Iteration   2: 8321845.245 ops/s
Iteration   3: 8602082.209 ops/s
Iteration   4: 8851816.340 ops/s
Iteration   5: 8178286.389 ops/s
Iteration   6: 8741610.006 ops/s
Iteration   7: 8323953.144 ops/s
Iteration   8: 8529673.234 ops/s
Iteration   9: 8817225.559 ops/s
Iteration  10: 8280271.963 ops/s
Iteration  11: 8639741.092 ops/s
Iteration  12: 8440083.223 ops/s
Iteration  13: 8893826.678 ops/s
Iteration  14: 8638431.612 ops/s
Iteration  15: 8566996.402 ops/s
Iteration  16: 8201422.782 ops/s
Iteration  17: 8853396.289 ops/s
Iteration  18: 8324179.339 ops/s
Iteration  19: 8565641.555 ops/s
Iteration  20: 8259727.534 ops/s
Iteration  21: 8704657.794 ops/s
Iteration  22: 8480716.643 ops/s
Iteration  23: 8367195.856 ops/s
Iteration  24: 8472224.930 ops/s
Iteration  25: 8206588.852 ops/s
Iteration  26: 8740789.873 ops/s
Iteration  27: 8168498.858 ops/s
Iteration  28: 8682195.441 ops/s
Iteration  29: 8266880.984 ops/s
Iteration  30: 8674154.530 ops/s


Result "io.reactivex.rxjava3.internal.util.AtomicThrowableTest._Benchmark.benchmark_tryTerminateConsumerSubscriberNoError":
  8518453.448 ±(99.9%) 152306.191 ops/s [Average]
  (min, avg, max) = (8168498.858, 8518453.448, 8893826.678), stdev = 227964.754
  CI (99.9%): [8366147.256, 8670759.639] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt        Score        Error  Units
AtomicThrowableTest._Benchmark.benchmark_tryTerminateConsumerSubscriberNoError  thrpt   30  8518453.448 ± 152306.191  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_errorDelayed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_errorDelayed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 86593.820 ops/s
# Warmup Iteration   2: 349725.256 ops/s
# Warmup Iteration   3: 447474.177 ops/s
# Warmup Iteration   4: 450922.430 ops/s
# Warmup Iteration   5: 507077.269 ops/s
# Warmup Iteration   6: 500600.830 ops/s
# Warmup Iteration   7: 537010.881 ops/s
# Warmup Iteration   8: 491363.575 ops/s
# Warmup Iteration   9: 527014.864 ops/s
# Warmup Iteration  10: 513289.772 ops/s
# Warmup Iteration  11: 505218.847 ops/s
# Warmup Iteration  12: 524513.053 ops/s
# Warmup Iteration  13: 502434.884 ops/s
# Warmup Iteration  14: 517168.129 ops/s
# Warmup Iteration  15: 504912.462 ops/s
# Warmup Iteration  16: 526545.928 ops/s
# Warmup Iteration  17: 518318.731 ops/s
# Warmup Iteration  18: 513907.959 ops/s
# Warmup Iteration  19: 528228.534 ops/s
# Warmup Iteration  20: 512389.032 ops/s
# Warmup Iteration  21: 543414.245 ops/s
# Warmup Iteration  22: 527379.854 ops/s
# Warmup Iteration  23: 543239.357 ops/s
# Warmup Iteration  24: 538235.495 ops/s
# Warmup Iteration  25: 521530.769 ops/s
# Warmup Iteration  26: 539185.249 ops/s
# Warmup Iteration  27: 530743.827 ops/s
# Warmup Iteration  28: 551836.141 ops/s
# Warmup Iteration  29: 531233.846 ops/s
# Warmup Iteration  30: 538663.669 ops/s
Iteration   1: 546738.054 ops/s
Iteration   2: 530141.121 ops/s
Iteration   3: 549610.505 ops/s
Iteration   4: 515442.448 ops/s
Iteration   5: 535731.794 ops/s
Iteration   6: 544697.422 ops/s
Iteration   7: 530138.333 ops/s
Iteration   8: 547629.420 ops/s
Iteration   9: 531238.918 ops/s
Iteration  10: 534258.626 ops/s
Iteration  11: 534146.630 ops/s
Iteration  12: 535085.180 ops/s
Iteration  13: 454811.351 ops/s
Iteration  14: 520639.899 ops/s
Iteration  15: 521217.619 ops/s
Iteration  16: 547766.028 ops/s
Iteration  17: 528141.559 ops/s
Iteration  18: 526538.161 ops/s
Iteration  19: 542812.267 ops/s
Iteration  20: 520729.550 ops/s
Iteration  21: 544320.514 ops/s
Iteration  22: 530454.543 ops/s
Iteration  23: 530649.596 ops/s
Iteration  24: 558016.754 ops/s
Iteration  25: 519244.467 ops/s
Iteration  26: 553446.160 ops/s
Iteration  27: 511693.369 ops/s
Iteration  28: 523710.878 ops/s
Iteration  29: 538941.664 ops/s
Iteration  30: 537449.565 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_errorDelayed":
  531514.746 ±(99.9%) 12403.861 ops/s [Average]
  (min, avg, max) = (454811.351, 531514.746, 558016.754), stdev = 18565.517
  CI (99.9%): [519110.885, 543918.607] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score       Error  Units
FlowableCombineLatestTest._Benchmark.benchmark_errorDelayed  thrpt   30  531514.746 ± 12403.861  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_generateConsumerStateNullAllowed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_generateConsumerStateNullAllowed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1759987.716 ops/s
# Warmup Iteration   2: 6312588.711 ops/s
# Warmup Iteration   3: 6941721.191 ops/s
# Warmup Iteration   4: 7927787.414 ops/s
# Warmup Iteration   5: 8094985.705 ops/s
# Warmup Iteration   6: 7904199.582 ops/s
# Warmup Iteration   7: 8342144.580 ops/s
# Warmup Iteration   8: 8156705.502 ops/s
# Warmup Iteration   9: 7939394.886 ops/s
# Warmup Iteration  10: 8118644.691 ops/s
# Warmup Iteration  11: 8051241.545 ops/s
# Warmup Iteration  12: 7915510.101 ops/s
# Warmup Iteration  13: 8255358.721 ops/s
# Warmup Iteration  14: 8039469.065 ops/s
# Warmup Iteration  15: 8267612.170 ops/s
# Warmup Iteration  16: 7895511.589 ops/s
# Warmup Iteration  17: 7750699.592 ops/s
# Warmup Iteration  18: 7561139.186 ops/s
# Warmup Iteration  19: 7487838.101 ops/s
# Warmup Iteration  20: 7729621.496 ops/s
# Warmup Iteration  21: 7591517.598 ops/s
# Warmup Iteration  22: 7873319.392 ops/s
# Warmup Iteration  23: 7804996.906 ops/s
# Warmup Iteration  24: 7617841.195 ops/s
# Warmup Iteration  25: 7635340.196 ops/s
# Warmup Iteration  26: 7531751.277 ops/s
# Warmup Iteration  27: 7923679.227 ops/s
# Warmup Iteration  28: 7419238.179 ops/s
# Warmup Iteration  29: 7672228.372 ops/s
# Warmup Iteration  30: 7582196.652 ops/s
Iteration   1: 7708709.714 ops/s
Iteration   2: 7952280.488 ops/s
Iteration   3: 7669000.653 ops/s
Iteration   4: 7754927.821 ops/s
Iteration   5: 7462228.136 ops/s
Iteration   6: 7418906.446 ops/s
Iteration   7: 7943015.133 ops/s
Iteration   8: 7384901.232 ops/s
Iteration   9: 8047709.225 ops/s
Iteration  10: 7526867.610 ops/s
Iteration  11: 7888806.030 ops/s
Iteration  12: 7513646.125 ops/s
Iteration  13: 7776164.517 ops/s
Iteration  14: 7697007.705 ops/s
Iteration  15: 7477776.368 ops/s
Iteration  16: 7857412.666 ops/s
Iteration  17: 7570490.899 ops/s
Iteration  18: 8083835.641 ops/s
Iteration  19: 7403385.779 ops/s
Iteration  20: 7721044.536 ops/s
Iteration  21: 7871128.491 ops/s
Iteration  22: 7558496.904 ops/s
Iteration  23: 7824044.523 ops/s
Iteration  24: 7469850.415 ops/s
Iteration  25: 7624047.267 ops/s
Iteration  26: 7972834.785 ops/s
Iteration  27: 7416339.261 ops/s
Iteration  28: 7778905.840 ops/s
Iteration  29: 7524239.814 ops/s
Iteration  30: 7692830.293 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_generateConsumerStateNullAllowed":
  7686361.144 ±(99.9%) 137330.140 ops/s [Average]
  (min, avg, max) = (7384901.232, 7686361.144, 8083835.641), stdev = 205549.304
  CI (99.9%): [7549031.004, 7823691.284] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score        Error  Units
FlowableNullTests._Benchmark.benchmark_generateConsumerStateNullAllowed  thrpt   30  7686361.144 ± 137330.140  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingleTest._Benchmark.benchmark_disposeOnNextAfterFirst$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingleTest._Benchmark.benchmark_disposeOnNextAfterFirst

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 367856.494 ops/s
# Warmup Iteration   2: 2495047.844 ops/s
# Warmup Iteration   3: 3339303.650 ops/s
# Warmup Iteration   4: 3286570.652 ops/s
# Warmup Iteration   5: 3532954.626 ops/s
# Warmup Iteration   6: 3425617.484 ops/s
# Warmup Iteration   7: 3369290.463 ops/s
# Warmup Iteration   8: 3427978.513 ops/s
# Warmup Iteration   9: 2974131.739 ops/s
# Warmup Iteration  10: 3466450.723 ops/s
# Warmup Iteration  11: 3279272.465 ops/s
# Warmup Iteration  12: 3445949.125 ops/s
# Warmup Iteration  13: 3294871.687 ops/s
# Warmup Iteration  14: 3301286.167 ops/s
# Warmup Iteration  15: 3457275.452 ops/s
# Warmup Iteration  16: 3353352.396 ops/s
# Warmup Iteration  17: 3477189.793 ops/s
# Warmup Iteration  18: 3388174.597 ops/s
# Warmup Iteration  19: 3389423.103 ops/s
# Warmup Iteration  20: 3478562.640 ops/s
# Warmup Iteration  21: 3249760.003 ops/s
# Warmup Iteration  22: 3385792.137 ops/s
# Warmup Iteration  23: 3446328.503 ops/s
# Warmup Iteration  24: 3331341.713 ops/s
# Warmup Iteration  25: 3452199.203 ops/s
# Warmup Iteration  26: 3386660.633 ops/s
# Warmup Iteration  27: 3430384.826 ops/s
# Warmup Iteration  28: 3459140.298 ops/s
# Warmup Iteration  29: 3353169.413 ops/s
# Warmup Iteration  30: 3545087.956 ops/s
Iteration   1: 3365433.288 ops/s
Iteration   2: 3348577.749 ops/s
Iteration   3: 3533178.410 ops/s
Iteration   4: 3474897.733 ops/s
Iteration   5: 3367049.966 ops/s
Iteration   6: 3368191.984 ops/s
Iteration   7: 3532491.706 ops/s
Iteration   8: 2734010.912 ops/s
Iteration   9: 3501195.269 ops/s
Iteration  10: 3537682.779 ops/s
Iteration  11: 3316423.890 ops/s
Iteration  12: 3477331.206 ops/s
Iteration  13: 3301818.714 ops/s
Iteration  14: 3375961.263 ops/s
Iteration  15: 3488926.579 ops/s
Iteration  16: 3405107.257 ops/s
Iteration  17: 3395118.009 ops/s
Iteration  18: 3449098.948 ops/s
Iteration  19: 3468729.599 ops/s
Iteration  20: 3429011.983 ops/s
Iteration  21: 3376884.427 ops/s
Iteration  22: 3377470.179 ops/s
Iteration  23: 3321009.848 ops/s
Iteration  24: 3370157.189 ops/s
Iteration  25: 3392334.347 ops/s
Iteration  26: 3443997.794 ops/s
Iteration  27: 3432007.629 ops/s
Iteration  28: 3224260.383 ops/s
Iteration  29: 3596407.280 ops/s
Iteration  30: 3356357.928 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingleTest._Benchmark.benchmark_disposeOnNextAfterFirst":
  3392037.475 ±(99.9%) 99201.605 ops/s [Average]
  (min, avg, max) = (2734010.912, 3392037.475, 3596407.280), stdev = 148480.303
  CI (99.9%): [3292835.870, 3491239.080] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score       Error  Units
ObservableSwitchMapSingleTest._Benchmark.benchmark_disposeOnNextAfterFirst  thrpt   30  3392037.475 ± 99201.605  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingleTest._Benchmark.benchmark_simple$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingleTest._Benchmark.benchmark_simple

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 264203.246 ops/s
# Warmup Iteration   2: 1184519.416 ops/s
# Warmup Iteration   3: 1320545.424 ops/s
# Warmup Iteration   4: 1248832.327 ops/s
# Warmup Iteration   5: 1522414.563 ops/s
# Warmup Iteration   6: 1448963.225 ops/s
# Warmup Iteration   7: 1495959.786 ops/s
# Warmup Iteration   8: 1484760.942 ops/s
# Warmup Iteration   9: 1461669.594 ops/s
# Warmup Iteration  10: 1516434.834 ops/s
# Warmup Iteration  11: 1442540.093 ops/s
# Warmup Iteration  12: 1523745.808 ops/s
# Warmup Iteration  13: 1565048.444 ops/s
# Warmup Iteration  14: 1449109.549 ops/s
# Warmup Iteration  15: 1521567.109 ops/s
# Warmup Iteration  16: 1501428.479 ops/s
# Warmup Iteration  17: 1434864.771 ops/s
# Warmup Iteration  18: 1511211.730 ops/s
# Warmup Iteration  19: 1462156.483 ops/s
# Warmup Iteration  20: 1551957.122 ops/s
# Warmup Iteration  21: 1520900.848 ops/s
# Warmup Iteration  22: 1515313.209 ops/s
# Warmup Iteration  23: 1533383.857 ops/s
# Warmup Iteration  24: 1483758.056 ops/s
# Warmup Iteration  25: 1439052.483 ops/s
# Warmup Iteration  26: 1526570.461 ops/s
# Warmup Iteration  27: 1427159.062 ops/s
# Warmup Iteration  28: 1507378.323 ops/s
# Warmup Iteration  29: 1528709.542 ops/s
# Warmup Iteration  30: 1446838.616 ops/s
Iteration   1: 1515328.320 ops/s
Iteration   2: 1497452.630 ops/s
Iteration   3: 1538263.089 ops/s
Iteration   4: 1471924.883 ops/s
Iteration   5: 1521238.984 ops/s
Iteration   6: 1494761.000 ops/s
Iteration   7: 1506225.779 ops/s
Iteration   8: 1520154.931 ops/s
Iteration   9: 1447862.985 ops/s
Iteration  10: 1541426.697 ops/s
Iteration  11: 1501513.610 ops/s
Iteration  12: 1497627.138 ops/s
Iteration  13: 1519224.367 ops/s
Iteration  14: 1464196.418 ops/s
Iteration  15: 1491390.989 ops/s
Iteration  16: 1538055.452 ops/s
Iteration  17: 1421834.228 ops/s
Iteration  18: 1482715.574 ops/s
Iteration  19: 1463840.972 ops/s
Iteration  20: 1540463.712 ops/s
Iteration  21: 1525554.502 ops/s
Iteration  22: 1443612.582 ops/s
Iteration  23: 1546814.013 ops/s
Iteration  24: 1441539.966 ops/s
Iteration  25: 1486501.200 ops/s
Iteration  26: 1471240.532 ops/s
Iteration  27: 1484593.216 ops/s
Iteration  28: 1509144.344 ops/s
Iteration  29: 1460667.562 ops/s
Iteration  30: 1558173.196 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingleTest._Benchmark.benchmark_simple":
  1496778.096 ±(99.9%) 23467.265 ops/s [Average]
  (min, avg, max) = (1421834.228, 1496778.096, 1558173.196), stdev = 35124.701
  CI (99.9%): [1473310.830, 1520245.361] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
ObservableSwitchMapSingleTest._Benchmark.benchmark_simple  thrpt   30  1496778.096 ± 23467.265  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingleTest._Benchmark.benchmark_drainReentrant$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingleTest._Benchmark.benchmark_drainReentrant

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 451724.052 ops/s
# Warmup Iteration   2: 1372591.617 ops/s
# Warmup Iteration   3: 1754646.523 ops/s
# Warmup Iteration   4: 2065610.262 ops/s
# Warmup Iteration   5: 2143124.188 ops/s
# Warmup Iteration   6: 2144386.339 ops/s
# Warmup Iteration   7: 2226970.856 ops/s
# Warmup Iteration   8: 2219655.482 ops/s
# Warmup Iteration   9: 2216237.645 ops/s
# Warmup Iteration  10: 2206410.183 ops/s
# Warmup Iteration  11: 2116276.772 ops/s
# Warmup Iteration  12: 2221367.597 ops/s
# Warmup Iteration  13: 2241424.337 ops/s
# Warmup Iteration  14: 2075775.811 ops/s
# Warmup Iteration  15: 2229827.367 ops/s
# Warmup Iteration  16: 2099317.234 ops/s
# Warmup Iteration  17: 2255621.668 ops/s
# Warmup Iteration  18: 2179408.681 ops/s
# Warmup Iteration  19: 2246414.240 ops/s
# Warmup Iteration  20: 2212549.116 ops/s
# Warmup Iteration  21: 2193429.046 ops/s
# Warmup Iteration  22: 2283660.125 ops/s
# Warmup Iteration  23: 2164272.500 ops/s
# Warmup Iteration  24: 2207315.774 ops/s
# Warmup Iteration  25: 2224942.354 ops/s
# Warmup Iteration  26: 2248872.960 ops/s
# Warmup Iteration  27: 2197972.511 ops/s
# Warmup Iteration  28: 2173011.896 ops/s
# Warmup Iteration  29: 2215123.257 ops/s
# Warmup Iteration  30: 2266106.100 ops/s
Iteration   1: 2167888.479 ops/s
Iteration   2: 2317702.267 ops/s
Iteration   3: 1783372.458 ops/s
Iteration   4: 2204118.364 ops/s
Iteration   5: 2256586.311 ops/s
Iteration   6: 2204876.918 ops/s
Iteration   7: 2256985.961 ops/s
Iteration   8: 2200498.415 ops/s
Iteration   9: 2245143.263 ops/s
Iteration  10: 2178455.746 ops/s
Iteration  11: 2221399.135 ops/s
Iteration  12: 2177363.976 ops/s
Iteration  13: 2170157.559 ops/s
Iteration  14: 2198705.213 ops/s
Iteration  15: 2240236.703 ops/s
Iteration  16: 2235231.380 ops/s
Iteration  17: 2241399.131 ops/s
Iteration  18: 2243404.491 ops/s
Iteration  19: 2178328.947 ops/s
Iteration  20: 2238196.204 ops/s
Iteration  21: 2236312.010 ops/s
Iteration  22: 2185838.003 ops/s
Iteration  23: 2235744.441 ops/s
Iteration  24: 2151189.094 ops/s
Iteration  25: 2253505.071 ops/s
Iteration  26: 2168041.497 ops/s
Iteration  27: 2249744.484 ops/s
Iteration  28: 2147089.779 ops/s
Iteration  29: 2230182.150 ops/s
Iteration  30: 2257172.254 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingleTest._Benchmark.benchmark_drainReentrant":
  2202495.657 ±(99.9%) 58984.660 ops/s [Average]
  (min, avg, max) = (1783372.458, 2202495.657, 2317702.267), stdev = 88285.469
  CI (99.9%): [2143510.997, 2261480.317] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
ObservableSwitchMapSingleTest._Benchmark.benchmark_drainReentrant  thrpt   30  2202495.657 ± 58984.660  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingleTest._Benchmark.benchmark_take$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingleTest._Benchmark.benchmark_take

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 461118.924 ops/s
# Warmup Iteration   2: 1640351.306 ops/s
# Warmup Iteration   3: 1921585.958 ops/s
# Warmup Iteration   4: 2164415.633 ops/s
# Warmup Iteration   5: 2332261.979 ops/s
# Warmup Iteration   6: 2137555.832 ops/s
# Warmup Iteration   7: 2298610.626 ops/s
# Warmup Iteration   8: 2164688.571 ops/s
# Warmup Iteration   9: 2112946.128 ops/s
# Warmup Iteration  10: 2354818.515 ops/s
# Warmup Iteration  11: 2114805.940 ops/s
# Warmup Iteration  12: 2207272.179 ops/s
# Warmup Iteration  13: 2198790.794 ops/s
# Warmup Iteration  14: 2209463.550 ops/s
# Warmup Iteration  15: 2300863.708 ops/s
# Warmup Iteration  16: 2234278.774 ops/s
# Warmup Iteration  17: 2121041.179 ops/s
# Warmup Iteration  18: 2189399.718 ops/s
# Warmup Iteration  19: 2286860.621 ops/s
# Warmup Iteration  20: 2210440.256 ops/s
# Warmup Iteration  21: 2300450.942 ops/s
# Warmup Iteration  22: 2093432.795 ops/s
# Warmup Iteration  23: 2256175.962 ops/s
# Warmup Iteration  24: 2123662.825 ops/s
# Warmup Iteration  25: 2235024.909 ops/s
# Warmup Iteration  26: 2334333.147 ops/s
# Warmup Iteration  27: 2168817.693 ops/s
# Warmup Iteration  28: 2267456.506 ops/s
# Warmup Iteration  29: 2129377.269 ops/s
# Warmup Iteration  30: 2150564.478 ops/s
Iteration   1: 2296891.219 ops/s
Iteration   2: 2324452.028 ops/s
Iteration   3: 2220607.060 ops/s
Iteration   4: 2284830.843 ops/s
Iteration   5: 2180373.436 ops/s
Iteration   6: 2138681.428 ops/s
Iteration   7: 2293499.909 ops/s
Iteration   8: 2157796.926 ops/s
Iteration   9: 2280317.365 ops/s
Iteration  10: 2128905.846 ops/s
Iteration  11: 2262068.481 ops/s
Iteration  12: 2217249.521 ops/s
Iteration  13: 2347033.051 ops/s
Iteration  14: 2097146.955 ops/s
Iteration  15: 2225739.051 ops/s
Iteration  16: 2174988.975 ops/s
Iteration  17: 2267037.333 ops/s
Iteration  18: 2300100.403 ops/s
Iteration  19: 2200053.715 ops/s
Iteration  20: 2318273.293 ops/s
Iteration  21: 2236467.092 ops/s
Iteration  22: 2185641.039 ops/s
Iteration  23: 2246646.009 ops/s
Iteration  24: 2168357.032 ops/s
Iteration  25: 2236805.483 ops/s
Iteration  26: 2199430.481 ops/s
Iteration  27: 2196739.419 ops/s
Iteration  28: 2236627.061 ops/s
Iteration  29: 2143035.557 ops/s
Iteration  30: 2226204.434 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingleTest._Benchmark.benchmark_take":
  2226400.015 ±(99.9%) 42118.753 ops/s [Average]
  (min, avg, max) = (2097146.955, 2226400.015, 2347033.051), stdev = 63041.371
  CI (99.9%): [2184281.262, 2268518.768] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
ObservableSwitchMapSingleTest._Benchmark.benchmark_take  thrpt   30  2226400.015 ± 42118.753  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchTest._Benchmark.benchmark_switchMapSingleDelayErrorJustSource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchTest._Benchmark.benchmark_switchMapSingleDelayErrorJustSource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.768 ops/s
# Warmup Iteration   2: 24837.452 ops/s
# Warmup Iteration   3: 79864.184 ops/s
# Warmup Iteration   4: 120039.294 ops/s
# Warmup Iteration   5: 156062.571 ops/s
# Warmup Iteration   6: 269327.758 ops/s
# Warmup Iteration   7: 288873.152 ops/s
# Warmup Iteration   8: 281172.469 ops/s
# Warmup Iteration   9: 320711.143 ops/s
# Warmup Iteration  10: 326316.286 ops/s
# Warmup Iteration  11: 311101.964 ops/s
# Warmup Iteration  12: 326551.986 ops/s
# Warmup Iteration  13: 313832.118 ops/s
# Warmup Iteration  14: 318289.130 ops/s
# Warmup Iteration  15: 326259.808 ops/s
# Warmup Iteration  16: 312698.589 ops/s
# Warmup Iteration  17: 317026.046 ops/s
# Warmup Iteration  18: 326502.509 ops/s
# Warmup Iteration  19: 305817.973 ops/s
# Warmup Iteration  20: 318729.033 ops/s
# Warmup Iteration  21: 311293.900 ops/s
# Warmup Iteration  22: 316825.927 ops/s
# Warmup Iteration  23: 314143.803 ops/s
# Warmup Iteration  24: 317418.742 ops/s
# Warmup Iteration  25: 329462.178 ops/s
# Warmup Iteration  26: 317703.382 ops/s
# Warmup Iteration  27: 326090.253 ops/s
# Warmup Iteration  28: 258773.929 ops/s
# Warmup Iteration  29: 312381.440 ops/s
# Warmup Iteration  30: 323020.136 ops/s
Iteration   1: 309478.103 ops/s
Iteration   2: 316591.355 ops/s
Iteration   3: 327901.056 ops/s
Iteration   4: 314854.173 ops/s
Iteration   5: 319870.464 ops/s
Iteration   6: 307896.503 ops/s
Iteration   7: 330114.808 ops/s
Iteration   8: 311732.900 ops/s
Iteration   9: 313130.359 ops/s
Iteration  10: 321445.535 ops/s
Iteration  11: 315210.301 ops/s
Iteration  12: 331352.715 ops/s
Iteration  13: 313732.024 ops/s
Iteration  14: 323926.929 ops/s
Iteration  15: 328198.823 ops/s
Iteration  16: 330093.626 ops/s
Iteration  17: 309777.732 ops/s
Iteration  18: 334035.318 ops/s
Iteration  19: 324827.387 ops/s
Iteration  20: 317395.779 ops/s
Iteration  21: 322549.825 ops/s
Iteration  22: 318604.497 ops/s
Iteration  23: 324402.175 ops/s
Iteration  24: 320723.196 ops/s
Iteration  25: 314744.562 ops/s
Iteration  26: 323586.915 ops/s
Iteration  27: 306251.360 ops/s
Iteration  28: 327439.624 ops/s
Iteration  29: 325167.414 ops/s
Iteration  30: 315736.116 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchTest._Benchmark.benchmark_switchMapSingleDelayErrorJustSource":
  320025.719 ±(99.9%) 5028.802 ops/s [Average]
  (min, avg, max) = (306251.360, 320025.719, 334035.318), stdev = 7526.875
  CI (99.9%): [314996.917, 325054.522] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt       Score      Error  Units
ObservableSwitchTest._Benchmark.benchmark_switchMapSingleDelayErrorJustSource  thrpt   30  320025.719 ± 5028.802  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingleTest._Benchmark.benchmark_disposeBeforeSwitchInOnNext$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingleTest._Benchmark.benchmark_disposeBeforeSwitchInOnNext

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1274173.331 ops/s
# Warmup Iteration   2: 3450287.646 ops/s
# Warmup Iteration   3: 3910889.298 ops/s
# Warmup Iteration   4: 4558400.134 ops/s
# Warmup Iteration   5: 4721815.878 ops/s
# Warmup Iteration   6: 4773426.045 ops/s
# Warmup Iteration   7: 4550445.465 ops/s
# Warmup Iteration   8: 4608504.251 ops/s
# Warmup Iteration   9: 4596938.346 ops/s
# Warmup Iteration  10: 4604964.213 ops/s
# Warmup Iteration  11: 4564947.301 ops/s
# Warmup Iteration  12: 4470343.797 ops/s
# Warmup Iteration  13: 4655372.627 ops/s
# Warmup Iteration  14: 4711071.442 ops/s
# Warmup Iteration  15: 4633265.613 ops/s
# Warmup Iteration  16: 4695819.722 ops/s
# Warmup Iteration  17: 4250165.009 ops/s
# Warmup Iteration  18: 4294306.221 ops/s
# Warmup Iteration  19: 4262162.139 ops/s
# Warmup Iteration  20: 4176561.694 ops/s
# Warmup Iteration  21: 4365827.823 ops/s
# Warmup Iteration  22: 4219586.151 ops/s
# Warmup Iteration  23: 4307757.935 ops/s
# Warmup Iteration  24: 4170241.501 ops/s
# Warmup Iteration  25: 4197460.407 ops/s
# Warmup Iteration  26: 4352211.217 ops/s
# Warmup Iteration  27: 4072731.370 ops/s
# Warmup Iteration  28: 4474711.954 ops/s
# Warmup Iteration  29: 4342430.712 ops/s
# Warmup Iteration  30: 4095506.862 ops/s
Iteration   1: 4261448.879 ops/s
Iteration   2: 4156239.870 ops/s
Iteration   3: 4282475.348 ops/s
Iteration   4: 3989068.086 ops/s
Iteration   5: 4239724.974 ops/s
Iteration   6: 4369827.005 ops/s
Iteration   7: 4174044.286 ops/s
Iteration   8: 4382384.388 ops/s
Iteration   9: 4160795.088 ops/s
Iteration  10: 4208887.886 ops/s
Iteration  11: 4317546.541 ops/s
Iteration  12: 4166782.581 ops/s
Iteration  13: 4308376.578 ops/s
Iteration  14: 4347734.067 ops/s
Iteration  15: 4156985.245 ops/s
Iteration  16: 4225353.016 ops/s
Iteration  17: 4417623.404 ops/s
Iteration  18: 4122148.625 ops/s
Iteration  19: 4323893.869 ops/s
Iteration  20: 4076194.015 ops/s
Iteration  21: 4387053.861 ops/s
Iteration  22: 4159540.062 ops/s
Iteration  23: 4269329.001 ops/s
Iteration  24: 4355379.543 ops/s
Iteration  25: 4196417.212 ops/s
Iteration  26: 4229783.578 ops/s
Iteration  27: 4302736.259 ops/s
Iteration  28: 4133303.398 ops/s
Iteration  29: 4343557.578 ops/s
Iteration  30: 4231000.065 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingleTest._Benchmark.benchmark_disposeBeforeSwitchInOnNext":
  4243187.810 ±(99.9%) 68532.435 ops/s [Average]
  (min, avg, max) = (3989068.086, 4243187.810, 4417623.404), stdev = 102576.131
  CI (99.9%): [4174655.375, 4311720.246] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt        Score       Error  Units
ObservableSwitchMapSingleTest._Benchmark.benchmark_disposeBeforeSwitchInOnNext  thrpt   30  4243187.810 ± 68532.435  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchTest._Benchmark.benchmark_switchMapSingleJustSource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchTest._Benchmark.benchmark_switchMapSingleJustSource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.735 ops/s
# Warmup Iteration   2: 68668.104 ops/s
# Warmup Iteration   3: 170626.257 ops/s
# Warmup Iteration   4: 265828.838 ops/s
# Warmup Iteration   5: 276730.033 ops/s
# Warmup Iteration   6: 139243.869 ops/s
# Warmup Iteration   7: 468939.401 ops/s
# Warmup Iteration   8: 932842.962 ops/s
# Warmup Iteration   9: 974599.502 ops/s
# Warmup Iteration  10: 989541.547 ops/s
# Warmup Iteration  11: 974283.626 ops/s
# Warmup Iteration  12: 933022.751 ops/s
# Warmup Iteration  13: 935022.633 ops/s
# Warmup Iteration  14: 965350.607 ops/s
# Warmup Iteration  15: 948223.142 ops/s
# Warmup Iteration  16: 969991.452 ops/s
# Warmup Iteration  17: 908679.609 ops/s
# Warmup Iteration  18: 960331.334 ops/s
# Warmup Iteration  19: 968560.311 ops/s
# Warmup Iteration  20: 923085.061 ops/s
# Warmup Iteration  21: 937761.370 ops/s
# Warmup Iteration  22: 786695.916 ops/s
# Warmup Iteration  23: 938035.038 ops/s
# Warmup Iteration  24: 940296.062 ops/s
# Warmup Iteration  25: 913371.989 ops/s
# Warmup Iteration  26: 974347.289 ops/s
# Warmup Iteration  27: 931945.774 ops/s
# Warmup Iteration  28: 952093.101 ops/s
# Warmup Iteration  29: 980245.219 ops/s
# Warmup Iteration  30: 934920.422 ops/s
Iteration   1: 942827.248 ops/s
Iteration   2: 958862.908 ops/s
Iteration   3: 936013.699 ops/s
Iteration   4: 982988.026 ops/s
Iteration   5: 980284.154 ops/s
Iteration   6: 997282.525 ops/s
Iteration   7: 924258.992 ops/s
Iteration   8: 979522.955 ops/s
Iteration   9: 944303.523 ops/s
Iteration  10: 963203.163 ops/s
Iteration  11: 938474.746 ops/s
Iteration  12: 959261.788 ops/s
Iteration  13: 948346.984 ops/s
Iteration  14: 939022.824 ops/s
Iteration  15: 970790.713 ops/s
Iteration  16: 988708.167 ops/s
Iteration  17: 924427.834 ops/s
Iteration  18: 953898.552 ops/s
Iteration  19: 981745.590 ops/s
Iteration  20: 967880.887 ops/s
Iteration  21: 919230.370 ops/s
Iteration  22: 1004328.220 ops/s
Iteration  23: 916355.788 ops/s
Iteration  24: 952520.825 ops/s
Iteration  25: 951519.532 ops/s
Iteration  26: 942240.557 ops/s
Iteration  27: 984546.029 ops/s
Iteration  28: 912882.111 ops/s
Iteration  29: 941270.250 ops/s
Iteration  30: 933727.964 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchTest._Benchmark.benchmark_switchMapSingleJustSource":
  954690.898 ±(99.9%) 16611.702 ops/s [Average]
  (min, avg, max) = (912882.111, 954690.898, 1004328.220), stdev = 24863.616
  CI (99.9%): [938079.195, 971302.600] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score       Error  Units
ObservableSwitchTest._Benchmark.benchmark_switchMapSingleJustSource  thrpt   30  954690.898 ± 16611.702  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleStartWithTest._Benchmark.benchmark_justObservableEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleStartWithTest._Benchmark.benchmark_justObservableEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 293127.016 ops/s
# Warmup Iteration   2: 1989438.011 ops/s
# Warmup Iteration   3: 2439822.766 ops/s
# Warmup Iteration   4: 2470023.577 ops/s
# Warmup Iteration   5: 2460482.378 ops/s
# Warmup Iteration   6: 2424982.378 ops/s
# Warmup Iteration   7: 2530361.626 ops/s
# Warmup Iteration   8: 2429277.691 ops/s
# Warmup Iteration   9: 2525552.913 ops/s
# Warmup Iteration  10: 2354570.396 ops/s
# Warmup Iteration  11: 2377584.924 ops/s
# Warmup Iteration  12: 2305451.367 ops/s
# Warmup Iteration  13: 2352918.770 ops/s
# Warmup Iteration  14: 2550405.531 ops/s
# Warmup Iteration  15: 2361316.237 ops/s
# Warmup Iteration  16: 2445237.324 ops/s
# Warmup Iteration  17: 2575803.454 ops/s
# Warmup Iteration  18: 2384155.025 ops/s
# Warmup Iteration  19: 2533499.753 ops/s
# Warmup Iteration  20: 2501335.037 ops/s
# Warmup Iteration  21: 2308707.910 ops/s
# Warmup Iteration  22: 2532608.651 ops/s
# Warmup Iteration  23: 2418991.652 ops/s
# Warmup Iteration  24: 2494799.249 ops/s
# Warmup Iteration  25: 2502317.830 ops/s
# Warmup Iteration  26: 2407533.049 ops/s
# Warmup Iteration  27: 2559564.620 ops/s
# Warmup Iteration  28: 2391748.501 ops/s
# Warmup Iteration  29: 2492911.158 ops/s
# Warmup Iteration  30: 2436682.835 ops/s
Iteration   1: 2586733.613 ops/s
Iteration   2: 2431835.204 ops/s
Iteration   3: 2535900.245 ops/s
Iteration   4: 2553442.390 ops/s
Iteration   5: 2367016.673 ops/s
Iteration   6: 2526858.268 ops/s
Iteration   7: 2415397.274 ops/s
Iteration   8: 2514248.515 ops/s
Iteration   9: 2380977.928 ops/s
Iteration  10: 2550361.876 ops/s
Iteration  11: 2495943.753 ops/s
Iteration  12: 2447058.793 ops/s
Iteration  13: 2472450.978 ops/s
Iteration  14: 2461264.112 ops/s
Iteration  15: 2484117.624 ops/s
Iteration  16: 2465070.141 ops/s
Iteration  17: 2464567.289 ops/s
Iteration  18: 2496937.512 ops/s
Iteration  19: 2476814.554 ops/s
Iteration  20: 2555772.769 ops/s
Iteration  21: 2357979.561 ops/s
Iteration  22: 2584544.617 ops/s
Iteration  23: 2396118.840 ops/s
Iteration  24: 2556646.365 ops/s
Iteration  25: 2455789.646 ops/s
Iteration  26: 2547385.724 ops/s
Iteration  27: 2509258.981 ops/s
Iteration  28: 2444495.828 ops/s
Iteration  29: 2474218.556 ops/s
Iteration  30: 2551804.733 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleStartWithTest._Benchmark.benchmark_justObservableEmpty":
  2485367.079 ±(99.9%) 42228.949 ops/s [Average]
  (min, avg, max) = (2357979.561, 2485367.079, 2586733.613), stdev = 63206.307
  CI (99.9%): [2443138.130, 2527596.027] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
SingleStartWithTest._Benchmark.benchmark_justObservableEmpty  thrpt   30  2485367.079 ± 42228.949  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleStartWithTest._Benchmark.benchmark_justFlowableEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleStartWithTest._Benchmark.benchmark_justFlowableEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 189785.588 ops/s
# Warmup Iteration   2: 1960806.256 ops/s
# Warmup Iteration   3: 1994955.720 ops/s
# Warmup Iteration   4: 2249704.065 ops/s
# Warmup Iteration   5: 2509151.188 ops/s
# Warmup Iteration   6: 2453962.313 ops/s
# Warmup Iteration   7: 2506555.864 ops/s
# Warmup Iteration   8: 2442998.992 ops/s
# Warmup Iteration   9: 2449912.223 ops/s
# Warmup Iteration  10: 2503734.046 ops/s
# Warmup Iteration  11: 2480396.197 ops/s
# Warmup Iteration  12: 2487730.790 ops/s
# Warmup Iteration  13: 2484667.271 ops/s
# Warmup Iteration  14: 2584560.931 ops/s
# Warmup Iteration  15: 2440455.138 ops/s
# Warmup Iteration  16: 2365383.884 ops/s
# Warmup Iteration  17: 2300607.499 ops/s
# Warmup Iteration  18: 2443575.793 ops/s
# Warmup Iteration  19: 2474621.980 ops/s
# Warmup Iteration  20: 2519195.745 ops/s
# Warmup Iteration  21: 2443856.142 ops/s
# Warmup Iteration  22: 2540459.372 ops/s
# Warmup Iteration  23: 2497099.035 ops/s
# Warmup Iteration  24: 2494605.723 ops/s
# Warmup Iteration  25: 2517152.582 ops/s
# Warmup Iteration  26: 2512784.556 ops/s
# Warmup Iteration  27: 2458293.220 ops/s
# Warmup Iteration  28: 2509123.497 ops/s
# Warmup Iteration  29: 2510933.295 ops/s
# Warmup Iteration  30: 2568198.285 ops/s
Iteration   1: 2425084.486 ops/s
Iteration   2: 2513662.617 ops/s
Iteration   3: 2505539.410 ops/s
Iteration   4: 2443865.398 ops/s
Iteration   5: 2447739.314 ops/s
Iteration   6: 2469121.022 ops/s
Iteration   7: 2485014.184 ops/s
Iteration   8: 2549363.096 ops/s
Iteration   9: 2480574.827 ops/s
Iteration  10: 2484193.602 ops/s
Iteration  11: 2449205.797 ops/s
Iteration  12: 2539469.714 ops/s
Iteration  13: 2457273.226 ops/s
Iteration  14: 2429734.578 ops/s
Iteration  15: 2491485.260 ops/s
Iteration  16: 2382333.658 ops/s
Iteration  17: 2539874.185 ops/s
Iteration  18: 2481850.614 ops/s
Iteration  19: 2500758.305 ops/s
Iteration  20: 2452026.385 ops/s
Iteration  21: 2491983.534 ops/s
Iteration  22: 2502867.670 ops/s
Iteration  23: 2485566.001 ops/s
Iteration  24: 2547959.101 ops/s
Iteration  25: 2449463.984 ops/s
Iteration  26: 2559766.005 ops/s
Iteration  27: 2435167.302 ops/s
Iteration  28: 2524515.816 ops/s
Iteration  29: 2468943.713 ops/s
Iteration  30: 2510007.331 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleStartWithTest._Benchmark.benchmark_justFlowableEmpty":
  2483480.338 ±(99.9%) 28122.836 ops/s [Average]
  (min, avg, max) = (2382333.658, 2483480.338, 2559766.005), stdev = 42092.940
  CI (99.9%): [2455357.502, 2511603.174] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
SingleStartWithTest._Benchmark.benchmark_justFlowableEmpty  thrpt   30  2483480.338 ± 28122.836  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableToSortedListTest._Benchmark.benchmark_toSortedListComparatorCapacityObservable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableToSortedListTest._Benchmark.benchmark_toSortedListComparatorCapacityObservable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 234554.176 ops/s
# Warmup Iteration   2: 1394890.823 ops/s
# Warmup Iteration   3: 2111892.161 ops/s
# Warmup Iteration   4: 1921844.167 ops/s
# Warmup Iteration   5: 2336949.253 ops/s
# Warmup Iteration   6: 2294710.860 ops/s
# Warmup Iteration   7: 2361723.318 ops/s
# Warmup Iteration   8: 2301863.690 ops/s
# Warmup Iteration   9: 2357870.887 ops/s
# Warmup Iteration  10: 2357035.635 ops/s
# Warmup Iteration  11: 2316089.592 ops/s
# Warmup Iteration  12: 2322171.406 ops/s
# Warmup Iteration  13: 2396277.105 ops/s
# Warmup Iteration  14: 2368242.752 ops/s
# Warmup Iteration  15: 2314325.524 ops/s
# Warmup Iteration  16: 2297347.657 ops/s
# Warmup Iteration  17: 2413304.692 ops/s
# Warmup Iteration  18: 2200403.326 ops/s
# Warmup Iteration  19: 2363222.026 ops/s
# Warmup Iteration  20: 2296564.849 ops/s
# Warmup Iteration  21: 2415474.211 ops/s
# Warmup Iteration  22: 2264074.565 ops/s
# Warmup Iteration  23: 2388698.864 ops/s
# Warmup Iteration  24: 2362503.291 ops/s
# Warmup Iteration  25: 2242523.646 ops/s
# Warmup Iteration  26: 2405514.487 ops/s
# Warmup Iteration  27: 2309334.647 ops/s
# Warmup Iteration  28: 2317405.985 ops/s
# Warmup Iteration  29: 2398436.385 ops/s
# Warmup Iteration  30: 2298718.866 ops/s
Iteration   1: 2398069.585 ops/s
Iteration   2: 2330851.723 ops/s
Iteration   3: 2368198.391 ops/s
Iteration   4: 2338967.930 ops/s
Iteration   5: 2370861.550 ops/s
Iteration   6: 2325272.498 ops/s
Iteration   7: 2327711.036 ops/s
Iteration   8: 2348214.984 ops/s
Iteration   9: 2343933.174 ops/s
Iteration  10: 2430690.220 ops/s
Iteration  11: 2344962.565 ops/s
Iteration  12: 2317033.663 ops/s
Iteration  13: 2413481.483 ops/s
Iteration  14: 2309979.932 ops/s
Iteration  15: 2384468.399 ops/s
Iteration  16: 2424128.867 ops/s
Iteration  17: 2296630.695 ops/s
Iteration  18: 2451709.845 ops/s
Iteration  19: 2290695.995 ops/s
Iteration  20: 2413387.156 ops/s
Iteration  21: 2263252.486 ops/s
Iteration  22: 2324364.134 ops/s
Iteration  23: 2384139.485 ops/s
Iteration  24: 2324754.038 ops/s
Iteration  25: 2429054.803 ops/s
Iteration  26: 2300025.297 ops/s
Iteration  27: 2396052.220 ops/s
Iteration  28: 2333546.798 ops/s
Iteration  29: 2371344.633 ops/s
Iteration  30: 2404382.475 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableToSortedListTest._Benchmark.benchmark_toSortedListComparatorCapacityObservable":
  2358672.202 ±(99.9%) 32271.365 ops/s [Average]
  (min, avg, max) = (2263252.486, 2358672.202, 2451709.845), stdev = 48302.263
  CI (99.9%): [2326400.837, 2390943.567] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                  Mode  Cnt        Score       Error  Units
ObservableToSortedListTest._Benchmark.benchmark_toSortedListComparatorCapacityObservable  thrpt   30  2358672.202 ± 32271.365  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableToSortedListTest._Benchmark.benchmark_withFollowingFirst$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableToSortedListTest._Benchmark.benchmark_withFollowingFirst

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 284446.084 ops/s
# Warmup Iteration   2: 2051316.637 ops/s
# Warmup Iteration   3: 3388092.005 ops/s
# Warmup Iteration   4: 4217875.276 ops/s
# Warmup Iteration   5: 4269843.780 ops/s
# Warmup Iteration   6: 4067360.034 ops/s
# Warmup Iteration   7: 4317883.003 ops/s
# Warmup Iteration   8: 4413144.225 ops/s
# Warmup Iteration   9: 4066112.470 ops/s
# Warmup Iteration  10: 4279711.855 ops/s
# Warmup Iteration  11: 4043865.118 ops/s
# Warmup Iteration  12: 3543501.295 ops/s
# Warmup Iteration  13: 4382013.443 ops/s
# Warmup Iteration  14: 4078325.562 ops/s
# Warmup Iteration  15: 4390064.427 ops/s
# Warmup Iteration  16: 4210308.080 ops/s
# Warmup Iteration  17: 4278172.242 ops/s
# Warmup Iteration  18: 4208718.431 ops/s
# Warmup Iteration  19: 4246476.300 ops/s
# Warmup Iteration  20: 4385221.270 ops/s
# Warmup Iteration  21: 4130620.797 ops/s
# Warmup Iteration  22: 4404836.162 ops/s
# Warmup Iteration  23: 4309790.929 ops/s
# Warmup Iteration  24: 4084713.077 ops/s
# Warmup Iteration  25: 4232293.566 ops/s
# Warmup Iteration  26: 4308732.647 ops/s
# Warmup Iteration  27: 4097110.795 ops/s
# Warmup Iteration  28: 4236735.821 ops/s
# Warmup Iteration  29: 4166828.578 ops/s
# Warmup Iteration  30: 4274152.832 ops/s
Iteration   1: 4114779.345 ops/s
Iteration   2: 4332839.668 ops/s
Iteration   3: 4140233.592 ops/s
Iteration   4: 4253037.526 ops/s
Iteration   5: 4292322.181 ops/s
Iteration   6: 4217786.428 ops/s
Iteration   7: 4322753.503 ops/s
Iteration   8: 4114506.540 ops/s
Iteration   9: 4156106.084 ops/s
Iteration  10: 4216309.267 ops/s
Iteration  11: 4322534.853 ops/s
Iteration  12: 4208020.930 ops/s
Iteration  13: 4199878.355 ops/s
Iteration  14: 4286280.245 ops/s
Iteration  15: 4166254.242 ops/s
Iteration  16: 4191540.385 ops/s
Iteration  17: 4438742.724 ops/s
Iteration  18: 4185872.282 ops/s
Iteration  19: 4382120.517 ops/s
Iteration  20: 4277329.503 ops/s
Iteration  21: 4129311.328 ops/s
Iteration  22: 4346295.446 ops/s
Iteration  23: 4126560.068 ops/s
Iteration  24: 4342453.422 ops/s
Iteration  25: 4169267.378 ops/s
Iteration  26: 4457456.505 ops/s
Iteration  27: 4318739.660 ops/s
Iteration  28: 4179812.976 ops/s
Iteration  29: 4139328.561 ops/s
Iteration  30: 4361252.580 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableToSortedListTest._Benchmark.benchmark_withFollowingFirst":
  4246324.203 ±(99.9%) 66105.951 ops/s [Average]
  (min, avg, max) = (4114506.540, 4246324.203, 4457456.505), stdev = 98944.283
  CI (99.9%): [4180218.252, 4312430.154] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
ObservableToSortedListTest._Benchmark.benchmark_withFollowingFirst  thrpt   30  4246324.203 ± 66105.951  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableToSortedListTest._Benchmark.benchmark_toSortedListCapacityObservable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableToSortedListTest._Benchmark.benchmark_toSortedListCapacityObservable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 284379.724 ops/s
# Warmup Iteration   2: 1471258.255 ops/s
# Warmup Iteration   3: 2348587.631 ops/s
# Warmup Iteration   4: 2519954.171 ops/s
# Warmup Iteration   5: 2417528.679 ops/s
# Warmup Iteration   6: 2401331.396 ops/s
# Warmup Iteration   7: 2389280.317 ops/s
# Warmup Iteration   8: 2458082.137 ops/s
# Warmup Iteration   9: 2512063.392 ops/s
# Warmup Iteration  10: 2416100.301 ops/s
# Warmup Iteration  11: 2208137.439 ops/s
# Warmup Iteration  12: 2186694.725 ops/s
# Warmup Iteration  13: 2595333.518 ops/s
# Warmup Iteration  14: 2484706.137 ops/s
# Warmup Iteration  15: 2381105.220 ops/s
# Warmup Iteration  16: 2484076.226 ops/s
# Warmup Iteration  17: 2443207.643 ops/s
# Warmup Iteration  18: 2515855.517 ops/s
# Warmup Iteration  19: 2488816.883 ops/s
# Warmup Iteration  20: 2400726.831 ops/s
# Warmup Iteration  21: 2441754.115 ops/s
# Warmup Iteration  22: 2473034.287 ops/s
# Warmup Iteration  23: 2466121.654 ops/s
# Warmup Iteration  24: 2466048.793 ops/s
# Warmup Iteration  25: 2315418.101 ops/s
# Warmup Iteration  26: 2495658.731 ops/s
# Warmup Iteration  27: 2433910.371 ops/s
# Warmup Iteration  28: 2405881.035 ops/s
# Warmup Iteration  29: 2474163.905 ops/s
# Warmup Iteration  30: 2499310.684 ops/s
Iteration   1: 2447956.663 ops/s
Iteration   2: 2540004.418 ops/s
Iteration   3: 2424349.245 ops/s
Iteration   4: 2413855.228 ops/s
Iteration   5: 2554659.115 ops/s
Iteration   6: 2385016.319 ops/s
Iteration   7: 2575014.821 ops/s
Iteration   8: 2375279.912 ops/s
Iteration   9: 2569002.335 ops/s
Iteration  10: 2463184.006 ops/s
Iteration  11: 2560359.788 ops/s
Iteration  12: 2565518.425 ops/s
Iteration  13: 2458951.898 ops/s
Iteration  14: 2360077.569 ops/s
Iteration  15: 2388335.291 ops/s
Iteration  16: 2457407.935 ops/s
Iteration  17: 2396860.091 ops/s
Iteration  18: 2479024.522 ops/s
Iteration  19: 2600461.155 ops/s
Iteration  20: 2404626.425 ops/s
Iteration  21: 2492242.594 ops/s
Iteration  22: 2438932.212 ops/s
Iteration  23: 2482095.569 ops/s
Iteration  24: 2516628.201 ops/s
Iteration  25: 2409047.965 ops/s
Iteration  26: 2571376.220 ops/s
Iteration  27: 2404506.976 ops/s
Iteration  28: 2558610.729 ops/s
Iteration  29: 2488236.289 ops/s
Iteration  30: 2428530.819 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableToSortedListTest._Benchmark.benchmark_toSortedListCapacityObservable":
  2473671.758 ±(99.9%) 47965.032 ops/s [Average]
  (min, avg, max) = (2360077.569, 2473671.758, 2600461.155), stdev = 71791.808
  CI (99.9%): [2425706.726, 2521636.790] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt        Score       Error  Units
ObservableToSortedListTest._Benchmark.benchmark_toSortedListCapacityObservable  thrpt   30  2473671.758 ± 47965.032  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingleTest._Benchmark.benchmark_mainErrorInnerSuccessDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingleTest._Benchmark.benchmark_mainErrorInnerSuccessDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 103673.677 ops/s
# Warmup Iteration   2: 352950.183 ops/s
# Warmup Iteration   3: 508249.457 ops/s
# Warmup Iteration   4: 477441.082 ops/s
# Warmup Iteration   5: 486242.998 ops/s
# Warmup Iteration   6: 525230.425 ops/s
# Warmup Iteration   7: 456470.336 ops/s
# Warmup Iteration   8: 534938.070 ops/s
# Warmup Iteration   9: 555593.854 ops/s
# Warmup Iteration  10: 528203.337 ops/s
# Warmup Iteration  11: 534371.363 ops/s
# Warmup Iteration  12: 569891.517 ops/s
# Warmup Iteration  13: 532882.347 ops/s
# Warmup Iteration  14: 555108.204 ops/s
# Warmup Iteration  15: 531826.826 ops/s
# Warmup Iteration  16: 551455.241 ops/s
# Warmup Iteration  17: 563116.673 ops/s
# Warmup Iteration  18: 571630.341 ops/s
# Warmup Iteration  19: 587309.572 ops/s
# Warmup Iteration  20: 560187.860 ops/s
# Warmup Iteration  21: 593452.604 ops/s
# Warmup Iteration  22: 554218.722 ops/s
# Warmup Iteration  23: 563121.746 ops/s
# Warmup Iteration  24: 582239.645 ops/s
# Warmup Iteration  25: 587394.169 ops/s
# Warmup Iteration  26: 565391.349 ops/s
# Warmup Iteration  27: 585008.246 ops/s
# Warmup Iteration  28: 590522.590 ops/s
# Warmup Iteration  29: 545283.293 ops/s
# Warmup Iteration  30: 602295.506 ops/s
Iteration   1: 547532.988 ops/s
Iteration   2: 584083.695 ops/s
Iteration   3: 571628.265 ops/s
Iteration   4: 555885.050 ops/s
Iteration   5: 601954.124 ops/s
Iteration   6: 542031.363 ops/s
Iteration   7: 573548.912 ops/s
Iteration   8: 561423.175 ops/s
Iteration   9: 577355.462 ops/s
Iteration  10: 566660.027 ops/s
Iteration  11: 573647.703 ops/s
Iteration  12: 573364.027 ops/s
Iteration  13: 574076.276 ops/s
Iteration  14: 582375.656 ops/s
Iteration  15: 568436.566 ops/s
Iteration  16: 565263.267 ops/s
Iteration  17: 587059.415 ops/s
Iteration  18: 562958.141 ops/s
Iteration  19: 581370.185 ops/s
Iteration  20: 572838.176 ops/s
Iteration  21: 576071.357 ops/s
Iteration  22: 573026.240 ops/s
Iteration  23: 571698.883 ops/s
Iteration  24: 592354.117 ops/s
Iteration  25: 567030.321 ops/s
Iteration  26: 579235.332 ops/s
Iteration  27: 557409.418 ops/s
Iteration  28: 591982.180 ops/s
Iteration  29: 590731.172 ops/s
Iteration  30: 555498.682 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingleTest._Benchmark.benchmark_mainErrorInnerSuccessDelayError":
  572617.672 ±(99.9%) 9011.555 ops/s [Average]
  (min, avg, max) = (542031.363, 572617.672, 601954.124), stdev = 13488.072
  CI (99.9%): [563606.117, 581629.228] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            Mode  Cnt       Score      Error  Units
ObservableSwitchMapSingleTest._Benchmark.benchmark_mainErrorInnerSuccessDelayError  thrpt   30  572617.672 ± 9011.555  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingleTest._Benchmark.benchmark_mainErrorInnerCompleteDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingleTest._Benchmark.benchmark_mainErrorInnerCompleteDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 98175.583 ops/s
# Warmup Iteration   2: 337415.279 ops/s
# Warmup Iteration   3: 505979.461 ops/s
# Warmup Iteration   4: 492511.052 ops/s
# Warmup Iteration   5: 556589.274 ops/s
# Warmup Iteration   6: 543030.328 ops/s
# Warmup Iteration   7: 548428.524 ops/s
# Warmup Iteration   8: 555301.762 ops/s
# Warmup Iteration   9: 541413.671 ops/s
# Warmup Iteration  10: 558753.350 ops/s
# Warmup Iteration  11: 553632.914 ops/s
# Warmup Iteration  12: 544538.481 ops/s
# Warmup Iteration  13: 553066.761 ops/s
# Warmup Iteration  14: 547253.513 ops/s
# Warmup Iteration  15: 555131.834 ops/s
# Warmup Iteration  16: 540688.217 ops/s
# Warmup Iteration  17: 573678.367 ops/s
# Warmup Iteration  18: 579271.435 ops/s
# Warmup Iteration  19: 571295.966 ops/s
# Warmup Iteration  20: 556729.737 ops/s
# Warmup Iteration  21: 594746.361 ops/s
# Warmup Iteration  22: 552805.615 ops/s
# Warmup Iteration  23: 595455.476 ops/s
# Warmup Iteration  24: 568755.831 ops/s
# Warmup Iteration  25: 582229.135 ops/s
# Warmup Iteration  26: 599241.730 ops/s
# Warmup Iteration  27: 562214.250 ops/s
# Warmup Iteration  28: 600329.819 ops/s
# Warmup Iteration  29: 565310.503 ops/s
# Warmup Iteration  30: 579445.525 ops/s
Iteration   1: 583598.820 ops/s
Iteration   2: 589549.452 ops/s
Iteration   3: 583374.256 ops/s
Iteration   4: 574429.270 ops/s
Iteration   5: 578841.545 ops/s
Iteration   6: 598296.922 ops/s
Iteration   7: 577633.312 ops/s
Iteration   8: 583002.615 ops/s
Iteration   9: 573757.331 ops/s
Iteration  10: 580074.982 ops/s
Iteration  11: 575375.493 ops/s
Iteration  12: 579968.464 ops/s
Iteration  13: 587306.597 ops/s
Iteration  14: 569515.788 ops/s
Iteration  15: 591708.608 ops/s
Iteration  16: 570445.657 ops/s
Iteration  17: 592086.762 ops/s
Iteration  18: 589096.861 ops/s
Iteration  19: 567399.024 ops/s
Iteration  20: 579152.405 ops/s
Iteration  21: 564872.468 ops/s
Iteration  22: 570743.895 ops/s
Iteration  23: 599215.976 ops/s
Iteration  24: 562752.146 ops/s
Iteration  25: 538714.970 ops/s
Iteration  26: 568478.460 ops/s
Iteration  27: 579690.220 ops/s
Iteration  28: 611012.721 ops/s
Iteration  29: 564126.754 ops/s
Iteration  30: 598240.940 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingleTest._Benchmark.benchmark_mainErrorInnerCompleteDelayError":
  579415.424 ±(99.9%) 9360.550 ops/s [Average]
  (min, avg, max) = (538714.970, 579415.424, 611012.721), stdev = 14010.432
  CI (99.9%): [570054.873, 588775.974] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             Mode  Cnt       Score      Error  Units
ObservableSwitchMapSingleTest._Benchmark.benchmark_mainErrorInnerCompleteDelayError  thrpt   30  579415.424 ± 9360.550  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingleTest._Benchmark.benchmark_mainError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingleTest._Benchmark.benchmark_mainError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 250339.555 ops/s
# Warmup Iteration   2: 428345.097 ops/s
# Warmup Iteration   3: 611322.825 ops/s
# Warmup Iteration   4: 622443.437 ops/s
# Warmup Iteration   5: 567374.647 ops/s
# Warmup Iteration   6: 653061.551 ops/s
# Warmup Iteration   7: 667506.478 ops/s
# Warmup Iteration   8: 702002.187 ops/s
# Warmup Iteration   9: 647069.397 ops/s
# Warmup Iteration  10: 673993.409 ops/s
# Warmup Iteration  11: 667071.236 ops/s
# Warmup Iteration  12: 650656.159 ops/s
# Warmup Iteration  13: 696667.439 ops/s
# Warmup Iteration  14: 642614.076 ops/s
# Warmup Iteration  15: 685346.199 ops/s
# Warmup Iteration  16: 665170.926 ops/s
# Warmup Iteration  17: 715678.746 ops/s
# Warmup Iteration  18: 697843.111 ops/s
# Warmup Iteration  19: 707061.588 ops/s
# Warmup Iteration  20: 721610.682 ops/s
# Warmup Iteration  21: 694927.673 ops/s
# Warmup Iteration  22: 721597.027 ops/s
# Warmup Iteration  23: 694426.366 ops/s
# Warmup Iteration  24: 692604.664 ops/s
# Warmup Iteration  25: 709802.240 ops/s
# Warmup Iteration  26: 692874.295 ops/s
# Warmup Iteration  27: 691358.637 ops/s
# Warmup Iteration  28: 710871.488 ops/s
# Warmup Iteration  29: 690848.544 ops/s
# Warmup Iteration  30: 735413.110 ops/s
Iteration   1: 674336.019 ops/s
Iteration   2: 706222.240 ops/s
Iteration   3: 707354.754 ops/s
Iteration   4: 711690.816 ops/s
Iteration   5: 704373.391 ops/s
Iteration   6: 704391.041 ops/s
Iteration   7: 693199.379 ops/s
Iteration   8: 698827.405 ops/s
Iteration   9: 702257.176 ops/s
Iteration  10: 692709.432 ops/s
Iteration  11: 715251.966 ops/s
Iteration  12: 673114.915 ops/s
Iteration  13: 709900.378 ops/s
Iteration  14: 689203.476 ops/s
Iteration  15: 697128.880 ops/s
Iteration  16: 679287.786 ops/s
Iteration  17: 676034.139 ops/s
Iteration  18: 716355.487 ops/s
Iteration  19: 684708.192 ops/s
Iteration  20: 711895.940 ops/s
Iteration  21: 702806.178 ops/s
Iteration  22: 723521.163 ops/s
Iteration  23: 690388.773 ops/s
Iteration  24: 701679.599 ops/s
Iteration  25: 704859.027 ops/s
Iteration  26: 692508.733 ops/s
Iteration  27: 721431.354 ops/s
Iteration  28: 695670.572 ops/s
Iteration  29: 708093.001 ops/s
Iteration  30: 719647.608 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingleTest._Benchmark.benchmark_mainError":
  700294.961 ±(99.9%) 9217.553 ops/s [Average]
  (min, avg, max) = (673114.915, 700294.961, 723521.163), stdev = 13796.400
  CI (99.9%): [691077.408, 709512.513] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
ObservableSwitchMapSingleTest._Benchmark.benchmark_mainError  thrpt   30  700294.961 ± 9217.553  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingleTest._Benchmark.benchmark_mapperCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingleTest._Benchmark.benchmark_mapperCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 167584.892 ops/s
# Warmup Iteration   2: 478439.562 ops/s
# Warmup Iteration   3: 515836.635 ops/s
# Warmup Iteration   4: 546421.234 ops/s
# Warmup Iteration   5: 561808.672 ops/s
# Warmup Iteration   6: 533908.334 ops/s
# Warmup Iteration   7: 554139.040 ops/s
# Warmup Iteration   8: 562341.659 ops/s
# Warmup Iteration   9: 533809.204 ops/s
# Warmup Iteration  10: 568612.738 ops/s
# Warmup Iteration  11: 566548.324 ops/s
# Warmup Iteration  12: 518839.463 ops/s
# Warmup Iteration  13: 563855.499 ops/s
# Warmup Iteration  14: 553488.346 ops/s
# Warmup Iteration  15: 553343.248 ops/s
# Warmup Iteration  16: 542839.028 ops/s
# Warmup Iteration  17: 554910.584 ops/s
# Warmup Iteration  18: 609818.179 ops/s
# Warmup Iteration  19: 562950.286 ops/s
# Warmup Iteration  20: 591376.307 ops/s
# Warmup Iteration  21: 562699.638 ops/s
# Warmup Iteration  22: 593629.238 ops/s
# Warmup Iteration  23: 583053.886 ops/s
# Warmup Iteration  24: 563218.927 ops/s
# Warmup Iteration  25: 584700.929 ops/s
# Warmup Iteration  26: 581688.469 ops/s
# Warmup Iteration  27: 569392.856 ops/s
# Warmup Iteration  28: 568083.185 ops/s
# Warmup Iteration  29: 566382.351 ops/s
# Warmup Iteration  30: 605579.008 ops/s
Iteration   1: 578688.454 ops/s
Iteration   2: 574908.038 ops/s
Iteration   3: 583723.059 ops/s
Iteration   4: 590120.514 ops/s
Iteration   5: 590099.994 ops/s
Iteration   6: 574401.193 ops/s
Iteration   7: 586161.580 ops/s
Iteration   8: 562373.554 ops/s
Iteration   9: 570944.221 ops/s
Iteration  10: 576526.188 ops/s
Iteration  11: 583367.161 ops/s
Iteration  12: 553629.395 ops/s
Iteration  13: 578639.177 ops/s
Iteration  14: 567958.969 ops/s
Iteration  15: 588096.202 ops/s
Iteration  16: 571361.378 ops/s
Iteration  17: 588536.030 ops/s
Iteration  18: 574070.018 ops/s
Iteration  19: 595882.522 ops/s
Iteration  20: 576914.333 ops/s
Iteration  21: 581249.964 ops/s
Iteration  22: 595204.220 ops/s
Iteration  23: 553675.079 ops/s
Iteration  24: 601167.033 ops/s
Iteration  25: 594025.108 ops/s
Iteration  26: 565835.559 ops/s
Iteration  27: 589497.149 ops/s
Iteration  28: 544468.946 ops/s
Iteration  29: 515627.855 ops/s
Iteration  30: 572239.085 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingleTest._Benchmark.benchmark_mapperCrash":
  575979.733 ±(99.9%) 11721.707 ops/s [Average]
  (min, avg, max) = (515627.855, 575979.733, 601167.033), stdev = 17544.501
  CI (99.9%): [564258.025, 587701.440] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score       Error  Units
ObservableSwitchMapSingleTest._Benchmark.benchmark_mapperCrash  thrpt   30  575979.733 ± 11721.707  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingleTest._Benchmark.benchmark_switchOverDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingleTest._Benchmark.benchmark_switchOverDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 100004.874 ops/s
# Warmup Iteration   2: 385283.485 ops/s
# Warmup Iteration   3: 506770.507 ops/s
# Warmup Iteration   4: 522312.244 ops/s
# Warmup Iteration   5: 527480.089 ops/s
# Warmup Iteration   6: 546452.101 ops/s
# Warmup Iteration   7: 535065.798 ops/s
# Warmup Iteration   8: 502870.943 ops/s
# Warmup Iteration   9: 503934.847 ops/s
# Warmup Iteration  10: 532348.317 ops/s
# Warmup Iteration  11: 534113.801 ops/s
# Warmup Iteration  12: 533903.881 ops/s
# Warmup Iteration  13: 527646.521 ops/s
# Warmup Iteration  14: 537461.890 ops/s
# Warmup Iteration  15: 522331.131 ops/s
# Warmup Iteration  16: 540273.154 ops/s
# Warmup Iteration  17: 529287.447 ops/s
# Warmup Iteration  18: 546583.992 ops/s
# Warmup Iteration  19: 575464.549 ops/s
# Warmup Iteration  20: 543536.927 ops/s
# Warmup Iteration  21: 567265.239 ops/s
# Warmup Iteration  22: 557898.910 ops/s
# Warmup Iteration  23: 550785.211 ops/s
# Warmup Iteration  24: 563692.538 ops/s
# Warmup Iteration  25: 533713.554 ops/s
# Warmup Iteration  26: 565392.945 ops/s
# Warmup Iteration  27: 554488.246 ops/s
# Warmup Iteration  28: 571448.997 ops/s
# Warmup Iteration  29: 550555.667 ops/s
# Warmup Iteration  30: 548779.765 ops/s
Iteration   1: 573479.488 ops/s
Iteration   2: 553274.766 ops/s
Iteration   3: 534754.306 ops/s
Iteration   4: 568782.828 ops/s
Iteration   5: 556377.255 ops/s
Iteration   6: 535229.904 ops/s
Iteration   7: 563328.461 ops/s
Iteration   8: 535371.811 ops/s
Iteration   9: 567614.857 ops/s
Iteration  10: 573782.017 ops/s
Iteration  11: 540191.205 ops/s
Iteration  12: 570730.058 ops/s
Iteration  13: 539743.379 ops/s
Iteration  14: 567864.287 ops/s
Iteration  15: 568589.964 ops/s
Iteration  16: 546403.302 ops/s
Iteration  17: 555305.090 ops/s
Iteration  18: 575211.818 ops/s
Iteration  19: 507670.169 ops/s
Iteration  20: 566420.075 ops/s
Iteration  21: 548680.919 ops/s
Iteration  22: 568719.592 ops/s
Iteration  23: 556201.549 ops/s
Iteration  24: 551092.696 ops/s
Iteration  25: 546116.208 ops/s
Iteration  26: 557859.839 ops/s
Iteration  27: 562048.280 ops/s
Iteration  28: 546342.088 ops/s
Iteration  29: 570138.121 ops/s
Iteration  30: 552111.214 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingleTest._Benchmark.benchmark_switchOverDelayError":
  555314.518 ±(99.9%) 10303.762 ops/s [Average]
  (min, avg, max) = (507670.169, 555314.518, 575211.818), stdev = 15422.188
  CI (99.9%): [545010.756, 565618.281] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score       Error  Units
ObservableSwitchMapSingleTest._Benchmark.benchmark_switchOverDelayError  thrpt   30  555314.518 ± 10303.762  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingleTest._Benchmark.benchmark_cancel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingleTest._Benchmark.benchmark_cancel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 388681.463 ops/s
# Warmup Iteration   2: 1858483.510 ops/s
# Warmup Iteration   3: 2491560.601 ops/s
# Warmup Iteration   4: 2474502.319 ops/s
# Warmup Iteration   5: 2579894.323 ops/s
# Warmup Iteration   6: 2236338.075 ops/s
# Warmup Iteration   7: 2326405.210 ops/s
# Warmup Iteration   8: 2335116.576 ops/s
# Warmup Iteration   9: 2620818.583 ops/s
# Warmup Iteration  10: 2413559.917 ops/s
# Warmup Iteration  11: 2491551.828 ops/s
# Warmup Iteration  12: 2553396.198 ops/s
# Warmup Iteration  13: 2451059.119 ops/s
# Warmup Iteration  14: 2551485.177 ops/s
# Warmup Iteration  15: 2461459.982 ops/s
# Warmup Iteration  16: 2618863.349 ops/s
# Warmup Iteration  17: 2550810.192 ops/s
# Warmup Iteration  18: 2537607.658 ops/s
# Warmup Iteration  19: 2520264.778 ops/s
# Warmup Iteration  20: 2466042.088 ops/s
# Warmup Iteration  21: 2578067.615 ops/s
# Warmup Iteration  22: 2413410.371 ops/s
# Warmup Iteration  23: 2462722.085 ops/s
# Warmup Iteration  24: 2586543.554 ops/s
# Warmup Iteration  25: 2486103.291 ops/s
# Warmup Iteration  26: 2613065.929 ops/s
# Warmup Iteration  27: 2473295.743 ops/s
# Warmup Iteration  28: 2532661.410 ops/s
# Warmup Iteration  29: 2534784.823 ops/s
# Warmup Iteration  30: 2541594.682 ops/s
Iteration   1: 2584497.811 ops/s
Iteration   2: 2599379.054 ops/s
Iteration   3: 2584937.235 ops/s
Iteration   4: 2464200.372 ops/s
Iteration   5: 2559996.584 ops/s
Iteration   6: 2474133.387 ops/s
Iteration   7: 2528704.876 ops/s
Iteration   8: 2527078.977 ops/s
Iteration   9: 2530267.165 ops/s
Iteration  10: 2579570.184 ops/s
Iteration  11: 2421209.892 ops/s
Iteration  12: 2541876.039 ops/s
Iteration  13: 2506408.720 ops/s
Iteration  14: 2488649.513 ops/s
Iteration  15: 2622666.340 ops/s
Iteration  16: 2560620.928 ops/s
Iteration  17: 2485582.643 ops/s
Iteration  18: 2562133.162 ops/s
Iteration  19: 2506104.840 ops/s
Iteration  20: 2545250.408 ops/s
Iteration  21: 2496553.696 ops/s
Iteration  22: 2538942.077 ops/s
Iteration  23: 2144138.485 ops/s
Iteration  24: 2267587.898 ops/s
Iteration  25: 2606653.900 ops/s
Iteration  26: 2452035.861 ops/s
Iteration  27: 2518507.594 ops/s
Iteration  28: 2513339.162 ops/s
Iteration  29: 2470246.347 ops/s
Iteration  30: 2542347.879 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingleTest._Benchmark.benchmark_cancel":
  2507454.034 ±(99.9%) 64344.535 ops/s [Average]
  (min, avg, max) = (2144138.485, 2507454.034, 2622666.340), stdev = 96307.878
  CI (99.9%): [2443109.499, 2571798.569] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
ObservableSwitchMapSingleTest._Benchmark.benchmark_cancel  thrpt   30  2507454.034 ± 64344.535  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingleTest._Benchmark.benchmark_checkDisposed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingleTest._Benchmark.benchmark_checkDisposed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 578359.574 ops/s
# Warmup Iteration   2: 2543930.087 ops/s
# Warmup Iteration   3: 3056325.735 ops/s
# Warmup Iteration   4: 3538093.737 ops/s
# Warmup Iteration   5: 3682336.625 ops/s
# Warmup Iteration   6: 3553562.231 ops/s
# Warmup Iteration   7: 3597747.815 ops/s
# Warmup Iteration   8: 3655867.134 ops/s
# Warmup Iteration   9: 3620495.848 ops/s
# Warmup Iteration  10: 3713790.936 ops/s
# Warmup Iteration  11: 3682236.136 ops/s
# Warmup Iteration  12: 3498962.101 ops/s
# Warmup Iteration  13: 3711614.823 ops/s
# Warmup Iteration  14: 3477391.387 ops/s
# Warmup Iteration  15: 3655234.329 ops/s
# Warmup Iteration  16: 3601503.106 ops/s
# Warmup Iteration  17: 3636913.682 ops/s
# Warmup Iteration  18: 3680808.859 ops/s
# Warmup Iteration  19: 3609061.559 ops/s
# Warmup Iteration  20: 3724738.632 ops/s
# Warmup Iteration  21: 3516520.968 ops/s
# Warmup Iteration  22: 3628710.211 ops/s
# Warmup Iteration  23: 3576755.113 ops/s
# Warmup Iteration  24: 3492340.571 ops/s
# Warmup Iteration  25: 3631722.895 ops/s
# Warmup Iteration  26: 3577773.498 ops/s
# Warmup Iteration  27: 3705453.375 ops/s
# Warmup Iteration  28: 3644916.881 ops/s
# Warmup Iteration  29: 3712494.846 ops/s
# Warmup Iteration  30: 3474142.190 ops/s
Iteration   1: 3571435.215 ops/s
Iteration   2: 3618639.969 ops/s
Iteration   3: 3525055.526 ops/s
Iteration   4: 3632050.280 ops/s
Iteration   5: 3529825.812 ops/s
Iteration   6: 3545965.241 ops/s
Iteration   7: 3766733.069 ops/s
Iteration   8: 3454522.605 ops/s
Iteration   9: 3648059.978 ops/s
Iteration  10: 3549394.695 ops/s
Iteration  11: 3729184.378 ops/s
Iteration  12: 3611934.890 ops/s
Iteration  13: 3453319.918 ops/s
Iteration  14: 3666172.259 ops/s
Iteration  15: 3483944.107 ops/s
Iteration  16: 3645951.589 ops/s
Iteration  17: 3783783.139 ops/s
Iteration  18: 3529897.833 ops/s
Iteration  19: 3581249.950 ops/s
Iteration  20: 3763408.007 ops/s
Iteration  21: 3521914.916 ops/s
Iteration  22: 3593861.266 ops/s
Iteration  23: 3676272.769 ops/s
Iteration  24: 3628605.922 ops/s
Iteration  25: 3692812.655 ops/s
Iteration  26: 3496382.063 ops/s
Iteration  27: 3604375.963 ops/s
Iteration  28: 3668087.405 ops/s
Iteration  29: 3543122.499 ops/s
Iteration  30: 3718699.169 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingleTest._Benchmark.benchmark_checkDisposed":
  3607822.103 ±(99.9%) 61509.577 ops/s [Average]
  (min, avg, max) = (3453319.918, 3607822.103, 3783783.139), stdev = 92064.647
  CI (99.9%): [3546312.526, 3669331.680] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
ObservableSwitchMapSingleTest._Benchmark.benchmark_checkDisposed  thrpt   30  3607822.103 ± 61509.577  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingleTest._Benchmark.benchmark_switchOver$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingleTest._Benchmark.benchmark_switchOver

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 90788.269 ops/s
# Warmup Iteration   2: 329346.062 ops/s
# Warmup Iteration   3: 560631.105 ops/s
# Warmup Iteration   4: 511283.541 ops/s
# Warmup Iteration   5: 543044.373 ops/s
# Warmup Iteration   6: 528632.296 ops/s
# Warmup Iteration   7: 515945.716 ops/s
# Warmup Iteration   8: 526271.972 ops/s
# Warmup Iteration   9: 540951.126 ops/s
# Warmup Iteration  10: 527628.731 ops/s
# Warmup Iteration  11: 523538.154 ops/s
# Warmup Iteration  12: 539080.030 ops/s
# Warmup Iteration  13: 538523.864 ops/s
# Warmup Iteration  14: 546158.133 ops/s
# Warmup Iteration  15: 511586.083 ops/s
# Warmup Iteration  16: 548756.745 ops/s
# Warmup Iteration  17: 560112.238 ops/s
# Warmup Iteration  18: 579944.150 ops/s
# Warmup Iteration  19: 545512.593 ops/s
# Warmup Iteration  20: 568825.390 ops/s
# Warmup Iteration  21: 577391.115 ops/s
# Warmup Iteration  22: 538220.022 ops/s
# Warmup Iteration  23: 541285.826 ops/s
# Warmup Iteration  24: 561124.457 ops/s
# Warmup Iteration  25: 567895.659 ops/s
# Warmup Iteration  26: 578976.089 ops/s
# Warmup Iteration  27: 578626.874 ops/s
# Warmup Iteration  28: 576632.202 ops/s
# Warmup Iteration  29: 567327.107 ops/s
# Warmup Iteration  30: 561346.300 ops/s
Iteration   1: 563785.157 ops/s
Iteration   2: 574600.892 ops/s
Iteration   3: 567932.894 ops/s
Iteration   4: 585927.663 ops/s
Iteration   5: 581663.006 ops/s
Iteration   6: 552913.068 ops/s
Iteration   7: 569089.535 ops/s
Iteration   8: 581879.165 ops/s
Iteration   9: 559162.878 ops/s
Iteration  10: 587000.118 ops/s
Iteration  11: 549022.217 ops/s
Iteration  12: 557062.779 ops/s
Iteration  13: 589908.234 ops/s
Iteration  14: 551246.383 ops/s
Iteration  15: 542645.776 ops/s
Iteration  16: 560885.850 ops/s
Iteration  17: 575068.187 ops/s
Iteration  18: 400253.422 ops/s
Iteration  19: 580970.452 ops/s
Iteration  20: 565763.153 ops/s
Iteration  21: 554584.770 ops/s
Iteration  22: 583435.341 ops/s
Iteration  23: 539638.473 ops/s
Iteration  24: 576532.202 ops/s
Iteration  25: 541312.836 ops/s
Iteration  26: 546975.085 ops/s
Iteration  27: 566089.932 ops/s
Iteration  28: 568686.454 ops/s
Iteration  29: 575164.412 ops/s
Iteration  30: 566013.444 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingleTest._Benchmark.benchmark_switchOver":
  560507.126 ±(99.9%) 22383.652 ops/s [Average]
  (min, avg, max) = (400253.422, 560507.126, 589908.234), stdev = 33502.799
  CI (99.9%): [538123.474, 582890.778] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score       Error  Units
ObservableSwitchMapSingleTest._Benchmark.benchmark_switchOver  thrpt   30  560507.126 ± 22383.652  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingleTest._Benchmark.benchmark_mainErrorAfterTermination$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingleTest._Benchmark.benchmark_mainErrorAfterTermination

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 21931.503 ops/s
# Warmup Iteration   2: 115039.441 ops/s
# Warmup Iteration   3: 140243.866 ops/s
# Warmup Iteration   4: 158293.570 ops/s
# Warmup Iteration   5: 146213.881 ops/s
# Warmup Iteration   6: 166587.263 ops/s
# Warmup Iteration   7: 168070.053 ops/s
# Warmup Iteration   8: 164096.995 ops/s
# Warmup Iteration   9: 164296.048 ops/s
# Warmup Iteration  10: 171818.556 ops/s
# Warmup Iteration  11: 163499.720 ops/s
# Warmup Iteration  12: 169757.790 ops/s
# Warmup Iteration  13: 162334.634 ops/s
# Warmup Iteration  14: 169632.756 ops/s
# Warmup Iteration  15: 159864.101 ops/s
# Warmup Iteration  16: 166671.600 ops/s
# Warmup Iteration  17: 174886.744 ops/s
# Warmup Iteration  18: 172648.357 ops/s
# Warmup Iteration  19: 174967.705 ops/s
# Warmup Iteration  20: 167302.648 ops/s
# Warmup Iteration  21: 168663.393 ops/s
# Warmup Iteration  22: 173089.348 ops/s
# Warmup Iteration  23: 162665.136 ops/s
# Warmup Iteration  24: 169671.400 ops/s
# Warmup Iteration  25: 174463.634 ops/s
# Warmup Iteration  26: 167502.320 ops/s
# Warmup Iteration  27: 172813.573 ops/s
# Warmup Iteration  28: 178715.743 ops/s
# Warmup Iteration  29: 164128.055 ops/s
# Warmup Iteration  30: 177911.833 ops/s
Iteration   1: 166699.808 ops/s
Iteration   2: 174189.504 ops/s
Iteration   3: 168204.935 ops/s
Iteration   4: 167986.619 ops/s
Iteration   5: 173453.550 ops/s
Iteration   6: 173479.283 ops/s
Iteration   7: 169887.664 ops/s
Iteration   8: 168738.569 ops/s
Iteration   9: 176071.439 ops/s
Iteration  10: 171836.203 ops/s
Iteration  11: 168422.338 ops/s
Iteration  12: 169914.597 ops/s
Iteration  13: 172709.961 ops/s
Iteration  14: 171363.250 ops/s
Iteration  15: 171153.030 ops/s
Iteration  16: 167682.484 ops/s
Iteration  17: 175986.844 ops/s
Iteration  18: 167130.366 ops/s
Iteration  19: 175244.365 ops/s
Iteration  20: 170171.182 ops/s
Iteration  21: 181763.661 ops/s
Iteration  22: 172680.903 ops/s
Iteration  23: 169476.398 ops/s
Iteration  24: 178875.469 ops/s
Iteration  25: 167366.509 ops/s
Iteration  26: 177260.973 ops/s
Iteration  27: 168285.140 ops/s
Iteration  28: 167601.997 ops/s
Iteration  29: 176603.422 ops/s
Iteration  30: 165514.545 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingleTest._Benchmark.benchmark_mainErrorAfterTermination":
  171525.167 ±(99.9%) 2713.904 ops/s [Average]
  (min, avg, max) = (165514.545, 171525.167, 181763.661), stdev = 4062.044
  CI (99.9%): [168811.263, 174239.071] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt       Score      Error  Units
ObservableSwitchMapSingleTest._Benchmark.benchmark_mainErrorAfterTermination  thrpt   30  171525.167 ± 2713.904  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingleTest._Benchmark.benchmark_innerErrorAfterTermination$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingleTest._Benchmark.benchmark_innerErrorAfterTermination

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 18418.890 ops/s
# Warmup Iteration   2: 112030.532 ops/s
# Warmup Iteration   3: 168422.451 ops/s
# Warmup Iteration   4: 170248.163 ops/s
# Warmup Iteration   5: 180968.924 ops/s
# Warmup Iteration   6: 175846.895 ops/s
# Warmup Iteration   7: 160104.243 ops/s
# Warmup Iteration   8: 178761.201 ops/s
# Warmup Iteration   9: 165009.005 ops/s
# Warmup Iteration  10: 181647.639 ops/s
# Warmup Iteration  11: 179228.236 ops/s
# Warmup Iteration  12: 174813.226 ops/s
# Warmup Iteration  13: 182732.856 ops/s
# Warmup Iteration  14: 174102.252 ops/s
# Warmup Iteration  15: 181190.275 ops/s
# Warmup Iteration  16: 180557.464 ops/s
# Warmup Iteration  17: 180466.240 ops/s
# Warmup Iteration  18: 190723.136 ops/s
# Warmup Iteration  19: 176862.246 ops/s
# Warmup Iteration  20: 183192.683 ops/s
# Warmup Iteration  21: 180099.652 ops/s
# Warmup Iteration  22: 183778.854 ops/s
# Warmup Iteration  23: 178689.719 ops/s
# Warmup Iteration  24: 180851.476 ops/s
# Warmup Iteration  25: 193749.571 ops/s
# Warmup Iteration  26: 190383.852 ops/s
# Warmup Iteration  27: 181317.734 ops/s
# Warmup Iteration  28: 182758.202 ops/s
# Warmup Iteration  29: 187073.156 ops/s
# Warmup Iteration  30: 184320.732 ops/s
Iteration   1: 190503.752 ops/s
Iteration   2: 179785.191 ops/s
Iteration   3: 177391.828 ops/s
Iteration   4: 187856.419 ops/s
Iteration   5: 181626.294 ops/s
Iteration   6: 186648.064 ops/s
Iteration   7: 173842.406 ops/s
Iteration   8: 186557.864 ops/s
Iteration   9: 190509.523 ops/s
Iteration  10: 181581.442 ops/s
Iteration  11: 186215.173 ops/s
Iteration  12: 184600.168 ops/s
Iteration  13: 138006.239 ops/s
Iteration  14: 181951.958 ops/s
Iteration  15: 181378.394 ops/s
Iteration  16: 187710.838 ops/s
Iteration  17: 183677.395 ops/s
Iteration  18: 181912.093 ops/s
Iteration  19: 186499.144 ops/s
Iteration  20: 181630.336 ops/s
Iteration  21: 185214.123 ops/s
Iteration  22: 180806.952 ops/s
Iteration  23: 183269.107 ops/s
Iteration  24: 185849.940 ops/s
Iteration  25: 185845.028 ops/s
Iteration  26: 185499.825 ops/s
Iteration  27: 183904.288 ops/s
Iteration  28: 184823.579 ops/s
Iteration  29: 183777.044 ops/s
Iteration  30: 183712.110 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingleTest._Benchmark.benchmark_innerErrorAfterTermination":
  182419.551 ±(99.9%) 6075.678 ops/s [Average]
  (min, avg, max) = (138006.239, 182419.551, 190509.523), stdev = 9093.789
  CI (99.9%): [176343.873, 188495.229] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt       Score      Error  Units
ObservableSwitchMapSingleTest._Benchmark.benchmark_innerErrorAfterTermination  thrpt   30  182419.551 ± 6075.678  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingleTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingleTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 110881.156 ops/s
# Warmup Iteration   2: 446069.227 ops/s
# Warmup Iteration   3: 453562.270 ops/s
# Warmup Iteration   4: 483413.996 ops/s
# Warmup Iteration   5: 508876.306 ops/s
# Warmup Iteration   6: 488664.895 ops/s
# Warmup Iteration   7: 487620.520 ops/s
# Warmup Iteration   8: 497926.980 ops/s
# Warmup Iteration   9: 478480.619 ops/s
# Warmup Iteration  10: 507245.265 ops/s
# Warmup Iteration  11: 483250.337 ops/s
# Warmup Iteration  12: 461119.799 ops/s
# Warmup Iteration  13: 476391.866 ops/s
# Warmup Iteration  14: 477115.290 ops/s
# Warmup Iteration  15: 501106.240 ops/s
# Warmup Iteration  16: 499180.234 ops/s
# Warmup Iteration  17: 518835.699 ops/s
# Warmup Iteration  18: 540137.726 ops/s
# Warmup Iteration  19: 517228.735 ops/s
# Warmup Iteration  20: 525458.039 ops/s
# Warmup Iteration  21: 532278.685 ops/s
# Warmup Iteration  22: 504005.377 ops/s
# Warmup Iteration  23: 525938.953 ops/s
# Warmup Iteration  24: 537898.811 ops/s
# Warmup Iteration  25: 537580.254 ops/s
# Warmup Iteration  26: 500118.097 ops/s
# Warmup Iteration  27: 527738.123 ops/s
# Warmup Iteration  28: 508749.395 ops/s
# Warmup Iteration  29: 521635.453 ops/s
# Warmup Iteration  30: 533594.351 ops/s
Iteration   1: 500351.871 ops/s
Iteration   2: 531319.057 ops/s
Iteration   3: 507079.953 ops/s
Iteration   4: 518934.887 ops/s
Iteration   5: 515667.665 ops/s
Iteration   6: 498918.113 ops/s
Iteration   7: 516082.264 ops/s
Iteration   8: 528677.318 ops/s
Iteration   9: 519917.571 ops/s
Iteration  10: 530720.668 ops/s
Iteration  11: 503449.293 ops/s
Iteration  12: 533434.964 ops/s
Iteration  13: 503996.555 ops/s
Iteration  14: 536114.927 ops/s
Iteration  15: 507288.075 ops/s
Iteration  16: 492285.601 ops/s
Iteration  17: 523050.602 ops/s
Iteration  18: 515547.706 ops/s
Iteration  19: 528732.015 ops/s
Iteration  20: 542925.551 ops/s
Iteration  21: 507828.942 ops/s
Iteration  22: 530062.561 ops/s
Iteration  23: 509096.528 ops/s
Iteration  24: 545301.658 ops/s
Iteration  25: 527553.392 ops/s
Iteration  26: 512764.321 ops/s
Iteration  27: 527365.586 ops/s
Iteration  28: 527270.463 ops/s
Iteration  29: 515773.970 ops/s
Iteration  30: 535366.456 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingleTest._Benchmark.benchmark_doubleOnSubscribe":
  519762.618 ±(99.9%) 9082.372 ops/s [Average]
  (min, avg, max) = (492285.601, 519762.618, 545301.658), stdev = 13594.068
  CI (99.9%): [510680.246, 528844.990] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score      Error  Units
ObservableSwitchMapSingleTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  519762.618 ± 9082.372  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeToFutureTest._Benchmark.benchmark_empty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeToFutureTest._Benchmark.benchmark_empty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 27046.778 ops/s
# Warmup Iteration   2: 26017.018 ops/s
# Warmup Iteration   3: 19731.583 ops/s
# Warmup Iteration   4: 20422.011 ops/s
# Warmup Iteration   5: 32487.644 ops/s
# Warmup Iteration   6: 20530.369 ops/s
# Warmup Iteration   7: 21086.271 ops/s
# Warmup Iteration   8: 21612.781 ops/s
# Warmup Iteration   9: 21000.965 ops/s
# Warmup Iteration  10: 21265.993 ops/s
# Warmup Iteration  11: 21008.684 ops/s
# Warmup Iteration  12: 21324.665 ops/s
# Warmup Iteration  13: 21828.681 ops/s
# Warmup Iteration  14: 20878.091 ops/s
# Warmup Iteration  15: 21666.571 ops/s
# Warmup Iteration  16: 20644.963 ops/s
# Warmup Iteration  17: 21045.400 ops/s
# Warmup Iteration  18: 21699.958 ops/s
# Warmup Iteration  19: 26807.141 ops/s
# Warmup Iteration  20: 20823.702 ops/s
# Warmup Iteration  21: 21361.942 ops/s
# Warmup Iteration  22: 22393.839 ops/s
# Warmup Iteration  23: 21432.919 ops/s
# Warmup Iteration  24: 21028.556 ops/s
# Warmup Iteration  25: 20295.794 ops/s
# Warmup Iteration  26: 21625.492 ops/s
# Warmup Iteration  27: 21469.405 ops/s
# Warmup Iteration  28: 21025.928 ops/s
# Warmup Iteration  29: 21107.527 ops/s
# Warmup Iteration  30: 21475.648 ops/s
Iteration   1: 21111.944 ops/s
Iteration   2: 22256.666 ops/s
Iteration   3: 21211.604 ops/s
Iteration   4: 21404.773 ops/s
Iteration   5: 21456.499 ops/s
Iteration   6: 21385.780 ops/s
Iteration   7: 21644.825 ops/s
Iteration   8: 17720.693 ops/s
Iteration   9: 20889.268 ops/s
Iteration  10: 20710.198 ops/s
Iteration  11: 21099.709 ops/s
Iteration  12: 21201.708 ops/s
Iteration  13: 21280.674 ops/s
Iteration  14: 21295.587 ops/s
Iteration  15: 21087.866 ops/s
Iteration  16: 21521.148 ops/s
Iteration  17: 21146.312 ops/s
Iteration  18: 21311.274 ops/s
Iteration  19: 21611.928 ops/s
Iteration  20: 21259.235 ops/s
Iteration  21: 20998.969 ops/s
Iteration  22: 21795.641 ops/s
Iteration  23: 21343.405 ops/s
Iteration  24: 21349.306 ops/s
Iteration  25: 21174.682 ops/s
Iteration  26: 20815.101 ops/s
Iteration  27: 20963.419 ops/s
Iteration  28: 21333.888 ops/s
Iteration  29: 20689.836 ops/s
Iteration  30: 21443.173 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeToFutureTest._Benchmark.benchmark_empty":
  21150.504 ±(99.9%) 482.790 ops/s [Average]
  (min, avg, max) = (17720.693, 21150.504, 22256.666), stdev = 722.617
  CI (99.9%): [20667.714, 21633.294] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt      Score     Error  Units
MaybeToFutureTest._Benchmark.benchmark_empty  thrpt   30  21150.504 ± 482.790  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleTimestampTest._Benchmark.benchmark_justSecondsScheduler$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleTimestampTest._Benchmark.benchmark_justSecondsScheduler

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 295628.089 ops/s
# Warmup Iteration   2: 572619.807 ops/s
# Warmup Iteration   3: 622199.802 ops/s
# Warmup Iteration   4: 603362.998 ops/s
# Warmup Iteration   5: 663268.613 ops/s
# Warmup Iteration   6: 559059.032 ops/s
# Warmup Iteration   7: 637694.657 ops/s
# Warmup Iteration   8: 658093.778 ops/s
# Warmup Iteration   9: 627976.074 ops/s
# Warmup Iteration  10: 651272.275 ops/s
# Warmup Iteration  11: 629110.290 ops/s
# Warmup Iteration  12: 650894.625 ops/s
# Warmup Iteration  13: 623132.564 ops/s
# Warmup Iteration  14: 623153.144 ops/s
# Warmup Iteration  15: 652640.007 ops/s
# Warmup Iteration  16: 631335.272 ops/s
# Warmup Iteration  17: 628132.647 ops/s
# Warmup Iteration  18: 652461.150 ops/s
# Warmup Iteration  19: 633691.050 ops/s
# Warmup Iteration  20: 632067.707 ops/s
# Warmup Iteration  21: 652313.195 ops/s
# Warmup Iteration  22: 621826.724 ops/s
# Warmup Iteration  23: 650460.313 ops/s
# Warmup Iteration  24: 641848.601 ops/s
# Warmup Iteration  25: 631366.267 ops/s
# Warmup Iteration  26: 629706.076 ops/s
# Warmup Iteration  27: 662644.082 ops/s
# Warmup Iteration  28: 616635.232 ops/s
# Warmup Iteration  29: 650139.381 ops/s
# Warmup Iteration  30: 644399.878 ops/s
Iteration   1: 617978.377 ops/s
Iteration   2: 641459.802 ops/s
Iteration   3: 624628.302 ops/s
Iteration   4: 642957.553 ops/s
Iteration   5: 621041.475 ops/s
Iteration   6: 648699.073 ops/s
Iteration   7: 633508.688 ops/s
Iteration   8: 628949.510 ops/s
Iteration   9: 653511.154 ops/s
Iteration  10: 619698.193 ops/s
Iteration  11: 648089.712 ops/s
Iteration  12: 633156.013 ops/s
Iteration  13: 625393.000 ops/s
Iteration  14: 642440.440 ops/s
Iteration  15: 658116.204 ops/s
Iteration  16: 610195.339 ops/s
Iteration  17: 646736.227 ops/s
Iteration  18: 609365.700 ops/s
Iteration  19: 630661.673 ops/s
Iteration  20: 638974.388 ops/s
Iteration  21: 626083.377 ops/s
Iteration  22: 636361.758 ops/s
Iteration  23: 653085.871 ops/s
Iteration  24: 607399.571 ops/s
Iteration  25: 668642.123 ops/s
Iteration  26: 650256.817 ops/s
Iteration  27: 624585.081 ops/s
Iteration  28: 644827.977 ops/s
Iteration  29: 630529.468 ops/s
Iteration  30: 637971.553 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleTimestampTest._Benchmark.benchmark_justSecondsScheduler":
  635176.814 ±(99.9%) 10055.998 ops/s [Average]
  (min, avg, max) = (607399.571, 635176.814, 668642.123), stdev = 15051.346
  CI (99.9%): [625120.816, 645232.812] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score       Error  Units
SingleTimestampTest._Benchmark.benchmark_justSecondsScheduler  thrpt   30  635176.814 ± 10055.998  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleTimeIntervalTest._Benchmark.benchmark_justSecondsScheduler$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleTimeIntervalTest._Benchmark.benchmark_justSecondsScheduler

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 576171.262 ops/s
# Warmup Iteration   2: 1053380.267 ops/s
# Warmup Iteration   3: 1183749.223 ops/s
# Warmup Iteration   4: 1089023.785 ops/s
# Warmup Iteration   5: 1194792.308 ops/s
# Warmup Iteration   6: 1125881.941 ops/s
# Warmup Iteration   7: 1142675.335 ops/s
# Warmup Iteration   8: 1119226.787 ops/s
# Warmup Iteration   9: 1079905.238 ops/s
# Warmup Iteration  10: 1169656.268 ops/s
# Warmup Iteration  11: 1079892.757 ops/s
# Warmup Iteration  12: 1146379.217 ops/s
# Warmup Iteration  13: 1221668.576 ops/s
# Warmup Iteration  14: 1148578.269 ops/s
# Warmup Iteration  15: 1142372.096 ops/s
# Warmup Iteration  16: 1201165.317 ops/s
# Warmup Iteration  17: 1148163.163 ops/s
# Warmup Iteration  18: 1152508.315 ops/s
# Warmup Iteration  19: 1171115.640 ops/s
# Warmup Iteration  20: 1151204.977 ops/s
# Warmup Iteration  21: 1219808.899 ops/s
# Warmup Iteration  22: 1115887.044 ops/s
# Warmup Iteration  23: 1170063.227 ops/s
# Warmup Iteration  24: 1173206.648 ops/s
# Warmup Iteration  25: 1192363.872 ops/s
# Warmup Iteration  26: 1110230.568 ops/s
# Warmup Iteration  27: 1195651.106 ops/s
# Warmup Iteration  28: 1106314.259 ops/s
# Warmup Iteration  29: 1204941.059 ops/s
# Warmup Iteration  30: 1119343.818 ops/s
Iteration   1: 1225068.610 ops/s
Iteration   2: 1131387.412 ops/s
Iteration   3: 941458.247 ops/s
Iteration   4: 1164173.728 ops/s
Iteration   5: 1147259.445 ops/s
Iteration   6: 1194358.576 ops/s
Iteration   7: 1149267.900 ops/s
Iteration   8: 1150754.833 ops/s
Iteration   9: 1181313.424 ops/s
Iteration  10: 1142105.606 ops/s
Iteration  11: 1190130.150 ops/s
Iteration  12: 1144809.334 ops/s
Iteration  13: 1154587.112 ops/s
Iteration  14: 1182293.768 ops/s
Iteration  15: 1182488.392 ops/s
Iteration  16: 1114412.678 ops/s
Iteration  17: 1199520.966 ops/s
Iteration  18: 1203216.598 ops/s
Iteration  19: 1134843.711 ops/s
Iteration  20: 1198399.086 ops/s
Iteration  21: 1091516.697 ops/s
Iteration  22: 1173821.871 ops/s
Iteration  23: 1209107.332 ops/s
Iteration  24: 1133398.968 ops/s
Iteration  25: 1175865.089 ops/s
Iteration  26: 1156332.430 ops/s
Iteration  27: 1170563.019 ops/s
Iteration  28: 1176410.382 ops/s
Iteration  29: 1134910.571 ops/s
Iteration  30: 1204748.374 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleTimeIntervalTest._Benchmark.benchmark_justSecondsScheduler":
  1158617.477 ±(99.9%) 34237.333 ops/s [Average]
  (min, avg, max) = (941458.247, 1158617.477, 1225068.610), stdev = 51244.832
  CI (99.9%): [1124380.144, 1192854.810] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
SingleTimeIntervalTest._Benchmark.benchmark_justSecondsScheduler  thrpt   30  1158617.477 ± 34237.333  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleTimestampTest._Benchmark.benchmark_justScheduler$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleTimestampTest._Benchmark.benchmark_justScheduler

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 282813.038 ops/s
# Warmup Iteration   2: 591912.170 ops/s
# Warmup Iteration   3: 598514.031 ops/s
# Warmup Iteration   4: 597977.527 ops/s
# Warmup Iteration   5: 647464.987 ops/s
# Warmup Iteration   6: 580759.375 ops/s
# Warmup Iteration   7: 628020.522 ops/s
# Warmup Iteration   8: 667427.365 ops/s
# Warmup Iteration   9: 606682.994 ops/s
# Warmup Iteration  10: 641703.337 ops/s
# Warmup Iteration  11: 631106.634 ops/s
# Warmup Iteration  12: 641819.184 ops/s
# Warmup Iteration  13: 652974.854 ops/s
# Warmup Iteration  14: 628771.255 ops/s
# Warmup Iteration  15: 630859.892 ops/s
# Warmup Iteration  16: 596015.791 ops/s
# Warmup Iteration  17: 610153.012 ops/s
# Warmup Iteration  18: 644487.288 ops/s
# Warmup Iteration  19: 632210.844 ops/s
# Warmup Iteration  20: 639934.428 ops/s
# Warmup Iteration  21: 657483.946 ops/s
# Warmup Iteration  22: 612267.444 ops/s
# Warmup Iteration  23: 635449.291 ops/s
# Warmup Iteration  24: 646860.799 ops/s
# Warmup Iteration  25: 626333.837 ops/s
# Warmup Iteration  26: 631590.020 ops/s
# Warmup Iteration  27: 653550.159 ops/s
# Warmup Iteration  28: 618244.603 ops/s
# Warmup Iteration  29: 659683.272 ops/s
# Warmup Iteration  30: 615050.069 ops/s
Iteration   1: 628631.280 ops/s
Iteration   2: 653258.561 ops/s
Iteration   3: 625686.481 ops/s
Iteration   4: 641368.256 ops/s
Iteration   5: 634241.817 ops/s
Iteration   6: 637422.200 ops/s
Iteration   7: 670307.141 ops/s
Iteration   8: 626223.348 ops/s
Iteration   9: 650447.254 ops/s
Iteration  10: 619848.960 ops/s
Iteration  11: 648429.192 ops/s
Iteration  12: 632184.046 ops/s
Iteration  13: 632520.637 ops/s
Iteration  14: 650797.888 ops/s
Iteration  15: 610892.743 ops/s
Iteration  16: 615540.071 ops/s
Iteration  17: 645500.865 ops/s
Iteration  18: 625658.431 ops/s
Iteration  19: 661591.425 ops/s
Iteration  20: 611924.536 ops/s
Iteration  21: 639936.276 ops/s
Iteration  22: 641933.614 ops/s
Iteration  23: 637837.143 ops/s
Iteration  24: 639155.728 ops/s
Iteration  25: 627828.680 ops/s
Iteration  26: 639552.949 ops/s
Iteration  27: 635755.410 ops/s
Iteration  28: 641191.760 ops/s
Iteration  29: 647399.017 ops/s
Iteration  30: 622857.844 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleTimestampTest._Benchmark.benchmark_justScheduler":
  636530.785 ±(99.9%) 9267.715 ops/s [Average]
  (min, avg, max) = (610892.743, 636530.785, 670307.141), stdev = 13871.480
  CI (99.9%): [627263.071, 645798.500] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
SingleTimestampTest._Benchmark.benchmark_justScheduler  thrpt   30  636530.785 ± 9267.715  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleTimeIntervalTest._Benchmark.benchmark_justScheduler$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleTimeIntervalTest._Benchmark.benchmark_justScheduler

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 626273.324 ops/s
# Warmup Iteration   2: 1029642.737 ops/s
# Warmup Iteration   3: 1126818.067 ops/s
# Warmup Iteration   4: 1025206.683 ops/s
# Warmup Iteration   5: 1173627.837 ops/s
# Warmup Iteration   6: 1023757.791 ops/s
# Warmup Iteration   7: 1140342.231 ops/s
# Warmup Iteration   8: 1201429.881 ops/s
# Warmup Iteration   9: 1118632.790 ops/s
# Warmup Iteration  10: 1174693.620 ops/s
# Warmup Iteration  11: 1153724.198 ops/s
# Warmup Iteration  12: 1157817.805 ops/s
# Warmup Iteration  13: 1195230.316 ops/s
# Warmup Iteration  14: 1118281.061 ops/s
# Warmup Iteration  15: 1213330.039 ops/s
# Warmup Iteration  16: 1147475.022 ops/s
# Warmup Iteration  17: 1145705.544 ops/s
# Warmup Iteration  18: 1184010.807 ops/s
# Warmup Iteration  19: 1143184.817 ops/s
# Warmup Iteration  20: 1156746.751 ops/s
# Warmup Iteration  21: 1139911.885 ops/s
# Warmup Iteration  22: 1166842.372 ops/s
# Warmup Iteration  23: 1161716.452 ops/s
# Warmup Iteration  24: 1101867.238 ops/s
# Warmup Iteration  25: 1152394.114 ops/s
# Warmup Iteration  26: 1147416.203 ops/s
# Warmup Iteration  27: 1192124.740 ops/s
# Warmup Iteration  28: 962215.619 ops/s
# Warmup Iteration  29: 1150817.103 ops/s
# Warmup Iteration  30: 1145261.672 ops/s
Iteration   1: 1177704.932 ops/s
Iteration   2: 1107165.026 ops/s
Iteration   3: 1113918.815 ops/s
Iteration   4: 1162564.549 ops/s
Iteration   5: 1177869.307 ops/s
Iteration   6: 1159529.505 ops/s
Iteration   7: 1137863.752 ops/s
Iteration   8: 1191799.779 ops/s
Iteration   9: 1151008.233 ops/s
Iteration  10: 1195779.230 ops/s
Iteration  11: 1135854.558 ops/s
Iteration  12: 1166983.234 ops/s
Iteration  13: 1144571.115 ops/s
Iteration  14: 1202921.294 ops/s
Iteration  15: 1166581.349 ops/s
Iteration  16: 1167382.556 ops/s
Iteration  17: 1144500.956 ops/s
Iteration  18: 1182357.813 ops/s
Iteration  19: 1115742.132 ops/s
Iteration  20: 1176700.405 ops/s
Iteration  21: 1136661.720 ops/s
Iteration  22: 1200848.945 ops/s
Iteration  23: 1115400.315 ops/s
Iteration  24: 1185018.415 ops/s
Iteration  25: 1168241.242 ops/s
Iteration  26: 1158030.849 ops/s
Iteration  27: 1217135.776 ops/s
Iteration  28: 1147068.647 ops/s
Iteration  29: 1136879.618 ops/s
Iteration  30: 1141657.050 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleTimeIntervalTest._Benchmark.benchmark_justScheduler":
  1159524.704 ±(99.9%) 18978.596 ops/s [Average]
  (min, avg, max) = (1107165.026, 1159524.704, 1217135.776), stdev = 28406.272
  CI (99.9%): [1140546.107, 1178503.300] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
SingleTimeIntervalTest._Benchmark.benchmark_justScheduler  thrpt   30  1159524.704 ± 18978.596  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleTimestampTest._Benchmark.benchmark_justSeconds$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleTimestampTest._Benchmark.benchmark_justSeconds

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 294052.099 ops/s
# Warmup Iteration   2: 581642.206 ops/s
# Warmup Iteration   3: 641563.143 ops/s
# Warmup Iteration   4: 585258.451 ops/s
# Warmup Iteration   5: 671445.305 ops/s
# Warmup Iteration   6: 597597.984 ops/s
# Warmup Iteration   7: 626140.096 ops/s
# Warmup Iteration   8: 640042.436 ops/s
# Warmup Iteration   9: 641784.804 ops/s
# Warmup Iteration  10: 638318.059 ops/s
# Warmup Iteration  11: 629932.000 ops/s
# Warmup Iteration  12: 639446.008 ops/s
# Warmup Iteration  13: 649467.404 ops/s
# Warmup Iteration  14: 611991.214 ops/s
# Warmup Iteration  15: 658083.526 ops/s
# Warmup Iteration  16: 645971.103 ops/s
# Warmup Iteration  17: 628217.206 ops/s
# Warmup Iteration  18: 621738.015 ops/s
# Warmup Iteration  19: 653112.605 ops/s
# Warmup Iteration  20: 625323.464 ops/s
# Warmup Iteration  21: 659401.547 ops/s
# Warmup Iteration  22: 625827.535 ops/s
# Warmup Iteration  23: 628095.952 ops/s
# Warmup Iteration  24: 636468.698 ops/s
# Warmup Iteration  25: 614735.542 ops/s
# Warmup Iteration  26: 655706.276 ops/s
# Warmup Iteration  27: 624346.825 ops/s
# Warmup Iteration  28: 632292.949 ops/s
# Warmup Iteration  29: 653822.568 ops/s
# Warmup Iteration  30: 614887.706 ops/s
Iteration   1: 651186.458 ops/s
Iteration   2: 614065.669 ops/s
Iteration   3: 664142.922 ops/s
Iteration   4: 625087.760 ops/s
Iteration   5: 658606.153 ops/s
Iteration   6: 635420.374 ops/s
Iteration   7: 635675.759 ops/s
Iteration   8: 653388.612 ops/s
Iteration   9: 629206.201 ops/s
Iteration  10: 643533.495 ops/s
Iteration  11: 632494.117 ops/s
Iteration  12: 629224.011 ops/s
Iteration  13: 618320.584 ops/s
Iteration  14: 623965.473 ops/s
Iteration  15: 638350.881 ops/s
Iteration  16: 635365.412 ops/s
Iteration  17: 635444.938 ops/s
Iteration  18: 627970.110 ops/s
Iteration  19: 635120.883 ops/s
Iteration  20: 637969.108 ops/s
Iteration  21: 619505.756 ops/s
Iteration  22: 655189.984 ops/s
Iteration  23: 626688.989 ops/s
Iteration  24: 652774.432 ops/s
Iteration  25: 631784.689 ops/s
Iteration  26: 622284.955 ops/s
Iteration  27: 658149.977 ops/s
Iteration  28: 630848.222 ops/s
Iteration  29: 639296.372 ops/s
Iteration  30: 619361.575 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleTimestampTest._Benchmark.benchmark_justSeconds":
  636014.129 ±(99.9%) 8903.097 ops/s [Average]
  (min, avg, max) = (614065.669, 636014.129, 664142.922), stdev = 13325.738
  CI (99.9%): [627111.032, 644917.226] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score      Error  Units
SingleTimestampTest._Benchmark.benchmark_justSeconds  thrpt   30  636014.129 ± 8903.097  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleTimeIntervalTest._Benchmark.benchmark_justSeconds$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleTimeIntervalTest._Benchmark.benchmark_justSeconds

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 588436.118 ops/s
# Warmup Iteration   2: 1017574.596 ops/s
# Warmup Iteration   3: 1109735.040 ops/s
# Warmup Iteration   4: 1127148.249 ops/s
# Warmup Iteration   5: 1193768.512 ops/s
# Warmup Iteration   6: 1129509.955 ops/s
# Warmup Iteration   7: 1156086.003 ops/s
# Warmup Iteration   8: 1186314.606 ops/s
# Warmup Iteration   9: 1106978.518 ops/s
# Warmup Iteration  10: 1141669.487 ops/s
# Warmup Iteration  11: 1156336.401 ops/s
# Warmup Iteration  12: 1135667.169 ops/s
# Warmup Iteration  13: 1151582.436 ops/s
# Warmup Iteration  14: 1192987.118 ops/s
# Warmup Iteration  15: 1125875.954 ops/s
# Warmup Iteration  16: 1214629.346 ops/s
# Warmup Iteration  17: 1095792.450 ops/s
# Warmup Iteration  18: 1166394.222 ops/s
# Warmup Iteration  19: 1133542.202 ops/s
# Warmup Iteration  20: 1146616.949 ops/s
# Warmup Iteration  21: 1182426.960 ops/s
# Warmup Iteration  22: 1159415.141 ops/s
# Warmup Iteration  23: 873540.118 ops/s
# Warmup Iteration  24: 1189581.742 ops/s
# Warmup Iteration  25: 1149614.254 ops/s
# Warmup Iteration  26: 1155847.729 ops/s
# Warmup Iteration  27: 1183239.466 ops/s
# Warmup Iteration  28: 1142674.217 ops/s
# Warmup Iteration  29: 1143987.212 ops/s
# Warmup Iteration  30: 1160208.420 ops/s
Iteration   1: 1167645.578 ops/s
Iteration   2: 1183885.828 ops/s
Iteration   3: 1130405.477 ops/s
Iteration   4: 1170638.277 ops/s
Iteration   5: 1178826.661 ops/s
Iteration   6: 1158080.722 ops/s
Iteration   7: 1179990.874 ops/s
Iteration   8: 1134131.320 ops/s
Iteration   9: 1164053.474 ops/s
Iteration  10: 1190893.997 ops/s
Iteration  11: 1112015.285 ops/s
Iteration  12: 1151565.603 ops/s
Iteration  13: 1128757.695 ops/s
Iteration  14: 1131143.626 ops/s
Iteration  15: 1168284.728 ops/s
Iteration  16: 1164816.870 ops/s
Iteration  17: 1155920.701 ops/s
Iteration  18: 1162428.352 ops/s
Iteration  19: 1145970.424 ops/s
Iteration  20: 1199346.485 ops/s
Iteration  21: 1179515.208 ops/s
Iteration  22: 1133555.418 ops/s
Iteration  23: 1154786.590 ops/s
Iteration  24: 1186816.936 ops/s
Iteration  25: 1151986.867 ops/s
Iteration  26: 1179174.956 ops/s
Iteration  27: 1139010.497 ops/s
Iteration  28: 1158936.461 ops/s
Iteration  29: 1122620.648 ops/s
Iteration  30: 1160427.801 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleTimeIntervalTest._Benchmark.benchmark_justSeconds":
  1158187.779 ±(99.9%) 14709.241 ops/s [Average]
  (min, avg, max) = (1112015.285, 1158187.779, 1199346.485), stdev = 22016.101
  CI (99.9%): [1143478.537, 1172897.020] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
SingleTimeIntervalTest._Benchmark.benchmark_justSeconds  thrpt   30  1158187.779 ± 14709.241  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleTimestampTest._Benchmark.benchmark_just$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleTimestampTest._Benchmark.benchmark_just

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 340333.150 ops/s
# Warmup Iteration   2: 583271.377 ops/s
# Warmup Iteration   3: 615756.660 ops/s
# Warmup Iteration   4: 602588.627 ops/s
# Warmup Iteration   5: 641441.409 ops/s
# Warmup Iteration   6: 665020.226 ops/s
# Warmup Iteration   7: 632718.531 ops/s
# Warmup Iteration   8: 644394.232 ops/s
# Warmup Iteration   9: 627480.999 ops/s
# Warmup Iteration  10: 625650.793 ops/s
# Warmup Iteration  11: 656995.951 ops/s
# Warmup Iteration  12: 627515.083 ops/s
# Warmup Iteration  13: 635900.909 ops/s
# Warmup Iteration  14: 631803.464 ops/s
# Warmup Iteration  15: 657860.144 ops/s
# Warmup Iteration  16: 627836.276 ops/s
# Warmup Iteration  17: 624108.917 ops/s
# Warmup Iteration  18: 662884.006 ops/s
# Warmup Iteration  19: 617583.547 ops/s
# Warmup Iteration  20: 651966.513 ops/s
# Warmup Iteration  21: 633612.271 ops/s
# Warmup Iteration  22: 642239.453 ops/s
# Warmup Iteration  23: 637643.322 ops/s
# Warmup Iteration  24: 623319.462 ops/s
# Warmup Iteration  25: 647170.984 ops/s
# Warmup Iteration  26: 645685.497 ops/s
# Warmup Iteration  27: 640533.756 ops/s
# Warmup Iteration  28: 645423.919 ops/s
# Warmup Iteration  29: 618184.822 ops/s
# Warmup Iteration  30: 653998.957 ops/s
Iteration   1: 659449.779 ops/s
Iteration   2: 623621.982 ops/s
Iteration   3: 652759.262 ops/s
Iteration   4: 623418.661 ops/s
Iteration   5: 631877.466 ops/s
Iteration   6: 648203.117 ops/s
Iteration   7: 616087.872 ops/s
Iteration   8: 656906.516 ops/s
Iteration   9: 624891.924 ops/s
Iteration  10: 636799.170 ops/s
Iteration  11: 645520.473 ops/s
Iteration  12: 629720.521 ops/s
Iteration  13: 641694.278 ops/s
Iteration  14: 618466.496 ops/s
Iteration  15: 619094.988 ops/s
Iteration  16: 671398.834 ops/s
Iteration  17: 607661.880 ops/s
Iteration  18: 621370.245 ops/s
Iteration  19: 658465.530 ops/s
Iteration  20: 619799.772 ops/s
Iteration  21: 648539.118 ops/s
Iteration  22: 627125.848 ops/s
Iteration  23: 648042.411 ops/s
Iteration  24: 653851.447 ops/s
Iteration  25: 621786.490 ops/s
Iteration  26: 659816.681 ops/s
Iteration  27: 641156.634 ops/s
Iteration  28: 642278.014 ops/s
Iteration  29: 611716.459 ops/s
Iteration  30: 628423.161 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleTimestampTest._Benchmark.benchmark_just":
  636331.501 ±(99.9%) 11260.282 ops/s [Average]
  (min, avg, max) = (607661.880, 636331.501, 671398.834), stdev = 16853.861
  CI (99.9%): [625071.219, 647591.783] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt       Score       Error  Units
SingleTimestampTest._Benchmark.benchmark_just  thrpt   30  636331.501 ± 11260.282  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleTimeIntervalTest._Benchmark.benchmark_just$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleTimeIntervalTest._Benchmark.benchmark_just

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 592173.958 ops/s
# Warmup Iteration   2: 999124.826 ops/s
# Warmup Iteration   3: 1183934.163 ops/s
# Warmup Iteration   4: 943235.156 ops/s
# Warmup Iteration   5: 1195351.146 ops/s
# Warmup Iteration   6: 1138901.084 ops/s
# Warmup Iteration   7: 1058141.003 ops/s
# Warmup Iteration   8: 1139796.276 ops/s
# Warmup Iteration   9: 1177546.392 ops/s
# Warmup Iteration  10: 1181168.468 ops/s
# Warmup Iteration  11: 1157235.518 ops/s
# Warmup Iteration  12: 1165336.398 ops/s
# Warmup Iteration  13: 1189043.869 ops/s
# Warmup Iteration  14: 1126376.794 ops/s
# Warmup Iteration  15: 1188765.645 ops/s
# Warmup Iteration  16: 1157608.264 ops/s
# Warmup Iteration  17: 1176184.780 ops/s
# Warmup Iteration  18: 940868.761 ops/s
# Warmup Iteration  19: 1190254.214 ops/s
# Warmup Iteration  20: 1164626.318 ops/s
# Warmup Iteration  21: 1158237.353 ops/s
# Warmup Iteration  22: 1227576.379 ops/s
# Warmup Iteration  23: 1133143.781 ops/s
# Warmup Iteration  24: 1168895.002 ops/s
# Warmup Iteration  25: 1195680.766 ops/s
# Warmup Iteration  26: 1121868.997 ops/s
# Warmup Iteration  27: 1197609.874 ops/s
# Warmup Iteration  28: 1192485.663 ops/s
# Warmup Iteration  29: 1170058.380 ops/s
# Warmup Iteration  30: 1217852.124 ops/s
Iteration   1: 1129198.602 ops/s
Iteration   2: 1173116.540 ops/s
Iteration   3: 1196980.450 ops/s
Iteration   4: 1124162.391 ops/s
Iteration   5: 1167797.768 ops/s
Iteration   6: 1160164.363 ops/s
Iteration   7: 1187528.914 ops/s
Iteration   8: 1143498.238 ops/s
Iteration   9: 1149149.524 ops/s
Iteration  10: 1217224.857 ops/s
Iteration  11: 1143883.546 ops/s
Iteration  12: 1153509.367 ops/s
Iteration  13: 1188857.385 ops/s
Iteration  14: 1105347.284 ops/s
Iteration  15: 1168150.389 ops/s
Iteration  16: 1185108.568 ops/s
Iteration  17: 1164334.998 ops/s
Iteration  18: 1196770.387 ops/s
Iteration  19: 1150055.802 ops/s
Iteration  20: 1183293.931 ops/s
Iteration  21: 1150515.452 ops/s
Iteration  22: 1176929.830 ops/s
Iteration  23: 1166288.707 ops/s
Iteration  24: 1133094.698 ops/s
Iteration  25: 1193575.001 ops/s
Iteration  26: 1168901.315 ops/s
Iteration  27: 1155337.835 ops/s
Iteration  28: 1188703.460 ops/s
Iteration  29: 1148281.753 ops/s
Iteration  30: 1179122.814 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleTimeIntervalTest._Benchmark.benchmark_just":
  1164962.806 ±(99.9%) 16665.035 ops/s [Average]
  (min, avg, max) = (1105347.284, 1164962.806, 1217224.857), stdev = 24943.442
  CI (99.9%): [1148297.771, 1181627.841] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score       Error  Units
SingleTimeIntervalTest._Benchmark.benchmark_just  thrpt   30  1164962.806 ± 16665.035  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSampleTest._Benchmark.benchmark_emitLastOther$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSampleTest._Benchmark.benchmark_emitLastOther

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.728 ops/s
# Warmup Iteration   2: 9682.951 ops/s
# Warmup Iteration   3: 22323.639 ops/s
# Warmup Iteration   4: 31657.604 ops/s
# Warmup Iteration   5: 44696.415 ops/s
# Warmup Iteration   6: 36700.270 ops/s
# Warmup Iteration   7: 51234.231 ops/s
# Warmup Iteration   8: 53207.317 ops/s
# Warmup Iteration   9: 117174.796 ops/s
# Warmup Iteration  10: 119322.388 ops/s
# Warmup Iteration  11: 99167.377 ops/s
# Warmup Iteration  12: 120981.299 ops/s
# Warmup Iteration  13: 88410.204 ops/s
# Warmup Iteration  14: 99833.458 ops/s
# Warmup Iteration  15: 129797.889 ops/s
# Warmup Iteration  16: 117820.523 ops/s
# Warmup Iteration  17: 112792.463 ops/s
# Warmup Iteration  18: 130083.920 ops/s
# Warmup Iteration  19: 128504.146 ops/s
# Warmup Iteration  20: 100657.547 ops/s
# Warmup Iteration  21: 115542.953 ops/s
# Warmup Iteration  22: 126397.953 ops/s
# Warmup Iteration  23: 124267.796 ops/s
# Warmup Iteration  24: 126024.422 ops/s
# Warmup Iteration  25: 121090.613 ops/s
# Warmup Iteration  26: 126223.778 ops/s
# Warmup Iteration  27: 116818.732 ops/s
# Warmup Iteration  28: 120875.450 ops/s
# Warmup Iteration  29: 127401.224 ops/s
# Warmup Iteration  30: 119276.252 ops/s
Iteration   1: 117482.954 ops/s
Iteration   2: 114349.829 ops/s
Iteration   3: 120203.518 ops/s
Iteration   4: 122665.631 ops/s
Iteration   5: 126903.180 ops/s
Iteration   6: 109833.813 ops/s
Iteration   7: 115078.524 ops/s
Iteration   8: 124758.345 ops/s
Iteration   9: 125766.780 ops/s
Iteration  10: 109615.450 ops/s
Iteration  11: 112865.380 ops/s
Iteration  12: 115522.713 ops/s
Iteration  13: 112706.675 ops/s
Iteration  14: 125877.439 ops/s
Iteration  15: 123594.449 ops/s
Iteration  16: 124253.672 ops/s
Iteration  17: 113564.462 ops/s
Iteration  18: 115708.085 ops/s
Iteration  19: 133248.881 ops/s
Iteration  20: 104916.711 ops/s
Iteration  21: 103081.341 ops/s
Iteration  22: 122704.066 ops/s
Iteration  23: 121759.554 ops/s
Iteration  24: 115376.841 ops/s
Iteration  25: 123190.139 ops/s
Iteration  26: 110258.083 ops/s
Iteration  27: 108639.888 ops/s
Iteration  28: 117160.176 ops/s
Iteration  29: 123169.565 ops/s
Iteration  30: 115925.760 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableSampleTest._Benchmark.benchmark_emitLastOther":
  117672.730 ±(99.9%) 4742.686 ops/s [Average]
  (min, avg, max) = (103081.341, 117672.730, 133248.881), stdev = 7098.629
  CI (99.9%): [112930.044, 122415.416] (assumes normal distribution)


# Run complete. Total time: 00:01:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score      Error  Units
ObservableSampleTest._Benchmark.benchmark_emitLastOther  thrpt   30  117672.730 ± 4742.686  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_bufferTimedSupplierReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_bufferTimedSupplierReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 207051.931 ops/s
# Warmup Iteration   2: 509994.205 ops/s
# Warmup Iteration   3: 543485.677 ops/s
# Warmup Iteration   4: 577825.308 ops/s
# Warmup Iteration   5: 581533.018 ops/s
# Warmup Iteration   6: 553795.655 ops/s
# Warmup Iteration   7: 580815.741 ops/s
# Warmup Iteration   8: 582681.794 ops/s
# Warmup Iteration   9: 548015.274 ops/s
# Warmup Iteration  10: 567913.805 ops/s
# Warmup Iteration  11: 392647.535 ops/s
# Warmup Iteration  12: 518523.164 ops/s
# Warmup Iteration  13: 570312.984 ops/s
# Warmup Iteration  14: 570940.959 ops/s
# Warmup Iteration  15: 581867.472 ops/s
# Warmup Iteration  16: 575242.997 ops/s
# Warmup Iteration  17: 602756.521 ops/s
# Warmup Iteration  18: 619289.715 ops/s
# Warmup Iteration  19: 578908.843 ops/s
# Warmup Iteration  20: 599051.946 ops/s
# Warmup Iteration  21: 607422.313 ops/s
# Warmup Iteration  22: 599162.964 ops/s
# Warmup Iteration  23: 580616.696 ops/s
# Warmup Iteration  24: 598039.197 ops/s
# Warmup Iteration  25: 574783.880 ops/s
# Warmup Iteration  26: 593536.636 ops/s
# Warmup Iteration  27: 617171.545 ops/s
# Warmup Iteration  28: 581090.137 ops/s
# Warmup Iteration  29: 603553.447 ops/s
# Warmup Iteration  30: 605543.934 ops/s
Iteration   1: 590703.647 ops/s
Iteration   2: 620766.305 ops/s
Iteration   3: 564027.173 ops/s
Iteration   4: 599733.089 ops/s
Iteration   5: 609320.755 ops/s
Iteration   6: 586576.776 ops/s
Iteration   7: 622912.166 ops/s
Iteration   8: 612362.961 ops/s
Iteration   9: 580790.086 ops/s
Iteration  10: 613570.728 ops/s
Iteration  11: 584243.560 ops/s
Iteration  12: 584152.971 ops/s
Iteration  13: 620868.045 ops/s
Iteration  14: 563087.270 ops/s
Iteration  15: 585364.509 ops/s
Iteration  16: 586417.267 ops/s
Iteration  17: 609194.256 ops/s
Iteration  18: 603447.296 ops/s
Iteration  19: 582747.686 ops/s
Iteration  20: 622242.900 ops/s
Iteration  21: 576601.095 ops/s
Iteration  22: 625679.505 ops/s
Iteration  23: 589714.505 ops/s
Iteration  24: 592612.324 ops/s
Iteration  25: 593274.597 ops/s
Iteration  26: 615675.139 ops/s
Iteration  27: 609516.053 ops/s
Iteration  28: 574964.353 ops/s
Iteration  29: 625486.354 ops/s
Iteration  30: 576471.008 ops/s


Result "io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_bufferTimedSupplierReturnsNull":
  597417.479 ±(99.9%) 12575.015 ops/s [Average]
  (min, avg, max) = (563087.270, 597417.479, 625679.505), stdev = 18821.692
  CI (99.9%): [584842.464, 609992.494] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score       Error  Units
ObservableNullTests._Benchmark.benchmark_bufferTimedSupplierReturnsNull  thrpt   30  597417.479 ± 12575.015  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_noCompletionCancelExact$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_noCompletionCancelExact

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.789 ops/s
# Warmup Iteration   2: 7902.279 ops/s
# Warmup Iteration   3: 27617.758 ops/s
# Warmup Iteration   4: 35510.457 ops/s
# Warmup Iteration   5: 35139.804 ops/s
# Warmup Iteration   6: 66670.402 ops/s
# Warmup Iteration   7: 57730.343 ops/s
# Warmup Iteration   8: 99117.652 ops/s
# Warmup Iteration   9: 71697.408 ops/s
# Warmup Iteration  10: 96828.780 ops/s
# Warmup Iteration  11: 137981.315 ops/s
# Warmup Iteration  12: 115215.547 ops/s
# Warmup Iteration  13: 111082.368 ops/s
# Warmup Iteration  14: 107585.788 ops/s
# Warmup Iteration  15: 107325.096 ops/s
# Warmup Iteration  16: 110975.560 ops/s
# Warmup Iteration  17: 129605.361 ops/s
# Warmup Iteration  18: 120475.964 ops/s
# Warmup Iteration  19: 121942.652 ops/s
# Warmup Iteration  20: 112427.762 ops/s
# Warmup Iteration  21: 107201.779 ops/s
# Warmup Iteration  22: 119117.778 ops/s
# Warmup Iteration  23: 117127.470 ops/s
# Warmup Iteration  24: 121710.282 ops/s
# Warmup Iteration  25: 116296.857 ops/s
# Warmup Iteration  26: 112250.019 ops/s
# Warmup Iteration  27: 105903.384 ops/s
# Warmup Iteration  28: 123658.653 ops/s
# Warmup Iteration  29: 129443.716 ops/s
# Warmup Iteration  30: 115309.411 ops/s
Iteration   1: 112975.763 ops/s
Iteration   2: 124307.229 ops/s
Iteration   3: 114980.922 ops/s
Iteration   4: 128187.752 ops/s
Iteration   5: 116501.231 ops/s
Iteration   6: 110183.030 ops/s
Iteration   7: 116736.339 ops/s
Iteration   8: 126739.977 ops/s
Iteration   9: 122843.522 ops/s
Iteration  10: 118938.989 ops/s
Iteration  11: 111908.075 ops/s
Iteration  12: 111055.506 ops/s
Iteration  13: 118841.772 ops/s
Iteration  14: 112988.884 ops/s
Iteration  15: 123311.650 ops/s
Iteration  16: 106300.436 ops/s
Iteration  17: 110961.552 ops/s
Iteration  18: 118195.794 ops/s
Iteration  19: 126166.530 ops/s
Iteration  20: 109290.297 ops/s
Iteration  21: 114628.271 ops/s
Iteration  22: 111188.855 ops/s
Iteration  23: 111323.065 ops/s
Iteration  24: 111600.076 ops/s
Iteration  25: 103245.840 ops/s
Iteration  26: 112517.335 ops/s
Iteration  27: 106684.212 ops/s
Iteration  28: 120638.079 ops/s
Iteration  29: 109427.292 ops/s
Iteration  30: 129303.270 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_noCompletionCancelExact":
  115732.385 ±(99.9%) 4617.220 ops/s [Average]
  (min, avg, max) = (103245.840, 115732.385, 129303.270), stdev = 6910.839
  CI (99.9%): [111115.164, 120349.605] (assumes normal distribution)


# Run complete. Total time: 00:01:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score      Error  Units
ObservableBufferTest._Benchmark.benchmark_noCompletionCancelExact  thrpt   30  115732.385 ± 4617.220  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReplayEagerTruncateTest._Benchmark.benchmark_disposeNoNeedForResetTimeAndSIzeBound$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReplayEagerTruncateTest._Benchmark.benchmark_disposeNoNeedForResetTimeAndSIzeBound

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 38525.043 ops/s
# Warmup Iteration   2: 170108.960 ops/s
# Warmup Iteration   3: 178148.016 ops/s
# Warmup Iteration   4: 151246.768 ops/s
# Warmup Iteration   5: 193523.325 ops/s
# Warmup Iteration   6: 193338.645 ops/s
# Warmup Iteration   7: 190590.876 ops/s
# Warmup Iteration   8: 184997.308 ops/s
# Warmup Iteration   9: 189214.392 ops/s
# Warmup Iteration  10: 186212.380 ops/s
# Warmup Iteration  11: 190946.605 ops/s
# Warmup Iteration  12: 191483.514 ops/s
# Warmup Iteration  13: 196954.083 ops/s
# Warmup Iteration  14: 189342.062 ops/s
# Warmup Iteration  15: 190354.592 ops/s
# Warmup Iteration  16: 196405.236 ops/s
# Warmup Iteration  17: 189653.648 ops/s
# Warmup Iteration  18: 198770.648 ops/s
# Warmup Iteration  19: 189269.516 ops/s
# Warmup Iteration  20: 194070.665 ops/s
# Warmup Iteration  21: 191139.563 ops/s
# Warmup Iteration  22: 191470.638 ops/s
# Warmup Iteration  23: 198232.000 ops/s
# Warmup Iteration  24: 194496.980 ops/s
# Warmup Iteration  25: 186660.894 ops/s
# Warmup Iteration  26: 196932.491 ops/s
# Warmup Iteration  27: 187891.576 ops/s
# Warmup Iteration  28: 192443.682 ops/s
# Warmup Iteration  29: 195380.494 ops/s
# Warmup Iteration  30: 193048.100 ops/s
Iteration   1: 198602.762 ops/s
Iteration   2: 187037.142 ops/s
Iteration   3: 196321.844 ops/s
Iteration   4: 187819.801 ops/s
Iteration   5: 185292.888 ops/s
Iteration   6: 200506.509 ops/s
Iteration   7: 186940.438 ops/s
Iteration   8: 192220.091 ops/s
Iteration   9: 199011.004 ops/s
Iteration  10: 196882.273 ops/s
Iteration  11: 186384.606 ops/s
Iteration  12: 192934.811 ops/s
Iteration  13: 183144.870 ops/s
Iteration  14: 192121.999 ops/s
Iteration  15: 192221.120 ops/s
Iteration  16: 191423.958 ops/s
Iteration  17: 187287.961 ops/s
Iteration  18: 192445.044 ops/s
Iteration  19: 188751.579 ops/s
Iteration  20: 186114.768 ops/s
Iteration  21: 191293.837 ops/s
Iteration  22: 197884.076 ops/s
Iteration  23: 189072.073 ops/s
Iteration  24: 189684.838 ops/s
Iteration  25: 190934.216 ops/s
Iteration  26: 192128.980 ops/s
Iteration  27: 193042.023 ops/s
Iteration  28: 188138.429 ops/s
Iteration  29: 189103.447 ops/s
Iteration  30: 193107.344 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableReplayEagerTruncateTest._Benchmark.benchmark_disposeNoNeedForResetTimeAndSIzeBound":
  191261.824 ±(99.9%) 2932.360 ops/s [Average]
  (min, avg, max) = (183144.870, 191261.824, 200506.509), stdev = 4389.019
  CI (99.9%): [188329.464, 194194.185] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                      Mode  Cnt       Score      Error  Units
ObservableReplayEagerTruncateTest._Benchmark.benchmark_disposeNoNeedForResetTimeAndSIzeBound  thrpt   30  191261.824 ± 2932.360  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleZipIterableTest._Benchmark.benchmark_zipperReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleZipIterableTest._Benchmark.benchmark_zipperReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 186144.246 ops/s
# Warmup Iteration   2: 452896.068 ops/s
# Warmup Iteration   3: 510259.884 ops/s
# Warmup Iteration   4: 520476.931 ops/s
# Warmup Iteration   5: 575931.267 ops/s
# Warmup Iteration   6: 550809.014 ops/s
# Warmup Iteration   7: 548884.425 ops/s
# Warmup Iteration   8: 570343.100 ops/s
# Warmup Iteration   9: 562104.552 ops/s
# Warmup Iteration  10: 579139.243 ops/s
# Warmup Iteration  11: 538463.482 ops/s
# Warmup Iteration  12: 567177.013 ops/s
# Warmup Iteration  13: 571926.228 ops/s
# Warmup Iteration  14: 553289.085 ops/s
# Warmup Iteration  15: 565221.567 ops/s
# Warmup Iteration  16: 559060.886 ops/s
# Warmup Iteration  17: 573757.158 ops/s
# Warmup Iteration  18: 600183.270 ops/s
# Warmup Iteration  19: 564000.439 ops/s
# Warmup Iteration  20: 597037.958 ops/s
# Warmup Iteration  21: 602178.757 ops/s
# Warmup Iteration  22: 584425.613 ops/s
# Warmup Iteration  23: 568464.435 ops/s
# Warmup Iteration  24: 587295.516 ops/s
# Warmup Iteration  25: 572197.128 ops/s
# Warmup Iteration  26: 589535.566 ops/s
# Warmup Iteration  27: 573526.559 ops/s
# Warmup Iteration  28: 602086.662 ops/s
# Warmup Iteration  29: 561328.457 ops/s
# Warmup Iteration  30: 563676.145 ops/s
Iteration   1: 586685.310 ops/s
Iteration   2: 569058.675 ops/s
Iteration   3: 586919.069 ops/s
Iteration   4: 577578.531 ops/s
Iteration   5: 598238.841 ops/s
Iteration   6: 580355.449 ops/s
Iteration   7: 575469.954 ops/s
Iteration   8: 609424.614 ops/s
Iteration   9: 571743.906 ops/s
Iteration  10: 593729.550 ops/s
Iteration  11: 555864.233 ops/s
Iteration  12: 607841.099 ops/s
Iteration  13: 591826.128 ops/s
Iteration  14: 564406.860 ops/s
Iteration  15: 568080.697 ops/s
Iteration  16: 593867.838 ops/s
Iteration  17: 559633.387 ops/s
Iteration  18: 615460.877 ops/s
Iteration  19: 571029.538 ops/s
Iteration  20: 597119.101 ops/s
Iteration  21: 574828.527 ops/s
Iteration  22: 597872.037 ops/s
Iteration  23: 579449.664 ops/s
Iteration  24: 600292.689 ops/s
Iteration  25: 592498.019 ops/s
Iteration  26: 564193.835 ops/s
Iteration  27: 611259.468 ops/s
Iteration  28: 585589.251 ops/s
Iteration  29: 573177.706 ops/s
Iteration  30: 505357.693 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleZipIterableTest._Benchmark.benchmark_zipperReturnsNull":
  581961.752 ±(99.9%) 14409.772 ops/s [Average]
  (min, avg, max) = (505357.693, 581961.752, 615460.877), stdev = 21567.870
  CI (99.9%): [567551.979, 596371.524] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score       Error  Units
SingleZipIterableTest._Benchmark.benchmark_zipperReturnsNull  thrpt   30  581961.752 ± 14409.772  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleZipIterableTest._Benchmark.benchmark_zipperThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleZipIterableTest._Benchmark.benchmark_zipperThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 184079.558 ops/s
# Warmup Iteration   2: 434240.958 ops/s
# Warmup Iteration   3: 552019.033 ops/s
# Warmup Iteration   4: 550538.475 ops/s
# Warmup Iteration   5: 573004.130 ops/s
# Warmup Iteration   6: 558206.885 ops/s
# Warmup Iteration   7: 544068.720 ops/s
# Warmup Iteration   8: 564836.521 ops/s
# Warmup Iteration   9: 547610.708 ops/s
# Warmup Iteration  10: 558806.079 ops/s
# Warmup Iteration  11: 555136.163 ops/s
# Warmup Iteration  12: 517363.631 ops/s
# Warmup Iteration  13: 574698.829 ops/s
# Warmup Iteration  14: 552236.461 ops/s
# Warmup Iteration  15: 561427.124 ops/s
# Warmup Iteration  16: 576805.781 ops/s
# Warmup Iteration  17: 564971.772 ops/s
# Warmup Iteration  18: 578797.941 ops/s
# Warmup Iteration  19: 573880.311 ops/s
# Warmup Iteration  20: 563721.234 ops/s
# Warmup Iteration  21: 567369.291 ops/s
# Warmup Iteration  22: 597055.981 ops/s
# Warmup Iteration  23: 554283.078 ops/s
# Warmup Iteration  24: 599159.633 ops/s
# Warmup Iteration  25: 564693.596 ops/s
# Warmup Iteration  26: 582114.892 ops/s
# Warmup Iteration  27: 600601.145 ops/s
# Warmup Iteration  28: 584553.783 ops/s
# Warmup Iteration  29: 576732.917 ops/s
# Warmup Iteration  30: 601392.349 ops/s
Iteration   1: 561888.577 ops/s
Iteration   2: 568211.608 ops/s
Iteration   3: 607733.762 ops/s
Iteration   4: 563630.385 ops/s
Iteration   5: 583481.617 ops/s
Iteration   6: 559380.008 ops/s
Iteration   7: 595959.346 ops/s
Iteration   8: 581326.925 ops/s
Iteration   9: 569652.192 ops/s
Iteration  10: 599938.516 ops/s
Iteration  11: 582716.320 ops/s
Iteration  12: 564684.856 ops/s
Iteration  13: 590587.323 ops/s
Iteration  14: 562262.404 ops/s
Iteration  15: 586361.821 ops/s
Iteration  16: 576265.357 ops/s
Iteration  17: 581151.909 ops/s
Iteration  18: 600373.158 ops/s
Iteration  19: 574452.369 ops/s
Iteration  20: 572968.962 ops/s
Iteration  21: 563915.222 ops/s
Iteration  22: 599581.458 ops/s
Iteration  23: 576843.125 ops/s
Iteration  24: 581636.661 ops/s
Iteration  25: 586337.444 ops/s
Iteration  26: 572666.295 ops/s
Iteration  27: 609784.284 ops/s
Iteration  28: 597882.067 ops/s
Iteration  29: 598336.085 ops/s
Iteration  30: 601604.019 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleZipIterableTest._Benchmark.benchmark_zipperThrows":
  582387.136 ±(99.9%) 10010.002 ops/s [Average]
  (min, avg, max) = (559380.008, 582387.136, 609784.284), stdev = 14982.500
  CI (99.9%): [572377.134, 592397.137] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score       Error  Units
SingleZipIterableTest._Benchmark.benchmark_zipperThrows  thrpt   30  582387.136 ± 10010.002  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleZipArrayTest._Benchmark.benchmark_zipperReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleZipArrayTest._Benchmark.benchmark_zipperReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 186685.305 ops/s
# Warmup Iteration   2: 455396.437 ops/s
# Warmup Iteration   3: 564908.131 ops/s
# Warmup Iteration   4: 512191.259 ops/s
# Warmup Iteration   5: 561604.083 ops/s
# Warmup Iteration   6: 506826.672 ops/s
# Warmup Iteration   7: 571964.595 ops/s
# Warmup Iteration   8: 517794.233 ops/s
# Warmup Iteration   9: 547734.788 ops/s
# Warmup Iteration  10: 561255.453 ops/s
# Warmup Iteration  11: 581712.424 ops/s
# Warmup Iteration  12: 549008.199 ops/s
# Warmup Iteration  13: 572084.022 ops/s
# Warmup Iteration  14: 587312.905 ops/s
# Warmup Iteration  15: 549850.790 ops/s
# Warmup Iteration  16: 566469.989 ops/s
# Warmup Iteration  17: 591188.878 ops/s
# Warmup Iteration  18: 604364.054 ops/s
# Warmup Iteration  19: 562975.315 ops/s
# Warmup Iteration  20: 587035.344 ops/s
# Warmup Iteration  21: 583950.169 ops/s
# Warmup Iteration  22: 586965.335 ops/s
# Warmup Iteration  23: 595658.084 ops/s
# Warmup Iteration  24: 569985.199 ops/s
# Warmup Iteration  25: 587206.965 ops/s
# Warmup Iteration  26: 609070.594 ops/s
# Warmup Iteration  27: 574472.300 ops/s
# Warmup Iteration  28: 593834.727 ops/s
# Warmup Iteration  29: 583637.218 ops/s
# Warmup Iteration  30: 585598.188 ops/s
Iteration   1: 605527.700 ops/s
Iteration   2: 575864.552 ops/s
Iteration   3: 586562.857 ops/s
Iteration   4: 595783.801 ops/s
Iteration   5: 589026.130 ops/s
Iteration   6: 607252.341 ops/s
Iteration   7: 569428.369 ops/s
Iteration   8: 591294.077 ops/s
Iteration   9: 582047.274 ops/s
Iteration  10: 604334.344 ops/s
Iteration  11: 582962.566 ops/s
Iteration  12: 585523.218 ops/s
Iteration  13: 604217.541 ops/s
Iteration  14: 572128.819 ops/s
Iteration  15: 576463.048 ops/s
Iteration  16: 609135.064 ops/s
Iteration  17: 584019.125 ops/s
Iteration  18: 580983.159 ops/s
Iteration  19: 577035.388 ops/s
Iteration  20: 591749.040 ops/s
Iteration  21: 601287.659 ops/s
Iteration  22: 572583.786 ops/s
Iteration  23: 581210.860 ops/s
Iteration  24: 601781.553 ops/s
Iteration  25: 472540.619 ops/s
Iteration  26: 612351.200 ops/s
Iteration  27: 582179.592 ops/s
Iteration  28: 585441.193 ops/s
Iteration  29: 604913.898 ops/s
Iteration  30: 567036.419 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleZipArrayTest._Benchmark.benchmark_zipperReturnsNull":
  585088.840 ±(99.9%) 16625.808 ops/s [Average]
  (min, avg, max) = (472540.619, 585088.840, 612351.200), stdev = 24884.729
  CI (99.9%): [568463.032, 601714.648] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score       Error  Units
SingleZipArrayTest._Benchmark.benchmark_zipperReturnsNull  thrpt   30  585088.840 ± 16625.808  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleZipArrayTest._Benchmark.benchmark_zipperThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleZipArrayTest._Benchmark.benchmark_zipperThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 227783.503 ops/s
# Warmup Iteration   2: 433872.990 ops/s
# Warmup Iteration   3: 538395.845 ops/s
# Warmup Iteration   4: 559678.686 ops/s
# Warmup Iteration   5: 486430.408 ops/s
# Warmup Iteration   6: 522013.081 ops/s
# Warmup Iteration   7: 567984.516 ops/s
# Warmup Iteration   8: 518587.355 ops/s
# Warmup Iteration   9: 554031.230 ops/s
# Warmup Iteration  10: 569897.963 ops/s
# Warmup Iteration  11: 573512.025 ops/s
# Warmup Iteration  12: 539444.269 ops/s
# Warmup Iteration  13: 555930.035 ops/s
# Warmup Iteration  14: 541225.077 ops/s
# Warmup Iteration  15: 567127.951 ops/s
# Warmup Iteration  16: 569149.692 ops/s
# Warmup Iteration  17: 552499.517 ops/s
# Warmup Iteration  18: 574312.301 ops/s
# Warmup Iteration  19: 570461.874 ops/s
# Warmup Iteration  20: 584862.965 ops/s
# Warmup Iteration  21: 572869.851 ops/s
# Warmup Iteration  22: 581578.425 ops/s
# Warmup Iteration  23: 601134.709 ops/s
# Warmup Iteration  24: 561816.509 ops/s
# Warmup Iteration  25: 551268.183 ops/s
# Warmup Iteration  26: 586450.950 ops/s
# Warmup Iteration  27: 588624.129 ops/s
# Warmup Iteration  28: 560222.354 ops/s
# Warmup Iteration  29: 589452.810 ops/s
# Warmup Iteration  30: 564105.416 ops/s
Iteration   1: 587181.523 ops/s
Iteration   2: 567713.840 ops/s
Iteration   3: 569321.734 ops/s
Iteration   4: 577073.557 ops/s
Iteration   5: 569461.879 ops/s
Iteration   6: 541977.893 ops/s
Iteration   7: 569697.811 ops/s
Iteration   8: 559268.102 ops/s
Iteration   9: 579262.782 ops/s
Iteration  10: 589560.833 ops/s
Iteration  11: 556225.743 ops/s
Iteration  12: 561222.906 ops/s
Iteration  13: 574518.993 ops/s
Iteration  14: 554383.883 ops/s
Iteration  15: 566636.433 ops/s
Iteration  16: 580597.748 ops/s
Iteration  17: 550626.815 ops/s
Iteration  18: 556861.123 ops/s
Iteration  19: 560580.200 ops/s
Iteration  20: 558335.899 ops/s
Iteration  21: 570671.235 ops/s
Iteration  22: 580120.118 ops/s
Iteration  23: 548707.799 ops/s
Iteration  24: 576928.723 ops/s
Iteration  25: 556845.945 ops/s
Iteration  26: 544718.634 ops/s
Iteration  27: 572381.762 ops/s
Iteration  28: 559062.041 ops/s
Iteration  29: 581159.930 ops/s
Iteration  30: 552505.229 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleZipArrayTest._Benchmark.benchmark_zipperThrows":
  565787.037 ±(99.9%) 8403.012 ops/s [Average]
  (min, avg, max) = (541977.893, 565787.037, 589560.833), stdev = 12577.233
  CI (99.9%): [557384.025, 574190.049] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score      Error  Units
SingleZipArrayTest._Benchmark.benchmark_zipperThrows  thrpt   30  565787.037 ± 8403.012  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleMapTest._Benchmark.benchmark_mapError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleMapTest._Benchmark.benchmark_mapError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 345603.668 ops/s
# Warmup Iteration   2: 606465.214 ops/s
# Warmup Iteration   3: 709889.225 ops/s
# Warmup Iteration   4: 728533.517 ops/s
# Warmup Iteration   5: 684522.786 ops/s
# Warmup Iteration   6: 696139.942 ops/s
# Warmup Iteration   7: 752548.554 ops/s
# Warmup Iteration   8: 721434.604 ops/s
# Warmup Iteration   9: 711100.233 ops/s
# Warmup Iteration  10: 713605.754 ops/s
# Warmup Iteration  11: 726864.668 ops/s
# Warmup Iteration  12: 732394.138 ops/s
# Warmup Iteration  13: 705175.567 ops/s
# Warmup Iteration  14: 743098.375 ops/s
# Warmup Iteration  15: 736647.454 ops/s
# Warmup Iteration  16: 698444.763 ops/s
# Warmup Iteration  17: 782367.881 ops/s
# Warmup Iteration  18: 752150.116 ops/s
# Warmup Iteration  19: 787271.844 ops/s
# Warmup Iteration  20: 752245.738 ops/s
# Warmup Iteration  21: 756611.557 ops/s
# Warmup Iteration  22: 771742.212 ops/s
# Warmup Iteration  23: 784584.063 ops/s
# Warmup Iteration  24: 744686.008 ops/s
# Warmup Iteration  25: 744545.897 ops/s
# Warmup Iteration  26: 717936.322 ops/s
# Warmup Iteration  27: 765488.562 ops/s
# Warmup Iteration  28: 770270.801 ops/s
# Warmup Iteration  29: 763568.057 ops/s
# Warmup Iteration  30: 789392.853 ops/s
Iteration   1: 751162.236 ops/s
Iteration   2: 787717.644 ops/s
Iteration   3: 763387.474 ops/s
Iteration   4: 785042.339 ops/s
Iteration   5: 791036.240 ops/s
Iteration   6: 733799.448 ops/s
Iteration   7: 782493.525 ops/s
Iteration   8: 753371.073 ops/s
Iteration   9: 752833.860 ops/s
Iteration  10: 782894.612 ops/s
Iteration  11: 745481.598 ops/s
Iteration  12: 793042.233 ops/s
Iteration  13: 790643.428 ops/s
Iteration  14: 750568.624 ops/s
Iteration  15: 756743.311 ops/s
Iteration  16: 801447.845 ops/s
Iteration  17: 738847.823 ops/s
Iteration  18: 766829.878 ops/s
Iteration  19: 788370.166 ops/s
Iteration  20: 584782.187 ops/s
Iteration  21: 766612.088 ops/s
Iteration  22: 775435.949 ops/s
Iteration  23: 775055.573 ops/s
Iteration  24: 786647.761 ops/s
Iteration  25: 751010.130 ops/s
Iteration  26: 796456.809 ops/s
Iteration  27: 703779.921 ops/s
Iteration  28: 783013.156 ops/s
Iteration  29: 769064.217 ops/s
Iteration  30: 744858.036 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleMapTest._Benchmark.benchmark_mapError":
  761747.639 ±(99.9%) 26856.138 ops/s [Average]
  (min, avg, max) = (584782.187, 761747.639, 801447.845), stdev = 40197.006
  CI (99.9%): [734891.502, 788603.777] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     Mode  Cnt       Score       Error  Units
SingleMapTest._Benchmark.benchmark_mapError  thrpt   30  761747.639 ± 26856.138  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleZipIterableTest._Benchmark.benchmark_hasNextThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleZipIterableTest._Benchmark.benchmark_hasNextThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 188222.367 ops/s
# Warmup Iteration   2: 437354.593 ops/s
# Warmup Iteration   3: 428111.730 ops/s
# Warmup Iteration   4: 424297.685 ops/s
# Warmup Iteration   5: 490923.315 ops/s
# Warmup Iteration   6: 480234.392 ops/s
# Warmup Iteration   7: 505583.740 ops/s
# Warmup Iteration   8: 482833.116 ops/s
# Warmup Iteration   9: 501791.167 ops/s
# Warmup Iteration  10: 489863.711 ops/s
# Warmup Iteration  11: 483316.267 ops/s
# Warmup Iteration  12: 518197.600 ops/s
# Warmup Iteration  13: 483216.807 ops/s
# Warmup Iteration  14: 510950.510 ops/s
# Warmup Iteration  15: 491362.941 ops/s
# Warmup Iteration  16: 492610.712 ops/s
# Warmup Iteration  17: 521541.048 ops/s
# Warmup Iteration  18: 505908.134 ops/s
# Warmup Iteration  19: 514949.103 ops/s
# Warmup Iteration  20: 522027.490 ops/s
# Warmup Iteration  21: 523060.961 ops/s
# Warmup Iteration  22: 501724.825 ops/s
# Warmup Iteration  23: 529943.629 ops/s
# Warmup Iteration  24: 504143.183 ops/s
# Warmup Iteration  25: 509481.627 ops/s
# Warmup Iteration  26: 502680.372 ops/s
# Warmup Iteration  27: 512050.999 ops/s
# Warmup Iteration  28: 515238.329 ops/s
# Warmup Iteration  29: 497725.398 ops/s
# Warmup Iteration  30: 513474.407 ops/s
Iteration   1: 523263.569 ops/s
Iteration   2: 504488.051 ops/s
Iteration   3: 530219.752 ops/s
Iteration   4: 505120.106 ops/s
Iteration   5: 526086.483 ops/s
Iteration   6: 502424.009 ops/s
Iteration   7: 510816.250 ops/s
Iteration   8: 533274.859 ops/s
Iteration   9: 494670.446 ops/s
Iteration  10: 528861.023 ops/s
Iteration  11: 510426.894 ops/s
Iteration  12: 536138.010 ops/s
Iteration  13: 520293.618 ops/s
Iteration  14: 508909.082 ops/s
Iteration  15: 519659.804 ops/s
Iteration  16: 530229.075 ops/s
Iteration  17: 504745.520 ops/s
Iteration  18: 518451.512 ops/s
Iteration  19: 529849.133 ops/s
Iteration  20: 512509.537 ops/s
Iteration  21: 524002.001 ops/s
Iteration  22: 506572.541 ops/s
Iteration  23: 522918.995 ops/s
Iteration  24: 507331.947 ops/s
Iteration  25: 510854.470 ops/s
Iteration  26: 525122.522 ops/s
Iteration  27: 503908.936 ops/s
Iteration  28: 526672.752 ops/s
Iteration  29: 510538.719 ops/s
Iteration  30: 517432.599 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleZipIterableTest._Benchmark.benchmark_hasNextThrows":
  516859.741 ±(99.9%) 7288.040 ops/s [Average]
  (min, avg, max) = (494670.446, 516859.741, 536138.010), stdev = 10908.396
  CI (99.9%): [509571.701, 524147.780] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score      Error  Units
SingleZipIterableTest._Benchmark.benchmark_hasNextThrows  thrpt   30  516859.741 ± 7288.040  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleZipIterableTest._Benchmark.benchmark_iteratorThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleZipIterableTest._Benchmark.benchmark_iteratorThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 273845.690 ops/s
# Warmup Iteration   2: 516172.000 ops/s
# Warmup Iteration   3: 609144.747 ops/s
# Warmup Iteration   4: 568886.048 ops/s
# Warmup Iteration   5: 540494.783 ops/s
# Warmup Iteration   6: 615162.669 ops/s
# Warmup Iteration   7: 646052.084 ops/s
# Warmup Iteration   8: 596361.331 ops/s
# Warmup Iteration   9: 629710.353 ops/s
# Warmup Iteration  10: 599525.174 ops/s
# Warmup Iteration  11: 610617.455 ops/s
# Warmup Iteration  12: 641307.837 ops/s
# Warmup Iteration  13: 655493.451 ops/s
# Warmup Iteration  14: 592255.766 ops/s
# Warmup Iteration  15: 627782.009 ops/s
# Warmup Iteration  16: 613966.084 ops/s
# Warmup Iteration  17: 651015.982 ops/s
# Warmup Iteration  18: 633136.590 ops/s
# Warmup Iteration  19: 655610.139 ops/s
# Warmup Iteration  20: 657953.142 ops/s
# Warmup Iteration  21: 643301.206 ops/s
# Warmup Iteration  22: 649401.693 ops/s
# Warmup Iteration  23: 627900.552 ops/s
# Warmup Iteration  24: 640088.515 ops/s
# Warmup Iteration  25: 633076.819 ops/s
# Warmup Iteration  26: 618927.423 ops/s
# Warmup Iteration  27: 656901.006 ops/s
# Warmup Iteration  28: 629569.177 ops/s
# Warmup Iteration  29: 629522.387 ops/s
# Warmup Iteration  30: 650929.808 ops/s
Iteration   1: 618366.732 ops/s
Iteration   2: 639713.265 ops/s
Iteration   3: 656086.750 ops/s
Iteration   4: 630644.033 ops/s
Iteration   5: 665342.159 ops/s
Iteration   6: 628772.610 ops/s
Iteration   7: 654498.348 ops/s
Iteration   8: 656383.637 ops/s
Iteration   9: 629378.928 ops/s
Iteration  10: 665459.268 ops/s
Iteration  11: 613206.933 ops/s
Iteration  12: 643002.660 ops/s
Iteration  13: 657810.756 ops/s
Iteration  14: 643113.555 ops/s
Iteration  15: 479942.841 ops/s
Iteration  16: 623816.519 ops/s
Iteration  17: 639763.335 ops/s
Iteration  18: 657268.760 ops/s
Iteration  19: 632706.130 ops/s
Iteration  20: 653785.959 ops/s
Iteration  21: 663471.194 ops/s
Iteration  22: 628948.218 ops/s
Iteration  23: 654620.878 ops/s
Iteration  24: 622096.192 ops/s
Iteration  25: 658708.230 ops/s
Iteration  26: 650988.015 ops/s
Iteration  27: 618609.914 ops/s
Iteration  28: 642920.115 ops/s
Iteration  29: 637841.097 ops/s
Iteration  30: 621756.587 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleZipIterableTest._Benchmark.benchmark_iteratorThrows":
  636300.787 ±(99.9%) 22321.066 ops/s [Average]
  (min, avg, max) = (479942.841, 636300.787, 665459.268), stdev = 33409.123
  CI (99.9%): [613979.722, 658621.853] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score       Error  Units
SingleZipIterableTest._Benchmark.benchmark_iteratorThrows  thrpt   30  636300.787 ± 22321.066  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDoOnTest._Benchmark.benchmark_doOnSuccessErrors$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDoOnTest._Benchmark.benchmark_doOnSuccessErrors

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 246604.258 ops/s
# Warmup Iteration   2: 596248.812 ops/s
# Warmup Iteration   3: 712211.309 ops/s
# Warmup Iteration   4: 694042.266 ops/s
# Warmup Iteration   5: 710629.745 ops/s
# Warmup Iteration   6: 697661.792 ops/s
# Warmup Iteration   7: 693702.386 ops/s
# Warmup Iteration   8: 692583.319 ops/s
# Warmup Iteration   9: 688045.751 ops/s
# Warmup Iteration  10: 707455.600 ops/s
# Warmup Iteration  11: 682592.901 ops/s
# Warmup Iteration  12: 715483.955 ops/s
# Warmup Iteration  13: 720542.289 ops/s
# Warmup Iteration  14: 699376.070 ops/s
# Warmup Iteration  15: 723190.626 ops/s
# Warmup Iteration  16: 699965.229 ops/s
# Warmup Iteration  17: 736843.945 ops/s
# Warmup Iteration  18: 768212.904 ops/s
# Warmup Iteration  19: 703307.807 ops/s
# Warmup Iteration  20: 748051.460 ops/s
# Warmup Iteration  21: 706819.321 ops/s
# Warmup Iteration  22: 761302.836 ops/s
# Warmup Iteration  23: 772151.475 ops/s
# Warmup Iteration  24: 737734.536 ops/s
# Warmup Iteration  25: 749794.916 ops/s
# Warmup Iteration  26: 745136.172 ops/s
# Warmup Iteration  27: 764844.629 ops/s
# Warmup Iteration  28: 714808.004 ops/s
# Warmup Iteration  29: 767007.404 ops/s
# Warmup Iteration  30: 730493.233 ops/s
Iteration   1: 753899.328 ops/s
Iteration   2: 778043.667 ops/s
Iteration   3: 780093.801 ops/s
Iteration   4: 785248.722 ops/s
Iteration   5: 734832.174 ops/s
Iteration   6: 750259.098 ops/s
Iteration   7: 731459.705 ops/s
Iteration   8: 755332.309 ops/s
Iteration   9: 728586.807 ops/s
Iteration  10: 747986.695 ops/s
Iteration  11: 736001.229 ops/s
Iteration  12: 756190.981 ops/s
Iteration  13: 742715.847 ops/s
Iteration  14: 737548.387 ops/s
Iteration  15: 776300.690 ops/s
Iteration  16: 739104.845 ops/s
Iteration  17: 746540.040 ops/s
Iteration  18: 754820.684 ops/s
Iteration  19: 748424.720 ops/s
Iteration  20: 749464.220 ops/s
Iteration  21: 779470.412 ops/s
Iteration  22: 731479.327 ops/s
Iteration  23: 760292.826 ops/s
Iteration  24: 773457.237 ops/s
Iteration  25: 747712.340 ops/s
Iteration  26: 752944.273 ops/s
Iteration  27: 730813.728 ops/s
Iteration  28: 731253.651 ops/s
Iteration  29: 779952.574 ops/s
Iteration  30: 734537.180 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleDoOnTest._Benchmark.benchmark_doOnSuccessErrors":
  751825.583 ±(99.9%) 11732.466 ops/s [Average]
  (min, avg, max) = (728586.807, 751825.583, 785248.722), stdev = 17560.603
  CI (99.9%): [740093.118, 763558.049] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score       Error  Units
SingleDoOnTest._Benchmark.benchmark_doOnSuccessErrors  thrpt   30  751825.583 ± 11732.466  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleMiscTest._Benchmark.benchmark_onErrorReturnValue$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleMiscTest._Benchmark.benchmark_onErrorReturnValue

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 352703.912 ops/s
# Warmup Iteration   2: 602410.090 ops/s
# Warmup Iteration   3: 714286.725 ops/s
# Warmup Iteration   4: 688353.668 ops/s
# Warmup Iteration   5: 749213.442 ops/s
# Warmup Iteration   6: 684206.069 ops/s
# Warmup Iteration   7: 703452.359 ops/s
# Warmup Iteration   8: 721632.764 ops/s
# Warmup Iteration   9: 692469.926 ops/s
# Warmup Iteration  10: 693235.318 ops/s
# Warmup Iteration  11: 698052.029 ops/s
# Warmup Iteration  12: 720289.149 ops/s
# Warmup Iteration  13: 691931.463 ops/s
# Warmup Iteration  14: 709181.285 ops/s
# Warmup Iteration  15: 674259.571 ops/s
# Warmup Iteration  16: 714142.312 ops/s
# Warmup Iteration  17: 750027.694 ops/s
# Warmup Iteration  18: 736298.432 ops/s
# Warmup Iteration  19: 773144.565 ops/s
# Warmup Iteration  20: 750475.261 ops/s
# Warmup Iteration  21: 764673.882 ops/s
# Warmup Iteration  22: 779326.392 ops/s
# Warmup Iteration  23: 722112.462 ops/s
# Warmup Iteration  24: 755781.902 ops/s
# Warmup Iteration  25: 764682.951 ops/s
# Warmup Iteration  26: 718331.260 ops/s
# Warmup Iteration  27: 773889.290 ops/s
# Warmup Iteration  28: 743487.320 ops/s
# Warmup Iteration  29: 751505.414 ops/s
# Warmup Iteration  30: 768559.311 ops/s
Iteration   1: 759703.498 ops/s
Iteration   2: 777226.615 ops/s
Iteration   3: 743123.944 ops/s
Iteration   4: 747596.432 ops/s
Iteration   5: 783528.470 ops/s
Iteration   6: 732671.933 ops/s
Iteration   7: 768612.928 ops/s
Iteration   8: 743174.023 ops/s
Iteration   9: 712980.690 ops/s
Iteration  10: 677902.754 ops/s
Iteration  11: 734697.349 ops/s
Iteration  12: 784607.786 ops/s
Iteration  13: 745841.757 ops/s
Iteration  14: 743587.261 ops/s
Iteration  15: 742670.598 ops/s
Iteration  16: 776246.663 ops/s
Iteration  17: 731296.647 ops/s
Iteration  18: 775135.211 ops/s
Iteration  19: 744749.862 ops/s
Iteration  20: 773491.779 ops/s
Iteration  21: 756016.234 ops/s
Iteration  22: 742288.111 ops/s
Iteration  23: 790924.034 ops/s
Iteration  24: 698496.194 ops/s
Iteration  25: 801198.842 ops/s
Iteration  26: 777079.623 ops/s
Iteration  27: 758229.777 ops/s
Iteration  28: 764831.657 ops/s
Iteration  29: 726364.124 ops/s
Iteration  30: 757150.683 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleMiscTest._Benchmark.benchmark_onErrorReturnValue":
  752380.849 ±(99.9%) 18222.622 ops/s [Average]
  (min, avg, max) = (677902.754, 752380.849, 801198.842), stdev = 27274.764
  CI (99.9%): [734158.228, 770603.471] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score       Error  Units
SingleMiscTest._Benchmark.benchmark_onErrorReturnValue  thrpt   30  752380.849 ± 18222.622  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDoOnTest._Benchmark.benchmark_doOnSubscribeError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDoOnTest._Benchmark.benchmark_doOnSubscribeError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 180895.869 ops/s
# Warmup Iteration   2: 638287.684 ops/s
# Warmup Iteration   3: 679298.404 ops/s
# Warmup Iteration   4: 715329.981 ops/s
# Warmup Iteration   5: 679636.540 ops/s
# Warmup Iteration   6: 656107.600 ops/s
# Warmup Iteration   7: 672340.331 ops/s
# Warmup Iteration   8: 676768.268 ops/s
# Warmup Iteration   9: 710559.565 ops/s
# Warmup Iteration  10: 669839.618 ops/s
# Warmup Iteration  11: 680839.219 ops/s
# Warmup Iteration  12: 689703.809 ops/s
# Warmup Iteration  13: 709493.138 ops/s
# Warmup Iteration  14: 734191.788 ops/s
# Warmup Iteration  15: 683662.079 ops/s
# Warmup Iteration  16: 704597.988 ops/s
# Warmup Iteration  17: 719870.253 ops/s
# Warmup Iteration  18: 778722.569 ops/s
# Warmup Iteration  19: 777662.062 ops/s
# Warmup Iteration  20: 719346.044 ops/s
# Warmup Iteration  21: 759448.348 ops/s
# Warmup Iteration  22: 726911.865 ops/s
# Warmup Iteration  23: 742099.853 ops/s
# Warmup Iteration  24: 740678.712 ops/s
# Warmup Iteration  25: 712235.476 ops/s
# Warmup Iteration  26: 771519.377 ops/s
# Warmup Iteration  27: 747729.287 ops/s
# Warmup Iteration  28: 721006.289 ops/s
# Warmup Iteration  29: 757881.664 ops/s
# Warmup Iteration  30: 715948.787 ops/s
Iteration   1: 772428.411 ops/s
Iteration   2: 713908.675 ops/s
Iteration   3: 750015.471 ops/s
Iteration   4: 735193.183 ops/s
Iteration   5: 724398.015 ops/s
Iteration   6: 769789.587 ops/s
Iteration   7: 732887.364 ops/s
Iteration   8: 746300.089 ops/s
Iteration   9: 734130.355 ops/s
Iteration  10: 748000.016 ops/s
Iteration  11: 760829.165 ops/s
Iteration  12: 747680.344 ops/s
Iteration  13: 762496.340 ops/s
Iteration  14: 764846.168 ops/s
Iteration  15: 726376.460 ops/s
Iteration  16: 764175.921 ops/s
Iteration  17: 743705.805 ops/s
Iteration  18: 739976.622 ops/s
Iteration  19: 761047.191 ops/s
Iteration  20: 723857.251 ops/s
Iteration  21: 756388.179 ops/s
Iteration  22: 739559.058 ops/s
Iteration  23: 738935.622 ops/s
Iteration  24: 763439.063 ops/s
Iteration  25: 745154.009 ops/s
Iteration  26: 763786.620 ops/s
Iteration  27: 715742.132 ops/s
Iteration  28: 748457.771 ops/s
Iteration  29: 735241.006 ops/s
Iteration  30: 723843.573 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleDoOnTest._Benchmark.benchmark_doOnSubscribeError":
  745086.316 ±(99.9%) 10997.956 ops/s [Average]
  (min, avg, max) = (713908.675, 745086.316, 772428.411), stdev = 16461.224
  CI (99.9%): [734088.359, 756084.272] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score       Error  Units
SingleDoOnTest._Benchmark.benchmark_doOnSubscribeError  thrpt   30  745086.316 ± 10997.956  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDoOnTest._Benchmark.benchmark_onErrorCrashes$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDoOnTest._Benchmark.benchmark_onErrorCrashes

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 40645.306 ops/s
# Warmup Iteration   2: 173970.270 ops/s
# Warmup Iteration   3: 192621.754 ops/s
# Warmup Iteration   4: 190411.350 ops/s
# Warmup Iteration   5: 196859.505 ops/s
# Warmup Iteration   6: 185164.420 ops/s
# Warmup Iteration   7: 193124.496 ops/s
# Warmup Iteration   8: 199345.244 ops/s
# Warmup Iteration   9: 190932.985 ops/s
# Warmup Iteration  10: 196286.721 ops/s
# Warmup Iteration  11: 192406.993 ops/s
# Warmup Iteration  12: 191034.299 ops/s
# Warmup Iteration  13: 195458.226 ops/s
# Warmup Iteration  14: 190794.022 ops/s
# Warmup Iteration  15: 198329.854 ops/s
# Warmup Iteration  16: 187684.446 ops/s
# Warmup Iteration  17: 200063.958 ops/s
# Warmup Iteration  18: 214163.677 ops/s
# Warmup Iteration  19: 201437.657 ops/s
# Warmup Iteration  20: 209069.291 ops/s
# Warmup Iteration  21: 203631.017 ops/s
# Warmup Iteration  22: 205384.066 ops/s
# Warmup Iteration  23: 207421.547 ops/s
# Warmup Iteration  24: 197750.356 ops/s
# Warmup Iteration  25: 202675.340 ops/s
# Warmup Iteration  26: 208800.407 ops/s
# Warmup Iteration  27: 203097.110 ops/s
# Warmup Iteration  28: 212036.360 ops/s
# Warmup Iteration  29: 197460.161 ops/s
# Warmup Iteration  30: 205869.045 ops/s
Iteration   1: 209705.803 ops/s
Iteration   2: 200521.750 ops/s
Iteration   3: 212200.373 ops/s
Iteration   4: 172808.057 ops/s
Iteration   5: 193348.018 ops/s
Iteration   6: 212739.763 ops/s
Iteration   7: 201577.050 ops/s
Iteration   8: 202592.337 ops/s
Iteration   9: 208280.179 ops/s
Iteration  10: 198529.214 ops/s
Iteration  11: 207969.533 ops/s
Iteration  12: 194755.135 ops/s
Iteration  13: 205349.424 ops/s
Iteration  14: 211832.676 ops/s
Iteration  15: 205540.379 ops/s
Iteration  16: 212029.851 ops/s
Iteration  17: 203761.924 ops/s
Iteration  18: 204339.770 ops/s
Iteration  19: 211708.677 ops/s
Iteration  20: 204220.675 ops/s
Iteration  21: 207268.542 ops/s
Iteration  22: 203730.985 ops/s
Iteration  23: 212558.647 ops/s
Iteration  24: 211867.626 ops/s
Iteration  25: 205398.799 ops/s
Iteration  26: 214410.476 ops/s
Iteration  27: 199134.010 ops/s
Iteration  28: 203940.987 ops/s
Iteration  29: 213459.348 ops/s
Iteration  30: 197673.588 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleDoOnTest._Benchmark.benchmark_onErrorCrashes":
  204775.120 ±(99.9%) 5566.489 ops/s [Average]
  (min, avg, max) = (172808.057, 204775.120, 214410.476), stdev = 8331.660
  CI (99.9%): [199208.631, 210341.609] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score      Error  Units
SingleDoOnTest._Benchmark.benchmark_onErrorCrashes  thrpt   30  204775.120 ± 5566.489  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleOnErrorCompleteTest._Benchmark.benchmark_errorMatches$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleOnErrorCompleteTest._Benchmark.benchmark_errorMatches

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 210598.894 ops/s
# Warmup Iteration   2: 499672.876 ops/s
# Warmup Iteration   3: 526822.531 ops/s
# Warmup Iteration   4: 609929.067 ops/s
# Warmup Iteration   5: 588174.808 ops/s
# Warmup Iteration   6: 570905.808 ops/s
# Warmup Iteration   7: 608228.162 ops/s
# Warmup Iteration   8: 573035.195 ops/s
# Warmup Iteration   9: 587529.762 ops/s
# Warmup Iteration  10: 601362.341 ops/s
# Warmup Iteration  11: 592128.506 ops/s
# Warmup Iteration  12: 590597.479 ops/s
# Warmup Iteration  13: 567741.127 ops/s
# Warmup Iteration  14: 595143.576 ops/s
# Warmup Iteration  15: 568468.156 ops/s
# Warmup Iteration  16: 574341.201 ops/s
# Warmup Iteration  17: 630287.890 ops/s
# Warmup Iteration  18: 610041.028 ops/s
# Warmup Iteration  19: 597145.728 ops/s
# Warmup Iteration  20: 639605.497 ops/s
# Warmup Iteration  21: 600017.049 ops/s
# Warmup Iteration  22: 613459.970 ops/s
# Warmup Iteration  23: 629437.252 ops/s
# Warmup Iteration  24: 614205.088 ops/s
# Warmup Iteration  25: 622716.751 ops/s
# Warmup Iteration  26: 609694.096 ops/s
# Warmup Iteration  27: 614453.584 ops/s
# Warmup Iteration  28: 591232.454 ops/s
# Warmup Iteration  29: 629910.207 ops/s
# Warmup Iteration  30: 611475.471 ops/s
Iteration   1: 597773.795 ops/s
Iteration   2: 632016.024 ops/s
Iteration   3: 603201.119 ops/s
Iteration   4: 626700.149 ops/s
Iteration   5: 638117.908 ops/s
Iteration   6: 598919.935 ops/s
Iteration   7: 634539.042 ops/s
Iteration   8: 599069.187 ops/s
Iteration   9: 629787.432 ops/s
Iteration  10: 604081.242 ops/s
Iteration  11: 623132.604 ops/s
Iteration  12: 636013.561 ops/s
Iteration  13: 607424.817 ops/s
Iteration  14: 619725.243 ops/s
Iteration  15: 603463.003 ops/s
Iteration  16: 592590.067 ops/s
Iteration  17: 637416.506 ops/s
Iteration  18: 588266.139 ops/s
Iteration  19: 618539.214 ops/s
Iteration  20: 623042.500 ops/s
Iteration  21: 604978.856 ops/s
Iteration  22: 621954.181 ops/s
Iteration  23: 602724.060 ops/s
Iteration  24: 642764.271 ops/s
Iteration  25: 635140.632 ops/s
Iteration  26: 599640.001 ops/s
Iteration  27: 620283.088 ops/s
Iteration  28: 614513.581 ops/s
Iteration  29: 624122.588 ops/s
Iteration  30: 602336.170 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleOnErrorCompleteTest._Benchmark.benchmark_errorMatches":
  616075.897 ±(99.9%) 10450.196 ops/s [Average]
  (min, avg, max) = (588266.139, 616075.897, 642764.271), stdev = 15641.363
  CI (99.9%): [605625.701, 626526.093] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score       Error  Units
SingleOnErrorCompleteTest._Benchmark.benchmark_errorMatches  thrpt   30  616075.897 ± 10450.196  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleOnErrorCompleteTest._Benchmark.benchmark_error$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleOnErrorCompleteTest._Benchmark.benchmark_error

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 120273.201 ops/s
# Warmup Iteration   2: 489926.941 ops/s
# Warmup Iteration   3: 547868.324 ops/s
# Warmup Iteration   4: 476591.198 ops/s
# Warmup Iteration   5: 583259.714 ops/s
# Warmup Iteration   6: 614761.244 ops/s
# Warmup Iteration   7: 542553.822 ops/s
# Warmup Iteration   8: 557288.293 ops/s
# Warmup Iteration   9: 581908.561 ops/s
# Warmup Iteration  10: 601820.243 ops/s
# Warmup Iteration  11: 578863.286 ops/s
# Warmup Iteration  12: 578498.857 ops/s
# Warmup Iteration  13: 597645.219 ops/s
# Warmup Iteration  14: 574243.197 ops/s
# Warmup Iteration  15: 588279.395 ops/s
# Warmup Iteration  16: 583185.800 ops/s
# Warmup Iteration  17: 601738.728 ops/s
# Warmup Iteration  18: 628861.316 ops/s
# Warmup Iteration  19: 599459.658 ops/s
# Warmup Iteration  20: 620006.226 ops/s
# Warmup Iteration  21: 605642.866 ops/s
# Warmup Iteration  22: 618548.722 ops/s
# Warmup Iteration  23: 621024.385 ops/s
# Warmup Iteration  24: 590443.708 ops/s
# Warmup Iteration  25: 630345.300 ops/s
# Warmup Iteration  26: 643624.628 ops/s
# Warmup Iteration  27: 611931.051 ops/s
# Warmup Iteration  28: 608605.144 ops/s
# Warmup Iteration  29: 487201.492 ops/s
# Warmup Iteration  30: 613060.607 ops/s
Iteration   1: 596535.174 ops/s
Iteration   2: 631624.929 ops/s
Iteration   3: 597622.111 ops/s
Iteration   4: 621559.608 ops/s
Iteration   5: 606067.678 ops/s
Iteration   6: 612840.421 ops/s
Iteration   7: 625699.647 ops/s
Iteration   8: 602501.245 ops/s
Iteration   9: 617177.015 ops/s
Iteration  10: 631445.090 ops/s
Iteration  11: 598289.800 ops/s
Iteration  12: 634156.598 ops/s
Iteration  13: 593026.499 ops/s
Iteration  14: 610634.703 ops/s
Iteration  15: 613306.526 ops/s
Iteration  16: 597273.729 ops/s
Iteration  17: 623266.702 ops/s
Iteration  18: 618773.703 ops/s
Iteration  19: 601732.999 ops/s
Iteration  20: 624075.359 ops/s
Iteration  21: 605050.060 ops/s
Iteration  22: 617191.599 ops/s
Iteration  23: 611255.533 ops/s
Iteration  24: 613810.422 ops/s
Iteration  25: 617402.662 ops/s
Iteration  26: 598981.539 ops/s
Iteration  27: 636938.242 ops/s
Iteration  28: 602762.088 ops/s
Iteration  29: 600453.962 ops/s
Iteration  30: 615647.592 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleOnErrorCompleteTest._Benchmark.benchmark_error":
  612570.108 ±(99.9%) 8272.814 ops/s [Average]
  (min, avg, max) = (593026.499, 612570.108, 636938.242), stdev = 12382.359
  CI (99.9%): [604297.294, 620842.922] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score      Error  Units
SingleOnErrorCompleteTest._Benchmark.benchmark_error  thrpt   30  612570.108 ± 8272.814  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleUsingTest._Benchmark.benchmark_disposerThrowsNonEager$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleUsingTest._Benchmark.benchmark_disposerThrowsNonEager

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 53478.535 ops/s
# Warmup Iteration   2: 182898.108 ops/s
# Warmup Iteration   3: 204293.501 ops/s
# Warmup Iteration   4: 193061.181 ops/s
# Warmup Iteration   5: 236737.200 ops/s
# Warmup Iteration   6: 233153.389 ops/s
# Warmup Iteration   7: 234013.116 ops/s
# Warmup Iteration   8: 245969.737 ops/s
# Warmup Iteration   9: 234267.064 ops/s
# Warmup Iteration  10: 243496.889 ops/s
# Warmup Iteration  11: 228501.879 ops/s
# Warmup Iteration  12: 236497.293 ops/s
# Warmup Iteration  13: 238745.456 ops/s
# Warmup Iteration  14: 235473.703 ops/s
# Warmup Iteration  15: 239374.233 ops/s
# Warmup Iteration  16: 235416.140 ops/s
# Warmup Iteration  17: 241753.103 ops/s
# Warmup Iteration  18: 249483.465 ops/s
# Warmup Iteration  19: 242398.789 ops/s
# Warmup Iteration  20: 254725.839 ops/s
# Warmup Iteration  21: 241253.629 ops/s
# Warmup Iteration  22: 249199.957 ops/s
# Warmup Iteration  23: 245309.351 ops/s
# Warmup Iteration  24: 241716.239 ops/s
# Warmup Iteration  25: 247162.952 ops/s
# Warmup Iteration  26: 240987.482 ops/s
# Warmup Iteration  27: 243584.888 ops/s
# Warmup Iteration  28: 236394.001 ops/s
# Warmup Iteration  29: 249083.398 ops/s
# Warmup Iteration  30: 238578.942 ops/s
Iteration   1: 236484.128 ops/s
Iteration   2: 246465.436 ops/s
Iteration   3: 241904.501 ops/s
Iteration   4: 243356.697 ops/s
Iteration   5: 244344.029 ops/s
Iteration   6: 250744.442 ops/s
Iteration   7: 245667.306 ops/s
Iteration   8: 250889.261 ops/s
Iteration   9: 242969.250 ops/s
Iteration  10: 246576.270 ops/s
Iteration  11: 252560.338 ops/s
Iteration  12: 238265.671 ops/s
Iteration  13: 246948.113 ops/s
Iteration  14: 245592.298 ops/s
Iteration  15: 241933.031 ops/s
Iteration  16: 250384.703 ops/s
Iteration  17: 235348.527 ops/s
Iteration  18: 253122.157 ops/s
Iteration  19: 256757.987 ops/s
Iteration  20: 236654.266 ops/s
Iteration  21: 241416.887 ops/s
Iteration  22: 242395.154 ops/s
Iteration  23: 246962.610 ops/s
Iteration  24: 251847.401 ops/s
Iteration  25: 241149.454 ops/s
Iteration  26: 249451.619 ops/s
Iteration  27: 246858.720 ops/s
Iteration  28: 243070.998 ops/s
Iteration  29: 258255.809 ops/s
Iteration  30: 236833.903 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleUsingTest._Benchmark.benchmark_disposerThrowsNonEager":
  245507.032 ±(99.9%) 3964.404 ops/s [Average]
  (min, avg, max) = (235348.527, 245507.032, 258255.809), stdev = 5933.734
  CI (99.9%): [241542.628, 249471.436] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
SingleUsingTest._Benchmark.benchmark_disposerThrowsNonEager  thrpt   30  245507.032 ± 3964.404  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleOfTypeTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleOfTypeTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 111793.050 ops/s
# Warmup Iteration   2: 377681.745 ops/s
# Warmup Iteration   3: 451740.208 ops/s
# Warmup Iteration   4: 442144.776 ops/s
# Warmup Iteration   5: 444658.223 ops/s
# Warmup Iteration   6: 493853.780 ops/s
# Warmup Iteration   7: 407205.999 ops/s
# Warmup Iteration   8: 485832.289 ops/s
# Warmup Iteration   9: 496201.167 ops/s
# Warmup Iteration  10: 478354.584 ops/s
# Warmup Iteration  11: 480835.990 ops/s
# Warmup Iteration  12: 506558.567 ops/s
# Warmup Iteration  13: 469017.060 ops/s
# Warmup Iteration  14: 502129.165 ops/s
# Warmup Iteration  15: 486341.084 ops/s
# Warmup Iteration  16: 474568.123 ops/s
# Warmup Iteration  17: 526206.246 ops/s
# Warmup Iteration  18: 494800.400 ops/s
# Warmup Iteration  19: 521293.967 ops/s
# Warmup Iteration  20: 512120.305 ops/s
# Warmup Iteration  21: 510068.849 ops/s
# Warmup Iteration  22: 511405.462 ops/s
# Warmup Iteration  23: 424836.730 ops/s
# Warmup Iteration  24: 503398.637 ops/s
# Warmup Iteration  25: 507392.382 ops/s
# Warmup Iteration  26: 516862.209 ops/s
# Warmup Iteration  27: 514740.103 ops/s
# Warmup Iteration  28: 489599.997 ops/s
# Warmup Iteration  29: 529101.275 ops/s
# Warmup Iteration  30: 500446.490 ops/s
Iteration   1: 527013.888 ops/s
Iteration   2: 485222.125 ops/s
Iteration   3: 512847.370 ops/s
Iteration   4: 507701.797 ops/s
Iteration   5: 494883.552 ops/s
Iteration   6: 499577.039 ops/s
Iteration   7: 492474.589 ops/s
Iteration   8: 525307.544 ops/s
Iteration   9: 506826.761 ops/s
Iteration  10: 508511.866 ops/s
Iteration  11: 514292.331 ops/s
Iteration  12: 508484.418 ops/s
Iteration  13: 514417.877 ops/s
Iteration  14: 494461.944 ops/s
Iteration  15: 508039.993 ops/s
Iteration  16: 518951.984 ops/s
Iteration  17: 496542.883 ops/s
Iteration  18: 499251.980 ops/s
Iteration  19: 523512.989 ops/s
Iteration  20: 499984.141 ops/s
Iteration  21: 507298.069 ops/s
Iteration  22: 500247.092 ops/s
Iteration  23: 510124.333 ops/s
Iteration  24: 533324.597 ops/s
Iteration  25: 478766.878 ops/s
Iteration  26: 533234.057 ops/s
Iteration  27: 486749.315 ops/s
Iteration  28: 521202.989 ops/s
Iteration  29: 524115.137 ops/s
Iteration  30: 501542.128 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleOfTypeTest._Benchmark.benchmark_doubleOnSubscribe":
  507830.389 ±(99.9%) 9375.224 ops/s [Average]
  (min, avg, max) = (478766.878, 507830.389, 533324.597), stdev = 14032.395
  CI (99.9%): [498455.165, 517205.613] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score      Error  Units
SingleOfTypeTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  507830.389 ± 9375.224  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleTimeoutTest._Benchmark.benchmark_fallbackDispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleTimeoutTest._Benchmark.benchmark_fallbackDispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 367990.608 ops/s
# Warmup Iteration   2: 1229455.407 ops/s
# Warmup Iteration   3: 1494351.237 ops/s
# Warmup Iteration   4: 1664136.328 ops/s
# Warmup Iteration   5: 1732010.722 ops/s
# Warmup Iteration   6: 1693096.589 ops/s
# Warmup Iteration   7: 1729808.428 ops/s
# Warmup Iteration   8: 1738503.478 ops/s
# Warmup Iteration   9: 1659262.255 ops/s
# Warmup Iteration  10: 1728466.493 ops/s
# Warmup Iteration  11: 1629182.429 ops/s
# Warmup Iteration  12: 1767728.171 ops/s
# Warmup Iteration  13: 1653980.350 ops/s
# Warmup Iteration  14: 1684587.971 ops/s
# Warmup Iteration  15: 1765964.765 ops/s
# Warmup Iteration  16: 1711045.428 ops/s
# Warmup Iteration  17: 1716903.954 ops/s
# Warmup Iteration  18: 1692169.534 ops/s
# Warmup Iteration  19: 1761659.322 ops/s
# Warmup Iteration  20: 1677400.363 ops/s
# Warmup Iteration  21: 1751143.951 ops/s
# Warmup Iteration  22: 1630679.988 ops/s
# Warmup Iteration  23: 1737920.953 ops/s
# Warmup Iteration  24: 1656095.354 ops/s
# Warmup Iteration  25: 1692609.844 ops/s
# Warmup Iteration  26: 1720214.874 ops/s
# Warmup Iteration  27: 1737186.951 ops/s
# Warmup Iteration  28: 1653199.840 ops/s
# Warmup Iteration  29: 1712746.937 ops/s
# Warmup Iteration  30: 1790051.070 ops/s
Iteration   1: 1677797.617 ops/s
Iteration   2: 1686859.680 ops/s
Iteration   3: 1753845.163 ops/s
Iteration   4: 1638445.475 ops/s
Iteration   5: 1776159.045 ops/s
Iteration   6: 1634209.513 ops/s
Iteration   7: 1714070.714 ops/s
Iteration   8: 1669963.126 ops/s
Iteration   9: 1658872.898 ops/s
Iteration  10: 1775444.950 ops/s
Iteration  11: 1641986.002 ops/s
Iteration  12: 1728883.662 ops/s
Iteration  13: 1637489.261 ops/s
Iteration  14: 1699889.044 ops/s
Iteration  15: 1673766.947 ops/s
Iteration  16: 1783562.395 ops/s
Iteration  17: 1663371.702 ops/s
Iteration  18: 1783990.846 ops/s
Iteration  19: 1655359.947 ops/s
Iteration  20: 1756689.190 ops/s
Iteration  21: 1681511.475 ops/s
Iteration  22: 1693946.895 ops/s
Iteration  23: 1742382.833 ops/s
Iteration  24: 1638865.903 ops/s
Iteration  25: 1763615.693 ops/s
Iteration  26: 1602468.195 ops/s
Iteration  27: 1655151.943 ops/s
Iteration  28: 1724329.776 ops/s
Iteration  29: 1731139.197 ops/s
Iteration  30: 1643025.903 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleTimeoutTest._Benchmark.benchmark_fallbackDispose":
  1696236.500 ±(99.9%) 35355.932 ops/s [Average]
  (min, avg, max) = (1602468.195, 1696236.500, 1783990.846), stdev = 52919.099
  CI (99.9%): [1660880.568, 1731592.432] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
SingleTimeoutTest._Benchmark.benchmark_fallbackDispose  thrpt   30  1696236.500 ± 35355.932  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 16930.293 ops/s
# Warmup Iteration   2: 84376.588 ops/s
# Warmup Iteration   3: 159412.556 ops/s
# Warmup Iteration   4: 165740.953 ops/s
# Warmup Iteration   5: 148100.104 ops/s
# Warmup Iteration   6: 171675.852 ops/s
# Warmup Iteration   7: 176612.895 ops/s
# Warmup Iteration   8: 155593.106 ops/s
# Warmup Iteration   9: 171769.940 ops/s
# Warmup Iteration  10: 172850.159 ops/s
# Warmup Iteration  11: 169234.418 ops/s
# Warmup Iteration  12: 174192.708 ops/s
# Warmup Iteration  13: 167819.449 ops/s
# Warmup Iteration  14: 178368.743 ops/s
# Warmup Iteration  15: 169991.368 ops/s
# Warmup Iteration  16: 171943.366 ops/s
# Warmup Iteration  17: 185995.851 ops/s
# Warmup Iteration  18: 149389.154 ops/s
# Warmup Iteration  19: 186607.911 ops/s
# Warmup Iteration  20: 175680.942 ops/s
# Warmup Iteration  21: 182109.374 ops/s
# Warmup Iteration  22: 175382.288 ops/s
# Warmup Iteration  23: 183302.112 ops/s
# Warmup Iteration  24: 187029.352 ops/s
# Warmup Iteration  25: 185337.057 ops/s
# Warmup Iteration  26: 175696.116 ops/s
# Warmup Iteration  27: 184886.619 ops/s
# Warmup Iteration  28: 181442.883 ops/s
# Warmup Iteration  29: 190043.503 ops/s
# Warmup Iteration  30: 172348.245 ops/s
Iteration   1: 185275.993 ops/s
Iteration   2: 187883.155 ops/s
Iteration   3: 174190.544 ops/s
Iteration   4: 181559.035 ops/s
Iteration   5: 175943.081 ops/s
Iteration   6: 184938.686 ops/s
Iteration   7: 176833.435 ops/s
Iteration   8: 180131.906 ops/s
Iteration   9: 183311.210 ops/s
Iteration  10: 176364.921 ops/s
Iteration  11: 185378.249 ops/s
Iteration  12: 176402.156 ops/s
Iteration  13: 180657.467 ops/s
Iteration  14: 176300.461 ops/s
Iteration  15: 176782.910 ops/s
Iteration  16: 184410.387 ops/s
Iteration  17: 179697.825 ops/s
Iteration  18: 181753.584 ops/s
Iteration  19: 185049.579 ops/s
Iteration  20: 176840.579 ops/s
Iteration  21: 179610.805 ops/s
Iteration  22: 177891.320 ops/s
Iteration  23: 177941.454 ops/s
Iteration  24: 176394.099 ops/s
Iteration  25: 182525.711 ops/s
Iteration  26: 178256.712 ops/s
Iteration  27: 173231.568 ops/s
Iteration  28: 175915.192 ops/s
Iteration  29: 176006.613 ops/s
Iteration  30: 183005.247 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtTest._Benchmark.benchmark_doubleOnSubscribe":
  179682.796 ±(99.9%) 2606.505 ops/s [Average]
  (min, avg, max) = (173231.568, 179682.796, 187883.155), stdev = 3901.294
  CI (99.9%): [177076.291, 182289.301] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
ObservableElementAtTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  179682.796 ± 2606.505  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicateTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicateTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 101159.986 ops/s
# Warmup Iteration   2: 470763.888 ops/s
# Warmup Iteration   3: 444325.170 ops/s
# Warmup Iteration   4: 540854.964 ops/s
# Warmup Iteration   5: 511182.563 ops/s
# Warmup Iteration   6: 521599.957 ops/s
# Warmup Iteration   7: 534500.975 ops/s
# Warmup Iteration   8: 520788.728 ops/s
# Warmup Iteration   9: 516872.358 ops/s
# Warmup Iteration  10: 524287.323 ops/s
# Warmup Iteration  11: 514094.973 ops/s
# Warmup Iteration  12: 508197.080 ops/s
# Warmup Iteration  13: 509302.267 ops/s
# Warmup Iteration  14: 476669.166 ops/s
# Warmup Iteration  15: 535196.255 ops/s
# Warmup Iteration  16: 523243.872 ops/s
# Warmup Iteration  17: 542313.742 ops/s
# Warmup Iteration  18: 563397.972 ops/s
# Warmup Iteration  19: 531449.231 ops/s
# Warmup Iteration  20: 555108.380 ops/s
# Warmup Iteration  21: 537609.448 ops/s
# Warmup Iteration  22: 557576.802 ops/s
# Warmup Iteration  23: 555688.402 ops/s
# Warmup Iteration  24: 536188.713 ops/s
# Warmup Iteration  25: 563065.312 ops/s
# Warmup Iteration  26: 560980.195 ops/s
# Warmup Iteration  27: 532740.971 ops/s
# Warmup Iteration  28: 551467.003 ops/s
# Warmup Iteration  29: 543541.941 ops/s
# Warmup Iteration  30: 550840.362 ops/s
Iteration   1: 561053.567 ops/s
Iteration   2: 539699.364 ops/s
Iteration   3: 554472.022 ops/s
Iteration   4: 528307.593 ops/s
Iteration   5: 545505.336 ops/s
Iteration   6: 572709.547 ops/s
Iteration   7: 525692.383 ops/s
Iteration   8: 567875.824 ops/s
Iteration   9: 547887.684 ops/s
Iteration  10: 555796.218 ops/s
Iteration  11: 560352.336 ops/s
Iteration  12: 536772.872 ops/s
Iteration  13: 567273.603 ops/s
Iteration  14: 531591.049 ops/s
Iteration  15: 551371.572 ops/s
Iteration  16: 537831.742 ops/s
Iteration  17: 561219.223 ops/s
Iteration  18: 540501.228 ops/s
Iteration  19: 534026.509 ops/s
Iteration  20: 567833.966 ops/s
Iteration  21: 538368.253 ops/s
Iteration  22: 547112.845 ops/s
Iteration  23: 541054.039 ops/s
Iteration  24: 554827.151 ops/s
Iteration  25: 558099.235 ops/s
Iteration  26: 546378.704 ops/s
Iteration  27: 550496.108 ops/s
Iteration  28: 565023.277 ops/s
Iteration  29: 532331.221 ops/s
Iteration  30: 560112.645 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicateTest._Benchmark.benchmark_doubleOnSubscribe":
  549385.904 ±(99.9%) 8787.333 ops/s [Average]
  (min, avg, max) = (525692.383, 549385.904, 572709.547), stdev = 13152.468
  CI (99.9%): [540598.571, 558173.237] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score      Error  Units
ObservableTakeUntilPredicateTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  549385.904 ± 8787.333  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithStartEndObservableTest._Benchmark.benchmark_badSourceCallable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithStartEndObservableTest._Benchmark.benchmark_badSourceCallable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 10460.055 ops/s
# Warmup Iteration   2: 99055.904 ops/s
# Warmup Iteration   3: 167441.009 ops/s
# Warmup Iteration   4: 160533.608 ops/s
# Warmup Iteration   5: 174234.626 ops/s
# Warmup Iteration   6: 189844.234 ops/s
# Warmup Iteration   7: 191060.531 ops/s
# Warmup Iteration   8: 196306.792 ops/s
# Warmup Iteration   9: 187299.817 ops/s
# Warmup Iteration  10: 180616.805 ops/s
# Warmup Iteration  11: 188232.305 ops/s
# Warmup Iteration  12: 186981.352 ops/s
# Warmup Iteration  13: 157102.168 ops/s
# Warmup Iteration  14: 193429.887 ops/s
# Warmup Iteration  15: 183227.191 ops/s
# Warmup Iteration  16: 190583.423 ops/s
# Warmup Iteration  17: 192318.898 ops/s
# Warmup Iteration  18: 183660.148 ops/s
# Warmup Iteration  19: 197429.088 ops/s
# Warmup Iteration  20: 188051.960 ops/s
# Warmup Iteration  21: 192865.256 ops/s
# Warmup Iteration  22: 191391.852 ops/s
# Warmup Iteration  23: 195472.099 ops/s
# Warmup Iteration  24: 188970.582 ops/s
# Warmup Iteration  25: 196475.819 ops/s
# Warmup Iteration  26: 192354.864 ops/s
# Warmup Iteration  27: 196831.683 ops/s
# Warmup Iteration  28: 190596.322 ops/s
# Warmup Iteration  29: 197285.092 ops/s
# Warmup Iteration  30: 196792.302 ops/s
Iteration   1: 190878.108 ops/s
Iteration   2: 192705.059 ops/s
Iteration   3: 206672.047 ops/s
Iteration   4: 196396.312 ops/s
Iteration   5: 190948.091 ops/s
Iteration   6: 196162.567 ops/s
Iteration   7: 191385.265 ops/s
Iteration   8: 195415.420 ops/s
Iteration   9: 197757.007 ops/s
Iteration  10: 190407.489 ops/s
Iteration  11: 194228.716 ops/s
Iteration  12: 202173.438 ops/s
Iteration  13: 188797.976 ops/s
Iteration  14: 192441.013 ops/s
Iteration  15: 191487.216 ops/s
Iteration  16: 193755.627 ops/s
Iteration  17: 194377.689 ops/s
Iteration  18: 197029.752 ops/s
Iteration  19: 191629.864 ops/s
Iteration  20: 196600.460 ops/s
Iteration  21: 189781.749 ops/s
Iteration  22: 194386.647 ops/s
Iteration  23: 195322.634 ops/s
Iteration  24: 193006.641 ops/s
Iteration  25: 198260.017 ops/s
Iteration  26: 186061.861 ops/s
Iteration  27: 199967.712 ops/s
Iteration  28: 193617.239 ops/s
Iteration  29: 187859.882 ops/s
Iteration  30: 197500.423 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithStartEndObservableTest._Benchmark.benchmark_badSourceCallable":
  194233.797 ±(99.9%) 2877.512 ops/s [Average]
  (min, avg, max) = (186061.861, 194233.797, 206672.047), stdev = 4306.925
  CI (99.9%): [191356.285, 197111.310] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           Mode  Cnt       Score      Error  Units
ObservableWindowWithStartEndObservableTest._Benchmark.benchmark_badSourceCallable  thrpt   30  194233.797 ± 2877.512  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_errorToSingle$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_errorToSingle

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 229886.115 ops/s
# Warmup Iteration   2: 559091.075 ops/s
# Warmup Iteration   3: 678286.865 ops/s
# Warmup Iteration   4: 682388.337 ops/s
# Warmup Iteration   5: 630478.361 ops/s
# Warmup Iteration   6: 749729.668 ops/s
# Warmup Iteration   7: 697903.003 ops/s
# Warmup Iteration   8: 733951.946 ops/s
# Warmup Iteration   9: 730078.439 ops/s
# Warmup Iteration  10: 719769.014 ops/s
# Warmup Iteration  11: 738442.193 ops/s
# Warmup Iteration  12: 722460.444 ops/s
# Warmup Iteration  13: 718599.169 ops/s
# Warmup Iteration  14: 732321.394 ops/s
# Warmup Iteration  15: 733281.506 ops/s
# Warmup Iteration  16: 696826.899 ops/s
# Warmup Iteration  17: 789987.768 ops/s
# Warmup Iteration  18: 742631.177 ops/s
# Warmup Iteration  19: 776974.100 ops/s
# Warmup Iteration  20: 763684.329 ops/s
# Warmup Iteration  21: 776519.326 ops/s
# Warmup Iteration  22: 751017.453 ops/s
# Warmup Iteration  23: 765703.190 ops/s
# Warmup Iteration  24: 775671.507 ops/s
# Warmup Iteration  25: 774583.488 ops/s
# Warmup Iteration  26: 739464.329 ops/s
# Warmup Iteration  27: 773301.166 ops/s
# Warmup Iteration  28: 752899.204 ops/s
# Warmup Iteration  29: 774280.750 ops/s
# Warmup Iteration  30: 788089.374 ops/s
Iteration   1: 733027.200 ops/s
Iteration   2: 759797.389 ops/s
Iteration   3: 761303.578 ops/s
Iteration   4: 751047.333 ops/s
Iteration   5: 759902.942 ops/s
Iteration   6: 757440.174 ops/s
Iteration   7: 734456.887 ops/s
Iteration   8: 781803.239 ops/s
Iteration   9: 737567.434 ops/s
Iteration  10: 779950.620 ops/s
Iteration  11: 724942.070 ops/s
Iteration  12: 799877.508 ops/s
Iteration  13: 747523.696 ops/s
Iteration  14: 750049.190 ops/s
Iteration  15: 777479.878 ops/s
Iteration  16: 753400.594 ops/s
Iteration  17: 761548.126 ops/s
Iteration  18: 755415.333 ops/s
Iteration  19: 755112.210 ops/s
Iteration  20: 769336.551 ops/s
Iteration  21: 774461.435 ops/s
Iteration  22: 756813.918 ops/s
Iteration  23: 782704.608 ops/s
Iteration  24: 733112.355 ops/s
Iteration  25: 762259.249 ops/s
Iteration  26: 761942.803 ops/s
Iteration  27: 763954.334 ops/s
Iteration  28: 759828.525 ops/s
Iteration  29: 738895.145 ops/s
Iteration  30: 786942.258 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_errorToSingle":
  759063.219 ±(99.9%) 11789.376 ops/s [Average]
  (min, avg, max) = (724942.070, 759063.219, 799877.508), stdev = 17645.785
  CI (99.9%): [747273.843, 770852.596] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt       Score       Error  Units
MaybeTest._Benchmark.benchmark_errorToSingle  thrpt   30  759063.219 ± 11789.376  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatEagerTest._Benchmark.benchmark_publisherNormalMaxConcurrency$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatEagerTest._Benchmark.benchmark_publisherNormalMaxConcurrency

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 77373.641 ops/s
# Warmup Iteration   2: 631281.134 ops/s
# Warmup Iteration   3: 1135929.921 ops/s
# Warmup Iteration   4: 1240654.223 ops/s
# Warmup Iteration   5: 1290100.887 ops/s
# Warmup Iteration   6: 1266658.728 ops/s
# Warmup Iteration   7: 1254479.961 ops/s
# Warmup Iteration   8: 1017519.839 ops/s
# Warmup Iteration   9: 1244487.651 ops/s
# Warmup Iteration  10: 1198669.124 ops/s
# Warmup Iteration  11: 1242615.159 ops/s
# Warmup Iteration  12: 1267736.107 ops/s
# Warmup Iteration  13: 1239158.855 ops/s
# Warmup Iteration  14: 1261176.947 ops/s
# Warmup Iteration  15: 1251955.755 ops/s
# Warmup Iteration  16: 1200421.646 ops/s
# Warmup Iteration  17: 1202862.213 ops/s
# Warmup Iteration  18: 1333553.598 ops/s
# Warmup Iteration  19: 1271655.714 ops/s
# Warmup Iteration  20: 1217332.498 ops/s
# Warmup Iteration  21: 1241303.581 ops/s
# Warmup Iteration  22: 1289319.174 ops/s
# Warmup Iteration  23: 1276417.058 ops/s
# Warmup Iteration  24: 1217906.004 ops/s
# Warmup Iteration  25: 1301536.774 ops/s
# Warmup Iteration  26: 1251963.458 ops/s
# Warmup Iteration  27: 1297008.530 ops/s
# Warmup Iteration  28: 1264900.370 ops/s
# Warmup Iteration  29: 1297843.888 ops/s
# Warmup Iteration  30: 1332372.758 ops/s
Iteration   1: 1303674.972 ops/s
Iteration   2: 1233543.993 ops/s
Iteration   3: 1317078.470 ops/s
Iteration   4: 1308417.785 ops/s
Iteration   5: 1244852.490 ops/s
Iteration   6: 1262317.316 ops/s
Iteration   7: 1246496.284 ops/s
Iteration   8: 1314569.691 ops/s
Iteration   9: 1266143.931 ops/s
Iteration  10: 1276836.444 ops/s
Iteration  11: 1280473.684 ops/s
Iteration  12: 1278764.304 ops/s
Iteration  13: 1292634.131 ops/s
Iteration  14: 1269293.364 ops/s
Iteration  15: 1298268.052 ops/s
Iteration  16: 1295069.659 ops/s
Iteration  17: 1256507.729 ops/s
Iteration  18: 1312377.479 ops/s
Iteration  19: 1242948.779 ops/s
Iteration  20: 1293468.537 ops/s
Iteration  21: 1257057.974 ops/s
Iteration  22: 1294838.687 ops/s
Iteration  23: 1246877.093 ops/s
Iteration  24: 1270870.900 ops/s
Iteration  25: 1353771.280 ops/s
Iteration  26: 1253009.751 ops/s
Iteration  27: 1353181.189 ops/s
Iteration  28: 1248013.895 ops/s
Iteration  29: 1255031.858 ops/s
Iteration  30: 1300768.703 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatEagerTest._Benchmark.benchmark_publisherNormalMaxConcurrency":
  1280905.281 ±(99.9%) 20932.258 ops/s [Average]
  (min, avg, max) = (1233543.993, 1280905.281, 1353771.280), stdev = 31330.421
  CI (99.9%): [1259973.023, 1301837.539] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score       Error  Units
MaybeConcatEagerTest._Benchmark.benchmark_publisherNormalMaxConcurrency  thrpt   30  1280905.281 ± 20932.258  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatEagerTest._Benchmark.benchmark_publisherNormal$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatEagerTest._Benchmark.benchmark_publisherNormal

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 117874.411 ops/s
# Warmup Iteration   2: 657457.336 ops/s
# Warmup Iteration   3: 1085469.026 ops/s
# Warmup Iteration   4: 1133491.641 ops/s
# Warmup Iteration   5: 1157079.407 ops/s
# Warmup Iteration   6: 1177673.899 ops/s
# Warmup Iteration   7: 1080246.377 ops/s
# Warmup Iteration   8: 1184187.120 ops/s
# Warmup Iteration   9: 1109711.642 ops/s
# Warmup Iteration  10: 1191096.508 ops/s
# Warmup Iteration  11: 1075179.560 ops/s
# Warmup Iteration  12: 1186961.150 ops/s
# Warmup Iteration  13: 1177984.050 ops/s
# Warmup Iteration  14: 1131704.006 ops/s
# Warmup Iteration  15: 1189413.677 ops/s
# Warmup Iteration  16: 1114180.756 ops/s
# Warmup Iteration  17: 1158039.859 ops/s
# Warmup Iteration  18: 1168758.503 ops/s
# Warmup Iteration  19: 1171394.836 ops/s
# Warmup Iteration  20: 1182555.651 ops/s
# Warmup Iteration  21: 1151380.012 ops/s
# Warmup Iteration  22: 1209545.120 ops/s
# Warmup Iteration  23: 1158784.449 ops/s
# Warmup Iteration  24: 1133318.102 ops/s
# Warmup Iteration  25: 1158686.181 ops/s
# Warmup Iteration  26: 1116995.430 ops/s
# Warmup Iteration  27: 1200731.328 ops/s
# Warmup Iteration  28: 1133588.591 ops/s
# Warmup Iteration  29: 1191258.346 ops/s
# Warmup Iteration  30: 1207688.078 ops/s
Iteration   1: 1142699.239 ops/s
Iteration   2: 1183102.835 ops/s
Iteration   3: 1188577.264 ops/s
Iteration   4: 1134459.630 ops/s
Iteration   5: 1137296.976 ops/s
Iteration   6: 1203178.526 ops/s
Iteration   7: 1177410.954 ops/s
Iteration   8: 1165320.729 ops/s
Iteration   9: 1185882.673 ops/s
Iteration  10: 1157663.992 ops/s
Iteration  11: 1231319.230 ops/s
Iteration  12: 1185775.766 ops/s
Iteration  13: 1147878.994 ops/s
Iteration  14: 1178885.345 ops/s
Iteration  15: 1149103.559 ops/s
Iteration  16: 1146534.237 ops/s
Iteration  17: 1171732.045 ops/s
Iteration  18: 1208539.666 ops/s
Iteration  19: 1175909.648 ops/s
Iteration  20: 1206062.230 ops/s
Iteration  21: 1231031.290 ops/s
Iteration  22: 1118139.655 ops/s
Iteration  23: 1171094.111 ops/s
Iteration  24: 1123629.545 ops/s
Iteration  25: 1145771.182 ops/s
Iteration  26: 1187975.659 ops/s
Iteration  27: 1119766.343 ops/s
Iteration  28: 1178187.136 ops/s
Iteration  29: 1114532.771 ops/s
Iteration  30: 1175049.394 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatEagerTest._Benchmark.benchmark_publisherNormal":
  1168083.687 ±(99.9%) 20989.922 ops/s [Average]
  (min, avg, max) = (1114532.771, 1168083.687, 1231319.230), stdev = 31416.729
  CI (99.9%): [1147093.766, 1189073.609] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
MaybeConcatEagerTest._Benchmark.benchmark_publisherNormal  thrpt   30  1168083.687 ± 20989.922  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArrayEagerDelayErrorTest._Benchmark.benchmark_normal$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArrayEagerDelayErrorTest._Benchmark.benchmark_normal

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 30061.389 ops/s
# Warmup Iteration   2: 265911.705 ops/s
# Warmup Iteration   3: 312946.359 ops/s
# Warmup Iteration   4: 361526.533 ops/s
# Warmup Iteration   5: 382006.996 ops/s
# Warmup Iteration   6: 412751.243 ops/s
# Warmup Iteration   7: 400791.279 ops/s
# Warmup Iteration   8: 410847.429 ops/s
# Warmup Iteration   9: 401086.277 ops/s
# Warmup Iteration  10: 408875.681 ops/s
# Warmup Iteration  11: 423345.469 ops/s
# Warmup Iteration  12: 394366.300 ops/s
# Warmup Iteration  13: 413588.550 ops/s
# Warmup Iteration  14: 401121.089 ops/s
# Warmup Iteration  15: 418115.531 ops/s
# Warmup Iteration  16: 397816.611 ops/s
# Warmup Iteration  17: 433228.102 ops/s
# Warmup Iteration  18: 420993.148 ops/s
# Warmup Iteration  19: 417542.145 ops/s
# Warmup Iteration  20: 434320.939 ops/s
# Warmup Iteration  21: 415636.055 ops/s
# Warmup Iteration  22: 415425.898 ops/s
# Warmup Iteration  23: 430574.140 ops/s
# Warmup Iteration  24: 424991.984 ops/s
# Warmup Iteration  25: 417477.057 ops/s
# Warmup Iteration  26: 428947.473 ops/s
# Warmup Iteration  27: 416595.857 ops/s
# Warmup Iteration  28: 439709.194 ops/s
# Warmup Iteration  29: 409718.418 ops/s
# Warmup Iteration  30: 441964.661 ops/s
Iteration   1: 430105.962 ops/s
Iteration   2: 407151.876 ops/s
Iteration   3: 432462.028 ops/s
Iteration   4: 417865.228 ops/s
Iteration   5: 427325.904 ops/s
Iteration   6: 420165.069 ops/s
Iteration   7: 425777.096 ops/s
Iteration   8: 421364.742 ops/s
Iteration   9: 436999.758 ops/s
Iteration  10: 425073.021 ops/s
Iteration  11: 415992.558 ops/s
Iteration  12: 435880.617 ops/s
Iteration  13: 420221.908 ops/s
Iteration  14: 416748.327 ops/s
Iteration  15: 433447.467 ops/s
Iteration  16: 412655.808 ops/s
Iteration  17: 430868.042 ops/s
Iteration  18: 421889.454 ops/s
Iteration  19: 435655.925 ops/s
Iteration  20: 435654.862 ops/s
Iteration  21: 411193.793 ops/s
Iteration  22: 430359.478 ops/s
Iteration  23: 427000.782 ops/s
Iteration  24: 428652.944 ops/s
Iteration  25: 428208.261 ops/s
Iteration  26: 429280.025 ops/s
Iteration  27: 438748.857 ops/s
Iteration  28: 426854.395 ops/s
Iteration  29: 417855.529 ops/s
Iteration  30: 432053.616 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArrayEagerDelayErrorTest._Benchmark.benchmark_normal":
  425783.778 ±(99.9%) 5497.254 ops/s [Average]
  (min, avg, max) = (407151.876, 425783.778, 438748.857), stdev = 8228.032
  CI (99.9%): [420286.523, 431281.032] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score      Error  Units
MaybeConcatArrayEagerDelayErrorTest._Benchmark.benchmark_normal  thrpt   30  425783.778 ± 5497.254  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_windowUnsubscribeNonOverlapping$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_windowUnsubscribeNonOverlapping

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 21127.200 ops/s
# Warmup Iteration   2: 225963.630 ops/s
# Warmup Iteration   3: 376970.735 ops/s
# Warmup Iteration   4: 391805.037 ops/s
# Warmup Iteration   5: 365986.260 ops/s
# Warmup Iteration   6: 372767.888 ops/s
# Warmup Iteration   7: 384507.501 ops/s
# Warmup Iteration   8: 383344.315 ops/s
# Warmup Iteration   9: 397397.617 ops/s
# Warmup Iteration  10: 411218.912 ops/s
# Warmup Iteration  11: 413262.873 ops/s
# Warmup Iteration  12: 410526.360 ops/s
# Warmup Iteration  13: 403249.766 ops/s
# Warmup Iteration  14: 412046.576 ops/s
# Warmup Iteration  15: 399919.852 ops/s
# Warmup Iteration  16: 408421.837 ops/s
# Warmup Iteration  17: 394220.148 ops/s
# Warmup Iteration  18: 418110.401 ops/s
# Warmup Iteration  19: 392038.913 ops/s
# Warmup Iteration  20: 403067.232 ops/s
# Warmup Iteration  21: 419475.281 ops/s
# Warmup Iteration  22: 405940.813 ops/s
# Warmup Iteration  23: 409403.350 ops/s
# Warmup Iteration  24: 406034.839 ops/s
# Warmup Iteration  25: 392152.177 ops/s
# Warmup Iteration  26: 397664.343 ops/s
# Warmup Iteration  27: 412595.037 ops/s
# Warmup Iteration  28: 382553.711 ops/s
# Warmup Iteration  29: 412103.078 ops/s
# Warmup Iteration  30: 397139.249 ops/s
Iteration   1: 401988.491 ops/s
Iteration   2: 416746.654 ops/s
Iteration   3: 409220.388 ops/s
Iteration   4: 390409.716 ops/s
Iteration   5: 416123.767 ops/s
Iteration   6: 409159.562 ops/s
Iteration   7: 403569.994 ops/s
Iteration   8: 414118.686 ops/s
Iteration   9: 386578.209 ops/s
Iteration  10: 392557.727 ops/s
Iteration  11: 421489.463 ops/s
Iteration  12: 395701.939 ops/s
Iteration  13: 399937.117 ops/s
Iteration  14: 409177.978 ops/s
Iteration  15: 400027.390 ops/s
Iteration  16: 415901.965 ops/s
Iteration  17: 393306.977 ops/s
Iteration  18: 404850.382 ops/s
Iteration  19: 398794.304 ops/s
Iteration  20: 408479.564 ops/s
Iteration  21: 416157.915 ops/s
Iteration  22: 393470.512 ops/s
Iteration  23: 426747.086 ops/s
Iteration  24: 382245.116 ops/s
Iteration  25: 413273.726 ops/s
Iteration  26: 396059.990 ops/s
Iteration  27: 405268.989 ops/s
Iteration  28: 401127.588 ops/s
Iteration  29: 368345.829 ops/s
Iteration  30: 391814.172 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_windowUnsubscribeNonOverlapping":
  402755.040 ±(99.9%) 8422.148 ops/s [Average]
  (min, avg, max) = (368345.829, 402755.040, 426747.086), stdev = 12605.875
  CI (99.9%): [394332.892, 411177.188] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt       Score      Error  Units
FlowableWindowWithSizeTest._Benchmark.benchmark_windowUnsubscribeNonOverlapping  thrpt   30  402755.040 ± 8422.148  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatEagerTest._Benchmark.benchmark_publisherDelayErrorMaxConcurrency$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatEagerTest._Benchmark.benchmark_publisherDelayErrorMaxConcurrency

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 28697.684 ops/s
# Warmup Iteration   2: 250095.934 ops/s
# Warmup Iteration   3: 417188.528 ops/s
# Warmup Iteration   4: 391522.306 ops/s
# Warmup Iteration   5: 389470.326 ops/s
# Warmup Iteration   6: 424275.911 ops/s
# Warmup Iteration   7: 441173.116 ops/s
# Warmup Iteration   8: 452684.267 ops/s
# Warmup Iteration   9: 433402.581 ops/s
# Warmup Iteration  10: 434105.583 ops/s
# Warmup Iteration  11: 457181.206 ops/s
# Warmup Iteration  12: 430428.248 ops/s
# Warmup Iteration  13: 462232.253 ops/s
# Warmup Iteration  14: 433098.045 ops/s
# Warmup Iteration  15: 445226.111 ops/s
# Warmup Iteration  16: 458624.762 ops/s
# Warmup Iteration  17: 458831.763 ops/s
# Warmup Iteration  18: 440032.139 ops/s
# Warmup Iteration  19: 469601.287 ops/s
# Warmup Iteration  20: 438296.422 ops/s
# Warmup Iteration  21: 472208.819 ops/s
# Warmup Iteration  22: 444071.786 ops/s
# Warmup Iteration  23: 457551.664 ops/s
# Warmup Iteration  24: 446426.284 ops/s
# Warmup Iteration  25: 428656.891 ops/s
# Warmup Iteration  26: 463713.507 ops/s
# Warmup Iteration  27: 443315.035 ops/s
# Warmup Iteration  28: 472962.970 ops/s
# Warmup Iteration  29: 455188.726 ops/s
# Warmup Iteration  30: 467216.773 ops/s
Iteration   1: 473887.137 ops/s
Iteration   2: 456343.741 ops/s
Iteration   3: 444632.293 ops/s
Iteration   4: 463582.247 ops/s
Iteration   5: 455728.205 ops/s
Iteration   6: 440460.981 ops/s
Iteration   7: 453285.031 ops/s
Iteration   8: 448617.790 ops/s
Iteration   9: 448252.266 ops/s
Iteration  10: 469343.489 ops/s
Iteration  11: 431650.851 ops/s
Iteration  12: 470993.517 ops/s
Iteration  13: 481854.187 ops/s
Iteration  14: 440928.067 ops/s
Iteration  15: 462807.812 ops/s
Iteration  16: 463486.068 ops/s
Iteration  17: 441781.055 ops/s
Iteration  18: 461060.276 ops/s
Iteration  19: 477076.465 ops/s
Iteration  20: 449326.250 ops/s
Iteration  21: 470784.940 ops/s
Iteration  22: 449751.094 ops/s
Iteration  23: 452017.271 ops/s
Iteration  24: 465214.590 ops/s
Iteration  25: 452444.415 ops/s
Iteration  26: 450246.340 ops/s
Iteration  27: 473704.195 ops/s
Iteration  28: 452010.396 ops/s
Iteration  29: 443839.155 ops/s
Iteration  30: 464547.334 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatEagerTest._Benchmark.benchmark_publisherDelayErrorMaxConcurrency":
  456988.582 ±(99.9%) 8327.759 ops/s [Average]
  (min, avg, max) = (431650.851, 456988.582, 481854.187), stdev = 12464.598
  CI (99.9%): [448660.823, 465316.341] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt       Score      Error  Units
MaybeConcatEagerTest._Benchmark.benchmark_publisherDelayErrorMaxConcurrency  thrpt   30  456988.582 ± 8327.759  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_innerCompletesAfterOnNextInDrainThenCancels$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_innerCompletesAfterOnNextInDrainThenCancels

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 87731.146 ops/s
# Warmup Iteration   2: 317453.332 ops/s
# Warmup Iteration   3: 633366.251 ops/s
# Warmup Iteration   4: 979810.244 ops/s
# Warmup Iteration   5: 1000105.478 ops/s
# Warmup Iteration   6: 993993.965 ops/s
# Warmup Iteration   7: 1086430.269 ops/s
# Warmup Iteration   8: 1112080.552 ops/s
# Warmup Iteration   9: 1113432.515 ops/s
# Warmup Iteration  10: 1061898.201 ops/s
# Warmup Iteration  11: 1146707.970 ops/s
# Warmup Iteration  12: 1130192.618 ops/s
# Warmup Iteration  13: 1062153.736 ops/s
# Warmup Iteration  14: 1170830.270 ops/s
# Warmup Iteration  15: 1060810.733 ops/s
# Warmup Iteration  16: 1136938.600 ops/s
# Warmup Iteration  17: 1070832.379 ops/s
# Warmup Iteration  18: 1046203.115 ops/s
# Warmup Iteration  19: 1084680.242 ops/s
# Warmup Iteration  20: 1109403.010 ops/s
# Warmup Iteration  21: 1068282.792 ops/s
# Warmup Iteration  22: 1054762.154 ops/s
# Warmup Iteration  23: 1137005.116 ops/s
# Warmup Iteration  24: 1136722.189 ops/s
# Warmup Iteration  25: 1063271.405 ops/s
# Warmup Iteration  26: 1133438.687 ops/s
# Warmup Iteration  27: 1079447.288 ops/s
# Warmup Iteration  28: 1140370.730 ops/s
# Warmup Iteration  29: 1085879.379 ops/s
# Warmup Iteration  30: 1103664.005 ops/s
Iteration   1: 1096506.127 ops/s
Iteration   2: 1086623.390 ops/s
Iteration   3: 1138474.707 ops/s
Iteration   4: 1065587.730 ops/s
Iteration   5: 1097309.256 ops/s
Iteration   6: 1085530.293 ops/s
Iteration   7: 1119591.601 ops/s
Iteration   8: 1112973.315 ops/s
Iteration   9: 1091391.316 ops/s
Iteration  10: 1104105.587 ops/s
Iteration  11: 1088797.517 ops/s
Iteration  12: 1108654.607 ops/s
Iteration  13: 1044977.649 ops/s
Iteration  14: 1079103.899 ops/s
Iteration  15: 1092921.889 ops/s
Iteration  16: 1101514.657 ops/s
Iteration  17: 1094822.190 ops/s
Iteration  18: 1111566.725 ops/s
Iteration  19: 1120667.469 ops/s
Iteration  20: 1091827.796 ops/s
Iteration  21: 1146060.324 ops/s
Iteration  22: 1074813.913 ops/s
Iteration  23: 1130916.443 ops/s
Iteration  24: 889479.061 ops/s
Iteration  25: 1078374.675 ops/s
Iteration  26: 1101517.601 ops/s
Iteration  27: 1091985.309 ops/s
Iteration  28: 1125306.619 ops/s
Iteration  29: 1050163.756 ops/s
Iteration  30: 1138269.975 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_innerCompletesAfterOnNextInDrainThenCancels":
  1091994.513 ±(99.9%) 30216.445 ops/s [Average]
  (min, avg, max) = (889479.061, 1091994.513, 1146060.324), stdev = 45226.556
  CI (99.9%): [1061778.068, 1122210.958] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              Mode  Cnt        Score       Error  Units
FlowableFlatMapTest._Benchmark.benchmark_innerCompletesAfterOnNextInDrainThenCancels  thrpt   30  1091994.513 ± 30216.445  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupByTest._Benchmark.benchmark_cancellationOfUpstreamWhenGroupedFlowableCompletes$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupByTest._Benchmark.benchmark_cancellationOfUpstreamWhenGroupedFlowableCompletes

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 6002.845 ops/s
# Warmup Iteration   2: 73315.042 ops/s
# Warmup Iteration   3: 213089.073 ops/s
# Warmup Iteration   4: 235781.878 ops/s
# Warmup Iteration   5: 289386.653 ops/s
# Warmup Iteration   6: 281931.723 ops/s
# Warmup Iteration   7: 270219.551 ops/s
# Warmup Iteration   8: 285765.138 ops/s
# Warmup Iteration   9: 270240.527 ops/s
# Warmup Iteration  10: 283274.341 ops/s
# Warmup Iteration  11: 266452.732 ops/s
# Warmup Iteration  12: 285263.412 ops/s
# Warmup Iteration  13: 287601.504 ops/s
# Warmup Iteration  14: 268391.337 ops/s
# Warmup Iteration  15: 286098.483 ops/s
# Warmup Iteration  16: 277328.801 ops/s
# Warmup Iteration  17: 278474.362 ops/s
# Warmup Iteration  18: 279137.078 ops/s
# Warmup Iteration  19: 267220.067 ops/s
# Warmup Iteration  20: 288356.748 ops/s
# Warmup Iteration  21: 266823.667 ops/s
# Warmup Iteration  22: 279138.986 ops/s
# Warmup Iteration  23: 265738.777 ops/s
# Warmup Iteration  24: 270933.998 ops/s
# Warmup Iteration  25: 292139.536 ops/s
# Warmup Iteration  26: 268286.289 ops/s
# Warmup Iteration  27: 288486.900 ops/s
# Warmup Iteration  28: 278741.909 ops/s
# Warmup Iteration  29: 281591.674 ops/s
# Warmup Iteration  30: 275846.605 ops/s
Iteration   1: 282646.575 ops/s
Iteration   2: 278470.618 ops/s
Iteration   3: 268602.903 ops/s
Iteration   4: 291697.084 ops/s
Iteration   5: 263877.532 ops/s
Iteration   6: 285070.133 ops/s
Iteration   7: 283234.142 ops/s
Iteration   8: 289030.841 ops/s
Iteration   9: 269559.859 ops/s
Iteration  10: 283749.410 ops/s
Iteration  11: 277280.392 ops/s
Iteration  12: 272940.426 ops/s
Iteration  13: 289132.786 ops/s
Iteration  14: 269689.455 ops/s
Iteration  15: 277614.634 ops/s
Iteration  16: 272375.164 ops/s
Iteration  17: 273878.044 ops/s
Iteration  18: 296051.287 ops/s
Iteration  19: 268138.279 ops/s
Iteration  20: 283160.940 ops/s
Iteration  21: 272657.789 ops/s
Iteration  22: 287176.268 ops/s
Iteration  23: 274289.238 ops/s
Iteration  24: 280167.126 ops/s
Iteration  25: 288521.346 ops/s
Iteration  26: 269854.099 ops/s
Iteration  27: 288262.709 ops/s
Iteration  28: 275783.282 ops/s
Iteration  29: 273962.000 ops/s
Iteration  30: 285437.140 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupByTest._Benchmark.benchmark_cancellationOfUpstreamWhenGroupedFlowableCompletes":
  279077.050 ±(99.9%) 5511.466 ops/s [Average]
  (min, avg, max) = (263877.532, 279077.050, 296051.287), stdev = 8249.303
  CI (99.9%): [273565.584, 284588.516] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                     Mode  Cnt       Score      Error  Units
FlowableGroupByTest._Benchmark.benchmark_cancellationOfUpstreamWhenGroupedFlowableCompletes  thrpt   30  279077.050 ± 5511.466  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_timespanTimeskipDefaultScheduler$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_timespanTimeskipDefaultScheduler

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 10845.920 ops/s
# Warmup Iteration   2: 40572.873 ops/s
# Warmup Iteration   3: 105997.675 ops/s
# Warmup Iteration   4: 119137.333 ops/s
# Warmup Iteration   5: 121237.733 ops/s
# Warmup Iteration   6: 107644.546 ops/s
# Warmup Iteration   7: 104117.285 ops/s
# Warmup Iteration   8: 123535.578 ops/s
# Warmup Iteration   9: 107198.239 ops/s
# Warmup Iteration  10: 101272.678 ops/s
# Warmup Iteration  11: 119990.254 ops/s
# Warmup Iteration  12: 117343.668 ops/s
# Warmup Iteration  13: 105500.873 ops/s
# Warmup Iteration  14: 118863.395 ops/s
# Warmup Iteration  15: 99695.125 ops/s
# Warmup Iteration  16: 101832.241 ops/s
# Warmup Iteration  17: 121569.637 ops/s
# Warmup Iteration  18: 122549.065 ops/s
# Warmup Iteration  19: 123724.414 ops/s
# Warmup Iteration  20: 117358.045 ops/s
# Warmup Iteration  21: 115915.015 ops/s
# Warmup Iteration  22: 116609.081 ops/s
# Warmup Iteration  23: 119025.909 ops/s
# Warmup Iteration  24: 115676.077 ops/s
# Warmup Iteration  25: 123810.395 ops/s
# Warmup Iteration  26: 120315.064 ops/s
# Warmup Iteration  27: 132115.762 ops/s
# Warmup Iteration  28: 106132.861 ops/s
# Warmup Iteration  29: 115905.950 ops/s
# Warmup Iteration  30: 120099.331 ops/s
Iteration   1: 118335.440 ops/s
Iteration   2: 110833.305 ops/s
Iteration   3: 137519.152 ops/s
Iteration   4: 120469.885 ops/s
Iteration   5: 115556.431 ops/s
Iteration   6: 117343.602 ops/s
Iteration   7: 106588.917 ops/s
Iteration   8: 116311.572 ops/s
Iteration   9: 107351.312 ops/s
Iteration  10: 115431.636 ops/s
Iteration  11: 119540.289 ops/s
Iteration  12: 127495.293 ops/s
Iteration  13: 120814.576 ops/s
Iteration  14: 120001.934 ops/s
Iteration  15: 115692.962 ops/s
Iteration  16: 121022.206 ops/s
Iteration  17: 89757.766 ops/s
Iteration  18: 108457.386 ops/s
Iteration  19: 121717.509 ops/s
Iteration  20: 114586.274 ops/s
Iteration  21: 112465.269 ops/s
Iteration  22: 113532.363 ops/s
Iteration  23: 116480.981 ops/s
Iteration  24: 118243.689 ops/s
Iteration  25: 109340.116 ops/s
Iteration  26: 130200.029 ops/s
Iteration  27: 122669.427 ops/s
Iteration  28: 103078.606 ops/s
Iteration  29: 116748.610 ops/s
Iteration  30: 121295.071 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_timespanTimeskipDefaultScheduler":
  116296.054 ±(99.9%) 5789.580 ops/s [Average]
  (min, avg, max) = (89757.766, 116296.054, 137519.152), stdev = 8665.572
  CI (99.9%): [110506.473, 122085.634] (assumes normal distribution)


# Run complete. Total time: 00:01:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt       Score      Error  Units
FlowableWindowWithTimeTest._Benchmark.benchmark_timespanTimeskipDefaultScheduler  thrpt   30  116296.054 ± 5789.580  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_concatEagerArray$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_concatEagerArray

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 95841.733 ops/s
# Warmup Iteration   2: 500907.544 ops/s
# Warmup Iteration   3: 799669.177 ops/s
# Warmup Iteration   4: 908216.939 ops/s
# Warmup Iteration   5: 1024143.246 ops/s
# Warmup Iteration   6: 974858.640 ops/s
# Warmup Iteration   7: 951580.734 ops/s
# Warmup Iteration   8: 1030855.488 ops/s
# Warmup Iteration   9: 1040511.628 ops/s
# Warmup Iteration  10: 980496.547 ops/s
# Warmup Iteration  11: 996838.108 ops/s
# Warmup Iteration  12: 991294.526 ops/s
# Warmup Iteration  13: 1004623.600 ops/s
# Warmup Iteration  14: 978058.866 ops/s
# Warmup Iteration  15: 974342.463 ops/s
# Warmup Iteration  16: 1023244.340 ops/s
# Warmup Iteration  17: 943114.294 ops/s
# Warmup Iteration  18: 954907.950 ops/s
# Warmup Iteration  19: 1014912.817 ops/s
# Warmup Iteration  20: 968919.348 ops/s
# Warmup Iteration  21: 1017966.961 ops/s
# Warmup Iteration  22: 973051.827 ops/s
# Warmup Iteration  23: 946915.281 ops/s
# Warmup Iteration  24: 973643.839 ops/s
# Warmup Iteration  25: 1011083.107 ops/s
# Warmup Iteration  26: 972698.075 ops/s
# Warmup Iteration  27: 953360.896 ops/s
# Warmup Iteration  28: 1034001.557 ops/s
# Warmup Iteration  29: 975460.657 ops/s
# Warmup Iteration  30: 1013450.142 ops/s
Iteration   1: 971438.277 ops/s
Iteration   2: 986445.708 ops/s
Iteration   3: 987710.984 ops/s
Iteration   4: 956958.868 ops/s
Iteration   5: 1006306.133 ops/s
Iteration   6: 987450.395 ops/s
Iteration   7: 982745.424 ops/s
Iteration   8: 1021106.118 ops/s
Iteration   9: 944015.148 ops/s
Iteration  10: 984234.227 ops/s
Iteration  11: 1018563.361 ops/s
Iteration  12: 962544.931 ops/s
Iteration  13: 970319.267 ops/s
Iteration  14: 983928.325 ops/s
Iteration  15: 962078.649 ops/s
Iteration  16: 964749.117 ops/s
Iteration  17: 999098.851 ops/s
Iteration  18: 948910.534 ops/s
Iteration  19: 972670.146 ops/s
Iteration  20: 1026550.470 ops/s
Iteration  21: 961695.599 ops/s
Iteration  22: 1019501.643 ops/s
Iteration  23: 957906.851 ops/s
Iteration  24: 972562.005 ops/s
Iteration  25: 953226.750 ops/s
Iteration  26: 993153.734 ops/s
Iteration  27: 950957.042 ops/s
Iteration  28: 974466.576 ops/s
Iteration  29: 1015502.605 ops/s
Iteration  30: 988282.286 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_concatEagerArray":
  980836.001 ±(99.9%) 15683.560 ops/s [Average]
  (min, avg, max) = (944015.148, 980836.001, 1026550.470), stdev = 23474.416
  CI (99.9%): [965152.441, 996519.561] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt       Score       Error  Units
MaybeTest._Benchmark.benchmark_concatEagerArray  thrpt   30  980836.001 ± 15683.560  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_concatEagerPublisher$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_concatEagerPublisher

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 28085.861 ops/s
# Warmup Iteration   2: 341533.075 ops/s
# Warmup Iteration   3: 840715.967 ops/s
# Warmup Iteration   4: 868160.547 ops/s
# Warmup Iteration   5: 1003777.479 ops/s
# Warmup Iteration   6: 1028062.888 ops/s
# Warmup Iteration   7: 997639.952 ops/s
# Warmup Iteration   8: 1026759.027 ops/s
# Warmup Iteration   9: 1006588.987 ops/s
# Warmup Iteration  10: 1003130.234 ops/s
# Warmup Iteration  11: 1027490.985 ops/s
# Warmup Iteration  12: 981854.591 ops/s
# Warmup Iteration  13: 1045631.297 ops/s
# Warmup Iteration  14: 1030865.121 ops/s
# Warmup Iteration  15: 978080.669 ops/s
# Warmup Iteration  16: 1020714.456 ops/s
# Warmup Iteration  17: 982689.521 ops/s
# Warmup Iteration  18: 1043675.561 ops/s
# Warmup Iteration  19: 991591.535 ops/s
# Warmup Iteration  20: 1041230.470 ops/s
# Warmup Iteration  21: 1014909.741 ops/s
# Warmup Iteration  22: 983936.032 ops/s
# Warmup Iteration  23: 1055889.613 ops/s
# Warmup Iteration  24: 981233.492 ops/s
# Warmup Iteration  25: 1012379.711 ops/s
# Warmup Iteration  26: 1044239.451 ops/s
# Warmup Iteration  27: 1020968.996 ops/s
# Warmup Iteration  28: 1007591.141 ops/s
# Warmup Iteration  29: 1036322.979 ops/s
# Warmup Iteration  30: 994070.306 ops/s
Iteration   1: 1049918.789 ops/s
Iteration   2: 1006269.660 ops/s
Iteration   3: 995161.192 ops/s
Iteration   4: 1033095.255 ops/s
Iteration   5: 978164.648 ops/s
Iteration   6: 1037338.958 ops/s
Iteration   7: 1029007.845 ops/s
Iteration   8: 976303.158 ops/s
Iteration   9: 1057692.586 ops/s
Iteration  10: 997460.800 ops/s
Iteration  11: 840437.321 ops/s
Iteration  12: 1024599.194 ops/s
Iteration  13: 976749.866 ops/s
Iteration  14: 961260.039 ops/s
Iteration  15: 987147.683 ops/s
Iteration  16: 971502.070 ops/s
Iteration  17: 996451.275 ops/s
Iteration  18: 997301.286 ops/s
Iteration  19: 1000490.947 ops/s
Iteration  20: 1060944.922 ops/s
Iteration  21: 990038.430 ops/s
Iteration  22: 1019890.206 ops/s
Iteration  23: 1014173.896 ops/s
Iteration  24: 1003597.596 ops/s
Iteration  25: 1002392.751 ops/s
Iteration  26: 996916.529 ops/s
Iteration  27: 1047723.078 ops/s
Iteration  28: 1011078.526 ops/s
Iteration  29: 980923.032 ops/s
Iteration  30: 1039401.941 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_concatEagerPublisher":
  1002781.116 ±(99.9%) 27149.013 ops/s [Average]
  (min, avg, max) = (840437.321, 1002781.116, 1060944.922), stdev = 40635.367
  CI (99.9%): [975632.103, 1029930.129] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score       Error  Units
MaybeTest._Benchmark.benchmark_concatEagerPublisher  thrpt   30  1002781.116 ± 27149.013  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_concatEagerIterable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_concatEagerIterable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 56489.274 ops/s
# Warmup Iteration   2: 304816.609 ops/s
# Warmup Iteration   3: 498791.661 ops/s
# Warmup Iteration   4: 915358.009 ops/s
# Warmup Iteration   5: 909913.602 ops/s
# Warmup Iteration   6: 914948.999 ops/s
# Warmup Iteration   7: 849853.036 ops/s
# Warmup Iteration   8: 972530.882 ops/s
# Warmup Iteration   9: 968006.424 ops/s
# Warmup Iteration  10: 944583.822 ops/s
# Warmup Iteration  11: 970532.606 ops/s
# Warmup Iteration  12: 955952.249 ops/s
# Warmup Iteration  13: 955256.300 ops/s
# Warmup Iteration  14: 938353.657 ops/s
# Warmup Iteration  15: 971570.908 ops/s
# Warmup Iteration  16: 992252.237 ops/s
# Warmup Iteration  17: 945151.351 ops/s
# Warmup Iteration  18: 972208.925 ops/s
# Warmup Iteration  19: 1009237.847 ops/s
# Warmup Iteration  20: 941504.516 ops/s
# Warmup Iteration  21: 985321.078 ops/s
# Warmup Iteration  22: 952426.180 ops/s
# Warmup Iteration  23: 959171.201 ops/s
# Warmup Iteration  24: 962191.117 ops/s
# Warmup Iteration  25: 996544.249 ops/s
# Warmup Iteration  26: 945316.074 ops/s
# Warmup Iteration  27: 995654.630 ops/s
# Warmup Iteration  28: 962548.587 ops/s
# Warmup Iteration  29: 947679.882 ops/s
# Warmup Iteration  30: 1013640.044 ops/s
Iteration   1: 943685.039 ops/s
Iteration   2: 1003587.459 ops/s
Iteration   3: 956445.061 ops/s
Iteration   4: 958605.494 ops/s
Iteration   5: 987892.705 ops/s
Iteration   6: 945027.001 ops/s
Iteration   7: 966253.424 ops/s
Iteration   8: 948773.793 ops/s
Iteration   9: 957652.299 ops/s
Iteration  10: 947740.029 ops/s
Iteration  11: 995855.572 ops/s
Iteration  12: 1004246.858 ops/s
Iteration  13: 958649.543 ops/s
Iteration  14: 950249.340 ops/s
Iteration  15: 997428.965 ops/s
Iteration  16: 952504.323 ops/s
Iteration  17: 991567.617 ops/s
Iteration  18: 953939.569 ops/s
Iteration  19: 978992.814 ops/s
Iteration  20: 939662.473 ops/s
Iteration  21: 986384.509 ops/s
Iteration  22: 1003806.563 ops/s
Iteration  23: 963968.843 ops/s
Iteration  24: 944111.970 ops/s
Iteration  25: 977515.373 ops/s
Iteration  26: 961287.038 ops/s
Iteration  27: 979024.868 ops/s
Iteration  28: 978371.879 ops/s
Iteration  29: 952092.223 ops/s
Iteration  30: 974842.552 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_concatEagerIterable":
  968672.173 ±(99.9%) 13605.782 ops/s [Average]
  (min, avg, max) = (939662.473, 968672.173, 1004246.858), stdev = 20364.495
  CI (99.9%): [955066.392, 982277.955] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score       Error  Units
MaybeTest._Benchmark.benchmark_concatEagerIterable  thrpt   30  968672.173 ± 13605.782  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArrayTest._Benchmark.benchmark_errorAfterTermination$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArrayTest._Benchmark.benchmark_errorAfterTermination

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 18753.531 ops/s
# Warmup Iteration   2: 111416.670 ops/s
# Warmup Iteration   3: 157767.802 ops/s
# Warmup Iteration   4: 173813.085 ops/s
# Warmup Iteration   5: 166116.665 ops/s
# Warmup Iteration   6: 180505.677 ops/s
# Warmup Iteration   7: 182621.230 ops/s
# Warmup Iteration   8: 188869.980 ops/s
# Warmup Iteration   9: 185499.035 ops/s
# Warmup Iteration  10: 188629.539 ops/s
# Warmup Iteration  11: 189822.787 ops/s
# Warmup Iteration  12: 191201.954 ops/s
# Warmup Iteration  13: 185205.434 ops/s
# Warmup Iteration  14: 194582.791 ops/s
# Warmup Iteration  15: 180506.246 ops/s
# Warmup Iteration  16: 190955.531 ops/s
# Warmup Iteration  17: 194114.514 ops/s
# Warmup Iteration  18: 197161.042 ops/s
# Warmup Iteration  19: 188071.765 ops/s
# Warmup Iteration  20: 194034.536 ops/s
# Warmup Iteration  21: 196875.730 ops/s
# Warmup Iteration  22: 186399.772 ops/s
# Warmup Iteration  23: 192731.657 ops/s
# Warmup Iteration  24: 197228.512 ops/s
# Warmup Iteration  25: 202303.152 ops/s
# Warmup Iteration  26: 185084.149 ops/s
# Warmup Iteration  27: 192952.755 ops/s
# Warmup Iteration  28: 202813.776 ops/s
# Warmup Iteration  29: 188372.817 ops/s
# Warmup Iteration  30: 193369.737 ops/s
Iteration   1: 190832.703 ops/s
Iteration   2: 198408.510 ops/s
Iteration   3: 188796.974 ops/s
Iteration   4: 192928.498 ops/s
Iteration   5: 194645.625 ops/s
Iteration   6: 130459.665 ops/s
Iteration   7: 195551.967 ops/s
Iteration   8: 198879.940 ops/s
Iteration   9: 189108.457 ops/s
Iteration  10: 197467.810 ops/s
Iteration  11: 187038.651 ops/s
Iteration  12: 199248.777 ops/s
Iteration  13: 192074.747 ops/s
Iteration  14: 189501.651 ops/s
Iteration  15: 197682.462 ops/s
Iteration  16: 189791.684 ops/s
Iteration  17: 200465.157 ops/s
Iteration  18: 189095.242 ops/s
Iteration  19: 194098.409 ops/s
Iteration  20: 190191.048 ops/s
Iteration  21: 189724.880 ops/s
Iteration  22: 198390.133 ops/s
Iteration  23: 187844.370 ops/s
Iteration  24: 194775.127 ops/s
Iteration  25: 190798.793 ops/s
Iteration  26: 197266.937 ops/s
Iteration  27: 194281.118 ops/s
Iteration  28: 184417.247 ops/s
Iteration  29: 201973.224 ops/s
Iteration  30: 189030.334 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArrayTest._Benchmark.benchmark_errorAfterTermination":
  191159.005 ±(99.9%) 8233.545 ops/s [Average]
  (min, avg, max) = (130459.665, 191159.005, 201973.224), stdev = 12323.584
  CI (99.9%): [182925.459, 199392.550] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score      Error  Units
MaybeConcatArrayTest._Benchmark.benchmark_errorAfterTermination  thrpt   30  191159.005 ± 8233.545  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowableTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowableTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 128348.111 ops/s
# Warmup Iteration   2: 422539.449 ops/s
# Warmup Iteration   3: 473046.285 ops/s
# Warmup Iteration   4: 454557.130 ops/s
# Warmup Iteration   5: 506513.749 ops/s
# Warmup Iteration   6: 508298.626 ops/s
# Warmup Iteration   7: 493712.991 ops/s
# Warmup Iteration   8: 525805.009 ops/s
# Warmup Iteration   9: 493318.214 ops/s
# Warmup Iteration  10: 522707.671 ops/s
# Warmup Iteration  11: 481559.124 ops/s
# Warmup Iteration  12: 469886.730 ops/s
# Warmup Iteration  13: 495176.280 ops/s
# Warmup Iteration  14: 507450.323 ops/s
# Warmup Iteration  15: 517228.028 ops/s
# Warmup Iteration  16: 522499.519 ops/s
# Warmup Iteration  17: 527145.324 ops/s
# Warmup Iteration  18: 527926.801 ops/s
# Warmup Iteration  19: 539379.980 ops/s
# Warmup Iteration  20: 514690.603 ops/s
# Warmup Iteration  21: 543830.417 ops/s
# Warmup Iteration  22: 524783.520 ops/s
# Warmup Iteration  23: 504614.986 ops/s
# Warmup Iteration  24: 529819.468 ops/s
# Warmup Iteration  25: 539292.215 ops/s
# Warmup Iteration  26: 517471.745 ops/s
# Warmup Iteration  27: 544644.815 ops/s
# Warmup Iteration  28: 516979.296 ops/s
# Warmup Iteration  29: 538580.543 ops/s
# Warmup Iteration  30: 538148.911 ops/s
Iteration   1: 512816.826 ops/s
Iteration   2: 532433.696 ops/s
Iteration   3: 531904.255 ops/s
Iteration   4: 523829.912 ops/s
Iteration   5: 523565.365 ops/s
Iteration   6: 519115.515 ops/s
Iteration   7: 530412.317 ops/s
Iteration   8: 521887.336 ops/s
Iteration   9: 512675.476 ops/s
Iteration  10: 544774.427 ops/s
Iteration  11: 498180.396 ops/s
Iteration  12: 520932.625 ops/s
Iteration  13: 512904.444 ops/s
Iteration  14: 533921.854 ops/s
Iteration  15: 533370.230 ops/s
Iteration  16: 546270.224 ops/s
Iteration  17: 510528.637 ops/s
Iteration  18: 520822.896 ops/s
Iteration  19: 529131.985 ops/s
Iteration  20: 509454.085 ops/s
Iteration  21: 529910.646 ops/s
Iteration  22: 520185.036 ops/s
Iteration  23: 536712.347 ops/s
Iteration  24: 554853.657 ops/s
Iteration  25: 508800.574 ops/s
Iteration  26: 544863.179 ops/s
Iteration  27: 513928.874 ops/s
Iteration  28: 520457.428 ops/s
Iteration  29: 537150.513 ops/s
Iteration  30: 515420.320 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowableTest._Benchmark.benchmark_doubleOnSubscribe":
  525040.503 ±(99.9%) 8734.419 ops/s [Average]
  (min, avg, max) = (498180.396, 525040.503, 554853.657), stdev = 13073.268
  CI (99.9%): [516306.084, 533774.922] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score      Error  Units
MaybeFlattenStreamAsFlowableTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  525040.503 ± 8734.419  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableCollectWithCollectorTest._Benchmark.benchmark_collectorAccumulatorCrashToFlowable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableCollectWithCollectorTest._Benchmark.benchmark_collectorAccumulatorCrashToFlowable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 78569.410 ops/s
# Warmup Iteration   2: 320935.701 ops/s
# Warmup Iteration   3: 466001.058 ops/s
# Warmup Iteration   4: 466950.025 ops/s
# Warmup Iteration   5: 540730.228 ops/s
# Warmup Iteration   6: 541034.593 ops/s
# Warmup Iteration   7: 509308.336 ops/s
# Warmup Iteration   8: 527575.915 ops/s
# Warmup Iteration   9: 530396.691 ops/s
# Warmup Iteration  10: 513277.059 ops/s
# Warmup Iteration  11: 523790.630 ops/s
# Warmup Iteration  12: 523372.289 ops/s
# Warmup Iteration  13: 523213.483 ops/s
# Warmup Iteration  14: 535159.375 ops/s
# Warmup Iteration  15: 514915.928 ops/s
# Warmup Iteration  16: 502295.932 ops/s
# Warmup Iteration  17: 568432.688 ops/s
# Warmup Iteration  18: 530952.332 ops/s
# Warmup Iteration  19: 562580.184 ops/s
# Warmup Iteration  20: 531250.277 ops/s
# Warmup Iteration  21: 556189.390 ops/s
# Warmup Iteration  22: 546377.978 ops/s
# Warmup Iteration  23: 528152.954 ops/s
# Warmup Iteration  24: 560125.001 ops/s
# Warmup Iteration  25: 530312.203 ops/s
# Warmup Iteration  26: 541674.271 ops/s
# Warmup Iteration  27: 537794.867 ops/s
# Warmup Iteration  28: 540237.905 ops/s
# Warmup Iteration  29: 550336.619 ops/s
# Warmup Iteration  30: 504829.576 ops/s
Iteration   1: 470741.578 ops/s
Iteration   2: 518766.369 ops/s
Iteration   3: 538098.135 ops/s
Iteration   4: 564707.000 ops/s
Iteration   5: 509205.466 ops/s
Iteration   6: 546613.672 ops/s
Iteration   7: 538606.618 ops/s
Iteration   8: 546941.942 ops/s
Iteration   9: 528535.927 ops/s
Iteration  10: 542075.049 ops/s
Iteration  11: 557983.863 ops/s
Iteration  12: 537034.153 ops/s
Iteration  13: 560009.919 ops/s
Iteration  14: 548657.814 ops/s
Iteration  15: 557507.524 ops/s
Iteration  16: 522064.820 ops/s
Iteration  17: 549288.998 ops/s
Iteration  18: 536384.646 ops/s
Iteration  19: 539913.474 ops/s
Iteration  20: 554601.593 ops/s
Iteration  21: 533851.761 ops/s
Iteration  22: 562456.546 ops/s
Iteration  23: 530535.607 ops/s
Iteration  24: 543157.605 ops/s
Iteration  25: 548670.945 ops/s
Iteration  26: 519258.663 ops/s
Iteration  27: 546135.485 ops/s
Iteration  28: 542610.861 ops/s
Iteration  29: 542709.650 ops/s
Iteration  30: 522028.540 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableCollectWithCollectorTest._Benchmark.benchmark_collectorAccumulatorCrashToFlowable":
  538638.474 ±(99.9%) 12563.166 ops/s [Average]
  (min, avg, max) = (470741.578, 538638.474, 564707.000), stdev = 18803.957
  CI (99.9%): [526075.308, 551201.640] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                   Mode  Cnt       Score       Error  Units
FlowableCollectWithCollectorTest._Benchmark.benchmark_collectorAccumulatorCrashToFlowable  thrpt   30  538638.474 ± 12563.166  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureErrorTest._Benchmark.benchmark_badRequest$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureErrorTest._Benchmark.benchmark_badRequest

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 78043.852 ops/s
# Warmup Iteration   2: 346455.897 ops/s
# Warmup Iteration   3: 418593.935 ops/s
# Warmup Iteration   4: 425731.276 ops/s
# Warmup Iteration   5: 430945.950 ops/s
# Warmup Iteration   6: 440046.587 ops/s
# Warmup Iteration   7: 456903.782 ops/s
# Warmup Iteration   8: 449932.774 ops/s
# Warmup Iteration   9: 465731.362 ops/s
# Warmup Iteration  10: 457670.887 ops/s
# Warmup Iteration  11: 471052.302 ops/s
# Warmup Iteration  12: 467825.116 ops/s
# Warmup Iteration  13: 460342.549 ops/s
# Warmup Iteration  14: 465434.534 ops/s
# Warmup Iteration  15: 450710.516 ops/s
# Warmup Iteration  16: 467833.503 ops/s
# Warmup Iteration  17: 477818.133 ops/s
# Warmup Iteration  18: 484556.837 ops/s
# Warmup Iteration  19: 476855.983 ops/s
# Warmup Iteration  20: 478801.401 ops/s
# Warmup Iteration  21: 492959.709 ops/s
# Warmup Iteration  22: 452145.372 ops/s
# Warmup Iteration  23: 449949.471 ops/s
# Warmup Iteration  24: 479961.793 ops/s
# Warmup Iteration  25: 489792.672 ops/s
# Warmup Iteration  26: 474442.010 ops/s
# Warmup Iteration  27: 478047.675 ops/s
# Warmup Iteration  28: 484420.383 ops/s
# Warmup Iteration  29: 474888.730 ops/s
# Warmup Iteration  30: 493238.886 ops/s
Iteration   1: 481435.909 ops/s
Iteration   2: 480113.092 ops/s
Iteration   3: 468286.546 ops/s
Iteration   4: 476480.810 ops/s
Iteration   5: 478333.079 ops/s
Iteration   6: 473899.137 ops/s
Iteration   7: 484969.949 ops/s
Iteration   8: 472306.166 ops/s
Iteration   9: 499187.957 ops/s
Iteration  10: 469442.587 ops/s
Iteration  11: 470829.823 ops/s
Iteration  12: 484736.149 ops/s
Iteration  13: 490903.033 ops/s
Iteration  14: 472554.197 ops/s
Iteration  15: 489846.290 ops/s
Iteration  16: 481914.363 ops/s
Iteration  17: 474956.850 ops/s
Iteration  18: 485843.454 ops/s
Iteration  19: 490580.441 ops/s
Iteration  20: 474257.557 ops/s
Iteration  21: 485367.422 ops/s
Iteration  22: 478613.286 ops/s
Iteration  23: 491793.506 ops/s
Iteration  24: 478102.948 ops/s
Iteration  25: 483435.856 ops/s
Iteration  26: 497585.944 ops/s
Iteration  27: 472811.333 ops/s
Iteration  28: 487902.984 ops/s
Iteration  29: 477114.353 ops/s
Iteration  30: 486541.563 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureErrorTest._Benchmark.benchmark_badRequest":
  481338.219 ±(99.9%) 5474.600 ops/s [Average]
  (min, avg, max) = (468286.546, 481338.219, 499187.957), stdev = 8194.124
  CI (99.9%): [475863.620, 486812.819] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score      Error  Units
FlowableOnBackpressureErrorTest._Benchmark.benchmark_badRequest  thrpt   30  481338.219 ± 5474.600  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromObservableTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromObservableTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2110558.438 ops/s
# Warmup Iteration   2: 4034931.980 ops/s
# Warmup Iteration   3: 5718982.188 ops/s
# Warmup Iteration   4: 5555899.460 ops/s
# Warmup Iteration   5: 5545204.576 ops/s
# Warmup Iteration   6: 5763311.229 ops/s
# Warmup Iteration   7: 5646434.525 ops/s
# Warmup Iteration   8: 5384917.500 ops/s
# Warmup Iteration   9: 5686287.843 ops/s
# Warmup Iteration  10: 5358706.251 ops/s
# Warmup Iteration  11: 5681290.291 ops/s
# Warmup Iteration  12: 5428436.390 ops/s
# Warmup Iteration  13: 5483246.619 ops/s
# Warmup Iteration  14: 5631350.697 ops/s
# Warmup Iteration  15: 5581764.976 ops/s
# Warmup Iteration  16: 5647794.999 ops/s
# Warmup Iteration  17: 5436063.611 ops/s
# Warmup Iteration  18: 5786388.880 ops/s
# Warmup Iteration  19: 5482804.897 ops/s
# Warmup Iteration  20: 5789844.459 ops/s
# Warmup Iteration  21: 5523298.155 ops/s
# Warmup Iteration  22: 5586836.862 ops/s
# Warmup Iteration  23: 5817928.932 ops/s
# Warmup Iteration  24: 5510557.502 ops/s
# Warmup Iteration  25: 5112005.466 ops/s
# Warmup Iteration  26: 5138659.972 ops/s
# Warmup Iteration  27: 5477858.001 ops/s
# Warmup Iteration  28: 5644545.046 ops/s
# Warmup Iteration  29: 5573799.280 ops/s
# Warmup Iteration  30: 5427731.079 ops/s
Iteration   1: 5708856.220 ops/s
Iteration   2: 5551434.376 ops/s
Iteration   3: 5724645.377 ops/s
Iteration   4: 5681902.445 ops/s
Iteration   5: 5522230.767 ops/s
Iteration   6: 5614870.207 ops/s
Iteration   7: 5897177.751 ops/s
Iteration   8: 5492690.752 ops/s
Iteration   9: 5823666.231 ops/s
Iteration  10: 5466238.270 ops/s
Iteration  11: 5659037.085 ops/s
Iteration  12: 5592497.773 ops/s
Iteration  13: 5676141.450 ops/s
Iteration  14: 5504026.030 ops/s
Iteration  15: 5542122.023 ops/s
Iteration  16: 5806345.938 ops/s
Iteration  17: 5473802.326 ops/s
Iteration  18: 5696520.457 ops/s
Iteration  19: 5643982.786 ops/s
Iteration  20: 5482459.459 ops/s
Iteration  21: 5479656.896 ops/s
Iteration  22: 5615492.657 ops/s
Iteration  23: 5474655.022 ops/s
Iteration  24: 5818162.777 ops/s
Iteration  25: 5913954.064 ops/s
Iteration  26: 5463278.178 ops/s
Iteration  27: 5652538.711 ops/s
Iteration  28: 5688788.702 ops/s
Iteration  29: 5462468.793 ops/s
Iteration  30: 5569691.351 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromObservableTest._Benchmark.benchmark_dispose":
  5623311.162 ±(99.9%) 89928.657 ops/s [Average]
  (min, avg, max) = (5462468.793, 5623311.162, 5913954.064), stdev = 134600.991
  CI (99.9%): [5533382.505, 5713239.820] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
FlowableFromObservableTest._Benchmark.benchmark_dispose  thrpt   30  5623311.162 ± 89928.657  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDematerializeTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDematerializeTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3259617.053 ops/s
# Warmup Iteration   2: 6666686.784 ops/s
# Warmup Iteration   3: 9398127.323 ops/s
# Warmup Iteration   4: 9546666.105 ops/s
# Warmup Iteration   5: 9602536.584 ops/s
# Warmup Iteration   6: 9545002.773 ops/s
# Warmup Iteration   7: 9226774.668 ops/s
# Warmup Iteration   8: 10046151.968 ops/s
# Warmup Iteration   9: 9146264.212 ops/s
# Warmup Iteration  10: 9731415.473 ops/s
# Warmup Iteration  11: 9742542.299 ops/s
# Warmup Iteration  12: 9273036.979 ops/s
# Warmup Iteration  13: 9886060.673 ops/s
# Warmup Iteration  14: 9294725.524 ops/s
# Warmup Iteration  15: 9474663.933 ops/s
# Warmup Iteration  16: 9699470.217 ops/s
# Warmup Iteration  17: 9488420.974 ops/s
# Warmup Iteration  18: 9609980.934 ops/s
# Warmup Iteration  19: 9960350.168 ops/s
# Warmup Iteration  20: 9162684.997 ops/s
# Warmup Iteration  21: 9739455.647 ops/s
# Warmup Iteration  22: 9341458.918 ops/s
# Warmup Iteration  23: 9187027.170 ops/s
# Warmup Iteration  24: 9477918.284 ops/s
# Warmup Iteration  25: 9220295.525 ops/s
# Warmup Iteration  26: 9538889.963 ops/s
# Warmup Iteration  27: 9728427.215 ops/s
# Warmup Iteration  28: 9280282.848 ops/s
# Warmup Iteration  29: 9614273.955 ops/s
# Warmup Iteration  30: 9438716.262 ops/s
Iteration   1: 9773700.363 ops/s
Iteration   2: 9425128.582 ops/s
Iteration   3: 9486135.228 ops/s
Iteration   4: 9856968.779 ops/s
Iteration   5: 10017225.807 ops/s
Iteration   6: 9527520.323 ops/s
Iteration   7: 9366938.542 ops/s
Iteration   8: 9630762.122 ops/s
Iteration   9: 9410584.309 ops/s
Iteration  10: 9833268.492 ops/s
Iteration  11: 9536566.863 ops/s
Iteration  12: 9550877.412 ops/s
Iteration  13: 9492380.067 ops/s
Iteration  14: 9297015.548 ops/s
Iteration  15: 9916867.136 ops/s
Iteration  16: 9355858.309 ops/s
Iteration  17: 9647333.410 ops/s
Iteration  18: 9512791.133 ops/s
Iteration  19: 9327831.699 ops/s
Iteration  20: 9912087.552 ops/s
Iteration  21: 9192575.146 ops/s
Iteration  22: 9636903.689 ops/s
Iteration  23: 9098492.717 ops/s
Iteration  24: 9526600.557 ops/s
Iteration  25: 9802084.186 ops/s
Iteration  26: 9512357.071 ops/s
Iteration  27: 9421546.708 ops/s
Iteration  28: 9765147.233 ops/s
Iteration  29: 9097203.345 ops/s
Iteration  30: 9710551.022 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableDematerializeTest._Benchmark.benchmark_dispose":
  9554710.112 ±(99.9%) 159421.386 ops/s [Average]
  (min, avg, max) = (9097203.345, 9554710.112, 10017225.807), stdev = 238614.443
  CI (99.9%): [9395288.726, 9714131.497] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score        Error  Units
ObservableDematerializeTest._Benchmark.benchmark_dispose  thrpt   30  9554710.112 ± 159421.386  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureErrorTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureErrorTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1141948.972 ops/s
# Warmup Iteration   2: 3962361.603 ops/s
# Warmup Iteration   3: 4781863.755 ops/s
# Warmup Iteration   4: 5568467.086 ops/s
# Warmup Iteration   5: 5122582.345 ops/s
# Warmup Iteration   6: 5355647.715 ops/s
# Warmup Iteration   7: 5437542.897 ops/s
# Warmup Iteration   8: 5205548.580 ops/s
# Warmup Iteration   9: 5441607.282 ops/s
# Warmup Iteration  10: 5230292.581 ops/s
# Warmup Iteration  11: 5323399.311 ops/s
# Warmup Iteration  12: 5506372.290 ops/s
# Warmup Iteration  13: 5303760.710 ops/s
# Warmup Iteration  14: 5449931.386 ops/s
# Warmup Iteration  15: 5109853.350 ops/s
# Warmup Iteration  16: 5544298.828 ops/s
# Warmup Iteration  17: 5326534.935 ops/s
# Warmup Iteration  18: 5277547.010 ops/s
# Warmup Iteration  19: 5323957.250 ops/s
# Warmup Iteration  20: 4437755.603 ops/s
# Warmup Iteration  21: 5131951.233 ops/s
# Warmup Iteration  22: 5503651.893 ops/s
# Warmup Iteration  23: 5367475.427 ops/s
# Warmup Iteration  24: 5125480.881 ops/s
# Warmup Iteration  25: 5343780.890 ops/s
# Warmup Iteration  26: 5306779.106 ops/s
# Warmup Iteration  27: 5380052.094 ops/s
# Warmup Iteration  28: 5495752.757 ops/s
# Warmup Iteration  29: 5258356.089 ops/s
# Warmup Iteration  30: 5517590.039 ops/s
Iteration   1: 5132282.468 ops/s
Iteration   2: 5325793.650 ops/s
Iteration   3: 5192586.119 ops/s
Iteration   4: 5227874.616 ops/s
Iteration   5: 5246811.045 ops/s
Iteration   6: 5288992.467 ops/s
Iteration   7: 5482943.931 ops/s
Iteration   8: 5253434.847 ops/s
Iteration   9: 5425992.196 ops/s
Iteration  10: 5215489.185 ops/s
Iteration  11: 5215980.790 ops/s
Iteration  12: 5499543.618 ops/s
Iteration  13: 5004900.528 ops/s
Iteration  14: 5269500.542 ops/s
Iteration  15: 5338154.125 ops/s
Iteration  16: 5201159.370 ops/s
Iteration  17: 5456306.374 ops/s
Iteration  18: 5454132.989 ops/s
Iteration  19: 5173558.798 ops/s
Iteration  20: 5419023.071 ops/s
Iteration  21: 5194722.574 ops/s
Iteration  22: 5539843.453 ops/s
Iteration  23: 5177629.337 ops/s
Iteration  24: 5273538.111 ops/s
Iteration  25: 5247483.219 ops/s
Iteration  26: 5498681.529 ops/s
Iteration  27: 5483912.903 ops/s
Iteration  28: 5269686.956 ops/s
Iteration  29: 5436758.175 ops/s
Iteration  30: 5394859.113 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureErrorTest._Benchmark.benchmark_dispose":
  5311385.870 ±(99.9%) 89177.612 ops/s [Average]
  (min, avg, max) = (5004900.528, 5311385.870, 5539843.453), stdev = 133476.862
  CI (99.9%): [5222208.258, 5400563.482] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
FlowableOnBackpressureErrorTest._Benchmark.benchmark_dispose  thrpt   30  5311385.870 ± 89177.612  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMapTest._Benchmark.benchmark_mapWithErrorInFunc$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMapTest._Benchmark.benchmark_mapWithErrorInFunc

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 114.868 ops/s
# Warmup Iteration   2: 14289.448 ops/s
# Warmup Iteration   3: 22527.790 ops/s
# Warmup Iteration   4: 168477.019 ops/s
# Warmup Iteration   5: 383609.546 ops/s
# Warmup Iteration   6: 532749.406 ops/s
# Warmup Iteration   7: 556584.813 ops/s
# Warmup Iteration   8: 544180.701 ops/s
# Warmup Iteration   9: 509987.187 ops/s
# Warmup Iteration  10: 562198.917 ops/s
# Warmup Iteration  11: 553344.693 ops/s
# Warmup Iteration  12: 538849.175 ops/s
# Warmup Iteration  13: 552107.558 ops/s
# Warmup Iteration  14: 574646.253 ops/s
# Warmup Iteration  15: 525846.632 ops/s
# Warmup Iteration  16: 580332.940 ops/s
# Warmup Iteration  17: 563053.200 ops/s
# Warmup Iteration  18: 529377.583 ops/s
# Warmup Iteration  19: 587773.604 ops/s
# Warmup Iteration  20: 580401.086 ops/s
# Warmup Iteration  21: 553681.479 ops/s
# Warmup Iteration  22: 567503.847 ops/s
# Warmup Iteration  23: 581258.523 ops/s
# Warmup Iteration  24: 551941.893 ops/s
# Warmup Iteration  25: 547216.096 ops/s
# Warmup Iteration  26: 588701.465 ops/s
# Warmup Iteration  27: 534257.885 ops/s
# Warmup Iteration  28: 562839.238 ops/s
# Warmup Iteration  29: 584002.082 ops/s
# Warmup Iteration  30: 555852.886 ops/s
Iteration   1: 555969.791 ops/s
Iteration   2: 559443.149 ops/s
Iteration   3: 543144.042 ops/s
Iteration   4: 565278.759 ops/s
Iteration   5: 583596.330 ops/s
Iteration   6: 553042.927 ops/s
Iteration   7: 569982.879 ops/s
Iteration   8: 558629.416 ops/s
Iteration   9: 560182.350 ops/s
Iteration  10: 574418.869 ops/s
Iteration  11: 554012.181 ops/s
Iteration  12: 560937.209 ops/s
Iteration  13: 553747.155 ops/s
Iteration  14: 555628.181 ops/s
Iteration  15: 578987.621 ops/s
Iteration  16: 554937.435 ops/s
Iteration  17: 576310.794 ops/s
Iteration  18: 549534.524 ops/s
Iteration  19: 572934.946 ops/s
Iteration  20: 570910.298 ops/s
Iteration  21: 544063.167 ops/s
Iteration  22: 559506.139 ops/s
Iteration  23: 562408.784 ops/s
Iteration  24: 564951.718 ops/s
Iteration  25: 573863.103 ops/s
Iteration  26: 544506.081 ops/s
Iteration  27: 580563.619 ops/s
Iteration  28: 554927.535 ops/s
Iteration  29: 557405.139 ops/s
Iteration  30: 575710.636 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableMapTest._Benchmark.benchmark_mapWithErrorInFunc":
  562317.826 ±(99.9%) 7489.275 ops/s [Average]
  (min, avg, max) = (543144.042, 562317.826, 583596.330), stdev = 11209.596
  CI (99.9%): [554828.550, 569807.101] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
ObservableMapTest._Benchmark.benchmark_mapWithErrorInFunc  thrpt   30  562317.826 ± 7489.275  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtTest._Benchmark.benchmark_elementAtOrErrorOneElement$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtTest._Benchmark.benchmark_elementAtOrErrorOneElement

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1048634.143 ops/s
# Warmup Iteration   2: 4481604.064 ops/s
# Warmup Iteration   3: 5580320.286 ops/s
# Warmup Iteration   4: 6225906.950 ops/s
# Warmup Iteration   5: 6513958.012 ops/s
# Warmup Iteration   6: 6183376.122 ops/s
# Warmup Iteration   7: 6082875.185 ops/s
# Warmup Iteration   8: 6405273.209 ops/s
# Warmup Iteration   9: 6128178.130 ops/s
# Warmup Iteration  10: 6397404.325 ops/s
# Warmup Iteration  11: 6469315.988 ops/s
# Warmup Iteration  12: 6055272.997 ops/s
# Warmup Iteration  13: 6373031.789 ops/s
# Warmup Iteration  14: 6468773.515 ops/s
# Warmup Iteration  15: 4763157.618 ops/s
# Warmup Iteration  16: 6245010.065 ops/s
# Warmup Iteration  17: 6237478.822 ops/s
# Warmup Iteration  18: 6307955.607 ops/s
# Warmup Iteration  19: 6312985.983 ops/s
# Warmup Iteration  20: 6326931.835 ops/s
# Warmup Iteration  21: 6424631.234 ops/s
# Warmup Iteration  22: 6312538.095 ops/s
# Warmup Iteration  23: 6197835.348 ops/s
# Warmup Iteration  24: 6255751.673 ops/s
# Warmup Iteration  25: 6564177.420 ops/s
# Warmup Iteration  26: 6048398.246 ops/s
# Warmup Iteration  27: 6376336.475 ops/s
# Warmup Iteration  28: 6329602.808 ops/s
# Warmup Iteration  29: 6450570.164 ops/s
# Warmup Iteration  30: 6486240.025 ops/s
Iteration   1: 6207019.424 ops/s
Iteration   2: 6324030.483 ops/s
Iteration   3: 6403063.831 ops/s
Iteration   4: 6292343.345 ops/s
Iteration   5: 6356435.952 ops/s
Iteration   6: 6076759.789 ops/s
Iteration   7: 6705798.042 ops/s
Iteration   8: 6131059.096 ops/s
Iteration   9: 6338089.991 ops/s
Iteration  10: 6644119.721 ops/s
Iteration  11: 6182547.804 ops/s
Iteration  12: 6434366.339 ops/s
Iteration  13: 6618249.495 ops/s
Iteration  14: 6029575.177 ops/s
Iteration  15: 6564164.740 ops/s
Iteration  16: 6547025.024 ops/s
Iteration  17: 6171384.952 ops/s
Iteration  18: 6340672.393 ops/s
Iteration  19: 6216756.622 ops/s
Iteration  20: 6381635.243 ops/s
Iteration  21: 6576435.161 ops/s
Iteration  22: 6192576.912 ops/s
Iteration  23: 6478456.102 ops/s
Iteration  24: 6168912.827 ops/s
Iteration  25: 6489547.796 ops/s
Iteration  26: 6275237.105 ops/s
Iteration  27: 6370696.970 ops/s
Iteration  28: 6345537.264 ops/s
Iteration  29: 6183895.189 ops/s
Iteration  30: 6522440.996 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtTest._Benchmark.benchmark_elementAtOrErrorOneElement":
  6352294.460 ±(99.9%) 118765.169 ops/s [Average]
  (min, avg, max) = (6029575.177, 6352294.460, 6705798.042), stdev = 177762.128
  CI (99.9%): [6233529.290, 6471059.629] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score        Error  Units
ObservableElementAtTest._Benchmark.benchmark_elementAtOrErrorOneElement  thrpt   30  6352294.460 ± 118765.169  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableToListTest._Benchmark.benchmark_listWithBlockingFirstObservable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableToListTest._Benchmark.benchmark_listWithBlockingFirstObservable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 732301.749 ops/s
# Warmup Iteration   2: 3919131.432 ops/s
# Warmup Iteration   3: 5870981.511 ops/s
# Warmup Iteration   4: 5952220.134 ops/s
# Warmup Iteration   5: 5888467.470 ops/s
# Warmup Iteration   6: 6299961.413 ops/s
# Warmup Iteration   7: 5782054.584 ops/s
# Warmup Iteration   8: 6145459.713 ops/s
# Warmup Iteration   9: 6098096.189 ops/s
# Warmup Iteration  10: 5784339.047 ops/s
# Warmup Iteration  11: 6200965.030 ops/s
# Warmup Iteration  12: 6125219.947 ops/s
# Warmup Iteration  13: 5845733.168 ops/s
# Warmup Iteration  14: 5845325.366 ops/s
# Warmup Iteration  15: 6186582.506 ops/s
# Warmup Iteration  16: 5784769.278 ops/s
# Warmup Iteration  17: 6034830.059 ops/s
# Warmup Iteration  18: 5929254.677 ops/s
# Warmup Iteration  19: 6144637.798 ops/s
# Warmup Iteration  20: 5977641.298 ops/s
# Warmup Iteration  21: 5909975.956 ops/s
# Warmup Iteration  22: 6109830.725 ops/s
# Warmup Iteration  23: 5938123.684 ops/s
# Warmup Iteration  24: 5845867.942 ops/s
# Warmup Iteration  25: 6155833.514 ops/s
# Warmup Iteration  26: 5719227.870 ops/s
# Warmup Iteration  27: 6147421.848 ops/s
# Warmup Iteration  28: 6138860.703 ops/s
# Warmup Iteration  29: 5916622.370 ops/s
# Warmup Iteration  30: 5660336.077 ops/s
Iteration   1: 6082095.988 ops/s
Iteration   2: 5928677.811 ops/s
Iteration   3: 5970883.338 ops/s
Iteration   4: 6095023.363 ops/s
Iteration   5: 5838216.005 ops/s
Iteration   6: 6071951.281 ops/s
Iteration   7: 5794682.149 ops/s
Iteration   8: 5897816.790 ops/s
Iteration   9: 5965092.304 ops/s
Iteration  10: 5762655.555 ops/s
Iteration  11: 6244517.249 ops/s
Iteration  12: 5790193.551 ops/s
Iteration  13: 5822065.255 ops/s
Iteration  14: 5995694.877 ops/s
Iteration  15: 6115960.830 ops/s
Iteration  16: 5847335.755 ops/s
Iteration  17: 5929287.391 ops/s
Iteration  18: 6060480.870 ops/s
Iteration  19: 5637865.553 ops/s
Iteration  20: 6114355.596 ops/s
Iteration  21: 5813572.973 ops/s
Iteration  22: 6078407.217 ops/s
Iteration  23: 6196752.821 ops/s
Iteration  24: 5740258.364 ops/s
Iteration  25: 6116938.146 ops/s
Iteration  26: 5897973.751 ops/s
Iteration  27: 6256170.793 ops/s
Iteration  28: 5999699.991 ops/s
Iteration  29: 6028757.365 ops/s
Iteration  30: 6102063.541 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableToListTest._Benchmark.benchmark_listWithBlockingFirstObservable":
  5973181.549 ±(99.9%) 104890.281 ops/s [Average]
  (min, avg, max) = (5637865.553, 5973181.549, 6256170.793), stdev = 156994.846
  CI (99.9%): [5868291.268, 6078071.830] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score        Error  Units
ObservableToListTest._Benchmark.benchmark_listWithBlockingFirstObservable  thrpt   30  5973181.549 ± 104890.281  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableLastTest._Benchmark.benchmark_lastOrErrorOneElement$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableLastTest._Benchmark.benchmark_lastOrErrorOneElement

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 867781.375 ops/s
# Warmup Iteration   2: 4485443.297 ops/s
# Warmup Iteration   3: 5781113.583 ops/s
# Warmup Iteration   4: 6364089.856 ops/s
# Warmup Iteration   5: 6406746.172 ops/s
# Warmup Iteration   6: 6406410.902 ops/s
# Warmup Iteration   7: 6560023.693 ops/s
# Warmup Iteration   8: 6773393.488 ops/s
# Warmup Iteration   9: 6274081.041 ops/s
# Warmup Iteration  10: 5268285.848 ops/s
# Warmup Iteration  11: 6745847.024 ops/s
# Warmup Iteration  12: 6151199.777 ops/s
# Warmup Iteration  13: 6681347.305 ops/s
# Warmup Iteration  14: 6396923.992 ops/s
# Warmup Iteration  15: 6493301.033 ops/s
# Warmup Iteration  16: 6622489.124 ops/s
# Warmup Iteration  17: 6488007.270 ops/s
# Warmup Iteration  18: 6539198.662 ops/s
# Warmup Iteration  19: 6624056.830 ops/s
# Warmup Iteration  20: 6447632.993 ops/s
# Warmup Iteration  21: 6402907.783 ops/s
# Warmup Iteration  22: 6680522.378 ops/s
# Warmup Iteration  23: 6725178.057 ops/s
# Warmup Iteration  24: 6485429.236 ops/s
# Warmup Iteration  25: 6481408.570 ops/s
# Warmup Iteration  26: 6650627.244 ops/s
# Warmup Iteration  27: 6735603.645 ops/s
# Warmup Iteration  28: 6437689.773 ops/s
# Warmup Iteration  29: 6832867.845 ops/s
# Warmup Iteration  30: 6711434.170 ops/s
Iteration   1: 6304094.750 ops/s
Iteration   2: 6559200.391 ops/s
Iteration   3: 6651973.326 ops/s
Iteration   4: 6601914.937 ops/s
Iteration   5: 6364865.947 ops/s
Iteration   6: 6489804.519 ops/s
Iteration   7: 6541253.281 ops/s
Iteration   8: 6489971.977 ops/s
Iteration   9: 6810797.417 ops/s
Iteration  10: 6712354.545 ops/s
Iteration  11: 6484121.331 ops/s
Iteration  12: 6704282.607 ops/s
Iteration  13: 6261936.005 ops/s
Iteration  14: 6573237.463 ops/s
Iteration  15: 6671819.376 ops/s
Iteration  16: 6559826.268 ops/s
Iteration  17: 6581022.954 ops/s
Iteration  18: 6668157.508 ops/s
Iteration  19: 6333397.173 ops/s
Iteration  20: 6638517.471 ops/s
Iteration  21: 6371683.256 ops/s
Iteration  22: 6489205.682 ops/s
Iteration  23: 6431913.575 ops/s
Iteration  24: 6581839.772 ops/s
Iteration  25: 6503368.078 ops/s
Iteration  26: 6510018.124 ops/s
Iteration  27: 6628770.879 ops/s
Iteration  28: 6435671.081 ops/s
Iteration  29: 6746573.502 ops/s
Iteration  30: 6378894.613 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableLastTest._Benchmark.benchmark_lastOrErrorOneElement":
  6536016.260 ±(99.9%) 91289.591 ops/s [Average]
  (min, avg, max) = (6261936.005, 6536016.260, 6810797.417), stdev = 136637.973
  CI (99.9%): [6444726.669, 6627305.851] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
ObservableLastTest._Benchmark.benchmark_lastOrErrorOneElement  thrpt   30  6536016.260 ± 91289.591  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingTest._Benchmark.benchmark_disposeUpFront$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingTest._Benchmark.benchmark_disposeUpFront

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 828816.571 ops/s
# Warmup Iteration   2: 2974570.930 ops/s
# Warmup Iteration   3: 3378967.882 ops/s
# Warmup Iteration   4: 3983578.736 ops/s
# Warmup Iteration   5: 4137283.081 ops/s
# Warmup Iteration   6: 3852095.580 ops/s
# Warmup Iteration   7: 4072725.143 ops/s
# Warmup Iteration   8: 3853487.854 ops/s
# Warmup Iteration   9: 3854496.974 ops/s
# Warmup Iteration  10: 4208094.490 ops/s
# Warmup Iteration  11: 3834824.651 ops/s
# Warmup Iteration  12: 4020524.115 ops/s
# Warmup Iteration  13: 4108223.571 ops/s
# Warmup Iteration  14: 3937021.172 ops/s
# Warmup Iteration  15: 4072381.734 ops/s
# Warmup Iteration  16: 3915431.802 ops/s
# Warmup Iteration  17: 3955347.883 ops/s
# Warmup Iteration  18: 4114175.938 ops/s
# Warmup Iteration  19: 3869362.198 ops/s
# Warmup Iteration  20: 3992259.916 ops/s
# Warmup Iteration  21: 3950495.560 ops/s
# Warmup Iteration  22: 3959497.009 ops/s
# Warmup Iteration  23: 4239042.408 ops/s
# Warmup Iteration  24: 3834878.889 ops/s
# Warmup Iteration  25: 4051180.295 ops/s
# Warmup Iteration  26: 4076706.151 ops/s
# Warmup Iteration  27: 3982717.217 ops/s
# Warmup Iteration  28: 3975350.882 ops/s
# Warmup Iteration  29: 4014787.193 ops/s
# Warmup Iteration  30: 3944301.543 ops/s
Iteration   1: 4110982.883 ops/s
Iteration   2: 3973109.283 ops/s
Iteration   3: 4034648.269 ops/s
Iteration   4: 4060604.712 ops/s
Iteration   5: 3972830.105 ops/s
Iteration   6: 3906515.103 ops/s
Iteration   7: 4123286.843 ops/s
Iteration   8: 3995368.124 ops/s
Iteration   9: 4081091.771 ops/s
Iteration  10: 3967585.650 ops/s
Iteration  11: 4195374.958 ops/s
Iteration  12: 4013200.019 ops/s
Iteration  13: 3863013.340 ops/s
Iteration  14: 4041078.557 ops/s
Iteration  15: 4002261.766 ops/s
Iteration  16: 4022113.973 ops/s
Iteration  17: 4108403.302 ops/s
Iteration  18: 4089818.085 ops/s
Iteration  19: 4020006.915 ops/s
Iteration  20: 4010996.352 ops/s
Iteration  21: 3874535.061 ops/s
Iteration  22: 4089335.329 ops/s
Iteration  23: 4033451.461 ops/s
Iteration  24: 4017615.644 ops/s
Iteration  25: 3902824.536 ops/s
Iteration  26: 3947168.857 ops/s
Iteration  27: 4199818.586 ops/s
Iteration  28: 3923902.358 ops/s
Iteration  29: 4073830.409 ops/s
Iteration  30: 4214704.190 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingTest._Benchmark.benchmark_disposeUpFront":
  4028982.548 ±(99.9%) 60693.828 ops/s [Average]
  (min, avg, max) = (3863013.340, 4028982.548, 4214704.190), stdev = 90843.672
  CI (99.9%): [3968288.720, 4089676.376] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
ObservableBlockingTest._Benchmark.benchmark_disposeUpFront  thrpt   30  4028982.548 ± 60693.828  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableAllTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableAllTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 813799.828 ops/s
# Warmup Iteration   2: 4394357.514 ops/s
# Warmup Iteration   3: 5202861.998 ops/s
# Warmup Iteration   4: 5325067.215 ops/s
# Warmup Iteration   5: 4365779.292 ops/s
# Warmup Iteration   6: 5598166.366 ops/s
# Warmup Iteration   7: 5676220.971 ops/s
# Warmup Iteration   8: 5611584.751 ops/s
# Warmup Iteration   9: 5649769.439 ops/s
# Warmup Iteration  10: 5728510.353 ops/s
# Warmup Iteration  11: 5562272.615 ops/s
# Warmup Iteration  12: 5809079.369 ops/s
# Warmup Iteration  13: 5566717.129 ops/s
# Warmup Iteration  14: 5406909.761 ops/s
# Warmup Iteration  15: 5886482.915 ops/s
# Warmup Iteration  16: 5503344.300 ops/s
# Warmup Iteration  17: 5707946.413 ops/s
# Warmup Iteration  18: 5622438.293 ops/s
# Warmup Iteration  19: 5577362.986 ops/s
# Warmup Iteration  20: 5924085.402 ops/s
# Warmup Iteration  21: 5452395.022 ops/s
# Warmup Iteration  22: 5769419.697 ops/s
# Warmup Iteration  23: 5438498.386 ops/s
# Warmup Iteration  24: 5589397.762 ops/s
# Warmup Iteration  25: 5826052.341 ops/s
# Warmup Iteration  26: 5555202.107 ops/s
# Warmup Iteration  27: 5866948.125 ops/s
# Warmup Iteration  28: 5661757.951 ops/s
# Warmup Iteration  29: 5561156.929 ops/s
# Warmup Iteration  30: 5653578.974 ops/s
Iteration   1: 5822414.316 ops/s
Iteration   2: 5634168.883 ops/s
Iteration   3: 5584219.940 ops/s
Iteration   4: 5617149.632 ops/s
Iteration   5: 5685720.347 ops/s
Iteration   6: 5607825.984 ops/s
Iteration   7: 5805267.059 ops/s
Iteration   8: 5650947.546 ops/s
Iteration   9: 5631338.733 ops/s
Iteration  10: 5709571.727 ops/s
Iteration  11: 5461919.335 ops/s
Iteration  12: 5626679.324 ops/s
Iteration  13: 5656497.050 ops/s
Iteration  14: 5628226.303 ops/s
Iteration  15: 5685634.343 ops/s
Iteration  16: 5767138.616 ops/s
Iteration  17: 5729753.802 ops/s
Iteration  18: 5673104.475 ops/s
Iteration  19: 5699289.200 ops/s
Iteration  20: 5775894.305 ops/s
Iteration  21: 5515967.100 ops/s
Iteration  22: 5814669.229 ops/s
Iteration  23: 5622563.983 ops/s
Iteration  24: 5830576.704 ops/s
Iteration  25: 5465329.754 ops/s
Iteration  26: 5661801.555 ops/s
Iteration  27: 5624655.863 ops/s
Iteration  28: 5480414.894 ops/s
Iteration  29: 5652046.998 ops/s
Iteration  30: 5515387.244 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableAllTest._Benchmark.benchmark_dispose":
  5654539.142 ±(99.9%) 68251.204 ops/s [Average]
  (min, avg, max) = (5461919.335, 5654539.142, 5830576.704), stdev = 102155.197
  CI (99.9%): [5586287.937, 5722790.346] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt        Score       Error  Units
ObservableAllTest._Benchmark.benchmark_dispose  thrpt   30  5654539.142 ± 68251.204  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastOneTest._Benchmark.benchmark_lastOfOneReturnsLast$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastOneTest._Benchmark.benchmark_lastOfOneReturnsLast

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1625973.434 ops/s
# Warmup Iteration   2: 3910532.959 ops/s
# Warmup Iteration   3: 5759155.919 ops/s
# Warmup Iteration   4: 5736905.464 ops/s
# Warmup Iteration   5: 5953414.312 ops/s
# Warmup Iteration   6: 5823829.942 ops/s
# Warmup Iteration   7: 5748514.370 ops/s
# Warmup Iteration   8: 5962876.861 ops/s
# Warmup Iteration   9: 5847300.234 ops/s
# Warmup Iteration  10: 5884888.561 ops/s
# Warmup Iteration  11: 6028106.275 ops/s
# Warmup Iteration  12: 5744932.472 ops/s
# Warmup Iteration  13: 6035356.315 ops/s
# Warmup Iteration  14: 5849978.946 ops/s
# Warmup Iteration  15: 5707477.192 ops/s
# Warmup Iteration  16: 5953014.886 ops/s
# Warmup Iteration  17: 5806806.748 ops/s
# Warmup Iteration  18: 5812397.811 ops/s
# Warmup Iteration  19: 6088400.862 ops/s
# Warmup Iteration  20: 5619950.019 ops/s
# Warmup Iteration  21: 6115084.780 ops/s
# Warmup Iteration  22: 5667972.151 ops/s
# Warmup Iteration  23: 5801250.096 ops/s
# Warmup Iteration  24: 5920731.392 ops/s
# Warmup Iteration  25: 5848059.995 ops/s
# Warmup Iteration  26: 6003252.600 ops/s
# Warmup Iteration  27: 5758598.419 ops/s
# Warmup Iteration  28: 5743407.864 ops/s
# Warmup Iteration  29: 6078362.226 ops/s
# Warmup Iteration  30: 5680889.679 ops/s
Iteration   1: 5908140.077 ops/s
Iteration   2: 5784629.207 ops/s
Iteration   3: 5805179.237 ops/s
Iteration   4: 6070612.831 ops/s
Iteration   5: 5896410.916 ops/s
Iteration   6: 6026694.893 ops/s
Iteration   7: 5970198.417 ops/s
Iteration   8: 5769900.140 ops/s
Iteration   9: 6001033.481 ops/s
Iteration  10: 5864871.141 ops/s
Iteration  11: 5878914.731 ops/s
Iteration  12: 5870980.994 ops/s
Iteration  13: 5860625.691 ops/s
Iteration  14: 6060698.082 ops/s
Iteration  15: 5701349.000 ops/s
Iteration  16: 5911986.959 ops/s
Iteration  17: 5847224.243 ops/s
Iteration  18: 5696606.536 ops/s
Iteration  19: 5922832.896 ops/s
Iteration  20: 5674825.703 ops/s
Iteration  21: 5939764.773 ops/s
Iteration  22: 5715093.199 ops/s
Iteration  23: 5730055.011 ops/s
Iteration  24: 6104280.515 ops/s
Iteration  25: 5862528.093 ops/s
Iteration  26: 5968246.760 ops/s
Iteration  27: 5827781.701 ops/s
Iteration  28: 5968217.004 ops/s
Iteration  29: 5729063.022 ops/s
Iteration  30: 6049993.236 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastOneTest._Benchmark.benchmark_lastOfOneReturnsLast":
  5880624.616 ±(99.9%) 81094.773 ops/s [Average]
  (min, avg, max) = (5674825.703, 5880624.616, 6104280.515), stdev = 121378.848
  CI (99.9%): [5799529.843, 5961719.389] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
ObservableTakeLastOneTest._Benchmark.benchmark_lastOfOneReturnsLast  thrpt   30  5880624.616 ± 81094.773  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableBlockingStreamTest._Benchmark.benchmark_just$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableBlockingStreamTest._Benchmark.benchmark_just

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 184186.953 ops/s
# Warmup Iteration   2: 680035.756 ops/s
# Warmup Iteration   3: 1548248.985 ops/s
# Warmup Iteration   4: 1961042.041 ops/s
# Warmup Iteration   5: 2306309.013 ops/s
# Warmup Iteration   6: 2343744.838 ops/s
# Warmup Iteration   7: 2364372.172 ops/s
# Warmup Iteration   8: 2322191.858 ops/s
# Warmup Iteration   9: 2231369.660 ops/s
# Warmup Iteration  10: 2378266.684 ops/s
# Warmup Iteration  11: 2256843.336 ops/s
# Warmup Iteration  12: 2271360.187 ops/s
# Warmup Iteration  13: 2400428.965 ops/s
# Warmup Iteration  14: 2310655.750 ops/s
# Warmup Iteration  15: 2337038.560 ops/s
# Warmup Iteration  16: 2331929.964 ops/s
# Warmup Iteration  17: 2307113.101 ops/s
# Warmup Iteration  18: 2300767.487 ops/s
# Warmup Iteration  19: 2280378.272 ops/s
# Warmup Iteration  20: 2417908.661 ops/s
# Warmup Iteration  21: 2234455.500 ops/s
# Warmup Iteration  22: 2356823.219 ops/s
# Warmup Iteration  23: 2276175.970 ops/s
# Warmup Iteration  24: 2339386.073 ops/s
# Warmup Iteration  25: 2386821.770 ops/s
# Warmup Iteration  26: 2259039.607 ops/s
# Warmup Iteration  27: 2373870.995 ops/s
# Warmup Iteration  28: 2259837.757 ops/s
# Warmup Iteration  29: 2267247.186 ops/s
# Warmup Iteration  30: 2389865.691 ops/s
Iteration   1: 2270433.183 ops/s
Iteration   2: 2321525.525 ops/s
Iteration   3: 2322262.803 ops/s
Iteration   4: 2306530.804 ops/s
Iteration   5: 2374065.584 ops/s
Iteration   6: 2280161.674 ops/s
Iteration   7: 2223541.613 ops/s
Iteration   8: 2366778.272 ops/s
Iteration   9: 2233294.875 ops/s
Iteration  10: 2362541.723 ops/s
Iteration  11: 2278008.370 ops/s
Iteration  12: 2348122.354 ops/s
Iteration  13: 2261937.664 ops/s
Iteration  14: 2342705.826 ops/s
Iteration  15: 2321673.752 ops/s
Iteration  16: 2333280.925 ops/s
Iteration  17: 2278140.866 ops/s
Iteration  18: 2417699.878 ops/s
Iteration  19: 2302092.056 ops/s
Iteration  20: 2409519.039 ops/s
Iteration  21: 2270326.029 ops/s
Iteration  22: 2315886.830 ops/s
Iteration  23: 2352510.693 ops/s
Iteration  24: 2287551.102 ops/s
Iteration  25: 2320016.068 ops/s
Iteration  26: 2313537.876 ops/s
Iteration  27: 2299619.990 ops/s
Iteration  28: 2418239.927 ops/s
Iteration  29: 2269896.725 ops/s
Iteration  30: 2249165.106 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableBlockingStreamTest._Benchmark.benchmark_just":
  2315035.571 ±(99.9%) 34139.174 ops/s [Average]
  (min, avg, max) = (2223541.613, 2315035.571, 2418239.927), stdev = 51097.912
  CI (99.9%): [2280896.397, 2349174.745] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
ObservableBlockingStreamTest._Benchmark.benchmark_just  thrpt   30  2315035.571 ± 34139.174  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchIfEmptyTest._Benchmark.benchmark_switchWhenNotEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchIfEmptyTest._Benchmark.benchmark_switchWhenNotEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2680527.152 ops/s
# Warmup Iteration   2: 5028669.675 ops/s
# Warmup Iteration   3: 6629112.569 ops/s
# Warmup Iteration   4: 7263967.269 ops/s
# Warmup Iteration   5: 6876465.385 ops/s
# Warmup Iteration   6: 7151244.637 ops/s
# Warmup Iteration   7: 6987851.798 ops/s
# Warmup Iteration   8: 7144914.005 ops/s
# Warmup Iteration   9: 7174448.048 ops/s
# Warmup Iteration  10: 7056940.888 ops/s
# Warmup Iteration  11: 7023089.944 ops/s
# Warmup Iteration  12: 7028022.621 ops/s
# Warmup Iteration  13: 7208048.942 ops/s
# Warmup Iteration  14: 7153444.353 ops/s
# Warmup Iteration  15: 7031368.544 ops/s
# Warmup Iteration  16: 7292993.612 ops/s
# Warmup Iteration  17: 6904319.729 ops/s
# Warmup Iteration  18: 7206676.160 ops/s
# Warmup Iteration  19: 6978245.980 ops/s
# Warmup Iteration  20: 7067963.581 ops/s
# Warmup Iteration  21: 7432215.649 ops/s
# Warmup Iteration  22: 6941135.304 ops/s
# Warmup Iteration  23: 7389001.219 ops/s
# Warmup Iteration  24: 7016626.448 ops/s
# Warmup Iteration  25: 6951786.569 ops/s
# Warmup Iteration  26: 7121012.004 ops/s
# Warmup Iteration  27: 7018025.335 ops/s
# Warmup Iteration  28: 7282088.073 ops/s
# Warmup Iteration  29: 7062371.741 ops/s
# Warmup Iteration  30: 6819310.101 ops/s
Iteration   1: 7080288.964 ops/s
Iteration   2: 6849794.843 ops/s
Iteration   3: 6936890.055 ops/s
Iteration   4: 7261105.104 ops/s
Iteration   5: 6843428.602 ops/s
Iteration   6: 7083195.631 ops/s
Iteration   7: 6990383.151 ops/s
Iteration   8: 7041466.501 ops/s
Iteration   9: 6926075.737 ops/s
Iteration  10: 7120222.011 ops/s
Iteration  11: 7017522.047 ops/s
Iteration  12: 7119739.827 ops/s
Iteration  13: 7058645.372 ops/s
Iteration  14: 6952148.366 ops/s
Iteration  15: 6894183.566 ops/s
Iteration  16: 7070294.324 ops/s
Iteration  17: 6891860.460 ops/s
Iteration  18: 7220018.203 ops/s
Iteration  19: 6924840.912 ops/s
Iteration  20: 7067113.850 ops/s
Iteration  21: 7119405.980 ops/s
Iteration  22: 6936782.189 ops/s
Iteration  23: 7363376.875 ops/s
Iteration  24: 7006984.496 ops/s
Iteration  25: 6989363.163 ops/s
Iteration  26: 5825311.744 ops/s
Iteration  27: 6864325.808 ops/s
Iteration  28: 7191380.540 ops/s
Iteration  29: 6843717.782 ops/s
Iteration  30: 6937274.012 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchIfEmptyTest._Benchmark.benchmark_switchWhenNotEmpty":
  6980904.670 ±(99.9%) 169380.260 ops/s [Average]
  (min, avg, max) = (5825311.744, 6980904.670, 7363376.875), stdev = 253520.419
  CI (99.9%): [6811524.410, 7150284.931] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score        Error  Units
ObservableSwitchIfEmptyTest._Benchmark.benchmark_switchWhenNotEmpty  thrpt   30  6980904.670 ± 169380.260  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeIsEmptyTest._Benchmark.benchmark_fusedBackToMaybe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeIsEmptyTest._Benchmark.benchmark_fusedBackToMaybe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 14457470.913 ops/s
# Warmup Iteration   2: 30440049.524 ops/s
# Warmup Iteration   3: 32622080.972 ops/s
# Warmup Iteration   4: 35670280.604 ops/s
# Warmup Iteration   5: 34686072.837 ops/s
# Warmup Iteration   6: 34400542.927 ops/s
# Warmup Iteration   7: 36466664.014 ops/s
# Warmup Iteration   8: 36050410.526 ops/s
# Warmup Iteration   9: 34661812.584 ops/s
# Warmup Iteration  10: 36859499.725 ops/s
# Warmup Iteration  11: 35002326.510 ops/s
# Warmup Iteration  12: 34144669.082 ops/s
# Warmup Iteration  13: 36066233.235 ops/s
# Warmup Iteration  14: 34687191.534 ops/s
# Warmup Iteration  15: 35577160.629 ops/s
# Warmup Iteration  16: 36014461.758 ops/s
# Warmup Iteration  17: 34524306.999 ops/s
# Warmup Iteration  18: 35982380.781 ops/s
# Warmup Iteration  19: 34719474.269 ops/s
# Warmup Iteration  20: 35163639.121 ops/s
# Warmup Iteration  21: 36594556.213 ops/s
# Warmup Iteration  22: 34726517.199 ops/s
# Warmup Iteration  23: 34193130.653 ops/s
# Warmup Iteration  24: 36145436.553 ops/s
# Warmup Iteration  25: 35978840.428 ops/s
# Warmup Iteration  26: 37163119.638 ops/s
# Warmup Iteration  27: 34087490.160 ops/s
# Warmup Iteration  28: 36251023.066 ops/s
# Warmup Iteration  29: 36729473.305 ops/s
# Warmup Iteration  30: 34345611.738 ops/s
Iteration   1: 36065052.445 ops/s
Iteration   2: 33793663.078 ops/s
Iteration   3: 35484480.703 ops/s
Iteration   4: 35984243.963 ops/s
Iteration   5: 34814806.001 ops/s
Iteration   6: 35288731.183 ops/s
Iteration   7: 35807708.084 ops/s
Iteration   8: 34730586.950 ops/s
Iteration   9: 36731425.421 ops/s
Iteration  10: 35062395.437 ops/s
Iteration  11: 35778355.293 ops/s
Iteration  12: 33317954.159 ops/s
Iteration  13: 35577383.316 ops/s
Iteration  14: 36289443.580 ops/s
Iteration  15: 34583722.245 ops/s
Iteration  16: 35136955.704 ops/s
Iteration  17: 35350673.335 ops/s
Iteration  18: 35217208.390 ops/s
Iteration  19: 35729876.146 ops/s
Iteration  20: 35152975.818 ops/s
Iteration  21: 35315828.712 ops/s
Iteration  22: 35882666.227 ops/s
Iteration  23: 35013871.781 ops/s
Iteration  24: 35487750.068 ops/s
Iteration  25: 34756918.050 ops/s
Iteration  26: 34838199.010 ops/s
Iteration  27: 36761084.942 ops/s
Iteration  28: 33841461.926 ops/s
Iteration  29: 35958863.683 ops/s
Iteration  30: 34907490.879 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeIsEmptyTest._Benchmark.benchmark_fusedBackToMaybe":
  35288725.884 ±(99.9%) 527238.948 ops/s [Average]
  (min, avg, max) = (33317954.159, 35288725.884, 36761084.942), stdev = 789146.497
  CI (99.9%): [34761486.936, 35815964.832] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt         Score        Error  Units
MaybeIsEmptyTest._Benchmark.benchmark_fusedBackToMaybe  thrpt   30  35288725.884 ± 527238.948  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTakeTest._Benchmark.benchmark_takeZero$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTakeTest._Benchmark.benchmark_takeZero

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3311269.024 ops/s
# Warmup Iteration   2: 5876811.669 ops/s
# Warmup Iteration   3: 7855608.014 ops/s
# Warmup Iteration   4: 8107783.794 ops/s
# Warmup Iteration   5: 8150462.638 ops/s
# Warmup Iteration   6: 8146928.313 ops/s
# Warmup Iteration   7: 8183682.829 ops/s
# Warmup Iteration   8: 7893747.815 ops/s
# Warmup Iteration   9: 8029061.353 ops/s
# Warmup Iteration  10: 8260422.714 ops/s
# Warmup Iteration  11: 8080380.013 ops/s
# Warmup Iteration  12: 8070733.381 ops/s
# Warmup Iteration  13: 8224702.582 ops/s
# Warmup Iteration  14: 7920256.099 ops/s
# Warmup Iteration  15: 8343697.085 ops/s
# Warmup Iteration  16: 7971218.473 ops/s
# Warmup Iteration  17: 7748659.537 ops/s
# Warmup Iteration  18: 8417327.810 ops/s
# Warmup Iteration  19: 7890120.890 ops/s
# Warmup Iteration  20: 8434248.309 ops/s
# Warmup Iteration  21: 7813840.341 ops/s
# Warmup Iteration  22: 7965571.306 ops/s
# Warmup Iteration  23: 8146519.842 ops/s
# Warmup Iteration  24: 7995215.172 ops/s
# Warmup Iteration  25: 7950531.836 ops/s
# Warmup Iteration  26: 8392692.404 ops/s
# Warmup Iteration  27: 8382267.471 ops/s
# Warmup Iteration  28: 7854426.474 ops/s
# Warmup Iteration  29: 8333275.753 ops/s
# Warmup Iteration  30: 7990177.423 ops/s
Iteration   1: 8139972.324 ops/s
Iteration   2: 8162462.258 ops/s
Iteration   3: 7978192.094 ops/s
Iteration   4: 8243649.617 ops/s
Iteration   5: 7834109.480 ops/s
Iteration   6: 7841081.259 ops/s
Iteration   7: 8510280.793 ops/s
Iteration   8: 7806145.252 ops/s
Iteration   9: 8227042.808 ops/s
Iteration  10: 7863530.202 ops/s
Iteration  11: 8332860.500 ops/s
Iteration  12: 8002012.816 ops/s
Iteration  13: 8157237.258 ops/s
Iteration  14: 8039681.955 ops/s
Iteration  15: 8074894.151 ops/s
Iteration  16: 8021521.158 ops/s
Iteration  17: 7722865.205 ops/s
Iteration  18: 8285679.998 ops/s
Iteration  19: 8163939.315 ops/s
Iteration  20: 8233044.545 ops/s
Iteration  21: 6562465.650 ops/s
Iteration  22: 7945333.363 ops/s
Iteration  23: 8338929.345 ops/s
Iteration  24: 7882638.658 ops/s
Iteration  25: 8018870.400 ops/s
Iteration  26: 8150588.643 ops/s
Iteration  27: 7975090.293 ops/s
Iteration  28: 8268449.594 ops/s
Iteration  29: 7930912.714 ops/s
Iteration  30: 8193873.747 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeTest._Benchmark.benchmark_takeZero":
  8030245.180 ±(99.9%) 222568.353 ops/s [Average]
  (min, avg, max) = (6562465.650, 8030245.180, 8510280.793), stdev = 333129.858
  CI (99.9%): [7807676.827, 8252813.533] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score        Error  Units
ObservableTakeTest._Benchmark.benchmark_takeZero  thrpt   30  8030245.180 ± 222568.353  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSingleTest._Benchmark.benchmark_singleOrErrorOneElement$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSingleTest._Benchmark.benchmark_singleOrErrorOneElement

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 738010.046 ops/s
# Warmup Iteration   2: 3991702.139 ops/s
# Warmup Iteration   3: 5463854.067 ops/s
# Warmup Iteration   4: 6126853.222 ops/s
# Warmup Iteration   5: 6503135.778 ops/s
# Warmup Iteration   6: 6387212.665 ops/s
# Warmup Iteration   7: 6276517.295 ops/s
# Warmup Iteration   8: 6572848.232 ops/s
# Warmup Iteration   9: 6321669.944 ops/s
# Warmup Iteration  10: 6294371.093 ops/s
# Warmup Iteration  11: 6556476.962 ops/s
# Warmup Iteration  12: 6250731.524 ops/s
# Warmup Iteration  13: 6373357.406 ops/s
# Warmup Iteration  14: 6295620.113 ops/s
# Warmup Iteration  15: 6495557.339 ops/s
# Warmup Iteration  16: 6294067.982 ops/s
# Warmup Iteration  17: 6590270.989 ops/s
# Warmup Iteration  18: 6575947.004 ops/s
# Warmup Iteration  19: 6365165.205 ops/s
# Warmup Iteration  20: 6615312.584 ops/s
# Warmup Iteration  21: 6268004.949 ops/s
# Warmup Iteration  22: 6457312.356 ops/s
# Warmup Iteration  23: 6335205.801 ops/s
# Warmup Iteration  24: 6357046.425 ops/s
# Warmup Iteration  25: 6409737.457 ops/s
# Warmup Iteration  26: 6397924.953 ops/s
# Warmup Iteration  27: 6453907.503 ops/s
# Warmup Iteration  28: 6316108.426 ops/s
# Warmup Iteration  29: 6494600.485 ops/s
# Warmup Iteration  30: 6500742.672 ops/s
Iteration   1: 6275164.722 ops/s
Iteration   2: 6518824.261 ops/s
Iteration   3: 6399934.301 ops/s
Iteration   4: 6370202.751 ops/s
Iteration   5: 6552868.644 ops/s
Iteration   6: 6181594.138 ops/s
Iteration   7: 6554256.259 ops/s
Iteration   8: 6305856.034 ops/s
Iteration   9: 6316552.797 ops/s
Iteration  10: 6456711.464 ops/s
Iteration  11: 6383851.914 ops/s
Iteration  12: 6590593.246 ops/s
Iteration  13: 6138868.612 ops/s
Iteration  14: 6353869.762 ops/s
Iteration  15: 6697866.224 ops/s
Iteration  16: 6640153.364 ops/s
Iteration  17: 6271420.474 ops/s
Iteration  18: 6208118.205 ops/s
Iteration  19: 6549769.180 ops/s
Iteration  20: 6348400.183 ops/s
Iteration  21: 6555948.829 ops/s
Iteration  22: 6484913.609 ops/s
Iteration  23: 6414012.571 ops/s
Iteration  24: 6466339.614 ops/s
Iteration  25: 6493242.645 ops/s
Iteration  26: 6560287.252 ops/s
Iteration  27: 6261995.339 ops/s
Iteration  28: 6553383.038 ops/s
Iteration  29: 6360591.645 ops/s
Iteration  30: 6316868.286 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableSingleTest._Benchmark.benchmark_singleOrErrorOneElement":
  6419415.312 ±(99.9%) 95012.273 ops/s [Average]
  (min, avg, max) = (6138868.612, 6419415.312, 6697866.224), stdev = 142209.908
  CI (99.9%): [6324403.039, 6514427.585] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
ObservableSingleTest._Benchmark.benchmark_singleOrErrorOneElement  thrpt   30  6419415.312 ± 95012.273  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFirstTest._Benchmark.benchmark_firstOrErrorOneElement$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFirstTest._Benchmark.benchmark_firstOrErrorOneElement

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.739 ops/s
# Warmup Iteration   2: 28187.752 ops/s
# Warmup Iteration   3: 72772.134 ops/s
# Warmup Iteration   4: 117848.534 ops/s
# Warmup Iteration   5: 234227.707 ops/s
# Warmup Iteration   6: 337355.855 ops/s
# Warmup Iteration   7: 329961.195 ops/s
# Warmup Iteration   8: 343573.781 ops/s
# Warmup Iteration   9: 331757.835 ops/s
# Warmup Iteration  10: 338323.552 ops/s
# Warmup Iteration  11: 344712.550 ops/s
# Warmup Iteration  12: 328404.065 ops/s
# Warmup Iteration  13: 350210.461 ops/s
# Warmup Iteration  14: 330757.986 ops/s
# Warmup Iteration  15: 329564.395 ops/s
# Warmup Iteration  16: 340898.554 ops/s
# Warmup Iteration  17: 325346.079 ops/s
# Warmup Iteration  18: 331791.146 ops/s
# Warmup Iteration  19: 342067.352 ops/s
# Warmup Iteration  20: 348081.684 ops/s
# Warmup Iteration  21: 344596.774 ops/s
# Warmup Iteration  22: 332100.436 ops/s
# Warmup Iteration  23: 337765.409 ops/s
# Warmup Iteration  24: 346847.372 ops/s
# Warmup Iteration  25: 326501.038 ops/s
# Warmup Iteration  26: 348725.835 ops/s
# Warmup Iteration  27: 341286.760 ops/s
# Warmup Iteration  28: 336322.096 ops/s
# Warmup Iteration  29: 347477.061 ops/s
# Warmup Iteration  30: 328370.383 ops/s
Iteration   1: 332618.310 ops/s
Iteration   2: 335639.848 ops/s
Iteration   3: 341259.482 ops/s
Iteration   4: 326344.793 ops/s
Iteration   5: 330402.834 ops/s
Iteration   6: 340583.053 ops/s
Iteration   7: 330158.658 ops/s
Iteration   8: 352181.404 ops/s
Iteration   9: 327535.639 ops/s
Iteration  10: 332860.564 ops/s
Iteration  11: 338377.682 ops/s
Iteration  12: 335014.489 ops/s
Iteration  13: 341458.953 ops/s
Iteration  14: 332739.010 ops/s
Iteration  15: 286942.431 ops/s
Iteration  16: 340786.713 ops/s
Iteration  17: 345512.018 ops/s
Iteration  18: 333277.681 ops/s
Iteration  19: 337786.942 ops/s
Iteration  20: 319278.790 ops/s
Iteration  21: 349461.069 ops/s
Iteration  22: 326049.354 ops/s
Iteration  23: 344122.123 ops/s
Iteration  24: 334783.252 ops/s
Iteration  25: 334021.262 ops/s
Iteration  26: 346326.167 ops/s
Iteration  27: 323736.874 ops/s
Iteration  28: 351980.596 ops/s
Iteration  29: 326479.042 ops/s
Iteration  30: 336414.304 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFirstTest._Benchmark.benchmark_firstOrErrorOneElement":
  334471.111 ±(99.9%) 8139.498 ops/s [Average]
  (min, avg, max) = (286942.431, 334471.111, 352181.404), stdev = 12182.819
  CI (99.9%): [326331.613, 342610.610] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score      Error  Units
ObservableFirstTest._Benchmark.benchmark_firstOrErrorOneElement  thrpt   30  334471.111 ± 8139.498  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWithPredicateTest._Benchmark.benchmark_issue2826$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWithPredicateTest._Benchmark.benchmark_issue2826

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 124401.916 ops/s
# Warmup Iteration   2: 328163.735 ops/s
# Warmup Iteration   3: 459403.313 ops/s
# Warmup Iteration   4: 498340.720 ops/s
# Warmup Iteration   5: 416814.098 ops/s
# Warmup Iteration   6: 508358.657 ops/s
# Warmup Iteration   7: 486905.186 ops/s
# Warmup Iteration   8: 493617.696 ops/s
# Warmup Iteration   9: 509606.350 ops/s
# Warmup Iteration  10: 490714.947 ops/s
# Warmup Iteration  11: 507295.276 ops/s
# Warmup Iteration  12: 503288.615 ops/s
# Warmup Iteration  13: 494789.210 ops/s
# Warmup Iteration  14: 502469.562 ops/s
# Warmup Iteration  15: 500960.543 ops/s
# Warmup Iteration  16: 492352.071 ops/s
# Warmup Iteration  17: 526902.342 ops/s
# Warmup Iteration  18: 520687.040 ops/s
# Warmup Iteration  19: 502640.790 ops/s
# Warmup Iteration  20: 531563.807 ops/s
# Warmup Iteration  21: 502985.164 ops/s
# Warmup Iteration  22: 517356.826 ops/s
# Warmup Iteration  23: 520658.022 ops/s
# Warmup Iteration  24: 507642.498 ops/s
# Warmup Iteration  25: 529138.916 ops/s
# Warmup Iteration  26: 513078.529 ops/s
# Warmup Iteration  27: 517107.658 ops/s
# Warmup Iteration  28: 520887.255 ops/s
# Warmup Iteration  29: 508604.183 ops/s
# Warmup Iteration  30: 541356.627 ops/s
Iteration   1: 509523.805 ops/s
Iteration   2: 529726.198 ops/s
Iteration   3: 508100.660 ops/s
Iteration   4: 508678.335 ops/s
Iteration   5: 537234.944 ops/s
Iteration   6: 510194.383 ops/s
Iteration   7: 528788.852 ops/s
Iteration   8: 519023.050 ops/s
Iteration   9: 507508.623 ops/s
Iteration  10: 523269.747 ops/s
Iteration  11: 515595.162 ops/s
Iteration  12: 526409.358 ops/s
Iteration  13: 512272.397 ops/s
Iteration  14: 499035.727 ops/s
Iteration  15: 524200.067 ops/s
Iteration  16: 526300.741 ops/s
Iteration  17: 502968.087 ops/s
Iteration  18: 499480.468 ops/s
Iteration  19: 517315.938 ops/s
Iteration  20: 519509.713 ops/s
Iteration  21: 532066.487 ops/s
Iteration  22: 499226.425 ops/s
Iteration  23: 523746.458 ops/s
Iteration  24: 516139.738 ops/s
Iteration  25: 522512.678 ops/s
Iteration  26: 534941.139 ops/s
Iteration  27: 498463.073 ops/s
Iteration  28: 516266.026 ops/s
Iteration  29: 518910.802 ops/s
Iteration  30: 518993.946 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWithPredicateTest._Benchmark.benchmark_issue2826":
  516880.101 ±(99.9%) 7309.824 ops/s [Average]
  (min, avg, max) = (498463.073, 516880.101, 537234.944), stdev = 10941.001
  CI (99.9%): [509570.277, 524189.925] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score      Error  Units
ObservableRetryWithPredicateTest._Benchmark.benchmark_issue2826  thrpt   30  516880.101 ± 7309.824  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoinTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoinTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.702 ops/s
# Warmup Iteration   2: 4653.761 ops/s
# Warmup Iteration   3: 37018.250 ops/s
# Warmup Iteration   4: 40669.874 ops/s
# Warmup Iteration   5: 54734.492 ops/s
# Warmup Iteration   6: 65000.572 ops/s
# Warmup Iteration   7: 64601.442 ops/s
# Warmup Iteration   8: 164115.765 ops/s
# Warmup Iteration   9: 165750.727 ops/s
# Warmup Iteration  10: 165008.554 ops/s
# Warmup Iteration  11: 168497.691 ops/s
# Warmup Iteration  12: 161019.231 ops/s
# Warmup Iteration  13: 164781.973 ops/s
# Warmup Iteration  14: 163589.646 ops/s
# Warmup Iteration  15: 164557.846 ops/s
# Warmup Iteration  16: 169888.316 ops/s
# Warmup Iteration  17: 158167.755 ops/s
# Warmup Iteration  18: 168702.364 ops/s
# Warmup Iteration  19: 157185.078 ops/s
# Warmup Iteration  20: 162382.204 ops/s
# Warmup Iteration  21: 163747.466 ops/s
# Warmup Iteration  22: 161252.166 ops/s
# Warmup Iteration  23: 170528.329 ops/s
# Warmup Iteration  24: 161924.779 ops/s
# Warmup Iteration  25: 168680.477 ops/s
# Warmup Iteration  26: 165242.036 ops/s
# Warmup Iteration  27: 161177.793 ops/s
# Warmup Iteration  28: 165454.083 ops/s
# Warmup Iteration  29: 165040.300 ops/s
# Warmup Iteration  30: 167474.899 ops/s
Iteration   1: 166902.210 ops/s
Iteration   2: 162578.455 ops/s
Iteration   3: 166307.280 ops/s
Iteration   4: 163595.059 ops/s
Iteration   5: 169883.140 ops/s
Iteration   6: 159361.277 ops/s
Iteration   7: 162853.144 ops/s
Iteration   8: 162396.112 ops/s
Iteration   9: 151509.321 ops/s
Iteration  10: 156181.428 ops/s
Iteration  11: 160732.225 ops/s
Iteration  12: 166530.877 ops/s
Iteration  13: 169699.875 ops/s
Iteration  14: 165564.529 ops/s
Iteration  15: 161861.966 ops/s
Iteration  16: 164506.422 ops/s
Iteration  17: 167789.557 ops/s
Iteration  18: 160176.005 ops/s
Iteration  19: 172228.131 ops/s
Iteration  20: 160438.789 ops/s
Iteration  21: 168641.859 ops/s
Iteration  22: 167558.344 ops/s
Iteration  23: 160903.810 ops/s
Iteration  24: 166961.885 ops/s
Iteration  25: 161507.974 ops/s
Iteration  26: 165645.629 ops/s
Iteration  27: 160852.433 ops/s
Iteration  28: 167582.790 ops/s
Iteration  29: 170509.342 ops/s
Iteration  30: 161605.041 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoinTest._Benchmark.benchmark_dispose":
  164095.497 ±(99.9%) 3017.047 ops/s [Average]
  (min, avg, max) = (151509.321, 164095.497, 172228.131), stdev = 4515.774
  CI (99.9%): [161078.450, 167112.544] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score      Error  Units
ObservableGroupJoinTest._Benchmark.benchmark_dispose  thrpt   30  164095.497 ± 3017.047  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableForEachTest._Benchmark.benchmark_whilePredicateThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableForEachTest._Benchmark.benchmark_whilePredicateThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 32563.695 ops/s
# Warmup Iteration   2: 179163.395 ops/s
# Warmup Iteration   3: 205581.456 ops/s
# Warmup Iteration   4: 227943.064 ops/s
# Warmup Iteration   5: 231732.009 ops/s
# Warmup Iteration   6: 213735.056 ops/s
# Warmup Iteration   7: 247036.173 ops/s
# Warmup Iteration   8: 245248.919 ops/s
# Warmup Iteration   9: 238926.455 ops/s
# Warmup Iteration  10: 234234.534 ops/s
# Warmup Iteration  11: 238999.748 ops/s
# Warmup Iteration  12: 249385.918 ops/s
# Warmup Iteration  13: 235277.984 ops/s
# Warmup Iteration  14: 251841.937 ops/s
# Warmup Iteration  15: 245220.870 ops/s
# Warmup Iteration  16: 235759.585 ops/s
# Warmup Iteration  17: 251987.996 ops/s
# Warmup Iteration  18: 242448.227 ops/s
# Warmup Iteration  19: 253999.717 ops/s
# Warmup Iteration  20: 250931.793 ops/s
# Warmup Iteration  21: 237841.549 ops/s
# Warmup Iteration  22: 254622.381 ops/s
# Warmup Iteration  23: 243574.609 ops/s
# Warmup Iteration  24: 250873.762 ops/s
# Warmup Iteration  25: 255535.197 ops/s
# Warmup Iteration  26: 241189.578 ops/s
# Warmup Iteration  27: 254642.060 ops/s
# Warmup Iteration  28: 245266.788 ops/s
# Warmup Iteration  29: 258994.363 ops/s
# Warmup Iteration  30: 255674.888 ops/s
Iteration   1: 247950.209 ops/s
Iteration   2: 251601.520 ops/s
Iteration   3: 251135.034 ops/s
Iteration   4: 254408.613 ops/s
Iteration   5: 259115.069 ops/s
Iteration   6: 239953.177 ops/s
Iteration   7: 261949.986 ops/s
Iteration   8: 237684.832 ops/s
Iteration   9: 256534.413 ops/s
Iteration  10: 239331.374 ops/s
Iteration  11: 254688.064 ops/s
Iteration  12: 241781.414 ops/s
Iteration  13: 254414.928 ops/s
Iteration  14: 250590.467 ops/s
Iteration  15: 238612.068 ops/s
Iteration  16: 256421.270 ops/s
Iteration  17: 256581.916 ops/s
Iteration  18: 248774.009 ops/s
Iteration  19: 252623.407 ops/s
Iteration  20: 246174.119 ops/s
Iteration  21: 251578.881 ops/s
Iteration  22: 248951.423 ops/s
Iteration  23: 254601.586 ops/s
Iteration  24: 258030.451 ops/s
Iteration  25: 240507.890 ops/s
Iteration  26: 252139.517 ops/s
Iteration  27: 244134.613 ops/s
Iteration  28: 257172.300 ops/s
Iteration  29: 247156.129 ops/s
Iteration  30: 250360.587 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableForEachTest._Benchmark.benchmark_whilePredicateThrows":
  250165.309 ±(99.9%) 4449.607 ops/s [Average]
  (min, avg, max) = (237684.832, 250165.309, 261949.986), stdev = 6659.963
  CI (99.9%): [245715.702, 254614.916] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score      Error  Units
ObservableForEachTest._Benchmark.benchmark_whilePredicateThrows  thrpt   30  250165.309 ± 4449.607  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_timeoutSelectorReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_timeoutSelectorReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 291046.130 ops/s
# Warmup Iteration   2: 524212.471 ops/s
# Warmup Iteration   3: 557480.459 ops/s
# Warmup Iteration   4: 590463.327 ops/s
# Warmup Iteration   5: 614312.181 ops/s
# Warmup Iteration   6: 595186.528 ops/s
# Warmup Iteration   7: 608643.219 ops/s
# Warmup Iteration   8: 612846.933 ops/s
# Warmup Iteration   9: 590496.663 ops/s
# Warmup Iteration  10: 601585.849 ops/s
# Warmup Iteration  11: 605725.164 ops/s
# Warmup Iteration  12: 597925.042 ops/s
# Warmup Iteration  13: 593013.413 ops/s
# Warmup Iteration  14: 600090.210 ops/s
# Warmup Iteration  15: 618677.772 ops/s
# Warmup Iteration  16: 610731.320 ops/s
# Warmup Iteration  17: 647383.321 ops/s
# Warmup Iteration  18: 618700.164 ops/s
# Warmup Iteration  19: 638783.911 ops/s
# Warmup Iteration  20: 622226.986 ops/s
# Warmup Iteration  21: 641505.269 ops/s
# Warmup Iteration  22: 622966.409 ops/s
# Warmup Iteration  23: 624604.470 ops/s
# Warmup Iteration  24: 637548.012 ops/s
# Warmup Iteration  25: 626469.899 ops/s
# Warmup Iteration  26: 630489.047 ops/s
# Warmup Iteration  27: 622049.933 ops/s
# Warmup Iteration  28: 631552.490 ops/s
# Warmup Iteration  29: 648526.343 ops/s
# Warmup Iteration  30: 607362.800 ops/s
Iteration   1: 633768.944 ops/s
Iteration   2: 607488.664 ops/s
Iteration   3: 633661.840 ops/s
Iteration   4: 592650.677 ops/s
Iteration   5: 459073.413 ops/s
Iteration   6: 643821.256 ops/s
Iteration   7: 609898.094 ops/s
Iteration   8: 605902.125 ops/s
Iteration   9: 629404.574 ops/s
Iteration  10: 656296.769 ops/s
Iteration  11: 644121.182 ops/s
Iteration  12: 626298.598 ops/s
Iteration  13: 637930.448 ops/s
Iteration  14: 626781.728 ops/s
Iteration  15: 629750.277 ops/s
Iteration  16: 640439.054 ops/s
Iteration  17: 623889.655 ops/s
Iteration  18: 643982.773 ops/s
Iteration  19: 657520.560 ops/s
Iteration  20: 608912.385 ops/s
Iteration  21: 624351.036 ops/s
Iteration  22: 633821.326 ops/s
Iteration  23: 624982.304 ops/s
Iteration  24: 643795.632 ops/s
Iteration  25: 612569.045 ops/s
Iteration  26: 641579.253 ops/s
Iteration  27: 639812.031 ops/s
Iteration  28: 587744.152 ops/s
Iteration  29: 655117.609 ops/s
Iteration  30: 609786.340 ops/s


Result "io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_timeoutSelectorReturnsNull":
  622838.392 ±(99.9%) 23840.539 ops/s [Average]
  (min, avg, max) = (459073.413, 622838.392, 657520.560), stdev = 35683.399
  CI (99.9%): [598997.853, 646678.930] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score       Error  Units
ObservableNullTests._Benchmark.benchmark_timeoutSelectorReturnsNull  thrpt   30  622838.392 ± 23840.539  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRetryTest._Benchmark.benchmark_singleSubscriptionOnFirst$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRetryTest._Benchmark.benchmark_singleSubscriptionOnFirst

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 53314.474 ops/s
# Warmup Iteration   2: 298607.180 ops/s
# Warmup Iteration   3: 879689.809 ops/s
# Warmup Iteration   4: 972627.582 ops/s
# Warmup Iteration   5: 976518.139 ops/s
# Warmup Iteration   6: 871158.922 ops/s
# Warmup Iteration   7: 954945.240 ops/s
# Warmup Iteration   8: 989751.709 ops/s
# Warmup Iteration   9: 1013835.910 ops/s
# Warmup Iteration  10: 965169.849 ops/s
# Warmup Iteration  11: 970358.233 ops/s
# Warmup Iteration  12: 1022101.515 ops/s
# Warmup Iteration  13: 957806.478 ops/s
# Warmup Iteration  14: 1028244.586 ops/s
# Warmup Iteration  15: 963302.467 ops/s
# Warmup Iteration  16: 1030233.330 ops/s
# Warmup Iteration  17: 966122.894 ops/s
# Warmup Iteration  18: 1000770.676 ops/s
# Warmup Iteration  19: 987729.712 ops/s
# Warmup Iteration  20: 973278.982 ops/s
# Warmup Iteration  21: 1019368.923 ops/s
# Warmup Iteration  22: 929625.479 ops/s
# Warmup Iteration  23: 996246.080 ops/s
# Warmup Iteration  24: 984414.999 ops/s
# Warmup Iteration  25: 940219.811 ops/s
# Warmup Iteration  26: 1005022.017 ops/s
# Warmup Iteration  27: 972447.525 ops/s
# Warmup Iteration  28: 991966.483 ops/s
# Warmup Iteration  29: 962213.489 ops/s
# Warmup Iteration  30: 1031122.995 ops/s
Iteration   1: 962519.266 ops/s
Iteration   2: 966948.516 ops/s
Iteration   3: 992093.207 ops/s
Iteration   4: 979495.795 ops/s
Iteration   5: 978910.053 ops/s
Iteration   6: 1002492.108 ops/s
Iteration   7: 963880.156 ops/s
Iteration   8: 1013968.223 ops/s
Iteration   9: 956725.204 ops/s
Iteration  10: 976820.328 ops/s
Iteration  11: 953813.799 ops/s
Iteration  12: 984127.109 ops/s
Iteration  13: 993314.123 ops/s
Iteration  14: 973407.868 ops/s
Iteration  15: 982065.147 ops/s
Iteration  16: 992742.013 ops/s
Iteration  17: 974212.071 ops/s
Iteration  18: 1020678.646 ops/s
Iteration  19: 999972.473 ops/s
Iteration  20: 967188.749 ops/s
Iteration  21: 994928.978 ops/s
Iteration  22: 963245.841 ops/s
Iteration  23: 1005375.935 ops/s
Iteration  24: 972850.057 ops/s
Iteration  25: 966527.022 ops/s
Iteration  26: 1004717.945 ops/s
Iteration  27: 991126.936 ops/s
Iteration  28: 999253.809 ops/s
Iteration  29: 988456.472 ops/s
Iteration  30: 964794.947 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryTest._Benchmark.benchmark_singleSubscriptionOnFirst":
  982888.427 ±(99.9%) 11753.169 ops/s [Average]
  (min, avg, max) = (953813.799, 982888.427, 1020678.646), stdev = 17591.592
  CI (99.9%): [971135.257, 994641.596] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score       Error  Units
ObservableRetryTest._Benchmark.benchmark_singleSubscriptionOnFirst  thrpt   30  982888.427 ± 11753.169  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRangeLongTest._Benchmark.benchmark_disposed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRangeLongTest._Benchmark.benchmark_disposed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3241537.930 ops/s
# Warmup Iteration   2: 8305649.085 ops/s
# Warmup Iteration   3: 9971388.732 ops/s
# Warmup Iteration   4: 10326113.825 ops/s
# Warmup Iteration   5: 10860763.479 ops/s
# Warmup Iteration   6: 10541435.343 ops/s
# Warmup Iteration   7: 10761552.334 ops/s
# Warmup Iteration   8: 10814280.433 ops/s
# Warmup Iteration   9: 10460665.072 ops/s
# Warmup Iteration  10: 10866959.523 ops/s
# Warmup Iteration  11: 10506742.231 ops/s
# Warmup Iteration  12: 10564437.365 ops/s
# Warmup Iteration  13: 11122050.487 ops/s
# Warmup Iteration  14: 10335464.325 ops/s
# Warmup Iteration  15: 10788446.276 ops/s
# Warmup Iteration  16: 10529933.949 ops/s
# Warmup Iteration  17: 10585985.290 ops/s
# Warmup Iteration  18: 11084279.782 ops/s
# Warmup Iteration  19: 10442888.311 ops/s
# Warmup Iteration  20: 10884996.114 ops/s
# Warmup Iteration  21: 10456715.061 ops/s
# Warmup Iteration  22: 10621892.913 ops/s
# Warmup Iteration  23: 10795558.480 ops/s
# Warmup Iteration  24: 10520562.913 ops/s
# Warmup Iteration  25: 11030029.784 ops/s
# Warmup Iteration  26: 10647027.800 ops/s
# Warmup Iteration  27: 10904705.471 ops/s
# Warmup Iteration  28: 10525664.948 ops/s
# Warmup Iteration  29: 10953809.701 ops/s
# Warmup Iteration  30: 8442122.226 ops/s
Iteration   1: 10933356.768 ops/s
Iteration   2: 11029827.071 ops/s
Iteration   3: 10574020.232 ops/s
Iteration   4: 10592398.775 ops/s
Iteration   5: 11107871.634 ops/s
Iteration   6: 10523090.377 ops/s
Iteration   7: 11053952.650 ops/s
Iteration   8: 11166423.370 ops/s
Iteration   9: 10293674.285 ops/s
Iteration  10: 10887604.889 ops/s
Iteration  11: 10347603.523 ops/s
Iteration  12: 10572169.940 ops/s
Iteration  13: 10915059.911 ops/s
Iteration  14: 10463277.224 ops/s
Iteration  15: 10485182.345 ops/s
Iteration  16: 10955510.543 ops/s
Iteration  17: 10615430.032 ops/s
Iteration  18: 10866083.433 ops/s
Iteration  19: 10396257.591 ops/s
Iteration  20: 10760979.093 ops/s
Iteration  21: 11166144.989 ops/s
Iteration  22: 10572429.157 ops/s
Iteration  23: 10880929.523 ops/s
Iteration  24: 10931012.939 ops/s
Iteration  25: 10356940.574 ops/s
Iteration  26: 10848288.112 ops/s
Iteration  27: 10300311.258 ops/s
Iteration  28: 10661983.650 ops/s
Iteration  29: 10997242.743 ops/s
Iteration  30: 10505825.479 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableRangeLongTest._Benchmark.benchmark_disposed":
  10725362.737 ±(99.9%) 181650.480 ops/s [Average]
  (min, avg, max) = (10293674.285, 10725362.737, 11166423.370), stdev = 271885.907
  CI (99.9%): [10543712.257, 10907013.216] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt         Score        Error  Units
ObservableRangeLongTest._Benchmark.benchmark_disposed  thrpt   30  10725362.737 ± 181650.480  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualTest._Benchmark.benchmark_simpleInequalObservable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualTest._Benchmark.benchmark_simpleInequalObservable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 86537.393 ops/s
# Warmup Iteration   2: 607722.087 ops/s
# Warmup Iteration   3: 1453865.075 ops/s
# Warmup Iteration   4: 1319866.716 ops/s
# Warmup Iteration   5: 1437133.338 ops/s
# Warmup Iteration   6: 1343387.607 ops/s
# Warmup Iteration   7: 1349866.823 ops/s
# Warmup Iteration   8: 1298701.731 ops/s
# Warmup Iteration   9: 1411787.661 ops/s
# Warmup Iteration  10: 1390053.854 ops/s
# Warmup Iteration  11: 1436625.141 ops/s
# Warmup Iteration  12: 1363260.544 ops/s
# Warmup Iteration  13: 1418096.356 ops/s
# Warmup Iteration  14: 1448751.551 ops/s
# Warmup Iteration  15: 1456782.274 ops/s
# Warmup Iteration  16: 1398820.770 ops/s
# Warmup Iteration  17: 1450407.841 ops/s
# Warmup Iteration  18: 1404110.437 ops/s
# Warmup Iteration  19: 1449128.349 ops/s
# Warmup Iteration  20: 1416044.075 ops/s
# Warmup Iteration  21: 1420720.620 ops/s
# Warmup Iteration  22: 1442625.721 ops/s
# Warmup Iteration  23: 1441990.366 ops/s
# Warmup Iteration  24: 1446884.953 ops/s
# Warmup Iteration  25: 1384751.864 ops/s
# Warmup Iteration  26: 1401027.105 ops/s
# Warmup Iteration  27: 1398551.879 ops/s
# Warmup Iteration  28: 1398525.922 ops/s
# Warmup Iteration  29: 1463910.315 ops/s
# Warmup Iteration  30: 1378397.606 ops/s
Iteration   1: 1447188.523 ops/s
Iteration   2: 1392630.449 ops/s
Iteration   3: 1451959.512 ops/s
Iteration   4: 1390033.207 ops/s
Iteration   5: 1383382.688 ops/s
Iteration   6: 1341000.169 ops/s
Iteration   7: 1433201.628 ops/s
Iteration   8: 1470485.687 ops/s
Iteration   9: 1361815.932 ops/s
Iteration  10: 1473614.618 ops/s
Iteration  11: 1365708.911 ops/s
Iteration  12: 1427274.455 ops/s
Iteration  13: 1381186.378 ops/s
Iteration  14: 1361898.783 ops/s
Iteration  15: 1405682.899 ops/s
Iteration  16: 1456285.330 ops/s
Iteration  17: 1366497.621 ops/s
Iteration  18: 1452804.430 ops/s
Iteration  19: 1361352.371 ops/s
Iteration  20: 1438062.059 ops/s
Iteration  21: 1388285.031 ops/s
Iteration  22: 1413011.330 ops/s
Iteration  23: 1407155.533 ops/s
Iteration  24: 1356882.239 ops/s
Iteration  25: 1431078.714 ops/s
Iteration  26: 1345474.940 ops/s
Iteration  27: 1477573.322 ops/s
Iteration  28: 1431641.349 ops/s
Iteration  29: 1396617.904 ops/s
Iteration  30: 1414863.012 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualTest._Benchmark.benchmark_simpleInequalObservable":
  1407488.301 ±(99.9%) 26979.177 ops/s [Average]
  (min, avg, max) = (1341000.169, 1407488.301, 1477573.322), stdev = 40381.165
  CI (99.9%): [1380509.124, 1434467.478] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score       Error  Units
ObservableSequenceEqualTest._Benchmark.benchmark_simpleInequalObservable  thrpt   30  1407488.301 ± 26979.177  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatTest._Benchmark.benchmark_concatMapIterableBufferSize$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatTest._Benchmark.benchmark_concatMapIterableBufferSize

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 897823.897 ops/s
# Warmup Iteration   2: 2369991.601 ops/s
# Warmup Iteration   3: 3069871.721 ops/s
# Warmup Iteration   4: 3226994.868 ops/s
# Warmup Iteration   5: 3424229.498 ops/s
# Warmup Iteration   6: 3161733.972 ops/s
# Warmup Iteration   7: 3268771.561 ops/s
# Warmup Iteration   8: 3501275.076 ops/s
# Warmup Iteration   9: 3378629.880 ops/s
# Warmup Iteration  10: 3232436.503 ops/s
# Warmup Iteration  11: 3349765.361 ops/s
# Warmup Iteration  12: 3280789.349 ops/s
# Warmup Iteration  13: 3341307.394 ops/s
# Warmup Iteration  14: 3392631.033 ops/s
# Warmup Iteration  15: 3233359.599 ops/s
# Warmup Iteration  16: 3388594.249 ops/s
# Warmup Iteration  17: 3322696.935 ops/s
# Warmup Iteration  18: 3168151.670 ops/s
# Warmup Iteration  19: 3410623.478 ops/s
# Warmup Iteration  20: 3381236.118 ops/s
# Warmup Iteration  21: 3265282.226 ops/s
# Warmup Iteration  22: 3401060.880 ops/s
# Warmup Iteration  23: 3288912.326 ops/s
# Warmup Iteration  24: 2730898.402 ops/s
# Warmup Iteration  25: 3284784.852 ops/s
# Warmup Iteration  26: 3310164.494 ops/s
# Warmup Iteration  27: 3444879.047 ops/s
# Warmup Iteration  28: 3238911.153 ops/s
# Warmup Iteration  29: 3380574.607 ops/s
# Warmup Iteration  30: 3243283.029 ops/s
Iteration   1: 3232149.637 ops/s
Iteration   2: 3483182.753 ops/s
Iteration   3: 3196739.753 ops/s
Iteration   4: 3356073.019 ops/s
Iteration   5: 3223282.161 ops/s
Iteration   6: 3454525.280 ops/s
Iteration   7: 3263818.465 ops/s
Iteration   8: 3298021.767 ops/s
Iteration   9: 3485230.244 ops/s
Iteration  10: 3226259.399 ops/s
Iteration  11: 3430262.301 ops/s
Iteration  12: 3320559.726 ops/s
Iteration  13: 3211841.398 ops/s
Iteration  14: 3363136.164 ops/s
Iteration  15: 3181875.177 ops/s
Iteration  16: 3319591.779 ops/s
Iteration  17: 3363588.372 ops/s
Iteration  18: 3214877.419 ops/s
Iteration  19: 3442485.519 ops/s
Iteration  20: 3208037.115 ops/s
Iteration  21: 3317809.166 ops/s
Iteration  22: 3413999.962 ops/s
Iteration  23: 3191988.336 ops/s
Iteration  24: 3387077.740 ops/s
Iteration  25: 3271833.457 ops/s
Iteration  26: 3327918.404 ops/s
Iteration  27: 3384032.220 ops/s
Iteration  28: 3274355.344 ops/s
Iteration  29: 3228128.657 ops/s
Iteration  30: 3353660.144 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatTest._Benchmark.benchmark_concatMapIterableBufferSize":
  3314211.363 ±(99.9%) 62053.339 ops/s [Average]
  (min, avg, max) = (3181875.177, 3314211.363, 3485230.244), stdev = 92878.524
  CI (99.9%): [3252158.023, 3376264.702] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
ObservableConcatTest._Benchmark.benchmark_concatMapIterableBufferSize  thrpt   30  3314211.363 ± 62053.339  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableToSortedListTest._Benchmark.benchmark_sortedComparator$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableToSortedListTest._Benchmark.benchmark_sortedComparator

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 230026.532 ops/s
# Warmup Iteration   2: 1366925.801 ops/s
# Warmup Iteration   3: 2110569.160 ops/s
# Warmup Iteration   4: 2300049.900 ops/s
# Warmup Iteration   5: 2370524.935 ops/s
# Warmup Iteration   6: 2204347.597 ops/s
# Warmup Iteration   7: 2254736.375 ops/s
# Warmup Iteration   8: 2357983.133 ops/s
# Warmup Iteration   9: 2255797.229 ops/s
# Warmup Iteration  10: 2380325.235 ops/s
# Warmup Iteration  11: 2291188.722 ops/s
# Warmup Iteration  12: 2284403.788 ops/s
# Warmup Iteration  13: 2345453.444 ops/s
# Warmup Iteration  14: 2311465.928 ops/s
# Warmup Iteration  15: 2345376.851 ops/s
# Warmup Iteration  16: 2346895.116 ops/s
# Warmup Iteration  17: 2223860.156 ops/s
# Warmup Iteration  18: 2320310.053 ops/s
# Warmup Iteration  19: 2197459.427 ops/s
# Warmup Iteration  20: 2220399.590 ops/s
# Warmup Iteration  21: 2197822.424 ops/s
# Warmup Iteration  22: 2373596.522 ops/s
# Warmup Iteration  23: 2349753.343 ops/s
# Warmup Iteration  24: 2303290.732 ops/s
# Warmup Iteration  25: 2371795.700 ops/s
# Warmup Iteration  26: 2274181.741 ops/s
# Warmup Iteration  27: 2375197.584 ops/s
# Warmup Iteration  28: 2334324.393 ops/s
# Warmup Iteration  29: 2414702.526 ops/s
# Warmup Iteration  30: 2349411.732 ops/s
Iteration   1: 2282630.793 ops/s
Iteration   2: 2364396.704 ops/s
Iteration   3: 2305693.748 ops/s
Iteration   4: 2387241.146 ops/s
Iteration   5: 2277658.386 ops/s
Iteration   6: 2363722.659 ops/s
Iteration   7: 2435668.397 ops/s
Iteration   8: 2272271.307 ops/s
Iteration   9: 2382442.626 ops/s
Iteration  10: 2398136.625 ops/s
Iteration  11: 2311303.163 ops/s
Iteration  12: 2331775.967 ops/s
Iteration  13: 2302879.814 ops/s
Iteration  14: 2375914.161 ops/s
Iteration  15: 2422563.555 ops/s
Iteration  16: 2252967.913 ops/s
Iteration  17: 2390770.189 ops/s
Iteration  18: 2261741.819 ops/s
Iteration  19: 2413994.634 ops/s
Iteration  20: 2295920.518 ops/s
Iteration  21: 2352499.780 ops/s
Iteration  22: 2299780.806 ops/s
Iteration  23: 2361092.586 ops/s
Iteration  24: 2345570.416 ops/s
Iteration  25: 2357228.744 ops/s
Iteration  26: 2400258.125 ops/s
Iteration  27: 2271088.810 ops/s
Iteration  28: 2304272.545 ops/s
Iteration  29: 2378808.935 ops/s
Iteration  30: 2366911.604 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableToSortedListTest._Benchmark.benchmark_sortedComparator":
  2342240.216 ±(99.9%) 34875.011 ops/s [Average]
  (min, avg, max) = (2252967.913, 2342240.216, 2435668.397), stdev = 52199.279
  CI (99.9%): [2307365.204, 2377115.227] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
ObservableToSortedListTest._Benchmark.benchmark_sortedComparator  thrpt   30  2342240.216 ± 34875.011  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableToSortedListTest._Benchmark.benchmark_sorted$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableToSortedListTest._Benchmark.benchmark_sorted

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 182339.727 ops/s
# Warmup Iteration   2: 788669.173 ops/s
# Warmup Iteration   3: 2069462.484 ops/s
# Warmup Iteration   4: 1837341.767 ops/s
# Warmup Iteration   5: 2340476.571 ops/s
# Warmup Iteration   6: 2318402.992 ops/s
# Warmup Iteration   7: 2276434.881 ops/s
# Warmup Iteration   8: 2229660.641 ops/s
# Warmup Iteration   9: 2252187.918 ops/s
# Warmup Iteration  10: 2139092.001 ops/s
# Warmup Iteration  11: 2200651.877 ops/s
# Warmup Iteration  12: 2263925.944 ops/s
# Warmup Iteration  13: 2184444.888 ops/s
# Warmup Iteration  14: 2311510.610 ops/s
# Warmup Iteration  15: 2160092.429 ops/s
# Warmup Iteration  16: 2272700.033 ops/s
# Warmup Iteration  17: 2320164.653 ops/s
# Warmup Iteration  18: 2096272.236 ops/s
# Warmup Iteration  19: 1944396.922 ops/s
# Warmup Iteration  20: 2326639.087 ops/s
# Warmup Iteration  21: 2193380.162 ops/s
# Warmup Iteration  22: 2235380.852 ops/s
# Warmup Iteration  23: 2119827.430 ops/s
# Warmup Iteration  24: 2238688.308 ops/s
# Warmup Iteration  25: 2274657.197 ops/s
# Warmup Iteration  26: 2186298.401 ops/s
# Warmup Iteration  27: 2275585.507 ops/s
# Warmup Iteration  28: 2223735.760 ops/s
# Warmup Iteration  29: 2288395.975 ops/s
# Warmup Iteration  30: 2204658.783 ops/s
Iteration   1: 2215829.584 ops/s
Iteration   2: 2256388.784 ops/s
Iteration   3: 2173360.378 ops/s
Iteration   4: 2306128.093 ops/s
Iteration   5: 2289214.473 ops/s
Iteration   6: 2200923.785 ops/s
Iteration   7: 2321463.668 ops/s
Iteration   8: 2211596.294 ops/s
Iteration   9: 2300560.853 ops/s
Iteration  10: 2178662.698 ops/s
Iteration  11: 2272187.206 ops/s
Iteration  12: 2241704.807 ops/s
Iteration  13: 2247505.155 ops/s
Iteration  14: 2312343.578 ops/s
Iteration  15: 2206230.817 ops/s
Iteration  16: 2229482.563 ops/s
Iteration  17: 2334837.793 ops/s
Iteration  18: 2136898.447 ops/s
Iteration  19: 2237764.729 ops/s
Iteration  20: 2297398.215 ops/s
Iteration  21: 2222568.010 ops/s
Iteration  22: 2283360.133 ops/s
Iteration  23: 2214640.085 ops/s
Iteration  24: 2243112.922 ops/s
Iteration  25: 2230257.760 ops/s
Iteration  26: 2313686.059 ops/s
Iteration  27: 2228027.692 ops/s
Iteration  28: 2192389.038 ops/s
Iteration  29: 2329624.821 ops/s
Iteration  30: 2210526.747 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableToSortedListTest._Benchmark.benchmark_sorted":
  2247955.840 ±(99.9%) 34374.407 ops/s [Average]
  (min, avg, max) = (2136898.447, 2247955.840, 2334837.793), stdev = 51449.997
  CI (99.9%): [2213581.433, 2282330.246] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
ObservableToSortedListTest._Benchmark.benchmark_sorted  thrpt   30  2247955.840 ± 34374.407  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterableTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterableTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2067128.369 ops/s
# Warmup Iteration   2: 5000674.400 ops/s
# Warmup Iteration   3: 5818034.351 ops/s
# Warmup Iteration   4: 6229743.966 ops/s
# Warmup Iteration   5: 6410470.358 ops/s
# Warmup Iteration   6: 6524677.471 ops/s
# Warmup Iteration   7: 6176029.878 ops/s
# Warmup Iteration   8: 6570122.679 ops/s
# Warmup Iteration   9: 6514592.282 ops/s
# Warmup Iteration  10: 6182109.146 ops/s
# Warmup Iteration  11: 6380130.061 ops/s
# Warmup Iteration  12: 6325083.059 ops/s
# Warmup Iteration  13: 6123337.013 ops/s
# Warmup Iteration  14: 6472164.660 ops/s
# Warmup Iteration  15: 6459164.085 ops/s
# Warmup Iteration  16: 6340438.889 ops/s
# Warmup Iteration  17: 6997325.435 ops/s
# Warmup Iteration  18: 6490490.397 ops/s
# Warmup Iteration  19: 6553906.474 ops/s
# Warmup Iteration  20: 6611283.496 ops/s
# Warmup Iteration  21: 6412194.280 ops/s
# Warmup Iteration  22: 6633200.214 ops/s
# Warmup Iteration  23: 6610783.418 ops/s
# Warmup Iteration  24: 6522381.556 ops/s
# Warmup Iteration  25: 6633793.872 ops/s
# Warmup Iteration  26: 6609315.604 ops/s
# Warmup Iteration  27: 6697922.828 ops/s
# Warmup Iteration  28: 6697430.954 ops/s
# Warmup Iteration  29: 6716722.561 ops/s
# Warmup Iteration  30: 6889593.782 ops/s
Iteration   1: 6585775.982 ops/s
Iteration   2: 6676285.538 ops/s
Iteration   3: 6525304.174 ops/s
Iteration   4: 6792961.123 ops/s
Iteration   5: 6790931.242 ops/s
Iteration   6: 6231399.079 ops/s
Iteration   7: 6677114.099 ops/s
Iteration   8: 6557842.478 ops/s
Iteration   9: 6856373.282 ops/s
Iteration  10: 6480636.106 ops/s
Iteration  11: 6669452.087 ops/s
Iteration  12: 6584860.372 ops/s
Iteration  13: 6664467.554 ops/s
Iteration  14: 6608626.773 ops/s
Iteration  15: 6332871.682 ops/s
Iteration  16: 6683212.889 ops/s
Iteration  17: 6666132.269 ops/s
Iteration  18: 6527680.586 ops/s
Iteration  19: 6843876.474 ops/s
Iteration  20: 6318053.108 ops/s
Iteration  21: 6899610.894 ops/s
Iteration  22: 6650129.836 ops/s
Iteration  23: 6705141.369 ops/s
Iteration  24: 6688956.466 ops/s
Iteration  25: 6560870.432 ops/s
Iteration  26: 6967907.132 ops/s
Iteration  27: 6552013.391 ops/s
Iteration  28: 6622709.978 ops/s
Iteration  29: 6543499.576 ops/s
Iteration  30: 6508905.116 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterableTest._Benchmark.benchmark_dispose":
  6625786.703 ±(99.9%) 110096.388 ops/s [Average]
  (min, avg, max) = (6231399.079, 6625786.703, 6967907.132), stdev = 164787.104
  CI (99.9%): [6515690.315, 6735883.091] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score        Error  Units
ObservableFlattenIterableTest._Benchmark.benchmark_dispose  thrpt   30  6625786.703 ± 110096.388  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromTest._Benchmark.benchmark_just10$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromTest._Benchmark.benchmark_just10

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 862623.790 ops/s
# Warmup Iteration   2: 3013994.698 ops/s
# Warmup Iteration   3: 3345337.755 ops/s
# Warmup Iteration   4: 3701106.799 ops/s
# Warmup Iteration   5: 3953855.638 ops/s
# Warmup Iteration   6: 3798392.406 ops/s
# Warmup Iteration   7: 3991027.790 ops/s
# Warmup Iteration   8: 3898854.900 ops/s
# Warmup Iteration   9: 3831838.057 ops/s
# Warmup Iteration  10: 3808794.751 ops/s
# Warmup Iteration  11: 3776470.804 ops/s
# Warmup Iteration  12: 3907770.429 ops/s
# Warmup Iteration  13: 3820385.638 ops/s
# Warmup Iteration  14: 3061449.307 ops/s
# Warmup Iteration  15: 3828263.596 ops/s
# Warmup Iteration  16: 3813526.138 ops/s
# Warmup Iteration  17: 4008064.738 ops/s
# Warmup Iteration  18: 3799548.685 ops/s
# Warmup Iteration  19: 3918668.516 ops/s
# Warmup Iteration  20: 3727022.393 ops/s
# Warmup Iteration  21: 3964443.806 ops/s
# Warmup Iteration  22: 3829419.787 ops/s
# Warmup Iteration  23: 3704207.775 ops/s
# Warmup Iteration  24: 3922515.552 ops/s
# Warmup Iteration  25: 3920714.721 ops/s
# Warmup Iteration  26: 3820485.444 ops/s
# Warmup Iteration  27: 3911239.451 ops/s
# Warmup Iteration  28: 3795401.044 ops/s
# Warmup Iteration  29: 3997533.925 ops/s
# Warmup Iteration  30: 3867879.600 ops/s
Iteration   1: 3943969.872 ops/s
Iteration   2: 3944464.888 ops/s
Iteration   3: 3759516.802 ops/s
Iteration   4: 3930213.305 ops/s
Iteration   5: 3821991.821 ops/s
Iteration   6: 3911240.949 ops/s
Iteration   7: 3781898.678 ops/s
Iteration   8: 3977004.195 ops/s
Iteration   9: 3820744.424 ops/s
Iteration  10: 3897503.586 ops/s
Iteration  11: 3876960.315 ops/s
Iteration  12: 3851558.407 ops/s
Iteration  13: 3943719.157 ops/s
Iteration  14: 3900811.570 ops/s
Iteration  15: 3824051.168 ops/s
Iteration  16: 3842399.660 ops/s
Iteration  17: 3954899.521 ops/s
Iteration  18: 3867073.316 ops/s
Iteration  19: 3858038.508 ops/s
Iteration  20: 3790547.364 ops/s
Iteration  21: 3858099.314 ops/s
Iteration  22: 3985372.563 ops/s
Iteration  23: 3815508.787 ops/s
Iteration  24: 4029564.159 ops/s
Iteration  25: 3809040.478 ops/s
Iteration  26: 3912990.397 ops/s
Iteration  27: 4068399.282 ops/s
Iteration  28: 3814842.646 ops/s
Iteration  29: 3927312.867 ops/s
Iteration  30: 3823947.645 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFromTest._Benchmark.benchmark_just10":
  3884789.522 ±(99.9%) 50435.530 ops/s [Average]
  (min, avg, max) = (3759516.802, 3884789.522, 4068399.282), stdev = 75489.532
  CI (99.9%): [3834353.992, 3935225.051] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt        Score       Error  Units
ObservableFromTest._Benchmark.benchmark_just10  thrpt   30  3884789.522 ± 50435.530  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.BlockingObservableToIteratorTest._Benchmark.benchmark_toIterator$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.BlockingObservableToIteratorTest._Benchmark.benchmark_toIterator

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 170333.653 ops/s
# Warmup Iteration   2: 1207286.675 ops/s
# Warmup Iteration   3: 2305786.474 ops/s
# Warmup Iteration   4: 2773209.154 ops/s
# Warmup Iteration   5: 2633549.915 ops/s
# Warmup Iteration   6: 2765262.394 ops/s
# Warmup Iteration   7: 2697620.872 ops/s
# Warmup Iteration   8: 2622938.205 ops/s
# Warmup Iteration   9: 2801338.119 ops/s
# Warmup Iteration  10: 2685425.842 ops/s
# Warmup Iteration  11: 2718422.368 ops/s
# Warmup Iteration  12: 2621049.035 ops/s
# Warmup Iteration  13: 2708145.058 ops/s
# Warmup Iteration  14: 2781603.551 ops/s
# Warmup Iteration  15: 2693162.037 ops/s
# Warmup Iteration  16: 2732379.925 ops/s
# Warmup Iteration  17: 2623954.130 ops/s
# Warmup Iteration  18: 2834391.395 ops/s
# Warmup Iteration  19: 2666969.972 ops/s
# Warmup Iteration  20: 2672904.824 ops/s
# Warmup Iteration  21: 2739651.392 ops/s
# Warmup Iteration  22: 2625529.882 ops/s
# Warmup Iteration  23: 2743807.619 ops/s
# Warmup Iteration  24: 2765091.464 ops/s
# Warmup Iteration  25: 2647898.263 ops/s
# Warmup Iteration  26: 2727440.635 ops/s
# Warmup Iteration  27: 2690510.232 ops/s
# Warmup Iteration  28: 2684190.122 ops/s
# Warmup Iteration  29: 2757397.652 ops/s
# Warmup Iteration  30: 2720440.166 ops/s
Iteration   1: 2743921.952 ops/s
Iteration   2: 2733584.040 ops/s
Iteration   3: 2634831.979 ops/s
Iteration   4: 2752511.379 ops/s
Iteration   5: 2571665.959 ops/s
Iteration   6: 2784480.965 ops/s
Iteration   7: 2684868.662 ops/s
Iteration   8: 2715273.379 ops/s
Iteration   9: 2735139.563 ops/s
Iteration  10: 2737857.286 ops/s
Iteration  11: 2720576.874 ops/s
Iteration  12: 2684217.712 ops/s
Iteration  13: 2625633.133 ops/s
Iteration  14: 2634069.100 ops/s
Iteration  15: 2777000.633 ops/s
Iteration  16: 2696207.851 ops/s
Iteration  17: 2587675.565 ops/s
Iteration  18: 2742326.413 ops/s
Iteration  19: 2686386.659 ops/s
Iteration  20: 2870304.156 ops/s
Iteration  21: 2647926.348 ops/s
Iteration  22: 2804341.974 ops/s
Iteration  23: 2743564.032 ops/s
Iteration  24: 2730659.914 ops/s
Iteration  25: 2734558.315 ops/s
Iteration  26: 2725538.540 ops/s
Iteration  27: 2797214.712 ops/s
Iteration  28: 2777781.663 ops/s
Iteration  29: 2679187.900 ops/s
Iteration  30: 2772803.827 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.BlockingObservableToIteratorTest._Benchmark.benchmark_toIterator":
  2717737.016 ±(99.9%) 44207.716 ops/s [Average]
  (min, avg, max) = (2571665.959, 2717737.016, 2870304.156), stdev = 66168.033
  CI (99.9%): [2673529.300, 2761944.732] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
BlockingObservableToIteratorTest._Benchmark.benchmark_toIterator  thrpt   30  2717737.016 ± 44207.716  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromTest._Benchmark.benchmark_fusionRejected$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromTest._Benchmark.benchmark_fusionRejected

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1365080.039 ops/s
# Warmup Iteration   2: 4005668.527 ops/s
# Warmup Iteration   3: 5547238.588 ops/s
# Warmup Iteration   4: 5771762.770 ops/s
# Warmup Iteration   5: 6078259.245 ops/s
# Warmup Iteration   6: 5672061.230 ops/s
# Warmup Iteration   7: 5584775.849 ops/s
# Warmup Iteration   8: 5425998.691 ops/s
# Warmup Iteration   9: 5336137.370 ops/s
# Warmup Iteration  10: 6034537.597 ops/s
# Warmup Iteration  11: 5587757.713 ops/s
# Warmup Iteration  12: 5659688.456 ops/s
# Warmup Iteration  13: 5832533.070 ops/s
# Warmup Iteration  14: 5836612.734 ops/s
# Warmup Iteration  15: 5865896.382 ops/s
# Warmup Iteration  16: 5747002.662 ops/s
# Warmup Iteration  17: 5759592.936 ops/s
# Warmup Iteration  18: 5903386.690 ops/s
# Warmup Iteration  19: 5636811.010 ops/s
# Warmup Iteration  20: 5834881.653 ops/s
# Warmup Iteration  21: 5959197.324 ops/s
# Warmup Iteration  22: 5661753.184 ops/s
# Warmup Iteration  23: 5880376.757 ops/s
# Warmup Iteration  24: 5562930.203 ops/s
# Warmup Iteration  25: 5798755.518 ops/s
# Warmup Iteration  26: 6021669.457 ops/s
# Warmup Iteration  27: 5551155.292 ops/s
# Warmup Iteration  28: 5967335.683 ops/s
# Warmup Iteration  29: 5901339.675 ops/s
# Warmup Iteration  30: 5773987.796 ops/s
Iteration   1: 5710633.373 ops/s
Iteration   2: 5767527.077 ops/s
Iteration   3: 5949829.647 ops/s
Iteration   4: 5737703.575 ops/s
Iteration   5: 5732628.329 ops/s
Iteration   6: 5953302.508 ops/s
Iteration   7: 5800742.152 ops/s
Iteration   8: 5772719.336 ops/s
Iteration   9: 5731998.929 ops/s
Iteration  10: 5805679.275 ops/s
Iteration  11: 5878828.895 ops/s
Iteration  12: 5721967.074 ops/s
Iteration  13: 6028351.940 ops/s
Iteration  14: 5694236.119 ops/s
Iteration  15: 5582858.359 ops/s
Iteration  16: 5921304.921 ops/s
Iteration  17: 5772492.002 ops/s
Iteration  18: 5773517.771 ops/s
Iteration  19: 6038243.919 ops/s
Iteration  20: 5769432.424 ops/s
Iteration  21: 5914529.790 ops/s
Iteration  22: 5614762.095 ops/s
Iteration  23: 5967561.262 ops/s
Iteration  24: 5709916.003 ops/s
Iteration  25: 5855919.976 ops/s
Iteration  26: 5967398.669 ops/s
Iteration  27: 5955920.246 ops/s
Iteration  28: 5595983.501 ops/s
Iteration  29: 5930227.421 ops/s
Iteration  30: 5687287.153 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFromTest._Benchmark.benchmark_fusionRejected":
  5811450.125 ±(99.9%) 85226.694 ops/s [Average]
  (min, avg, max) = (5582858.359, 5811450.125, 6038243.919), stdev = 127563.314
  CI (99.9%): [5726223.430, 5896676.819] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
ObservableFromTest._Benchmark.benchmark_fusionRejected  thrpt   30  5811450.125 ± 85226.694  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapTest._Benchmark.benchmark_flatMapBiMapper$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapTest._Benchmark.benchmark_flatMapBiMapper

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 464283.597 ops/s
# Warmup Iteration   2: 2819184.844 ops/s
# Warmup Iteration   3: 4144914.498 ops/s
# Warmup Iteration   4: 4657046.738 ops/s
# Warmup Iteration   5: 4705238.302 ops/s
# Warmup Iteration   6: 4880128.302 ops/s
# Warmup Iteration   7: 4661594.427 ops/s
# Warmup Iteration   8: 4817737.523 ops/s
# Warmup Iteration   9: 4806316.792 ops/s
# Warmup Iteration  10: 4799964.406 ops/s
# Warmup Iteration  11: 4713286.624 ops/s
# Warmup Iteration  12: 4704245.986 ops/s
# Warmup Iteration  13: 4711400.518 ops/s
# Warmup Iteration  14: 4985279.619 ops/s
# Warmup Iteration  15: 4632479.259 ops/s
# Warmup Iteration  16: 4810868.845 ops/s
# Warmup Iteration  17: 4651217.544 ops/s
# Warmup Iteration  18: 4605512.925 ops/s
# Warmup Iteration  19: 4871857.214 ops/s
# Warmup Iteration  20: 4703976.290 ops/s
# Warmup Iteration  21: 4897807.347 ops/s
# Warmup Iteration  22: 4720497.957 ops/s
# Warmup Iteration  23: 4689891.465 ops/s
# Warmup Iteration  24: 4706364.421 ops/s
# Warmup Iteration  25: 4721708.572 ops/s
# Warmup Iteration  26: 4604093.670 ops/s
# Warmup Iteration  27: 4927831.375 ops/s
# Warmup Iteration  28: 4740907.512 ops/s
# Warmup Iteration  29: 4739734.796 ops/s
# Warmup Iteration  30: 4867391.601 ops/s
Iteration   1: 4782680.286 ops/s
Iteration   2: 4854916.222 ops/s
Iteration   3: 4626399.251 ops/s
Iteration   4: 4734213.658 ops/s
Iteration   5: 4841802.761 ops/s
Iteration   6: 4728236.234 ops/s
Iteration   7: 4825257.186 ops/s
Iteration   8: 4802329.667 ops/s
Iteration   9: 4690111.026 ops/s
Iteration  10: 4852327.866 ops/s
Iteration  11: 4683586.335 ops/s
Iteration  12: 4837629.872 ops/s
Iteration  13: 4771095.647 ops/s
Iteration  14: 4728262.068 ops/s
Iteration  15: 4722285.149 ops/s
Iteration  16: 4876151.978 ops/s
Iteration  17: 4756023.815 ops/s
Iteration  18: 4731153.801 ops/s
Iteration  19: 4968794.635 ops/s
Iteration  20: 4653002.102 ops/s
Iteration  21: 4918948.875 ops/s
Iteration  22: 4816733.159 ops/s
Iteration  23: 4755438.027 ops/s
Iteration  24: 4806457.651 ops/s
Iteration  25: 4641456.396 ops/s
Iteration  26: 4732360.701 ops/s
Iteration  27: 4652988.358 ops/s
Iteration  28: 4837644.279 ops/s
Iteration  29: 4917245.173 ops/s
Iteration  30: 4621920.746 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapTest._Benchmark.benchmark_flatMapBiMapper":
  4772248.431 ±(99.9%) 60937.356 ops/s [Average]
  (min, avg, max) = (4621920.746, 4772248.431, 4968794.635), stdev = 91208.172
  CI (99.9%): [4711311.075, 4833185.787] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
ObservableFlatMapTest._Benchmark.benchmark_flatMapBiMapper  thrpt   30  4772248.431 ± 60937.356  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_flatMapIterableMapperIterableOneNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_flatMapIterableMapperIterableOneNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 253627.255 ops/s
# Warmup Iteration   2: 506432.396 ops/s
# Warmup Iteration   3: 514765.546 ops/s
# Warmup Iteration   4: 529300.434 ops/s
# Warmup Iteration   5: 596387.406 ops/s
# Warmup Iteration   6: 606696.320 ops/s
# Warmup Iteration   7: 612781.335 ops/s
# Warmup Iteration   8: 613268.736 ops/s
# Warmup Iteration   9: 605682.731 ops/s
# Warmup Iteration  10: 598356.018 ops/s
# Warmup Iteration  11: 615845.476 ops/s
# Warmup Iteration  12: 618950.837 ops/s
# Warmup Iteration  13: 600198.699 ops/s
# Warmup Iteration  14: 636127.625 ops/s
# Warmup Iteration  15: 577562.894 ops/s
# Warmup Iteration  16: 620516.094 ops/s
# Warmup Iteration  17: 620979.085 ops/s
# Warmup Iteration  18: 634165.378 ops/s
# Warmup Iteration  19: 639883.613 ops/s
# Warmup Iteration  20: 628786.944 ops/s
# Warmup Iteration  21: 642940.873 ops/s
# Warmup Iteration  22: 650370.246 ops/s
# Warmup Iteration  23: 615840.920 ops/s
# Warmup Iteration  24: 624134.842 ops/s
# Warmup Iteration  25: 647558.945 ops/s
# Warmup Iteration  26: 614767.790 ops/s
# Warmup Iteration  27: 655365.871 ops/s
# Warmup Iteration  28: 648158.309 ops/s
# Warmup Iteration  29: 626697.650 ops/s
# Warmup Iteration  30: 625097.736 ops/s
Iteration   1: 629432.474 ops/s
Iteration   2: 672585.956 ops/s
Iteration   3: 599733.042 ops/s
Iteration   4: 646680.223 ops/s
Iteration   5: 641879.051 ops/s
Iteration   6: 640520.732 ops/s
Iteration   7: 642671.709 ops/s
Iteration   8: 597763.339 ops/s
Iteration   9: 615162.350 ops/s
Iteration  10: 632268.707 ops/s
Iteration  11: 638993.408 ops/s
Iteration  12: 646483.431 ops/s
Iteration  13: 619472.299 ops/s
Iteration  14: 629869.598 ops/s
Iteration  15: 642275.394 ops/s
Iteration  16: 633199.050 ops/s
Iteration  17: 636296.561 ops/s
Iteration  18: 651587.607 ops/s
Iteration  19: 620253.064 ops/s
Iteration  20: 639538.512 ops/s
Iteration  21: 632273.498 ops/s
Iteration  22: 647765.033 ops/s
Iteration  23: 623701.187 ops/s
Iteration  24: 629819.250 ops/s
Iteration  25: 650182.163 ops/s
Iteration  26: 621877.225 ops/s
Iteration  27: 645994.840 ops/s
Iteration  28: 617285.992 ops/s
Iteration  29: 656400.286 ops/s
Iteration  30: 619216.191 ops/s


Result "io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_flatMapIterableMapperIterableOneNull":
  634039.406 ±(99.9%) 10798.759 ops/s [Average]
  (min, avg, max) = (597763.339, 634039.406, 672585.956), stdev = 16163.075
  CI (99.9%): [623240.647, 644838.165] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt       Score       Error  Units
ObservableNullTests._Benchmark.benchmark_flatMapIterableMapperIterableOneNull  thrpt   30  634039.406 ± 10798.759  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtTest._Benchmark.benchmark_elementAtObservable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtTest._Benchmark.benchmark_elementAtObservable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2071025.318 ops/s
# Warmup Iteration   2: 6063667.141 ops/s
# Warmup Iteration   3: 8947211.380 ops/s
# Warmup Iteration   4: 8656112.955 ops/s
# Warmup Iteration   5: 9183641.003 ops/s
# Warmup Iteration   6: 8871140.703 ops/s
# Warmup Iteration   7: 8542514.661 ops/s
# Warmup Iteration   8: 8891502.603 ops/s
# Warmup Iteration   9: 9050727.070 ops/s
# Warmup Iteration  10: 8400251.994 ops/s
# Warmup Iteration  11: 8729982.375 ops/s
# Warmup Iteration  12: 9098318.677 ops/s
# Warmup Iteration  13: 8516366.390 ops/s
# Warmup Iteration  14: 9073753.504 ops/s
# Warmup Iteration  15: 8612668.431 ops/s
# Warmup Iteration  16: 8940352.614 ops/s
# Warmup Iteration  17: 8981761.294 ops/s
# Warmup Iteration  18: 9038570.719 ops/s
# Warmup Iteration  19: 8662017.225 ops/s
# Warmup Iteration  20: 8800818.068 ops/s
# Warmup Iteration  21: 9027874.833 ops/s
# Warmup Iteration  22: 8863929.186 ops/s
# Warmup Iteration  23: 8967439.533 ops/s
# Warmup Iteration  24: 8742559.867 ops/s
# Warmup Iteration  25: 8668026.487 ops/s
# Warmup Iteration  26: 8790860.590 ops/s
# Warmup Iteration  27: 8898518.983 ops/s
# Warmup Iteration  28: 8782905.409 ops/s
# Warmup Iteration  29: 9080042.997 ops/s
# Warmup Iteration  30: 9070782.477 ops/s
Iteration   1: 8600438.612 ops/s
Iteration   2: 9124693.920 ops/s
Iteration   3: 9062596.998 ops/s
Iteration   4: 8608842.150 ops/s
Iteration   5: 8834169.232 ops/s
Iteration   6: 9127233.803 ops/s
Iteration   7: 8539242.430 ops/s
Iteration   8: 8687812.611 ops/s
Iteration   9: 9217737.616 ops/s
Iteration  10: 8630308.224 ops/s
Iteration  11: 8936594.232 ops/s
Iteration  12: 8824364.641 ops/s
Iteration  13: 8868217.052 ops/s
Iteration  14: 8954562.187 ops/s
Iteration  15: 9081512.540 ops/s
Iteration  16: 8467528.078 ops/s
Iteration  17: 8886334.029 ops/s
Iteration  18: 8614090.521 ops/s
Iteration  19: 8940462.637 ops/s
Iteration  20: 8813094.779 ops/s
Iteration  21: 8682894.093 ops/s
Iteration  22: 8653246.906 ops/s
Iteration  23: 8792668.079 ops/s
Iteration  24: 9077133.935 ops/s
Iteration  25: 8539169.047 ops/s
Iteration  26: 9056832.083 ops/s
Iteration  27: 8545130.689 ops/s
Iteration  28: 8976177.433 ops/s
Iteration  29: 8718390.209 ops/s
Iteration  30: 7117647.063 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtTest._Benchmark.benchmark_elementAtObservable":
  8765970.861 ±(99.9%) 250805.902 ops/s [Average]
  (min, avg, max) = (7117647.063, 8765970.861, 9217737.616), stdev = 375394.495
  CI (99.9%): [8515164.959, 9016776.763] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score        Error  Units
ObservableElementAtTest._Benchmark.benchmark_elementAtObservable  thrpt   30  8765970.861 ± 250805.902  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtTest._Benchmark.benchmark_elementAtOrDefaultWithIndexOutOfBoundsObservable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtTest._Benchmark.benchmark_elementAtOrDefaultWithIndexOutOfBoundsObservable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1687940.936 ops/s
# Warmup Iteration   2: 6370194.582 ops/s
# Warmup Iteration   3: 9492765.953 ops/s
# Warmup Iteration   4: 9503721.142 ops/s
# Warmup Iteration   5: 9749410.216 ops/s
# Warmup Iteration   6: 9660229.270 ops/s
# Warmup Iteration   7: 9477010.248 ops/s
# Warmup Iteration   8: 9979806.046 ops/s
# Warmup Iteration   9: 9390946.765 ops/s
# Warmup Iteration  10: 9956091.286 ops/s
# Warmup Iteration  11: 9446118.928 ops/s
# Warmup Iteration  12: 9545318.369 ops/s
# Warmup Iteration  13: 9327363.365 ops/s
# Warmup Iteration  14: 9830166.546 ops/s
# Warmup Iteration  15: 9400548.424 ops/s
# Warmup Iteration  16: 9499294.510 ops/s
# Warmup Iteration  17: 9765654.440 ops/s
# Warmup Iteration  18: 9246422.105 ops/s
# Warmup Iteration  19: 9666175.485 ops/s
# Warmup Iteration  20: 9324671.311 ops/s
# Warmup Iteration  21: 9550657.395 ops/s
# Warmup Iteration  22: 9447075.380 ops/s
# Warmup Iteration  23: 9291582.287 ops/s
# Warmup Iteration  24: 9788527.282 ops/s
# Warmup Iteration  25: 9256448.901 ops/s
# Warmup Iteration  26: 9719098.657 ops/s
# Warmup Iteration  27: 9559076.236 ops/s
# Warmup Iteration  28: 9478842.119 ops/s
# Warmup Iteration  29: 9917329.572 ops/s
# Warmup Iteration  30: 9426663.015 ops/s
Iteration   1: 9523841.474 ops/s
Iteration   2: 9618775.719 ops/s
Iteration   3: 9686266.902 ops/s
Iteration   4: 9605896.943 ops/s
Iteration   5: 9386005.708 ops/s
Iteration   6: 9364967.187 ops/s
Iteration   7: 9691651.668 ops/s
Iteration   8: 9586830.718 ops/s
Iteration   9: 9724987.382 ops/s
Iteration  10: 9518587.250 ops/s
Iteration  11: 9417327.387 ops/s
Iteration  12: 9994068.309 ops/s
Iteration  13: 9163789.482 ops/s
Iteration  14: 9621584.986 ops/s
Iteration  15: 9591480.823 ops/s
Iteration  16: 9958137.901 ops/s
Iteration  17: 9290002.138 ops/s
Iteration  18: 9677912.693 ops/s
Iteration  19: 9338235.379 ops/s
Iteration  20: 9945028.166 ops/s
Iteration  21: 9855153.416 ops/s
Iteration  22: 9266377.875 ops/s
Iteration  23: 9961386.499 ops/s
Iteration  24: 9232468.475 ops/s
Iteration  25: 10050841.216 ops/s
Iteration  26: 9698684.883 ops/s
Iteration  27: 9228388.322 ops/s
Iteration  28: 9821081.439 ops/s
Iteration  29: 9496414.493 ops/s
Iteration  30: 10000449.654 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtTest._Benchmark.benchmark_elementAtOrDefaultWithIndexOutOfBoundsObservable":
  9610554.149 ±(99.9%) 173370.732 ops/s [Average]
  (min, avg, max) = (9163789.482, 9610554.149, 10050841.216), stdev = 259493.170
  CI (99.9%): [9437183.417, 9783924.882] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                       Mode  Cnt        Score        Error  Units
ObservableElementAtTest._Benchmark.benchmark_elementAtOrDefaultWithIndexOutOfBoundsObservable  thrpt   30  9610554.149 ± 173370.732  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableLastTest._Benchmark.benchmark_lastOrErrorMultipleElements$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableLastTest._Benchmark.benchmark_lastOrErrorMultipleElements

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1566821.305 ops/s
# Warmup Iteration   2: 4325149.230 ops/s
# Warmup Iteration   3: 6545026.408 ops/s
# Warmup Iteration   4: 6133068.520 ops/s
# Warmup Iteration   5: 6560276.240 ops/s
# Warmup Iteration   6: 6250046.634 ops/s
# Warmup Iteration   7: 6339824.977 ops/s
# Warmup Iteration   8: 6299087.546 ops/s
# Warmup Iteration   9: 6252300.383 ops/s
# Warmup Iteration  10: 6142256.321 ops/s
# Warmup Iteration  11: 6170897.910 ops/s
# Warmup Iteration  12: 6555894.163 ops/s
# Warmup Iteration  13: 6006019.145 ops/s
# Warmup Iteration  14: 6338207.636 ops/s
# Warmup Iteration  15: 6340978.868 ops/s
# Warmup Iteration  16: 6240325.921 ops/s
# Warmup Iteration  17: 6408632.569 ops/s
# Warmup Iteration  18: 6278918.248 ops/s
# Warmup Iteration  19: 6431796.530 ops/s
# Warmup Iteration  20: 6506857.647 ops/s
# Warmup Iteration  21: 6195204.890 ops/s
# Warmup Iteration  22: 6535466.286 ops/s
# Warmup Iteration  23: 6146710.331 ops/s
# Warmup Iteration  24: 6206215.355 ops/s
# Warmup Iteration  25: 6491161.452 ops/s
# Warmup Iteration  26: 6267382.091 ops/s
# Warmup Iteration  27: 6447696.626 ops/s
# Warmup Iteration  28: 6191826.961 ops/s
# Warmup Iteration  29: 6299074.027 ops/s
# Warmup Iteration  30: 6257643.933 ops/s
Iteration   1: 6206867.278 ops/s
Iteration   2: 6362012.009 ops/s
Iteration   3: 6339880.470 ops/s
Iteration   4: 6239772.024 ops/s
Iteration   5: 6541569.884 ops/s
Iteration   6: 6263969.028 ops/s
Iteration   7: 6419186.840 ops/s
Iteration   8: 6142635.577 ops/s
Iteration   9: 6547720.366 ops/s
Iteration  10: 6486729.808 ops/s
Iteration  11: 6159637.903 ops/s
Iteration  12: 6434123.915 ops/s
Iteration  13: 6253041.754 ops/s
Iteration  14: 6380689.430 ops/s
Iteration  15: 6322287.546 ops/s
Iteration  16: 6331887.028 ops/s
Iteration  17: 6440912.853 ops/s
Iteration  18: 6369885.995 ops/s
Iteration  19: 6434677.574 ops/s
Iteration  20: 6167530.839 ops/s
Iteration  21: 6347966.537 ops/s
Iteration  22: 6289285.365 ops/s
Iteration  23: 6399223.564 ops/s
Iteration  24: 6297885.733 ops/s
Iteration  25: 5322950.600 ops/s
Iteration  26: 6584686.158 ops/s
Iteration  27: 6206108.564 ops/s
Iteration  28: 6485659.877 ops/s
Iteration  29: 6422165.527 ops/s
Iteration  30: 6287974.935 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableLastTest._Benchmark.benchmark_lastOrErrorMultipleElements":
  6316297.499 ±(99.9%) 147802.704 ops/s [Average]
  (min, avg, max) = (5322950.600, 6316297.499, 6584686.158), stdev = 221224.146
  CI (99.9%): [6168494.795, 6464100.204] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score        Error  Units
ObservableLastTest._Benchmark.benchmark_lastOrErrorMultipleElements  thrpt   30  6316297.499 ± 147802.704  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtTest._Benchmark.benchmark_elementAtOrDefaultObservable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtTest._Benchmark.benchmark_elementAtOrDefaultObservable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1835810.212 ops/s
# Warmup Iteration   2: 5863866.448 ops/s
# Warmup Iteration   3: 8826132.469 ops/s
# Warmup Iteration   4: 9101979.530 ops/s
# Warmup Iteration   5: 8530931.948 ops/s
# Warmup Iteration   6: 8692963.687 ops/s
# Warmup Iteration   7: 8759885.030 ops/s
# Warmup Iteration   8: 8634402.056 ops/s
# Warmup Iteration   9: 8977510.789 ops/s
# Warmup Iteration  10: 8682226.895 ops/s
# Warmup Iteration  11: 8457106.160 ops/s
# Warmup Iteration  12: 8936346.314 ops/s
# Warmup Iteration  13: 8530414.120 ops/s
# Warmup Iteration  14: 8640932.799 ops/s
# Warmup Iteration  15: 8925606.980 ops/s
# Warmup Iteration  16: 8690579.823 ops/s
# Warmup Iteration  17: 8366797.900 ops/s
# Warmup Iteration  18: 8940265.613 ops/s
# Warmup Iteration  19: 8675516.915 ops/s
# Warmup Iteration  20: 8928990.511 ops/s
# Warmup Iteration  21: 8431860.266 ops/s
# Warmup Iteration  22: 8812467.510 ops/s
# Warmup Iteration  23: 8690625.855 ops/s
# Warmup Iteration  24: 8541525.961 ops/s
# Warmup Iteration  25: 8912321.578 ops/s
# Warmup Iteration  26: 8854142.929 ops/s
# Warmup Iteration  27: 8701929.007 ops/s
# Warmup Iteration  28: 8569725.001 ops/s
# Warmup Iteration  29: 8659496.589 ops/s
# Warmup Iteration  30: 8825358.849 ops/s
Iteration   1: 8577520.272 ops/s
Iteration   2: 8848112.648 ops/s
Iteration   3: 8346387.207 ops/s
Iteration   4: 8660902.427 ops/s
Iteration   5: 8789238.537 ops/s
Iteration   6: 8680748.775 ops/s
Iteration   7: 8821566.305 ops/s
Iteration   8: 8925738.200 ops/s
Iteration   9: 8851124.659 ops/s
Iteration  10: 8444973.491 ops/s
Iteration  11: 8895685.602 ops/s
Iteration  12: 8772067.223 ops/s
Iteration  13: 8828303.728 ops/s
Iteration  14: 8652440.511 ops/s
Iteration  15: 8679552.012 ops/s
Iteration  16: 8745620.211 ops/s
Iteration  17: 8541048.429 ops/s
Iteration  18: 8973823.936 ops/s
Iteration  19: 8724092.167 ops/s
Iteration  20: 8742970.273 ops/s
Iteration  21: 8855698.861 ops/s
Iteration  22: 8522993.264 ops/s
Iteration  23: 8869450.140 ops/s
Iteration  24: 8711470.365 ops/s
Iteration  25: 8954598.650 ops/s
Iteration  26: 8289992.138 ops/s
Iteration  27: 8778378.162 ops/s
Iteration  28: 8710907.459 ops/s
Iteration  29: 8415178.834 ops/s
Iteration  30: 8892334.171 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtTest._Benchmark.benchmark_elementAtOrDefaultObservable":
  8716763.955 ±(99.9%) 119395.216 ops/s [Average]
  (min, avg, max) = (8289992.138, 8716763.955, 8973823.936), stdev = 178705.152
  CI (99.9%): [8597368.739, 8836159.171] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score        Error  Units
ObservableElementAtTest._Benchmark.benchmark_elementAtOrDefaultObservable  thrpt   30  8716763.955 ± 119395.216  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArrayTest._Benchmark.benchmark_just$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArrayTest._Benchmark.benchmark_just

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3441815.409 ops/s
# Warmup Iteration   2: 7977248.274 ops/s
# Warmup Iteration   3: 10319713.202 ops/s
# Warmup Iteration   4: 9818034.664 ops/s
# Warmup Iteration   5: 9928223.344 ops/s
# Warmup Iteration   6: 10075880.590 ops/s
# Warmup Iteration   7: 9785165.656 ops/s
# Warmup Iteration   8: 10397414.627 ops/s
# Warmup Iteration   9: 9758343.758 ops/s
# Warmup Iteration  10: 10159153.251 ops/s
# Warmup Iteration  11: 9866794.450 ops/s
# Warmup Iteration  12: 10132907.023 ops/s
# Warmup Iteration  13: 10190507.273 ops/s
# Warmup Iteration  14: 10024329.730 ops/s
# Warmup Iteration  15: 10407453.959 ops/s
# Warmup Iteration  16: 10420342.148 ops/s
# Warmup Iteration  17: 9739751.704 ops/s
# Warmup Iteration  18: 10277132.644 ops/s
# Warmup Iteration  19: 10132512.620 ops/s
# Warmup Iteration  20: 10129246.989 ops/s
# Warmup Iteration  21: 10298637.285 ops/s
# Warmup Iteration  22: 10001989.795 ops/s
# Warmup Iteration  23: 9984030.309 ops/s
# Warmup Iteration  24: 10317920.055 ops/s
# Warmup Iteration  25: 9952307.748 ops/s
# Warmup Iteration  26: 10391175.037 ops/s
# Warmup Iteration  27: 10009855.654 ops/s
# Warmup Iteration  28: 10036126.366 ops/s
# Warmup Iteration  29: 10277897.724 ops/s
# Warmup Iteration  30: 9879150.264 ops/s
Iteration   1: 10037208.271 ops/s
Iteration   2: 10585127.800 ops/s
Iteration   3: 9763612.514 ops/s
Iteration   4: 9992921.707 ops/s
Iteration   5: 10394638.839 ops/s
Iteration   6: 9993042.055 ops/s
Iteration   7: 10352537.621 ops/s
Iteration   8: 9973082.124 ops/s
Iteration   9: 10392813.335 ops/s
Iteration  10: 9891018.127 ops/s
Iteration  11: 10397819.589 ops/s
Iteration  12: 10474889.246 ops/s
Iteration  13: 9960290.265 ops/s
Iteration  14: 10009476.251 ops/s
Iteration  15: 10090597.104 ops/s
Iteration  16: 10411803.417 ops/s
Iteration  17: 9814995.923 ops/s
Iteration  18: 10028688.225 ops/s
Iteration  19: 10424471.057 ops/s
Iteration  20: 7096598.277 ops/s
Iteration  21: 10408251.619 ops/s
Iteration  22: 9906484.276 ops/s
Iteration  23: 10337338.668 ops/s
Iteration  24: 10469339.949 ops/s
Iteration  25: 9554543.171 ops/s
Iteration  26: 10539262.779 ops/s
Iteration  27: 9919240.605 ops/s
Iteration  28: 10604394.901 ops/s
Iteration  29: 10185712.388 ops/s
Iteration  30: 9740985.391 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArrayTest._Benchmark.benchmark_just":
  10058372.850 ±(99.9%) 419347.935 ops/s [Average]
  (min, avg, max) = (7096598.277, 10058372.850, 10604394.901), stdev = 627660.295
  CI (99.9%): [9639024.915, 10477720.785] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt         Score        Error  Units
FlowableFromArrayTest._Benchmark.benchmark_just  thrpt   30  10058372.850 ± 419347.935  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromTest._Benchmark.benchmark_fromArraySingle$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromTest._Benchmark.benchmark_fromArraySingle

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 23812250.222 ops/s
# Warmup Iteration   2: 49355132.225 ops/s
# Warmup Iteration   3: 51755784.385 ops/s
# Warmup Iteration   4: 49656621.188 ops/s
# Warmup Iteration   5: 51282798.545 ops/s
# Warmup Iteration   6: 49407282.235 ops/s
# Warmup Iteration   7: 50619047.934 ops/s
# Warmup Iteration   8: 50011571.894 ops/s
# Warmup Iteration   9: 50323292.585 ops/s
# Warmup Iteration  10: 48916691.082 ops/s
# Warmup Iteration  11: 51383187.103 ops/s
# Warmup Iteration  12: 50144375.635 ops/s
# Warmup Iteration  13: 52655863.863 ops/s
# Warmup Iteration  14: 47942256.850 ops/s
# Warmup Iteration  15: 52139937.095 ops/s
# Warmup Iteration  16: 49911971.218 ops/s
# Warmup Iteration  17: 51208595.839 ops/s
# Warmup Iteration  18: 49569455.417 ops/s
# Warmup Iteration  19: 51082151.701 ops/s
# Warmup Iteration  20: 51648605.693 ops/s
# Warmup Iteration  21: 49814647.329 ops/s
# Warmup Iteration  22: 52334721.981 ops/s
# Warmup Iteration  23: 52307486.935 ops/s
# Warmup Iteration  24: 48437215.872 ops/s
# Warmup Iteration  25: 49839267.032 ops/s
# Warmup Iteration  26: 52439231.251 ops/s
# Warmup Iteration  27: 50088453.018 ops/s
# Warmup Iteration  28: 49708319.930 ops/s
# Warmup Iteration  29: 52548145.314 ops/s
# Warmup Iteration  30: 49613755.137 ops/s
Iteration   1: 49857128.753 ops/s
Iteration   2: 49746462.370 ops/s
Iteration   3: 49868833.761 ops/s
Iteration   4: 51181158.389 ops/s
Iteration   5: 49012164.498 ops/s
Iteration   6: 50759454.391 ops/s
Iteration   7: 51770512.896 ops/s
Iteration   8: 49751504.152 ops/s
Iteration   9: 51036194.191 ops/s
Iteration  10: 50391807.555 ops/s
Iteration  11: 50450521.981 ops/s
Iteration  12: 50341852.447 ops/s
Iteration  13: 51112457.702 ops/s
Iteration  14: 50580312.354 ops/s
Iteration  15: 50601950.527 ops/s
Iteration  16: 50473521.504 ops/s
Iteration  17: 50993648.083 ops/s
Iteration  18: 49790052.549 ops/s
Iteration  19: 50596193.771 ops/s
Iteration  20: 52055687.911 ops/s
Iteration  21: 49178304.774 ops/s
Iteration  22: 51562184.938 ops/s
Iteration  23: 49943415.836 ops/s
Iteration  24: 49463300.240 ops/s
Iteration  25: 52053614.100 ops/s
Iteration  26: 51840708.332 ops/s
Iteration  27: 48429187.445 ops/s
Iteration  28: 51986254.559 ops/s
Iteration  29: 50299710.156 ops/s
Iteration  30: 51171990.292 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFromTest._Benchmark.benchmark_fromArraySingle":
  50543336.349 ±(99.9%) 627711.666 ops/s [Average]
  (min, avg, max) = (48429187.445, 50543336.349, 52055687.911), stdev = 939529.342
  CI (99.9%): [49915624.682, 51171048.015] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt         Score        Error  Units
ObservableFromTest._Benchmark.benchmark_fromArraySingle  thrpt   30  50543336.349 ± 627711.666  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtTest._Benchmark.benchmark_elementAtOrErrorMultipleElements$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtTest._Benchmark.benchmark_elementAtOrErrorMultipleElements

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 731431.767 ops/s
# Warmup Iteration   2: 4330422.051 ops/s
# Warmup Iteration   3: 5730604.413 ops/s
# Warmup Iteration   4: 6196879.970 ops/s
# Warmup Iteration   5: 6120092.134 ops/s
# Warmup Iteration   6: 6173849.201 ops/s
# Warmup Iteration   7: 6292167.346 ops/s
# Warmup Iteration   8: 6105450.123 ops/s
# Warmup Iteration   9: 6496619.345 ops/s
# Warmup Iteration  10: 5960429.641 ops/s
# Warmup Iteration  11: 6374037.547 ops/s
# Warmup Iteration  12: 6199368.892 ops/s
# Warmup Iteration  13: 6217532.714 ops/s
# Warmup Iteration  14: 6090300.082 ops/s
# Warmup Iteration  15: 6501605.884 ops/s
# Warmup Iteration  16: 6390979.000 ops/s
# Warmup Iteration  17: 6058780.551 ops/s
# Warmup Iteration  18: 6466586.227 ops/s
# Warmup Iteration  19: 6436598.248 ops/s
# Warmup Iteration  20: 5948726.133 ops/s
# Warmup Iteration  21: 6470589.491 ops/s
# Warmup Iteration  22: 6290812.713 ops/s
# Warmup Iteration  23: 6052347.912 ops/s
# Warmup Iteration  24: 6158841.791 ops/s
# Warmup Iteration  25: 6184271.863 ops/s
# Warmup Iteration  26: 6133654.494 ops/s
# Warmup Iteration  27: 6277416.156 ops/s
# Warmup Iteration  28: 6014905.378 ops/s
# Warmup Iteration  29: 6286200.250 ops/s
# Warmup Iteration  30: 6438728.640 ops/s
Iteration   1: 6077388.177 ops/s
Iteration   2: 6475604.681 ops/s
Iteration   3: 6098469.243 ops/s
Iteration   4: 6091785.453 ops/s
Iteration   5: 6216704.377 ops/s
Iteration   6: 6233545.178 ops/s
Iteration   7: 6395291.967 ops/s
Iteration   8: 6134808.347 ops/s
Iteration   9: 6273954.485 ops/s
Iteration  10: 6181220.225 ops/s
Iteration  11: 6057456.285 ops/s
Iteration  12: 6484828.729 ops/s
Iteration  13: 6117015.715 ops/s
Iteration  14: 6218790.211 ops/s
Iteration  15: 4832358.894 ops/s
Iteration  16: 6437525.319 ops/s
Iteration  17: 6145959.298 ops/s
Iteration  18: 6300896.421 ops/s
Iteration  19: 6235627.526 ops/s
Iteration  20: 6138360.297 ops/s
Iteration  21: 6029243.564 ops/s
Iteration  22: 6363639.286 ops/s
Iteration  23: 6045432.264 ops/s
Iteration  24: 6359035.758 ops/s
Iteration  25: 6163627.392 ops/s
Iteration  26: 6260179.491 ops/s
Iteration  27: 6282770.668 ops/s
Iteration  28: 6132254.268 ops/s
Iteration  29: 6529174.764 ops/s
Iteration  30: 6099700.829 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtTest._Benchmark.benchmark_elementAtOrErrorMultipleElements":
  6180421.637 ±(99.9%) 193985.433 ops/s [Average]
  (min, avg, max) = (4832358.894, 6180421.637, 6529174.764), stdev = 290348.285
  CI (99.9%): [5986436.204, 6374407.070] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt        Score        Error  Units
ObservableElementAtTest._Benchmark.benchmark_elementAtOrErrorMultipleElements  thrpt   30  6180421.637 ± 193985.433  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFirstTest._Benchmark.benchmark_firstOrErrorMultipleElementsObservable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFirstTest._Benchmark.benchmark_firstOrErrorMultipleElementsObservable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.727 ops/s
# Warmup Iteration   2: 26119.356 ops/s
# Warmup Iteration   3: 48898.294 ops/s
# Warmup Iteration   4: 109262.339 ops/s
# Warmup Iteration   5: 149315.437 ops/s
# Warmup Iteration   6: 268168.936 ops/s
# Warmup Iteration   7: 297458.649 ops/s
# Warmup Iteration   8: 310947.012 ops/s
# Warmup Iteration   9: 301818.464 ops/s
# Warmup Iteration  10: 314337.933 ops/s
# Warmup Iteration  11: 323978.398 ops/s
# Warmup Iteration  12: 343055.616 ops/s
# Warmup Iteration  13: 324365.449 ops/s
# Warmup Iteration  14: 336642.129 ops/s
# Warmup Iteration  15: 324030.263 ops/s
# Warmup Iteration  16: 330890.778 ops/s
# Warmup Iteration  17: 330721.063 ops/s
# Warmup Iteration  18: 339172.792 ops/s
# Warmup Iteration  19: 322146.701 ops/s
# Warmup Iteration  20: 326432.762 ops/s
# Warmup Iteration  21: 338193.727 ops/s
# Warmup Iteration  22: 330912.223 ops/s
# Warmup Iteration  23: 336240.243 ops/s
# Warmup Iteration  24: 307505.365 ops/s
# Warmup Iteration  25: 329194.327 ops/s
# Warmup Iteration  26: 342381.576 ops/s
# Warmup Iteration  27: 325066.771 ops/s
# Warmup Iteration  28: 341069.962 ops/s
# Warmup Iteration  29: 341492.358 ops/s
# Warmup Iteration  30: 337451.915 ops/s
Iteration   1: 325841.585 ops/s
Iteration   2: 338454.443 ops/s
Iteration   3: 333986.708 ops/s
Iteration   4: 321805.985 ops/s
Iteration   5: 340201.025 ops/s
Iteration   6: 326656.256 ops/s
Iteration   7: 323351.544 ops/s
Iteration   8: 336545.370 ops/s
Iteration   9: 322926.409 ops/s
Iteration  10: 330741.975 ops/s
Iteration  11: 326038.755 ops/s
Iteration  12: 331966.977 ops/s
Iteration  13: 332431.252 ops/s
Iteration  14: 326001.736 ops/s
Iteration  15: 342602.308 ops/s
Iteration  16: 316572.347 ops/s
Iteration  17: 339176.208 ops/s
Iteration  18: 329275.698 ops/s
Iteration  19: 329156.554 ops/s
Iteration  20: 344328.312 ops/s
Iteration  21: 321083.585 ops/s
Iteration  22: 342752.837 ops/s
Iteration  23: 329253.338 ops/s
Iteration  24: 322203.591 ops/s
Iteration  25: 339017.347 ops/s
Iteration  26: 325461.538 ops/s
Iteration  27: 335889.978 ops/s
Iteration  28: 332042.331 ops/s
Iteration  29: 321925.016 ops/s
Iteration  30: 334981.633 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFirstTest._Benchmark.benchmark_firstOrErrorMultipleElementsObservable":
  330755.755 ±(99.9%) 4982.944 ops/s [Average]
  (min, avg, max) = (316572.347, 330755.755, 344328.312), stdev = 7458.236
  CI (99.9%): [325772.811, 335738.698] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt       Score      Error  Units
ObservableFirstTest._Benchmark.benchmark_firstOrErrorMultipleElementsObservable  thrpt   30  330755.755 ± 4982.944  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDoFinallyTest._Benchmark.benchmark_normalJust$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDoFinallyTest._Benchmark.benchmark_normalJust

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1449612.880 ops/s
# Warmup Iteration   2: 4183932.514 ops/s
# Warmup Iteration   3: 6010141.719 ops/s
# Warmup Iteration   4: 6429943.657 ops/s
# Warmup Iteration   5: 6267179.995 ops/s
# Warmup Iteration   6: 6295547.778 ops/s
# Warmup Iteration   7: 6233594.115 ops/s
# Warmup Iteration   8: 6291764.775 ops/s
# Warmup Iteration   9: 6403188.220 ops/s
# Warmup Iteration  10: 6234505.049 ops/s
# Warmup Iteration  11: 6234678.383 ops/s
# Warmup Iteration  12: 6344618.136 ops/s
# Warmup Iteration  13: 6307820.686 ops/s
# Warmup Iteration  14: 6337153.771 ops/s
# Warmup Iteration  15: 6370924.499 ops/s
# Warmup Iteration  16: 6459594.751 ops/s
# Warmup Iteration  17: 6238273.133 ops/s
# Warmup Iteration  18: 6276599.685 ops/s
# Warmup Iteration  19: 6421522.168 ops/s
# Warmup Iteration  20: 6100550.796 ops/s
# Warmup Iteration  21: 6403916.671 ops/s
# Warmup Iteration  22: 6308550.301 ops/s
# Warmup Iteration  23: 6384743.565 ops/s
# Warmup Iteration  24: 6199032.859 ops/s
# Warmup Iteration  25: 6040129.052 ops/s
# Warmup Iteration  26: 6358198.371 ops/s
# Warmup Iteration  27: 6332384.546 ops/s
# Warmup Iteration  28: 6413363.958 ops/s
# Warmup Iteration  29: 6138737.405 ops/s
# Warmup Iteration  30: 6371360.963 ops/s
Iteration   1: 6106715.207 ops/s
Iteration   2: 6340902.256 ops/s
Iteration   3: 6316570.684 ops/s
Iteration   4: 6331429.790 ops/s
Iteration   5: 6180149.861 ops/s
Iteration   6: 6401655.303 ops/s
Iteration   7: 6491751.168 ops/s
Iteration   8: 6083951.076 ops/s
Iteration   9: 5355885.298 ops/s
Iteration  10: 6484040.495 ops/s
Iteration  11: 6280424.829 ops/s
Iteration  12: 6166622.129 ops/s
Iteration  13: 6346952.059 ops/s
Iteration  14: 6334613.693 ops/s
Iteration  15: 6143986.668 ops/s
Iteration  16: 6177894.963 ops/s
Iteration  17: 6468524.886 ops/s
Iteration  18: 6120775.388 ops/s
Iteration  19: 6310546.800 ops/s
Iteration  20: 6428214.348 ops/s
Iteration  21: 6601202.417 ops/s
Iteration  22: 6186138.871 ops/s
Iteration  23: 6277096.679 ops/s
Iteration  24: 6186916.634 ops/s
Iteration  25: 6172085.308 ops/s
Iteration  26: 6352928.939 ops/s
Iteration  27: 6107969.079 ops/s
Iteration  28: 6069008.624 ops/s
Iteration  29: 6246829.709 ops/s
Iteration  30: 6324622.334 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableDoFinallyTest._Benchmark.benchmark_normalJust":
  6246546.850 ±(99.9%) 144453.493 ops/s [Average]
  (min, avg, max) = (5355885.298, 6246546.850, 6601202.417), stdev = 216211.204
  CI (99.9%): [6102093.357, 6391000.343] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score        Error  Units
ObservableDoFinallyTest._Benchmark.benchmark_normalJust  thrpt   30  6246546.850 ± 144453.493  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterableTest._Benchmark.benchmark_failingInnerCancelsSource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterableTest._Benchmark.benchmark_failingInnerCancelsSource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 182849.268 ops/s
# Warmup Iteration   2: 475230.045 ops/s
# Warmup Iteration   3: 574591.092 ops/s
# Warmup Iteration   4: 509287.610 ops/s
# Warmup Iteration   5: 562584.807 ops/s
# Warmup Iteration   6: 571938.885 ops/s
# Warmup Iteration   7: 555047.320 ops/s
# Warmup Iteration   8: 596117.219 ops/s
# Warmup Iteration   9: 560538.135 ops/s
# Warmup Iteration  10: 584945.751 ops/s
# Warmup Iteration  11: 552457.624 ops/s
# Warmup Iteration  12: 565818.593 ops/s
# Warmup Iteration  13: 589194.325 ops/s
# Warmup Iteration  14: 551662.632 ops/s
# Warmup Iteration  15: 556318.147 ops/s
# Warmup Iteration  16: 518919.166 ops/s
# Warmup Iteration  17: 609034.598 ops/s
# Warmup Iteration  18: 593491.254 ops/s
# Warmup Iteration  19: 583186.820 ops/s
# Warmup Iteration  20: 621088.288 ops/s
# Warmup Iteration  21: 581712.564 ops/s
# Warmup Iteration  22: 590591.929 ops/s
# Warmup Iteration  23: 616739.244 ops/s
# Warmup Iteration  24: 593114.464 ops/s
# Warmup Iteration  25: 577223.056 ops/s
# Warmup Iteration  26: 609932.132 ops/s
# Warmup Iteration  27: 616274.736 ops/s
# Warmup Iteration  28: 587567.103 ops/s
# Warmup Iteration  29: 617683.244 ops/s
# Warmup Iteration  30: 576680.837 ops/s
Iteration   1: 606116.775 ops/s
Iteration   2: 609843.351 ops/s
Iteration   3: 577807.146 ops/s
Iteration   4: 598947.533 ops/s
Iteration   5: 596474.115 ops/s
Iteration   6: 602789.512 ops/s
Iteration   7: 580182.367 ops/s
Iteration   8: 622150.372 ops/s
Iteration   9: 573169.290 ops/s
Iteration  10: 601108.435 ops/s
Iteration  11: 601736.674 ops/s
Iteration  12: 595726.137 ops/s
Iteration  13: 577938.969 ops/s
Iteration  14: 598578.477 ops/s
Iteration  15: 614139.716 ops/s
Iteration  16: 579581.715 ops/s
Iteration  17: 603030.869 ops/s
Iteration  18: 582077.926 ops/s
Iteration  19: 617160.208 ops/s
Iteration  20: 590352.305 ops/s
Iteration  21: 595471.666 ops/s
Iteration  22: 611123.357 ops/s
Iteration  23: 587541.009 ops/s
Iteration  24: 600679.104 ops/s
Iteration  25: 590136.740 ops/s
Iteration  26: 610711.906 ops/s
Iteration  27: 599117.470 ops/s
Iteration  28: 609124.342 ops/s
Iteration  29: 590280.670 ops/s
Iteration  30: 610304.574 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterableTest._Benchmark.benchmark_failingInnerCancelsSource":
  597780.091 ±(99.9%) 8547.204 ops/s [Average]
  (min, avg, max) = (573169.290, 597780.091, 622150.372), stdev = 12793.053
  CI (99.9%): [589232.887, 606327.295] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt       Score      Error  Units
ObservableFlattenIterableTest._Benchmark.benchmark_failingInnerCancelsSource  thrpt   30  597780.091 ± 8547.204  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_bufferSkipIntoCustomCollection$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_bufferSkipIntoCustomCollection

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.833 ops/s
# Warmup Iteration   2: 34892.474 ops/s
# Warmup Iteration   3: 125632.633 ops/s
# Warmup Iteration   4: 134750.228 ops/s
# Warmup Iteration   5: 379641.700 ops/s
# Warmup Iteration   6: 522823.631 ops/s
# Warmup Iteration   7: 472520.898 ops/s
# Warmup Iteration   8: 546555.215 ops/s
# Warmup Iteration   9: 521942.617 ops/s
# Warmup Iteration  10: 548774.131 ops/s
# Warmup Iteration  11: 515243.333 ops/s
# Warmup Iteration  12: 534902.400 ops/s
# Warmup Iteration  13: 521043.226 ops/s
# Warmup Iteration  14: 531913.322 ops/s
# Warmup Iteration  15: 543689.108 ops/s
# Warmup Iteration  16: 516573.572 ops/s
# Warmup Iteration  17: 535981.823 ops/s
# Warmup Iteration  18: 515849.306 ops/s
# Warmup Iteration  19: 547145.462 ops/s
# Warmup Iteration  20: 513509.844 ops/s
# Warmup Iteration  21: 543861.695 ops/s
# Warmup Iteration  22: 523025.856 ops/s
# Warmup Iteration  23: 519428.606 ops/s
# Warmup Iteration  24: 536804.471 ops/s
# Warmup Iteration  25: 522408.994 ops/s
# Warmup Iteration  26: 512507.754 ops/s
# Warmup Iteration  27: 552275.072 ops/s
# Warmup Iteration  28: 542402.485 ops/s
# Warmup Iteration  29: 517451.971 ops/s
# Warmup Iteration  30: 550424.253 ops/s
Iteration   1: 539911.031 ops/s
Iteration   2: 522012.909 ops/s
Iteration   3: 426764.513 ops/s
Iteration   4: 517902.363 ops/s
Iteration   5: 554540.860 ops/s
Iteration   6: 539449.726 ops/s
Iteration   7: 530611.516 ops/s
Iteration   8: 525317.545 ops/s
Iteration   9: 528119.586 ops/s
Iteration  10: 540353.206 ops/s
Iteration  11: 529771.155 ops/s
Iteration  12: 547456.795 ops/s
Iteration  13: 518977.743 ops/s
Iteration  14: 536441.454 ops/s
Iteration  15: 509111.358 ops/s
Iteration  16: 533519.091 ops/s
Iteration  17: 527305.273 ops/s
Iteration  18: 534527.563 ops/s
Iteration  19: 539444.673 ops/s
Iteration  20: 516860.837 ops/s
Iteration  21: 550956.233 ops/s
Iteration  22: 527101.056 ops/s
Iteration  23: 544769.931 ops/s
Iteration  24: 516618.025 ops/s
Iteration  25: 545353.427 ops/s
Iteration  26: 546104.342 ops/s
Iteration  27: 503958.866 ops/s
Iteration  28: 540399.174 ops/s
Iteration  29: 529964.251 ops/s
Iteration  30: 546497.168 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_bufferSkipIntoCustomCollection":
  529004.056 ±(99.9%) 15378.696 ops/s [Average]
  (min, avg, max) = (426764.513, 529004.056, 554540.860), stdev = 23018.109
  CI (99.9%): [513625.360, 544382.751] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score       Error  Units
ObservableBufferTest._Benchmark.benchmark_bufferSkipIntoCustomCollection  thrpt   30  529004.056 ± 15378.696  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_bufferIntoCustomCollection$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_bufferIntoCustomCollection

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.739 ops/s
# Warmup Iteration   2: 29742.144 ops/s
# Warmup Iteration   3: 105072.331 ops/s
# Warmup Iteration   4: 90509.270 ops/s
# Warmup Iteration   5: 103747.718 ops/s
# Warmup Iteration   6: 188771.189 ops/s
# Warmup Iteration   7: 173763.160 ops/s
# Warmup Iteration   8: 266472.484 ops/s
# Warmup Iteration   9: 393193.035 ops/s
# Warmup Iteration  10: 505590.386 ops/s
# Warmup Iteration  11: 499400.012 ops/s
# Warmup Iteration  12: 495928.530 ops/s
# Warmup Iteration  13: 493772.556 ops/s
# Warmup Iteration  14: 512984.382 ops/s
# Warmup Iteration  15: 498435.529 ops/s
# Warmup Iteration  16: 519289.042 ops/s
# Warmup Iteration  17: 496464.385 ops/s
# Warmup Iteration  18: 505929.094 ops/s
# Warmup Iteration  19: 504021.770 ops/s
# Warmup Iteration  20: 512224.513 ops/s
# Warmup Iteration  21: 499693.792 ops/s
# Warmup Iteration  22: 510159.911 ops/s
# Warmup Iteration  23: 503087.151 ops/s
# Warmup Iteration  24: 508120.543 ops/s
# Warmup Iteration  25: 503352.233 ops/s
# Warmup Iteration  26: 508923.038 ops/s
# Warmup Iteration  27: 499206.650 ops/s
# Warmup Iteration  28: 493143.666 ops/s
# Warmup Iteration  29: 490485.158 ops/s
# Warmup Iteration  30: 514633.481 ops/s
Iteration   1: 483799.023 ops/s
Iteration   2: 492856.525 ops/s
Iteration   3: 521536.758 ops/s
Iteration   4: 475431.392 ops/s
Iteration   5: 522439.254 ops/s
Iteration   6: 514268.054 ops/s
Iteration   7: 499498.650 ops/s
Iteration   8: 512406.967 ops/s
Iteration   9: 528918.654 ops/s
Iteration  10: 500188.440 ops/s
Iteration  11: 513991.234 ops/s
Iteration  12: 488907.833 ops/s
Iteration  13: 509060.563 ops/s
Iteration  14: 507140.769 ops/s
Iteration  15: 487218.982 ops/s
Iteration  16: 504419.887 ops/s
Iteration  17: 512162.097 ops/s
Iteration  18: 512966.345 ops/s
Iteration  19: 488769.732 ops/s
Iteration  20: 531060.242 ops/s
Iteration  21: 495445.996 ops/s
Iteration  22: 508422.470 ops/s
Iteration  23: 486498.837 ops/s
Iteration  24: 525959.236 ops/s
Iteration  25: 495728.400 ops/s
Iteration  26: 512466.811 ops/s
Iteration  27: 504576.937 ops/s
Iteration  28: 496690.455 ops/s
Iteration  29: 515110.759 ops/s
Iteration  30: 495485.493 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_bufferIntoCustomCollection":
  504780.893 ±(99.9%) 9478.339 ops/s [Average]
  (min, avg, max) = (475431.392, 504780.893, 531060.242), stdev = 14186.732
  CI (99.9%): [495302.555, 514259.232] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score      Error  Units
ObservableBufferTest._Benchmark.benchmark_bufferIntoCustomCollection  thrpt   30  504780.893 ± 9478.339  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_eagerness8$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_eagerness8

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 50290.440 ops/s
# Warmup Iteration   2: 265718.531 ops/s
# Warmup Iteration   3: 309374.500 ops/s
# Warmup Iteration   4: 349398.544 ops/s
# Warmup Iteration   5: 365118.282 ops/s
# Warmup Iteration   6: 357143.545 ops/s
# Warmup Iteration   7: 348735.192 ops/s
# Warmup Iteration   8: 361203.449 ops/s
# Warmup Iteration   9: 342485.644 ops/s
# Warmup Iteration  10: 353664.285 ops/s
# Warmup Iteration  11: 355805.885 ops/s
# Warmup Iteration  12: 351621.162 ops/s
# Warmup Iteration  13: 366367.025 ops/s
# Warmup Iteration  14: 346544.030 ops/s
# Warmup Iteration  15: 370435.730 ops/s
# Warmup Iteration  16: 368736.543 ops/s
# Warmup Iteration  17: 352129.700 ops/s
# Warmup Iteration  18: 343351.616 ops/s
# Warmup Iteration  19: 369458.763 ops/s
# Warmup Iteration  20: 356474.115 ops/s
# Warmup Iteration  21: 351619.170 ops/s
# Warmup Iteration  22: 355499.222 ops/s
# Warmup Iteration  23: 374927.223 ops/s
# Warmup Iteration  24: 335897.634 ops/s
# Warmup Iteration  25: 346388.789 ops/s
# Warmup Iteration  26: 363619.130 ops/s
# Warmup Iteration  27: 297245.045 ops/s
# Warmup Iteration  28: 355259.421 ops/s
# Warmup Iteration  29: 369355.630 ops/s
# Warmup Iteration  30: 336912.547 ops/s
Iteration   1: 355852.064 ops/s
Iteration   2: 363260.846 ops/s
Iteration   3: 348250.733 ops/s
Iteration   4: 367480.162 ops/s
Iteration   5: 367318.195 ops/s
Iteration   6: 354659.587 ops/s
Iteration   7: 357148.795 ops/s
Iteration   8: 366198.270 ops/s
Iteration   9: 343707.957 ops/s
Iteration  10: 369692.647 ops/s
Iteration  11: 373310.482 ops/s
Iteration  12: 340180.564 ops/s
Iteration  13: 364413.507 ops/s
Iteration  14: 355813.713 ops/s
Iteration  15: 357232.331 ops/s
Iteration  16: 350544.428 ops/s
Iteration  17: 360662.207 ops/s
Iteration  18: 339148.923 ops/s
Iteration  19: 356128.422 ops/s
Iteration  20: 354850.846 ops/s
Iteration  21: 361763.765 ops/s
Iteration  22: 367072.582 ops/s
Iteration  23: 340063.354 ops/s
Iteration  24: 365178.576 ops/s
Iteration  25: 335403.798 ops/s
Iteration  26: 354892.130 ops/s
Iteration  27: 356258.757 ops/s
Iteration  28: 350594.438 ops/s
Iteration  29: 361844.770 ops/s
Iteration  30: 355976.451 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_eagerness8":
  356496.777 ±(99.9%) 6509.545 ops/s [Average]
  (min, avg, max) = (335403.798, 356496.777, 373310.482), stdev = 9743.181
  CI (99.9%): [349987.231, 363006.322] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
ObservableConcatMapEagerTest._Benchmark.benchmark_eagerness8  thrpt   30  356496.777 ± 6509.545  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_eagerness6$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_eagerness6

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 54841.731 ops/s
# Warmup Iteration   2: 280194.479 ops/s
# Warmup Iteration   3: 405599.976 ops/s
# Warmup Iteration   4: 465656.634 ops/s
# Warmup Iteration   5: 475361.021 ops/s
# Warmup Iteration   6: 461557.828 ops/s
# Warmup Iteration   7: 446578.532 ops/s
# Warmup Iteration   8: 479578.069 ops/s
# Warmup Iteration   9: 444721.031 ops/s
# Warmup Iteration  10: 452881.098 ops/s
# Warmup Iteration  11: 470485.751 ops/s
# Warmup Iteration  12: 448159.292 ops/s
# Warmup Iteration  13: 467674.513 ops/s
# Warmup Iteration  14: 436893.241 ops/s
# Warmup Iteration  15: 475360.436 ops/s
# Warmup Iteration  16: 455291.629 ops/s
# Warmup Iteration  17: 452951.791 ops/s
# Warmup Iteration  18: 469539.566 ops/s
# Warmup Iteration  19: 448863.406 ops/s
# Warmup Iteration  20: 446111.838 ops/s
# Warmup Iteration  21: 447430.369 ops/s
# Warmup Iteration  22: 467576.778 ops/s
# Warmup Iteration  23: 454056.599 ops/s
# Warmup Iteration  24: 454564.295 ops/s
# Warmup Iteration  25: 456615.229 ops/s
# Warmup Iteration  26: 455968.448 ops/s
# Warmup Iteration  27: 466528.665 ops/s
# Warmup Iteration  28: 467911.511 ops/s
# Warmup Iteration  29: 445967.450 ops/s
# Warmup Iteration  30: 481793.025 ops/s
Iteration   1: 445553.185 ops/s
Iteration   2: 459668.457 ops/s
Iteration   3: 449783.472 ops/s
Iteration   4: 457234.879 ops/s
Iteration   5: 462960.082 ops/s
Iteration   6: 448813.785 ops/s
Iteration   7: 481588.826 ops/s
Iteration   8: 472056.866 ops/s
Iteration   9: 447940.897 ops/s
Iteration  10: 459970.490 ops/s
Iteration  11: 453371.486 ops/s
Iteration  12: 468499.285 ops/s
Iteration  13: 447055.797 ops/s
Iteration  14: 448424.381 ops/s
Iteration  15: 475485.219 ops/s
Iteration  16: 436847.341 ops/s
Iteration  17: 470281.323 ops/s
Iteration  18: 444657.497 ops/s
Iteration  19: 458792.564 ops/s
Iteration  20: 471981.774 ops/s
Iteration  21: 444101.256 ops/s
Iteration  22: 460710.617 ops/s
Iteration  23: 454381.554 ops/s
Iteration  24: 468365.888 ops/s
Iteration  25: 465712.131 ops/s
Iteration  26: 462957.696 ops/s
Iteration  27: 467523.373 ops/s
Iteration  28: 454941.908 ops/s
Iteration  29: 466896.752 ops/s
Iteration  30: 446334.940 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_eagerness6":
  458429.791 ±(99.9%) 7371.209 ops/s [Average]
  (min, avg, max) = (436847.341, 458429.791, 481588.826), stdev = 11032.880
  CI (99.9%): [451058.582, 465801.000] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
ObservableConcatMapEagerTest._Benchmark.benchmark_eagerness6  thrpt   30  458429.791 ± 7371.209  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_eagerness7$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_eagerness7

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 54850.214 ops/s
# Warmup Iteration   2: 266158.407 ops/s
# Warmup Iteration   3: 362824.168 ops/s
# Warmup Iteration   4: 413930.891 ops/s
# Warmup Iteration   5: 387406.485 ops/s
# Warmup Iteration   6: 401230.027 ops/s
# Warmup Iteration   7: 406308.361 ops/s
# Warmup Iteration   8: 400983.607 ops/s
# Warmup Iteration   9: 390312.339 ops/s
# Warmup Iteration  10: 405883.714 ops/s
# Warmup Iteration  11: 399683.998 ops/s
# Warmup Iteration  12: 398381.813 ops/s
# Warmup Iteration  13: 401425.973 ops/s
# Warmup Iteration  14: 395271.063 ops/s
# Warmup Iteration  15: 396435.088 ops/s
# Warmup Iteration  16: 399531.279 ops/s
# Warmup Iteration  17: 409557.890 ops/s
# Warmup Iteration  18: 386484.996 ops/s
# Warmup Iteration  19: 403817.090 ops/s
# Warmup Iteration  20: 394432.332 ops/s
# Warmup Iteration  21: 416619.539 ops/s
# Warmup Iteration  22: 301179.306 ops/s
# Warmup Iteration  23: 391243.413 ops/s
# Warmup Iteration  24: 398708.858 ops/s
# Warmup Iteration  25: 405236.128 ops/s
# Warmup Iteration  26: 395524.744 ops/s
# Warmup Iteration  27: 389606.695 ops/s
# Warmup Iteration  28: 415942.311 ops/s
# Warmup Iteration  29: 390630.275 ops/s
# Warmup Iteration  30: 409755.758 ops/s
Iteration   1: 401687.289 ops/s
Iteration   2: 393541.309 ops/s
Iteration   3: 408771.982 ops/s
Iteration   4: 386310.420 ops/s
Iteration   5: 397884.152 ops/s
Iteration   6: 412586.647 ops/s
Iteration   7: 395794.354 ops/s
Iteration   8: 402006.230 ops/s
Iteration   9: 396241.483 ops/s
Iteration  10: 392328.072 ops/s
Iteration  11: 402795.521 ops/s
Iteration  12: 396029.195 ops/s
Iteration  13: 393651.984 ops/s
Iteration  14: 411853.472 ops/s
Iteration  15: 392063.113 ops/s
Iteration  16: 402636.239 ops/s
Iteration  17: 396135.592 ops/s
Iteration  18: 391741.551 ops/s
Iteration  19: 405079.858 ops/s
Iteration  20: 408866.458 ops/s
Iteration  21: 394463.411 ops/s
Iteration  22: 408919.271 ops/s
Iteration  23: 378558.244 ops/s
Iteration  24: 423494.938 ops/s
Iteration  25: 390115.311 ops/s
Iteration  26: 389898.450 ops/s
Iteration  27: 398831.895 ops/s
Iteration  28: 393038.592 ops/s
Iteration  29: 406522.007 ops/s
Iteration  30: 395589.714 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_eagerness7":
  398914.559 ±(99.9%) 6111.503 ops/s [Average]
  (min, avg, max) = (378558.244, 398914.559, 423494.938), stdev = 9147.411
  CI (99.9%): [392803.055, 405026.062] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
ObservableConcatMapEagerTest._Benchmark.benchmark_eagerness7  thrpt   30  398914.559 ± 6111.503  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_eagerness9$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_eagerness9

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 28033.958 ops/s
# Warmup Iteration   2: 243282.024 ops/s
# Warmup Iteration   3: 253642.639 ops/s
# Warmup Iteration   4: 303944.959 ops/s
# Warmup Iteration   5: 317091.958 ops/s
# Warmup Iteration   6: 313589.798 ops/s
# Warmup Iteration   7: 321513.655 ops/s
# Warmup Iteration   8: 306566.457 ops/s
# Warmup Iteration   9: 317301.526 ops/s
# Warmup Iteration  10: 319699.784 ops/s
# Warmup Iteration  11: 300245.877 ops/s
# Warmup Iteration  12: 321259.298 ops/s
# Warmup Iteration  13: 309200.959 ops/s
# Warmup Iteration  14: 312421.688 ops/s
# Warmup Iteration  15: 318617.460 ops/s
# Warmup Iteration  16: 309957.152 ops/s
# Warmup Iteration  17: 323559.549 ops/s
# Warmup Iteration  18: 317700.425 ops/s
# Warmup Iteration  19: 328547.123 ops/s
# Warmup Iteration  20: 323642.461 ops/s
# Warmup Iteration  21: 305527.315 ops/s
# Warmup Iteration  22: 317684.363 ops/s
# Warmup Iteration  23: 305616.419 ops/s
# Warmup Iteration  24: 309277.049 ops/s
# Warmup Iteration  25: 319459.078 ops/s
# Warmup Iteration  26: 314392.559 ops/s
# Warmup Iteration  27: 313918.991 ops/s
# Warmup Iteration  28: 325335.284 ops/s
# Warmup Iteration  29: 308690.348 ops/s
# Warmup Iteration  30: 317378.461 ops/s
Iteration   1: 310505.425 ops/s
Iteration   2: 325904.423 ops/s
Iteration   3: 299094.762 ops/s
Iteration   4: 320833.490 ops/s
Iteration   5: 325217.279 ops/s
Iteration   6: 307187.407 ops/s
Iteration   7: 326918.120 ops/s
Iteration   8: 314040.312 ops/s
Iteration   9: 314127.315 ops/s
Iteration  10: 319645.551 ops/s
Iteration  11: 309518.533 ops/s
Iteration  12: 332588.237 ops/s
Iteration  13: 317705.674 ops/s
Iteration  14: 307131.446 ops/s
Iteration  15: 325070.968 ops/s
Iteration  16: 311841.800 ops/s
Iteration  17: 322332.727 ops/s
Iteration  18: 318107.767 ops/s
Iteration  19: 310040.810 ops/s
Iteration  20: 325116.606 ops/s
Iteration  21: 313788.619 ops/s
Iteration  22: 321062.726 ops/s
Iteration  23: 301245.335 ops/s
Iteration  24: 315770.198 ops/s
Iteration  25: 313570.554 ops/s
Iteration  26: 318586.430 ops/s
Iteration  27: 320295.030 ops/s
Iteration  28: 303661.062 ops/s
Iteration  29: 337214.788 ops/s
Iteration  30: 313860.630 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_eagerness9":
  316732.801 ±(99.9%) 5912.966 ops/s [Average]
  (min, avg, max) = (299094.762, 316732.801, 337214.788), stdev = 8850.250
  CI (99.9%): [310819.835, 322645.767] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
ObservableConcatMapEagerTest._Benchmark.benchmark_eagerness9  thrpt   30  316732.801 ± 5912.966  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapTest._Benchmark.benchmark_fusedPollThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapTest._Benchmark.benchmark_fusedPollThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 101462.733 ops/s
# Warmup Iteration   2: 451230.266 ops/s
# Warmup Iteration   3: 489597.301 ops/s
# Warmup Iteration   4: 491397.930 ops/s
# Warmup Iteration   5: 490288.683 ops/s
# Warmup Iteration   6: 495031.006 ops/s
# Warmup Iteration   7: 445141.771 ops/s
# Warmup Iteration   8: 496851.203 ops/s
# Warmup Iteration   9: 508296.101 ops/s
# Warmup Iteration  10: 499897.246 ops/s
# Warmup Iteration  11: 523690.443 ops/s
# Warmup Iteration  12: 512363.270 ops/s
# Warmup Iteration  13: 516195.099 ops/s
# Warmup Iteration  14: 502572.083 ops/s
# Warmup Iteration  15: 508938.000 ops/s
# Warmup Iteration  16: 526182.451 ops/s
# Warmup Iteration  17: 359499.064 ops/s
# Warmup Iteration  18: 531374.751 ops/s
# Warmup Iteration  19: 537457.765 ops/s
# Warmup Iteration  20: 524226.778 ops/s
# Warmup Iteration  21: 544751.349 ops/s
# Warmup Iteration  22: 516692.480 ops/s
# Warmup Iteration  23: 535107.288 ops/s
# Warmup Iteration  24: 519094.297 ops/s
# Warmup Iteration  25: 543625.564 ops/s
# Warmup Iteration  26: 511445.234 ops/s
# Warmup Iteration  27: 529036.298 ops/s
# Warmup Iteration  28: 539957.968 ops/s
# Warmup Iteration  29: 529886.556 ops/s
# Warmup Iteration  30: 553082.898 ops/s
Iteration   1: 527184.511 ops/s
Iteration   2: 514674.645 ops/s
Iteration   3: 550118.442 ops/s
Iteration   4: 506733.621 ops/s
Iteration   5: 542100.443 ops/s
Iteration   6: 544797.469 ops/s
Iteration   7: 516481.454 ops/s
Iteration   8: 536454.772 ops/s
Iteration   9: 524519.499 ops/s
Iteration  10: 541915.031 ops/s
Iteration  11: 547906.748 ops/s
Iteration  12: 522656.135 ops/s
Iteration  13: 554401.419 ops/s
Iteration  14: 520205.672 ops/s
Iteration  15: 525968.553 ops/s
Iteration  16: 543143.313 ops/s
Iteration  17: 520587.408 ops/s
Iteration  18: 519035.866 ops/s
Iteration  19: 536091.584 ops/s
Iteration  20: 528192.254 ops/s
Iteration  21: 543753.052 ops/s
Iteration  22: 514452.787 ops/s
Iteration  23: 518641.089 ops/s
Iteration  24: 544731.787 ops/s
Iteration  25: 506346.944 ops/s
Iteration  26: 539803.992 ops/s
Iteration  27: 514631.326 ops/s
Iteration  28: 542152.765 ops/s
Iteration  29: 523793.300 ops/s
Iteration  30: 530866.846 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapTest._Benchmark.benchmark_fusedPollThrows":
  530078.091 ±(99.9%) 9040.853 ops/s [Average]
  (min, avg, max) = (506346.944, 530078.091, 554401.419), stdev = 13531.924
  CI (99.9%): [521037.238, 539118.943] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
ObservableConcatMapTest._Benchmark.benchmark_fusedPollThrows  thrpt   30  530078.091 ± 9040.853  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapTest._Benchmark.benchmark_reentrantNoOverflow$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapTest._Benchmark.benchmark_reentrantNoOverflow

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 30460.960 ops/s
# Warmup Iteration   2: 122464.544 ops/s
# Warmup Iteration   3: 227389.998 ops/s
# Warmup Iteration   4: 434073.248 ops/s
# Warmup Iteration   5: 478767.832 ops/s
# Warmup Iteration   6: 499073.730 ops/s
# Warmup Iteration   7: 441871.458 ops/s
# Warmup Iteration   8: 503951.493 ops/s
# Warmup Iteration   9: 534826.872 ops/s
# Warmup Iteration  10: 510006.877 ops/s
# Warmup Iteration  11: 522353.059 ops/s
# Warmup Iteration  12: 503737.617 ops/s
# Warmup Iteration  13: 526605.387 ops/s
# Warmup Iteration  14: 490373.503 ops/s
# Warmup Iteration  15: 527292.900 ops/s
# Warmup Iteration  16: 487713.694 ops/s
# Warmup Iteration  17: 513678.320 ops/s
# Warmup Iteration  18: 495291.615 ops/s
# Warmup Iteration  19: 517975.609 ops/s
# Warmup Iteration  20: 518737.193 ops/s
# Warmup Iteration  21: 506658.266 ops/s
# Warmup Iteration  22: 516422.724 ops/s
# Warmup Iteration  23: 512828.288 ops/s
# Warmup Iteration  24: 507969.850 ops/s
# Warmup Iteration  25: 519250.865 ops/s
# Warmup Iteration  26: 506860.286 ops/s
# Warmup Iteration  27: 527495.255 ops/s
# Warmup Iteration  28: 509678.451 ops/s
# Warmup Iteration  29: 513861.323 ops/s
# Warmup Iteration  30: 522108.297 ops/s
Iteration   1: 493820.335 ops/s
Iteration   2: 525665.607 ops/s
Iteration   3: 554524.389 ops/s
Iteration   4: 500738.017 ops/s
Iteration   5: 512645.507 ops/s
Iteration   6: 500413.105 ops/s
Iteration   7: 520139.104 ops/s
Iteration   8: 516409.384 ops/s
Iteration   9: 496338.761 ops/s
Iteration  10: 514685.504 ops/s
Iteration  11: 512136.533 ops/s
Iteration  12: 502562.728 ops/s
Iteration  13: 523195.156 ops/s
Iteration  14: 488045.845 ops/s
Iteration  15: 525948.426 ops/s
Iteration  16: 504056.914 ops/s
Iteration  17: 534131.479 ops/s
Iteration  18: 510876.539 ops/s
Iteration  19: 522798.751 ops/s
Iteration  20: 502719.609 ops/s
Iteration  21: 530810.026 ops/s
Iteration  22: 522777.065 ops/s
Iteration  23: 509466.118 ops/s
Iteration  24: 519335.579 ops/s
Iteration  25: 494445.292 ops/s
Iteration  26: 530993.134 ops/s
Iteration  27: 494120.116 ops/s
Iteration  28: 515993.900 ops/s
Iteration  29: 521099.228 ops/s
Iteration  30: 500359.989 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapTest._Benchmark.benchmark_reentrantNoOverflow":
  513375.071 ±(99.9%) 9895.122 ops/s [Average]
  (min, avg, max) = (488045.845, 513375.071, 554524.389), stdev = 14810.554
  CI (99.9%): [503479.949, 523270.194] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
ObservableConcatMapTest._Benchmark.benchmark_reentrantNoOverflow  thrpt   30  513375.071 ± 9895.122  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatTest._Benchmark.benchmark_concatMapJustSource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatTest._Benchmark.benchmark_concatMapJustSource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1465936.496 ops/s
# Warmup Iteration   2: 4598703.354 ops/s
# Warmup Iteration   3: 6555699.599 ops/s
# Warmup Iteration   4: 6648017.255 ops/s
# Warmup Iteration   5: 7148184.991 ops/s
# Warmup Iteration   6: 6739995.337 ops/s
# Warmup Iteration   7: 6703600.235 ops/s
# Warmup Iteration   8: 6997443.623 ops/s
# Warmup Iteration   9: 6976520.033 ops/s
# Warmup Iteration  10: 6803077.913 ops/s
# Warmup Iteration  11: 5897652.011 ops/s
# Warmup Iteration  12: 6759265.747 ops/s
# Warmup Iteration  13: 7000998.430 ops/s
# Warmup Iteration  14: 6781182.382 ops/s
# Warmup Iteration  15: 7026888.486 ops/s
# Warmup Iteration  16: 6769582.592 ops/s
# Warmup Iteration  17: 6722495.536 ops/s
# Warmup Iteration  18: 6837003.260 ops/s
# Warmup Iteration  19: 7097620.981 ops/s
# Warmup Iteration  20: 6855888.455 ops/s
# Warmup Iteration  21: 6995046.845 ops/s
# Warmup Iteration  22: 6901754.978 ops/s
# Warmup Iteration  23: 6629565.440 ops/s
# Warmup Iteration  24: 7058988.154 ops/s
# Warmup Iteration  25: 6499333.469 ops/s
# Warmup Iteration  26: 7105519.622 ops/s
# Warmup Iteration  27: 7221774.535 ops/s
# Warmup Iteration  28: 6734158.603 ops/s
# Warmup Iteration  29: 6715609.001 ops/s
# Warmup Iteration  30: 7020825.001 ops/s
Iteration   1: 6715783.790 ops/s
Iteration   2: 7065257.690 ops/s
Iteration   3: 6949850.704 ops/s
Iteration   4: 6770184.890 ops/s
Iteration   5: 6871924.687 ops/s
Iteration   6: 6612614.039 ops/s
Iteration   7: 7188667.669 ops/s
Iteration   8: 6697738.234 ops/s
Iteration   9: 6927432.687 ops/s
Iteration  10: 7171107.410 ops/s
Iteration  11: 7007011.514 ops/s
Iteration  12: 6744547.040 ops/s
Iteration  13: 7073194.666 ops/s
Iteration  14: 6893089.818 ops/s
Iteration  15: 6849047.606 ops/s
Iteration  16: 6946385.324 ops/s
Iteration  17: 6720678.648 ops/s
Iteration  18: 7023124.611 ops/s
Iteration  19: 6805444.750 ops/s
Iteration  20: 6910508.683 ops/s
Iteration  21: 6892546.032 ops/s
Iteration  22: 6696050.020 ops/s
Iteration  23: 7049840.896 ops/s
Iteration  24: 6598525.195 ops/s
Iteration  25: 6806194.892 ops/s
Iteration  26: 6920157.268 ops/s
Iteration  27: 6791155.233 ops/s
Iteration  28: 7197589.040 ops/s
Iteration  29: 6752731.220 ops/s
Iteration  30: 6858003.064 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatTest._Benchmark.benchmark_concatMapJustSource":
  6883546.244 ±(99.9%) 108807.657 ops/s [Average]
  (min, avg, max) = (6598525.195, 6883546.244, 7197589.040), stdev = 162858.191
  CI (99.9%): [6774738.587, 6992353.901] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score        Error  Units
ObservableConcatTest._Benchmark.benchmark_concatMapJustSource  thrpt   30  6883546.244 ± 108807.657  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapTest._Benchmark.benchmark_innerError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapTest._Benchmark.benchmark_innerError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 71179.559 ops/s
# Warmup Iteration   2: 391659.552 ops/s
# Warmup Iteration   3: 439393.576 ops/s
# Warmup Iteration   4: 468511.326 ops/s
# Warmup Iteration   5: 484537.720 ops/s
# Warmup Iteration   6: 462945.861 ops/s
# Warmup Iteration   7: 491792.474 ops/s
# Warmup Iteration   8: 466609.338 ops/s
# Warmup Iteration   9: 446870.930 ops/s
# Warmup Iteration  10: 459643.606 ops/s
# Warmup Iteration  11: 473036.405 ops/s
# Warmup Iteration  12: 480767.193 ops/s
# Warmup Iteration  13: 489248.924 ops/s
# Warmup Iteration  14: 475475.590 ops/s
# Warmup Iteration  15: 477455.864 ops/s
# Warmup Iteration  16: 495059.487 ops/s
# Warmup Iteration  17: 498361.410 ops/s
# Warmup Iteration  18: 496092.217 ops/s
# Warmup Iteration  19: 522381.394 ops/s
# Warmup Iteration  20: 475836.235 ops/s
# Warmup Iteration  21: 497819.875 ops/s
# Warmup Iteration  22: 492347.454 ops/s
# Warmup Iteration  23: 495347.233 ops/s
# Warmup Iteration  24: 503913.722 ops/s
# Warmup Iteration  25: 481755.120 ops/s
# Warmup Iteration  26: 489292.652 ops/s
# Warmup Iteration  27: 504200.178 ops/s
# Warmup Iteration  28: 472768.936 ops/s
# Warmup Iteration  29: 482473.570 ops/s
# Warmup Iteration  30: 514252.824 ops/s
Iteration   1: 477927.595 ops/s
Iteration   2: 509772.232 ops/s
Iteration   3: 500685.255 ops/s
Iteration   4: 480878.091 ops/s
Iteration   5: 517171.844 ops/s
Iteration   6: 489611.256 ops/s
Iteration   7: 503629.523 ops/s
Iteration   8: 507329.387 ops/s
Iteration   9: 483423.049 ops/s
Iteration  10: 502637.739 ops/s
Iteration  11: 495806.500 ops/s
Iteration  12: 500114.246 ops/s
Iteration  13: 485203.386 ops/s
Iteration  14: 493336.483 ops/s
Iteration  15: 504413.902 ops/s
Iteration  16: 500884.139 ops/s
Iteration  17: 496158.871 ops/s
Iteration  18: 488182.302 ops/s
Iteration  19: 483140.128 ops/s
Iteration  20: 513235.079 ops/s
Iteration  21: 488465.786 ops/s
Iteration  22: 500708.482 ops/s
Iteration  23: 490207.919 ops/s
Iteration  24: 504702.120 ops/s
Iteration  25: 505659.478 ops/s
Iteration  26: 500722.035 ops/s
Iteration  27: 509443.129 ops/s
Iteration  28: 487852.089 ops/s
Iteration  29: 505944.965 ops/s
Iteration  30: 490301.068 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapTest._Benchmark.benchmark_innerError":
  497251.603 ±(99.9%) 6839.282 ops/s [Average]
  (min, avg, max) = (477927.595, 497251.603, 517171.844), stdev = 10236.716
  CI (99.9%): [490412.320, 504090.885] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score      Error  Units
ObservableConcatMapTest._Benchmark.benchmark_innerError  thrpt   30  497251.603 ± 6839.282  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatTest._Benchmark.benchmark_concatReportsDisposedOnComplete$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatTest._Benchmark.benchmark_concatReportsDisposedOnComplete

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1150305.995 ops/s
# Warmup Iteration   2: 5474483.106 ops/s
# Warmup Iteration   3: 6692230.972 ops/s
# Warmup Iteration   4: 7233058.811 ops/s
# Warmup Iteration   5: 7262662.787 ops/s
# Warmup Iteration   6: 5292474.664 ops/s
# Warmup Iteration   7: 6835207.804 ops/s
# Warmup Iteration   8: 7196290.499 ops/s
# Warmup Iteration   9: 7159061.085 ops/s
# Warmup Iteration  10: 7366127.771 ops/s
# Warmup Iteration  11: 6954653.736 ops/s
# Warmup Iteration  12: 7492804.284 ops/s
# Warmup Iteration  13: 7089089.968 ops/s
# Warmup Iteration  14: 7462596.688 ops/s
# Warmup Iteration  15: 6964384.900 ops/s
# Warmup Iteration  16: 7543357.546 ops/s
# Warmup Iteration  17: 7446476.936 ops/s
# Warmup Iteration  18: 7134378.252 ops/s
# Warmup Iteration  19: 7341600.763 ops/s
# Warmup Iteration  20: 7292563.703 ops/s
# Warmup Iteration  21: 7210436.571 ops/s
# Warmup Iteration  22: 7539191.433 ops/s
# Warmup Iteration  23: 7017757.611 ops/s
# Warmup Iteration  24: 7299962.742 ops/s
# Warmup Iteration  25: 7542168.676 ops/s
# Warmup Iteration  26: 7124212.534 ops/s
# Warmup Iteration  27: 7109007.185 ops/s
# Warmup Iteration  28: 7427697.641 ops/s
# Warmup Iteration  29: 7142792.184 ops/s
# Warmup Iteration  30: 7484023.336 ops/s
Iteration   1: 7179716.709 ops/s
Iteration   2: 7211611.552 ops/s
Iteration   3: 7509319.114 ops/s
Iteration   4: 7100914.191 ops/s
Iteration   5: 7529181.535 ops/s
Iteration   6: 7043647.696 ops/s
Iteration   7: 6952350.899 ops/s
Iteration   8: 7498972.235 ops/s
Iteration   9: 6967113.877 ops/s
Iteration  10: 7344477.920 ops/s
Iteration  11: 7258627.152 ops/s
Iteration  12: 7235376.997 ops/s
Iteration  13: 7483416.935 ops/s
Iteration  14: 7029678.461 ops/s
Iteration  15: 7330215.603 ops/s
Iteration  16: 7190958.391 ops/s
Iteration  17: 7385403.117 ops/s
Iteration  18: 7083019.759 ops/s
Iteration  19: 7338872.314 ops/s
Iteration  20: 7418145.994 ops/s
Iteration  21: 7091473.139 ops/s
Iteration  22: 7310919.658 ops/s
Iteration  23: 7305649.552 ops/s
Iteration  24: 7450686.804 ops/s
Iteration  25: 7201628.419 ops/s
Iteration  26: 7102869.436 ops/s
Iteration  27: 7465626.205 ops/s
Iteration  28: 6995979.487 ops/s
Iteration  29: 7348529.605 ops/s
Iteration  30: 7266105.792 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatTest._Benchmark.benchmark_concatReportsDisposedOnComplete":
  7254349.618 ±(99.9%) 115599.880 ops/s [Average]
  (min, avg, max) = (6952350.899, 7254349.618, 7529181.535), stdev = 173024.471
  CI (99.9%): [7138749.739, 7369949.498] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score        Error  Units
ObservableConcatTest._Benchmark.benchmark_concatReportsDisposedOnComplete  thrpt   30  7254349.618 ± 115599.880  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapTest._Benchmark.benchmark_scalarXMap$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapTest._Benchmark.benchmark_scalarXMap

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1070851.460 ops/s
# Warmup Iteration   2: 3430054.124 ops/s
# Warmup Iteration   3: 3678838.206 ops/s
# Warmup Iteration   4: 4188388.025 ops/s
# Warmup Iteration   5: 4510373.817 ops/s
# Warmup Iteration   6: 4461744.102 ops/s
# Warmup Iteration   7: 4304874.974 ops/s
# Warmup Iteration   8: 4227066.207 ops/s
# Warmup Iteration   9: 4363168.466 ops/s
# Warmup Iteration  10: 4365809.109 ops/s
# Warmup Iteration  11: 4210486.497 ops/s
# Warmup Iteration  12: 4396980.368 ops/s
# Warmup Iteration  13: 4149830.884 ops/s
# Warmup Iteration  14: 4269767.429 ops/s
# Warmup Iteration  15: 4525654.072 ops/s
# Warmup Iteration  16: 4273906.821 ops/s
# Warmup Iteration  17: 4261979.840 ops/s
# Warmup Iteration  18: 4445366.062 ops/s
# Warmup Iteration  19: 4364604.789 ops/s
# Warmup Iteration  20: 4148376.121 ops/s
# Warmup Iteration  21: 4492116.228 ops/s
# Warmup Iteration  22: 4195008.171 ops/s
# Warmup Iteration  23: 4459291.241 ops/s
# Warmup Iteration  24: 4557181.412 ops/s
# Warmup Iteration  25: 4167341.313 ops/s
# Warmup Iteration  26: 4387356.491 ops/s
# Warmup Iteration  27: 4225275.225 ops/s
# Warmup Iteration  28: 4369604.461 ops/s
# Warmup Iteration  29: 4162571.154 ops/s
# Warmup Iteration  30: 4340481.731 ops/s
Iteration   1: 4273664.268 ops/s
Iteration   2: 4220620.308 ops/s
Iteration   3: 4277848.733 ops/s
Iteration   4: 4422844.051 ops/s
Iteration   5: 4222074.050 ops/s
Iteration   6: 4215856.096 ops/s
Iteration   7: 4169570.033 ops/s
Iteration   8: 4372362.749 ops/s
Iteration   9: 4238102.266 ops/s
Iteration  10: 4374112.227 ops/s
Iteration  11: 4372201.195 ops/s
Iteration  12: 4378003.970 ops/s
Iteration  13: 4230779.590 ops/s
Iteration  14: 4284417.219 ops/s
Iteration  15: 4443885.661 ops/s
Iteration  16: 4459129.791 ops/s
Iteration  17: 4225944.882 ops/s
Iteration  18: 4309199.132 ops/s
Iteration  19: 4492408.511 ops/s
Iteration  20: 4313506.261 ops/s
Iteration  21: 4371354.497 ops/s
Iteration  22: 4246244.844 ops/s
Iteration  23: 4316959.621 ops/s
Iteration  24: 4462056.917 ops/s
Iteration  25: 4319609.551 ops/s
Iteration  26: 4362621.151 ops/s
Iteration  27: 4262790.336 ops/s
Iteration  28: 4368852.943 ops/s
Iteration  29: 4410758.127 ops/s
Iteration  30: 4312438.613 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapTest._Benchmark.benchmark_scalarXMap":
  4324340.586 ±(99.9%) 57129.555 ops/s [Average]
  (min, avg, max) = (4169570.033, 4324340.586, 4492408.511), stdev = 85508.835
  CI (99.9%): [4267211.031, 4381470.142] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
ObservableConcatMapTest._Benchmark.benchmark_scalarXMap  thrpt   30  4324340.586 ± 57129.555  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapTest._Benchmark.benchmark_mapperThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapTest._Benchmark.benchmark_mapperThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 77970.293 ops/s
# Warmup Iteration   2: 376683.069 ops/s
# Warmup Iteration   3: 494738.086 ops/s
# Warmup Iteration   4: 482331.066 ops/s
# Warmup Iteration   5: 461453.023 ops/s
# Warmup Iteration   6: 489395.272 ops/s
# Warmup Iteration   7: 506526.447 ops/s
# Warmup Iteration   8: 475648.417 ops/s
# Warmup Iteration   9: 487533.463 ops/s
# Warmup Iteration  10: 509255.541 ops/s
# Warmup Iteration  11: 457813.549 ops/s
# Warmup Iteration  12: 496403.664 ops/s
# Warmup Iteration  13: 497285.668 ops/s
# Warmup Iteration  14: 475158.671 ops/s
# Warmup Iteration  15: 512351.141 ops/s
# Warmup Iteration  16: 505655.245 ops/s
# Warmup Iteration  17: 485127.295 ops/s
# Warmup Iteration  18: 490719.024 ops/s
# Warmup Iteration  19: 532476.702 ops/s
# Warmup Iteration  20: 490966.253 ops/s
# Warmup Iteration  21: 525356.552 ops/s
# Warmup Iteration  22: 504617.964 ops/s
# Warmup Iteration  23: 514943.310 ops/s
# Warmup Iteration  24: 519596.482 ops/s
# Warmup Iteration  25: 488750.553 ops/s
# Warmup Iteration  26: 535961.096 ops/s
# Warmup Iteration  27: 502649.049 ops/s
# Warmup Iteration  28: 496571.369 ops/s
# Warmup Iteration  29: 492407.162 ops/s
# Warmup Iteration  30: 505023.539 ops/s
Iteration   1: 512804.706 ops/s
Iteration   2: 513483.562 ops/s
Iteration   3: 514581.128 ops/s
Iteration   4: 519954.216 ops/s
Iteration   5: 496563.330 ops/s
Iteration   6: 511218.097 ops/s
Iteration   7: 529750.130 ops/s
Iteration   8: 506823.470 ops/s
Iteration   9: 523925.978 ops/s
Iteration  10: 509896.586 ops/s
Iteration  11: 512020.709 ops/s
Iteration  12: 523162.563 ops/s
Iteration  13: 497584.395 ops/s
Iteration  14: 504573.700 ops/s
Iteration  15: 517517.563 ops/s
Iteration  16: 505995.164 ops/s
Iteration  17: 517523.236 ops/s
Iteration  18: 530521.714 ops/s
Iteration  19: 487230.507 ops/s
Iteration  20: 523008.033 ops/s
Iteration  21: 509095.999 ops/s
Iteration  22: 531539.822 ops/s
Iteration  23: 500857.571 ops/s
Iteration  24: 515912.528 ops/s
Iteration  25: 538179.969 ops/s
Iteration  26: 494689.011 ops/s
Iteration  27: 520353.827 ops/s
Iteration  28: 509422.477 ops/s
Iteration  29: 511858.957 ops/s
Iteration  30: 503499.771 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapTest._Benchmark.benchmark_mapperThrows":
  513118.291 ±(99.9%) 7835.276 ops/s [Average]
  (min, avg, max) = (487230.507, 513118.291, 538179.969), stdev = 11727.474
  CI (99.9%): [505283.014, 520953.567] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
ObservableConcatMapTest._Benchmark.benchmark_mapperThrows  thrpt   30  513118.291 ± 7835.276  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_concatMapJustJust$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_concatMapJustJust

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 497121.698 ops/s
# Warmup Iteration   2: 2182336.757 ops/s
# Warmup Iteration   3: 3008116.361 ops/s
# Warmup Iteration   4: 3238405.324 ops/s
# Warmup Iteration   5: 3572428.992 ops/s
# Warmup Iteration   6: 3279415.569 ops/s
# Warmup Iteration   7: 3571130.562 ops/s
# Warmup Iteration   8: 3531938.604 ops/s
# Warmup Iteration   9: 3400484.104 ops/s
# Warmup Iteration  10: 3166593.816 ops/s
# Warmup Iteration  11: 3666111.900 ops/s
# Warmup Iteration  12: 3552794.588 ops/s
# Warmup Iteration  13: 3626646.854 ops/s
# Warmup Iteration  14: 3537165.389 ops/s
# Warmup Iteration  15: 3621980.071 ops/s
# Warmup Iteration  16: 3584740.341 ops/s
# Warmup Iteration  17: 3374294.157 ops/s
# Warmup Iteration  18: 3557080.437 ops/s
# Warmup Iteration  19: 3501432.223 ops/s
# Warmup Iteration  20: 3515397.539 ops/s
# Warmup Iteration  21: 3562500.534 ops/s
# Warmup Iteration  22: 3570947.554 ops/s
# Warmup Iteration  23: 3545547.861 ops/s
# Warmup Iteration  24: 3420484.678 ops/s
# Warmup Iteration  25: 3689944.167 ops/s
# Warmup Iteration  26: 3467170.345 ops/s
# Warmup Iteration  27: 3587518.440 ops/s
# Warmup Iteration  28: 3696817.196 ops/s
# Warmup Iteration  29: 3426638.515 ops/s
# Warmup Iteration  30: 3697199.605 ops/s
Iteration   1: 3495488.001 ops/s
Iteration   2: 3490661.015 ops/s
Iteration   3: 3641628.046 ops/s
Iteration   4: 3457433.477 ops/s
Iteration   5: 3487180.217 ops/s
Iteration   6: 3636448.945 ops/s
Iteration   7: 3472728.065 ops/s
Iteration   8: 3669038.478 ops/s
Iteration   9: 3493162.605 ops/s
Iteration  10: 3539008.711 ops/s
Iteration  11: 3628666.525 ops/s
Iteration  12: 3431830.996 ops/s
Iteration  13: 3688637.395 ops/s
Iteration  14: 3556850.737 ops/s
Iteration  15: 3584745.232 ops/s
Iteration  16: 3459904.908 ops/s
Iteration  17: 3660114.153 ops/s
Iteration  18: 3512926.984 ops/s
Iteration  19: 3721996.407 ops/s
Iteration  20: 3638021.894 ops/s
Iteration  21: 3490345.720 ops/s
Iteration  22: 3640029.258 ops/s
Iteration  23: 3473351.921 ops/s
Iteration  24: 3604873.719 ops/s
Iteration  25: 3470690.304 ops/s
Iteration  26: 3622987.338 ops/s
Iteration  27: 3061039.491 ops/s
Iteration  28: 3606550.744 ops/s
Iteration  29: 3446622.257 ops/s
Iteration  30: 3407426.677 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_concatMapJustJust":
  3536346.341 ±(99.9%) 83944.936 ops/s [Average]
  (min, avg, max) = (3061039.491, 3536346.341, 3721996.407), stdev = 125644.837
  CI (99.9%): [3452401.405, 3620291.276] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score       Error  Units
ObservableConcatMapSchedulerTest._Benchmark.benchmark_concatMapJustJust  thrpt   30  3536346.341 ± 83944.936  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatTest._Benchmark.benchmark_concatObservableDelayErrorWithError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatTest._Benchmark.benchmark_concatObservableDelayErrorWithError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 58208.448 ops/s
# Warmup Iteration   2: 141828.393 ops/s
# Warmup Iteration   3: 313880.258 ops/s
# Warmup Iteration   4: 398709.724 ops/s
# Warmup Iteration   5: 406850.951 ops/s
# Warmup Iteration   6: 399151.606 ops/s
# Warmup Iteration   7: 424036.211 ops/s
# Warmup Iteration   8: 409375.586 ops/s
# Warmup Iteration   9: 414219.191 ops/s
# Warmup Iteration  10: 431197.750 ops/s
# Warmup Iteration  11: 404117.101 ops/s
# Warmup Iteration  12: 427519.415 ops/s
# Warmup Iteration  13: 411692.624 ops/s
# Warmup Iteration  14: 424044.657 ops/s
# Warmup Iteration  15: 401063.663 ops/s
# Warmup Iteration  16: 403934.001 ops/s
# Warmup Iteration  17: 427100.672 ops/s
# Warmup Iteration  18: 433147.591 ops/s
# Warmup Iteration  19: 437016.458 ops/s
# Warmup Iteration  20: 429114.341 ops/s
# Warmup Iteration  21: 441737.900 ops/s
# Warmup Iteration  22: 446230.523 ops/s
# Warmup Iteration  23: 421385.978 ops/s
# Warmup Iteration  24: 431766.970 ops/s
# Warmup Iteration  25: 448055.201 ops/s
# Warmup Iteration  26: 422999.792 ops/s
# Warmup Iteration  27: 437408.169 ops/s
# Warmup Iteration  28: 432094.576 ops/s
# Warmup Iteration  29: 445277.064 ops/s
# Warmup Iteration  30: 450005.071 ops/s
Iteration   1: 432378.649 ops/s
Iteration   2: 428082.591 ops/s
Iteration   3: 436994.449 ops/s
Iteration   4: 426099.588 ops/s
Iteration   5: 440510.177 ops/s
Iteration   6: 419270.817 ops/s
Iteration   7: 432057.848 ops/s
Iteration   8: 452029.227 ops/s
Iteration   9: 433167.540 ops/s
Iteration  10: 436222.216 ops/s
Iteration  11: 430326.026 ops/s
Iteration  12: 431413.676 ops/s
Iteration  13: 446613.581 ops/s
Iteration  14: 428846.849 ops/s
Iteration  15: 423347.230 ops/s
Iteration  16: 431555.439 ops/s
Iteration  17: 431091.409 ops/s
Iteration  18: 423185.132 ops/s
Iteration  19: 450128.851 ops/s
Iteration  20: 433551.057 ops/s
Iteration  21: 425409.054 ops/s
Iteration  22: 437465.620 ops/s
Iteration  23: 426842.819 ops/s
Iteration  24: 442548.700 ops/s
Iteration  25: 446014.647 ops/s
Iteration  26: 415603.359 ops/s
Iteration  27: 442961.405 ops/s
Iteration  28: 420435.141 ops/s
Iteration  29: 440329.626 ops/s
Iteration  30: 447971.682 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatTest._Benchmark.benchmark_concatObservableDelayErrorWithError":
  433748.480 ±(99.9%) 6331.563 ops/s [Average]
  (min, avg, max) = (415603.359, 433748.480, 452029.227), stdev = 9476.786
  CI (99.9%): [427416.917, 440080.043] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt       Score      Error  Units
ObservableConcatTest._Benchmark.benchmark_concatObservableDelayErrorWithError  thrpt   30  433748.480 ± 6331.563  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatTest._Benchmark.benchmark_concatObservableDelayErrorBoundary$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatTest._Benchmark.benchmark_concatObservableDelayErrorBoundary

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 40256.080 ops/s
# Warmup Iteration   2: 151202.514 ops/s
# Warmup Iteration   3: 269767.826 ops/s
# Warmup Iteration   4: 434217.357 ops/s
# Warmup Iteration   5: 444698.812 ops/s
# Warmup Iteration   6: 415307.386 ops/s
# Warmup Iteration   7: 451023.874 ops/s
# Warmup Iteration   8: 425617.247 ops/s
# Warmup Iteration   9: 424870.775 ops/s
# Warmup Iteration  10: 429969.794 ops/s
# Warmup Iteration  11: 442006.221 ops/s
# Warmup Iteration  12: 448374.308 ops/s
# Warmup Iteration  13: 436807.521 ops/s
# Warmup Iteration  14: 426619.427 ops/s
# Warmup Iteration  15: 443732.369 ops/s
# Warmup Iteration  16: 427744.618 ops/s
# Warmup Iteration  17: 459807.981 ops/s
# Warmup Iteration  18: 456226.095 ops/s
# Warmup Iteration  19: 481892.663 ops/s
# Warmup Iteration  20: 456391.500 ops/s
# Warmup Iteration  21: 463962.773 ops/s
# Warmup Iteration  22: 466910.308 ops/s
# Warmup Iteration  23: 434354.741 ops/s
# Warmup Iteration  24: 486724.138 ops/s
# Warmup Iteration  25: 469944.796 ops/s
# Warmup Iteration  26: 460444.795 ops/s
# Warmup Iteration  27: 475368.071 ops/s
# Warmup Iteration  28: 479667.756 ops/s
# Warmup Iteration  29: 450251.717 ops/s
# Warmup Iteration  30: 471234.258 ops/s
Iteration   1: 457558.462 ops/s
Iteration   2: 470451.725 ops/s
Iteration   3: 460682.286 ops/s
Iteration   4: 478420.386 ops/s
Iteration   5: 452509.213 ops/s
Iteration   6: 459240.787 ops/s
Iteration   7: 465814.097 ops/s
Iteration   8: 488573.941 ops/s
Iteration   9: 473592.200 ops/s
Iteration  10: 450597.152 ops/s
Iteration  11: 479188.455 ops/s
Iteration  12: 476532.181 ops/s
Iteration  13: 446792.368 ops/s
Iteration  14: 473299.854 ops/s
Iteration  15: 478141.593 ops/s
Iteration  16: 445961.286 ops/s
Iteration  17: 463975.745 ops/s
Iteration  18: 461193.404 ops/s
Iteration  19: 472190.520 ops/s
Iteration  20: 452269.949 ops/s
Iteration  21: 452860.447 ops/s
Iteration  22: 387491.739 ops/s
Iteration  23: 461240.558 ops/s
Iteration  24: 463723.349 ops/s
Iteration  25: 461965.104 ops/s
Iteration  26: 482319.421 ops/s
Iteration  27: 469656.055 ops/s
Iteration  28: 447270.521 ops/s
Iteration  29: 473054.731 ops/s
Iteration  30: 456410.780 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatTest._Benchmark.benchmark_concatObservableDelayErrorBoundary":
  462099.277 ±(99.9%) 12100.009 ops/s [Average]
  (min, avg, max) = (387491.739, 462099.277, 488573.941), stdev = 18110.726
  CI (99.9%): [449999.268, 474199.286] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt       Score       Error  Units
ObservableConcatTest._Benchmark.benchmark_concatObservableDelayErrorBoundary  thrpt   30  462099.277 ± 12100.009  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromTest._Benchmark.benchmark_combineToNull1$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromTest._Benchmark.benchmark_combineToNull1

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 124373.903 ops/s
# Warmup Iteration   2: 394743.888 ops/s
# Warmup Iteration   3: 533244.215 ops/s
# Warmup Iteration   4: 547658.795 ops/s
# Warmup Iteration   5: 582491.071 ops/s
# Warmup Iteration   6: 542068.615 ops/s
# Warmup Iteration   7: 554615.929 ops/s
# Warmup Iteration   8: 573640.665 ops/s
# Warmup Iteration   9: 543303.473 ops/s
# Warmup Iteration  10: 567894.457 ops/s
# Warmup Iteration  11: 510123.418 ops/s
# Warmup Iteration  12: 562352.360 ops/s
# Warmup Iteration  13: 546372.919 ops/s
# Warmup Iteration  14: 555272.352 ops/s
# Warmup Iteration  15: 563166.718 ops/s
# Warmup Iteration  16: 583063.544 ops/s
# Warmup Iteration  17: 583829.347 ops/s
# Warmup Iteration  18: 568782.145 ops/s
# Warmup Iteration  19: 598963.999 ops/s
# Warmup Iteration  20: 612847.873 ops/s
# Warmup Iteration  21: 567057.038 ops/s
# Warmup Iteration  22: 594686.182 ops/s
# Warmup Iteration  23: 584488.622 ops/s
# Warmup Iteration  24: 576420.758 ops/s
# Warmup Iteration  25: 590280.939 ops/s
# Warmup Iteration  26: 600556.631 ops/s
# Warmup Iteration  27: 562758.953 ops/s
# Warmup Iteration  28: 584363.874 ops/s
# Warmup Iteration  29: 605144.060 ops/s
# Warmup Iteration  30: 569589.641 ops/s
Iteration   1: 606630.840 ops/s
Iteration   2: 605455.610 ops/s
Iteration   3: 611290.771 ops/s
Iteration   4: 578155.750 ops/s
Iteration   5: 568667.018 ops/s
Iteration   6: 588502.660 ops/s
Iteration   7: 602234.319 ops/s
Iteration   8: 575527.308 ops/s
Iteration   9: 598350.903 ops/s
Iteration  10: 573906.115 ops/s
Iteration  11: 601983.232 ops/s
Iteration  12: 608432.680 ops/s
Iteration  13: 562676.789 ops/s
Iteration  14: 601577.189 ops/s
Iteration  15: 595671.145 ops/s
Iteration  16: 558811.880 ops/s
Iteration  17: 602750.518 ops/s
Iteration  18: 581757.436 ops/s
Iteration  19: 594739.487 ops/s
Iteration  20: 569894.665 ops/s
Iteration  21: 579553.997 ops/s
Iteration  22: 583483.208 ops/s
Iteration  23: 597123.697 ops/s
Iteration  24: 603381.132 ops/s
Iteration  25: 566398.811 ops/s
Iteration  26: 601087.108 ops/s
Iteration  27: 592580.227 ops/s
Iteration  28: 573085.907 ops/s
Iteration  29: 585321.284 ops/s
Iteration  30: 579202.452 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromTest._Benchmark.benchmark_combineToNull1":
  588274.471 ±(99.9%) 10142.691 ops/s [Average]
  (min, avg, max) = (558811.880, 588274.471, 611290.771), stdev = 15181.104
  CI (99.9%): [578131.780, 598417.163] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score       Error  Units
ObservableWithLatestFromTest._Benchmark.benchmark_combineToNull1  thrpt   30  588274.471 ± 10142.691  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctTest._Benchmark.benchmark_fusedSync$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctTest._Benchmark.benchmark_fusedSync

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.695 ops/s
# Warmup Iteration   2: 39550.478 ops/s
# Warmup Iteration   3: 177630.152 ops/s
# Warmup Iteration   4: 232157.638 ops/s
# Warmup Iteration   5: 300179.152 ops/s
# Warmup Iteration   6: 252595.955 ops/s
# Warmup Iteration   7: 344365.736 ops/s
# Warmup Iteration   8: 672622.180 ops/s
# Warmup Iteration   9: 768470.536 ops/s
# Warmup Iteration  10: 731859.470 ops/s
# Warmup Iteration  11: 707713.586 ops/s
# Warmup Iteration  12: 769512.912 ops/s
# Warmup Iteration  13: 832567.890 ops/s
# Warmup Iteration  14: 779893.214 ops/s
# Warmup Iteration  15: 818065.052 ops/s
# Warmup Iteration  16: 771576.526 ops/s
# Warmup Iteration  17: 788018.764 ops/s
# Warmup Iteration  18: 796640.394 ops/s
# Warmup Iteration  19: 780829.832 ops/s
# Warmup Iteration  20: 801743.738 ops/s
# Warmup Iteration  21: 819584.960 ops/s
# Warmup Iteration  22: 782238.228 ops/s
# Warmup Iteration  23: 793386.971 ops/s
# Warmup Iteration  24: 793287.263 ops/s
# Warmup Iteration  25: 777039.838 ops/s
# Warmup Iteration  26: 769989.429 ops/s
# Warmup Iteration  27: 807955.107 ops/s
# Warmup Iteration  28: 779373.787 ops/s
# Warmup Iteration  29: 830131.163 ops/s
# Warmup Iteration  30: 770518.555 ops/s
Iteration   1: 816145.375 ops/s
Iteration   2: 796398.210 ops/s
Iteration   3: 773389.762 ops/s
Iteration   4: 812519.479 ops/s
Iteration   5: 810956.449 ops/s
Iteration   6: 769600.984 ops/s
Iteration   7: 806179.986 ops/s
Iteration   8: 796249.033 ops/s
Iteration   9: 753098.212 ops/s
Iteration  10: 798608.040 ops/s
Iteration  11: 773471.751 ops/s
Iteration  12: 822615.956 ops/s
Iteration  13: 783580.006 ops/s
Iteration  14: 767798.207 ops/s
Iteration  15: 802269.188 ops/s
Iteration  16: 654073.314 ops/s
Iteration  17: 784881.763 ops/s
Iteration  18: 783555.848 ops/s
Iteration  19: 802559.576 ops/s
Iteration  20: 823088.768 ops/s
Iteration  21: 790490.495 ops/s
Iteration  22: 766573.940 ops/s
Iteration  23: 790601.960 ops/s
Iteration  24: 815655.651 ops/s
Iteration  25: 772053.387 ops/s
Iteration  26: 803444.961 ops/s
Iteration  27: 770556.109 ops/s
Iteration  28: 808729.651 ops/s
Iteration  29: 777888.644 ops/s
Iteration  30: 770808.268 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctTest._Benchmark.benchmark_fusedSync":
  786594.766 ±(99.9%) 20953.481 ops/s [Average]
  (min, avg, max) = (654073.314, 786594.766, 823088.768), stdev = 31362.187
  CI (99.9%): [765641.284, 807548.247] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score       Error  Units
ObservableDistinctTest._Benchmark.benchmark_fusedSync  thrpt   30  786594.766 ± 20953.481  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 340385.127 ops/s
# Warmup Iteration   2: 1715507.203 ops/s
# Warmup Iteration   3: 2377214.357 ops/s
# Warmup Iteration   4: 2774617.664 ops/s
# Warmup Iteration   5: 2845273.200 ops/s
# Warmup Iteration   6: 2833539.084 ops/s
# Warmup Iteration   7: 2807074.087 ops/s
# Warmup Iteration   8: 2875625.172 ops/s
# Warmup Iteration   9: 2661777.711 ops/s
# Warmup Iteration  10: 2954469.101 ops/s
# Warmup Iteration  11: 2919877.400 ops/s
# Warmup Iteration  12: 2843369.289 ops/s
# Warmup Iteration  13: 2827533.831 ops/s
# Warmup Iteration  14: 2691546.870 ops/s
# Warmup Iteration  15: 2953602.085 ops/s
# Warmup Iteration  16: 2790256.444 ops/s
# Warmup Iteration  17: 2772342.274 ops/s
# Warmup Iteration  18: 2867829.504 ops/s
# Warmup Iteration  19: 2796306.794 ops/s
# Warmup Iteration  20: 2900032.195 ops/s
# Warmup Iteration  21: 2889760.168 ops/s
# Warmup Iteration  22: 2599323.825 ops/s
# Warmup Iteration  23: 2877350.068 ops/s
# Warmup Iteration  24: 2739517.537 ops/s
# Warmup Iteration  25: 2833539.351 ops/s
# Warmup Iteration  26: 2961602.438 ops/s
# Warmup Iteration  27: 2753376.836 ops/s
# Warmup Iteration  28: 2960061.716 ops/s
# Warmup Iteration  29: 2912178.585 ops/s
# Warmup Iteration  30: 2802569.175 ops/s
Iteration   1: 2898671.482 ops/s
Iteration   2: 2807213.618 ops/s
Iteration   3: 2883128.936 ops/s
Iteration   4: 2873477.084 ops/s
Iteration   5: 2754374.284 ops/s
Iteration   6: 3042034.398 ops/s
Iteration   7: 2872459.089 ops/s
Iteration   8: 2788702.278 ops/s
Iteration   9: 2864531.240 ops/s
Iteration  10: 2821724.735 ops/s
Iteration  11: 2834394.492 ops/s
Iteration  12: 2877912.573 ops/s
Iteration  13: 2692996.844 ops/s
Iteration  14: 2923539.504 ops/s
Iteration  15: 2884275.502 ops/s
Iteration  16: 2733936.311 ops/s
Iteration  17: 2884443.109 ops/s
Iteration  18: 2840146.382 ops/s
Iteration  19: 2951781.401 ops/s
Iteration  20: 2761651.461 ops/s
Iteration  21: 2780595.563 ops/s
Iteration  22: 2948642.322 ops/s
Iteration  23: 2730976.955 ops/s
Iteration  24: 2899406.698 ops/s
Iteration  25: 2773169.484 ops/s
Iteration  26: 2868050.507 ops/s
Iteration  27: 2864525.160 ops/s
Iteration  28: 2836162.971 ops/s
Iteration  29: 2909534.397 ops/s
Iteration  30: 2807538.523 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromTest._Benchmark.benchmark_dispose":
  2846999.910 ±(99.9%) 50423.128 ops/s [Average]
  (min, avg, max) = (2692996.844, 2846999.910, 3042034.398), stdev = 75470.971
  CI (99.9%): [2796576.782, 2897423.039] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
ObservableWithLatestFromTest._Benchmark.benchmark_dispose  thrpt   30  2846999.910 ± 50423.128  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_concatMapEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_concatMapEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 634338.434 ops/s
# Warmup Iteration   2: 2283591.401 ops/s
# Warmup Iteration   3: 2899063.914 ops/s
# Warmup Iteration   4: 2843236.308 ops/s
# Warmup Iteration   5: 3055775.450 ops/s
# Warmup Iteration   6: 2875915.263 ops/s
# Warmup Iteration   7: 2875261.290 ops/s
# Warmup Iteration   8: 2981344.873 ops/s
# Warmup Iteration   9: 2929145.326 ops/s
# Warmup Iteration  10: 2508328.952 ops/s
# Warmup Iteration  11: 2870068.010 ops/s
# Warmup Iteration  12: 2930001.942 ops/s
# Warmup Iteration  13: 3005069.883 ops/s
# Warmup Iteration  14: 2951488.409 ops/s
# Warmup Iteration  15: 3066699.814 ops/s
# Warmup Iteration  16: 3028352.148 ops/s
# Warmup Iteration  17: 2849803.041 ops/s
# Warmup Iteration  18: 2804033.632 ops/s
# Warmup Iteration  19: 2938340.244 ops/s
# Warmup Iteration  20: 3026505.985 ops/s
# Warmup Iteration  21: 2745867.481 ops/s
# Warmup Iteration  22: 2997758.826 ops/s
# Warmup Iteration  23: 2928444.421 ops/s
# Warmup Iteration  24: 2974647.159 ops/s
# Warmup Iteration  25: 2937289.061 ops/s
# Warmup Iteration  26: 2967500.587 ops/s
# Warmup Iteration  27: 2978697.517 ops/s
# Warmup Iteration  28: 2982803.461 ops/s
# Warmup Iteration  29: 2986097.657 ops/s
# Warmup Iteration  30: 2928984.418 ops/s
Iteration   1: 2896672.455 ops/s
Iteration   2: 3057077.276 ops/s
Iteration   3: 2900833.764 ops/s
Iteration   4: 2989266.958 ops/s
Iteration   5: 2852190.053 ops/s
Iteration   6: 3025222.441 ops/s
Iteration   7: 3003348.226 ops/s
Iteration   8: 3079949.155 ops/s
Iteration   9: 3036896.429 ops/s
Iteration  10: 2644905.158 ops/s
Iteration  11: 2834979.492 ops/s
Iteration  12: 3042293.064 ops/s
Iteration  13: 2866801.588 ops/s
Iteration  14: 2913358.501 ops/s
Iteration  15: 2937142.420 ops/s
Iteration  16: 3019299.165 ops/s
Iteration  17: 2930902.977 ops/s
Iteration  18: 2958225.311 ops/s
Iteration  19: 2870698.028 ops/s
Iteration  20: 2979410.594 ops/s
Iteration  21: 3051921.851 ops/s
Iteration  22: 2888924.840 ops/s
Iteration  23: 2941879.606 ops/s
Iteration  24: 2983891.358 ops/s
Iteration  25: 2908748.075 ops/s
Iteration  26: 2974327.437 ops/s
Iteration  27: 2859951.023 ops/s
Iteration  28: 2923846.991 ops/s
Iteration  29: 2999766.224 ops/s
Iteration  30: 2912945.738 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_concatMapEmpty":
  2942855.873 ±(99.9%) 58870.889 ops/s [Average]
  (min, avg, max) = (2644905.158, 2942855.873, 3079949.155), stdev = 88115.181
  CI (99.9%): [2883984.985, 3001726.762] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
ObservableConcatMapSchedulerTest._Benchmark.benchmark_concatMapEmpty  thrpt   30  2942855.873 ± 58870.889  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_ObservableCapacityHint$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_ObservableCapacityHint

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 214629.217 ops/s
# Warmup Iteration   2: 984886.182 ops/s
# Warmup Iteration   3: 1745455.333 ops/s
# Warmup Iteration   4: 2157076.302 ops/s
# Warmup Iteration   5: 2036804.630 ops/s
# Warmup Iteration   6: 2128844.500 ops/s
# Warmup Iteration   7: 2166522.911 ops/s
# Warmup Iteration   8: 2054777.193 ops/s
# Warmup Iteration   9: 1985362.830 ops/s
# Warmup Iteration  10: 2108677.781 ops/s
# Warmup Iteration  11: 2050000.242 ops/s
# Warmup Iteration  12: 2005864.339 ops/s
# Warmup Iteration  13: 2145495.672 ops/s
# Warmup Iteration  14: 2020934.424 ops/s
# Warmup Iteration  15: 2121696.521 ops/s
# Warmup Iteration  16: 2139888.796 ops/s
# Warmup Iteration  17: 2014097.342 ops/s
# Warmup Iteration  18: 2133171.215 ops/s
# Warmup Iteration  19: 2050857.204 ops/s
# Warmup Iteration  20: 2035786.324 ops/s
# Warmup Iteration  21: 2124330.381 ops/s
# Warmup Iteration  22: 2034012.351 ops/s
# Warmup Iteration  23: 2148278.232 ops/s
# Warmup Iteration  24: 2041402.440 ops/s
# Warmup Iteration  25: 2036114.891 ops/s
# Warmup Iteration  26: 2056781.582 ops/s
# Warmup Iteration  27: 2133698.310 ops/s
# Warmup Iteration  28: 2105545.586 ops/s
# Warmup Iteration  29: 2019746.947 ops/s
# Warmup Iteration  30: 2087255.160 ops/s
Iteration   1: 1992003.412 ops/s
Iteration   2: 2081369.834 ops/s
Iteration   3: 2166695.791 ops/s
Iteration   4: 1977195.586 ops/s
Iteration   5: 2093866.218 ops/s
Iteration   6: 2163706.008 ops/s
Iteration   7: 2060698.653 ops/s
Iteration   8: 2021625.294 ops/s
Iteration   9: 2104860.871 ops/s
Iteration  10: 2173398.169 ops/s
Iteration  11: 2050405.161 ops/s
Iteration  12: 2040114.811 ops/s
Iteration  13: 2173280.520 ops/s
Iteration  14: 2057069.746 ops/s
Iteration  15: 2107990.533 ops/s
Iteration  16: 2031905.936 ops/s
Iteration  17: 2129603.717 ops/s
Iteration  18: 2047879.385 ops/s
Iteration  19: 2115353.199 ops/s
Iteration  20: 2035580.223 ops/s
Iteration  21: 2158724.154 ops/s
Iteration  22: 2122880.236 ops/s
Iteration  23: 2022512.319 ops/s
Iteration  24: 2114927.477 ops/s
Iteration  25: 2128500.980 ops/s
Iteration  26: 2020836.249 ops/s
Iteration  27: 2101140.917 ops/s
Iteration  28: 2039183.042 ops/s
Iteration  29: 2068659.144 ops/s
Iteration  30: 2067149.507 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_ObservableCapacityHint":
  2082303.903 ±(99.9%) 36870.028 ops/s [Average]
  (min, avg, max) = (1977195.586, 2082303.903, 2173398.169), stdev = 55185.327
  CI (99.9%): [2045433.875, 2119173.932] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score       Error  Units
ObservableConcatMapEagerTest._Benchmark.benchmark_ObservableCapacityHint  thrpt   30  2082303.903 ± 36870.028  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOnTest._Benchmark.benchmark_workerNotDisposedPrematurelyNormalInNormalOut$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOnTest._Benchmark.benchmark_workerNotDisposedPrematurelyNormalInNormalOut

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 60893.951 ops/s
# Warmup Iteration   2: 403212.064 ops/s
# Warmup Iteration   3: 1237479.829 ops/s
# Warmup Iteration   4: 1248142.783 ops/s
# Warmup Iteration   5: 1475100.900 ops/s
# Warmup Iteration   6: 1407507.488 ops/s
# Warmup Iteration   7: 1391191.528 ops/s
# Warmup Iteration   8: 1425096.365 ops/s
# Warmup Iteration   9: 1370633.588 ops/s
# Warmup Iteration  10: 1428023.953 ops/s
# Warmup Iteration  11: 1384547.200 ops/s
# Warmup Iteration  12: 1374756.489 ops/s
# Warmup Iteration  13: 1423991.924 ops/s
# Warmup Iteration  14: 1374855.552 ops/s
# Warmup Iteration  15: 1427926.681 ops/s
# Warmup Iteration  16: 1375030.540 ops/s
# Warmup Iteration  17: 1453634.407 ops/s
# Warmup Iteration  18: 1402152.088 ops/s
# Warmup Iteration  19: 1376483.956 ops/s
# Warmup Iteration  20: 1423202.627 ops/s
# Warmup Iteration  21: 1408352.799 ops/s
# Warmup Iteration  22: 1449573.218 ops/s
# Warmup Iteration  23: 1403731.214 ops/s
# Warmup Iteration  24: 1364308.163 ops/s
# Warmup Iteration  25: 1415635.990 ops/s
# Warmup Iteration  26: 1405085.363 ops/s
# Warmup Iteration  27: 1422481.424 ops/s
# Warmup Iteration  28: 1454986.808 ops/s
# Warmup Iteration  29: 1361391.854 ops/s
# Warmup Iteration  30: 1403901.888 ops/s
Iteration   1: 1459473.546 ops/s
Iteration   2: 1362602.098 ops/s
Iteration   3: 1452325.563 ops/s
Iteration   4: 1400271.752 ops/s
Iteration   5: 1126350.039 ops/s
Iteration   6: 1449334.357 ops/s
Iteration   7: 1342624.372 ops/s
Iteration   8: 1437415.333 ops/s
Iteration   9: 1368531.374 ops/s
Iteration  10: 1413185.084 ops/s
Iteration  11: 1469581.542 ops/s
Iteration  12: 1411052.254 ops/s
Iteration  13: 1380497.746 ops/s
Iteration  14: 1358780.655 ops/s
Iteration  15: 1486461.904 ops/s
Iteration  16: 1443432.909 ops/s
Iteration  17: 1391411.878 ops/s
Iteration  18: 1435976.330 ops/s
Iteration  19: 1463586.925 ops/s
Iteration  20: 1363537.531 ops/s
Iteration  21: 1451241.639 ops/s
Iteration  22: 1383862.119 ops/s
Iteration  23: 1426115.405 ops/s
Iteration  24: 1409655.616 ops/s
Iteration  25: 1434558.740 ops/s
Iteration  26: 1441059.755 ops/s
Iteration  27: 1386127.606 ops/s
Iteration  28: 1411705.467 ops/s
Iteration  29: 1474825.200 ops/s
Iteration  30: 1372744.102 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOnTest._Benchmark.benchmark_workerNotDisposedPrematurelyNormalInNormalOut":
  1406944.295 ±(99.9%) 43996.908 ops/s [Average]
  (min, avg, max) = (1126350.039, 1406944.295, 1486461.904), stdev = 65852.505
  CI (99.9%): [1362947.387, 1450941.202] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                    Mode  Cnt        Score       Error  Units
ObservableObserveOnTest._Benchmark.benchmark_workerNotDisposedPrematurelyNormalInNormalOut  thrpt   30  1406944.295 ± 43996.908  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableCombineLatestTest._Benchmark.benchmark_combineLatestDelayErrorArrayOfSourcesWithError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableCombineLatestTest._Benchmark.benchmark_combineLatestDelayErrorArrayOfSourcesWithError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 21674.363 ops/s
# Warmup Iteration   2: 92675.081 ops/s
# Warmup Iteration   3: 148903.105 ops/s
# Warmup Iteration   4: 344332.920 ops/s
# Warmup Iteration   5: 347666.650 ops/s
# Warmup Iteration   6: 405358.536 ops/s
# Warmup Iteration   7: 386784.726 ops/s
# Warmup Iteration   8: 408137.186 ops/s
# Warmup Iteration   9: 382504.333 ops/s
# Warmup Iteration  10: 384469.505 ops/s
# Warmup Iteration  11: 403291.609 ops/s
# Warmup Iteration  12: 386944.448 ops/s
# Warmup Iteration  13: 402877.884 ops/s
# Warmup Iteration  14: 384611.382 ops/s
# Warmup Iteration  15: 402081.176 ops/s
# Warmup Iteration  16: 387215.938 ops/s
# Warmup Iteration  17: 409130.816 ops/s
# Warmup Iteration  18: 423419.867 ops/s
# Warmup Iteration  19: 397872.492 ops/s
# Warmup Iteration  20: 415079.522 ops/s
# Warmup Iteration  21: 393758.823 ops/s
# Warmup Iteration  22: 408126.300 ops/s
# Warmup Iteration  23: 408970.842 ops/s
# Warmup Iteration  24: 392044.960 ops/s
# Warmup Iteration  25: 406208.779 ops/s
# Warmup Iteration  26: 393644.068 ops/s
# Warmup Iteration  27: 420629.828 ops/s
# Warmup Iteration  28: 394042.924 ops/s
# Warmup Iteration  29: 396252.727 ops/s
# Warmup Iteration  30: 406588.661 ops/s
Iteration   1: 395011.901 ops/s
Iteration   2: 399138.066 ops/s
Iteration   3: 413703.292 ops/s
Iteration   4: 392425.294 ops/s
Iteration   5: 392711.377 ops/s
Iteration   6: 383449.646 ops/s
Iteration   7: 410075.912 ops/s
Iteration   8: 401230.167 ops/s
Iteration   9: 416566.698 ops/s
Iteration  10: 401866.005 ops/s
Iteration  11: 409092.910 ops/s
Iteration  12: 404008.712 ops/s
Iteration  13: 400868.166 ops/s
Iteration  14: 406353.759 ops/s
Iteration  15: 416927.907 ops/s
Iteration  16: 392132.392 ops/s
Iteration  17: 404245.812 ops/s
Iteration  18: 401586.460 ops/s
Iteration  19: 417180.083 ops/s
Iteration  20: 383240.630 ops/s
Iteration  21: 394861.713 ops/s
Iteration  22: 414181.947 ops/s
Iteration  23: 387376.944 ops/s
Iteration  24: 410944.453 ops/s
Iteration  25: 406502.938 ops/s
Iteration  26: 413322.406 ops/s
Iteration  27: 404073.286 ops/s
Iteration  28: 403020.122 ops/s
Iteration  29: 415719.101 ops/s
Iteration  30: 399125.512 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableCombineLatestTest._Benchmark.benchmark_combineLatestDelayErrorArrayOfSourcesWithError":
  403031.454 ±(99.9%) 6550.844 ops/s [Average]
  (min, avg, max) = (383240.630, 403031.454, 417180.083), stdev = 9804.996
  CI (99.9%): [396480.610, 409582.298] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                         Mode  Cnt       Score      Error  Units
ObservableCombineLatestTest._Benchmark.benchmark_combineLatestDelayErrorArrayOfSourcesWithError  thrpt   30  403031.454 ± 6550.844  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_bufferBoundarySupplierReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_bufferBoundarySupplierReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 184498.651 ops/s
# Warmup Iteration   2: 492484.516 ops/s
# Warmup Iteration   3: 511635.166 ops/s
# Warmup Iteration   4: 593926.513 ops/s
# Warmup Iteration   5: 475858.853 ops/s
# Warmup Iteration   6: 586318.925 ops/s
# Warmup Iteration   7: 568268.489 ops/s
# Warmup Iteration   8: 596535.748 ops/s
# Warmup Iteration   9: 585874.117 ops/s
# Warmup Iteration  10: 562238.162 ops/s
# Warmup Iteration  11: 592548.153 ops/s
# Warmup Iteration  12: 604499.502 ops/s
# Warmup Iteration  13: 566676.018 ops/s
# Warmup Iteration  14: 591323.211 ops/s
# Warmup Iteration  15: 579625.573 ops/s
# Warmup Iteration  16: 579375.424 ops/s
# Warmup Iteration  17: 616761.420 ops/s
# Warmup Iteration  18: 577913.366 ops/s
# Warmup Iteration  19: 635674.735 ops/s
# Warmup Iteration  20: 592349.794 ops/s
# Warmup Iteration  21: 623950.129 ops/s
# Warmup Iteration  22: 625636.541 ops/s
# Warmup Iteration  23: 591902.426 ops/s
# Warmup Iteration  24: 613171.571 ops/s
# Warmup Iteration  25: 611684.054 ops/s
# Warmup Iteration  26: 623605.103 ops/s
# Warmup Iteration  27: 625153.992 ops/s
# Warmup Iteration  28: 592574.322 ops/s
# Warmup Iteration  29: 617408.189 ops/s
# Warmup Iteration  30: 524948.202 ops/s
Iteration   1: 588218.590 ops/s
Iteration   2: 625318.802 ops/s
Iteration   3: 592918.189 ops/s
Iteration   4: 613289.939 ops/s
Iteration   5: 637409.593 ops/s
Iteration   6: 604119.340 ops/s
Iteration   7: 616650.510 ops/s
Iteration   8: 624830.380 ops/s
Iteration   9: 636723.776 ops/s
Iteration  10: 597725.893 ops/s
Iteration  11: 607568.667 ops/s
Iteration  12: 617423.995 ops/s
Iteration  13: 605636.287 ops/s
Iteration  14: 619741.698 ops/s
Iteration  15: 623212.992 ops/s
Iteration  16: 607223.841 ops/s
Iteration  17: 619255.349 ops/s
Iteration  18: 621997.065 ops/s
Iteration  19: 608262.995 ops/s
Iteration  20: 628090.086 ops/s
Iteration  21: 587566.519 ops/s
Iteration  22: 634433.030 ops/s
Iteration  23: 625651.435 ops/s
Iteration  24: 595298.561 ops/s
Iteration  25: 625792.653 ops/s
Iteration  26: 609594.661 ops/s
Iteration  27: 623754.583 ops/s
Iteration  28: 622316.661 ops/s
Iteration  29: 599570.712 ops/s
Iteration  30: 632729.922 ops/s


Result "io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_bufferBoundarySupplierReturnsNull":
  615077.558 ±(99.9%) 9487.109 ops/s [Average]
  (min, avg, max) = (587566.519, 615077.558, 637409.593), stdev = 14199.860
  CI (99.9%): [605590.448, 624564.667] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score      Error  Units
ObservableNullTests._Benchmark.benchmark_bufferBoundarySupplierReturnsNull  thrpt   30  615077.558 ± 9487.109  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableCombineLatestTest._Benchmark.benchmark_combineLatestDelayErrorIterableOfSourcesWithError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableCombineLatestTest._Benchmark.benchmark_combineLatestDelayErrorIterableOfSourcesWithError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 23523.619 ops/s
# Warmup Iteration   2: 94046.878 ops/s
# Warmup Iteration   3: 105795.959 ops/s
# Warmup Iteration   4: 353225.292 ops/s
# Warmup Iteration   5: 346607.792 ops/s
# Warmup Iteration   6: 334267.957 ops/s
# Warmup Iteration   7: 393937.816 ops/s
# Warmup Iteration   8: 375260.683 ops/s
# Warmup Iteration   9: 374741.249 ops/s
# Warmup Iteration  10: 390877.017 ops/s
# Warmup Iteration  11: 368932.795 ops/s
# Warmup Iteration  12: 391508.610 ops/s
# Warmup Iteration  13: 370367.129 ops/s
# Warmup Iteration  14: 376032.930 ops/s
# Warmup Iteration  15: 393424.567 ops/s
# Warmup Iteration  16: 357249.940 ops/s
# Warmup Iteration  17: 388685.315 ops/s
# Warmup Iteration  18: 393001.940 ops/s
# Warmup Iteration  19: 408609.204 ops/s
# Warmup Iteration  20: 404355.933 ops/s
# Warmup Iteration  21: 391992.373 ops/s
# Warmup Iteration  22: 398133.786 ops/s
# Warmup Iteration  23: 404036.649 ops/s
# Warmup Iteration  24: 389019.752 ops/s
# Warmup Iteration  25: 399281.396 ops/s
# Warmup Iteration  26: 399529.429 ops/s
# Warmup Iteration  27: 382889.541 ops/s
# Warmup Iteration  28: 384611.301 ops/s
# Warmup Iteration  29: 411512.870 ops/s
# Warmup Iteration  30: 400408.334 ops/s
Iteration   1: 381402.944 ops/s
Iteration   2: 402423.852 ops/s
Iteration   3: 403159.854 ops/s
Iteration   4: 390915.223 ops/s
Iteration   5: 397045.683 ops/s
Iteration   6: 409606.874 ops/s
Iteration   7: 386654.319 ops/s
Iteration   8: 409066.885 ops/s
Iteration   9: 394295.807 ops/s
Iteration  10: 402545.432 ops/s
Iteration  11: 379189.277 ops/s
Iteration  12: 391379.625 ops/s
Iteration  13: 405128.443 ops/s
Iteration  14: 390747.994 ops/s
Iteration  15: 392181.181 ops/s
Iteration  16: 398485.814 ops/s
Iteration  17: 413751.744 ops/s
Iteration  18: 387711.969 ops/s
Iteration  19: 408583.189 ops/s
Iteration  20: 392555.350 ops/s
Iteration  21: 383746.175 ops/s
Iteration  22: 409031.464 ops/s
Iteration  23: 385104.172 ops/s
Iteration  24: 400015.544 ops/s
Iteration  25: 381970.656 ops/s
Iteration  26: 387793.988 ops/s
Iteration  27: 406526.370 ops/s
Iteration  28: 383580.610 ops/s
Iteration  29: 403798.174 ops/s
Iteration  30: 386228.937 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableCombineLatestTest._Benchmark.benchmark_combineLatestDelayErrorIterableOfSourcesWithError":
  395487.585 ±(99.9%) 6731.172 ops/s [Average]
  (min, avg, max) = (379189.277, 395487.585, 413751.744), stdev = 10074.902
  CI (99.9%): [388756.413, 402218.757] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                            Mode  Cnt       Score      Error  Units
ObservableCombineLatestTest._Benchmark.benchmark_combineLatestDelayErrorIterableOfSourcesWithError  thrpt   30  395487.585 ± 6731.172  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_immediateInnerNextOuterError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_immediateInnerNextOuterError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 75232.804 ops/s
# Warmup Iteration   2: 356722.070 ops/s
# Warmup Iteration   3: 412822.092 ops/s
# Warmup Iteration   4: 425075.894 ops/s
# Warmup Iteration   5: 477503.274 ops/s
# Warmup Iteration   6: 462067.302 ops/s
# Warmup Iteration   7: 468876.208 ops/s
# Warmup Iteration   8: 460801.825 ops/s
# Warmup Iteration   9: 483522.710 ops/s
# Warmup Iteration  10: 464151.443 ops/s
# Warmup Iteration  11: 463420.359 ops/s
# Warmup Iteration  12: 482489.991 ops/s
# Warmup Iteration  13: 473253.735 ops/s
# Warmup Iteration  14: 465843.197 ops/s
# Warmup Iteration  15: 486718.354 ops/s
# Warmup Iteration  16: 465018.470 ops/s
# Warmup Iteration  17: 498712.138 ops/s
# Warmup Iteration  18: 486706.451 ops/s
# Warmup Iteration  19: 482455.752 ops/s
# Warmup Iteration  20: 498548.987 ops/s
# Warmup Iteration  21: 486976.592 ops/s
# Warmup Iteration  22: 489968.877 ops/s
# Warmup Iteration  23: 473985.584 ops/s
# Warmup Iteration  24: 403468.070 ops/s
# Warmup Iteration  25: 495266.964 ops/s
# Warmup Iteration  26: 480891.751 ops/s
# Warmup Iteration  27: 487060.838 ops/s
# Warmup Iteration  28: 496144.315 ops/s
# Warmup Iteration  29: 479016.684 ops/s
# Warmup Iteration  30: 505598.797 ops/s
Iteration   1: 474845.136 ops/s
Iteration   2: 496123.830 ops/s
Iteration   3: 465614.241 ops/s
Iteration   4: 492594.109 ops/s
Iteration   5: 506238.291 ops/s
Iteration   6: 475522.254 ops/s
Iteration   7: 501140.886 ops/s
Iteration   8: 479393.709 ops/s
Iteration   9: 501952.754 ops/s
Iteration  10: 480825.674 ops/s
Iteration  11: 490839.379 ops/s
Iteration  12: 484649.049 ops/s
Iteration  13: 475595.605 ops/s
Iteration  14: 478237.167 ops/s
Iteration  15: 479027.020 ops/s
Iteration  16: 502413.186 ops/s
Iteration  17: 462711.255 ops/s
Iteration  18: 473236.186 ops/s
Iteration  19: 467511.197 ops/s
Iteration  20: 452486.162 ops/s
Iteration  21: 508530.843 ops/s
Iteration  22: 488913.406 ops/s
Iteration  23: 486596.280 ops/s
Iteration  24: 494714.630 ops/s
Iteration  25: 491452.571 ops/s
Iteration  26: 509181.078 ops/s
Iteration  27: 487026.110 ops/s
Iteration  28: 478136.365 ops/s
Iteration  29: 501257.272 ops/s
Iteration  30: 476454.013 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_immediateInnerNextOuterError":
  485440.655 ±(99.9%) 9592.843 ops/s [Average]
  (min, avg, max) = (452486.162, 485440.655, 509181.078), stdev = 14358.117
  CI (99.9%): [475847.812, 495033.498] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            Mode  Cnt       Score      Error  Units
ObservableConcatMapSchedulerTest._Benchmark.benchmark_immediateInnerNextOuterError  thrpt   30  485440.655 ± 9592.843  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_pollThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_pollThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 91496.987 ops/s
# Warmup Iteration   2: 324784.863 ops/s
# Warmup Iteration   3: 390798.102 ops/s
# Warmup Iteration   4: 381649.693 ops/s
# Warmup Iteration   5: 398433.753 ops/s
# Warmup Iteration   6: 386466.736 ops/s
# Warmup Iteration   7: 398415.862 ops/s
# Warmup Iteration   8: 376392.704 ops/s
# Warmup Iteration   9: 370517.573 ops/s
# Warmup Iteration  10: 384645.514 ops/s
# Warmup Iteration  11: 408943.991 ops/s
# Warmup Iteration  12: 384047.254 ops/s
# Warmup Iteration  13: 400511.046 ops/s
# Warmup Iteration  14: 392573.194 ops/s
# Warmup Iteration  15: 399577.091 ops/s
# Warmup Iteration  16: 408387.822 ops/s
# Warmup Iteration  17: 394507.625 ops/s
# Warmup Iteration  18: 421999.942 ops/s
# Warmup Iteration  19: 401395.588 ops/s
# Warmup Iteration  20: 416113.895 ops/s
# Warmup Iteration  21: 405719.410 ops/s
# Warmup Iteration  22: 406170.628 ops/s
# Warmup Iteration  23: 415570.525 ops/s
# Warmup Iteration  24: 402567.870 ops/s
# Warmup Iteration  25: 392188.851 ops/s
# Warmup Iteration  26: 413521.977 ops/s
# Warmup Iteration  27: 413163.113 ops/s
# Warmup Iteration  28: 409977.234 ops/s
# Warmup Iteration  29: 412491.212 ops/s
# Warmup Iteration  30: 410219.008 ops/s
Iteration   1: 418870.912 ops/s
Iteration   2: 398366.205 ops/s
Iteration   3: 411000.248 ops/s
Iteration   4: 408946.195 ops/s
Iteration   5: 410501.020 ops/s
Iteration   6: 413167.009 ops/s
Iteration   7: 410472.973 ops/s
Iteration   8: 408400.349 ops/s
Iteration   9: 418296.192 ops/s
Iteration  10: 402471.422 ops/s
Iteration  11: 422837.495 ops/s
Iteration  12: 406081.783 ops/s
Iteration  13: 416697.688 ops/s
Iteration  14: 417307.220 ops/s
Iteration  15: 408495.654 ops/s
Iteration  16: 396167.572 ops/s
Iteration  17: 408141.260 ops/s
Iteration  18: 423521.203 ops/s
Iteration  19: 410325.811 ops/s
Iteration  20: 417696.812 ops/s
Iteration  21: 406594.705 ops/s
Iteration  22: 420216.484 ops/s
Iteration  23: 400888.793 ops/s
Iteration  24: 424163.213 ops/s
Iteration  25: 407869.141 ops/s
Iteration  26: 403572.452 ops/s
Iteration  27: 419101.245 ops/s
Iteration  28: 411381.585 ops/s
Iteration  29: 399200.787 ops/s
Iteration  30: 418839.229 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_pollThrows":
  411319.755 ±(99.9%) 5182.658 ops/s [Average]
  (min, avg, max) = (396167.572, 411319.755, 424163.213), stdev = 7757.160
  CI (99.9%): [406137.097, 416502.414] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
ObservableConcatMapSchedulerTest._Benchmark.benchmark_pollThrows  thrpt   30  411319.755 ± 5182.658  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromTest._Benchmark.benchmark_sourceThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromTest._Benchmark.benchmark_sourceThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 95183.022 ops/s
# Warmup Iteration   2: 320624.450 ops/s
# Warmup Iteration   3: 536785.704 ops/s
# Warmup Iteration   4: 505836.960 ops/s
# Warmup Iteration   5: 498115.582 ops/s
# Warmup Iteration   6: 567268.622 ops/s
# Warmup Iteration   7: 584777.696 ops/s
# Warmup Iteration   8: 601351.522 ops/s
# Warmup Iteration   9: 576520.318 ops/s
# Warmup Iteration  10: 579289.774 ops/s
# Warmup Iteration  11: 597833.460 ops/s
# Warmup Iteration  12: 559496.011 ops/s
# Warmup Iteration  13: 594856.154 ops/s
# Warmup Iteration  14: 570694.562 ops/s
# Warmup Iteration  15: 595984.120 ops/s
# Warmup Iteration  16: 572945.352 ops/s
# Warmup Iteration  17: 606440.000 ops/s
# Warmup Iteration  18: 630665.433 ops/s
# Warmup Iteration  19: 494578.522 ops/s
# Warmup Iteration  20: 598783.411 ops/s
# Warmup Iteration  21: 624669.995 ops/s
# Warmup Iteration  22: 608845.442 ops/s
# Warmup Iteration  23: 584831.793 ops/s
# Warmup Iteration  24: 599285.785 ops/s
# Warmup Iteration  25: 592190.661 ops/s
# Warmup Iteration  26: 606217.262 ops/s
# Warmup Iteration  27: 639730.506 ops/s
# Warmup Iteration  28: 600065.726 ops/s
# Warmup Iteration  29: 612253.708 ops/s
# Warmup Iteration  30: 592776.180 ops/s
Iteration   1: 629925.844 ops/s
Iteration   2: 600640.885 ops/s
Iteration   3: 601378.468 ops/s
Iteration   4: 617867.461 ops/s
Iteration   5: 595738.831 ops/s
Iteration   6: 606340.113 ops/s
Iteration   7: 627245.344 ops/s
Iteration   8: 587812.151 ops/s
Iteration   9: 611643.135 ops/s
Iteration  10: 616594.289 ops/s
Iteration  11: 625755.021 ops/s
Iteration  12: 594399.106 ops/s
Iteration  13: 599883.107 ops/s
Iteration  14: 610293.487 ops/s
Iteration  15: 584760.742 ops/s
Iteration  16: 591677.798 ops/s
Iteration  17: 623503.036 ops/s
Iteration  18: 586310.288 ops/s
Iteration  19: 588564.299 ops/s
Iteration  20: 632321.859 ops/s
Iteration  21: 576470.897 ops/s
Iteration  22: 622094.733 ops/s
Iteration  23: 626694.132 ops/s
Iteration  24: 598308.450 ops/s
Iteration  25: 620693.855 ops/s
Iteration  26: 614542.208 ops/s
Iteration  27: 623838.496 ops/s
Iteration  28: 593472.965 ops/s
Iteration  29: 611064.608 ops/s
Iteration  30: 628953.463 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromTest._Benchmark.benchmark_sourceThrows":
  608292.969 ±(99.9%) 10744.409 ops/s [Average]
  (min, avg, max) = (576470.897, 608292.969, 632321.859), stdev = 16081.727
  CI (99.9%): [597548.560, 619037.378] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score       Error  Units
ObservableWithLatestFromTest._Benchmark.benchmark_sourceThrows  thrpt   30  608292.969 ± 10744.409  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromTest._Benchmark.benchmark_otherThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromTest._Benchmark.benchmark_otherThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 95014.734 ops/s
# Warmup Iteration   2: 392145.733 ops/s
# Warmup Iteration   3: 522849.713 ops/s
# Warmup Iteration   4: 596321.608 ops/s
# Warmup Iteration   5: 587357.543 ops/s
# Warmup Iteration   6: 579372.732 ops/s
# Warmup Iteration   7: 586434.761 ops/s
# Warmup Iteration   8: 560242.464 ops/s
# Warmup Iteration   9: 616832.467 ops/s
# Warmup Iteration  10: 588028.347 ops/s
# Warmup Iteration  11: 564488.899 ops/s
# Warmup Iteration  12: 571800.561 ops/s
# Warmup Iteration  13: 576078.796 ops/s
# Warmup Iteration  14: 607607.778 ops/s
# Warmup Iteration  15: 581564.232 ops/s
# Warmup Iteration  16: 609936.824 ops/s
# Warmup Iteration  17: 601990.127 ops/s
# Warmup Iteration  18: 628695.067 ops/s
# Warmup Iteration  19: 636951.168 ops/s
# Warmup Iteration  20: 594020.294 ops/s
# Warmup Iteration  21: 629367.398 ops/s
# Warmup Iteration  22: 616010.426 ops/s
# Warmup Iteration  23: 611886.542 ops/s
# Warmup Iteration  24: 593578.702 ops/s
# Warmup Iteration  25: 623768.478 ops/s
# Warmup Iteration  26: 600488.609 ops/s
# Warmup Iteration  27: 621328.833 ops/s
# Warmup Iteration  28: 599764.575 ops/s
# Warmup Iteration  29: 632931.460 ops/s
# Warmup Iteration  30: 650746.174 ops/s
Iteration   1: 598960.277 ops/s
Iteration   2: 641880.181 ops/s
Iteration   3: 605092.483 ops/s
Iteration   4: 637569.947 ops/s
Iteration   5: 589778.846 ops/s
Iteration   6: 621660.635 ops/s
Iteration   7: 600951.636 ops/s
Iteration   8: 606389.591 ops/s
Iteration   9: 632774.650 ops/s
Iteration  10: 617103.241 ops/s
Iteration  11: 636858.986 ops/s
Iteration  12: 608728.172 ops/s
Iteration  13: 627260.375 ops/s
Iteration  14: 607978.269 ops/s
Iteration  15: 638382.118 ops/s
Iteration  16: 600990.287 ops/s
Iteration  17: 614362.329 ops/s
Iteration  18: 630054.604 ops/s
Iteration  19: 606775.879 ops/s
Iteration  20: 631474.672 ops/s
Iteration  21: 594928.387 ops/s
Iteration  22: 638304.012 ops/s
Iteration  23: 604565.539 ops/s
Iteration  24: 635636.036 ops/s
Iteration  25: 579705.175 ops/s
Iteration  26: 629021.990 ops/s
Iteration  27: 623598.544 ops/s
Iteration  28: 615045.647 ops/s
Iteration  29: 637833.721 ops/s
Iteration  30: 615017.859 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromTest._Benchmark.benchmark_otherThrows":
  617622.803 ±(99.9%) 11232.911 ops/s [Average]
  (min, avg, max) = (579705.175, 617622.803, 641880.181), stdev = 16812.893
  CI (99.9%): [606389.892, 628855.714] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score       Error  Units
ObservableWithLatestFromTest._Benchmark.benchmark_otherThrows  thrpt   30  617622.803 ± 11232.911  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableScalarXMapTest._Benchmark.benchmark_scalarMapToEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableScalarXMapTest._Benchmark.benchmark_scalarMapToEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2530265.760 ops/s
# Warmup Iteration   2: 7250889.027 ops/s
# Warmup Iteration   3: 10486066.481 ops/s
# Warmup Iteration   4: 10204780.704 ops/s
# Warmup Iteration   5: 10629749.538 ops/s
# Warmup Iteration   6: 10518138.386 ops/s
# Warmup Iteration   7: 10194873.112 ops/s
# Warmup Iteration   8: 10555642.823 ops/s
# Warmup Iteration   9: 10051219.748 ops/s
# Warmup Iteration  10: 10347267.744 ops/s
# Warmup Iteration  11: 10892589.466 ops/s
# Warmup Iteration  12: 10260121.189 ops/s
# Warmup Iteration  13: 10755579.449 ops/s
# Warmup Iteration  14: 8454123.698 ops/s
# Warmup Iteration  15: 10464892.093 ops/s
# Warmup Iteration  16: 10732622.984 ops/s
# Warmup Iteration  17: 10655334.204 ops/s
# Warmup Iteration  18: 10130700.376 ops/s
# Warmup Iteration  19: 10647890.802 ops/s
# Warmup Iteration  20: 10150115.301 ops/s
# Warmup Iteration  21: 10563751.242 ops/s
# Warmup Iteration  22: 10307940.943 ops/s
# Warmup Iteration  23: 10656809.551 ops/s
# Warmup Iteration  24: 10382181.261 ops/s
# Warmup Iteration  25: 10262918.904 ops/s
# Warmup Iteration  26: 10997601.748 ops/s
# Warmup Iteration  27: 9955054.474 ops/s
# Warmup Iteration  28: 10507257.292 ops/s
# Warmup Iteration  29: 10661072.208 ops/s
# Warmup Iteration  30: 10502779.268 ops/s
Iteration   1: 10492081.940 ops/s
Iteration   2: 10332366.907 ops/s
Iteration   3: 10949149.509 ops/s
Iteration   4: 10301036.208 ops/s
Iteration   5: 9862593.736 ops/s
Iteration   6: 10821537.377 ops/s
Iteration   7: 10455845.196 ops/s
Iteration   8: 10540923.624 ops/s
Iteration   9: 10440307.239 ops/s
Iteration  10: 10535746.885 ops/s
Iteration  11: 10449437.845 ops/s
Iteration  12: 10459788.398 ops/s
Iteration  13: 10459888.703 ops/s
Iteration  14: 10349946.303 ops/s
Iteration  15: 10791759.002 ops/s
Iteration  16: 10546632.849 ops/s
Iteration  17: 10799164.995 ops/s
Iteration  18: 10573626.654 ops/s
Iteration  19: 10705852.510 ops/s
Iteration  20: 10326934.550 ops/s
Iteration  21: 10530635.685 ops/s
Iteration  22: 10458331.877 ops/s
Iteration  23: 10295260.684 ops/s
Iteration  24: 10508234.397 ops/s
Iteration  25: 10392378.335 ops/s
Iteration  26: 10773163.038 ops/s
Iteration  27: 10291619.669 ops/s
Iteration  28: 10465072.112 ops/s
Iteration  29: 10616358.927 ops/s
Iteration  30: 10119788.392 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableScalarXMapTest._Benchmark.benchmark_scalarMapToEmpty":
  10488182.118 ±(99.9%) 146790.023 ops/s [Average]
  (min, avg, max) = (9862593.736, 10488182.118, 10949149.509), stdev = 219708.413
  CI (99.9%): [10341392.095, 10634972.141] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt         Score        Error  Units
ObservableScalarXMapTest._Benchmark.benchmark_scalarMapToEmpty  thrpt   30  10488182.118 ± 146790.023  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMergeDelayErrorTest._Benchmark.benchmark_mergeIterableDelayErrorWithErrorMaxConcurrency$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMergeDelayErrorTest._Benchmark.benchmark_mergeIterableDelayErrorWithErrorMaxConcurrency

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.746 ops/s
# Warmup Iteration   2: 18623.450 ops/s
# Warmup Iteration   3: 62729.345 ops/s
# Warmup Iteration   4: 67529.363 ops/s
# Warmup Iteration   5: 95522.215 ops/s
# Warmup Iteration   6: 91505.025 ops/s
# Warmup Iteration   7: 142078.010 ops/s
# Warmup Iteration   8: 237648.854 ops/s
# Warmup Iteration   9: 256390.806 ops/s
# Warmup Iteration  10: 283224.440 ops/s
# Warmup Iteration  11: 260529.477 ops/s
# Warmup Iteration  12: 268846.638 ops/s
# Warmup Iteration  13: 287336.012 ops/s
# Warmup Iteration  14: 258990.885 ops/s
# Warmup Iteration  15: 275678.822 ops/s
# Warmup Iteration  16: 266819.042 ops/s
# Warmup Iteration  17: 275261.086 ops/s
# Warmup Iteration  18: 268533.531 ops/s
# Warmup Iteration  19: 271233.222 ops/s
# Warmup Iteration  20: 282673.503 ops/s
# Warmup Iteration  21: 264753.817 ops/s
# Warmup Iteration  22: 267238.549 ops/s
# Warmup Iteration  23: 264812.627 ops/s
# Warmup Iteration  24: 267247.567 ops/s
# Warmup Iteration  25: 273408.045 ops/s
# Warmup Iteration  26: 278681.808 ops/s
# Warmup Iteration  27: 257192.585 ops/s
# Warmup Iteration  28: 277085.788 ops/s
# Warmup Iteration  29: 264593.878 ops/s
# Warmup Iteration  30: 277254.523 ops/s
Iteration   1: 274974.256 ops/s
Iteration   2: 263905.428 ops/s
Iteration   3: 277691.157 ops/s
Iteration   4: 258237.591 ops/s
Iteration   5: 273270.907 ops/s
Iteration   6: 280610.679 ops/s
Iteration   7: 266974.771 ops/s
Iteration   8: 274208.334 ops/s
Iteration   9: 269071.658 ops/s
Iteration  10: 272023.996 ops/s
Iteration  11: 276074.394 ops/s
Iteration  12: 272842.332 ops/s
Iteration  13: 279689.000 ops/s
Iteration  14: 262923.000 ops/s
Iteration  15: 268128.069 ops/s
Iteration  16: 283895.739 ops/s
Iteration  17: 262345.647 ops/s
Iteration  18: 280548.529 ops/s
Iteration  19: 271754.303 ops/s
Iteration  20: 272195.299 ops/s
Iteration  21: 277016.521 ops/s
Iteration  22: 279434.395 ops/s
Iteration  23: 270949.684 ops/s
Iteration  24: 263611.439 ops/s
Iteration  25: 282778.572 ops/s
Iteration  26: 270173.048 ops/s
Iteration  27: 283570.176 ops/s
Iteration  28: 277383.471 ops/s
Iteration  29: 273062.098 ops/s
Iteration  30: 271555.688 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableMergeDelayErrorTest._Benchmark.benchmark_mergeIterableDelayErrorWithErrorMaxConcurrency":
  273030.006 ±(99.9%) 4466.533 ops/s [Average]
  (min, avg, max) = (258237.591, 273030.006, 283895.739), stdev = 6685.297
  CI (99.9%): [268563.473, 277496.539] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                           Mode  Cnt       Score      Error  Units
ObservableMergeDelayErrorTest._Benchmark.benchmark_mergeIterableDelayErrorWithErrorMaxConcurrency  thrpt   30  273030.006 ± 4466.533  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.observable.ObservableConcatTests._Benchmark.benchmark_concatSimple$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.observable.ObservableConcatTests._Benchmark.benchmark_concatSimple

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 228747.241 ops/s
# Warmup Iteration   2: 1605532.477 ops/s
# Warmup Iteration   3: 2425251.559 ops/s
# Warmup Iteration   4: 2419754.714 ops/s
# Warmup Iteration   5: 2370052.614 ops/s
# Warmup Iteration   6: 2394521.079 ops/s
# Warmup Iteration   7: 2467350.237 ops/s
# Warmup Iteration   8: 2392311.115 ops/s
# Warmup Iteration   9: 1884319.861 ops/s
# Warmup Iteration  10: 2270279.481 ops/s
# Warmup Iteration  11: 2385784.222 ops/s
# Warmup Iteration  12: 2442621.454 ops/s
# Warmup Iteration  13: 2360127.967 ops/s
# Warmup Iteration  14: 2367668.966 ops/s
# Warmup Iteration  15: 2425570.597 ops/s
# Warmup Iteration  16: 2400756.296 ops/s
# Warmup Iteration  17: 2415060.702 ops/s
# Warmup Iteration  18: 2318233.927 ops/s
# Warmup Iteration  19: 2414403.072 ops/s
# Warmup Iteration  20: 2446407.001 ops/s
# Warmup Iteration  21: 2517908.986 ops/s
# Warmup Iteration  22: 2394125.748 ops/s
# Warmup Iteration  23: 2525091.649 ops/s
# Warmup Iteration  24: 2364470.806 ops/s
# Warmup Iteration  25: 2393054.794 ops/s
# Warmup Iteration  26: 2509219.878 ops/s
# Warmup Iteration  27: 2383815.288 ops/s
# Warmup Iteration  28: 2403534.414 ops/s
# Warmup Iteration  29: 2481901.896 ops/s
# Warmup Iteration  30: 2400813.461 ops/s
Iteration   1: 2505385.721 ops/s
Iteration   2: 2365503.773 ops/s
Iteration   3: 2435066.921 ops/s
Iteration   4: 2483081.539 ops/s
Iteration   5: 2414443.835 ops/s
Iteration   6: 2464333.164 ops/s
Iteration   7: 2407759.028 ops/s
Iteration   8: 2371363.713 ops/s
Iteration   9: 2504405.563 ops/s
Iteration  10: 2461451.680 ops/s
Iteration  11: 2397504.242 ops/s
Iteration  12: 2358160.030 ops/s
Iteration  13: 2461995.983 ops/s
Iteration  14: 2373079.287 ops/s
Iteration  15: 2468271.432 ops/s
Iteration  16: 2481372.936 ops/s
Iteration  17: 2391465.771 ops/s
Iteration  18: 2487111.499 ops/s
Iteration  19: 2363035.664 ops/s
Iteration  20: 2475341.937 ops/s
Iteration  21: 2363226.379 ops/s
Iteration  22: 2465208.982 ops/s
Iteration  23: 2375978.727 ops/s
Iteration  24: 2451598.260 ops/s
Iteration  25: 2346104.468 ops/s
Iteration  26: 2408592.263 ops/s
Iteration  27: 2430947.784 ops/s
Iteration  28: 2365550.016 ops/s
Iteration  29: 2427671.437 ops/s
Iteration  30: 2375703.736 ops/s


Result "io.reactivex.rxjava3.observable.ObservableConcatTests._Benchmark.benchmark_concatSimple":
  2422690.526 ±(99.9%) 33410.637 ops/s [Average]
  (min, avg, max) = (2346104.468, 2422690.526, 2505385.721), stdev = 50007.472
  CI (99.9%): [2389279.889, 2456101.163] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
ObservableConcatTests._Benchmark.benchmark_concatSimple  thrpt   30  2422690.526 ± 33410.637  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.observable.ObservableConcatTests._Benchmark.benchmark_concatCovariance3$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.observable.ObservableConcatTests._Benchmark.benchmark_concatCovariance3

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 146956.833 ops/s
# Warmup Iteration   2: 817041.625 ops/s
# Warmup Iteration   3: 2250611.099 ops/s
# Warmup Iteration   4: 2264654.620 ops/s
# Warmup Iteration   5: 2324447.476 ops/s
# Warmup Iteration   6: 2061562.351 ops/s
# Warmup Iteration   7: 2161315.083 ops/s
# Warmup Iteration   8: 2308517.775 ops/s
# Warmup Iteration   9: 2306155.140 ops/s
# Warmup Iteration  10: 2386078.069 ops/s
# Warmup Iteration  11: 2390660.684 ops/s
# Warmup Iteration  12: 2190118.579 ops/s
# Warmup Iteration  13: 2465371.246 ops/s
# Warmup Iteration  14: 2441963.919 ops/s
# Warmup Iteration  15: 2294267.831 ops/s
# Warmup Iteration  16: 2408017.480 ops/s
# Warmup Iteration  17: 2276860.190 ops/s
# Warmup Iteration  18: 2299327.189 ops/s
# Warmup Iteration  19: 2398169.175 ops/s
# Warmup Iteration  20: 2319601.063 ops/s
# Warmup Iteration  21: 2352249.666 ops/s
# Warmup Iteration  22: 2314841.229 ops/s
# Warmup Iteration  23: 2420014.551 ops/s
# Warmup Iteration  24: 2292743.252 ops/s
# Warmup Iteration  25: 2309222.510 ops/s
# Warmup Iteration  26: 2390838.262 ops/s
# Warmup Iteration  27: 2289387.648 ops/s
# Warmup Iteration  28: 2391027.713 ops/s
# Warmup Iteration  29: 2418285.153 ops/s
# Warmup Iteration  30: 2417162.702 ops/s
Iteration   1: 2412192.143 ops/s
Iteration   2: 2329375.487 ops/s
Iteration   3: 2405986.071 ops/s
Iteration   4: 2283928.214 ops/s
Iteration   5: 2340417.076 ops/s
Iteration   6: 2276951.784 ops/s
Iteration   7: 2288470.315 ops/s
Iteration   8: 2326133.168 ops/s
Iteration   9: 2423164.347 ops/s
Iteration  10: 2206597.701 ops/s
Iteration  11: 2286464.618 ops/s
Iteration  12: 2367175.269 ops/s
Iteration  13: 2301483.208 ops/s
Iteration  14: 2296334.327 ops/s
Iteration  15: 2419725.264 ops/s
Iteration  16: 2345670.692 ops/s
Iteration  17: 2316879.852 ops/s
Iteration  18: 2407874.816 ops/s
Iteration  19: 2316857.183 ops/s
Iteration  20: 2318052.716 ops/s
Iteration  21: 2401457.655 ops/s
Iteration  22: 2324665.627 ops/s
Iteration  23: 2408131.145 ops/s
Iteration  24: 2290579.661 ops/s
Iteration  25: 2329236.864 ops/s
Iteration  26: 2429420.611 ops/s
Iteration  27: 2282815.595 ops/s
Iteration  28: 2390488.092 ops/s
Iteration  29: 2416105.356 ops/s
Iteration  30: 2323690.174 ops/s


Result "io.reactivex.rxjava3.observable.ObservableConcatTests._Benchmark.benchmark_concatCovariance3":
  2342210.834 ±(99.9%) 38207.078 ops/s [Average]
  (min, avg, max) = (2206597.701, 2342210.834, 2429420.611), stdev = 57186.560
  CI (99.9%): [2304003.757, 2380417.912] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
ObservableConcatTests._Benchmark.benchmark_concatCovariance3  thrpt   30  2342210.834 ± 38207.078  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapTest._Benchmark.benchmark_failingFusedInnerCancelsSource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapTest._Benchmark.benchmark_failingFusedInnerCancelsSource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 55826.381 ops/s
# Warmup Iteration   2: 213570.664 ops/s
# Warmup Iteration   3: 307868.882 ops/s
# Warmup Iteration   4: 311534.670 ops/s
# Warmup Iteration   5: 361939.076 ops/s
# Warmup Iteration   6: 336231.551 ops/s
# Warmup Iteration   7: 382392.054 ops/s
# Warmup Iteration   8: 382157.397 ops/s
# Warmup Iteration   9: 394364.529 ops/s
# Warmup Iteration  10: 373959.481 ops/s
# Warmup Iteration  11: 376619.433 ops/s
# Warmup Iteration  12: 394696.477 ops/s
# Warmup Iteration  13: 376623.232 ops/s
# Warmup Iteration  14: 387637.461 ops/s
# Warmup Iteration  15: 379650.040 ops/s
# Warmup Iteration  16: 387372.972 ops/s
# Warmup Iteration  17: 400462.238 ops/s
# Warmup Iteration  18: 401434.601 ops/s
# Warmup Iteration  19: 388692.842 ops/s
# Warmup Iteration  20: 409376.208 ops/s
# Warmup Iteration  21: 407408.307 ops/s
# Warmup Iteration  22: 391428.046 ops/s
# Warmup Iteration  23: 413422.343 ops/s
# Warmup Iteration  24: 404071.021 ops/s
# Warmup Iteration  25: 375234.113 ops/s
# Warmup Iteration  26: 410045.026 ops/s
# Warmup Iteration  27: 397411.589 ops/s
# Warmup Iteration  28: 390137.700 ops/s
# Warmup Iteration  29: 413933.253 ops/s
# Warmup Iteration  30: 389052.308 ops/s
Iteration   1: 405934.499 ops/s
Iteration   2: 389480.446 ops/s
Iteration   3: 388034.408 ops/s
Iteration   4: 408685.711 ops/s
Iteration   5: 385956.214 ops/s
Iteration   6: 407158.932 ops/s
Iteration   7: 394858.060 ops/s
Iteration   8: 396737.314 ops/s
Iteration   9: 400266.910 ops/s
Iteration  10: 387277.426 ops/s
Iteration  11: 409883.801 ops/s
Iteration  12: 393969.387 ops/s
Iteration  13: 402001.481 ops/s
Iteration  14: 396012.649 ops/s
Iteration  15: 401492.057 ops/s
Iteration  16: 392995.913 ops/s
Iteration  17: 410147.948 ops/s
Iteration  18: 381969.214 ops/s
Iteration  19: 405895.880 ops/s
Iteration  20: 393792.105 ops/s
Iteration  21: 395644.275 ops/s
Iteration  22: 394502.424 ops/s
Iteration  23: 405958.371 ops/s
Iteration  24: 391629.369 ops/s
Iteration  25: 397270.509 ops/s
Iteration  26: 408330.281 ops/s
Iteration  27: 384659.698 ops/s
Iteration  28: 392434.576 ops/s
Iteration  29: 416129.869 ops/s
Iteration  30: 388952.109 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapTest._Benchmark.benchmark_failingFusedInnerCancelsSource":
  397602.061 ±(99.9%) 5888.242 ops/s [Average]
  (min, avg, max) = (381969.214, 397602.061, 416129.869), stdev = 8813.244
  CI (99.9%): [391713.819, 403490.303] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score      Error  Units
ObservableFlatMapTest._Benchmark.benchmark_failingFusedInnerCancelsSource  thrpt   30  397602.061 ± 5888.242  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableStartWithTest._Benchmark.benchmark_emptyCompletableComplete$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableStartWithTest._Benchmark.benchmark_emptyCompletableComplete

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 795956.858 ops/s
# Warmup Iteration   2: 2246632.944 ops/s
# Warmup Iteration   3: 2752230.468 ops/s
# Warmup Iteration   4: 2828489.890 ops/s
# Warmup Iteration   5: 2896158.254 ops/s
# Warmup Iteration   6: 2708757.370 ops/s
# Warmup Iteration   7: 2775894.649 ops/s
# Warmup Iteration   8: 2759787.905 ops/s
# Warmup Iteration   9: 2707320.766 ops/s
# Warmup Iteration  10: 2792246.718 ops/s
# Warmup Iteration  11: 2771612.848 ops/s
# Warmup Iteration  12: 2769956.857 ops/s
# Warmup Iteration  13: 2824905.352 ops/s
# Warmup Iteration  14: 2687885.687 ops/s
# Warmup Iteration  15: 2786109.844 ops/s
# Warmup Iteration  16: 2812220.763 ops/s
# Warmup Iteration  17: 2753973.922 ops/s
# Warmup Iteration  18: 2793251.181 ops/s
# Warmup Iteration  19: 2871018.694 ops/s
# Warmup Iteration  20: 2727121.071 ops/s
# Warmup Iteration  21: 2844634.924 ops/s
# Warmup Iteration  22: 2810760.708 ops/s
# Warmup Iteration  23: 2787513.590 ops/s
# Warmup Iteration  24: 2894317.328 ops/s
# Warmup Iteration  25: 2823207.637 ops/s
# Warmup Iteration  26: 2806948.140 ops/s
# Warmup Iteration  27: 2855853.968 ops/s
# Warmup Iteration  28: 2713098.285 ops/s
# Warmup Iteration  29: 2857395.357 ops/s
# Warmup Iteration  30: 2603778.134 ops/s
Iteration   1: 2820130.542 ops/s
Iteration   2: 2953066.978 ops/s
Iteration   3: 2793700.814 ops/s
Iteration   4: 2838569.945 ops/s
Iteration   5: 2916447.231 ops/s
Iteration   6: 2816960.569 ops/s
Iteration   7: 2817312.320 ops/s
Iteration   8: 2754916.500 ops/s
Iteration   9: 2586425.144 ops/s
Iteration  10: 2840900.111 ops/s
Iteration  11: 2781694.511 ops/s
Iteration  12: 2895994.019 ops/s
Iteration  13: 2831231.746 ops/s
Iteration  14: 2797949.378 ops/s
Iteration  15: 2843228.833 ops/s
Iteration  16: 2762283.029 ops/s
Iteration  17: 2900722.570 ops/s
Iteration  18: 2720933.780 ops/s
Iteration  19: 2863018.783 ops/s
Iteration  20: 2966744.880 ops/s
Iteration  21: 2817485.685 ops/s
Iteration  22: 2819831.176 ops/s
Iteration  23: 2948159.222 ops/s
Iteration  24: 2765586.967 ops/s
Iteration  25: 2830041.806 ops/s
Iteration  26: 2815032.064 ops/s
Iteration  27: 2883309.037 ops/s
Iteration  28: 2807474.937 ops/s
Iteration  29: 2786422.915 ops/s
Iteration  30: 2463640.739 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableStartWithTest._Benchmark.benchmark_emptyCompletableComplete":
  2814640.541 ±(99.9%) 66773.525 ops/s [Average]
  (min, avg, max) = (2463640.739, 2814640.541, 2966744.880), stdev = 99943.477
  CI (99.9%): [2747867.016, 2881414.066] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
ObservableStartWithTest._Benchmark.benchmark_emptyCompletableComplete  thrpt   30  2814640.541 ± 66773.525  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.BlockingObservableLatestTest._Benchmark.benchmark_empty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.BlockingObservableLatestTest._Benchmark.benchmark_empty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 247924.955 ops/s
# Warmup Iteration   2: 651965.898 ops/s
# Warmup Iteration   3: 680599.674 ops/s
# Warmup Iteration   4: 703341.528 ops/s
# Warmup Iteration   5: 708135.727 ops/s
# Warmup Iteration   6: 724762.441 ops/s
# Warmup Iteration   7: 711448.552 ops/s
# Warmup Iteration   8: 700741.203 ops/s
# Warmup Iteration   9: 717805.363 ops/s
# Warmup Iteration  10: 718685.547 ops/s
# Warmup Iteration  11: 698198.212 ops/s
# Warmup Iteration  12: 702418.858 ops/s
# Warmup Iteration  13: 731814.499 ops/s
# Warmup Iteration  14: 707979.533 ops/s
# Warmup Iteration  15: 729660.631 ops/s
# Warmup Iteration  16: 729876.265 ops/s
# Warmup Iteration  17: 764142.278 ops/s
# Warmup Iteration  18: 790732.168 ops/s
# Warmup Iteration  19: 748608.911 ops/s
# Warmup Iteration  20: 772094.133 ops/s
# Warmup Iteration  21: 774038.613 ops/s
# Warmup Iteration  22: 752301.359 ops/s
# Warmup Iteration  23: 784583.091 ops/s
# Warmup Iteration  24: 770719.232 ops/s
# Warmup Iteration  25: 770607.003 ops/s
# Warmup Iteration  26: 776505.179 ops/s
# Warmup Iteration  27: 719579.570 ops/s
# Warmup Iteration  28: 757505.793 ops/s
# Warmup Iteration  29: 789932.423 ops/s
# Warmup Iteration  30: 718986.708 ops/s
Iteration   1: 786839.504 ops/s
Iteration   2: 761221.234 ops/s
Iteration   3: 772262.948 ops/s
Iteration   4: 804380.789 ops/s
Iteration   5: 738870.578 ops/s
Iteration   6: 774584.771 ops/s
Iteration   7: 777571.535 ops/s
Iteration   8: 756714.613 ops/s
Iteration   9: 780020.843 ops/s
Iteration  10: 742124.912 ops/s
Iteration  11: 795278.190 ops/s
Iteration  12: 779394.864 ops/s
Iteration  13: 755418.121 ops/s
Iteration  14: 777007.817 ops/s
Iteration  15: 754508.105 ops/s
Iteration  16: 776148.175 ops/s
Iteration  17: 757965.290 ops/s
Iteration  18: 756375.090 ops/s
Iteration  19: 778858.264 ops/s
Iteration  20: 747661.378 ops/s
Iteration  21: 789854.149 ops/s
Iteration  22: 739816.294 ops/s
Iteration  23: 771506.678 ops/s
Iteration  24: 746378.105 ops/s
Iteration  25: 775033.630 ops/s
Iteration  26: 802124.008 ops/s
Iteration  27: 762800.431 ops/s
Iteration  28: 778342.176 ops/s
Iteration  29: 759373.150 ops/s
Iteration  30: 761333.479 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.BlockingObservableLatestTest._Benchmark.benchmark_empty":
  768658.971 ±(99.9%) 11771.307 ops/s [Average]
  (min, avg, max) = (738870.578, 768658.971, 804380.789), stdev = 17618.739
  CI (99.9%): [756887.664, 780430.277] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score       Error  Units
BlockingObservableLatestTest._Benchmark.benchmark_empty  thrpt   30  768658.971 ± 11771.307  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableFromOptionalTest._Benchmark.benchmark_empty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableFromOptionalTest._Benchmark.benchmark_empty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2770357.150 ops/s
# Warmup Iteration   2: 8291638.209 ops/s
# Warmup Iteration   3: 10401246.772 ops/s
# Warmup Iteration   4: 10835747.696 ops/s
# Warmup Iteration   5: 11364501.191 ops/s
# Warmup Iteration   6: 10562555.428 ops/s
# Warmup Iteration   7: 10855293.295 ops/s
# Warmup Iteration   8: 11156178.356 ops/s
# Warmup Iteration   9: 10515247.360 ops/s
# Warmup Iteration  10: 11237441.812 ops/s
# Warmup Iteration  11: 11536467.027 ops/s
# Warmup Iteration  12: 10473487.085 ops/s
# Warmup Iteration  13: 11260991.557 ops/s
# Warmup Iteration  14: 10547409.906 ops/s
# Warmup Iteration  15: 11229579.502 ops/s
# Warmup Iteration  16: 11076249.514 ops/s
# Warmup Iteration  17: 10617297.780 ops/s
# Warmup Iteration  18: 11244436.450 ops/s
# Warmup Iteration  19: 10780486.973 ops/s
# Warmup Iteration  20: 10820800.996 ops/s
# Warmup Iteration  21: 11009524.171 ops/s
# Warmup Iteration  22: 10749987.913 ops/s
# Warmup Iteration  23: 10838226.532 ops/s
# Warmup Iteration  24: 10574621.953 ops/s
# Warmup Iteration  25: 11042406.614 ops/s
# Warmup Iteration  26: 10603393.731 ops/s
# Warmup Iteration  27: 10763090.404 ops/s
# Warmup Iteration  28: 11143795.077 ops/s
# Warmup Iteration  29: 10488295.229 ops/s
# Warmup Iteration  30: 11003167.735 ops/s
Iteration   1: 10745684.503 ops/s
Iteration   2: 10845121.758 ops/s
Iteration   3: 11559886.839 ops/s
Iteration   4: 10744417.372 ops/s
Iteration   5: 11156737.518 ops/s
Iteration   6: 10646077.377 ops/s
Iteration   7: 10716829.140 ops/s
Iteration   8: 11031579.536 ops/s
Iteration   9: 10919706.225 ops/s
Iteration  10: 11088238.124 ops/s
Iteration  11: 10617041.091 ops/s
Iteration  12: 10872179.539 ops/s
Iteration  13: 10700478.225 ops/s
Iteration  14: 10976159.378 ops/s
Iteration  15: 11111279.775 ops/s
Iteration  16: 11162210.289 ops/s
Iteration  17: 10633741.392 ops/s
Iteration  18: 10984967.324 ops/s
Iteration  19: 10635438.561 ops/s
Iteration  20: 10876517.045 ops/s
Iteration  21: 10489364.100 ops/s
Iteration  22: 11065931.713 ops/s
Iteration  23: 11045744.559 ops/s
Iteration  24: 10568106.136 ops/s
Iteration  25: 9218397.092 ops/s
Iteration  26: 10983292.618 ops/s
Iteration  27: 10862696.248 ops/s
Iteration  28: 10783326.118 ops/s
Iteration  29: 10814161.164 ops/s
Iteration  30: 11050764.629 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableFromOptionalTest._Benchmark.benchmark_empty":
  10830202.513 ±(99.9%) 252840.600 ops/s [Average]
  (min, avg, max) = (9218397.092, 10830202.513, 11559886.839), stdev = 378439.935
  CI (99.9%): [10577361.913, 11083043.112] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt         Score        Error  Units
ObservableFromOptionalTest._Benchmark.benchmark_empty  thrpt   30  10830202.513 ± 252840.600  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNextTest._Benchmark.benchmark_interrupt$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNextTest._Benchmark.benchmark_interrupt

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 120744.546 ops/s
# Warmup Iteration   2: 264014.906 ops/s
# Warmup Iteration   3: 295283.160 ops/s
# Warmup Iteration   4: 293497.265 ops/s
# Warmup Iteration   5: 300297.521 ops/s
# Warmup Iteration   6: 284566.070 ops/s
# Warmup Iteration   7: 276427.578 ops/s
# Warmup Iteration   8: 303377.151 ops/s
# Warmup Iteration   9: 293638.406 ops/s
# Warmup Iteration  10: 286635.299 ops/s
# Warmup Iteration  11: 291581.492 ops/s
# Warmup Iteration  12: 285447.026 ops/s
# Warmup Iteration  13: 295364.371 ops/s
# Warmup Iteration  14: 287580.056 ops/s
# Warmup Iteration  15: 299732.090 ops/s
# Warmup Iteration  16: 286135.111 ops/s
# Warmup Iteration  17: 291834.379 ops/s
# Warmup Iteration  18: 306041.402 ops/s
# Warmup Iteration  19: 296243.510 ops/s
# Warmup Iteration  20: 302252.000 ops/s
# Warmup Iteration  21: 292119.246 ops/s
# Warmup Iteration  22: 306016.271 ops/s
# Warmup Iteration  23: 309865.001 ops/s
# Warmup Iteration  24: 318721.756 ops/s
# Warmup Iteration  25: 299350.008 ops/s
# Warmup Iteration  26: 316062.863 ops/s
# Warmup Iteration  27: 296951.312 ops/s
# Warmup Iteration  28: 306141.309 ops/s
# Warmup Iteration  29: 313509.736 ops/s
# Warmup Iteration  30: 304684.566 ops/s
Iteration   1: 315696.617 ops/s
Iteration   2: 296832.737 ops/s
Iteration   3: 325685.516 ops/s
Iteration   4: 297413.007 ops/s
Iteration   5: 313031.323 ops/s
Iteration   6: 305765.681 ops/s
Iteration   7: 303592.434 ops/s
Iteration   8: 313903.441 ops/s
Iteration   9: 301817.413 ops/s
Iteration  10: 316601.137 ops/s
Iteration  11: 304557.203 ops/s
Iteration  12: 307820.995 ops/s
Iteration  13: 318450.706 ops/s
Iteration  14: 296169.327 ops/s
Iteration  15: 311450.622 ops/s
Iteration  16: 299543.565 ops/s
Iteration  17: 313650.245 ops/s
Iteration  18: 312638.326 ops/s
Iteration  19: 303967.556 ops/s
Iteration  20: 312216.349 ops/s
Iteration  21: 304703.154 ops/s
Iteration  22: 320912.619 ops/s
Iteration  23: 295450.976 ops/s
Iteration  24: 304206.249 ops/s
Iteration  25: 319031.136 ops/s
Iteration  26: 296104.327 ops/s
Iteration  27: 320823.678 ops/s
Iteration  28: 293176.679 ops/s
Iteration  29: 300661.276 ops/s
Iteration  30: 303676.824 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNextTest._Benchmark.benchmark_interrupt":
  307651.704 ±(99.9%) 5954.251 ops/s [Average]
  (min, avg, max) = (293176.679, 307651.704, 325685.516), stdev = 8912.044
  CI (99.9%): [301697.453, 313605.955] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
BlockingObservableNextTest._Benchmark.benchmark_interrupt  thrpt   30  307651.704 ± 5954.251  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.BlockingObservableLatestTest._Benchmark.benchmark_interrupted$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.BlockingObservableLatestTest._Benchmark.benchmark_interrupted

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 134154.545 ops/s
# Warmup Iteration   2: 286337.166 ops/s
# Warmup Iteration   3: 321379.356 ops/s
# Warmup Iteration   4: 320333.583 ops/s
# Warmup Iteration   5: 338613.039 ops/s
# Warmup Iteration   6: 323264.090 ops/s
# Warmup Iteration   7: 332062.067 ops/s
# Warmup Iteration   8: 321597.981 ops/s
# Warmup Iteration   9: 323526.463 ops/s
# Warmup Iteration  10: 317869.727 ops/s
# Warmup Iteration  11: 337769.193 ops/s
# Warmup Iteration  12: 319215.915 ops/s
# Warmup Iteration  13: 345225.214 ops/s
# Warmup Iteration  14: 326301.356 ops/s
# Warmup Iteration  15: 329922.887 ops/s
# Warmup Iteration  16: 339880.772 ops/s
# Warmup Iteration  17: 342840.747 ops/s
# Warmup Iteration  18: 357492.039 ops/s
# Warmup Iteration  19: 349696.911 ops/s
# Warmup Iteration  20: 347851.603 ops/s
# Warmup Iteration  21: 353057.610 ops/s
# Warmup Iteration  22: 346984.120 ops/s
# Warmup Iteration  23: 352704.064 ops/s
# Warmup Iteration  24: 337006.118 ops/s
# Warmup Iteration  25: 352986.199 ops/s
# Warmup Iteration  26: 343576.621 ops/s
# Warmup Iteration  27: 356242.962 ops/s
# Warmup Iteration  28: 357733.144 ops/s
# Warmup Iteration  29: 337719.661 ops/s
# Warmup Iteration  30: 353287.845 ops/s
Iteration   1: 338574.940 ops/s
Iteration   2: 351675.484 ops/s
Iteration   3: 363344.707 ops/s
Iteration   4: 341113.673 ops/s
Iteration   5: 345332.273 ops/s
Iteration   6: 342272.931 ops/s
Iteration   7: 342926.359 ops/s
Iteration   8: 358146.876 ops/s
Iteration   9: 336346.158 ops/s
Iteration  10: 351021.485 ops/s
Iteration  11: 348018.892 ops/s
Iteration  12: 348469.165 ops/s
Iteration  13: 348408.710 ops/s
Iteration  14: 355452.297 ops/s
Iteration  15: 354860.675 ops/s
Iteration  16: 336450.039 ops/s
Iteration  17: 361878.558 ops/s
Iteration  18: 340621.876 ops/s
Iteration  19: 351274.922 ops/s
Iteration  20: 324154.010 ops/s
Iteration  21: 314234.410 ops/s
Iteration  22: 356788.945 ops/s
Iteration  23: 332893.962 ops/s
Iteration  24: 353060.130 ops/s
Iteration  25: 339889.107 ops/s
Iteration  26: 353137.195 ops/s
Iteration  27: 348643.873 ops/s
Iteration  28: 342266.185 ops/s
Iteration  29: 358974.086 ops/s
Iteration  30: 338344.981 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.BlockingObservableLatestTest._Benchmark.benchmark_interrupted":
  345952.564 ±(99.9%) 7283.075 ops/s [Average]
  (min, avg, max) = (314234.410, 345952.564, 363344.707), stdev = 10900.964
  CI (99.9%): [338669.489, 353235.638] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
BlockingObservableLatestTest._Benchmark.benchmark_interrupted  thrpt   30  345952.564 ± 7283.075  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableTest._Benchmark.benchmark_mapperReturnsNullObservable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableTest._Benchmark.benchmark_mapperReturnsNullObservable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 128383.359 ops/s
# Warmup Iteration   2: 490996.708 ops/s
# Warmup Iteration   3: 530073.844 ops/s
# Warmup Iteration   4: 562497.352 ops/s
# Warmup Iteration   5: 534382.621 ops/s
# Warmup Iteration   6: 590811.790 ops/s
# Warmup Iteration   7: 526020.521 ops/s
# Warmup Iteration   8: 593425.602 ops/s
# Warmup Iteration   9: 595142.784 ops/s
# Warmup Iteration  10: 578130.294 ops/s
# Warmup Iteration  11: 597630.815 ops/s
# Warmup Iteration  12: 576393.888 ops/s
# Warmup Iteration  13: 596345.088 ops/s
# Warmup Iteration  14: 578880.457 ops/s
# Warmup Iteration  15: 585283.682 ops/s
# Warmup Iteration  16: 603516.200 ops/s
# Warmup Iteration  17: 612438.072 ops/s
# Warmup Iteration  18: 616707.767 ops/s
# Warmup Iteration  19: 632045.392 ops/s
# Warmup Iteration  20: 612405.926 ops/s
# Warmup Iteration  21: 627095.479 ops/s
# Warmup Iteration  22: 606873.248 ops/s
# Warmup Iteration  23: 609495.827 ops/s
# Warmup Iteration  24: 619596.921 ops/s
# Warmup Iteration  25: 605511.874 ops/s
# Warmup Iteration  26: 610566.360 ops/s
# Warmup Iteration  27: 639462.334 ops/s
# Warmup Iteration  28: 618205.895 ops/s
# Warmup Iteration  29: 624797.328 ops/s
# Warmup Iteration  30: 625315.837 ops/s
Iteration   1: 631812.502 ops/s
Iteration   2: 607825.583 ops/s
Iteration   3: 639061.864 ops/s
Iteration   4: 595617.666 ops/s
Iteration   5: 632024.719 ops/s
Iteration   6: 591795.093 ops/s
Iteration   7: 618779.862 ops/s
Iteration   8: 631603.242 ops/s
Iteration   9: 608359.994 ops/s
Iteration  10: 603004.446 ops/s
Iteration  11: 639060.085 ops/s
Iteration  12: 602043.090 ops/s
Iteration  13: 641221.588 ops/s
Iteration  14: 608390.309 ops/s
Iteration  15: 588620.681 ops/s
Iteration  16: 623334.701 ops/s
Iteration  17: 600601.105 ops/s
Iteration  18: 605975.568 ops/s
Iteration  19: 605976.510 ops/s
Iteration  20: 596951.392 ops/s
Iteration  21: 643563.175 ops/s
Iteration  22: 607880.591 ops/s
Iteration  23: 620936.174 ops/s
Iteration  24: 610142.253 ops/s
Iteration  25: 619139.880 ops/s
Iteration  26: 624499.603 ops/s
Iteration  27: 619060.846 ops/s
Iteration  28: 620215.271 ops/s
Iteration  29: 613751.108 ops/s
Iteration  30: 601444.519 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableTest._Benchmark.benchmark_mapperReturnsNullObservable":
  615089.781 ±(99.9%) 10227.579 ops/s [Average]
  (min, avg, max) = (588620.681, 615089.781, 643563.175), stdev = 15308.159
  CI (99.9%): [604862.202, 625317.359] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           Mode  Cnt       Score       Error  Units
ObservableFlatMapCompletableTest._Benchmark.benchmark_mapperReturnsNullObservable  thrpt   30  615089.781 ± 10227.579  ops/s
----------------------------------------
